var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21404939419169117 ± 0.001402808033596257\n   G2(1) = 0.9162418582936004 ± 0.000647314767621542\n   G2(2) = 0.9830802221377067 ± 0.0006224434844602512\n   G2(3) = 0.9873064449456952 ± 0.0010140346471119175\n   G2(4) = 0.9830802221377067 ± 0.0006224434844602512\n   G2(5) = 0.9162418582936004 ± 0.000647314767621542\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.964292141124255 ± 0.16488801230805827\n   Replica 2: -3.991840461330928 ± 0.12574139224633446\n   Replica 3: -4.059707294319363 ± 0.1443366065779819\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip490\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip490)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip491\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip490)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip492\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.86 2211.02,1261.86 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.17 2211.02,1004.17 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.473 2211.02,746.473 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.778 2211.02,488.778 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.083 2211.02,231.083 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.86 423.181,1261.86 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.17 423.181,1004.17 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.473 423.181,746.473 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.778 423.181,488.778 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.083 423.181,231.083 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M356.339 1247.66 Q352.728 1247.66 350.899 1251.23 Q349.094 1254.77 349.094 1261.9 Q349.094 1269 350.899 1272.57 Q352.728 1276.11 356.339 1276.11 Q359.973 1276.11 361.779 1272.57 Q363.608 1269 363.608 1261.9 Q363.608 1254.77 361.779 1251.23 Q359.973 1247.66 356.339 1247.66 M356.339 1243.96 Q362.149 1243.96 365.205 1248.56 Q368.284 1253.15 368.284 1261.9 Q368.284 1270.62 365.205 1275.23 Q362.149 1279.81 356.339 1279.81 Q350.529 1279.81 347.45 1275.23 Q344.395 1270.62 344.395 1261.9 Q344.395 1253.15 347.45 1248.56 Q350.529 1243.96 356.339 1243.96 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M290.043 1017.51 L306.363 1017.51 L306.363 1021.45 L284.418 1021.45 L284.418 1017.51 Q287.08 1014.76 291.664 1010.13 Q296.27 1005.48 297.451 1004.13 Q299.696 1001.61 300.576 999.874 Q301.478 998.115 301.478 996.425 Q301.478 993.67 299.534 991.934 Q297.613 990.198 294.511 990.198 Q292.312 990.198 289.858 990.962 Q287.427 991.726 284.65 993.277 L284.65 988.555 Q287.474 987.42 289.927 986.842 Q292.381 986.263 294.418 986.263 Q299.789 986.263 302.983 988.948 Q306.177 991.633 306.177 996.124 Q306.177 998.254 305.367 1000.17 Q304.58 1002.07 302.474 1004.67 Q301.895 1005.34 298.793 1008.55 Q295.691 1011.75 290.043 1017.51 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M316.224 986.888 L334.58 986.888 L334.58 990.823 L320.506 990.823 L320.506 999.295 Q321.524 998.948 322.543 998.786 Q323.562 998.601 324.58 998.601 Q330.367 998.601 333.747 1001.77 Q337.126 1004.94 337.126 1010.36 Q337.126 1015.94 333.654 1019.04 Q330.182 1022.12 323.862 1022.12 Q321.687 1022.12 319.418 1021.75 Q317.173 1021.38 314.765 1020.64 L314.765 1015.94 Q316.849 1017.07 319.071 1017.63 Q321.293 1018.18 323.77 1018.18 Q327.774 1018.18 330.112 1016.08 Q332.45 1013.97 332.45 1010.36 Q332.45 1006.75 330.112 1004.64 Q327.774 1002.54 323.77 1002.54 Q321.895 1002.54 320.02 1002.95 Q318.168 1003.37 316.224 1004.25 L316.224 986.888 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M356.339 989.967 Q352.728 989.967 350.899 993.531 Q349.094 997.073 349.094 1004.2 Q349.094 1011.31 350.899 1014.87 Q352.728 1018.42 356.339 1018.42 Q359.973 1018.42 361.779 1014.87 Q363.608 1011.31 363.608 1004.2 Q363.608 997.073 361.779 993.531 Q359.973 989.967 356.339 989.967 M356.339 986.263 Q362.149 986.263 365.205 990.869 Q368.284 995.453 368.284 1004.2 Q368.284 1012.93 365.205 1017.54 Q362.149 1022.12 356.339 1022.12 Q350.529 1022.12 347.45 1017.54 Q344.395 1012.93 344.395 1004.2 Q344.395 995.453 347.45 990.869 Q350.529 986.263 356.339 986.263 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M286.062 729.193 L304.418 729.193 L304.418 733.128 L290.344 733.128 L290.344 741.6 Q291.363 741.253 292.381 741.091 Q293.4 740.906 294.418 740.906 Q300.205 740.906 303.585 744.077 Q306.964 747.249 306.964 752.665 Q306.964 758.244 303.492 761.346 Q300.02 764.424 293.701 764.424 Q291.525 764.424 289.256 764.054 Q287.011 763.684 284.603 762.943 L284.603 758.244 Q286.687 759.378 288.909 759.934 Q291.131 760.489 293.608 760.489 Q297.613 760.489 299.951 758.383 Q302.288 756.276 302.288 752.665 Q302.288 749.054 299.951 746.948 Q297.613 744.841 293.608 744.841 Q291.733 744.841 289.858 745.258 Q288.006 745.674 286.062 746.554 L286.062 729.193 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M326.177 732.272 Q322.566 732.272 320.737 735.837 Q318.932 739.378 318.932 746.508 Q318.932 753.614 320.737 757.179 Q322.566 760.721 326.177 760.721 Q329.811 760.721 331.617 757.179 Q333.446 753.614 333.446 746.508 Q333.446 739.378 331.617 735.837 Q329.811 732.272 326.177 732.272 M326.177 728.568 Q331.987 728.568 335.043 733.175 Q338.122 737.758 338.122 746.508 Q338.122 755.235 335.043 759.841 Q331.987 764.424 326.177 764.424 Q320.367 764.424 317.288 759.841 Q314.233 755.235 314.233 746.508 Q314.233 737.758 317.288 733.175 Q320.367 728.568 326.177 728.568 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M356.339 732.272 Q352.728 732.272 350.899 735.837 Q349.094 739.378 349.094 746.508 Q349.094 753.614 350.899 757.179 Q352.728 760.721 356.339 760.721 Q359.973 760.721 361.779 757.179 Q363.608 753.614 363.608 746.508 Q363.608 739.378 361.779 735.837 Q359.973 732.272 356.339 732.272 M356.339 728.568 Q362.149 728.568 365.205 733.175 Q368.284 737.758 368.284 746.508 Q368.284 755.235 365.205 759.841 Q362.149 764.424 356.339 764.424 Q350.529 764.424 347.45 759.841 Q344.395 755.235 344.395 746.508 Q344.395 737.758 347.45 733.175 Q350.529 728.568 356.339 728.568 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M284.835 471.498 L307.057 471.498 L307.057 473.489 L294.511 506.058 L289.627 506.058 L301.432 475.433 L284.835 475.433 L284.835 471.498 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M316.224 471.498 L334.58 471.498 L334.58 475.433 L320.506 475.433 L320.506 483.906 Q321.524 483.558 322.543 483.396 Q323.562 483.211 324.58 483.211 Q330.367 483.211 333.747 486.382 Q337.126 489.554 337.126 494.97 Q337.126 500.549 333.654 503.651 Q330.182 506.729 323.862 506.729 Q321.687 506.729 319.418 506.359 Q317.173 505.989 314.765 505.248 L314.765 500.549 Q316.849 501.683 319.071 502.239 Q321.293 502.794 323.77 502.794 Q327.774 502.794 330.112 500.688 Q332.45 498.581 332.45 494.97 Q332.45 491.359 330.112 489.253 Q327.774 487.146 323.77 487.146 Q321.895 487.146 320.02 487.563 Q318.168 487.98 316.224 488.859 L316.224 471.498 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M356.339 474.577 Q352.728 474.577 350.899 478.142 Q349.094 481.683 349.094 488.813 Q349.094 495.919 350.899 499.484 Q352.728 503.026 356.339 503.026 Q359.973 503.026 361.779 499.484 Q363.608 495.919 363.608 488.813 Q363.608 481.683 361.779 478.142 Q359.973 474.577 356.339 474.577 M356.339 470.873 Q362.149 470.873 365.205 475.48 Q368.284 480.063 368.284 488.813 Q368.284 497.54 365.205 502.146 Q362.149 506.729 356.339 506.729 Q350.529 506.729 347.45 502.146 Q344.395 497.54 344.395 488.813 Q344.395 480.063 347.45 475.48 Q350.529 470.873 356.339 470.873 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M256.664 244.428 L264.303 244.428 L264.303 218.063 L255.992 219.729 L255.992 215.47 L264.256 213.803 L268.932 213.803 L268.932 244.428 L276.571 244.428 L276.571 248.363 L256.664 248.363 L256.664 244.428 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M296.015 216.882 Q292.404 216.882 290.576 220.447 Q288.77 223.988 288.77 231.118 Q288.77 238.224 290.576 241.789 Q292.404 245.331 296.015 245.331 Q299.65 245.331 301.455 241.789 Q303.284 238.224 303.284 231.118 Q303.284 223.988 301.455 220.447 Q299.65 216.882 296.015 216.882 M296.015 213.178 Q301.826 213.178 304.881 217.785 Q307.96 222.368 307.96 231.118 Q307.96 239.845 304.881 244.451 Q301.826 249.035 296.015 249.035 Q290.205 249.035 287.127 244.451 Q284.071 239.845 284.071 231.118 Q284.071 222.368 287.127 217.785 Q290.205 213.178 296.015 213.178 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M326.177 216.882 Q322.566 216.882 320.737 220.447 Q318.932 223.988 318.932 231.118 Q318.932 238.224 320.737 241.789 Q322.566 245.331 326.177 245.331 Q329.811 245.331 331.617 241.789 Q333.446 238.224 333.446 231.118 Q333.446 223.988 331.617 220.447 Q329.811 216.882 326.177 216.882 M326.177 213.178 Q331.987 213.178 335.043 217.785 Q338.122 222.368 338.122 231.118 Q338.122 239.845 335.043 244.451 Q331.987 249.035 326.177 249.035 Q320.367 249.035 317.288 244.451 Q314.233 239.845 314.233 231.118 Q314.233 222.368 317.288 217.785 Q320.367 213.178 326.177 213.178 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M356.339 216.882 Q352.728 216.882 350.899 220.447 Q349.094 223.988 349.094 231.118 Q349.094 238.224 350.899 241.789 Q352.728 245.331 356.339 245.331 Q359.973 245.331 361.779 241.789 Q363.608 238.224 363.608 231.118 Q363.608 223.988 361.779 220.447 Q359.973 216.882 356.339 216.882 M356.339 213.178 Q362.149 213.178 365.205 217.785 Q368.284 222.368 368.284 231.118 Q368.284 239.845 365.205 244.451 Q362.149 249.035 356.339 249.035 Q350.529 249.035 347.45 244.451 Q344.395 239.845 344.395 231.118 Q344.395 222.368 347.45 217.785 Q350.529 213.178 356.339 213.178 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip492)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.083 4017.76,231.083 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.52 455.986,1250.53 456.554,1250.46 457.123,1250.31 457.691,1249.04 458.259,1248.78 458.828,1248.44 459.396,1248.07 459.964,1247.56 460.533,1247.02 461.101,1246.37 461.669,1245.64 462.238,1244.85 462.806,1243.97 463.375,1240.95 463.943,1239.94 464.511,1238.85 465.08,1236.62 465.648,1235.36 466.216,1233.97 466.785,1232.42 467.353,1230.79 467.921,1227.98 468.49,1226.09 469.058,1224.1 469.626,1221.97 470.195,1219.63 470.763,1216.11 471.331,1213.47 471.9,1210.66 472.468,1207.74 473.036,1204.62 473.605,1201.26 474.173,1197.7 474.741,1194 475.31,1190.03 475.878,1185.9 476.446,1181.53 477.015,1173.87 477.583,1167.98 478.152,1162.92 478.72,1155.51 479.288,1148.83 479.857,1141.97 480.425,1135.66 480.993,1129.22 481.562,1122.55 482.13,1115.63 482.698,1107.48 483.267,1099.1 483.835,1090.56 484.403,1081.77 484.972,1071.78 485.54,1060.23 486.108,1050.73 486.677,1042.04 487.245,1032.18 487.813,1023.25 488.382,1014.1 488.95,1004.76 489.518,994.267 490.087,983.652 490.655,973.041 491.224,963.279 491.792,952.385 492.36,942.541 492.929,931.616 493.497,920.54 494.065,908.343 494.634,897.1 495.202,886.061 495.77,874.971 496.339,864.875 496.907,853.827 497.475,842.819 498.044,831.843 498.612,820.793 499.18,808.727 499.749,793.809 500.317,782.156 500.885,770.665 501.454,757.109 502.022,743.807 502.59,733.838 503.159,722.853 503.727,709.976 504.295,701.394 504.864,688.807 505.432,676.57 506.001,667.448 506.569,656.473 507.137,647.637 507.706,640.028 508.274,633.382 508.842,621.618 509.411,614.066 509.979,604.743 510.547,597.53 511.116,588.256 511.684,581.281 512.252,574.673 512.821,566.734 513.389,558.987 513.957,550.187 514.526,543.717 515.094,535.281 515.662,530.125 516.231,522 516.799,516.049 517.367,511.211 517.936,505.236 518.504,499.42 519.072,492.609 519.641,483.695 520.209,478.29 520.778,470.118 521.346,461.923 521.914,454.997 522.483,449.458 523.051,443.999 523.619,437.63 524.188,432.298 524.756,427.232 525.324,423.188 525.893,416.29 526.461,410.536 527.029,406.158 527.598,399.788 528.166,395.723 528.734,390.586 529.303,385.613 529.871,380.71 530.439,379.188 531.008,376.605 531.576,373.925 532.144,371.236 532.713,368.693 533.281,368.112 533.85,365.437 534.418,361.84 534.986,359.224 535.555,354.569 536.123,351.238 536.691,346.902 537.26,346.937 537.828,344.705 538.396,341.485 538.965,340.487 539.533,336.338 540.101,333.343 540.67,331.444 541.238,329.6 541.806,326.86 542.375,326.007 542.943,323.135 543.511,321.311 544.08,317.579 544.648,316.003 545.216,314.239 545.785,311.731 546.353,311.279 546.921,308.848 547.49,305.523 548.058,304.217 548.627,303.003 549.195,301.486 549.763,298.158 550.332,296.989 550.9,296.022 551.468,294.792 552.037,292.544 552.605,289.542 553.173,285.686 553.742,284.866 554.31,282.272 554.878,280.702 555.447,278.341 556.015,279.228 556.583,278.81 557.152,277.474 557.72,276.194 558.288,275.797 558.857,274.444 559.425,272.974 559.993,268.58 560.562,265.629 561.13,263.781 561.698,263.154 562.267,262.46 562.835,264.191 563.404,264.264 563.972,265.416 564.54,265.442 565.109,265.306 565.677,265.086 566.245,263.805 566.814,262.711 567.382,261.89 567.95,263.022 568.519,261.832 569.087,262.754 569.655,261.448 570.224,262.438 570.792,262.315 571.36,262.223 571.929,260.761 572.497,260.831 573.065,259.623 573.634,259.465 574.202,259.417 574.77,259.35 575.339,259.053 575.907,259.059 576.476,257.85 577.044,257.898 577.612,257.773 578.181,258.681 578.749,256.376 579.317,257.362 579.886,257.017 580.454,256.743 581.022,255.752 581.591,255.536 582.159,255.315 582.727,255.072 583.296,251.604 583.864,250.469 584.432,249.431 585.001,248.515 585.569,247.577 586.137,248.804 586.706,247.045 587.274,246.217 587.842,245.344 588.411,244.542 588.979,243.982 589.547,242.487 590.116,241.842 590.684,240.157 591.253,239.952 591.821,239.592 592.389,240.443 592.958,240.083 593.526,239.763 594.094,241.209 594.663,240.789 595.231,239.24 595.799,240.808 596.368,243.464 596.936,245.959 597.504,246.251 598.073,246.454 598.641,244.58 599.209,243.8 599.778,246.445 600.346,246.511 600.914,244.859 601.483,245.157 602.051,243.357 602.619,243.492 603.188,242.75 603.756,243.194 604.325,245.369 604.893,244.511 605.461,243.686 606.03,244.866 606.598,243.859 607.166,244.147 607.735,242.071 608.303,241.372 608.871,238.515 609.44,240.102 610.008,241.514 610.576,241.914 611.145,243.078 611.713,244.11 612.281,242.147 612.85,241.435 613.418,240.546 613.986,239.759 614.555,241.376 615.123,241.651 615.691,241.902 616.26,243.218 616.828,244.383 617.396,242.515 617.965,242.66 618.533,242.826 619.102,243.98 619.67,244.864 620.238,244.624 620.807,246.584 621.375,244.313 621.943,242.096 622.512,241.001 623.08,242.159 623.648,240.157 624.217,239.434 624.785,239.722 625.353,239.178 625.922,239.626 626.49,237.558 627.058,237.977 627.627,237.327 628.195,238.855 628.763,240.293 629.332,239.287 629.9,240.546 630.468,241.649 631.037,240.586 631.605,240.606 632.173,239.509 632.742,238.718 633.31,237.869 633.879,239.244 634.447,238.258 635.015,237.611 635.584,238.786 636.152,237.788 636.72,235.99 637.289,234.313 637.857,235.823 638.425,236.374 638.994,235.771 639.562,232.943 640.13,233.522 640.699,232.012 641.267,230.469 641.835,230.196 642.404,230.875 642.972,235.702 643.54,237.056 644.109,236.198 644.677,237.367 645.245,237.797 645.814,238.055 646.382,237.196 646.951,237.481 647.519,239.941 648.087,241.068 648.656,240.934 649.224,242.923 649.792,239.713 650.361,239.603 650.929,242.926 651.497,241.813 652.066,242.909 652.634,241.82 653.202,240.775 653.771,237.799 654.339,236.823 654.907,235.814 655.476,236.121 656.044,236.507 656.612,236.838 657.181,239.121 657.749,239.102 658.317,238.87 658.886,236.808 659.454,235.902 660.022,236.914 660.591,237.818 661.159,239.01 661.728,236.94 662.296,237.19 662.864,239.484 663.433,237.35 664.001,237.794 664.569,239.077 665.138,239.024 665.706,239.898 666.274,240.779 666.843,239.484 667.411,241.385 667.979,240.256 668.548,241.159 669.116,240.797 669.684,240.596 670.253,240.385 670.821,239.258 671.389,239.289 671.958,237.997 672.526,237.799 673.094,240.739 673.663,240.186 674.231,240.811 674.799,242.56 675.368,241.224 675.936,241.928 676.505,240.338 677.073,238.824 677.641,239.455 678.21,239.148 678.778,238.982 679.346,239.601 679.915,238.257 680.483,236.931 681.051,236.57 681.62,236.349 682.188,236.235 682.756,232.154 683.325,232.487 683.893,232.747 684.461,230.709 685.03,230.655 685.598,234.034 686.166,232.192 686.735,230.331 687.303,231.683 687.871,231.123 688.44,230.478 689.008,228.742 689.577,227.256 690.145,228.014 690.713,229.54 691.282,232.198 691.85,234.575 692.418,234.67 692.987,234.616 693.555,236.832 694.123,239.022 694.692,239.864 695.26,239.696 695.828,239.762 696.397,238.365 696.965,236.998 697.533,236.887 698.102,235.645 698.67,235.628 699.238,234.549 699.807,234.504 700.375,233.317 700.943,233.275 701.512,234.513 702.08,232.69 702.648,234.023 703.217,233.848 703.785,233.863 704.354,232.956 704.922,231.028 705.49,231.395 706.059,230.722 706.627,232.085 707.195,231.293 707.764,230.543 708.332,228.978 708.9,229.379 709.469,231.844 710.037,233.004 710.605,230.951 711.174,229.994 711.742,228.261 712.31,230.977 712.879,231.302 713.447,232.412 714.015,232.733 714.584,228.952 715.152,229.177 715.72,230.698 716.289,231.821 716.857,232.22 717.425,231.454 717.994,230.788 718.562,231.329 719.131,231.766 719.699,230.977 720.267,232.143 720.836,232.322 721.404,232.423 721.972,231.378 722.541,231.552 723.109,231.782 723.677,229.964 724.246,233.445 724.814,234.809 725.382,234.965 725.951,232.904 726.519,233.36 727.087,234.483 727.656,233.55 728.224,235.76 728.792,233.771 729.361,234.894 729.929,235.075 730.497,232.27 731.066,229.738 731.634,233.096 732.203,234.189 732.771,235.269 733.339,236.195 733.908,236.105 734.476,236.97 735.044,237.708 735.613,236.351 736.181,233.234 736.749,233.252 737.318,235.223 737.886,237.373 738.454,237.162 739.023,239.982 739.591,238.627 740.159,239.364 740.728,236.818 741.296,235.552 741.864,236.29 742.433,237.315 743.001,233.861 743.569,233.926 744.138,233.769 744.706,232.883 745.274,234.132 745.843,233.076 746.411,234.125 746.98,235.061 747.548,235.989 748.116,235.751 748.685,233.636 749.253,234.847 749.821,231.473 750.39,231.78 750.958,229.871 751.526,232.227 752.095,232.274 752.663,234.234 753.231,229.869 753.8,231.195 754.368,231.518 754.936,232.571 755.505,231.524 756.073,230.532 756.641,230.633 757.21,230.624 757.778,230.806 758.346,231.931 758.915,233.02 759.483,232 760.052,231.124 760.62,229.212 761.188,230.624 761.757,226.724 762.325,228.143 762.893,228.58 763.462,228.086 764.03,230.416 764.598,230.39 765.167,230.704 765.735,229.717 766.303,228.906 766.872,228.485 767.44,230.751 768.008,232.749 768.577,232.649 769.145,231.619 769.713,229.759 770.282,231.211 770.85,233.381 771.418,234.469 771.987,234.584 772.555,233.317 773.123,230.006 773.692,230.193 774.26,230.454 774.829,228.465 775.397,228.817 775.965,227.989 776.534,226.38 777.102,226.732 777.67,225.233 778.239,224.825 778.807,226.583 779.375,228.138 779.944,226.569 780.512,226.099 781.08,227.774 781.649,228.303 782.217,231.889 782.785,234.338 783.354,235.321 783.922,236.407 784.49,236.357 785.059,234.121 785.627,235.204 786.195,235.228 786.764,236.978 787.332,237.832 787.9,236.515 788.469,235.26 789.037,236.284 789.606,236.221 790.174,236.192 790.742,235.041 791.311,235.042 791.879,232.737 792.447,231.886 793.016,230.038 793.584,231.202 794.152,230.264 794.721,230.496 795.289,230.847 795.857,231.102 796.426,231.49 796.994,235.696 797.562,235.611 798.131,236.435 798.699,238.441 799.267,237.962 799.836,237.51 800.404,236.163 800.972,237.249 801.541,236.168 802.109,237.131 802.678,236.931 803.246,235.468 803.814,235.178 804.383,237.192 804.951,235.552 805.519,234.126 806.088,233.681 806.656,235.579 807.224,236.273 807.793,237.005 808.361,235.624 808.929,230.201 809.498,230.294 810.066,228.113 810.634,228.295 811.203,230.438 811.771,231.656 812.339,231.722 812.908,231.701 813.476,232.889 814.044,232.773 814.613,233.948 815.181,232.805 815.749,232.743 816.318,231.694 816.886,229.874 817.455,229.957 818.023,230.956 818.591,229.961 819.16,229.168 819.728,227.514 820.296,228.834 820.865,230.335 821.433,229.6 822.001,229.882 822.57,230.076 823.138,230.24 823.706,230.35 824.275,231.55 824.843,232.697 825.411,233.795 825.98,234.774 826.548,236.768 827.116,237.532 827.685,235.488 828.253,236.347 828.821,235.953 829.39,235.772 829.958,234.214 830.526,235.065 831.095,234.936 831.663,233.879 832.232,232.607 832.8,232.516 833.368,230.297 833.937,230.204 834.505,231.39 835.073,230.593 835.642,229.842 836.21,230.066 836.778,230.073 837.347,229.156 837.915,229.214 838.483,229.271 839.052,228.669 839.62,231.041 840.188,227.938 840.757,227.128 841.325,228.514 841.893,229.961 842.462,229.159 843.03,232.749 843.598,231.722 844.167,229.689 844.735,230.026 845.304,230.001 845.872,230.11 846.44,231.265 847.009,230.276 847.577,230.566 848.145,232.974 848.714,231.932 849.282,232.925 849.85,229.851 850.419,231.04 850.987,228.073 851.555,227.38 852.124,229.778 852.692,230.066 853.26,232.391 853.829,231.41 854.397,232.562 854.965,229.426 855.534,230.738 856.102,229.831 856.67,230.023 857.239,231.45 857.807,232.61 858.375,233.668 858.944,232.754 859.512,234.916 860.081,235.86 860.649,235.507 861.217,237.535 861.786,238.12 862.354,237.809 862.922,237.665 863.491,236.396 864.059,238.222 864.627,236.816 865.196,236.273 865.764,237.127 866.332,236.802 866.901,235.368 867.469,235.085 868.037,234.85 868.606,233.717 869.174,234.634 869.742,235.477 870.311,237.211 870.879,237.719 871.447,237.287 872.016,237.056 872.584,237.437 873.152,235.159 873.721,234.822 874.289,234.338 874.858,230.953 875.426,229.112 875.994,227.265 876.563,226.424 877.131,225.67 877.699,230.275 878.268,230.288 878.836,230.209 879.404,230.26 879.973,233.598 880.541,234.257 881.109,231.95 881.678,231.582 882.246,232.57 882.814,232.419 883.383,231.226 883.951,228.297 884.519,227.59 885.088,227.813 885.656,226.95 886.224,227.152 886.793,226.472 887.361,226.969 887.93,228.083 888.498,229.547 889.066,231.741 889.635,232.633 890.203,230.355 890.771,229.529 891.34,227.749 891.908,226.856 892.476,228.105 893.045,227.442 893.613,225.702 894.181,223.935 894.75,223.456 895.318,223.921 895.886,224.492 896.455,225.033 897.023,224.59 897.591,223.206 898.16,223.732 898.728,223.191 899.296,223.879 899.865,224.557 900.433,222.065 901.001,219.895 901.57,221.059 902.138,223.146 902.707,225.006 903.275,224.793 903.843,226.358 904.412,226.004 904.98,225.576 905.548,229.481 906.117,233.14 906.685,233.33 907.253,232.432 907.822,235.839 908.39,235.743 908.958,234.528 909.527,234.293 910.095,237.248 910.663,237.095 911.232,238.745 911.8,238.466 912.368,237.183 912.937,239.102 913.505,240.906 914.073,241.417 914.642,238.761 915.21,238.563 915.779,239.3 916.347,239.965 916.915,240.572 917.484,240.396 918.052,239.918 918.62,239.331 919.189,239.034 919.757,239.446 920.325,237.756 920.894,239.253 921.462,237.603 922.03,236.089 922.599,234.653 923.167,234.299 923.735,234.075 924.304,233.019 924.872,233.03 925.44,232.903 926.009,234.028 926.577,236.085 927.145,235.963 927.714,235.581 928.282,236.26 928.85,235.75 929.419,235.267 929.987,235.086 930.556,234.874 931.124,232.599 931.692,231.39 932.261,231.406 932.829,229.167 933.397,230.989 933.966,231.825 934.534,230.856 935.102,230.001 935.671,230.177 936.239,230.275 936.807,229.387 937.376,230.603 937.944,230.659 938.512,229.876 939.081,227.978 939.649,228.339 940.217,229.583 940.786,232.788 941.354,234.692 941.922,234.311 942.491,234.264 943.059,234.033 943.627,234.854 944.196,234.471 944.764,234.21 945.333,234.249 945.901,234.994 946.469,233.725 947.038,235.588 947.606,235.953 948.174,235.385 948.743,235.948 949.311,234.471 949.879,231.941 950.448,228.719 951.016,230.059 951.584,228.891 952.153,229.985 952.721,228.918 953.289,230.035 953.858,231.035 954.426,232.01 954.994,231.664 955.563,232.72 956.131,234.534 956.699,234.133 957.268,232.639 957.836,233.431 958.405,233.371 958.973,231.081 959.541,232.908 960.11,232.641 960.678,233.645 961.246,234.327 961.815,233.991 962.383,232.637 962.951,230.297 963.52,230.284 964.088,232.178 964.656,233.2 965.225,230.988 965.793,232.059 966.361,235.072 966.93,232.707 967.498,233.431 968.066,235.184 968.635,233.751 969.203,231.527 969.771,232.277 970.34,233.32 970.908,232.21 971.476,233.27 972.045,231.952 972.613,230.9 973.182,230.732 973.75,226.557 974.318,227.896 974.887,229.22 975.455,229.292 976.023,228.448 976.592,227.697 977.16,226.867 977.728,228.279 978.297,226.425 978.865,228.688 979.433,229.779 980.002,232.007 980.57,231.92 981.138,231.712 981.707,232.544 982.275,231.55 982.843,230.461 983.412,230.385 983.98,230.306 984.548,229.215 985.117,229.472 985.685,228.625 986.253,230.901 986.822,234.107 987.39,233.69 987.959,232.314 988.527,231.028 989.095,231.027 989.664,228.985 990.232,229.159 990.8,230.216 991.369,229.158 991.937,230.266 992.505,230.06 993.074,231.126 993.642,230.253 994.21,229.365 994.779,229.572 995.347,229.577 995.915,229.838 996.484,229.064 997.052,229.228 997.62,229.283 998.189,230.212 998.757,229.977 999.325,229.882 999.894,230.165 1000.46,231.28 1001.03,232.176 1001.6,234.281 1002.17,232.903 1002.74,232.661 1003.3,230.579 1003.87,229.505 1004.44,228.471 1005.01,227.444 1005.58,228.714 1006.15,228.857 1006.71,232.242 1007.28,233.006 1007.85,232.889 1008.42,232.677 1008.99,234.78 1009.56,233.432 1010.12,233.285 1010.69,234.059 1011.26,235.894 1011.83,236.654 1012.4,236.157 1012.97,236.914 1013.53,236.63 1014.1,238.294 1014.67,236.564 1015.24,236.146 1015.81,234.695 1016.38,233.507 1016.94,233.434 1017.51,232.372 1018.08,232.213 1018.65,233.239 1019.22,233.938 1019.79,232.821 1020.35,231.687 1020.92,233.005 1021.49,231.683 1022.06,231.392 1022.63,231.379 1023.2,233.288 1023.76,231.735 1024.33,230.544 1024.9,231.534 1025.47,228.305 1026.04,226.44 1026.61,227.677 1027.17,226.7 1027.74,226.772 1028.31,227.079 1028.88,228.07 1029.45,228.138 1030.02,228.363 1030.58,231.556 1031.15,232.499 1031.72,232.251 1032.29,231.155 1032.86,232.142 1033.43,230.925 1033.99,228.78 1034.56,229.849 1035.13,229.894 1035.7,231.05 1036.27,230.83 1036.84,231.199 1037.4,233.047 1037.97,232.723 1038.54,230.335 1039.11,231.356 1039.68,230.206 1040.25,230.08 1040.81,230.383 1041.38,230.488 1041.95,229.546 1042.52,228.595 1043.09,228.506 1043.66,228.662 1044.22,227.676 1044.79,228.806 1045.36,227.973 1045.93,227.188 1046.5,227.283 1047.07,227.576 1047.63,228.09 1048.2,229.496 1048.77,229.471 1049.34,229.719 1049.91,228.822 1050.48,227.985 1051.05,228.33 1051.61,228.567 1052.18,228.859 1052.75,229.946 1053.32,231.074 1053.89,228.852 1054.46,229.066 1055.02,227.963 1055.59,230.242 1056.16,231.208 1056.73,230.081 1057.3,231.335 1057.87,233.355 1058.43,232.182 1059,232.142 1059.57,231.017 1060.14,230.918 1060.71,232.042 1061.28,232.241 1061.84,232.258 1062.41,233.089 1062.98,234.911 1063.55,234.831 1064.12,233.556 1064.69,232.457 1065.25,231.199 1065.82,232.253 1066.39,233.23 1066.96,232.92 1067.53,232.824 1068.1,231.637 1068.66,231.594 1069.23,230.41 1069.8,230.29 1070.37,229.192 1070.94,229.342 1071.51,229.311 1072.07,228.328 1072.64,228.454 1073.21,230.74 1073.78,231.978 1074.35,233.057 1074.92,232.853 1075.48,231.546 1076.05,233.743 1076.62,233.572 1077.19,237.487 1077.76,236.909 1078.33,236.364 1078.89,236.919 1079.46,235.661 1080.03,235.265 1080.6,233.802 1081.17,232.391 1081.74,231.195 1082.3,230.122 1082.87,229.15 1083.44,228.263 1084.01,230.426 1084.58,232.512 1085.15,230.438 1085.71,228.398 1086.28,226.63 1086.85,227.836 1087.42,227.838 1087.99,228.077 1088.56,227.115 1089.12,227.33 1089.69,227.657 1090.26,227.841 1090.83,226.048 1091.4,225.482 1091.97,224.972 1092.53,227.314 1093.1,227.55 1093.67,227.97 1094.24,226.966 1094.81,228.189 1095.38,229.347 1095.94,229.568 1096.51,229.829 1097.08,229.884 1097.65,231.008 1098.22,231.061 1098.79,230.161 1099.35,230.238 1099.92,230.608 1100.49,230.706 1101.06,231.74 1101.63,232.918 1102.2,233.898 1102.76,231.721 1103.33,232.61 1103.9,233.557 1104.47,233.576 1105.04,232.339 1105.61,231.46 1106.17,230.311 1106.74,229.543 1107.31,230.712 1107.88,231.669 1108.45,230.833 1109.02,230.801 1109.58,231.786 1110.15,232.678 1110.72,231.535 1111.29,229.618 1111.86,229.641 1112.43,229.742 1112.99,231.145 1113.56,229.941 1114.13,229.944 1114.7,229.252 1115.27,228.429 1115.84,226.622 1116.4,228.123 1116.97,226.415 1117.54,225.889 1118.11,226.344 1118.68,226.847 1119.25,229.377 1119.81,227.556 1120.38,226.935 1120.95,227.482 1121.52,227.813 1122.09,229.211 1122.66,230.341 1123.23,231.422 1123.79,232.48 1124.36,232.374 1124.93,233.38 1125.5,233.382 1126.07,232.09 1126.64,232.003 1127.2,234.944 1127.77,235.772 1128.34,234.54 1128.91,234.558 1129.48,236.605 1130.05,235.418 1130.61,236.032 1131.18,230.716 1131.75,228.823 1132.32,230.123 1132.89,230.166 1133.46,229.414 1134.02,228.442 1134.59,227.478 1135.16,229.005 1135.73,230.343 1136.3,230.539 1136.87,231.641 1137.43,231.735 1138,230.649 1138.57,230.632 1139.14,226.658 1139.71,228.18 1140.28,225.541 1140.84,224.078 1141.41,223.398 1141.98,226.129 1142.55,229.722 1143.12,228.751 1143.69,229.97 1144.25,230.368 1144.82,232.419 1145.39,233.476 1145.96,231.303 1146.53,232.532 1147.1,232.481 1147.66,234.571 1148.23,233.432 1148.8,235.227 1149.37,235.172 1149.94,234.799 1150.51,233.604 1151.07,234.374 1151.64,235.258 1152.21,235.051 1152.78,233.761 1153.35,231.806 1153.92,231.808 1154.48,230.784 1155.05,231.129 1155.62,233.312 1156.19,233.287 1156.76,234.337 1157.33,234.212 1157.89,233.848 1158.46,231.671 1159.03,227.696 1159.6,227.838 1160.17,228.242 1160.74,228.394 1161.3,231.808 1161.87,231.625 1162.44,230.599 1163.01,231.725 1163.58,232.848 1164.15,233.688 1164.71,233.357 1165.28,234.308 1165.85,234.273 1166.42,235.253 1166.99,236.315 1167.56,236.193 1168.12,235.91 1168.69,235.684 1169.26,235.442 1169.83,235.97 1170.4,237.634 1170.97,237.049 1171.53,237.521 1172.1,235.075 1172.67,233.744 1173.24,231.435 1173.81,230.394 1174.38,229.288 1174.94,230.338 1175.51,230.229 1176.08,229.361 1176.65,230.455 1177.22,230.428 1177.79,230.338 1178.35,228.294 1178.92,229.585 1179.49,230.698 1180.06,228.772 1180.63,229.087 1181.2,230.452 1181.76,228.677 1182.33,229.71 1182.9,231.006 1183.47,230.92 1184.04,230.916 1184.61,232.048 1185.17,232.987 1185.74,232.828 1186.31,233.686 1186.88,233.592 1187.45,233.516 1188.02,234.179 1188.58,232.769 1189.15,230.71 1189.72,231.639 1190.29,232.482 1190.86,231.296 1191.43,230.072 1192,231.289 1192.56,233.383 1193.13,233.413 1193.7,234.185 1194.27,234.037 1194.84,233.74 1195.41,233.639 1195.97,233.319 1196.54,231.1 1197.11,235.149 1197.68,233.794 1198.25,232.378 1198.82,232.226 1199.38,232.987 1199.95,231.6 1200.52,232.624 1201.09,231.337 1201.66,229.188 1202.23,230.303 1202.79,232.429 1203.36,233.258 1203.93,231.861 1204.5,233.724 1205.07,232.671 1205.64,232.255 1206.2,231.102 1206.77,234.246 1207.34,233.95 1207.91,234.516 1208.48,232.928 1209.05,233.747 1209.61,234.589 1210.18,233.281 1210.75,232.001 1211.32,232.001 1211.89,230.881 1212.46,227.699 1213.02,227.83 1213.59,227.843 1214.16,228.02 1214.73,228.278 1215.3,227.281 1215.87,228.513 1216.43,226.442 1217,227.642 1217.57,225.922 1218.14,226.266 1218.71,226.61 1219.28,226.753 1219.84,226.112 1220.41,226.347 1220.98,228.866 1221.55,230.245 1222.12,230.472 1222.69,230.622 1223.25,230.545 1223.82,230.683 1224.39,231.935 1224.96,228.853 1225.53,228.016 1226.1,227.926 1226.66,228.111 1227.23,229.226 1227.8,229.383 1228.37,229.336 1228.94,226.365 1229.51,225.489 1230.07,225.7 1230.64,227.024 1231.21,228.307 1231.78,228.543 1232.35,227.869 1232.92,227.037 1233.48,226.135 1234.05,226.465 1234.62,225.959 1235.19,224.41 1235.76,224.097 1236.33,226.737 1236.89,227.074 1237.46,230.6 1238.03,229.534 1238.6,230.616 1239.17,228.876 1239.74,231.245 1240.3,231.486 1240.87,232.463 1241.44,233.514 1242.01,235.483 1242.58,237.176 1243.15,238.889 1243.71,236.325 1244.28,234.928 1244.85,235.737 1245.42,236.626 1245.99,235.948 1246.56,233.505 1247.12,234.495 1247.69,233.439 1248.26,232.407 1248.83,232.597 1249.4,231.446 1249.97,231.505 1250.53,230.617 1251.1,230.85 1251.67,232.028 1252.24,229.743 1252.81,231.963 1253.38,232.001 1253.94,231.853 1254.51,230.578 1255.08,229.783 1255.65,229.706 1256.22,231.004 1256.79,228.69 1257.35,229.603 1257.92,232.933 1258.49,231.556 1259.06,231.625 1259.63,233.869 1260.2,234.609 1260.76,233.61 1261.33,236.534 1261.9,234.973 1262.47,234.653 1263.04,234.63 1263.61,235.607 1264.18,234.294 1264.74,235.161 1265.31,230 1265.88,228.079 1266.45,228.143 1267.02,228.497 1267.59,229.838 1268.15,230.762 1268.72,229.947 1269.29,229.127 1269.86,231.524 1270.43,231.403 1271,232.154 1271.56,234.032 1272.13,232.694 1272.7,232.614 1273.27,229.389 1273.84,229.478 1274.41,228.727 1274.97,227.912 1275.54,229.121 1276.11,230.479 1276.68,230.356 1277.25,229.295 1277.82,230.375 1278.38,229.49 1278.95,229.533 1279.52,229.682 1280.09,229.772 1280.66,229.99 1281.23,231.909 1281.79,231.78 1282.36,231.683 1282.93,230.737 1283.5,229.842 1284.07,231.074 1284.64,229.223 1285.2,228.145 1285.77,228.488 1286.34,231.591 1286.91,231.366 1287.48,232.292 1288.05,229.102 1288.61,230.033 1289.18,230.285 1289.75,230.156 1290.32,230.187 1290.89,229.139 1291.46,229.416 1292.02,230.542 1292.59,228.49 1293.16,228.596 1293.73,229.013 1294.3,227.051 1294.87,227.392 1295.43,228.751 1296,230.043 1296.57,230.13 1297.14,231.253 1297.71,233.437 1298.28,233.295 1298.84,234.013 1299.41,234.927 1299.98,234.777 1300.55,234.648 1301.12,233.517 1301.69,233.354 1302.25,232.127 1302.82,232.159 1303.39,233.096 1303.96,233.012 1304.53,234.947 1305.1,234.468 1305.66,233.107 1306.23,235.004 1306.8,234.834 1307.37,234.591 1307.94,233.327 1308.51,232.27 1309.07,228.076 1309.64,227.19 1310.21,227.654 1310.78,228.856 1311.35,229.038 1311.92,230.036 1312.48,230.2 1313.05,230.228 1313.62,229.251 1314.19,230.329 1314.76,232.416 1315.33,231.363 1315.89,232.492 1316.46,231.154 1317.03,231.114 1317.6,231.113 1318.17,231.241 1318.74,230.197 1319.3,231.249 1319.87,229.393 1320.44,231.56 1321.01,233.832 1321.58,233.896 1322.15,234.499 1322.71,231.249 1323.28,229.403 1323.85,226.469 1324.42,228.975 1324.99,228.133 1325.56,227.123 1326.12,227.481 1326.69,226.898 1327.26,224.916 1327.83,225.636 1328.4,221.949 1328.97,220.583 1329.53,223.356 1330.1,224.874 1330.67,227.534 1331.24,228.97 1331.81,230.123 1332.38,232.254 1332.94,233.049 1333.51,233.142 1334.08,233.124 1334.65,233.97 1335.22,232.921 1335.79,235.956 1336.36,235.637 1336.92,236.62 1337.49,237.141 1338.06,238.74 1338.63,235.2 1339.2,233.76 1339.77,233.484 1340.33,233.287 1340.9,233.366 1341.47,241.313 1342.04,241.869 1342.61,239.959 1343.18,238.211 1343.74,237.802 1344.31,238.141 1344.88,235.703 1345.45,236.218 1346.02,236.993 1346.59,234.614 1347.15,235.501 1347.72,235.199 1348.29,230.87 1348.86,229.769 1349.43,228.883 1350,227.913 1350.56,227.213 1351.13,228.454 1351.7,227.519 1352.27,229.817 1352.84,231.148 1353.41,232.253 1353.97,230.188 1354.54,230.171 1355.11,229.307 1355.68,230.347 1356.25,232.385 1356.82,233.368 1357.38,231.116 1357.95,231.219 1358.52,230.182 1359.09,229.057 1359.66,229.048 1360.23,230.446 1360.79,230.687 1361.36,229.662 1361.93,228.659 1362.5,227.791 1363.07,229.194 1363.64,229.246 1364.2,228.17 1364.77,230.576 1365.34,230.471 1365.91,231.407 1366.48,232.185 1367.05,234.35 1367.61,234.038 1368.18,232.794 1368.75,231.548 1369.32,230.531 1369.89,232.491 1370.46,231.271 1371.02,232.264 1371.59,231.225 1372.16,229.184 1372.73,230.202 1373.3,230.402 1373.87,229.305 1374.43,229.249 1375,231.35 1375.57,231.189 1376.14,230.045 1376.71,230.014 1377.28,228.972 1377.84,228.976 1378.41,228.837 1378.98,230.962 1379.55,230.811 1380.12,229.857 1380.69,230.036 1381.25,230.168 1381.82,227.433 1382.39,228.67 1382.96,228.781 1383.53,228.006 1384.1,229.423 1384.66,230.764 1385.23,230.899 1385.8,231.024 1386.37,231.111 1386.94,231.347 1387.51,231.244 1388.07,231.168 1388.64,231.009 1389.21,233.053 1389.78,232.787 1390.35,232.445 1390.92,234.342 1391.48,234.321 1392.05,235.186 1392.62,235.115 1393.19,234.698 1393.76,234.432 1394.33,233.166 1394.89,232.846 1395.46,232.445 1396.03,232.375 1396.6,232.216 1397.17,232.127 1397.74,232.176 1398.3,231.91 1398.87,234.058 1399.44,233.755 1400.01,234.487 1400.58,235.284 1401.15,234.94 1401.71,234.624 1402.28,234.297 1402.85,234.082 1403.42,234.895 1403.99,234.454 1404.56,235.091 1405.13,233.677 1405.69,233.473 1406.26,234.196 1406.83,232.94 1407.4,231.93 1407.97,229.832 1408.54,226.661 1409.1,223.933 1409.67,227.499 1410.24,225.626 1410.81,227.019 1411.38,227.132 1411.95,227.529 1412.51,227.913 1413.08,228.197 1413.65,229.629 1414.22,229.832 1414.79,230.735 1415.36,230.856 1415.92,230.895 1416.49,230.894 1417.06,230.022 1417.63,232.328 1418.2,233.158 1418.77,231.974 1419.33,232.888 1419.9,231.798 1420.47,232.755 1421.04,230.491 1421.61,230.577 1422.18,228.498 1422.74,231.808 1423.31,229.668 1423.88,231.031 1424.45,230.022 1425.02,230.157 1425.59,227.998 1426.15,229.249 1426.72,230.367 1427.29,233.532 1427.86,234.393 1428.43,235.357 1429,236.198 1429.56,233.682 1430.13,233.227 1430.7,233.129 1431.27,232.925 1431.84,232.668 1432.41,231.401 1432.97,231.391 1433.54,230.346 1434.11,230.216 1434.68,229.155 1435.25,230.204 1435.82,229.192 1436.38,231.06 1436.95,230.065 1437.52,230.108 1438.09,225.975 1438.66,222.259 1439.23,223.686 1439.79,225.077 1440.36,223.224 1440.93,225.022 1441.5,226.475 1442.07,226.781 1442.64,227.245 1443.2,228.493 1443.77,229.739 1444.34,229.806 1444.91,230.06 1445.48,230.103 1446.05,231.104 1446.61,234.183 1447.18,233.354 1447.75,231.9 1448.32,230.11 1448.89,231.197 1449.46,230.074 1450.02,230.057 1450.59,234.251 1451.16,234.036 1451.73,232.917 1452.3,231.703 1452.87,230.545 1453.43,230.694 1454,231.884 1454.57,232.808 1455.14,230.589 1455.71,229.777 1456.28,233.116 1456.84,234.193 1457.41,232.858 1457.98,232.531 1458.55,232.506 1459.12,230.487 1459.69,229.446 1460.25,229.664 1460.82,228.758 1461.39,229.142 1461.96,228.282 1462.53,228.43 1463.1,228.569 1463.66,229.708 1464.23,230.622 1464.8,228.652 1465.37,229.67 1465.94,230.106 1466.51,230.334 1467.07,233.407 1467.64,234.364 1468.21,234.218 1468.78,233.023 1469.35,232.713 1469.92,230.711 1470.48,230.684 1471.05,230.764 1471.62,231.844 1472.19,231.634 1472.76,232.449 1473.33,233.212 1473.89,231.062 1474.46,229.993 1475.03,230.197 1475.6,231.485 1476.17,231.189 1476.74,231.27 1477.31,230.204 1477.87,229.096 1478.44,226.802 1479.01,227.012 1479.58,228.311 1480.15,226.33 1480.72,228.663 1481.28,229.9 1481.85,230.128 1482.42,230.128 1482.99,231.198 1483.56,230.112 1484.13,230.356 1484.69,229.635 1485.26,231.734 1485.83,228.622 1486.4,227.716 1486.97,226.852 1487.54,229.039 1488.1,229.102 1488.67,229.312 1489.24,231.407 1489.81,232.541 1490.38,232.641 1490.95,235.411 1491.51,233.229 1492.08,233.948 1492.65,232.539 1493.22,232.52 1493.79,232.534 1494.36,230.287 1494.92,230.372 1495.49,230.311 1496.06,230.266 1496.63,233.741 1497.2,231.685 1497.77,232.635 1498.33,235.604 1498.9,235.49 1499.47,234.072 1500.04,234.936 1500.61,236.649 1501.18,234.349 1501.74,236.185 1502.31,234.986 1502.88,234.944 1503.45,232.413 1504.02,234.605 1504.59,236.496 1505.15,236.357 1505.72,234.851 1506.29,234.354 1506.86,235.193 1507.43,233.604 1508,233.253 1508.56,232.025 1509.13,232.717 1509.7,233.345 1510.27,234.076 1510.84,233.694 1511.41,234.32 1511.97,233.983 1512.54,233.805 1513.11,232.372 1513.68,232.143 1514.25,232.045 1514.82,231.886 1515.38,231.827 1515.95,230.585 1516.52,230.674 1517.09,229.538 1517.66,230.385 1518.23,230.252 1518.79,231.11 1519.36,230.842 1519.93,230.724 1520.5,230.629 1521.07,229.523 1521.64,227.544 1522.2,226.857 1522.77,230.34 1523.34,228.466 1523.91,228.485 1524.48,228.629 1525.05,228.69 1525.61,226.747 1526.18,225.022 1526.75,224.34 1527.32,224.811 1527.89,227.185 1528.46,227.418 1529.02,227.809 1529.59,227.94 1530.16,228.273 1530.73,227.569 1531.3,227.701 1531.87,228.936 1532.43,231.068 1533,231.019 1533.57,231.226 1534.14,229.001 1534.71,229.03 1535.28,231.424 1535.84,233.477 1536.41,233.476 1536.98,233.252 1537.55,232.075 1538.12,232.938 1538.69,232.951 1539.25,232.558 1539.82,232.393 1540.39,231.246 1540.96,231.484 1541.53,232.408 1542.1,231.233 1542.66,231.321 1543.23,232.44 1543.8,232.099 1544.37,233.077 1544.94,232.881 1545.51,229.462 1546.08,228.688 1546.64,227.969 1547.21,229.469 1547.78,230.534 1548.35,229.563 1548.92,227.642 1549.49,229.897 1550.05,230.197 1550.62,229.189 1551.19,229.323 1551.76,230.283 1552.33,230.477 1552.9,228.631 1553.46,226.72 1554.03,227 1554.6,225.361 1555.17,224.943 1555.74,227.61 1556.31,224.77 1556.87,227.269 1557.44,228.782 1558.01,227.961 1558.58,227.322 1559.15,229.797 1559.72,229.862 1560.28,231.201 1560.85,230.308 1561.42,229.27 1561.99,227.695 1562.56,226.908 1563.13,226.523 1563.69,225.886 1564.26,226.626 1564.83,227.014 1565.4,227.44 1565.97,228.768 1566.54,227.264 1567.1,227.64 1567.67,228.844 1568.24,230.121 1568.81,231.283 1569.38,231.465 1569.95,230.566 1570.51,226.608 1571.08,230.2 1571.65,229.358 1572.22,231.636 1572.79,230.724 1573.36,230.644 1573.92,231.753 1574.49,231.904 1575.06,234.965 1575.63,235.678 1576.2,236.534 1576.77,235.105 1577.33,232.951 1577.9,233.981 1578.47,234.93 1579.04,234.793 1579.61,232.658 1580.18,230.7 1580.74,231.924 1581.31,230.809 1581.88,228.898 1582.45,229.25 1583.02,228.504 1583.59,228.746 1584.15,231.004 1584.72,229.302 1585.29,231.753 1585.86,232.923 1586.43,232.752 1587,232.753 1587.56,233.595 1588.13,234.656 1588.7,234.565 1589.27,234.512 1589.84,233.34 1590.41,235.529 1590.97,234.512 1591.54,234.267 1592.11,232.145 1592.68,230.001 1593.25,230.22 1593.82,230.287 1594.38,229.127 1594.95,229.185 1595.52,229.28 1596.09,229.594 1596.66,226.796 1597.23,227.118 1597.79,225.414 1598.36,228.016 1598.93,228.297 1599.5,228.804 1600.07,229.346 1600.64,228.685 1601.2,226.837 1601.77,227.285 1602.34,228.758 1602.91,230.001 1603.48,227.269 1604.05,225.556 1604.61,225.895 1605.18,228.417 1605.75,231.94 1606.32,233.095 1606.89,231.917 1607.46,234.104 1608.02,234.341 1608.59,235.275 1609.16,236.13 1609.73,235.788 1610.3,235.499 1610.87,235.197 1611.43,236.106 1612,237.083 1612.57,236.62 1613.14,237.198 1613.71,235.877 1614.28,236.705 1614.84,235.159 1615.41,233.979 1615.98,234.098 1616.55,232.996 1617.12,231.741 1617.69,233.836 1618.26,231.626 1618.82,231.729 1619.39,232.916 1619.96,231.684 1620.53,232.802 1621.1,235.801 1621.67,235.361 1622.23,233.946 1622.8,233.714 1623.37,234.621 1623.94,234.55 1624.51,233.312 1625.08,235.158 1625.64,230.72 1626.21,229.819 1626.78,231.849 1627.35,230.684 1627.92,231.967 1628.49,229.634 1629.05,230.892 1629.62,230.883 1630.19,231.101 1630.76,233.113 1631.33,234.093 1631.9,233.827 1632.46,233.79 1633.03,236.677 1633.6,236.395 1634.17,236.02 1634.74,237.537 1635.31,237.893 1635.87,237.391 1636.44,235.816 1637.01,235.45 1637.58,235.851 1638.15,237.419 1638.72,238.091 1639.28,237.351 1639.85,238.856 1640.42,241.032 1640.99,238.238 1641.56,238.726 1642.13,237.211 1642.69,234.675 1643.26,234.861 1643.83,232.41 1644.4,232.224 1644.97,234.264 1645.54,231.802 1646.1,231.695 1646.67,230.411 1647.24,230.328 1647.81,230.326 1648.38,231.345 1648.95,232.183 1649.51,228.81 1650.08,226.599 1650.65,225.781 1651.22,225.044 1651.79,227.505 1652.36,226.668 1652.92,227.025 1653.49,226.025 1654.06,226.543 1654.63,227.698 1655.2,228.928 1655.77,228.948 1656.33,230.05 1656.9,230.128 1657.47,233.064 1658.04,231.906 1658.61,233.693 1659.18,232.398 1659.74,233.002 1660.31,231.646 1660.88,233.42 1661.45,232.211 1662.02,233.516 1662.59,233.306 1663.15,233.916 1663.72,231.63 1664.29,229.334 1664.86,230.235 1665.43,229.049 1666,228.193 1666.56,228.416 1667.13,225.15 1667.7,225.447 1668.27,224.829 1668.84,226.321 1669.41,225.552 1669.97,224.998 1670.54,226.314 1671.11,229.647 1671.68,230.84 1672.25,229.65 1672.82,227.61 1673.38,225.017 1673.95,225.528 1674.52,224.751 1675.09,227.558 1675.66,226.54 1676.23,226.783 1676.79,229.268 1677.36,230.286 1677.93,230.228 1678.5,232.618 1679.07,231.424 1679.64,230.253 1680.2,233.358 1680.77,236.348 1681.34,235.898 1681.91,235.358 1682.48,233.937 1683.05,234.631 1683.61,233.306 1684.18,232.397 1684.75,230.345 1685.32,228.389 1685.89,227.456 1686.46,227.819 1687.02,228.178 1687.59,228.227 1688.16,228.463 1688.73,229.591 1689.3,228.949 1689.87,229.188 1690.44,226.409 1691,228.749 1691.57,229.938 1692.14,230.257 1692.71,231.311 1693.28,230.313 1693.85,230.252 1694.41,232.431 1694.98,233.318 1695.55,235.061 1696.12,234.893 1696.69,231.496 1697.26,230.581 1697.82,228.478 1698.39,229.603 1698.96,229.862 1699.53,231.052 1700.1,231.157 1700.67,229.946 1701.23,228.17 1701.8,229.454 1702.37,231.637 1702.94,229.637 1703.51,228.709 1704.08,228.242 1704.64,229.591 1705.21,229.803 1705.78,228.818 1706.35,228.711 1706.92,231.034 1707.49,231.056 1708.05,231.064 1708.62,230.978 1709.19,232.035 1709.76,231.931 1710.33,232.945 1710.9,231.875 1711.46,229.614 1712.03,229.947 1712.6,229.833 1713.17,233.029 1713.74,232.926 1714.31,231.892 1714.87,231.785 1715.44,232.972 1716.01,230.826 1716.58,231.911 1717.15,232.738 1717.72,234.825 1718.28,234.431 1718.85,234.328 1719.42,234.153 1719.99,233.98 1720.56,232.791 1721.13,233.73 1721.69,234.83 1722.26,234.368 1722.83,234.089 1723.4,234.864 1723.97,235.821 1724.54,234.31 1725.1,232.974 1725.67,231.75 1726.24,231.408 1726.81,231.529 1727.38,232.306 1727.95,233.009 1728.51,231.771 1729.08,230.555 1729.65,231.25 1730.22,232.102 1730.79,230.683 1731.36,229.851 1731.92,229.952 1732.49,227.79 1733.06,228.684 1733.63,230.811 1734.2,231.98 1734.77,232.712 1735.33,231.294 1735.9,233.213 1736.47,233.872 1737.04,232.55 1737.61,231.306 1738.18,229.156 1738.74,230.2 1739.31,232.154 1739.88,232.125 1740.45,231.036 1741.02,232.864 1741.59,232.787 1742.15,231.395 1742.72,231.157 1743.29,233.155 1743.86,231.986 1744.43,230.784 1745,229.871 1745.56,229.163 1746.13,230.335 1746.7,228.3 1747.27,229.464 1747.84,229.464 1748.41,229.608 1748.97,228.342 1749.54,230.708 1750.11,229.65 1750.68,228.726 1751.25,229.823 1751.82,231.037 1752.38,232.013 1752.95,230.079 1753.52,227.916 1754.09,229.122 1754.66,227.02 1755.23,227.126 1755.79,227.411 1756.36,228.781 1756.93,228.709 1757.5,225.859 1758.07,227.312 1758.64,225.386 1759.21,224.963 1759.77,225.461 1760.34,225.704 1760.91,227.045 1761.48,228.413 1762.05,227.504 1762.62,226.89 1763.18,226.141 1763.75,225.553 1764.32,224.003 1764.89,226.478 1765.46,226.729 1766.03,229.191 1766.59,230.693 1767.16,230.698 1767.73,230.895 1768.3,228.818 1768.87,228.757 1769.44,230.248 1770,229.322 1770.57,229.708 1771.14,229.007 1771.71,229.235 1772.28,230.507 1772.85,230.573 1773.41,227.763 1773.98,228.208 1774.55,229.445 1775.12,229.942 1775.69,230.308 1776.26,230.271 1776.82,229.38 1777.39,227.505 1777.96,228.767 1778.53,231.055 1779.1,232.263 1779.67,235.162 1780.23,235 1780.8,234.8 1781.37,233.708 1781.94,232.706 1782.51,232.822 1783.08,232.766 1783.64,228.856 1784.21,228.277 1784.78,229.543 1785.35,231.652 1785.92,229.91 1786.49,229.113 1787.05,229.248 1787.62,230.415 1788.19,230.413 1788.76,230.755 1789.33,228.966 1789.9,229.4 1790.46,227.507 1791.03,228.796 1791.6,232.22 1792.17,231.122 1792.74,231.179 1793.31,230.244 1793.87,230.482 1794.44,231.437 1795.01,231.7 1795.58,231.039 1796.15,230.341 1796.72,230.323 1797.28,232.754 1797.85,232.697 1798.42,232.445 1798.99,231.55 1799.56,231.725 1800.13,232.971 1800.69,236.021 1801.26,236.94 1801.83,237.499 1802.4,237.091 1802.97,235.654 1803.54,236.139 1804.1,237.891 1804.67,237.419 1805.24,237.109 1805.81,238.653 1806.38,238.102 1806.95,240.571 1807.51,240.75 1808.08,239.877 1808.65,238.366 1809.22,238.788 1809.79,238.451 1810.36,236.944 1810.92,237.639 1811.49,235.059 1812.06,234.688 1812.63,233.521 1813.2,233.357 1813.77,231.071 1814.33,230.975 1814.9,232.909 1815.47,234.937 1816.04,234.507 1816.61,235.153 1817.18,235.92 1817.74,236.571 1818.31,237.123 1818.88,237.632 1819.45,236.785 1820.02,237.187 1820.59,237.518 1821.15,236.118 1821.72,235.534 1822.29,232.928 1822.86,232.835 1823.43,231.787 1824,229.552 1824.56,227.621 1825.13,229.663 1825.7,231.897 1826.27,231.692 1826.84,233.692 1827.41,234.298 1827.97,233.966 1828.54,234.647 1829.11,232.365 1829.68,231.126 1830.25,231.139 1830.82,229.846 1831.39,226.74 1831.95,226.721 1832.52,228.014 1833.09,227.128 1833.66,227.325 1834.23,226.584 1834.8,228.84 1835.36,228.956 1835.93,229.137 1836.5,228.823 1837.07,227.967 1837.64,225.932 1838.21,225.072 1838.77,227.242 1839.34,227.325 1839.91,227.395 1840.48,225.563 1841.05,227.039 1841.62,229.082 1842.18,229.109 1842.75,231.303 1843.32,231.215 1843.89,231.171 1844.46,234.319 1845.03,234.993 1845.59,233.6 1846.16,233.229 1846.73,232.957 1847.3,231.771 1847.87,231.652 1848.44,232.617 1849,232.626 1849.57,233.239 1850.14,233.162 1850.71,232.836 1851.28,231.53 1851.85,229.276 1852.41,230.4 1852.98,232.241 1853.55,231.189 1854.12,231.156 1854.69,229.908 1855.26,230.961 1855.82,231.944 1856.39,231.785 1856.96,231.539 1857.53,231.377 1858.1,233.505 1858.67,235.195 1859.23,234.75 1859.8,234.286 1860.37,235.106 1860.94,232.855 1861.51,230.521 1862.08,230.208 1862.64,228.257 1863.21,226.061 1863.78,225.214 1864.35,223.422 1864.92,225.041 1865.49,223.083 1866.05,225.409 1866.62,226.782 1867.19,227.221 1867.76,223.409 1868.33,221.872 1868.9,223.443 1869.46,222.957 1870.03,222.582 1870.6,223.387 1871.17,222.778 1871.74,223.458 1872.31,226.034 1872.87,226.417 1873.44,227.752 1874.01,229.163 1874.58,230.323 1875.15,229.415 1875.72,228.677 1876.28,229.937 1876.85,229.079 1877.42,230.346 1877.99,230.579 1878.56,232.922 1879.13,232.699 1879.69,234.714 1880.26,235.939 1880.83,234.561 1881.4,233.367 1881.97,234.431 1882.54,235.339 1883.1,232.797 1883.67,232.586 1884.24,231.507 1884.81,230.613 1885.38,230.811 1885.95,230.812 1886.51,226.861 1887.08,226.141 1887.65,227.454 1888.22,227.479 1888.79,228.841 1889.36,231.077 1889.92,233.125 1890.49,233.742 1891.06,232.722 1891.63,231.684 1892.2,231.68 1892.77,231.519 1893.33,232.267 1893.9,233.214 1894.47,232.307 1895.04,233.158 1895.61,234 1896.18,231.836 1896.74,230.674 1897.31,231.758 1897.88,231.814 1898.45,231.4 1899.02,230.46 1899.59,234.421 1900.16,233.111 1900.72,234.139 1901.29,231.772 1901.86,232.761 1902.43,231.371 1903,230.439 1903.57,229.595 1904.13,229.911 1904.7,230.034 1905.27,230.134 1905.84,228.246 1906.41,231.261 1906.98,231.209 1907.54,229.111 1908.11,228.282 1908.68,227.676 1909.25,227.838 1909.82,225.958 1910.39,224.217 1910.95,223.769 1911.52,229.201 1912.09,229.353 1912.66,228.566 1913.23,228.892 1913.8,227.071 1914.36,227.447 1914.93,224.975 1915.5,227.477 1916.07,227.659 1916.64,228.065 1917.21,230.553 1917.77,230.693 1918.34,229.765 1918.91,230.931 1919.48,232.067 1920.05,229.819 1920.62,227.855 1921.18,229.196 1921.75,231.711 1922.32,231.858 1922.89,231.883 1923.46,231.968 1924.03,234.112 1924.59,234.955 1925.16,236.685 1925.73,236.373 1926.3,236.829 1926.87,234.495 1927.44,235.511 1928,234.251 1928.57,236.083 1929.14,235.818 1929.71,234.209 1930.28,230.991 1930.85,232.055 1931.41,234.14 1931.98,231.906 1932.55,231.033 1933.12,230.01 1933.69,229.146 1934.26,229.231 1934.82,231.671 1935.39,233.831 1935.96,230.491 1936.53,232.275 1937.1,231.115 1937.67,232.358 1938.23,231.353 1938.8,231.522 1939.37,231.198 1939.94,226.992 1940.51,227.143 1941.08,228.189 1941.64,228.445 1942.21,230.608 1942.78,230.705 1943.35,232.016 1943.92,230.857 1944.49,229.021 1945.05,229.392 1945.62,228.428 1946.19,230.488 1946.76,229.687 1947.33,230.926 1947.9,230.748 1948.46,230.945 1949.03,233.044 1949.6,232.718 1950.17,233.669 1950.74,231.718 1951.31,230.688 1951.87,231.737 1952.44,233.819 1953.01,232.547 1953.58,228.324 1954.15,228.719 1954.72,228.209 1955.28,229.51 1955.85,229.568 1956.42,229.76 1956.99,229.805 1957.56,231.065 1958.13,231.11 1958.69,232.175 1959.26,232.184 1959.83,234.207 1960.4,236.106 1960.97,234.735 1961.54,233.576 1962.1,233.563 1962.67,234.384 1963.24,235.24 1963.81,234.978 1964.38,232.56 1964.95,233.474 1965.51,234.494 1966.08,233.176 1966.65,235.044 1967.22,234.896 1967.79,235.804 1968.36,235.149 1968.92,234.124 1969.49,232.879 1970.06,232.853 1970.63,233.793 1971.2,232.616 1971.77,233.275 1972.34,233.955 1972.9,231.575 1973.47,229.334 1974.04,229.386 1974.61,229.364 1975.18,229.579 1975.75,230.828 1976.31,229.759 1976.88,229.05 1977.45,230.228 1978.02,231.152 1978.59,232.088 1979.16,232.043 1979.72,232.041 1980.29,232.018 1980.86,232.984 1981.43,233.761 1982,232.479 1982.57,232.667 1983.13,233.477 1983.7,233.212 1984.27,233.056 1984.84,231.791 1985.41,232.849 1985.98,232.627 1986.54,233.76 1987.11,233.508 1987.68,233.05 1988.25,231.907 1988.82,233.918 1989.39,233.56 1989.95,233.241 1990.52,233.8 1991.09,234.488 1991.66,231.985 1992.23,230.914 1992.8,230.843 1993.36,230.785 1993.93,231.987 1994.5,230.894 1995.07,228.901 1995.64,228.043 1996.21,229.386 1996.77,228.27 1997.34,226.352 1997.91,229.67 1998.48,231.83 1999.05,230.649 1999.62,229.592 2000.18,229.6 2000.75,228.393 2001.32,228.357 2001.89,227.677 2002.46,228.896 2003.03,231.099 2003.59,229.824 2004.16,231.041 2004.73,233.105 2005.3,233.056 2005.87,228.74 2006.44,227.816 2007,228.008 2007.57,228.236 2008.14,228.612 2008.71,228.977 2009.28,229.169 2009.85,229.298 2010.41,228.153 2010.98,231.454 2011.55,231.603 2012.12,230.37 2012.69,231.215 2013.26,230.014 2013.82,230.3 2014.39,230.246 2014.96,230.455 2015.53,230.414 2016.1,231.52 2016.67,230.531 2017.23,230.647 2017.8,228.634 2018.37,229.856 2018.94,230.109 2019.51,229.106 2020.08,227.016 2020.64,227.396 2021.21,227.663 2021.78,228.687 2022.35,229.813 2022.92,229.835 2023.49,226.838 2024.05,229.333 2024.62,227.418 2025.19,228.532 2025.76,230.993 2026.33,230.2 2026.9,230.41 2027.46,230.366 2028.03,229.619 2028.6,228.49 2029.17,226.623 2029.74,225.912 2030.31,227.157 2030.87,227.596 2031.44,227.787 2032.01,231.325 2032.58,233.461 2033.15,234.386 2033.72,233.423 2034.28,235.263 2034.85,235.156 2035.42,235.961 2035.99,235.56 2036.56,236.284 2037.13,236.023 2037.69,234.771 2038.26,235.714 2038.83,235.497 2039.4,236.433 2039.97,236.101 2040.54,234.432 2041.11,234.235 2041.67,234.991 2042.24,234.585 2042.81,233.346 2043.38,231.171 2043.95,232.05 2044.52,229.047 2045.08,229.183 2045.65,229.133 2046.22,229.041 2046.79,229.094 2047.36,229.433 2047.93,230.406 2048.49,230.296 2049.06,231.147 2049.63,229.993 2050.2,230.031 2050.77,234.143 2051.34,233.998 2051.9,230.643 2052.47,230.874 2053.04,231.076 2053.61,230.98 2054.18,230.829 2054.75,231.819 2055.31,231.78 2055.88,231.636 2056.45,231.571 2057.02,232.54 2057.59,229.404 2058.16,230.499 2058.72,230.411 2059.29,230.377 2059.86,230.311 2060.43,230.614 2061,230.659 2061.57,229.781 2062.13,227.697 2062.7,228.085 2063.27,228.389 2063.84,229.596 2064.41,227.779 2064.98,227.82 2065.54,226.977 2066.11,225.191 2066.68,226.624 2067.25,229.955 2067.82,232.12 2068.39,236.412 2068.95,234.988 2069.52,233.921 2070.09,235.68 2070.66,234.376 2071.23,236.244 2071.8,236.012 2072.36,234.754 2072.93,234.298 2073.5,232.904 2074.07,233.821 2074.64,232.411 2075.21,232.054 2075.77,230.892 2076.34,229.884 2076.91,231.02 2077.48,229.787 2078.05,229.839 2078.62,229.852 2079.18,230.951 2079.75,227.84 2080.32,226.961 2080.89,226.288 2081.46,226.577 2082.03,228.76 2082.59,228.901 2083.16,230.142 2083.73,230.067 2084.3,229.258 2084.87,229.552 2085.44,226.403 2086,223.64 2086.57,225.025 2087.14,226.605 2087.71,228.143 2088.28,228.211 2088.85,227.365 2089.41,227.394 2089.98,228.703 2090.55,227.046 2091.12,225.34 2091.69,224.729 2092.26,226.173 2092.82,226.794 2093.39,227.262 2093.96,227.602 2094.53,231.123 2095.1,232.313 2095.67,232.249 2096.23,232.26 2096.8,233.168 2097.37,233.227 2097.94,233.107 2098.51,234.214 2099.08,233.873 2099.64,232.706 2100.21,236.969 2100.78,235.398 2101.35,236.199 2101.92,235.98 2102.49,235.581 2103.05,233.227 2103.62,234.164 2104.19,232.045 2104.76,233.11 2105.33,232.918 2105.9,233.828 2106.46,232.627 2107.03,232.44 2107.6,232.454 2108.17,231.218 2108.74,230.066 2109.31,230.173 2109.87,227.221 2110.44,226.593 2111.01,227.822 2111.58,229.182 2112.15,230.466 2112.72,230.453 2113.29,232.532 2113.85,231.289 2114.42,234.512 2114.99,233.333 2115.56,234.323 2116.13,234.829 2116.7,234.653 2117.26,235.419 2117.83,234.838 2118.4,235.555 2118.97,231.071 2119.54,231.948 2120.11,230.728 2120.67,227.687 2121.24,228.048 2121.81,226.201 2122.38,226.515 2122.95,226.775 2123.52,227.099 2124.08,228.389 2124.65,229.606 2125.22,229.53 2125.79,230.733 2126.36,230.81 2126.93,233.032 2127.49,232.901 2128.06,231.767 2128.63,233.658 2129.2,231.527 2129.77,229.286 2130.34,229.363 2130.9,230.422 2131.47,229.314 2132.04,230.382 2132.61,228.137 2133.18,229.37 2133.75,227.401 2134.31,228.818 2134.88,230.09 2135.45,229.349 2136.02,228.724 2136.59,233.086 2137.16,232.971 2137.72,232.799 2138.29,228.655 2138.86,229.857 2139.43,228.99 2140,231.313 2140.57,233.263 2141.13,232.878 2141.7,232.861 2142.27,234.036 2142.84,233.957 2143.41,235.74 2143.98,237.364 2144.54,237.864 2145.11,238.452 2145.68,237.926 2146.25,235.231 2146.82,232.737 2147.39,232.698 2147.95,232.576 2148.52,233.541 2149.09,233.328 2149.66,232.283 2150.23,233.255 2150.8,234.081 2151.36,235.063 2151.93,233.696 2152.5,234.453 2153.07,233.258 2153.64,232.146 2154.21,230.031 2154.77,230.361 2155.34,228.17 2155.91,229.571 2156.48,226.887 2157.05,231.234 2157.62,233.414 2158.18,235.364 2158.75,233.912 2159.32,230.758 2159.89,229.803 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip490)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.039 ± 0.017\n  with uncertainty of ± 0.0010720020661422497\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01482 ± (0.0032118, 0.00311071) (MC)\n  95% confidence interval: [-4.02086, -4.00873]) (MC)\n  linear error propagation: -4.01568 ± 0.00312607\n  |δ_y| = |0.00266275| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014823068723326, val_l = 0.006035111738844634, val_u = 0.00609722047205441)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip520\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip520)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip521\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip520)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip522\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1141.48 2211.02,1141.48 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,981.705 2211.02,981.705 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,821.93 2211.02,821.93 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,662.155 2211.02,662.155 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,502.38 2211.02,502.38 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,342.604 2211.02,342.604 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1141.48 365.751,1141.48 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,981.705 365.751,981.705 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,821.93 365.751,821.93 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,662.155 365.751,662.155 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,502.38 365.751,502.38 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,342.604 365.751,342.604 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M298.909 1127.28 Q295.298 1127.28 293.469 1130.84 Q291.664 1134.39 291.664 1141.52 Q291.664 1148.62 293.469 1152.19 Q295.298 1155.73 298.909 1155.73 Q302.543 1155.73 304.349 1152.19 Q306.177 1148.62 306.177 1141.52 Q306.177 1134.39 304.349 1130.84 Q302.543 1127.28 298.909 1127.28 M298.909 1123.58 Q304.719 1123.58 307.775 1128.18 Q310.853 1132.77 310.853 1141.52 Q310.853 1150.24 307.775 1154.85 Q304.719 1159.43 298.909 1159.43 Q293.099 1159.43 290.02 1154.85 Q286.964 1150.24 286.964 1141.52 Q286.964 1132.77 290.02 1128.18 Q293.099 1123.58 298.909 1123.58 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M259.557 995.05 L267.196 995.05 L267.196 968.685 L258.886 970.351 L258.886 966.092 L267.15 964.425 L271.826 964.425 L271.826 995.05 L279.465 995.05 L279.465 998.985 L259.557 998.985 L259.557 995.05 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M298.909 967.504 Q295.298 967.504 293.469 971.069 Q291.664 974.61 291.664 981.74 Q291.664 988.846 293.469 992.411 Q295.298 995.953 298.909 995.953 Q302.543 995.953 304.349 992.411 Q306.177 988.846 306.177 981.74 Q306.177 974.61 304.349 971.069 Q302.543 967.504 298.909 967.504 M298.909 963.8 Q304.719 963.8 307.775 968.407 Q310.853 972.99 310.853 981.74 Q310.853 990.467 307.775 995.073 Q304.719 999.657 298.909 999.657 Q293.099 999.657 290.02 995.073 Q286.964 990.467 286.964 981.74 Q286.964 972.99 290.02 968.407 Q293.099 963.8 298.909 963.8 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M262.775 835.275 L279.094 835.275 L279.094 839.21 L257.15 839.21 L257.15 835.275 Q259.812 832.52 264.395 827.891 Q269.002 823.238 270.182 821.895 Q272.428 819.372 273.307 817.636 Q274.21 815.877 274.21 814.187 Q274.21 811.432 272.266 809.696 Q270.344 807.96 267.242 807.96 Q265.043 807.96 262.59 808.724 Q260.159 809.488 257.381 811.039 L257.381 806.317 Q260.205 805.182 262.659 804.604 Q265.113 804.025 267.15 804.025 Q272.52 804.025 275.715 806.71 Q278.909 809.395 278.909 813.886 Q278.909 816.016 278.099 817.937 Q277.312 819.835 275.205 822.428 Q274.627 823.099 271.525 826.317 Q268.423 829.511 262.775 835.275 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M298.909 807.729 Q295.298 807.729 293.469 811.294 Q291.664 814.835 291.664 821.965 Q291.664 829.071 293.469 832.636 Q295.298 836.178 298.909 836.178 Q302.543 836.178 304.349 832.636 Q306.177 829.071 306.177 821.965 Q306.177 814.835 304.349 811.294 Q302.543 807.729 298.909 807.729 M298.909 804.025 Q304.719 804.025 307.775 808.632 Q310.853 813.215 310.853 821.965 Q310.853 830.692 307.775 835.298 Q304.719 839.881 298.909 839.881 Q293.099 839.881 290.02 835.298 Q286.964 830.692 286.964 821.965 Q286.964 813.215 290.02 808.632 Q293.099 804.025 298.909 804.025 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M272.914 660.801 Q276.27 661.518 278.145 663.787 Q280.043 666.055 280.043 669.389 Q280.043 674.504 276.525 677.305 Q273.006 680.106 266.525 680.106 Q264.349 680.106 262.034 679.666 Q259.742 679.25 257.289 678.393 L257.289 673.879 Q259.233 675.014 261.548 675.592 Q263.863 676.171 266.386 676.171 Q270.784 676.171 273.076 674.435 Q275.39 672.699 275.39 669.389 Q275.39 666.333 273.238 664.62 Q271.108 662.884 267.289 662.884 L263.261 662.884 L263.261 659.041 L267.474 659.041 Q270.923 659.041 272.752 657.676 Q274.58 656.287 274.58 653.694 Q274.58 651.032 272.682 649.62 Q270.807 648.185 267.289 648.185 Q265.367 648.185 263.168 648.602 Q260.969 649.018 258.33 649.898 L258.33 645.731 Q260.992 644.991 263.307 644.62 Q265.645 644.25 267.705 644.25 Q273.029 644.25 276.131 646.68 Q279.233 649.088 279.233 653.208 Q279.233 656.079 277.59 658.069 Q275.946 660.037 272.914 660.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M298.909 647.954 Q295.298 647.954 293.469 651.518 Q291.664 655.06 291.664 662.19 Q291.664 669.296 293.469 672.861 Q295.298 676.402 298.909 676.402 Q302.543 676.402 304.349 672.861 Q306.177 669.296 306.177 662.19 Q306.177 655.06 304.349 651.518 Q302.543 647.954 298.909 647.954 M298.909 644.25 Q304.719 644.25 307.775 648.856 Q310.853 653.44 310.853 662.19 Q310.853 670.916 307.775 675.523 Q304.719 680.106 298.909 680.106 Q293.099 680.106 290.02 675.523 Q286.964 670.916 286.964 662.19 Q286.964 653.44 290.02 648.856 Q293.099 644.25 298.909 644.25 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M271.594 489.174 L259.789 507.623 L271.594 507.623 L271.594 489.174 M270.367 485.1 L276.247 485.1 L276.247 507.623 L281.177 507.623 L281.177 511.512 L276.247 511.512 L276.247 519.66 L271.594 519.66 L271.594 511.512 L255.992 511.512 L255.992 506.998 L270.367 485.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M298.909 488.178 Q295.298 488.178 293.469 491.743 Q291.664 495.285 291.664 502.414 Q291.664 509.521 293.469 513.086 Q295.298 516.627 298.909 516.627 Q302.543 516.627 304.349 513.086 Q306.177 509.521 306.177 502.414 Q306.177 495.285 304.349 491.743 Q302.543 488.178 298.909 488.178 M298.909 484.475 Q304.719 484.475 307.775 489.081 Q310.853 493.664 310.853 502.414 Q310.853 511.141 307.775 515.748 Q304.719 520.331 298.909 520.331 Q293.099 520.331 290.02 515.748 Q286.964 511.141 286.964 502.414 Q286.964 493.664 290.02 489.081 Q293.099 484.475 298.909 484.475 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M258.793 325.324 L277.15 325.324 L277.15 329.26 L263.076 329.26 L263.076 337.732 Q264.094 337.385 265.113 337.223 Q266.131 337.037 267.15 337.037 Q272.937 337.037 276.316 340.209 Q279.696 343.38 279.696 348.797 Q279.696 354.375 276.224 357.477 Q272.752 360.556 266.432 360.556 Q264.256 360.556 261.988 360.185 Q259.742 359.815 257.335 359.074 L257.335 354.375 Q259.418 355.509 261.641 356.065 Q263.863 356.621 266.34 356.621 Q270.344 356.621 272.682 354.514 Q275.02 352.408 275.02 348.797 Q275.02 345.185 272.682 343.079 Q270.344 340.973 266.34 340.973 Q264.465 340.973 262.59 341.389 Q260.738 341.806 258.793 342.685 L258.793 325.324 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M298.909 328.403 Q295.298 328.403 293.469 331.968 Q291.664 335.51 291.664 342.639 Q291.664 349.746 293.469 353.31 Q295.298 356.852 298.909 356.852 Q302.543 356.852 304.349 353.31 Q306.177 349.746 306.177 342.639 Q306.177 335.51 304.349 331.968 Q302.543 328.403 298.909 328.403 M298.909 324.699 Q304.719 324.699 307.775 329.306 Q310.853 333.889 310.853 342.639 Q310.853 351.366 307.775 355.972 Q304.719 360.556 298.909 360.556 Q293.099 360.556 290.02 355.972 Q286.964 351.366 286.964 342.639 Q286.964 333.889 290.02 329.306 Q293.099 324.699 298.909 324.699 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip522)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1148.02 400.199,1032.24 400.786,925.118 401.372,826.817 401.958,847.967 402.545,761.929 403.131,683.247 403.718,607.857 404.304,545.626 404.891,484.35 405.477,432.029 406.063,384.522 406.65,340.361 407.236,300.837 407.823,400.94 408.409,362.507 408.995,327.404 409.582,350.638 410.168,319.408 410.755,292.543 411.341,270.719 411.927,250.321 412.514,273.712 413.1,257.119 413.687,241.635 414.273,228.744 414.86,219.895 415.446,242.661 416.032,236.157 416.619,231.578 417.205,227.127 417.792,224.858 418.378,225.279 418.964,227.15 419.551,229.341 420.137,233.975 420.724,238.771 421.31,244.891 421.896,298.471 422.483,320.031 423.069,327.187 423.656,361.473 424.242,382.807 424.829,403.169 425.415,414.967 426.001,426.209 426.588,437.786 427.174,449.8 427.761,470.589 428.347,490.965 428.933,510.428 429.52,529.814 430.106,555.63 430.693,589.293 431.279,607.598 431.865,619.632 432.452,637.334 433.038,648.682 433.625,660.37 434.211,672.151 434.798,688.815 435.384,705.057 435.97,720.378 436.557,731.191 437.143,746.237 437.73,756.306 438.316,770.207 438.902,784.116 439.489,801.64 440.075,815.101 440.662,827.415 441.248,839.539 441.835,848.072 442.421,859.468 443.007,870.486 443.594,881.185 444.18,891.915 444.767,905.401 445.353,926.621 445.939,938.501 446.526,949.809 447.112,966.355 447.699,982.017 448.285,989.277 448.871,999.022 449.458,1013.23 450.044,1017.38 450.631,1030.76 451.217,1043.3 451.804,1048.99 452.39,1058.77 452.976,1064.06 453.563,1066.87 454.149,1067.82 454.736,1079.34 455.322,1082.46 455.908,1089.21 456.495,1091.94 457.081,1098.78 457.668,1101.34 458.254,1103.32 458.84,1107.93 459.427,1112.31 460.013,1118.75 460.6,1121.08 461.186,1127.06 461.773,1127.34 462.359,1132.98 462.945,1134.95 463.532,1135.1 464.118,1137.33 464.705,1139.41 465.291,1143.3 465.877,1150.84 466.464,1152.68 467.05,1159.19 467.637,1165.87 468.223,1170.63 468.809,1173.29 469.396,1175.94 469.982,1180.14 470.569,1182.83 471.155,1185.21 471.742,1186.12 472.328,1191.52 472.914,1195.3 473.501,1197.1 474.087,1202.01 474.674,1203.58 475.26,1206.84 475.846,1209.96 476.433,1213.08 477.019,1211.32 477.606,1211.17 478.192,1211.22 478.778,1211.35 479.365,1211.33 479.951,1208.51 480.538,1208.76 481.124,1210.41 481.711,1210.73 482.297,1214.04 482.883,1215.56 483.47,1218.58 484.056,1215.49 484.643,1215.61 485.229,1217.2 485.815,1215.72 486.402,1218.7 486.988,1220.16 487.575,1220.16 488.161,1220.12 488.748,1221.38 489.334,1220.07 489.92,1221.6 490.507,1221.74 491.093,1224.56 491.68,1224.49 492.266,1224.72 492.852,1226.02 493.439,1224.56 494.025,1225.82 494.612,1228.35 495.198,1228.21 495.784,1227.98 496.371,1228.2 496.957,1230.9 497.544,1230.76 498.13,1230.38 498.717,1230.37 499.303,1231.77 499.889,1234.23 500.476,1237.9 501.062,1237.6 501.649,1239.69 502.235,1240.47 502.821,1242.34 503.408,1239.97 503.994,1239.3 504.581,1239.86 505.167,1240.37 505.753,1239.76 506.34,1240.41 506.926,1241.25 507.513,1245.97 508.099,1248.89 508.686,1250.44 509.272,1250.43 509.858,1250.53 510.445,1247.48 511.031,1246.55 511.618,1244.21 512.204,1243.31 512.79,1242.62 513.377,1242.04 513.963,1242.86 514.55,1243.46 515.136,1243.74 515.722,1241.48 516.309,1242.23 516.895,1240.25 517.482,1241.16 518.068,1239.1 518.655,1238.48 519.241,1237.81 519.827,1238.93 520.414,1238.09 521,1238.92 521.587,1238.4 522.173,1237.75 522.759,1237.13 523.346,1236.8 523.932,1236.09 524.519,1236.96 525.105,1236.22 525.691,1235.71 526.278,1233.86 526.864,1236.16 527.451,1234.25 528.037,1234.03 528.624,1233.74 529.21,1234.38 529.796,1234.04 530.383,1233.71 530.969,1233.42 531.556,1237.3 532.142,1238.25 532.728,1239.1 533.315,1239.82 533.901,1240.59 534.488,1238.6 535.074,1240.42 535.661,1241.08 536.247,1241.83 536.833,1242.5 537.42,1242.88 538.006,1244.47 538.593,1245.01 539.179,1246.89 539.765,1246.93 540.352,1247.17 540.938,1245.87 541.525,1246.1 542.111,1246.28 542.697,1244.22 543.284,1244.5 543.87,1246.24 544.457,1244.03 545.043,1240.4 545.63,1236.89 546.216,1236.14 546.802,1235.5 547.389,1237.52 547.975,1238.19 548.562,1234.48 549.148,1234.01 549.734,1235.74 550.321,1235.02 550.907,1236.97 551.494,1236.49 552.08,1237.13 552.666,1236.27 553.253,1233.18 553.839,1233.93 554.426,1234.65 555.012,1232.82 555.599,1233.77 556.185,1233.08 556.771,1235.41 557.358,1236.03 557.944,1239.42 558.531,1237.21 559.117,1235.18 559.703,1234.41 560.29,1232.65 560.876,1231.03 561.463,1233.22 562.049,1233.85 562.635,1234.73 563.222,1235.5 563.808,1233.22 564.395,1232.61 564.981,1232.03 565.568,1230.07 566.154,1228.28 566.74,1230.34 567.327,1229.87 567.913,1229.37 568.5,1227.6 569.086,1226.14 569.672,1226.11 570.259,1223.25 570.845,1225.78 571.432,1228.29 572.018,1229.41 572.605,1227.68 573.191,1229.96 573.777,1230.66 574.364,1230.09 574.95,1230.56 575.537,1229.79 576.123,1232.21 576.709,1231.52 577.296,1232.17 577.882,1230.07 578.469,1228.05 579.055,1229.1 579.641,1227.29 580.228,1225.65 580.814,1226.74 581.401,1226.48 581.987,1227.64 582.574,1228.44 583.16,1229.33 583.746,1227.41 584.333,1228.46 584.919,1229.11 585.506,1227.45 586.092,1228.53 586.678,1230.65 587.265,1232.66 587.851,1230.66 588.438,1229.84 589.024,1230.48 589.61,1233.95 590.197,1233.17 590.783,1235.02 591.37,1236.95 591.956,1237.31 592.543,1236.47 593.129,1230.36 593.715,1228.52 594.302,1229.46 594.888,1227.85 595.475,1227.15 596.061,1226.65 596.647,1227.57 597.234,1227.06 597.82,1223.76 598.407,1222.1 598.993,1222.03 599.579,1219.24 600.166,1223.04 600.752,1222.97 601.339,1218.51 601.925,1219.64 602.512,1217.97 603.098,1219.07 603.684,1220.14 604.271,1223.69 604.857,1224.76 605.444,1225.9 606.03,1225.4 606.616,1224.78 607.203,1224.22 607.789,1221.17 608.376,1221 608.962,1221.09 609.548,1223.53 610.135,1224.53 610.721,1223.13 611.308,1221.83 611.894,1220.15 612.481,1222.59 613.067,1222.12 613.653,1219.05 614.24,1221.56 614.826,1220.84 615.413,1219.03 615.999,1218.9 616.585,1217.59 617.172,1216.25 617.758,1217.66 618.345,1215.02 618.931,1216.21 619.518,1214.83 620.104,1215.04 620.69,1215.05 621.277,1215.08 621.863,1216.29 622.45,1216.05 623.036,1217.49 623.622,1217.57 624.209,1213.65 624.795,1214.12 625.382,1213.09 625.968,1210.62 626.554,1212.04 627.141,1210.89 627.727,1212.65 628.314,1214.35 628.9,1213.35 629.487,1213.53 630.073,1213.54 630.659,1212.56 631.246,1214.06 631.832,1215.57 632.419,1215.88 633.005,1216.02 633.591,1216.04 634.178,1221.09 634.764,1220.64 635.351,1220.28 635.937,1222.81 636.523,1222.89 637.11,1218.62 637.696,1220.88 638.283,1223.21 638.869,1221.52 639.456,1222.21 640.042,1223.03 640.628,1225.24 641.215,1227.17 641.801,1226.31 642.388,1224.46 642.974,1221.13 643.56,1218.09 644.147,1217.89 644.733,1217.86 645.32,1214.96 645.906,1212.03 646.492,1210.76 647.079,1210.75 647.665,1210.46 648.252,1212.02 648.838,1213.58 649.425,1213.57 650.011,1215.01 650.597,1214.92 651.184,1216.17 651.77,1216.14 652.357,1217.56 652.943,1217.56 653.529,1215.94 654.116,1218.16 654.702,1216.44 655.289,1216.58 655.875,1216.5 656.462,1217.58 657.048,1219.97 657.634,1219.51 658.221,1220.35 658.807,1218.64 659.394,1219.61 659.98,1220.56 660.566,1222.55 661.153,1222.09 661.739,1219.02 662.326,1217.53 662.912,1220.08 663.498,1221.3 664.085,1223.51 664.671,1220.15 665.258,1219.74 665.844,1218.33 666.431,1217.89 667.017,1222.63 667.603,1222.4 668.19,1220.53 668.776,1219.11 669.363,1218.59 669.949,1219.53 670.535,1220.37 671.122,1219.69 671.708,1219.13 672.295,1220.11 672.881,1218.64 673.467,1218.38 674.054,1218.23 674.64,1219.52 675.227,1219.29 675.813,1218.99 676.4,1221.27 676.986,1216.89 677.572,1215.1 678.159,1214.81 678.745,1217.33 679.332,1216.7 679.918,1215.22 680.504,1216.32 681.091,1213.46 681.677,1215.87 682.264,1214.37 682.85,1214.05 683.436,1217.51 684.023,1220.68 684.609,1216.46 685.196,1215.03 685.782,1213.58 686.369,1212.3 686.955,1212.29 687.541,1211.06 688.128,1209.98 688.714,1211.54 689.301,1215.36 689.887,1215.29 690.473,1212.73 691.06,1209.9 691.646,1210.01 692.233,1206.26 692.819,1207.77 693.405,1206.64 693.992,1209.68 694.578,1211.15 695.165,1210.1 695.751,1208.66 696.338,1212.9 696.924,1212.75 697.51,1212.87 698.097,1213.93 698.683,1212.3 699.27,1213.57 699.856,1212.19 700.442,1210.92 701.029,1209.65 701.615,1209.83 702.202,1212.39 702.788,1210.79 703.375,1214.98 703.961,1214.58 704.547,1216.98 705.134,1214.03 705.72,1213.94 706.307,1211.42 706.893,1216.87 707.479,1215.23 708.066,1214.81 708.652,1213.47 709.239,1214.76 709.825,1216 710.411,1215.89 710.998,1215.91 711.584,1215.69 712.171,1214.28 712.757,1212.88 713.344,1214.12 713.93,1215.2 714.516,1217.62 715.103,1215.88 715.689,1220.82 716.276,1219.14 716.862,1218.66 717.448,1219.34 718.035,1216.47 718.621,1216.52 719.208,1216.14 719.794,1217.4 720.38,1218.46 720.967,1219.04 721.553,1216.25 722.14,1213.73 722.726,1213.81 723.313,1215.08 723.899,1217.41 724.485,1215.61 725.072,1212.86 725.658,1211.42 726.245,1211.19 726.831,1212.71 727.417,1216.85 728.004,1216.64 728.59,1216.33 729.177,1218.86 729.763,1218.48 730.349,1219.58 730.936,1221.68 731.522,1221.36 732.109,1223.35 732.695,1224.01 733.282,1221.95 733.868,1220.1 734.454,1222.15 735.041,1222.86 735.627,1220.87 736.214,1220.29 736.8,1215.82 737.386,1212.7 737.973,1211.37 738.559,1209.89 739.146,1209.82 739.732,1212.52 740.318,1211.07 740.905,1210.94 741.491,1208.61 742.078,1207.38 742.664,1208.89 743.251,1210.35 743.837,1208.94 744.423,1208.89 745.01,1208.8 745.596,1210.14 746.183,1210.04 746.769,1212.86 747.355,1213.9 747.942,1216.22 748.528,1214.77 749.115,1215.96 749.701,1215.68 750.288,1215.25 750.874,1214.94 751.46,1214.45 752.047,1209.1 752.633,1209.1 753.22,1207.94 753.806,1205.25 754.392,1205.68 754.979,1206.08 755.565,1207.63 756.152,1206.13 756.738,1207.35 757.324,1206 757.911,1206.1 758.497,1207.82 759.084,1208.07 759.67,1205.41 760.257,1207.35 760.843,1209.05 761.429,1209.53 762.016,1207.06 762.602,1206.07 763.189,1205.01 763.775,1206.62 764.361,1213.37 764.948,1213.28 765.534,1216.05 766.121,1215.9 766.707,1213.26 767.293,1211.73 767.88,1211.64 768.466,1211.65 769.053,1210.13 769.639,1210.23 770.226,1208.7 770.812,1210.08 771.398,1210.11 771.985,1211.4 772.571,1213.69 773.158,1213.61 773.744,1212.38 774.33,1213.64 774.917,1214.67 775.503,1216.8 776.09,1215.22 776.676,1213.38 777.262,1214.33 777.849,1214.01 778.435,1213.8 779.022,1213.61 779.608,1213.49 780.195,1212 780.781,1210.53 781.367,1209.1 781.954,1207.79 782.54,1205.17 783.127,1204.05 783.713,1206.49 784.299,1205.29 784.886,1205.66 785.472,1205.77 786.059,1207.63 786.645,1206.47 787.232,1206.54 787.818,1207.78 788.404,1209.32 788.991,1209.4 789.577,1212.17 790.164,1212.31 790.75,1210.83 791.336,1211.83 791.923,1212.8 792.509,1212.54 793.096,1212.56 793.682,1213.74 794.268,1213.72 794.855,1213.69 795.441,1214.5 796.028,1211.56 796.614,1215.48 797.201,1216.58 797.787,1214.93 798.373,1213.17 798.96,1214.21 799.546,1209.71 800.133,1210.97 800.719,1213.53 801.305,1213.14 801.892,1213.19 802.478,1213.08 803.065,1211.65 803.651,1212.89 804.237,1212.55 804.824,1209.51 805.41,1210.78 805.997,1209.51 806.583,1213.35 807.17,1211.88 807.756,1215.62 808.342,1216.57 808.929,1213.64 809.515,1213.31 810.102,1210.39 810.688,1211.6 811.274,1210.13 811.861,1214.06 812.447,1212.45 813.034,1213.6 813.62,1213.39 814.206,1211.61 814.793,1210.13 815.379,1208.76 815.966,1209.85 816.552,1207.07 817.139,1205.77 817.725,1206.1 818.311,1203.41 818.898,1202.51 819.484,1202.73 820.071,1202.74 820.657,1204.2 821.243,1201.74 821.83,1203.35 822.416,1203.9 823.003,1202.68 823.589,1202.95 824.175,1204.63 824.762,1204.88 825.348,1205.08 825.935,1206.42 826.521,1205.2 827.108,1204.04 827.694,1201.72 828.28,1200.92 828.867,1201.31 829.453,1201.45 830.04,1200.81 830.626,1203.55 831.212,1203.88 831.799,1204.4 832.385,1208.61 832.972,1210.94 833.558,1213.32 834.145,1214.47 834.731,1215.53 835.317,1209.86 835.904,1209.86 836.49,1209.98 837.077,1209.94 837.663,1205.74 838.249,1204.84 838.836,1207.68 839.422,1208.13 840.009,1206.86 840.595,1207.02 841.181,1208.5 841.768,1212.19 842.354,1213.15 842.941,1212.96 843.527,1214.13 844.114,1213.97 844.7,1214.93 845.286,1214.41 845.873,1213.11 846.459,1211.34 847.046,1208.6 847.632,1207.46 848.218,1210.3 848.805,1211.36 849.391,1213.65 849.978,1214.86 850.564,1213.39 851.15,1214.3 851.737,1216.58 852.323,1218.93 852.91,1219.71 853.496,1219.32 854.083,1218.77 854.669,1218.26 855.255,1218.96 855.842,1220.86 856.428,1220.4 857.015,1221.26 857.601,1220.59 858.187,1219.92 858.774,1223.21 859.36,1226.15 859.947,1224.96 860.533,1222.6 861.119,1220.45 861.706,1220.87 862.292,1219.06 862.879,1219.62 863.465,1220.29 864.052,1215.5 864.638,1210.91 865.224,1210.62 865.811,1211.7 866.397,1207.35 866.984,1207.35 867.57,1208.78 868.156,1208.99 868.743,1205.15 869.329,1205.2 869.916,1202.95 870.502,1203.11 871.089,1204.56 871.675,1201.96 872.261,1199.46 872.848,1198.56 873.434,1201.7 874.021,1201.76 874.607,1200.63 875.193,1199.58 875.78,1198.58 876.366,1198.57 876.953,1198.95 877.539,1199.48 878.125,1199.65 878.712,1198.93 879.298,1200.87 879.885,1198.8 880.471,1200.7 881.058,1202.46 881.644,1204.16 882.23,1204.52 882.817,1204.73 883.403,1205.99 883.99,1205.93 884.576,1206.04 885.162,1204.57 885.749,1201.89 886.335,1201.92 886.922,1202.28 887.508,1201.31 888.094,1201.82 888.681,1202.32 889.267,1202.45 889.854,1202.62 890.44,1205.41 891.027,1206.9 891.613,1206.87 892.199,1209.7 892.786,1207.44 893.372,1206.39 893.959,1207.59 894.545,1208.68 895.131,1208.48 895.718,1208.38 896.304,1209.52 896.891,1208.03 897.477,1207.97 898.063,1208.97 898.65,1211.4 899.236,1211.02 899.823,1209.52 900.409,1205.5 900.996,1203.04 901.582,1203.44 902.168,1203.42 902.755,1203.63 903.341,1202.51 903.928,1202.91 904.514,1203.15 905.1,1203.03 905.687,1202 906.273,1203.52 906.86,1201.09 907.446,1200.51 908.032,1201.11 908.619,1200.29 909.205,1202.04 909.792,1205.17 910.378,1209.22 910.965,1207.58 911.551,1209.08 912.137,1207.76 912.724,1209.13 913.31,1207.77 913.897,1206.54 914.483,1205.3 915.069,1205.72 915.656,1204.37 916.242,1202.03 916.829,1202.45 917.415,1204.27 918.002,1203.22 918.588,1203.24 919.174,1206.09 919.761,1203.77 920.347,1204.07 920.934,1202.75 921.52,1201.83 922.106,1202.17 922.693,1203.82 923.279,1206.74 923.866,1206.77 924.452,1204.4 925.038,1203.08 925.625,1205.82 926.211,1204.47 926.798,1200.63 927.384,1203.53 927.971,1202.57 928.557,1200.29 929.143,1202 929.73,1204.75 930.316,1203.79 930.903,1202.44 931.489,1203.79 932.075,1202.42 932.662,1204.04 933.248,1205.35 933.835,1205.56 934.421,1210.84 935.007,1209.27 935.594,1207.67 936.18,1207.63 936.767,1208.74 937.353,1209.75 937.94,1210.88 938.526,1209.21 939.112,1211.61 939.699,1208.87 940.285,1207.56 940.872,1204.77 941.458,1204.86 942.044,1205.1 942.631,1204.03 943.217,1205.25 943.804,1206.62 944.39,1206.73 944.976,1206.85 945.563,1208.25 946.149,1207.97 946.736,1209.08 947.322,1206.26 947.909,1202.21 948.495,1202.66 949.081,1204.34 949.668,1205.94 950.254,1205.94 950.841,1208.52 951.427,1208.35 952.013,1207.07 952.6,1208.42 953.186,1207.07 953.773,1207.35 954.359,1206.03 954.945,1207.13 955.532,1208.27 956.118,1208.06 956.705,1208.09 957.291,1207.79 957.878,1208.8 958.464,1208.65 959.05,1208.62 959.637,1207.49 960.223,1207.81 960.81,1207.96 961.396,1207.63 961.982,1206.24 962.569,1205.11 963.155,1202.41 963.742,1204.08 964.328,1204.34 964.915,1206.93 965.501,1208.3 966.087,1209.65 966.674,1211.01 967.26,1209.5 967.847,1209.38 968.433,1205.15 969.019,1204.15 969.606,1204.26 970.192,1204.48 970.779,1201.77 971.365,1203.39 971.951,1203.52 972.538,1202.48 973.124,1200.08 973.711,1198.99 974.297,1199.49 974.884,1198.4 975.47,1198.61 976.056,1196.36 976.643,1198.38 977.229,1198.78 977.816,1200.49 978.402,1201.91 978.988,1201.94 979.575,1203.23 980.161,1203.4 980.748,1202.07 981.334,1201.13 981.92,1202.48 982.507,1203.87 983.093,1202.19 983.68,1203.81 984.266,1204.16 984.853,1204.17 985.439,1201.75 986.025,1203.66 986.612,1205.15 987.198,1203.91 987.785,1207.98 988.371,1210.4 988.957,1208.96 989.544,1210.27 990.13,1210.29 990.717,1210.01 991.303,1208.86 991.889,1208.85 992.476,1208.64 993.062,1204.67 993.649,1203.47 994.235,1203.74 994.822,1205.1 995.408,1203.85 995.994,1205.37 996.581,1208.08 997.167,1206.79 997.754,1206.76 998.34,1205.33 998.926,1205.61 999.513,1205.15 1000.1,1202.8 1000.69,1203.17 1001.27,1206.15 1001.86,1204.87 1002.44,1206.32 1003.03,1206.5 1003.62,1206.15 1004.2,1206.03 1004.79,1207.23 1005.38,1208.47 1005.96,1208.65 1006.55,1208.51 1007.14,1209.82 1007.72,1208.48 1008.31,1209.58 1008.9,1210.65 1009.48,1210.63 1010.07,1210.35 1010.65,1209.79 1011.24,1208.09 1011.83,1208.16 1012.41,1207.89 1013,1209.05 1013.59,1210.17 1014.17,1209.81 1014.76,1209.58 1015.35,1209.27 1015.93,1207.95 1016.52,1206.56 1017.11,1209.36 1017.69,1209.15 1018.28,1210.59 1018.86,1207.79 1019.45,1206.59 1020.04,1208.01 1020.62,1206.45 1021.21,1203.89 1021.8,1205.32 1022.38,1205.34 1022.97,1206.74 1023.56,1206.86 1024.14,1205.45 1024.73,1205.17 1025.32,1205.12 1025.9,1204.04 1026.49,1201.68 1027.07,1201.68 1027.66,1203.21 1028.25,1204.54 1028.83,1206.1 1029.42,1204.76 1030.01,1203.49 1030.59,1203.83 1031.18,1203.91 1031.77,1205.37 1032.35,1205.41 1032.94,1206.9 1033.52,1207.06 1034.11,1208.47 1034.7,1208.33 1035.28,1208.41 1035.87,1209.69 1036.46,1209.6 1037.04,1206.78 1037.63,1205.22 1038.22,1203.83 1038.8,1204.04 1039.39,1205.66 1039.98,1202.86 1040.56,1203.01 1041.15,1197.98 1041.73,1198.55 1042.32,1199.1 1042.91,1198.26 1043.49,1199.72 1044.08,1200.11 1044.67,1201.86 1045.25,1203.58 1045.84,1205.06 1046.43,1206.42 1047.01,1207.67 1047.6,1208.83 1048.19,1206.17 1048.77,1203.55 1049.36,1206.14 1049.94,1208.73 1050.53,1211.03 1051.12,1209.62 1051.7,1209.69 1052.29,1209.47 1052.88,1210.76 1053.46,1210.59 1054.05,1210.27 1054.64,1210.12 1055.22,1212.46 1055.81,1213.3 1056.39,1214.08 1056.98,1211.28 1057.57,1211.08 1058.15,1210.63 1058.74,1211.98 1059.33,1210.54 1059.91,1209.15 1060.5,1208.91 1061.09,1208.62 1061.67,1208.58 1062.26,1207.19 1062.85,1207.12 1063.43,1208.26 1064.02,1208.19 1064.6,1207.74 1065.19,1207.63 1065.78,1206.33 1066.36,1204.82 1066.95,1203.53 1067.54,1206.22 1068.12,1205.08 1068.71,1203.84 1069.3,1203.76 1069.88,1205.26 1070.47,1206.35 1071.06,1207.79 1071.64,1208.78 1072.23,1207.34 1072.81,1206.14 1073.4,1207.18 1073.99,1207.23 1074.57,1205.99 1075.16,1204.84 1075.75,1206.25 1076.33,1208.66 1076.92,1208.67 1077.51,1208.58 1078.09,1206.84 1078.68,1208.36 1079.26,1208.38 1079.85,1209.28 1080.44,1210.37 1081.02,1212.71 1081.61,1210.93 1082.2,1213.16 1082.78,1213.93 1083.37,1213.49 1083.96,1212.97 1084.54,1209.89 1085.13,1212.23 1085.72,1213.1 1086.3,1212.51 1086.89,1212.18 1087.47,1210.5 1088.06,1209.12 1088.65,1207.77 1089.23,1206.42 1089.82,1206.52 1090.41,1205.21 1090.99,1205.15 1091.58,1206.73 1092.17,1206.82 1092.75,1203.07 1093.34,1201.92 1093.93,1203.37 1094.51,1203.26 1095.1,1200.57 1095.68,1201.94 1096.27,1201.06 1096.86,1207.67 1097.44,1210.07 1098.03,1208.49 1098.62,1208.46 1099.2,1209.43 1099.79,1210.7 1100.38,1211.98 1100.96,1210.14 1101.55,1208.5 1102.14,1208.27 1102.72,1206.89 1103.31,1206.76 1103.89,1208.12 1104.48,1208.15 1105.07,1213.18 1105.65,1211.37 1106.24,1214.76 1106.83,1216.74 1107.41,1217.77 1108,1214.52 1108.59,1210.12 1109.17,1211.37 1109.76,1209.89 1110.34,1209.42 1110.93,1206.84 1111.52,1205.47 1112.1,1208.16 1112.69,1206.6 1113.28,1206.63 1113.86,1203.94 1114.45,1205.3 1115.04,1202.97 1115.62,1202.93 1116.21,1203.31 1116.8,1204.73 1117.38,1203.69 1117.97,1202.49 1118.55,1202.64 1119.14,1204.18 1119.73,1206.59 1120.31,1206.57 1120.9,1207.85 1121.49,1207.42 1122.07,1204.66 1122.66,1204.63 1123.25,1203.25 1123.83,1203.32 1124.42,1203.71 1125.01,1206.4 1125.59,1211.4 1126.18,1211.31 1126.76,1210.88 1127.35,1210.76 1127.94,1206.51 1128.52,1206.72 1129.11,1208.01 1129.7,1206.6 1130.28,1205.16 1130.87,1204.05 1131.46,1204.41 1132.04,1203.14 1132.63,1203.11 1133.21,1201.78 1133.8,1200.33 1134.39,1200.36 1134.97,1200.59 1135.56,1200.76 1136.15,1200.95 1136.73,1200.17 1137.32,1197.93 1137.91,1198.51 1138.49,1197.76 1139.08,1200.71 1139.67,1202.3 1140.25,1205.16 1140.84,1206.47 1141.42,1207.88 1142.01,1206.6 1142.6,1206.76 1143.18,1207.88 1143.77,1206.54 1144.36,1206.59 1144.94,1206.72 1145.53,1209.32 1146.12,1207.75 1146.7,1206.39 1147.29,1208.83 1147.88,1208.49 1148.46,1206.81 1149.05,1209.07 1149.63,1207.83 1150.22,1206.22 1150.81,1206.33 1151.39,1206.34 1151.98,1204.91 1152.57,1203.7 1153.15,1203.85 1153.74,1202.72 1154.33,1202.78 1154.91,1202.81 1155.5,1201.91 1156.09,1203.62 1156.67,1206.19 1157.26,1205.02 1157.84,1203.94 1158.43,1205.41 1159.02,1206.95 1159.6,1205.43 1160.19,1202.78 1160.78,1202.68 1161.36,1201.65 1161.95,1201.76 1162.54,1202.06 1163.12,1202.12 1163.71,1202.46 1164.29,1205.22 1164.88,1200.09 1165.47,1201.7 1166.05,1203.43 1166.64,1203.59 1167.23,1202.6 1167.81,1204.31 1168.4,1203 1168.99,1204.59 1169.57,1207.3 1170.16,1205.94 1170.75,1203.27 1171.33,1202.18 1171.92,1203.9 1172.5,1201.52 1173.09,1202.79 1173.68,1203.28 1174.26,1204.71 1174.85,1200.72 1175.44,1201.02 1176.02,1200.23 1176.61,1202.16 1177.2,1201.08 1177.78,1199.94 1178.37,1201.51 1178.96,1203.08 1179.54,1203.06 1180.13,1204.45 1180.71,1208.47 1181.3,1208.39 1181.89,1208.46 1182.47,1208.31 1183.06,1208.06 1183.65,1209.39 1184.23,1207.93 1184.82,1210.61 1185.41,1209.21 1185.99,1211.46 1186.58,1211.15 1187.16,1210.84 1187.75,1210.77 1188.34,1211.69 1188.92,1211.51 1189.51,1208.45 1190.1,1206.77 1190.68,1206.5 1191.27,1206.33 1191.86,1206.44 1192.44,1206.28 1193.03,1204.7 1193.62,1208.58 1194.2,1209.69 1194.79,1209.88 1195.37,1209.72 1195.96,1208.39 1196.55,1208.24 1197.13,1208.34 1197.72,1212.13 1198.31,1213.35 1198.89,1213.22 1199.48,1211.68 1200.07,1210.17 1200.65,1209.94 1201.24,1210.85 1201.83,1211.98 1202.41,1213.22 1203,1212.92 1203.58,1213.67 1204.17,1215.75 1204.76,1216.31 1205.34,1213.16 1205.93,1212.84 1206.52,1208.49 1207.1,1209.85 1207.69,1208.52 1208.28,1210.73 1208.86,1207.79 1209.45,1207.48 1210.03,1206.24 1210.62,1204.87 1211.21,1202.31 1211.79,1200.05 1212.38,1197.72 1212.97,1200.79 1213.55,1202.43 1214.14,1201.31 1214.73,1200.06 1215.31,1200.79 1215.9,1203.77 1216.49,1202.45 1217.07,1203.7 1217.66,1204.95 1218.24,1204.68 1218.83,1206.1 1219.42,1206.02 1220,1207.13 1220.59,1206.85 1221.18,1205.36 1221.76,1208.23 1222.35,1205.45 1222.94,1205.38 1223.52,1205.55 1224.11,1207.14 1224.7,1208.16 1225.28,1208.29 1225.87,1206.68 1226.45,1209.61 1227.04,1208.51 1227.63,1204.34 1228.21,1206.04 1228.8,1205.94 1229.39,1203.08 1229.97,1202.07 1230.56,1203.25 1231.15,1199.48 1231.73,1201.32 1232.32,1201.63 1232.91,1201.58 1233.49,1200.25 1234.08,1201.8 1234.66,1200.62 1235.25,1207.06 1235.84,1209.51 1236.42,1209.5 1237.01,1209.13 1237.6,1207.5 1238.18,1206.36 1238.77,1207.4 1239.36,1208.46 1239.94,1205.48 1240.53,1205.63 1241.11,1204.67 1241.7,1202.26 1242.29,1203.88 1242.87,1203.94 1243.46,1207.99 1244.05,1207.92 1244.63,1208.9 1245.22,1209.99 1245.81,1208.54 1246.39,1206.88 1246.98,1207.05 1247.57,1208.4 1248.15,1207.08 1248.74,1208.22 1249.32,1208.2 1249.91,1208.05 1250.5,1207.98 1251.08,1207.73 1251.67,1205.33 1252.26,1205.48 1252.84,1205.58 1253.43,1206.76 1254.02,1207.9 1254.6,1206.38 1255.19,1208.72 1255.78,1210.12 1256.36,1209.76 1256.95,1205.91 1257.53,1206.18 1258.12,1205 1258.71,1209 1259.29,1207.88 1259.88,1207.58 1260.47,1207.77 1261.05,1207.75 1261.64,1209.1 1262.23,1208.79 1262.81,1207.41 1263.4,1210.02 1263.98,1209.95 1264.57,1209.48 1265.16,1212.01 1265.74,1211.68 1266.33,1210.06 1266.92,1208.48 1267.5,1208.4 1268.09,1207 1268.68,1204.23 1269.26,1204.35 1269.85,1203.39 1270.44,1202.16 1271.02,1202.25 1271.61,1202.32 1272.19,1203.67 1272.78,1203.82 1273.37,1205.31 1273.95,1205.25 1274.54,1204.03 1275.13,1204.09 1275.71,1201.59 1276.3,1202.1 1276.89,1203.74 1277.47,1201.28 1278.06,1201.4 1278.65,1201.62 1279.23,1203.14 1279.82,1204.42 1280.4,1209.69 1280.99,1210.88 1281.58,1210.39 1282.16,1208.96 1282.75,1208.79 1283.34,1207.58 1283.92,1207.39 1284.51,1207.38 1285.1,1208.64 1285.68,1207.32 1286.27,1204.7 1286.86,1206 1287.44,1204.56 1288.03,1206.22 1288.61,1206.27 1289.2,1206.27 1289.79,1206.11 1290.37,1207.42 1290.96,1206.12 1291.55,1208.46 1292.13,1205.76 1292.72,1202.87 1293.31,1202.72 1293.89,1201.89 1294.48,1205.92 1295.06,1208.25 1295.65,1211.99 1296.24,1208.94 1296.82,1210.06 1297.41,1211.4 1298,1211.05 1298.58,1211.88 1299.17,1214.47 1299.76,1213.72 1300.34,1218.49 1300.93,1220.42 1301.52,1217.21 1302.1,1215.49 1302.69,1212.29 1303.27,1210.57 1303.86,1209.17 1304.45,1206.5 1305.03,1205.46 1305.62,1205.29 1306.21,1205.26 1306.79,1204.14 1307.38,1205.4 1307.97,1201.5 1308.55,1201.79 1309.14,1200.42 1309.73,1199.62 1310.31,1197.44 1310.9,1201.75 1311.48,1203.47 1312.07,1203.76 1312.66,1203.95 1313.24,1203.79 1313.83,1193.62 1314.42,1192.66 1315,1194.83 1315.59,1196.83 1316.18,1197.18 1316.76,1196.58 1317.35,1199.51 1317.93,1198.74 1318.52,1197.62 1319.11,1200.5 1319.69,1199.28 1320.28,1199.56 1320.87,1204.94 1321.45,1206.34 1322.04,1207.49 1322.63,1208.77 1323.21,1209.73 1323.8,1208.26 1324.39,1209.5 1324.97,1206.69 1325.56,1205.04 1326.14,1203.64 1326.73,1206.22 1327.32,1206.27 1327.9,1207.38 1328.49,1206.11 1329.08,1203.55 1329.66,1202.27 1330.25,1205.07 1330.84,1204.94 1331.42,1206.25 1332.01,1207.69 1332.6,1207.75 1333.18,1206.04 1333.77,1205.75 1334.35,1207.05 1334.94,1208.35 1335.53,1209.51 1336.11,1207.82 1336.7,1207.8 1337.29,1209.2 1337.87,1206.24 1338.46,1206.38 1339.05,1205.22 1339.63,1204.22 1340.22,1201.45 1340.8,1201.77 1341.39,1203.27 1341.98,1204.8 1342.56,1206.08 1343.15,1203.61 1343.74,1205.12 1344.32,1203.86 1344.91,1205.15 1345.5,1207.72 1346.08,1206.48 1346.67,1206.25 1347.26,1207.66 1347.84,1207.77 1348.43,1205.16 1349.01,1205.36 1349.6,1206.8 1350.19,1206.87 1350.77,1208.21 1351.36,1208.25 1351.95,1208.48 1352.53,1205.85 1353.12,1206.05 1353.71,1207.26 1354.29,1207.06 1354.88,1206.92 1355.47,1210.4 1356.05,1208.93 1356.64,1208.85 1357.22,1209.88 1357.81,1208.17 1358.4,1206.52 1358.98,1206.35 1359.57,1206.2 1360.16,1206.09 1360.74,1205.79 1361.33,1205.92 1361.92,1206.01 1362.5,1206.21 1363.09,1203.62 1363.68,1203.91 1364.26,1204.3 1364.85,1201.86 1365.43,1201.81 1366.02,1200.63 1366.61,1200.62 1367.19,1201.05 1367.78,1201.3 1368.37,1202.82 1368.95,1203.17 1369.54,1203.64 1370.13,1203.69 1370.71,1203.86 1371.3,1203.94 1371.88,1203.86 1372.47,1204.17 1373.06,1201.42 1373.64,1201.73 1374.23,1200.74 1374.82,1199.64 1375.4,1199.97 1375.99,1200.28 1376.58,1200.61 1377.16,1200.8 1377.75,1199.69 1378.34,1200.16 1378.92,1199.27 1379.51,1200.96 1380.09,1201.16 1380.68,1200.18 1381.27,1201.7 1381.85,1202.93 1382.44,1205.56 1383.03,1209.59 1383.61,1213.13 1384.2,1208.82 1384.79,1211.27 1385.37,1209.65 1385.96,1209.61 1386.55,1209.21 1387.13,1208.81 1387.72,1208.53 1388.3,1206.79 1388.89,1206.57 1389.48,1205.46 1390.06,1205.32 1390.65,1205.27 1391.24,1205.28 1391.82,1206.39 1392.41,1203.5 1393,1202.41 1393.58,1203.86 1394.17,1202.68 1394.75,1204.02 1395.34,1202.79 1395.93,1205.61 1396.51,1205.52 1397.1,1208.16 1397.69,1204.04 1398.27,1206.73 1398.86,1205.04 1399.45,1206.32 1400.03,1206.17 1400.62,1208.92 1401.21,1207.42 1401.79,1206.05 1402.38,1202.06 1402.96,1200.91 1403.55,1199.6 1404.14,1198.43 1404.72,1201.5 1405.31,1202.01 1405.9,1202.08 1406.48,1202.29 1407.07,1202.57 1407.66,1204.13 1408.24,1204.14 1408.83,1205.45 1409.42,1205.63 1410,1206.99 1410.59,1205.72 1411.17,1207.02 1411.76,1204.7 1412.35,1205.96 1412.93,1205.93 1413.52,1211.17 1414.11,1215.96 1414.69,1214.39 1415.28,1212.83 1415.87,1215.3 1416.45,1213.24 1417.04,1211.56 1417.63,1211.29 1418.21,1210.81 1418.8,1209.33 1419.38,1207.82 1419.97,1207.77 1420.56,1207.48 1421.14,1207.45 1421.73,1206.21 1422.32,1202.31 1422.9,1203.28 1423.49,1205.07 1424.08,1207.31 1424.66,1205.96 1425.25,1207.38 1425.83,1207.43 1426.42,1202.14 1427.01,1202.34 1427.59,1203.68 1428.18,1205.17 1428.77,1206.62 1429.35,1206.45 1429.94,1204.95 1430.53,1203.76 1431.11,1206.53 1431.7,1207.57 1432.29,1203.37 1432.87,1201.96 1433.46,1203.57 1434.04,1203.94 1434.63,1203.94 1435.22,1206.46 1435.8,1207.79 1436.39,1207.55 1436.98,1208.73 1437.56,1208.31 1438.15,1209.44 1438.74,1209.32 1439.32,1209.21 1439.91,1207.84 1440.5,1206.71 1441.08,1209.21 1441.67,1207.99 1442.25,1207.47 1442.84,1207.21 1443.43,1203.34 1444.01,1202.07 1444.6,1202.17 1445.19,1203.61 1445.77,1203.95 1446.36,1206.45 1446.95,1206.49 1447.53,1206.4 1448.12,1205.04 1448.7,1205.29 1449.29,1204.24 1449.88,1203.24 1450.46,1205.91 1451.05,1207.26 1451.64,1207.03 1452.22,1205.43 1452.81,1205.79 1453.4,1205.68 1453.98,1207.03 1454.57,1208.45 1455.16,1211.39 1455.74,1211.23 1456.33,1209.7 1456.91,1212.26 1457.5,1209.44 1458.09,1207.94 1458.67,1207.68 1459.26,1207.7 1459.85,1206.37 1460.43,1207.74 1461.02,1207.46 1461.61,1208.39 1462.19,1205.77 1462.78,1209.69 1463.37,1210.89 1463.95,1212.06 1464.54,1209.41 1465.12,1209.38 1465.71,1209.16 1466.3,1206.56 1466.88,1205.11 1467.47,1204.95 1468.06,1201.4 1468.64,1204.06 1469.23,1203.1 1469.82,1204.81 1470.4,1204.8 1470.99,1204.75 1471.57,1207.55 1472.16,1207.46 1472.75,1207.56 1473.33,1207.64 1473.92,1203.26 1474.51,1205.79 1475.09,1204.58 1475.68,1200.77 1476.27,1200.8 1476.85,1202.5 1477.44,1201.32 1478.03,1199.05 1478.61,1201.84 1479.2,1199.42 1479.78,1200.82 1480.37,1200.78 1480.96,1203.89 1481.54,1201.08 1482.13,1198.59 1482.72,1198.63 1483.3,1200.41 1483.89,1200.95 1484.48,1199.8 1485.06,1201.72 1485.65,1202.1 1486.24,1203.6 1486.82,1202.7 1487.41,1201.86 1487.99,1200.88 1488.58,1201.29 1489.17,1200.43 1489.75,1200.78 1490.34,1200.93 1490.93,1202.68 1491.51,1202.94 1492.1,1203.04 1492.69,1203.21 1493.27,1203.27 1493.86,1204.82 1494.45,1204.72 1495.03,1206.17 1495.62,1205.14 1496.2,1205.32 1496.79,1204.26 1497.38,1204.6 1497.96,1204.75 1498.55,1204.88 1499.14,1206.29 1499.72,1208.82 1500.31,1209.78 1500.9,1205.49 1501.48,1207.87 1502.07,1207.91 1502.65,1207.79 1503.24,1207.78 1503.83,1210.29 1504.41,1212.57 1505,1213.57 1505.59,1213.15 1506.17,1210.32 1506.76,1210.12 1507.35,1209.72 1507.93,1209.63 1508.52,1209.29 1509.11,1210.25 1509.69,1210.17 1510.28,1208.69 1510.86,1206.05 1511.45,1206.12 1512.04,1205.85 1512.62,1208.66 1513.21,1208.68 1513.8,1205.7 1514.38,1203.09 1514.97,1203.04 1515.56,1203.26 1516.14,1204.7 1516.73,1203.58 1517.32,1203.52 1517.9,1203.97 1518.49,1204.14 1519.07,1205.56 1519.66,1205.26 1520.25,1204.08 1520.83,1205.53 1521.42,1205.42 1522.01,1203.99 1522.59,1204.39 1523.18,1203.13 1523.77,1203.33 1524.35,1207.61 1524.94,1208.62 1525.52,1209.59 1526.11,1207.77 1526.7,1206.47 1527.28,1207.71 1527.87,1210.17 1528.46,1207.41 1529.04,1207.06 1529.63,1208.36 1530.22,1208.23 1530.8,1207.06 1531.39,1206.84 1531.98,1209.19 1532.56,1211.66 1533.15,1211.41 1533.73,1213.58 1534.32,1214.24 1534.91,1211.04 1535.49,1214.7 1536.08,1211.71 1536.67,1209.89 1537.25,1210.99 1537.84,1211.87 1538.43,1208.84 1539.01,1208.79 1539.6,1207.13 1540.19,1208.25 1540.77,1209.58 1541.36,1211.62 1541.94,1212.69 1542.53,1213.28 1543.12,1214.2 1543.7,1213.39 1544.29,1213.01 1544.88,1212.58 1545.46,1210.99 1546.05,1212.95 1546.64,1212.57 1547.22,1211.13 1547.81,1209.58 1548.4,1208.13 1548.98,1207.9 1549.57,1209.02 1550.15,1214.03 1550.74,1209.61 1551.33,1210.7 1551.91,1207.86 1552.5,1209 1553.09,1209.11 1553.67,1207.72 1554.26,1207.51 1554.85,1203.61 1555.43,1202.61 1556.02,1201.4 1556.6,1203.08 1557.19,1205.72 1557.78,1204.36 1558.36,1203.09 1558.95,1203.17 1559.54,1205.78 1560.12,1208.22 1560.71,1206.68 1561.3,1208.07 1561.88,1210.49 1562.47,1210.1 1563.06,1211.09 1563.64,1210.85 1564.23,1208.05 1564.81,1210.21 1565.4,1207.15 1565.99,1205.65 1566.57,1205.82 1567.16,1205.78 1567.75,1204.67 1568.33,1203.27 1568.92,1203.29 1569.51,1203.27 1570.09,1204.67 1570.68,1201.84 1571.27,1203.02 1571.85,1203.25 1572.44,1205.86 1573.02,1208.54 1573.61,1208.29 1574.2,1208.23 1574.78,1209.71 1575.37,1209.69 1575.96,1209.62 1576.54,1209.26 1577.13,1212.83 1577.72,1212.53 1578.3,1214.77 1578.89,1211.64 1579.47,1211.36 1580.06,1210.79 1580.65,1210.16 1581.23,1211.04 1581.82,1213.43 1582.41,1212.97 1582.99,1211.2 1583.58,1209.69 1584.17,1213.17 1584.75,1215.42 1585.34,1215.13 1585.93,1212.08 1586.51,1207.69 1587.1,1206.21 1587.68,1207.65 1588.27,1204.86 1588.86,1204.48 1589.44,1203.22 1590.03,1202.03 1590.62,1202.33 1591.2,1202.59 1591.79,1202.86 1592.38,1201.6 1592.96,1200.23 1593.55,1200.67 1594.14,1199.8 1594.72,1201.33 1595.31,1200.16 1595.89,1201.98 1596.48,1203.38 1597.07,1203.15 1597.65,1204.48 1598.24,1206.02 1598.83,1203.35 1599.41,1206.08 1600,1205.94 1600.59,1204.42 1601.17,1205.93 1601.76,1204.5 1602.34,1200.65 1602.93,1201.1 1603.52,1202.79 1604.1,1203.01 1604.69,1201.79 1605.28,1201.79 1605.86,1203.28 1606.45,1200.88 1607.04,1206.4 1607.62,1207.55 1608.21,1205.01 1608.8,1206.47 1609.38,1204.86 1609.97,1207.79 1610.55,1206.23 1611.14,1206.25 1611.73,1205.98 1612.31,1203.43 1612.9,1202.14 1613.49,1202.4 1614.07,1202.38 1614.66,1198.64 1615.25,1198.86 1615.83,1199.21 1616.42,1197.16 1617.01,1196.54 1617.59,1197.01 1618.18,1198.86 1618.76,1199.2 1619.35,1198.59 1619.94,1196.47 1620.52,1195.46 1621.11,1196.23 1621.7,1194.16 1622.28,1191.19 1622.87,1194.5 1623.46,1193.7 1624.04,1195.44 1624.63,1198.51 1625.22,1198.19 1625.8,1201.2 1626.39,1201.4 1626.97,1198.79 1627.56,1201.83 1628.15,1201.95 1628.73,1203.56 1629.32,1203.68 1629.91,1203.7 1630.49,1202.43 1631.08,1201.36 1631.67,1205.6 1632.25,1208.44 1632.84,1209.58 1633.42,1210.64 1634.01,1207.69 1634.6,1208.83 1635.18,1208.5 1635.77,1209.85 1636.36,1209.33 1636.94,1207.98 1637.53,1206.52 1638.12,1206.55 1638.7,1205.21 1639.29,1205.13 1639.88,1201.44 1640.46,1202.86 1641.05,1200.58 1641.63,1202.15 1642.22,1201.35 1642.81,1203.02 1643.39,1200.76 1643.98,1202.24 1644.57,1200.55 1645.15,1200.76 1645.74,1199.93 1646.33,1202.76 1646.91,1205.65 1647.5,1204.55 1648.09,1206.07 1648.67,1207.2 1649.26,1206.99 1649.84,1211.17 1650.43,1210.94 1651.02,1211.86 1651.6,1210.14 1652.19,1211.22 1652.78,1212.06 1653.36,1210.55 1653.95,1206.47 1654.54,1204.99 1655.12,1206.51 1655.71,1209.11 1656.29,1212.47 1656.88,1211.97 1657.47,1213.09 1658.05,1209.71 1658.64,1211.08 1659.23,1210.89 1659.81,1207.86 1660.4,1206.62 1660.99,1206.71 1661.57,1203.71 1662.16,1205.18 1662.75,1206.65 1663.33,1202.74 1663.92,1198.89 1664.5,1199.33 1665.09,1199.9 1665.68,1201.6 1666.26,1200.65 1666.85,1202.24 1667.44,1203.34 1668.02,1205.9 1668.61,1208.39 1669.2,1209.63 1669.78,1209.26 1670.37,1208.89 1670.96,1208.9 1671.54,1208.67 1672.13,1207.31 1672.71,1208.16 1673.3,1207.91 1673.89,1211.46 1674.47,1208.63 1675.06,1207.19 1675.65,1206.81 1676.23,1205.5 1676.82,1206.76 1677.41,1206.85 1677.99,1204.12 1678.58,1202.96 1679.17,1200.69 1679.75,1200.81 1680.34,1205.02 1680.92,1206.16 1681.51,1208.83 1682.1,1207.48 1682.68,1207.19 1683.27,1205.71 1683.86,1205.58 1684.44,1207.11 1685.03,1209.38 1685.62,1207.83 1686.2,1205.11 1686.79,1207.63 1687.37,1208.83 1687.96,1209.48 1688.55,1207.85 1689.13,1207.62 1689.72,1208.89 1690.31,1209.09 1690.89,1206.21 1691.48,1206.18 1692.07,1206.17 1692.65,1206.28 1693.24,1204.95 1693.83,1205.06 1694.41,1203.75 1695,1205.06 1695.58,1207.9 1696.17,1207.51 1696.76,1207.69 1697.34,1203.67 1697.93,1203.76 1698.52,1205.02 1699.1,1205.14 1699.69,1203.62 1700.28,1206.28 1700.86,1204.92 1701.45,1203.85 1702.04,1201.16 1702.62,1201.57 1703.21,1201.62 1703.79,1201.76 1704.38,1201.9 1704.97,1203.34 1705.55,1202.1 1706.14,1200.64 1706.73,1201.14 1707.31,1201.41 1707.9,1200.35 1708.49,1199.04 1709.07,1200.84 1709.66,1202.46 1710.24,1203.96 1710.83,1204.38 1711.42,1204.21 1712,1203.22 1712.59,1202.3 1713.18,1203.82 1713.76,1205.34 1714.35,1204.47 1714.94,1203.39 1715.52,1205.16 1716.11,1206.22 1716.7,1206.13 1717.28,1208.88 1717.87,1207.84 1718.45,1205.21 1719.04,1203.74 1719.63,1202.79 1720.21,1204.54 1720.8,1202.11 1721.39,1201.22 1721.97,1202.83 1722.56,1204.36 1723.15,1207.08 1723.73,1205.8 1724.32,1203.35 1724.91,1203.36 1725.49,1204.72 1726.08,1202.4 1726.66,1202.46 1727.25,1204.18 1727.84,1204.47 1728.42,1201.94 1729.01,1203.37 1729.6,1204.87 1730.18,1206.03 1730.77,1206.95 1731.36,1205.52 1731.94,1208.11 1732.53,1206.71 1733.11,1206.75 1733.7,1206.6 1734.29,1208.24 1734.87,1205.32 1735.46,1206.67 1736.05,1207.87 1736.63,1206.54 1737.22,1205.04 1737.81,1203.8 1738.39,1206.23 1738.98,1208.98 1739.57,1207.54 1740.15,1210.24 1740.74,1210.21 1741.32,1209.95 1741.91,1208.31 1742.5,1208.46 1743.08,1212.11 1743.67,1210.41 1744.26,1212.92 1744.84,1213.6 1745.43,1213.12 1746.02,1212.96 1746.6,1211.4 1747.19,1209.77 1747.78,1210.99 1748.36,1211.85 1748.95,1212.9 1749.53,1213.76 1750.12,1215.84 1750.71,1212.91 1751.29,1212.71 1751.88,1209.71 1752.47,1207.86 1753.05,1207.86 1753.64,1207.62 1754.23,1210.25 1754.81,1210.38 1755.4,1208.56 1755.99,1209.75 1756.57,1209.3 1757.16,1210.22 1757.74,1209.99 1758.33,1208.42 1758.92,1208.36 1759.5,1211.92 1760.09,1211.44 1760.68,1209.95 1761.26,1209.36 1761.85,1208.93 1762.44,1208.99 1763.02,1210.14 1763.61,1212.54 1764.19,1211.04 1764.78,1208.21 1765.37,1206.68 1765.95,1202.98 1766.54,1203.08 1767.13,1203.24 1767.71,1204.53 1768.3,1205.73 1768.89,1205.55 1769.47,1205.57 1770.06,1210.48 1770.65,1211.26 1771.23,1209.74 1771.82,1207.11 1772.4,1209.3 1772.99,1210.33 1773.58,1210.21 1774.16,1208.78 1774.75,1208.8 1775.34,1208.38 1775.92,1210.65 1776.51,1210.16 1777.1,1212.59 1777.68,1211.05 1778.27,1206.78 1778.86,1208.14 1779.44,1208.07 1780.03,1209.25 1780.61,1208.97 1781.2,1207.77 1781.79,1207.43 1782.37,1208.25 1782.96,1209.14 1783.55,1209.18 1784.13,1206.12 1784.72,1206.15 1785.31,1206.43 1785.89,1207.53 1786.48,1207.3 1787.06,1205.7 1787.65,1201.78 1788.24,1200.49 1788.82,1199.64 1789.41,1200 1790,1201.67 1790.58,1200.94 1791.17,1198.59 1791.76,1199.02 1792.34,1199.26 1792.93,1197.14 1793.52,1197.65 1794.1,1194.33 1794.69,1193.87 1795.27,1194.74 1795.86,1196.45 1796.45,1195.73 1797.03,1195.97 1797.62,1197.7 1798.21,1196.67 1798.79,1199.79 1799.38,1200.16 1799.97,1201.55 1800.55,1201.7 1801.14,1204.54 1801.73,1204.66 1802.31,1202.21 1802.9,1199.6 1803.48,1200.05 1804.07,1199.14 1804.66,1198.07 1805.24,1197.12 1805.83,1196.28 1806.42,1195.48 1807,1196.4 1807.59,1195.74 1808.18,1195.17 1808.76,1196.79 1809.35,1197.41 1809.94,1200.6 1810.52,1200.67 1811.11,1201.96 1811.69,1204.77 1812.28,1207.24 1812.87,1204.75 1813.45,1201.96 1814.04,1202.2 1814.63,1199.65 1815.21,1198.82 1815.8,1199.16 1816.39,1198.22 1816.97,1201.03 1817.56,1202.56 1818.14,1202.55 1818.73,1204.18 1819.32,1208.13 1819.9,1208.26 1820.49,1206.74 1821.08,1207.93 1821.66,1207.78 1822.25,1208.81 1822.84,1206.07 1823.42,1205.98 1824.01,1205.81 1824.6,1206.25 1825.18,1207.39 1825.77,1210.03 1826.35,1211.24 1826.94,1208.66 1827.53,1208.65 1828.11,1208.65 1828.7,1211.05 1829.29,1209.33 1829.87,1206.85 1830.46,1206.87 1831.05,1204.14 1831.63,1204.25 1832.22,1204.3 1832.81,1200.31 1833.39,1199.37 1833.98,1201.04 1834.56,1201.45 1835.15,1201.74 1835.74,1203.2 1836.32,1203.33 1836.91,1202.1 1837.5,1202.05 1838.08,1201.23 1838.67,1201.28 1839.26,1201.64 1839.84,1203.25 1840.43,1206.09 1841.01,1204.71 1841.6,1202.4 1842.19,1203.7 1842.77,1203.74 1843.36,1205.32 1843.95,1204.02 1844.53,1202.77 1845.12,1202.95 1845.71,1203.25 1846.29,1203.44 1846.88,1200.74 1847.47,1198.53 1848.05,1199 1848.64,1199.49 1849.22,1198.38 1849.81,1201.13 1850.4,1204.04 1850.98,1204.45 1851.57,1206.93 1852.16,1209.77 1852.74,1210.96 1853.33,1213.36 1853.92,1211.51 1854.5,1214.12 1855.09,1211.4 1855.68,1209.81 1856.26,1209.36 1856.85,1214.25 1857.43,1216.37 1858.02,1214.63 1858.61,1215.43 1859.19,1216.1 1859.78,1215.3 1860.37,1216.25 1860.95,1215.6 1861.54,1212.55 1862.13,1212.2 1862.71,1210.63 1863.3,1208.93 1863.88,1207.51 1864.47,1208.68 1865.06,1209.65 1865.64,1208.12 1866.23,1209.23 1866.82,1207.68 1867.4,1207.41 1867.99,1204.45 1868.58,1204.69 1869.16,1202.1 1869.75,1200.45 1870.34,1202.08 1870.92,1203.51 1871.51,1202.1 1872.09,1200.86 1872.68,1203.98 1873.27,1204.21 1873.85,1205.54 1874.44,1206.66 1875.03,1206.42 1875.61,1206.42 1876.2,1211.42 1876.79,1212.43 1877.37,1210.9 1877.96,1210.96 1878.55,1209.33 1879.13,1206.56 1879.72,1203.97 1880.3,1203.13 1880.89,1204.36 1881.48,1205.63 1882.06,1205.62 1882.65,1205.81 1883.24,1204.85 1883.82,1203.62 1884.41,1204.72 1885,1203.61 1885.58,1202.49 1886.17,1205.16 1886.76,1206.61 1887.34,1205.25 1887.93,1205.17 1888.51,1205.67 1889.1,1206.85 1889.69,1201.85 1890.27,1203.43 1890.86,1202.07 1891.45,1205 1892.03,1203.73 1892.62,1205.45 1893.21,1206.62 1893.79,1207.7 1894.38,1207.34 1894.96,1207.21 1895.55,1207.11 1896.14,1209.52 1896.72,1205.78 1897.31,1205.84 1897.9,1208.49 1898.48,1209.59 1899.07,1210.42 1899.66,1210.3 1900.24,1212.75 1900.83,1215.06 1901.42,1215.8 1902,1209.14 1902.59,1208.99 1903.17,1210.03 1903.76,1209.68 1904.35,1212.03 1904.93,1211.66 1905.52,1214.86 1906.11,1211.86 1906.69,1211.72 1907.28,1211.29 1907.87,1208.22 1908.45,1208.06 1909.04,1209.24 1909.63,1207.8 1910.21,1206.37 1910.8,1209.19 1911.38,1211.7 1911.97,1210.09 1912.56,1206.95 1913.14,1206.75 1913.73,1206.7 1914.32,1206.57 1914.9,1203.83 1915.49,1202.69 1916.08,1200.39 1916.66,1200.65 1917.25,1199.94 1917.83,1202.76 1918.42,1201.39 1919.01,1202.88 1919.59,1200.47 1920.18,1200.69 1920.77,1202.61 1921.35,1206.61 1921.94,1205.27 1922.53,1202.6 1923.11,1205.35 1923.7,1206.44 1924.29,1207.73 1924.87,1208.85 1925.46,1208.79 1926.04,1205.75 1926.63,1203 1927.22,1207.16 1927.8,1204.92 1928.39,1206.36 1928.98,1204.78 1929.56,1206.02 1930.15,1205.8 1930.74,1206.2 1931.32,1211.51 1931.91,1211.42 1932.5,1210.2 1933.08,1209.95 1933.67,1207.28 1934.25,1207.17 1934.84,1205.52 1935.43,1206.97 1936.01,1209.29 1936.6,1208.87 1937.19,1210.13 1937.77,1207.6 1938.36,1208.62 1938.95,1207.09 1939.53,1207.32 1940.12,1207.08 1940.71,1204.43 1941.29,1204.79 1941.88,1203.54 1942.46,1205.95 1943.05,1207.24 1943.64,1205.92 1944.22,1203.27 1944.81,1204.81 1945.4,1210.11 1945.98,1209.68 1946.57,1210.39 1947.16,1208.82 1947.74,1208.78 1948.33,1208.58 1948.91,1208.55 1949.5,1206.99 1950.09,1206.93 1950.67,1205.59 1951.26,1205.55 1951.85,1202.96 1952.43,1200.47 1953.02,1202.08 1953.61,1203.46 1954.19,1203.42 1954.78,1202.31 1955.37,1201.15 1955.95,1201.38 1956.54,1204.34 1957.12,1203.15 1957.71,1201.8 1958.3,1203.38 1958.88,1200.96 1959.47,1201.05 1960.06,1199.8 1960.64,1200.52 1961.23,1201.72 1961.82,1203.22 1962.4,1203.21 1962.99,1201.97 1963.58,1203.4 1964.16,1202.53 1964.75,1201.61 1965.33,1204.55 1965.92,1207.37 1966.51,1207.35 1967.09,1207.42 1967.68,1207.19 1968.27,1205.65 1968.85,1207.01 1969.44,1207.94 1970.03,1206.5 1970.61,1205.35 1971.2,1204.17 1971.78,1204.2 1972.37,1204.18 1972.96,1204.18 1973.54,1202.94 1974.13,1201.9 1974.72,1203.46 1975.3,1203.19 1975.89,1202.12 1976.48,1202.4 1977.06,1202.54 1977.65,1204.1 1978.24,1202.74 1978.82,1202.98 1979.41,1201.5 1979.99,1201.76 1980.58,1202.28 1981.17,1203.68 1981.75,1201.11 1982.34,1201.49 1982.93,1201.83 1983.51,1201.07 1984.1,1200.13 1984.69,1203.22 1985.27,1204.55 1985.86,1204.65 1986.45,1204.72 1987.03,1203.21 1987.62,1204.57 1988.2,1207.09 1988.79,1208.23 1989.38,1206.61 1989.96,1208.06 1990.55,1210.55 1991.14,1206.48 1991.72,1203.79 1992.31,1205.26 1992.9,1206.61 1993.48,1206.63 1994.07,1208.19 1994.65,1208.31 1995.24,1209.23 1995.83,1207.78 1996.41,1205.05 1997,1206.66 1997.59,1205.15 1998.17,1202.54 1998.76,1202.55 1999.35,1207.96 1999.93,1209.19 2000.52,1209.02 2001.11,1208.81 2001.69,1208.41 2002.28,1208.01 2002.86,1207.82 2003.45,1207.7 2004.04,1209.19 2004.62,1205.1 2005.21,1204.9 2005.8,1206.44 2006.38,1205.39 2006.97,1206.91 2007.56,1206.57 2008.14,1206.66 2008.73,1206.42 2009.32,1206.49 2009.9,1205.1 2010.49,1206.34 2011.07,1206.21 2011.66,1208.76 2012.25,1207.28 2012.83,1206.99 2013.42,1208.28 2014.01,1210.97 2014.59,1210.59 2015.18,1210.34 2015.77,1209.14 2016.35,1207.78 2016.94,1207.78 2017.53,1211.59 2018.11,1208.55 2018.7,1211.01 2019.28,1209.7 2019.87,1206.65 2020.46,1207.65 2021.04,1207.41 2021.63,1207.48 2022.22,1208.44 2022.8,1209.91 2023.39,1212.32 2023.98,1213.33 2024.56,1211.89 2025.15,1211.43 2025.73,1211.28 2026.32,1206.89 2026.91,1204.18 2027.49,1202.95 2028.08,1204.09 2028.67,1201.69 2029.25,1201.73 2029.84,1200.6 2030.43,1200.99 2031.01,1199.96 2031.6,1200.16 2032.19,1201.63 2032.77,1200.34 2033.36,1200.5 2033.94,1199.2 2034.53,1199.49 2035.12,1201.49 2035.7,1201.65 2036.29,1200.61 2036.88,1201.03 2037.46,1202.52 2038.05,1205.22 2038.64,1204.1 2039.22,1207.87 2039.81,1207.75 2040.4,1207.86 2040.98,1208.03 2041.57,1208.01 2042.15,1207.63 2042.74,1206.44 2043.33,1206.6 2043.91,1205.54 2044.5,1207 2045.09,1206.98 2045.67,1201.8 2046.26,1201.91 2046.85,1206.08 2047.43,1205.8 2048.02,1205.55 2048.6,1205.67 2049.19,1205.87 2049.78,1204.62 2050.36,1204.65 2050.95,1204.82 2051.54,1204.89 2052.12,1203.65 2052.71,1207.58 2053.3,1206.23 2053.88,1206.36 2054.47,1206.42 2055.06,1206.52 2055.64,1206.16 2056.23,1206.11 2056.81,1207.23 2057.4,1209.89 2057.99,1209.49 2058.57,1209.18 2059.16,1207.72 2059.75,1210.05 2060.33,1210.08 2060.92,1211.23 2061.51,1213.58 2062.09,1211.92 2062.68,1207.83 2063.27,1205.12 2063.85,1199.64 2064.44,1201.32 2065.02,1202.58 2065.61,1200.28 2066.2,1201.82 2066.78,1199.36 2067.37,1199.53 2067.96,1201 2068.54,1201.49 2069.13,1203.18 2069.72,1201.97 2070.3,1203.69 2070.89,1204.11 2071.48,1205.56 2072.06,1206.84 2072.65,1205.43 2073.23,1206.99 2073.82,1206.96 2074.41,1206.97 2074.99,1205.61 2075.58,1209.54 2076.17,1210.73 2076.75,1211.68 2077.34,1211.44 2077.93,1208.79 2078.51,1208.67 2079.1,1207.16 2079.68,1207.28 2080.27,1208.33 2080.86,1208 2081.44,1212.01 2082.03,1215.6 2082.62,1214.04 2083.2,1212.2 2083.79,1210.38 2084.38,1210.36 2084.96,1211.5 2085.55,1211.56 2086.14,1210 2086.72,1212.15 2087.31,1214.39 2087.89,1215.3 2088.48,1213.64 2089.07,1212.98 2089.65,1212.5 2090.24,1212.17 2090.83,1207.81 2091.41,1206.3 2092,1206.35 2092.59,1206.31 2093.17,1205.13 2093.76,1205 2094.35,1205.1 2094.93,1203.65 2095.52,1204 2096.1,1205.41 2096.69,1199.96 2097.28,1201.81 2097.86,1200.68 2098.45,1200.84 2099.04,1201.22 2099.62,1204.1 2100.21,1202.85 2100.8,1205.46 2101.38,1204.09 2101.97,1204.28 2102.55,1203.08 2103.14,1204.54 2103.73,1204.74 2104.31,1204.69 2104.9,1206.22 2105.49,1207.67 2106.07,1207.56 2106.66,1211.31 2107.25,1212.19 2107.83,1210.76 2108.42,1209.12 2109.01,1207.55 2109.59,1207.58 2110.18,1204.96 2110.76,1206.5 2111.35,1202.41 2111.94,1203.82 2112.52,1202.51 2113.11,1201.79 2113.7,1201.92 2114.28,1200.86 2114.87,1201.49 2115.46,1200.48 2116.04,1206.06 2116.63,1204.95 2117.22,1206.47 2117.8,1210.32 2118.39,1209.95 2118.97,1212.35 2119.56,1212.07 2120.15,1211.86 2120.73,1211.56 2121.32,1210.03 2121.91,1208.56 2122.49,1208.69 2123.08,1207.21 2123.67,1207.12 2124.25,1204.32 2124.84,1204.43 2125.42,1205.83 2126.01,1203.41 2126.6,1206.05 2127.18,1208.87 2127.77,1208.82 2128.36,1207.52 2128.94,1208.94 2129.53,1207.63 2130.12,1210.48 2130.7,1209 2131.29,1211.53 2131.88,1209.83 2132.46,1208.28 2133.05,1209.24 2133.63,1210.07 2134.22,1204.62 2134.81,1204.71 2135.39,1204.88 2135.98,1210.08 2136.57,1208.62 2137.15,1209.75 2137.74,1206.86 2138.33,1204.39 2138.91,1204.82 2139.5,1204.8 2140.09,1203.27 2140.67,1203.29 2141.26,1200.96 2141.84,1198.78 2142.43,1197.98 2143.02,1197.07 2143.6,1197.55 2144.19,1200.81 2144.78,1203.87 2145.36,1203.88 2145.95,1203.99 2146.54,1202.73 2147.12,1202.94 2147.71,1204.21 2148.3,1202.95 2148.88,1201.85 2149.47,1200.53 2150.05,1202.16 2150.64,1201.14 2151.23,1202.57 2151.81,1203.92 2152.4,1206.57 2152.99,1206.18 2153.57,1208.97 2154.16,1207.27 2154.75,1210.69 2155.33,1205.31 2155.92,1202.55 2156.5,1200.01 2157.09,1201.75 2157.68,1205.67 2158.26,1206.89 \"/>\n<path clip-path=\"url(#clip522)\" d=\"M986.025 1206.28 L986.612 1206.28 L987.198 1206.28 L987.785 1206.28 L988.371 1206.28 L988.957 1206.28 L989.544 1206.28 L990.13 1206.28 L990.717 1206.28 L991.303 1206.28 L991.889 1206.28 L992.476 1206.28 L993.062 1206.28 L993.649 1206.28 L994.235 1206.28 L994.822 1206.28 L995.408 1206.28 L995.994 1206.28 L996.581 1206.28 L997.167 1206.28 L997.754 1206.28 L998.34 1206.28 L998.926 1206.28 L999.513 1206.28 L1000.1 1206.28 L1000.69 1206.28 L1001.27 1206.28 L1001.86 1206.28 L1002.44 1206.28 L1003.03 1206.28 L1003.62 1206.28 L1004.2 1206.28 L1004.79 1206.28 L1005.38 1206.28 L1005.96 1206.28 L1006.55 1206.28 L1007.14 1206.28 L1007.72 1206.28 L1008.31 1206.28 L1008.9 1206.28 L1009.48 1206.28 L1010.07 1206.28 L1010.65 1206.28 L1011.24 1206.28 L1011.83 1206.28 L1012.41 1206.28 L1013 1206.28 L1013.59 1206.28 L1014.17 1206.28 L1014.76 1206.28 L1015.35 1206.28 L1015.93 1206.28 L1016.52 1206.28 L1017.11 1206.28 L1017.69 1206.28 L1018.28 1206.28 L1018.86 1206.28 L1019.45 1206.28 L1020.04 1206.28 L1020.62 1206.28 L1021.21 1206.28 L1021.8 1206.28 L1022.38 1206.28 L1022.97 1206.28 L1023.56 1206.28 L1024.14 1206.28 L1024.73 1206.28 L1025.32 1206.28 L1025.9 1206.28 L1026.49 1206.28 L1027.07 1206.28 L1027.66 1206.28 L1028.25 1206.28 L1028.83 1206.28 L1029.42 1206.28 L1030.01 1206.28 L1030.59 1206.28 L1031.18 1206.28 L1031.77 1206.28 L1032.35 1206.28 L1032.94 1206.28 L1033.52 1206.28 L1034.11 1206.28 L1034.7 1206.28 L1035.28 1206.28 L1035.87 1206.28 L1036.46 1206.28 L1037.04 1206.28 L1037.63 1206.28 L1038.22 1206.28 L1038.8 1206.28 L1039.39 1206.28 L1039.98 1206.28 L1040.56 1206.28 L1041.15 1206.28 L1041.73 1206.28 L1042.32 1206.28 L1042.91 1206.28 L1043.49 1206.28 L1044.08 1206.28 L1044.67 1206.28 L1045.25 1206.28 L1045.84 1206.28 L1046.43 1206.28 L1047.01 1206.28 L1047.6 1206.28 L1048.19 1206.28 L1048.77 1206.28 L1049.36 1206.28 L1049.94 1206.28 L1050.53 1206.28 L1051.12 1206.28 L1051.7 1206.28 L1052.29 1206.28 L1052.88 1206.28 L1053.46 1206.28 L1054.05 1206.28 L1054.64 1206.28 L1055.22 1206.28 L1055.81 1206.28 L1056.39 1206.28 L1056.98 1206.28 L1057.57 1206.28 L1058.15 1206.28 L1058.74 1206.28 L1059.33 1206.28 L1059.91 1206.28 L1060.5 1206.28 L1061.09 1206.28 L1061.67 1206.28 L1062.26 1206.28 L1062.85 1206.28 L1063.43 1206.28 L1064.02 1206.28 L1064.6 1206.28 L1065.19 1206.28 L1065.78 1206.28 L1066.36 1206.28 L1066.95 1206.28 L1067.54 1206.28 L1068.12 1206.28 L1068.71 1206.28 L1069.3 1206.28 L1069.88 1206.28 L1070.47 1206.28 L1071.06 1206.28 L1071.64 1206.28 L1072.23 1206.28 L1072.81 1206.28 L1073.4 1206.28 L1073.99 1206.28 L1074.57 1206.28 L1075.16 1206.28 L1075.75 1206.28 L1076.33 1206.28 L1076.92 1206.28 L1077.51 1206.28 L1078.09 1206.28 L1078.68 1206.28 L1079.26 1206.28 L1079.85 1206.28 L1080.44 1206.28 L1081.02 1206.28 L1081.61 1206.28 L1082.2 1206.28 L1082.78 1206.28 L1083.37 1206.28 L1083.96 1206.28 L1084.54 1206.28 L1085.13 1206.28 L1085.72 1206.28 L1086.3 1206.28 L1086.89 1206.28 L1087.47 1206.28 L1088.06 1206.28 L1088.65 1206.28 L1089.23 1206.28 L1089.82 1206.28 L1090.41 1206.28 L1090.99 1206.28 L1091.58 1206.28 L1092.17 1206.28 L1092.75 1206.28 L1093.34 1206.28 L1093.93 1206.28 L1094.51 1206.28 L1095.1 1206.28 L1095.68 1206.28 L1096.27 1206.28 L1096.86 1206.28 L1097.44 1206.28 L1098.03 1206.28 L1098.62 1206.28 L1099.2 1206.28 L1099.79 1206.28 L1100.38 1206.28 L1100.96 1206.28 L1101.55 1206.28 L1102.14 1206.28 L1102.72 1206.28 L1103.31 1206.28 L1103.89 1206.28 L1104.48 1206.28 L1105.07 1206.28 L1105.65 1206.28 L1106.24 1206.28 L1106.83 1206.28 L1107.41 1206.28 L1108 1206.28 L1108.59 1206.28 L1109.17 1206.28 L1109.76 1206.28 L1110.34 1206.28 L1110.93 1206.28 L1111.52 1206.28 L1112.1 1206.28 L1112.69 1206.28 L1113.28 1206.28 L1113.86 1206.28 L1114.45 1206.28 L1115.04 1206.28 L1115.62 1206.28 L1116.21 1206.28 L1116.8 1206.28 L1117.38 1206.28 L1117.97 1206.28 L1118.55 1206.28 L1119.14 1206.28 L1119.73 1206.28 L1120.31 1206.28 L1120.9 1206.28 L1121.49 1206.28 L1122.07 1206.28 L1122.66 1206.28 L1123.25 1206.28 L1123.83 1206.28 L1124.42 1206.28 L1125.01 1206.28 L1125.59 1206.28 L1126.18 1206.28 L1126.76 1206.28 L1127.35 1206.28 L1127.94 1206.28 L1128.52 1206.28 L1129.11 1206.28 L1129.7 1206.28 L1130.28 1206.28 L1130.87 1206.28 L1131.46 1206.28 L1132.04 1206.28 L1132.63 1206.28 L1133.21 1206.28 L1133.8 1206.28 L1134.39 1206.28 L1134.97 1206.28 L1135.56 1206.28 L1136.15 1206.28 L1136.73 1206.28 L1137.32 1206.28 L1137.91 1206.28 L1138.49 1206.28 L1139.08 1206.28 L1139.67 1206.28 L1140.25 1206.28 L1140.84 1206.28 L1141.42 1206.28 L1142.01 1206.28 L1142.6 1206.28 L1143.18 1206.28 L1143.77 1206.28 L1144.36 1206.28 L1144.94 1206.28 L1145.53 1206.28 L1146.12 1206.28 L1146.7 1206.28 L1147.29 1206.28 L1147.88 1206.28 L1148.46 1206.28 L1149.05 1206.28 L1149.63 1206.28 L1150.22 1206.28 L1150.81 1206.28 L1151.39 1206.28 L1151.98 1206.28 L1152.57 1206.28 L1153.15 1206.28 L1153.74 1206.28 L1154.33 1206.28 L1154.91 1206.28 L1155.5 1206.28 L1156.09 1206.28 L1156.67 1206.28 L1157.26 1206.28 L1157.84 1206.28 L1158.43 1206.28 L1159.02 1206.28 L1159.6 1206.28 L1160.19 1206.28 L1160.78 1206.28 L1161.36 1206.28 L1161.95 1206.28 L1162.54 1206.28 L1163.12 1206.28 L1163.71 1206.28 L1164.29 1206.28 L1164.88 1206.28 L1165.47 1206.28 L1166.05 1206.28 L1166.64 1206.28 L1167.23 1206.28 L1167.81 1206.28 L1168.4 1206.28 L1168.99 1206.28 L1169.57 1206.28 L1170.16 1206.28 L1170.75 1206.28 L1171.33 1206.28 L1171.92 1206.28 L1172.5 1206.28 L1173.09 1206.28 L1173.68 1206.28 L1174.26 1206.28 L1174.85 1206.28 L1175.44 1206.28 L1176.02 1206.28 L1176.61 1206.28 L1177.2 1206.28 L1177.78 1206.28 L1178.37 1206.28 L1178.96 1206.28 L1179.54 1206.28 L1180.13 1206.28 L1180.71 1206.28 L1181.3 1206.28 L1181.89 1206.28 L1182.47 1206.28 L1183.06 1206.28 L1183.65 1206.28 L1184.23 1206.28 L1184.82 1206.28 L1185.41 1206.28 L1185.99 1206.28 L1186.58 1206.28 L1187.16 1206.28 L1187.75 1206.28 L1188.34 1206.28 L1188.92 1206.28 L1189.51 1206.28 L1190.1 1206.28 L1190.68 1206.28 L1191.27 1206.28 L1191.86 1206.28 L1192.44 1206.28 L1193.03 1206.28 L1193.62 1206.28 L1194.2 1206.28 L1194.79 1206.28 L1195.37 1206.28 L1195.96 1206.28 L1196.55 1206.28 L1197.13 1206.28 L1197.72 1206.28 L1198.31 1206.28 L1198.89 1206.28 L1199.48 1206.28 L1200.07 1206.28 L1200.65 1206.28 L1201.24 1206.28 L1201.83 1206.28 L1202.41 1206.28 L1203 1206.28 L1203.58 1206.28 L1204.17 1206.28 L1204.76 1206.28 L1205.34 1206.28 L1205.93 1206.28 L1206.52 1206.28 L1207.1 1206.28 L1207.69 1206.28 L1208.28 1206.28 L1208.86 1206.28 L1209.45 1206.28 L1210.03 1206.28 L1210.62 1206.28 L1211.21 1206.28 L1211.79 1206.28 L1212.38 1206.28 L1212.97 1206.28 L1213.55 1206.28 L1214.14 1206.28 L1214.73 1206.28 L1215.31 1206.28 L1215.9 1206.28 L1216.49 1206.28 L1217.07 1206.28 L1217.66 1206.28 L1218.24 1206.28 L1218.83 1206.28 L1219.42 1206.28 L1220 1206.28 L1220.59 1206.28 L1221.18 1206.28 L1221.76 1206.28 L1222.35 1206.28 L1222.94 1206.28 L1223.52 1206.28 L1224.11 1206.28 L1224.7 1206.28 L1225.28 1206.28 L1225.87 1206.28 L1226.45 1206.28 L1227.04 1206.28 L1227.63 1206.28 L1228.21 1206.28 L1228.8 1206.28 L1229.39 1206.28 L1229.97 1206.28 L1230.56 1206.28 L1231.15 1206.28 L1231.73 1206.28 L1232.32 1206.28 L1232.91 1206.28 L1233.49 1206.28 L1234.08 1206.28 L1234.66 1206.28 L1235.25 1206.28 L1235.84 1206.28 L1236.42 1206.28 L1237.01 1206.28 L1237.6 1206.28 L1238.18 1206.28 L1238.77 1206.28 L1239.36 1206.28 L1239.94 1206.28 L1240.53 1206.28 L1241.11 1206.28 L1241.7 1206.28 L1242.29 1206.28 L1242.87 1206.28 L1243.46 1206.28 L1244.05 1206.28 L1244.63 1206.28 L1245.22 1206.28 L1245.81 1206.28 L1246.39 1206.28 L1246.98 1206.28 L1247.57 1206.28 L1248.15 1206.28 L1248.74 1206.28 L1249.32 1206.28 L1249.91 1206.28 L1250.5 1206.28 L1251.08 1206.28 L1251.67 1206.28 L1252.26 1206.28 L1252.84 1206.28 L1253.43 1206.28 L1254.02 1206.28 L1254.6 1206.28 L1255.19 1206.28 L1255.78 1206.28 L1256.36 1206.28 L1256.95 1206.28 L1257.53 1206.28 L1258.12 1206.28 L1258.71 1206.28 L1259.29 1206.28 L1259.88 1206.28 L1260.47 1206.28 L1261.05 1206.28 L1261.64 1206.28 L1262.23 1206.28 L1262.81 1206.28 L1263.4 1206.28 L1263.98 1206.28 L1264.57 1206.28 L1265.16 1206.28 L1265.74 1206.28 L1266.33 1206.28 L1266.92 1206.28 L1267.5 1206.28 L1268.09 1206.28 L1268.68 1206.28 L1269.26 1206.28 L1269.85 1206.28 L1270.44 1206.28 L1271.02 1206.28 L1271.61 1206.28 L1272.19 1206.28 L1272.78 1206.28 L1273.37 1206.28 L1273.95 1206.28 L1274.54 1206.28 L1275.13 1206.28 L1275.71 1206.28 L1276.3 1206.28 L1276.89 1206.28 L1277.47 1206.28 L1278.06 1206.28 L1278.65 1206.28 L1279.23 1206.28 L1279.82 1206.28 L1280.4 1206.28 L1280.99 1206.28 L1281.58 1206.28 L1282.16 1206.28 L1282.75 1206.28 L1283.34 1206.28 L1283.92 1206.28 L1284.51 1206.28 L1285.1 1206.28 L1285.68 1206.28 L1286.27 1206.28 L1286.86 1206.28 L1287.44 1206.28 L1288.03 1206.28 L1288.61 1206.28 L1289.2 1206.28 L1289.79 1206.28 L1290.37 1206.28 L1290.96 1206.28 L1291.55 1206.28 L1292.13 1206.28 L1292.72 1206.28 L1293.31 1206.28 L1293.89 1206.28 L1294.48 1206.28 L1295.06 1206.28 L1295.65 1206.28 L1296.24 1206.28 L1296.82 1206.28 L1297.41 1206.28 L1298 1206.28 L1298.58 1206.28 L1299.17 1206.28 L1299.76 1206.28 L1300.34 1206.28 L1300.93 1206.28 L1301.52 1206.28 L1302.1 1206.28 L1302.69 1206.28 L1303.27 1206.28 L1303.86 1206.28 L1304.45 1206.28 L1305.03 1206.28 L1305.62 1206.28 L1306.21 1206.28 L1306.79 1206.28 L1307.38 1206.28 L1307.97 1206.28 L1308.55 1206.28 L1309.14 1206.28 L1309.73 1206.28 L1310.31 1206.28 L1310.9 1206.28 L1311.48 1206.28 L1312.07 1206.28 L1312.66 1206.28 L1313.24 1206.28 L1313.83 1206.28 L1314.42 1206.28 L1315 1206.28 L1315.59 1206.28 L1316.18 1206.28 L1316.76 1206.28 L1317.35 1206.28 L1317.93 1206.28 L1318.52 1206.28 L1319.11 1206.28 L1319.69 1206.28 L1320.28 1206.28 L1320.87 1206.28 L1321.45 1206.28 L1322.04 1206.28 L1322.63 1206.28 L1323.21 1206.28 L1323.8 1206.28 L1324.39 1206.28 L1324.97 1206.28 L1325.56 1206.28 L1326.14 1206.28 L1326.73 1206.28 L1327.32 1206.28 L1327.9 1206.28 L1328.49 1206.28 L1329.08 1206.28 L1329.66 1206.28 L1330.25 1206.28 L1330.84 1206.28 L1331.42 1206.28 L1332.01 1206.28 L1332.6 1206.28 L1333.18 1206.28 L1333.77 1206.28 L1334.35 1206.28 L1334.94 1206.28 L1335.53 1206.28 L1336.11 1206.28 L1336.7 1206.28 L1337.29 1206.28 L1337.87 1206.28 L1338.46 1206.28 L1339.05 1206.28 L1339.63 1206.28 L1340.22 1206.28 L1340.8 1206.28 L1341.39 1206.28 L1341.98 1206.28 L1342.56 1206.28 L1343.15 1206.28 L1343.74 1206.28 L1344.32 1206.28 L1344.91 1206.28 L1345.5 1206.28 L1346.08 1206.28 L1346.67 1206.28 L1347.26 1206.28 L1347.84 1206.28 L1348.43 1206.28 L1349.01 1206.28 L1349.6 1206.28 L1350.19 1206.28 L1350.77 1206.28 L1351.36 1206.28 L1351.95 1206.28 L1352.53 1206.28 L1353.12 1206.28 L1353.71 1206.28 L1354.29 1206.28 L1354.88 1206.28 L1355.47 1206.28 L1356.05 1206.28 L1356.64 1206.28 L1357.22 1206.28 L1357.81 1206.28 L1358.4 1206.28 L1358.98 1206.28 L1359.57 1206.28 L1360.16 1206.28 L1360.74 1206.28 L1361.33 1206.28 L1361.92 1206.28 L1362.5 1206.28 L1363.09 1206.28 L1363.68 1206.28 L1364.26 1206.28 L1364.85 1206.28 L1365.43 1206.28 L1366.02 1206.28 L1366.61 1206.28 L1367.19 1206.28 L1367.78 1206.28 L1368.37 1206.28 L1368.95 1206.28 L1369.54 1206.28 L1370.13 1206.28 L1370.71 1206.28 L1371.3 1206.28 L1371.88 1206.28 L1372.47 1206.28 L1373.06 1206.28 L1373.64 1206.28 L1374.23 1206.28 L1374.82 1206.28 L1375.4 1206.28 L1375.99 1206.28 L1376.58 1206.28 L1377.16 1206.28 L1377.75 1206.28 L1378.34 1206.28 L1378.92 1206.28 L1379.51 1206.28 L1380.09 1206.28 L1380.68 1206.28 L1381.27 1206.28 L1381.85 1206.28 L1382.44 1206.28 L1383.03 1206.28 L1383.61 1206.28 L1384.2 1206.28 L1384.79 1206.28 L1385.37 1206.28 L1385.96 1206.28 L1386.55 1206.28 L1387.13 1206.28 L1387.72 1206.28 L1388.3 1206.28 L1388.89 1206.28 L1389.48 1206.28 L1390.06 1206.28 L1390.65 1206.28 L1391.24 1206.28 L1391.82 1206.28 L1392.41 1206.28 L1393 1206.28 L1393.58 1206.28 L1394.17 1206.28 L1394.75 1206.28 L1395.34 1206.28 L1395.93 1206.28 L1396.51 1206.28 L1397.1 1206.28 L1397.69 1206.28 L1398.27 1206.28 L1398.86 1206.28 L1399.45 1206.28 L1400.03 1206.28 L1400.62 1206.28 L1401.21 1206.28 L1401.79 1206.28 L1402.38 1206.28 L1402.96 1206.28 L1403.55 1206.28 L1404.14 1206.28 L1404.72 1206.28 L1405.31 1206.28 L1405.9 1206.28 L1406.48 1206.28 L1407.07 1206.28 L1407.66 1206.28 L1408.24 1206.28 L1408.83 1206.28 L1409.42 1206.28 L1410 1206.28 L1410.59 1206.28 L1411.17 1206.28 L1411.76 1206.28 L1412.35 1206.28 L1412.93 1206.28 L1413.52 1206.28 L1414.11 1206.28 L1414.69 1206.28 L1415.28 1206.28 L1415.87 1206.28 L1416.45 1206.28 L1417.04 1206.28 L1417.63 1206.28 L1418.21 1206.28 L1418.8 1206.28 L1419.38 1206.28 L1419.97 1206.28 L1420.56 1206.28 L1421.14 1206.28 L1421.73 1206.28 L1422.32 1206.28 L1422.9 1206.28 L1423.49 1206.28 L1424.08 1206.28 L1424.66 1206.28 L1425.25 1206.28 L1425.83 1206.28 L1426.42 1206.28 L1427.01 1206.28 L1427.59 1206.28 L1428.18 1206.28 L1428.77 1206.28 L1429.35 1206.28 L1429.94 1206.28 L1430.53 1206.28 L1431.11 1206.28 L1431.7 1206.28 L1432.29 1206.28 L1432.87 1206.28 L1433.46 1206.28 L1434.04 1206.28 L1434.63 1206.28 L1435.22 1206.28 L1435.8 1206.28 L1436.39 1206.28 L1436.98 1206.28 L1437.56 1206.28 L1438.15 1206.28 L1438.74 1206.28 L1439.32 1206.28 L1439.91 1206.28 L1440.5 1206.28 L1441.08 1206.28 L1441.67 1206.28 L1442.25 1206.28 L1442.84 1206.28 L1443.43 1206.28 L1444.01 1206.28 L1444.6 1206.28 L1445.19 1206.28 L1445.77 1206.28 L1446.36 1206.28 L1446.95 1206.28 L1447.53 1206.28 L1448.12 1206.28 L1448.7 1206.28 L1449.29 1206.28 L1449.88 1206.28 L1450.46 1206.28 L1451.05 1206.28 L1451.64 1206.28 L1452.22 1206.28 L1452.81 1206.28 L1453.4 1206.28 L1453.98 1206.28 L1454.57 1206.28 L1455.16 1206.28 L1455.74 1206.28 L1456.33 1206.28 L1456.91 1206.28 L1457.5 1206.28 L1458.09 1206.28 L1458.67 1206.28 L1459.26 1206.28 L1459.85 1206.28 L1460.43 1206.28 L1461.02 1206.28 L1461.61 1206.28 L1462.19 1206.28 L1462.78 1206.28 L1463.37 1206.28 L1463.95 1206.28 L1464.54 1206.28 L1465.12 1206.28 L1465.71 1206.28 L1466.3 1206.28 L1466.88 1206.28 L1467.47 1206.28 L1468.06 1206.28 L1468.64 1206.28 L1469.23 1206.28 L1469.82 1206.28 L1470.4 1206.28 L1470.99 1206.28 L1471.57 1206.28 L1472.16 1206.28 L1472.75 1206.28 L1473.33 1206.28 L1473.92 1206.28 L1474.51 1206.28 L1475.09 1206.28 L1475.68 1206.28 L1476.27 1206.28 L1476.85 1206.28 L1477.44 1206.28 L1478.03 1206.28 L1478.61 1206.28 L1479.2 1206.28 L1479.78 1206.28 L1480.37 1206.28 L1480.96 1206.28 L1481.54 1206.28 L1482.13 1206.28 L1482.72 1206.28 L1483.3 1206.28 L1483.89 1206.28 L1484.48 1206.28 L1485.06 1206.28 L1485.65 1206.28 L1486.24 1206.28 L1486.82 1206.28 L1487.41 1206.28 L1487.99 1206.28 L1488.58 1206.28 L1489.17 1206.28 L1489.75 1206.28 L1490.34 1206.28 L1490.93 1206.28 L1491.51 1206.28 L1492.1 1206.28 L1492.69 1206.28 L1493.27 1206.28 L1493.86 1206.28 L1494.45 1206.28 L1495.03 1206.28 L1495.62 1206.28 L1496.2 1206.28 L1496.79 1206.28 L1497.38 1206.28 L1497.96 1206.28 L1498.55 1206.28 L1499.14 1206.28 L1499.72 1206.28 L1500.31 1206.28 L1500.9 1206.28 L1501.48 1206.28 L1502.07 1206.28 L1502.65 1206.28 L1503.24 1206.28 L1503.83 1206.28 L1504.41 1206.28 L1505 1206.28 L1505.59 1206.28 L1506.17 1206.28 L1506.76 1206.28 L1507.35 1206.28 L1507.93 1206.28 L1508.52 1206.28 L1509.11 1206.28 L1509.69 1206.28 L1510.28 1206.28 L1510.86 1206.28 L1511.45 1206.28 L1512.04 1206.28 L1512.62 1206.28 L1513.21 1206.28 L1513.8 1206.28 L1514.38 1206.28 L1514.97 1206.28 L1515.56 1206.28 L1516.14 1206.28 L1516.73 1206.28 L1517.32 1206.28 L1517.9 1206.28 L1518.49 1206.28 L1519.07 1206.28 L1519.66 1206.28 L1520.25 1206.28 L1520.83 1206.28 L1521.42 1206.28 L1522.01 1206.28 L1522.59 1206.28 L1523.18 1206.28 L1523.77 1206.28 L1524.35 1206.28 L1524.94 1206.28 L1525.52 1206.28 L1526.11 1206.28 L1526.7 1206.28 L1527.28 1206.28 L1527.87 1206.28 L1528.46 1206.28 L1529.04 1206.28 L1529.63 1206.28 L1530.22 1206.28 L1530.8 1206.28 L1531.39 1206.28 L1531.98 1206.28 L1532.56 1206.28 L1533.15 1206.28 L1533.73 1206.28 L1534.32 1206.28 L1534.91 1206.28 L1535.49 1206.28 L1536.08 1206.28 L1536.67 1206.28 L1537.25 1206.28 L1537.84 1206.28 L1538.43 1206.28 L1539.01 1206.28 L1539.6 1206.28 L1540.19 1206.28 L1540.77 1206.28 L1541.36 1206.28 L1541.94 1206.28 L1542.53 1206.28 L1543.12 1206.28 L1543.7 1206.28 L1544.29 1206.28 L1544.88 1206.28 L1545.46 1206.28 L1546.05 1206.28 L1546.64 1206.28 L1547.22 1206.28 L1547.81 1206.28 L1548.4 1206.28 L1548.98 1206.28 L1549.57 1206.28 L1550.15 1206.28 L1550.74 1206.28 L1551.33 1206.28 L1551.91 1206.28 L1552.5 1206.28 L1553.09 1206.28 L1553.67 1206.28 L1554.26 1206.28 L1554.85 1206.28 L1555.43 1206.28 L1556.02 1206.28 L1556.6 1206.28 L1557.19 1206.28 L1557.78 1206.28 L1558.36 1206.28 L1558.95 1206.28 L1559.54 1206.28 L1560.12 1206.28 L1560.71 1206.28 L1561.3 1206.28 L1561.88 1206.28 L1562.47 1206.28 L1563.06 1206.28 L1563.64 1206.28 L1564.23 1206.28 L1564.81 1206.28 L1565.4 1206.28 L1565.99 1206.28 L1566.57 1206.28 L1567.16 1206.28 L1567.75 1206.28 L1568.33 1206.28 L1568.92 1206.28 L1569.51 1206.28 L1570.09 1206.28 L1570.68 1206.28 L1571.27 1206.28 L1571.85 1206.28 L1572.44 1206.28 L1573.02 1206.28 L1573.61 1206.28 L1574.2 1206.28 L1574.78 1206.28 L1575.37 1206.28 L1575.96 1206.28 L1576.54 1206.28 L1577.13 1206.28 L1577.72 1206.28 L1578.3 1206.28 L1578.89 1206.28 L1579.47 1206.28 L1580.06 1206.28 L1580.65 1206.28 L1581.23 1206.28 L1581.82 1206.28 L1582.41 1206.28 L1582.99 1206.28 L1583.58 1206.28 L1584.17 1206.28 L1584.75 1206.28 L1585.34 1206.28 L1585.93 1206.28 L1586.51 1206.28 L1587.1 1206.28 L1587.68 1206.28 L1588.27 1206.28 L1588.86 1206.28 L1589.44 1206.28 L1590.03 1206.28 L1590.62 1206.28 L1591.2 1206.28 L1591.79 1206.28 L1592.38 1206.28 L1592.96 1206.28 L1593.55 1206.28 L1594.14 1206.28 L1594.72 1206.28 L1595.31 1206.28 L1595.89 1206.28 L1596.48 1206.28 L1597.07 1206.28 L1597.65 1206.28 L1598.24 1206.28 L1598.83 1206.28 L1599.41 1206.28 L1600 1206.28 L1600.59 1206.28 L1601.17 1206.28 L1601.76 1206.28 L1602.34 1206.28 L1602.93 1206.28 L1603.52 1206.28 L1604.1 1206.28 L1604.69 1206.28 L1605.28 1206.28 L1605.86 1206.28 L1606.45 1206.28 L1607.04 1206.28 L1607.62 1206.28 L1608.21 1206.28 L1608.8 1206.28 L1609.38 1206.28 L1609.97 1206.28 L1610.55 1206.28 L1611.14 1206.28 L1611.73 1206.28 L1612.31 1206.28 L1612.9 1206.28 L1613.49 1206.28 L1614.07 1206.28 L1614.66 1206.28 L1615.25 1206.28 L1615.83 1206.28 L1616.42 1206.28 L1617.01 1206.28 L1617.59 1206.28 L1618.18 1206.28 L1618.76 1206.28 L1619.35 1206.28 L1619.94 1206.28 L1620.52 1206.28 L1621.11 1206.28 L1621.7 1206.28 L1622.28 1206.28 L1622.87 1206.28 L1623.46 1206.28 L1624.04 1206.28 L1624.63 1206.28 L1625.22 1206.28 L1625.8 1206.28 L1626.39 1206.28 L1626.97 1206.28 L1627.56 1206.28 L1628.15 1206.28 L1628.73 1206.28 L1629.32 1206.28 L1629.91 1206.28 L1630.49 1206.28 L1631.08 1206.28 L1631.67 1206.28 L1632.25 1206.28 L1632.84 1206.28 L1633.42 1206.28 L1634.01 1206.28 L1634.6 1206.28 L1635.18 1206.28 L1635.77 1206.28 L1636.36 1206.28 L1636.94 1206.28 L1637.53 1206.28 L1638.12 1206.28 L1638.7 1206.28 L1639.29 1206.28 L1639.88 1206.28 L1640.46 1206.28 L1641.05 1206.28 L1641.63 1206.28 L1642.22 1206.28 L1642.81 1206.28 L1643.39 1206.28 L1643.98 1206.28 L1644.57 1206.28 L1645.15 1206.28 L1645.74 1206.28 L1646.33 1206.28 L1646.91 1206.28 L1647.5 1206.28 L1648.09 1206.28 L1648.67 1206.28 L1649.26 1206.28 L1649.84 1206.28 L1650.43 1206.28 L1651.02 1206.28 L1651.6 1206.28 L1652.19 1206.28 L1652.78 1206.28 L1653.36 1206.28 L1653.95 1206.28 L1654.54 1206.28 L1655.12 1206.28 L1655.71 1206.28 L1656.29 1206.28 L1656.88 1206.28 L1657.47 1206.28 L1658.05 1206.28 L1658.64 1206.28 L1659.23 1206.28 L1659.81 1206.28 L1660.4 1206.28 L1660.99 1206.28 L1661.57 1206.28 L1662.16 1206.28 L1662.75 1206.28 L1663.33 1206.28 L1663.92 1206.28 L1664.5 1206.28 L1665.09 1206.28 L1665.68 1206.28 L1666.26 1206.28 L1666.85 1206.28 L1667.44 1206.28 L1668.02 1206.28 L1668.61 1206.28 L1669.2 1206.28 L1669.78 1206.28 L1670.37 1206.28 L1670.96 1206.28 L1671.54 1206.28 L1672.13 1206.28 L1672.71 1206.28 L1673.3 1206.28 L1673.89 1206.28 L1674.47 1206.28 L1675.06 1206.28 L1675.65 1206.28 L1676.23 1206.28 L1676.82 1206.28 L1677.41 1206.28 L1677.99 1206.28 L1678.58 1206.28 L1679.17 1206.28 L1679.75 1206.28 L1680.34 1206.28 L1680.92 1206.28 L1681.51 1206.28 L1682.1 1206.28 L1682.68 1206.28 L1683.27 1206.28 L1683.86 1206.28 L1684.44 1206.28 L1685.03 1206.28 L1685.62 1206.28 L1686.2 1206.28 L1686.79 1206.28 L1687.37 1206.28 L1687.96 1206.28 L1688.55 1206.28 L1689.13 1206.28 L1689.72 1206.28 L1690.31 1206.28 L1690.89 1206.28 L1691.48 1206.28 L1692.07 1206.28 L1692.65 1206.28 L1693.24 1206.28 L1693.83 1206.28 L1694.41 1206.28 L1695 1206.28 L1695.58 1206.28 L1696.17 1206.28 L1696.76 1206.28 L1697.34 1206.28 L1697.93 1206.28 L1698.52 1206.28 L1699.1 1206.28 L1699.69 1206.28 L1700.28 1206.28 L1700.86 1206.28 L1701.45 1206.28 L1702.04 1206.28 L1702.62 1206.28 L1703.21 1206.28 L1703.79 1206.28 L1704.38 1206.28 L1704.97 1206.28 L1705.55 1206.28 L1706.14 1206.28 L1706.73 1206.28 L1707.31 1206.28 L1707.9 1206.28 L1708.49 1206.28 L1709.07 1206.28 L1709.66 1206.28 L1710.24 1206.28 L1710.83 1206.28 L1711.42 1206.28 L1712 1206.28 L1712.59 1206.28 L1713.18 1206.28 L1713.76 1206.28 L1714.35 1206.28 L1714.94 1206.28 L1715.52 1206.28 L1716.11 1206.28 L1716.7 1206.28 L1717.28 1206.28 L1717.87 1206.28 L1718.45 1206.28 L1719.04 1206.28 L1719.63 1206.28 L1720.21 1206.28 L1720.8 1206.28 L1721.39 1206.28 L1721.97 1206.28 L1722.56 1206.28 L1723.15 1206.28 L1723.73 1206.28 L1724.32 1206.28 L1724.91 1206.28 L1725.49 1206.28 L1726.08 1206.28 L1726.66 1206.28 L1727.25 1206.28 L1727.84 1206.28 L1728.42 1206.28 L1729.01 1206.28 L1729.6 1206.28 L1730.18 1206.28 L1730.77 1206.28 L1731.36 1206.28 L1731.94 1206.28 L1732.53 1206.28 L1733.11 1206.28 L1733.7 1206.28 L1734.29 1206.28 L1734.87 1206.28 L1735.46 1206.28 L1736.05 1206.28 L1736.63 1206.28 L1737.22 1206.28 L1737.81 1206.28 L1738.39 1206.28 L1738.98 1206.28 L1739.57 1206.28 L1740.15 1206.28 L1740.74 1206.28 L1741.32 1206.28 L1741.91 1206.28 L1742.5 1206.28 L1743.08 1206.28 L1743.67 1206.28 L1744.26 1206.28 L1744.84 1206.28 L1745.43 1206.28 L1746.02 1206.28 L1746.6 1206.28 L1747.19 1206.28 L1747.78 1206.28 L1748.36 1206.28 L1748.95 1206.28 L1749.53 1206.28 L1750.12 1206.28 L1750.71 1206.28 L1751.29 1206.28 L1751.88 1206.28 L1752.47 1206.28 L1753.05 1206.28 L1753.64 1206.28 L1754.23 1206.28 L1754.81 1206.28 L1755.4 1206.28 L1755.99 1206.28 L1756.57 1206.28 L1757.16 1206.28 L1757.74 1206.28 L1758.33 1206.28 L1758.92 1206.28 L1759.5 1206.28 L1760.09 1206.28 L1760.68 1206.28 L1761.26 1206.28 L1761.85 1206.28 L1762.44 1206.28 L1763.02 1206.28 L1763.61 1206.28 L1764.19 1206.28 L1764.78 1206.28 L1765.37 1206.28 L1765.95 1206.28 L1766.54 1206.28 L1767.13 1206.28 L1767.71 1206.28 L1768.3 1206.28 L1768.89 1206.28 L1769.47 1206.28 L1770.06 1206.28 L1770.65 1206.28 L1771.23 1206.28 L1771.82 1206.28 L1772.4 1206.28 L1772.99 1206.28 L1773.58 1206.28 L1774.16 1206.28 L1774.75 1206.28 L1775.34 1206.28 L1775.92 1206.28 L1776.51 1206.28 L1777.1 1206.28 L1777.68 1206.28 L1778.27 1206.28 L1778.86 1206.28 L1779.44 1206.28 L1780.03 1206.28 L1780.61 1206.28 L1781.2 1206.28 L1781.79 1206.28 L1782.37 1206.28 L1782.96 1206.28 L1783.55 1206.28 L1784.13 1206.28 L1784.72 1206.28 L1785.31 1206.28 L1785.89 1206.28 L1786.48 1206.28 L1787.06 1206.28 L1787.65 1206.28 L1788.24 1206.28 L1788.82 1206.28 L1789.41 1206.28 L1790 1206.28 L1790.58 1206.28 L1791.17 1206.28 L1791.76 1206.28 L1792.34 1206.28 L1792.93 1206.28 L1793.52 1206.28 L1794.1 1206.28 L1794.69 1206.28 L1795.27 1206.28 L1795.86 1206.28 L1796.45 1206.28 L1797.03 1206.28 L1797.62 1206.28 L1798.21 1206.28 L1798.79 1206.28 L1799.38 1206.28 L1799.97 1206.28 L1800.55 1206.28 L1801.14 1206.28 L1801.73 1206.28 L1802.31 1206.28 L1802.9 1206.28 L1803.48 1206.28 L1804.07 1206.28 L1804.66 1206.28 L1805.24 1206.28 L1805.83 1206.28 L1806.42 1206.28 L1807 1206.28 L1807.59 1206.28 L1808.18 1206.28 L1808.76 1206.28 L1809.35 1206.28 L1809.94 1206.28 L1810.52 1206.28 L1811.11 1206.28 L1811.69 1206.28 L1812.28 1206.28 L1812.87 1206.28 L1813.45 1206.28 L1814.04 1206.28 L1814.63 1206.28 L1815.21 1206.28 L1815.8 1206.28 L1816.39 1206.28 L1816.97 1206.28 L1817.56 1206.28 L1818.14 1206.28 L1818.73 1206.28 L1819.32 1206.28 L1819.9 1206.28 L1820.49 1206.28 L1821.08 1206.28 L1821.66 1206.28 L1822.25 1206.28 L1822.84 1206.28 L1823.42 1206.28 L1824.01 1206.28 L1824.6 1206.28 L1825.18 1206.28 L1825.77 1206.28 L1826.35 1206.28 L1826.94 1206.28 L1827.53 1206.28 L1828.11 1206.28 L1828.7 1206.28 L1829.29 1206.28 L1829.87 1206.28 L1830.46 1206.28 L1831.05 1206.28 L1831.63 1206.28 L1832.22 1206.28 L1832.81 1206.28 L1833.39 1206.28 L1833.98 1206.28 L1834.56 1206.28 L1835.15 1206.28 L1835.74 1206.28 L1836.32 1206.28 L1836.91 1206.28 L1837.5 1206.28 L1838.08 1206.28 L1838.67 1206.28 L1839.26 1206.28 L1839.84 1206.28 L1840.43 1206.28 L1841.01 1206.28 L1841.6 1206.28 L1842.19 1206.28 L1842.77 1206.28 L1843.36 1206.28 L1843.95 1206.28 L1844.53 1206.28 L1845.12 1206.28 L1845.71 1206.28 L1846.29 1206.28 L1846.88 1206.28 L1847.47 1206.28 L1848.05 1206.28 L1848.64 1206.28 L1849.22 1206.28 L1849.81 1206.28 L1850.4 1206.28 L1850.98 1206.28 L1851.57 1206.28 L1852.16 1206.28 L1852.74 1206.28 L1853.33 1206.28 L1853.92 1206.28 L1854.5 1206.28 L1855.09 1206.28 L1855.68 1206.28 L1856.26 1206.28 L1856.85 1206.28 L1857.43 1206.28 L1858.02 1206.28 L1858.61 1206.28 L1859.19 1206.28 L1859.78 1206.28 L1860.37 1206.28 L1860.95 1206.28 L1861.54 1206.28 L1862.13 1206.28 L1862.71 1206.28 L1863.3 1206.28 L1863.88 1206.28 L1864.47 1206.28 L1865.06 1206.28 L1865.64 1206.28 L1866.23 1206.28 L1866.82 1206.28 L1867.4 1206.28 L1867.99 1206.28 L1868.58 1206.28 L1869.16 1206.28 L1869.75 1206.28 L1870.34 1206.28 L1870.92 1206.28 L1871.51 1206.28 L1872.09 1206.28 L1872.68 1206.28 L1873.27 1206.28 L1873.85 1206.28 L1874.44 1206.28 L1875.03 1206.28 L1875.61 1206.28 L1876.2 1206.28 L1876.79 1206.28 L1877.37 1206.28 L1877.96 1206.28 L1878.55 1206.28 L1879.13 1206.28 L1879.72 1206.28 L1880.3 1206.28 L1880.89 1206.28 L1881.48 1206.28 L1882.06 1206.28 L1882.65 1206.28 L1883.24 1206.28 L1883.82 1206.28 L1884.41 1206.28 L1885 1206.28 L1885.58 1206.28 L1886.17 1206.28 L1886.76 1206.28 L1887.34 1206.28 L1887.93 1206.28 L1888.51 1206.28 L1889.1 1206.28 L1889.69 1206.28 L1890.27 1206.28 L1890.86 1206.28 L1891.45 1206.28 L1892.03 1206.28 L1892.62 1206.28 L1893.21 1206.28 L1893.79 1206.28 L1894.38 1206.28 L1894.96 1206.28 L1895.55 1206.28 L1896.14 1206.28 L1896.72 1206.28 L1897.31 1206.28 L1897.9 1206.28 L1898.48 1206.28 L1899.07 1206.28 L1899.66 1206.28 L1900.24 1206.28 L1900.83 1206.28 L1901.42 1206.28 L1902 1206.28 L1902.59 1206.28 L1903.17 1206.28 L1903.76 1206.28 L1904.35 1206.28 L1904.93 1206.28 L1905.52 1206.28 L1906.11 1206.28 L1906.69 1206.28 L1907.28 1206.28 L1907.87 1206.28 L1908.45 1206.28 L1909.04 1206.28 L1909.63 1206.28 L1910.21 1206.28 L1910.8 1206.28 L1911.38 1206.28 L1911.97 1206.28 L1912.56 1206.28 L1913.14 1206.28 L1913.73 1206.28 L1914.32 1206.28 L1914.9 1206.28 L1915.49 1206.28 L1916.08 1206.28 L1916.66 1206.28 L1917.25 1206.28 L1917.83 1206.28 L1918.42 1206.28 L1919.01 1206.28 L1919.59 1206.28 L1920.18 1206.28 L1920.77 1206.28 L1921.35 1206.28 L1921.94 1206.28 L1922.53 1206.28 L1923.11 1206.28 L1923.7 1206.28 L1924.29 1206.28 L1924.87 1206.28 L1925.46 1206.28 L1926.04 1206.28 L1926.63 1206.28 L1927.22 1206.28 L1927.8 1206.28 L1928.39 1206.28 L1928.98 1206.28 L1929.56 1206.28 L1930.15 1206.28 L1930.74 1206.28 L1931.32 1206.28 L1931.91 1206.28 L1932.5 1206.28 L1933.08 1206.28 L1933.67 1206.28 L1934.25 1206.28 L1934.84 1206.28 L1935.43 1206.28 L1936.01 1206.28 L1936.6 1206.28 L1937.19 1206.28 L1937.77 1206.28 L1938.36 1206.28 L1938.95 1206.28 L1939.53 1206.28 L1940.12 1206.28 L1940.71 1206.28 L1941.29 1206.28 L1941.88 1206.28 L1942.46 1206.28 L1943.05 1206.28 L1943.64 1206.28 L1944.22 1206.28 L1944.81 1206.28 L1945.4 1206.28 L1945.98 1206.28 L1946.57 1206.28 L1947.16 1206.28 L1947.74 1206.28 L1948.33 1206.28 L1948.91 1206.28 L1949.5 1206.28 L1950.09 1206.28 L1950.67 1206.28 L1951.26 1206.28 L1951.85 1206.28 L1952.43 1206.28 L1953.02 1206.28 L1953.61 1206.28 L1954.19 1206.28 L1954.78 1206.28 L1955.37 1206.28 L1955.95 1206.28 L1956.54 1206.28 L1957.12 1206.28 L1957.71 1206.28 L1958.3 1206.28 L1958.88 1206.28 L1959.47 1206.28 L1960.06 1206.28 L1960.64 1206.28 L1961.23 1206.28 L1961.82 1206.28 L1962.4 1206.28 L1962.99 1206.28 L1963.58 1206.28 L1964.16 1206.28 L1964.75 1206.28 L1965.33 1206.28 L1965.92 1206.28 L1966.51 1206.28 L1967.09 1206.28 L1967.68 1206.28 L1968.27 1206.28 L1968.85 1206.28 L1969.44 1206.28 L1970.03 1206.28 L1970.61 1206.28 L1971.2 1206.28 L1971.78 1206.28 L1972.37 1206.28 L1972.96 1206.28 L1973.54 1206.28 L1974.13 1206.28 L1974.72 1206.28 L1975.3 1206.28 L1975.89 1206.28 L1976.48 1206.28 L1977.06 1206.28 L1977.65 1206.28 L1978.24 1206.28 L1978.82 1206.28 L1979.41 1206.28 L1979.99 1206.28 L1980.58 1206.28 L1981.17 1206.28 L1981.75 1206.28 L1982.34 1206.28 L1982.93 1206.28 L1983.51 1206.28 L1984.1 1206.28 L1984.69 1206.28 L1985.27 1206.28 L1985.86 1206.28 L1986.45 1206.28 L1987.03 1206.28 L1987.62 1206.28 L1988.2 1206.28 L1988.79 1206.28 L1989.38 1206.28 L1989.96 1206.28 L1990.55 1206.28 L1991.14 1206.28 L1991.72 1206.28 L1992.31 1206.28 L1992.9 1206.28 L1993.48 1206.28 L1994.07 1206.28 L1994.65 1206.28 L1995.24 1206.28 L1995.83 1206.28 L1996.41 1206.28 L1997 1206.28 L1997.59 1206.28 L1998.17 1206.28 L1998.76 1206.28 L1999.35 1206.28 L1999.93 1206.28 L2000.52 1206.28 L2001.11 1206.28 L2001.69 1206.28 L2002.28 1206.28 L2002.86 1206.28 L2003.45 1206.28 L2004.04 1206.28 L2004.62 1206.28 L2005.21 1206.28 L2005.8 1206.28 L2006.38 1206.28 L2006.97 1206.28 L2007.56 1206.28 L2008.14 1206.28 L2008.73 1206.28 L2009.32 1206.28 L2009.9 1206.28 L2010.49 1206.28 L2011.07 1206.28 L2011.66 1206.28 L2012.25 1206.28 L2012.83 1206.28 L2013.42 1206.28 L2014.01 1206.28 L2014.59 1206.28 L2015.18 1206.28 L2015.77 1206.28 L2016.35 1206.28 L2016.94 1206.28 L2017.53 1206.28 L2018.11 1206.28 L2018.7 1206.28 L2019.28 1206.28 L2019.87 1206.28 L2020.46 1206.28 L2021.04 1206.28 L2021.63 1206.28 L2022.22 1206.28 L2022.8 1206.28 L2023.39 1206.28 L2023.98 1206.28 L2024.56 1206.28 L2025.15 1206.28 L2025.73 1206.28 L2026.32 1206.28 L2026.91 1206.28 L2027.49 1206.28 L2028.08 1206.28 L2028.67 1206.28 L2029.25 1206.28 L2029.84 1206.28 L2030.43 1206.28 L2031.01 1206.28 L2031.6 1206.28 L2032.19 1206.28 L2032.77 1206.28 L2033.36 1206.28 L2033.94 1206.28 L2034.53 1206.28 L2035.12 1206.28 L2035.7 1206.28 L2036.29 1206.28 L2036.88 1206.28 L2037.46 1206.28 L2038.05 1206.28 L2038.64 1206.28 L2039.22 1206.28 L2039.81 1206.28 L2040.4 1206.28 L2040.98 1206.28 L2041.57 1206.28 L2042.15 1206.28 L2042.74 1206.28 L2043.33 1206.28 L2043.91 1206.28 L2044.5 1206.28 L2045.09 1206.28 L2045.67 1206.28 L2046.26 1206.28 L2046.85 1206.28 L2047.43 1206.28 L2048.02 1206.28 L2048.6 1206.28 L2049.19 1206.28 L2049.78 1206.28 L2050.36 1206.28 L2050.95 1206.28 L2051.54 1206.28 L2052.12 1206.28 L2052.71 1206.28 L2053.3 1206.28 L2053.88 1206.28 L2054.47 1206.28 L2055.06 1206.28 L2055.64 1206.28 L2056.23 1206.28 L2056.81 1206.28 L2057.4 1206.28 L2057.99 1206.28 L2058.57 1206.28 L2059.16 1206.28 L2059.75 1206.28 L2060.33 1206.28 L2060.92 1206.28 L2061.51 1206.28 L2062.09 1206.28 L2062.68 1206.28 L2063.27 1206.28 L2063.85 1206.28 L2064.44 1206.28 L2065.02 1206.28 L2065.61 1206.28 L2066.2 1206.28 L2066.78 1206.28 L2067.37 1206.28 L2067.96 1206.28 L2068.54 1206.28 L2069.13 1206.28 L2069.72 1206.28 L2070.3 1206.28 L2070.89 1206.28 L2071.48 1206.28 L2072.06 1206.28 L2072.65 1206.28 L2073.23 1206.28 L2073.82 1206.28 L2074.41 1206.28 L2074.99 1206.28 L2075.58 1206.28 L2076.17 1206.28 L2076.75 1206.28 L2077.34 1206.28 L2077.93 1206.28 L2078.51 1206.28 L2079.1 1206.28 L2079.68 1206.28 L2080.27 1206.28 L2080.86 1206.28 L2081.44 1206.28 L2082.03 1206.28 L2082.62 1206.28 L2083.2 1206.28 L2083.79 1206.28 L2084.38 1206.28 L2084.96 1206.28 L2085.55 1206.28 L2086.14 1206.28 L2086.72 1206.28 L2087.31 1206.28 L2087.89 1206.28 L2088.48 1206.28 L2089.07 1206.28 L2089.65 1206.28 L2090.24 1206.28 L2090.83 1206.28 L2091.41 1206.28 L2092 1206.28 L2092.59 1206.28 L2093.17 1206.28 L2093.76 1206.28 L2094.35 1206.28 L2094.93 1206.28 L2095.52 1206.28 L2096.1 1206.28 L2096.69 1206.28 L2097.28 1206.28 L2097.86 1206.28 L2098.45 1206.28 L2099.04 1206.28 L2099.62 1206.28 L2100.21 1206.28 L2100.8 1206.28 L2101.38 1206.28 L2101.97 1206.28 L2102.55 1206.28 L2103.14 1206.28 L2103.73 1206.28 L2104.31 1206.28 L2104.9 1206.28 L2105.49 1206.28 L2106.07 1206.28 L2106.66 1206.28 L2107.25 1206.28 L2107.83 1206.28 L2108.42 1206.28 L2109.01 1206.28 L2109.59 1206.28 L2110.18 1206.28 L2110.76 1206.28 L2111.35 1206.28 L2111.94 1206.28 L2112.52 1206.28 L2113.11 1206.28 L2113.7 1206.28 L2114.28 1206.28 L2114.87 1206.28 L2115.46 1206.28 L2116.04 1206.28 L2116.63 1206.28 L2117.22 1206.28 L2117.8 1206.28 L2118.39 1206.28 L2118.97 1206.28 L2119.56 1206.28 L2120.15 1206.28 L2120.73 1206.28 L2121.32 1206.28 L2121.91 1206.28 L2122.49 1206.28 L2123.08 1206.28 L2123.67 1206.28 L2124.25 1206.28 L2124.84 1206.28 L2125.42 1206.28 L2126.01 1206.28 L2126.6 1206.28 L2127.18 1206.28 L2127.77 1206.28 L2128.36 1206.28 L2128.94 1206.28 L2129.53 1206.28 L2130.12 1206.28 L2130.7 1206.28 L2131.29 1206.28 L2131.88 1206.28 L2132.46 1206.28 L2133.05 1206.28 L2133.63 1206.28 L2134.22 1206.28 L2134.81 1206.28 L2135.39 1206.28 L2135.98 1206.28 L2136.57 1206.28 L2137.15 1206.28 L2137.74 1206.28 L2138.33 1206.28 L2138.91 1206.28 L2139.5 1206.28 L2140.09 1206.28 L2140.67 1206.28 L2141.26 1206.28 L2141.84 1206.28 L2142.43 1206.28 L2143.02 1206.28 L2143.6 1206.28 L2144.19 1206.28 L2144.78 1206.28 L2145.36 1206.28 L2145.95 1206.28 L2146.54 1206.28 L2147.12 1206.28 L2147.71 1206.28 L2148.3 1206.28 L2148.88 1206.28 L2149.47 1206.28 L2150.05 1206.28 L2150.64 1206.28 L2151.23 1206.28 L2151.81 1206.28 L2152.4 1206.28 L2152.99 1206.28 L2153.57 1206.28 L2154.16 1206.28 L2154.75 1206.28 L2155.33 1206.28 L2155.92 1206.28 L2156.5 1206.28 L2157.09 1206.28 L2157.68 1206.28 L2158.26 1206.28 L2158.26 1205.74 L2157.68 1205.74 L2157.09 1205.74 L2156.5 1205.74 L2155.92 1205.74 L2155.33 1205.74 L2154.75 1205.74 L2154.16 1205.74 L2153.57 1205.74 L2152.99 1205.74 L2152.4 1205.74 L2151.81 1205.74 L2151.23 1205.74 L2150.64 1205.74 L2150.05 1205.74 L2149.47 1205.74 L2148.88 1205.74 L2148.3 1205.74 L2147.71 1205.74 L2147.12 1205.74 L2146.54 1205.74 L2145.95 1205.74 L2145.36 1205.74 L2144.78 1205.74 L2144.19 1205.74 L2143.6 1205.74 L2143.02 1205.74 L2142.43 1205.74 L2141.84 1205.74 L2141.26 1205.74 L2140.67 1205.74 L2140.09 1205.74 L2139.5 1205.74 L2138.91 1205.74 L2138.33 1205.74 L2137.74 1205.74 L2137.15 1205.74 L2136.57 1205.74 L2135.98 1205.74 L2135.39 1205.74 L2134.81 1205.74 L2134.22 1205.74 L2133.63 1205.74 L2133.05 1205.74 L2132.46 1205.74 L2131.88 1205.74 L2131.29 1205.74 L2130.7 1205.74 L2130.12 1205.74 L2129.53 1205.74 L2128.94 1205.74 L2128.36 1205.74 L2127.77 1205.74 L2127.18 1205.74 L2126.6 1205.74 L2126.01 1205.74 L2125.42 1205.74 L2124.84 1205.74 L2124.25 1205.74 L2123.67 1205.74 L2123.08 1205.74 L2122.49 1205.74 L2121.91 1205.74 L2121.32 1205.74 L2120.73 1205.74 L2120.15 1205.74 L2119.56 1205.74 L2118.97 1205.74 L2118.39 1205.74 L2117.8 1205.74 L2117.22 1205.74 L2116.63 1205.74 L2116.04 1205.74 L2115.46 1205.74 L2114.87 1205.74 L2114.28 1205.74 L2113.7 1205.74 L2113.11 1205.74 L2112.52 1205.74 L2111.94 1205.74 L2111.35 1205.74 L2110.76 1205.74 L2110.18 1205.74 L2109.59 1205.74 L2109.01 1205.74 L2108.42 1205.74 L2107.83 1205.74 L2107.25 1205.74 L2106.66 1205.74 L2106.07 1205.74 L2105.49 1205.74 L2104.9 1205.74 L2104.31 1205.74 L2103.73 1205.74 L2103.14 1205.74 L2102.55 1205.74 L2101.97 1205.74 L2101.38 1205.74 L2100.8 1205.74 L2100.21 1205.74 L2099.62 1205.74 L2099.04 1205.74 L2098.45 1205.74 L2097.86 1205.74 L2097.28 1205.74 L2096.69 1205.74 L2096.1 1205.74 L2095.52 1205.74 L2094.93 1205.74 L2094.35 1205.74 L2093.76 1205.74 L2093.17 1205.74 L2092.59 1205.74 L2092 1205.74 L2091.41 1205.74 L2090.83 1205.74 L2090.24 1205.74 L2089.65 1205.74 L2089.07 1205.74 L2088.48 1205.74 L2087.89 1205.74 L2087.31 1205.74 L2086.72 1205.74 L2086.14 1205.74 L2085.55 1205.74 L2084.96 1205.74 L2084.38 1205.74 L2083.79 1205.74 L2083.2 1205.74 L2082.62 1205.74 L2082.03 1205.74 L2081.44 1205.74 L2080.86 1205.74 L2080.27 1205.74 L2079.68 1205.74 L2079.1 1205.74 L2078.51 1205.74 L2077.93 1205.74 L2077.34 1205.74 L2076.75 1205.74 L2076.17 1205.74 L2075.58 1205.74 L2074.99 1205.74 L2074.41 1205.74 L2073.82 1205.74 L2073.23 1205.74 L2072.65 1205.74 L2072.06 1205.74 L2071.48 1205.74 L2070.89 1205.74 L2070.3 1205.74 L2069.72 1205.74 L2069.13 1205.74 L2068.54 1205.74 L2067.96 1205.74 L2067.37 1205.74 L2066.78 1205.74 L2066.2 1205.74 L2065.61 1205.74 L2065.02 1205.74 L2064.44 1205.74 L2063.85 1205.74 L2063.27 1205.74 L2062.68 1205.74 L2062.09 1205.74 L2061.51 1205.74 L2060.92 1205.74 L2060.33 1205.74 L2059.75 1205.74 L2059.16 1205.74 L2058.57 1205.74 L2057.99 1205.74 L2057.4 1205.74 L2056.81 1205.74 L2056.23 1205.74 L2055.64 1205.74 L2055.06 1205.74 L2054.47 1205.74 L2053.88 1205.74 L2053.3 1205.74 L2052.71 1205.74 L2052.12 1205.74 L2051.54 1205.74 L2050.95 1205.74 L2050.36 1205.74 L2049.78 1205.74 L2049.19 1205.74 L2048.6 1205.74 L2048.02 1205.74 L2047.43 1205.74 L2046.85 1205.74 L2046.26 1205.74 L2045.67 1205.74 L2045.09 1205.74 L2044.5 1205.74 L2043.91 1205.74 L2043.33 1205.74 L2042.74 1205.74 L2042.15 1205.74 L2041.57 1205.74 L2040.98 1205.74 L2040.4 1205.74 L2039.81 1205.74 L2039.22 1205.74 L2038.64 1205.74 L2038.05 1205.74 L2037.46 1205.74 L2036.88 1205.74 L2036.29 1205.74 L2035.7 1205.74 L2035.12 1205.74 L2034.53 1205.74 L2033.94 1205.74 L2033.36 1205.74 L2032.77 1205.74 L2032.19 1205.74 L2031.6 1205.74 L2031.01 1205.74 L2030.43 1205.74 L2029.84 1205.74 L2029.25 1205.74 L2028.67 1205.74 L2028.08 1205.74 L2027.49 1205.74 L2026.91 1205.74 L2026.32 1205.74 L2025.73 1205.74 L2025.15 1205.74 L2024.56 1205.74 L2023.98 1205.74 L2023.39 1205.74 L2022.8 1205.74 L2022.22 1205.74 L2021.63 1205.74 L2021.04 1205.74 L2020.46 1205.74 L2019.87 1205.74 L2019.28 1205.74 L2018.7 1205.74 L2018.11 1205.74 L2017.53 1205.74 L2016.94 1205.74 L2016.35 1205.74 L2015.77 1205.74 L2015.18 1205.74 L2014.59 1205.74 L2014.01 1205.74 L2013.42 1205.74 L2012.83 1205.74 L2012.25 1205.74 L2011.66 1205.74 L2011.07 1205.74 L2010.49 1205.74 L2009.9 1205.74 L2009.32 1205.74 L2008.73 1205.74 L2008.14 1205.74 L2007.56 1205.74 L2006.97 1205.74 L2006.38 1205.74 L2005.8 1205.74 L2005.21 1205.74 L2004.62 1205.74 L2004.04 1205.74 L2003.45 1205.74 L2002.86 1205.74 L2002.28 1205.74 L2001.69 1205.74 L2001.11 1205.74 L2000.52 1205.74 L1999.93 1205.74 L1999.35 1205.74 L1998.76 1205.74 L1998.17 1205.74 L1997.59 1205.74 L1997 1205.74 L1996.41 1205.74 L1995.83 1205.74 L1995.24 1205.74 L1994.65 1205.74 L1994.07 1205.74 L1993.48 1205.74 L1992.9 1205.74 L1992.31 1205.74 L1991.72 1205.74 L1991.14 1205.74 L1990.55 1205.74 L1989.96 1205.74 L1989.38 1205.74 L1988.79 1205.74 L1988.2 1205.74 L1987.62 1205.74 L1987.03 1205.74 L1986.45 1205.74 L1985.86 1205.74 L1985.27 1205.74 L1984.69 1205.74 L1984.1 1205.74 L1983.51 1205.74 L1982.93 1205.74 L1982.34 1205.74 L1981.75 1205.74 L1981.17 1205.74 L1980.58 1205.74 L1979.99 1205.74 L1979.41 1205.74 L1978.82 1205.74 L1978.24 1205.74 L1977.65 1205.74 L1977.06 1205.74 L1976.48 1205.74 L1975.89 1205.74 L1975.3 1205.74 L1974.72 1205.74 L1974.13 1205.74 L1973.54 1205.74 L1972.96 1205.74 L1972.37 1205.74 L1971.78 1205.74 L1971.2 1205.74 L1970.61 1205.74 L1970.03 1205.74 L1969.44 1205.74 L1968.85 1205.74 L1968.27 1205.74 L1967.68 1205.74 L1967.09 1205.74 L1966.51 1205.74 L1965.92 1205.74 L1965.33 1205.74 L1964.75 1205.74 L1964.16 1205.74 L1963.58 1205.74 L1962.99 1205.74 L1962.4 1205.74 L1961.82 1205.74 L1961.23 1205.74 L1960.64 1205.74 L1960.06 1205.74 L1959.47 1205.74 L1958.88 1205.74 L1958.3 1205.74 L1957.71 1205.74 L1957.12 1205.74 L1956.54 1205.74 L1955.95 1205.74 L1955.37 1205.74 L1954.78 1205.74 L1954.19 1205.74 L1953.61 1205.74 L1953.02 1205.74 L1952.43 1205.74 L1951.85 1205.74 L1951.26 1205.74 L1950.67 1205.74 L1950.09 1205.74 L1949.5 1205.74 L1948.91 1205.74 L1948.33 1205.74 L1947.74 1205.74 L1947.16 1205.74 L1946.57 1205.74 L1945.98 1205.74 L1945.4 1205.74 L1944.81 1205.74 L1944.22 1205.74 L1943.64 1205.74 L1943.05 1205.74 L1942.46 1205.74 L1941.88 1205.74 L1941.29 1205.74 L1940.71 1205.74 L1940.12 1205.74 L1939.53 1205.74 L1938.95 1205.74 L1938.36 1205.74 L1937.77 1205.74 L1937.19 1205.74 L1936.6 1205.74 L1936.01 1205.74 L1935.43 1205.74 L1934.84 1205.74 L1934.25 1205.74 L1933.67 1205.74 L1933.08 1205.74 L1932.5 1205.74 L1931.91 1205.74 L1931.32 1205.74 L1930.74 1205.74 L1930.15 1205.74 L1929.56 1205.74 L1928.98 1205.74 L1928.39 1205.74 L1927.8 1205.74 L1927.22 1205.74 L1926.63 1205.74 L1926.04 1205.74 L1925.46 1205.74 L1924.87 1205.74 L1924.29 1205.74 L1923.7 1205.74 L1923.11 1205.74 L1922.53 1205.74 L1921.94 1205.74 L1921.35 1205.74 L1920.77 1205.74 L1920.18 1205.74 L1919.59 1205.74 L1919.01 1205.74 L1918.42 1205.74 L1917.83 1205.74 L1917.25 1205.74 L1916.66 1205.74 L1916.08 1205.74 L1915.49 1205.74 L1914.9 1205.74 L1914.32 1205.74 L1913.73 1205.74 L1913.14 1205.74 L1912.56 1205.74 L1911.97 1205.74 L1911.38 1205.74 L1910.8 1205.74 L1910.21 1205.74 L1909.63 1205.74 L1909.04 1205.74 L1908.45 1205.74 L1907.87 1205.74 L1907.28 1205.74 L1906.69 1205.74 L1906.11 1205.74 L1905.52 1205.74 L1904.93 1205.74 L1904.35 1205.74 L1903.76 1205.74 L1903.17 1205.74 L1902.59 1205.74 L1902 1205.74 L1901.42 1205.74 L1900.83 1205.74 L1900.24 1205.74 L1899.66 1205.74 L1899.07 1205.74 L1898.48 1205.74 L1897.9 1205.74 L1897.31 1205.74 L1896.72 1205.74 L1896.14 1205.74 L1895.55 1205.74 L1894.96 1205.74 L1894.38 1205.74 L1893.79 1205.74 L1893.21 1205.74 L1892.62 1205.74 L1892.03 1205.74 L1891.45 1205.74 L1890.86 1205.74 L1890.27 1205.74 L1889.69 1205.74 L1889.1 1205.74 L1888.51 1205.74 L1887.93 1205.74 L1887.34 1205.74 L1886.76 1205.74 L1886.17 1205.74 L1885.58 1205.74 L1885 1205.74 L1884.41 1205.74 L1883.82 1205.74 L1883.24 1205.74 L1882.65 1205.74 L1882.06 1205.74 L1881.48 1205.74 L1880.89 1205.74 L1880.3 1205.74 L1879.72 1205.74 L1879.13 1205.74 L1878.55 1205.74 L1877.96 1205.74 L1877.37 1205.74 L1876.79 1205.74 L1876.2 1205.74 L1875.61 1205.74 L1875.03 1205.74 L1874.44 1205.74 L1873.85 1205.74 L1873.27 1205.74 L1872.68 1205.74 L1872.09 1205.74 L1871.51 1205.74 L1870.92 1205.74 L1870.34 1205.74 L1869.75 1205.74 L1869.16 1205.74 L1868.58 1205.74 L1867.99 1205.74 L1867.4 1205.74 L1866.82 1205.74 L1866.23 1205.74 L1865.64 1205.74 L1865.06 1205.74 L1864.47 1205.74 L1863.88 1205.74 L1863.3 1205.74 L1862.71 1205.74 L1862.13 1205.74 L1861.54 1205.74 L1860.95 1205.74 L1860.37 1205.74 L1859.78 1205.74 L1859.19 1205.74 L1858.61 1205.74 L1858.02 1205.74 L1857.43 1205.74 L1856.85 1205.74 L1856.26 1205.74 L1855.68 1205.74 L1855.09 1205.74 L1854.5 1205.74 L1853.92 1205.74 L1853.33 1205.74 L1852.74 1205.74 L1852.16 1205.74 L1851.57 1205.74 L1850.98 1205.74 L1850.4 1205.74 L1849.81 1205.74 L1849.22 1205.74 L1848.64 1205.74 L1848.05 1205.74 L1847.47 1205.74 L1846.88 1205.74 L1846.29 1205.74 L1845.71 1205.74 L1845.12 1205.74 L1844.53 1205.74 L1843.95 1205.74 L1843.36 1205.74 L1842.77 1205.74 L1842.19 1205.74 L1841.6 1205.74 L1841.01 1205.74 L1840.43 1205.74 L1839.84 1205.74 L1839.26 1205.74 L1838.67 1205.74 L1838.08 1205.74 L1837.5 1205.74 L1836.91 1205.74 L1836.32 1205.74 L1835.74 1205.74 L1835.15 1205.74 L1834.56 1205.74 L1833.98 1205.74 L1833.39 1205.74 L1832.81 1205.74 L1832.22 1205.74 L1831.63 1205.74 L1831.05 1205.74 L1830.46 1205.74 L1829.87 1205.74 L1829.29 1205.74 L1828.7 1205.74 L1828.11 1205.74 L1827.53 1205.74 L1826.94 1205.74 L1826.35 1205.74 L1825.77 1205.74 L1825.18 1205.74 L1824.6 1205.74 L1824.01 1205.74 L1823.42 1205.74 L1822.84 1205.74 L1822.25 1205.74 L1821.66 1205.74 L1821.08 1205.74 L1820.49 1205.74 L1819.9 1205.74 L1819.32 1205.74 L1818.73 1205.74 L1818.14 1205.74 L1817.56 1205.74 L1816.97 1205.74 L1816.39 1205.74 L1815.8 1205.74 L1815.21 1205.74 L1814.63 1205.74 L1814.04 1205.74 L1813.45 1205.74 L1812.87 1205.74 L1812.28 1205.74 L1811.69 1205.74 L1811.11 1205.74 L1810.52 1205.74 L1809.94 1205.74 L1809.35 1205.74 L1808.76 1205.74 L1808.18 1205.74 L1807.59 1205.74 L1807 1205.74 L1806.42 1205.74 L1805.83 1205.74 L1805.24 1205.74 L1804.66 1205.74 L1804.07 1205.74 L1803.48 1205.74 L1802.9 1205.74 L1802.31 1205.74 L1801.73 1205.74 L1801.14 1205.74 L1800.55 1205.74 L1799.97 1205.74 L1799.38 1205.74 L1798.79 1205.74 L1798.21 1205.74 L1797.62 1205.74 L1797.03 1205.74 L1796.45 1205.74 L1795.86 1205.74 L1795.27 1205.74 L1794.69 1205.74 L1794.1 1205.74 L1793.52 1205.74 L1792.93 1205.74 L1792.34 1205.74 L1791.76 1205.74 L1791.17 1205.74 L1790.58 1205.74 L1790 1205.74 L1789.41 1205.74 L1788.82 1205.74 L1788.24 1205.74 L1787.65 1205.74 L1787.06 1205.74 L1786.48 1205.74 L1785.89 1205.74 L1785.31 1205.74 L1784.72 1205.74 L1784.13 1205.74 L1783.55 1205.74 L1782.96 1205.74 L1782.37 1205.74 L1781.79 1205.74 L1781.2 1205.74 L1780.61 1205.74 L1780.03 1205.74 L1779.44 1205.74 L1778.86 1205.74 L1778.27 1205.74 L1777.68 1205.74 L1777.1 1205.74 L1776.51 1205.74 L1775.92 1205.74 L1775.34 1205.74 L1774.75 1205.74 L1774.16 1205.74 L1773.58 1205.74 L1772.99 1205.74 L1772.4 1205.74 L1771.82 1205.74 L1771.23 1205.74 L1770.65 1205.74 L1770.06 1205.74 L1769.47 1205.74 L1768.89 1205.74 L1768.3 1205.74 L1767.71 1205.74 L1767.13 1205.74 L1766.54 1205.74 L1765.95 1205.74 L1765.37 1205.74 L1764.78 1205.74 L1764.19 1205.74 L1763.61 1205.74 L1763.02 1205.74 L1762.44 1205.74 L1761.85 1205.74 L1761.26 1205.74 L1760.68 1205.74 L1760.09 1205.74 L1759.5 1205.74 L1758.92 1205.74 L1758.33 1205.74 L1757.74 1205.74 L1757.16 1205.74 L1756.57 1205.74 L1755.99 1205.74 L1755.4 1205.74 L1754.81 1205.74 L1754.23 1205.74 L1753.64 1205.74 L1753.05 1205.74 L1752.47 1205.74 L1751.88 1205.74 L1751.29 1205.74 L1750.71 1205.74 L1750.12 1205.74 L1749.53 1205.74 L1748.95 1205.74 L1748.36 1205.74 L1747.78 1205.74 L1747.19 1205.74 L1746.6 1205.74 L1746.02 1205.74 L1745.43 1205.74 L1744.84 1205.74 L1744.26 1205.74 L1743.67 1205.74 L1743.08 1205.74 L1742.5 1205.74 L1741.91 1205.74 L1741.32 1205.74 L1740.74 1205.74 L1740.15 1205.74 L1739.57 1205.74 L1738.98 1205.74 L1738.39 1205.74 L1737.81 1205.74 L1737.22 1205.74 L1736.63 1205.74 L1736.05 1205.74 L1735.46 1205.74 L1734.87 1205.74 L1734.29 1205.74 L1733.7 1205.74 L1733.11 1205.74 L1732.53 1205.74 L1731.94 1205.74 L1731.36 1205.74 L1730.77 1205.74 L1730.18 1205.74 L1729.6 1205.74 L1729.01 1205.74 L1728.42 1205.74 L1727.84 1205.74 L1727.25 1205.74 L1726.66 1205.74 L1726.08 1205.74 L1725.49 1205.74 L1724.91 1205.74 L1724.32 1205.74 L1723.73 1205.74 L1723.15 1205.74 L1722.56 1205.74 L1721.97 1205.74 L1721.39 1205.74 L1720.8 1205.74 L1720.21 1205.74 L1719.63 1205.74 L1719.04 1205.74 L1718.45 1205.74 L1717.87 1205.74 L1717.28 1205.74 L1716.7 1205.74 L1716.11 1205.74 L1715.52 1205.74 L1714.94 1205.74 L1714.35 1205.74 L1713.76 1205.74 L1713.18 1205.74 L1712.59 1205.74 L1712 1205.74 L1711.42 1205.74 L1710.83 1205.74 L1710.24 1205.74 L1709.66 1205.74 L1709.07 1205.74 L1708.49 1205.74 L1707.9 1205.74 L1707.31 1205.74 L1706.73 1205.74 L1706.14 1205.74 L1705.55 1205.74 L1704.97 1205.74 L1704.38 1205.74 L1703.79 1205.74 L1703.21 1205.74 L1702.62 1205.74 L1702.04 1205.74 L1701.45 1205.74 L1700.86 1205.74 L1700.28 1205.74 L1699.69 1205.74 L1699.1 1205.74 L1698.52 1205.74 L1697.93 1205.74 L1697.34 1205.74 L1696.76 1205.74 L1696.17 1205.74 L1695.58 1205.74 L1695 1205.74 L1694.41 1205.74 L1693.83 1205.74 L1693.24 1205.74 L1692.65 1205.74 L1692.07 1205.74 L1691.48 1205.74 L1690.89 1205.74 L1690.31 1205.74 L1689.72 1205.74 L1689.13 1205.74 L1688.55 1205.74 L1687.96 1205.74 L1687.37 1205.74 L1686.79 1205.74 L1686.2 1205.74 L1685.62 1205.74 L1685.03 1205.74 L1684.44 1205.74 L1683.86 1205.74 L1683.27 1205.74 L1682.68 1205.74 L1682.1 1205.74 L1681.51 1205.74 L1680.92 1205.74 L1680.34 1205.74 L1679.75 1205.74 L1679.17 1205.74 L1678.58 1205.74 L1677.99 1205.74 L1677.41 1205.74 L1676.82 1205.74 L1676.23 1205.74 L1675.65 1205.74 L1675.06 1205.74 L1674.47 1205.74 L1673.89 1205.74 L1673.3 1205.74 L1672.71 1205.74 L1672.13 1205.74 L1671.54 1205.74 L1670.96 1205.74 L1670.37 1205.74 L1669.78 1205.74 L1669.2 1205.74 L1668.61 1205.74 L1668.02 1205.74 L1667.44 1205.74 L1666.85 1205.74 L1666.26 1205.74 L1665.68 1205.74 L1665.09 1205.74 L1664.5 1205.74 L1663.92 1205.74 L1663.33 1205.74 L1662.75 1205.74 L1662.16 1205.74 L1661.57 1205.74 L1660.99 1205.74 L1660.4 1205.74 L1659.81 1205.74 L1659.23 1205.74 L1658.64 1205.74 L1658.05 1205.74 L1657.47 1205.74 L1656.88 1205.74 L1656.29 1205.74 L1655.71 1205.74 L1655.12 1205.74 L1654.54 1205.74 L1653.95 1205.74 L1653.36 1205.74 L1652.78 1205.74 L1652.19 1205.74 L1651.6 1205.74 L1651.02 1205.74 L1650.43 1205.74 L1649.84 1205.74 L1649.26 1205.74 L1648.67 1205.74 L1648.09 1205.74 L1647.5 1205.74 L1646.91 1205.74 L1646.33 1205.74 L1645.74 1205.74 L1645.15 1205.74 L1644.57 1205.74 L1643.98 1205.74 L1643.39 1205.74 L1642.81 1205.74 L1642.22 1205.74 L1641.63 1205.74 L1641.05 1205.74 L1640.46 1205.74 L1639.88 1205.74 L1639.29 1205.74 L1638.7 1205.74 L1638.12 1205.74 L1637.53 1205.74 L1636.94 1205.74 L1636.36 1205.74 L1635.77 1205.74 L1635.18 1205.74 L1634.6 1205.74 L1634.01 1205.74 L1633.42 1205.74 L1632.84 1205.74 L1632.25 1205.74 L1631.67 1205.74 L1631.08 1205.74 L1630.49 1205.74 L1629.91 1205.74 L1629.32 1205.74 L1628.73 1205.74 L1628.15 1205.74 L1627.56 1205.74 L1626.97 1205.74 L1626.39 1205.74 L1625.8 1205.74 L1625.22 1205.74 L1624.63 1205.74 L1624.04 1205.74 L1623.46 1205.74 L1622.87 1205.74 L1622.28 1205.74 L1621.7 1205.74 L1621.11 1205.74 L1620.52 1205.74 L1619.94 1205.74 L1619.35 1205.74 L1618.76 1205.74 L1618.18 1205.74 L1617.59 1205.74 L1617.01 1205.74 L1616.42 1205.74 L1615.83 1205.74 L1615.25 1205.74 L1614.66 1205.74 L1614.07 1205.74 L1613.49 1205.74 L1612.9 1205.74 L1612.31 1205.74 L1611.73 1205.74 L1611.14 1205.74 L1610.55 1205.74 L1609.97 1205.74 L1609.38 1205.74 L1608.8 1205.74 L1608.21 1205.74 L1607.62 1205.74 L1607.04 1205.74 L1606.45 1205.74 L1605.86 1205.74 L1605.28 1205.74 L1604.69 1205.74 L1604.1 1205.74 L1603.52 1205.74 L1602.93 1205.74 L1602.34 1205.74 L1601.76 1205.74 L1601.17 1205.74 L1600.59 1205.74 L1600 1205.74 L1599.41 1205.74 L1598.83 1205.74 L1598.24 1205.74 L1597.65 1205.74 L1597.07 1205.74 L1596.48 1205.74 L1595.89 1205.74 L1595.31 1205.74 L1594.72 1205.74 L1594.14 1205.74 L1593.55 1205.74 L1592.96 1205.74 L1592.38 1205.74 L1591.79 1205.74 L1591.2 1205.74 L1590.62 1205.74 L1590.03 1205.74 L1589.44 1205.74 L1588.86 1205.74 L1588.27 1205.74 L1587.68 1205.74 L1587.1 1205.74 L1586.51 1205.74 L1585.93 1205.74 L1585.34 1205.74 L1584.75 1205.74 L1584.17 1205.74 L1583.58 1205.74 L1582.99 1205.74 L1582.41 1205.74 L1581.82 1205.74 L1581.23 1205.74 L1580.65 1205.74 L1580.06 1205.74 L1579.47 1205.74 L1578.89 1205.74 L1578.3 1205.74 L1577.72 1205.74 L1577.13 1205.74 L1576.54 1205.74 L1575.96 1205.74 L1575.37 1205.74 L1574.78 1205.74 L1574.2 1205.74 L1573.61 1205.74 L1573.02 1205.74 L1572.44 1205.74 L1571.85 1205.74 L1571.27 1205.74 L1570.68 1205.74 L1570.09 1205.74 L1569.51 1205.74 L1568.92 1205.74 L1568.33 1205.74 L1567.75 1205.74 L1567.16 1205.74 L1566.57 1205.74 L1565.99 1205.74 L1565.4 1205.74 L1564.81 1205.74 L1564.23 1205.74 L1563.64 1205.74 L1563.06 1205.74 L1562.47 1205.74 L1561.88 1205.74 L1561.3 1205.74 L1560.71 1205.74 L1560.12 1205.74 L1559.54 1205.74 L1558.95 1205.74 L1558.36 1205.74 L1557.78 1205.74 L1557.19 1205.74 L1556.6 1205.74 L1556.02 1205.74 L1555.43 1205.74 L1554.85 1205.74 L1554.26 1205.74 L1553.67 1205.74 L1553.09 1205.74 L1552.5 1205.74 L1551.91 1205.74 L1551.33 1205.74 L1550.74 1205.74 L1550.15 1205.74 L1549.57 1205.74 L1548.98 1205.74 L1548.4 1205.74 L1547.81 1205.74 L1547.22 1205.74 L1546.64 1205.74 L1546.05 1205.74 L1545.46 1205.74 L1544.88 1205.74 L1544.29 1205.74 L1543.7 1205.74 L1543.12 1205.74 L1542.53 1205.74 L1541.94 1205.74 L1541.36 1205.74 L1540.77 1205.74 L1540.19 1205.74 L1539.6 1205.74 L1539.01 1205.74 L1538.43 1205.74 L1537.84 1205.74 L1537.25 1205.74 L1536.67 1205.74 L1536.08 1205.74 L1535.49 1205.74 L1534.91 1205.74 L1534.32 1205.74 L1533.73 1205.74 L1533.15 1205.74 L1532.56 1205.74 L1531.98 1205.74 L1531.39 1205.74 L1530.8 1205.74 L1530.22 1205.74 L1529.63 1205.74 L1529.04 1205.74 L1528.46 1205.74 L1527.87 1205.74 L1527.28 1205.74 L1526.7 1205.74 L1526.11 1205.74 L1525.52 1205.74 L1524.94 1205.74 L1524.35 1205.74 L1523.77 1205.74 L1523.18 1205.74 L1522.59 1205.74 L1522.01 1205.74 L1521.42 1205.74 L1520.83 1205.74 L1520.25 1205.74 L1519.66 1205.74 L1519.07 1205.74 L1518.49 1205.74 L1517.9 1205.74 L1517.32 1205.74 L1516.73 1205.74 L1516.14 1205.74 L1515.56 1205.74 L1514.97 1205.74 L1514.38 1205.74 L1513.8 1205.74 L1513.21 1205.74 L1512.62 1205.74 L1512.04 1205.74 L1511.45 1205.74 L1510.86 1205.74 L1510.28 1205.74 L1509.69 1205.74 L1509.11 1205.74 L1508.52 1205.74 L1507.93 1205.74 L1507.35 1205.74 L1506.76 1205.74 L1506.17 1205.74 L1505.59 1205.74 L1505 1205.74 L1504.41 1205.74 L1503.83 1205.74 L1503.24 1205.74 L1502.65 1205.74 L1502.07 1205.74 L1501.48 1205.74 L1500.9 1205.74 L1500.31 1205.74 L1499.72 1205.74 L1499.14 1205.74 L1498.55 1205.74 L1497.96 1205.74 L1497.38 1205.74 L1496.79 1205.74 L1496.2 1205.74 L1495.62 1205.74 L1495.03 1205.74 L1494.45 1205.74 L1493.86 1205.74 L1493.27 1205.74 L1492.69 1205.74 L1492.1 1205.74 L1491.51 1205.74 L1490.93 1205.74 L1490.34 1205.74 L1489.75 1205.74 L1489.17 1205.74 L1488.58 1205.74 L1487.99 1205.74 L1487.41 1205.74 L1486.82 1205.74 L1486.24 1205.74 L1485.65 1205.74 L1485.06 1205.74 L1484.48 1205.74 L1483.89 1205.74 L1483.3 1205.74 L1482.72 1205.74 L1482.13 1205.74 L1481.54 1205.74 L1480.96 1205.74 L1480.37 1205.74 L1479.78 1205.74 L1479.2 1205.74 L1478.61 1205.74 L1478.03 1205.74 L1477.44 1205.74 L1476.85 1205.74 L1476.27 1205.74 L1475.68 1205.74 L1475.09 1205.74 L1474.51 1205.74 L1473.92 1205.74 L1473.33 1205.74 L1472.75 1205.74 L1472.16 1205.74 L1471.57 1205.74 L1470.99 1205.74 L1470.4 1205.74 L1469.82 1205.74 L1469.23 1205.74 L1468.64 1205.74 L1468.06 1205.74 L1467.47 1205.74 L1466.88 1205.74 L1466.3 1205.74 L1465.71 1205.74 L1465.12 1205.74 L1464.54 1205.74 L1463.95 1205.74 L1463.37 1205.74 L1462.78 1205.74 L1462.19 1205.74 L1461.61 1205.74 L1461.02 1205.74 L1460.43 1205.74 L1459.85 1205.74 L1459.26 1205.74 L1458.67 1205.74 L1458.09 1205.74 L1457.5 1205.74 L1456.91 1205.74 L1456.33 1205.74 L1455.74 1205.74 L1455.16 1205.74 L1454.57 1205.74 L1453.98 1205.74 L1453.4 1205.74 L1452.81 1205.74 L1452.22 1205.74 L1451.64 1205.74 L1451.05 1205.74 L1450.46 1205.74 L1449.88 1205.74 L1449.29 1205.74 L1448.7 1205.74 L1448.12 1205.74 L1447.53 1205.74 L1446.95 1205.74 L1446.36 1205.74 L1445.77 1205.74 L1445.19 1205.74 L1444.6 1205.74 L1444.01 1205.74 L1443.43 1205.74 L1442.84 1205.74 L1442.25 1205.74 L1441.67 1205.74 L1441.08 1205.74 L1440.5 1205.74 L1439.91 1205.74 L1439.32 1205.74 L1438.74 1205.74 L1438.15 1205.74 L1437.56 1205.74 L1436.98 1205.74 L1436.39 1205.74 L1435.8 1205.74 L1435.22 1205.74 L1434.63 1205.74 L1434.04 1205.74 L1433.46 1205.74 L1432.87 1205.74 L1432.29 1205.74 L1431.7 1205.74 L1431.11 1205.74 L1430.53 1205.74 L1429.94 1205.74 L1429.35 1205.74 L1428.77 1205.74 L1428.18 1205.74 L1427.59 1205.74 L1427.01 1205.74 L1426.42 1205.74 L1425.83 1205.74 L1425.25 1205.74 L1424.66 1205.74 L1424.08 1205.74 L1423.49 1205.74 L1422.9 1205.74 L1422.32 1205.74 L1421.73 1205.74 L1421.14 1205.74 L1420.56 1205.74 L1419.97 1205.74 L1419.38 1205.74 L1418.8 1205.74 L1418.21 1205.74 L1417.63 1205.74 L1417.04 1205.74 L1416.45 1205.74 L1415.87 1205.74 L1415.28 1205.74 L1414.69 1205.74 L1414.11 1205.74 L1413.52 1205.74 L1412.93 1205.74 L1412.35 1205.74 L1411.76 1205.74 L1411.17 1205.74 L1410.59 1205.74 L1410 1205.74 L1409.42 1205.74 L1408.83 1205.74 L1408.24 1205.74 L1407.66 1205.74 L1407.07 1205.74 L1406.48 1205.74 L1405.9 1205.74 L1405.31 1205.74 L1404.72 1205.74 L1404.14 1205.74 L1403.55 1205.74 L1402.96 1205.74 L1402.38 1205.74 L1401.79 1205.74 L1401.21 1205.74 L1400.62 1205.74 L1400.03 1205.74 L1399.45 1205.74 L1398.86 1205.74 L1398.27 1205.74 L1397.69 1205.74 L1397.1 1205.74 L1396.51 1205.74 L1395.93 1205.74 L1395.34 1205.74 L1394.75 1205.74 L1394.17 1205.74 L1393.58 1205.74 L1393 1205.74 L1392.41 1205.74 L1391.82 1205.74 L1391.24 1205.74 L1390.65 1205.74 L1390.06 1205.74 L1389.48 1205.74 L1388.89 1205.74 L1388.3 1205.74 L1387.72 1205.74 L1387.13 1205.74 L1386.55 1205.74 L1385.96 1205.74 L1385.37 1205.74 L1384.79 1205.74 L1384.2 1205.74 L1383.61 1205.74 L1383.03 1205.74 L1382.44 1205.74 L1381.85 1205.74 L1381.27 1205.74 L1380.68 1205.74 L1380.09 1205.74 L1379.51 1205.74 L1378.92 1205.74 L1378.34 1205.74 L1377.75 1205.74 L1377.16 1205.74 L1376.58 1205.74 L1375.99 1205.74 L1375.4 1205.74 L1374.82 1205.74 L1374.23 1205.74 L1373.64 1205.74 L1373.06 1205.74 L1372.47 1205.74 L1371.88 1205.74 L1371.3 1205.74 L1370.71 1205.74 L1370.13 1205.74 L1369.54 1205.74 L1368.95 1205.74 L1368.37 1205.74 L1367.78 1205.74 L1367.19 1205.74 L1366.61 1205.74 L1366.02 1205.74 L1365.43 1205.74 L1364.85 1205.74 L1364.26 1205.74 L1363.68 1205.74 L1363.09 1205.74 L1362.5 1205.74 L1361.92 1205.74 L1361.33 1205.74 L1360.74 1205.74 L1360.16 1205.74 L1359.57 1205.74 L1358.98 1205.74 L1358.4 1205.74 L1357.81 1205.74 L1357.22 1205.74 L1356.64 1205.74 L1356.05 1205.74 L1355.47 1205.74 L1354.88 1205.74 L1354.29 1205.74 L1353.71 1205.74 L1353.12 1205.74 L1352.53 1205.74 L1351.95 1205.74 L1351.36 1205.74 L1350.77 1205.74 L1350.19 1205.74 L1349.6 1205.74 L1349.01 1205.74 L1348.43 1205.74 L1347.84 1205.74 L1347.26 1205.74 L1346.67 1205.74 L1346.08 1205.74 L1345.5 1205.74 L1344.91 1205.74 L1344.32 1205.74 L1343.74 1205.74 L1343.15 1205.74 L1342.56 1205.74 L1341.98 1205.74 L1341.39 1205.74 L1340.8 1205.74 L1340.22 1205.74 L1339.63 1205.74 L1339.05 1205.74 L1338.46 1205.74 L1337.87 1205.74 L1337.29 1205.74 L1336.7 1205.74 L1336.11 1205.74 L1335.53 1205.74 L1334.94 1205.74 L1334.35 1205.74 L1333.77 1205.74 L1333.18 1205.74 L1332.6 1205.74 L1332.01 1205.74 L1331.42 1205.74 L1330.84 1205.74 L1330.25 1205.74 L1329.66 1205.74 L1329.08 1205.74 L1328.49 1205.74 L1327.9 1205.74 L1327.32 1205.74 L1326.73 1205.74 L1326.14 1205.74 L1325.56 1205.74 L1324.97 1205.74 L1324.39 1205.74 L1323.8 1205.74 L1323.21 1205.74 L1322.63 1205.74 L1322.04 1205.74 L1321.45 1205.74 L1320.87 1205.74 L1320.28 1205.74 L1319.69 1205.74 L1319.11 1205.74 L1318.52 1205.74 L1317.93 1205.74 L1317.35 1205.74 L1316.76 1205.74 L1316.18 1205.74 L1315.59 1205.74 L1315 1205.74 L1314.42 1205.74 L1313.83 1205.74 L1313.24 1205.74 L1312.66 1205.74 L1312.07 1205.74 L1311.48 1205.74 L1310.9 1205.74 L1310.31 1205.74 L1309.73 1205.74 L1309.14 1205.74 L1308.55 1205.74 L1307.97 1205.74 L1307.38 1205.74 L1306.79 1205.74 L1306.21 1205.74 L1305.62 1205.74 L1305.03 1205.74 L1304.45 1205.74 L1303.86 1205.74 L1303.27 1205.74 L1302.69 1205.74 L1302.1 1205.74 L1301.52 1205.74 L1300.93 1205.74 L1300.34 1205.74 L1299.76 1205.74 L1299.17 1205.74 L1298.58 1205.74 L1298 1205.74 L1297.41 1205.74 L1296.82 1205.74 L1296.24 1205.74 L1295.65 1205.74 L1295.06 1205.74 L1294.48 1205.74 L1293.89 1205.74 L1293.31 1205.74 L1292.72 1205.74 L1292.13 1205.74 L1291.55 1205.74 L1290.96 1205.74 L1290.37 1205.74 L1289.79 1205.74 L1289.2 1205.74 L1288.61 1205.74 L1288.03 1205.74 L1287.44 1205.74 L1286.86 1205.74 L1286.27 1205.74 L1285.68 1205.74 L1285.1 1205.74 L1284.51 1205.74 L1283.92 1205.74 L1283.34 1205.74 L1282.75 1205.74 L1282.16 1205.74 L1281.58 1205.74 L1280.99 1205.74 L1280.4 1205.74 L1279.82 1205.74 L1279.23 1205.74 L1278.65 1205.74 L1278.06 1205.74 L1277.47 1205.74 L1276.89 1205.74 L1276.3 1205.74 L1275.71 1205.74 L1275.13 1205.74 L1274.54 1205.74 L1273.95 1205.74 L1273.37 1205.74 L1272.78 1205.74 L1272.19 1205.74 L1271.61 1205.74 L1271.02 1205.74 L1270.44 1205.74 L1269.85 1205.74 L1269.26 1205.74 L1268.68 1205.74 L1268.09 1205.74 L1267.5 1205.74 L1266.92 1205.74 L1266.33 1205.74 L1265.74 1205.74 L1265.16 1205.74 L1264.57 1205.74 L1263.98 1205.74 L1263.4 1205.74 L1262.81 1205.74 L1262.23 1205.74 L1261.64 1205.74 L1261.05 1205.74 L1260.47 1205.74 L1259.88 1205.74 L1259.29 1205.74 L1258.71 1205.74 L1258.12 1205.74 L1257.53 1205.74 L1256.95 1205.74 L1256.36 1205.74 L1255.78 1205.74 L1255.19 1205.74 L1254.6 1205.74 L1254.02 1205.74 L1253.43 1205.74 L1252.84 1205.74 L1252.26 1205.74 L1251.67 1205.74 L1251.08 1205.74 L1250.5 1205.74 L1249.91 1205.74 L1249.32 1205.74 L1248.74 1205.74 L1248.15 1205.74 L1247.57 1205.74 L1246.98 1205.74 L1246.39 1205.74 L1245.81 1205.74 L1245.22 1205.74 L1244.63 1205.74 L1244.05 1205.74 L1243.46 1205.74 L1242.87 1205.74 L1242.29 1205.74 L1241.7 1205.74 L1241.11 1205.74 L1240.53 1205.74 L1239.94 1205.74 L1239.36 1205.74 L1238.77 1205.74 L1238.18 1205.74 L1237.6 1205.74 L1237.01 1205.74 L1236.42 1205.74 L1235.84 1205.74 L1235.25 1205.74 L1234.66 1205.74 L1234.08 1205.74 L1233.49 1205.74 L1232.91 1205.74 L1232.32 1205.74 L1231.73 1205.74 L1231.15 1205.74 L1230.56 1205.74 L1229.97 1205.74 L1229.39 1205.74 L1228.8 1205.74 L1228.21 1205.74 L1227.63 1205.74 L1227.04 1205.74 L1226.45 1205.74 L1225.87 1205.74 L1225.28 1205.74 L1224.7 1205.74 L1224.11 1205.74 L1223.52 1205.74 L1222.94 1205.74 L1222.35 1205.74 L1221.76 1205.74 L1221.18 1205.74 L1220.59 1205.74 L1220 1205.74 L1219.42 1205.74 L1218.83 1205.74 L1218.24 1205.74 L1217.66 1205.74 L1217.07 1205.74 L1216.49 1205.74 L1215.9 1205.74 L1215.31 1205.74 L1214.73 1205.74 L1214.14 1205.74 L1213.55 1205.74 L1212.97 1205.74 L1212.38 1205.74 L1211.79 1205.74 L1211.21 1205.74 L1210.62 1205.74 L1210.03 1205.74 L1209.45 1205.74 L1208.86 1205.74 L1208.28 1205.74 L1207.69 1205.74 L1207.1 1205.74 L1206.52 1205.74 L1205.93 1205.74 L1205.34 1205.74 L1204.76 1205.74 L1204.17 1205.74 L1203.58 1205.74 L1203 1205.74 L1202.41 1205.74 L1201.83 1205.74 L1201.24 1205.74 L1200.65 1205.74 L1200.07 1205.74 L1199.48 1205.74 L1198.89 1205.74 L1198.31 1205.74 L1197.72 1205.74 L1197.13 1205.74 L1196.55 1205.74 L1195.96 1205.74 L1195.37 1205.74 L1194.79 1205.74 L1194.2 1205.74 L1193.62 1205.74 L1193.03 1205.74 L1192.44 1205.74 L1191.86 1205.74 L1191.27 1205.74 L1190.68 1205.74 L1190.1 1205.74 L1189.51 1205.74 L1188.92 1205.74 L1188.34 1205.74 L1187.75 1205.74 L1187.16 1205.74 L1186.58 1205.74 L1185.99 1205.74 L1185.41 1205.74 L1184.82 1205.74 L1184.23 1205.74 L1183.65 1205.74 L1183.06 1205.74 L1182.47 1205.74 L1181.89 1205.74 L1181.3 1205.74 L1180.71 1205.74 L1180.13 1205.74 L1179.54 1205.74 L1178.96 1205.74 L1178.37 1205.74 L1177.78 1205.74 L1177.2 1205.74 L1176.61 1205.74 L1176.02 1205.74 L1175.44 1205.74 L1174.85 1205.74 L1174.26 1205.74 L1173.68 1205.74 L1173.09 1205.74 L1172.5 1205.74 L1171.92 1205.74 L1171.33 1205.74 L1170.75 1205.74 L1170.16 1205.74 L1169.57 1205.74 L1168.99 1205.74 L1168.4 1205.74 L1167.81 1205.74 L1167.23 1205.74 L1166.64 1205.74 L1166.05 1205.74 L1165.47 1205.74 L1164.88 1205.74 L1164.29 1205.74 L1163.71 1205.74 L1163.12 1205.74 L1162.54 1205.74 L1161.95 1205.74 L1161.36 1205.74 L1160.78 1205.74 L1160.19 1205.74 L1159.6 1205.74 L1159.02 1205.74 L1158.43 1205.74 L1157.84 1205.74 L1157.26 1205.74 L1156.67 1205.74 L1156.09 1205.74 L1155.5 1205.74 L1154.91 1205.74 L1154.33 1205.74 L1153.74 1205.74 L1153.15 1205.74 L1152.57 1205.74 L1151.98 1205.74 L1151.39 1205.74 L1150.81 1205.74 L1150.22 1205.74 L1149.63 1205.74 L1149.05 1205.74 L1148.46 1205.74 L1147.88 1205.74 L1147.29 1205.74 L1146.7 1205.74 L1146.12 1205.74 L1145.53 1205.74 L1144.94 1205.74 L1144.36 1205.74 L1143.77 1205.74 L1143.18 1205.74 L1142.6 1205.74 L1142.01 1205.74 L1141.42 1205.74 L1140.84 1205.74 L1140.25 1205.74 L1139.67 1205.74 L1139.08 1205.74 L1138.49 1205.74 L1137.91 1205.74 L1137.32 1205.74 L1136.73 1205.74 L1136.15 1205.74 L1135.56 1205.74 L1134.97 1205.74 L1134.39 1205.74 L1133.8 1205.74 L1133.21 1205.74 L1132.63 1205.74 L1132.04 1205.74 L1131.46 1205.74 L1130.87 1205.74 L1130.28 1205.74 L1129.7 1205.74 L1129.11 1205.74 L1128.52 1205.74 L1127.94 1205.74 L1127.35 1205.74 L1126.76 1205.74 L1126.18 1205.74 L1125.59 1205.74 L1125.01 1205.74 L1124.42 1205.74 L1123.83 1205.74 L1123.25 1205.74 L1122.66 1205.74 L1122.07 1205.74 L1121.49 1205.74 L1120.9 1205.74 L1120.31 1205.74 L1119.73 1205.74 L1119.14 1205.74 L1118.55 1205.74 L1117.97 1205.74 L1117.38 1205.74 L1116.8 1205.74 L1116.21 1205.74 L1115.62 1205.74 L1115.04 1205.74 L1114.45 1205.74 L1113.86 1205.74 L1113.28 1205.74 L1112.69 1205.74 L1112.1 1205.74 L1111.52 1205.74 L1110.93 1205.74 L1110.34 1205.74 L1109.76 1205.74 L1109.17 1205.74 L1108.59 1205.74 L1108 1205.74 L1107.41 1205.74 L1106.83 1205.74 L1106.24 1205.74 L1105.65 1205.74 L1105.07 1205.74 L1104.48 1205.74 L1103.89 1205.74 L1103.31 1205.74 L1102.72 1205.74 L1102.14 1205.74 L1101.55 1205.74 L1100.96 1205.74 L1100.38 1205.74 L1099.79 1205.74 L1099.2 1205.74 L1098.62 1205.74 L1098.03 1205.74 L1097.44 1205.74 L1096.86 1205.74 L1096.27 1205.74 L1095.68 1205.74 L1095.1 1205.74 L1094.51 1205.74 L1093.93 1205.74 L1093.34 1205.74 L1092.75 1205.74 L1092.17 1205.74 L1091.58 1205.74 L1090.99 1205.74 L1090.41 1205.74 L1089.82 1205.74 L1089.23 1205.74 L1088.65 1205.74 L1088.06 1205.74 L1087.47 1205.74 L1086.89 1205.74 L1086.3 1205.74 L1085.72 1205.74 L1085.13 1205.74 L1084.54 1205.74 L1083.96 1205.74 L1083.37 1205.74 L1082.78 1205.74 L1082.2 1205.74 L1081.61 1205.74 L1081.02 1205.74 L1080.44 1205.74 L1079.85 1205.74 L1079.26 1205.74 L1078.68 1205.74 L1078.09 1205.74 L1077.51 1205.74 L1076.92 1205.74 L1076.33 1205.74 L1075.75 1205.74 L1075.16 1205.74 L1074.57 1205.74 L1073.99 1205.74 L1073.4 1205.74 L1072.81 1205.74 L1072.23 1205.74 L1071.64 1205.74 L1071.06 1205.74 L1070.47 1205.74 L1069.88 1205.74 L1069.3 1205.74 L1068.71 1205.74 L1068.12 1205.74 L1067.54 1205.74 L1066.95 1205.74 L1066.36 1205.74 L1065.78 1205.74 L1065.19 1205.74 L1064.6 1205.74 L1064.02 1205.74 L1063.43 1205.74 L1062.85 1205.74 L1062.26 1205.74 L1061.67 1205.74 L1061.09 1205.74 L1060.5 1205.74 L1059.91 1205.74 L1059.33 1205.74 L1058.74 1205.74 L1058.15 1205.74 L1057.57 1205.74 L1056.98 1205.74 L1056.39 1205.74 L1055.81 1205.74 L1055.22 1205.74 L1054.64 1205.74 L1054.05 1205.74 L1053.46 1205.74 L1052.88 1205.74 L1052.29 1205.74 L1051.7 1205.74 L1051.12 1205.74 L1050.53 1205.74 L1049.94 1205.74 L1049.36 1205.74 L1048.77 1205.74 L1048.19 1205.74 L1047.6 1205.74 L1047.01 1205.74 L1046.43 1205.74 L1045.84 1205.74 L1045.25 1205.74 L1044.67 1205.74 L1044.08 1205.74 L1043.49 1205.74 L1042.91 1205.74 L1042.32 1205.74 L1041.73 1205.74 L1041.15 1205.74 L1040.56 1205.74 L1039.98 1205.74 L1039.39 1205.74 L1038.8 1205.74 L1038.22 1205.74 L1037.63 1205.74 L1037.04 1205.74 L1036.46 1205.74 L1035.87 1205.74 L1035.28 1205.74 L1034.7 1205.74 L1034.11 1205.74 L1033.52 1205.74 L1032.94 1205.74 L1032.35 1205.74 L1031.77 1205.74 L1031.18 1205.74 L1030.59 1205.74 L1030.01 1205.74 L1029.42 1205.74 L1028.83 1205.74 L1028.25 1205.74 L1027.66 1205.74 L1027.07 1205.74 L1026.49 1205.74 L1025.9 1205.74 L1025.32 1205.74 L1024.73 1205.74 L1024.14 1205.74 L1023.56 1205.74 L1022.97 1205.74 L1022.38 1205.74 L1021.8 1205.74 L1021.21 1205.74 L1020.62 1205.74 L1020.04 1205.74 L1019.45 1205.74 L1018.86 1205.74 L1018.28 1205.74 L1017.69 1205.74 L1017.11 1205.74 L1016.52 1205.74 L1015.93 1205.74 L1015.35 1205.74 L1014.76 1205.74 L1014.17 1205.74 L1013.59 1205.74 L1013 1205.74 L1012.41 1205.74 L1011.83 1205.74 L1011.24 1205.74 L1010.65 1205.74 L1010.07 1205.74 L1009.48 1205.74 L1008.9 1205.74 L1008.31 1205.74 L1007.72 1205.74 L1007.14 1205.74 L1006.55 1205.74 L1005.96 1205.74 L1005.38 1205.74 L1004.79 1205.74 L1004.2 1205.74 L1003.62 1205.74 L1003.03 1205.74 L1002.44 1205.74 L1001.86 1205.74 L1001.27 1205.74 L1000.69 1205.74 L1000.1 1205.74 L999.513 1205.74 L998.926 1205.74 L998.34 1205.74 L997.754 1205.74 L997.167 1205.74 L996.581 1205.74 L995.994 1205.74 L995.408 1205.74 L994.822 1205.74 L994.235 1205.74 L993.649 1205.74 L993.062 1205.74 L992.476 1205.74 L991.889 1205.74 L991.303 1205.74 L990.717 1205.74 L990.13 1205.74 L989.544 1205.74 L988.957 1205.74 L988.371 1205.74 L987.785 1205.74 L987.198 1205.74 L986.612 1205.74 L986.025 1205.74  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1206.01 986.612,1206.01 987.198,1206.01 987.785,1206.01 988.371,1206.01 988.957,1206.01 989.544,1206.01 990.13,1206.01 990.717,1206.01 991.303,1206.01 991.889,1206.01 992.476,1206.01 993.062,1206.01 993.649,1206.01 994.235,1206.01 994.822,1206.01 995.408,1206.01 995.994,1206.01 996.581,1206.01 997.167,1206.01 997.754,1206.01 998.34,1206.01 998.926,1206.01 999.513,1206.01 1000.1,1206.01 1000.69,1206.01 1001.27,1206.01 1001.86,1206.01 1002.44,1206.01 1003.03,1206.01 1003.62,1206.01 1004.2,1206.01 1004.79,1206.01 1005.38,1206.01 1005.96,1206.01 1006.55,1206.01 1007.14,1206.01 1007.72,1206.01 1008.31,1206.01 1008.9,1206.01 1009.48,1206.01 1010.07,1206.01 1010.65,1206.01 1011.24,1206.01 1011.83,1206.01 1012.41,1206.01 1013,1206.01 1013.59,1206.01 1014.17,1206.01 1014.76,1206.01 1015.35,1206.01 1015.93,1206.01 1016.52,1206.01 1017.11,1206.01 1017.69,1206.01 1018.28,1206.01 1018.86,1206.01 1019.45,1206.01 1020.04,1206.01 1020.62,1206.01 1021.21,1206.01 1021.8,1206.01 1022.38,1206.01 1022.97,1206.01 1023.56,1206.01 1024.14,1206.01 1024.73,1206.01 1025.32,1206.01 1025.9,1206.01 1026.49,1206.01 1027.07,1206.01 1027.66,1206.01 1028.25,1206.01 1028.83,1206.01 1029.42,1206.01 1030.01,1206.01 1030.59,1206.01 1031.18,1206.01 1031.77,1206.01 1032.35,1206.01 1032.94,1206.01 1033.52,1206.01 1034.11,1206.01 1034.7,1206.01 1035.28,1206.01 1035.87,1206.01 1036.46,1206.01 1037.04,1206.01 1037.63,1206.01 1038.22,1206.01 1038.8,1206.01 1039.39,1206.01 1039.98,1206.01 1040.56,1206.01 1041.15,1206.01 1041.73,1206.01 1042.32,1206.01 1042.91,1206.01 1043.49,1206.01 1044.08,1206.01 1044.67,1206.01 1045.25,1206.01 1045.84,1206.01 1046.43,1206.01 1047.01,1206.01 1047.6,1206.01 1048.19,1206.01 1048.77,1206.01 1049.36,1206.01 1049.94,1206.01 1050.53,1206.01 1051.12,1206.01 1051.7,1206.01 1052.29,1206.01 1052.88,1206.01 1053.46,1206.01 1054.05,1206.01 1054.64,1206.01 1055.22,1206.01 1055.81,1206.01 1056.39,1206.01 1056.98,1206.01 1057.57,1206.01 1058.15,1206.01 1058.74,1206.01 1059.33,1206.01 1059.91,1206.01 1060.5,1206.01 1061.09,1206.01 1061.67,1206.01 1062.26,1206.01 1062.85,1206.01 1063.43,1206.01 1064.02,1206.01 1064.6,1206.01 1065.19,1206.01 1065.78,1206.01 1066.36,1206.01 1066.95,1206.01 1067.54,1206.01 1068.12,1206.01 1068.71,1206.01 1069.3,1206.01 1069.88,1206.01 1070.47,1206.01 1071.06,1206.01 1071.64,1206.01 1072.23,1206.01 1072.81,1206.01 1073.4,1206.01 1073.99,1206.01 1074.57,1206.01 1075.16,1206.01 1075.75,1206.01 1076.33,1206.01 1076.92,1206.01 1077.51,1206.01 1078.09,1206.01 1078.68,1206.01 1079.26,1206.01 1079.85,1206.01 1080.44,1206.01 1081.02,1206.01 1081.61,1206.01 1082.2,1206.01 1082.78,1206.01 1083.37,1206.01 1083.96,1206.01 1084.54,1206.01 1085.13,1206.01 1085.72,1206.01 1086.3,1206.01 1086.89,1206.01 1087.47,1206.01 1088.06,1206.01 1088.65,1206.01 1089.23,1206.01 1089.82,1206.01 1090.41,1206.01 1090.99,1206.01 1091.58,1206.01 1092.17,1206.01 1092.75,1206.01 1093.34,1206.01 1093.93,1206.01 1094.51,1206.01 1095.1,1206.01 1095.68,1206.01 1096.27,1206.01 1096.86,1206.01 1097.44,1206.01 1098.03,1206.01 1098.62,1206.01 1099.2,1206.01 1099.79,1206.01 1100.38,1206.01 1100.96,1206.01 1101.55,1206.01 1102.14,1206.01 1102.72,1206.01 1103.31,1206.01 1103.89,1206.01 1104.48,1206.01 1105.07,1206.01 1105.65,1206.01 1106.24,1206.01 1106.83,1206.01 1107.41,1206.01 1108,1206.01 1108.59,1206.01 1109.17,1206.01 1109.76,1206.01 1110.34,1206.01 1110.93,1206.01 1111.52,1206.01 1112.1,1206.01 1112.69,1206.01 1113.28,1206.01 1113.86,1206.01 1114.45,1206.01 1115.04,1206.01 1115.62,1206.01 1116.21,1206.01 1116.8,1206.01 1117.38,1206.01 1117.97,1206.01 1118.55,1206.01 1119.14,1206.01 1119.73,1206.01 1120.31,1206.01 1120.9,1206.01 1121.49,1206.01 1122.07,1206.01 1122.66,1206.01 1123.25,1206.01 1123.83,1206.01 1124.42,1206.01 1125.01,1206.01 1125.59,1206.01 1126.18,1206.01 1126.76,1206.01 1127.35,1206.01 1127.94,1206.01 1128.52,1206.01 1129.11,1206.01 1129.7,1206.01 1130.28,1206.01 1130.87,1206.01 1131.46,1206.01 1132.04,1206.01 1132.63,1206.01 1133.21,1206.01 1133.8,1206.01 1134.39,1206.01 1134.97,1206.01 1135.56,1206.01 1136.15,1206.01 1136.73,1206.01 1137.32,1206.01 1137.91,1206.01 1138.49,1206.01 1139.08,1206.01 1139.67,1206.01 1140.25,1206.01 1140.84,1206.01 1141.42,1206.01 1142.01,1206.01 1142.6,1206.01 1143.18,1206.01 1143.77,1206.01 1144.36,1206.01 1144.94,1206.01 1145.53,1206.01 1146.12,1206.01 1146.7,1206.01 1147.29,1206.01 1147.88,1206.01 1148.46,1206.01 1149.05,1206.01 1149.63,1206.01 1150.22,1206.01 1150.81,1206.01 1151.39,1206.01 1151.98,1206.01 1152.57,1206.01 1153.15,1206.01 1153.74,1206.01 1154.33,1206.01 1154.91,1206.01 1155.5,1206.01 1156.09,1206.01 1156.67,1206.01 1157.26,1206.01 1157.84,1206.01 1158.43,1206.01 1159.02,1206.01 1159.6,1206.01 1160.19,1206.01 1160.78,1206.01 1161.36,1206.01 1161.95,1206.01 1162.54,1206.01 1163.12,1206.01 1163.71,1206.01 1164.29,1206.01 1164.88,1206.01 1165.47,1206.01 1166.05,1206.01 1166.64,1206.01 1167.23,1206.01 1167.81,1206.01 1168.4,1206.01 1168.99,1206.01 1169.57,1206.01 1170.16,1206.01 1170.75,1206.01 1171.33,1206.01 1171.92,1206.01 1172.5,1206.01 1173.09,1206.01 1173.68,1206.01 1174.26,1206.01 1174.85,1206.01 1175.44,1206.01 1176.02,1206.01 1176.61,1206.01 1177.2,1206.01 1177.78,1206.01 1178.37,1206.01 1178.96,1206.01 1179.54,1206.01 1180.13,1206.01 1180.71,1206.01 1181.3,1206.01 1181.89,1206.01 1182.47,1206.01 1183.06,1206.01 1183.65,1206.01 1184.23,1206.01 1184.82,1206.01 1185.41,1206.01 1185.99,1206.01 1186.58,1206.01 1187.16,1206.01 1187.75,1206.01 1188.34,1206.01 1188.92,1206.01 1189.51,1206.01 1190.1,1206.01 1190.68,1206.01 1191.27,1206.01 1191.86,1206.01 1192.44,1206.01 1193.03,1206.01 1193.62,1206.01 1194.2,1206.01 1194.79,1206.01 1195.37,1206.01 1195.96,1206.01 1196.55,1206.01 1197.13,1206.01 1197.72,1206.01 1198.31,1206.01 1198.89,1206.01 1199.48,1206.01 1200.07,1206.01 1200.65,1206.01 1201.24,1206.01 1201.83,1206.01 1202.41,1206.01 1203,1206.01 1203.58,1206.01 1204.17,1206.01 1204.76,1206.01 1205.34,1206.01 1205.93,1206.01 1206.52,1206.01 1207.1,1206.01 1207.69,1206.01 1208.28,1206.01 1208.86,1206.01 1209.45,1206.01 1210.03,1206.01 1210.62,1206.01 1211.21,1206.01 1211.79,1206.01 1212.38,1206.01 1212.97,1206.01 1213.55,1206.01 1214.14,1206.01 1214.73,1206.01 1215.31,1206.01 1215.9,1206.01 1216.49,1206.01 1217.07,1206.01 1217.66,1206.01 1218.24,1206.01 1218.83,1206.01 1219.42,1206.01 1220,1206.01 1220.59,1206.01 1221.18,1206.01 1221.76,1206.01 1222.35,1206.01 1222.94,1206.01 1223.52,1206.01 1224.11,1206.01 1224.7,1206.01 1225.28,1206.01 1225.87,1206.01 1226.45,1206.01 1227.04,1206.01 1227.63,1206.01 1228.21,1206.01 1228.8,1206.01 1229.39,1206.01 1229.97,1206.01 1230.56,1206.01 1231.15,1206.01 1231.73,1206.01 1232.32,1206.01 1232.91,1206.01 1233.49,1206.01 1234.08,1206.01 1234.66,1206.01 1235.25,1206.01 1235.84,1206.01 1236.42,1206.01 1237.01,1206.01 1237.6,1206.01 1238.18,1206.01 1238.77,1206.01 1239.36,1206.01 1239.94,1206.01 1240.53,1206.01 1241.11,1206.01 1241.7,1206.01 1242.29,1206.01 1242.87,1206.01 1243.46,1206.01 1244.05,1206.01 1244.63,1206.01 1245.22,1206.01 1245.81,1206.01 1246.39,1206.01 1246.98,1206.01 1247.57,1206.01 1248.15,1206.01 1248.74,1206.01 1249.32,1206.01 1249.91,1206.01 1250.5,1206.01 1251.08,1206.01 1251.67,1206.01 1252.26,1206.01 1252.84,1206.01 1253.43,1206.01 1254.02,1206.01 1254.6,1206.01 1255.19,1206.01 1255.78,1206.01 1256.36,1206.01 1256.95,1206.01 1257.53,1206.01 1258.12,1206.01 1258.71,1206.01 1259.29,1206.01 1259.88,1206.01 1260.47,1206.01 1261.05,1206.01 1261.64,1206.01 1262.23,1206.01 1262.81,1206.01 1263.4,1206.01 1263.98,1206.01 1264.57,1206.01 1265.16,1206.01 1265.74,1206.01 1266.33,1206.01 1266.92,1206.01 1267.5,1206.01 1268.09,1206.01 1268.68,1206.01 1269.26,1206.01 1269.85,1206.01 1270.44,1206.01 1271.02,1206.01 1271.61,1206.01 1272.19,1206.01 1272.78,1206.01 1273.37,1206.01 1273.95,1206.01 1274.54,1206.01 1275.13,1206.01 1275.71,1206.01 1276.3,1206.01 1276.89,1206.01 1277.47,1206.01 1278.06,1206.01 1278.65,1206.01 1279.23,1206.01 1279.82,1206.01 1280.4,1206.01 1280.99,1206.01 1281.58,1206.01 1282.16,1206.01 1282.75,1206.01 1283.34,1206.01 1283.92,1206.01 1284.51,1206.01 1285.1,1206.01 1285.68,1206.01 1286.27,1206.01 1286.86,1206.01 1287.44,1206.01 1288.03,1206.01 1288.61,1206.01 1289.2,1206.01 1289.79,1206.01 1290.37,1206.01 1290.96,1206.01 1291.55,1206.01 1292.13,1206.01 1292.72,1206.01 1293.31,1206.01 1293.89,1206.01 1294.48,1206.01 1295.06,1206.01 1295.65,1206.01 1296.24,1206.01 1296.82,1206.01 1297.41,1206.01 1298,1206.01 1298.58,1206.01 1299.17,1206.01 1299.76,1206.01 1300.34,1206.01 1300.93,1206.01 1301.52,1206.01 1302.1,1206.01 1302.69,1206.01 1303.27,1206.01 1303.86,1206.01 1304.45,1206.01 1305.03,1206.01 1305.62,1206.01 1306.21,1206.01 1306.79,1206.01 1307.38,1206.01 1307.97,1206.01 1308.55,1206.01 1309.14,1206.01 1309.73,1206.01 1310.31,1206.01 1310.9,1206.01 1311.48,1206.01 1312.07,1206.01 1312.66,1206.01 1313.24,1206.01 1313.83,1206.01 1314.42,1206.01 1315,1206.01 1315.59,1206.01 1316.18,1206.01 1316.76,1206.01 1317.35,1206.01 1317.93,1206.01 1318.52,1206.01 1319.11,1206.01 1319.69,1206.01 1320.28,1206.01 1320.87,1206.01 1321.45,1206.01 1322.04,1206.01 1322.63,1206.01 1323.21,1206.01 1323.8,1206.01 1324.39,1206.01 1324.97,1206.01 1325.56,1206.01 1326.14,1206.01 1326.73,1206.01 1327.32,1206.01 1327.9,1206.01 1328.49,1206.01 1329.08,1206.01 1329.66,1206.01 1330.25,1206.01 1330.84,1206.01 1331.42,1206.01 1332.01,1206.01 1332.6,1206.01 1333.18,1206.01 1333.77,1206.01 1334.35,1206.01 1334.94,1206.01 1335.53,1206.01 1336.11,1206.01 1336.7,1206.01 1337.29,1206.01 1337.87,1206.01 1338.46,1206.01 1339.05,1206.01 1339.63,1206.01 1340.22,1206.01 1340.8,1206.01 1341.39,1206.01 1341.98,1206.01 1342.56,1206.01 1343.15,1206.01 1343.74,1206.01 1344.32,1206.01 1344.91,1206.01 1345.5,1206.01 1346.08,1206.01 1346.67,1206.01 1347.26,1206.01 1347.84,1206.01 1348.43,1206.01 1349.01,1206.01 1349.6,1206.01 1350.19,1206.01 1350.77,1206.01 1351.36,1206.01 1351.95,1206.01 1352.53,1206.01 1353.12,1206.01 1353.71,1206.01 1354.29,1206.01 1354.88,1206.01 1355.47,1206.01 1356.05,1206.01 1356.64,1206.01 1357.22,1206.01 1357.81,1206.01 1358.4,1206.01 1358.98,1206.01 1359.57,1206.01 1360.16,1206.01 1360.74,1206.01 1361.33,1206.01 1361.92,1206.01 1362.5,1206.01 1363.09,1206.01 1363.68,1206.01 1364.26,1206.01 1364.85,1206.01 1365.43,1206.01 1366.02,1206.01 1366.61,1206.01 1367.19,1206.01 1367.78,1206.01 1368.37,1206.01 1368.95,1206.01 1369.54,1206.01 1370.13,1206.01 1370.71,1206.01 1371.3,1206.01 1371.88,1206.01 1372.47,1206.01 1373.06,1206.01 1373.64,1206.01 1374.23,1206.01 1374.82,1206.01 1375.4,1206.01 1375.99,1206.01 1376.58,1206.01 1377.16,1206.01 1377.75,1206.01 1378.34,1206.01 1378.92,1206.01 1379.51,1206.01 1380.09,1206.01 1380.68,1206.01 1381.27,1206.01 1381.85,1206.01 1382.44,1206.01 1383.03,1206.01 1383.61,1206.01 1384.2,1206.01 1384.79,1206.01 1385.37,1206.01 1385.96,1206.01 1386.55,1206.01 1387.13,1206.01 1387.72,1206.01 1388.3,1206.01 1388.89,1206.01 1389.48,1206.01 1390.06,1206.01 1390.65,1206.01 1391.24,1206.01 1391.82,1206.01 1392.41,1206.01 1393,1206.01 1393.58,1206.01 1394.17,1206.01 1394.75,1206.01 1395.34,1206.01 1395.93,1206.01 1396.51,1206.01 1397.1,1206.01 1397.69,1206.01 1398.27,1206.01 1398.86,1206.01 1399.45,1206.01 1400.03,1206.01 1400.62,1206.01 1401.21,1206.01 1401.79,1206.01 1402.38,1206.01 1402.96,1206.01 1403.55,1206.01 1404.14,1206.01 1404.72,1206.01 1405.31,1206.01 1405.9,1206.01 1406.48,1206.01 1407.07,1206.01 1407.66,1206.01 1408.24,1206.01 1408.83,1206.01 1409.42,1206.01 1410,1206.01 1410.59,1206.01 1411.17,1206.01 1411.76,1206.01 1412.35,1206.01 1412.93,1206.01 1413.52,1206.01 1414.11,1206.01 1414.69,1206.01 1415.28,1206.01 1415.87,1206.01 1416.45,1206.01 1417.04,1206.01 1417.63,1206.01 1418.21,1206.01 1418.8,1206.01 1419.38,1206.01 1419.97,1206.01 1420.56,1206.01 1421.14,1206.01 1421.73,1206.01 1422.32,1206.01 1422.9,1206.01 1423.49,1206.01 1424.08,1206.01 1424.66,1206.01 1425.25,1206.01 1425.83,1206.01 1426.42,1206.01 1427.01,1206.01 1427.59,1206.01 1428.18,1206.01 1428.77,1206.01 1429.35,1206.01 1429.94,1206.01 1430.53,1206.01 1431.11,1206.01 1431.7,1206.01 1432.29,1206.01 1432.87,1206.01 1433.46,1206.01 1434.04,1206.01 1434.63,1206.01 1435.22,1206.01 1435.8,1206.01 1436.39,1206.01 1436.98,1206.01 1437.56,1206.01 1438.15,1206.01 1438.74,1206.01 1439.32,1206.01 1439.91,1206.01 1440.5,1206.01 1441.08,1206.01 1441.67,1206.01 1442.25,1206.01 1442.84,1206.01 1443.43,1206.01 1444.01,1206.01 1444.6,1206.01 1445.19,1206.01 1445.77,1206.01 1446.36,1206.01 1446.95,1206.01 1447.53,1206.01 1448.12,1206.01 1448.7,1206.01 1449.29,1206.01 1449.88,1206.01 1450.46,1206.01 1451.05,1206.01 1451.64,1206.01 1452.22,1206.01 1452.81,1206.01 1453.4,1206.01 1453.98,1206.01 1454.57,1206.01 1455.16,1206.01 1455.74,1206.01 1456.33,1206.01 1456.91,1206.01 1457.5,1206.01 1458.09,1206.01 1458.67,1206.01 1459.26,1206.01 1459.85,1206.01 1460.43,1206.01 1461.02,1206.01 1461.61,1206.01 1462.19,1206.01 1462.78,1206.01 1463.37,1206.01 1463.95,1206.01 1464.54,1206.01 1465.12,1206.01 1465.71,1206.01 1466.3,1206.01 1466.88,1206.01 1467.47,1206.01 1468.06,1206.01 1468.64,1206.01 1469.23,1206.01 1469.82,1206.01 1470.4,1206.01 1470.99,1206.01 1471.57,1206.01 1472.16,1206.01 1472.75,1206.01 1473.33,1206.01 1473.92,1206.01 1474.51,1206.01 1475.09,1206.01 1475.68,1206.01 1476.27,1206.01 1476.85,1206.01 1477.44,1206.01 1478.03,1206.01 1478.61,1206.01 1479.2,1206.01 1479.78,1206.01 1480.37,1206.01 1480.96,1206.01 1481.54,1206.01 1482.13,1206.01 1482.72,1206.01 1483.3,1206.01 1483.89,1206.01 1484.48,1206.01 1485.06,1206.01 1485.65,1206.01 1486.24,1206.01 1486.82,1206.01 1487.41,1206.01 1487.99,1206.01 1488.58,1206.01 1489.17,1206.01 1489.75,1206.01 1490.34,1206.01 1490.93,1206.01 1491.51,1206.01 1492.1,1206.01 1492.69,1206.01 1493.27,1206.01 1493.86,1206.01 1494.45,1206.01 1495.03,1206.01 1495.62,1206.01 1496.2,1206.01 1496.79,1206.01 1497.38,1206.01 1497.96,1206.01 1498.55,1206.01 1499.14,1206.01 1499.72,1206.01 1500.31,1206.01 1500.9,1206.01 1501.48,1206.01 1502.07,1206.01 1502.65,1206.01 1503.24,1206.01 1503.83,1206.01 1504.41,1206.01 1505,1206.01 1505.59,1206.01 1506.17,1206.01 1506.76,1206.01 1507.35,1206.01 1507.93,1206.01 1508.52,1206.01 1509.11,1206.01 1509.69,1206.01 1510.28,1206.01 1510.86,1206.01 1511.45,1206.01 1512.04,1206.01 1512.62,1206.01 1513.21,1206.01 1513.8,1206.01 1514.38,1206.01 1514.97,1206.01 1515.56,1206.01 1516.14,1206.01 1516.73,1206.01 1517.32,1206.01 1517.9,1206.01 1518.49,1206.01 1519.07,1206.01 1519.66,1206.01 1520.25,1206.01 1520.83,1206.01 1521.42,1206.01 1522.01,1206.01 1522.59,1206.01 1523.18,1206.01 1523.77,1206.01 1524.35,1206.01 1524.94,1206.01 1525.52,1206.01 1526.11,1206.01 1526.7,1206.01 1527.28,1206.01 1527.87,1206.01 1528.46,1206.01 1529.04,1206.01 1529.63,1206.01 1530.22,1206.01 1530.8,1206.01 1531.39,1206.01 1531.98,1206.01 1532.56,1206.01 1533.15,1206.01 1533.73,1206.01 1534.32,1206.01 1534.91,1206.01 1535.49,1206.01 1536.08,1206.01 1536.67,1206.01 1537.25,1206.01 1537.84,1206.01 1538.43,1206.01 1539.01,1206.01 1539.6,1206.01 1540.19,1206.01 1540.77,1206.01 1541.36,1206.01 1541.94,1206.01 1542.53,1206.01 1543.12,1206.01 1543.7,1206.01 1544.29,1206.01 1544.88,1206.01 1545.46,1206.01 1546.05,1206.01 1546.64,1206.01 1547.22,1206.01 1547.81,1206.01 1548.4,1206.01 1548.98,1206.01 1549.57,1206.01 1550.15,1206.01 1550.74,1206.01 1551.33,1206.01 1551.91,1206.01 1552.5,1206.01 1553.09,1206.01 1553.67,1206.01 1554.26,1206.01 1554.85,1206.01 1555.43,1206.01 1556.02,1206.01 1556.6,1206.01 1557.19,1206.01 1557.78,1206.01 1558.36,1206.01 1558.95,1206.01 1559.54,1206.01 1560.12,1206.01 1560.71,1206.01 1561.3,1206.01 1561.88,1206.01 1562.47,1206.01 1563.06,1206.01 1563.64,1206.01 1564.23,1206.01 1564.81,1206.01 1565.4,1206.01 1565.99,1206.01 1566.57,1206.01 1567.16,1206.01 1567.75,1206.01 1568.33,1206.01 1568.92,1206.01 1569.51,1206.01 1570.09,1206.01 1570.68,1206.01 1571.27,1206.01 1571.85,1206.01 1572.44,1206.01 1573.02,1206.01 1573.61,1206.01 1574.2,1206.01 1574.78,1206.01 1575.37,1206.01 1575.96,1206.01 1576.54,1206.01 1577.13,1206.01 1577.72,1206.01 1578.3,1206.01 1578.89,1206.01 1579.47,1206.01 1580.06,1206.01 1580.65,1206.01 1581.23,1206.01 1581.82,1206.01 1582.41,1206.01 1582.99,1206.01 1583.58,1206.01 1584.17,1206.01 1584.75,1206.01 1585.34,1206.01 1585.93,1206.01 1586.51,1206.01 1587.1,1206.01 1587.68,1206.01 1588.27,1206.01 1588.86,1206.01 1589.44,1206.01 1590.03,1206.01 1590.62,1206.01 1591.2,1206.01 1591.79,1206.01 1592.38,1206.01 1592.96,1206.01 1593.55,1206.01 1594.14,1206.01 1594.72,1206.01 1595.31,1206.01 1595.89,1206.01 1596.48,1206.01 1597.07,1206.01 1597.65,1206.01 1598.24,1206.01 1598.83,1206.01 1599.41,1206.01 1600,1206.01 1600.59,1206.01 1601.17,1206.01 1601.76,1206.01 1602.34,1206.01 1602.93,1206.01 1603.52,1206.01 1604.1,1206.01 1604.69,1206.01 1605.28,1206.01 1605.86,1206.01 1606.45,1206.01 1607.04,1206.01 1607.62,1206.01 1608.21,1206.01 1608.8,1206.01 1609.38,1206.01 1609.97,1206.01 1610.55,1206.01 1611.14,1206.01 1611.73,1206.01 1612.31,1206.01 1612.9,1206.01 1613.49,1206.01 1614.07,1206.01 1614.66,1206.01 1615.25,1206.01 1615.83,1206.01 1616.42,1206.01 1617.01,1206.01 1617.59,1206.01 1618.18,1206.01 1618.76,1206.01 1619.35,1206.01 1619.94,1206.01 1620.52,1206.01 1621.11,1206.01 1621.7,1206.01 1622.28,1206.01 1622.87,1206.01 1623.46,1206.01 1624.04,1206.01 1624.63,1206.01 1625.22,1206.01 1625.8,1206.01 1626.39,1206.01 1626.97,1206.01 1627.56,1206.01 1628.15,1206.01 1628.73,1206.01 1629.32,1206.01 1629.91,1206.01 1630.49,1206.01 1631.08,1206.01 1631.67,1206.01 1632.25,1206.01 1632.84,1206.01 1633.42,1206.01 1634.01,1206.01 1634.6,1206.01 1635.18,1206.01 1635.77,1206.01 1636.36,1206.01 1636.94,1206.01 1637.53,1206.01 1638.12,1206.01 1638.7,1206.01 1639.29,1206.01 1639.88,1206.01 1640.46,1206.01 1641.05,1206.01 1641.63,1206.01 1642.22,1206.01 1642.81,1206.01 1643.39,1206.01 1643.98,1206.01 1644.57,1206.01 1645.15,1206.01 1645.74,1206.01 1646.33,1206.01 1646.91,1206.01 1647.5,1206.01 1648.09,1206.01 1648.67,1206.01 1649.26,1206.01 1649.84,1206.01 1650.43,1206.01 1651.02,1206.01 1651.6,1206.01 1652.19,1206.01 1652.78,1206.01 1653.36,1206.01 1653.95,1206.01 1654.54,1206.01 1655.12,1206.01 1655.71,1206.01 1656.29,1206.01 1656.88,1206.01 1657.47,1206.01 1658.05,1206.01 1658.64,1206.01 1659.23,1206.01 1659.81,1206.01 1660.4,1206.01 1660.99,1206.01 1661.57,1206.01 1662.16,1206.01 1662.75,1206.01 1663.33,1206.01 1663.92,1206.01 1664.5,1206.01 1665.09,1206.01 1665.68,1206.01 1666.26,1206.01 1666.85,1206.01 1667.44,1206.01 1668.02,1206.01 1668.61,1206.01 1669.2,1206.01 1669.78,1206.01 1670.37,1206.01 1670.96,1206.01 1671.54,1206.01 1672.13,1206.01 1672.71,1206.01 1673.3,1206.01 1673.89,1206.01 1674.47,1206.01 1675.06,1206.01 1675.65,1206.01 1676.23,1206.01 1676.82,1206.01 1677.41,1206.01 1677.99,1206.01 1678.58,1206.01 1679.17,1206.01 1679.75,1206.01 1680.34,1206.01 1680.92,1206.01 1681.51,1206.01 1682.1,1206.01 1682.68,1206.01 1683.27,1206.01 1683.86,1206.01 1684.44,1206.01 1685.03,1206.01 1685.62,1206.01 1686.2,1206.01 1686.79,1206.01 1687.37,1206.01 1687.96,1206.01 1688.55,1206.01 1689.13,1206.01 1689.72,1206.01 1690.31,1206.01 1690.89,1206.01 1691.48,1206.01 1692.07,1206.01 1692.65,1206.01 1693.24,1206.01 1693.83,1206.01 1694.41,1206.01 1695,1206.01 1695.58,1206.01 1696.17,1206.01 1696.76,1206.01 1697.34,1206.01 1697.93,1206.01 1698.52,1206.01 1699.1,1206.01 1699.69,1206.01 1700.28,1206.01 1700.86,1206.01 1701.45,1206.01 1702.04,1206.01 1702.62,1206.01 1703.21,1206.01 1703.79,1206.01 1704.38,1206.01 1704.97,1206.01 1705.55,1206.01 1706.14,1206.01 1706.73,1206.01 1707.31,1206.01 1707.9,1206.01 1708.49,1206.01 1709.07,1206.01 1709.66,1206.01 1710.24,1206.01 1710.83,1206.01 1711.42,1206.01 1712,1206.01 1712.59,1206.01 1713.18,1206.01 1713.76,1206.01 1714.35,1206.01 1714.94,1206.01 1715.52,1206.01 1716.11,1206.01 1716.7,1206.01 1717.28,1206.01 1717.87,1206.01 1718.45,1206.01 1719.04,1206.01 1719.63,1206.01 1720.21,1206.01 1720.8,1206.01 1721.39,1206.01 1721.97,1206.01 1722.56,1206.01 1723.15,1206.01 1723.73,1206.01 1724.32,1206.01 1724.91,1206.01 1725.49,1206.01 1726.08,1206.01 1726.66,1206.01 1727.25,1206.01 1727.84,1206.01 1728.42,1206.01 1729.01,1206.01 1729.6,1206.01 1730.18,1206.01 1730.77,1206.01 1731.36,1206.01 1731.94,1206.01 1732.53,1206.01 1733.11,1206.01 1733.7,1206.01 1734.29,1206.01 1734.87,1206.01 1735.46,1206.01 1736.05,1206.01 1736.63,1206.01 1737.22,1206.01 1737.81,1206.01 1738.39,1206.01 1738.98,1206.01 1739.57,1206.01 1740.15,1206.01 1740.74,1206.01 1741.32,1206.01 1741.91,1206.01 1742.5,1206.01 1743.08,1206.01 1743.67,1206.01 1744.26,1206.01 1744.84,1206.01 1745.43,1206.01 1746.02,1206.01 1746.6,1206.01 1747.19,1206.01 1747.78,1206.01 1748.36,1206.01 1748.95,1206.01 1749.53,1206.01 1750.12,1206.01 1750.71,1206.01 1751.29,1206.01 1751.88,1206.01 1752.47,1206.01 1753.05,1206.01 1753.64,1206.01 1754.23,1206.01 1754.81,1206.01 1755.4,1206.01 1755.99,1206.01 1756.57,1206.01 1757.16,1206.01 1757.74,1206.01 1758.33,1206.01 1758.92,1206.01 1759.5,1206.01 1760.09,1206.01 1760.68,1206.01 1761.26,1206.01 1761.85,1206.01 1762.44,1206.01 1763.02,1206.01 1763.61,1206.01 1764.19,1206.01 1764.78,1206.01 1765.37,1206.01 1765.95,1206.01 1766.54,1206.01 1767.13,1206.01 1767.71,1206.01 1768.3,1206.01 1768.89,1206.01 1769.47,1206.01 1770.06,1206.01 1770.65,1206.01 1771.23,1206.01 1771.82,1206.01 1772.4,1206.01 1772.99,1206.01 1773.58,1206.01 1774.16,1206.01 1774.75,1206.01 1775.34,1206.01 1775.92,1206.01 1776.51,1206.01 1777.1,1206.01 1777.68,1206.01 1778.27,1206.01 1778.86,1206.01 1779.44,1206.01 1780.03,1206.01 1780.61,1206.01 1781.2,1206.01 1781.79,1206.01 1782.37,1206.01 1782.96,1206.01 1783.55,1206.01 1784.13,1206.01 1784.72,1206.01 1785.31,1206.01 1785.89,1206.01 1786.48,1206.01 1787.06,1206.01 1787.65,1206.01 1788.24,1206.01 1788.82,1206.01 1789.41,1206.01 1790,1206.01 1790.58,1206.01 1791.17,1206.01 1791.76,1206.01 1792.34,1206.01 1792.93,1206.01 1793.52,1206.01 1794.1,1206.01 1794.69,1206.01 1795.27,1206.01 1795.86,1206.01 1796.45,1206.01 1797.03,1206.01 1797.62,1206.01 1798.21,1206.01 1798.79,1206.01 1799.38,1206.01 1799.97,1206.01 1800.55,1206.01 1801.14,1206.01 1801.73,1206.01 1802.31,1206.01 1802.9,1206.01 1803.48,1206.01 1804.07,1206.01 1804.66,1206.01 1805.24,1206.01 1805.83,1206.01 1806.42,1206.01 1807,1206.01 1807.59,1206.01 1808.18,1206.01 1808.76,1206.01 1809.35,1206.01 1809.94,1206.01 1810.52,1206.01 1811.11,1206.01 1811.69,1206.01 1812.28,1206.01 1812.87,1206.01 1813.45,1206.01 1814.04,1206.01 1814.63,1206.01 1815.21,1206.01 1815.8,1206.01 1816.39,1206.01 1816.97,1206.01 1817.56,1206.01 1818.14,1206.01 1818.73,1206.01 1819.32,1206.01 1819.9,1206.01 1820.49,1206.01 1821.08,1206.01 1821.66,1206.01 1822.25,1206.01 1822.84,1206.01 1823.42,1206.01 1824.01,1206.01 1824.6,1206.01 1825.18,1206.01 1825.77,1206.01 1826.35,1206.01 1826.94,1206.01 1827.53,1206.01 1828.11,1206.01 1828.7,1206.01 1829.29,1206.01 1829.87,1206.01 1830.46,1206.01 1831.05,1206.01 1831.63,1206.01 1832.22,1206.01 1832.81,1206.01 1833.39,1206.01 1833.98,1206.01 1834.56,1206.01 1835.15,1206.01 1835.74,1206.01 1836.32,1206.01 1836.91,1206.01 1837.5,1206.01 1838.08,1206.01 1838.67,1206.01 1839.26,1206.01 1839.84,1206.01 1840.43,1206.01 1841.01,1206.01 1841.6,1206.01 1842.19,1206.01 1842.77,1206.01 1843.36,1206.01 1843.95,1206.01 1844.53,1206.01 1845.12,1206.01 1845.71,1206.01 1846.29,1206.01 1846.88,1206.01 1847.47,1206.01 1848.05,1206.01 1848.64,1206.01 1849.22,1206.01 1849.81,1206.01 1850.4,1206.01 1850.98,1206.01 1851.57,1206.01 1852.16,1206.01 1852.74,1206.01 1853.33,1206.01 1853.92,1206.01 1854.5,1206.01 1855.09,1206.01 1855.68,1206.01 1856.26,1206.01 1856.85,1206.01 1857.43,1206.01 1858.02,1206.01 1858.61,1206.01 1859.19,1206.01 1859.78,1206.01 1860.37,1206.01 1860.95,1206.01 1861.54,1206.01 1862.13,1206.01 1862.71,1206.01 1863.3,1206.01 1863.88,1206.01 1864.47,1206.01 1865.06,1206.01 1865.64,1206.01 1866.23,1206.01 1866.82,1206.01 1867.4,1206.01 1867.99,1206.01 1868.58,1206.01 1869.16,1206.01 1869.75,1206.01 1870.34,1206.01 1870.92,1206.01 1871.51,1206.01 1872.09,1206.01 1872.68,1206.01 1873.27,1206.01 1873.85,1206.01 1874.44,1206.01 1875.03,1206.01 1875.61,1206.01 1876.2,1206.01 1876.79,1206.01 1877.37,1206.01 1877.96,1206.01 1878.55,1206.01 1879.13,1206.01 1879.72,1206.01 1880.3,1206.01 1880.89,1206.01 1881.48,1206.01 1882.06,1206.01 1882.65,1206.01 1883.24,1206.01 1883.82,1206.01 1884.41,1206.01 1885,1206.01 1885.58,1206.01 1886.17,1206.01 1886.76,1206.01 1887.34,1206.01 1887.93,1206.01 1888.51,1206.01 1889.1,1206.01 1889.69,1206.01 1890.27,1206.01 1890.86,1206.01 1891.45,1206.01 1892.03,1206.01 1892.62,1206.01 1893.21,1206.01 1893.79,1206.01 1894.38,1206.01 1894.96,1206.01 1895.55,1206.01 1896.14,1206.01 1896.72,1206.01 1897.31,1206.01 1897.9,1206.01 1898.48,1206.01 1899.07,1206.01 1899.66,1206.01 1900.24,1206.01 1900.83,1206.01 1901.42,1206.01 1902,1206.01 1902.59,1206.01 1903.17,1206.01 1903.76,1206.01 1904.35,1206.01 1904.93,1206.01 1905.52,1206.01 1906.11,1206.01 1906.69,1206.01 1907.28,1206.01 1907.87,1206.01 1908.45,1206.01 1909.04,1206.01 1909.63,1206.01 1910.21,1206.01 1910.8,1206.01 1911.38,1206.01 1911.97,1206.01 1912.56,1206.01 1913.14,1206.01 1913.73,1206.01 1914.32,1206.01 1914.9,1206.01 1915.49,1206.01 1916.08,1206.01 1916.66,1206.01 1917.25,1206.01 1917.83,1206.01 1918.42,1206.01 1919.01,1206.01 1919.59,1206.01 1920.18,1206.01 1920.77,1206.01 1921.35,1206.01 1921.94,1206.01 1922.53,1206.01 1923.11,1206.01 1923.7,1206.01 1924.29,1206.01 1924.87,1206.01 1925.46,1206.01 1926.04,1206.01 1926.63,1206.01 1927.22,1206.01 1927.8,1206.01 1928.39,1206.01 1928.98,1206.01 1929.56,1206.01 1930.15,1206.01 1930.74,1206.01 1931.32,1206.01 1931.91,1206.01 1932.5,1206.01 1933.08,1206.01 1933.67,1206.01 1934.25,1206.01 1934.84,1206.01 1935.43,1206.01 1936.01,1206.01 1936.6,1206.01 1937.19,1206.01 1937.77,1206.01 1938.36,1206.01 1938.95,1206.01 1939.53,1206.01 1940.12,1206.01 1940.71,1206.01 1941.29,1206.01 1941.88,1206.01 1942.46,1206.01 1943.05,1206.01 1943.64,1206.01 1944.22,1206.01 1944.81,1206.01 1945.4,1206.01 1945.98,1206.01 1946.57,1206.01 1947.16,1206.01 1947.74,1206.01 1948.33,1206.01 1948.91,1206.01 1949.5,1206.01 1950.09,1206.01 1950.67,1206.01 1951.26,1206.01 1951.85,1206.01 1952.43,1206.01 1953.02,1206.01 1953.61,1206.01 1954.19,1206.01 1954.78,1206.01 1955.37,1206.01 1955.95,1206.01 1956.54,1206.01 1957.12,1206.01 1957.71,1206.01 1958.3,1206.01 1958.88,1206.01 1959.47,1206.01 1960.06,1206.01 1960.64,1206.01 1961.23,1206.01 1961.82,1206.01 1962.4,1206.01 1962.99,1206.01 1963.58,1206.01 1964.16,1206.01 1964.75,1206.01 1965.33,1206.01 1965.92,1206.01 1966.51,1206.01 1967.09,1206.01 1967.68,1206.01 1968.27,1206.01 1968.85,1206.01 1969.44,1206.01 1970.03,1206.01 1970.61,1206.01 1971.2,1206.01 1971.78,1206.01 1972.37,1206.01 1972.96,1206.01 1973.54,1206.01 1974.13,1206.01 1974.72,1206.01 1975.3,1206.01 1975.89,1206.01 1976.48,1206.01 1977.06,1206.01 1977.65,1206.01 1978.24,1206.01 1978.82,1206.01 1979.41,1206.01 1979.99,1206.01 1980.58,1206.01 1981.17,1206.01 1981.75,1206.01 1982.34,1206.01 1982.93,1206.01 1983.51,1206.01 1984.1,1206.01 1984.69,1206.01 1985.27,1206.01 1985.86,1206.01 1986.45,1206.01 1987.03,1206.01 1987.62,1206.01 1988.2,1206.01 1988.79,1206.01 1989.38,1206.01 1989.96,1206.01 1990.55,1206.01 1991.14,1206.01 1991.72,1206.01 1992.31,1206.01 1992.9,1206.01 1993.48,1206.01 1994.07,1206.01 1994.65,1206.01 1995.24,1206.01 1995.83,1206.01 1996.41,1206.01 1997,1206.01 1997.59,1206.01 1998.17,1206.01 1998.76,1206.01 1999.35,1206.01 1999.93,1206.01 2000.52,1206.01 2001.11,1206.01 2001.69,1206.01 2002.28,1206.01 2002.86,1206.01 2003.45,1206.01 2004.04,1206.01 2004.62,1206.01 2005.21,1206.01 2005.8,1206.01 2006.38,1206.01 2006.97,1206.01 2007.56,1206.01 2008.14,1206.01 2008.73,1206.01 2009.32,1206.01 2009.9,1206.01 2010.49,1206.01 2011.07,1206.01 2011.66,1206.01 2012.25,1206.01 2012.83,1206.01 2013.42,1206.01 2014.01,1206.01 2014.59,1206.01 2015.18,1206.01 2015.77,1206.01 2016.35,1206.01 2016.94,1206.01 2017.53,1206.01 2018.11,1206.01 2018.7,1206.01 2019.28,1206.01 2019.87,1206.01 2020.46,1206.01 2021.04,1206.01 2021.63,1206.01 2022.22,1206.01 2022.8,1206.01 2023.39,1206.01 2023.98,1206.01 2024.56,1206.01 2025.15,1206.01 2025.73,1206.01 2026.32,1206.01 2026.91,1206.01 2027.49,1206.01 2028.08,1206.01 2028.67,1206.01 2029.25,1206.01 2029.84,1206.01 2030.43,1206.01 2031.01,1206.01 2031.6,1206.01 2032.19,1206.01 2032.77,1206.01 2033.36,1206.01 2033.94,1206.01 2034.53,1206.01 2035.12,1206.01 2035.7,1206.01 2036.29,1206.01 2036.88,1206.01 2037.46,1206.01 2038.05,1206.01 2038.64,1206.01 2039.22,1206.01 2039.81,1206.01 2040.4,1206.01 2040.98,1206.01 2041.57,1206.01 2042.15,1206.01 2042.74,1206.01 2043.33,1206.01 2043.91,1206.01 2044.5,1206.01 2045.09,1206.01 2045.67,1206.01 2046.26,1206.01 2046.85,1206.01 2047.43,1206.01 2048.02,1206.01 2048.6,1206.01 2049.19,1206.01 2049.78,1206.01 2050.36,1206.01 2050.95,1206.01 2051.54,1206.01 2052.12,1206.01 2052.71,1206.01 2053.3,1206.01 2053.88,1206.01 2054.47,1206.01 2055.06,1206.01 2055.64,1206.01 2056.23,1206.01 2056.81,1206.01 2057.4,1206.01 2057.99,1206.01 2058.57,1206.01 2059.16,1206.01 2059.75,1206.01 2060.33,1206.01 2060.92,1206.01 2061.51,1206.01 2062.09,1206.01 2062.68,1206.01 2063.27,1206.01 2063.85,1206.01 2064.44,1206.01 2065.02,1206.01 2065.61,1206.01 2066.2,1206.01 2066.78,1206.01 2067.37,1206.01 2067.96,1206.01 2068.54,1206.01 2069.13,1206.01 2069.72,1206.01 2070.3,1206.01 2070.89,1206.01 2071.48,1206.01 2072.06,1206.01 2072.65,1206.01 2073.23,1206.01 2073.82,1206.01 2074.41,1206.01 2074.99,1206.01 2075.58,1206.01 2076.17,1206.01 2076.75,1206.01 2077.34,1206.01 2077.93,1206.01 2078.51,1206.01 2079.1,1206.01 2079.68,1206.01 2080.27,1206.01 2080.86,1206.01 2081.44,1206.01 2082.03,1206.01 2082.62,1206.01 2083.2,1206.01 2083.79,1206.01 2084.38,1206.01 2084.96,1206.01 2085.55,1206.01 2086.14,1206.01 2086.72,1206.01 2087.31,1206.01 2087.89,1206.01 2088.48,1206.01 2089.07,1206.01 2089.65,1206.01 2090.24,1206.01 2090.83,1206.01 2091.41,1206.01 2092,1206.01 2092.59,1206.01 2093.17,1206.01 2093.76,1206.01 2094.35,1206.01 2094.93,1206.01 2095.52,1206.01 2096.1,1206.01 2096.69,1206.01 2097.28,1206.01 2097.86,1206.01 2098.45,1206.01 2099.04,1206.01 2099.62,1206.01 2100.21,1206.01 2100.8,1206.01 2101.38,1206.01 2101.97,1206.01 2102.55,1206.01 2103.14,1206.01 2103.73,1206.01 2104.31,1206.01 2104.9,1206.01 2105.49,1206.01 2106.07,1206.01 2106.66,1206.01 2107.25,1206.01 2107.83,1206.01 2108.42,1206.01 2109.01,1206.01 2109.59,1206.01 2110.18,1206.01 2110.76,1206.01 2111.35,1206.01 2111.94,1206.01 2112.52,1206.01 2113.11,1206.01 2113.7,1206.01 2114.28,1206.01 2114.87,1206.01 2115.46,1206.01 2116.04,1206.01 2116.63,1206.01 2117.22,1206.01 2117.8,1206.01 2118.39,1206.01 2118.97,1206.01 2119.56,1206.01 2120.15,1206.01 2120.73,1206.01 2121.32,1206.01 2121.91,1206.01 2122.49,1206.01 2123.08,1206.01 2123.67,1206.01 2124.25,1206.01 2124.84,1206.01 2125.42,1206.01 2126.01,1206.01 2126.6,1206.01 2127.18,1206.01 2127.77,1206.01 2128.36,1206.01 2128.94,1206.01 2129.53,1206.01 2130.12,1206.01 2130.7,1206.01 2131.29,1206.01 2131.88,1206.01 2132.46,1206.01 2133.05,1206.01 2133.63,1206.01 2134.22,1206.01 2134.81,1206.01 2135.39,1206.01 2135.98,1206.01 2136.57,1206.01 2137.15,1206.01 2137.74,1206.01 2138.33,1206.01 2138.91,1206.01 2139.5,1206.01 2140.09,1206.01 2140.67,1206.01 2141.26,1206.01 2141.84,1206.01 2142.43,1206.01 2143.02,1206.01 2143.6,1206.01 2144.19,1206.01 2144.78,1206.01 2145.36,1206.01 2145.95,1206.01 2146.54,1206.01 2147.12,1206.01 2147.71,1206.01 2148.3,1206.01 2148.88,1206.01 2149.47,1206.01 2150.05,1206.01 2150.64,1206.01 2151.23,1206.01 2151.81,1206.01 2152.4,1206.01 2152.99,1206.01 2153.57,1206.01 2154.16,1206.01 2154.75,1206.01 2155.33,1206.01 2155.92,1206.01 2156.5,1206.01 2157.09,1206.01 2157.68,1206.01 2158.26,1206.01 \"/>\n<path clip-path=\"url(#clip522)\" d=\"M986.025 1205.72 L986.612 1205.72 L987.198 1205.72 L987.785 1205.72 L988.371 1205.72 L988.957 1205.72 L989.544 1205.72 L990.13 1205.72 L990.717 1205.72 L991.303 1205.72 L991.889 1205.72 L992.476 1205.72 L993.062 1205.72 L993.649 1205.72 L994.235 1205.72 L994.822 1205.72 L995.408 1205.72 L995.994 1205.72 L996.581 1205.72 L997.167 1205.72 L997.754 1205.72 L998.34 1205.72 L998.926 1205.72 L999.513 1205.72 L1000.1 1205.72 L1000.69 1205.72 L1001.27 1205.72 L1001.86 1205.72 L1002.44 1205.72 L1003.03 1205.72 L1003.62 1205.72 L1004.2 1205.72 L1004.79 1205.72 L1005.38 1205.72 L1005.96 1205.72 L1006.55 1205.72 L1007.14 1205.72 L1007.72 1205.72 L1008.31 1205.72 L1008.9 1205.72 L1009.48 1205.72 L1010.07 1205.72 L1010.65 1205.72 L1011.24 1205.72 L1011.83 1205.72 L1012.41 1205.72 L1013 1205.72 L1013.59 1205.72 L1014.17 1205.72 L1014.76 1205.72 L1015.35 1205.72 L1015.93 1205.72 L1016.52 1205.72 L1017.11 1205.72 L1017.69 1205.72 L1018.28 1205.72 L1018.86 1205.72 L1019.45 1205.72 L1020.04 1205.72 L1020.62 1205.72 L1021.21 1205.72 L1021.8 1205.72 L1022.38 1205.72 L1022.97 1205.72 L1023.56 1205.72 L1024.14 1205.72 L1024.73 1205.72 L1025.32 1205.72 L1025.9 1205.72 L1026.49 1205.72 L1027.07 1205.72 L1027.66 1205.72 L1028.25 1205.72 L1028.83 1205.72 L1029.42 1205.72 L1030.01 1205.72 L1030.59 1205.72 L1031.18 1205.72 L1031.77 1205.72 L1032.35 1205.72 L1032.94 1205.72 L1033.52 1205.72 L1034.11 1205.72 L1034.7 1205.72 L1035.28 1205.72 L1035.87 1205.72 L1036.46 1205.72 L1037.04 1205.72 L1037.63 1205.72 L1038.22 1205.72 L1038.8 1205.72 L1039.39 1205.72 L1039.98 1205.72 L1040.56 1205.72 L1041.15 1205.72 L1041.73 1205.72 L1042.32 1205.72 L1042.91 1205.72 L1043.49 1205.72 L1044.08 1205.72 L1044.67 1205.72 L1045.25 1205.72 L1045.84 1205.72 L1046.43 1205.72 L1047.01 1205.72 L1047.6 1205.72 L1048.19 1205.72 L1048.77 1205.72 L1049.36 1205.72 L1049.94 1205.72 L1050.53 1205.72 L1051.12 1205.72 L1051.7 1205.72 L1052.29 1205.72 L1052.88 1205.72 L1053.46 1205.72 L1054.05 1205.72 L1054.64 1205.72 L1055.22 1205.72 L1055.81 1205.72 L1056.39 1205.72 L1056.98 1205.72 L1057.57 1205.72 L1058.15 1205.72 L1058.74 1205.72 L1059.33 1205.72 L1059.91 1205.72 L1060.5 1205.72 L1061.09 1205.72 L1061.67 1205.72 L1062.26 1205.72 L1062.85 1205.72 L1063.43 1205.72 L1064.02 1205.72 L1064.6 1205.72 L1065.19 1205.72 L1065.78 1205.72 L1066.36 1205.72 L1066.95 1205.72 L1067.54 1205.72 L1068.12 1205.72 L1068.71 1205.72 L1069.3 1205.72 L1069.88 1205.72 L1070.47 1205.72 L1071.06 1205.72 L1071.64 1205.72 L1072.23 1205.72 L1072.81 1205.72 L1073.4 1205.72 L1073.99 1205.72 L1074.57 1205.72 L1075.16 1205.72 L1075.75 1205.72 L1076.33 1205.72 L1076.92 1205.72 L1077.51 1205.72 L1078.09 1205.72 L1078.68 1205.72 L1079.26 1205.72 L1079.85 1205.72 L1080.44 1205.72 L1081.02 1205.72 L1081.61 1205.72 L1082.2 1205.72 L1082.78 1205.72 L1083.37 1205.72 L1083.96 1205.72 L1084.54 1205.72 L1085.13 1205.72 L1085.72 1205.72 L1086.3 1205.72 L1086.89 1205.72 L1087.47 1205.72 L1088.06 1205.72 L1088.65 1205.72 L1089.23 1205.72 L1089.82 1205.72 L1090.41 1205.72 L1090.99 1205.72 L1091.58 1205.72 L1092.17 1205.72 L1092.75 1205.72 L1093.34 1205.72 L1093.93 1205.72 L1094.51 1205.72 L1095.1 1205.72 L1095.68 1205.72 L1096.27 1205.72 L1096.86 1205.72 L1097.44 1205.72 L1098.03 1205.72 L1098.62 1205.72 L1099.2 1205.72 L1099.79 1205.72 L1100.38 1205.72 L1100.96 1205.72 L1101.55 1205.72 L1102.14 1205.72 L1102.72 1205.72 L1103.31 1205.72 L1103.89 1205.72 L1104.48 1205.72 L1105.07 1205.72 L1105.65 1205.72 L1106.24 1205.72 L1106.83 1205.72 L1107.41 1205.72 L1108 1205.72 L1108.59 1205.72 L1109.17 1205.72 L1109.76 1205.72 L1110.34 1205.72 L1110.93 1205.72 L1111.52 1205.72 L1112.1 1205.72 L1112.69 1205.72 L1113.28 1205.72 L1113.86 1205.72 L1114.45 1205.72 L1115.04 1205.72 L1115.62 1205.72 L1116.21 1205.72 L1116.8 1205.72 L1117.38 1205.72 L1117.97 1205.72 L1118.55 1205.72 L1119.14 1205.72 L1119.73 1205.72 L1120.31 1205.72 L1120.9 1205.72 L1121.49 1205.72 L1122.07 1205.72 L1122.66 1205.72 L1123.25 1205.72 L1123.83 1205.72 L1124.42 1205.72 L1125.01 1205.72 L1125.59 1205.72 L1126.18 1205.72 L1126.76 1205.72 L1127.35 1205.72 L1127.94 1205.72 L1128.52 1205.72 L1129.11 1205.72 L1129.7 1205.72 L1130.28 1205.72 L1130.87 1205.72 L1131.46 1205.72 L1132.04 1205.72 L1132.63 1205.72 L1133.21 1205.72 L1133.8 1205.72 L1134.39 1205.72 L1134.97 1205.72 L1135.56 1205.72 L1136.15 1205.72 L1136.73 1205.72 L1137.32 1205.72 L1137.91 1205.72 L1138.49 1205.72 L1139.08 1205.72 L1139.67 1205.72 L1140.25 1205.72 L1140.84 1205.72 L1141.42 1205.72 L1142.01 1205.72 L1142.6 1205.72 L1143.18 1205.72 L1143.77 1205.72 L1144.36 1205.72 L1144.94 1205.72 L1145.53 1205.72 L1146.12 1205.72 L1146.7 1205.72 L1147.29 1205.72 L1147.88 1205.72 L1148.46 1205.72 L1149.05 1205.72 L1149.63 1205.72 L1150.22 1205.72 L1150.81 1205.72 L1151.39 1205.72 L1151.98 1205.72 L1152.57 1205.72 L1153.15 1205.72 L1153.74 1205.72 L1154.33 1205.72 L1154.91 1205.72 L1155.5 1205.72 L1156.09 1205.72 L1156.67 1205.72 L1157.26 1205.72 L1157.84 1205.72 L1158.43 1205.72 L1159.02 1205.72 L1159.6 1205.72 L1160.19 1205.72 L1160.78 1205.72 L1161.36 1205.72 L1161.95 1205.72 L1162.54 1205.72 L1163.12 1205.72 L1163.71 1205.72 L1164.29 1205.72 L1164.88 1205.72 L1165.47 1205.72 L1166.05 1205.72 L1166.64 1205.72 L1167.23 1205.72 L1167.81 1205.72 L1168.4 1205.72 L1168.99 1205.72 L1169.57 1205.72 L1170.16 1205.72 L1170.75 1205.72 L1171.33 1205.72 L1171.92 1205.72 L1172.5 1205.72 L1173.09 1205.72 L1173.68 1205.72 L1174.26 1205.72 L1174.85 1205.72 L1175.44 1205.72 L1176.02 1205.72 L1176.61 1205.72 L1177.2 1205.72 L1177.78 1205.72 L1178.37 1205.72 L1178.96 1205.72 L1179.54 1205.72 L1180.13 1205.72 L1180.71 1205.72 L1181.3 1205.72 L1181.89 1205.72 L1182.47 1205.72 L1183.06 1205.72 L1183.65 1205.72 L1184.23 1205.72 L1184.82 1205.72 L1185.41 1205.72 L1185.99 1205.72 L1186.58 1205.72 L1187.16 1205.72 L1187.75 1205.72 L1188.34 1205.72 L1188.92 1205.72 L1189.51 1205.72 L1190.1 1205.72 L1190.68 1205.72 L1191.27 1205.72 L1191.86 1205.72 L1192.44 1205.72 L1193.03 1205.72 L1193.62 1205.72 L1194.2 1205.72 L1194.79 1205.72 L1195.37 1205.72 L1195.96 1205.72 L1196.55 1205.72 L1197.13 1205.72 L1197.72 1205.72 L1198.31 1205.72 L1198.89 1205.72 L1199.48 1205.72 L1200.07 1205.72 L1200.65 1205.72 L1201.24 1205.72 L1201.83 1205.72 L1202.41 1205.72 L1203 1205.72 L1203.58 1205.72 L1204.17 1205.72 L1204.76 1205.72 L1205.34 1205.72 L1205.93 1205.72 L1206.52 1205.72 L1207.1 1205.72 L1207.69 1205.72 L1208.28 1205.72 L1208.86 1205.72 L1209.45 1205.72 L1210.03 1205.72 L1210.62 1205.72 L1211.21 1205.72 L1211.79 1205.72 L1212.38 1205.72 L1212.97 1205.72 L1213.55 1205.72 L1214.14 1205.72 L1214.73 1205.72 L1215.31 1205.72 L1215.9 1205.72 L1216.49 1205.72 L1217.07 1205.72 L1217.66 1205.72 L1218.24 1205.72 L1218.83 1205.72 L1219.42 1205.72 L1220 1205.72 L1220.59 1205.72 L1221.18 1205.72 L1221.76 1205.72 L1222.35 1205.72 L1222.94 1205.72 L1223.52 1205.72 L1224.11 1205.72 L1224.7 1205.72 L1225.28 1205.72 L1225.87 1205.72 L1226.45 1205.72 L1227.04 1205.72 L1227.63 1205.72 L1228.21 1205.72 L1228.8 1205.72 L1229.39 1205.72 L1229.97 1205.72 L1230.56 1205.72 L1231.15 1205.72 L1231.73 1205.72 L1232.32 1205.72 L1232.91 1205.72 L1233.49 1205.72 L1234.08 1205.72 L1234.66 1205.72 L1235.25 1205.72 L1235.84 1205.72 L1236.42 1205.72 L1237.01 1205.72 L1237.6 1205.72 L1238.18 1205.72 L1238.77 1205.72 L1239.36 1205.72 L1239.94 1205.72 L1240.53 1205.72 L1241.11 1205.72 L1241.7 1205.72 L1242.29 1205.72 L1242.87 1205.72 L1243.46 1205.72 L1244.05 1205.72 L1244.63 1205.72 L1245.22 1205.72 L1245.81 1205.72 L1246.39 1205.72 L1246.98 1205.72 L1247.57 1205.72 L1248.15 1205.72 L1248.74 1205.72 L1249.32 1205.72 L1249.91 1205.72 L1250.5 1205.72 L1251.08 1205.72 L1251.67 1205.72 L1252.26 1205.72 L1252.84 1205.72 L1253.43 1205.72 L1254.02 1205.72 L1254.6 1205.72 L1255.19 1205.72 L1255.78 1205.72 L1256.36 1205.72 L1256.95 1205.72 L1257.53 1205.72 L1258.12 1205.72 L1258.71 1205.72 L1259.29 1205.72 L1259.88 1205.72 L1260.47 1205.72 L1261.05 1205.72 L1261.64 1205.72 L1262.23 1205.72 L1262.81 1205.72 L1263.4 1205.72 L1263.98 1205.72 L1264.57 1205.72 L1265.16 1205.72 L1265.74 1205.72 L1266.33 1205.72 L1266.92 1205.72 L1267.5 1205.72 L1268.09 1205.72 L1268.68 1205.72 L1269.26 1205.72 L1269.85 1205.72 L1270.44 1205.72 L1271.02 1205.72 L1271.61 1205.72 L1272.19 1205.72 L1272.78 1205.72 L1273.37 1205.72 L1273.95 1205.72 L1274.54 1205.72 L1275.13 1205.72 L1275.71 1205.72 L1276.3 1205.72 L1276.89 1205.72 L1277.47 1205.72 L1278.06 1205.72 L1278.65 1205.72 L1279.23 1205.72 L1279.82 1205.72 L1280.4 1205.72 L1280.99 1205.72 L1281.58 1205.72 L1282.16 1205.72 L1282.75 1205.72 L1283.34 1205.72 L1283.92 1205.72 L1284.51 1205.72 L1285.1 1205.72 L1285.68 1205.72 L1286.27 1205.72 L1286.86 1205.72 L1287.44 1205.72 L1288.03 1205.72 L1288.61 1205.72 L1289.2 1205.72 L1289.79 1205.72 L1290.37 1205.72 L1290.96 1205.72 L1291.55 1205.72 L1292.13 1205.72 L1292.72 1205.72 L1293.31 1205.72 L1293.89 1205.72 L1294.48 1205.72 L1295.06 1205.72 L1295.65 1205.72 L1296.24 1205.72 L1296.82 1205.72 L1297.41 1205.72 L1298 1205.72 L1298.58 1205.72 L1299.17 1205.72 L1299.76 1205.72 L1300.34 1205.72 L1300.93 1205.72 L1301.52 1205.72 L1302.1 1205.72 L1302.69 1205.72 L1303.27 1205.72 L1303.86 1205.72 L1304.45 1205.72 L1305.03 1205.72 L1305.62 1205.72 L1306.21 1205.72 L1306.79 1205.72 L1307.38 1205.72 L1307.97 1205.72 L1308.55 1205.72 L1309.14 1205.72 L1309.73 1205.72 L1310.31 1205.72 L1310.9 1205.72 L1311.48 1205.72 L1312.07 1205.72 L1312.66 1205.72 L1313.24 1205.72 L1313.83 1205.72 L1314.42 1205.72 L1315 1205.72 L1315.59 1205.72 L1316.18 1205.72 L1316.76 1205.72 L1317.35 1205.72 L1317.93 1205.72 L1318.52 1205.72 L1319.11 1205.72 L1319.69 1205.72 L1320.28 1205.72 L1320.87 1205.72 L1321.45 1205.72 L1322.04 1205.72 L1322.63 1205.72 L1323.21 1205.72 L1323.8 1205.72 L1324.39 1205.72 L1324.97 1205.72 L1325.56 1205.72 L1326.14 1205.72 L1326.73 1205.72 L1327.32 1205.72 L1327.9 1205.72 L1328.49 1205.72 L1329.08 1205.72 L1329.66 1205.72 L1330.25 1205.72 L1330.84 1205.72 L1331.42 1205.72 L1332.01 1205.72 L1332.6 1205.72 L1333.18 1205.72 L1333.77 1205.72 L1334.35 1205.72 L1334.94 1205.72 L1335.53 1205.72 L1336.11 1205.72 L1336.7 1205.72 L1337.29 1205.72 L1337.87 1205.72 L1338.46 1205.72 L1339.05 1205.72 L1339.63 1205.72 L1340.22 1205.72 L1340.8 1205.72 L1341.39 1205.72 L1341.98 1205.72 L1342.56 1205.72 L1343.15 1205.72 L1343.74 1205.72 L1344.32 1205.72 L1344.91 1205.72 L1345.5 1205.72 L1346.08 1205.72 L1346.67 1205.72 L1347.26 1205.72 L1347.84 1205.72 L1348.43 1205.72 L1349.01 1205.72 L1349.6 1205.72 L1350.19 1205.72 L1350.77 1205.72 L1351.36 1205.72 L1351.95 1205.72 L1352.53 1205.72 L1353.12 1205.72 L1353.71 1205.72 L1354.29 1205.72 L1354.88 1205.72 L1355.47 1205.72 L1356.05 1205.72 L1356.64 1205.72 L1357.22 1205.72 L1357.81 1205.72 L1358.4 1205.72 L1358.98 1205.72 L1359.57 1205.72 L1360.16 1205.72 L1360.74 1205.72 L1361.33 1205.72 L1361.92 1205.72 L1362.5 1205.72 L1363.09 1205.72 L1363.68 1205.72 L1364.26 1205.72 L1364.85 1205.72 L1365.43 1205.72 L1366.02 1205.72 L1366.61 1205.72 L1367.19 1205.72 L1367.78 1205.72 L1368.37 1205.72 L1368.95 1205.72 L1369.54 1205.72 L1370.13 1205.72 L1370.71 1205.72 L1371.3 1205.72 L1371.88 1205.72 L1372.47 1205.72 L1373.06 1205.72 L1373.64 1205.72 L1374.23 1205.72 L1374.82 1205.72 L1375.4 1205.72 L1375.99 1205.72 L1376.58 1205.72 L1377.16 1205.72 L1377.75 1205.72 L1378.34 1205.72 L1378.92 1205.72 L1379.51 1205.72 L1380.09 1205.72 L1380.68 1205.72 L1381.27 1205.72 L1381.85 1205.72 L1382.44 1205.72 L1383.03 1205.72 L1383.61 1205.72 L1384.2 1205.72 L1384.79 1205.72 L1385.37 1205.72 L1385.96 1205.72 L1386.55 1205.72 L1387.13 1205.72 L1387.72 1205.72 L1388.3 1205.72 L1388.89 1205.72 L1389.48 1205.72 L1390.06 1205.72 L1390.65 1205.72 L1391.24 1205.72 L1391.82 1205.72 L1392.41 1205.72 L1393 1205.72 L1393.58 1205.72 L1394.17 1205.72 L1394.75 1205.72 L1395.34 1205.72 L1395.93 1205.72 L1396.51 1205.72 L1397.1 1205.72 L1397.69 1205.72 L1398.27 1205.72 L1398.86 1205.72 L1399.45 1205.72 L1400.03 1205.72 L1400.62 1205.72 L1401.21 1205.72 L1401.79 1205.72 L1402.38 1205.72 L1402.96 1205.72 L1403.55 1205.72 L1404.14 1205.72 L1404.72 1205.72 L1405.31 1205.72 L1405.9 1205.72 L1406.48 1205.72 L1407.07 1205.72 L1407.66 1205.72 L1408.24 1205.72 L1408.83 1205.72 L1409.42 1205.72 L1410 1205.72 L1410.59 1205.72 L1411.17 1205.72 L1411.76 1205.72 L1412.35 1205.72 L1412.93 1205.72 L1413.52 1205.72 L1414.11 1205.72 L1414.69 1205.72 L1415.28 1205.72 L1415.87 1205.72 L1416.45 1205.72 L1417.04 1205.72 L1417.63 1205.72 L1418.21 1205.72 L1418.8 1205.72 L1419.38 1205.72 L1419.97 1205.72 L1420.56 1205.72 L1421.14 1205.72 L1421.73 1205.72 L1422.32 1205.72 L1422.9 1205.72 L1423.49 1205.72 L1424.08 1205.72 L1424.66 1205.72 L1425.25 1205.72 L1425.83 1205.72 L1426.42 1205.72 L1427.01 1205.72 L1427.59 1205.72 L1428.18 1205.72 L1428.77 1205.72 L1429.35 1205.72 L1429.94 1205.72 L1430.53 1205.72 L1431.11 1205.72 L1431.7 1205.72 L1432.29 1205.72 L1432.87 1205.72 L1433.46 1205.72 L1434.04 1205.72 L1434.63 1205.72 L1435.22 1205.72 L1435.8 1205.72 L1436.39 1205.72 L1436.98 1205.72 L1437.56 1205.72 L1438.15 1205.72 L1438.74 1205.72 L1439.32 1205.72 L1439.91 1205.72 L1440.5 1205.72 L1441.08 1205.72 L1441.67 1205.72 L1442.25 1205.72 L1442.84 1205.72 L1443.43 1205.72 L1444.01 1205.72 L1444.6 1205.72 L1445.19 1205.72 L1445.77 1205.72 L1446.36 1205.72 L1446.95 1205.72 L1447.53 1205.72 L1448.12 1205.72 L1448.7 1205.72 L1449.29 1205.72 L1449.88 1205.72 L1450.46 1205.72 L1451.05 1205.72 L1451.64 1205.72 L1452.22 1205.72 L1452.81 1205.72 L1453.4 1205.72 L1453.98 1205.72 L1454.57 1205.72 L1455.16 1205.72 L1455.74 1205.72 L1456.33 1205.72 L1456.91 1205.72 L1457.5 1205.72 L1458.09 1205.72 L1458.67 1205.72 L1459.26 1205.72 L1459.85 1205.72 L1460.43 1205.72 L1461.02 1205.72 L1461.61 1205.72 L1462.19 1205.72 L1462.78 1205.72 L1463.37 1205.72 L1463.95 1205.72 L1464.54 1205.72 L1465.12 1205.72 L1465.71 1205.72 L1466.3 1205.72 L1466.88 1205.72 L1467.47 1205.72 L1468.06 1205.72 L1468.64 1205.72 L1469.23 1205.72 L1469.82 1205.72 L1470.4 1205.72 L1470.99 1205.72 L1471.57 1205.72 L1472.16 1205.72 L1472.75 1205.72 L1473.33 1205.72 L1473.92 1205.72 L1474.51 1205.72 L1475.09 1205.72 L1475.68 1205.72 L1476.27 1205.72 L1476.85 1205.72 L1477.44 1205.72 L1478.03 1205.72 L1478.61 1205.72 L1479.2 1205.72 L1479.78 1205.72 L1480.37 1205.72 L1480.96 1205.72 L1481.54 1205.72 L1482.13 1205.72 L1482.72 1205.72 L1483.3 1205.72 L1483.89 1205.72 L1484.48 1205.72 L1485.06 1205.72 L1485.65 1205.72 L1486.24 1205.72 L1486.82 1205.72 L1487.41 1205.72 L1487.99 1205.72 L1488.58 1205.72 L1489.17 1205.72 L1489.75 1205.72 L1490.34 1205.72 L1490.93 1205.72 L1491.51 1205.72 L1492.1 1205.72 L1492.69 1205.72 L1493.27 1205.72 L1493.86 1205.72 L1494.45 1205.72 L1495.03 1205.72 L1495.62 1205.72 L1496.2 1205.72 L1496.79 1205.72 L1497.38 1205.72 L1497.96 1205.72 L1498.55 1205.72 L1499.14 1205.72 L1499.72 1205.72 L1500.31 1205.72 L1500.9 1205.72 L1501.48 1205.72 L1502.07 1205.72 L1502.65 1205.72 L1503.24 1205.72 L1503.83 1205.72 L1504.41 1205.72 L1505 1205.72 L1505.59 1205.72 L1506.17 1205.72 L1506.76 1205.72 L1507.35 1205.72 L1507.93 1205.72 L1508.52 1205.72 L1509.11 1205.72 L1509.69 1205.72 L1510.28 1205.72 L1510.86 1205.72 L1511.45 1205.72 L1512.04 1205.72 L1512.62 1205.72 L1513.21 1205.72 L1513.8 1205.72 L1514.38 1205.72 L1514.97 1205.72 L1515.56 1205.72 L1516.14 1205.72 L1516.73 1205.72 L1517.32 1205.72 L1517.9 1205.72 L1518.49 1205.72 L1519.07 1205.72 L1519.66 1205.72 L1520.25 1205.72 L1520.83 1205.72 L1521.42 1205.72 L1522.01 1205.72 L1522.59 1205.72 L1523.18 1205.72 L1523.77 1205.72 L1524.35 1205.72 L1524.94 1205.72 L1525.52 1205.72 L1526.11 1205.72 L1526.7 1205.72 L1527.28 1205.72 L1527.87 1205.72 L1528.46 1205.72 L1529.04 1205.72 L1529.63 1205.72 L1530.22 1205.72 L1530.8 1205.72 L1531.39 1205.72 L1531.98 1205.72 L1532.56 1205.72 L1533.15 1205.72 L1533.73 1205.72 L1534.32 1205.72 L1534.91 1205.72 L1535.49 1205.72 L1536.08 1205.72 L1536.67 1205.72 L1537.25 1205.72 L1537.84 1205.72 L1538.43 1205.72 L1539.01 1205.72 L1539.6 1205.72 L1540.19 1205.72 L1540.77 1205.72 L1541.36 1205.72 L1541.94 1205.72 L1542.53 1205.72 L1543.12 1205.72 L1543.7 1205.72 L1544.29 1205.72 L1544.88 1205.72 L1545.46 1205.72 L1546.05 1205.72 L1546.64 1205.72 L1547.22 1205.72 L1547.81 1205.72 L1548.4 1205.72 L1548.98 1205.72 L1549.57 1205.72 L1550.15 1205.72 L1550.74 1205.72 L1551.33 1205.72 L1551.91 1205.72 L1552.5 1205.72 L1553.09 1205.72 L1553.67 1205.72 L1554.26 1205.72 L1554.85 1205.72 L1555.43 1205.72 L1556.02 1205.72 L1556.6 1205.72 L1557.19 1205.72 L1557.78 1205.72 L1558.36 1205.72 L1558.95 1205.72 L1559.54 1205.72 L1560.12 1205.72 L1560.71 1205.72 L1561.3 1205.72 L1561.88 1205.72 L1562.47 1205.72 L1563.06 1205.72 L1563.64 1205.72 L1564.23 1205.72 L1564.81 1205.72 L1565.4 1205.72 L1565.99 1205.72 L1566.57 1205.72 L1567.16 1205.72 L1567.75 1205.72 L1568.33 1205.72 L1568.92 1205.72 L1569.51 1205.72 L1570.09 1205.72 L1570.68 1205.72 L1571.27 1205.72 L1571.85 1205.72 L1572.44 1205.72 L1573.02 1205.72 L1573.61 1205.72 L1574.2 1205.72 L1574.78 1205.72 L1575.37 1205.72 L1575.96 1205.72 L1576.54 1205.72 L1577.13 1205.72 L1577.72 1205.72 L1578.3 1205.72 L1578.89 1205.72 L1579.47 1205.72 L1580.06 1205.72 L1580.65 1205.72 L1581.23 1205.72 L1581.82 1205.72 L1582.41 1205.72 L1582.99 1205.72 L1583.58 1205.72 L1584.17 1205.72 L1584.75 1205.72 L1585.34 1205.72 L1585.93 1205.72 L1586.51 1205.72 L1587.1 1205.72 L1587.68 1205.72 L1588.27 1205.72 L1588.86 1205.72 L1589.44 1205.72 L1590.03 1205.72 L1590.62 1205.72 L1591.2 1205.72 L1591.79 1205.72 L1592.38 1205.72 L1592.96 1205.72 L1593.55 1205.72 L1594.14 1205.72 L1594.72 1205.72 L1595.31 1205.72 L1595.89 1205.72 L1596.48 1205.72 L1597.07 1205.72 L1597.65 1205.72 L1598.24 1205.72 L1598.83 1205.72 L1599.41 1205.72 L1600 1205.72 L1600.59 1205.72 L1601.17 1205.72 L1601.76 1205.72 L1602.34 1205.72 L1602.93 1205.72 L1603.52 1205.72 L1604.1 1205.72 L1604.69 1205.72 L1605.28 1205.72 L1605.86 1205.72 L1606.45 1205.72 L1607.04 1205.72 L1607.62 1205.72 L1608.21 1205.72 L1608.8 1205.72 L1609.38 1205.72 L1609.97 1205.72 L1610.55 1205.72 L1611.14 1205.72 L1611.73 1205.72 L1612.31 1205.72 L1612.9 1205.72 L1613.49 1205.72 L1614.07 1205.72 L1614.66 1205.72 L1615.25 1205.72 L1615.83 1205.72 L1616.42 1205.72 L1617.01 1205.72 L1617.59 1205.72 L1618.18 1205.72 L1618.76 1205.72 L1619.35 1205.72 L1619.94 1205.72 L1620.52 1205.72 L1621.11 1205.72 L1621.7 1205.72 L1622.28 1205.72 L1622.87 1205.72 L1623.46 1205.72 L1624.04 1205.72 L1624.63 1205.72 L1625.22 1205.72 L1625.8 1205.72 L1626.39 1205.72 L1626.97 1205.72 L1627.56 1205.72 L1628.15 1205.72 L1628.73 1205.72 L1629.32 1205.72 L1629.91 1205.72 L1630.49 1205.72 L1631.08 1205.72 L1631.67 1205.72 L1632.25 1205.72 L1632.84 1205.72 L1633.42 1205.72 L1634.01 1205.72 L1634.6 1205.72 L1635.18 1205.72 L1635.77 1205.72 L1636.36 1205.72 L1636.94 1205.72 L1637.53 1205.72 L1638.12 1205.72 L1638.7 1205.72 L1639.29 1205.72 L1639.88 1205.72 L1640.46 1205.72 L1641.05 1205.72 L1641.63 1205.72 L1642.22 1205.72 L1642.81 1205.72 L1643.39 1205.72 L1643.98 1205.72 L1644.57 1205.72 L1645.15 1205.72 L1645.74 1205.72 L1646.33 1205.72 L1646.91 1205.72 L1647.5 1205.72 L1648.09 1205.72 L1648.67 1205.72 L1649.26 1205.72 L1649.84 1205.72 L1650.43 1205.72 L1651.02 1205.72 L1651.6 1205.72 L1652.19 1205.72 L1652.78 1205.72 L1653.36 1205.72 L1653.95 1205.72 L1654.54 1205.72 L1655.12 1205.72 L1655.71 1205.72 L1656.29 1205.72 L1656.88 1205.72 L1657.47 1205.72 L1658.05 1205.72 L1658.64 1205.72 L1659.23 1205.72 L1659.81 1205.72 L1660.4 1205.72 L1660.99 1205.72 L1661.57 1205.72 L1662.16 1205.72 L1662.75 1205.72 L1663.33 1205.72 L1663.92 1205.72 L1664.5 1205.72 L1665.09 1205.72 L1665.68 1205.72 L1666.26 1205.72 L1666.85 1205.72 L1667.44 1205.72 L1668.02 1205.72 L1668.61 1205.72 L1669.2 1205.72 L1669.78 1205.72 L1670.37 1205.72 L1670.96 1205.72 L1671.54 1205.72 L1672.13 1205.72 L1672.71 1205.72 L1673.3 1205.72 L1673.89 1205.72 L1674.47 1205.72 L1675.06 1205.72 L1675.65 1205.72 L1676.23 1205.72 L1676.82 1205.72 L1677.41 1205.72 L1677.99 1205.72 L1678.58 1205.72 L1679.17 1205.72 L1679.75 1205.72 L1680.34 1205.72 L1680.92 1205.72 L1681.51 1205.72 L1682.1 1205.72 L1682.68 1205.72 L1683.27 1205.72 L1683.86 1205.72 L1684.44 1205.72 L1685.03 1205.72 L1685.62 1205.72 L1686.2 1205.72 L1686.79 1205.72 L1687.37 1205.72 L1687.96 1205.72 L1688.55 1205.72 L1689.13 1205.72 L1689.72 1205.72 L1690.31 1205.72 L1690.89 1205.72 L1691.48 1205.72 L1692.07 1205.72 L1692.65 1205.72 L1693.24 1205.72 L1693.83 1205.72 L1694.41 1205.72 L1695 1205.72 L1695.58 1205.72 L1696.17 1205.72 L1696.76 1205.72 L1697.34 1205.72 L1697.93 1205.72 L1698.52 1205.72 L1699.1 1205.72 L1699.69 1205.72 L1700.28 1205.72 L1700.86 1205.72 L1701.45 1205.72 L1702.04 1205.72 L1702.62 1205.72 L1703.21 1205.72 L1703.79 1205.72 L1704.38 1205.72 L1704.97 1205.72 L1705.55 1205.72 L1706.14 1205.72 L1706.73 1205.72 L1707.31 1205.72 L1707.9 1205.72 L1708.49 1205.72 L1709.07 1205.72 L1709.66 1205.72 L1710.24 1205.72 L1710.83 1205.72 L1711.42 1205.72 L1712 1205.72 L1712.59 1205.72 L1713.18 1205.72 L1713.76 1205.72 L1714.35 1205.72 L1714.94 1205.72 L1715.52 1205.72 L1716.11 1205.72 L1716.7 1205.72 L1717.28 1205.72 L1717.87 1205.72 L1718.45 1205.72 L1719.04 1205.72 L1719.63 1205.72 L1720.21 1205.72 L1720.8 1205.72 L1721.39 1205.72 L1721.97 1205.72 L1722.56 1205.72 L1723.15 1205.72 L1723.73 1205.72 L1724.32 1205.72 L1724.91 1205.72 L1725.49 1205.72 L1726.08 1205.72 L1726.66 1205.72 L1727.25 1205.72 L1727.84 1205.72 L1728.42 1205.72 L1729.01 1205.72 L1729.6 1205.72 L1730.18 1205.72 L1730.77 1205.72 L1731.36 1205.72 L1731.94 1205.72 L1732.53 1205.72 L1733.11 1205.72 L1733.7 1205.72 L1734.29 1205.72 L1734.87 1205.72 L1735.46 1205.72 L1736.05 1205.72 L1736.63 1205.72 L1737.22 1205.72 L1737.81 1205.72 L1738.39 1205.72 L1738.98 1205.72 L1739.57 1205.72 L1740.15 1205.72 L1740.74 1205.72 L1741.32 1205.72 L1741.91 1205.72 L1742.5 1205.72 L1743.08 1205.72 L1743.67 1205.72 L1744.26 1205.72 L1744.84 1205.72 L1745.43 1205.72 L1746.02 1205.72 L1746.6 1205.72 L1747.19 1205.72 L1747.78 1205.72 L1748.36 1205.72 L1748.95 1205.72 L1749.53 1205.72 L1750.12 1205.72 L1750.71 1205.72 L1751.29 1205.72 L1751.88 1205.72 L1752.47 1205.72 L1753.05 1205.72 L1753.64 1205.72 L1754.23 1205.72 L1754.81 1205.72 L1755.4 1205.72 L1755.99 1205.72 L1756.57 1205.72 L1757.16 1205.72 L1757.74 1205.72 L1758.33 1205.72 L1758.92 1205.72 L1759.5 1205.72 L1760.09 1205.72 L1760.68 1205.72 L1761.26 1205.72 L1761.85 1205.72 L1762.44 1205.72 L1763.02 1205.72 L1763.61 1205.72 L1764.19 1205.72 L1764.78 1205.72 L1765.37 1205.72 L1765.95 1205.72 L1766.54 1205.72 L1767.13 1205.72 L1767.71 1205.72 L1768.3 1205.72 L1768.89 1205.72 L1769.47 1205.72 L1770.06 1205.72 L1770.65 1205.72 L1771.23 1205.72 L1771.82 1205.72 L1772.4 1205.72 L1772.99 1205.72 L1773.58 1205.72 L1774.16 1205.72 L1774.75 1205.72 L1775.34 1205.72 L1775.92 1205.72 L1776.51 1205.72 L1777.1 1205.72 L1777.68 1205.72 L1778.27 1205.72 L1778.86 1205.72 L1779.44 1205.72 L1780.03 1205.72 L1780.61 1205.72 L1781.2 1205.72 L1781.79 1205.72 L1782.37 1205.72 L1782.96 1205.72 L1783.55 1205.72 L1784.13 1205.72 L1784.72 1205.72 L1785.31 1205.72 L1785.89 1205.72 L1786.48 1205.72 L1787.06 1205.72 L1787.65 1205.72 L1788.24 1205.72 L1788.82 1205.72 L1789.41 1205.72 L1790 1205.72 L1790.58 1205.72 L1791.17 1205.72 L1791.76 1205.72 L1792.34 1205.72 L1792.93 1205.72 L1793.52 1205.72 L1794.1 1205.72 L1794.69 1205.72 L1795.27 1205.72 L1795.86 1205.72 L1796.45 1205.72 L1797.03 1205.72 L1797.62 1205.72 L1798.21 1205.72 L1798.79 1205.72 L1799.38 1205.72 L1799.97 1205.72 L1800.55 1205.72 L1801.14 1205.72 L1801.73 1205.72 L1802.31 1205.72 L1802.9 1205.72 L1803.48 1205.72 L1804.07 1205.72 L1804.66 1205.72 L1805.24 1205.72 L1805.83 1205.72 L1806.42 1205.72 L1807 1205.72 L1807.59 1205.72 L1808.18 1205.72 L1808.76 1205.72 L1809.35 1205.72 L1809.94 1205.72 L1810.52 1205.72 L1811.11 1205.72 L1811.69 1205.72 L1812.28 1205.72 L1812.87 1205.72 L1813.45 1205.72 L1814.04 1205.72 L1814.63 1205.72 L1815.21 1205.72 L1815.8 1205.72 L1816.39 1205.72 L1816.97 1205.72 L1817.56 1205.72 L1818.14 1205.72 L1818.73 1205.72 L1819.32 1205.72 L1819.9 1205.72 L1820.49 1205.72 L1821.08 1205.72 L1821.66 1205.72 L1822.25 1205.72 L1822.84 1205.72 L1823.42 1205.72 L1824.01 1205.72 L1824.6 1205.72 L1825.18 1205.72 L1825.77 1205.72 L1826.35 1205.72 L1826.94 1205.72 L1827.53 1205.72 L1828.11 1205.72 L1828.7 1205.72 L1829.29 1205.72 L1829.87 1205.72 L1830.46 1205.72 L1831.05 1205.72 L1831.63 1205.72 L1832.22 1205.72 L1832.81 1205.72 L1833.39 1205.72 L1833.98 1205.72 L1834.56 1205.72 L1835.15 1205.72 L1835.74 1205.72 L1836.32 1205.72 L1836.91 1205.72 L1837.5 1205.72 L1838.08 1205.72 L1838.67 1205.72 L1839.26 1205.72 L1839.84 1205.72 L1840.43 1205.72 L1841.01 1205.72 L1841.6 1205.72 L1842.19 1205.72 L1842.77 1205.72 L1843.36 1205.72 L1843.95 1205.72 L1844.53 1205.72 L1845.12 1205.72 L1845.71 1205.72 L1846.29 1205.72 L1846.88 1205.72 L1847.47 1205.72 L1848.05 1205.72 L1848.64 1205.72 L1849.22 1205.72 L1849.81 1205.72 L1850.4 1205.72 L1850.98 1205.72 L1851.57 1205.72 L1852.16 1205.72 L1852.74 1205.72 L1853.33 1205.72 L1853.92 1205.72 L1854.5 1205.72 L1855.09 1205.72 L1855.68 1205.72 L1856.26 1205.72 L1856.85 1205.72 L1857.43 1205.72 L1858.02 1205.72 L1858.61 1205.72 L1859.19 1205.72 L1859.78 1205.72 L1860.37 1205.72 L1860.95 1205.72 L1861.54 1205.72 L1862.13 1205.72 L1862.71 1205.72 L1863.3 1205.72 L1863.88 1205.72 L1864.47 1205.72 L1865.06 1205.72 L1865.64 1205.72 L1866.23 1205.72 L1866.82 1205.72 L1867.4 1205.72 L1867.99 1205.72 L1868.58 1205.72 L1869.16 1205.72 L1869.75 1205.72 L1870.34 1205.72 L1870.92 1205.72 L1871.51 1205.72 L1872.09 1205.72 L1872.68 1205.72 L1873.27 1205.72 L1873.85 1205.72 L1874.44 1205.72 L1875.03 1205.72 L1875.61 1205.72 L1876.2 1205.72 L1876.79 1205.72 L1877.37 1205.72 L1877.96 1205.72 L1878.55 1205.72 L1879.13 1205.72 L1879.72 1205.72 L1880.3 1205.72 L1880.89 1205.72 L1881.48 1205.72 L1882.06 1205.72 L1882.65 1205.72 L1883.24 1205.72 L1883.82 1205.72 L1884.41 1205.72 L1885 1205.72 L1885.58 1205.72 L1886.17 1205.72 L1886.76 1205.72 L1887.34 1205.72 L1887.93 1205.72 L1888.51 1205.72 L1889.1 1205.72 L1889.69 1205.72 L1890.27 1205.72 L1890.86 1205.72 L1891.45 1205.72 L1892.03 1205.72 L1892.62 1205.72 L1893.21 1205.72 L1893.79 1205.72 L1894.38 1205.72 L1894.96 1205.72 L1895.55 1205.72 L1896.14 1205.72 L1896.72 1205.72 L1897.31 1205.72 L1897.9 1205.72 L1898.48 1205.72 L1899.07 1205.72 L1899.66 1205.72 L1900.24 1205.72 L1900.83 1205.72 L1901.42 1205.72 L1902 1205.72 L1902.59 1205.72 L1903.17 1205.72 L1903.76 1205.72 L1904.35 1205.72 L1904.93 1205.72 L1905.52 1205.72 L1906.11 1205.72 L1906.69 1205.72 L1907.28 1205.72 L1907.87 1205.72 L1908.45 1205.72 L1909.04 1205.72 L1909.63 1205.72 L1910.21 1205.72 L1910.8 1205.72 L1911.38 1205.72 L1911.97 1205.72 L1912.56 1205.72 L1913.14 1205.72 L1913.73 1205.72 L1914.32 1205.72 L1914.9 1205.72 L1915.49 1205.72 L1916.08 1205.72 L1916.66 1205.72 L1917.25 1205.72 L1917.83 1205.72 L1918.42 1205.72 L1919.01 1205.72 L1919.59 1205.72 L1920.18 1205.72 L1920.77 1205.72 L1921.35 1205.72 L1921.94 1205.72 L1922.53 1205.72 L1923.11 1205.72 L1923.7 1205.72 L1924.29 1205.72 L1924.87 1205.72 L1925.46 1205.72 L1926.04 1205.72 L1926.63 1205.72 L1927.22 1205.72 L1927.8 1205.72 L1928.39 1205.72 L1928.98 1205.72 L1929.56 1205.72 L1930.15 1205.72 L1930.74 1205.72 L1931.32 1205.72 L1931.91 1205.72 L1932.5 1205.72 L1933.08 1205.72 L1933.67 1205.72 L1934.25 1205.72 L1934.84 1205.72 L1935.43 1205.72 L1936.01 1205.72 L1936.6 1205.72 L1937.19 1205.72 L1937.77 1205.72 L1938.36 1205.72 L1938.95 1205.72 L1939.53 1205.72 L1940.12 1205.72 L1940.71 1205.72 L1941.29 1205.72 L1941.88 1205.72 L1942.46 1205.72 L1943.05 1205.72 L1943.64 1205.72 L1944.22 1205.72 L1944.81 1205.72 L1945.4 1205.72 L1945.98 1205.72 L1946.57 1205.72 L1947.16 1205.72 L1947.74 1205.72 L1948.33 1205.72 L1948.91 1205.72 L1949.5 1205.72 L1950.09 1205.72 L1950.67 1205.72 L1951.26 1205.72 L1951.85 1205.72 L1952.43 1205.72 L1953.02 1205.72 L1953.61 1205.72 L1954.19 1205.72 L1954.78 1205.72 L1955.37 1205.72 L1955.95 1205.72 L1956.54 1205.72 L1957.12 1205.72 L1957.71 1205.72 L1958.3 1205.72 L1958.88 1205.72 L1959.47 1205.72 L1960.06 1205.72 L1960.64 1205.72 L1961.23 1205.72 L1961.82 1205.72 L1962.4 1205.72 L1962.99 1205.72 L1963.58 1205.72 L1964.16 1205.72 L1964.75 1205.72 L1965.33 1205.72 L1965.92 1205.72 L1966.51 1205.72 L1967.09 1205.72 L1967.68 1205.72 L1968.27 1205.72 L1968.85 1205.72 L1969.44 1205.72 L1970.03 1205.72 L1970.61 1205.72 L1971.2 1205.72 L1971.78 1205.72 L1972.37 1205.72 L1972.96 1205.72 L1973.54 1205.72 L1974.13 1205.72 L1974.72 1205.72 L1975.3 1205.72 L1975.89 1205.72 L1976.48 1205.72 L1977.06 1205.72 L1977.65 1205.72 L1978.24 1205.72 L1978.82 1205.72 L1979.41 1205.72 L1979.99 1205.72 L1980.58 1205.72 L1981.17 1205.72 L1981.75 1205.72 L1982.34 1205.72 L1982.93 1205.72 L1983.51 1205.72 L1984.1 1205.72 L1984.69 1205.72 L1985.27 1205.72 L1985.86 1205.72 L1986.45 1205.72 L1987.03 1205.72 L1987.62 1205.72 L1988.2 1205.72 L1988.79 1205.72 L1989.38 1205.72 L1989.96 1205.72 L1990.55 1205.72 L1991.14 1205.72 L1991.72 1205.72 L1992.31 1205.72 L1992.9 1205.72 L1993.48 1205.72 L1994.07 1205.72 L1994.65 1205.72 L1995.24 1205.72 L1995.83 1205.72 L1996.41 1205.72 L1997 1205.72 L1997.59 1205.72 L1998.17 1205.72 L1998.76 1205.72 L1999.35 1205.72 L1999.93 1205.72 L2000.52 1205.72 L2001.11 1205.72 L2001.69 1205.72 L2002.28 1205.72 L2002.86 1205.72 L2003.45 1205.72 L2004.04 1205.72 L2004.62 1205.72 L2005.21 1205.72 L2005.8 1205.72 L2006.38 1205.72 L2006.97 1205.72 L2007.56 1205.72 L2008.14 1205.72 L2008.73 1205.72 L2009.32 1205.72 L2009.9 1205.72 L2010.49 1205.72 L2011.07 1205.72 L2011.66 1205.72 L2012.25 1205.72 L2012.83 1205.72 L2013.42 1205.72 L2014.01 1205.72 L2014.59 1205.72 L2015.18 1205.72 L2015.77 1205.72 L2016.35 1205.72 L2016.94 1205.72 L2017.53 1205.72 L2018.11 1205.72 L2018.7 1205.72 L2019.28 1205.72 L2019.87 1205.72 L2020.46 1205.72 L2021.04 1205.72 L2021.63 1205.72 L2022.22 1205.72 L2022.8 1205.72 L2023.39 1205.72 L2023.98 1205.72 L2024.56 1205.72 L2025.15 1205.72 L2025.73 1205.72 L2026.32 1205.72 L2026.91 1205.72 L2027.49 1205.72 L2028.08 1205.72 L2028.67 1205.72 L2029.25 1205.72 L2029.84 1205.72 L2030.43 1205.72 L2031.01 1205.72 L2031.6 1205.72 L2032.19 1205.72 L2032.77 1205.72 L2033.36 1205.72 L2033.94 1205.72 L2034.53 1205.72 L2035.12 1205.72 L2035.7 1205.72 L2036.29 1205.72 L2036.88 1205.72 L2037.46 1205.72 L2038.05 1205.72 L2038.64 1205.72 L2039.22 1205.72 L2039.81 1205.72 L2040.4 1205.72 L2040.98 1205.72 L2041.57 1205.72 L2042.15 1205.72 L2042.74 1205.72 L2043.33 1205.72 L2043.91 1205.72 L2044.5 1205.72 L2045.09 1205.72 L2045.67 1205.72 L2046.26 1205.72 L2046.85 1205.72 L2047.43 1205.72 L2048.02 1205.72 L2048.6 1205.72 L2049.19 1205.72 L2049.78 1205.72 L2050.36 1205.72 L2050.95 1205.72 L2051.54 1205.72 L2052.12 1205.72 L2052.71 1205.72 L2053.3 1205.72 L2053.88 1205.72 L2054.47 1205.72 L2055.06 1205.72 L2055.64 1205.72 L2056.23 1205.72 L2056.81 1205.72 L2057.4 1205.72 L2057.99 1205.72 L2058.57 1205.72 L2059.16 1205.72 L2059.75 1205.72 L2060.33 1205.72 L2060.92 1205.72 L2061.51 1205.72 L2062.09 1205.72 L2062.68 1205.72 L2063.27 1205.72 L2063.85 1205.72 L2064.44 1205.72 L2065.02 1205.72 L2065.61 1205.72 L2066.2 1205.72 L2066.78 1205.72 L2067.37 1205.72 L2067.96 1205.72 L2068.54 1205.72 L2069.13 1205.72 L2069.72 1205.72 L2070.3 1205.72 L2070.89 1205.72 L2071.48 1205.72 L2072.06 1205.72 L2072.65 1205.72 L2073.23 1205.72 L2073.82 1205.72 L2074.41 1205.72 L2074.99 1205.72 L2075.58 1205.72 L2076.17 1205.72 L2076.75 1205.72 L2077.34 1205.72 L2077.93 1205.72 L2078.51 1205.72 L2079.1 1205.72 L2079.68 1205.72 L2080.27 1205.72 L2080.86 1205.72 L2081.44 1205.72 L2082.03 1205.72 L2082.62 1205.72 L2083.2 1205.72 L2083.79 1205.72 L2084.38 1205.72 L2084.96 1205.72 L2085.55 1205.72 L2086.14 1205.72 L2086.72 1205.72 L2087.31 1205.72 L2087.89 1205.72 L2088.48 1205.72 L2089.07 1205.72 L2089.65 1205.72 L2090.24 1205.72 L2090.83 1205.72 L2091.41 1205.72 L2092 1205.72 L2092.59 1205.72 L2093.17 1205.72 L2093.76 1205.72 L2094.35 1205.72 L2094.93 1205.72 L2095.52 1205.72 L2096.1 1205.72 L2096.69 1205.72 L2097.28 1205.72 L2097.86 1205.72 L2098.45 1205.72 L2099.04 1205.72 L2099.62 1205.72 L2100.21 1205.72 L2100.8 1205.72 L2101.38 1205.72 L2101.97 1205.72 L2102.55 1205.72 L2103.14 1205.72 L2103.73 1205.72 L2104.31 1205.72 L2104.9 1205.72 L2105.49 1205.72 L2106.07 1205.72 L2106.66 1205.72 L2107.25 1205.72 L2107.83 1205.72 L2108.42 1205.72 L2109.01 1205.72 L2109.59 1205.72 L2110.18 1205.72 L2110.76 1205.72 L2111.35 1205.72 L2111.94 1205.72 L2112.52 1205.72 L2113.11 1205.72 L2113.7 1205.72 L2114.28 1205.72 L2114.87 1205.72 L2115.46 1205.72 L2116.04 1205.72 L2116.63 1205.72 L2117.22 1205.72 L2117.8 1205.72 L2118.39 1205.72 L2118.97 1205.72 L2119.56 1205.72 L2120.15 1205.72 L2120.73 1205.72 L2121.32 1205.72 L2121.91 1205.72 L2122.49 1205.72 L2123.08 1205.72 L2123.67 1205.72 L2124.25 1205.72 L2124.84 1205.72 L2125.42 1205.72 L2126.01 1205.72 L2126.6 1205.72 L2127.18 1205.72 L2127.77 1205.72 L2128.36 1205.72 L2128.94 1205.72 L2129.53 1205.72 L2130.12 1205.72 L2130.7 1205.72 L2131.29 1205.72 L2131.88 1205.72 L2132.46 1205.72 L2133.05 1205.72 L2133.63 1205.72 L2134.22 1205.72 L2134.81 1205.72 L2135.39 1205.72 L2135.98 1205.72 L2136.57 1205.72 L2137.15 1205.72 L2137.74 1205.72 L2138.33 1205.72 L2138.91 1205.72 L2139.5 1205.72 L2140.09 1205.72 L2140.67 1205.72 L2141.26 1205.72 L2141.84 1205.72 L2142.43 1205.72 L2143.02 1205.72 L2143.6 1205.72 L2144.19 1205.72 L2144.78 1205.72 L2145.36 1205.72 L2145.95 1205.72 L2146.54 1205.72 L2147.12 1205.72 L2147.71 1205.72 L2148.3 1205.72 L2148.88 1205.72 L2149.47 1205.72 L2150.05 1205.72 L2150.64 1205.72 L2151.23 1205.72 L2151.81 1205.72 L2152.4 1205.72 L2152.99 1205.72 L2153.57 1205.72 L2154.16 1205.72 L2154.75 1205.72 L2155.33 1205.72 L2155.92 1205.72 L2156.5 1205.72 L2157.09 1205.72 L2157.68 1205.72 L2158.26 1205.72 L2158.26 1205.53 L2157.68 1205.53 L2157.09 1205.53 L2156.5 1205.53 L2155.92 1205.53 L2155.33 1205.53 L2154.75 1205.53 L2154.16 1205.53 L2153.57 1205.53 L2152.99 1205.53 L2152.4 1205.53 L2151.81 1205.53 L2151.23 1205.53 L2150.64 1205.53 L2150.05 1205.53 L2149.47 1205.53 L2148.88 1205.53 L2148.3 1205.53 L2147.71 1205.53 L2147.12 1205.53 L2146.54 1205.53 L2145.95 1205.53 L2145.36 1205.53 L2144.78 1205.53 L2144.19 1205.53 L2143.6 1205.53 L2143.02 1205.53 L2142.43 1205.53 L2141.84 1205.53 L2141.26 1205.53 L2140.67 1205.53 L2140.09 1205.53 L2139.5 1205.53 L2138.91 1205.53 L2138.33 1205.53 L2137.74 1205.53 L2137.15 1205.53 L2136.57 1205.53 L2135.98 1205.53 L2135.39 1205.53 L2134.81 1205.53 L2134.22 1205.53 L2133.63 1205.53 L2133.05 1205.53 L2132.46 1205.53 L2131.88 1205.53 L2131.29 1205.53 L2130.7 1205.53 L2130.12 1205.53 L2129.53 1205.53 L2128.94 1205.53 L2128.36 1205.53 L2127.77 1205.53 L2127.18 1205.53 L2126.6 1205.53 L2126.01 1205.53 L2125.42 1205.53 L2124.84 1205.53 L2124.25 1205.53 L2123.67 1205.53 L2123.08 1205.53 L2122.49 1205.53 L2121.91 1205.53 L2121.32 1205.53 L2120.73 1205.53 L2120.15 1205.53 L2119.56 1205.53 L2118.97 1205.53 L2118.39 1205.53 L2117.8 1205.53 L2117.22 1205.53 L2116.63 1205.53 L2116.04 1205.53 L2115.46 1205.53 L2114.87 1205.53 L2114.28 1205.53 L2113.7 1205.53 L2113.11 1205.53 L2112.52 1205.53 L2111.94 1205.53 L2111.35 1205.53 L2110.76 1205.53 L2110.18 1205.53 L2109.59 1205.53 L2109.01 1205.53 L2108.42 1205.53 L2107.83 1205.53 L2107.25 1205.53 L2106.66 1205.53 L2106.07 1205.53 L2105.49 1205.53 L2104.9 1205.53 L2104.31 1205.53 L2103.73 1205.53 L2103.14 1205.53 L2102.55 1205.53 L2101.97 1205.53 L2101.38 1205.53 L2100.8 1205.53 L2100.21 1205.53 L2099.62 1205.53 L2099.04 1205.53 L2098.45 1205.53 L2097.86 1205.53 L2097.28 1205.53 L2096.69 1205.53 L2096.1 1205.53 L2095.52 1205.53 L2094.93 1205.53 L2094.35 1205.53 L2093.76 1205.53 L2093.17 1205.53 L2092.59 1205.53 L2092 1205.53 L2091.41 1205.53 L2090.83 1205.53 L2090.24 1205.53 L2089.65 1205.53 L2089.07 1205.53 L2088.48 1205.53 L2087.89 1205.53 L2087.31 1205.53 L2086.72 1205.53 L2086.14 1205.53 L2085.55 1205.53 L2084.96 1205.53 L2084.38 1205.53 L2083.79 1205.53 L2083.2 1205.53 L2082.62 1205.53 L2082.03 1205.53 L2081.44 1205.53 L2080.86 1205.53 L2080.27 1205.53 L2079.68 1205.53 L2079.1 1205.53 L2078.51 1205.53 L2077.93 1205.53 L2077.34 1205.53 L2076.75 1205.53 L2076.17 1205.53 L2075.58 1205.53 L2074.99 1205.53 L2074.41 1205.53 L2073.82 1205.53 L2073.23 1205.53 L2072.65 1205.53 L2072.06 1205.53 L2071.48 1205.53 L2070.89 1205.53 L2070.3 1205.53 L2069.72 1205.53 L2069.13 1205.53 L2068.54 1205.53 L2067.96 1205.53 L2067.37 1205.53 L2066.78 1205.53 L2066.2 1205.53 L2065.61 1205.53 L2065.02 1205.53 L2064.44 1205.53 L2063.85 1205.53 L2063.27 1205.53 L2062.68 1205.53 L2062.09 1205.53 L2061.51 1205.53 L2060.92 1205.53 L2060.33 1205.53 L2059.75 1205.53 L2059.16 1205.53 L2058.57 1205.53 L2057.99 1205.53 L2057.4 1205.53 L2056.81 1205.53 L2056.23 1205.53 L2055.64 1205.53 L2055.06 1205.53 L2054.47 1205.53 L2053.88 1205.53 L2053.3 1205.53 L2052.71 1205.53 L2052.12 1205.53 L2051.54 1205.53 L2050.95 1205.53 L2050.36 1205.53 L2049.78 1205.53 L2049.19 1205.53 L2048.6 1205.53 L2048.02 1205.53 L2047.43 1205.53 L2046.85 1205.53 L2046.26 1205.53 L2045.67 1205.53 L2045.09 1205.53 L2044.5 1205.53 L2043.91 1205.53 L2043.33 1205.53 L2042.74 1205.53 L2042.15 1205.53 L2041.57 1205.53 L2040.98 1205.53 L2040.4 1205.53 L2039.81 1205.53 L2039.22 1205.53 L2038.64 1205.53 L2038.05 1205.53 L2037.46 1205.53 L2036.88 1205.53 L2036.29 1205.53 L2035.7 1205.53 L2035.12 1205.53 L2034.53 1205.53 L2033.94 1205.53 L2033.36 1205.53 L2032.77 1205.53 L2032.19 1205.53 L2031.6 1205.53 L2031.01 1205.53 L2030.43 1205.53 L2029.84 1205.53 L2029.25 1205.53 L2028.67 1205.53 L2028.08 1205.53 L2027.49 1205.53 L2026.91 1205.53 L2026.32 1205.53 L2025.73 1205.53 L2025.15 1205.53 L2024.56 1205.53 L2023.98 1205.53 L2023.39 1205.53 L2022.8 1205.53 L2022.22 1205.53 L2021.63 1205.53 L2021.04 1205.53 L2020.46 1205.53 L2019.87 1205.53 L2019.28 1205.53 L2018.7 1205.53 L2018.11 1205.53 L2017.53 1205.53 L2016.94 1205.53 L2016.35 1205.53 L2015.77 1205.53 L2015.18 1205.53 L2014.59 1205.53 L2014.01 1205.53 L2013.42 1205.53 L2012.83 1205.53 L2012.25 1205.53 L2011.66 1205.53 L2011.07 1205.53 L2010.49 1205.53 L2009.9 1205.53 L2009.32 1205.53 L2008.73 1205.53 L2008.14 1205.53 L2007.56 1205.53 L2006.97 1205.53 L2006.38 1205.53 L2005.8 1205.53 L2005.21 1205.53 L2004.62 1205.53 L2004.04 1205.53 L2003.45 1205.53 L2002.86 1205.53 L2002.28 1205.53 L2001.69 1205.53 L2001.11 1205.53 L2000.52 1205.53 L1999.93 1205.53 L1999.35 1205.53 L1998.76 1205.53 L1998.17 1205.53 L1997.59 1205.53 L1997 1205.53 L1996.41 1205.53 L1995.83 1205.53 L1995.24 1205.53 L1994.65 1205.53 L1994.07 1205.53 L1993.48 1205.53 L1992.9 1205.53 L1992.31 1205.53 L1991.72 1205.53 L1991.14 1205.53 L1990.55 1205.53 L1989.96 1205.53 L1989.38 1205.53 L1988.79 1205.53 L1988.2 1205.53 L1987.62 1205.53 L1987.03 1205.53 L1986.45 1205.53 L1985.86 1205.53 L1985.27 1205.53 L1984.69 1205.53 L1984.1 1205.53 L1983.51 1205.53 L1982.93 1205.53 L1982.34 1205.53 L1981.75 1205.53 L1981.17 1205.53 L1980.58 1205.53 L1979.99 1205.53 L1979.41 1205.53 L1978.82 1205.53 L1978.24 1205.53 L1977.65 1205.53 L1977.06 1205.53 L1976.48 1205.53 L1975.89 1205.53 L1975.3 1205.53 L1974.72 1205.53 L1974.13 1205.53 L1973.54 1205.53 L1972.96 1205.53 L1972.37 1205.53 L1971.78 1205.53 L1971.2 1205.53 L1970.61 1205.53 L1970.03 1205.53 L1969.44 1205.53 L1968.85 1205.53 L1968.27 1205.53 L1967.68 1205.53 L1967.09 1205.53 L1966.51 1205.53 L1965.92 1205.53 L1965.33 1205.53 L1964.75 1205.53 L1964.16 1205.53 L1963.58 1205.53 L1962.99 1205.53 L1962.4 1205.53 L1961.82 1205.53 L1961.23 1205.53 L1960.64 1205.53 L1960.06 1205.53 L1959.47 1205.53 L1958.88 1205.53 L1958.3 1205.53 L1957.71 1205.53 L1957.12 1205.53 L1956.54 1205.53 L1955.95 1205.53 L1955.37 1205.53 L1954.78 1205.53 L1954.19 1205.53 L1953.61 1205.53 L1953.02 1205.53 L1952.43 1205.53 L1951.85 1205.53 L1951.26 1205.53 L1950.67 1205.53 L1950.09 1205.53 L1949.5 1205.53 L1948.91 1205.53 L1948.33 1205.53 L1947.74 1205.53 L1947.16 1205.53 L1946.57 1205.53 L1945.98 1205.53 L1945.4 1205.53 L1944.81 1205.53 L1944.22 1205.53 L1943.64 1205.53 L1943.05 1205.53 L1942.46 1205.53 L1941.88 1205.53 L1941.29 1205.53 L1940.71 1205.53 L1940.12 1205.53 L1939.53 1205.53 L1938.95 1205.53 L1938.36 1205.53 L1937.77 1205.53 L1937.19 1205.53 L1936.6 1205.53 L1936.01 1205.53 L1935.43 1205.53 L1934.84 1205.53 L1934.25 1205.53 L1933.67 1205.53 L1933.08 1205.53 L1932.5 1205.53 L1931.91 1205.53 L1931.32 1205.53 L1930.74 1205.53 L1930.15 1205.53 L1929.56 1205.53 L1928.98 1205.53 L1928.39 1205.53 L1927.8 1205.53 L1927.22 1205.53 L1926.63 1205.53 L1926.04 1205.53 L1925.46 1205.53 L1924.87 1205.53 L1924.29 1205.53 L1923.7 1205.53 L1923.11 1205.53 L1922.53 1205.53 L1921.94 1205.53 L1921.35 1205.53 L1920.77 1205.53 L1920.18 1205.53 L1919.59 1205.53 L1919.01 1205.53 L1918.42 1205.53 L1917.83 1205.53 L1917.25 1205.53 L1916.66 1205.53 L1916.08 1205.53 L1915.49 1205.53 L1914.9 1205.53 L1914.32 1205.53 L1913.73 1205.53 L1913.14 1205.53 L1912.56 1205.53 L1911.97 1205.53 L1911.38 1205.53 L1910.8 1205.53 L1910.21 1205.53 L1909.63 1205.53 L1909.04 1205.53 L1908.45 1205.53 L1907.87 1205.53 L1907.28 1205.53 L1906.69 1205.53 L1906.11 1205.53 L1905.52 1205.53 L1904.93 1205.53 L1904.35 1205.53 L1903.76 1205.53 L1903.17 1205.53 L1902.59 1205.53 L1902 1205.53 L1901.42 1205.53 L1900.83 1205.53 L1900.24 1205.53 L1899.66 1205.53 L1899.07 1205.53 L1898.48 1205.53 L1897.9 1205.53 L1897.31 1205.53 L1896.72 1205.53 L1896.14 1205.53 L1895.55 1205.53 L1894.96 1205.53 L1894.38 1205.53 L1893.79 1205.53 L1893.21 1205.53 L1892.62 1205.53 L1892.03 1205.53 L1891.45 1205.53 L1890.86 1205.53 L1890.27 1205.53 L1889.69 1205.53 L1889.1 1205.53 L1888.51 1205.53 L1887.93 1205.53 L1887.34 1205.53 L1886.76 1205.53 L1886.17 1205.53 L1885.58 1205.53 L1885 1205.53 L1884.41 1205.53 L1883.82 1205.53 L1883.24 1205.53 L1882.65 1205.53 L1882.06 1205.53 L1881.48 1205.53 L1880.89 1205.53 L1880.3 1205.53 L1879.72 1205.53 L1879.13 1205.53 L1878.55 1205.53 L1877.96 1205.53 L1877.37 1205.53 L1876.79 1205.53 L1876.2 1205.53 L1875.61 1205.53 L1875.03 1205.53 L1874.44 1205.53 L1873.85 1205.53 L1873.27 1205.53 L1872.68 1205.53 L1872.09 1205.53 L1871.51 1205.53 L1870.92 1205.53 L1870.34 1205.53 L1869.75 1205.53 L1869.16 1205.53 L1868.58 1205.53 L1867.99 1205.53 L1867.4 1205.53 L1866.82 1205.53 L1866.23 1205.53 L1865.64 1205.53 L1865.06 1205.53 L1864.47 1205.53 L1863.88 1205.53 L1863.3 1205.53 L1862.71 1205.53 L1862.13 1205.53 L1861.54 1205.53 L1860.95 1205.53 L1860.37 1205.53 L1859.78 1205.53 L1859.19 1205.53 L1858.61 1205.53 L1858.02 1205.53 L1857.43 1205.53 L1856.85 1205.53 L1856.26 1205.53 L1855.68 1205.53 L1855.09 1205.53 L1854.5 1205.53 L1853.92 1205.53 L1853.33 1205.53 L1852.74 1205.53 L1852.16 1205.53 L1851.57 1205.53 L1850.98 1205.53 L1850.4 1205.53 L1849.81 1205.53 L1849.22 1205.53 L1848.64 1205.53 L1848.05 1205.53 L1847.47 1205.53 L1846.88 1205.53 L1846.29 1205.53 L1845.71 1205.53 L1845.12 1205.53 L1844.53 1205.53 L1843.95 1205.53 L1843.36 1205.53 L1842.77 1205.53 L1842.19 1205.53 L1841.6 1205.53 L1841.01 1205.53 L1840.43 1205.53 L1839.84 1205.53 L1839.26 1205.53 L1838.67 1205.53 L1838.08 1205.53 L1837.5 1205.53 L1836.91 1205.53 L1836.32 1205.53 L1835.74 1205.53 L1835.15 1205.53 L1834.56 1205.53 L1833.98 1205.53 L1833.39 1205.53 L1832.81 1205.53 L1832.22 1205.53 L1831.63 1205.53 L1831.05 1205.53 L1830.46 1205.53 L1829.87 1205.53 L1829.29 1205.53 L1828.7 1205.53 L1828.11 1205.53 L1827.53 1205.53 L1826.94 1205.53 L1826.35 1205.53 L1825.77 1205.53 L1825.18 1205.53 L1824.6 1205.53 L1824.01 1205.53 L1823.42 1205.53 L1822.84 1205.53 L1822.25 1205.53 L1821.66 1205.53 L1821.08 1205.53 L1820.49 1205.53 L1819.9 1205.53 L1819.32 1205.53 L1818.73 1205.53 L1818.14 1205.53 L1817.56 1205.53 L1816.97 1205.53 L1816.39 1205.53 L1815.8 1205.53 L1815.21 1205.53 L1814.63 1205.53 L1814.04 1205.53 L1813.45 1205.53 L1812.87 1205.53 L1812.28 1205.53 L1811.69 1205.53 L1811.11 1205.53 L1810.52 1205.53 L1809.94 1205.53 L1809.35 1205.53 L1808.76 1205.53 L1808.18 1205.53 L1807.59 1205.53 L1807 1205.53 L1806.42 1205.53 L1805.83 1205.53 L1805.24 1205.53 L1804.66 1205.53 L1804.07 1205.53 L1803.48 1205.53 L1802.9 1205.53 L1802.31 1205.53 L1801.73 1205.53 L1801.14 1205.53 L1800.55 1205.53 L1799.97 1205.53 L1799.38 1205.53 L1798.79 1205.53 L1798.21 1205.53 L1797.62 1205.53 L1797.03 1205.53 L1796.45 1205.53 L1795.86 1205.53 L1795.27 1205.53 L1794.69 1205.53 L1794.1 1205.53 L1793.52 1205.53 L1792.93 1205.53 L1792.34 1205.53 L1791.76 1205.53 L1791.17 1205.53 L1790.58 1205.53 L1790 1205.53 L1789.41 1205.53 L1788.82 1205.53 L1788.24 1205.53 L1787.65 1205.53 L1787.06 1205.53 L1786.48 1205.53 L1785.89 1205.53 L1785.31 1205.53 L1784.72 1205.53 L1784.13 1205.53 L1783.55 1205.53 L1782.96 1205.53 L1782.37 1205.53 L1781.79 1205.53 L1781.2 1205.53 L1780.61 1205.53 L1780.03 1205.53 L1779.44 1205.53 L1778.86 1205.53 L1778.27 1205.53 L1777.68 1205.53 L1777.1 1205.53 L1776.51 1205.53 L1775.92 1205.53 L1775.34 1205.53 L1774.75 1205.53 L1774.16 1205.53 L1773.58 1205.53 L1772.99 1205.53 L1772.4 1205.53 L1771.82 1205.53 L1771.23 1205.53 L1770.65 1205.53 L1770.06 1205.53 L1769.47 1205.53 L1768.89 1205.53 L1768.3 1205.53 L1767.71 1205.53 L1767.13 1205.53 L1766.54 1205.53 L1765.95 1205.53 L1765.37 1205.53 L1764.78 1205.53 L1764.19 1205.53 L1763.61 1205.53 L1763.02 1205.53 L1762.44 1205.53 L1761.85 1205.53 L1761.26 1205.53 L1760.68 1205.53 L1760.09 1205.53 L1759.5 1205.53 L1758.92 1205.53 L1758.33 1205.53 L1757.74 1205.53 L1757.16 1205.53 L1756.57 1205.53 L1755.99 1205.53 L1755.4 1205.53 L1754.81 1205.53 L1754.23 1205.53 L1753.64 1205.53 L1753.05 1205.53 L1752.47 1205.53 L1751.88 1205.53 L1751.29 1205.53 L1750.71 1205.53 L1750.12 1205.53 L1749.53 1205.53 L1748.95 1205.53 L1748.36 1205.53 L1747.78 1205.53 L1747.19 1205.53 L1746.6 1205.53 L1746.02 1205.53 L1745.43 1205.53 L1744.84 1205.53 L1744.26 1205.53 L1743.67 1205.53 L1743.08 1205.53 L1742.5 1205.53 L1741.91 1205.53 L1741.32 1205.53 L1740.74 1205.53 L1740.15 1205.53 L1739.57 1205.53 L1738.98 1205.53 L1738.39 1205.53 L1737.81 1205.53 L1737.22 1205.53 L1736.63 1205.53 L1736.05 1205.53 L1735.46 1205.53 L1734.87 1205.53 L1734.29 1205.53 L1733.7 1205.53 L1733.11 1205.53 L1732.53 1205.53 L1731.94 1205.53 L1731.36 1205.53 L1730.77 1205.53 L1730.18 1205.53 L1729.6 1205.53 L1729.01 1205.53 L1728.42 1205.53 L1727.84 1205.53 L1727.25 1205.53 L1726.66 1205.53 L1726.08 1205.53 L1725.49 1205.53 L1724.91 1205.53 L1724.32 1205.53 L1723.73 1205.53 L1723.15 1205.53 L1722.56 1205.53 L1721.97 1205.53 L1721.39 1205.53 L1720.8 1205.53 L1720.21 1205.53 L1719.63 1205.53 L1719.04 1205.53 L1718.45 1205.53 L1717.87 1205.53 L1717.28 1205.53 L1716.7 1205.53 L1716.11 1205.53 L1715.52 1205.53 L1714.94 1205.53 L1714.35 1205.53 L1713.76 1205.53 L1713.18 1205.53 L1712.59 1205.53 L1712 1205.53 L1711.42 1205.53 L1710.83 1205.53 L1710.24 1205.53 L1709.66 1205.53 L1709.07 1205.53 L1708.49 1205.53 L1707.9 1205.53 L1707.31 1205.53 L1706.73 1205.53 L1706.14 1205.53 L1705.55 1205.53 L1704.97 1205.53 L1704.38 1205.53 L1703.79 1205.53 L1703.21 1205.53 L1702.62 1205.53 L1702.04 1205.53 L1701.45 1205.53 L1700.86 1205.53 L1700.28 1205.53 L1699.69 1205.53 L1699.1 1205.53 L1698.52 1205.53 L1697.93 1205.53 L1697.34 1205.53 L1696.76 1205.53 L1696.17 1205.53 L1695.58 1205.53 L1695 1205.53 L1694.41 1205.53 L1693.83 1205.53 L1693.24 1205.53 L1692.65 1205.53 L1692.07 1205.53 L1691.48 1205.53 L1690.89 1205.53 L1690.31 1205.53 L1689.72 1205.53 L1689.13 1205.53 L1688.55 1205.53 L1687.96 1205.53 L1687.37 1205.53 L1686.79 1205.53 L1686.2 1205.53 L1685.62 1205.53 L1685.03 1205.53 L1684.44 1205.53 L1683.86 1205.53 L1683.27 1205.53 L1682.68 1205.53 L1682.1 1205.53 L1681.51 1205.53 L1680.92 1205.53 L1680.34 1205.53 L1679.75 1205.53 L1679.17 1205.53 L1678.58 1205.53 L1677.99 1205.53 L1677.41 1205.53 L1676.82 1205.53 L1676.23 1205.53 L1675.65 1205.53 L1675.06 1205.53 L1674.47 1205.53 L1673.89 1205.53 L1673.3 1205.53 L1672.71 1205.53 L1672.13 1205.53 L1671.54 1205.53 L1670.96 1205.53 L1670.37 1205.53 L1669.78 1205.53 L1669.2 1205.53 L1668.61 1205.53 L1668.02 1205.53 L1667.44 1205.53 L1666.85 1205.53 L1666.26 1205.53 L1665.68 1205.53 L1665.09 1205.53 L1664.5 1205.53 L1663.92 1205.53 L1663.33 1205.53 L1662.75 1205.53 L1662.16 1205.53 L1661.57 1205.53 L1660.99 1205.53 L1660.4 1205.53 L1659.81 1205.53 L1659.23 1205.53 L1658.64 1205.53 L1658.05 1205.53 L1657.47 1205.53 L1656.88 1205.53 L1656.29 1205.53 L1655.71 1205.53 L1655.12 1205.53 L1654.54 1205.53 L1653.95 1205.53 L1653.36 1205.53 L1652.78 1205.53 L1652.19 1205.53 L1651.6 1205.53 L1651.02 1205.53 L1650.43 1205.53 L1649.84 1205.53 L1649.26 1205.53 L1648.67 1205.53 L1648.09 1205.53 L1647.5 1205.53 L1646.91 1205.53 L1646.33 1205.53 L1645.74 1205.53 L1645.15 1205.53 L1644.57 1205.53 L1643.98 1205.53 L1643.39 1205.53 L1642.81 1205.53 L1642.22 1205.53 L1641.63 1205.53 L1641.05 1205.53 L1640.46 1205.53 L1639.88 1205.53 L1639.29 1205.53 L1638.7 1205.53 L1638.12 1205.53 L1637.53 1205.53 L1636.94 1205.53 L1636.36 1205.53 L1635.77 1205.53 L1635.18 1205.53 L1634.6 1205.53 L1634.01 1205.53 L1633.42 1205.53 L1632.84 1205.53 L1632.25 1205.53 L1631.67 1205.53 L1631.08 1205.53 L1630.49 1205.53 L1629.91 1205.53 L1629.32 1205.53 L1628.73 1205.53 L1628.15 1205.53 L1627.56 1205.53 L1626.97 1205.53 L1626.39 1205.53 L1625.8 1205.53 L1625.22 1205.53 L1624.63 1205.53 L1624.04 1205.53 L1623.46 1205.53 L1622.87 1205.53 L1622.28 1205.53 L1621.7 1205.53 L1621.11 1205.53 L1620.52 1205.53 L1619.94 1205.53 L1619.35 1205.53 L1618.76 1205.53 L1618.18 1205.53 L1617.59 1205.53 L1617.01 1205.53 L1616.42 1205.53 L1615.83 1205.53 L1615.25 1205.53 L1614.66 1205.53 L1614.07 1205.53 L1613.49 1205.53 L1612.9 1205.53 L1612.31 1205.53 L1611.73 1205.53 L1611.14 1205.53 L1610.55 1205.53 L1609.97 1205.53 L1609.38 1205.53 L1608.8 1205.53 L1608.21 1205.53 L1607.62 1205.53 L1607.04 1205.53 L1606.45 1205.53 L1605.86 1205.53 L1605.28 1205.53 L1604.69 1205.53 L1604.1 1205.53 L1603.52 1205.53 L1602.93 1205.53 L1602.34 1205.53 L1601.76 1205.53 L1601.17 1205.53 L1600.59 1205.53 L1600 1205.53 L1599.41 1205.53 L1598.83 1205.53 L1598.24 1205.53 L1597.65 1205.53 L1597.07 1205.53 L1596.48 1205.53 L1595.89 1205.53 L1595.31 1205.53 L1594.72 1205.53 L1594.14 1205.53 L1593.55 1205.53 L1592.96 1205.53 L1592.38 1205.53 L1591.79 1205.53 L1591.2 1205.53 L1590.62 1205.53 L1590.03 1205.53 L1589.44 1205.53 L1588.86 1205.53 L1588.27 1205.53 L1587.68 1205.53 L1587.1 1205.53 L1586.51 1205.53 L1585.93 1205.53 L1585.34 1205.53 L1584.75 1205.53 L1584.17 1205.53 L1583.58 1205.53 L1582.99 1205.53 L1582.41 1205.53 L1581.82 1205.53 L1581.23 1205.53 L1580.65 1205.53 L1580.06 1205.53 L1579.47 1205.53 L1578.89 1205.53 L1578.3 1205.53 L1577.72 1205.53 L1577.13 1205.53 L1576.54 1205.53 L1575.96 1205.53 L1575.37 1205.53 L1574.78 1205.53 L1574.2 1205.53 L1573.61 1205.53 L1573.02 1205.53 L1572.44 1205.53 L1571.85 1205.53 L1571.27 1205.53 L1570.68 1205.53 L1570.09 1205.53 L1569.51 1205.53 L1568.92 1205.53 L1568.33 1205.53 L1567.75 1205.53 L1567.16 1205.53 L1566.57 1205.53 L1565.99 1205.53 L1565.4 1205.53 L1564.81 1205.53 L1564.23 1205.53 L1563.64 1205.53 L1563.06 1205.53 L1562.47 1205.53 L1561.88 1205.53 L1561.3 1205.53 L1560.71 1205.53 L1560.12 1205.53 L1559.54 1205.53 L1558.95 1205.53 L1558.36 1205.53 L1557.78 1205.53 L1557.19 1205.53 L1556.6 1205.53 L1556.02 1205.53 L1555.43 1205.53 L1554.85 1205.53 L1554.26 1205.53 L1553.67 1205.53 L1553.09 1205.53 L1552.5 1205.53 L1551.91 1205.53 L1551.33 1205.53 L1550.74 1205.53 L1550.15 1205.53 L1549.57 1205.53 L1548.98 1205.53 L1548.4 1205.53 L1547.81 1205.53 L1547.22 1205.53 L1546.64 1205.53 L1546.05 1205.53 L1545.46 1205.53 L1544.88 1205.53 L1544.29 1205.53 L1543.7 1205.53 L1543.12 1205.53 L1542.53 1205.53 L1541.94 1205.53 L1541.36 1205.53 L1540.77 1205.53 L1540.19 1205.53 L1539.6 1205.53 L1539.01 1205.53 L1538.43 1205.53 L1537.84 1205.53 L1537.25 1205.53 L1536.67 1205.53 L1536.08 1205.53 L1535.49 1205.53 L1534.91 1205.53 L1534.32 1205.53 L1533.73 1205.53 L1533.15 1205.53 L1532.56 1205.53 L1531.98 1205.53 L1531.39 1205.53 L1530.8 1205.53 L1530.22 1205.53 L1529.63 1205.53 L1529.04 1205.53 L1528.46 1205.53 L1527.87 1205.53 L1527.28 1205.53 L1526.7 1205.53 L1526.11 1205.53 L1525.52 1205.53 L1524.94 1205.53 L1524.35 1205.53 L1523.77 1205.53 L1523.18 1205.53 L1522.59 1205.53 L1522.01 1205.53 L1521.42 1205.53 L1520.83 1205.53 L1520.25 1205.53 L1519.66 1205.53 L1519.07 1205.53 L1518.49 1205.53 L1517.9 1205.53 L1517.32 1205.53 L1516.73 1205.53 L1516.14 1205.53 L1515.56 1205.53 L1514.97 1205.53 L1514.38 1205.53 L1513.8 1205.53 L1513.21 1205.53 L1512.62 1205.53 L1512.04 1205.53 L1511.45 1205.53 L1510.86 1205.53 L1510.28 1205.53 L1509.69 1205.53 L1509.11 1205.53 L1508.52 1205.53 L1507.93 1205.53 L1507.35 1205.53 L1506.76 1205.53 L1506.17 1205.53 L1505.59 1205.53 L1505 1205.53 L1504.41 1205.53 L1503.83 1205.53 L1503.24 1205.53 L1502.65 1205.53 L1502.07 1205.53 L1501.48 1205.53 L1500.9 1205.53 L1500.31 1205.53 L1499.72 1205.53 L1499.14 1205.53 L1498.55 1205.53 L1497.96 1205.53 L1497.38 1205.53 L1496.79 1205.53 L1496.2 1205.53 L1495.62 1205.53 L1495.03 1205.53 L1494.45 1205.53 L1493.86 1205.53 L1493.27 1205.53 L1492.69 1205.53 L1492.1 1205.53 L1491.51 1205.53 L1490.93 1205.53 L1490.34 1205.53 L1489.75 1205.53 L1489.17 1205.53 L1488.58 1205.53 L1487.99 1205.53 L1487.41 1205.53 L1486.82 1205.53 L1486.24 1205.53 L1485.65 1205.53 L1485.06 1205.53 L1484.48 1205.53 L1483.89 1205.53 L1483.3 1205.53 L1482.72 1205.53 L1482.13 1205.53 L1481.54 1205.53 L1480.96 1205.53 L1480.37 1205.53 L1479.78 1205.53 L1479.2 1205.53 L1478.61 1205.53 L1478.03 1205.53 L1477.44 1205.53 L1476.85 1205.53 L1476.27 1205.53 L1475.68 1205.53 L1475.09 1205.53 L1474.51 1205.53 L1473.92 1205.53 L1473.33 1205.53 L1472.75 1205.53 L1472.16 1205.53 L1471.57 1205.53 L1470.99 1205.53 L1470.4 1205.53 L1469.82 1205.53 L1469.23 1205.53 L1468.64 1205.53 L1468.06 1205.53 L1467.47 1205.53 L1466.88 1205.53 L1466.3 1205.53 L1465.71 1205.53 L1465.12 1205.53 L1464.54 1205.53 L1463.95 1205.53 L1463.37 1205.53 L1462.78 1205.53 L1462.19 1205.53 L1461.61 1205.53 L1461.02 1205.53 L1460.43 1205.53 L1459.85 1205.53 L1459.26 1205.53 L1458.67 1205.53 L1458.09 1205.53 L1457.5 1205.53 L1456.91 1205.53 L1456.33 1205.53 L1455.74 1205.53 L1455.16 1205.53 L1454.57 1205.53 L1453.98 1205.53 L1453.4 1205.53 L1452.81 1205.53 L1452.22 1205.53 L1451.64 1205.53 L1451.05 1205.53 L1450.46 1205.53 L1449.88 1205.53 L1449.29 1205.53 L1448.7 1205.53 L1448.12 1205.53 L1447.53 1205.53 L1446.95 1205.53 L1446.36 1205.53 L1445.77 1205.53 L1445.19 1205.53 L1444.6 1205.53 L1444.01 1205.53 L1443.43 1205.53 L1442.84 1205.53 L1442.25 1205.53 L1441.67 1205.53 L1441.08 1205.53 L1440.5 1205.53 L1439.91 1205.53 L1439.32 1205.53 L1438.74 1205.53 L1438.15 1205.53 L1437.56 1205.53 L1436.98 1205.53 L1436.39 1205.53 L1435.8 1205.53 L1435.22 1205.53 L1434.63 1205.53 L1434.04 1205.53 L1433.46 1205.53 L1432.87 1205.53 L1432.29 1205.53 L1431.7 1205.53 L1431.11 1205.53 L1430.53 1205.53 L1429.94 1205.53 L1429.35 1205.53 L1428.77 1205.53 L1428.18 1205.53 L1427.59 1205.53 L1427.01 1205.53 L1426.42 1205.53 L1425.83 1205.53 L1425.25 1205.53 L1424.66 1205.53 L1424.08 1205.53 L1423.49 1205.53 L1422.9 1205.53 L1422.32 1205.53 L1421.73 1205.53 L1421.14 1205.53 L1420.56 1205.53 L1419.97 1205.53 L1419.38 1205.53 L1418.8 1205.53 L1418.21 1205.53 L1417.63 1205.53 L1417.04 1205.53 L1416.45 1205.53 L1415.87 1205.53 L1415.28 1205.53 L1414.69 1205.53 L1414.11 1205.53 L1413.52 1205.53 L1412.93 1205.53 L1412.35 1205.53 L1411.76 1205.53 L1411.17 1205.53 L1410.59 1205.53 L1410 1205.53 L1409.42 1205.53 L1408.83 1205.53 L1408.24 1205.53 L1407.66 1205.53 L1407.07 1205.53 L1406.48 1205.53 L1405.9 1205.53 L1405.31 1205.53 L1404.72 1205.53 L1404.14 1205.53 L1403.55 1205.53 L1402.96 1205.53 L1402.38 1205.53 L1401.79 1205.53 L1401.21 1205.53 L1400.62 1205.53 L1400.03 1205.53 L1399.45 1205.53 L1398.86 1205.53 L1398.27 1205.53 L1397.69 1205.53 L1397.1 1205.53 L1396.51 1205.53 L1395.93 1205.53 L1395.34 1205.53 L1394.75 1205.53 L1394.17 1205.53 L1393.58 1205.53 L1393 1205.53 L1392.41 1205.53 L1391.82 1205.53 L1391.24 1205.53 L1390.65 1205.53 L1390.06 1205.53 L1389.48 1205.53 L1388.89 1205.53 L1388.3 1205.53 L1387.72 1205.53 L1387.13 1205.53 L1386.55 1205.53 L1385.96 1205.53 L1385.37 1205.53 L1384.79 1205.53 L1384.2 1205.53 L1383.61 1205.53 L1383.03 1205.53 L1382.44 1205.53 L1381.85 1205.53 L1381.27 1205.53 L1380.68 1205.53 L1380.09 1205.53 L1379.51 1205.53 L1378.92 1205.53 L1378.34 1205.53 L1377.75 1205.53 L1377.16 1205.53 L1376.58 1205.53 L1375.99 1205.53 L1375.4 1205.53 L1374.82 1205.53 L1374.23 1205.53 L1373.64 1205.53 L1373.06 1205.53 L1372.47 1205.53 L1371.88 1205.53 L1371.3 1205.53 L1370.71 1205.53 L1370.13 1205.53 L1369.54 1205.53 L1368.95 1205.53 L1368.37 1205.53 L1367.78 1205.53 L1367.19 1205.53 L1366.61 1205.53 L1366.02 1205.53 L1365.43 1205.53 L1364.85 1205.53 L1364.26 1205.53 L1363.68 1205.53 L1363.09 1205.53 L1362.5 1205.53 L1361.92 1205.53 L1361.33 1205.53 L1360.74 1205.53 L1360.16 1205.53 L1359.57 1205.53 L1358.98 1205.53 L1358.4 1205.53 L1357.81 1205.53 L1357.22 1205.53 L1356.64 1205.53 L1356.05 1205.53 L1355.47 1205.53 L1354.88 1205.53 L1354.29 1205.53 L1353.71 1205.53 L1353.12 1205.53 L1352.53 1205.53 L1351.95 1205.53 L1351.36 1205.53 L1350.77 1205.53 L1350.19 1205.53 L1349.6 1205.53 L1349.01 1205.53 L1348.43 1205.53 L1347.84 1205.53 L1347.26 1205.53 L1346.67 1205.53 L1346.08 1205.53 L1345.5 1205.53 L1344.91 1205.53 L1344.32 1205.53 L1343.74 1205.53 L1343.15 1205.53 L1342.56 1205.53 L1341.98 1205.53 L1341.39 1205.53 L1340.8 1205.53 L1340.22 1205.53 L1339.63 1205.53 L1339.05 1205.53 L1338.46 1205.53 L1337.87 1205.53 L1337.29 1205.53 L1336.7 1205.53 L1336.11 1205.53 L1335.53 1205.53 L1334.94 1205.53 L1334.35 1205.53 L1333.77 1205.53 L1333.18 1205.53 L1332.6 1205.53 L1332.01 1205.53 L1331.42 1205.53 L1330.84 1205.53 L1330.25 1205.53 L1329.66 1205.53 L1329.08 1205.53 L1328.49 1205.53 L1327.9 1205.53 L1327.32 1205.53 L1326.73 1205.53 L1326.14 1205.53 L1325.56 1205.53 L1324.97 1205.53 L1324.39 1205.53 L1323.8 1205.53 L1323.21 1205.53 L1322.63 1205.53 L1322.04 1205.53 L1321.45 1205.53 L1320.87 1205.53 L1320.28 1205.53 L1319.69 1205.53 L1319.11 1205.53 L1318.52 1205.53 L1317.93 1205.53 L1317.35 1205.53 L1316.76 1205.53 L1316.18 1205.53 L1315.59 1205.53 L1315 1205.53 L1314.42 1205.53 L1313.83 1205.53 L1313.24 1205.53 L1312.66 1205.53 L1312.07 1205.53 L1311.48 1205.53 L1310.9 1205.53 L1310.31 1205.53 L1309.73 1205.53 L1309.14 1205.53 L1308.55 1205.53 L1307.97 1205.53 L1307.38 1205.53 L1306.79 1205.53 L1306.21 1205.53 L1305.62 1205.53 L1305.03 1205.53 L1304.45 1205.53 L1303.86 1205.53 L1303.27 1205.53 L1302.69 1205.53 L1302.1 1205.53 L1301.52 1205.53 L1300.93 1205.53 L1300.34 1205.53 L1299.76 1205.53 L1299.17 1205.53 L1298.58 1205.53 L1298 1205.53 L1297.41 1205.53 L1296.82 1205.53 L1296.24 1205.53 L1295.65 1205.53 L1295.06 1205.53 L1294.48 1205.53 L1293.89 1205.53 L1293.31 1205.53 L1292.72 1205.53 L1292.13 1205.53 L1291.55 1205.53 L1290.96 1205.53 L1290.37 1205.53 L1289.79 1205.53 L1289.2 1205.53 L1288.61 1205.53 L1288.03 1205.53 L1287.44 1205.53 L1286.86 1205.53 L1286.27 1205.53 L1285.68 1205.53 L1285.1 1205.53 L1284.51 1205.53 L1283.92 1205.53 L1283.34 1205.53 L1282.75 1205.53 L1282.16 1205.53 L1281.58 1205.53 L1280.99 1205.53 L1280.4 1205.53 L1279.82 1205.53 L1279.23 1205.53 L1278.65 1205.53 L1278.06 1205.53 L1277.47 1205.53 L1276.89 1205.53 L1276.3 1205.53 L1275.71 1205.53 L1275.13 1205.53 L1274.54 1205.53 L1273.95 1205.53 L1273.37 1205.53 L1272.78 1205.53 L1272.19 1205.53 L1271.61 1205.53 L1271.02 1205.53 L1270.44 1205.53 L1269.85 1205.53 L1269.26 1205.53 L1268.68 1205.53 L1268.09 1205.53 L1267.5 1205.53 L1266.92 1205.53 L1266.33 1205.53 L1265.74 1205.53 L1265.16 1205.53 L1264.57 1205.53 L1263.98 1205.53 L1263.4 1205.53 L1262.81 1205.53 L1262.23 1205.53 L1261.64 1205.53 L1261.05 1205.53 L1260.47 1205.53 L1259.88 1205.53 L1259.29 1205.53 L1258.71 1205.53 L1258.12 1205.53 L1257.53 1205.53 L1256.95 1205.53 L1256.36 1205.53 L1255.78 1205.53 L1255.19 1205.53 L1254.6 1205.53 L1254.02 1205.53 L1253.43 1205.53 L1252.84 1205.53 L1252.26 1205.53 L1251.67 1205.53 L1251.08 1205.53 L1250.5 1205.53 L1249.91 1205.53 L1249.32 1205.53 L1248.74 1205.53 L1248.15 1205.53 L1247.57 1205.53 L1246.98 1205.53 L1246.39 1205.53 L1245.81 1205.53 L1245.22 1205.53 L1244.63 1205.53 L1244.05 1205.53 L1243.46 1205.53 L1242.87 1205.53 L1242.29 1205.53 L1241.7 1205.53 L1241.11 1205.53 L1240.53 1205.53 L1239.94 1205.53 L1239.36 1205.53 L1238.77 1205.53 L1238.18 1205.53 L1237.6 1205.53 L1237.01 1205.53 L1236.42 1205.53 L1235.84 1205.53 L1235.25 1205.53 L1234.66 1205.53 L1234.08 1205.53 L1233.49 1205.53 L1232.91 1205.53 L1232.32 1205.53 L1231.73 1205.53 L1231.15 1205.53 L1230.56 1205.53 L1229.97 1205.53 L1229.39 1205.53 L1228.8 1205.53 L1228.21 1205.53 L1227.63 1205.53 L1227.04 1205.53 L1226.45 1205.53 L1225.87 1205.53 L1225.28 1205.53 L1224.7 1205.53 L1224.11 1205.53 L1223.52 1205.53 L1222.94 1205.53 L1222.35 1205.53 L1221.76 1205.53 L1221.18 1205.53 L1220.59 1205.53 L1220 1205.53 L1219.42 1205.53 L1218.83 1205.53 L1218.24 1205.53 L1217.66 1205.53 L1217.07 1205.53 L1216.49 1205.53 L1215.9 1205.53 L1215.31 1205.53 L1214.73 1205.53 L1214.14 1205.53 L1213.55 1205.53 L1212.97 1205.53 L1212.38 1205.53 L1211.79 1205.53 L1211.21 1205.53 L1210.62 1205.53 L1210.03 1205.53 L1209.45 1205.53 L1208.86 1205.53 L1208.28 1205.53 L1207.69 1205.53 L1207.1 1205.53 L1206.52 1205.53 L1205.93 1205.53 L1205.34 1205.53 L1204.76 1205.53 L1204.17 1205.53 L1203.58 1205.53 L1203 1205.53 L1202.41 1205.53 L1201.83 1205.53 L1201.24 1205.53 L1200.65 1205.53 L1200.07 1205.53 L1199.48 1205.53 L1198.89 1205.53 L1198.31 1205.53 L1197.72 1205.53 L1197.13 1205.53 L1196.55 1205.53 L1195.96 1205.53 L1195.37 1205.53 L1194.79 1205.53 L1194.2 1205.53 L1193.62 1205.53 L1193.03 1205.53 L1192.44 1205.53 L1191.86 1205.53 L1191.27 1205.53 L1190.68 1205.53 L1190.1 1205.53 L1189.51 1205.53 L1188.92 1205.53 L1188.34 1205.53 L1187.75 1205.53 L1187.16 1205.53 L1186.58 1205.53 L1185.99 1205.53 L1185.41 1205.53 L1184.82 1205.53 L1184.23 1205.53 L1183.65 1205.53 L1183.06 1205.53 L1182.47 1205.53 L1181.89 1205.53 L1181.3 1205.53 L1180.71 1205.53 L1180.13 1205.53 L1179.54 1205.53 L1178.96 1205.53 L1178.37 1205.53 L1177.78 1205.53 L1177.2 1205.53 L1176.61 1205.53 L1176.02 1205.53 L1175.44 1205.53 L1174.85 1205.53 L1174.26 1205.53 L1173.68 1205.53 L1173.09 1205.53 L1172.5 1205.53 L1171.92 1205.53 L1171.33 1205.53 L1170.75 1205.53 L1170.16 1205.53 L1169.57 1205.53 L1168.99 1205.53 L1168.4 1205.53 L1167.81 1205.53 L1167.23 1205.53 L1166.64 1205.53 L1166.05 1205.53 L1165.47 1205.53 L1164.88 1205.53 L1164.29 1205.53 L1163.71 1205.53 L1163.12 1205.53 L1162.54 1205.53 L1161.95 1205.53 L1161.36 1205.53 L1160.78 1205.53 L1160.19 1205.53 L1159.6 1205.53 L1159.02 1205.53 L1158.43 1205.53 L1157.84 1205.53 L1157.26 1205.53 L1156.67 1205.53 L1156.09 1205.53 L1155.5 1205.53 L1154.91 1205.53 L1154.33 1205.53 L1153.74 1205.53 L1153.15 1205.53 L1152.57 1205.53 L1151.98 1205.53 L1151.39 1205.53 L1150.81 1205.53 L1150.22 1205.53 L1149.63 1205.53 L1149.05 1205.53 L1148.46 1205.53 L1147.88 1205.53 L1147.29 1205.53 L1146.7 1205.53 L1146.12 1205.53 L1145.53 1205.53 L1144.94 1205.53 L1144.36 1205.53 L1143.77 1205.53 L1143.18 1205.53 L1142.6 1205.53 L1142.01 1205.53 L1141.42 1205.53 L1140.84 1205.53 L1140.25 1205.53 L1139.67 1205.53 L1139.08 1205.53 L1138.49 1205.53 L1137.91 1205.53 L1137.32 1205.53 L1136.73 1205.53 L1136.15 1205.53 L1135.56 1205.53 L1134.97 1205.53 L1134.39 1205.53 L1133.8 1205.53 L1133.21 1205.53 L1132.63 1205.53 L1132.04 1205.53 L1131.46 1205.53 L1130.87 1205.53 L1130.28 1205.53 L1129.7 1205.53 L1129.11 1205.53 L1128.52 1205.53 L1127.94 1205.53 L1127.35 1205.53 L1126.76 1205.53 L1126.18 1205.53 L1125.59 1205.53 L1125.01 1205.53 L1124.42 1205.53 L1123.83 1205.53 L1123.25 1205.53 L1122.66 1205.53 L1122.07 1205.53 L1121.49 1205.53 L1120.9 1205.53 L1120.31 1205.53 L1119.73 1205.53 L1119.14 1205.53 L1118.55 1205.53 L1117.97 1205.53 L1117.38 1205.53 L1116.8 1205.53 L1116.21 1205.53 L1115.62 1205.53 L1115.04 1205.53 L1114.45 1205.53 L1113.86 1205.53 L1113.28 1205.53 L1112.69 1205.53 L1112.1 1205.53 L1111.52 1205.53 L1110.93 1205.53 L1110.34 1205.53 L1109.76 1205.53 L1109.17 1205.53 L1108.59 1205.53 L1108 1205.53 L1107.41 1205.53 L1106.83 1205.53 L1106.24 1205.53 L1105.65 1205.53 L1105.07 1205.53 L1104.48 1205.53 L1103.89 1205.53 L1103.31 1205.53 L1102.72 1205.53 L1102.14 1205.53 L1101.55 1205.53 L1100.96 1205.53 L1100.38 1205.53 L1099.79 1205.53 L1099.2 1205.53 L1098.62 1205.53 L1098.03 1205.53 L1097.44 1205.53 L1096.86 1205.53 L1096.27 1205.53 L1095.68 1205.53 L1095.1 1205.53 L1094.51 1205.53 L1093.93 1205.53 L1093.34 1205.53 L1092.75 1205.53 L1092.17 1205.53 L1091.58 1205.53 L1090.99 1205.53 L1090.41 1205.53 L1089.82 1205.53 L1089.23 1205.53 L1088.65 1205.53 L1088.06 1205.53 L1087.47 1205.53 L1086.89 1205.53 L1086.3 1205.53 L1085.72 1205.53 L1085.13 1205.53 L1084.54 1205.53 L1083.96 1205.53 L1083.37 1205.53 L1082.78 1205.53 L1082.2 1205.53 L1081.61 1205.53 L1081.02 1205.53 L1080.44 1205.53 L1079.85 1205.53 L1079.26 1205.53 L1078.68 1205.53 L1078.09 1205.53 L1077.51 1205.53 L1076.92 1205.53 L1076.33 1205.53 L1075.75 1205.53 L1075.16 1205.53 L1074.57 1205.53 L1073.99 1205.53 L1073.4 1205.53 L1072.81 1205.53 L1072.23 1205.53 L1071.64 1205.53 L1071.06 1205.53 L1070.47 1205.53 L1069.88 1205.53 L1069.3 1205.53 L1068.71 1205.53 L1068.12 1205.53 L1067.54 1205.53 L1066.95 1205.53 L1066.36 1205.53 L1065.78 1205.53 L1065.19 1205.53 L1064.6 1205.53 L1064.02 1205.53 L1063.43 1205.53 L1062.85 1205.53 L1062.26 1205.53 L1061.67 1205.53 L1061.09 1205.53 L1060.5 1205.53 L1059.91 1205.53 L1059.33 1205.53 L1058.74 1205.53 L1058.15 1205.53 L1057.57 1205.53 L1056.98 1205.53 L1056.39 1205.53 L1055.81 1205.53 L1055.22 1205.53 L1054.64 1205.53 L1054.05 1205.53 L1053.46 1205.53 L1052.88 1205.53 L1052.29 1205.53 L1051.7 1205.53 L1051.12 1205.53 L1050.53 1205.53 L1049.94 1205.53 L1049.36 1205.53 L1048.77 1205.53 L1048.19 1205.53 L1047.6 1205.53 L1047.01 1205.53 L1046.43 1205.53 L1045.84 1205.53 L1045.25 1205.53 L1044.67 1205.53 L1044.08 1205.53 L1043.49 1205.53 L1042.91 1205.53 L1042.32 1205.53 L1041.73 1205.53 L1041.15 1205.53 L1040.56 1205.53 L1039.98 1205.53 L1039.39 1205.53 L1038.8 1205.53 L1038.22 1205.53 L1037.63 1205.53 L1037.04 1205.53 L1036.46 1205.53 L1035.87 1205.53 L1035.28 1205.53 L1034.7 1205.53 L1034.11 1205.53 L1033.52 1205.53 L1032.94 1205.53 L1032.35 1205.53 L1031.77 1205.53 L1031.18 1205.53 L1030.59 1205.53 L1030.01 1205.53 L1029.42 1205.53 L1028.83 1205.53 L1028.25 1205.53 L1027.66 1205.53 L1027.07 1205.53 L1026.49 1205.53 L1025.9 1205.53 L1025.32 1205.53 L1024.73 1205.53 L1024.14 1205.53 L1023.56 1205.53 L1022.97 1205.53 L1022.38 1205.53 L1021.8 1205.53 L1021.21 1205.53 L1020.62 1205.53 L1020.04 1205.53 L1019.45 1205.53 L1018.86 1205.53 L1018.28 1205.53 L1017.69 1205.53 L1017.11 1205.53 L1016.52 1205.53 L1015.93 1205.53 L1015.35 1205.53 L1014.76 1205.53 L1014.17 1205.53 L1013.59 1205.53 L1013 1205.53 L1012.41 1205.53 L1011.83 1205.53 L1011.24 1205.53 L1010.65 1205.53 L1010.07 1205.53 L1009.48 1205.53 L1008.9 1205.53 L1008.31 1205.53 L1007.72 1205.53 L1007.14 1205.53 L1006.55 1205.53 L1005.96 1205.53 L1005.38 1205.53 L1004.79 1205.53 L1004.2 1205.53 L1003.62 1205.53 L1003.03 1205.53 L1002.44 1205.53 L1001.86 1205.53 L1001.27 1205.53 L1000.69 1205.53 L1000.1 1205.53 L999.513 1205.53 L998.926 1205.53 L998.34 1205.53 L997.754 1205.53 L997.167 1205.53 L996.581 1205.53 L995.994 1205.53 L995.408 1205.53 L994.822 1205.53 L994.235 1205.53 L993.649 1205.53 L993.062 1205.53 L992.476 1205.53 L991.889 1205.53 L991.303 1205.53 L990.717 1205.53 L990.13 1205.53 L989.544 1205.53 L988.957 1205.53 L988.371 1205.53 L987.785 1205.53 L987.198 1205.53 L986.612 1205.53 L986.025 1205.53  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1205.63 986.612,1205.63 987.198,1205.63 987.785,1205.63 988.371,1205.63 988.957,1205.63 989.544,1205.63 990.13,1205.63 990.717,1205.63 991.303,1205.63 991.889,1205.63 992.476,1205.63 993.062,1205.63 993.649,1205.63 994.235,1205.63 994.822,1205.63 995.408,1205.63 995.994,1205.63 996.581,1205.63 997.167,1205.63 997.754,1205.63 998.34,1205.63 998.926,1205.63 999.513,1205.63 1000.1,1205.63 1000.69,1205.63 1001.27,1205.63 1001.86,1205.63 1002.44,1205.63 1003.03,1205.63 1003.62,1205.63 1004.2,1205.63 1004.79,1205.63 1005.38,1205.63 1005.96,1205.63 1006.55,1205.63 1007.14,1205.63 1007.72,1205.63 1008.31,1205.63 1008.9,1205.63 1009.48,1205.63 1010.07,1205.63 1010.65,1205.63 1011.24,1205.63 1011.83,1205.63 1012.41,1205.63 1013,1205.63 1013.59,1205.63 1014.17,1205.63 1014.76,1205.63 1015.35,1205.63 1015.93,1205.63 1016.52,1205.63 1017.11,1205.63 1017.69,1205.63 1018.28,1205.63 1018.86,1205.63 1019.45,1205.63 1020.04,1205.63 1020.62,1205.63 1021.21,1205.63 1021.8,1205.63 1022.38,1205.63 1022.97,1205.63 1023.56,1205.63 1024.14,1205.63 1024.73,1205.63 1025.32,1205.63 1025.9,1205.63 1026.49,1205.63 1027.07,1205.63 1027.66,1205.63 1028.25,1205.63 1028.83,1205.63 1029.42,1205.63 1030.01,1205.63 1030.59,1205.63 1031.18,1205.63 1031.77,1205.63 1032.35,1205.63 1032.94,1205.63 1033.52,1205.63 1034.11,1205.63 1034.7,1205.63 1035.28,1205.63 1035.87,1205.63 1036.46,1205.63 1037.04,1205.63 1037.63,1205.63 1038.22,1205.63 1038.8,1205.63 1039.39,1205.63 1039.98,1205.63 1040.56,1205.63 1041.15,1205.63 1041.73,1205.63 1042.32,1205.63 1042.91,1205.63 1043.49,1205.63 1044.08,1205.63 1044.67,1205.63 1045.25,1205.63 1045.84,1205.63 1046.43,1205.63 1047.01,1205.63 1047.6,1205.63 1048.19,1205.63 1048.77,1205.63 1049.36,1205.63 1049.94,1205.63 1050.53,1205.63 1051.12,1205.63 1051.7,1205.63 1052.29,1205.63 1052.88,1205.63 1053.46,1205.63 1054.05,1205.63 1054.64,1205.63 1055.22,1205.63 1055.81,1205.63 1056.39,1205.63 1056.98,1205.63 1057.57,1205.63 1058.15,1205.63 1058.74,1205.63 1059.33,1205.63 1059.91,1205.63 1060.5,1205.63 1061.09,1205.63 1061.67,1205.63 1062.26,1205.63 1062.85,1205.63 1063.43,1205.63 1064.02,1205.63 1064.6,1205.63 1065.19,1205.63 1065.78,1205.63 1066.36,1205.63 1066.95,1205.63 1067.54,1205.63 1068.12,1205.63 1068.71,1205.63 1069.3,1205.63 1069.88,1205.63 1070.47,1205.63 1071.06,1205.63 1071.64,1205.63 1072.23,1205.63 1072.81,1205.63 1073.4,1205.63 1073.99,1205.63 1074.57,1205.63 1075.16,1205.63 1075.75,1205.63 1076.33,1205.63 1076.92,1205.63 1077.51,1205.63 1078.09,1205.63 1078.68,1205.63 1079.26,1205.63 1079.85,1205.63 1080.44,1205.63 1081.02,1205.63 1081.61,1205.63 1082.2,1205.63 1082.78,1205.63 1083.37,1205.63 1083.96,1205.63 1084.54,1205.63 1085.13,1205.63 1085.72,1205.63 1086.3,1205.63 1086.89,1205.63 1087.47,1205.63 1088.06,1205.63 1088.65,1205.63 1089.23,1205.63 1089.82,1205.63 1090.41,1205.63 1090.99,1205.63 1091.58,1205.63 1092.17,1205.63 1092.75,1205.63 1093.34,1205.63 1093.93,1205.63 1094.51,1205.63 1095.1,1205.63 1095.68,1205.63 1096.27,1205.63 1096.86,1205.63 1097.44,1205.63 1098.03,1205.63 1098.62,1205.63 1099.2,1205.63 1099.79,1205.63 1100.38,1205.63 1100.96,1205.63 1101.55,1205.63 1102.14,1205.63 1102.72,1205.63 1103.31,1205.63 1103.89,1205.63 1104.48,1205.63 1105.07,1205.63 1105.65,1205.63 1106.24,1205.63 1106.83,1205.63 1107.41,1205.63 1108,1205.63 1108.59,1205.63 1109.17,1205.63 1109.76,1205.63 1110.34,1205.63 1110.93,1205.63 1111.52,1205.63 1112.1,1205.63 1112.69,1205.63 1113.28,1205.63 1113.86,1205.63 1114.45,1205.63 1115.04,1205.63 1115.62,1205.63 1116.21,1205.63 1116.8,1205.63 1117.38,1205.63 1117.97,1205.63 1118.55,1205.63 1119.14,1205.63 1119.73,1205.63 1120.31,1205.63 1120.9,1205.63 1121.49,1205.63 1122.07,1205.63 1122.66,1205.63 1123.25,1205.63 1123.83,1205.63 1124.42,1205.63 1125.01,1205.63 1125.59,1205.63 1126.18,1205.63 1126.76,1205.63 1127.35,1205.63 1127.94,1205.63 1128.52,1205.63 1129.11,1205.63 1129.7,1205.63 1130.28,1205.63 1130.87,1205.63 1131.46,1205.63 1132.04,1205.63 1132.63,1205.63 1133.21,1205.63 1133.8,1205.63 1134.39,1205.63 1134.97,1205.63 1135.56,1205.63 1136.15,1205.63 1136.73,1205.63 1137.32,1205.63 1137.91,1205.63 1138.49,1205.63 1139.08,1205.63 1139.67,1205.63 1140.25,1205.63 1140.84,1205.63 1141.42,1205.63 1142.01,1205.63 1142.6,1205.63 1143.18,1205.63 1143.77,1205.63 1144.36,1205.63 1144.94,1205.63 1145.53,1205.63 1146.12,1205.63 1146.7,1205.63 1147.29,1205.63 1147.88,1205.63 1148.46,1205.63 1149.05,1205.63 1149.63,1205.63 1150.22,1205.63 1150.81,1205.63 1151.39,1205.63 1151.98,1205.63 1152.57,1205.63 1153.15,1205.63 1153.74,1205.63 1154.33,1205.63 1154.91,1205.63 1155.5,1205.63 1156.09,1205.63 1156.67,1205.63 1157.26,1205.63 1157.84,1205.63 1158.43,1205.63 1159.02,1205.63 1159.6,1205.63 1160.19,1205.63 1160.78,1205.63 1161.36,1205.63 1161.95,1205.63 1162.54,1205.63 1163.12,1205.63 1163.71,1205.63 1164.29,1205.63 1164.88,1205.63 1165.47,1205.63 1166.05,1205.63 1166.64,1205.63 1167.23,1205.63 1167.81,1205.63 1168.4,1205.63 1168.99,1205.63 1169.57,1205.63 1170.16,1205.63 1170.75,1205.63 1171.33,1205.63 1171.92,1205.63 1172.5,1205.63 1173.09,1205.63 1173.68,1205.63 1174.26,1205.63 1174.85,1205.63 1175.44,1205.63 1176.02,1205.63 1176.61,1205.63 1177.2,1205.63 1177.78,1205.63 1178.37,1205.63 1178.96,1205.63 1179.54,1205.63 1180.13,1205.63 1180.71,1205.63 1181.3,1205.63 1181.89,1205.63 1182.47,1205.63 1183.06,1205.63 1183.65,1205.63 1184.23,1205.63 1184.82,1205.63 1185.41,1205.63 1185.99,1205.63 1186.58,1205.63 1187.16,1205.63 1187.75,1205.63 1188.34,1205.63 1188.92,1205.63 1189.51,1205.63 1190.1,1205.63 1190.68,1205.63 1191.27,1205.63 1191.86,1205.63 1192.44,1205.63 1193.03,1205.63 1193.62,1205.63 1194.2,1205.63 1194.79,1205.63 1195.37,1205.63 1195.96,1205.63 1196.55,1205.63 1197.13,1205.63 1197.72,1205.63 1198.31,1205.63 1198.89,1205.63 1199.48,1205.63 1200.07,1205.63 1200.65,1205.63 1201.24,1205.63 1201.83,1205.63 1202.41,1205.63 1203,1205.63 1203.58,1205.63 1204.17,1205.63 1204.76,1205.63 1205.34,1205.63 1205.93,1205.63 1206.52,1205.63 1207.1,1205.63 1207.69,1205.63 1208.28,1205.63 1208.86,1205.63 1209.45,1205.63 1210.03,1205.63 1210.62,1205.63 1211.21,1205.63 1211.79,1205.63 1212.38,1205.63 1212.97,1205.63 1213.55,1205.63 1214.14,1205.63 1214.73,1205.63 1215.31,1205.63 1215.9,1205.63 1216.49,1205.63 1217.07,1205.63 1217.66,1205.63 1218.24,1205.63 1218.83,1205.63 1219.42,1205.63 1220,1205.63 1220.59,1205.63 1221.18,1205.63 1221.76,1205.63 1222.35,1205.63 1222.94,1205.63 1223.52,1205.63 1224.11,1205.63 1224.7,1205.63 1225.28,1205.63 1225.87,1205.63 1226.45,1205.63 1227.04,1205.63 1227.63,1205.63 1228.21,1205.63 1228.8,1205.63 1229.39,1205.63 1229.97,1205.63 1230.56,1205.63 1231.15,1205.63 1231.73,1205.63 1232.32,1205.63 1232.91,1205.63 1233.49,1205.63 1234.08,1205.63 1234.66,1205.63 1235.25,1205.63 1235.84,1205.63 1236.42,1205.63 1237.01,1205.63 1237.6,1205.63 1238.18,1205.63 1238.77,1205.63 1239.36,1205.63 1239.94,1205.63 1240.53,1205.63 1241.11,1205.63 1241.7,1205.63 1242.29,1205.63 1242.87,1205.63 1243.46,1205.63 1244.05,1205.63 1244.63,1205.63 1245.22,1205.63 1245.81,1205.63 1246.39,1205.63 1246.98,1205.63 1247.57,1205.63 1248.15,1205.63 1248.74,1205.63 1249.32,1205.63 1249.91,1205.63 1250.5,1205.63 1251.08,1205.63 1251.67,1205.63 1252.26,1205.63 1252.84,1205.63 1253.43,1205.63 1254.02,1205.63 1254.6,1205.63 1255.19,1205.63 1255.78,1205.63 1256.36,1205.63 1256.95,1205.63 1257.53,1205.63 1258.12,1205.63 1258.71,1205.63 1259.29,1205.63 1259.88,1205.63 1260.47,1205.63 1261.05,1205.63 1261.64,1205.63 1262.23,1205.63 1262.81,1205.63 1263.4,1205.63 1263.98,1205.63 1264.57,1205.63 1265.16,1205.63 1265.74,1205.63 1266.33,1205.63 1266.92,1205.63 1267.5,1205.63 1268.09,1205.63 1268.68,1205.63 1269.26,1205.63 1269.85,1205.63 1270.44,1205.63 1271.02,1205.63 1271.61,1205.63 1272.19,1205.63 1272.78,1205.63 1273.37,1205.63 1273.95,1205.63 1274.54,1205.63 1275.13,1205.63 1275.71,1205.63 1276.3,1205.63 1276.89,1205.63 1277.47,1205.63 1278.06,1205.63 1278.65,1205.63 1279.23,1205.63 1279.82,1205.63 1280.4,1205.63 1280.99,1205.63 1281.58,1205.63 1282.16,1205.63 1282.75,1205.63 1283.34,1205.63 1283.92,1205.63 1284.51,1205.63 1285.1,1205.63 1285.68,1205.63 1286.27,1205.63 1286.86,1205.63 1287.44,1205.63 1288.03,1205.63 1288.61,1205.63 1289.2,1205.63 1289.79,1205.63 1290.37,1205.63 1290.96,1205.63 1291.55,1205.63 1292.13,1205.63 1292.72,1205.63 1293.31,1205.63 1293.89,1205.63 1294.48,1205.63 1295.06,1205.63 1295.65,1205.63 1296.24,1205.63 1296.82,1205.63 1297.41,1205.63 1298,1205.63 1298.58,1205.63 1299.17,1205.63 1299.76,1205.63 1300.34,1205.63 1300.93,1205.63 1301.52,1205.63 1302.1,1205.63 1302.69,1205.63 1303.27,1205.63 1303.86,1205.63 1304.45,1205.63 1305.03,1205.63 1305.62,1205.63 1306.21,1205.63 1306.79,1205.63 1307.38,1205.63 1307.97,1205.63 1308.55,1205.63 1309.14,1205.63 1309.73,1205.63 1310.31,1205.63 1310.9,1205.63 1311.48,1205.63 1312.07,1205.63 1312.66,1205.63 1313.24,1205.63 1313.83,1205.63 1314.42,1205.63 1315,1205.63 1315.59,1205.63 1316.18,1205.63 1316.76,1205.63 1317.35,1205.63 1317.93,1205.63 1318.52,1205.63 1319.11,1205.63 1319.69,1205.63 1320.28,1205.63 1320.87,1205.63 1321.45,1205.63 1322.04,1205.63 1322.63,1205.63 1323.21,1205.63 1323.8,1205.63 1324.39,1205.63 1324.97,1205.63 1325.56,1205.63 1326.14,1205.63 1326.73,1205.63 1327.32,1205.63 1327.9,1205.63 1328.49,1205.63 1329.08,1205.63 1329.66,1205.63 1330.25,1205.63 1330.84,1205.63 1331.42,1205.63 1332.01,1205.63 1332.6,1205.63 1333.18,1205.63 1333.77,1205.63 1334.35,1205.63 1334.94,1205.63 1335.53,1205.63 1336.11,1205.63 1336.7,1205.63 1337.29,1205.63 1337.87,1205.63 1338.46,1205.63 1339.05,1205.63 1339.63,1205.63 1340.22,1205.63 1340.8,1205.63 1341.39,1205.63 1341.98,1205.63 1342.56,1205.63 1343.15,1205.63 1343.74,1205.63 1344.32,1205.63 1344.91,1205.63 1345.5,1205.63 1346.08,1205.63 1346.67,1205.63 1347.26,1205.63 1347.84,1205.63 1348.43,1205.63 1349.01,1205.63 1349.6,1205.63 1350.19,1205.63 1350.77,1205.63 1351.36,1205.63 1351.95,1205.63 1352.53,1205.63 1353.12,1205.63 1353.71,1205.63 1354.29,1205.63 1354.88,1205.63 1355.47,1205.63 1356.05,1205.63 1356.64,1205.63 1357.22,1205.63 1357.81,1205.63 1358.4,1205.63 1358.98,1205.63 1359.57,1205.63 1360.16,1205.63 1360.74,1205.63 1361.33,1205.63 1361.92,1205.63 1362.5,1205.63 1363.09,1205.63 1363.68,1205.63 1364.26,1205.63 1364.85,1205.63 1365.43,1205.63 1366.02,1205.63 1366.61,1205.63 1367.19,1205.63 1367.78,1205.63 1368.37,1205.63 1368.95,1205.63 1369.54,1205.63 1370.13,1205.63 1370.71,1205.63 1371.3,1205.63 1371.88,1205.63 1372.47,1205.63 1373.06,1205.63 1373.64,1205.63 1374.23,1205.63 1374.82,1205.63 1375.4,1205.63 1375.99,1205.63 1376.58,1205.63 1377.16,1205.63 1377.75,1205.63 1378.34,1205.63 1378.92,1205.63 1379.51,1205.63 1380.09,1205.63 1380.68,1205.63 1381.27,1205.63 1381.85,1205.63 1382.44,1205.63 1383.03,1205.63 1383.61,1205.63 1384.2,1205.63 1384.79,1205.63 1385.37,1205.63 1385.96,1205.63 1386.55,1205.63 1387.13,1205.63 1387.72,1205.63 1388.3,1205.63 1388.89,1205.63 1389.48,1205.63 1390.06,1205.63 1390.65,1205.63 1391.24,1205.63 1391.82,1205.63 1392.41,1205.63 1393,1205.63 1393.58,1205.63 1394.17,1205.63 1394.75,1205.63 1395.34,1205.63 1395.93,1205.63 1396.51,1205.63 1397.1,1205.63 1397.69,1205.63 1398.27,1205.63 1398.86,1205.63 1399.45,1205.63 1400.03,1205.63 1400.62,1205.63 1401.21,1205.63 1401.79,1205.63 1402.38,1205.63 1402.96,1205.63 1403.55,1205.63 1404.14,1205.63 1404.72,1205.63 1405.31,1205.63 1405.9,1205.63 1406.48,1205.63 1407.07,1205.63 1407.66,1205.63 1408.24,1205.63 1408.83,1205.63 1409.42,1205.63 1410,1205.63 1410.59,1205.63 1411.17,1205.63 1411.76,1205.63 1412.35,1205.63 1412.93,1205.63 1413.52,1205.63 1414.11,1205.63 1414.69,1205.63 1415.28,1205.63 1415.87,1205.63 1416.45,1205.63 1417.04,1205.63 1417.63,1205.63 1418.21,1205.63 1418.8,1205.63 1419.38,1205.63 1419.97,1205.63 1420.56,1205.63 1421.14,1205.63 1421.73,1205.63 1422.32,1205.63 1422.9,1205.63 1423.49,1205.63 1424.08,1205.63 1424.66,1205.63 1425.25,1205.63 1425.83,1205.63 1426.42,1205.63 1427.01,1205.63 1427.59,1205.63 1428.18,1205.63 1428.77,1205.63 1429.35,1205.63 1429.94,1205.63 1430.53,1205.63 1431.11,1205.63 1431.7,1205.63 1432.29,1205.63 1432.87,1205.63 1433.46,1205.63 1434.04,1205.63 1434.63,1205.63 1435.22,1205.63 1435.8,1205.63 1436.39,1205.63 1436.98,1205.63 1437.56,1205.63 1438.15,1205.63 1438.74,1205.63 1439.32,1205.63 1439.91,1205.63 1440.5,1205.63 1441.08,1205.63 1441.67,1205.63 1442.25,1205.63 1442.84,1205.63 1443.43,1205.63 1444.01,1205.63 1444.6,1205.63 1445.19,1205.63 1445.77,1205.63 1446.36,1205.63 1446.95,1205.63 1447.53,1205.63 1448.12,1205.63 1448.7,1205.63 1449.29,1205.63 1449.88,1205.63 1450.46,1205.63 1451.05,1205.63 1451.64,1205.63 1452.22,1205.63 1452.81,1205.63 1453.4,1205.63 1453.98,1205.63 1454.57,1205.63 1455.16,1205.63 1455.74,1205.63 1456.33,1205.63 1456.91,1205.63 1457.5,1205.63 1458.09,1205.63 1458.67,1205.63 1459.26,1205.63 1459.85,1205.63 1460.43,1205.63 1461.02,1205.63 1461.61,1205.63 1462.19,1205.63 1462.78,1205.63 1463.37,1205.63 1463.95,1205.63 1464.54,1205.63 1465.12,1205.63 1465.71,1205.63 1466.3,1205.63 1466.88,1205.63 1467.47,1205.63 1468.06,1205.63 1468.64,1205.63 1469.23,1205.63 1469.82,1205.63 1470.4,1205.63 1470.99,1205.63 1471.57,1205.63 1472.16,1205.63 1472.75,1205.63 1473.33,1205.63 1473.92,1205.63 1474.51,1205.63 1475.09,1205.63 1475.68,1205.63 1476.27,1205.63 1476.85,1205.63 1477.44,1205.63 1478.03,1205.63 1478.61,1205.63 1479.2,1205.63 1479.78,1205.63 1480.37,1205.63 1480.96,1205.63 1481.54,1205.63 1482.13,1205.63 1482.72,1205.63 1483.3,1205.63 1483.89,1205.63 1484.48,1205.63 1485.06,1205.63 1485.65,1205.63 1486.24,1205.63 1486.82,1205.63 1487.41,1205.63 1487.99,1205.63 1488.58,1205.63 1489.17,1205.63 1489.75,1205.63 1490.34,1205.63 1490.93,1205.63 1491.51,1205.63 1492.1,1205.63 1492.69,1205.63 1493.27,1205.63 1493.86,1205.63 1494.45,1205.63 1495.03,1205.63 1495.62,1205.63 1496.2,1205.63 1496.79,1205.63 1497.38,1205.63 1497.96,1205.63 1498.55,1205.63 1499.14,1205.63 1499.72,1205.63 1500.31,1205.63 1500.9,1205.63 1501.48,1205.63 1502.07,1205.63 1502.65,1205.63 1503.24,1205.63 1503.83,1205.63 1504.41,1205.63 1505,1205.63 1505.59,1205.63 1506.17,1205.63 1506.76,1205.63 1507.35,1205.63 1507.93,1205.63 1508.52,1205.63 1509.11,1205.63 1509.69,1205.63 1510.28,1205.63 1510.86,1205.63 1511.45,1205.63 1512.04,1205.63 1512.62,1205.63 1513.21,1205.63 1513.8,1205.63 1514.38,1205.63 1514.97,1205.63 1515.56,1205.63 1516.14,1205.63 1516.73,1205.63 1517.32,1205.63 1517.9,1205.63 1518.49,1205.63 1519.07,1205.63 1519.66,1205.63 1520.25,1205.63 1520.83,1205.63 1521.42,1205.63 1522.01,1205.63 1522.59,1205.63 1523.18,1205.63 1523.77,1205.63 1524.35,1205.63 1524.94,1205.63 1525.52,1205.63 1526.11,1205.63 1526.7,1205.63 1527.28,1205.63 1527.87,1205.63 1528.46,1205.63 1529.04,1205.63 1529.63,1205.63 1530.22,1205.63 1530.8,1205.63 1531.39,1205.63 1531.98,1205.63 1532.56,1205.63 1533.15,1205.63 1533.73,1205.63 1534.32,1205.63 1534.91,1205.63 1535.49,1205.63 1536.08,1205.63 1536.67,1205.63 1537.25,1205.63 1537.84,1205.63 1538.43,1205.63 1539.01,1205.63 1539.6,1205.63 1540.19,1205.63 1540.77,1205.63 1541.36,1205.63 1541.94,1205.63 1542.53,1205.63 1543.12,1205.63 1543.7,1205.63 1544.29,1205.63 1544.88,1205.63 1545.46,1205.63 1546.05,1205.63 1546.64,1205.63 1547.22,1205.63 1547.81,1205.63 1548.4,1205.63 1548.98,1205.63 1549.57,1205.63 1550.15,1205.63 1550.74,1205.63 1551.33,1205.63 1551.91,1205.63 1552.5,1205.63 1553.09,1205.63 1553.67,1205.63 1554.26,1205.63 1554.85,1205.63 1555.43,1205.63 1556.02,1205.63 1556.6,1205.63 1557.19,1205.63 1557.78,1205.63 1558.36,1205.63 1558.95,1205.63 1559.54,1205.63 1560.12,1205.63 1560.71,1205.63 1561.3,1205.63 1561.88,1205.63 1562.47,1205.63 1563.06,1205.63 1563.64,1205.63 1564.23,1205.63 1564.81,1205.63 1565.4,1205.63 1565.99,1205.63 1566.57,1205.63 1567.16,1205.63 1567.75,1205.63 1568.33,1205.63 1568.92,1205.63 1569.51,1205.63 1570.09,1205.63 1570.68,1205.63 1571.27,1205.63 1571.85,1205.63 1572.44,1205.63 1573.02,1205.63 1573.61,1205.63 1574.2,1205.63 1574.78,1205.63 1575.37,1205.63 1575.96,1205.63 1576.54,1205.63 1577.13,1205.63 1577.72,1205.63 1578.3,1205.63 1578.89,1205.63 1579.47,1205.63 1580.06,1205.63 1580.65,1205.63 1581.23,1205.63 1581.82,1205.63 1582.41,1205.63 1582.99,1205.63 1583.58,1205.63 1584.17,1205.63 1584.75,1205.63 1585.34,1205.63 1585.93,1205.63 1586.51,1205.63 1587.1,1205.63 1587.68,1205.63 1588.27,1205.63 1588.86,1205.63 1589.44,1205.63 1590.03,1205.63 1590.62,1205.63 1591.2,1205.63 1591.79,1205.63 1592.38,1205.63 1592.96,1205.63 1593.55,1205.63 1594.14,1205.63 1594.72,1205.63 1595.31,1205.63 1595.89,1205.63 1596.48,1205.63 1597.07,1205.63 1597.65,1205.63 1598.24,1205.63 1598.83,1205.63 1599.41,1205.63 1600,1205.63 1600.59,1205.63 1601.17,1205.63 1601.76,1205.63 1602.34,1205.63 1602.93,1205.63 1603.52,1205.63 1604.1,1205.63 1604.69,1205.63 1605.28,1205.63 1605.86,1205.63 1606.45,1205.63 1607.04,1205.63 1607.62,1205.63 1608.21,1205.63 1608.8,1205.63 1609.38,1205.63 1609.97,1205.63 1610.55,1205.63 1611.14,1205.63 1611.73,1205.63 1612.31,1205.63 1612.9,1205.63 1613.49,1205.63 1614.07,1205.63 1614.66,1205.63 1615.25,1205.63 1615.83,1205.63 1616.42,1205.63 1617.01,1205.63 1617.59,1205.63 1618.18,1205.63 1618.76,1205.63 1619.35,1205.63 1619.94,1205.63 1620.52,1205.63 1621.11,1205.63 1621.7,1205.63 1622.28,1205.63 1622.87,1205.63 1623.46,1205.63 1624.04,1205.63 1624.63,1205.63 1625.22,1205.63 1625.8,1205.63 1626.39,1205.63 1626.97,1205.63 1627.56,1205.63 1628.15,1205.63 1628.73,1205.63 1629.32,1205.63 1629.91,1205.63 1630.49,1205.63 1631.08,1205.63 1631.67,1205.63 1632.25,1205.63 1632.84,1205.63 1633.42,1205.63 1634.01,1205.63 1634.6,1205.63 1635.18,1205.63 1635.77,1205.63 1636.36,1205.63 1636.94,1205.63 1637.53,1205.63 1638.12,1205.63 1638.7,1205.63 1639.29,1205.63 1639.88,1205.63 1640.46,1205.63 1641.05,1205.63 1641.63,1205.63 1642.22,1205.63 1642.81,1205.63 1643.39,1205.63 1643.98,1205.63 1644.57,1205.63 1645.15,1205.63 1645.74,1205.63 1646.33,1205.63 1646.91,1205.63 1647.5,1205.63 1648.09,1205.63 1648.67,1205.63 1649.26,1205.63 1649.84,1205.63 1650.43,1205.63 1651.02,1205.63 1651.6,1205.63 1652.19,1205.63 1652.78,1205.63 1653.36,1205.63 1653.95,1205.63 1654.54,1205.63 1655.12,1205.63 1655.71,1205.63 1656.29,1205.63 1656.88,1205.63 1657.47,1205.63 1658.05,1205.63 1658.64,1205.63 1659.23,1205.63 1659.81,1205.63 1660.4,1205.63 1660.99,1205.63 1661.57,1205.63 1662.16,1205.63 1662.75,1205.63 1663.33,1205.63 1663.92,1205.63 1664.5,1205.63 1665.09,1205.63 1665.68,1205.63 1666.26,1205.63 1666.85,1205.63 1667.44,1205.63 1668.02,1205.63 1668.61,1205.63 1669.2,1205.63 1669.78,1205.63 1670.37,1205.63 1670.96,1205.63 1671.54,1205.63 1672.13,1205.63 1672.71,1205.63 1673.3,1205.63 1673.89,1205.63 1674.47,1205.63 1675.06,1205.63 1675.65,1205.63 1676.23,1205.63 1676.82,1205.63 1677.41,1205.63 1677.99,1205.63 1678.58,1205.63 1679.17,1205.63 1679.75,1205.63 1680.34,1205.63 1680.92,1205.63 1681.51,1205.63 1682.1,1205.63 1682.68,1205.63 1683.27,1205.63 1683.86,1205.63 1684.44,1205.63 1685.03,1205.63 1685.62,1205.63 1686.2,1205.63 1686.79,1205.63 1687.37,1205.63 1687.96,1205.63 1688.55,1205.63 1689.13,1205.63 1689.72,1205.63 1690.31,1205.63 1690.89,1205.63 1691.48,1205.63 1692.07,1205.63 1692.65,1205.63 1693.24,1205.63 1693.83,1205.63 1694.41,1205.63 1695,1205.63 1695.58,1205.63 1696.17,1205.63 1696.76,1205.63 1697.34,1205.63 1697.93,1205.63 1698.52,1205.63 1699.1,1205.63 1699.69,1205.63 1700.28,1205.63 1700.86,1205.63 1701.45,1205.63 1702.04,1205.63 1702.62,1205.63 1703.21,1205.63 1703.79,1205.63 1704.38,1205.63 1704.97,1205.63 1705.55,1205.63 1706.14,1205.63 1706.73,1205.63 1707.31,1205.63 1707.9,1205.63 1708.49,1205.63 1709.07,1205.63 1709.66,1205.63 1710.24,1205.63 1710.83,1205.63 1711.42,1205.63 1712,1205.63 1712.59,1205.63 1713.18,1205.63 1713.76,1205.63 1714.35,1205.63 1714.94,1205.63 1715.52,1205.63 1716.11,1205.63 1716.7,1205.63 1717.28,1205.63 1717.87,1205.63 1718.45,1205.63 1719.04,1205.63 1719.63,1205.63 1720.21,1205.63 1720.8,1205.63 1721.39,1205.63 1721.97,1205.63 1722.56,1205.63 1723.15,1205.63 1723.73,1205.63 1724.32,1205.63 1724.91,1205.63 1725.49,1205.63 1726.08,1205.63 1726.66,1205.63 1727.25,1205.63 1727.84,1205.63 1728.42,1205.63 1729.01,1205.63 1729.6,1205.63 1730.18,1205.63 1730.77,1205.63 1731.36,1205.63 1731.94,1205.63 1732.53,1205.63 1733.11,1205.63 1733.7,1205.63 1734.29,1205.63 1734.87,1205.63 1735.46,1205.63 1736.05,1205.63 1736.63,1205.63 1737.22,1205.63 1737.81,1205.63 1738.39,1205.63 1738.98,1205.63 1739.57,1205.63 1740.15,1205.63 1740.74,1205.63 1741.32,1205.63 1741.91,1205.63 1742.5,1205.63 1743.08,1205.63 1743.67,1205.63 1744.26,1205.63 1744.84,1205.63 1745.43,1205.63 1746.02,1205.63 1746.6,1205.63 1747.19,1205.63 1747.78,1205.63 1748.36,1205.63 1748.95,1205.63 1749.53,1205.63 1750.12,1205.63 1750.71,1205.63 1751.29,1205.63 1751.88,1205.63 1752.47,1205.63 1753.05,1205.63 1753.64,1205.63 1754.23,1205.63 1754.81,1205.63 1755.4,1205.63 1755.99,1205.63 1756.57,1205.63 1757.16,1205.63 1757.74,1205.63 1758.33,1205.63 1758.92,1205.63 1759.5,1205.63 1760.09,1205.63 1760.68,1205.63 1761.26,1205.63 1761.85,1205.63 1762.44,1205.63 1763.02,1205.63 1763.61,1205.63 1764.19,1205.63 1764.78,1205.63 1765.37,1205.63 1765.95,1205.63 1766.54,1205.63 1767.13,1205.63 1767.71,1205.63 1768.3,1205.63 1768.89,1205.63 1769.47,1205.63 1770.06,1205.63 1770.65,1205.63 1771.23,1205.63 1771.82,1205.63 1772.4,1205.63 1772.99,1205.63 1773.58,1205.63 1774.16,1205.63 1774.75,1205.63 1775.34,1205.63 1775.92,1205.63 1776.51,1205.63 1777.1,1205.63 1777.68,1205.63 1778.27,1205.63 1778.86,1205.63 1779.44,1205.63 1780.03,1205.63 1780.61,1205.63 1781.2,1205.63 1781.79,1205.63 1782.37,1205.63 1782.96,1205.63 1783.55,1205.63 1784.13,1205.63 1784.72,1205.63 1785.31,1205.63 1785.89,1205.63 1786.48,1205.63 1787.06,1205.63 1787.65,1205.63 1788.24,1205.63 1788.82,1205.63 1789.41,1205.63 1790,1205.63 1790.58,1205.63 1791.17,1205.63 1791.76,1205.63 1792.34,1205.63 1792.93,1205.63 1793.52,1205.63 1794.1,1205.63 1794.69,1205.63 1795.27,1205.63 1795.86,1205.63 1796.45,1205.63 1797.03,1205.63 1797.62,1205.63 1798.21,1205.63 1798.79,1205.63 1799.38,1205.63 1799.97,1205.63 1800.55,1205.63 1801.14,1205.63 1801.73,1205.63 1802.31,1205.63 1802.9,1205.63 1803.48,1205.63 1804.07,1205.63 1804.66,1205.63 1805.24,1205.63 1805.83,1205.63 1806.42,1205.63 1807,1205.63 1807.59,1205.63 1808.18,1205.63 1808.76,1205.63 1809.35,1205.63 1809.94,1205.63 1810.52,1205.63 1811.11,1205.63 1811.69,1205.63 1812.28,1205.63 1812.87,1205.63 1813.45,1205.63 1814.04,1205.63 1814.63,1205.63 1815.21,1205.63 1815.8,1205.63 1816.39,1205.63 1816.97,1205.63 1817.56,1205.63 1818.14,1205.63 1818.73,1205.63 1819.32,1205.63 1819.9,1205.63 1820.49,1205.63 1821.08,1205.63 1821.66,1205.63 1822.25,1205.63 1822.84,1205.63 1823.42,1205.63 1824.01,1205.63 1824.6,1205.63 1825.18,1205.63 1825.77,1205.63 1826.35,1205.63 1826.94,1205.63 1827.53,1205.63 1828.11,1205.63 1828.7,1205.63 1829.29,1205.63 1829.87,1205.63 1830.46,1205.63 1831.05,1205.63 1831.63,1205.63 1832.22,1205.63 1832.81,1205.63 1833.39,1205.63 1833.98,1205.63 1834.56,1205.63 1835.15,1205.63 1835.74,1205.63 1836.32,1205.63 1836.91,1205.63 1837.5,1205.63 1838.08,1205.63 1838.67,1205.63 1839.26,1205.63 1839.84,1205.63 1840.43,1205.63 1841.01,1205.63 1841.6,1205.63 1842.19,1205.63 1842.77,1205.63 1843.36,1205.63 1843.95,1205.63 1844.53,1205.63 1845.12,1205.63 1845.71,1205.63 1846.29,1205.63 1846.88,1205.63 1847.47,1205.63 1848.05,1205.63 1848.64,1205.63 1849.22,1205.63 1849.81,1205.63 1850.4,1205.63 1850.98,1205.63 1851.57,1205.63 1852.16,1205.63 1852.74,1205.63 1853.33,1205.63 1853.92,1205.63 1854.5,1205.63 1855.09,1205.63 1855.68,1205.63 1856.26,1205.63 1856.85,1205.63 1857.43,1205.63 1858.02,1205.63 1858.61,1205.63 1859.19,1205.63 1859.78,1205.63 1860.37,1205.63 1860.95,1205.63 1861.54,1205.63 1862.13,1205.63 1862.71,1205.63 1863.3,1205.63 1863.88,1205.63 1864.47,1205.63 1865.06,1205.63 1865.64,1205.63 1866.23,1205.63 1866.82,1205.63 1867.4,1205.63 1867.99,1205.63 1868.58,1205.63 1869.16,1205.63 1869.75,1205.63 1870.34,1205.63 1870.92,1205.63 1871.51,1205.63 1872.09,1205.63 1872.68,1205.63 1873.27,1205.63 1873.85,1205.63 1874.44,1205.63 1875.03,1205.63 1875.61,1205.63 1876.2,1205.63 1876.79,1205.63 1877.37,1205.63 1877.96,1205.63 1878.55,1205.63 1879.13,1205.63 1879.72,1205.63 1880.3,1205.63 1880.89,1205.63 1881.48,1205.63 1882.06,1205.63 1882.65,1205.63 1883.24,1205.63 1883.82,1205.63 1884.41,1205.63 1885,1205.63 1885.58,1205.63 1886.17,1205.63 1886.76,1205.63 1887.34,1205.63 1887.93,1205.63 1888.51,1205.63 1889.1,1205.63 1889.69,1205.63 1890.27,1205.63 1890.86,1205.63 1891.45,1205.63 1892.03,1205.63 1892.62,1205.63 1893.21,1205.63 1893.79,1205.63 1894.38,1205.63 1894.96,1205.63 1895.55,1205.63 1896.14,1205.63 1896.72,1205.63 1897.31,1205.63 1897.9,1205.63 1898.48,1205.63 1899.07,1205.63 1899.66,1205.63 1900.24,1205.63 1900.83,1205.63 1901.42,1205.63 1902,1205.63 1902.59,1205.63 1903.17,1205.63 1903.76,1205.63 1904.35,1205.63 1904.93,1205.63 1905.52,1205.63 1906.11,1205.63 1906.69,1205.63 1907.28,1205.63 1907.87,1205.63 1908.45,1205.63 1909.04,1205.63 1909.63,1205.63 1910.21,1205.63 1910.8,1205.63 1911.38,1205.63 1911.97,1205.63 1912.56,1205.63 1913.14,1205.63 1913.73,1205.63 1914.32,1205.63 1914.9,1205.63 1915.49,1205.63 1916.08,1205.63 1916.66,1205.63 1917.25,1205.63 1917.83,1205.63 1918.42,1205.63 1919.01,1205.63 1919.59,1205.63 1920.18,1205.63 1920.77,1205.63 1921.35,1205.63 1921.94,1205.63 1922.53,1205.63 1923.11,1205.63 1923.7,1205.63 1924.29,1205.63 1924.87,1205.63 1925.46,1205.63 1926.04,1205.63 1926.63,1205.63 1927.22,1205.63 1927.8,1205.63 1928.39,1205.63 1928.98,1205.63 1929.56,1205.63 1930.15,1205.63 1930.74,1205.63 1931.32,1205.63 1931.91,1205.63 1932.5,1205.63 1933.08,1205.63 1933.67,1205.63 1934.25,1205.63 1934.84,1205.63 1935.43,1205.63 1936.01,1205.63 1936.6,1205.63 1937.19,1205.63 1937.77,1205.63 1938.36,1205.63 1938.95,1205.63 1939.53,1205.63 1940.12,1205.63 1940.71,1205.63 1941.29,1205.63 1941.88,1205.63 1942.46,1205.63 1943.05,1205.63 1943.64,1205.63 1944.22,1205.63 1944.81,1205.63 1945.4,1205.63 1945.98,1205.63 1946.57,1205.63 1947.16,1205.63 1947.74,1205.63 1948.33,1205.63 1948.91,1205.63 1949.5,1205.63 1950.09,1205.63 1950.67,1205.63 1951.26,1205.63 1951.85,1205.63 1952.43,1205.63 1953.02,1205.63 1953.61,1205.63 1954.19,1205.63 1954.78,1205.63 1955.37,1205.63 1955.95,1205.63 1956.54,1205.63 1957.12,1205.63 1957.71,1205.63 1958.3,1205.63 1958.88,1205.63 1959.47,1205.63 1960.06,1205.63 1960.64,1205.63 1961.23,1205.63 1961.82,1205.63 1962.4,1205.63 1962.99,1205.63 1963.58,1205.63 1964.16,1205.63 1964.75,1205.63 1965.33,1205.63 1965.92,1205.63 1966.51,1205.63 1967.09,1205.63 1967.68,1205.63 1968.27,1205.63 1968.85,1205.63 1969.44,1205.63 1970.03,1205.63 1970.61,1205.63 1971.2,1205.63 1971.78,1205.63 1972.37,1205.63 1972.96,1205.63 1973.54,1205.63 1974.13,1205.63 1974.72,1205.63 1975.3,1205.63 1975.89,1205.63 1976.48,1205.63 1977.06,1205.63 1977.65,1205.63 1978.24,1205.63 1978.82,1205.63 1979.41,1205.63 1979.99,1205.63 1980.58,1205.63 1981.17,1205.63 1981.75,1205.63 1982.34,1205.63 1982.93,1205.63 1983.51,1205.63 1984.1,1205.63 1984.69,1205.63 1985.27,1205.63 1985.86,1205.63 1986.45,1205.63 1987.03,1205.63 1987.62,1205.63 1988.2,1205.63 1988.79,1205.63 1989.38,1205.63 1989.96,1205.63 1990.55,1205.63 1991.14,1205.63 1991.72,1205.63 1992.31,1205.63 1992.9,1205.63 1993.48,1205.63 1994.07,1205.63 1994.65,1205.63 1995.24,1205.63 1995.83,1205.63 1996.41,1205.63 1997,1205.63 1997.59,1205.63 1998.17,1205.63 1998.76,1205.63 1999.35,1205.63 1999.93,1205.63 2000.52,1205.63 2001.11,1205.63 2001.69,1205.63 2002.28,1205.63 2002.86,1205.63 2003.45,1205.63 2004.04,1205.63 2004.62,1205.63 2005.21,1205.63 2005.8,1205.63 2006.38,1205.63 2006.97,1205.63 2007.56,1205.63 2008.14,1205.63 2008.73,1205.63 2009.32,1205.63 2009.9,1205.63 2010.49,1205.63 2011.07,1205.63 2011.66,1205.63 2012.25,1205.63 2012.83,1205.63 2013.42,1205.63 2014.01,1205.63 2014.59,1205.63 2015.18,1205.63 2015.77,1205.63 2016.35,1205.63 2016.94,1205.63 2017.53,1205.63 2018.11,1205.63 2018.7,1205.63 2019.28,1205.63 2019.87,1205.63 2020.46,1205.63 2021.04,1205.63 2021.63,1205.63 2022.22,1205.63 2022.8,1205.63 2023.39,1205.63 2023.98,1205.63 2024.56,1205.63 2025.15,1205.63 2025.73,1205.63 2026.32,1205.63 2026.91,1205.63 2027.49,1205.63 2028.08,1205.63 2028.67,1205.63 2029.25,1205.63 2029.84,1205.63 2030.43,1205.63 2031.01,1205.63 2031.6,1205.63 2032.19,1205.63 2032.77,1205.63 2033.36,1205.63 2033.94,1205.63 2034.53,1205.63 2035.12,1205.63 2035.7,1205.63 2036.29,1205.63 2036.88,1205.63 2037.46,1205.63 2038.05,1205.63 2038.64,1205.63 2039.22,1205.63 2039.81,1205.63 2040.4,1205.63 2040.98,1205.63 2041.57,1205.63 2042.15,1205.63 2042.74,1205.63 2043.33,1205.63 2043.91,1205.63 2044.5,1205.63 2045.09,1205.63 2045.67,1205.63 2046.26,1205.63 2046.85,1205.63 2047.43,1205.63 2048.02,1205.63 2048.6,1205.63 2049.19,1205.63 2049.78,1205.63 2050.36,1205.63 2050.95,1205.63 2051.54,1205.63 2052.12,1205.63 2052.71,1205.63 2053.3,1205.63 2053.88,1205.63 2054.47,1205.63 2055.06,1205.63 2055.64,1205.63 2056.23,1205.63 2056.81,1205.63 2057.4,1205.63 2057.99,1205.63 2058.57,1205.63 2059.16,1205.63 2059.75,1205.63 2060.33,1205.63 2060.92,1205.63 2061.51,1205.63 2062.09,1205.63 2062.68,1205.63 2063.27,1205.63 2063.85,1205.63 2064.44,1205.63 2065.02,1205.63 2065.61,1205.63 2066.2,1205.63 2066.78,1205.63 2067.37,1205.63 2067.96,1205.63 2068.54,1205.63 2069.13,1205.63 2069.72,1205.63 2070.3,1205.63 2070.89,1205.63 2071.48,1205.63 2072.06,1205.63 2072.65,1205.63 2073.23,1205.63 2073.82,1205.63 2074.41,1205.63 2074.99,1205.63 2075.58,1205.63 2076.17,1205.63 2076.75,1205.63 2077.34,1205.63 2077.93,1205.63 2078.51,1205.63 2079.1,1205.63 2079.68,1205.63 2080.27,1205.63 2080.86,1205.63 2081.44,1205.63 2082.03,1205.63 2082.62,1205.63 2083.2,1205.63 2083.79,1205.63 2084.38,1205.63 2084.96,1205.63 2085.55,1205.63 2086.14,1205.63 2086.72,1205.63 2087.31,1205.63 2087.89,1205.63 2088.48,1205.63 2089.07,1205.63 2089.65,1205.63 2090.24,1205.63 2090.83,1205.63 2091.41,1205.63 2092,1205.63 2092.59,1205.63 2093.17,1205.63 2093.76,1205.63 2094.35,1205.63 2094.93,1205.63 2095.52,1205.63 2096.1,1205.63 2096.69,1205.63 2097.28,1205.63 2097.86,1205.63 2098.45,1205.63 2099.04,1205.63 2099.62,1205.63 2100.21,1205.63 2100.8,1205.63 2101.38,1205.63 2101.97,1205.63 2102.55,1205.63 2103.14,1205.63 2103.73,1205.63 2104.31,1205.63 2104.9,1205.63 2105.49,1205.63 2106.07,1205.63 2106.66,1205.63 2107.25,1205.63 2107.83,1205.63 2108.42,1205.63 2109.01,1205.63 2109.59,1205.63 2110.18,1205.63 2110.76,1205.63 2111.35,1205.63 2111.94,1205.63 2112.52,1205.63 2113.11,1205.63 2113.7,1205.63 2114.28,1205.63 2114.87,1205.63 2115.46,1205.63 2116.04,1205.63 2116.63,1205.63 2117.22,1205.63 2117.8,1205.63 2118.39,1205.63 2118.97,1205.63 2119.56,1205.63 2120.15,1205.63 2120.73,1205.63 2121.32,1205.63 2121.91,1205.63 2122.49,1205.63 2123.08,1205.63 2123.67,1205.63 2124.25,1205.63 2124.84,1205.63 2125.42,1205.63 2126.01,1205.63 2126.6,1205.63 2127.18,1205.63 2127.77,1205.63 2128.36,1205.63 2128.94,1205.63 2129.53,1205.63 2130.12,1205.63 2130.7,1205.63 2131.29,1205.63 2131.88,1205.63 2132.46,1205.63 2133.05,1205.63 2133.63,1205.63 2134.22,1205.63 2134.81,1205.63 2135.39,1205.63 2135.98,1205.63 2136.57,1205.63 2137.15,1205.63 2137.74,1205.63 2138.33,1205.63 2138.91,1205.63 2139.5,1205.63 2140.09,1205.63 2140.67,1205.63 2141.26,1205.63 2141.84,1205.63 2142.43,1205.63 2143.02,1205.63 2143.6,1205.63 2144.19,1205.63 2144.78,1205.63 2145.36,1205.63 2145.95,1205.63 2146.54,1205.63 2147.12,1205.63 2147.71,1205.63 2148.3,1205.63 2148.88,1205.63 2149.47,1205.63 2150.05,1205.63 2150.64,1205.63 2151.23,1205.63 2151.81,1205.63 2152.4,1205.63 2152.99,1205.63 2153.57,1205.63 2154.16,1205.63 2154.75,1205.63 2155.33,1205.63 2155.92,1205.63 2156.5,1205.63 2157.09,1205.63 2157.68,1205.63 2158.26,1205.63 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.04,1187.82 1400.89,899.083 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1222.97 985.439,1187.82 2158.26,1187.82 2158.26,1222.97 985.439,1222.97 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip520)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip520)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip523\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip523)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1471.99 162.114,-2803.74 162.673,-4025.81 163.232,-3762.87 163.792,-4832.49 164.351,-5810.65 164.91,-6747.89 165.469,-7521.54 166.029,-8283.32 166.588,-8933.78 167.147,-9524.38 167.706,-10073.4 168.266,-10564.7 168.825,-9320.27 169.384,-9798.07 169.943,-10234.5 170.503,-9945.61 171.062,-10333.9 171.621,-10667.9 172.18,-10939.2 172.74,-11192.8 173.299,-10902 173.858,-11108.2 174.417,-11300.7 174.977,-11461 175.536,-11571 176.095,-11288 176.655,-11368.8 177.214,-11425.8 177.773,-11481.1 178.332,-11509.3 178.892,-11504.1 179.451,-11480.8 180.01,-11453.6 180.569,-11396 181.129,-11336.3 181.688,-11260.3 182.247,-10594.2 182.806,-10326.1 183.366,-10237.2 183.925,-9810.92 184.484,-9545.7 185.043,-9292.56 185.603,-9145.89 186.162,-9006.13 186.721,-8862.21 187.28,-8712.85 187.84,-8454.41 188.399,-8201.08 188.958,-7959.13 189.517,-7718.12 190.077,-7397.17 190.636,-6978.69 191.195,-6751.11 191.754,-6601.51 192.314,-6381.44 192.873,-6240.37 193.432,-6095.06 193.991,-5948.6 194.551,-5741.43 195.11,-5539.52 195.669,-5349.04 196.228,-5214.62 196.788,-5027.57 197.347,-4902.39 197.906,-4729.58 198.465,-4556.66 199.025,-4338.8 199.584,-4171.46 200.143,-4018.37 200.702,-3867.64 201.262,-3761.56 201.821,-3619.9 202.38,-3482.92 202.939,-3349.91 203.499,-3216.51 204.058,-3048.85 204.617,-2785.05 205.176,-2637.36 205.736,-2496.78 206.295,-2291.08 206.854,-2096.38 207.413,-2006.12 207.973,-1884.97 208.532,-1708.35 209.091,-1656.77 209.65,-1490.43 210.21,-1334.56 210.769,-1263.78 211.328,-1142.19 211.887,-1076.47 212.447,-1041.45 213.006,-1029.74 213.565,-886.41 214.124,-847.688 214.684,-763.709 215.243,-729.841 215.802,-644.741 216.361,-612.984 216.921,-588.292 217.48,-530.986 218.039,-476.556 218.598,-396.563 219.158,-367.604 219.717,-293.186 220.276,-289.702 220.835,-219.619 221.395,-195.179 221.954,-193.21 222.513,-165.49 223.072,-139.639 223.632,-91.3322 224.191,2.39988 224.75,25.2548 225.309,106.259 225.869,189.323 226.428,248.474 226.987,281.517 227.546,314.417 228.106,366.615 228.665,400.055 229.224,429.725 229.783,440.983 230.343,508.188 230.902,555.171 231.461,577.53 232.02,638.574 232.58,658.027 233.139,698.566 233.698,737.384 234.257,776.196 234.817,754.325 235.376,752.402 235.935,753.015 236.494,754.622 237.054,754.401 237.613,719.383 238.172,722.498 238.731,743.023 239.291,746.95 239.85,788.132 240.409,806.973 240.968,844.593 241.528,806.085 242.087,807.687 242.646,827.373 243.205,808.944 243.765,846.104 244.324,864.236 244.883,864.149 245.442,863.681 246.002,879.316 246.561,863.118 247.12,882.072 247.679,883.804 248.239,918.872 248.798,918.049 249.357,920.931 249.916,937.039 250.476,918.848 251.035,934.508 251.594,966.031 252.153,964.338 252.713,961.474 253.272,964.106 253.831,997.701 254.39,995.96 254.95,991.193 255.509,991.145 256.068,1008.5 256.627,1039.09 257.187,1084.69 257.746,1081 258.305,1106.95 258.864,1116.71 259.424,1139.99 259.983,1110.45 260.542,1102.14 261.101,1109.09 261.661,1115.51 262.22,1107.81 262.779,1115.95 263.338,1126.4 263.898,1185.07 264.457,1221.39 265.016,1240.59 265.575,1240.53 266.135,1241.74 266.694,1203.81 267.253,1192.26 267.812,1163.13 268.372,1151.94 268.931,1143.37 269.49,1136.22 270.049,1146.37 270.609,1153.89 271.168,1157.29 271.727,1129.29 272.286,1138.59 272.846,1114.01 273.405,1125.27 273.964,1099.71 274.523,1091.9 275.083,1083.6 275.642,1097.55 276.201,1087.13 276.76,1097.36 277.32,1091.01 277.879,1082.91 278.438,1075.12 278.997,1071.1 279.557,1062.25 280.116,1073.03 280.675,1063.89 281.234,1057.54 281.794,1034.55 282.353,1063.11 282.912,1039.31 283.471,1036.67 284.031,1032.99 284.59,1040.96 285.149,1036.74 285.708,1032.66 286.268,1029.02 286.827,1077.27 287.386,1089.08 287.945,1099.67 288.505,1108.62 289.064,1118.2 289.623,1093.45 290.182,1116.06 290.742,1124.33 291.301,1133.55 291.86,1141.9 292.419,1146.63 292.979,1166.43 293.538,1173.14 294.097,1196.56 294.656,1197.01 295.216,1199.96 295.775,1183.84 296.334,1186.64 296.893,1188.93 297.453,1163.3 298.012,1166.84 298.571,1188.39 299.13,1161 299.69,1115.78 300.249,1072.18 300.808,1062.89 301.368,1054.94 301.927,1080.05 302.486,1088.29 303.045,1042.18 303.605,1036.35 304.164,1057.91 304.723,1048.88 305.282,1073.19 305.842,1067.23 306.401,1075.18 306.96,1064.5 307.519,1026.11 308.079,1035.35 308.638,1044.32 309.197,1021.62 309.756,1033.38 310.316,1024.83 310.875,1053.8 311.434,1061.5 311.993,1103.63 312.553,1076.17 313.112,1050.96 313.671,1041.38 314.23,1019.51 314.79,999.369 315.349,1026.56 315.908,1034.44 316.467,1045.34 317.027,1054.9 317.586,1026.54 318.145,1018.99 318.704,1011.73 319.264,987.45 319.823,965.14 320.382,990.745 320.941,984.889 321.501,978.661 322.06,956.649 322.619,938.567 323.178,938.121 323.738,902.646 324.297,934.048 324.856,965.217 325.415,979.201 325.975,957.739 326.534,986.095 327.093,994.743 327.652,987.59 328.212,993.55 328.771,983.941 329.33,1014.04 329.889,1005.42 330.449,1013.56 331.008,987.442 331.567,962.239 332.126,975.338 332.686,952.836 333.245,932.396 333.804,945.991 334.363,942.73 334.923,957.185 335.482,967.106 336.041,978.192 336.6,954.32 337.16,967.417 337.719,975.426 338.278,954.805 338.837,968.224 339.397,994.591 339.956,1019.54 340.515,994.706 341.074,984.536 341.634,992.439 342.193,1035.59 342.752,1025.9 343.311,1048.92 343.871,1072.91 344.43,1077.39 344.989,1066.99 345.548,990.989 346.108,968.158 346.667,979.879 347.226,959.81 347.785,951.06 348.345,944.896 348.904,956.339 349.463,949.935 350.022,908.998 350.582,888.364 351.141,887.397 351.7,852.74 352.259,900.055 352.819,899.122 353.378,843.716 353.937,857.739 354.496,836.982 355.056,850.624 355.615,863.893 356.174,908.068 356.733,921.434 357.293,935.6 357.852,929.294 358.411,921.63 358.97,914.726 359.53,876.799 360.089,874.62 360.648,875.803 361.207,906.035 361.767,918.588 362.326,901.101 362.885,884.996 363.444,864.043 364.004,894.35 364.563,888.583 365.122,850.376 365.681,881.558 366.241,872.603 366.8,850.201 367.359,848.574 367.918,832.257 368.478,815.548 369.037,833.09 369.596,800.326 370.155,815.048 370.715,797.877 371.274,800.509 371.833,800.695 372.392,801.085 372.952,816.08 373.511,813.051 374.07,830.978 374.629,831.975 375.189,783.306 375.748,789.09 376.307,776.345 376.866,745.542 377.426,763.215 377.985,748.901 378.544,770.777 379.103,791.919 379.663,779.526 380.222,781.802 380.781,781.933 381.34,769.669 381.9,788.331 382.459,807.092 383.018,810.993 383.577,812.789 384.137,812.97 384.696,875.745 385.255,870.162 385.814,865.637 386.374,897.195 386.933,898.158 387.492,845.096 388.051,873.203 388.611,902.134 389.17,881.107 389.729,889.727 390.288,899.847 390.848,927.304 391.407,951.315 391.966,940.619 392.525,917.618 393.085,876.304 393.644,838.509 394.203,835.922 394.762,835.668 395.322,799.568 395.881,763.132 396.44,747.33 396.999,747.277 397.559,743.562 398.118,763.007 398.677,782.392 399.236,782.315 399.796,800.156 400.355,799.01 400.914,814.635 401.473,814.282 402.033,831.933 402.592,831.909 403.151,811.719 403.71,839.383 404.27,817.892 404.829,819.734 405.388,818.653 405.947,832.085 406.507,861.854 407.066,856.097 407.625,866.576 408.184,845.249 408.744,857.405 409.303,869.127 409.862,893.883 410.421,888.226 410.981,850.016 411.54,831.508 412.099,863.228 412.658,878.318 413.218,905.849 413.777,864.065 414.336,858.993 414.895,841.451 415.455,835.991 416.014,894.923 416.573,892.047 417.132,868.742 417.692,851.201 418.251,844.7 418.81,856.401 419.369,866.758 419.929,858.347 420.488,851.386 421.047,863.592 421.606,845.281 422.166,842.13 422.725,840.167 423.284,856.192 423.843,853.37 424.403,849.598 424.962,877.973 425.521,823.541 426.08,801.302 426.64,797.693 427.199,828.985 427.758,821.242 428.318,802.832 428.877,816.493 429.436,780.861 429.995,810.809 430.555,792.268 431.114,788.224 431.673,831.21 432.232,870.662 432.792,818.256 433.351,800.398 433.91,782.393 434.469,766.478 435.029,766.323 435.588,751.091 436.147,737.597 436.706,757.018 437.266,804.573 437.825,803.628 438.384,771.867 438.943,736.611 439.503,738.01 440.062,691.454 440.621,710.179 441.18,696.161 441.74,733.908 442.299,752.137 442.858,739.104 443.417,721.286 443.977,773.915 444.536,772.024 445.095,773.63 445.654,786.757 446.214,766.52 446.773,782.216 447.332,765.071 447.891,749.367 448.451,733.486 449.01,735.72 449.569,767.656 450.128,747.766 450.688,799.763 451.247,794.81 451.806,824.615 452.365,787.94 452.925,786.846 453.484,755.586 454.043,823.319 454.602,802.853 455.162,797.738 455.721,781.032 456.28,797.057 456.839,812.52 457.399,811.092 457.958,811.386 458.517,808.656 459.076,791.057 459.636,773.647 460.195,789.102 460.754,802.597 461.313,832.628 461.873,811.026 462.432,872.349 462.991,851.461 463.55,845.503 464.11,854.022 464.669,818.373 465.228,818.994 465.787,814.27 466.347,829.901 466.906,843.049 467.465,850.327 468.024,815.544 468.584,784.207 469.143,785.271 469.702,801.002 470.261,830.064 470.821,807.65 471.38,773.457 471.939,755.59 472.498,752.727 473.058,771.622 473.617,823.032 474.176,820.432 474.735,816.595 475.295,848.016 475.854,843.31 476.413,856.988 476.972,883.148 477.532,879.082 478.091,903.877 478.65,912.049 479.209,886.479 479.769,863.503 480.328,888.983 480.887,897.735 481.446,873.029 482.006,865.758 482.565,810.284 483.124,771.445 483.683,754.929 484.243,736.467 484.802,735.614 485.361,769.277 485.92,751.254 486.48,749.602 487.039,720.666 487.598,705.334 488.157,724.077 488.717,742.231 489.276,724.763 489.835,724.141 490.394,723.023 490.954,739.622 491.513,738.372 492.072,773.502 492.631,786.384 493.191,815.19 493.75,797.228 494.309,811.925 494.868,808.534 495.428,803.201 495.987,799.257 496.546,793.16 497.105,726.73 497.665,726.651 498.224,712.236 498.783,678.845 499.342,684.145 499.902,689.175 500.461,708.484 501.02,689.746 501.579,704.931 502.139,688.136 502.698,689.418 503.257,710.73 503.816,713.956 504.376,680.868 504.935,704.907 505.494,726.022 506.053,732.094 506.613,701.349 507.172,688.993 507.731,675.828 508.29,695.82 508.85,779.841 509.409,778.649 509.968,813.12 510.527,811.183 511.087,778.399 511.646,759.446 512.205,758.235 512.764,758.375 513.324,739.477 513.883,740.74 514.442,721.705 515.001,738.84 515.561,739.278 516.12,755.286 516.679,783.71 517.238,782.765 517.798,767.423 518.357,783.088 518.916,795.899 519.475,822.418 520.035,802.83 520.594,779.95 521.153,791.716 521.712,787.752 522.272,785.075 522.831,782.813 523.39,781.336 523.949,762.706 524.509,744.501 525.068,726.694 525.627,710.417 526.186,677.791 526.746,663.945 527.305,694.253 527.864,679.325 528.423,683.919 528.983,685.279 529.542,708.423 530.101,694.031 530.66,694.84 531.22,710.326 531.779,729.494 532.338,730.457 532.897,764.918 533.457,766.62 534.016,748.25 534.575,760.691 535.134,772.643 535.694,769.501 536.253,769.714 536.812,784.411 537.371,784.1 537.931,783.789 538.49,793.78 539.049,757.284 539.608,806.009 540.168,819.668 540.727,799.153 541.286,777.244 541.845,790.182 542.405,734.325 542.964,749.976 543.523,781.732 544.082,776.873 544.642,777.587 545.201,776.222 545.76,758.36 546.319,773.843 546.879,769.544 547.438,731.819 547.997,747.635 548.556,731.739 549.116,779.522 549.675,761.214 550.234,807.81 550.793,819.603 551.353,783.134 551.912,778.999 552.471,742.757 553.031,757.785 553.59,739.555 554.149,788.403 554.708,768.303 555.268,782.674 555.827,780.031 556.386,757.936 556.945,739.566 557.505,722.422 558.064,736.026 558.623,701.424 559.182,685.329 559.742,689.439 560.301,656.014 560.86,644.754 561.419,647.492 561.979,647.697 562.538,665.738 563.097,635.203 563.656,655.249 564.216,662.055 564.775,646.942 565.334,650.21 565.893,671.101 566.453,674.253 567.012,676.721 567.571,693.437 568.13,678.162 568.69,663.756 569.249,634.99 569.808,625.056 570.367,629.847 570.927,631.574 571.486,623.698 572.045,657.74 572.604,661.797 573.164,668.286 573.723,720.578 574.282,749.541 574.841,779.111 575.401,793.451 575.96,806.686 576.519,736.16 577.078,736.212 577.638,737.688 578.197,737.159 578.756,684.883 579.315,673.711 579.875,709.088 580.434,714.605 580.993,698.899 581.552,700.814 582.112,719.183 582.671,765.14 583.23,777.073 583.789,774.659 584.349,789.178 584.908,787.298 585.467,799.145 586.026,792.779 586.586,776.591 587.145,754.551 587.704,720.533 588.263,706.302 588.823,741.653 589.382,754.85 589.941,783.247 590.5,798.265 591.06,779.999 591.619,791.309 592.178,819.666 592.737,848.942 593.297,858.606 593.856,853.697 594.415,846.977 594.974,840.553 595.534,849.335 596.093,872.935 596.652,867.15 597.211,877.851 597.771,869.542 598.33,861.158 598.889,902.057 599.448,938.611 600.008,923.934 600.567,894.479 601.126,867.859 601.685,873.065 602.245,850.508 602.804,857.501 603.363,865.761 603.922,806.26 604.482,749.219 605.041,745.588 605.6,759.035 606.159,704.892 606.719,704.931 607.278,722.678 607.837,725.323 608.396,677.645 608.956,678.161 609.515,650.193 610.074,652.227 610.633,670.258 611.193,637.994 611.752,606.889 612.311,595.732 612.87,634.664 613.43,635.432 613.989,621.432 614.548,608.346 615.107,595.966 615.667,595.815 616.226,600.523 616.785,607.089 617.344,609.249 617.904,600.259 618.463,624.426 619.022,598.66 619.581,622.263 620.141,644.19 620.7,665.314 621.259,669.793 621.818,672.336 622.378,688.056 622.937,687.278 623.496,688.682 624.055,670.395 624.615,637.011 625.174,637.392 625.733,641.919 626.292,629.804 626.852,636.254 627.411,642.453 627.97,644.005 628.529,646.121 629.089,680.818 629.648,699.369 630.207,699.029 630.766,734.115 631.326,706.074 631.885,692.956 632.444,707.961 633.003,721.472 633.563,719.038 634.122,717.776 634.681,731.981 635.24,713.399 635.8,712.667 636.359,725.093 636.918,755.262 637.477,750.55 638.037,731.873 638.596,681.933 639.155,651.389 639.714,656.296 640.274,656.028 640.833,658.693 641.392,644.835 641.951,649.71 642.511,652.777 643.07,651.202 643.629,638.472 644.188,657.286 644.748,627.069 645.307,619.905 645.866,627.374 646.425,617.148 646.985,638.961 647.544,677.788 648.103,728.152 648.662,707.833 649.222,726.498 649.781,709.999 650.34,727.086 650.899,710.213 651.459,694.825 652.018,679.491 652.577,684.651 653.136,667.853 653.696,638.748 654.255,644.017 654.814,666.626 655.373,653.657 655.933,653.883 656.492,689.227 657.051,660.474 657.61,664.116 658.17,647.818 658.729,636.265 659.288,640.574 659.847,661.003 660.407,697.34 660.966,697.78 661.525,668.235 662.084,651.803 662.644,685.967 663.203,669.157 663.762,621.354 664.321,657.411 664.881,645.506 665.44,617.132 665.999,638.467 666.558,672.676 667.118,660.732 667.677,643.933 668.236,660.73 668.795,643.696 669.355,663.766 669.914,680.055 670.473,682.75 671.032,748.354 671.592,728.772 672.151,708.981 672.71,708.424 673.269,722.21 673.829,734.8 674.388,748.848 674.947,728.012 675.506,757.936 676.066,723.904 676.625,707.517 677.184,672.891 677.743,673.97 678.303,676.992 678.862,663.694 679.421,678.885 679.981,695.872 680.54,697.254 681.099,698.705 681.658,716.079 682.218,712.625 682.777,726.415 683.336,691.428 683.895,640.998 684.455,646.637 685.014,667.523 685.573,687.365 686.132,687.398 686.692,719.489 687.251,717.414 687.81,701.411 688.369,718.281 688.929,701.476 689.488,704.963 690.047,688.524 690.606,702.236 691.166,716.443 691.725,713.715 692.284,714.103 692.843,710.469 693.403,723.012 693.962,721.063 694.521,720.757 695.08,706.728 695.64,710.689 696.199,712.516 696.758,708.454 697.317,691.202 697.877,677.041 698.436,643.532 698.995,664.274 699.554,667.517 700.114,699.785 700.673,716.811 701.232,733.535 701.791,750.439 702.351,731.644 702.91,730.125 703.469,677.618 704.028,665.222 704.588,666.472 705.147,669.262 705.706,635.615 706.265,655.726 706.825,657.326 707.384,644.445 707.943,614.556 708.502,601.059 709.062,607.2 709.621,593.653 710.18,596.346 710.739,568.308 711.299,593.451 711.858,598.357 712.417,619.701 712.976,637.33 713.536,637.723 714.095,653.721 714.654,655.831 715.213,639.321 715.773,627.636 716.332,644.37 716.891,661.673 717.45,640.748 718.01,660.966 718.569,665.352 719.128,665.464 719.687,635.324 720.247,659.09 720.806,677.63 721.365,662.227 721.924,712.801 722.484,742.878 723.043,724.925 723.602,741.288 724.161,741.5 724.721,738.018 725.28,723.719 725.839,723.581 726.398,720.969 726.958,671.656 727.517,656.665 728.076,660.122 728.635,677.011 729.195,661.466 729.754,680.284 730.313,714.019 730.872,697.949 731.432,697.617 731.991,679.813 732.55,683.288 733.109,677.573 733.669,648.442 734.228,652.939 734.787,690.006 735.346,674.177 735.906,692.18 736.465,694.428 737.024,689.976 737.583,688.538 738.143,703.516 738.702,718.916 739.261,721.074 739.82,719.421 740.38,735.627 740.939,718.958 741.498,732.728 742.057,745.988 742.617,745.697 743.176,742.275 743.735,735.296 744.294,714.162 744.854,715.036 745.413,711.643 745.972,726.141 746.531,739.974 747.091,735.51 747.65,732.639 748.209,728.829 748.768,712.46 749.328,695.077 749.887,729.981 750.446,727.311 751.005,745.23 751.565,710.428 752.124,695.496 752.683,713.18 753.242,693.78 753.802,661.897 754.361,679.663 754.92,679.959 755.479,697.333 756.039,698.91 756.598,681.283 757.157,677.852 757.716,677.222 758.276,663.776 758.835,634.426 759.394,634.502 759.953,653.454 760.513,670.01 761.072,689.387 761.631,672.769 762.19,657.016 762.75,661.229 763.309,662.176 763.868,680.322 764.427,680.839 764.987,699.296 765.546,701.38 766.105,718.873 766.664,717.097 767.224,718.119 767.783,734.098 768.342,732.968 768.901,697.885 769.461,678.516 770.02,661.241 770.579,663.859 771.138,683.878 771.698,649.134 772.257,651.014 772.816,588.42 773.375,595.573 773.935,602.395 774.494,591.993 775.053,610.07 775.612,614.908 776.172,636.691 776.731,658.085 777.29,676.506 777.849,693.329 778.409,708.894 778.968,723.398 779.527,690.309 780.086,657.712 780.646,689.894 781.205,722.107 781.764,750.648 782.323,733.121 782.883,734.096 783.442,731.344 784.001,747.338 784.56,745.19 785.12,741.228 785.679,739.407 786.238,768.479 786.797,778.877 787.357,788.573 787.916,753.8 788.475,751.26 789.034,745.768 789.594,762.47 790.153,744.572 790.712,727.288 791.271,724.352 791.831,720.726 792.39,720.249 792.949,702.952 793.508,702.139 794.068,716.298 794.627,715.362 795.186,709.814 795.745,708.426 796.305,692.279 796.864,673.524 797.423,657.516 797.982,690.941 798.542,676.741 799.101,661.357 799.66,660.286 800.219,679.006 800.779,692.455 801.338,710.394 801.897,722.705 802.456,704.818 803.016,689.87 803.575,702.848 804.134,703.423 804.693,688.014 805.253,673.767 805.812,691.261 806.371,721.243 806.931,721.343 807.49,720.192 808.049,698.563 808.608,717.466 809.168,717.771 809.727,728.984 810.286,742.461 810.845,771.595 811.405,749.449 811.964,777.121 812.523,786.788 813.082,781.268 813.642,774.851 814.201,736.493 814.76,765.575 815.319,776.393 815.879,769.1 816.438,765.01 816.997,744.099 817.556,726.929 818.116,710.157 818.675,693.403 819.234,694.638 819.793,678.395 820.353,677.657 820.912,697.298 821.471,698.354 822.03,651.717 822.59,637.449 823.149,655.452 823.708,654.098 824.267,620.696 824.827,637.75 825.386,626.707 825.945,708.962 826.504,738.795 827.064,719.087 827.623,718.712 828.182,730.791 828.741,746.558 829.301,762.488 829.86,739.648 830.419,719.281 830.978,716.43 831.538,699.266 832.097,697.619 832.656,714.493 833.215,714.897 833.775,777.374 834.334,754.892 834.893,797.116 835.452,821.69 836.012,834.455 836.571,794.133 837.13,739.333 837.689,754.984 838.249,736.566 838.808,730.671 839.367,698.617 839.926,681.565 840.486,715.035 841.045,695.627 841.604,695.98 842.163,662.606 842.723,679.496 843.282,650.454 843.841,650.042 844.4,654.673 844.96,672.359 845.519,659.442 846.078,644.475 846.637,646.454 847.197,665.588 847.756,695.544 848.315,695.291 848.874,711.172 849.434,705.843 849.993,671.471 850.552,671.167 851.111,653.942 851.671,654.907 852.23,659.679 852.789,693.104 853.348,755.348 853.908,754.171 854.467,748.833 855.026,747.328 855.585,694.52 856.145,697.175 856.704,713.143 857.263,695.581 857.822,677.705 858.382,663.924 858.941,668.341 859.5,652.646 860.059,652.203 860.619,635.749 861.178,617.682 861.737,618.002 862.296,620.888 862.856,622.963 863.415,625.361 863.974,615.678 864.533,587.859 865.093,595.092 865.652,585.772 866.211,622.448 866.77,642.199 867.33,677.737 867.889,693.998 868.448,711.579 869.007,695.643 869.567,697.595 870.126,711.481 870.685,694.828 871.244,695.447 871.804,697.069 872.363,729.387 872.922,709.981 873.481,692.966 874.041,723.326 874.6,719.086 875.159,698.278 875.718,726.331 876.278,710.87 876.837,690.923 877.396,692.295 877.955,692.408 878.515,674.659 879.074,659.572 879.633,661.482 880.192,647.437 880.752,648.108 881.311,648.528 881.87,637.321 882.429,658.59 882.989,690.479 883.548,675.972 884.107,662.537 884.666,680.774 885.226,699.948 885.785,681.133 886.344,648.096 886.903,646.91 887.463,634.027 888.022,635.404 888.581,639.176 889.14,639.936 889.7,644.191 890.259,678.435 890.818,614.634 891.377,634.76 891.937,656.228 892.496,658.232 893.055,645.889 893.614,667.136 894.174,650.858 894.733,670.641 895.292,704.323 895.851,687.398 896.411,654.194 896.97,640.73 897.529,662.049 898.088,632.474 898.648,648.25 899.207,654.31 899.766,672.093 900.325,622.569 900.885,626.267 901.444,616.446 902.003,640.415 902.562,626.95 903.122,612.848 903.681,632.379 904.24,651.87 904.799,651.582 905.359,668.914 905.918,718.919 906.477,717.92 907.036,718.708 907.596,716.938 908.155,713.832 908.714,730.327 909.273,712.185 909.833,745.43 910.392,728.061 910.951,756.054 911.51,752.248 912.07,748.353 912.629,747.482 913.188,758.856 913.747,756.7 914.307,718.681 914.866,697.722 915.425,694.407 915.984,692.234 916.544,693.586 917.103,691.589 917.662,672.02 918.221,720.186 918.781,734.005 919.34,736.354 919.899,734.43 920.458,717.853 921.018,715.953 921.577,717.215 922.136,764.326 922.695,779.495 923.255,777.905 923.814,758.834 924.373,739.987 924.932,737.134 925.492,748.487 926.051,762.504 926.61,777.882 927.169,774.228 927.729,783.569 928.288,809.364 928.847,816.309 929.406,777.178 929.966,773.237 930.525,719.147 931.084,736.037 931.644,719.513 932.203,746.992 932.762,710.444 933.321,706.609 933.881,691.107 934.44,674.134 934.999,642.313 935.558,614.196 936.118,585.187 936.677,623.355 937.236,643.791 937.795,629.832 938.355,614.351 938.914,623.354 939.473,660.394 940.032,644.042 940.592,659.633 941.151,675.16 941.71,671.772 942.269,689.412 942.829,688.373 943.388,702.205 943.947,698.692 944.506,680.228 945.066,715.862 945.625,681.378 946.184,680.507 946.743,682.556 947.303,702.357 947.862,715.012 948.421,716.614 948.98,696.642 949.54,733.012 950.099,719.426 950.658,667.508 951.217,688.61 951.777,687.38 952.336,651.878 952.895,639.338 953.454,654.002 954.014,607.078 954.573,630.039 955.132,633.898 955.691,633.156 956.251,616.64 956.81,635.96 957.369,621.294 957.928,701.292 958.488,731.785 959.047,731.708 959.606,727.06 960.165,706.808 960.725,692.668 961.284,705.578 961.843,718.796 962.402,681.744 962.962,683.512 963.521,671.595 964.08,641.665 964.639,661.841 965.199,662.608 965.758,712.847 966.317,711.975 966.876,724.253 967.436,737.754 967.995,719.775 968.554,699.054 969.113,701.161 969.673,718.055 970.232,701.641 970.791,715.759 971.35,715.574 971.91,713.71 972.469,712.74 973.028,709.707 973.587,679.884 974.147,681.658 974.706,682.974 975.265,697.655 975.824,711.835 976.384,692.847 976.943,721.939 977.502,739.413 978.061,734.948 978.621,687.005 979.18,690.379 979.739,675.727 980.298,725.484 980.858,711.479 981.417,707.846 981.976,710.121 982.535,709.924 983.095,726.648 983.654,722.898 984.213,705.727 984.772,738.107 985.332,737.247 985.891,731.479 986.45,762.873 987.009,758.764 987.569,738.597 988.128,719.039 988.687,717.992 989.246,700.63 989.806,666.2 990.365,667.71 990.924,655.712 991.483,640.38 992.043,641.566 992.602,642.453 993.161,659.199 993.72,661.01 994.28,679.634 994.839,678.801 995.398,663.727 995.957,664.417 996.517,633.313 997.076,639.684 997.635,660.091 998.194,629.548 998.754,631.016 999.313,633.695 999.872,652.549 1000.43,668.509 1000.99,734.019 1001.55,748.839 1002.11,742.758 1002.67,724.978 1003.23,722.806 1003.79,707.767 1004.35,705.502 1004.91,705.344 1005.46,720.944 1006.02,704.584 1006.58,671.987 1007.14,688.142 1007.7,670.292 1008.26,690.912 1008.82,691.516 1009.38,691.529 1009.94,689.508 1010.5,705.874 1011.06,689.602 1011.62,718.723 1012.18,685.187 1012.73,649.253 1013.29,647.403 1013.85,637.022 1014.41,687.159 1014.97,716.107 1015.53,762.63 1016.09,724.758 1016.65,738.625 1017.21,755.359 1017.77,750.969 1018.33,761.204 1018.89,793.506 1019.45,784.143 1020.01,843.396 1020.56,867.468 1021.12,827.472 1021.68,806.135 1022.24,766.412 1022.8,744.984 1023.36,727.535 1023.92,694.321 1024.48,681.432 1025.04,679.363 1025.6,679.015 1026.16,665.055 1026.72,680.69 1027.28,632.248 1027.83,635.781 1028.39,618.843 1028.95,608.894 1029.51,581.696 1030.07,635.322 1030.63,656.764 1031.19,660.285 1031.75,662.658 1032.31,660.722 1032.87,534.293 1033.43,522.289 1033.99,549.281 1034.55,574.219 1035.1,578.503 1035.66,571.049 1036.22,607.422 1036.78,597.861 1037.34,584.017 1037.9,619.768 1038.46,604.672 1039.02,608.09 1039.58,675.012 1040.14,692.371 1040.7,706.69 1041.26,722.584 1041.82,734.532 1042.38,716.259 1042.93,731.728 1043.49,696.786 1044.05,676.252 1044.61,658.85 1045.17,690.955 1045.73,691.511 1046.29,705.348 1046.85,689.571 1047.41,657.734 1047.97,641.855 1048.53,676.595 1049.09,674.965 1049.65,691.224 1050.2,709.177 1050.76,709.929 1051.32,688.616 1051.88,685.021 1052.44,701.236 1053,717.419 1053.56,731.785 1054.12,710.793 1054.68,710.558 1055.24,727.996 1055.8,691.132 1056.36,692.927 1056.92,678.41 1057.48,666.063 1058.03,631.614 1058.59,635.528 1059.15,654.217 1059.71,673.305 1060.27,689.141 1060.83,658.482 1061.39,677.246 1061.95,661.571 1062.51,677.549 1063.07,709.568 1063.63,694.173 1064.19,691.299 1064.75,708.743 1065.3,710.174 1065.86,677.714 1066.42,680.174 1066.98,698.118 1067.54,698.924 1068.1,715.618 1068.66,716.198 1069.22,719.038 1069.78,686.346 1070.34,688.755 1070.9,703.826 1071.46,701.4 1072.02,699.646 1072.57,742.839 1073.13,724.575 1073.69,723.566 1074.25,736.435 1074.81,715.161 1075.37,694.596 1075.93,692.569 1076.49,690.67 1077.05,689.318 1077.61,685.598 1078.17,687.131 1078.73,688.279 1079.29,690.748 1079.85,658.6 1080.4,662.184 1080.96,667.055 1081.52,636.74 1082.08,636.054 1082.64,621.415 1083.2,621.259 1083.76,626.594 1084.32,629.674 1084.88,648.602 1085.44,652.998 1086,658.769 1086.56,659.46 1087.12,661.558 1087.67,662.617 1088.23,661.518 1088.79,665.372 1089.35,631.269 1089.91,635.126 1090.47,622.762 1091.03,609.129 1091.59,613.26 1092.15,617.066 1092.71,621.132 1093.27,623.528 1093.83,609.768 1094.39,615.552 1094.94,604.463 1095.5,625.537 1096.06,627.942 1096.62,615.802 1097.18,634.645 1097.74,649.977 1098.3,682.702 1098.86,732.811 1099.42,776.816 1099.98,723.23 1100.54,753.667 1101.1,733.544 1101.66,733.012 1102.22,728.02 1102.77,723.09 1103.33,719.621 1103.89,698.032 1104.45,695.3 1105.01,681.488 1105.57,679.69 1106.13,679.15 1106.69,679.228 1107.25,692.986 1107.81,657.058 1108.37,643.589 1108.93,661.605 1109.49,646.941 1110.04,663.537 1110.6,648.259 1111.16,683.357 1111.72,682.192 1112.28,714.986 1112.84,663.783 1113.4,697.202 1113.96,676.207 1114.52,692.089 1115.08,690.295 1115.64,724.469 1116.2,705.784 1116.76,688.787 1117.31,639.201 1117.87,624.873 1118.43,608.631 1118.99,594.03 1119.55,632.166 1120.11,638.532 1120.67,639.41 1121.23,641.994 1121.79,645.469 1122.35,664.934 1122.91,664.982 1123.47,681.316 1124.03,683.582 1124.59,700.517 1125.14,684.633 1125.7,700.808 1126.26,672.034 1126.82,687.684 1127.38,687.319 1127.94,752.417 1128.5,812.027 1129.06,792.476 1129.62,773.023 1130.18,803.811 1130.74,778.135 1131.3,757.265 1131.86,753.894 1132.41,747.957 1132.97,729.574 1133.53,710.809 1134.09,710.181 1134.65,706.58 1135.21,706.219 1135.77,690.786 1136.33,642.293 1136.89,654.4 1137.45,676.6 1138.01,704.498 1138.57,687.704 1139.13,705.32 1139.68,705.91 1140.24,640.197 1140.8,642.624 1141.36,659.343 1141.92,677.882 1142.48,695.907 1143.04,693.732 1143.6,675.141 1144.16,660.346 1144.72,694.725 1145.28,707.631 1145.84,655.512 1146.4,637.901 1146.96,657.987 1147.51,662.592 1148.07,662.544 1148.63,693.852 1149.19,710.39 1149.75,707.481 1150.31,722.139 1150.87,716.822 1151.43,730.914 1151.99,729.448 1152.55,728.089 1153.11,710.994 1153.67,697.049 1154.23,728.131 1154.78,712.903 1155.34,706.491 1155.9,703.204 1156.46,655.087 1157.02,639.279 1157.58,640.564 1158.14,658.428 1158.7,662.718 1159.26,693.714 1159.82,694.252 1160.38,693.117 1160.94,676.234 1161.5,679.293 1162.05,666.308 1162.61,653.862 1163.17,687.056 1163.73,703.858 1164.29,700.991 1164.85,681.018 1165.41,685.544 1165.97,684.239 1166.53,700.944 1167.09,718.613 1167.65,755.183 1168.21,753.202 1168.77,734.106 1169.33,765.992 1169.88,730.894 1170.44,712.226 1171,709.003 1171.56,709.299 1172.12,692.779 1172.68,709.814 1173.24,706.285 1173.8,717.822 1174.36,685.278 1174.92,733.978 1175.48,748.939 1176.04,763.515 1176.6,730.527 1177.15,730.161 1177.71,727.478 1178.27,695.116 1178.83,677.156 1179.39,675.142 1179.95,630.975 1180.51,664.061 1181.07,652.065 1181.63,673.385 1182.19,673.222 1182.75,672.565 1183.31,707.456 1183.87,706.377 1184.43,707.545 1184.98,708.493 1185.54,654.053 1186.1,685.611 1186.66,670.481 1187.22,623.173 1187.78,623.572 1188.34,644.598 1188.9,630.043 1189.46,601.788 1190.02,636.388 1190.58,606.39 1191.14,623.756 1191.7,623.218 1192.25,661.917 1192.81,626.95 1193.37,596.014 1193.93,596.537 1194.49,618.687 1195.05,625.358 1195.61,611.115 1196.17,634.911 1196.73,639.66 1197.29,658.33 1197.85,647.153 1198.41,636.753 1198.97,624.534 1199.52,629.627 1200.08,618.943 1200.64,623.262 1201.2,625.172 1201.76,646.919 1202.32,650.118 1202.88,651.332 1203.44,653.535 1204,654.222 1204.56,673.525 1205.12,672.274 1205.68,690.243 1206.24,677.423 1206.8,679.721 1207.35,666.501 1207.91,670.7 1208.47,672.634 1209.03,674.242 1209.59,691.75 1210.15,723.27 1210.71,735.128 1211.27,681.782 1211.83,711.435 1212.39,711.939 1212.95,710.479 1213.51,710.282 1214.07,741.468 1214.62,769.792 1215.18,782.315 1215.74,777.024 1216.3,741.817 1216.86,739.357 1217.42,734.359 1217.98,733.324 1218.54,729.062 1219.1,740.967 1219.66,739.979 1220.22,721.649 1220.78,688.823 1221.34,689.604 1221.89,686.359 1222.45,721.267 1223.01,721.455 1223.57,684.473 1224.13,652.046 1224.69,651.332 1225.25,654.117 1225.81,671.99 1226.37,658.096 1226.93,657.314 1227.49,662.92 1228.05,665.064 1228.61,682.717 1229.17,678.924 1229.72,664.259 1230.28,682.328 1230.84,680.903 1231.4,663.217 1231.96,668.172 1232.52,652.459 1233.08,654.929 1233.64,708.143 1234.2,720.789 1234.76,732.805 1235.32,710.228 1235.88,693.997 1236.44,709.415 1236.99,740.015 1237.55,705.708 1238.11,701.358 1238.67,717.457 1239.23,715.941 1239.79,701.4 1240.35,698.593 1240.91,727.763 1241.47,758.471 1242.03,755.434 1242.59,782.346 1243.15,790.642 1243.71,750.774 1244.26,796.288 1244.82,759.133 1245.38,736.583 1245.94,750.168 1246.5,761.141 1247.06,723.484 1247.62,722.858 1248.18,702.183 1248.74,716.194 1249.3,732.732 1249.86,757.995 1250.42,771.363 1250.98,778.671 1251.54,790.052 1252.09,780.067 1252.65,775.361 1253.21,769.947 1253.77,750.234 1254.33,774.533 1254.89,769.824 1255.45,751.991 1256.01,732.643 1256.57,714.671 1257.13,711.752 1257.69,725.762 1258.25,788.001 1258.81,733.051 1259.36,746.545 1259.92,711.282 1260.48,725.452 1261.04,726.812 1261.6,709.517 1262.16,706.936 1262.72,658.442 1263.28,645.973 1263.84,631.031 1264.4,651.918 1264.96,684.646 1265.52,667.833 1266.08,651.968 1266.63,652.949 1267.19,685.46 1267.75,715.779 1268.31,696.644 1268.87,713.913 1269.43,744.017 1269.99,739.162 1270.55,751.443 1271.11,748.44 1271.67,713.693 1272.23,740.456 1272.79,702.482 1273.35,683.852 1273.91,685.982 1274.46,685.451 1275.02,671.666 1275.58,654.168 1276.14,654.487 1276.7,654.257 1277.26,671.669 1277.82,636.439 1278.38,651.123 1278.94,653.935 1279.5,686.388 1280.06,719.769 1280.62,716.665 1281.18,715.881 1281.73,734.341 1282.29,734.023 1282.85,733.116 1283.41,728.754 1283.97,773.081 1284.53,769.352 1285.09,797.249 1285.65,758.245 1286.21,754.782 1286.77,747.694 1287.33,739.89 1287.89,750.8 1288.45,780.5 1289,774.785 1289.56,752.858 1290.12,734.061 1290.68,777.258 1291.24,805.245 1291.8,801.636 1292.36,763.729 1292.92,709.203 1293.48,690.755 1294.04,708.684 1294.6,673.977 1295.16,669.307 1295.72,653.56 1296.28,638.755 1296.83,642.594 1297.39,645.711 1297.95,649.11 1298.51,633.49 1299.07,616.494 1299.63,621.946 1300.19,611.105 1300.75,630.09 1301.31,615.52 1301.87,638.209 1302.43,655.573 1302.99,652.795 1303.55,669.233 1304.1,688.41 1304.66,655.212 1305.22,689.159 1305.78,687.369 1306.34,668.483 1306.9,687.318 1307.46,669.536 1308.02,621.693 1308.58,627.189 1309.14,648.201 1309.7,650.968 1310.26,635.854 1310.82,635.88 1311.38,654.327 1311.93,624.526 1312.49,693.183 1313.05,707.454 1313.61,675.918 1314.17,694.011 1314.73,673.949 1315.29,710.357 1315.85,691.03 1316.41,691.24 1316.97,687.874 1317.53,656.198 1318.09,640.119 1318.65,643.384 1319.2,643.117 1319.76,596.714 1320.32,599.441 1320.88,603.717 1321.44,578.206 1322,570.581 1322.56,576.424 1323.12,599.36 1323.68,603.678 1324.24,596.005 1324.8,569.736 1325.36,557.144 1325.92,566.693 1326.47,540.928 1327.03,504.006 1327.59,545.227 1328.15,535.286 1328.71,556.9 1329.27,595.071 1329.83,591.018 1330.39,628.495 1330.95,631.014 1331.51,598.517 1332.07,636.32 1332.63,637.78 1333.19,657.782 1333.75,659.295 1334.3,659.553 1334.86,643.769 1335.42,630.501 1335.98,683.176 1336.54,718.52 1337.1,732.712 1337.66,745.86 1338.22,709.207 1338.78,723.408 1339.34,719.183 1339.9,736.084 1340.46,729.532 1341.02,712.838 1341.57,694.599 1342.13,694.943 1342.69,678.306 1343.25,677.393 1343.81,631.496 1344.37,649.121 1344.93,620.725 1345.49,640.32 1346.05,630.396 1346.61,651.155 1347.17,623.052 1347.73,641.372 1348.29,620.464 1348.84,623.029 1349.4,612.723 1349.96,647.848 1350.52,683.76 1351.08,670.159 1351.64,689.043 1352.2,703.1 1352.76,700.492 1353.32,752.444 1353.88,749.626 1354.44,761.03 1355,739.606 1355.56,753.113 1356.12,763.467 1356.67,744.757 1357.23,693.965 1357.79,675.666 1358.35,694.444 1358.91,726.888 1359.47,768.538 1360.03,762.411 1360.59,776.274 1361.15,734.287 1361.71,751.313 1362.27,748.913 1362.83,711.28 1363.39,695.852 1363.94,697 1364.5,659.666 1365.06,677.994 1365.62,696.294 1366.18,647.694 1366.74,599.801 1367.3,605.294 1367.86,612.322 1368.42,633.427 1368.98,621.605 1369.54,641.397 1370.1,655.038 1370.66,686.908 1371.21,717.828 1371.77,733.294 1372.33,728.71 1372.89,724.099 1373.45,724.22 1374.01,721.403 1374.57,704.507 1375.13,715.042 1375.69,711.95 1376.25,756.098 1376.81,720.853 1377.37,702.912 1377.93,698.249 1378.49,681.936 1379.04,697.559 1379.6,698.756 1380.16,664.739 1380.72,650.357 1381.28,622.169 1381.84,623.587 1382.4,675.934 1382.96,690.209 1383.52,723.374 1384.08,706.518 1384.64,702.911 1385.2,684.585 1385.76,682.946 1386.31,701.947 1386.87,730.176 1387.43,710.931 1387.99,677.12 1388.55,708.391 1389.11,723.391 1389.67,731.454 1390.23,711.156 1390.79,708.296 1391.35,724.148 1391.91,726.531 1392.47,690.765 1393.03,690.434 1393.58,690.328 1394.14,691.683 1394.7,675.084 1395.26,676.42 1395.82,660.205 1396.38,676.479 1396.94,711.772 1397.5,706.997 1398.06,709.134 1398.62,659.246 1399.18,660.272 1399.74,675.984 1400.3,677.419 1400.86,658.517 1401.41,691.704 1401.97,674.718 1402.53,661.442 1403.09,628.018 1403.65,633.091 1404.21,633.672 1404.77,635.427 1405.33,637.208 1405.89,655.064 1406.45,639.729 1407.01,621.57 1407.57,627.7 1408.13,631.08 1408.68,617.924 1409.24,601.659 1409.8,624.043 1410.36,644.11 1410.92,662.786 1411.48,667.966 1412.04,665.959 1412.6,653.604 1413.16,642.144 1413.72,661.038 1414.28,679.951 1414.84,669.195 1415.4,655.731 1415.95,677.744 1416.51,690.944 1417.07,689.731 1417.63,724.002 1418.19,710.995 1418.75,678.339 1419.31,660.024 1419.87,648.221 1420.43,670.04 1420.99,639.769 1421.55,628.724 1422.11,648.696 1422.67,667.82 1423.23,701.533 1423.78,685.725 1424.34,655.274 1424.9,655.402 1425.46,672.203 1426.02,643.46 1426.58,644.117 1427.14,665.504 1427.7,669.144 1428.26,637.679 1428.82,655.446 1429.38,674.075 1429.94,688.515 1430.5,700 1431.05,682.184 1431.61,714.363 1432.17,696.951 1432.73,697.448 1433.29,695.686 1433.85,716.014 1434.41,679.717 1434.97,696.452 1435.53,711.39 1436.09,694.895 1436.65,676.202 1437.21,660.865 1437.77,690.986 1438.33,725.243 1438.88,707.298 1439.44,740.859 1440,740.453 1440.56,737.209 1441.12,716.863 1441.68,718.702 1442.24,764.081 1442.8,742.93 1443.36,774.241 1443.92,782.611 1444.48,776.706 1445.04,774.632 1445.6,755.298 1446.15,735.089 1446.71,750.172 1447.27,760.886 1447.83,773.906 1448.39,784.624 1448.95,810.542 1449.51,774.033 1450.07,771.521 1450.63,734.253 1451.19,711.251 1451.75,711.287 1452.31,708.314 1452.87,740.992 1453.42,742.649 1453.98,719.951 1454.54,734.751 1455.1,729.226 1455.66,740.661 1456.22,737.73 1456.78,718.311 1457.34,717.449 1457.9,761.718 1458.46,755.764 1459.02,737.233 1459.58,729.943 1460.14,724.534 1460.7,725.363 1461.25,739.604 1461.81,769.53 1462.37,750.843 1462.93,715.634 1463.49,696.635 1464.05,650.568 1464.61,651.861 1465.17,653.815 1465.73,669.881 1466.29,684.858 1466.85,682.535 1467.41,682.878 1467.97,743.835 1468.52,753.593 1469.08,734.601 1469.64,701.927 1470.2,729.134 1470.76,742.008 1471.32,740.5 1471.88,722.732 1472.44,722.974 1473,717.796 1473.56,745.998 1474.12,739.836 1474.68,770.045 1475.24,750.945 1475.79,697.83 1476.35,714.756 1476.91,713.849 1477.47,728.508 1478.03,725.031 1478.59,710.209 1479.15,705.961 1479.71,716.171 1480.27,727.144 1480.83,727.669 1481.39,689.649 1481.95,690.043 1482.51,693.511 1483.07,707.166 1483.62,704.274 1484.18,684.455 1484.74,635.754 1485.3,619.705 1485.86,609.052 1486.42,613.526 1486.98,634.382 1487.54,625.308 1488.1,596.027 1488.66,601.397 1489.22,604.34 1489.78,578.042 1490.34,584.415 1490.89,543.109 1491.45,537.337 1492.01,548.188 1492.57,569.42 1493.13,560.469 1493.69,563.425 1494.25,584.999 1494.81,572.193 1495.37,610.944 1495.93,615.572 1496.49,632.859 1497.05,634.691 1497.61,669.98 1498.16,671.484 1498.72,641.087 1499.28,608.552 1499.84,614.143 1500.4,602.884 1500.96,589.52 1501.52,577.738 1502.08,567.316 1502.64,557.391 1503.2,568.762 1503.76,560.637 1504.32,553.514 1504.88,573.669 1505.44,581.335 1505.99,621.062 1506.55,621.957 1507.11,637.908 1507.67,672.831 1508.23,703.592 1508.79,672.623 1509.35,637.945 1509.91,640.911 1510.47,609.231 1511.03,598.876 1511.59,603.114 1512.15,591.474 1512.71,626.351 1513.26,645.448 1513.82,645.228 1514.38,665.537 1514.94,714.622 1515.5,716.256 1516.06,697.345 1516.62,712.174 1517.18,710.295 1517.74,723.056 1518.3,689.088 1518.86,687.961 1519.42,685.778 1519.98,691.301 1520.53,705.421 1521.09,738.246 1521.65,753.283 1522.21,721.176 1522.77,721.059 1523.33,721.115 1523.89,750.925 1524.45,729.528 1525.01,698.735 1525.57,698.929 1526.13,665.07 1526.69,666.388 1527.25,667.032 1527.81,617.428 1528.36,605.801 1528.92,626.563 1529.48,631.624 1530.04,635.257 1530.6,653.341 1531.16,655.001 1531.72,639.651 1532.28,639.029 1532.84,628.89 1533.4,629.439 1533.96,633.936 1534.52,653.947 1535.08,689.24 1535.63,672.145 1536.19,643.397 1536.75,659.599 1537.31,660.072 1537.87,679.662 1538.43,663.491 1538.99,648.06 1539.55,650.295 1540.11,653.954 1540.67,656.361 1541.23,622.754 1541.79,595.358 1542.35,601.104 1542.9,607.293 1543.46,593.374 1544.02,627.627 1544.58,663.801 1545.14,668.883 1545.7,699.78 1546.26,735.045 1546.82,749.847 1547.38,779.645 1547.94,756.713 1548.5,789.15 1549.06,755.274 1549.62,735.527 1550.18,729.977 1550.73,790.773 1551.29,817.093 1551.85,795.422 1552.41,805.36 1552.97,813.696 1553.53,803.756 1554.09,815.613 1554.65,807.554 1555.21,769.644 1555.77,765.205 1556.33,745.733 1556.89,724.613 1557.45,706.988 1558,721.483 1558.56,733.579 1559.12,714.543 1559.68,728.374 1560.24,709.091 1560.8,705.663 1561.36,668.952 1561.92,671.895 1562.48,639.627 1563.04,619.169 1563.6,639.42 1564.16,657.182 1564.72,639.69 1565.28,624.322 1565.83,663.101 1566.39,665.899 1566.95,682.418 1567.51,696.337 1568.07,693.382 1568.63,693.444 1569.19,755.514 1569.75,768.081 1570.31,749.051 1570.87,749.772 1571.43,729.523 1571.99,695.097 1572.55,662.868 1573.1,652.502 1573.66,667.761 1574.22,683.591 1574.78,683.466 1575.34,685.822 1575.9,673.915 1576.46,658.636 1577.02,672.266 1577.58,658.485 1578.14,644.569 1578.7,677.758 1579.26,695.801 1579.82,678.879 1580.37,677.787 1580.93,684.078 1581.49,698.758 1582.05,636.591 1582.61,656.202 1583.17,639.369 1583.73,675.713 1584.29,659.933 1584.85,681.295 1585.41,695.854 1585.97,709.315 1586.53,704.814 1587.09,703.24 1587.65,702 1588.2,731.918 1588.76,685.451 1589.32,686.207 1589.88,719.13 1590.44,732.749 1591,743.114 1591.56,741.61 1592.12,772.064 1592.68,800.859 1593.24,809.959 1593.8,727.163 1594.36,725.369 1594.92,738.252 1595.47,733.912 1596.03,763.137 1596.59,758.467 1597.15,798.282 1597.71,760.994 1598.27,759.265 1598.83,753.945 1599.39,715.822 1599.95,713.779 1600.51,728.486 1601.07,710.573 1601.63,692.754 1602.19,727.789 1602.74,758.988 1603.3,738.954 1603.86,700.005 1604.42,697.499 1604.98,696.869 1605.54,695.288 1606.1,661.231 1606.66,647.005 1607.22,618.473 1607.78,621.673 1608.34,612.836 1608.9,647.915 1609.46,630.835 1610.02,649.354 1610.57,619.457 1611.13,622.09 1611.69,646.022 1612.25,695.736 1612.81,679.032 1613.37,645.883 1613.93,680.134 1614.49,693.601 1615.05,709.704 1615.61,723.592 1616.17,722.857 1616.73,685.085 1617.29,650.883 1617.84,702.609 1618.4,674.737 1618.96,692.622 1619.52,673.044 1620.08,688.467 1620.64,685.721 1621.2,690.689 1621.76,756.661 1622.32,755.561 1622.88,740.381 1623.44,737.248 1624,704.111 1624.56,702.721 1625.11,682.216 1625.67,700.169 1626.23,729.075 1626.79,723.882 1627.35,739.54 1627.91,708.016 1628.47,720.775 1629.03,701.737 1629.59,704.588 1630.15,701.596 1630.71,668.593 1631.27,673.124 1631.83,657.643 1632.39,687.566 1632.94,703.571 1633.5,687.195 1634.06,654.201 1634.62,673.395 1635.18,739.308 1635.74,733.968 1636.3,742.697 1636.86,723.168 1637.42,722.743 1637.98,720.192 1638.54,719.889 1639.1,700.489 1639.66,699.777 1640.21,683.019 1640.77,682.534 1641.33,650.319 1641.89,619.377 1642.45,639.475 1643.01,656.633 1643.57,656.07 1644.13,642.35 1644.69,627.821 1645.25,630.682 1645.81,667.586 1646.37,652.746 1646.93,635.921 1647.48,655.638 1648.04,625.54 1648.6,626.65 1649.16,611.133 1649.72,620.023 1650.28,634.938 1650.84,653.62 1651.4,653.478 1651.96,638.126 1652.52,655.829 1653.08,644.981 1653.64,633.578 1654.2,670.172 1654.76,705.241 1655.31,704.959 1655.87,705.827 1656.43,702.983 1656.99,683.829 1657.55,700.7 1658.11,712.241 1658.67,694.368 1659.23,680.105 1659.79,665.366 1660.35,665.765 1660.91,665.494 1661.47,665.56 1662.03,650.072 1662.58,637.226 1663.14,656.606 1663.7,653.208 1664.26,639.962 1664.82,643.405 1665.38,645.194 1665.94,664.508 1666.5,647.635 1667.06,650.592 1667.62,632.253 1668.18,635.411 1668.74,641.877 1669.3,659.265 1669.85,627.33 1670.41,632.094 1670.97,636.369 1671.53,626.889 1672.09,615.204 1672.65,653.58 1673.21,670.149 1673.77,671.319 1674.33,672.311 1674.89,653.501 1675.45,670.407 1676.01,701.776 1676.57,715.904 1677.13,695.773 1677.68,713.791 1678.24,744.71 1678.8,694.156 1679.36,660.632 1679.92,678.975 1680.48,695.708 1681.04,696.053 1681.6,715.45 1682.16,716.84 1682.72,728.341 1683.28,710.279 1683.84,676.349 1684.4,696.378 1684.95,677.64 1685.51,645.172 1686.07,645.313 1686.63,712.555 1687.19,727.767 1687.75,725.766 1688.31,723.139 1688.87,718.11 1689.43,713.155 1689.99,710.794 1690.55,709.349 1691.11,727.858 1691.67,676.924 1692.23,674.471 1692.78,693.697 1693.34,680.623 1693.9,699.458 1694.46,695.308 1695.02,696.388 1695.58,693.373 1696.14,694.205 1696.7,677.017 1697.26,692.433 1697.82,690.778 1698.38,722.529 1698.94,704.1 1699.5,700.497 1700.05,716.551 1700.61,749.933 1701.17,745.231 1701.73,742.175 1702.29,727.173 1702.85,710.241 1703.41,710.284 1703.97,757.674 1704.53,719.866 1705.09,750.425 1705.65,734.102 1706.21,696.233 1706.77,708.718 1707.32,705.694 1707.88,706.6 1708.44,718.552 1709,736.714 1709.56,766.781 1710.12,779.268 1710.68,761.372 1711.24,755.71 1711.8,753.792 1712.36,699.253 1712.92,665.543 1713.48,650.229 1714.04,664.383 1714.6,634.636 1715.15,635.035 1715.71,621.075 1716.27,625.901 1716.83,613.072 1717.39,615.592 1717.95,633.83 1718.51,617.807 1719.07,619.804 1719.63,603.659 1720.19,607.249 1720.75,632.043 1721.31,634.115 1721.87,621.211 1722.42,626.412 1722.98,644.871 1723.54,678.409 1724.1,664.563 1724.66,711.455 1725.22,709.942 1725.78,711.32 1726.34,713.367 1726.9,713.154 1727.46,708.456 1728.02,693.682 1728.58,695.61 1729.14,682.483 1729.69,700.604 1730.25,700.329 1730.81,635.947 1731.37,637.279 1731.93,689.194 1732.49,685.701 1733.05,682.595 1733.61,684.11 1734.17,686.515 1734.73,671.025 1735.29,671.402 1735.85,673.449 1736.41,674.311 1736.97,658.903 1737.52,707.757 1738.08,691.074 1738.64,692.642 1739.2,693.386 1739.76,694.639 1740.32,690.122 1740.88,689.552 1741.44,703.476 1742,736.577 1742.56,731.528 1743.12,727.693 1743.68,709.579 1744.24,738.55 1744.79,738.925 1745.35,753.133 1745.91,782.348 1746.47,761.736 1747.03,710.863 1747.59,677.175 1748.15,609.151 1748.71,630.006 1749.27,645.627 1749.83,616.995 1750.39,636.164 1750.95,605.647 1751.51,607.71 1752.06,626.065 1752.62,632.121 1753.18,653.104 1753.74,638.09 1754.3,659.462 1754.86,664.674 1755.42,682.641 1755.98,698.546 1756.54,681.068 1757.1,700.451 1757.66,700.04 1758.22,700.222 1758.78,683.321 1759.34,732.206 1759.89,746.982 1760.45,758.785 1761.01,755.74 1761.57,722.91 1762.13,721.414 1762.69,702.597 1763.25,704.071 1763.81,717.083 1764.37,713.035 1764.93,762.865 1765.49,807.506 1766.05,788.157 1766.61,765.297 1767.16,742.58 1767.72,742.419 1768.28,756.558 1768.84,757.246 1769.4,737.869 1769.96,764.578 1770.52,792.506 1771.08,803.832 1771.64,783.204 1772.2,774.992 1772.76,768.98 1773.32,764.826 1773.88,710.633 1774.43,691.888 1774.99,692.525 1775.55,691.987 1776.11,677.326 1776.67,675.745 1777.23,676.976 1777.79,658.901 1778.35,663.311 1778.91,680.846 1779.47,613.068 1780.03,636.072 1780.59,622.078 1781.15,623.963 1781.71,628.755 1782.26,664.497 1782.82,649.06 1783.38,681.502 1783.94,664.433 1784.5,666.833 1785.06,651.922 1785.62,670.007 1786.18,672.469 1786.74,671.836 1787.3,690.858 1787.86,708.92 1788.42,707.547 1788.98,754.149 1789.53,765.174 1790.09,747.299 1790.65,726.972 1791.21,707.394 1791.77,707.785 1792.33,675.273 1792.89,694.392 1793.45,643.559 1794.01,661.088 1794.57,644.778 1795.13,635.803 1795.69,637.418 1796.25,624.225 1796.8,632.063 1797.36,619.584 1797.92,688.867 1798.48,675.06 1799.04,693.988 1799.6,741.837 1800.16,737.212 1800.72,767.086 1801.28,763.671 1801.84,760.997 1802.4,757.249 1802.96,738.261 1803.52,719.997 1804.08,721.65 1804.63,703.227 1805.19,702.122 1805.75,667.23 1806.31,668.7 1806.87,685.995 1807.43,656.001 1807.99,688.768 1808.55,723.833 1809.11,723.182 1809.67,707.076 1810.23,724.682 1810.79,708.457 1811.35,743.917 1811.9,725.478 1812.46,756.889 1813.02,735.808 1813.58,716.534 1814.14,728.464 1814.7,738.821 1815.26,670.957 1815.82,672.162 1816.38,674.285 1816.94,738.899 1817.5,720.769 1818.06,734.762 1818.62,698.914 1819.18,668.149 1819.73,673.543 1820.29,673.243 1820.85,654.176 1821.41,654.514 1821.97,625.487 1822.53,598.375 1823.09,588.517 1823.65,577.11 1824.21,583.167 1824.77,623.646 1825.33,661.691 1825.89,661.795 1826.45,663.22 1827,647.555 1827.56,650.155 1828.12,665.919 1828.68,650.241 1829.24,636.56 1829.8,620.132 1830.36,640.472 1830.92,627.723 1831.48,645.518 1832.04,662.365 1832.6,695.296 1833.16,690.439 1833.72,725.048 1834.27,703.969 1834.83,746.511 1835.39,679.596 1835.95,645.221 1836.51,613.748 1837.07,635.324 1837.63,684.107 1838.19,699.217 \"/>\n<path clip-path=\"url(#clip523)\" d=\"M720.247 691.69 L720.806 691.69 L721.365 691.69 L721.924 691.69 L722.484 691.69 L723.043 691.69 L723.602 691.69 L724.161 691.69 L724.721 691.69 L725.28 691.69 L725.839 691.69 L726.398 691.69 L726.958 691.69 L727.517 691.69 L728.076 691.69 L728.635 691.69 L729.195 691.69 L729.754 691.69 L730.313 691.69 L730.872 691.69 L731.432 691.69 L731.991 691.69 L732.55 691.69 L733.109 691.69 L733.669 691.69 L734.228 691.69 L734.787 691.69 L735.346 691.69 L735.906 691.69 L736.465 691.69 L737.024 691.69 L737.583 691.69 L738.143 691.69 L738.702 691.69 L739.261 691.69 L739.82 691.69 L740.38 691.69 L740.939 691.69 L741.498 691.69 L742.057 691.69 L742.617 691.69 L743.176 691.69 L743.735 691.69 L744.294 691.69 L744.854 691.69 L745.413 691.69 L745.972 691.69 L746.531 691.69 L747.091 691.69 L747.65 691.69 L748.209 691.69 L748.768 691.69 L749.328 691.69 L749.887 691.69 L750.446 691.69 L751.005 691.69 L751.565 691.69 L752.124 691.69 L752.683 691.69 L753.242 691.69 L753.802 691.69 L754.361 691.69 L754.92 691.69 L755.479 691.69 L756.039 691.69 L756.598 691.69 L757.157 691.69 L757.716 691.69 L758.276 691.69 L758.835 691.69 L759.394 691.69 L759.953 691.69 L760.513 691.69 L761.072 691.69 L761.631 691.69 L762.19 691.69 L762.75 691.69 L763.309 691.69 L763.868 691.69 L764.427 691.69 L764.987 691.69 L765.546 691.69 L766.105 691.69 L766.664 691.69 L767.224 691.69 L767.783 691.69 L768.342 691.69 L768.901 691.69 L769.461 691.69 L770.02 691.69 L770.579 691.69 L771.138 691.69 L771.698 691.69 L772.257 691.69 L772.816 691.69 L773.375 691.69 L773.935 691.69 L774.494 691.69 L775.053 691.69 L775.612 691.69 L776.172 691.69 L776.731 691.69 L777.29 691.69 L777.849 691.69 L778.409 691.69 L778.968 691.69 L779.527 691.69 L780.086 691.69 L780.646 691.69 L781.205 691.69 L781.764 691.69 L782.323 691.69 L782.883 691.69 L783.442 691.69 L784.001 691.69 L784.56 691.69 L785.12 691.69 L785.679 691.69 L786.238 691.69 L786.797 691.69 L787.357 691.69 L787.916 691.69 L788.475 691.69 L789.034 691.69 L789.594 691.69 L790.153 691.69 L790.712 691.69 L791.271 691.69 L791.831 691.69 L792.39 691.69 L792.949 691.69 L793.508 691.69 L794.068 691.69 L794.627 691.69 L795.186 691.69 L795.745 691.69 L796.305 691.69 L796.864 691.69 L797.423 691.69 L797.982 691.69 L798.542 691.69 L799.101 691.69 L799.66 691.69 L800.219 691.69 L800.779 691.69 L801.338 691.69 L801.897 691.69 L802.456 691.69 L803.016 691.69 L803.575 691.69 L804.134 691.69 L804.693 691.69 L805.253 691.69 L805.812 691.69 L806.371 691.69 L806.931 691.69 L807.49 691.69 L808.049 691.69 L808.608 691.69 L809.168 691.69 L809.727 691.69 L810.286 691.69 L810.845 691.69 L811.405 691.69 L811.964 691.69 L812.523 691.69 L813.082 691.69 L813.642 691.69 L814.201 691.69 L814.76 691.69 L815.319 691.69 L815.879 691.69 L816.438 691.69 L816.997 691.69 L817.556 691.69 L818.116 691.69 L818.675 691.69 L819.234 691.69 L819.793 691.69 L820.353 691.69 L820.912 691.69 L821.471 691.69 L822.03 691.69 L822.59 691.69 L823.149 691.69 L823.708 691.69 L824.267 691.69 L824.827 691.69 L825.386 691.69 L825.945 691.69 L826.504 691.69 L827.064 691.69 L827.623 691.69 L828.182 691.69 L828.741 691.69 L829.301 691.69 L829.86 691.69 L830.419 691.69 L830.978 691.69 L831.538 691.69 L832.097 691.69 L832.656 691.69 L833.215 691.69 L833.775 691.69 L834.334 691.69 L834.893 691.69 L835.452 691.69 L836.012 691.69 L836.571 691.69 L837.13 691.69 L837.689 691.69 L838.249 691.69 L838.808 691.69 L839.367 691.69 L839.926 691.69 L840.486 691.69 L841.045 691.69 L841.604 691.69 L842.163 691.69 L842.723 691.69 L843.282 691.69 L843.841 691.69 L844.4 691.69 L844.96 691.69 L845.519 691.69 L846.078 691.69 L846.637 691.69 L847.197 691.69 L847.756 691.69 L848.315 691.69 L848.874 691.69 L849.434 691.69 L849.993 691.69 L850.552 691.69 L851.111 691.69 L851.671 691.69 L852.23 691.69 L852.789 691.69 L853.348 691.69 L853.908 691.69 L854.467 691.69 L855.026 691.69 L855.585 691.69 L856.145 691.69 L856.704 691.69 L857.263 691.69 L857.822 691.69 L858.382 691.69 L858.941 691.69 L859.5 691.69 L860.059 691.69 L860.619 691.69 L861.178 691.69 L861.737 691.69 L862.296 691.69 L862.856 691.69 L863.415 691.69 L863.974 691.69 L864.533 691.69 L865.093 691.69 L865.652 691.69 L866.211 691.69 L866.77 691.69 L867.33 691.69 L867.889 691.69 L868.448 691.69 L869.007 691.69 L869.567 691.69 L870.126 691.69 L870.685 691.69 L871.244 691.69 L871.804 691.69 L872.363 691.69 L872.922 691.69 L873.481 691.69 L874.041 691.69 L874.6 691.69 L875.159 691.69 L875.718 691.69 L876.278 691.69 L876.837 691.69 L877.396 691.69 L877.955 691.69 L878.515 691.69 L879.074 691.69 L879.633 691.69 L880.192 691.69 L880.752 691.69 L881.311 691.69 L881.87 691.69 L882.429 691.69 L882.989 691.69 L883.548 691.69 L884.107 691.69 L884.666 691.69 L885.226 691.69 L885.785 691.69 L886.344 691.69 L886.903 691.69 L887.463 691.69 L888.022 691.69 L888.581 691.69 L889.14 691.69 L889.7 691.69 L890.259 691.69 L890.818 691.69 L891.377 691.69 L891.937 691.69 L892.496 691.69 L893.055 691.69 L893.614 691.69 L894.174 691.69 L894.733 691.69 L895.292 691.69 L895.851 691.69 L896.411 691.69 L896.97 691.69 L897.529 691.69 L898.088 691.69 L898.648 691.69 L899.207 691.69 L899.766 691.69 L900.325 691.69 L900.885 691.69 L901.444 691.69 L902.003 691.69 L902.562 691.69 L903.122 691.69 L903.681 691.69 L904.24 691.69 L904.799 691.69 L905.359 691.69 L905.918 691.69 L906.477 691.69 L907.036 691.69 L907.596 691.69 L908.155 691.69 L908.714 691.69 L909.273 691.69 L909.833 691.69 L910.392 691.69 L910.951 691.69 L911.51 691.69 L912.07 691.69 L912.629 691.69 L913.188 691.69 L913.747 691.69 L914.307 691.69 L914.866 691.69 L915.425 691.69 L915.984 691.69 L916.544 691.69 L917.103 691.69 L917.662 691.69 L918.221 691.69 L918.781 691.69 L919.34 691.69 L919.899 691.69 L920.458 691.69 L921.018 691.69 L921.577 691.69 L922.136 691.69 L922.695 691.69 L923.255 691.69 L923.814 691.69 L924.373 691.69 L924.932 691.69 L925.492 691.69 L926.051 691.69 L926.61 691.69 L927.169 691.69 L927.729 691.69 L928.288 691.69 L928.847 691.69 L929.406 691.69 L929.966 691.69 L930.525 691.69 L931.084 691.69 L931.644 691.69 L932.203 691.69 L932.762 691.69 L933.321 691.69 L933.881 691.69 L934.44 691.69 L934.999 691.69 L935.558 691.69 L936.118 691.69 L936.677 691.69 L937.236 691.69 L937.795 691.69 L938.355 691.69 L938.914 691.69 L939.473 691.69 L940.032 691.69 L940.592 691.69 L941.151 691.69 L941.71 691.69 L942.269 691.69 L942.829 691.69 L943.388 691.69 L943.947 691.69 L944.506 691.69 L945.066 691.69 L945.625 691.69 L946.184 691.69 L946.743 691.69 L947.303 691.69 L947.862 691.69 L948.421 691.69 L948.98 691.69 L949.54 691.69 L950.099 691.69 L950.658 691.69 L951.217 691.69 L951.777 691.69 L952.336 691.69 L952.895 691.69 L953.454 691.69 L954.014 691.69 L954.573 691.69 L955.132 691.69 L955.691 691.69 L956.251 691.69 L956.81 691.69 L957.369 691.69 L957.928 691.69 L958.488 691.69 L959.047 691.69 L959.606 691.69 L960.165 691.69 L960.725 691.69 L961.284 691.69 L961.843 691.69 L962.402 691.69 L962.962 691.69 L963.521 691.69 L964.08 691.69 L964.639 691.69 L965.199 691.69 L965.758 691.69 L966.317 691.69 L966.876 691.69 L967.436 691.69 L967.995 691.69 L968.554 691.69 L969.113 691.69 L969.673 691.69 L970.232 691.69 L970.791 691.69 L971.35 691.69 L971.91 691.69 L972.469 691.69 L973.028 691.69 L973.587 691.69 L974.147 691.69 L974.706 691.69 L975.265 691.69 L975.824 691.69 L976.384 691.69 L976.943 691.69 L977.502 691.69 L978.061 691.69 L978.621 691.69 L979.18 691.69 L979.739 691.69 L980.298 691.69 L980.858 691.69 L981.417 691.69 L981.976 691.69 L982.535 691.69 L983.095 691.69 L983.654 691.69 L984.213 691.69 L984.772 691.69 L985.332 691.69 L985.891 691.69 L986.45 691.69 L987.009 691.69 L987.569 691.69 L988.128 691.69 L988.687 691.69 L989.246 691.69 L989.806 691.69 L990.365 691.69 L990.924 691.69 L991.483 691.69 L992.043 691.69 L992.602 691.69 L993.161 691.69 L993.72 691.69 L994.28 691.69 L994.839 691.69 L995.398 691.69 L995.957 691.69 L996.517 691.69 L997.076 691.69 L997.635 691.69 L998.194 691.69 L998.754 691.69 L999.313 691.69 L999.872 691.69 L1000.43 691.69 L1000.99 691.69 L1001.55 691.69 L1002.11 691.69 L1002.67 691.69 L1003.23 691.69 L1003.79 691.69 L1004.35 691.69 L1004.91 691.69 L1005.46 691.69 L1006.02 691.69 L1006.58 691.69 L1007.14 691.69 L1007.7 691.69 L1008.26 691.69 L1008.82 691.69 L1009.38 691.69 L1009.94 691.69 L1010.5 691.69 L1011.06 691.69 L1011.62 691.69 L1012.18 691.69 L1012.73 691.69 L1013.29 691.69 L1013.85 691.69 L1014.41 691.69 L1014.97 691.69 L1015.53 691.69 L1016.09 691.69 L1016.65 691.69 L1017.21 691.69 L1017.77 691.69 L1018.33 691.69 L1018.89 691.69 L1019.45 691.69 L1020.01 691.69 L1020.56 691.69 L1021.12 691.69 L1021.68 691.69 L1022.24 691.69 L1022.8 691.69 L1023.36 691.69 L1023.92 691.69 L1024.48 691.69 L1025.04 691.69 L1025.6 691.69 L1026.16 691.69 L1026.72 691.69 L1027.28 691.69 L1027.83 691.69 L1028.39 691.69 L1028.95 691.69 L1029.51 691.69 L1030.07 691.69 L1030.63 691.69 L1031.19 691.69 L1031.75 691.69 L1032.31 691.69 L1032.87 691.69 L1033.43 691.69 L1033.99 691.69 L1034.55 691.69 L1035.1 691.69 L1035.66 691.69 L1036.22 691.69 L1036.78 691.69 L1037.34 691.69 L1037.9 691.69 L1038.46 691.69 L1039.02 691.69 L1039.58 691.69 L1040.14 691.69 L1040.7 691.69 L1041.26 691.69 L1041.82 691.69 L1042.38 691.69 L1042.93 691.69 L1043.49 691.69 L1044.05 691.69 L1044.61 691.69 L1045.17 691.69 L1045.73 691.69 L1046.29 691.69 L1046.85 691.69 L1047.41 691.69 L1047.97 691.69 L1048.53 691.69 L1049.09 691.69 L1049.65 691.69 L1050.2 691.69 L1050.76 691.69 L1051.32 691.69 L1051.88 691.69 L1052.44 691.69 L1053 691.69 L1053.56 691.69 L1054.12 691.69 L1054.68 691.69 L1055.24 691.69 L1055.8 691.69 L1056.36 691.69 L1056.92 691.69 L1057.48 691.69 L1058.03 691.69 L1058.59 691.69 L1059.15 691.69 L1059.71 691.69 L1060.27 691.69 L1060.83 691.69 L1061.39 691.69 L1061.95 691.69 L1062.51 691.69 L1063.07 691.69 L1063.63 691.69 L1064.19 691.69 L1064.75 691.69 L1065.3 691.69 L1065.86 691.69 L1066.42 691.69 L1066.98 691.69 L1067.54 691.69 L1068.1 691.69 L1068.66 691.69 L1069.22 691.69 L1069.78 691.69 L1070.34 691.69 L1070.9 691.69 L1071.46 691.69 L1072.02 691.69 L1072.57 691.69 L1073.13 691.69 L1073.69 691.69 L1074.25 691.69 L1074.81 691.69 L1075.37 691.69 L1075.93 691.69 L1076.49 691.69 L1077.05 691.69 L1077.61 691.69 L1078.17 691.69 L1078.73 691.69 L1079.29 691.69 L1079.85 691.69 L1080.4 691.69 L1080.96 691.69 L1081.52 691.69 L1082.08 691.69 L1082.64 691.69 L1083.2 691.69 L1083.76 691.69 L1084.32 691.69 L1084.88 691.69 L1085.44 691.69 L1086 691.69 L1086.56 691.69 L1087.12 691.69 L1087.67 691.69 L1088.23 691.69 L1088.79 691.69 L1089.35 691.69 L1089.91 691.69 L1090.47 691.69 L1091.03 691.69 L1091.59 691.69 L1092.15 691.69 L1092.71 691.69 L1093.27 691.69 L1093.83 691.69 L1094.39 691.69 L1094.94 691.69 L1095.5 691.69 L1096.06 691.69 L1096.62 691.69 L1097.18 691.69 L1097.74 691.69 L1098.3 691.69 L1098.86 691.69 L1099.42 691.69 L1099.98 691.69 L1100.54 691.69 L1101.1 691.69 L1101.66 691.69 L1102.22 691.69 L1102.77 691.69 L1103.33 691.69 L1103.89 691.69 L1104.45 691.69 L1105.01 691.69 L1105.57 691.69 L1106.13 691.69 L1106.69 691.69 L1107.25 691.69 L1107.81 691.69 L1108.37 691.69 L1108.93 691.69 L1109.49 691.69 L1110.04 691.69 L1110.6 691.69 L1111.16 691.69 L1111.72 691.69 L1112.28 691.69 L1112.84 691.69 L1113.4 691.69 L1113.96 691.69 L1114.52 691.69 L1115.08 691.69 L1115.64 691.69 L1116.2 691.69 L1116.76 691.69 L1117.31 691.69 L1117.87 691.69 L1118.43 691.69 L1118.99 691.69 L1119.55 691.69 L1120.11 691.69 L1120.67 691.69 L1121.23 691.69 L1121.79 691.69 L1122.35 691.69 L1122.91 691.69 L1123.47 691.69 L1124.03 691.69 L1124.59 691.69 L1125.14 691.69 L1125.7 691.69 L1126.26 691.69 L1126.82 691.69 L1127.38 691.69 L1127.94 691.69 L1128.5 691.69 L1129.06 691.69 L1129.62 691.69 L1130.18 691.69 L1130.74 691.69 L1131.3 691.69 L1131.86 691.69 L1132.41 691.69 L1132.97 691.69 L1133.53 691.69 L1134.09 691.69 L1134.65 691.69 L1135.21 691.69 L1135.77 691.69 L1136.33 691.69 L1136.89 691.69 L1137.45 691.69 L1138.01 691.69 L1138.57 691.69 L1139.13 691.69 L1139.68 691.69 L1140.24 691.69 L1140.8 691.69 L1141.36 691.69 L1141.92 691.69 L1142.48 691.69 L1143.04 691.69 L1143.6 691.69 L1144.16 691.69 L1144.72 691.69 L1145.28 691.69 L1145.84 691.69 L1146.4 691.69 L1146.96 691.69 L1147.51 691.69 L1148.07 691.69 L1148.63 691.69 L1149.19 691.69 L1149.75 691.69 L1150.31 691.69 L1150.87 691.69 L1151.43 691.69 L1151.99 691.69 L1152.55 691.69 L1153.11 691.69 L1153.67 691.69 L1154.23 691.69 L1154.78 691.69 L1155.34 691.69 L1155.9 691.69 L1156.46 691.69 L1157.02 691.69 L1157.58 691.69 L1158.14 691.69 L1158.7 691.69 L1159.26 691.69 L1159.82 691.69 L1160.38 691.69 L1160.94 691.69 L1161.5 691.69 L1162.05 691.69 L1162.61 691.69 L1163.17 691.69 L1163.73 691.69 L1164.29 691.69 L1164.85 691.69 L1165.41 691.69 L1165.97 691.69 L1166.53 691.69 L1167.09 691.69 L1167.65 691.69 L1168.21 691.69 L1168.77 691.69 L1169.33 691.69 L1169.88 691.69 L1170.44 691.69 L1171 691.69 L1171.56 691.69 L1172.12 691.69 L1172.68 691.69 L1173.24 691.69 L1173.8 691.69 L1174.36 691.69 L1174.92 691.69 L1175.48 691.69 L1176.04 691.69 L1176.6 691.69 L1177.15 691.69 L1177.71 691.69 L1178.27 691.69 L1178.83 691.69 L1179.39 691.69 L1179.95 691.69 L1180.51 691.69 L1181.07 691.69 L1181.63 691.69 L1182.19 691.69 L1182.75 691.69 L1183.31 691.69 L1183.87 691.69 L1184.43 691.69 L1184.98 691.69 L1185.54 691.69 L1186.1 691.69 L1186.66 691.69 L1187.22 691.69 L1187.78 691.69 L1188.34 691.69 L1188.9 691.69 L1189.46 691.69 L1190.02 691.69 L1190.58 691.69 L1191.14 691.69 L1191.7 691.69 L1192.25 691.69 L1192.81 691.69 L1193.37 691.69 L1193.93 691.69 L1194.49 691.69 L1195.05 691.69 L1195.61 691.69 L1196.17 691.69 L1196.73 691.69 L1197.29 691.69 L1197.85 691.69 L1198.41 691.69 L1198.97 691.69 L1199.52 691.69 L1200.08 691.69 L1200.64 691.69 L1201.2 691.69 L1201.76 691.69 L1202.32 691.69 L1202.88 691.69 L1203.44 691.69 L1204 691.69 L1204.56 691.69 L1205.12 691.69 L1205.68 691.69 L1206.24 691.69 L1206.8 691.69 L1207.35 691.69 L1207.91 691.69 L1208.47 691.69 L1209.03 691.69 L1209.59 691.69 L1210.15 691.69 L1210.71 691.69 L1211.27 691.69 L1211.83 691.69 L1212.39 691.69 L1212.95 691.69 L1213.51 691.69 L1214.07 691.69 L1214.62 691.69 L1215.18 691.69 L1215.74 691.69 L1216.3 691.69 L1216.86 691.69 L1217.42 691.69 L1217.98 691.69 L1218.54 691.69 L1219.1 691.69 L1219.66 691.69 L1220.22 691.69 L1220.78 691.69 L1221.34 691.69 L1221.89 691.69 L1222.45 691.69 L1223.01 691.69 L1223.57 691.69 L1224.13 691.69 L1224.69 691.69 L1225.25 691.69 L1225.81 691.69 L1226.37 691.69 L1226.93 691.69 L1227.49 691.69 L1228.05 691.69 L1228.61 691.69 L1229.17 691.69 L1229.72 691.69 L1230.28 691.69 L1230.84 691.69 L1231.4 691.69 L1231.96 691.69 L1232.52 691.69 L1233.08 691.69 L1233.64 691.69 L1234.2 691.69 L1234.76 691.69 L1235.32 691.69 L1235.88 691.69 L1236.44 691.69 L1236.99 691.69 L1237.55 691.69 L1238.11 691.69 L1238.67 691.69 L1239.23 691.69 L1239.79 691.69 L1240.35 691.69 L1240.91 691.69 L1241.47 691.69 L1242.03 691.69 L1242.59 691.69 L1243.15 691.69 L1243.71 691.69 L1244.26 691.69 L1244.82 691.69 L1245.38 691.69 L1245.94 691.69 L1246.5 691.69 L1247.06 691.69 L1247.62 691.69 L1248.18 691.69 L1248.74 691.69 L1249.3 691.69 L1249.86 691.69 L1250.42 691.69 L1250.98 691.69 L1251.54 691.69 L1252.09 691.69 L1252.65 691.69 L1253.21 691.69 L1253.77 691.69 L1254.33 691.69 L1254.89 691.69 L1255.45 691.69 L1256.01 691.69 L1256.57 691.69 L1257.13 691.69 L1257.69 691.69 L1258.25 691.69 L1258.81 691.69 L1259.36 691.69 L1259.92 691.69 L1260.48 691.69 L1261.04 691.69 L1261.6 691.69 L1262.16 691.69 L1262.72 691.69 L1263.28 691.69 L1263.84 691.69 L1264.4 691.69 L1264.96 691.69 L1265.52 691.69 L1266.08 691.69 L1266.63 691.69 L1267.19 691.69 L1267.75 691.69 L1268.31 691.69 L1268.87 691.69 L1269.43 691.69 L1269.99 691.69 L1270.55 691.69 L1271.11 691.69 L1271.67 691.69 L1272.23 691.69 L1272.79 691.69 L1273.35 691.69 L1273.91 691.69 L1274.46 691.69 L1275.02 691.69 L1275.58 691.69 L1276.14 691.69 L1276.7 691.69 L1277.26 691.69 L1277.82 691.69 L1278.38 691.69 L1278.94 691.69 L1279.5 691.69 L1280.06 691.69 L1280.62 691.69 L1281.18 691.69 L1281.73 691.69 L1282.29 691.69 L1282.85 691.69 L1283.41 691.69 L1283.97 691.69 L1284.53 691.69 L1285.09 691.69 L1285.65 691.69 L1286.21 691.69 L1286.77 691.69 L1287.33 691.69 L1287.89 691.69 L1288.45 691.69 L1289 691.69 L1289.56 691.69 L1290.12 691.69 L1290.68 691.69 L1291.24 691.69 L1291.8 691.69 L1292.36 691.69 L1292.92 691.69 L1293.48 691.69 L1294.04 691.69 L1294.6 691.69 L1295.16 691.69 L1295.72 691.69 L1296.28 691.69 L1296.83 691.69 L1297.39 691.69 L1297.95 691.69 L1298.51 691.69 L1299.07 691.69 L1299.63 691.69 L1300.19 691.69 L1300.75 691.69 L1301.31 691.69 L1301.87 691.69 L1302.43 691.69 L1302.99 691.69 L1303.55 691.69 L1304.1 691.69 L1304.66 691.69 L1305.22 691.69 L1305.78 691.69 L1306.34 691.69 L1306.9 691.69 L1307.46 691.69 L1308.02 691.69 L1308.58 691.69 L1309.14 691.69 L1309.7 691.69 L1310.26 691.69 L1310.82 691.69 L1311.38 691.69 L1311.93 691.69 L1312.49 691.69 L1313.05 691.69 L1313.61 691.69 L1314.17 691.69 L1314.73 691.69 L1315.29 691.69 L1315.85 691.69 L1316.41 691.69 L1316.97 691.69 L1317.53 691.69 L1318.09 691.69 L1318.65 691.69 L1319.2 691.69 L1319.76 691.69 L1320.32 691.69 L1320.88 691.69 L1321.44 691.69 L1322 691.69 L1322.56 691.69 L1323.12 691.69 L1323.68 691.69 L1324.24 691.69 L1324.8 691.69 L1325.36 691.69 L1325.92 691.69 L1326.47 691.69 L1327.03 691.69 L1327.59 691.69 L1328.15 691.69 L1328.71 691.69 L1329.27 691.69 L1329.83 691.69 L1330.39 691.69 L1330.95 691.69 L1331.51 691.69 L1332.07 691.69 L1332.63 691.69 L1333.19 691.69 L1333.75 691.69 L1334.3 691.69 L1334.86 691.69 L1335.42 691.69 L1335.98 691.69 L1336.54 691.69 L1337.1 691.69 L1337.66 691.69 L1338.22 691.69 L1338.78 691.69 L1339.34 691.69 L1339.9 691.69 L1340.46 691.69 L1341.02 691.69 L1341.57 691.69 L1342.13 691.69 L1342.69 691.69 L1343.25 691.69 L1343.81 691.69 L1344.37 691.69 L1344.93 691.69 L1345.49 691.69 L1346.05 691.69 L1346.61 691.69 L1347.17 691.69 L1347.73 691.69 L1348.29 691.69 L1348.84 691.69 L1349.4 691.69 L1349.96 691.69 L1350.52 691.69 L1351.08 691.69 L1351.64 691.69 L1352.2 691.69 L1352.76 691.69 L1353.32 691.69 L1353.88 691.69 L1354.44 691.69 L1355 691.69 L1355.56 691.69 L1356.12 691.69 L1356.67 691.69 L1357.23 691.69 L1357.79 691.69 L1358.35 691.69 L1358.91 691.69 L1359.47 691.69 L1360.03 691.69 L1360.59 691.69 L1361.15 691.69 L1361.71 691.69 L1362.27 691.69 L1362.83 691.69 L1363.39 691.69 L1363.94 691.69 L1364.5 691.69 L1365.06 691.69 L1365.62 691.69 L1366.18 691.69 L1366.74 691.69 L1367.3 691.69 L1367.86 691.69 L1368.42 691.69 L1368.98 691.69 L1369.54 691.69 L1370.1 691.69 L1370.66 691.69 L1371.21 691.69 L1371.77 691.69 L1372.33 691.69 L1372.89 691.69 L1373.45 691.69 L1374.01 691.69 L1374.57 691.69 L1375.13 691.69 L1375.69 691.69 L1376.25 691.69 L1376.81 691.69 L1377.37 691.69 L1377.93 691.69 L1378.49 691.69 L1379.04 691.69 L1379.6 691.69 L1380.16 691.69 L1380.72 691.69 L1381.28 691.69 L1381.84 691.69 L1382.4 691.69 L1382.96 691.69 L1383.52 691.69 L1384.08 691.69 L1384.64 691.69 L1385.2 691.69 L1385.76 691.69 L1386.31 691.69 L1386.87 691.69 L1387.43 691.69 L1387.99 691.69 L1388.55 691.69 L1389.11 691.69 L1389.67 691.69 L1390.23 691.69 L1390.79 691.69 L1391.35 691.69 L1391.91 691.69 L1392.47 691.69 L1393.03 691.69 L1393.58 691.69 L1394.14 691.69 L1394.7 691.69 L1395.26 691.69 L1395.82 691.69 L1396.38 691.69 L1396.94 691.69 L1397.5 691.69 L1398.06 691.69 L1398.62 691.69 L1399.18 691.69 L1399.74 691.69 L1400.3 691.69 L1400.86 691.69 L1401.41 691.69 L1401.97 691.69 L1402.53 691.69 L1403.09 691.69 L1403.65 691.69 L1404.21 691.69 L1404.77 691.69 L1405.33 691.69 L1405.89 691.69 L1406.45 691.69 L1407.01 691.69 L1407.57 691.69 L1408.13 691.69 L1408.68 691.69 L1409.24 691.69 L1409.8 691.69 L1410.36 691.69 L1410.92 691.69 L1411.48 691.69 L1412.04 691.69 L1412.6 691.69 L1413.16 691.69 L1413.72 691.69 L1414.28 691.69 L1414.84 691.69 L1415.4 691.69 L1415.95 691.69 L1416.51 691.69 L1417.07 691.69 L1417.63 691.69 L1418.19 691.69 L1418.75 691.69 L1419.31 691.69 L1419.87 691.69 L1420.43 691.69 L1420.99 691.69 L1421.55 691.69 L1422.11 691.69 L1422.67 691.69 L1423.23 691.69 L1423.78 691.69 L1424.34 691.69 L1424.9 691.69 L1425.46 691.69 L1426.02 691.69 L1426.58 691.69 L1427.14 691.69 L1427.7 691.69 L1428.26 691.69 L1428.82 691.69 L1429.38 691.69 L1429.94 691.69 L1430.5 691.69 L1431.05 691.69 L1431.61 691.69 L1432.17 691.69 L1432.73 691.69 L1433.29 691.69 L1433.85 691.69 L1434.41 691.69 L1434.97 691.69 L1435.53 691.69 L1436.09 691.69 L1436.65 691.69 L1437.21 691.69 L1437.77 691.69 L1438.33 691.69 L1438.88 691.69 L1439.44 691.69 L1440 691.69 L1440.56 691.69 L1441.12 691.69 L1441.68 691.69 L1442.24 691.69 L1442.8 691.69 L1443.36 691.69 L1443.92 691.69 L1444.48 691.69 L1445.04 691.69 L1445.6 691.69 L1446.15 691.69 L1446.71 691.69 L1447.27 691.69 L1447.83 691.69 L1448.39 691.69 L1448.95 691.69 L1449.51 691.69 L1450.07 691.69 L1450.63 691.69 L1451.19 691.69 L1451.75 691.69 L1452.31 691.69 L1452.87 691.69 L1453.42 691.69 L1453.98 691.69 L1454.54 691.69 L1455.1 691.69 L1455.66 691.69 L1456.22 691.69 L1456.78 691.69 L1457.34 691.69 L1457.9 691.69 L1458.46 691.69 L1459.02 691.69 L1459.58 691.69 L1460.14 691.69 L1460.7 691.69 L1461.25 691.69 L1461.81 691.69 L1462.37 691.69 L1462.93 691.69 L1463.49 691.69 L1464.05 691.69 L1464.61 691.69 L1465.17 691.69 L1465.73 691.69 L1466.29 691.69 L1466.85 691.69 L1467.41 691.69 L1467.97 691.69 L1468.52 691.69 L1469.08 691.69 L1469.64 691.69 L1470.2 691.69 L1470.76 691.69 L1471.32 691.69 L1471.88 691.69 L1472.44 691.69 L1473 691.69 L1473.56 691.69 L1474.12 691.69 L1474.68 691.69 L1475.24 691.69 L1475.79 691.69 L1476.35 691.69 L1476.91 691.69 L1477.47 691.69 L1478.03 691.69 L1478.59 691.69 L1479.15 691.69 L1479.71 691.69 L1480.27 691.69 L1480.83 691.69 L1481.39 691.69 L1481.95 691.69 L1482.51 691.69 L1483.07 691.69 L1483.62 691.69 L1484.18 691.69 L1484.74 691.69 L1485.3 691.69 L1485.86 691.69 L1486.42 691.69 L1486.98 691.69 L1487.54 691.69 L1488.1 691.69 L1488.66 691.69 L1489.22 691.69 L1489.78 691.69 L1490.34 691.69 L1490.89 691.69 L1491.45 691.69 L1492.01 691.69 L1492.57 691.69 L1493.13 691.69 L1493.69 691.69 L1494.25 691.69 L1494.81 691.69 L1495.37 691.69 L1495.93 691.69 L1496.49 691.69 L1497.05 691.69 L1497.61 691.69 L1498.16 691.69 L1498.72 691.69 L1499.28 691.69 L1499.84 691.69 L1500.4 691.69 L1500.96 691.69 L1501.52 691.69 L1502.08 691.69 L1502.64 691.69 L1503.2 691.69 L1503.76 691.69 L1504.32 691.69 L1504.88 691.69 L1505.44 691.69 L1505.99 691.69 L1506.55 691.69 L1507.11 691.69 L1507.67 691.69 L1508.23 691.69 L1508.79 691.69 L1509.35 691.69 L1509.91 691.69 L1510.47 691.69 L1511.03 691.69 L1511.59 691.69 L1512.15 691.69 L1512.71 691.69 L1513.26 691.69 L1513.82 691.69 L1514.38 691.69 L1514.94 691.69 L1515.5 691.69 L1516.06 691.69 L1516.62 691.69 L1517.18 691.69 L1517.74 691.69 L1518.3 691.69 L1518.86 691.69 L1519.42 691.69 L1519.98 691.69 L1520.53 691.69 L1521.09 691.69 L1521.65 691.69 L1522.21 691.69 L1522.77 691.69 L1523.33 691.69 L1523.89 691.69 L1524.45 691.69 L1525.01 691.69 L1525.57 691.69 L1526.13 691.69 L1526.69 691.69 L1527.25 691.69 L1527.81 691.69 L1528.36 691.69 L1528.92 691.69 L1529.48 691.69 L1530.04 691.69 L1530.6 691.69 L1531.16 691.69 L1531.72 691.69 L1532.28 691.69 L1532.84 691.69 L1533.4 691.69 L1533.96 691.69 L1534.52 691.69 L1535.08 691.69 L1535.63 691.69 L1536.19 691.69 L1536.75 691.69 L1537.31 691.69 L1537.87 691.69 L1538.43 691.69 L1538.99 691.69 L1539.55 691.69 L1540.11 691.69 L1540.67 691.69 L1541.23 691.69 L1541.79 691.69 L1542.35 691.69 L1542.9 691.69 L1543.46 691.69 L1544.02 691.69 L1544.58 691.69 L1545.14 691.69 L1545.7 691.69 L1546.26 691.69 L1546.82 691.69 L1547.38 691.69 L1547.94 691.69 L1548.5 691.69 L1549.06 691.69 L1549.62 691.69 L1550.18 691.69 L1550.73 691.69 L1551.29 691.69 L1551.85 691.69 L1552.41 691.69 L1552.97 691.69 L1553.53 691.69 L1554.09 691.69 L1554.65 691.69 L1555.21 691.69 L1555.77 691.69 L1556.33 691.69 L1556.89 691.69 L1557.45 691.69 L1558 691.69 L1558.56 691.69 L1559.12 691.69 L1559.68 691.69 L1560.24 691.69 L1560.8 691.69 L1561.36 691.69 L1561.92 691.69 L1562.48 691.69 L1563.04 691.69 L1563.6 691.69 L1564.16 691.69 L1564.72 691.69 L1565.28 691.69 L1565.83 691.69 L1566.39 691.69 L1566.95 691.69 L1567.51 691.69 L1568.07 691.69 L1568.63 691.69 L1569.19 691.69 L1569.75 691.69 L1570.31 691.69 L1570.87 691.69 L1571.43 691.69 L1571.99 691.69 L1572.55 691.69 L1573.1 691.69 L1573.66 691.69 L1574.22 691.69 L1574.78 691.69 L1575.34 691.69 L1575.9 691.69 L1576.46 691.69 L1577.02 691.69 L1577.58 691.69 L1578.14 691.69 L1578.7 691.69 L1579.26 691.69 L1579.82 691.69 L1580.37 691.69 L1580.93 691.69 L1581.49 691.69 L1582.05 691.69 L1582.61 691.69 L1583.17 691.69 L1583.73 691.69 L1584.29 691.69 L1584.85 691.69 L1585.41 691.69 L1585.97 691.69 L1586.53 691.69 L1587.09 691.69 L1587.65 691.69 L1588.2 691.69 L1588.76 691.69 L1589.32 691.69 L1589.88 691.69 L1590.44 691.69 L1591 691.69 L1591.56 691.69 L1592.12 691.69 L1592.68 691.69 L1593.24 691.69 L1593.8 691.69 L1594.36 691.69 L1594.92 691.69 L1595.47 691.69 L1596.03 691.69 L1596.59 691.69 L1597.15 691.69 L1597.71 691.69 L1598.27 691.69 L1598.83 691.69 L1599.39 691.69 L1599.95 691.69 L1600.51 691.69 L1601.07 691.69 L1601.63 691.69 L1602.19 691.69 L1602.74 691.69 L1603.3 691.69 L1603.86 691.69 L1604.42 691.69 L1604.98 691.69 L1605.54 691.69 L1606.1 691.69 L1606.66 691.69 L1607.22 691.69 L1607.78 691.69 L1608.34 691.69 L1608.9 691.69 L1609.46 691.69 L1610.02 691.69 L1610.57 691.69 L1611.13 691.69 L1611.69 691.69 L1612.25 691.69 L1612.81 691.69 L1613.37 691.69 L1613.93 691.69 L1614.49 691.69 L1615.05 691.69 L1615.61 691.69 L1616.17 691.69 L1616.73 691.69 L1617.29 691.69 L1617.84 691.69 L1618.4 691.69 L1618.96 691.69 L1619.52 691.69 L1620.08 691.69 L1620.64 691.69 L1621.2 691.69 L1621.76 691.69 L1622.32 691.69 L1622.88 691.69 L1623.44 691.69 L1624 691.69 L1624.56 691.69 L1625.11 691.69 L1625.67 691.69 L1626.23 691.69 L1626.79 691.69 L1627.35 691.69 L1627.91 691.69 L1628.47 691.69 L1629.03 691.69 L1629.59 691.69 L1630.15 691.69 L1630.71 691.69 L1631.27 691.69 L1631.83 691.69 L1632.39 691.69 L1632.94 691.69 L1633.5 691.69 L1634.06 691.69 L1634.62 691.69 L1635.18 691.69 L1635.74 691.69 L1636.3 691.69 L1636.86 691.69 L1637.42 691.69 L1637.98 691.69 L1638.54 691.69 L1639.1 691.69 L1639.66 691.69 L1640.21 691.69 L1640.77 691.69 L1641.33 691.69 L1641.89 691.69 L1642.45 691.69 L1643.01 691.69 L1643.57 691.69 L1644.13 691.69 L1644.69 691.69 L1645.25 691.69 L1645.81 691.69 L1646.37 691.69 L1646.93 691.69 L1647.48 691.69 L1648.04 691.69 L1648.6 691.69 L1649.16 691.69 L1649.72 691.69 L1650.28 691.69 L1650.84 691.69 L1651.4 691.69 L1651.96 691.69 L1652.52 691.69 L1653.08 691.69 L1653.64 691.69 L1654.2 691.69 L1654.76 691.69 L1655.31 691.69 L1655.87 691.69 L1656.43 691.69 L1656.99 691.69 L1657.55 691.69 L1658.11 691.69 L1658.67 691.69 L1659.23 691.69 L1659.79 691.69 L1660.35 691.69 L1660.91 691.69 L1661.47 691.69 L1662.03 691.69 L1662.58 691.69 L1663.14 691.69 L1663.7 691.69 L1664.26 691.69 L1664.82 691.69 L1665.38 691.69 L1665.94 691.69 L1666.5 691.69 L1667.06 691.69 L1667.62 691.69 L1668.18 691.69 L1668.74 691.69 L1669.3 691.69 L1669.85 691.69 L1670.41 691.69 L1670.97 691.69 L1671.53 691.69 L1672.09 691.69 L1672.65 691.69 L1673.21 691.69 L1673.77 691.69 L1674.33 691.69 L1674.89 691.69 L1675.45 691.69 L1676.01 691.69 L1676.57 691.69 L1677.13 691.69 L1677.68 691.69 L1678.24 691.69 L1678.8 691.69 L1679.36 691.69 L1679.92 691.69 L1680.48 691.69 L1681.04 691.69 L1681.6 691.69 L1682.16 691.69 L1682.72 691.69 L1683.28 691.69 L1683.84 691.69 L1684.4 691.69 L1684.95 691.69 L1685.51 691.69 L1686.07 691.69 L1686.63 691.69 L1687.19 691.69 L1687.75 691.69 L1688.31 691.69 L1688.87 691.69 L1689.43 691.69 L1689.99 691.69 L1690.55 691.69 L1691.11 691.69 L1691.67 691.69 L1692.23 691.69 L1692.78 691.69 L1693.34 691.69 L1693.9 691.69 L1694.46 691.69 L1695.02 691.69 L1695.58 691.69 L1696.14 691.69 L1696.7 691.69 L1697.26 691.69 L1697.82 691.69 L1698.38 691.69 L1698.94 691.69 L1699.5 691.69 L1700.05 691.69 L1700.61 691.69 L1701.17 691.69 L1701.73 691.69 L1702.29 691.69 L1702.85 691.69 L1703.41 691.69 L1703.97 691.69 L1704.53 691.69 L1705.09 691.69 L1705.65 691.69 L1706.21 691.69 L1706.77 691.69 L1707.32 691.69 L1707.88 691.69 L1708.44 691.69 L1709 691.69 L1709.56 691.69 L1710.12 691.69 L1710.68 691.69 L1711.24 691.69 L1711.8 691.69 L1712.36 691.69 L1712.92 691.69 L1713.48 691.69 L1714.04 691.69 L1714.6 691.69 L1715.15 691.69 L1715.71 691.69 L1716.27 691.69 L1716.83 691.69 L1717.39 691.69 L1717.95 691.69 L1718.51 691.69 L1719.07 691.69 L1719.63 691.69 L1720.19 691.69 L1720.75 691.69 L1721.31 691.69 L1721.87 691.69 L1722.42 691.69 L1722.98 691.69 L1723.54 691.69 L1724.1 691.69 L1724.66 691.69 L1725.22 691.69 L1725.78 691.69 L1726.34 691.69 L1726.9 691.69 L1727.46 691.69 L1728.02 691.69 L1728.58 691.69 L1729.14 691.69 L1729.69 691.69 L1730.25 691.69 L1730.81 691.69 L1731.37 691.69 L1731.93 691.69 L1732.49 691.69 L1733.05 691.69 L1733.61 691.69 L1734.17 691.69 L1734.73 691.69 L1735.29 691.69 L1735.85 691.69 L1736.41 691.69 L1736.97 691.69 L1737.52 691.69 L1738.08 691.69 L1738.64 691.69 L1739.2 691.69 L1739.76 691.69 L1740.32 691.69 L1740.88 691.69 L1741.44 691.69 L1742 691.69 L1742.56 691.69 L1743.12 691.69 L1743.68 691.69 L1744.24 691.69 L1744.79 691.69 L1745.35 691.69 L1745.91 691.69 L1746.47 691.69 L1747.03 691.69 L1747.59 691.69 L1748.15 691.69 L1748.71 691.69 L1749.27 691.69 L1749.83 691.69 L1750.39 691.69 L1750.95 691.69 L1751.51 691.69 L1752.06 691.69 L1752.62 691.69 L1753.18 691.69 L1753.74 691.69 L1754.3 691.69 L1754.86 691.69 L1755.42 691.69 L1755.98 691.69 L1756.54 691.69 L1757.1 691.69 L1757.66 691.69 L1758.22 691.69 L1758.78 691.69 L1759.34 691.69 L1759.89 691.69 L1760.45 691.69 L1761.01 691.69 L1761.57 691.69 L1762.13 691.69 L1762.69 691.69 L1763.25 691.69 L1763.81 691.69 L1764.37 691.69 L1764.93 691.69 L1765.49 691.69 L1766.05 691.69 L1766.61 691.69 L1767.16 691.69 L1767.72 691.69 L1768.28 691.69 L1768.84 691.69 L1769.4 691.69 L1769.96 691.69 L1770.52 691.69 L1771.08 691.69 L1771.64 691.69 L1772.2 691.69 L1772.76 691.69 L1773.32 691.69 L1773.88 691.69 L1774.43 691.69 L1774.99 691.69 L1775.55 691.69 L1776.11 691.69 L1776.67 691.69 L1777.23 691.69 L1777.79 691.69 L1778.35 691.69 L1778.91 691.69 L1779.47 691.69 L1780.03 691.69 L1780.59 691.69 L1781.15 691.69 L1781.71 691.69 L1782.26 691.69 L1782.82 691.69 L1783.38 691.69 L1783.94 691.69 L1784.5 691.69 L1785.06 691.69 L1785.62 691.69 L1786.18 691.69 L1786.74 691.69 L1787.3 691.69 L1787.86 691.69 L1788.42 691.69 L1788.98 691.69 L1789.53 691.69 L1790.09 691.69 L1790.65 691.69 L1791.21 691.69 L1791.77 691.69 L1792.33 691.69 L1792.89 691.69 L1793.45 691.69 L1794.01 691.69 L1794.57 691.69 L1795.13 691.69 L1795.69 691.69 L1796.25 691.69 L1796.8 691.69 L1797.36 691.69 L1797.92 691.69 L1798.48 691.69 L1799.04 691.69 L1799.6 691.69 L1800.16 691.69 L1800.72 691.69 L1801.28 691.69 L1801.84 691.69 L1802.4 691.69 L1802.96 691.69 L1803.52 691.69 L1804.08 691.69 L1804.63 691.69 L1805.19 691.69 L1805.75 691.69 L1806.31 691.69 L1806.87 691.69 L1807.43 691.69 L1807.99 691.69 L1808.55 691.69 L1809.11 691.69 L1809.67 691.69 L1810.23 691.69 L1810.79 691.69 L1811.35 691.69 L1811.9 691.69 L1812.46 691.69 L1813.02 691.69 L1813.58 691.69 L1814.14 691.69 L1814.7 691.69 L1815.26 691.69 L1815.82 691.69 L1816.38 691.69 L1816.94 691.69 L1817.5 691.69 L1818.06 691.69 L1818.62 691.69 L1819.18 691.69 L1819.73 691.69 L1820.29 691.69 L1820.85 691.69 L1821.41 691.69 L1821.97 691.69 L1822.53 691.69 L1823.09 691.69 L1823.65 691.69 L1824.21 691.69 L1824.77 691.69 L1825.33 691.69 L1825.89 691.69 L1826.45 691.69 L1827 691.69 L1827.56 691.69 L1828.12 691.69 L1828.68 691.69 L1829.24 691.69 L1829.8 691.69 L1830.36 691.69 L1830.92 691.69 L1831.48 691.69 L1832.04 691.69 L1832.6 691.69 L1833.16 691.69 L1833.72 691.69 L1834.27 691.69 L1834.83 691.69 L1835.39 691.69 L1835.95 691.69 L1836.51 691.69 L1837.07 691.69 L1837.63 691.69 L1838.19 691.69 L1838.19 684.983 L1837.63 684.983 L1837.07 684.983 L1836.51 684.983 L1835.95 684.983 L1835.39 684.983 L1834.83 684.983 L1834.27 684.983 L1833.72 684.983 L1833.16 684.983 L1832.6 684.983 L1832.04 684.983 L1831.48 684.983 L1830.92 684.983 L1830.36 684.983 L1829.8 684.983 L1829.24 684.983 L1828.68 684.983 L1828.12 684.983 L1827.56 684.983 L1827 684.983 L1826.45 684.983 L1825.89 684.983 L1825.33 684.983 L1824.77 684.983 L1824.21 684.983 L1823.65 684.983 L1823.09 684.983 L1822.53 684.983 L1821.97 684.983 L1821.41 684.983 L1820.85 684.983 L1820.29 684.983 L1819.73 684.983 L1819.18 684.983 L1818.62 684.983 L1818.06 684.983 L1817.5 684.983 L1816.94 684.983 L1816.38 684.983 L1815.82 684.983 L1815.26 684.983 L1814.7 684.983 L1814.14 684.983 L1813.58 684.983 L1813.02 684.983 L1812.46 684.983 L1811.9 684.983 L1811.35 684.983 L1810.79 684.983 L1810.23 684.983 L1809.67 684.983 L1809.11 684.983 L1808.55 684.983 L1807.99 684.983 L1807.43 684.983 L1806.87 684.983 L1806.31 684.983 L1805.75 684.983 L1805.19 684.983 L1804.63 684.983 L1804.08 684.983 L1803.52 684.983 L1802.96 684.983 L1802.4 684.983 L1801.84 684.983 L1801.28 684.983 L1800.72 684.983 L1800.16 684.983 L1799.6 684.983 L1799.04 684.983 L1798.48 684.983 L1797.92 684.983 L1797.36 684.983 L1796.8 684.983 L1796.25 684.983 L1795.69 684.983 L1795.13 684.983 L1794.57 684.983 L1794.01 684.983 L1793.45 684.983 L1792.89 684.983 L1792.33 684.983 L1791.77 684.983 L1791.21 684.983 L1790.65 684.983 L1790.09 684.983 L1789.53 684.983 L1788.98 684.983 L1788.42 684.983 L1787.86 684.983 L1787.3 684.983 L1786.74 684.983 L1786.18 684.983 L1785.62 684.983 L1785.06 684.983 L1784.5 684.983 L1783.94 684.983 L1783.38 684.983 L1782.82 684.983 L1782.26 684.983 L1781.71 684.983 L1781.15 684.983 L1780.59 684.983 L1780.03 684.983 L1779.47 684.983 L1778.91 684.983 L1778.35 684.983 L1777.79 684.983 L1777.23 684.983 L1776.67 684.983 L1776.11 684.983 L1775.55 684.983 L1774.99 684.983 L1774.43 684.983 L1773.88 684.983 L1773.32 684.983 L1772.76 684.983 L1772.2 684.983 L1771.64 684.983 L1771.08 684.983 L1770.52 684.983 L1769.96 684.983 L1769.4 684.983 L1768.84 684.983 L1768.28 684.983 L1767.72 684.983 L1767.16 684.983 L1766.61 684.983 L1766.05 684.983 L1765.49 684.983 L1764.93 684.983 L1764.37 684.983 L1763.81 684.983 L1763.25 684.983 L1762.69 684.983 L1762.13 684.983 L1761.57 684.983 L1761.01 684.983 L1760.45 684.983 L1759.89 684.983 L1759.34 684.983 L1758.78 684.983 L1758.22 684.983 L1757.66 684.983 L1757.1 684.983 L1756.54 684.983 L1755.98 684.983 L1755.42 684.983 L1754.86 684.983 L1754.3 684.983 L1753.74 684.983 L1753.18 684.983 L1752.62 684.983 L1752.06 684.983 L1751.51 684.983 L1750.95 684.983 L1750.39 684.983 L1749.83 684.983 L1749.27 684.983 L1748.71 684.983 L1748.15 684.983 L1747.59 684.983 L1747.03 684.983 L1746.47 684.983 L1745.91 684.983 L1745.35 684.983 L1744.79 684.983 L1744.24 684.983 L1743.68 684.983 L1743.12 684.983 L1742.56 684.983 L1742 684.983 L1741.44 684.983 L1740.88 684.983 L1740.32 684.983 L1739.76 684.983 L1739.2 684.983 L1738.64 684.983 L1738.08 684.983 L1737.52 684.983 L1736.97 684.983 L1736.41 684.983 L1735.85 684.983 L1735.29 684.983 L1734.73 684.983 L1734.17 684.983 L1733.61 684.983 L1733.05 684.983 L1732.49 684.983 L1731.93 684.983 L1731.37 684.983 L1730.81 684.983 L1730.25 684.983 L1729.69 684.983 L1729.14 684.983 L1728.58 684.983 L1728.02 684.983 L1727.46 684.983 L1726.9 684.983 L1726.34 684.983 L1725.78 684.983 L1725.22 684.983 L1724.66 684.983 L1724.1 684.983 L1723.54 684.983 L1722.98 684.983 L1722.42 684.983 L1721.87 684.983 L1721.31 684.983 L1720.75 684.983 L1720.19 684.983 L1719.63 684.983 L1719.07 684.983 L1718.51 684.983 L1717.95 684.983 L1717.39 684.983 L1716.83 684.983 L1716.27 684.983 L1715.71 684.983 L1715.15 684.983 L1714.6 684.983 L1714.04 684.983 L1713.48 684.983 L1712.92 684.983 L1712.36 684.983 L1711.8 684.983 L1711.24 684.983 L1710.68 684.983 L1710.12 684.983 L1709.56 684.983 L1709 684.983 L1708.44 684.983 L1707.88 684.983 L1707.32 684.983 L1706.77 684.983 L1706.21 684.983 L1705.65 684.983 L1705.09 684.983 L1704.53 684.983 L1703.97 684.983 L1703.41 684.983 L1702.85 684.983 L1702.29 684.983 L1701.73 684.983 L1701.17 684.983 L1700.61 684.983 L1700.05 684.983 L1699.5 684.983 L1698.94 684.983 L1698.38 684.983 L1697.82 684.983 L1697.26 684.983 L1696.7 684.983 L1696.14 684.983 L1695.58 684.983 L1695.02 684.983 L1694.46 684.983 L1693.9 684.983 L1693.34 684.983 L1692.78 684.983 L1692.23 684.983 L1691.67 684.983 L1691.11 684.983 L1690.55 684.983 L1689.99 684.983 L1689.43 684.983 L1688.87 684.983 L1688.31 684.983 L1687.75 684.983 L1687.19 684.983 L1686.63 684.983 L1686.07 684.983 L1685.51 684.983 L1684.95 684.983 L1684.4 684.983 L1683.84 684.983 L1683.28 684.983 L1682.72 684.983 L1682.16 684.983 L1681.6 684.983 L1681.04 684.983 L1680.48 684.983 L1679.92 684.983 L1679.36 684.983 L1678.8 684.983 L1678.24 684.983 L1677.68 684.983 L1677.13 684.983 L1676.57 684.983 L1676.01 684.983 L1675.45 684.983 L1674.89 684.983 L1674.33 684.983 L1673.77 684.983 L1673.21 684.983 L1672.65 684.983 L1672.09 684.983 L1671.53 684.983 L1670.97 684.983 L1670.41 684.983 L1669.85 684.983 L1669.3 684.983 L1668.74 684.983 L1668.18 684.983 L1667.62 684.983 L1667.06 684.983 L1666.5 684.983 L1665.94 684.983 L1665.38 684.983 L1664.82 684.983 L1664.26 684.983 L1663.7 684.983 L1663.14 684.983 L1662.58 684.983 L1662.03 684.983 L1661.47 684.983 L1660.91 684.983 L1660.35 684.983 L1659.79 684.983 L1659.23 684.983 L1658.67 684.983 L1658.11 684.983 L1657.55 684.983 L1656.99 684.983 L1656.43 684.983 L1655.87 684.983 L1655.31 684.983 L1654.76 684.983 L1654.2 684.983 L1653.64 684.983 L1653.08 684.983 L1652.52 684.983 L1651.96 684.983 L1651.4 684.983 L1650.84 684.983 L1650.28 684.983 L1649.72 684.983 L1649.16 684.983 L1648.6 684.983 L1648.04 684.983 L1647.48 684.983 L1646.93 684.983 L1646.37 684.983 L1645.81 684.983 L1645.25 684.983 L1644.69 684.983 L1644.13 684.983 L1643.57 684.983 L1643.01 684.983 L1642.45 684.983 L1641.89 684.983 L1641.33 684.983 L1640.77 684.983 L1640.21 684.983 L1639.66 684.983 L1639.1 684.983 L1638.54 684.983 L1637.98 684.983 L1637.42 684.983 L1636.86 684.983 L1636.3 684.983 L1635.74 684.983 L1635.18 684.983 L1634.62 684.983 L1634.06 684.983 L1633.5 684.983 L1632.94 684.983 L1632.39 684.983 L1631.83 684.983 L1631.27 684.983 L1630.71 684.983 L1630.15 684.983 L1629.59 684.983 L1629.03 684.983 L1628.47 684.983 L1627.91 684.983 L1627.35 684.983 L1626.79 684.983 L1626.23 684.983 L1625.67 684.983 L1625.11 684.983 L1624.56 684.983 L1624 684.983 L1623.44 684.983 L1622.88 684.983 L1622.32 684.983 L1621.76 684.983 L1621.2 684.983 L1620.64 684.983 L1620.08 684.983 L1619.52 684.983 L1618.96 684.983 L1618.4 684.983 L1617.84 684.983 L1617.29 684.983 L1616.73 684.983 L1616.17 684.983 L1615.61 684.983 L1615.05 684.983 L1614.49 684.983 L1613.93 684.983 L1613.37 684.983 L1612.81 684.983 L1612.25 684.983 L1611.69 684.983 L1611.13 684.983 L1610.57 684.983 L1610.02 684.983 L1609.46 684.983 L1608.9 684.983 L1608.34 684.983 L1607.78 684.983 L1607.22 684.983 L1606.66 684.983 L1606.1 684.983 L1605.54 684.983 L1604.98 684.983 L1604.42 684.983 L1603.86 684.983 L1603.3 684.983 L1602.74 684.983 L1602.19 684.983 L1601.63 684.983 L1601.07 684.983 L1600.51 684.983 L1599.95 684.983 L1599.39 684.983 L1598.83 684.983 L1598.27 684.983 L1597.71 684.983 L1597.15 684.983 L1596.59 684.983 L1596.03 684.983 L1595.47 684.983 L1594.92 684.983 L1594.36 684.983 L1593.8 684.983 L1593.24 684.983 L1592.68 684.983 L1592.12 684.983 L1591.56 684.983 L1591 684.983 L1590.44 684.983 L1589.88 684.983 L1589.32 684.983 L1588.76 684.983 L1588.2 684.983 L1587.65 684.983 L1587.09 684.983 L1586.53 684.983 L1585.97 684.983 L1585.41 684.983 L1584.85 684.983 L1584.29 684.983 L1583.73 684.983 L1583.17 684.983 L1582.61 684.983 L1582.05 684.983 L1581.49 684.983 L1580.93 684.983 L1580.37 684.983 L1579.82 684.983 L1579.26 684.983 L1578.7 684.983 L1578.14 684.983 L1577.58 684.983 L1577.02 684.983 L1576.46 684.983 L1575.9 684.983 L1575.34 684.983 L1574.78 684.983 L1574.22 684.983 L1573.66 684.983 L1573.1 684.983 L1572.55 684.983 L1571.99 684.983 L1571.43 684.983 L1570.87 684.983 L1570.31 684.983 L1569.75 684.983 L1569.19 684.983 L1568.63 684.983 L1568.07 684.983 L1567.51 684.983 L1566.95 684.983 L1566.39 684.983 L1565.83 684.983 L1565.28 684.983 L1564.72 684.983 L1564.16 684.983 L1563.6 684.983 L1563.04 684.983 L1562.48 684.983 L1561.92 684.983 L1561.36 684.983 L1560.8 684.983 L1560.24 684.983 L1559.68 684.983 L1559.12 684.983 L1558.56 684.983 L1558 684.983 L1557.45 684.983 L1556.89 684.983 L1556.33 684.983 L1555.77 684.983 L1555.21 684.983 L1554.65 684.983 L1554.09 684.983 L1553.53 684.983 L1552.97 684.983 L1552.41 684.983 L1551.85 684.983 L1551.29 684.983 L1550.73 684.983 L1550.18 684.983 L1549.62 684.983 L1549.06 684.983 L1548.5 684.983 L1547.94 684.983 L1547.38 684.983 L1546.82 684.983 L1546.26 684.983 L1545.7 684.983 L1545.14 684.983 L1544.58 684.983 L1544.02 684.983 L1543.46 684.983 L1542.9 684.983 L1542.35 684.983 L1541.79 684.983 L1541.23 684.983 L1540.67 684.983 L1540.11 684.983 L1539.55 684.983 L1538.99 684.983 L1538.43 684.983 L1537.87 684.983 L1537.31 684.983 L1536.75 684.983 L1536.19 684.983 L1535.63 684.983 L1535.08 684.983 L1534.52 684.983 L1533.96 684.983 L1533.4 684.983 L1532.84 684.983 L1532.28 684.983 L1531.72 684.983 L1531.16 684.983 L1530.6 684.983 L1530.04 684.983 L1529.48 684.983 L1528.92 684.983 L1528.36 684.983 L1527.81 684.983 L1527.25 684.983 L1526.69 684.983 L1526.13 684.983 L1525.57 684.983 L1525.01 684.983 L1524.45 684.983 L1523.89 684.983 L1523.33 684.983 L1522.77 684.983 L1522.21 684.983 L1521.65 684.983 L1521.09 684.983 L1520.53 684.983 L1519.98 684.983 L1519.42 684.983 L1518.86 684.983 L1518.3 684.983 L1517.74 684.983 L1517.18 684.983 L1516.62 684.983 L1516.06 684.983 L1515.5 684.983 L1514.94 684.983 L1514.38 684.983 L1513.82 684.983 L1513.26 684.983 L1512.71 684.983 L1512.15 684.983 L1511.59 684.983 L1511.03 684.983 L1510.47 684.983 L1509.91 684.983 L1509.35 684.983 L1508.79 684.983 L1508.23 684.983 L1507.67 684.983 L1507.11 684.983 L1506.55 684.983 L1505.99 684.983 L1505.44 684.983 L1504.88 684.983 L1504.32 684.983 L1503.76 684.983 L1503.2 684.983 L1502.64 684.983 L1502.08 684.983 L1501.52 684.983 L1500.96 684.983 L1500.4 684.983 L1499.84 684.983 L1499.28 684.983 L1498.72 684.983 L1498.16 684.983 L1497.61 684.983 L1497.05 684.983 L1496.49 684.983 L1495.93 684.983 L1495.37 684.983 L1494.81 684.983 L1494.25 684.983 L1493.69 684.983 L1493.13 684.983 L1492.57 684.983 L1492.01 684.983 L1491.45 684.983 L1490.89 684.983 L1490.34 684.983 L1489.78 684.983 L1489.22 684.983 L1488.66 684.983 L1488.1 684.983 L1487.54 684.983 L1486.98 684.983 L1486.42 684.983 L1485.86 684.983 L1485.3 684.983 L1484.74 684.983 L1484.18 684.983 L1483.62 684.983 L1483.07 684.983 L1482.51 684.983 L1481.95 684.983 L1481.39 684.983 L1480.83 684.983 L1480.27 684.983 L1479.71 684.983 L1479.15 684.983 L1478.59 684.983 L1478.03 684.983 L1477.47 684.983 L1476.91 684.983 L1476.35 684.983 L1475.79 684.983 L1475.24 684.983 L1474.68 684.983 L1474.12 684.983 L1473.56 684.983 L1473 684.983 L1472.44 684.983 L1471.88 684.983 L1471.32 684.983 L1470.76 684.983 L1470.2 684.983 L1469.64 684.983 L1469.08 684.983 L1468.52 684.983 L1467.97 684.983 L1467.41 684.983 L1466.85 684.983 L1466.29 684.983 L1465.73 684.983 L1465.17 684.983 L1464.61 684.983 L1464.05 684.983 L1463.49 684.983 L1462.93 684.983 L1462.37 684.983 L1461.81 684.983 L1461.25 684.983 L1460.7 684.983 L1460.14 684.983 L1459.58 684.983 L1459.02 684.983 L1458.46 684.983 L1457.9 684.983 L1457.34 684.983 L1456.78 684.983 L1456.22 684.983 L1455.66 684.983 L1455.1 684.983 L1454.54 684.983 L1453.98 684.983 L1453.42 684.983 L1452.87 684.983 L1452.31 684.983 L1451.75 684.983 L1451.19 684.983 L1450.63 684.983 L1450.07 684.983 L1449.51 684.983 L1448.95 684.983 L1448.39 684.983 L1447.83 684.983 L1447.27 684.983 L1446.71 684.983 L1446.15 684.983 L1445.6 684.983 L1445.04 684.983 L1444.48 684.983 L1443.92 684.983 L1443.36 684.983 L1442.8 684.983 L1442.24 684.983 L1441.68 684.983 L1441.12 684.983 L1440.56 684.983 L1440 684.983 L1439.44 684.983 L1438.88 684.983 L1438.33 684.983 L1437.77 684.983 L1437.21 684.983 L1436.65 684.983 L1436.09 684.983 L1435.53 684.983 L1434.97 684.983 L1434.41 684.983 L1433.85 684.983 L1433.29 684.983 L1432.73 684.983 L1432.17 684.983 L1431.61 684.983 L1431.05 684.983 L1430.5 684.983 L1429.94 684.983 L1429.38 684.983 L1428.82 684.983 L1428.26 684.983 L1427.7 684.983 L1427.14 684.983 L1426.58 684.983 L1426.02 684.983 L1425.46 684.983 L1424.9 684.983 L1424.34 684.983 L1423.78 684.983 L1423.23 684.983 L1422.67 684.983 L1422.11 684.983 L1421.55 684.983 L1420.99 684.983 L1420.43 684.983 L1419.87 684.983 L1419.31 684.983 L1418.75 684.983 L1418.19 684.983 L1417.63 684.983 L1417.07 684.983 L1416.51 684.983 L1415.95 684.983 L1415.4 684.983 L1414.84 684.983 L1414.28 684.983 L1413.72 684.983 L1413.16 684.983 L1412.6 684.983 L1412.04 684.983 L1411.48 684.983 L1410.92 684.983 L1410.36 684.983 L1409.8 684.983 L1409.24 684.983 L1408.68 684.983 L1408.13 684.983 L1407.57 684.983 L1407.01 684.983 L1406.45 684.983 L1405.89 684.983 L1405.33 684.983 L1404.77 684.983 L1404.21 684.983 L1403.65 684.983 L1403.09 684.983 L1402.53 684.983 L1401.97 684.983 L1401.41 684.983 L1400.86 684.983 L1400.3 684.983 L1399.74 684.983 L1399.18 684.983 L1398.62 684.983 L1398.06 684.983 L1397.5 684.983 L1396.94 684.983 L1396.38 684.983 L1395.82 684.983 L1395.26 684.983 L1394.7 684.983 L1394.14 684.983 L1393.58 684.983 L1393.03 684.983 L1392.47 684.983 L1391.91 684.983 L1391.35 684.983 L1390.79 684.983 L1390.23 684.983 L1389.67 684.983 L1389.11 684.983 L1388.55 684.983 L1387.99 684.983 L1387.43 684.983 L1386.87 684.983 L1386.31 684.983 L1385.76 684.983 L1385.2 684.983 L1384.64 684.983 L1384.08 684.983 L1383.52 684.983 L1382.96 684.983 L1382.4 684.983 L1381.84 684.983 L1381.28 684.983 L1380.72 684.983 L1380.16 684.983 L1379.6 684.983 L1379.04 684.983 L1378.49 684.983 L1377.93 684.983 L1377.37 684.983 L1376.81 684.983 L1376.25 684.983 L1375.69 684.983 L1375.13 684.983 L1374.57 684.983 L1374.01 684.983 L1373.45 684.983 L1372.89 684.983 L1372.33 684.983 L1371.77 684.983 L1371.21 684.983 L1370.66 684.983 L1370.1 684.983 L1369.54 684.983 L1368.98 684.983 L1368.42 684.983 L1367.86 684.983 L1367.3 684.983 L1366.74 684.983 L1366.18 684.983 L1365.62 684.983 L1365.06 684.983 L1364.5 684.983 L1363.94 684.983 L1363.39 684.983 L1362.83 684.983 L1362.27 684.983 L1361.71 684.983 L1361.15 684.983 L1360.59 684.983 L1360.03 684.983 L1359.47 684.983 L1358.91 684.983 L1358.35 684.983 L1357.79 684.983 L1357.23 684.983 L1356.67 684.983 L1356.12 684.983 L1355.56 684.983 L1355 684.983 L1354.44 684.983 L1353.88 684.983 L1353.32 684.983 L1352.76 684.983 L1352.2 684.983 L1351.64 684.983 L1351.08 684.983 L1350.52 684.983 L1349.96 684.983 L1349.4 684.983 L1348.84 684.983 L1348.29 684.983 L1347.73 684.983 L1347.17 684.983 L1346.61 684.983 L1346.05 684.983 L1345.49 684.983 L1344.93 684.983 L1344.37 684.983 L1343.81 684.983 L1343.25 684.983 L1342.69 684.983 L1342.13 684.983 L1341.57 684.983 L1341.02 684.983 L1340.46 684.983 L1339.9 684.983 L1339.34 684.983 L1338.78 684.983 L1338.22 684.983 L1337.66 684.983 L1337.1 684.983 L1336.54 684.983 L1335.98 684.983 L1335.42 684.983 L1334.86 684.983 L1334.3 684.983 L1333.75 684.983 L1333.19 684.983 L1332.63 684.983 L1332.07 684.983 L1331.51 684.983 L1330.95 684.983 L1330.39 684.983 L1329.83 684.983 L1329.27 684.983 L1328.71 684.983 L1328.15 684.983 L1327.59 684.983 L1327.03 684.983 L1326.47 684.983 L1325.92 684.983 L1325.36 684.983 L1324.8 684.983 L1324.24 684.983 L1323.68 684.983 L1323.12 684.983 L1322.56 684.983 L1322 684.983 L1321.44 684.983 L1320.88 684.983 L1320.32 684.983 L1319.76 684.983 L1319.2 684.983 L1318.65 684.983 L1318.09 684.983 L1317.53 684.983 L1316.97 684.983 L1316.41 684.983 L1315.85 684.983 L1315.29 684.983 L1314.73 684.983 L1314.17 684.983 L1313.61 684.983 L1313.05 684.983 L1312.49 684.983 L1311.93 684.983 L1311.38 684.983 L1310.82 684.983 L1310.26 684.983 L1309.7 684.983 L1309.14 684.983 L1308.58 684.983 L1308.02 684.983 L1307.46 684.983 L1306.9 684.983 L1306.34 684.983 L1305.78 684.983 L1305.22 684.983 L1304.66 684.983 L1304.1 684.983 L1303.55 684.983 L1302.99 684.983 L1302.43 684.983 L1301.87 684.983 L1301.31 684.983 L1300.75 684.983 L1300.19 684.983 L1299.63 684.983 L1299.07 684.983 L1298.51 684.983 L1297.95 684.983 L1297.39 684.983 L1296.83 684.983 L1296.28 684.983 L1295.72 684.983 L1295.16 684.983 L1294.6 684.983 L1294.04 684.983 L1293.48 684.983 L1292.92 684.983 L1292.36 684.983 L1291.8 684.983 L1291.24 684.983 L1290.68 684.983 L1290.12 684.983 L1289.56 684.983 L1289 684.983 L1288.45 684.983 L1287.89 684.983 L1287.33 684.983 L1286.77 684.983 L1286.21 684.983 L1285.65 684.983 L1285.09 684.983 L1284.53 684.983 L1283.97 684.983 L1283.41 684.983 L1282.85 684.983 L1282.29 684.983 L1281.73 684.983 L1281.18 684.983 L1280.62 684.983 L1280.06 684.983 L1279.5 684.983 L1278.94 684.983 L1278.38 684.983 L1277.82 684.983 L1277.26 684.983 L1276.7 684.983 L1276.14 684.983 L1275.58 684.983 L1275.02 684.983 L1274.46 684.983 L1273.91 684.983 L1273.35 684.983 L1272.79 684.983 L1272.23 684.983 L1271.67 684.983 L1271.11 684.983 L1270.55 684.983 L1269.99 684.983 L1269.43 684.983 L1268.87 684.983 L1268.31 684.983 L1267.75 684.983 L1267.19 684.983 L1266.63 684.983 L1266.08 684.983 L1265.52 684.983 L1264.96 684.983 L1264.4 684.983 L1263.84 684.983 L1263.28 684.983 L1262.72 684.983 L1262.16 684.983 L1261.6 684.983 L1261.04 684.983 L1260.48 684.983 L1259.92 684.983 L1259.36 684.983 L1258.81 684.983 L1258.25 684.983 L1257.69 684.983 L1257.13 684.983 L1256.57 684.983 L1256.01 684.983 L1255.45 684.983 L1254.89 684.983 L1254.33 684.983 L1253.77 684.983 L1253.21 684.983 L1252.65 684.983 L1252.09 684.983 L1251.54 684.983 L1250.98 684.983 L1250.42 684.983 L1249.86 684.983 L1249.3 684.983 L1248.74 684.983 L1248.18 684.983 L1247.62 684.983 L1247.06 684.983 L1246.5 684.983 L1245.94 684.983 L1245.38 684.983 L1244.82 684.983 L1244.26 684.983 L1243.71 684.983 L1243.15 684.983 L1242.59 684.983 L1242.03 684.983 L1241.47 684.983 L1240.91 684.983 L1240.35 684.983 L1239.79 684.983 L1239.23 684.983 L1238.67 684.983 L1238.11 684.983 L1237.55 684.983 L1236.99 684.983 L1236.44 684.983 L1235.88 684.983 L1235.32 684.983 L1234.76 684.983 L1234.2 684.983 L1233.64 684.983 L1233.08 684.983 L1232.52 684.983 L1231.96 684.983 L1231.4 684.983 L1230.84 684.983 L1230.28 684.983 L1229.72 684.983 L1229.17 684.983 L1228.61 684.983 L1228.05 684.983 L1227.49 684.983 L1226.93 684.983 L1226.37 684.983 L1225.81 684.983 L1225.25 684.983 L1224.69 684.983 L1224.13 684.983 L1223.57 684.983 L1223.01 684.983 L1222.45 684.983 L1221.89 684.983 L1221.34 684.983 L1220.78 684.983 L1220.22 684.983 L1219.66 684.983 L1219.1 684.983 L1218.54 684.983 L1217.98 684.983 L1217.42 684.983 L1216.86 684.983 L1216.3 684.983 L1215.74 684.983 L1215.18 684.983 L1214.62 684.983 L1214.07 684.983 L1213.51 684.983 L1212.95 684.983 L1212.39 684.983 L1211.83 684.983 L1211.27 684.983 L1210.71 684.983 L1210.15 684.983 L1209.59 684.983 L1209.03 684.983 L1208.47 684.983 L1207.91 684.983 L1207.35 684.983 L1206.8 684.983 L1206.24 684.983 L1205.68 684.983 L1205.12 684.983 L1204.56 684.983 L1204 684.983 L1203.44 684.983 L1202.88 684.983 L1202.32 684.983 L1201.76 684.983 L1201.2 684.983 L1200.64 684.983 L1200.08 684.983 L1199.52 684.983 L1198.97 684.983 L1198.41 684.983 L1197.85 684.983 L1197.29 684.983 L1196.73 684.983 L1196.17 684.983 L1195.61 684.983 L1195.05 684.983 L1194.49 684.983 L1193.93 684.983 L1193.37 684.983 L1192.81 684.983 L1192.25 684.983 L1191.7 684.983 L1191.14 684.983 L1190.58 684.983 L1190.02 684.983 L1189.46 684.983 L1188.9 684.983 L1188.34 684.983 L1187.78 684.983 L1187.22 684.983 L1186.66 684.983 L1186.1 684.983 L1185.54 684.983 L1184.98 684.983 L1184.43 684.983 L1183.87 684.983 L1183.31 684.983 L1182.75 684.983 L1182.19 684.983 L1181.63 684.983 L1181.07 684.983 L1180.51 684.983 L1179.95 684.983 L1179.39 684.983 L1178.83 684.983 L1178.27 684.983 L1177.71 684.983 L1177.15 684.983 L1176.6 684.983 L1176.04 684.983 L1175.48 684.983 L1174.92 684.983 L1174.36 684.983 L1173.8 684.983 L1173.24 684.983 L1172.68 684.983 L1172.12 684.983 L1171.56 684.983 L1171 684.983 L1170.44 684.983 L1169.88 684.983 L1169.33 684.983 L1168.77 684.983 L1168.21 684.983 L1167.65 684.983 L1167.09 684.983 L1166.53 684.983 L1165.97 684.983 L1165.41 684.983 L1164.85 684.983 L1164.29 684.983 L1163.73 684.983 L1163.17 684.983 L1162.61 684.983 L1162.05 684.983 L1161.5 684.983 L1160.94 684.983 L1160.38 684.983 L1159.82 684.983 L1159.26 684.983 L1158.7 684.983 L1158.14 684.983 L1157.58 684.983 L1157.02 684.983 L1156.46 684.983 L1155.9 684.983 L1155.34 684.983 L1154.78 684.983 L1154.23 684.983 L1153.67 684.983 L1153.11 684.983 L1152.55 684.983 L1151.99 684.983 L1151.43 684.983 L1150.87 684.983 L1150.31 684.983 L1149.75 684.983 L1149.19 684.983 L1148.63 684.983 L1148.07 684.983 L1147.51 684.983 L1146.96 684.983 L1146.4 684.983 L1145.84 684.983 L1145.28 684.983 L1144.72 684.983 L1144.16 684.983 L1143.6 684.983 L1143.04 684.983 L1142.48 684.983 L1141.92 684.983 L1141.36 684.983 L1140.8 684.983 L1140.24 684.983 L1139.68 684.983 L1139.13 684.983 L1138.57 684.983 L1138.01 684.983 L1137.45 684.983 L1136.89 684.983 L1136.33 684.983 L1135.77 684.983 L1135.21 684.983 L1134.65 684.983 L1134.09 684.983 L1133.53 684.983 L1132.97 684.983 L1132.41 684.983 L1131.86 684.983 L1131.3 684.983 L1130.74 684.983 L1130.18 684.983 L1129.62 684.983 L1129.06 684.983 L1128.5 684.983 L1127.94 684.983 L1127.38 684.983 L1126.82 684.983 L1126.26 684.983 L1125.7 684.983 L1125.14 684.983 L1124.59 684.983 L1124.03 684.983 L1123.47 684.983 L1122.91 684.983 L1122.35 684.983 L1121.79 684.983 L1121.23 684.983 L1120.67 684.983 L1120.11 684.983 L1119.55 684.983 L1118.99 684.983 L1118.43 684.983 L1117.87 684.983 L1117.31 684.983 L1116.76 684.983 L1116.2 684.983 L1115.64 684.983 L1115.08 684.983 L1114.52 684.983 L1113.96 684.983 L1113.4 684.983 L1112.84 684.983 L1112.28 684.983 L1111.72 684.983 L1111.16 684.983 L1110.6 684.983 L1110.04 684.983 L1109.49 684.983 L1108.93 684.983 L1108.37 684.983 L1107.81 684.983 L1107.25 684.983 L1106.69 684.983 L1106.13 684.983 L1105.57 684.983 L1105.01 684.983 L1104.45 684.983 L1103.89 684.983 L1103.33 684.983 L1102.77 684.983 L1102.22 684.983 L1101.66 684.983 L1101.1 684.983 L1100.54 684.983 L1099.98 684.983 L1099.42 684.983 L1098.86 684.983 L1098.3 684.983 L1097.74 684.983 L1097.18 684.983 L1096.62 684.983 L1096.06 684.983 L1095.5 684.983 L1094.94 684.983 L1094.39 684.983 L1093.83 684.983 L1093.27 684.983 L1092.71 684.983 L1092.15 684.983 L1091.59 684.983 L1091.03 684.983 L1090.47 684.983 L1089.91 684.983 L1089.35 684.983 L1088.79 684.983 L1088.23 684.983 L1087.67 684.983 L1087.12 684.983 L1086.56 684.983 L1086 684.983 L1085.44 684.983 L1084.88 684.983 L1084.32 684.983 L1083.76 684.983 L1083.2 684.983 L1082.64 684.983 L1082.08 684.983 L1081.52 684.983 L1080.96 684.983 L1080.4 684.983 L1079.85 684.983 L1079.29 684.983 L1078.73 684.983 L1078.17 684.983 L1077.61 684.983 L1077.05 684.983 L1076.49 684.983 L1075.93 684.983 L1075.37 684.983 L1074.81 684.983 L1074.25 684.983 L1073.69 684.983 L1073.13 684.983 L1072.57 684.983 L1072.02 684.983 L1071.46 684.983 L1070.9 684.983 L1070.34 684.983 L1069.78 684.983 L1069.22 684.983 L1068.66 684.983 L1068.1 684.983 L1067.54 684.983 L1066.98 684.983 L1066.42 684.983 L1065.86 684.983 L1065.3 684.983 L1064.75 684.983 L1064.19 684.983 L1063.63 684.983 L1063.07 684.983 L1062.51 684.983 L1061.95 684.983 L1061.39 684.983 L1060.83 684.983 L1060.27 684.983 L1059.71 684.983 L1059.15 684.983 L1058.59 684.983 L1058.03 684.983 L1057.48 684.983 L1056.92 684.983 L1056.36 684.983 L1055.8 684.983 L1055.24 684.983 L1054.68 684.983 L1054.12 684.983 L1053.56 684.983 L1053 684.983 L1052.44 684.983 L1051.88 684.983 L1051.32 684.983 L1050.76 684.983 L1050.2 684.983 L1049.65 684.983 L1049.09 684.983 L1048.53 684.983 L1047.97 684.983 L1047.41 684.983 L1046.85 684.983 L1046.29 684.983 L1045.73 684.983 L1045.17 684.983 L1044.61 684.983 L1044.05 684.983 L1043.49 684.983 L1042.93 684.983 L1042.38 684.983 L1041.82 684.983 L1041.26 684.983 L1040.7 684.983 L1040.14 684.983 L1039.58 684.983 L1039.02 684.983 L1038.46 684.983 L1037.9 684.983 L1037.34 684.983 L1036.78 684.983 L1036.22 684.983 L1035.66 684.983 L1035.1 684.983 L1034.55 684.983 L1033.99 684.983 L1033.43 684.983 L1032.87 684.983 L1032.31 684.983 L1031.75 684.983 L1031.19 684.983 L1030.63 684.983 L1030.07 684.983 L1029.51 684.983 L1028.95 684.983 L1028.39 684.983 L1027.83 684.983 L1027.28 684.983 L1026.72 684.983 L1026.16 684.983 L1025.6 684.983 L1025.04 684.983 L1024.48 684.983 L1023.92 684.983 L1023.36 684.983 L1022.8 684.983 L1022.24 684.983 L1021.68 684.983 L1021.12 684.983 L1020.56 684.983 L1020.01 684.983 L1019.45 684.983 L1018.89 684.983 L1018.33 684.983 L1017.77 684.983 L1017.21 684.983 L1016.65 684.983 L1016.09 684.983 L1015.53 684.983 L1014.97 684.983 L1014.41 684.983 L1013.85 684.983 L1013.29 684.983 L1012.73 684.983 L1012.18 684.983 L1011.62 684.983 L1011.06 684.983 L1010.5 684.983 L1009.94 684.983 L1009.38 684.983 L1008.82 684.983 L1008.26 684.983 L1007.7 684.983 L1007.14 684.983 L1006.58 684.983 L1006.02 684.983 L1005.46 684.983 L1004.91 684.983 L1004.35 684.983 L1003.79 684.983 L1003.23 684.983 L1002.67 684.983 L1002.11 684.983 L1001.55 684.983 L1000.99 684.983 L1000.43 684.983 L999.872 684.983 L999.313 684.983 L998.754 684.983 L998.194 684.983 L997.635 684.983 L997.076 684.983 L996.517 684.983 L995.957 684.983 L995.398 684.983 L994.839 684.983 L994.28 684.983 L993.72 684.983 L993.161 684.983 L992.602 684.983 L992.043 684.983 L991.483 684.983 L990.924 684.983 L990.365 684.983 L989.806 684.983 L989.246 684.983 L988.687 684.983 L988.128 684.983 L987.569 684.983 L987.009 684.983 L986.45 684.983 L985.891 684.983 L985.332 684.983 L984.772 684.983 L984.213 684.983 L983.654 684.983 L983.095 684.983 L982.535 684.983 L981.976 684.983 L981.417 684.983 L980.858 684.983 L980.298 684.983 L979.739 684.983 L979.18 684.983 L978.621 684.983 L978.061 684.983 L977.502 684.983 L976.943 684.983 L976.384 684.983 L975.824 684.983 L975.265 684.983 L974.706 684.983 L974.147 684.983 L973.587 684.983 L973.028 684.983 L972.469 684.983 L971.91 684.983 L971.35 684.983 L970.791 684.983 L970.232 684.983 L969.673 684.983 L969.113 684.983 L968.554 684.983 L967.995 684.983 L967.436 684.983 L966.876 684.983 L966.317 684.983 L965.758 684.983 L965.199 684.983 L964.639 684.983 L964.08 684.983 L963.521 684.983 L962.962 684.983 L962.402 684.983 L961.843 684.983 L961.284 684.983 L960.725 684.983 L960.165 684.983 L959.606 684.983 L959.047 684.983 L958.488 684.983 L957.928 684.983 L957.369 684.983 L956.81 684.983 L956.251 684.983 L955.691 684.983 L955.132 684.983 L954.573 684.983 L954.014 684.983 L953.454 684.983 L952.895 684.983 L952.336 684.983 L951.777 684.983 L951.217 684.983 L950.658 684.983 L950.099 684.983 L949.54 684.983 L948.98 684.983 L948.421 684.983 L947.862 684.983 L947.303 684.983 L946.743 684.983 L946.184 684.983 L945.625 684.983 L945.066 684.983 L944.506 684.983 L943.947 684.983 L943.388 684.983 L942.829 684.983 L942.269 684.983 L941.71 684.983 L941.151 684.983 L940.592 684.983 L940.032 684.983 L939.473 684.983 L938.914 684.983 L938.355 684.983 L937.795 684.983 L937.236 684.983 L936.677 684.983 L936.118 684.983 L935.558 684.983 L934.999 684.983 L934.44 684.983 L933.881 684.983 L933.321 684.983 L932.762 684.983 L932.203 684.983 L931.644 684.983 L931.084 684.983 L930.525 684.983 L929.966 684.983 L929.406 684.983 L928.847 684.983 L928.288 684.983 L927.729 684.983 L927.169 684.983 L926.61 684.983 L926.051 684.983 L925.492 684.983 L924.932 684.983 L924.373 684.983 L923.814 684.983 L923.255 684.983 L922.695 684.983 L922.136 684.983 L921.577 684.983 L921.018 684.983 L920.458 684.983 L919.899 684.983 L919.34 684.983 L918.781 684.983 L918.221 684.983 L917.662 684.983 L917.103 684.983 L916.544 684.983 L915.984 684.983 L915.425 684.983 L914.866 684.983 L914.307 684.983 L913.747 684.983 L913.188 684.983 L912.629 684.983 L912.07 684.983 L911.51 684.983 L910.951 684.983 L910.392 684.983 L909.833 684.983 L909.273 684.983 L908.714 684.983 L908.155 684.983 L907.596 684.983 L907.036 684.983 L906.477 684.983 L905.918 684.983 L905.359 684.983 L904.799 684.983 L904.24 684.983 L903.681 684.983 L903.122 684.983 L902.562 684.983 L902.003 684.983 L901.444 684.983 L900.885 684.983 L900.325 684.983 L899.766 684.983 L899.207 684.983 L898.648 684.983 L898.088 684.983 L897.529 684.983 L896.97 684.983 L896.411 684.983 L895.851 684.983 L895.292 684.983 L894.733 684.983 L894.174 684.983 L893.614 684.983 L893.055 684.983 L892.496 684.983 L891.937 684.983 L891.377 684.983 L890.818 684.983 L890.259 684.983 L889.7 684.983 L889.14 684.983 L888.581 684.983 L888.022 684.983 L887.463 684.983 L886.903 684.983 L886.344 684.983 L885.785 684.983 L885.226 684.983 L884.666 684.983 L884.107 684.983 L883.548 684.983 L882.989 684.983 L882.429 684.983 L881.87 684.983 L881.311 684.983 L880.752 684.983 L880.192 684.983 L879.633 684.983 L879.074 684.983 L878.515 684.983 L877.955 684.983 L877.396 684.983 L876.837 684.983 L876.278 684.983 L875.718 684.983 L875.159 684.983 L874.6 684.983 L874.041 684.983 L873.481 684.983 L872.922 684.983 L872.363 684.983 L871.804 684.983 L871.244 684.983 L870.685 684.983 L870.126 684.983 L869.567 684.983 L869.007 684.983 L868.448 684.983 L867.889 684.983 L867.33 684.983 L866.77 684.983 L866.211 684.983 L865.652 684.983 L865.093 684.983 L864.533 684.983 L863.974 684.983 L863.415 684.983 L862.856 684.983 L862.296 684.983 L861.737 684.983 L861.178 684.983 L860.619 684.983 L860.059 684.983 L859.5 684.983 L858.941 684.983 L858.382 684.983 L857.822 684.983 L857.263 684.983 L856.704 684.983 L856.145 684.983 L855.585 684.983 L855.026 684.983 L854.467 684.983 L853.908 684.983 L853.348 684.983 L852.789 684.983 L852.23 684.983 L851.671 684.983 L851.111 684.983 L850.552 684.983 L849.993 684.983 L849.434 684.983 L848.874 684.983 L848.315 684.983 L847.756 684.983 L847.197 684.983 L846.637 684.983 L846.078 684.983 L845.519 684.983 L844.96 684.983 L844.4 684.983 L843.841 684.983 L843.282 684.983 L842.723 684.983 L842.163 684.983 L841.604 684.983 L841.045 684.983 L840.486 684.983 L839.926 684.983 L839.367 684.983 L838.808 684.983 L838.249 684.983 L837.689 684.983 L837.13 684.983 L836.571 684.983 L836.012 684.983 L835.452 684.983 L834.893 684.983 L834.334 684.983 L833.775 684.983 L833.215 684.983 L832.656 684.983 L832.097 684.983 L831.538 684.983 L830.978 684.983 L830.419 684.983 L829.86 684.983 L829.301 684.983 L828.741 684.983 L828.182 684.983 L827.623 684.983 L827.064 684.983 L826.504 684.983 L825.945 684.983 L825.386 684.983 L824.827 684.983 L824.267 684.983 L823.708 684.983 L823.149 684.983 L822.59 684.983 L822.03 684.983 L821.471 684.983 L820.912 684.983 L820.353 684.983 L819.793 684.983 L819.234 684.983 L818.675 684.983 L818.116 684.983 L817.556 684.983 L816.997 684.983 L816.438 684.983 L815.879 684.983 L815.319 684.983 L814.76 684.983 L814.201 684.983 L813.642 684.983 L813.082 684.983 L812.523 684.983 L811.964 684.983 L811.405 684.983 L810.845 684.983 L810.286 684.983 L809.727 684.983 L809.168 684.983 L808.608 684.983 L808.049 684.983 L807.49 684.983 L806.931 684.983 L806.371 684.983 L805.812 684.983 L805.253 684.983 L804.693 684.983 L804.134 684.983 L803.575 684.983 L803.016 684.983 L802.456 684.983 L801.897 684.983 L801.338 684.983 L800.779 684.983 L800.219 684.983 L799.66 684.983 L799.101 684.983 L798.542 684.983 L797.982 684.983 L797.423 684.983 L796.864 684.983 L796.305 684.983 L795.745 684.983 L795.186 684.983 L794.627 684.983 L794.068 684.983 L793.508 684.983 L792.949 684.983 L792.39 684.983 L791.831 684.983 L791.271 684.983 L790.712 684.983 L790.153 684.983 L789.594 684.983 L789.034 684.983 L788.475 684.983 L787.916 684.983 L787.357 684.983 L786.797 684.983 L786.238 684.983 L785.679 684.983 L785.12 684.983 L784.56 684.983 L784.001 684.983 L783.442 684.983 L782.883 684.983 L782.323 684.983 L781.764 684.983 L781.205 684.983 L780.646 684.983 L780.086 684.983 L779.527 684.983 L778.968 684.983 L778.409 684.983 L777.849 684.983 L777.29 684.983 L776.731 684.983 L776.172 684.983 L775.612 684.983 L775.053 684.983 L774.494 684.983 L773.935 684.983 L773.375 684.983 L772.816 684.983 L772.257 684.983 L771.698 684.983 L771.138 684.983 L770.579 684.983 L770.02 684.983 L769.461 684.983 L768.901 684.983 L768.342 684.983 L767.783 684.983 L767.224 684.983 L766.664 684.983 L766.105 684.983 L765.546 684.983 L764.987 684.983 L764.427 684.983 L763.868 684.983 L763.309 684.983 L762.75 684.983 L762.19 684.983 L761.631 684.983 L761.072 684.983 L760.513 684.983 L759.953 684.983 L759.394 684.983 L758.835 684.983 L758.276 684.983 L757.716 684.983 L757.157 684.983 L756.598 684.983 L756.039 684.983 L755.479 684.983 L754.92 684.983 L754.361 684.983 L753.802 684.983 L753.242 684.983 L752.683 684.983 L752.124 684.983 L751.565 684.983 L751.005 684.983 L750.446 684.983 L749.887 684.983 L749.328 684.983 L748.768 684.983 L748.209 684.983 L747.65 684.983 L747.091 684.983 L746.531 684.983 L745.972 684.983 L745.413 684.983 L744.854 684.983 L744.294 684.983 L743.735 684.983 L743.176 684.983 L742.617 684.983 L742.057 684.983 L741.498 684.983 L740.939 684.983 L740.38 684.983 L739.82 684.983 L739.261 684.983 L738.702 684.983 L738.143 684.983 L737.583 684.983 L737.024 684.983 L736.465 684.983 L735.906 684.983 L735.346 684.983 L734.787 684.983 L734.228 684.983 L733.669 684.983 L733.109 684.983 L732.55 684.983 L731.991 684.983 L731.432 684.983 L730.872 684.983 L730.313 684.983 L729.754 684.983 L729.195 684.983 L728.635 684.983 L728.076 684.983 L727.517 684.983 L726.958 684.983 L726.398 684.983 L725.839 684.983 L725.28 684.983 L724.721 684.983 L724.161 684.983 L723.602 684.983 L723.043 684.983 L722.484 684.983 L721.924 684.983 L721.365 684.983 L720.806 684.983 L720.247 684.983  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.336 720.806,688.336 721.365,688.336 721.924,688.336 722.484,688.336 723.043,688.336 723.602,688.336 724.161,688.336 724.721,688.336 725.28,688.336 725.839,688.336 726.398,688.336 726.958,688.336 727.517,688.336 728.076,688.336 728.635,688.336 729.195,688.336 729.754,688.336 730.313,688.336 730.872,688.336 731.432,688.336 731.991,688.336 732.55,688.336 733.109,688.336 733.669,688.336 734.228,688.336 734.787,688.336 735.346,688.336 735.906,688.336 736.465,688.336 737.024,688.336 737.583,688.336 738.143,688.336 738.702,688.336 739.261,688.336 739.82,688.336 740.38,688.336 740.939,688.336 741.498,688.336 742.057,688.336 742.617,688.336 743.176,688.336 743.735,688.336 744.294,688.336 744.854,688.336 745.413,688.336 745.972,688.336 746.531,688.336 747.091,688.336 747.65,688.336 748.209,688.336 748.768,688.336 749.328,688.336 749.887,688.336 750.446,688.336 751.005,688.336 751.565,688.336 752.124,688.336 752.683,688.336 753.242,688.336 753.802,688.336 754.361,688.336 754.92,688.336 755.479,688.336 756.039,688.336 756.598,688.336 757.157,688.336 757.716,688.336 758.276,688.336 758.835,688.336 759.394,688.336 759.953,688.336 760.513,688.336 761.072,688.336 761.631,688.336 762.19,688.336 762.75,688.336 763.309,688.336 763.868,688.336 764.427,688.336 764.987,688.336 765.546,688.336 766.105,688.336 766.664,688.336 767.224,688.336 767.783,688.336 768.342,688.336 768.901,688.336 769.461,688.336 770.02,688.336 770.579,688.336 771.138,688.336 771.698,688.336 772.257,688.336 772.816,688.336 773.375,688.336 773.935,688.336 774.494,688.336 775.053,688.336 775.612,688.336 776.172,688.336 776.731,688.336 777.29,688.336 777.849,688.336 778.409,688.336 778.968,688.336 779.527,688.336 780.086,688.336 780.646,688.336 781.205,688.336 781.764,688.336 782.323,688.336 782.883,688.336 783.442,688.336 784.001,688.336 784.56,688.336 785.12,688.336 785.679,688.336 786.238,688.336 786.797,688.336 787.357,688.336 787.916,688.336 788.475,688.336 789.034,688.336 789.594,688.336 790.153,688.336 790.712,688.336 791.271,688.336 791.831,688.336 792.39,688.336 792.949,688.336 793.508,688.336 794.068,688.336 794.627,688.336 795.186,688.336 795.745,688.336 796.305,688.336 796.864,688.336 797.423,688.336 797.982,688.336 798.542,688.336 799.101,688.336 799.66,688.336 800.219,688.336 800.779,688.336 801.338,688.336 801.897,688.336 802.456,688.336 803.016,688.336 803.575,688.336 804.134,688.336 804.693,688.336 805.253,688.336 805.812,688.336 806.371,688.336 806.931,688.336 807.49,688.336 808.049,688.336 808.608,688.336 809.168,688.336 809.727,688.336 810.286,688.336 810.845,688.336 811.405,688.336 811.964,688.336 812.523,688.336 813.082,688.336 813.642,688.336 814.201,688.336 814.76,688.336 815.319,688.336 815.879,688.336 816.438,688.336 816.997,688.336 817.556,688.336 818.116,688.336 818.675,688.336 819.234,688.336 819.793,688.336 820.353,688.336 820.912,688.336 821.471,688.336 822.03,688.336 822.59,688.336 823.149,688.336 823.708,688.336 824.267,688.336 824.827,688.336 825.386,688.336 825.945,688.336 826.504,688.336 827.064,688.336 827.623,688.336 828.182,688.336 828.741,688.336 829.301,688.336 829.86,688.336 830.419,688.336 830.978,688.336 831.538,688.336 832.097,688.336 832.656,688.336 833.215,688.336 833.775,688.336 834.334,688.336 834.893,688.336 835.452,688.336 836.012,688.336 836.571,688.336 837.13,688.336 837.689,688.336 838.249,688.336 838.808,688.336 839.367,688.336 839.926,688.336 840.486,688.336 841.045,688.336 841.604,688.336 842.163,688.336 842.723,688.336 843.282,688.336 843.841,688.336 844.4,688.336 844.96,688.336 845.519,688.336 846.078,688.336 846.637,688.336 847.197,688.336 847.756,688.336 848.315,688.336 848.874,688.336 849.434,688.336 849.993,688.336 850.552,688.336 851.111,688.336 851.671,688.336 852.23,688.336 852.789,688.336 853.348,688.336 853.908,688.336 854.467,688.336 855.026,688.336 855.585,688.336 856.145,688.336 856.704,688.336 857.263,688.336 857.822,688.336 858.382,688.336 858.941,688.336 859.5,688.336 860.059,688.336 860.619,688.336 861.178,688.336 861.737,688.336 862.296,688.336 862.856,688.336 863.415,688.336 863.974,688.336 864.533,688.336 865.093,688.336 865.652,688.336 866.211,688.336 866.77,688.336 867.33,688.336 867.889,688.336 868.448,688.336 869.007,688.336 869.567,688.336 870.126,688.336 870.685,688.336 871.244,688.336 871.804,688.336 872.363,688.336 872.922,688.336 873.481,688.336 874.041,688.336 874.6,688.336 875.159,688.336 875.718,688.336 876.278,688.336 876.837,688.336 877.396,688.336 877.955,688.336 878.515,688.336 879.074,688.336 879.633,688.336 880.192,688.336 880.752,688.336 881.311,688.336 881.87,688.336 882.429,688.336 882.989,688.336 883.548,688.336 884.107,688.336 884.666,688.336 885.226,688.336 885.785,688.336 886.344,688.336 886.903,688.336 887.463,688.336 888.022,688.336 888.581,688.336 889.14,688.336 889.7,688.336 890.259,688.336 890.818,688.336 891.377,688.336 891.937,688.336 892.496,688.336 893.055,688.336 893.614,688.336 894.174,688.336 894.733,688.336 895.292,688.336 895.851,688.336 896.411,688.336 896.97,688.336 897.529,688.336 898.088,688.336 898.648,688.336 899.207,688.336 899.766,688.336 900.325,688.336 900.885,688.336 901.444,688.336 902.003,688.336 902.562,688.336 903.122,688.336 903.681,688.336 904.24,688.336 904.799,688.336 905.359,688.336 905.918,688.336 906.477,688.336 907.036,688.336 907.596,688.336 908.155,688.336 908.714,688.336 909.273,688.336 909.833,688.336 910.392,688.336 910.951,688.336 911.51,688.336 912.07,688.336 912.629,688.336 913.188,688.336 913.747,688.336 914.307,688.336 914.866,688.336 915.425,688.336 915.984,688.336 916.544,688.336 917.103,688.336 917.662,688.336 918.221,688.336 918.781,688.336 919.34,688.336 919.899,688.336 920.458,688.336 921.018,688.336 921.577,688.336 922.136,688.336 922.695,688.336 923.255,688.336 923.814,688.336 924.373,688.336 924.932,688.336 925.492,688.336 926.051,688.336 926.61,688.336 927.169,688.336 927.729,688.336 928.288,688.336 928.847,688.336 929.406,688.336 929.966,688.336 930.525,688.336 931.084,688.336 931.644,688.336 932.203,688.336 932.762,688.336 933.321,688.336 933.881,688.336 934.44,688.336 934.999,688.336 935.558,688.336 936.118,688.336 936.677,688.336 937.236,688.336 937.795,688.336 938.355,688.336 938.914,688.336 939.473,688.336 940.032,688.336 940.592,688.336 941.151,688.336 941.71,688.336 942.269,688.336 942.829,688.336 943.388,688.336 943.947,688.336 944.506,688.336 945.066,688.336 945.625,688.336 946.184,688.336 946.743,688.336 947.303,688.336 947.862,688.336 948.421,688.336 948.98,688.336 949.54,688.336 950.099,688.336 950.658,688.336 951.217,688.336 951.777,688.336 952.336,688.336 952.895,688.336 953.454,688.336 954.014,688.336 954.573,688.336 955.132,688.336 955.691,688.336 956.251,688.336 956.81,688.336 957.369,688.336 957.928,688.336 958.488,688.336 959.047,688.336 959.606,688.336 960.165,688.336 960.725,688.336 961.284,688.336 961.843,688.336 962.402,688.336 962.962,688.336 963.521,688.336 964.08,688.336 964.639,688.336 965.199,688.336 965.758,688.336 966.317,688.336 966.876,688.336 967.436,688.336 967.995,688.336 968.554,688.336 969.113,688.336 969.673,688.336 970.232,688.336 970.791,688.336 971.35,688.336 971.91,688.336 972.469,688.336 973.028,688.336 973.587,688.336 974.147,688.336 974.706,688.336 975.265,688.336 975.824,688.336 976.384,688.336 976.943,688.336 977.502,688.336 978.061,688.336 978.621,688.336 979.18,688.336 979.739,688.336 980.298,688.336 980.858,688.336 981.417,688.336 981.976,688.336 982.535,688.336 983.095,688.336 983.654,688.336 984.213,688.336 984.772,688.336 985.332,688.336 985.891,688.336 986.45,688.336 987.009,688.336 987.569,688.336 988.128,688.336 988.687,688.336 989.246,688.336 989.806,688.336 990.365,688.336 990.924,688.336 991.483,688.336 992.043,688.336 992.602,688.336 993.161,688.336 993.72,688.336 994.28,688.336 994.839,688.336 995.398,688.336 995.957,688.336 996.517,688.336 997.076,688.336 997.635,688.336 998.194,688.336 998.754,688.336 999.313,688.336 999.872,688.336 1000.43,688.336 1000.99,688.336 1001.55,688.336 1002.11,688.336 1002.67,688.336 1003.23,688.336 1003.79,688.336 1004.35,688.336 1004.91,688.336 1005.46,688.336 1006.02,688.336 1006.58,688.336 1007.14,688.336 1007.7,688.336 1008.26,688.336 1008.82,688.336 1009.38,688.336 1009.94,688.336 1010.5,688.336 1011.06,688.336 1011.62,688.336 1012.18,688.336 1012.73,688.336 1013.29,688.336 1013.85,688.336 1014.41,688.336 1014.97,688.336 1015.53,688.336 1016.09,688.336 1016.65,688.336 1017.21,688.336 1017.77,688.336 1018.33,688.336 1018.89,688.336 1019.45,688.336 1020.01,688.336 1020.56,688.336 1021.12,688.336 1021.68,688.336 1022.24,688.336 1022.8,688.336 1023.36,688.336 1023.92,688.336 1024.48,688.336 1025.04,688.336 1025.6,688.336 1026.16,688.336 1026.72,688.336 1027.28,688.336 1027.83,688.336 1028.39,688.336 1028.95,688.336 1029.51,688.336 1030.07,688.336 1030.63,688.336 1031.19,688.336 1031.75,688.336 1032.31,688.336 1032.87,688.336 1033.43,688.336 1033.99,688.336 1034.55,688.336 1035.1,688.336 1035.66,688.336 1036.22,688.336 1036.78,688.336 1037.34,688.336 1037.9,688.336 1038.46,688.336 1039.02,688.336 1039.58,688.336 1040.14,688.336 1040.7,688.336 1041.26,688.336 1041.82,688.336 1042.38,688.336 1042.93,688.336 1043.49,688.336 1044.05,688.336 1044.61,688.336 1045.17,688.336 1045.73,688.336 1046.29,688.336 1046.85,688.336 1047.41,688.336 1047.97,688.336 1048.53,688.336 1049.09,688.336 1049.65,688.336 1050.2,688.336 1050.76,688.336 1051.32,688.336 1051.88,688.336 1052.44,688.336 1053,688.336 1053.56,688.336 1054.12,688.336 1054.68,688.336 1055.24,688.336 1055.8,688.336 1056.36,688.336 1056.92,688.336 1057.48,688.336 1058.03,688.336 1058.59,688.336 1059.15,688.336 1059.71,688.336 1060.27,688.336 1060.83,688.336 1061.39,688.336 1061.95,688.336 1062.51,688.336 1063.07,688.336 1063.63,688.336 1064.19,688.336 1064.75,688.336 1065.3,688.336 1065.86,688.336 1066.42,688.336 1066.98,688.336 1067.54,688.336 1068.1,688.336 1068.66,688.336 1069.22,688.336 1069.78,688.336 1070.34,688.336 1070.9,688.336 1071.46,688.336 1072.02,688.336 1072.57,688.336 1073.13,688.336 1073.69,688.336 1074.25,688.336 1074.81,688.336 1075.37,688.336 1075.93,688.336 1076.49,688.336 1077.05,688.336 1077.61,688.336 1078.17,688.336 1078.73,688.336 1079.29,688.336 1079.85,688.336 1080.4,688.336 1080.96,688.336 1081.52,688.336 1082.08,688.336 1082.64,688.336 1083.2,688.336 1083.76,688.336 1084.32,688.336 1084.88,688.336 1085.44,688.336 1086,688.336 1086.56,688.336 1087.12,688.336 1087.67,688.336 1088.23,688.336 1088.79,688.336 1089.35,688.336 1089.91,688.336 1090.47,688.336 1091.03,688.336 1091.59,688.336 1092.15,688.336 1092.71,688.336 1093.27,688.336 1093.83,688.336 1094.39,688.336 1094.94,688.336 1095.5,688.336 1096.06,688.336 1096.62,688.336 1097.18,688.336 1097.74,688.336 1098.3,688.336 1098.86,688.336 1099.42,688.336 1099.98,688.336 1100.54,688.336 1101.1,688.336 1101.66,688.336 1102.22,688.336 1102.77,688.336 1103.33,688.336 1103.89,688.336 1104.45,688.336 1105.01,688.336 1105.57,688.336 1106.13,688.336 1106.69,688.336 1107.25,688.336 1107.81,688.336 1108.37,688.336 1108.93,688.336 1109.49,688.336 1110.04,688.336 1110.6,688.336 1111.16,688.336 1111.72,688.336 1112.28,688.336 1112.84,688.336 1113.4,688.336 1113.96,688.336 1114.52,688.336 1115.08,688.336 1115.64,688.336 1116.2,688.336 1116.76,688.336 1117.31,688.336 1117.87,688.336 1118.43,688.336 1118.99,688.336 1119.55,688.336 1120.11,688.336 1120.67,688.336 1121.23,688.336 1121.79,688.336 1122.35,688.336 1122.91,688.336 1123.47,688.336 1124.03,688.336 1124.59,688.336 1125.14,688.336 1125.7,688.336 1126.26,688.336 1126.82,688.336 1127.38,688.336 1127.94,688.336 1128.5,688.336 1129.06,688.336 1129.62,688.336 1130.18,688.336 1130.74,688.336 1131.3,688.336 1131.86,688.336 1132.41,688.336 1132.97,688.336 1133.53,688.336 1134.09,688.336 1134.65,688.336 1135.21,688.336 1135.77,688.336 1136.33,688.336 1136.89,688.336 1137.45,688.336 1138.01,688.336 1138.57,688.336 1139.13,688.336 1139.68,688.336 1140.24,688.336 1140.8,688.336 1141.36,688.336 1141.92,688.336 1142.48,688.336 1143.04,688.336 1143.6,688.336 1144.16,688.336 1144.72,688.336 1145.28,688.336 1145.84,688.336 1146.4,688.336 1146.96,688.336 1147.51,688.336 1148.07,688.336 1148.63,688.336 1149.19,688.336 1149.75,688.336 1150.31,688.336 1150.87,688.336 1151.43,688.336 1151.99,688.336 1152.55,688.336 1153.11,688.336 1153.67,688.336 1154.23,688.336 1154.78,688.336 1155.34,688.336 1155.9,688.336 1156.46,688.336 1157.02,688.336 1157.58,688.336 1158.14,688.336 1158.7,688.336 1159.26,688.336 1159.82,688.336 1160.38,688.336 1160.94,688.336 1161.5,688.336 1162.05,688.336 1162.61,688.336 1163.17,688.336 1163.73,688.336 1164.29,688.336 1164.85,688.336 1165.41,688.336 1165.97,688.336 1166.53,688.336 1167.09,688.336 1167.65,688.336 1168.21,688.336 1168.77,688.336 1169.33,688.336 1169.88,688.336 1170.44,688.336 1171,688.336 1171.56,688.336 1172.12,688.336 1172.68,688.336 1173.24,688.336 1173.8,688.336 1174.36,688.336 1174.92,688.336 1175.48,688.336 1176.04,688.336 1176.6,688.336 1177.15,688.336 1177.71,688.336 1178.27,688.336 1178.83,688.336 1179.39,688.336 1179.95,688.336 1180.51,688.336 1181.07,688.336 1181.63,688.336 1182.19,688.336 1182.75,688.336 1183.31,688.336 1183.87,688.336 1184.43,688.336 1184.98,688.336 1185.54,688.336 1186.1,688.336 1186.66,688.336 1187.22,688.336 1187.78,688.336 1188.34,688.336 1188.9,688.336 1189.46,688.336 1190.02,688.336 1190.58,688.336 1191.14,688.336 1191.7,688.336 1192.25,688.336 1192.81,688.336 1193.37,688.336 1193.93,688.336 1194.49,688.336 1195.05,688.336 1195.61,688.336 1196.17,688.336 1196.73,688.336 1197.29,688.336 1197.85,688.336 1198.41,688.336 1198.97,688.336 1199.52,688.336 1200.08,688.336 1200.64,688.336 1201.2,688.336 1201.76,688.336 1202.32,688.336 1202.88,688.336 1203.44,688.336 1204,688.336 1204.56,688.336 1205.12,688.336 1205.68,688.336 1206.24,688.336 1206.8,688.336 1207.35,688.336 1207.91,688.336 1208.47,688.336 1209.03,688.336 1209.59,688.336 1210.15,688.336 1210.71,688.336 1211.27,688.336 1211.83,688.336 1212.39,688.336 1212.95,688.336 1213.51,688.336 1214.07,688.336 1214.62,688.336 1215.18,688.336 1215.74,688.336 1216.3,688.336 1216.86,688.336 1217.42,688.336 1217.98,688.336 1218.54,688.336 1219.1,688.336 1219.66,688.336 1220.22,688.336 1220.78,688.336 1221.34,688.336 1221.89,688.336 1222.45,688.336 1223.01,688.336 1223.57,688.336 1224.13,688.336 1224.69,688.336 1225.25,688.336 1225.81,688.336 1226.37,688.336 1226.93,688.336 1227.49,688.336 1228.05,688.336 1228.61,688.336 1229.17,688.336 1229.72,688.336 1230.28,688.336 1230.84,688.336 1231.4,688.336 1231.96,688.336 1232.52,688.336 1233.08,688.336 1233.64,688.336 1234.2,688.336 1234.76,688.336 1235.32,688.336 1235.88,688.336 1236.44,688.336 1236.99,688.336 1237.55,688.336 1238.11,688.336 1238.67,688.336 1239.23,688.336 1239.79,688.336 1240.35,688.336 1240.91,688.336 1241.47,688.336 1242.03,688.336 1242.59,688.336 1243.15,688.336 1243.71,688.336 1244.26,688.336 1244.82,688.336 1245.38,688.336 1245.94,688.336 1246.5,688.336 1247.06,688.336 1247.62,688.336 1248.18,688.336 1248.74,688.336 1249.3,688.336 1249.86,688.336 1250.42,688.336 1250.98,688.336 1251.54,688.336 1252.09,688.336 1252.65,688.336 1253.21,688.336 1253.77,688.336 1254.33,688.336 1254.89,688.336 1255.45,688.336 1256.01,688.336 1256.57,688.336 1257.13,688.336 1257.69,688.336 1258.25,688.336 1258.81,688.336 1259.36,688.336 1259.92,688.336 1260.48,688.336 1261.04,688.336 1261.6,688.336 1262.16,688.336 1262.72,688.336 1263.28,688.336 1263.84,688.336 1264.4,688.336 1264.96,688.336 1265.52,688.336 1266.08,688.336 1266.63,688.336 1267.19,688.336 1267.75,688.336 1268.31,688.336 1268.87,688.336 1269.43,688.336 1269.99,688.336 1270.55,688.336 1271.11,688.336 1271.67,688.336 1272.23,688.336 1272.79,688.336 1273.35,688.336 1273.91,688.336 1274.46,688.336 1275.02,688.336 1275.58,688.336 1276.14,688.336 1276.7,688.336 1277.26,688.336 1277.82,688.336 1278.38,688.336 1278.94,688.336 1279.5,688.336 1280.06,688.336 1280.62,688.336 1281.18,688.336 1281.73,688.336 1282.29,688.336 1282.85,688.336 1283.41,688.336 1283.97,688.336 1284.53,688.336 1285.09,688.336 1285.65,688.336 1286.21,688.336 1286.77,688.336 1287.33,688.336 1287.89,688.336 1288.45,688.336 1289,688.336 1289.56,688.336 1290.12,688.336 1290.68,688.336 1291.24,688.336 1291.8,688.336 1292.36,688.336 1292.92,688.336 1293.48,688.336 1294.04,688.336 1294.6,688.336 1295.16,688.336 1295.72,688.336 1296.28,688.336 1296.83,688.336 1297.39,688.336 1297.95,688.336 1298.51,688.336 1299.07,688.336 1299.63,688.336 1300.19,688.336 1300.75,688.336 1301.31,688.336 1301.87,688.336 1302.43,688.336 1302.99,688.336 1303.55,688.336 1304.1,688.336 1304.66,688.336 1305.22,688.336 1305.78,688.336 1306.34,688.336 1306.9,688.336 1307.46,688.336 1308.02,688.336 1308.58,688.336 1309.14,688.336 1309.7,688.336 1310.26,688.336 1310.82,688.336 1311.38,688.336 1311.93,688.336 1312.49,688.336 1313.05,688.336 1313.61,688.336 1314.17,688.336 1314.73,688.336 1315.29,688.336 1315.85,688.336 1316.41,688.336 1316.97,688.336 1317.53,688.336 1318.09,688.336 1318.65,688.336 1319.2,688.336 1319.76,688.336 1320.32,688.336 1320.88,688.336 1321.44,688.336 1322,688.336 1322.56,688.336 1323.12,688.336 1323.68,688.336 1324.24,688.336 1324.8,688.336 1325.36,688.336 1325.92,688.336 1326.47,688.336 1327.03,688.336 1327.59,688.336 1328.15,688.336 1328.71,688.336 1329.27,688.336 1329.83,688.336 1330.39,688.336 1330.95,688.336 1331.51,688.336 1332.07,688.336 1332.63,688.336 1333.19,688.336 1333.75,688.336 1334.3,688.336 1334.86,688.336 1335.42,688.336 1335.98,688.336 1336.54,688.336 1337.1,688.336 1337.66,688.336 1338.22,688.336 1338.78,688.336 1339.34,688.336 1339.9,688.336 1340.46,688.336 1341.02,688.336 1341.57,688.336 1342.13,688.336 1342.69,688.336 1343.25,688.336 1343.81,688.336 1344.37,688.336 1344.93,688.336 1345.49,688.336 1346.05,688.336 1346.61,688.336 1347.17,688.336 1347.73,688.336 1348.29,688.336 1348.84,688.336 1349.4,688.336 1349.96,688.336 1350.52,688.336 1351.08,688.336 1351.64,688.336 1352.2,688.336 1352.76,688.336 1353.32,688.336 1353.88,688.336 1354.44,688.336 1355,688.336 1355.56,688.336 1356.12,688.336 1356.67,688.336 1357.23,688.336 1357.79,688.336 1358.35,688.336 1358.91,688.336 1359.47,688.336 1360.03,688.336 1360.59,688.336 1361.15,688.336 1361.71,688.336 1362.27,688.336 1362.83,688.336 1363.39,688.336 1363.94,688.336 1364.5,688.336 1365.06,688.336 1365.62,688.336 1366.18,688.336 1366.74,688.336 1367.3,688.336 1367.86,688.336 1368.42,688.336 1368.98,688.336 1369.54,688.336 1370.1,688.336 1370.66,688.336 1371.21,688.336 1371.77,688.336 1372.33,688.336 1372.89,688.336 1373.45,688.336 1374.01,688.336 1374.57,688.336 1375.13,688.336 1375.69,688.336 1376.25,688.336 1376.81,688.336 1377.37,688.336 1377.93,688.336 1378.49,688.336 1379.04,688.336 1379.6,688.336 1380.16,688.336 1380.72,688.336 1381.28,688.336 1381.84,688.336 1382.4,688.336 1382.96,688.336 1383.52,688.336 1384.08,688.336 1384.64,688.336 1385.2,688.336 1385.76,688.336 1386.31,688.336 1386.87,688.336 1387.43,688.336 1387.99,688.336 1388.55,688.336 1389.11,688.336 1389.67,688.336 1390.23,688.336 1390.79,688.336 1391.35,688.336 1391.91,688.336 1392.47,688.336 1393.03,688.336 1393.58,688.336 1394.14,688.336 1394.7,688.336 1395.26,688.336 1395.82,688.336 1396.38,688.336 1396.94,688.336 1397.5,688.336 1398.06,688.336 1398.62,688.336 1399.18,688.336 1399.74,688.336 1400.3,688.336 1400.86,688.336 1401.41,688.336 1401.97,688.336 1402.53,688.336 1403.09,688.336 1403.65,688.336 1404.21,688.336 1404.77,688.336 1405.33,688.336 1405.89,688.336 1406.45,688.336 1407.01,688.336 1407.57,688.336 1408.13,688.336 1408.68,688.336 1409.24,688.336 1409.8,688.336 1410.36,688.336 1410.92,688.336 1411.48,688.336 1412.04,688.336 1412.6,688.336 1413.16,688.336 1413.72,688.336 1414.28,688.336 1414.84,688.336 1415.4,688.336 1415.95,688.336 1416.51,688.336 1417.07,688.336 1417.63,688.336 1418.19,688.336 1418.75,688.336 1419.31,688.336 1419.87,688.336 1420.43,688.336 1420.99,688.336 1421.55,688.336 1422.11,688.336 1422.67,688.336 1423.23,688.336 1423.78,688.336 1424.34,688.336 1424.9,688.336 1425.46,688.336 1426.02,688.336 1426.58,688.336 1427.14,688.336 1427.7,688.336 1428.26,688.336 1428.82,688.336 1429.38,688.336 1429.94,688.336 1430.5,688.336 1431.05,688.336 1431.61,688.336 1432.17,688.336 1432.73,688.336 1433.29,688.336 1433.85,688.336 1434.41,688.336 1434.97,688.336 1435.53,688.336 1436.09,688.336 1436.65,688.336 1437.21,688.336 1437.77,688.336 1438.33,688.336 1438.88,688.336 1439.44,688.336 1440,688.336 1440.56,688.336 1441.12,688.336 1441.68,688.336 1442.24,688.336 1442.8,688.336 1443.36,688.336 1443.92,688.336 1444.48,688.336 1445.04,688.336 1445.6,688.336 1446.15,688.336 1446.71,688.336 1447.27,688.336 1447.83,688.336 1448.39,688.336 1448.95,688.336 1449.51,688.336 1450.07,688.336 1450.63,688.336 1451.19,688.336 1451.75,688.336 1452.31,688.336 1452.87,688.336 1453.42,688.336 1453.98,688.336 1454.54,688.336 1455.1,688.336 1455.66,688.336 1456.22,688.336 1456.78,688.336 1457.34,688.336 1457.9,688.336 1458.46,688.336 1459.02,688.336 1459.58,688.336 1460.14,688.336 1460.7,688.336 1461.25,688.336 1461.81,688.336 1462.37,688.336 1462.93,688.336 1463.49,688.336 1464.05,688.336 1464.61,688.336 1465.17,688.336 1465.73,688.336 1466.29,688.336 1466.85,688.336 1467.41,688.336 1467.97,688.336 1468.52,688.336 1469.08,688.336 1469.64,688.336 1470.2,688.336 1470.76,688.336 1471.32,688.336 1471.88,688.336 1472.44,688.336 1473,688.336 1473.56,688.336 1474.12,688.336 1474.68,688.336 1475.24,688.336 1475.79,688.336 1476.35,688.336 1476.91,688.336 1477.47,688.336 1478.03,688.336 1478.59,688.336 1479.15,688.336 1479.71,688.336 1480.27,688.336 1480.83,688.336 1481.39,688.336 1481.95,688.336 1482.51,688.336 1483.07,688.336 1483.62,688.336 1484.18,688.336 1484.74,688.336 1485.3,688.336 1485.86,688.336 1486.42,688.336 1486.98,688.336 1487.54,688.336 1488.1,688.336 1488.66,688.336 1489.22,688.336 1489.78,688.336 1490.34,688.336 1490.89,688.336 1491.45,688.336 1492.01,688.336 1492.57,688.336 1493.13,688.336 1493.69,688.336 1494.25,688.336 1494.81,688.336 1495.37,688.336 1495.93,688.336 1496.49,688.336 1497.05,688.336 1497.61,688.336 1498.16,688.336 1498.72,688.336 1499.28,688.336 1499.84,688.336 1500.4,688.336 1500.96,688.336 1501.52,688.336 1502.08,688.336 1502.64,688.336 1503.2,688.336 1503.76,688.336 1504.32,688.336 1504.88,688.336 1505.44,688.336 1505.99,688.336 1506.55,688.336 1507.11,688.336 1507.67,688.336 1508.23,688.336 1508.79,688.336 1509.35,688.336 1509.91,688.336 1510.47,688.336 1511.03,688.336 1511.59,688.336 1512.15,688.336 1512.71,688.336 1513.26,688.336 1513.82,688.336 1514.38,688.336 1514.94,688.336 1515.5,688.336 1516.06,688.336 1516.62,688.336 1517.18,688.336 1517.74,688.336 1518.3,688.336 1518.86,688.336 1519.42,688.336 1519.98,688.336 1520.53,688.336 1521.09,688.336 1521.65,688.336 1522.21,688.336 1522.77,688.336 1523.33,688.336 1523.89,688.336 1524.45,688.336 1525.01,688.336 1525.57,688.336 1526.13,688.336 1526.69,688.336 1527.25,688.336 1527.81,688.336 1528.36,688.336 1528.92,688.336 1529.48,688.336 1530.04,688.336 1530.6,688.336 1531.16,688.336 1531.72,688.336 1532.28,688.336 1532.84,688.336 1533.4,688.336 1533.96,688.336 1534.52,688.336 1535.08,688.336 1535.63,688.336 1536.19,688.336 1536.75,688.336 1537.31,688.336 1537.87,688.336 1538.43,688.336 1538.99,688.336 1539.55,688.336 1540.11,688.336 1540.67,688.336 1541.23,688.336 1541.79,688.336 1542.35,688.336 1542.9,688.336 1543.46,688.336 1544.02,688.336 1544.58,688.336 1545.14,688.336 1545.7,688.336 1546.26,688.336 1546.82,688.336 1547.38,688.336 1547.94,688.336 1548.5,688.336 1549.06,688.336 1549.62,688.336 1550.18,688.336 1550.73,688.336 1551.29,688.336 1551.85,688.336 1552.41,688.336 1552.97,688.336 1553.53,688.336 1554.09,688.336 1554.65,688.336 1555.21,688.336 1555.77,688.336 1556.33,688.336 1556.89,688.336 1557.45,688.336 1558,688.336 1558.56,688.336 1559.12,688.336 1559.68,688.336 1560.24,688.336 1560.8,688.336 1561.36,688.336 1561.92,688.336 1562.48,688.336 1563.04,688.336 1563.6,688.336 1564.16,688.336 1564.72,688.336 1565.28,688.336 1565.83,688.336 1566.39,688.336 1566.95,688.336 1567.51,688.336 1568.07,688.336 1568.63,688.336 1569.19,688.336 1569.75,688.336 1570.31,688.336 1570.87,688.336 1571.43,688.336 1571.99,688.336 1572.55,688.336 1573.1,688.336 1573.66,688.336 1574.22,688.336 1574.78,688.336 1575.34,688.336 1575.9,688.336 1576.46,688.336 1577.02,688.336 1577.58,688.336 1578.14,688.336 1578.7,688.336 1579.26,688.336 1579.82,688.336 1580.37,688.336 1580.93,688.336 1581.49,688.336 1582.05,688.336 1582.61,688.336 1583.17,688.336 1583.73,688.336 1584.29,688.336 1584.85,688.336 1585.41,688.336 1585.97,688.336 1586.53,688.336 1587.09,688.336 1587.65,688.336 1588.2,688.336 1588.76,688.336 1589.32,688.336 1589.88,688.336 1590.44,688.336 1591,688.336 1591.56,688.336 1592.12,688.336 1592.68,688.336 1593.24,688.336 1593.8,688.336 1594.36,688.336 1594.92,688.336 1595.47,688.336 1596.03,688.336 1596.59,688.336 1597.15,688.336 1597.71,688.336 1598.27,688.336 1598.83,688.336 1599.39,688.336 1599.95,688.336 1600.51,688.336 1601.07,688.336 1601.63,688.336 1602.19,688.336 1602.74,688.336 1603.3,688.336 1603.86,688.336 1604.42,688.336 1604.98,688.336 1605.54,688.336 1606.1,688.336 1606.66,688.336 1607.22,688.336 1607.78,688.336 1608.34,688.336 1608.9,688.336 1609.46,688.336 1610.02,688.336 1610.57,688.336 1611.13,688.336 1611.69,688.336 1612.25,688.336 1612.81,688.336 1613.37,688.336 1613.93,688.336 1614.49,688.336 1615.05,688.336 1615.61,688.336 1616.17,688.336 1616.73,688.336 1617.29,688.336 1617.84,688.336 1618.4,688.336 1618.96,688.336 1619.52,688.336 1620.08,688.336 1620.64,688.336 1621.2,688.336 1621.76,688.336 1622.32,688.336 1622.88,688.336 1623.44,688.336 1624,688.336 1624.56,688.336 1625.11,688.336 1625.67,688.336 1626.23,688.336 1626.79,688.336 1627.35,688.336 1627.91,688.336 1628.47,688.336 1629.03,688.336 1629.59,688.336 1630.15,688.336 1630.71,688.336 1631.27,688.336 1631.83,688.336 1632.39,688.336 1632.94,688.336 1633.5,688.336 1634.06,688.336 1634.62,688.336 1635.18,688.336 1635.74,688.336 1636.3,688.336 1636.86,688.336 1637.42,688.336 1637.98,688.336 1638.54,688.336 1639.1,688.336 1639.66,688.336 1640.21,688.336 1640.77,688.336 1641.33,688.336 1641.89,688.336 1642.45,688.336 1643.01,688.336 1643.57,688.336 1644.13,688.336 1644.69,688.336 1645.25,688.336 1645.81,688.336 1646.37,688.336 1646.93,688.336 1647.48,688.336 1648.04,688.336 1648.6,688.336 1649.16,688.336 1649.72,688.336 1650.28,688.336 1650.84,688.336 1651.4,688.336 1651.96,688.336 1652.52,688.336 1653.08,688.336 1653.64,688.336 1654.2,688.336 1654.76,688.336 1655.31,688.336 1655.87,688.336 1656.43,688.336 1656.99,688.336 1657.55,688.336 1658.11,688.336 1658.67,688.336 1659.23,688.336 1659.79,688.336 1660.35,688.336 1660.91,688.336 1661.47,688.336 1662.03,688.336 1662.58,688.336 1663.14,688.336 1663.7,688.336 1664.26,688.336 1664.82,688.336 1665.38,688.336 1665.94,688.336 1666.5,688.336 1667.06,688.336 1667.62,688.336 1668.18,688.336 1668.74,688.336 1669.3,688.336 1669.85,688.336 1670.41,688.336 1670.97,688.336 1671.53,688.336 1672.09,688.336 1672.65,688.336 1673.21,688.336 1673.77,688.336 1674.33,688.336 1674.89,688.336 1675.45,688.336 1676.01,688.336 1676.57,688.336 1677.13,688.336 1677.68,688.336 1678.24,688.336 1678.8,688.336 1679.36,688.336 1679.92,688.336 1680.48,688.336 1681.04,688.336 1681.6,688.336 1682.16,688.336 1682.72,688.336 1683.28,688.336 1683.84,688.336 1684.4,688.336 1684.95,688.336 1685.51,688.336 1686.07,688.336 1686.63,688.336 1687.19,688.336 1687.75,688.336 1688.31,688.336 1688.87,688.336 1689.43,688.336 1689.99,688.336 1690.55,688.336 1691.11,688.336 1691.67,688.336 1692.23,688.336 1692.78,688.336 1693.34,688.336 1693.9,688.336 1694.46,688.336 1695.02,688.336 1695.58,688.336 1696.14,688.336 1696.7,688.336 1697.26,688.336 1697.82,688.336 1698.38,688.336 1698.94,688.336 1699.5,688.336 1700.05,688.336 1700.61,688.336 1701.17,688.336 1701.73,688.336 1702.29,688.336 1702.85,688.336 1703.41,688.336 1703.97,688.336 1704.53,688.336 1705.09,688.336 1705.65,688.336 1706.21,688.336 1706.77,688.336 1707.32,688.336 1707.88,688.336 1708.44,688.336 1709,688.336 1709.56,688.336 1710.12,688.336 1710.68,688.336 1711.24,688.336 1711.8,688.336 1712.36,688.336 1712.92,688.336 1713.48,688.336 1714.04,688.336 1714.6,688.336 1715.15,688.336 1715.71,688.336 1716.27,688.336 1716.83,688.336 1717.39,688.336 1717.95,688.336 1718.51,688.336 1719.07,688.336 1719.63,688.336 1720.19,688.336 1720.75,688.336 1721.31,688.336 1721.87,688.336 1722.42,688.336 1722.98,688.336 1723.54,688.336 1724.1,688.336 1724.66,688.336 1725.22,688.336 1725.78,688.336 1726.34,688.336 1726.9,688.336 1727.46,688.336 1728.02,688.336 1728.58,688.336 1729.14,688.336 1729.69,688.336 1730.25,688.336 1730.81,688.336 1731.37,688.336 1731.93,688.336 1732.49,688.336 1733.05,688.336 1733.61,688.336 1734.17,688.336 1734.73,688.336 1735.29,688.336 1735.85,688.336 1736.41,688.336 1736.97,688.336 1737.52,688.336 1738.08,688.336 1738.64,688.336 1739.2,688.336 1739.76,688.336 1740.32,688.336 1740.88,688.336 1741.44,688.336 1742,688.336 1742.56,688.336 1743.12,688.336 1743.68,688.336 1744.24,688.336 1744.79,688.336 1745.35,688.336 1745.91,688.336 1746.47,688.336 1747.03,688.336 1747.59,688.336 1748.15,688.336 1748.71,688.336 1749.27,688.336 1749.83,688.336 1750.39,688.336 1750.95,688.336 1751.51,688.336 1752.06,688.336 1752.62,688.336 1753.18,688.336 1753.74,688.336 1754.3,688.336 1754.86,688.336 1755.42,688.336 1755.98,688.336 1756.54,688.336 1757.1,688.336 1757.66,688.336 1758.22,688.336 1758.78,688.336 1759.34,688.336 1759.89,688.336 1760.45,688.336 1761.01,688.336 1761.57,688.336 1762.13,688.336 1762.69,688.336 1763.25,688.336 1763.81,688.336 1764.37,688.336 1764.93,688.336 1765.49,688.336 1766.05,688.336 1766.61,688.336 1767.16,688.336 1767.72,688.336 1768.28,688.336 1768.84,688.336 1769.4,688.336 1769.96,688.336 1770.52,688.336 1771.08,688.336 1771.64,688.336 1772.2,688.336 1772.76,688.336 1773.32,688.336 1773.88,688.336 1774.43,688.336 1774.99,688.336 1775.55,688.336 1776.11,688.336 1776.67,688.336 1777.23,688.336 1777.79,688.336 1778.35,688.336 1778.91,688.336 1779.47,688.336 1780.03,688.336 1780.59,688.336 1781.15,688.336 1781.71,688.336 1782.26,688.336 1782.82,688.336 1783.38,688.336 1783.94,688.336 1784.5,688.336 1785.06,688.336 1785.62,688.336 1786.18,688.336 1786.74,688.336 1787.3,688.336 1787.86,688.336 1788.42,688.336 1788.98,688.336 1789.53,688.336 1790.09,688.336 1790.65,688.336 1791.21,688.336 1791.77,688.336 1792.33,688.336 1792.89,688.336 1793.45,688.336 1794.01,688.336 1794.57,688.336 1795.13,688.336 1795.69,688.336 1796.25,688.336 1796.8,688.336 1797.36,688.336 1797.92,688.336 1798.48,688.336 1799.04,688.336 1799.6,688.336 1800.16,688.336 1800.72,688.336 1801.28,688.336 1801.84,688.336 1802.4,688.336 1802.96,688.336 1803.52,688.336 1804.08,688.336 1804.63,688.336 1805.19,688.336 1805.75,688.336 1806.31,688.336 1806.87,688.336 1807.43,688.336 1807.99,688.336 1808.55,688.336 1809.11,688.336 1809.67,688.336 1810.23,688.336 1810.79,688.336 1811.35,688.336 1811.9,688.336 1812.46,688.336 1813.02,688.336 1813.58,688.336 1814.14,688.336 1814.7,688.336 1815.26,688.336 1815.82,688.336 1816.38,688.336 1816.94,688.336 1817.5,688.336 1818.06,688.336 1818.62,688.336 1819.18,688.336 1819.73,688.336 1820.29,688.336 1820.85,688.336 1821.41,688.336 1821.97,688.336 1822.53,688.336 1823.09,688.336 1823.65,688.336 1824.21,688.336 1824.77,688.336 1825.33,688.336 1825.89,688.336 1826.45,688.336 1827,688.336 1827.56,688.336 1828.12,688.336 1828.68,688.336 1829.24,688.336 1829.8,688.336 1830.36,688.336 1830.92,688.336 1831.48,688.336 1832.04,688.336 1832.6,688.336 1833.16,688.336 1833.72,688.336 1834.27,688.336 1834.83,688.336 1835.39,688.336 1835.95,688.336 1836.51,688.336 1837.07,688.336 1837.63,688.336 1838.19,688.336 \"/>\n<path clip-path=\"url(#clip523)\" d=\"M720.247 684.731 L720.806 684.731 L721.365 684.731 L721.924 684.731 L722.484 684.731 L723.043 684.731 L723.602 684.731 L724.161 684.731 L724.721 684.731 L725.28 684.731 L725.839 684.731 L726.398 684.731 L726.958 684.731 L727.517 684.731 L728.076 684.731 L728.635 684.731 L729.195 684.731 L729.754 684.731 L730.313 684.731 L730.872 684.731 L731.432 684.731 L731.991 684.731 L732.55 684.731 L733.109 684.731 L733.669 684.731 L734.228 684.731 L734.787 684.731 L735.346 684.731 L735.906 684.731 L736.465 684.731 L737.024 684.731 L737.583 684.731 L738.143 684.731 L738.702 684.731 L739.261 684.731 L739.82 684.731 L740.38 684.731 L740.939 684.731 L741.498 684.731 L742.057 684.731 L742.617 684.731 L743.176 684.731 L743.735 684.731 L744.294 684.731 L744.854 684.731 L745.413 684.731 L745.972 684.731 L746.531 684.731 L747.091 684.731 L747.65 684.731 L748.209 684.731 L748.768 684.731 L749.328 684.731 L749.887 684.731 L750.446 684.731 L751.005 684.731 L751.565 684.731 L752.124 684.731 L752.683 684.731 L753.242 684.731 L753.802 684.731 L754.361 684.731 L754.92 684.731 L755.479 684.731 L756.039 684.731 L756.598 684.731 L757.157 684.731 L757.716 684.731 L758.276 684.731 L758.835 684.731 L759.394 684.731 L759.953 684.731 L760.513 684.731 L761.072 684.731 L761.631 684.731 L762.19 684.731 L762.75 684.731 L763.309 684.731 L763.868 684.731 L764.427 684.731 L764.987 684.731 L765.546 684.731 L766.105 684.731 L766.664 684.731 L767.224 684.731 L767.783 684.731 L768.342 684.731 L768.901 684.731 L769.461 684.731 L770.02 684.731 L770.579 684.731 L771.138 684.731 L771.698 684.731 L772.257 684.731 L772.816 684.731 L773.375 684.731 L773.935 684.731 L774.494 684.731 L775.053 684.731 L775.612 684.731 L776.172 684.731 L776.731 684.731 L777.29 684.731 L777.849 684.731 L778.409 684.731 L778.968 684.731 L779.527 684.731 L780.086 684.731 L780.646 684.731 L781.205 684.731 L781.764 684.731 L782.323 684.731 L782.883 684.731 L783.442 684.731 L784.001 684.731 L784.56 684.731 L785.12 684.731 L785.679 684.731 L786.238 684.731 L786.797 684.731 L787.357 684.731 L787.916 684.731 L788.475 684.731 L789.034 684.731 L789.594 684.731 L790.153 684.731 L790.712 684.731 L791.271 684.731 L791.831 684.731 L792.39 684.731 L792.949 684.731 L793.508 684.731 L794.068 684.731 L794.627 684.731 L795.186 684.731 L795.745 684.731 L796.305 684.731 L796.864 684.731 L797.423 684.731 L797.982 684.731 L798.542 684.731 L799.101 684.731 L799.66 684.731 L800.219 684.731 L800.779 684.731 L801.338 684.731 L801.897 684.731 L802.456 684.731 L803.016 684.731 L803.575 684.731 L804.134 684.731 L804.693 684.731 L805.253 684.731 L805.812 684.731 L806.371 684.731 L806.931 684.731 L807.49 684.731 L808.049 684.731 L808.608 684.731 L809.168 684.731 L809.727 684.731 L810.286 684.731 L810.845 684.731 L811.405 684.731 L811.964 684.731 L812.523 684.731 L813.082 684.731 L813.642 684.731 L814.201 684.731 L814.76 684.731 L815.319 684.731 L815.879 684.731 L816.438 684.731 L816.997 684.731 L817.556 684.731 L818.116 684.731 L818.675 684.731 L819.234 684.731 L819.793 684.731 L820.353 684.731 L820.912 684.731 L821.471 684.731 L822.03 684.731 L822.59 684.731 L823.149 684.731 L823.708 684.731 L824.267 684.731 L824.827 684.731 L825.386 684.731 L825.945 684.731 L826.504 684.731 L827.064 684.731 L827.623 684.731 L828.182 684.731 L828.741 684.731 L829.301 684.731 L829.86 684.731 L830.419 684.731 L830.978 684.731 L831.538 684.731 L832.097 684.731 L832.656 684.731 L833.215 684.731 L833.775 684.731 L834.334 684.731 L834.893 684.731 L835.452 684.731 L836.012 684.731 L836.571 684.731 L837.13 684.731 L837.689 684.731 L838.249 684.731 L838.808 684.731 L839.367 684.731 L839.926 684.731 L840.486 684.731 L841.045 684.731 L841.604 684.731 L842.163 684.731 L842.723 684.731 L843.282 684.731 L843.841 684.731 L844.4 684.731 L844.96 684.731 L845.519 684.731 L846.078 684.731 L846.637 684.731 L847.197 684.731 L847.756 684.731 L848.315 684.731 L848.874 684.731 L849.434 684.731 L849.993 684.731 L850.552 684.731 L851.111 684.731 L851.671 684.731 L852.23 684.731 L852.789 684.731 L853.348 684.731 L853.908 684.731 L854.467 684.731 L855.026 684.731 L855.585 684.731 L856.145 684.731 L856.704 684.731 L857.263 684.731 L857.822 684.731 L858.382 684.731 L858.941 684.731 L859.5 684.731 L860.059 684.731 L860.619 684.731 L861.178 684.731 L861.737 684.731 L862.296 684.731 L862.856 684.731 L863.415 684.731 L863.974 684.731 L864.533 684.731 L865.093 684.731 L865.652 684.731 L866.211 684.731 L866.77 684.731 L867.33 684.731 L867.889 684.731 L868.448 684.731 L869.007 684.731 L869.567 684.731 L870.126 684.731 L870.685 684.731 L871.244 684.731 L871.804 684.731 L872.363 684.731 L872.922 684.731 L873.481 684.731 L874.041 684.731 L874.6 684.731 L875.159 684.731 L875.718 684.731 L876.278 684.731 L876.837 684.731 L877.396 684.731 L877.955 684.731 L878.515 684.731 L879.074 684.731 L879.633 684.731 L880.192 684.731 L880.752 684.731 L881.311 684.731 L881.87 684.731 L882.429 684.731 L882.989 684.731 L883.548 684.731 L884.107 684.731 L884.666 684.731 L885.226 684.731 L885.785 684.731 L886.344 684.731 L886.903 684.731 L887.463 684.731 L888.022 684.731 L888.581 684.731 L889.14 684.731 L889.7 684.731 L890.259 684.731 L890.818 684.731 L891.377 684.731 L891.937 684.731 L892.496 684.731 L893.055 684.731 L893.614 684.731 L894.174 684.731 L894.733 684.731 L895.292 684.731 L895.851 684.731 L896.411 684.731 L896.97 684.731 L897.529 684.731 L898.088 684.731 L898.648 684.731 L899.207 684.731 L899.766 684.731 L900.325 684.731 L900.885 684.731 L901.444 684.731 L902.003 684.731 L902.562 684.731 L903.122 684.731 L903.681 684.731 L904.24 684.731 L904.799 684.731 L905.359 684.731 L905.918 684.731 L906.477 684.731 L907.036 684.731 L907.596 684.731 L908.155 684.731 L908.714 684.731 L909.273 684.731 L909.833 684.731 L910.392 684.731 L910.951 684.731 L911.51 684.731 L912.07 684.731 L912.629 684.731 L913.188 684.731 L913.747 684.731 L914.307 684.731 L914.866 684.731 L915.425 684.731 L915.984 684.731 L916.544 684.731 L917.103 684.731 L917.662 684.731 L918.221 684.731 L918.781 684.731 L919.34 684.731 L919.899 684.731 L920.458 684.731 L921.018 684.731 L921.577 684.731 L922.136 684.731 L922.695 684.731 L923.255 684.731 L923.814 684.731 L924.373 684.731 L924.932 684.731 L925.492 684.731 L926.051 684.731 L926.61 684.731 L927.169 684.731 L927.729 684.731 L928.288 684.731 L928.847 684.731 L929.406 684.731 L929.966 684.731 L930.525 684.731 L931.084 684.731 L931.644 684.731 L932.203 684.731 L932.762 684.731 L933.321 684.731 L933.881 684.731 L934.44 684.731 L934.999 684.731 L935.558 684.731 L936.118 684.731 L936.677 684.731 L937.236 684.731 L937.795 684.731 L938.355 684.731 L938.914 684.731 L939.473 684.731 L940.032 684.731 L940.592 684.731 L941.151 684.731 L941.71 684.731 L942.269 684.731 L942.829 684.731 L943.388 684.731 L943.947 684.731 L944.506 684.731 L945.066 684.731 L945.625 684.731 L946.184 684.731 L946.743 684.731 L947.303 684.731 L947.862 684.731 L948.421 684.731 L948.98 684.731 L949.54 684.731 L950.099 684.731 L950.658 684.731 L951.217 684.731 L951.777 684.731 L952.336 684.731 L952.895 684.731 L953.454 684.731 L954.014 684.731 L954.573 684.731 L955.132 684.731 L955.691 684.731 L956.251 684.731 L956.81 684.731 L957.369 684.731 L957.928 684.731 L958.488 684.731 L959.047 684.731 L959.606 684.731 L960.165 684.731 L960.725 684.731 L961.284 684.731 L961.843 684.731 L962.402 684.731 L962.962 684.731 L963.521 684.731 L964.08 684.731 L964.639 684.731 L965.199 684.731 L965.758 684.731 L966.317 684.731 L966.876 684.731 L967.436 684.731 L967.995 684.731 L968.554 684.731 L969.113 684.731 L969.673 684.731 L970.232 684.731 L970.791 684.731 L971.35 684.731 L971.91 684.731 L972.469 684.731 L973.028 684.731 L973.587 684.731 L974.147 684.731 L974.706 684.731 L975.265 684.731 L975.824 684.731 L976.384 684.731 L976.943 684.731 L977.502 684.731 L978.061 684.731 L978.621 684.731 L979.18 684.731 L979.739 684.731 L980.298 684.731 L980.858 684.731 L981.417 684.731 L981.976 684.731 L982.535 684.731 L983.095 684.731 L983.654 684.731 L984.213 684.731 L984.772 684.731 L985.332 684.731 L985.891 684.731 L986.45 684.731 L987.009 684.731 L987.569 684.731 L988.128 684.731 L988.687 684.731 L989.246 684.731 L989.806 684.731 L990.365 684.731 L990.924 684.731 L991.483 684.731 L992.043 684.731 L992.602 684.731 L993.161 684.731 L993.72 684.731 L994.28 684.731 L994.839 684.731 L995.398 684.731 L995.957 684.731 L996.517 684.731 L997.076 684.731 L997.635 684.731 L998.194 684.731 L998.754 684.731 L999.313 684.731 L999.872 684.731 L1000.43 684.731 L1000.99 684.731 L1001.55 684.731 L1002.11 684.731 L1002.67 684.731 L1003.23 684.731 L1003.79 684.731 L1004.35 684.731 L1004.91 684.731 L1005.46 684.731 L1006.02 684.731 L1006.58 684.731 L1007.14 684.731 L1007.7 684.731 L1008.26 684.731 L1008.82 684.731 L1009.38 684.731 L1009.94 684.731 L1010.5 684.731 L1011.06 684.731 L1011.62 684.731 L1012.18 684.731 L1012.73 684.731 L1013.29 684.731 L1013.85 684.731 L1014.41 684.731 L1014.97 684.731 L1015.53 684.731 L1016.09 684.731 L1016.65 684.731 L1017.21 684.731 L1017.77 684.731 L1018.33 684.731 L1018.89 684.731 L1019.45 684.731 L1020.01 684.731 L1020.56 684.731 L1021.12 684.731 L1021.68 684.731 L1022.24 684.731 L1022.8 684.731 L1023.36 684.731 L1023.92 684.731 L1024.48 684.731 L1025.04 684.731 L1025.6 684.731 L1026.16 684.731 L1026.72 684.731 L1027.28 684.731 L1027.83 684.731 L1028.39 684.731 L1028.95 684.731 L1029.51 684.731 L1030.07 684.731 L1030.63 684.731 L1031.19 684.731 L1031.75 684.731 L1032.31 684.731 L1032.87 684.731 L1033.43 684.731 L1033.99 684.731 L1034.55 684.731 L1035.1 684.731 L1035.66 684.731 L1036.22 684.731 L1036.78 684.731 L1037.34 684.731 L1037.9 684.731 L1038.46 684.731 L1039.02 684.731 L1039.58 684.731 L1040.14 684.731 L1040.7 684.731 L1041.26 684.731 L1041.82 684.731 L1042.38 684.731 L1042.93 684.731 L1043.49 684.731 L1044.05 684.731 L1044.61 684.731 L1045.17 684.731 L1045.73 684.731 L1046.29 684.731 L1046.85 684.731 L1047.41 684.731 L1047.97 684.731 L1048.53 684.731 L1049.09 684.731 L1049.65 684.731 L1050.2 684.731 L1050.76 684.731 L1051.32 684.731 L1051.88 684.731 L1052.44 684.731 L1053 684.731 L1053.56 684.731 L1054.12 684.731 L1054.68 684.731 L1055.24 684.731 L1055.8 684.731 L1056.36 684.731 L1056.92 684.731 L1057.48 684.731 L1058.03 684.731 L1058.59 684.731 L1059.15 684.731 L1059.71 684.731 L1060.27 684.731 L1060.83 684.731 L1061.39 684.731 L1061.95 684.731 L1062.51 684.731 L1063.07 684.731 L1063.63 684.731 L1064.19 684.731 L1064.75 684.731 L1065.3 684.731 L1065.86 684.731 L1066.42 684.731 L1066.98 684.731 L1067.54 684.731 L1068.1 684.731 L1068.66 684.731 L1069.22 684.731 L1069.78 684.731 L1070.34 684.731 L1070.9 684.731 L1071.46 684.731 L1072.02 684.731 L1072.57 684.731 L1073.13 684.731 L1073.69 684.731 L1074.25 684.731 L1074.81 684.731 L1075.37 684.731 L1075.93 684.731 L1076.49 684.731 L1077.05 684.731 L1077.61 684.731 L1078.17 684.731 L1078.73 684.731 L1079.29 684.731 L1079.85 684.731 L1080.4 684.731 L1080.96 684.731 L1081.52 684.731 L1082.08 684.731 L1082.64 684.731 L1083.2 684.731 L1083.76 684.731 L1084.32 684.731 L1084.88 684.731 L1085.44 684.731 L1086 684.731 L1086.56 684.731 L1087.12 684.731 L1087.67 684.731 L1088.23 684.731 L1088.79 684.731 L1089.35 684.731 L1089.91 684.731 L1090.47 684.731 L1091.03 684.731 L1091.59 684.731 L1092.15 684.731 L1092.71 684.731 L1093.27 684.731 L1093.83 684.731 L1094.39 684.731 L1094.94 684.731 L1095.5 684.731 L1096.06 684.731 L1096.62 684.731 L1097.18 684.731 L1097.74 684.731 L1098.3 684.731 L1098.86 684.731 L1099.42 684.731 L1099.98 684.731 L1100.54 684.731 L1101.1 684.731 L1101.66 684.731 L1102.22 684.731 L1102.77 684.731 L1103.33 684.731 L1103.89 684.731 L1104.45 684.731 L1105.01 684.731 L1105.57 684.731 L1106.13 684.731 L1106.69 684.731 L1107.25 684.731 L1107.81 684.731 L1108.37 684.731 L1108.93 684.731 L1109.49 684.731 L1110.04 684.731 L1110.6 684.731 L1111.16 684.731 L1111.72 684.731 L1112.28 684.731 L1112.84 684.731 L1113.4 684.731 L1113.96 684.731 L1114.52 684.731 L1115.08 684.731 L1115.64 684.731 L1116.2 684.731 L1116.76 684.731 L1117.31 684.731 L1117.87 684.731 L1118.43 684.731 L1118.99 684.731 L1119.55 684.731 L1120.11 684.731 L1120.67 684.731 L1121.23 684.731 L1121.79 684.731 L1122.35 684.731 L1122.91 684.731 L1123.47 684.731 L1124.03 684.731 L1124.59 684.731 L1125.14 684.731 L1125.7 684.731 L1126.26 684.731 L1126.82 684.731 L1127.38 684.731 L1127.94 684.731 L1128.5 684.731 L1129.06 684.731 L1129.62 684.731 L1130.18 684.731 L1130.74 684.731 L1131.3 684.731 L1131.86 684.731 L1132.41 684.731 L1132.97 684.731 L1133.53 684.731 L1134.09 684.731 L1134.65 684.731 L1135.21 684.731 L1135.77 684.731 L1136.33 684.731 L1136.89 684.731 L1137.45 684.731 L1138.01 684.731 L1138.57 684.731 L1139.13 684.731 L1139.68 684.731 L1140.24 684.731 L1140.8 684.731 L1141.36 684.731 L1141.92 684.731 L1142.48 684.731 L1143.04 684.731 L1143.6 684.731 L1144.16 684.731 L1144.72 684.731 L1145.28 684.731 L1145.84 684.731 L1146.4 684.731 L1146.96 684.731 L1147.51 684.731 L1148.07 684.731 L1148.63 684.731 L1149.19 684.731 L1149.75 684.731 L1150.31 684.731 L1150.87 684.731 L1151.43 684.731 L1151.99 684.731 L1152.55 684.731 L1153.11 684.731 L1153.67 684.731 L1154.23 684.731 L1154.78 684.731 L1155.34 684.731 L1155.9 684.731 L1156.46 684.731 L1157.02 684.731 L1157.58 684.731 L1158.14 684.731 L1158.7 684.731 L1159.26 684.731 L1159.82 684.731 L1160.38 684.731 L1160.94 684.731 L1161.5 684.731 L1162.05 684.731 L1162.61 684.731 L1163.17 684.731 L1163.73 684.731 L1164.29 684.731 L1164.85 684.731 L1165.41 684.731 L1165.97 684.731 L1166.53 684.731 L1167.09 684.731 L1167.65 684.731 L1168.21 684.731 L1168.77 684.731 L1169.33 684.731 L1169.88 684.731 L1170.44 684.731 L1171 684.731 L1171.56 684.731 L1172.12 684.731 L1172.68 684.731 L1173.24 684.731 L1173.8 684.731 L1174.36 684.731 L1174.92 684.731 L1175.48 684.731 L1176.04 684.731 L1176.6 684.731 L1177.15 684.731 L1177.71 684.731 L1178.27 684.731 L1178.83 684.731 L1179.39 684.731 L1179.95 684.731 L1180.51 684.731 L1181.07 684.731 L1181.63 684.731 L1182.19 684.731 L1182.75 684.731 L1183.31 684.731 L1183.87 684.731 L1184.43 684.731 L1184.98 684.731 L1185.54 684.731 L1186.1 684.731 L1186.66 684.731 L1187.22 684.731 L1187.78 684.731 L1188.34 684.731 L1188.9 684.731 L1189.46 684.731 L1190.02 684.731 L1190.58 684.731 L1191.14 684.731 L1191.7 684.731 L1192.25 684.731 L1192.81 684.731 L1193.37 684.731 L1193.93 684.731 L1194.49 684.731 L1195.05 684.731 L1195.61 684.731 L1196.17 684.731 L1196.73 684.731 L1197.29 684.731 L1197.85 684.731 L1198.41 684.731 L1198.97 684.731 L1199.52 684.731 L1200.08 684.731 L1200.64 684.731 L1201.2 684.731 L1201.76 684.731 L1202.32 684.731 L1202.88 684.731 L1203.44 684.731 L1204 684.731 L1204.56 684.731 L1205.12 684.731 L1205.68 684.731 L1206.24 684.731 L1206.8 684.731 L1207.35 684.731 L1207.91 684.731 L1208.47 684.731 L1209.03 684.731 L1209.59 684.731 L1210.15 684.731 L1210.71 684.731 L1211.27 684.731 L1211.83 684.731 L1212.39 684.731 L1212.95 684.731 L1213.51 684.731 L1214.07 684.731 L1214.62 684.731 L1215.18 684.731 L1215.74 684.731 L1216.3 684.731 L1216.86 684.731 L1217.42 684.731 L1217.98 684.731 L1218.54 684.731 L1219.1 684.731 L1219.66 684.731 L1220.22 684.731 L1220.78 684.731 L1221.34 684.731 L1221.89 684.731 L1222.45 684.731 L1223.01 684.731 L1223.57 684.731 L1224.13 684.731 L1224.69 684.731 L1225.25 684.731 L1225.81 684.731 L1226.37 684.731 L1226.93 684.731 L1227.49 684.731 L1228.05 684.731 L1228.61 684.731 L1229.17 684.731 L1229.72 684.731 L1230.28 684.731 L1230.84 684.731 L1231.4 684.731 L1231.96 684.731 L1232.52 684.731 L1233.08 684.731 L1233.64 684.731 L1234.2 684.731 L1234.76 684.731 L1235.32 684.731 L1235.88 684.731 L1236.44 684.731 L1236.99 684.731 L1237.55 684.731 L1238.11 684.731 L1238.67 684.731 L1239.23 684.731 L1239.79 684.731 L1240.35 684.731 L1240.91 684.731 L1241.47 684.731 L1242.03 684.731 L1242.59 684.731 L1243.15 684.731 L1243.71 684.731 L1244.26 684.731 L1244.82 684.731 L1245.38 684.731 L1245.94 684.731 L1246.5 684.731 L1247.06 684.731 L1247.62 684.731 L1248.18 684.731 L1248.74 684.731 L1249.3 684.731 L1249.86 684.731 L1250.42 684.731 L1250.98 684.731 L1251.54 684.731 L1252.09 684.731 L1252.65 684.731 L1253.21 684.731 L1253.77 684.731 L1254.33 684.731 L1254.89 684.731 L1255.45 684.731 L1256.01 684.731 L1256.57 684.731 L1257.13 684.731 L1257.69 684.731 L1258.25 684.731 L1258.81 684.731 L1259.36 684.731 L1259.92 684.731 L1260.48 684.731 L1261.04 684.731 L1261.6 684.731 L1262.16 684.731 L1262.72 684.731 L1263.28 684.731 L1263.84 684.731 L1264.4 684.731 L1264.96 684.731 L1265.52 684.731 L1266.08 684.731 L1266.63 684.731 L1267.19 684.731 L1267.75 684.731 L1268.31 684.731 L1268.87 684.731 L1269.43 684.731 L1269.99 684.731 L1270.55 684.731 L1271.11 684.731 L1271.67 684.731 L1272.23 684.731 L1272.79 684.731 L1273.35 684.731 L1273.91 684.731 L1274.46 684.731 L1275.02 684.731 L1275.58 684.731 L1276.14 684.731 L1276.7 684.731 L1277.26 684.731 L1277.82 684.731 L1278.38 684.731 L1278.94 684.731 L1279.5 684.731 L1280.06 684.731 L1280.62 684.731 L1281.18 684.731 L1281.73 684.731 L1282.29 684.731 L1282.85 684.731 L1283.41 684.731 L1283.97 684.731 L1284.53 684.731 L1285.09 684.731 L1285.65 684.731 L1286.21 684.731 L1286.77 684.731 L1287.33 684.731 L1287.89 684.731 L1288.45 684.731 L1289 684.731 L1289.56 684.731 L1290.12 684.731 L1290.68 684.731 L1291.24 684.731 L1291.8 684.731 L1292.36 684.731 L1292.92 684.731 L1293.48 684.731 L1294.04 684.731 L1294.6 684.731 L1295.16 684.731 L1295.72 684.731 L1296.28 684.731 L1296.83 684.731 L1297.39 684.731 L1297.95 684.731 L1298.51 684.731 L1299.07 684.731 L1299.63 684.731 L1300.19 684.731 L1300.75 684.731 L1301.31 684.731 L1301.87 684.731 L1302.43 684.731 L1302.99 684.731 L1303.55 684.731 L1304.1 684.731 L1304.66 684.731 L1305.22 684.731 L1305.78 684.731 L1306.34 684.731 L1306.9 684.731 L1307.46 684.731 L1308.02 684.731 L1308.58 684.731 L1309.14 684.731 L1309.7 684.731 L1310.26 684.731 L1310.82 684.731 L1311.38 684.731 L1311.93 684.731 L1312.49 684.731 L1313.05 684.731 L1313.61 684.731 L1314.17 684.731 L1314.73 684.731 L1315.29 684.731 L1315.85 684.731 L1316.41 684.731 L1316.97 684.731 L1317.53 684.731 L1318.09 684.731 L1318.65 684.731 L1319.2 684.731 L1319.76 684.731 L1320.32 684.731 L1320.88 684.731 L1321.44 684.731 L1322 684.731 L1322.56 684.731 L1323.12 684.731 L1323.68 684.731 L1324.24 684.731 L1324.8 684.731 L1325.36 684.731 L1325.92 684.731 L1326.47 684.731 L1327.03 684.731 L1327.59 684.731 L1328.15 684.731 L1328.71 684.731 L1329.27 684.731 L1329.83 684.731 L1330.39 684.731 L1330.95 684.731 L1331.51 684.731 L1332.07 684.731 L1332.63 684.731 L1333.19 684.731 L1333.75 684.731 L1334.3 684.731 L1334.86 684.731 L1335.42 684.731 L1335.98 684.731 L1336.54 684.731 L1337.1 684.731 L1337.66 684.731 L1338.22 684.731 L1338.78 684.731 L1339.34 684.731 L1339.9 684.731 L1340.46 684.731 L1341.02 684.731 L1341.57 684.731 L1342.13 684.731 L1342.69 684.731 L1343.25 684.731 L1343.81 684.731 L1344.37 684.731 L1344.93 684.731 L1345.49 684.731 L1346.05 684.731 L1346.61 684.731 L1347.17 684.731 L1347.73 684.731 L1348.29 684.731 L1348.84 684.731 L1349.4 684.731 L1349.96 684.731 L1350.52 684.731 L1351.08 684.731 L1351.64 684.731 L1352.2 684.731 L1352.76 684.731 L1353.32 684.731 L1353.88 684.731 L1354.44 684.731 L1355 684.731 L1355.56 684.731 L1356.12 684.731 L1356.67 684.731 L1357.23 684.731 L1357.79 684.731 L1358.35 684.731 L1358.91 684.731 L1359.47 684.731 L1360.03 684.731 L1360.59 684.731 L1361.15 684.731 L1361.71 684.731 L1362.27 684.731 L1362.83 684.731 L1363.39 684.731 L1363.94 684.731 L1364.5 684.731 L1365.06 684.731 L1365.62 684.731 L1366.18 684.731 L1366.74 684.731 L1367.3 684.731 L1367.86 684.731 L1368.42 684.731 L1368.98 684.731 L1369.54 684.731 L1370.1 684.731 L1370.66 684.731 L1371.21 684.731 L1371.77 684.731 L1372.33 684.731 L1372.89 684.731 L1373.45 684.731 L1374.01 684.731 L1374.57 684.731 L1375.13 684.731 L1375.69 684.731 L1376.25 684.731 L1376.81 684.731 L1377.37 684.731 L1377.93 684.731 L1378.49 684.731 L1379.04 684.731 L1379.6 684.731 L1380.16 684.731 L1380.72 684.731 L1381.28 684.731 L1381.84 684.731 L1382.4 684.731 L1382.96 684.731 L1383.52 684.731 L1384.08 684.731 L1384.64 684.731 L1385.2 684.731 L1385.76 684.731 L1386.31 684.731 L1386.87 684.731 L1387.43 684.731 L1387.99 684.731 L1388.55 684.731 L1389.11 684.731 L1389.67 684.731 L1390.23 684.731 L1390.79 684.731 L1391.35 684.731 L1391.91 684.731 L1392.47 684.731 L1393.03 684.731 L1393.58 684.731 L1394.14 684.731 L1394.7 684.731 L1395.26 684.731 L1395.82 684.731 L1396.38 684.731 L1396.94 684.731 L1397.5 684.731 L1398.06 684.731 L1398.62 684.731 L1399.18 684.731 L1399.74 684.731 L1400.3 684.731 L1400.86 684.731 L1401.41 684.731 L1401.97 684.731 L1402.53 684.731 L1403.09 684.731 L1403.65 684.731 L1404.21 684.731 L1404.77 684.731 L1405.33 684.731 L1405.89 684.731 L1406.45 684.731 L1407.01 684.731 L1407.57 684.731 L1408.13 684.731 L1408.68 684.731 L1409.24 684.731 L1409.8 684.731 L1410.36 684.731 L1410.92 684.731 L1411.48 684.731 L1412.04 684.731 L1412.6 684.731 L1413.16 684.731 L1413.72 684.731 L1414.28 684.731 L1414.84 684.731 L1415.4 684.731 L1415.95 684.731 L1416.51 684.731 L1417.07 684.731 L1417.63 684.731 L1418.19 684.731 L1418.75 684.731 L1419.31 684.731 L1419.87 684.731 L1420.43 684.731 L1420.99 684.731 L1421.55 684.731 L1422.11 684.731 L1422.67 684.731 L1423.23 684.731 L1423.78 684.731 L1424.34 684.731 L1424.9 684.731 L1425.46 684.731 L1426.02 684.731 L1426.58 684.731 L1427.14 684.731 L1427.7 684.731 L1428.26 684.731 L1428.82 684.731 L1429.38 684.731 L1429.94 684.731 L1430.5 684.731 L1431.05 684.731 L1431.61 684.731 L1432.17 684.731 L1432.73 684.731 L1433.29 684.731 L1433.85 684.731 L1434.41 684.731 L1434.97 684.731 L1435.53 684.731 L1436.09 684.731 L1436.65 684.731 L1437.21 684.731 L1437.77 684.731 L1438.33 684.731 L1438.88 684.731 L1439.44 684.731 L1440 684.731 L1440.56 684.731 L1441.12 684.731 L1441.68 684.731 L1442.24 684.731 L1442.8 684.731 L1443.36 684.731 L1443.92 684.731 L1444.48 684.731 L1445.04 684.731 L1445.6 684.731 L1446.15 684.731 L1446.71 684.731 L1447.27 684.731 L1447.83 684.731 L1448.39 684.731 L1448.95 684.731 L1449.51 684.731 L1450.07 684.731 L1450.63 684.731 L1451.19 684.731 L1451.75 684.731 L1452.31 684.731 L1452.87 684.731 L1453.42 684.731 L1453.98 684.731 L1454.54 684.731 L1455.1 684.731 L1455.66 684.731 L1456.22 684.731 L1456.78 684.731 L1457.34 684.731 L1457.9 684.731 L1458.46 684.731 L1459.02 684.731 L1459.58 684.731 L1460.14 684.731 L1460.7 684.731 L1461.25 684.731 L1461.81 684.731 L1462.37 684.731 L1462.93 684.731 L1463.49 684.731 L1464.05 684.731 L1464.61 684.731 L1465.17 684.731 L1465.73 684.731 L1466.29 684.731 L1466.85 684.731 L1467.41 684.731 L1467.97 684.731 L1468.52 684.731 L1469.08 684.731 L1469.64 684.731 L1470.2 684.731 L1470.76 684.731 L1471.32 684.731 L1471.88 684.731 L1472.44 684.731 L1473 684.731 L1473.56 684.731 L1474.12 684.731 L1474.68 684.731 L1475.24 684.731 L1475.79 684.731 L1476.35 684.731 L1476.91 684.731 L1477.47 684.731 L1478.03 684.731 L1478.59 684.731 L1479.15 684.731 L1479.71 684.731 L1480.27 684.731 L1480.83 684.731 L1481.39 684.731 L1481.95 684.731 L1482.51 684.731 L1483.07 684.731 L1483.62 684.731 L1484.18 684.731 L1484.74 684.731 L1485.3 684.731 L1485.86 684.731 L1486.42 684.731 L1486.98 684.731 L1487.54 684.731 L1488.1 684.731 L1488.66 684.731 L1489.22 684.731 L1489.78 684.731 L1490.34 684.731 L1490.89 684.731 L1491.45 684.731 L1492.01 684.731 L1492.57 684.731 L1493.13 684.731 L1493.69 684.731 L1494.25 684.731 L1494.81 684.731 L1495.37 684.731 L1495.93 684.731 L1496.49 684.731 L1497.05 684.731 L1497.61 684.731 L1498.16 684.731 L1498.72 684.731 L1499.28 684.731 L1499.84 684.731 L1500.4 684.731 L1500.96 684.731 L1501.52 684.731 L1502.08 684.731 L1502.64 684.731 L1503.2 684.731 L1503.76 684.731 L1504.32 684.731 L1504.88 684.731 L1505.44 684.731 L1505.99 684.731 L1506.55 684.731 L1507.11 684.731 L1507.67 684.731 L1508.23 684.731 L1508.79 684.731 L1509.35 684.731 L1509.91 684.731 L1510.47 684.731 L1511.03 684.731 L1511.59 684.731 L1512.15 684.731 L1512.71 684.731 L1513.26 684.731 L1513.82 684.731 L1514.38 684.731 L1514.94 684.731 L1515.5 684.731 L1516.06 684.731 L1516.62 684.731 L1517.18 684.731 L1517.74 684.731 L1518.3 684.731 L1518.86 684.731 L1519.42 684.731 L1519.98 684.731 L1520.53 684.731 L1521.09 684.731 L1521.65 684.731 L1522.21 684.731 L1522.77 684.731 L1523.33 684.731 L1523.89 684.731 L1524.45 684.731 L1525.01 684.731 L1525.57 684.731 L1526.13 684.731 L1526.69 684.731 L1527.25 684.731 L1527.81 684.731 L1528.36 684.731 L1528.92 684.731 L1529.48 684.731 L1530.04 684.731 L1530.6 684.731 L1531.16 684.731 L1531.72 684.731 L1532.28 684.731 L1532.84 684.731 L1533.4 684.731 L1533.96 684.731 L1534.52 684.731 L1535.08 684.731 L1535.63 684.731 L1536.19 684.731 L1536.75 684.731 L1537.31 684.731 L1537.87 684.731 L1538.43 684.731 L1538.99 684.731 L1539.55 684.731 L1540.11 684.731 L1540.67 684.731 L1541.23 684.731 L1541.79 684.731 L1542.35 684.731 L1542.9 684.731 L1543.46 684.731 L1544.02 684.731 L1544.58 684.731 L1545.14 684.731 L1545.7 684.731 L1546.26 684.731 L1546.82 684.731 L1547.38 684.731 L1547.94 684.731 L1548.5 684.731 L1549.06 684.731 L1549.62 684.731 L1550.18 684.731 L1550.73 684.731 L1551.29 684.731 L1551.85 684.731 L1552.41 684.731 L1552.97 684.731 L1553.53 684.731 L1554.09 684.731 L1554.65 684.731 L1555.21 684.731 L1555.77 684.731 L1556.33 684.731 L1556.89 684.731 L1557.45 684.731 L1558 684.731 L1558.56 684.731 L1559.12 684.731 L1559.68 684.731 L1560.24 684.731 L1560.8 684.731 L1561.36 684.731 L1561.92 684.731 L1562.48 684.731 L1563.04 684.731 L1563.6 684.731 L1564.16 684.731 L1564.72 684.731 L1565.28 684.731 L1565.83 684.731 L1566.39 684.731 L1566.95 684.731 L1567.51 684.731 L1568.07 684.731 L1568.63 684.731 L1569.19 684.731 L1569.75 684.731 L1570.31 684.731 L1570.87 684.731 L1571.43 684.731 L1571.99 684.731 L1572.55 684.731 L1573.1 684.731 L1573.66 684.731 L1574.22 684.731 L1574.78 684.731 L1575.34 684.731 L1575.9 684.731 L1576.46 684.731 L1577.02 684.731 L1577.58 684.731 L1578.14 684.731 L1578.7 684.731 L1579.26 684.731 L1579.82 684.731 L1580.37 684.731 L1580.93 684.731 L1581.49 684.731 L1582.05 684.731 L1582.61 684.731 L1583.17 684.731 L1583.73 684.731 L1584.29 684.731 L1584.85 684.731 L1585.41 684.731 L1585.97 684.731 L1586.53 684.731 L1587.09 684.731 L1587.65 684.731 L1588.2 684.731 L1588.76 684.731 L1589.32 684.731 L1589.88 684.731 L1590.44 684.731 L1591 684.731 L1591.56 684.731 L1592.12 684.731 L1592.68 684.731 L1593.24 684.731 L1593.8 684.731 L1594.36 684.731 L1594.92 684.731 L1595.47 684.731 L1596.03 684.731 L1596.59 684.731 L1597.15 684.731 L1597.71 684.731 L1598.27 684.731 L1598.83 684.731 L1599.39 684.731 L1599.95 684.731 L1600.51 684.731 L1601.07 684.731 L1601.63 684.731 L1602.19 684.731 L1602.74 684.731 L1603.3 684.731 L1603.86 684.731 L1604.42 684.731 L1604.98 684.731 L1605.54 684.731 L1606.1 684.731 L1606.66 684.731 L1607.22 684.731 L1607.78 684.731 L1608.34 684.731 L1608.9 684.731 L1609.46 684.731 L1610.02 684.731 L1610.57 684.731 L1611.13 684.731 L1611.69 684.731 L1612.25 684.731 L1612.81 684.731 L1613.37 684.731 L1613.93 684.731 L1614.49 684.731 L1615.05 684.731 L1615.61 684.731 L1616.17 684.731 L1616.73 684.731 L1617.29 684.731 L1617.84 684.731 L1618.4 684.731 L1618.96 684.731 L1619.52 684.731 L1620.08 684.731 L1620.64 684.731 L1621.2 684.731 L1621.76 684.731 L1622.32 684.731 L1622.88 684.731 L1623.44 684.731 L1624 684.731 L1624.56 684.731 L1625.11 684.731 L1625.67 684.731 L1626.23 684.731 L1626.79 684.731 L1627.35 684.731 L1627.91 684.731 L1628.47 684.731 L1629.03 684.731 L1629.59 684.731 L1630.15 684.731 L1630.71 684.731 L1631.27 684.731 L1631.83 684.731 L1632.39 684.731 L1632.94 684.731 L1633.5 684.731 L1634.06 684.731 L1634.62 684.731 L1635.18 684.731 L1635.74 684.731 L1636.3 684.731 L1636.86 684.731 L1637.42 684.731 L1637.98 684.731 L1638.54 684.731 L1639.1 684.731 L1639.66 684.731 L1640.21 684.731 L1640.77 684.731 L1641.33 684.731 L1641.89 684.731 L1642.45 684.731 L1643.01 684.731 L1643.57 684.731 L1644.13 684.731 L1644.69 684.731 L1645.25 684.731 L1645.81 684.731 L1646.37 684.731 L1646.93 684.731 L1647.48 684.731 L1648.04 684.731 L1648.6 684.731 L1649.16 684.731 L1649.72 684.731 L1650.28 684.731 L1650.84 684.731 L1651.4 684.731 L1651.96 684.731 L1652.52 684.731 L1653.08 684.731 L1653.64 684.731 L1654.2 684.731 L1654.76 684.731 L1655.31 684.731 L1655.87 684.731 L1656.43 684.731 L1656.99 684.731 L1657.55 684.731 L1658.11 684.731 L1658.67 684.731 L1659.23 684.731 L1659.79 684.731 L1660.35 684.731 L1660.91 684.731 L1661.47 684.731 L1662.03 684.731 L1662.58 684.731 L1663.14 684.731 L1663.7 684.731 L1664.26 684.731 L1664.82 684.731 L1665.38 684.731 L1665.94 684.731 L1666.5 684.731 L1667.06 684.731 L1667.62 684.731 L1668.18 684.731 L1668.74 684.731 L1669.3 684.731 L1669.85 684.731 L1670.41 684.731 L1670.97 684.731 L1671.53 684.731 L1672.09 684.731 L1672.65 684.731 L1673.21 684.731 L1673.77 684.731 L1674.33 684.731 L1674.89 684.731 L1675.45 684.731 L1676.01 684.731 L1676.57 684.731 L1677.13 684.731 L1677.68 684.731 L1678.24 684.731 L1678.8 684.731 L1679.36 684.731 L1679.92 684.731 L1680.48 684.731 L1681.04 684.731 L1681.6 684.731 L1682.16 684.731 L1682.72 684.731 L1683.28 684.731 L1683.84 684.731 L1684.4 684.731 L1684.95 684.731 L1685.51 684.731 L1686.07 684.731 L1686.63 684.731 L1687.19 684.731 L1687.75 684.731 L1688.31 684.731 L1688.87 684.731 L1689.43 684.731 L1689.99 684.731 L1690.55 684.731 L1691.11 684.731 L1691.67 684.731 L1692.23 684.731 L1692.78 684.731 L1693.34 684.731 L1693.9 684.731 L1694.46 684.731 L1695.02 684.731 L1695.58 684.731 L1696.14 684.731 L1696.7 684.731 L1697.26 684.731 L1697.82 684.731 L1698.38 684.731 L1698.94 684.731 L1699.5 684.731 L1700.05 684.731 L1700.61 684.731 L1701.17 684.731 L1701.73 684.731 L1702.29 684.731 L1702.85 684.731 L1703.41 684.731 L1703.97 684.731 L1704.53 684.731 L1705.09 684.731 L1705.65 684.731 L1706.21 684.731 L1706.77 684.731 L1707.32 684.731 L1707.88 684.731 L1708.44 684.731 L1709 684.731 L1709.56 684.731 L1710.12 684.731 L1710.68 684.731 L1711.24 684.731 L1711.8 684.731 L1712.36 684.731 L1712.92 684.731 L1713.48 684.731 L1714.04 684.731 L1714.6 684.731 L1715.15 684.731 L1715.71 684.731 L1716.27 684.731 L1716.83 684.731 L1717.39 684.731 L1717.95 684.731 L1718.51 684.731 L1719.07 684.731 L1719.63 684.731 L1720.19 684.731 L1720.75 684.731 L1721.31 684.731 L1721.87 684.731 L1722.42 684.731 L1722.98 684.731 L1723.54 684.731 L1724.1 684.731 L1724.66 684.731 L1725.22 684.731 L1725.78 684.731 L1726.34 684.731 L1726.9 684.731 L1727.46 684.731 L1728.02 684.731 L1728.58 684.731 L1729.14 684.731 L1729.69 684.731 L1730.25 684.731 L1730.81 684.731 L1731.37 684.731 L1731.93 684.731 L1732.49 684.731 L1733.05 684.731 L1733.61 684.731 L1734.17 684.731 L1734.73 684.731 L1735.29 684.731 L1735.85 684.731 L1736.41 684.731 L1736.97 684.731 L1737.52 684.731 L1738.08 684.731 L1738.64 684.731 L1739.2 684.731 L1739.76 684.731 L1740.32 684.731 L1740.88 684.731 L1741.44 684.731 L1742 684.731 L1742.56 684.731 L1743.12 684.731 L1743.68 684.731 L1744.24 684.731 L1744.79 684.731 L1745.35 684.731 L1745.91 684.731 L1746.47 684.731 L1747.03 684.731 L1747.59 684.731 L1748.15 684.731 L1748.71 684.731 L1749.27 684.731 L1749.83 684.731 L1750.39 684.731 L1750.95 684.731 L1751.51 684.731 L1752.06 684.731 L1752.62 684.731 L1753.18 684.731 L1753.74 684.731 L1754.3 684.731 L1754.86 684.731 L1755.42 684.731 L1755.98 684.731 L1756.54 684.731 L1757.1 684.731 L1757.66 684.731 L1758.22 684.731 L1758.78 684.731 L1759.34 684.731 L1759.89 684.731 L1760.45 684.731 L1761.01 684.731 L1761.57 684.731 L1762.13 684.731 L1762.69 684.731 L1763.25 684.731 L1763.81 684.731 L1764.37 684.731 L1764.93 684.731 L1765.49 684.731 L1766.05 684.731 L1766.61 684.731 L1767.16 684.731 L1767.72 684.731 L1768.28 684.731 L1768.84 684.731 L1769.4 684.731 L1769.96 684.731 L1770.52 684.731 L1771.08 684.731 L1771.64 684.731 L1772.2 684.731 L1772.76 684.731 L1773.32 684.731 L1773.88 684.731 L1774.43 684.731 L1774.99 684.731 L1775.55 684.731 L1776.11 684.731 L1776.67 684.731 L1777.23 684.731 L1777.79 684.731 L1778.35 684.731 L1778.91 684.731 L1779.47 684.731 L1780.03 684.731 L1780.59 684.731 L1781.15 684.731 L1781.71 684.731 L1782.26 684.731 L1782.82 684.731 L1783.38 684.731 L1783.94 684.731 L1784.5 684.731 L1785.06 684.731 L1785.62 684.731 L1786.18 684.731 L1786.74 684.731 L1787.3 684.731 L1787.86 684.731 L1788.42 684.731 L1788.98 684.731 L1789.53 684.731 L1790.09 684.731 L1790.65 684.731 L1791.21 684.731 L1791.77 684.731 L1792.33 684.731 L1792.89 684.731 L1793.45 684.731 L1794.01 684.731 L1794.57 684.731 L1795.13 684.731 L1795.69 684.731 L1796.25 684.731 L1796.8 684.731 L1797.36 684.731 L1797.92 684.731 L1798.48 684.731 L1799.04 684.731 L1799.6 684.731 L1800.16 684.731 L1800.72 684.731 L1801.28 684.731 L1801.84 684.731 L1802.4 684.731 L1802.96 684.731 L1803.52 684.731 L1804.08 684.731 L1804.63 684.731 L1805.19 684.731 L1805.75 684.731 L1806.31 684.731 L1806.87 684.731 L1807.43 684.731 L1807.99 684.731 L1808.55 684.731 L1809.11 684.731 L1809.67 684.731 L1810.23 684.731 L1810.79 684.731 L1811.35 684.731 L1811.9 684.731 L1812.46 684.731 L1813.02 684.731 L1813.58 684.731 L1814.14 684.731 L1814.7 684.731 L1815.26 684.731 L1815.82 684.731 L1816.38 684.731 L1816.94 684.731 L1817.5 684.731 L1818.06 684.731 L1818.62 684.731 L1819.18 684.731 L1819.73 684.731 L1820.29 684.731 L1820.85 684.731 L1821.41 684.731 L1821.97 684.731 L1822.53 684.731 L1823.09 684.731 L1823.65 684.731 L1824.21 684.731 L1824.77 684.731 L1825.33 684.731 L1825.89 684.731 L1826.45 684.731 L1827 684.731 L1827.56 684.731 L1828.12 684.731 L1828.68 684.731 L1829.24 684.731 L1829.8 684.731 L1830.36 684.731 L1830.92 684.731 L1831.48 684.731 L1832.04 684.731 L1832.6 684.731 L1833.16 684.731 L1833.72 684.731 L1834.27 684.731 L1834.83 684.731 L1835.39 684.731 L1835.95 684.731 L1836.51 684.731 L1837.07 684.731 L1837.63 684.731 L1838.19 684.731 L1838.19 682.322 L1837.63 682.322 L1837.07 682.322 L1836.51 682.322 L1835.95 682.322 L1835.39 682.322 L1834.83 682.322 L1834.27 682.322 L1833.72 682.322 L1833.16 682.322 L1832.6 682.322 L1832.04 682.322 L1831.48 682.322 L1830.92 682.322 L1830.36 682.322 L1829.8 682.322 L1829.24 682.322 L1828.68 682.322 L1828.12 682.322 L1827.56 682.322 L1827 682.322 L1826.45 682.322 L1825.89 682.322 L1825.33 682.322 L1824.77 682.322 L1824.21 682.322 L1823.65 682.322 L1823.09 682.322 L1822.53 682.322 L1821.97 682.322 L1821.41 682.322 L1820.85 682.322 L1820.29 682.322 L1819.73 682.322 L1819.18 682.322 L1818.62 682.322 L1818.06 682.322 L1817.5 682.322 L1816.94 682.322 L1816.38 682.322 L1815.82 682.322 L1815.26 682.322 L1814.7 682.322 L1814.14 682.322 L1813.58 682.322 L1813.02 682.322 L1812.46 682.322 L1811.9 682.322 L1811.35 682.322 L1810.79 682.322 L1810.23 682.322 L1809.67 682.322 L1809.11 682.322 L1808.55 682.322 L1807.99 682.322 L1807.43 682.322 L1806.87 682.322 L1806.31 682.322 L1805.75 682.322 L1805.19 682.322 L1804.63 682.322 L1804.08 682.322 L1803.52 682.322 L1802.96 682.322 L1802.4 682.322 L1801.84 682.322 L1801.28 682.322 L1800.72 682.322 L1800.16 682.322 L1799.6 682.322 L1799.04 682.322 L1798.48 682.322 L1797.92 682.322 L1797.36 682.322 L1796.8 682.322 L1796.25 682.322 L1795.69 682.322 L1795.13 682.322 L1794.57 682.322 L1794.01 682.322 L1793.45 682.322 L1792.89 682.322 L1792.33 682.322 L1791.77 682.322 L1791.21 682.322 L1790.65 682.322 L1790.09 682.322 L1789.53 682.322 L1788.98 682.322 L1788.42 682.322 L1787.86 682.322 L1787.3 682.322 L1786.74 682.322 L1786.18 682.322 L1785.62 682.322 L1785.06 682.322 L1784.5 682.322 L1783.94 682.322 L1783.38 682.322 L1782.82 682.322 L1782.26 682.322 L1781.71 682.322 L1781.15 682.322 L1780.59 682.322 L1780.03 682.322 L1779.47 682.322 L1778.91 682.322 L1778.35 682.322 L1777.79 682.322 L1777.23 682.322 L1776.67 682.322 L1776.11 682.322 L1775.55 682.322 L1774.99 682.322 L1774.43 682.322 L1773.88 682.322 L1773.32 682.322 L1772.76 682.322 L1772.2 682.322 L1771.64 682.322 L1771.08 682.322 L1770.52 682.322 L1769.96 682.322 L1769.4 682.322 L1768.84 682.322 L1768.28 682.322 L1767.72 682.322 L1767.16 682.322 L1766.61 682.322 L1766.05 682.322 L1765.49 682.322 L1764.93 682.322 L1764.37 682.322 L1763.81 682.322 L1763.25 682.322 L1762.69 682.322 L1762.13 682.322 L1761.57 682.322 L1761.01 682.322 L1760.45 682.322 L1759.89 682.322 L1759.34 682.322 L1758.78 682.322 L1758.22 682.322 L1757.66 682.322 L1757.1 682.322 L1756.54 682.322 L1755.98 682.322 L1755.42 682.322 L1754.86 682.322 L1754.3 682.322 L1753.74 682.322 L1753.18 682.322 L1752.62 682.322 L1752.06 682.322 L1751.51 682.322 L1750.95 682.322 L1750.39 682.322 L1749.83 682.322 L1749.27 682.322 L1748.71 682.322 L1748.15 682.322 L1747.59 682.322 L1747.03 682.322 L1746.47 682.322 L1745.91 682.322 L1745.35 682.322 L1744.79 682.322 L1744.24 682.322 L1743.68 682.322 L1743.12 682.322 L1742.56 682.322 L1742 682.322 L1741.44 682.322 L1740.88 682.322 L1740.32 682.322 L1739.76 682.322 L1739.2 682.322 L1738.64 682.322 L1738.08 682.322 L1737.52 682.322 L1736.97 682.322 L1736.41 682.322 L1735.85 682.322 L1735.29 682.322 L1734.73 682.322 L1734.17 682.322 L1733.61 682.322 L1733.05 682.322 L1732.49 682.322 L1731.93 682.322 L1731.37 682.322 L1730.81 682.322 L1730.25 682.322 L1729.69 682.322 L1729.14 682.322 L1728.58 682.322 L1728.02 682.322 L1727.46 682.322 L1726.9 682.322 L1726.34 682.322 L1725.78 682.322 L1725.22 682.322 L1724.66 682.322 L1724.1 682.322 L1723.54 682.322 L1722.98 682.322 L1722.42 682.322 L1721.87 682.322 L1721.31 682.322 L1720.75 682.322 L1720.19 682.322 L1719.63 682.322 L1719.07 682.322 L1718.51 682.322 L1717.95 682.322 L1717.39 682.322 L1716.83 682.322 L1716.27 682.322 L1715.71 682.322 L1715.15 682.322 L1714.6 682.322 L1714.04 682.322 L1713.48 682.322 L1712.92 682.322 L1712.36 682.322 L1711.8 682.322 L1711.24 682.322 L1710.68 682.322 L1710.12 682.322 L1709.56 682.322 L1709 682.322 L1708.44 682.322 L1707.88 682.322 L1707.32 682.322 L1706.77 682.322 L1706.21 682.322 L1705.65 682.322 L1705.09 682.322 L1704.53 682.322 L1703.97 682.322 L1703.41 682.322 L1702.85 682.322 L1702.29 682.322 L1701.73 682.322 L1701.17 682.322 L1700.61 682.322 L1700.05 682.322 L1699.5 682.322 L1698.94 682.322 L1698.38 682.322 L1697.82 682.322 L1697.26 682.322 L1696.7 682.322 L1696.14 682.322 L1695.58 682.322 L1695.02 682.322 L1694.46 682.322 L1693.9 682.322 L1693.34 682.322 L1692.78 682.322 L1692.23 682.322 L1691.67 682.322 L1691.11 682.322 L1690.55 682.322 L1689.99 682.322 L1689.43 682.322 L1688.87 682.322 L1688.31 682.322 L1687.75 682.322 L1687.19 682.322 L1686.63 682.322 L1686.07 682.322 L1685.51 682.322 L1684.95 682.322 L1684.4 682.322 L1683.84 682.322 L1683.28 682.322 L1682.72 682.322 L1682.16 682.322 L1681.6 682.322 L1681.04 682.322 L1680.48 682.322 L1679.92 682.322 L1679.36 682.322 L1678.8 682.322 L1678.24 682.322 L1677.68 682.322 L1677.13 682.322 L1676.57 682.322 L1676.01 682.322 L1675.45 682.322 L1674.89 682.322 L1674.33 682.322 L1673.77 682.322 L1673.21 682.322 L1672.65 682.322 L1672.09 682.322 L1671.53 682.322 L1670.97 682.322 L1670.41 682.322 L1669.85 682.322 L1669.3 682.322 L1668.74 682.322 L1668.18 682.322 L1667.62 682.322 L1667.06 682.322 L1666.5 682.322 L1665.94 682.322 L1665.38 682.322 L1664.82 682.322 L1664.26 682.322 L1663.7 682.322 L1663.14 682.322 L1662.58 682.322 L1662.03 682.322 L1661.47 682.322 L1660.91 682.322 L1660.35 682.322 L1659.79 682.322 L1659.23 682.322 L1658.67 682.322 L1658.11 682.322 L1657.55 682.322 L1656.99 682.322 L1656.43 682.322 L1655.87 682.322 L1655.31 682.322 L1654.76 682.322 L1654.2 682.322 L1653.64 682.322 L1653.08 682.322 L1652.52 682.322 L1651.96 682.322 L1651.4 682.322 L1650.84 682.322 L1650.28 682.322 L1649.72 682.322 L1649.16 682.322 L1648.6 682.322 L1648.04 682.322 L1647.48 682.322 L1646.93 682.322 L1646.37 682.322 L1645.81 682.322 L1645.25 682.322 L1644.69 682.322 L1644.13 682.322 L1643.57 682.322 L1643.01 682.322 L1642.45 682.322 L1641.89 682.322 L1641.33 682.322 L1640.77 682.322 L1640.21 682.322 L1639.66 682.322 L1639.1 682.322 L1638.54 682.322 L1637.98 682.322 L1637.42 682.322 L1636.86 682.322 L1636.3 682.322 L1635.74 682.322 L1635.18 682.322 L1634.62 682.322 L1634.06 682.322 L1633.5 682.322 L1632.94 682.322 L1632.39 682.322 L1631.83 682.322 L1631.27 682.322 L1630.71 682.322 L1630.15 682.322 L1629.59 682.322 L1629.03 682.322 L1628.47 682.322 L1627.91 682.322 L1627.35 682.322 L1626.79 682.322 L1626.23 682.322 L1625.67 682.322 L1625.11 682.322 L1624.56 682.322 L1624 682.322 L1623.44 682.322 L1622.88 682.322 L1622.32 682.322 L1621.76 682.322 L1621.2 682.322 L1620.64 682.322 L1620.08 682.322 L1619.52 682.322 L1618.96 682.322 L1618.4 682.322 L1617.84 682.322 L1617.29 682.322 L1616.73 682.322 L1616.17 682.322 L1615.61 682.322 L1615.05 682.322 L1614.49 682.322 L1613.93 682.322 L1613.37 682.322 L1612.81 682.322 L1612.25 682.322 L1611.69 682.322 L1611.13 682.322 L1610.57 682.322 L1610.02 682.322 L1609.46 682.322 L1608.9 682.322 L1608.34 682.322 L1607.78 682.322 L1607.22 682.322 L1606.66 682.322 L1606.1 682.322 L1605.54 682.322 L1604.98 682.322 L1604.42 682.322 L1603.86 682.322 L1603.3 682.322 L1602.74 682.322 L1602.19 682.322 L1601.63 682.322 L1601.07 682.322 L1600.51 682.322 L1599.95 682.322 L1599.39 682.322 L1598.83 682.322 L1598.27 682.322 L1597.71 682.322 L1597.15 682.322 L1596.59 682.322 L1596.03 682.322 L1595.47 682.322 L1594.92 682.322 L1594.36 682.322 L1593.8 682.322 L1593.24 682.322 L1592.68 682.322 L1592.12 682.322 L1591.56 682.322 L1591 682.322 L1590.44 682.322 L1589.88 682.322 L1589.32 682.322 L1588.76 682.322 L1588.2 682.322 L1587.65 682.322 L1587.09 682.322 L1586.53 682.322 L1585.97 682.322 L1585.41 682.322 L1584.85 682.322 L1584.29 682.322 L1583.73 682.322 L1583.17 682.322 L1582.61 682.322 L1582.05 682.322 L1581.49 682.322 L1580.93 682.322 L1580.37 682.322 L1579.82 682.322 L1579.26 682.322 L1578.7 682.322 L1578.14 682.322 L1577.58 682.322 L1577.02 682.322 L1576.46 682.322 L1575.9 682.322 L1575.34 682.322 L1574.78 682.322 L1574.22 682.322 L1573.66 682.322 L1573.1 682.322 L1572.55 682.322 L1571.99 682.322 L1571.43 682.322 L1570.87 682.322 L1570.31 682.322 L1569.75 682.322 L1569.19 682.322 L1568.63 682.322 L1568.07 682.322 L1567.51 682.322 L1566.95 682.322 L1566.39 682.322 L1565.83 682.322 L1565.28 682.322 L1564.72 682.322 L1564.16 682.322 L1563.6 682.322 L1563.04 682.322 L1562.48 682.322 L1561.92 682.322 L1561.36 682.322 L1560.8 682.322 L1560.24 682.322 L1559.68 682.322 L1559.12 682.322 L1558.56 682.322 L1558 682.322 L1557.45 682.322 L1556.89 682.322 L1556.33 682.322 L1555.77 682.322 L1555.21 682.322 L1554.65 682.322 L1554.09 682.322 L1553.53 682.322 L1552.97 682.322 L1552.41 682.322 L1551.85 682.322 L1551.29 682.322 L1550.73 682.322 L1550.18 682.322 L1549.62 682.322 L1549.06 682.322 L1548.5 682.322 L1547.94 682.322 L1547.38 682.322 L1546.82 682.322 L1546.26 682.322 L1545.7 682.322 L1545.14 682.322 L1544.58 682.322 L1544.02 682.322 L1543.46 682.322 L1542.9 682.322 L1542.35 682.322 L1541.79 682.322 L1541.23 682.322 L1540.67 682.322 L1540.11 682.322 L1539.55 682.322 L1538.99 682.322 L1538.43 682.322 L1537.87 682.322 L1537.31 682.322 L1536.75 682.322 L1536.19 682.322 L1535.63 682.322 L1535.08 682.322 L1534.52 682.322 L1533.96 682.322 L1533.4 682.322 L1532.84 682.322 L1532.28 682.322 L1531.72 682.322 L1531.16 682.322 L1530.6 682.322 L1530.04 682.322 L1529.48 682.322 L1528.92 682.322 L1528.36 682.322 L1527.81 682.322 L1527.25 682.322 L1526.69 682.322 L1526.13 682.322 L1525.57 682.322 L1525.01 682.322 L1524.45 682.322 L1523.89 682.322 L1523.33 682.322 L1522.77 682.322 L1522.21 682.322 L1521.65 682.322 L1521.09 682.322 L1520.53 682.322 L1519.98 682.322 L1519.42 682.322 L1518.86 682.322 L1518.3 682.322 L1517.74 682.322 L1517.18 682.322 L1516.62 682.322 L1516.06 682.322 L1515.5 682.322 L1514.94 682.322 L1514.38 682.322 L1513.82 682.322 L1513.26 682.322 L1512.71 682.322 L1512.15 682.322 L1511.59 682.322 L1511.03 682.322 L1510.47 682.322 L1509.91 682.322 L1509.35 682.322 L1508.79 682.322 L1508.23 682.322 L1507.67 682.322 L1507.11 682.322 L1506.55 682.322 L1505.99 682.322 L1505.44 682.322 L1504.88 682.322 L1504.32 682.322 L1503.76 682.322 L1503.2 682.322 L1502.64 682.322 L1502.08 682.322 L1501.52 682.322 L1500.96 682.322 L1500.4 682.322 L1499.84 682.322 L1499.28 682.322 L1498.72 682.322 L1498.16 682.322 L1497.61 682.322 L1497.05 682.322 L1496.49 682.322 L1495.93 682.322 L1495.37 682.322 L1494.81 682.322 L1494.25 682.322 L1493.69 682.322 L1493.13 682.322 L1492.57 682.322 L1492.01 682.322 L1491.45 682.322 L1490.89 682.322 L1490.34 682.322 L1489.78 682.322 L1489.22 682.322 L1488.66 682.322 L1488.1 682.322 L1487.54 682.322 L1486.98 682.322 L1486.42 682.322 L1485.86 682.322 L1485.3 682.322 L1484.74 682.322 L1484.18 682.322 L1483.62 682.322 L1483.07 682.322 L1482.51 682.322 L1481.95 682.322 L1481.39 682.322 L1480.83 682.322 L1480.27 682.322 L1479.71 682.322 L1479.15 682.322 L1478.59 682.322 L1478.03 682.322 L1477.47 682.322 L1476.91 682.322 L1476.35 682.322 L1475.79 682.322 L1475.24 682.322 L1474.68 682.322 L1474.12 682.322 L1473.56 682.322 L1473 682.322 L1472.44 682.322 L1471.88 682.322 L1471.32 682.322 L1470.76 682.322 L1470.2 682.322 L1469.64 682.322 L1469.08 682.322 L1468.52 682.322 L1467.97 682.322 L1467.41 682.322 L1466.85 682.322 L1466.29 682.322 L1465.73 682.322 L1465.17 682.322 L1464.61 682.322 L1464.05 682.322 L1463.49 682.322 L1462.93 682.322 L1462.37 682.322 L1461.81 682.322 L1461.25 682.322 L1460.7 682.322 L1460.14 682.322 L1459.58 682.322 L1459.02 682.322 L1458.46 682.322 L1457.9 682.322 L1457.34 682.322 L1456.78 682.322 L1456.22 682.322 L1455.66 682.322 L1455.1 682.322 L1454.54 682.322 L1453.98 682.322 L1453.42 682.322 L1452.87 682.322 L1452.31 682.322 L1451.75 682.322 L1451.19 682.322 L1450.63 682.322 L1450.07 682.322 L1449.51 682.322 L1448.95 682.322 L1448.39 682.322 L1447.83 682.322 L1447.27 682.322 L1446.71 682.322 L1446.15 682.322 L1445.6 682.322 L1445.04 682.322 L1444.48 682.322 L1443.92 682.322 L1443.36 682.322 L1442.8 682.322 L1442.24 682.322 L1441.68 682.322 L1441.12 682.322 L1440.56 682.322 L1440 682.322 L1439.44 682.322 L1438.88 682.322 L1438.33 682.322 L1437.77 682.322 L1437.21 682.322 L1436.65 682.322 L1436.09 682.322 L1435.53 682.322 L1434.97 682.322 L1434.41 682.322 L1433.85 682.322 L1433.29 682.322 L1432.73 682.322 L1432.17 682.322 L1431.61 682.322 L1431.05 682.322 L1430.5 682.322 L1429.94 682.322 L1429.38 682.322 L1428.82 682.322 L1428.26 682.322 L1427.7 682.322 L1427.14 682.322 L1426.58 682.322 L1426.02 682.322 L1425.46 682.322 L1424.9 682.322 L1424.34 682.322 L1423.78 682.322 L1423.23 682.322 L1422.67 682.322 L1422.11 682.322 L1421.55 682.322 L1420.99 682.322 L1420.43 682.322 L1419.87 682.322 L1419.31 682.322 L1418.75 682.322 L1418.19 682.322 L1417.63 682.322 L1417.07 682.322 L1416.51 682.322 L1415.95 682.322 L1415.4 682.322 L1414.84 682.322 L1414.28 682.322 L1413.72 682.322 L1413.16 682.322 L1412.6 682.322 L1412.04 682.322 L1411.48 682.322 L1410.92 682.322 L1410.36 682.322 L1409.8 682.322 L1409.24 682.322 L1408.68 682.322 L1408.13 682.322 L1407.57 682.322 L1407.01 682.322 L1406.45 682.322 L1405.89 682.322 L1405.33 682.322 L1404.77 682.322 L1404.21 682.322 L1403.65 682.322 L1403.09 682.322 L1402.53 682.322 L1401.97 682.322 L1401.41 682.322 L1400.86 682.322 L1400.3 682.322 L1399.74 682.322 L1399.18 682.322 L1398.62 682.322 L1398.06 682.322 L1397.5 682.322 L1396.94 682.322 L1396.38 682.322 L1395.82 682.322 L1395.26 682.322 L1394.7 682.322 L1394.14 682.322 L1393.58 682.322 L1393.03 682.322 L1392.47 682.322 L1391.91 682.322 L1391.35 682.322 L1390.79 682.322 L1390.23 682.322 L1389.67 682.322 L1389.11 682.322 L1388.55 682.322 L1387.99 682.322 L1387.43 682.322 L1386.87 682.322 L1386.31 682.322 L1385.76 682.322 L1385.2 682.322 L1384.64 682.322 L1384.08 682.322 L1383.52 682.322 L1382.96 682.322 L1382.4 682.322 L1381.84 682.322 L1381.28 682.322 L1380.72 682.322 L1380.16 682.322 L1379.6 682.322 L1379.04 682.322 L1378.49 682.322 L1377.93 682.322 L1377.37 682.322 L1376.81 682.322 L1376.25 682.322 L1375.69 682.322 L1375.13 682.322 L1374.57 682.322 L1374.01 682.322 L1373.45 682.322 L1372.89 682.322 L1372.33 682.322 L1371.77 682.322 L1371.21 682.322 L1370.66 682.322 L1370.1 682.322 L1369.54 682.322 L1368.98 682.322 L1368.42 682.322 L1367.86 682.322 L1367.3 682.322 L1366.74 682.322 L1366.18 682.322 L1365.62 682.322 L1365.06 682.322 L1364.5 682.322 L1363.94 682.322 L1363.39 682.322 L1362.83 682.322 L1362.27 682.322 L1361.71 682.322 L1361.15 682.322 L1360.59 682.322 L1360.03 682.322 L1359.47 682.322 L1358.91 682.322 L1358.35 682.322 L1357.79 682.322 L1357.23 682.322 L1356.67 682.322 L1356.12 682.322 L1355.56 682.322 L1355 682.322 L1354.44 682.322 L1353.88 682.322 L1353.32 682.322 L1352.76 682.322 L1352.2 682.322 L1351.64 682.322 L1351.08 682.322 L1350.52 682.322 L1349.96 682.322 L1349.4 682.322 L1348.84 682.322 L1348.29 682.322 L1347.73 682.322 L1347.17 682.322 L1346.61 682.322 L1346.05 682.322 L1345.49 682.322 L1344.93 682.322 L1344.37 682.322 L1343.81 682.322 L1343.25 682.322 L1342.69 682.322 L1342.13 682.322 L1341.57 682.322 L1341.02 682.322 L1340.46 682.322 L1339.9 682.322 L1339.34 682.322 L1338.78 682.322 L1338.22 682.322 L1337.66 682.322 L1337.1 682.322 L1336.54 682.322 L1335.98 682.322 L1335.42 682.322 L1334.86 682.322 L1334.3 682.322 L1333.75 682.322 L1333.19 682.322 L1332.63 682.322 L1332.07 682.322 L1331.51 682.322 L1330.95 682.322 L1330.39 682.322 L1329.83 682.322 L1329.27 682.322 L1328.71 682.322 L1328.15 682.322 L1327.59 682.322 L1327.03 682.322 L1326.47 682.322 L1325.92 682.322 L1325.36 682.322 L1324.8 682.322 L1324.24 682.322 L1323.68 682.322 L1323.12 682.322 L1322.56 682.322 L1322 682.322 L1321.44 682.322 L1320.88 682.322 L1320.32 682.322 L1319.76 682.322 L1319.2 682.322 L1318.65 682.322 L1318.09 682.322 L1317.53 682.322 L1316.97 682.322 L1316.41 682.322 L1315.85 682.322 L1315.29 682.322 L1314.73 682.322 L1314.17 682.322 L1313.61 682.322 L1313.05 682.322 L1312.49 682.322 L1311.93 682.322 L1311.38 682.322 L1310.82 682.322 L1310.26 682.322 L1309.7 682.322 L1309.14 682.322 L1308.58 682.322 L1308.02 682.322 L1307.46 682.322 L1306.9 682.322 L1306.34 682.322 L1305.78 682.322 L1305.22 682.322 L1304.66 682.322 L1304.1 682.322 L1303.55 682.322 L1302.99 682.322 L1302.43 682.322 L1301.87 682.322 L1301.31 682.322 L1300.75 682.322 L1300.19 682.322 L1299.63 682.322 L1299.07 682.322 L1298.51 682.322 L1297.95 682.322 L1297.39 682.322 L1296.83 682.322 L1296.28 682.322 L1295.72 682.322 L1295.16 682.322 L1294.6 682.322 L1294.04 682.322 L1293.48 682.322 L1292.92 682.322 L1292.36 682.322 L1291.8 682.322 L1291.24 682.322 L1290.68 682.322 L1290.12 682.322 L1289.56 682.322 L1289 682.322 L1288.45 682.322 L1287.89 682.322 L1287.33 682.322 L1286.77 682.322 L1286.21 682.322 L1285.65 682.322 L1285.09 682.322 L1284.53 682.322 L1283.97 682.322 L1283.41 682.322 L1282.85 682.322 L1282.29 682.322 L1281.73 682.322 L1281.18 682.322 L1280.62 682.322 L1280.06 682.322 L1279.5 682.322 L1278.94 682.322 L1278.38 682.322 L1277.82 682.322 L1277.26 682.322 L1276.7 682.322 L1276.14 682.322 L1275.58 682.322 L1275.02 682.322 L1274.46 682.322 L1273.91 682.322 L1273.35 682.322 L1272.79 682.322 L1272.23 682.322 L1271.67 682.322 L1271.11 682.322 L1270.55 682.322 L1269.99 682.322 L1269.43 682.322 L1268.87 682.322 L1268.31 682.322 L1267.75 682.322 L1267.19 682.322 L1266.63 682.322 L1266.08 682.322 L1265.52 682.322 L1264.96 682.322 L1264.4 682.322 L1263.84 682.322 L1263.28 682.322 L1262.72 682.322 L1262.16 682.322 L1261.6 682.322 L1261.04 682.322 L1260.48 682.322 L1259.92 682.322 L1259.36 682.322 L1258.81 682.322 L1258.25 682.322 L1257.69 682.322 L1257.13 682.322 L1256.57 682.322 L1256.01 682.322 L1255.45 682.322 L1254.89 682.322 L1254.33 682.322 L1253.77 682.322 L1253.21 682.322 L1252.65 682.322 L1252.09 682.322 L1251.54 682.322 L1250.98 682.322 L1250.42 682.322 L1249.86 682.322 L1249.3 682.322 L1248.74 682.322 L1248.18 682.322 L1247.62 682.322 L1247.06 682.322 L1246.5 682.322 L1245.94 682.322 L1245.38 682.322 L1244.82 682.322 L1244.26 682.322 L1243.71 682.322 L1243.15 682.322 L1242.59 682.322 L1242.03 682.322 L1241.47 682.322 L1240.91 682.322 L1240.35 682.322 L1239.79 682.322 L1239.23 682.322 L1238.67 682.322 L1238.11 682.322 L1237.55 682.322 L1236.99 682.322 L1236.44 682.322 L1235.88 682.322 L1235.32 682.322 L1234.76 682.322 L1234.2 682.322 L1233.64 682.322 L1233.08 682.322 L1232.52 682.322 L1231.96 682.322 L1231.4 682.322 L1230.84 682.322 L1230.28 682.322 L1229.72 682.322 L1229.17 682.322 L1228.61 682.322 L1228.05 682.322 L1227.49 682.322 L1226.93 682.322 L1226.37 682.322 L1225.81 682.322 L1225.25 682.322 L1224.69 682.322 L1224.13 682.322 L1223.57 682.322 L1223.01 682.322 L1222.45 682.322 L1221.89 682.322 L1221.34 682.322 L1220.78 682.322 L1220.22 682.322 L1219.66 682.322 L1219.1 682.322 L1218.54 682.322 L1217.98 682.322 L1217.42 682.322 L1216.86 682.322 L1216.3 682.322 L1215.74 682.322 L1215.18 682.322 L1214.62 682.322 L1214.07 682.322 L1213.51 682.322 L1212.95 682.322 L1212.39 682.322 L1211.83 682.322 L1211.27 682.322 L1210.71 682.322 L1210.15 682.322 L1209.59 682.322 L1209.03 682.322 L1208.47 682.322 L1207.91 682.322 L1207.35 682.322 L1206.8 682.322 L1206.24 682.322 L1205.68 682.322 L1205.12 682.322 L1204.56 682.322 L1204 682.322 L1203.44 682.322 L1202.88 682.322 L1202.32 682.322 L1201.76 682.322 L1201.2 682.322 L1200.64 682.322 L1200.08 682.322 L1199.52 682.322 L1198.97 682.322 L1198.41 682.322 L1197.85 682.322 L1197.29 682.322 L1196.73 682.322 L1196.17 682.322 L1195.61 682.322 L1195.05 682.322 L1194.49 682.322 L1193.93 682.322 L1193.37 682.322 L1192.81 682.322 L1192.25 682.322 L1191.7 682.322 L1191.14 682.322 L1190.58 682.322 L1190.02 682.322 L1189.46 682.322 L1188.9 682.322 L1188.34 682.322 L1187.78 682.322 L1187.22 682.322 L1186.66 682.322 L1186.1 682.322 L1185.54 682.322 L1184.98 682.322 L1184.43 682.322 L1183.87 682.322 L1183.31 682.322 L1182.75 682.322 L1182.19 682.322 L1181.63 682.322 L1181.07 682.322 L1180.51 682.322 L1179.95 682.322 L1179.39 682.322 L1178.83 682.322 L1178.27 682.322 L1177.71 682.322 L1177.15 682.322 L1176.6 682.322 L1176.04 682.322 L1175.48 682.322 L1174.92 682.322 L1174.36 682.322 L1173.8 682.322 L1173.24 682.322 L1172.68 682.322 L1172.12 682.322 L1171.56 682.322 L1171 682.322 L1170.44 682.322 L1169.88 682.322 L1169.33 682.322 L1168.77 682.322 L1168.21 682.322 L1167.65 682.322 L1167.09 682.322 L1166.53 682.322 L1165.97 682.322 L1165.41 682.322 L1164.85 682.322 L1164.29 682.322 L1163.73 682.322 L1163.17 682.322 L1162.61 682.322 L1162.05 682.322 L1161.5 682.322 L1160.94 682.322 L1160.38 682.322 L1159.82 682.322 L1159.26 682.322 L1158.7 682.322 L1158.14 682.322 L1157.58 682.322 L1157.02 682.322 L1156.46 682.322 L1155.9 682.322 L1155.34 682.322 L1154.78 682.322 L1154.23 682.322 L1153.67 682.322 L1153.11 682.322 L1152.55 682.322 L1151.99 682.322 L1151.43 682.322 L1150.87 682.322 L1150.31 682.322 L1149.75 682.322 L1149.19 682.322 L1148.63 682.322 L1148.07 682.322 L1147.51 682.322 L1146.96 682.322 L1146.4 682.322 L1145.84 682.322 L1145.28 682.322 L1144.72 682.322 L1144.16 682.322 L1143.6 682.322 L1143.04 682.322 L1142.48 682.322 L1141.92 682.322 L1141.36 682.322 L1140.8 682.322 L1140.24 682.322 L1139.68 682.322 L1139.13 682.322 L1138.57 682.322 L1138.01 682.322 L1137.45 682.322 L1136.89 682.322 L1136.33 682.322 L1135.77 682.322 L1135.21 682.322 L1134.65 682.322 L1134.09 682.322 L1133.53 682.322 L1132.97 682.322 L1132.41 682.322 L1131.86 682.322 L1131.3 682.322 L1130.74 682.322 L1130.18 682.322 L1129.62 682.322 L1129.06 682.322 L1128.5 682.322 L1127.94 682.322 L1127.38 682.322 L1126.82 682.322 L1126.26 682.322 L1125.7 682.322 L1125.14 682.322 L1124.59 682.322 L1124.03 682.322 L1123.47 682.322 L1122.91 682.322 L1122.35 682.322 L1121.79 682.322 L1121.23 682.322 L1120.67 682.322 L1120.11 682.322 L1119.55 682.322 L1118.99 682.322 L1118.43 682.322 L1117.87 682.322 L1117.31 682.322 L1116.76 682.322 L1116.2 682.322 L1115.64 682.322 L1115.08 682.322 L1114.52 682.322 L1113.96 682.322 L1113.4 682.322 L1112.84 682.322 L1112.28 682.322 L1111.72 682.322 L1111.16 682.322 L1110.6 682.322 L1110.04 682.322 L1109.49 682.322 L1108.93 682.322 L1108.37 682.322 L1107.81 682.322 L1107.25 682.322 L1106.69 682.322 L1106.13 682.322 L1105.57 682.322 L1105.01 682.322 L1104.45 682.322 L1103.89 682.322 L1103.33 682.322 L1102.77 682.322 L1102.22 682.322 L1101.66 682.322 L1101.1 682.322 L1100.54 682.322 L1099.98 682.322 L1099.42 682.322 L1098.86 682.322 L1098.3 682.322 L1097.74 682.322 L1097.18 682.322 L1096.62 682.322 L1096.06 682.322 L1095.5 682.322 L1094.94 682.322 L1094.39 682.322 L1093.83 682.322 L1093.27 682.322 L1092.71 682.322 L1092.15 682.322 L1091.59 682.322 L1091.03 682.322 L1090.47 682.322 L1089.91 682.322 L1089.35 682.322 L1088.79 682.322 L1088.23 682.322 L1087.67 682.322 L1087.12 682.322 L1086.56 682.322 L1086 682.322 L1085.44 682.322 L1084.88 682.322 L1084.32 682.322 L1083.76 682.322 L1083.2 682.322 L1082.64 682.322 L1082.08 682.322 L1081.52 682.322 L1080.96 682.322 L1080.4 682.322 L1079.85 682.322 L1079.29 682.322 L1078.73 682.322 L1078.17 682.322 L1077.61 682.322 L1077.05 682.322 L1076.49 682.322 L1075.93 682.322 L1075.37 682.322 L1074.81 682.322 L1074.25 682.322 L1073.69 682.322 L1073.13 682.322 L1072.57 682.322 L1072.02 682.322 L1071.46 682.322 L1070.9 682.322 L1070.34 682.322 L1069.78 682.322 L1069.22 682.322 L1068.66 682.322 L1068.1 682.322 L1067.54 682.322 L1066.98 682.322 L1066.42 682.322 L1065.86 682.322 L1065.3 682.322 L1064.75 682.322 L1064.19 682.322 L1063.63 682.322 L1063.07 682.322 L1062.51 682.322 L1061.95 682.322 L1061.39 682.322 L1060.83 682.322 L1060.27 682.322 L1059.71 682.322 L1059.15 682.322 L1058.59 682.322 L1058.03 682.322 L1057.48 682.322 L1056.92 682.322 L1056.36 682.322 L1055.8 682.322 L1055.24 682.322 L1054.68 682.322 L1054.12 682.322 L1053.56 682.322 L1053 682.322 L1052.44 682.322 L1051.88 682.322 L1051.32 682.322 L1050.76 682.322 L1050.2 682.322 L1049.65 682.322 L1049.09 682.322 L1048.53 682.322 L1047.97 682.322 L1047.41 682.322 L1046.85 682.322 L1046.29 682.322 L1045.73 682.322 L1045.17 682.322 L1044.61 682.322 L1044.05 682.322 L1043.49 682.322 L1042.93 682.322 L1042.38 682.322 L1041.82 682.322 L1041.26 682.322 L1040.7 682.322 L1040.14 682.322 L1039.58 682.322 L1039.02 682.322 L1038.46 682.322 L1037.9 682.322 L1037.34 682.322 L1036.78 682.322 L1036.22 682.322 L1035.66 682.322 L1035.1 682.322 L1034.55 682.322 L1033.99 682.322 L1033.43 682.322 L1032.87 682.322 L1032.31 682.322 L1031.75 682.322 L1031.19 682.322 L1030.63 682.322 L1030.07 682.322 L1029.51 682.322 L1028.95 682.322 L1028.39 682.322 L1027.83 682.322 L1027.28 682.322 L1026.72 682.322 L1026.16 682.322 L1025.6 682.322 L1025.04 682.322 L1024.48 682.322 L1023.92 682.322 L1023.36 682.322 L1022.8 682.322 L1022.24 682.322 L1021.68 682.322 L1021.12 682.322 L1020.56 682.322 L1020.01 682.322 L1019.45 682.322 L1018.89 682.322 L1018.33 682.322 L1017.77 682.322 L1017.21 682.322 L1016.65 682.322 L1016.09 682.322 L1015.53 682.322 L1014.97 682.322 L1014.41 682.322 L1013.85 682.322 L1013.29 682.322 L1012.73 682.322 L1012.18 682.322 L1011.62 682.322 L1011.06 682.322 L1010.5 682.322 L1009.94 682.322 L1009.38 682.322 L1008.82 682.322 L1008.26 682.322 L1007.7 682.322 L1007.14 682.322 L1006.58 682.322 L1006.02 682.322 L1005.46 682.322 L1004.91 682.322 L1004.35 682.322 L1003.79 682.322 L1003.23 682.322 L1002.67 682.322 L1002.11 682.322 L1001.55 682.322 L1000.99 682.322 L1000.43 682.322 L999.872 682.322 L999.313 682.322 L998.754 682.322 L998.194 682.322 L997.635 682.322 L997.076 682.322 L996.517 682.322 L995.957 682.322 L995.398 682.322 L994.839 682.322 L994.28 682.322 L993.72 682.322 L993.161 682.322 L992.602 682.322 L992.043 682.322 L991.483 682.322 L990.924 682.322 L990.365 682.322 L989.806 682.322 L989.246 682.322 L988.687 682.322 L988.128 682.322 L987.569 682.322 L987.009 682.322 L986.45 682.322 L985.891 682.322 L985.332 682.322 L984.772 682.322 L984.213 682.322 L983.654 682.322 L983.095 682.322 L982.535 682.322 L981.976 682.322 L981.417 682.322 L980.858 682.322 L980.298 682.322 L979.739 682.322 L979.18 682.322 L978.621 682.322 L978.061 682.322 L977.502 682.322 L976.943 682.322 L976.384 682.322 L975.824 682.322 L975.265 682.322 L974.706 682.322 L974.147 682.322 L973.587 682.322 L973.028 682.322 L972.469 682.322 L971.91 682.322 L971.35 682.322 L970.791 682.322 L970.232 682.322 L969.673 682.322 L969.113 682.322 L968.554 682.322 L967.995 682.322 L967.436 682.322 L966.876 682.322 L966.317 682.322 L965.758 682.322 L965.199 682.322 L964.639 682.322 L964.08 682.322 L963.521 682.322 L962.962 682.322 L962.402 682.322 L961.843 682.322 L961.284 682.322 L960.725 682.322 L960.165 682.322 L959.606 682.322 L959.047 682.322 L958.488 682.322 L957.928 682.322 L957.369 682.322 L956.81 682.322 L956.251 682.322 L955.691 682.322 L955.132 682.322 L954.573 682.322 L954.014 682.322 L953.454 682.322 L952.895 682.322 L952.336 682.322 L951.777 682.322 L951.217 682.322 L950.658 682.322 L950.099 682.322 L949.54 682.322 L948.98 682.322 L948.421 682.322 L947.862 682.322 L947.303 682.322 L946.743 682.322 L946.184 682.322 L945.625 682.322 L945.066 682.322 L944.506 682.322 L943.947 682.322 L943.388 682.322 L942.829 682.322 L942.269 682.322 L941.71 682.322 L941.151 682.322 L940.592 682.322 L940.032 682.322 L939.473 682.322 L938.914 682.322 L938.355 682.322 L937.795 682.322 L937.236 682.322 L936.677 682.322 L936.118 682.322 L935.558 682.322 L934.999 682.322 L934.44 682.322 L933.881 682.322 L933.321 682.322 L932.762 682.322 L932.203 682.322 L931.644 682.322 L931.084 682.322 L930.525 682.322 L929.966 682.322 L929.406 682.322 L928.847 682.322 L928.288 682.322 L927.729 682.322 L927.169 682.322 L926.61 682.322 L926.051 682.322 L925.492 682.322 L924.932 682.322 L924.373 682.322 L923.814 682.322 L923.255 682.322 L922.695 682.322 L922.136 682.322 L921.577 682.322 L921.018 682.322 L920.458 682.322 L919.899 682.322 L919.34 682.322 L918.781 682.322 L918.221 682.322 L917.662 682.322 L917.103 682.322 L916.544 682.322 L915.984 682.322 L915.425 682.322 L914.866 682.322 L914.307 682.322 L913.747 682.322 L913.188 682.322 L912.629 682.322 L912.07 682.322 L911.51 682.322 L910.951 682.322 L910.392 682.322 L909.833 682.322 L909.273 682.322 L908.714 682.322 L908.155 682.322 L907.596 682.322 L907.036 682.322 L906.477 682.322 L905.918 682.322 L905.359 682.322 L904.799 682.322 L904.24 682.322 L903.681 682.322 L903.122 682.322 L902.562 682.322 L902.003 682.322 L901.444 682.322 L900.885 682.322 L900.325 682.322 L899.766 682.322 L899.207 682.322 L898.648 682.322 L898.088 682.322 L897.529 682.322 L896.97 682.322 L896.411 682.322 L895.851 682.322 L895.292 682.322 L894.733 682.322 L894.174 682.322 L893.614 682.322 L893.055 682.322 L892.496 682.322 L891.937 682.322 L891.377 682.322 L890.818 682.322 L890.259 682.322 L889.7 682.322 L889.14 682.322 L888.581 682.322 L888.022 682.322 L887.463 682.322 L886.903 682.322 L886.344 682.322 L885.785 682.322 L885.226 682.322 L884.666 682.322 L884.107 682.322 L883.548 682.322 L882.989 682.322 L882.429 682.322 L881.87 682.322 L881.311 682.322 L880.752 682.322 L880.192 682.322 L879.633 682.322 L879.074 682.322 L878.515 682.322 L877.955 682.322 L877.396 682.322 L876.837 682.322 L876.278 682.322 L875.718 682.322 L875.159 682.322 L874.6 682.322 L874.041 682.322 L873.481 682.322 L872.922 682.322 L872.363 682.322 L871.804 682.322 L871.244 682.322 L870.685 682.322 L870.126 682.322 L869.567 682.322 L869.007 682.322 L868.448 682.322 L867.889 682.322 L867.33 682.322 L866.77 682.322 L866.211 682.322 L865.652 682.322 L865.093 682.322 L864.533 682.322 L863.974 682.322 L863.415 682.322 L862.856 682.322 L862.296 682.322 L861.737 682.322 L861.178 682.322 L860.619 682.322 L860.059 682.322 L859.5 682.322 L858.941 682.322 L858.382 682.322 L857.822 682.322 L857.263 682.322 L856.704 682.322 L856.145 682.322 L855.585 682.322 L855.026 682.322 L854.467 682.322 L853.908 682.322 L853.348 682.322 L852.789 682.322 L852.23 682.322 L851.671 682.322 L851.111 682.322 L850.552 682.322 L849.993 682.322 L849.434 682.322 L848.874 682.322 L848.315 682.322 L847.756 682.322 L847.197 682.322 L846.637 682.322 L846.078 682.322 L845.519 682.322 L844.96 682.322 L844.4 682.322 L843.841 682.322 L843.282 682.322 L842.723 682.322 L842.163 682.322 L841.604 682.322 L841.045 682.322 L840.486 682.322 L839.926 682.322 L839.367 682.322 L838.808 682.322 L838.249 682.322 L837.689 682.322 L837.13 682.322 L836.571 682.322 L836.012 682.322 L835.452 682.322 L834.893 682.322 L834.334 682.322 L833.775 682.322 L833.215 682.322 L832.656 682.322 L832.097 682.322 L831.538 682.322 L830.978 682.322 L830.419 682.322 L829.86 682.322 L829.301 682.322 L828.741 682.322 L828.182 682.322 L827.623 682.322 L827.064 682.322 L826.504 682.322 L825.945 682.322 L825.386 682.322 L824.827 682.322 L824.267 682.322 L823.708 682.322 L823.149 682.322 L822.59 682.322 L822.03 682.322 L821.471 682.322 L820.912 682.322 L820.353 682.322 L819.793 682.322 L819.234 682.322 L818.675 682.322 L818.116 682.322 L817.556 682.322 L816.997 682.322 L816.438 682.322 L815.879 682.322 L815.319 682.322 L814.76 682.322 L814.201 682.322 L813.642 682.322 L813.082 682.322 L812.523 682.322 L811.964 682.322 L811.405 682.322 L810.845 682.322 L810.286 682.322 L809.727 682.322 L809.168 682.322 L808.608 682.322 L808.049 682.322 L807.49 682.322 L806.931 682.322 L806.371 682.322 L805.812 682.322 L805.253 682.322 L804.693 682.322 L804.134 682.322 L803.575 682.322 L803.016 682.322 L802.456 682.322 L801.897 682.322 L801.338 682.322 L800.779 682.322 L800.219 682.322 L799.66 682.322 L799.101 682.322 L798.542 682.322 L797.982 682.322 L797.423 682.322 L796.864 682.322 L796.305 682.322 L795.745 682.322 L795.186 682.322 L794.627 682.322 L794.068 682.322 L793.508 682.322 L792.949 682.322 L792.39 682.322 L791.831 682.322 L791.271 682.322 L790.712 682.322 L790.153 682.322 L789.594 682.322 L789.034 682.322 L788.475 682.322 L787.916 682.322 L787.357 682.322 L786.797 682.322 L786.238 682.322 L785.679 682.322 L785.12 682.322 L784.56 682.322 L784.001 682.322 L783.442 682.322 L782.883 682.322 L782.323 682.322 L781.764 682.322 L781.205 682.322 L780.646 682.322 L780.086 682.322 L779.527 682.322 L778.968 682.322 L778.409 682.322 L777.849 682.322 L777.29 682.322 L776.731 682.322 L776.172 682.322 L775.612 682.322 L775.053 682.322 L774.494 682.322 L773.935 682.322 L773.375 682.322 L772.816 682.322 L772.257 682.322 L771.698 682.322 L771.138 682.322 L770.579 682.322 L770.02 682.322 L769.461 682.322 L768.901 682.322 L768.342 682.322 L767.783 682.322 L767.224 682.322 L766.664 682.322 L766.105 682.322 L765.546 682.322 L764.987 682.322 L764.427 682.322 L763.868 682.322 L763.309 682.322 L762.75 682.322 L762.19 682.322 L761.631 682.322 L761.072 682.322 L760.513 682.322 L759.953 682.322 L759.394 682.322 L758.835 682.322 L758.276 682.322 L757.716 682.322 L757.157 682.322 L756.598 682.322 L756.039 682.322 L755.479 682.322 L754.92 682.322 L754.361 682.322 L753.802 682.322 L753.242 682.322 L752.683 682.322 L752.124 682.322 L751.565 682.322 L751.005 682.322 L750.446 682.322 L749.887 682.322 L749.328 682.322 L748.768 682.322 L748.209 682.322 L747.65 682.322 L747.091 682.322 L746.531 682.322 L745.972 682.322 L745.413 682.322 L744.854 682.322 L744.294 682.322 L743.735 682.322 L743.176 682.322 L742.617 682.322 L742.057 682.322 L741.498 682.322 L740.939 682.322 L740.38 682.322 L739.82 682.322 L739.261 682.322 L738.702 682.322 L738.143 682.322 L737.583 682.322 L737.024 682.322 L736.465 682.322 L735.906 682.322 L735.346 682.322 L734.787 682.322 L734.228 682.322 L733.669 682.322 L733.109 682.322 L732.55 682.322 L731.991 682.322 L731.432 682.322 L730.872 682.322 L730.313 682.322 L729.754 682.322 L729.195 682.322 L728.635 682.322 L728.076 682.322 L727.517 682.322 L726.958 682.322 L726.398 682.322 L725.839 682.322 L725.28 682.322 L724.721 682.322 L724.161 682.322 L723.602 682.322 L723.043 682.322 L722.484 682.322 L721.924 682.322 L721.365 682.322 L720.806 682.322 L720.247 682.322  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.533 720.806,683.533 721.365,683.533 721.924,683.533 722.484,683.533 723.043,683.533 723.602,683.533 724.161,683.533 724.721,683.533 725.28,683.533 725.839,683.533 726.398,683.533 726.958,683.533 727.517,683.533 728.076,683.533 728.635,683.533 729.195,683.533 729.754,683.533 730.313,683.533 730.872,683.533 731.432,683.533 731.991,683.533 732.55,683.533 733.109,683.533 733.669,683.533 734.228,683.533 734.787,683.533 735.346,683.533 735.906,683.533 736.465,683.533 737.024,683.533 737.583,683.533 738.143,683.533 738.702,683.533 739.261,683.533 739.82,683.533 740.38,683.533 740.939,683.533 741.498,683.533 742.057,683.533 742.617,683.533 743.176,683.533 743.735,683.533 744.294,683.533 744.854,683.533 745.413,683.533 745.972,683.533 746.531,683.533 747.091,683.533 747.65,683.533 748.209,683.533 748.768,683.533 749.328,683.533 749.887,683.533 750.446,683.533 751.005,683.533 751.565,683.533 752.124,683.533 752.683,683.533 753.242,683.533 753.802,683.533 754.361,683.533 754.92,683.533 755.479,683.533 756.039,683.533 756.598,683.533 757.157,683.533 757.716,683.533 758.276,683.533 758.835,683.533 759.394,683.533 759.953,683.533 760.513,683.533 761.072,683.533 761.631,683.533 762.19,683.533 762.75,683.533 763.309,683.533 763.868,683.533 764.427,683.533 764.987,683.533 765.546,683.533 766.105,683.533 766.664,683.533 767.224,683.533 767.783,683.533 768.342,683.533 768.901,683.533 769.461,683.533 770.02,683.533 770.579,683.533 771.138,683.533 771.698,683.533 772.257,683.533 772.816,683.533 773.375,683.533 773.935,683.533 774.494,683.533 775.053,683.533 775.612,683.533 776.172,683.533 776.731,683.533 777.29,683.533 777.849,683.533 778.409,683.533 778.968,683.533 779.527,683.533 780.086,683.533 780.646,683.533 781.205,683.533 781.764,683.533 782.323,683.533 782.883,683.533 783.442,683.533 784.001,683.533 784.56,683.533 785.12,683.533 785.679,683.533 786.238,683.533 786.797,683.533 787.357,683.533 787.916,683.533 788.475,683.533 789.034,683.533 789.594,683.533 790.153,683.533 790.712,683.533 791.271,683.533 791.831,683.533 792.39,683.533 792.949,683.533 793.508,683.533 794.068,683.533 794.627,683.533 795.186,683.533 795.745,683.533 796.305,683.533 796.864,683.533 797.423,683.533 797.982,683.533 798.542,683.533 799.101,683.533 799.66,683.533 800.219,683.533 800.779,683.533 801.338,683.533 801.897,683.533 802.456,683.533 803.016,683.533 803.575,683.533 804.134,683.533 804.693,683.533 805.253,683.533 805.812,683.533 806.371,683.533 806.931,683.533 807.49,683.533 808.049,683.533 808.608,683.533 809.168,683.533 809.727,683.533 810.286,683.533 810.845,683.533 811.405,683.533 811.964,683.533 812.523,683.533 813.082,683.533 813.642,683.533 814.201,683.533 814.76,683.533 815.319,683.533 815.879,683.533 816.438,683.533 816.997,683.533 817.556,683.533 818.116,683.533 818.675,683.533 819.234,683.533 819.793,683.533 820.353,683.533 820.912,683.533 821.471,683.533 822.03,683.533 822.59,683.533 823.149,683.533 823.708,683.533 824.267,683.533 824.827,683.533 825.386,683.533 825.945,683.533 826.504,683.533 827.064,683.533 827.623,683.533 828.182,683.533 828.741,683.533 829.301,683.533 829.86,683.533 830.419,683.533 830.978,683.533 831.538,683.533 832.097,683.533 832.656,683.533 833.215,683.533 833.775,683.533 834.334,683.533 834.893,683.533 835.452,683.533 836.012,683.533 836.571,683.533 837.13,683.533 837.689,683.533 838.249,683.533 838.808,683.533 839.367,683.533 839.926,683.533 840.486,683.533 841.045,683.533 841.604,683.533 842.163,683.533 842.723,683.533 843.282,683.533 843.841,683.533 844.4,683.533 844.96,683.533 845.519,683.533 846.078,683.533 846.637,683.533 847.197,683.533 847.756,683.533 848.315,683.533 848.874,683.533 849.434,683.533 849.993,683.533 850.552,683.533 851.111,683.533 851.671,683.533 852.23,683.533 852.789,683.533 853.348,683.533 853.908,683.533 854.467,683.533 855.026,683.533 855.585,683.533 856.145,683.533 856.704,683.533 857.263,683.533 857.822,683.533 858.382,683.533 858.941,683.533 859.5,683.533 860.059,683.533 860.619,683.533 861.178,683.533 861.737,683.533 862.296,683.533 862.856,683.533 863.415,683.533 863.974,683.533 864.533,683.533 865.093,683.533 865.652,683.533 866.211,683.533 866.77,683.533 867.33,683.533 867.889,683.533 868.448,683.533 869.007,683.533 869.567,683.533 870.126,683.533 870.685,683.533 871.244,683.533 871.804,683.533 872.363,683.533 872.922,683.533 873.481,683.533 874.041,683.533 874.6,683.533 875.159,683.533 875.718,683.533 876.278,683.533 876.837,683.533 877.396,683.533 877.955,683.533 878.515,683.533 879.074,683.533 879.633,683.533 880.192,683.533 880.752,683.533 881.311,683.533 881.87,683.533 882.429,683.533 882.989,683.533 883.548,683.533 884.107,683.533 884.666,683.533 885.226,683.533 885.785,683.533 886.344,683.533 886.903,683.533 887.463,683.533 888.022,683.533 888.581,683.533 889.14,683.533 889.7,683.533 890.259,683.533 890.818,683.533 891.377,683.533 891.937,683.533 892.496,683.533 893.055,683.533 893.614,683.533 894.174,683.533 894.733,683.533 895.292,683.533 895.851,683.533 896.411,683.533 896.97,683.533 897.529,683.533 898.088,683.533 898.648,683.533 899.207,683.533 899.766,683.533 900.325,683.533 900.885,683.533 901.444,683.533 902.003,683.533 902.562,683.533 903.122,683.533 903.681,683.533 904.24,683.533 904.799,683.533 905.359,683.533 905.918,683.533 906.477,683.533 907.036,683.533 907.596,683.533 908.155,683.533 908.714,683.533 909.273,683.533 909.833,683.533 910.392,683.533 910.951,683.533 911.51,683.533 912.07,683.533 912.629,683.533 913.188,683.533 913.747,683.533 914.307,683.533 914.866,683.533 915.425,683.533 915.984,683.533 916.544,683.533 917.103,683.533 917.662,683.533 918.221,683.533 918.781,683.533 919.34,683.533 919.899,683.533 920.458,683.533 921.018,683.533 921.577,683.533 922.136,683.533 922.695,683.533 923.255,683.533 923.814,683.533 924.373,683.533 924.932,683.533 925.492,683.533 926.051,683.533 926.61,683.533 927.169,683.533 927.729,683.533 928.288,683.533 928.847,683.533 929.406,683.533 929.966,683.533 930.525,683.533 931.084,683.533 931.644,683.533 932.203,683.533 932.762,683.533 933.321,683.533 933.881,683.533 934.44,683.533 934.999,683.533 935.558,683.533 936.118,683.533 936.677,683.533 937.236,683.533 937.795,683.533 938.355,683.533 938.914,683.533 939.473,683.533 940.032,683.533 940.592,683.533 941.151,683.533 941.71,683.533 942.269,683.533 942.829,683.533 943.388,683.533 943.947,683.533 944.506,683.533 945.066,683.533 945.625,683.533 946.184,683.533 946.743,683.533 947.303,683.533 947.862,683.533 948.421,683.533 948.98,683.533 949.54,683.533 950.099,683.533 950.658,683.533 951.217,683.533 951.777,683.533 952.336,683.533 952.895,683.533 953.454,683.533 954.014,683.533 954.573,683.533 955.132,683.533 955.691,683.533 956.251,683.533 956.81,683.533 957.369,683.533 957.928,683.533 958.488,683.533 959.047,683.533 959.606,683.533 960.165,683.533 960.725,683.533 961.284,683.533 961.843,683.533 962.402,683.533 962.962,683.533 963.521,683.533 964.08,683.533 964.639,683.533 965.199,683.533 965.758,683.533 966.317,683.533 966.876,683.533 967.436,683.533 967.995,683.533 968.554,683.533 969.113,683.533 969.673,683.533 970.232,683.533 970.791,683.533 971.35,683.533 971.91,683.533 972.469,683.533 973.028,683.533 973.587,683.533 974.147,683.533 974.706,683.533 975.265,683.533 975.824,683.533 976.384,683.533 976.943,683.533 977.502,683.533 978.061,683.533 978.621,683.533 979.18,683.533 979.739,683.533 980.298,683.533 980.858,683.533 981.417,683.533 981.976,683.533 982.535,683.533 983.095,683.533 983.654,683.533 984.213,683.533 984.772,683.533 985.332,683.533 985.891,683.533 986.45,683.533 987.009,683.533 987.569,683.533 988.128,683.533 988.687,683.533 989.246,683.533 989.806,683.533 990.365,683.533 990.924,683.533 991.483,683.533 992.043,683.533 992.602,683.533 993.161,683.533 993.72,683.533 994.28,683.533 994.839,683.533 995.398,683.533 995.957,683.533 996.517,683.533 997.076,683.533 997.635,683.533 998.194,683.533 998.754,683.533 999.313,683.533 999.872,683.533 1000.43,683.533 1000.99,683.533 1001.55,683.533 1002.11,683.533 1002.67,683.533 1003.23,683.533 1003.79,683.533 1004.35,683.533 1004.91,683.533 1005.46,683.533 1006.02,683.533 1006.58,683.533 1007.14,683.533 1007.7,683.533 1008.26,683.533 1008.82,683.533 1009.38,683.533 1009.94,683.533 1010.5,683.533 1011.06,683.533 1011.62,683.533 1012.18,683.533 1012.73,683.533 1013.29,683.533 1013.85,683.533 1014.41,683.533 1014.97,683.533 1015.53,683.533 1016.09,683.533 1016.65,683.533 1017.21,683.533 1017.77,683.533 1018.33,683.533 1018.89,683.533 1019.45,683.533 1020.01,683.533 1020.56,683.533 1021.12,683.533 1021.68,683.533 1022.24,683.533 1022.8,683.533 1023.36,683.533 1023.92,683.533 1024.48,683.533 1025.04,683.533 1025.6,683.533 1026.16,683.533 1026.72,683.533 1027.28,683.533 1027.83,683.533 1028.39,683.533 1028.95,683.533 1029.51,683.533 1030.07,683.533 1030.63,683.533 1031.19,683.533 1031.75,683.533 1032.31,683.533 1032.87,683.533 1033.43,683.533 1033.99,683.533 1034.55,683.533 1035.1,683.533 1035.66,683.533 1036.22,683.533 1036.78,683.533 1037.34,683.533 1037.9,683.533 1038.46,683.533 1039.02,683.533 1039.58,683.533 1040.14,683.533 1040.7,683.533 1041.26,683.533 1041.82,683.533 1042.38,683.533 1042.93,683.533 1043.49,683.533 1044.05,683.533 1044.61,683.533 1045.17,683.533 1045.73,683.533 1046.29,683.533 1046.85,683.533 1047.41,683.533 1047.97,683.533 1048.53,683.533 1049.09,683.533 1049.65,683.533 1050.2,683.533 1050.76,683.533 1051.32,683.533 1051.88,683.533 1052.44,683.533 1053,683.533 1053.56,683.533 1054.12,683.533 1054.68,683.533 1055.24,683.533 1055.8,683.533 1056.36,683.533 1056.92,683.533 1057.48,683.533 1058.03,683.533 1058.59,683.533 1059.15,683.533 1059.71,683.533 1060.27,683.533 1060.83,683.533 1061.39,683.533 1061.95,683.533 1062.51,683.533 1063.07,683.533 1063.63,683.533 1064.19,683.533 1064.75,683.533 1065.3,683.533 1065.86,683.533 1066.42,683.533 1066.98,683.533 1067.54,683.533 1068.1,683.533 1068.66,683.533 1069.22,683.533 1069.78,683.533 1070.34,683.533 1070.9,683.533 1071.46,683.533 1072.02,683.533 1072.57,683.533 1073.13,683.533 1073.69,683.533 1074.25,683.533 1074.81,683.533 1075.37,683.533 1075.93,683.533 1076.49,683.533 1077.05,683.533 1077.61,683.533 1078.17,683.533 1078.73,683.533 1079.29,683.533 1079.85,683.533 1080.4,683.533 1080.96,683.533 1081.52,683.533 1082.08,683.533 1082.64,683.533 1083.2,683.533 1083.76,683.533 1084.32,683.533 1084.88,683.533 1085.44,683.533 1086,683.533 1086.56,683.533 1087.12,683.533 1087.67,683.533 1088.23,683.533 1088.79,683.533 1089.35,683.533 1089.91,683.533 1090.47,683.533 1091.03,683.533 1091.59,683.533 1092.15,683.533 1092.71,683.533 1093.27,683.533 1093.83,683.533 1094.39,683.533 1094.94,683.533 1095.5,683.533 1096.06,683.533 1096.62,683.533 1097.18,683.533 1097.74,683.533 1098.3,683.533 1098.86,683.533 1099.42,683.533 1099.98,683.533 1100.54,683.533 1101.1,683.533 1101.66,683.533 1102.22,683.533 1102.77,683.533 1103.33,683.533 1103.89,683.533 1104.45,683.533 1105.01,683.533 1105.57,683.533 1106.13,683.533 1106.69,683.533 1107.25,683.533 1107.81,683.533 1108.37,683.533 1108.93,683.533 1109.49,683.533 1110.04,683.533 1110.6,683.533 1111.16,683.533 1111.72,683.533 1112.28,683.533 1112.84,683.533 1113.4,683.533 1113.96,683.533 1114.52,683.533 1115.08,683.533 1115.64,683.533 1116.2,683.533 1116.76,683.533 1117.31,683.533 1117.87,683.533 1118.43,683.533 1118.99,683.533 1119.55,683.533 1120.11,683.533 1120.67,683.533 1121.23,683.533 1121.79,683.533 1122.35,683.533 1122.91,683.533 1123.47,683.533 1124.03,683.533 1124.59,683.533 1125.14,683.533 1125.7,683.533 1126.26,683.533 1126.82,683.533 1127.38,683.533 1127.94,683.533 1128.5,683.533 1129.06,683.533 1129.62,683.533 1130.18,683.533 1130.74,683.533 1131.3,683.533 1131.86,683.533 1132.41,683.533 1132.97,683.533 1133.53,683.533 1134.09,683.533 1134.65,683.533 1135.21,683.533 1135.77,683.533 1136.33,683.533 1136.89,683.533 1137.45,683.533 1138.01,683.533 1138.57,683.533 1139.13,683.533 1139.68,683.533 1140.24,683.533 1140.8,683.533 1141.36,683.533 1141.92,683.533 1142.48,683.533 1143.04,683.533 1143.6,683.533 1144.16,683.533 1144.72,683.533 1145.28,683.533 1145.84,683.533 1146.4,683.533 1146.96,683.533 1147.51,683.533 1148.07,683.533 1148.63,683.533 1149.19,683.533 1149.75,683.533 1150.31,683.533 1150.87,683.533 1151.43,683.533 1151.99,683.533 1152.55,683.533 1153.11,683.533 1153.67,683.533 1154.23,683.533 1154.78,683.533 1155.34,683.533 1155.9,683.533 1156.46,683.533 1157.02,683.533 1157.58,683.533 1158.14,683.533 1158.7,683.533 1159.26,683.533 1159.82,683.533 1160.38,683.533 1160.94,683.533 1161.5,683.533 1162.05,683.533 1162.61,683.533 1163.17,683.533 1163.73,683.533 1164.29,683.533 1164.85,683.533 1165.41,683.533 1165.97,683.533 1166.53,683.533 1167.09,683.533 1167.65,683.533 1168.21,683.533 1168.77,683.533 1169.33,683.533 1169.88,683.533 1170.44,683.533 1171,683.533 1171.56,683.533 1172.12,683.533 1172.68,683.533 1173.24,683.533 1173.8,683.533 1174.36,683.533 1174.92,683.533 1175.48,683.533 1176.04,683.533 1176.6,683.533 1177.15,683.533 1177.71,683.533 1178.27,683.533 1178.83,683.533 1179.39,683.533 1179.95,683.533 1180.51,683.533 1181.07,683.533 1181.63,683.533 1182.19,683.533 1182.75,683.533 1183.31,683.533 1183.87,683.533 1184.43,683.533 1184.98,683.533 1185.54,683.533 1186.1,683.533 1186.66,683.533 1187.22,683.533 1187.78,683.533 1188.34,683.533 1188.9,683.533 1189.46,683.533 1190.02,683.533 1190.58,683.533 1191.14,683.533 1191.7,683.533 1192.25,683.533 1192.81,683.533 1193.37,683.533 1193.93,683.533 1194.49,683.533 1195.05,683.533 1195.61,683.533 1196.17,683.533 1196.73,683.533 1197.29,683.533 1197.85,683.533 1198.41,683.533 1198.97,683.533 1199.52,683.533 1200.08,683.533 1200.64,683.533 1201.2,683.533 1201.76,683.533 1202.32,683.533 1202.88,683.533 1203.44,683.533 1204,683.533 1204.56,683.533 1205.12,683.533 1205.68,683.533 1206.24,683.533 1206.8,683.533 1207.35,683.533 1207.91,683.533 1208.47,683.533 1209.03,683.533 1209.59,683.533 1210.15,683.533 1210.71,683.533 1211.27,683.533 1211.83,683.533 1212.39,683.533 1212.95,683.533 1213.51,683.533 1214.07,683.533 1214.62,683.533 1215.18,683.533 1215.74,683.533 1216.3,683.533 1216.86,683.533 1217.42,683.533 1217.98,683.533 1218.54,683.533 1219.1,683.533 1219.66,683.533 1220.22,683.533 1220.78,683.533 1221.34,683.533 1221.89,683.533 1222.45,683.533 1223.01,683.533 1223.57,683.533 1224.13,683.533 1224.69,683.533 1225.25,683.533 1225.81,683.533 1226.37,683.533 1226.93,683.533 1227.49,683.533 1228.05,683.533 1228.61,683.533 1229.17,683.533 1229.72,683.533 1230.28,683.533 1230.84,683.533 1231.4,683.533 1231.96,683.533 1232.52,683.533 1233.08,683.533 1233.64,683.533 1234.2,683.533 1234.76,683.533 1235.32,683.533 1235.88,683.533 1236.44,683.533 1236.99,683.533 1237.55,683.533 1238.11,683.533 1238.67,683.533 1239.23,683.533 1239.79,683.533 1240.35,683.533 1240.91,683.533 1241.47,683.533 1242.03,683.533 1242.59,683.533 1243.15,683.533 1243.71,683.533 1244.26,683.533 1244.82,683.533 1245.38,683.533 1245.94,683.533 1246.5,683.533 1247.06,683.533 1247.62,683.533 1248.18,683.533 1248.74,683.533 1249.3,683.533 1249.86,683.533 1250.42,683.533 1250.98,683.533 1251.54,683.533 1252.09,683.533 1252.65,683.533 1253.21,683.533 1253.77,683.533 1254.33,683.533 1254.89,683.533 1255.45,683.533 1256.01,683.533 1256.57,683.533 1257.13,683.533 1257.69,683.533 1258.25,683.533 1258.81,683.533 1259.36,683.533 1259.92,683.533 1260.48,683.533 1261.04,683.533 1261.6,683.533 1262.16,683.533 1262.72,683.533 1263.28,683.533 1263.84,683.533 1264.4,683.533 1264.96,683.533 1265.52,683.533 1266.08,683.533 1266.63,683.533 1267.19,683.533 1267.75,683.533 1268.31,683.533 1268.87,683.533 1269.43,683.533 1269.99,683.533 1270.55,683.533 1271.11,683.533 1271.67,683.533 1272.23,683.533 1272.79,683.533 1273.35,683.533 1273.91,683.533 1274.46,683.533 1275.02,683.533 1275.58,683.533 1276.14,683.533 1276.7,683.533 1277.26,683.533 1277.82,683.533 1278.38,683.533 1278.94,683.533 1279.5,683.533 1280.06,683.533 1280.62,683.533 1281.18,683.533 1281.73,683.533 1282.29,683.533 1282.85,683.533 1283.41,683.533 1283.97,683.533 1284.53,683.533 1285.09,683.533 1285.65,683.533 1286.21,683.533 1286.77,683.533 1287.33,683.533 1287.89,683.533 1288.45,683.533 1289,683.533 1289.56,683.533 1290.12,683.533 1290.68,683.533 1291.24,683.533 1291.8,683.533 1292.36,683.533 1292.92,683.533 1293.48,683.533 1294.04,683.533 1294.6,683.533 1295.16,683.533 1295.72,683.533 1296.28,683.533 1296.83,683.533 1297.39,683.533 1297.95,683.533 1298.51,683.533 1299.07,683.533 1299.63,683.533 1300.19,683.533 1300.75,683.533 1301.31,683.533 1301.87,683.533 1302.43,683.533 1302.99,683.533 1303.55,683.533 1304.1,683.533 1304.66,683.533 1305.22,683.533 1305.78,683.533 1306.34,683.533 1306.9,683.533 1307.46,683.533 1308.02,683.533 1308.58,683.533 1309.14,683.533 1309.7,683.533 1310.26,683.533 1310.82,683.533 1311.38,683.533 1311.93,683.533 1312.49,683.533 1313.05,683.533 1313.61,683.533 1314.17,683.533 1314.73,683.533 1315.29,683.533 1315.85,683.533 1316.41,683.533 1316.97,683.533 1317.53,683.533 1318.09,683.533 1318.65,683.533 1319.2,683.533 1319.76,683.533 1320.32,683.533 1320.88,683.533 1321.44,683.533 1322,683.533 1322.56,683.533 1323.12,683.533 1323.68,683.533 1324.24,683.533 1324.8,683.533 1325.36,683.533 1325.92,683.533 1326.47,683.533 1327.03,683.533 1327.59,683.533 1328.15,683.533 1328.71,683.533 1329.27,683.533 1329.83,683.533 1330.39,683.533 1330.95,683.533 1331.51,683.533 1332.07,683.533 1332.63,683.533 1333.19,683.533 1333.75,683.533 1334.3,683.533 1334.86,683.533 1335.42,683.533 1335.98,683.533 1336.54,683.533 1337.1,683.533 1337.66,683.533 1338.22,683.533 1338.78,683.533 1339.34,683.533 1339.9,683.533 1340.46,683.533 1341.02,683.533 1341.57,683.533 1342.13,683.533 1342.69,683.533 1343.25,683.533 1343.81,683.533 1344.37,683.533 1344.93,683.533 1345.49,683.533 1346.05,683.533 1346.61,683.533 1347.17,683.533 1347.73,683.533 1348.29,683.533 1348.84,683.533 1349.4,683.533 1349.96,683.533 1350.52,683.533 1351.08,683.533 1351.64,683.533 1352.2,683.533 1352.76,683.533 1353.32,683.533 1353.88,683.533 1354.44,683.533 1355,683.533 1355.56,683.533 1356.12,683.533 1356.67,683.533 1357.23,683.533 1357.79,683.533 1358.35,683.533 1358.91,683.533 1359.47,683.533 1360.03,683.533 1360.59,683.533 1361.15,683.533 1361.71,683.533 1362.27,683.533 1362.83,683.533 1363.39,683.533 1363.94,683.533 1364.5,683.533 1365.06,683.533 1365.62,683.533 1366.18,683.533 1366.74,683.533 1367.3,683.533 1367.86,683.533 1368.42,683.533 1368.98,683.533 1369.54,683.533 1370.1,683.533 1370.66,683.533 1371.21,683.533 1371.77,683.533 1372.33,683.533 1372.89,683.533 1373.45,683.533 1374.01,683.533 1374.57,683.533 1375.13,683.533 1375.69,683.533 1376.25,683.533 1376.81,683.533 1377.37,683.533 1377.93,683.533 1378.49,683.533 1379.04,683.533 1379.6,683.533 1380.16,683.533 1380.72,683.533 1381.28,683.533 1381.84,683.533 1382.4,683.533 1382.96,683.533 1383.52,683.533 1384.08,683.533 1384.64,683.533 1385.2,683.533 1385.76,683.533 1386.31,683.533 1386.87,683.533 1387.43,683.533 1387.99,683.533 1388.55,683.533 1389.11,683.533 1389.67,683.533 1390.23,683.533 1390.79,683.533 1391.35,683.533 1391.91,683.533 1392.47,683.533 1393.03,683.533 1393.58,683.533 1394.14,683.533 1394.7,683.533 1395.26,683.533 1395.82,683.533 1396.38,683.533 1396.94,683.533 1397.5,683.533 1398.06,683.533 1398.62,683.533 1399.18,683.533 1399.74,683.533 1400.3,683.533 1400.86,683.533 1401.41,683.533 1401.97,683.533 1402.53,683.533 1403.09,683.533 1403.65,683.533 1404.21,683.533 1404.77,683.533 1405.33,683.533 1405.89,683.533 1406.45,683.533 1407.01,683.533 1407.57,683.533 1408.13,683.533 1408.68,683.533 1409.24,683.533 1409.8,683.533 1410.36,683.533 1410.92,683.533 1411.48,683.533 1412.04,683.533 1412.6,683.533 1413.16,683.533 1413.72,683.533 1414.28,683.533 1414.84,683.533 1415.4,683.533 1415.95,683.533 1416.51,683.533 1417.07,683.533 1417.63,683.533 1418.19,683.533 1418.75,683.533 1419.31,683.533 1419.87,683.533 1420.43,683.533 1420.99,683.533 1421.55,683.533 1422.11,683.533 1422.67,683.533 1423.23,683.533 1423.78,683.533 1424.34,683.533 1424.9,683.533 1425.46,683.533 1426.02,683.533 1426.58,683.533 1427.14,683.533 1427.7,683.533 1428.26,683.533 1428.82,683.533 1429.38,683.533 1429.94,683.533 1430.5,683.533 1431.05,683.533 1431.61,683.533 1432.17,683.533 1432.73,683.533 1433.29,683.533 1433.85,683.533 1434.41,683.533 1434.97,683.533 1435.53,683.533 1436.09,683.533 1436.65,683.533 1437.21,683.533 1437.77,683.533 1438.33,683.533 1438.88,683.533 1439.44,683.533 1440,683.533 1440.56,683.533 1441.12,683.533 1441.68,683.533 1442.24,683.533 1442.8,683.533 1443.36,683.533 1443.92,683.533 1444.48,683.533 1445.04,683.533 1445.6,683.533 1446.15,683.533 1446.71,683.533 1447.27,683.533 1447.83,683.533 1448.39,683.533 1448.95,683.533 1449.51,683.533 1450.07,683.533 1450.63,683.533 1451.19,683.533 1451.75,683.533 1452.31,683.533 1452.87,683.533 1453.42,683.533 1453.98,683.533 1454.54,683.533 1455.1,683.533 1455.66,683.533 1456.22,683.533 1456.78,683.533 1457.34,683.533 1457.9,683.533 1458.46,683.533 1459.02,683.533 1459.58,683.533 1460.14,683.533 1460.7,683.533 1461.25,683.533 1461.81,683.533 1462.37,683.533 1462.93,683.533 1463.49,683.533 1464.05,683.533 1464.61,683.533 1465.17,683.533 1465.73,683.533 1466.29,683.533 1466.85,683.533 1467.41,683.533 1467.97,683.533 1468.52,683.533 1469.08,683.533 1469.64,683.533 1470.2,683.533 1470.76,683.533 1471.32,683.533 1471.88,683.533 1472.44,683.533 1473,683.533 1473.56,683.533 1474.12,683.533 1474.68,683.533 1475.24,683.533 1475.79,683.533 1476.35,683.533 1476.91,683.533 1477.47,683.533 1478.03,683.533 1478.59,683.533 1479.15,683.533 1479.71,683.533 1480.27,683.533 1480.83,683.533 1481.39,683.533 1481.95,683.533 1482.51,683.533 1483.07,683.533 1483.62,683.533 1484.18,683.533 1484.74,683.533 1485.3,683.533 1485.86,683.533 1486.42,683.533 1486.98,683.533 1487.54,683.533 1488.1,683.533 1488.66,683.533 1489.22,683.533 1489.78,683.533 1490.34,683.533 1490.89,683.533 1491.45,683.533 1492.01,683.533 1492.57,683.533 1493.13,683.533 1493.69,683.533 1494.25,683.533 1494.81,683.533 1495.37,683.533 1495.93,683.533 1496.49,683.533 1497.05,683.533 1497.61,683.533 1498.16,683.533 1498.72,683.533 1499.28,683.533 1499.84,683.533 1500.4,683.533 1500.96,683.533 1501.52,683.533 1502.08,683.533 1502.64,683.533 1503.2,683.533 1503.76,683.533 1504.32,683.533 1504.88,683.533 1505.44,683.533 1505.99,683.533 1506.55,683.533 1507.11,683.533 1507.67,683.533 1508.23,683.533 1508.79,683.533 1509.35,683.533 1509.91,683.533 1510.47,683.533 1511.03,683.533 1511.59,683.533 1512.15,683.533 1512.71,683.533 1513.26,683.533 1513.82,683.533 1514.38,683.533 1514.94,683.533 1515.5,683.533 1516.06,683.533 1516.62,683.533 1517.18,683.533 1517.74,683.533 1518.3,683.533 1518.86,683.533 1519.42,683.533 1519.98,683.533 1520.53,683.533 1521.09,683.533 1521.65,683.533 1522.21,683.533 1522.77,683.533 1523.33,683.533 1523.89,683.533 1524.45,683.533 1525.01,683.533 1525.57,683.533 1526.13,683.533 1526.69,683.533 1527.25,683.533 1527.81,683.533 1528.36,683.533 1528.92,683.533 1529.48,683.533 1530.04,683.533 1530.6,683.533 1531.16,683.533 1531.72,683.533 1532.28,683.533 1532.84,683.533 1533.4,683.533 1533.96,683.533 1534.52,683.533 1535.08,683.533 1535.63,683.533 1536.19,683.533 1536.75,683.533 1537.31,683.533 1537.87,683.533 1538.43,683.533 1538.99,683.533 1539.55,683.533 1540.11,683.533 1540.67,683.533 1541.23,683.533 1541.79,683.533 1542.35,683.533 1542.9,683.533 1543.46,683.533 1544.02,683.533 1544.58,683.533 1545.14,683.533 1545.7,683.533 1546.26,683.533 1546.82,683.533 1547.38,683.533 1547.94,683.533 1548.5,683.533 1549.06,683.533 1549.62,683.533 1550.18,683.533 1550.73,683.533 1551.29,683.533 1551.85,683.533 1552.41,683.533 1552.97,683.533 1553.53,683.533 1554.09,683.533 1554.65,683.533 1555.21,683.533 1555.77,683.533 1556.33,683.533 1556.89,683.533 1557.45,683.533 1558,683.533 1558.56,683.533 1559.12,683.533 1559.68,683.533 1560.24,683.533 1560.8,683.533 1561.36,683.533 1561.92,683.533 1562.48,683.533 1563.04,683.533 1563.6,683.533 1564.16,683.533 1564.72,683.533 1565.28,683.533 1565.83,683.533 1566.39,683.533 1566.95,683.533 1567.51,683.533 1568.07,683.533 1568.63,683.533 1569.19,683.533 1569.75,683.533 1570.31,683.533 1570.87,683.533 1571.43,683.533 1571.99,683.533 1572.55,683.533 1573.1,683.533 1573.66,683.533 1574.22,683.533 1574.78,683.533 1575.34,683.533 1575.9,683.533 1576.46,683.533 1577.02,683.533 1577.58,683.533 1578.14,683.533 1578.7,683.533 1579.26,683.533 1579.82,683.533 1580.37,683.533 1580.93,683.533 1581.49,683.533 1582.05,683.533 1582.61,683.533 1583.17,683.533 1583.73,683.533 1584.29,683.533 1584.85,683.533 1585.41,683.533 1585.97,683.533 1586.53,683.533 1587.09,683.533 1587.65,683.533 1588.2,683.533 1588.76,683.533 1589.32,683.533 1589.88,683.533 1590.44,683.533 1591,683.533 1591.56,683.533 1592.12,683.533 1592.68,683.533 1593.24,683.533 1593.8,683.533 1594.36,683.533 1594.92,683.533 1595.47,683.533 1596.03,683.533 1596.59,683.533 1597.15,683.533 1597.71,683.533 1598.27,683.533 1598.83,683.533 1599.39,683.533 1599.95,683.533 1600.51,683.533 1601.07,683.533 1601.63,683.533 1602.19,683.533 1602.74,683.533 1603.3,683.533 1603.86,683.533 1604.42,683.533 1604.98,683.533 1605.54,683.533 1606.1,683.533 1606.66,683.533 1607.22,683.533 1607.78,683.533 1608.34,683.533 1608.9,683.533 1609.46,683.533 1610.02,683.533 1610.57,683.533 1611.13,683.533 1611.69,683.533 1612.25,683.533 1612.81,683.533 1613.37,683.533 1613.93,683.533 1614.49,683.533 1615.05,683.533 1615.61,683.533 1616.17,683.533 1616.73,683.533 1617.29,683.533 1617.84,683.533 1618.4,683.533 1618.96,683.533 1619.52,683.533 1620.08,683.533 1620.64,683.533 1621.2,683.533 1621.76,683.533 1622.32,683.533 1622.88,683.533 1623.44,683.533 1624,683.533 1624.56,683.533 1625.11,683.533 1625.67,683.533 1626.23,683.533 1626.79,683.533 1627.35,683.533 1627.91,683.533 1628.47,683.533 1629.03,683.533 1629.59,683.533 1630.15,683.533 1630.71,683.533 1631.27,683.533 1631.83,683.533 1632.39,683.533 1632.94,683.533 1633.5,683.533 1634.06,683.533 1634.62,683.533 1635.18,683.533 1635.74,683.533 1636.3,683.533 1636.86,683.533 1637.42,683.533 1637.98,683.533 1638.54,683.533 1639.1,683.533 1639.66,683.533 1640.21,683.533 1640.77,683.533 1641.33,683.533 1641.89,683.533 1642.45,683.533 1643.01,683.533 1643.57,683.533 1644.13,683.533 1644.69,683.533 1645.25,683.533 1645.81,683.533 1646.37,683.533 1646.93,683.533 1647.48,683.533 1648.04,683.533 1648.6,683.533 1649.16,683.533 1649.72,683.533 1650.28,683.533 1650.84,683.533 1651.4,683.533 1651.96,683.533 1652.52,683.533 1653.08,683.533 1653.64,683.533 1654.2,683.533 1654.76,683.533 1655.31,683.533 1655.87,683.533 1656.43,683.533 1656.99,683.533 1657.55,683.533 1658.11,683.533 1658.67,683.533 1659.23,683.533 1659.79,683.533 1660.35,683.533 1660.91,683.533 1661.47,683.533 1662.03,683.533 1662.58,683.533 1663.14,683.533 1663.7,683.533 1664.26,683.533 1664.82,683.533 1665.38,683.533 1665.94,683.533 1666.5,683.533 1667.06,683.533 1667.62,683.533 1668.18,683.533 1668.74,683.533 1669.3,683.533 1669.85,683.533 1670.41,683.533 1670.97,683.533 1671.53,683.533 1672.09,683.533 1672.65,683.533 1673.21,683.533 1673.77,683.533 1674.33,683.533 1674.89,683.533 1675.45,683.533 1676.01,683.533 1676.57,683.533 1677.13,683.533 1677.68,683.533 1678.24,683.533 1678.8,683.533 1679.36,683.533 1679.92,683.533 1680.48,683.533 1681.04,683.533 1681.6,683.533 1682.16,683.533 1682.72,683.533 1683.28,683.533 1683.84,683.533 1684.4,683.533 1684.95,683.533 1685.51,683.533 1686.07,683.533 1686.63,683.533 1687.19,683.533 1687.75,683.533 1688.31,683.533 1688.87,683.533 1689.43,683.533 1689.99,683.533 1690.55,683.533 1691.11,683.533 1691.67,683.533 1692.23,683.533 1692.78,683.533 1693.34,683.533 1693.9,683.533 1694.46,683.533 1695.02,683.533 1695.58,683.533 1696.14,683.533 1696.7,683.533 1697.26,683.533 1697.82,683.533 1698.38,683.533 1698.94,683.533 1699.5,683.533 1700.05,683.533 1700.61,683.533 1701.17,683.533 1701.73,683.533 1702.29,683.533 1702.85,683.533 1703.41,683.533 1703.97,683.533 1704.53,683.533 1705.09,683.533 1705.65,683.533 1706.21,683.533 1706.77,683.533 1707.32,683.533 1707.88,683.533 1708.44,683.533 1709,683.533 1709.56,683.533 1710.12,683.533 1710.68,683.533 1711.24,683.533 1711.8,683.533 1712.36,683.533 1712.92,683.533 1713.48,683.533 1714.04,683.533 1714.6,683.533 1715.15,683.533 1715.71,683.533 1716.27,683.533 1716.83,683.533 1717.39,683.533 1717.95,683.533 1718.51,683.533 1719.07,683.533 1719.63,683.533 1720.19,683.533 1720.75,683.533 1721.31,683.533 1721.87,683.533 1722.42,683.533 1722.98,683.533 1723.54,683.533 1724.1,683.533 1724.66,683.533 1725.22,683.533 1725.78,683.533 1726.34,683.533 1726.9,683.533 1727.46,683.533 1728.02,683.533 1728.58,683.533 1729.14,683.533 1729.69,683.533 1730.25,683.533 1730.81,683.533 1731.37,683.533 1731.93,683.533 1732.49,683.533 1733.05,683.533 1733.61,683.533 1734.17,683.533 1734.73,683.533 1735.29,683.533 1735.85,683.533 1736.41,683.533 1736.97,683.533 1737.52,683.533 1738.08,683.533 1738.64,683.533 1739.2,683.533 1739.76,683.533 1740.32,683.533 1740.88,683.533 1741.44,683.533 1742,683.533 1742.56,683.533 1743.12,683.533 1743.68,683.533 1744.24,683.533 1744.79,683.533 1745.35,683.533 1745.91,683.533 1746.47,683.533 1747.03,683.533 1747.59,683.533 1748.15,683.533 1748.71,683.533 1749.27,683.533 1749.83,683.533 1750.39,683.533 1750.95,683.533 1751.51,683.533 1752.06,683.533 1752.62,683.533 1753.18,683.533 1753.74,683.533 1754.3,683.533 1754.86,683.533 1755.42,683.533 1755.98,683.533 1756.54,683.533 1757.1,683.533 1757.66,683.533 1758.22,683.533 1758.78,683.533 1759.34,683.533 1759.89,683.533 1760.45,683.533 1761.01,683.533 1761.57,683.533 1762.13,683.533 1762.69,683.533 1763.25,683.533 1763.81,683.533 1764.37,683.533 1764.93,683.533 1765.49,683.533 1766.05,683.533 1766.61,683.533 1767.16,683.533 1767.72,683.533 1768.28,683.533 1768.84,683.533 1769.4,683.533 1769.96,683.533 1770.52,683.533 1771.08,683.533 1771.64,683.533 1772.2,683.533 1772.76,683.533 1773.32,683.533 1773.88,683.533 1774.43,683.533 1774.99,683.533 1775.55,683.533 1776.11,683.533 1776.67,683.533 1777.23,683.533 1777.79,683.533 1778.35,683.533 1778.91,683.533 1779.47,683.533 1780.03,683.533 1780.59,683.533 1781.15,683.533 1781.71,683.533 1782.26,683.533 1782.82,683.533 1783.38,683.533 1783.94,683.533 1784.5,683.533 1785.06,683.533 1785.62,683.533 1786.18,683.533 1786.74,683.533 1787.3,683.533 1787.86,683.533 1788.42,683.533 1788.98,683.533 1789.53,683.533 1790.09,683.533 1790.65,683.533 1791.21,683.533 1791.77,683.533 1792.33,683.533 1792.89,683.533 1793.45,683.533 1794.01,683.533 1794.57,683.533 1795.13,683.533 1795.69,683.533 1796.25,683.533 1796.8,683.533 1797.36,683.533 1797.92,683.533 1798.48,683.533 1799.04,683.533 1799.6,683.533 1800.16,683.533 1800.72,683.533 1801.28,683.533 1801.84,683.533 1802.4,683.533 1802.96,683.533 1803.52,683.533 1804.08,683.533 1804.63,683.533 1805.19,683.533 1805.75,683.533 1806.31,683.533 1806.87,683.533 1807.43,683.533 1807.99,683.533 1808.55,683.533 1809.11,683.533 1809.67,683.533 1810.23,683.533 1810.79,683.533 1811.35,683.533 1811.9,683.533 1812.46,683.533 1813.02,683.533 1813.58,683.533 1814.14,683.533 1814.7,683.533 1815.26,683.533 1815.82,683.533 1816.38,683.533 1816.94,683.533 1817.5,683.533 1818.06,683.533 1818.62,683.533 1819.18,683.533 1819.73,683.533 1820.29,683.533 1820.85,683.533 1821.41,683.533 1821.97,683.533 1822.53,683.533 1823.09,683.533 1823.65,683.533 1824.21,683.533 1824.77,683.533 1825.33,683.533 1825.89,683.533 1826.45,683.533 1827,683.533 1827.56,683.533 1828.12,683.533 1828.68,683.533 1829.24,683.533 1829.8,683.533 1830.36,683.533 1830.92,683.533 1831.48,683.533 1832.04,683.533 1832.6,683.533 1833.16,683.533 1833.72,683.533 1834.27,683.533 1834.83,683.533 1835.39,683.533 1835.95,683.533 1836.51,683.533 1837.07,683.533 1837.63,683.533 1838.19,683.533 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.039006715933366 ± 0.01688190541952201\nProjected Energy: -4.014823068723326 ± (0.006035111738844634, 0.00609722047205441)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.449681</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3114e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1031e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.676e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.353e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.775e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.185e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321594\n -3.363124291613369\n -0.7590191922770906\n  0.1358418221962232\n  0.15789998694607377\n  0.876711441178136\n  1.5305929970973349\n  1.583573261186741\n  3.072870330325867\n  3.125672653951839\n  4.8621072215621695\n  6.260694850380596\n  6.40267121118311\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
