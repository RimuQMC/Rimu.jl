var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21981790150235678 ± 0.0010366953407473793\n   G2(1) = 0.9162432129237333 ± 0.000563279315088553\n   G2(2) = 0.9799009061039937 ± 0.0006007801524429908\n   G2(3) = 0.9878938604421887 ± 0.000865319161797853\n   G2(4) = 0.9799009061039937 ± 0.0006007801524429908\n   G2(5) = 0.9162432129237333 ± 0.000563279315088553\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.003721526151926 ± 0.12279995176536965\n   Replica 2: -4.027449316687565 ± 0.13143489083903803\n   Replica 3: -4.031078275801335 ± 0.12297840404160806\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip080\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip080)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip081\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip080)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip082\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip080)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.15 2211.02,1003.15 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.461 2211.02,745.461 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.773 2211.02,487.773 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.085 2211.02,230.085 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.15 423.181,1003.15 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.461 423.181,745.461 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.773 423.181,487.773 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.085 423.181,230.085 \"/>\n<path clip-path=\"url(#clip080)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M290.043 1016.49 L306.363 1016.49 L306.363 1020.43 L284.418 1020.43 L284.418 1016.49 Q287.08 1013.74 291.664 1009.11 Q296.27 1004.46 297.451 1003.11 Q299.696 1000.59 300.576 998.854 Q301.478 997.095 301.478 995.405 Q301.478 992.651 299.534 990.915 Q297.613 989.179 294.511 989.179 Q292.312 989.179 289.858 989.942 Q287.427 990.706 284.65 992.257 L284.65 987.535 Q287.474 986.401 289.927 985.822 Q292.381 985.243 294.418 985.243 Q299.789 985.243 302.983 987.929 Q306.177 990.614 306.177 995.104 Q306.177 997.234 305.367 999.155 Q304.58 1001.05 302.474 1003.65 Q301.895 1004.32 298.793 1007.53 Q295.691 1010.73 290.043 1016.49 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M316.224 985.868 L334.58 985.868 L334.58 989.804 L320.506 989.804 L320.506 998.276 Q321.524 997.929 322.543 997.767 Q323.562 997.581 324.58 997.581 Q330.367 997.581 333.747 1000.75 Q337.126 1003.92 337.126 1009.34 Q337.126 1014.92 333.654 1018.02 Q330.182 1021.1 323.862 1021.1 Q321.687 1021.1 319.418 1020.73 Q317.173 1020.36 314.765 1019.62 L314.765 1014.92 Q316.849 1016.05 319.071 1016.61 Q321.293 1017.16 323.77 1017.16 Q327.774 1017.16 330.112 1015.06 Q332.45 1012.95 332.45 1009.34 Q332.45 1005.73 330.112 1003.62 Q327.774 1001.52 323.77 1001.52 Q321.895 1001.52 320.02 1001.93 Q318.168 1002.35 316.224 1003.23 L316.224 985.868 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M356.339 988.947 Q352.728 988.947 350.899 992.512 Q349.094 996.054 349.094 1003.18 Q349.094 1010.29 350.899 1013.85 Q352.728 1017.4 356.339 1017.4 Q359.973 1017.4 361.779 1013.85 Q363.608 1010.29 363.608 1003.18 Q363.608 996.054 361.779 992.512 Q359.973 988.947 356.339 988.947 M356.339 985.243 Q362.149 985.243 365.205 989.85 Q368.284 994.433 368.284 1003.18 Q368.284 1011.91 365.205 1016.52 Q362.149 1021.1 356.339 1021.1 Q350.529 1021.1 347.45 1016.52 Q344.395 1011.91 344.395 1003.18 Q344.395 994.433 347.45 989.85 Q350.529 985.243 356.339 985.243 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M286.062 728.181 L304.418 728.181 L304.418 732.116 L290.344 732.116 L290.344 740.588 Q291.363 740.241 292.381 740.079 Q293.4 739.894 294.418 739.894 Q300.205 739.894 303.585 743.065 Q306.964 746.236 306.964 751.653 Q306.964 757.232 303.492 760.333 Q300.02 763.412 293.701 763.412 Q291.525 763.412 289.256 763.042 Q287.011 762.671 284.603 761.931 L284.603 757.232 Q286.687 758.366 288.909 758.921 Q291.131 759.477 293.608 759.477 Q297.613 759.477 299.951 757.37 Q302.288 755.264 302.288 751.653 Q302.288 748.042 299.951 745.935 Q297.613 743.829 293.608 743.829 Q291.733 743.829 289.858 744.245 Q288.006 744.662 286.062 745.542 L286.062 728.181 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M326.177 731.259 Q322.566 731.259 320.737 734.824 Q318.932 738.366 318.932 745.495 Q318.932 752.602 320.737 756.167 Q322.566 759.708 326.177 759.708 Q329.811 759.708 331.617 756.167 Q333.446 752.602 333.446 745.495 Q333.446 738.366 331.617 734.824 Q329.811 731.259 326.177 731.259 M326.177 727.556 Q331.987 727.556 335.043 732.162 Q338.122 736.746 338.122 745.495 Q338.122 754.222 335.043 758.829 Q331.987 763.412 326.177 763.412 Q320.367 763.412 317.288 758.829 Q314.233 754.222 314.233 745.495 Q314.233 736.746 317.288 732.162 Q320.367 727.556 326.177 727.556 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M356.339 731.259 Q352.728 731.259 350.899 734.824 Q349.094 738.366 349.094 745.495 Q349.094 752.602 350.899 756.167 Q352.728 759.708 356.339 759.708 Q359.973 759.708 361.779 756.167 Q363.608 752.602 363.608 745.495 Q363.608 738.366 361.779 734.824 Q359.973 731.259 356.339 731.259 M356.339 727.556 Q362.149 727.556 365.205 732.162 Q368.284 736.746 368.284 745.495 Q368.284 754.222 365.205 758.829 Q362.149 763.412 356.339 763.412 Q350.529 763.412 347.45 758.829 Q344.395 754.222 344.395 745.495 Q344.395 736.746 347.45 732.162 Q350.529 727.556 356.339 727.556 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M284.835 470.493 L307.057 470.493 L307.057 472.484 L294.511 505.053 L289.627 505.053 L301.432 474.428 L284.835 474.428 L284.835 470.493 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M316.224 470.493 L334.58 470.493 L334.58 474.428 L320.506 474.428 L320.506 482.9 Q321.524 482.553 322.543 482.391 Q323.562 482.206 324.58 482.206 Q330.367 482.206 333.747 485.377 Q337.126 488.549 337.126 493.965 Q337.126 499.544 333.654 502.646 Q330.182 505.724 323.862 505.724 Q321.687 505.724 319.418 505.354 Q317.173 504.984 314.765 504.243 L314.765 499.544 Q316.849 500.678 319.071 501.234 Q321.293 501.789 323.77 501.789 Q327.774 501.789 330.112 499.683 Q332.45 497.576 332.45 493.965 Q332.45 490.354 330.112 488.248 Q327.774 486.141 323.77 486.141 Q321.895 486.141 320.02 486.558 Q318.168 486.975 316.224 487.854 L316.224 470.493 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M356.339 473.572 Q352.728 473.572 350.899 477.137 Q349.094 480.678 349.094 487.808 Q349.094 494.914 350.899 498.479 Q352.728 502.021 356.339 502.021 Q359.973 502.021 361.779 498.479 Q363.608 494.914 363.608 487.808 Q363.608 480.678 361.779 477.137 Q359.973 473.572 356.339 473.572 M356.339 469.868 Q362.149 469.868 365.205 474.475 Q368.284 479.058 368.284 487.808 Q368.284 496.535 365.205 501.141 Q362.149 505.724 356.339 505.724 Q350.529 505.724 347.45 501.141 Q344.395 496.535 344.395 487.808 Q344.395 479.058 347.45 474.475 Q350.529 469.868 356.339 469.868 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M256.664 243.43 L264.303 243.43 L264.303 217.065 L255.992 218.731 L255.992 214.472 L264.256 212.805 L268.932 212.805 L268.932 243.43 L276.571 243.43 L276.571 247.365 L256.664 247.365 L256.664 243.43 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M296.015 215.884 Q292.404 215.884 290.576 219.449 Q288.77 222.991 288.77 230.12 Q288.77 237.227 290.576 240.791 Q292.404 244.333 296.015 244.333 Q299.65 244.333 301.455 240.791 Q303.284 237.227 303.284 230.12 Q303.284 222.991 301.455 219.449 Q299.65 215.884 296.015 215.884 M296.015 212.18 Q301.826 212.18 304.881 216.787 Q307.96 221.37 307.96 230.12 Q307.96 238.847 304.881 243.453 Q301.826 248.037 296.015 248.037 Q290.205 248.037 287.127 243.453 Q284.071 238.847 284.071 230.12 Q284.071 221.37 287.127 216.787 Q290.205 212.18 296.015 212.18 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M326.177 215.884 Q322.566 215.884 320.737 219.449 Q318.932 222.991 318.932 230.12 Q318.932 237.227 320.737 240.791 Q322.566 244.333 326.177 244.333 Q329.811 244.333 331.617 240.791 Q333.446 237.227 333.446 230.12 Q333.446 222.991 331.617 219.449 Q329.811 215.884 326.177 215.884 M326.177 212.18 Q331.987 212.18 335.043 216.787 Q338.122 221.37 338.122 230.12 Q338.122 238.847 335.043 243.453 Q331.987 248.037 326.177 248.037 Q320.367 248.037 317.288 243.453 Q314.233 238.847 314.233 230.12 Q314.233 221.37 317.288 216.787 Q320.367 212.18 326.177 212.18 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M356.339 215.884 Q352.728 215.884 350.899 219.449 Q349.094 222.991 349.094 230.12 Q349.094 237.227 350.899 240.791 Q352.728 244.333 356.339 244.333 Q359.973 244.333 361.779 240.791 Q363.608 237.227 363.608 230.12 Q363.608 222.991 361.779 219.449 Q359.973 215.884 356.339 215.884 M356.339 212.18 Q362.149 212.18 365.205 216.787 Q368.284 221.37 368.284 230.12 Q368.284 238.847 365.205 243.453 Q362.149 248.037 356.339 248.037 Q350.529 248.037 347.45 243.453 Q344.395 238.847 344.395 230.12 Q344.395 221.37 347.45 216.787 Q350.529 212.18 356.339 212.18 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip082)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.085 4017.76,230.085 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1248.03 459.396,1246.57 459.964,1246.12 460.533,1245.56 461.101,1244.92 461.669,1244.21 462.238,1243.41 462.806,1242.53 463.375,1241.56 463.943,1240.49 464.511,1239.31 465.08,1236.99 465.648,1235.6 466.216,1234.11 466.785,1232.51 467.353,1229.71 467.921,1227.86 468.49,1225.89 469.058,1223.72 469.626,1221.43 470.195,1217.96 470.763,1215.33 471.331,1211.5 471.9,1206.53 472.468,1203.37 473.036,1200.05 473.605,1196.48 474.173,1191.68 474.741,1187.68 475.31,1183.51 475.878,1178.06 476.446,1173.38 477.015,1168.5 477.583,1162.43 478.152,1154.99 478.72,1149.36 479.288,1142.43 479.857,1136.35 480.425,1130.09 480.993,1123.6 481.562,1115.88 482.13,1107.95 482.698,1100.82 483.267,1093.58 483.835,1084.94 484.403,1077.31 484.972,1068.41 485.54,1059.31 486.108,1051.05 486.677,1041.65 487.245,1032.08 487.813,1021.25 488.382,1012.54 488.95,999.465 489.518,990.494 490.087,980.495 490.655,971.227 491.224,961.799 491.792,951.195 492.36,938.515 492.929,927.93 493.497,915.313 494.065,904.639 494.634,892.854 495.202,882.285 495.77,871.447 496.339,857.369 496.907,846.666 497.475,835.971 498.044,825.248 498.612,813.517 499.18,802.996 499.749,792.616 500.317,781.135 500.885,770.704 501.454,761.462 502.022,752.323 502.59,740.075 503.159,730.998 503.727,719.941 504.295,709.981 504.864,699.111 505.432,688.408 506.001,678.001 506.569,667.711 507.137,657.51 507.706,648.494 508.274,638.565 508.842,630.753 509.411,621.944 509.979,612.078 510.547,601.45 511.116,593.047 511.684,583.895 512.252,574.917 512.821,567.167 513.389,556.384 513.957,549.921 514.526,541.539 515.094,533.225 515.662,526.283 516.231,518.113 516.799,510.431 517.367,503.85 517.936,496.291 518.504,489.06 519.072,482.76 519.641,476.627 520.209,468.584 520.778,462.834 521.346,456.176 521.914,449.589 522.483,444.301 523.051,438.079 523.619,433.182 524.188,425.107 524.756,421.389 525.324,418.935 525.893,414.002 526.461,410.586 527.029,407.184 527.598,402.755 528.166,400.393 528.734,397.088 529.303,392.84 529.871,387.725 530.439,383.747 531.008,382.062 531.576,377.241 532.144,371.478 532.713,366.895 533.281,364.634 533.85,363.289 534.418,359.807 534.986,356.417 535.555,352.078 536.123,349.937 536.691,346.839 537.26,343.875 537.828,341.918 538.396,341.098 538.965,339.217 539.533,336.389 540.101,335.451 540.67,333.563 541.238,330.642 541.806,327.651 542.375,325.766 542.943,324.945 543.511,321.033 544.08,318.324 544.648,314.584 545.216,312.195 545.785,310.829 546.353,308.592 546.921,305.518 547.49,301.248 548.058,297.434 548.627,297.563 549.195,297.678 549.763,295.851 550.332,294.982 550.9,293.283 551.468,293.646 552.037,292.866 552.605,290.862 553.173,288.984 553.742,288.212 554.31,285.612 554.878,282.023 555.447,281.667 556.015,280.178 556.583,280.836 557.152,280.396 557.72,280.735 558.288,280.149 558.857,279.679 559.425,279.079 559.993,278.469 560.562,276.937 561.13,276.546 561.698,278.219 562.267,277.427 562.835,272.543 563.404,272.141 563.972,271.661 564.54,271.113 565.109,268.723 565.677,267.343 566.245,262.954 566.814,261.845 567.382,263.011 567.95,262.042 568.519,259.877 569.087,259.818 569.655,257.831 570.224,258.031 570.792,257.086 571.36,255.374 571.929,253.649 572.497,253.165 573.065,252.61 573.634,252.113 574.202,252.508 574.77,252.86 575.339,252.228 575.907,252.755 576.476,250.079 577.044,251.558 577.612,252.115 578.181,248.381 578.749,247.722 579.317,248.236 579.886,245.677 580.454,247.516 581.022,247.078 581.591,246.54 582.159,249.19 582.727,250.699 583.296,252.708 583.864,253.74 584.432,254.921 585.001,255.77 585.569,254.665 586.137,254.576 586.706,253.355 587.274,253.338 587.842,252.332 588.411,249.04 588.979,249.442 589.547,249.637 590.116,248.672 590.684,248.853 591.253,252.111 591.821,251.931 592.389,253.022 592.958,251.604 593.526,250.602 594.094,251.468 594.663,249.174 595.231,250.02 595.799,247.652 596.368,247.461 596.936,246.582 597.504,246.636 598.073,247.656 598.641,247.79 599.209,247.934 599.778,244.995 600.346,245.109 600.914,243.118 601.483,242.288 602.051,242.53 602.619,240.763 603.188,239.226 603.756,238.796 604.325,236.134 604.893,236.855 605.461,237.53 606.03,237.892 606.598,237.687 607.166,237.368 607.735,236.933 608.303,239.749 608.871,238.102 609.44,239.709 610.008,237.06 610.576,238.619 611.145,239.043 611.713,242.567 612.281,242.741 612.85,243.736 613.418,244.839 613.986,243.844 614.555,243.974 615.123,245.089 615.691,243.041 616.26,244.294 616.828,244.381 617.396,243.39 617.965,243.386 618.533,244.635 619.102,241.438 619.67,240.587 620.238,239.887 620.807,239.171 621.375,237.536 621.943,239.09 622.512,239.336 623.08,237.581 623.648,240.132 624.217,240.427 624.785,242.519 625.353,244.626 625.922,243.408 626.49,242.199 627.058,242.296 627.627,242.239 628.195,242.236 628.763,240.967 629.332,241.075 629.9,241.121 630.468,241.263 631.037,242.275 631.605,244.309 632.173,242.15 632.742,243.062 633.31,243.824 633.879,246.729 634.447,246.364 635.015,245.097 635.584,244.763 636.152,243.54 636.72,245.43 637.289,245.932 637.857,245.501 638.425,244.867 638.994,245.436 639.562,243.934 640.13,242.558 640.699,242.158 641.267,241.923 641.835,240.616 642.404,239.116 642.972,239.157 643.54,236.746 644.109,236.852 644.677,237.75 645.245,236.777 645.814,236.754 646.382,236.484 646.951,236.538 647.519,235.425 648.087,234.573 648.656,234.715 649.224,234.735 649.792,233.716 650.361,232.013 650.929,232.303 651.497,233.788 652.066,232.762 652.634,232.274 653.202,231.817 653.771,232.065 654.339,231.214 654.907,231.54 655.476,232.037 656.044,232.358 656.612,232.916 657.181,234.087 657.749,235.437 658.317,234.454 658.886,234.735 659.454,233.661 660.022,232.998 660.591,235.305 661.159,233.483 661.728,232.784 662.296,236.067 662.864,235.128 663.433,237.116 664.001,236.164 664.569,236.136 665.138,234.217 665.706,233.274 666.274,233.695 666.843,234.824 667.411,234.766 667.979,234.931 668.548,233.947 669.116,233.144 669.684,236.666 670.253,235.569 670.821,235.646 671.389,235.465 671.958,236.533 672.526,235.319 673.094,235.114 673.663,236.984 674.231,235.019 674.799,235.043 675.368,234.876 675.936,234.891 676.505,234.929 677.073,236.89 677.641,234.577 678.21,238.905 678.778,239.723 679.346,238.305 679.915,238.058 680.483,238.842 681.051,239.653 681.62,238.425 682.188,238.345 682.756,236.907 683.325,235.968 683.893,234.76 684.461,237.128 685.03,238.348 685.598,236.876 686.166,236.635 686.735,234.227 687.303,233.055 687.871,232.964 688.44,231.009 689.008,231.282 689.577,229.516 690.145,230.805 690.713,230.06 691.282,229.314 691.85,229.689 692.418,229.885 692.987,230.205 693.555,229.613 694.123,227.952 694.692,228.57 695.26,228.968 695.828,228.433 696.397,227.863 696.965,228.252 697.533,228.675 698.102,227.956 698.67,227.234 699.238,227.712 699.807,227.043 700.375,225.893 700.943,225.327 701.512,228.088 702.08,229.537 702.648,230.99 703.217,230.223 703.785,230.639 704.354,232.139 704.922,232.421 705.49,228.607 706.059,229.741 706.627,230.016 707.195,233.393 707.764,233.483 708.332,230.633 708.9,233.217 709.469,232.078 710.037,231.396 710.605,231.678 711.174,232.015 711.742,233.245 712.31,234.568 712.879,230.338 713.447,232.622 714.015,231.953 714.584,234.309 715.152,233.281 715.72,233.465 716.289,233.581 716.857,233.683 717.425,234.71 717.994,234.772 718.562,233.743 719.131,234.858 719.699,238.024 720.267,237.819 720.836,237.673 721.404,237.519 721.972,239.259 722.541,240.939 723.109,238.463 723.677,239.145 724.246,238.741 724.814,238.37 725.382,237.994 725.951,238.456 726.519,238.149 727.087,235.691 727.656,237.36 728.224,237.102 728.792,236.896 729.361,238.423 729.929,237.029 730.497,235.534 731.066,234.236 731.634,231.961 732.203,232.07 732.771,232.06 733.339,232.059 733.908,233.282 734.476,235.329 735.044,236.074 735.613,235.808 736.181,234.608 736.749,235.337 737.318,233.929 737.886,231.724 738.454,231.772 739.023,232.773 739.591,231.788 740.159,231.856 740.728,233.023 741.296,232.041 741.864,231.159 742.433,230.905 743.001,230.958 743.569,230.046 744.138,230.311 744.706,227.328 745.274,226.346 745.843,225.735 746.411,224.106 746.98,224.628 747.548,226.238 748.116,231.902 748.685,231.757 749.253,231.544 749.821,229.598 750.39,228.864 750.958,225.984 751.526,226.438 752.095,228.119 752.663,228.372 753.231,229.555 753.8,230.73 754.368,230.844 754.936,233.094 755.505,236.215 756.073,235.076 756.641,235.117 757.21,235.137 757.778,234.014 758.346,234.033 758.915,231.003 759.483,231.14 760.052,232.276 760.62,232.195 761.188,233.139 761.757,232.168 762.325,232.202 762.893,231.133 763.462,231.106 764.03,232.085 764.598,231.249 765.167,231.485 765.735,231.569 766.303,231.561 766.872,232.691 767.44,232.826 768.008,232.845 768.577,229.514 769.145,229.918 769.713,231.289 770.282,232.249 770.85,233.449 771.418,233.287 771.987,234.184 772.555,237.109 773.123,239.847 773.692,236.186 774.26,235.941 774.829,235.467 775.397,235.06 775.965,231.916 776.534,232.76 777.102,233.571 777.67,232.378 778.239,230.195 778.807,230.07 779.375,232.429 779.944,233.455 780.512,234.291 781.08,235.011 781.649,233.575 782.217,232.298 782.785,234.601 783.354,234.278 783.922,235.128 784.49,234.863 785.059,233.566 785.627,232.264 786.195,233.244 786.764,234.213 787.332,235.082 787.9,234.598 788.469,233.186 789.037,232.972 789.606,232.773 790.174,232.735 790.742,231.429 791.311,232.47 791.879,232.244 792.447,232.117 793.016,230.973 793.584,231.046 794.152,231.979 794.721,232.712 795.289,232.352 795.857,233.426 796.426,235.425 796.994,236.322 797.562,235.837 798.131,235.211 798.699,236.07 799.267,235.423 799.836,236.052 800.404,235.438 800.972,236.006 801.541,235.373 802.109,233.909 802.678,236.546 803.246,234.823 803.814,234.463 804.383,232.096 804.951,229.854 805.519,230.715 806.088,231.685 806.656,230.571 807.224,228.35 807.793,228.293 808.361,228.153 808.929,228.388 809.498,227.427 810.066,226.734 810.634,228.117 811.203,228.002 811.771,228.236 812.339,228.353 812.908,228.462 813.476,228.519 814.044,226.674 814.613,224.941 815.181,224.092 815.749,222.586 816.318,223.082 816.886,223.607 817.455,223.125 818.023,220.586 818.591,220.235 819.16,220.015 819.728,219.895 820.296,220.644 820.865,224.569 821.433,225.953 822.001,225.449 822.57,224.755 823.138,225.117 823.706,225.777 824.275,225.203 824.843,225.661 825.411,223.87 825.98,224.593 826.548,226.234 827.116,226.803 827.685,228.373 828.253,225.417 828.821,226.939 829.39,229.232 829.958,230.332 830.526,230.688 831.095,229.65 831.663,231.085 832.232,231.308 832.8,232.642 833.368,232.602 833.937,231.52 834.505,230.312 835.073,229.473 835.642,229.869 836.21,228.819 836.778,228.048 837.347,228.382 837.915,229.665 838.483,228.925 839.052,227.281 839.62,227.669 840.188,229.069 840.757,228.289 841.325,230.755 841.893,229.015 842.462,231.446 843.03,233.501 843.598,230.415 844.167,230.479 844.735,228.782 845.304,229.942 845.872,230.229 846.44,230.081 847.009,232.207 847.577,234.523 848.145,236.528 848.714,235.037 849.282,235.878 849.85,233.584 850.419,232.429 850.987,231.431 851.555,232.509 852.124,231.512 852.692,233.546 853.26,233.39 853.829,232.335 854.397,233.457 854.965,232.288 855.534,229.178 856.102,230.37 856.67,230.763 857.239,230.92 857.807,231.977 858.375,232.007 858.944,231.791 859.512,231.872 860.081,230.764 860.649,233.081 861.217,233.985 861.786,233.986 862.354,233.021 862.922,234.078 863.491,235.117 864.059,232.859 864.627,233.829 865.196,234.763 865.764,233.399 866.332,234.295 866.901,234.171 867.469,232.994 868.037,232.099 868.606,233.065 869.174,232.673 869.742,232.613 870.311,232.54 870.879,231.573 871.447,231.521 872.016,231.238 872.584,231.245 873.152,233.258 873.721,234.011 874.289,233.695 874.858,232.607 875.426,232.635 875.994,234.711 876.563,233.178 877.131,231.922 877.699,231.676 878.268,232.514 878.836,232.263 879.404,229.271 879.973,230.307 880.541,231.451 881.109,228.275 881.678,230.821 882.246,231.809 882.814,230.688 883.383,230.655 883.951,229.616 884.519,229.627 885.088,228.669 885.656,227.866 886.224,227.097 886.793,227.318 887.361,227.517 887.93,226.95 888.498,228.326 889.066,228.569 889.635,229.808 890.203,229.908 890.771,230 891.34,226.763 891.908,230.058 892.476,229.214 893.045,229.229 893.613,229.408 894.181,229.702 894.75,230.906 895.318,230.79 895.886,232.919 896.455,231.43 897.023,232.498 897.591,233.553 898.16,233.282 898.728,230.931 899.296,229.623 899.865,230.612 900.433,231.714 901.001,232.489 901.57,230.195 902.138,228.951 902.707,227.954 903.275,225.831 903.843,225.047 904.412,225.219 904.98,226.518 905.548,226.736 906.117,227.166 906.685,227.655 907.253,226.858 907.822,226.195 908.39,226.471 908.958,227.851 909.527,229.183 910.095,229.258 910.663,229.372 911.232,229.761 911.8,230.003 912.368,230.166 912.937,230.384 913.505,230.615 914.073,231.724 914.642,231.566 915.21,232.6 915.779,229.5 916.347,228.624 916.915,228.75 917.484,230.037 918.052,230.179 918.62,232.304 919.189,232.038 919.757,233.913 920.325,233.757 920.894,233.754 921.462,232.668 922.03,232.508 922.599,236.453 923.167,236.105 923.735,237.638 924.304,235.019 924.872,235.615 925.44,234.14 926.009,231.999 926.577,231.723 927.145,231.794 927.714,232.775 928.282,232.482 928.85,233.392 929.419,233.241 929.987,230.014 930.556,230.187 931.124,229.365 931.692,228.394 932.261,228.384 932.829,228.449 933.397,228.531 933.966,231.751 934.534,232.646 935.102,233.428 935.671,231.299 936.239,232.243 936.807,232.067 937.376,230.939 937.944,228.888 938.512,230.271 939.081,231.368 939.649,229.117 940.217,228.144 940.786,227.414 941.354,224.63 941.922,222.102 942.491,223.655 943.059,224.24 943.627,226.605 944.196,228.959 944.764,227.897 945.333,228.176 945.901,228.573 946.469,227.65 947.038,227.764 947.606,227.959 948.174,230.159 948.743,230.431 949.311,230.564 949.879,231.833 950.448,230.848 951.016,230.859 951.584,229.824 952.153,232.767 952.721,233.578 953.289,233.335 953.858,230.099 954.426,232.32 954.994,233.242 955.563,232.917 956.131,235.94 956.699,236.5 957.268,238.071 957.836,237.663 958.405,235.225 958.973,237.003 959.541,235.475 960.11,236.233 960.678,237.789 961.246,236.132 961.815,236.776 962.383,236.274 962.951,232.712 963.52,233.331 964.088,232.137 964.656,231.835 965.225,230.727 965.793,229.364 966.361,231.323 966.93,232.105 967.498,231.722 968.066,231.738 968.635,230.671 969.203,231.545 969.771,231.27 970.34,231.303 970.908,228.95 971.476,227.034 972.045,227.284 972.613,227.525 973.182,227.94 973.75,227.707 974.318,225.793 974.887,227.128 975.455,227.063 976.023,227.396 976.592,228.632 977.16,228.805 977.728,227.827 978.297,228.797 978.865,229.869 979.433,230.175 980.002,230.207 980.57,230.146 981.138,230.185 981.707,229.061 982.275,226.925 982.843,228.235 983.412,227.499 983.98,228.739 984.548,227.868 985.117,228.146 985.685,231.447 986.253,231.372 986.822,231.27 987.39,229.266 987.959,230.47 988.527,228.555 989.095,228.589 989.664,226.568 990.232,226.921 990.8,228.376 991.369,228.635 991.937,228.77 992.505,227.979 993.074,228.079 993.642,228.481 994.21,226.667 994.779,226.729 995.347,229.012 995.915,230.3 996.484,230.358 997.052,230.451 997.62,228.385 998.189,229.465 998.757,228.675 999.325,228.922 999.894,228.874 1000.46,230.013 1001.03,230.01 1001.6,227.966 1002.17,224.322 1002.74,224.017 1003.3,223.555 1003.87,226.148 1004.44,226.461 1005.01,227.775 1005.58,227.087 1006.15,226.34 1006.71,226.817 1007.28,228.45 1007.85,230.019 1008.42,231.139 1008.99,230.131 1009.56,228.255 1010.12,228.687 1010.69,229.168 1011.26,230.496 1011.83,230.674 1012.4,231.518 1012.97,233.527 1013.53,233.751 1014.1,235.841 1014.67,234.847 1015.24,231.658 1015.81,232.485 1016.38,232.401 1016.94,232.259 1017.51,229.989 1018.08,228.03 1018.65,228.577 1019.22,229.75 1019.79,229.794 1020.35,229.801 1020.92,231.076 1021.49,232.283 1022.06,237.385 1022.63,237.15 1023.2,235.854 1023.76,235.335 1024.33,236.268 1024.9,236.914 1025.47,235.427 1026.04,237.087 1026.61,235.604 1027.17,235.349 1027.74,235.009 1028.31,234.76 1028.88,234.615 1029.45,234.352 1030.02,234.137 1030.58,234.061 1031.15,233.635 1031.72,232.412 1032.29,234.295 1032.86,233.75 1033.43,233.436 1033.99,233.159 1034.56,233.143 1035.13,232.912 1035.7,231.799 1036.27,231.617 1036.84,231.556 1037.4,233.49 1037.97,231.266 1038.54,230.119 1039.11,227.995 1039.68,227.023 1040.25,226.18 1040.81,228.326 1041.38,229.523 1041.95,229.405 1042.52,229.322 1043.09,229.379 1043.66,230.264 1044.22,229.083 1044.79,228.329 1045.36,228.518 1045.93,229.644 1046.5,230.92 1047.07,227.733 1047.63,227.897 1048.2,230.025 1048.77,229.969 1049.34,228.829 1049.91,227.866 1050.48,230.036 1051.05,230.067 1051.61,229.095 1052.18,228.121 1052.75,229.091 1053.32,228.985 1053.89,228.131 1054.46,229.401 1055.02,229.491 1055.59,231.333 1056.16,233.272 1056.73,232.911 1057.3,234.699 1057.87,236.164 1058.43,235.492 1059,234.081 1059.57,232.706 1060.14,231.408 1060.71,232.446 1061.28,231.203 1061.84,232.192 1062.41,233.053 1062.98,233.676 1063.55,233.392 1064.12,233.959 1064.69,233.705 1065.25,231.284 1065.82,231.021 1066.39,230.653 1066.96,231.659 1067.53,231.617 1068.1,228.357 1068.66,228.44 1069.23,229.332 1069.8,228.493 1070.37,228.379 1070.94,226.405 1071.51,224.541 1072.07,224.862 1072.64,226.291 1073.21,224.382 1073.78,226.692 1074.35,227.966 1074.92,228.208 1075.48,229.207 1076.05,229.314 1076.62,230.345 1077.19,230.256 1077.76,230.157 1078.33,229.106 1078.89,229.917 1079.46,231.05 1080.03,228.893 1080.6,229.693 1081.17,229.895 1081.74,229.892 1082.3,226.896 1082.87,229.174 1083.44,227.01 1084.01,229.107 1084.58,228.289 1085.15,230.269 1085.71,231.318 1086.28,233.354 1086.85,234.062 1087.42,234.804 1087.99,234.569 1088.56,232.118 1089.12,231.043 1089.69,231.815 1090.26,232.702 1090.83,233.623 1091.4,234.496 1091.97,233.061 1092.53,231.811 1093.1,233.689 1093.67,233.153 1094.24,233.854 1094.81,234.793 1095.38,234.521 1095.94,234.285 1096.51,233.98 1097.08,233.734 1097.65,235.578 1098.22,233.701 1098.79,233.455 1099.35,232.02 1099.92,230.796 1100.49,231.698 1101.06,232.431 1101.63,231.234 1102.2,228.031 1102.76,229.032 1103.33,227.935 1103.9,229.124 1104.47,230.414 1105.04,232.535 1105.61,235.25 1106.17,234.665 1106.74,234.373 1107.31,232.947 1107.88,233.449 1108.45,230.924 1109.02,228.473 1109.58,228.34 1110.15,228.456 1110.72,228.534 1111.29,228.54 1111.86,228.48 1112.43,229.601 1112.99,228.469 1113.56,228.278 1114.13,227.485 1114.7,227.484 1115.27,228.902 1115.84,224.73 1116.4,224.06 1116.97,226.37 1117.54,226.438 1118.11,224.519 1118.68,223.667 1119.25,226.157 1119.81,227.528 1120.38,226.665 1120.95,225.993 1121.52,223.129 1122.09,223.511 1122.66,223.034 1123.23,224.441 1123.79,222.894 1124.36,221.601 1124.93,221.943 1125.5,222.703 1126.07,222.125 1126.64,223.921 1127.2,225.434 1127.77,227.869 1128.34,230.27 1128.91,230.504 1129.48,230.456 1130.05,229.857 1130.61,229.101 1131.18,229.085 1131.75,230.211 1132.32,227.933 1132.89,230.304 1133.46,230.228 1134.02,231.381 1134.59,232.335 1135.16,233.17 1135.73,231.998 1136.3,232.974 1136.87,232.064 1137.43,231.118 1138,231.013 1138.57,229.819 1139.14,232.769 1139.71,232.609 1140.28,230.432 1140.84,229.457 1141.41,230.474 1141.98,228.31 1142.55,226.226 1143.12,226.531 1143.69,226.773 1144.25,225.822 1144.82,226.003 1145.39,227.555 1145.96,227.027 1146.53,227.21 1147.1,227.356 1147.66,227.695 1148.23,229.018 1148.8,228.982 1149.37,228.295 1149.94,231.566 1150.51,232.628 1151.07,233.389 1151.64,231.239 1152.21,230.397 1152.78,229.509 1153.35,229.537 1153.92,229.636 1154.48,228.892 1155.05,227.235 1155.62,226.523 1156.19,227.021 1156.76,224.126 1157.33,223.511 1157.89,225.245 1158.46,226.815 1159.03,229.274 1159.6,228.484 1160.17,229.807 1160.74,231.915 1161.3,230.968 1161.87,232.225 1162.44,232.276 1163.01,230.17 1163.58,231.501 1164.15,231.639 1164.71,227.646 1165.28,227.987 1165.85,230.364 1166.42,230.402 1166.99,229.481 1167.56,228.737 1168.12,230.101 1168.69,231.3 1169.26,231.123 1169.83,231.052 1170.4,232.889 1170.97,230.623 1171.53,232.782 1172.1,232.716 1172.67,234.922 1173.24,232.361 1173.81,231.114 1174.38,232.16 1174.94,233.032 1175.51,233.001 1176.08,233.752 1176.65,234.769 1177.22,234.596 1177.79,235.302 1178.35,235.831 1178.92,232.445 1179.49,234.443 1180.06,232.306 1180.63,231.103 1181.2,231.099 1181.76,233.226 1182.33,232.768 1182.9,229.516 1183.47,231.762 1184.04,230.662 1184.61,229.731 1185.17,228.839 1185.74,231.202 1186.31,232.308 1186.88,232.11 1187.45,231.036 1188.02,228.946 1188.58,229.089 1189.15,230.163 1189.72,233.179 1190.29,233.034 1190.86,232.8 1191.43,232.634 1192,233.579 1192.56,232.49 1193.13,232.266 1193.7,232.893 1194.27,230.796 1194.84,227.565 1195.41,228.114 1195.97,228.302 1196.54,228.544 1197.11,229.686 1197.68,229.373 1198.25,229.473 1198.82,232.418 1199.38,231.143 1199.95,230.016 1200.52,230.136 1201.09,231.318 1201.66,230.341 1202.23,228.511 1202.79,228.731 1203.36,228.754 1203.93,231.081 1204.5,233.076 1205.07,232.664 1205.64,232.626 1206.2,231.326 1206.77,231.552 1207.34,230.045 1207.91,230.134 1208.48,230.082 1209.05,231.224 1209.61,230.147 1210.18,229.142 1210.75,228.192 1211.32,227.297 1211.89,223.385 1212.46,222.849 1213.02,223.343 1213.59,222.616 1214.16,224.263 1214.73,226.903 1215.3,227.251 1215.87,227.433 1216.43,226.902 1217,228.395 1217.57,227.609 1218.14,225.844 1218.71,228.276 1219.28,228.509 1219.84,228.654 1220.41,228.777 1220.98,227.945 1221.55,227.394 1222.12,228.575 1222.69,228.688 1223.25,227.912 1223.82,229.384 1224.39,229.444 1224.96,230.456 1225.53,231.548 1226.1,232.533 1226.66,230.438 1227.23,232.562 1227.8,233.356 1228.37,235.087 1228.94,231.727 1229.51,230.589 1230.07,232.657 1230.64,231.486 1231.21,232.471 1231.78,229.437 1232.35,229.523 1232.92,229.677 1233.48,229.752 1234.05,230.801 1234.62,231.707 1235.19,233.804 1235.76,232.495 1236.33,230.097 1236.89,227.934 1237.46,226.963 1238.03,226.869 1238.6,226.972 1239.17,228.213 1239.74,228.599 1240.3,230.721 1240.87,232.835 1241.44,233.41 1242.01,233.162 1242.58,231.04 1243.15,229.806 1243.71,231.002 1244.28,230.116 1244.85,229.062 1245.42,229.141 1245.99,228.092 1246.56,228.084 1247.12,227.268 1247.69,228.508 1248.26,225.516 1248.83,226.072 1249.4,225.22 1249.97,225.58 1250.53,226.834 1251.1,227.016 1251.67,226.121 1252.24,227.671 1252.81,228.921 1253.38,229.127 1253.94,227.054 1254.51,227.283 1255.08,229.829 1255.65,228.901 1256.22,231.222 1256.79,230.111 1257.35,229.238 1257.92,232.429 1258.49,230.297 1259.06,229.531 1259.63,228.51 1260.2,229.644 1260.76,229.767 1261.33,231.004 1261.9,232.192 1262.47,232.148 1263.04,235.089 1263.61,232.804 1264.18,232.672 1264.74,235.735 1265.31,234.201 1265.88,235.988 1266.45,235.777 1267.02,237.33 1267.59,236.927 1268.15,237.61 1268.72,239.204 1269.29,238.571 1269.86,239.897 1270.43,238.288 1271,236.69 1271.56,236.998 1272.13,238.815 1272.7,238.142 1273.27,238.6 1273.84,236.749 1274.41,236.223 1274.97,235.886 1275.54,235.385 1276.11,233.042 1276.68,230.737 1277.25,230.429 1277.82,230.411 1278.38,229.134 1278.95,229.102 1279.52,228.115 1280.09,227.093 1280.66,226.207 1281.23,226.689 1281.79,226.954 1282.36,225.783 1282.93,225.876 1283.5,226.052 1284.07,226.344 1284.64,224.765 1285.2,226.103 1285.77,225.282 1286.34,225.773 1286.91,227.271 1287.48,227.528 1288.05,228.693 1288.61,229.73 1289.18,229.786 1289.75,231.912 1290.32,230.717 1290.89,231.266 1291.46,234.12 1292.02,231.661 1292.59,232.605 1293.16,232.475 1293.73,230.18 1294.3,232.316 1294.87,231.145 1295.43,231.199 1296,233.254 1296.57,232.949 1297.14,232.711 1297.71,230.198 1298.28,230.209 1298.84,230.294 1299.41,228.462 1299.98,228.398 1300.55,228.629 1301.12,227.781 1301.69,227.907 1302.25,232.063 1302.82,231.872 1303.39,231.887 1303.96,231.842 1304.53,232.796 1305.1,233.64 1305.66,232.234 1306.23,233.006 1306.8,232.753 1307.37,231.484 1307.94,231.238 1308.51,230.104 1309.07,229.035 1309.64,229.007 1310.21,228.012 1310.78,230.268 1311.35,231.198 1311.92,233.14 1312.48,232.097 1313.05,232.799 1313.62,234.847 1314.19,234.175 1314.76,235.827 1315.33,235.595 1315.89,238.203 1316.46,234.577 1317.03,234.115 1317.6,232.512 1318.17,231.516 1318.74,233.392 1319.3,233.938 1319.87,233.655 1320.44,230.265 1321.01,227.109 1321.58,227.283 1322.15,227.427 1322.71,227.541 1323.28,227.67 1323.85,227.951 1324.42,228.877 1324.99,228.946 1325.56,227.74 1326.12,227.818 1326.69,227.878 1327.26,229.056 1327.83,229.054 1328.4,228.862 1328.97,226.78 1329.53,227.731 1330.1,230.577 1330.67,231.545 1331.24,230.473 1331.81,230.263 1332.38,232.193 1332.94,232.032 1333.51,232.753 1334.08,231.389 1334.65,230.209 1335.22,231.072 1335.79,229.888 1336.36,228.662 1336.92,228.773 1337.49,230.963 1338.06,229.705 1338.63,232.749 1339.2,233.745 1339.77,233.493 1340.33,234.182 1340.9,232.845 1341.47,231.392 1342.04,230.964 1342.61,231.005 1343.18,227.927 1343.74,228.008 1344.31,229.04 1344.88,226.741 1345.45,226.738 1346.02,224.937 1346.59,223.231 1347.15,223.365 1347.72,223.081 1348.29,222.551 1348.86,223.05 1349.43,224.492 1350,224.603 1350.56,226.071 1351.13,227.438 1351.7,228.79 1352.27,230.048 1352.84,231.048 1353.41,233.85 1353.97,232.728 1354.54,233.569 1355.11,231.123 1355.68,231.098 1356.25,232.03 1356.82,230.89 1357.38,230.811 1357.95,231.646 1358.52,230.517 1359.09,228.298 1359.66,229.287 1360.23,230.366 1360.79,230.235 1361.36,231.205 1361.93,231.887 1362.5,229.615 1363.07,228.491 1363.64,229.564 1364.2,229.512 1364.77,230.552 1365.34,230.78 1365.91,229.643 1366.48,228.594 1367.05,229.897 1367.61,228.962 1368.18,230.148 1368.75,230.045 1369.32,230.02 1369.89,230.082 1370.46,228.909 1371.02,228.201 1371.59,229.393 1372.16,228.583 1372.73,227.527 1373.3,229.727 1373.87,229.75 1374.43,228.738 1375,229.024 1375.57,231.148 1376.14,231.16 1376.71,230.073 1377.28,231.129 1377.84,231.055 1378.41,231.005 1378.98,230.062 1379.55,231.143 1380.12,231.06 1380.69,227.997 1381.25,229.148 1381.82,228.268 1382.39,229.253 1382.96,229.227 1383.53,230.21 1384.1,231.046 1384.66,229.757 1385.23,231.798 1385.8,231.748 1386.37,230.602 1386.94,230.393 1387.51,230.312 1388.07,230.441 1388.64,229.19 1389.21,228.05 1389.78,228.024 1390.35,227.134 1390.92,227.335 1391.48,226.359 1392.05,224.567 1392.62,225.168 1393.19,225.428 1393.76,226.829 1394.33,223.939 1394.89,225.478 1395.46,224.772 1396.03,226.32 1396.6,228.691 1397.17,229.709 1397.74,229.739 1398.3,228.845 1398.87,229.878 1399.44,232.113 1400.01,233.305 1400.58,232.116 1401.15,231.973 1401.71,232.729 1402.28,234.775 1402.85,233.494 1403.42,233.342 1403.99,232.244 1404.56,232.302 1405.13,232.224 1405.69,232.116 1406.26,234.03 1406.83,235.873 1407.4,235.575 1407.97,237.314 1408.54,237.94 1409.1,237.127 1409.67,237.681 1410.24,235.733 1410.81,235.165 1411.38,233.686 1411.95,235.54 1412.51,234.178 1413.08,233.959 1413.65,233.723 1414.22,232.433 1414.79,234.047 1415.36,233.598 1415.92,231.017 1416.49,231.982 1417.06,231.691 1417.63,228.462 1418.2,227.461 1418.77,224.552 1419.33,225.898 1419.9,227.412 1420.47,224.528 1421.04,222.83 1421.61,224.37 1422.18,221.454 1422.74,221.766 1423.31,224.357 1423.88,224.82 1424.45,226.255 1425.02,226.383 1425.59,225.59 1426.15,229.077 1426.72,226.09 1427.29,226.42 1427.86,228.843 1428.43,228.833 1429,231.185 1429.56,231.048 1430.13,231.18 1430.7,231.054 1431.27,232.138 1431.84,233.021 1432.41,234.772 1432.97,235.419 1433.54,234.115 1434.11,235.581 1434.68,235.242 1435.25,234.777 1435.82,233.473 1436.38,231.964 1436.95,231.808 1437.52,231.558 1438.09,230.392 1438.66,230.311 1439.23,230.468 1439.79,229.585 1440.36,227.637 1440.93,226.646 1441.5,225.792 1442.07,224.057 1442.64,223.328 1443.2,223.723 1443.77,225.174 1444.34,224.521 1444.91,227.091 1445.48,228.396 1446.05,226.467 1446.61,226.714 1447.18,228.064 1447.75,228.134 1448.32,228.222 1448.89,227.276 1449.46,227.504 1450.02,222.401 1450.59,223.782 1451.16,227.457 1451.73,223.497 1452.3,223.067 1452.87,222.881 1453.43,223.572 1454,221.121 1454.57,224.94 1455.14,227.179 1455.71,228.408 1456.28,230.797 1456.84,231.892 1457.41,232.732 1457.98,233.693 1458.55,233.389 1459.12,232.014 1459.69,232.852 1460.25,232.752 1460.82,232.574 1461.39,232.424 1461.96,231.299 1462.53,231.165 1463.1,231.053 1463.66,231.222 1464.23,232.936 1464.8,232.808 1465.37,232.639 1465.94,231.636 1466.51,231.588 1467.07,231.462 1467.64,232.326 1468.21,235.238 1468.78,237.893 1469.35,237.216 1469.92,235.665 1470.48,233.387 1471.05,236.081 1471.62,235.581 1472.19,235.498 1472.76,235.048 1473.33,233.725 1473.89,233.322 1474.46,232.912 1475.03,231.506 1475.6,231.311 1476.17,231.341 1476.74,232.108 1477.31,232.83 1477.87,232.628 1478.44,230.292 1479.01,229.168 1479.58,227.164 1480.15,226.08 1480.72,229.267 1481.28,229.376 1481.85,230.478 1482.42,233.468 1482.99,233.159 1483.56,233.829 1484.13,233.478 1484.69,233.077 1485.26,233.844 1485.83,230.429 1486.4,230.325 1486.97,227.11 1487.54,225.219 1488.1,224.578 1488.67,223.83 1489.24,222.138 1489.81,224.879 1490.38,226.247 1490.95,227.723 1491.51,227.751 1492.08,229.122 1492.65,230.18 1493.22,228.277 1493.79,229.393 1494.36,230.403 1494.92,231.233 1495.49,234.207 1496.06,231.874 1496.63,230.658 1497.2,228.651 1497.77,230.838 1498.33,230.833 1498.9,230.71 1499.47,233.597 1500.04,233.447 1500.61,234.158 1501.18,231.417 1501.74,230.998 1502.31,229.768 1502.88,229.727 1503.45,228.667 1504.02,228.715 1504.59,227.411 1505.15,227.723 1505.72,226.729 1506.29,225.65 1506.86,224.799 1507.43,224.224 1508,226.613 1508.56,224.743 1509.13,224.986 1509.7,224.289 1510.27,223.439 1510.84,224.992 1511.41,226.206 1511.97,224.294 1512.54,225.689 1513.11,228.247 1513.68,226.503 1514.25,225.763 1514.82,228.125 1515.38,228.257 1515.95,229.723 1516.52,229.676 1517.09,227.556 1517.66,227.875 1518.23,230.173 1518.79,231.424 1519.36,231.545 1519.93,231.558 1520.5,231.668 1521.07,233.812 1521.64,233.679 1522.2,233.347 1522.77,232.921 1523.34,234.809 1523.91,233.335 1524.48,232.196 1525.05,233.081 1525.61,231.026 1526.18,230.043 1526.75,229.937 1527.32,230.855 1527.89,228.849 1528.46,227.826 1529.02,228.14 1529.59,227.382 1530.16,228.816 1530.73,229.242 1531.3,228.343 1531.87,231.833 1532.43,232.785 1533,231.4 1533.57,230.239 1534.14,230.181 1534.71,229.123 1535.28,230.284 1535.84,229.3 1536.41,229.434 1536.98,229.649 1537.55,231.661 1538.12,230.733 1538.69,230.888 1539.25,230.73 1539.82,231.626 1540.39,232.474 1540.96,232.199 1541.53,231.995 1542.1,232.871 1542.66,234.655 1543.23,236.343 1543.8,234.975 1544.37,232.732 1544.94,228.352 1545.51,226.424 1546.08,226.836 1546.64,226.38 1547.21,227.972 1547.78,227.267 1548.35,227.461 1548.92,229.626 1549.49,228.558 1550.05,228.614 1550.62,231.695 1551.19,230.745 1551.76,230.629 1552.33,229.688 1552.9,229.699 1553.46,229.75 1554.03,228.904 1554.6,226.608 1555.17,226.696 1555.74,228.916 1556.31,227.004 1556.87,225.362 1557.44,225.606 1558.01,224.997 1558.58,224.385 1559.15,224.606 1559.72,225.193 1560.28,224.493 1560.85,222.882 1561.42,222.425 1561.99,221.171 1562.56,221.869 1563.13,220.36 1563.69,223.443 1564.26,221.94 1564.83,223.531 1565.4,225.363 1565.97,223.913 1566.54,225.384 1567.1,226.012 1567.67,226.593 1568.24,225.827 1568.81,227.246 1569.38,225.828 1569.95,224.196 1570.51,222.738 1571.08,224.594 1571.65,226.245 1572.22,228.788 1572.79,230.026 1573.36,231.266 1573.92,233.537 1574.49,235.568 1575.06,236.435 1575.63,236.211 1576.2,238.992 1576.77,238.676 1577.33,236.304 1577.9,235.892 1578.47,234.698 1579.04,235.473 1579.61,236.395 1580.18,236.047 1580.74,234.713 1581.31,233.445 1581.88,233.387 1582.45,233.375 1583.02,235.376 1583.59,234.21 1584.15,232.973 1584.72,232.747 1585.29,233.743 1585.86,233.541 1586.43,232.522 1587,234.323 1587.56,236.24 1588.13,236.98 1588.7,234.222 1589.27,233.987 1589.84,234.82 1590.41,235.554 1590.97,237.087 1591.54,236.737 1592.11,236.368 1592.68,234.042 1593.25,234.715 1593.82,231.439 1594.38,229.998 1594.95,230.104 1595.52,228.108 1596.09,227.974 1596.66,227.982 1597.23,227.104 1597.79,227.242 1598.36,228.214 1598.93,230.66 1599.5,231.732 1600.07,228.563 1600.64,227.849 1601.2,227.809 1601.77,227.839 1602.34,227.063 1602.91,227.314 1603.48,227.253 1604.05,227.427 1604.61,229.626 1605.18,229.751 1605.75,229.832 1606.32,231.878 1606.89,231.951 1607.46,230.776 1608.02,232.918 1608.59,233.843 1609.16,233.614 1609.73,233.327 1610.3,232.129 1610.87,233.061 1611.43,230.709 1612,229.719 1612.57,231.051 1613.14,230.938 1613.71,231.763 1614.28,233.6 1614.84,231.362 1615.41,229.043 1615.98,228.071 1616.55,228.271 1617.12,229.373 1617.69,229.471 1618.26,229.352 1618.82,230.298 1619.39,228.553 1619.96,229.73 1620.53,230.92 1621.1,232.907 1621.67,232.574 1622.23,233.517 1622.8,233.396 1623.37,231.009 1623.94,233.903 1624.51,230.489 1625.08,230.585 1625.64,230.424 1626.21,228.309 1626.78,229.437 1627.35,228.459 1627.92,228.833 1628.49,228.938 1629.05,229.151 1629.62,229.131 1630.19,230.177 1630.76,229.97 1631.33,229.981 1631.9,232.158 1632.46,233.161 1633.03,232.593 1633.6,232.401 1634.17,234.385 1634.74,234.072 1635.31,231.696 1635.87,230.481 1636.44,230.456 1637.01,230.309 1637.58,231.39 1638.15,231.205 1638.72,232.217 1639.28,232.935 1639.85,232.648 1640.42,232.396 1640.99,230.086 1641.56,231.103 1642.13,230.924 1642.69,229.812 1643.26,230.895 1643.83,231.663 1644.4,231.638 1644.97,232.378 1645.54,231.143 1646.1,231.002 1646.67,232.076 1647.24,230.965 1647.81,227.894 1648.38,227.826 1648.95,226.944 1649.51,227.28 1650.08,227.356 1650.65,227.287 1651.22,224.265 1651.79,222.556 1652.36,225.171 1652.92,227.292 1653.49,227.73 1654.06,229.861 1654.63,228.87 1655.2,229.97 1655.77,227.109 1656.33,230.615 1656.9,229.322 1657.47,229.215 1658.04,228.202 1658.61,228.562 1659.18,227.469 1659.74,231.787 1660.31,230.577 1660.88,227.497 1661.45,228.637 1662.02,228.82 1662.59,228.758 1663.15,228.836 1663.72,228.857 1664.29,228.565 1664.86,228.508 1665.43,229.373 1666,229.266 1666.56,227.247 1667.13,228.498 1667.7,228.617 1668.27,228.512 1668.84,226.626 1669.41,228.034 1669.97,229.255 1670.54,231.54 1671.11,231.372 1671.68,231.328 1672.25,231.393 1672.82,232.608 1673.38,233.467 1673.95,231.988 1674.52,232.135 1675.09,231.013 1675.66,230.834 1676.23,230.8 1676.79,230.602 1677.36,232.731 1677.93,233.725 1678.5,231.482 1679.07,231.382 1679.64,231.347 1680.2,231.316 1680.77,231.163 1681.34,231.197 1681.91,231.259 1682.48,232.054 1683.05,231.95 1683.61,230.837 1684.18,230.015 1684.75,232.083 1685.32,233.908 1685.89,231.677 1686.46,232.357 1687.02,232.153 1687.59,231.005 1688.16,233.044 1688.73,231.685 1689.3,235.425 1689.87,235.853 1690.44,234.179 1691,233.773 1691.57,234.329 1692.14,235.094 1692.71,235.539 1693.28,235.155 1693.85,232.591 1694.41,232.209 1694.98,230.997 1695.55,228.89 1696.12,225.866 1696.69,226.069 1697.26,227.267 1697.82,227.417 1698.39,226.568 1698.96,224.421 1699.53,226.682 1700.1,226.809 1700.67,226.127 1701.23,226.442 1701.8,227.616 1702.37,227.643 1702.94,226.778 1703.51,228.23 1704.08,229.489 1704.64,230.561 1705.21,230.491 1705.78,230.425 1706.35,230.438 1706.92,228.013 1707.49,226.084 1708.05,227.323 1708.62,226.432 1709.19,225.855 1709.76,226.207 1710.33,226.719 1710.9,227.948 1711.46,228.167 1712.03,228.392 1712.6,229.562 1713.17,229.697 1713.74,230.929 1714.31,230.83 1714.87,231.733 1715.44,230.72 1716.01,230.829 1716.58,228.694 1717.15,229.607 1717.72,228.625 1718.28,230.912 1718.85,231.917 1719.42,228.893 1719.99,230.05 1720.56,229.005 1721.13,226.98 1721.69,228.197 1722.26,227.282 1722.83,227.221 1723.4,228.282 1723.97,230.254 1724.54,229.358 1725.1,230.345 1725.67,229.292 1726.24,228.594 1726.81,230.887 1727.38,231.037 1727.95,229.825 1728.51,230.078 1729.08,231.122 1729.65,232.213 1730.22,229.859 1730.79,232.082 1731.36,232.956 1731.92,230.898 1732.49,231.008 1733.06,230.019 1733.63,228.977 1734.2,229.072 1734.77,229.132 1735.33,227.98 1735.9,229.097 1736.47,229.102 1737.04,229.09 1737.61,231.356 1738.18,231.324 1738.74,234.476 1739.31,234.153 1739.88,233.869 1740.45,231.843 1741.02,232.876 1741.59,232.802 1742.15,231.599 1742.72,228.493 1743.29,227.73 1743.86,228.047 1744.43,228.325 1745,230.521 1745.56,229.374 1746.13,229.557 1746.7,228.473 1747.27,230.595 1747.84,230.57 1748.41,232.528 1748.97,232.481 1749.54,233.367 1750.11,233.214 1750.68,231.955 1751.25,229.793 1751.82,228.821 1752.38,230.001 1752.95,231.024 1753.52,230.897 1754.09,231.897 1754.66,232.9 1755.23,232.677 1755.79,233.414 1756.36,233.207 1756.93,231.109 1757.5,231.147 1758.07,232.269 1758.64,234.075 1759.21,233.855 1759.77,232.718 1760.34,232.385 1760.91,232.196 1761.48,230.954 1762.05,230.647 1762.62,230.551 1763.18,229.416 1763.75,231.536 1764.32,231.604 1764.89,230.341 1765.46,228.149 1766.03,228.303 1766.59,227.449 1767.16,227.672 1767.73,226.516 1768.3,225.603 1768.87,223.787 1769.44,224.36 1770,226.941 1770.57,229.161 1771.14,226.991 1771.71,227.188 1772.28,228.459 1772.85,228.64 1773.41,230.793 1773.98,230.874 1774.55,230.905 1775.12,231.89 1775.69,232.866 1776.26,229.665 1776.82,232.718 1777.39,232.538 1777.96,236.52 1778.53,235.821 1779.1,234.298 1779.67,232.019 1780.23,232.932 1780.8,230.52 1781.37,230.623 1781.94,229.716 1782.51,229.412 1783.08,229.488 1783.64,227.557 1784.21,228.626 1784.78,230.693 1785.35,233.917 1785.92,232.399 1786.49,231.315 1787.05,232.272 1787.62,232.004 1788.19,232.962 1788.76,231.394 1789.33,232.969 1789.9,236.601 1790.46,235.905 1791.03,236.642 1791.6,235.082 1792.17,236.677 1792.74,237.228 1793.31,236.452 1793.87,235.899 1794.44,236.414 1795.01,235.739 1795.58,236.256 1796.15,234.646 1796.72,234.196 1797.28,233.644 1797.85,230.256 1798.42,231.253 1798.99,230.025 1799.56,228.984 1800.13,228.959 1800.69,227.928 1801.26,227.94 1801.83,229.986 1802.4,228.848 1802.97,228.059 1803.54,225.091 1804.1,227.434 1804.67,227.633 1805.24,225.804 1805.81,223.895 1806.38,223.311 1806.95,221.643 1807.51,223.011 1808.08,223.346 1808.65,223.687 1809.22,222.929 1809.79,222.427 1810.36,223.86 1810.92,223.19 1811.49,226.697 1812.06,226.92 1812.63,228.174 1813.2,227.293 1813.77,227.534 1814.33,227.582 1814.9,229.767 1815.47,231.973 1816.04,230.788 1816.61,230.906 1817.18,231.894 1817.74,230.825 1818.31,230.949 1818.88,230.77 1819.45,229.634 1820.02,229.534 1820.59,229.398 1821.15,230.554 1821.72,230.379 1822.29,231.404 1822.86,230.496 1823.43,230.46 1824,229.387 1824.56,230.569 1825.13,232.693 1825.7,235.51 1826.27,234.156 1826.84,231.682 1827.41,232.456 1827.97,232.382 1828.54,232.133 1829.11,231.883 1829.68,232.795 1830.25,232.639 1830.82,233.197 1831.39,233.093 1831.95,233.903 1832.52,232.432 1833.09,232.993 1833.66,233.605 1834.23,232.264 1834.8,234.196 1835.36,233.858 1835.93,233.556 1836.5,234.258 1837.07,232.987 1837.64,233.71 1838.21,232.379 1838.77,231.219 1839.34,229.948 1839.91,228.795 1840.48,227.683 1841.05,225.631 1841.62,225.846 1842.18,227.236 1842.75,225.588 1843.32,225.878 1843.89,227.058 1844.46,227.359 1845.03,226.57 1845.59,226.747 1846.16,229.204 1846.73,230.206 1847.3,233.142 1847.87,232.706 1848.44,231.375 1849,232.421 1849.57,230.132 1850.14,230.003 1850.71,231.046 1851.28,230.892 1851.85,230.601 1852.41,231.682 1852.98,230.318 1853.55,230.512 1854.12,229.371 1854.69,228.151 1855.26,227.071 1855.82,228.05 1856.39,225.307 1856.96,224.477 1857.53,224.523 1858.1,223.07 1858.67,224.36 1859.23,224.675 1859.8,227.072 1860.37,227.262 1860.94,228.443 1861.51,227.836 1862.08,228.975 1862.64,229.048 1863.21,227.919 1863.78,227.057 1864.35,227.598 1864.92,227.806 1865.49,227.024 1866.05,225.244 1866.62,225.651 1867.19,226.175 1867.76,225.48 1868.33,225.98 1868.9,226.361 1869.46,226.522 1870.03,224.513 1870.6,224.166 1871.17,224.619 1871.74,226.151 1872.31,227.579 1872.87,225.868 1873.44,225.504 1874.01,227.868 1874.58,228.211 1875.15,228.355 1875.72,227.772 1876.28,229.225 1876.85,230.442 1877.42,229.753 1877.99,231.07 1878.56,231.116 1879.13,231.944 1879.69,231.723 1880.26,233.697 1880.83,232.446 1881.4,232.29 1881.97,233.227 1882.54,232.984 1883.1,233.743 1883.67,233.28 1884.24,230.005 1884.81,231.261 1885.38,230.199 1885.95,229.166 1886.51,229.162 1887.08,230.509 1887.65,230.392 1888.22,233.522 1888.79,231.39 1889.36,231.533 1889.92,230.395 1890.49,230.404 1891.06,230.27 1891.63,231.181 1892.2,233.081 1892.77,232.824 1893.33,232.744 1893.9,231.405 1894.47,230.085 1895.04,231.243 1895.61,229.004 1896.18,229.104 1896.74,226.997 1897.31,229.32 1897.88,229.327 1898.45,230.632 1899.02,230.602 1899.59,228.716 1900.16,230.965 1900.72,229.977 1901.29,230.086 1901.86,229.127 1902.43,230.072 1903,232.098 1903.57,233.956 1904.13,232.71 1904.7,231.426 1905.27,231.44 1905.84,230.356 1906.41,230.303 1906.98,229.492 1907.54,230.539 1908.11,228.502 1908.68,231.567 1909.25,229.645 1909.82,230.786 1910.39,231.876 1910.95,231.491 1911.52,232.152 1912.09,231.932 1912.66,232.783 1913.23,233.772 1913.8,232.329 1914.36,232.891 1914.93,230.692 1915.5,230.832 1916.07,231.822 1916.64,232.692 1917.21,231.446 1917.77,231.324 1918.34,231.35 1918.91,232.213 1919.48,233.134 1920.05,232.641 1920.62,233.789 1921.18,233.567 1921.75,234.379 1922.32,235.843 1922.89,235.406 1923.46,235.049 1924.03,232.471 1924.59,232.312 1925.16,235.111 1925.73,233.772 1926.3,232.461 1926.87,230.101 1927.44,231.187 1928,229.028 1928.57,232.081 1929.14,233.787 1929.71,231.392 1930.28,227.958 1930.85,228.225 1931.41,226.254 1931.98,223.428 1932.55,223.753 1933.12,222.9 1933.69,224.469 1934.26,224 1934.82,224.569 1935.39,224.921 1935.96,224.321 1936.53,223.683 1937.1,224.912 1937.67,223.188 1938.23,223.663 1938.8,224.186 1939.37,224.835 1939.94,226.553 1940.51,226.735 1941.08,227.18 1941.64,228.406 1942.21,229.549 1942.78,229.546 1943.35,229.6 1943.92,228.951 1944.49,229.315 1945.05,228.453 1945.62,230.609 1946.19,232.911 1946.76,231.761 1947.33,231.569 1947.9,230.688 1948.46,230.603 1949.03,232.657 1949.6,232.356 1950.17,233.139 1950.74,232.854 1951.31,231.717 1951.87,233.64 1952.44,232.62 1953.01,234.707 1953.58,235.585 1954.15,235.233 1954.72,235.971 1955.28,235.383 1955.85,234.778 1956.42,233.267 1956.99,232.921 1957.56,233.811 1958.13,231.392 1958.69,231.158 1959.26,231.202 1959.83,231.035 1960.4,230.032 1960.97,228.965 1961.54,228.913 1962.1,228.841 1962.67,228.995 1963.24,228.914 1963.81,225.712 1964.38,226.78 1964.95,225.995 1965.51,224.938 1966.08,225.268 1966.65,225.601 1967.22,226.902 1967.79,228.099 1968.36,230.625 1968.92,230.625 1969.49,230.628 1970.06,231.774 1970.63,229.444 1971.2,229.455 1971.77,228.29 1972.34,230.451 1972.9,230.413 1973.47,229.307 1974.04,228.513 1974.61,227.634 1975.18,227.886 1975.75,226.102 1976.31,224.497 1976.88,225.996 1977.45,225.305 1978.02,226.684 1978.59,225.98 1979.16,225.994 1979.72,226.485 1980.29,226.905 1980.86,227.155 1981.43,227.458 1982,225.987 1982.57,229.344 1983.13,230.455 1983.7,228.412 1984.27,228.462 1984.84,228.583 1985.41,229.033 1985.98,230.25 1986.54,229.422 1987.11,229.507 1987.68,230.492 1988.25,232.357 1988.82,232.33 1989.39,231.406 1989.95,232.476 1990.52,232.311 1991.09,233.184 1991.66,233.087 1992.23,233.771 1992.8,232.389 1993.36,233.499 1993.93,232.196 1994.5,230.075 1995.07,227.974 1995.64,226.016 1996.21,225.344 1996.77,228.805 1997.34,228.139 1997.91,228.239 1998.48,227.256 1999.05,227.349 1999.62,226.6 2000.18,225.981 2000.75,225.233 2001.32,228.802 2001.89,228.929 2002.46,230.247 2003.03,230.424 2003.59,228.331 2004.16,226.428 2004.73,225.902 2005.3,226.342 2005.87,226.747 2006.44,227.014 2007,226.278 2007.57,226.722 2008.14,226.666 2008.71,227.126 2009.28,228.681 2009.85,229.968 2010.41,232.314 2010.98,233.235 2011.55,231.133 2012.12,231.99 2012.69,232.971 2013.26,232.847 2013.82,231.913 2014.39,229.828 2014.96,232.189 2015.53,232.036 2016.1,231.207 2016.67,230.428 2017.23,229.461 2017.8,233.665 2018.37,235.711 2018.94,235.173 2019.51,235.013 2020.08,232.739 2020.64,235.953 2021.21,234.531 2021.78,232.262 2022.35,232.227 2022.92,231.107 2023.49,231.07 2024.05,234.027 2024.62,234.003 2025.19,233.786 2025.76,233.58 2026.33,234.406 2026.9,234.237 2027.46,233.982 2028.03,233.667 2028.6,234.248 2029.17,233.947 2029.74,233.594 2030.31,233.522 2030.87,234.518 2031.44,234.347 2032.01,233.088 2032.58,231.701 2033.15,232.676 2033.72,232.483 2034.28,229.214 2034.85,230.264 2035.42,231.045 2035.99,231.87 2036.56,231.751 2037.13,230.681 2037.69,230.504 2038.26,229.537 2038.83,227.26 2039.4,227.431 2039.97,225.547 2040.54,227.678 2041.11,228.034 2041.67,230.247 2042.24,230.138 2042.81,229.915 2043.38,229.011 2043.95,228.135 2044.52,228.368 2045.08,229.74 2045.65,231.837 2046.22,230.771 2046.79,229.583 2047.36,232.457 2047.93,233.055 2048.49,231.893 2049.06,235.661 2049.63,234.293 2050.2,234.136 2050.77,232.803 2051.34,231.54 2051.9,232.546 2052.47,231.35 2053.04,230.084 2053.61,230.002 2054.18,228.853 2054.75,228.931 2055.31,228.091 2055.88,227.185 2056.45,229.515 2057.02,230.757 2057.59,230.419 2058.16,228.317 2058.72,226.395 2059.29,229.683 2059.86,228.658 2060.43,229.741 2061,230.629 2061.57,233.863 2062.13,234.571 2062.7,235.115 2063.27,232.65 2063.84,231.648 2064.41,231.534 2064.98,232.497 2065.54,231.068 2066.11,230.759 2066.68,230.58 2067.25,227.367 2067.82,225.499 2068.39,226.524 2068.95,227.838 2069.52,228.899 2070.09,227.86 2070.66,228.954 2071.23,228.811 2071.8,228.925 2072.36,228.99 2072.93,228.799 2073.5,227.777 2074.07,227.148 2074.64,226.361 2075.21,225.491 2075.77,225.925 2076.34,226.242 2076.91,226.482 2077.48,224.581 2078.05,224.89 2078.62,226.499 2079.18,226.659 2079.75,223.799 2080.32,224.211 2080.89,226.752 2081.46,227.093 2082.03,227.22 2082.59,227.408 2083.16,226.607 2083.73,227.839 2084.3,226.979 2084.87,229.306 2085.44,229.31 2086,231.397 2086.57,229.328 2087.14,228.404 2087.71,230.546 2088.28,231.454 2088.85,233.667 2089.41,234.395 2089.98,234.958 2090.55,233.746 2091.12,233.401 2091.69,233.276 2092.26,232.049 2092.82,231.911 2093.39,232.859 2093.96,232.814 2094.53,232.445 2095.1,230.441 2095.67,231.509 2096.23,231.523 2096.8,228.359 2097.37,228.604 2097.94,230.869 2098.51,232.855 2099.08,231.502 2099.64,230.217 2100.21,232.402 2100.78,235.27 2101.35,235.907 2101.92,234.457 2102.49,233.973 2103.05,232.485 2103.62,233.273 2104.19,234.004 2104.76,231.559 2105.33,231.377 2105.9,229.353 2106.46,230.447 2107.03,229.398 2107.6,229.385 2108.17,230.298 2108.74,231.509 2109.31,232.437 2109.87,233.252 2110.44,233.137 2111.01,233.725 2111.58,235.445 2112.15,234.958 2112.72,232.239 2113.29,229.961 2113.85,229.955 2114.42,230.014 2114.99,229.959 2115.56,230.87 2116.13,230.66 2116.7,230.696 2117.26,231.672 2117.83,230.418 2118.4,229.197 2118.97,227.188 2119.54,226.208 2120.11,226.387 2120.67,226.588 2121.24,226.816 2121.81,229.14 2122.38,229.238 2122.95,230.121 2123.52,230.969 2124.08,230.845 2124.65,229.563 2125.22,227.531 2125.79,228.793 2126.36,228.952 2126.93,230.061 2127.49,231.26 2128.06,231.082 2128.63,229.078 2129.2,229.081 2129.77,229.924 2130.34,230.013 2130.9,230.151 2131.47,232.209 2132.04,232.167 2132.61,233.992 2133.18,233.484 2133.75,234.117 2134.31,233.571 2134.88,234.432 2135.45,232.994 2136.02,234.808 2136.59,234.594 2137.16,233.193 2137.72,231.871 2138.29,232.813 2138.86,229.64 2139.43,229.37 2140,227.384 2140.57,226.657 2141.13,229.122 2141.7,225.994 2142.27,225.386 2142.84,223.575 2143.41,224.238 2143.98,222.609 2144.54,222.029 2145.11,223.433 2145.68,221.7 2146.25,222.227 2146.82,223.823 2147.39,224.11 2147.95,222.397 2148.52,221.891 2149.09,222.54 2149.66,223 2150.23,223.757 2150.8,224.244 2151.36,226.844 2151.93,231.377 2152.5,231.416 2153.07,233.448 2153.64,232.033 2154.21,232.119 2154.77,233.09 2155.34,233.849 2155.91,234.458 2156.48,235.019 2157.05,235.694 2157.62,234.546 2158.18,233.274 2158.75,233.072 2159.32,233.073 2159.89,233.006 \"/>\n<path clip-path=\"url(#clip080)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip080)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip080)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip080)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.029 ± 0.018\n  with uncertainty of ± 0.0011485966407816315\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01698 ± (0.00215985, 0.00223696) (MC)\n  95% confidence interval: [-4.02122, -4.01247]) (MC)\n  linear error propagation: -4.01724 ± 0.00224455\n  |δ_y| = |0.00219266| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.016975494646425, val_l = 0.004244897167432704, val_u = 0.004509854545201364)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip110\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip110)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip111\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip110)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip112\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1143.68 2211.02,1143.68 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,988.854 2211.02,988.854 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,834.023 2211.02,834.023 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,679.191 2211.02,679.191 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,524.36 2211.02,524.36 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,369.529 2211.02,369.529 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,214.698 2211.02,214.698 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1143.68 365.751,1143.68 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,988.854 365.751,988.854 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,834.023 365.751,834.023 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,679.191 365.751,679.191 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,524.36 365.751,524.36 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,369.529 365.751,369.529 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,214.698 365.751,214.698 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M298.909 1129.48 Q295.298 1129.48 293.469 1133.05 Q291.664 1136.59 291.664 1143.72 Q291.664 1150.83 293.469 1154.39 Q295.298 1157.93 298.909 1157.93 Q302.543 1157.93 304.349 1154.39 Q306.177 1150.83 306.177 1143.72 Q306.177 1136.59 304.349 1133.05 Q302.543 1129.48 298.909 1129.48 M298.909 1125.78 Q304.719 1125.78 307.775 1130.39 Q310.853 1134.97 310.853 1143.72 Q310.853 1152.45 307.775 1157.05 Q304.719 1161.64 298.909 1161.64 Q293.099 1161.64 290.02 1157.05 Q286.964 1152.45 286.964 1143.72 Q286.964 1134.97 290.02 1130.39 Q293.099 1125.78 298.909 1125.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M259.557 1002.2 L267.196 1002.2 L267.196 975.833 L258.886 977.499 L258.886 973.24 L267.15 971.574 L271.826 971.574 L271.826 1002.2 L279.465 1002.2 L279.465 1006.13 L259.557 1006.13 L259.557 1002.2 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M298.909 974.652 Q295.298 974.652 293.469 978.217 Q291.664 981.759 291.664 988.888 Q291.664 995.995 293.469 999.56 Q295.298 1003.1 298.909 1003.1 Q302.543 1003.1 304.349 999.56 Q306.177 995.995 306.177 988.888 Q306.177 981.759 304.349 978.217 Q302.543 974.652 298.909 974.652 M298.909 970.949 Q304.719 970.949 307.775 975.555 Q310.853 980.138 310.853 988.888 Q310.853 997.615 307.775 1002.22 Q304.719 1006.8 298.909 1006.8 Q293.099 1006.8 290.02 1002.22 Q286.964 997.615 286.964 988.888 Q286.964 980.138 290.02 975.555 Q293.099 970.949 298.909 970.949 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M262.775 847.367 L279.094 847.367 L279.094 851.303 L257.15 851.303 L257.15 847.367 Q259.812 844.613 264.395 839.983 Q269.002 835.33 270.182 833.988 Q272.428 831.465 273.307 829.729 Q274.21 827.969 274.21 826.279 Q274.21 823.525 272.266 821.789 Q270.344 820.053 267.242 820.053 Q265.043 820.053 262.59 820.817 Q260.159 821.58 257.381 823.131 L257.381 818.409 Q260.205 817.275 262.659 816.696 Q265.113 816.118 267.15 816.118 Q272.52 816.118 275.715 818.803 Q278.909 821.488 278.909 825.979 Q278.909 828.108 278.099 830.029 Q277.312 831.928 275.205 834.52 Q274.627 835.191 271.525 838.409 Q268.423 841.603 262.775 847.367 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M298.909 819.821 Q295.298 819.821 293.469 823.386 Q291.664 826.928 291.664 834.057 Q291.664 841.164 293.469 844.728 Q295.298 848.27 298.909 848.27 Q302.543 848.27 304.349 844.728 Q306.177 841.164 306.177 834.057 Q306.177 826.928 304.349 823.386 Q302.543 819.821 298.909 819.821 M298.909 816.118 Q304.719 816.118 307.775 820.724 Q310.853 825.307 310.853 834.057 Q310.853 842.784 307.775 847.39 Q304.719 851.974 298.909 851.974 Q293.099 851.974 290.02 847.39 Q286.964 842.784 286.964 834.057 Q286.964 825.307 290.02 820.724 Q293.099 816.118 298.909 816.118 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M272.914 677.837 Q276.27 678.555 278.145 680.823 Q280.043 683.092 280.043 686.425 Q280.043 691.541 276.525 694.342 Q273.006 697.143 266.525 697.143 Q264.349 697.143 262.034 696.703 Q259.742 696.286 257.289 695.43 L257.289 690.916 Q259.233 692.05 261.548 692.629 Q263.863 693.208 266.386 693.208 Q270.784 693.208 273.076 691.471 Q275.39 689.735 275.39 686.425 Q275.39 683.37 273.238 681.657 Q271.108 679.921 267.289 679.921 L263.261 679.921 L263.261 676.078 L267.474 676.078 Q270.923 676.078 272.752 674.712 Q274.58 673.323 274.58 670.731 Q274.58 668.069 272.682 666.657 Q270.807 665.222 267.289 665.222 Q265.367 665.222 263.168 665.638 Q260.969 666.055 258.33 666.935 L258.33 662.768 Q260.992 662.027 263.307 661.657 Q265.645 661.286 267.705 661.286 Q273.029 661.286 276.131 663.717 Q279.233 666.124 279.233 670.245 Q279.233 673.115 277.59 675.106 Q275.946 677.073 272.914 677.837 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M298.909 664.99 Q295.298 664.99 293.469 668.555 Q291.664 672.097 291.664 679.226 Q291.664 686.333 293.469 689.897 Q295.298 693.439 298.909 693.439 Q302.543 693.439 304.349 689.897 Q306.177 686.333 306.177 679.226 Q306.177 672.097 304.349 668.555 Q302.543 664.99 298.909 664.99 M298.909 661.286 Q304.719 661.286 307.775 665.893 Q310.853 670.476 310.853 679.226 Q310.853 687.953 307.775 692.559 Q304.719 697.143 298.909 697.143 Q293.099 697.143 290.02 692.559 Q286.964 687.953 286.964 679.226 Q286.964 670.476 290.02 665.893 Q293.099 661.286 298.909 661.286 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M271.594 511.154 L259.789 529.603 L271.594 529.603 L271.594 511.154 M270.367 507.08 L276.247 507.08 L276.247 529.603 L281.177 529.603 L281.177 533.492 L276.247 533.492 L276.247 541.64 L271.594 541.64 L271.594 533.492 L255.992 533.492 L255.992 528.978 L270.367 507.08 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M298.909 510.159 Q295.298 510.159 293.469 513.724 Q291.664 517.266 291.664 524.395 Q291.664 531.502 293.469 535.066 Q295.298 538.608 298.909 538.608 Q302.543 538.608 304.349 535.066 Q306.177 531.502 306.177 524.395 Q306.177 517.266 304.349 513.724 Q302.543 510.159 298.909 510.159 M298.909 506.455 Q304.719 506.455 307.775 511.062 Q310.853 515.645 310.853 524.395 Q310.853 533.122 307.775 537.728 Q304.719 542.312 298.909 542.312 Q293.099 542.312 290.02 537.728 Q286.964 533.122 286.964 524.395 Q286.964 515.645 290.02 511.062 Q293.099 506.455 298.909 506.455 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M258.793 352.249 L277.15 352.249 L277.15 356.184 L263.076 356.184 L263.076 364.657 Q264.094 364.309 265.113 364.147 Q266.131 363.962 267.15 363.962 Q272.937 363.962 276.316 367.134 Q279.696 370.305 279.696 375.721 Q279.696 381.3 276.224 384.402 Q272.752 387.481 266.432 387.481 Q264.256 387.481 261.988 387.11 Q259.742 386.74 257.335 385.999 L257.335 381.3 Q259.418 382.434 261.641 382.99 Q263.863 383.545 266.34 383.545 Q270.344 383.545 272.682 381.439 Q275.02 379.333 275.02 375.721 Q275.02 372.11 272.682 370.004 Q270.344 367.897 266.34 367.897 Q264.465 367.897 262.59 368.314 Q260.738 368.731 258.793 369.61 L258.793 352.249 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M298.909 355.328 Q295.298 355.328 293.469 358.893 Q291.664 362.434 291.664 369.564 Q291.664 376.67 293.469 380.235 Q295.298 383.777 298.909 383.777 Q302.543 383.777 304.349 380.235 Q306.177 376.67 306.177 369.564 Q306.177 362.434 304.349 358.893 Q302.543 355.328 298.909 355.328 M298.909 351.624 Q304.719 351.624 307.775 356.231 Q310.853 360.814 310.853 369.564 Q310.853 378.291 307.775 382.897 Q304.719 387.481 298.909 387.481 Q293.099 387.481 290.02 382.897 Q286.964 378.291 286.964 369.564 Q286.964 360.814 290.02 356.231 Q293.099 351.624 298.909 351.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M269.326 212.835 Q266.178 212.835 264.326 214.988 Q262.497 217.14 262.497 220.89 Q262.497 224.617 264.326 226.793 Q266.178 228.946 269.326 228.946 Q272.474 228.946 274.303 226.793 Q276.154 224.617 276.154 220.89 Q276.154 217.14 274.303 214.988 Q272.474 212.835 269.326 212.835 M278.608 198.182 L278.608 202.441 Q276.849 201.608 275.043 201.168 Q273.261 200.728 271.502 200.728 Q266.872 200.728 264.418 203.853 Q261.988 206.978 261.641 213.298 Q263.006 211.284 265.066 210.219 Q267.127 209.131 269.603 209.131 Q274.812 209.131 277.821 212.302 Q280.853 215.451 280.853 220.89 Q280.853 226.214 277.705 229.432 Q274.557 232.65 269.326 232.65 Q263.33 232.65 260.159 228.066 Q256.988 223.46 256.988 214.733 Q256.988 206.539 260.877 201.678 Q264.766 196.793 271.316 196.793 Q273.076 196.793 274.858 197.14 Q276.664 197.488 278.608 198.182 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M298.909 200.497 Q295.298 200.497 293.469 204.062 Q291.664 207.603 291.664 214.733 Q291.664 221.839 293.469 225.404 Q295.298 228.946 298.909 228.946 Q302.543 228.946 304.349 225.404 Q306.177 221.839 306.177 214.733 Q306.177 207.603 304.349 204.062 Q302.543 200.497 298.909 200.497 M298.909 196.793 Q304.719 196.793 307.775 201.4 Q310.853 205.983 310.853 214.733 Q310.853 223.46 307.775 228.066 Q304.719 232.65 298.909 232.65 Q293.099 232.65 290.02 228.066 Q286.964 223.46 286.964 214.733 Q286.964 205.983 290.02 201.4 Q293.099 196.793 298.909 196.793 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip112)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1029.6 400.199,924.792 400.786,828.627 401.372,740.523 401.958,659.945 402.545,586.396 403.131,625.411 403.718,652.496 404.304,586.451 404.891,527.733 405.477,475.822 406.063,427.691 406.65,384.383 407.236,345.586 407.823,311.007 408.409,280.373 408.995,254.762 409.582,288.295 410.168,266.364 410.755,246.774 411.341,230.09 411.927,259.978 412.514,246.13 413.1,234.32 413.687,226.681 414.273,219.895 414.86,245.606 415.446,242.007 416.032,266.953 416.619,312.82 417.205,311.322 417.792,310.893 418.378,312.844 418.964,334.978 419.551,339.018 420.137,343.53 420.724,365.455 421.31,372.498 421.896,380.007 422.483,400.665 423.069,434.494 423.656,443.662 424.242,464.747 424.829,474.414 425.415,483.973 426.001,494.061 426.588,513.305 427.174,531.949 427.761,542.268 428.347,552.048 428.933,570.595 429.52,580.473 430.106,597.552 430.693,614.354 431.279,624.679 431.865,640.607 432.452,656.265 433.038,677.379 433.625,686.378 434.211,715.944 434.798,724.587 435.384,737.317 435.97,746.156 436.557,755.18 437.143,768.55 437.73,789.464 438.316,801.492 438.902,820.492 439.489,831.852 440.075,846.656 440.662,856.916 441.248,867.762 441.835,888.52 442.421,898.363 443.007,907.987 443.594,917.522 444.18,929.758 444.767,938.451 445.353,946.671 445.939,957.729 446.526,965.959 447.112,971.146 447.699,976.105 448.285,988.672 448.871,993.591 449.458,1003.2 450.044,1010.28 450.631,1019.45 451.217,1028.25 451.804,1036.44 452.39,1044.43 452.976,1052.29 453.563,1057.76 454.149,1065.18 454.736,1068.44 455.322,1073.79 455.908,1081.3 456.495,1090.36 457.081,1095.29 457.668,1101.74 458.254,1107.97 458.84,1112.07 459.427,1121.75 460.013,1123.86 460.6,1129.47 461.186,1135.07 461.773,1138.44 462.359,1144.02 462.945,1148.91 463.532,1152.07 464.118,1156.98 464.705,1161.47 465.291,1164.58 465.877,1167.53 466.464,1173.65 467.05,1176.27 467.637,1180.42 468.223,1184.59 468.809,1186.87 469.396,1190.69 469.982,1192.6 470.569,1199.43 471.155,1199.84 471.742,1198.44 472.328,1200.81 472.914,1201.03 473.501,1201.3 474.087,1203.17 474.674,1202.1 475.26,1202.47 475.846,1204.29 476.433,1207.46 477.019,1209.09 477.606,1207.52 478.192,1210.48 478.778,1214.87 479.365,1217.71 479.951,1217.38 480.538,1215.81 481.124,1217.27 481.711,1218.68 482.297,1221.49 482.883,1221.34 483.47,1222.57 484.056,1223.68 484.643,1223.48 485.229,1221.76 485.815,1221.52 486.402,1222.62 486.988,1221.2 487.575,1221.11 488.161,1222.46 488.748,1223.97 489.334,1224.06 489.92,1222.75 490.507,1225.63 491.093,1226.98 491.68,1229.77 492.266,1230.83 492.852,1230.59 493.439,1231.55 494.025,1233.66 494.612,1237.41 495.198,1240.65 495.784,1238.8 496.371,1236.98 496.957,1237.69 497.544,1237.19 498.13,1237.8 498.717,1235.76 499.303,1235.2 499.889,1236.26 500.476,1237.2 501.062,1236.74 501.649,1238.68 502.235,1241.95 502.821,1241.13 503.408,1241.77 503.994,1239.69 504.581,1239.01 505.167,1237.33 505.753,1236.84 506.34,1236.21 506.926,1235.76 507.513,1235.34 508.099,1236.12 508.686,1235.47 509.272,1232.17 509.858,1232.01 510.445,1237.1 511.031,1236.57 511.618,1236.16 512.204,1235.84 512.79,1237.88 513.377,1238.69 513.963,1243.34 514.55,1243.94 515.136,1241.69 515.722,1242.11 516.309,1244.07 516.895,1243.42 517.482,1245.2 518.068,1244.27 518.655,1244.78 519.241,1246.27 519.827,1247.83 520.414,1247.86 521,1247.99 521.587,1248.07 522.173,1247.04 522.759,1246.05 523.346,1246.29 523.932,1245.09 524.519,1247.89 525.105,1245.56 525.691,1244.34 526.278,1248.47 526.864,1248.85 527.451,1247.78 528.037,1250.53 528.624,1247.86 529.21,1247.98 529.796,1248.24 530.383,1244.54 530.969,1242.19 531.556,1239.17 532.142,1237.33 532.728,1235.27 533.315,1233.6 533.901,1234.36 534.488,1233.88 535.074,1234.81 535.661,1234.27 536.247,1234.97 536.833,1238.54 537.42,1237.58 538.006,1236.87 538.593,1237.6 539.179,1236.92 539.765,1232.39 540.352,1232.08 540.938,1230.18 541.525,1231.4 542.111,1232.13 542.697,1230.55 543.284,1232.9 543.87,1231.38 544.457,1233.85 545.043,1233.67 545.63,1234.34 546.216,1233.87 546.802,1232.2 547.389,1231.61 547.975,1231 548.562,1234.23 549.148,1233.73 549.734,1235.84 550.321,1236.55 550.907,1235.96 551.494,1237.84 552.08,1239.49 552.666,1239.8 553.253,1242.88 553.839,1241.84 554.426,1240.84 555.012,1240.22 555.599,1240.28 556.185,1240.49 556.771,1240.85 557.358,1237.21 557.944,1239.01 558.531,1236.83 559.117,1239.87 559.703,1237.78 560.29,1237.05 560.876,1232.47 561.463,1231.95 562.049,1230.41 562.635,1228.71 563.222,1229.59 563.808,1229.09 564.395,1227.37 564.981,1229.55 565.568,1227.68 566.154,1227.23 566.74,1228.12 567.327,1227.8 567.913,1225.93 568.5,1229.54 569.086,1230.32 569.672,1230.94 570.259,1231.58 570.845,1233.39 571.432,1231.29 572.018,1230.76 572.605,1232.71 573.191,1229.37 573.777,1228.77 574.364,1225.92 574.95,1223.01 575.537,1224.17 576.123,1225.35 576.709,1224.93 577.296,1224.71 577.882,1224.42 578.469,1225.7 579.055,1225.3 579.641,1224.98 580.228,1224.54 580.814,1223.01 581.401,1220.19 581.987,1222.53 582.574,1221.1 583.16,1219.84 583.746,1215.9 584.333,1215.95 584.919,1217.13 585.506,1217.18 586.092,1218.35 586.678,1215.67 587.265,1214.68 587.851,1214.83 588.438,1215.25 589.024,1214.18 589.61,1215.68 590.197,1217.05 590.783,1217.24 591.37,1217.24 591.956,1218.58 592.543,1220.18 593.129,1219.91 593.715,1222.67 594.302,1222.38 594.888,1221.11 595.475,1222.12 596.061,1221.99 596.647,1222.16 597.234,1221.94 597.82,1223.16 598.407,1224.08 598.993,1223.79 599.579,1223.66 600.166,1224.8 600.752,1226.81 601.339,1226.4 601.925,1224.52 602.512,1225.7 603.098,1226.23 603.684,1226.74 604.271,1226.39 604.857,1227.39 605.444,1226.96 606.03,1226.32 606.616,1225.88 607.203,1225.14 607.789,1223.63 608.376,1221.87 608.962,1222.95 609.548,1222.5 610.135,1223.71 610.721,1224.44 611.308,1221.53 611.894,1223.65 612.481,1224.43 613.067,1220.32 613.653,1221.33 614.24,1218.76 614.826,1219.76 615.413,1219.65 615.999,1221.87 616.585,1222.93 617.172,1222.34 617.758,1220.86 618.345,1220.82 618.931,1220.5 619.518,1221.59 620.104,1222.49 620.69,1218.08 621.277,1219.27 621.863,1219.05 622.45,1219.13 623.036,1217.69 623.622,1219.03 624.209,1219.16 624.795,1216.73 625.382,1218.99 625.968,1218.84 626.554,1218.92 627.141,1218.79 627.727,1218.63 628.314,1216.09 628.9,1218.78 629.487,1213.33 630.073,1212.11 630.659,1213.63 631.246,1213.74 631.832,1212.57 632.419,1211.36 633.005,1212.65 633.591,1212.54 634.178,1214.12 634.764,1215.11 635.351,1216.46 635.937,1213.43 636.523,1211.75 637.11,1213.37 637.696,1213.5 638.283,1216.31 638.869,1217.66 639.456,1217.7 640.042,1220.03 640.628,1219.67 641.215,1221.81 641.801,1220.24 642.388,1221.14 642.974,1222.05 643.56,1221.61 644.147,1221.38 644.733,1220.99 645.32,1221.71 645.906,1223.76 646.492,1223.05 647.079,1222.6 647.665,1223.29 648.252,1224.02 648.838,1223.6 649.425,1223.13 650.011,1224.04 650.597,1224.97 651.184,1224.46 651.77,1225.33 652.357,1226.81 652.943,1227.6 653.529,1224.34 654.116,1222.62 654.702,1220.85 655.289,1221.77 655.875,1221.25 656.462,1219.4 657.048,1219 657.634,1223.63 658.221,1222.27 658.807,1221.94 659.394,1217.8 659.98,1217.61 660.566,1221.03 661.153,1217.84 661.739,1219.16 662.326,1219.95 662.912,1219.58 663.498,1219.12 664.085,1217.57 664.671,1215.86 665.258,1220.95 665.844,1218.14 666.431,1218.9 667.017,1215.96 667.603,1217.12 668.19,1216.82 668.776,1216.6 669.363,1216.39 669.949,1215.04 670.535,1214.85 671.122,1216 671.708,1214.54 672.295,1210.52 672.881,1210.58 673.467,1210.58 674.054,1210.59 674.64,1208.26 675.227,1205.96 675.813,1208.76 676.4,1207.71 676.986,1207.99 677.572,1208.24 678.159,1208.51 678.745,1207.75 679.332,1207.92 679.918,1210.76 680.504,1208.57 681.091,1208.71 681.677,1208.8 682.264,1206.74 682.85,1208.26 683.436,1209.94 684.023,1211.41 684.609,1214.1 685.196,1213.93 685.782,1213.89 686.369,1213.84 686.955,1212.29 687.541,1209.7 688.128,1208.65 688.714,1208.84 689.301,1210.18 689.887,1209.17 690.473,1210.78 691.06,1213.39 691.646,1213.3 692.233,1212.03 692.819,1213.17 693.405,1213.05 693.992,1211.57 694.578,1212.71 695.165,1213.74 695.751,1214.03 696.338,1213.94 696.924,1215.04 697.51,1214.72 698.097,1218.36 698.683,1219.63 699.27,1220.46 699.856,1222.56 700.442,1222.06 701.029,1220.23 701.615,1213.39 702.202,1213.52 702.788,1213.74 703.375,1216.09 703.961,1217 704.547,1220.55 705.134,1220.1 705.72,1218.13 706.307,1217.87 706.893,1216.46 707.479,1215.03 708.066,1214.88 708.652,1212.1 709.239,1208.18 709.825,1209.44 710.411,1209.27 710.998,1209.12 711.584,1210.38 712.171,1210.26 712.757,1213.89 713.344,1213.7 713.93,1212.28 714.516,1212.33 715.103,1211.12 715.689,1212.24 716.276,1212.14 716.862,1213.41 717.448,1213.41 718.035,1212.19 718.621,1213.17 719.208,1212.85 719.794,1212.71 720.38,1212.69 720.967,1211.26 721.553,1211.03 722.14,1210.95 722.726,1214.97 723.313,1214.48 723.899,1212.81 724.485,1211.6 725.072,1210.07 725.658,1210.19 726.245,1209.01 726.831,1205.31 727.417,1201.75 728.004,1206.04 728.59,1206.2 729.177,1206.64 729.763,1207.01 730.349,1210.76 730.936,1209.68 731.522,1208.61 732.109,1210 732.695,1212.62 733.282,1212.77 733.868,1209.88 734.454,1208.56 735.041,1207.45 735.627,1206.46 736.214,1208.11 736.8,1209.6 737.386,1206.71 737.973,1207 738.559,1205.85 739.146,1206.06 739.732,1207.54 740.318,1209.06 740.905,1207.8 741.491,1206.53 742.078,1205.36 742.664,1205.84 743.251,1207.46 743.837,1207.65 744.423,1207.83 745.01,1207.81 745.596,1209.35 746.183,1208.04 746.769,1208.26 747.355,1208.36 747.942,1209.72 748.528,1209.61 749.115,1208.44 749.701,1207.49 750.288,1207.87 750.874,1206.5 751.46,1203.96 752.047,1202.72 752.633,1203.17 753.22,1203.8 753.806,1202.62 754.392,1203.28 754.979,1202.37 755.565,1202.98 756.152,1202.15 756.738,1202.79 757.324,1204.47 757.911,1201.13 758.497,1203.09 759.084,1203.42 759.67,1206.23 760.257,1208.93 760.843,1207.88 761.429,1206.68 762.016,1208 762.602,1210.71 763.189,1210.83 763.775,1211.04 764.361,1210.8 764.948,1212.01 765.534,1212.92 766.121,1211.31 766.707,1211.5 767.293,1211.27 767.88,1211.17 768.466,1211.08 769.053,1211.04 769.639,1213.34 770.226,1215.54 770.812,1216.69 771.398,1218.67 771.985,1218.25 772.571,1217.78 773.158,1218.52 773.744,1221.77 774.33,1222.43 774.917,1222.93 775.503,1223.31 776.09,1222.65 776.676,1218.1 777.262,1216.54 777.849,1217.26 778.435,1218.22 779.022,1217.9 779.608,1217.21 780.195,1218.02 780.781,1217.58 781.367,1219.87 781.954,1219.14 782.54,1217.26 783.127,1216.66 783.713,1214.82 784.299,1218.47 784.886,1216.73 785.472,1214 786.059,1212.67 786.645,1212.23 787.232,1213.49 787.818,1211.74 788.404,1211.44 788.991,1209.77 789.577,1209.76 790.164,1211.03 790.75,1212.47 791.336,1213.5 791.923,1213.03 792.509,1214.32 793.096,1215.29 793.682,1214.93 794.268,1213.4 794.855,1214.32 795.441,1216.36 796.028,1215.95 796.614,1214.3 797.201,1215.27 797.787,1212.3 798.373,1214.41 798.96,1211.46 799.546,1208.9 800.133,1212.61 800.719,1212.52 801.305,1214.59 801.892,1213.2 802.478,1212.85 803.065,1213.03 803.651,1210.42 804.237,1207.52 804.824,1204.95 805.41,1206.63 805.997,1205.47 806.583,1208.16 807.17,1209.49 807.756,1210.66 808.342,1209.31 808.929,1210.47 809.515,1207.94 810.102,1208.05 810.688,1209.27 811.274,1207.83 811.861,1209.19 812.447,1212.95 813.034,1211.51 813.62,1211.02 814.206,1210.81 814.793,1209.5 815.379,1209.41 815.966,1209.63 816.552,1209.49 817.139,1210.81 817.725,1207.95 818.311,1206.76 818.898,1206.67 819.484,1207.76 820.071,1206.39 820.657,1205.02 821.243,1207.67 821.83,1206.41 822.416,1205.17 823.003,1206.74 823.589,1205.56 824.175,1205.61 824.762,1206.96 825.348,1207.99 825.935,1206.75 826.521,1207.16 827.108,1207.17 827.694,1207.2 828.28,1208.33 828.867,1208.36 829.453,1208.67 830.04,1208.64 830.626,1206.13 831.212,1205.13 831.799,1205.43 832.385,1206.68 832.972,1206.58 833.558,1203.97 834.145,1205.74 834.731,1207.21 835.317,1207.47 835.904,1206.4 836.49,1206.65 837.077,1210.27 837.663,1209.02 838.249,1207.61 838.836,1211.47 839.422,1208.39 840.009,1207.16 840.595,1208.5 841.181,1208.52 841.768,1209.78 842.354,1209.78 842.941,1210.96 843.527,1211.98 844.114,1212.97 844.7,1212.78 845.286,1212.6 845.873,1213.35 846.459,1211.75 847.046,1211.49 847.632,1210.01 848.218,1209.89 848.805,1209.79 849.391,1213.75 849.978,1209.8 850.564,1210.83 851.15,1210.83 851.737,1210.64 852.323,1210.29 852.91,1208.83 853.496,1208.95 854.083,1206.32 854.669,1208.08 855.255,1206.73 855.842,1205.38 856.428,1205.63 857.015,1208.44 857.601,1210.02 858.187,1208.82 858.774,1207.46 859.36,1206.47 859.947,1209.22 860.533,1210.74 861.119,1211.99 861.706,1214.64 862.292,1215.7 862.879,1215.61 863.465,1214.14 864.052,1213.96 864.638,1213.51 865.224,1212.98 865.811,1214.02 866.397,1214.9 866.984,1214.66 867.57,1213.06 868.156,1211.48 868.743,1211.41 869.329,1211.29 869.916,1210.83 870.502,1210.54 871.089,1210.35 871.675,1210.08 872.261,1209.79 872.848,1208.41 873.434,1208.57 874.021,1207.26 874.607,1211.01 875.193,1212.09 875.78,1211.97 876.366,1210.43 876.953,1210.26 877.539,1207.65 878.125,1207.92 878.712,1205.57 879.298,1205.67 879.885,1205.58 880.471,1206.83 881.058,1206.96 881.644,1202.05 882.23,1202.33 882.817,1200.29 883.403,1203.34 883.99,1202.48 884.576,1204.17 885.162,1206.7 885.749,1206.99 886.335,1206.87 886.922,1205.62 887.508,1205.92 888.094,1204.74 888.681,1204.85 889.267,1208.73 889.854,1208.52 890.44,1209.53 891.027,1210.73 891.613,1210.79 892.199,1210.75 892.786,1210.69 893.372,1206.78 893.959,1205.64 894.545,1204.61 895.131,1207.15 895.718,1205.96 896.304,1206.12 896.891,1207.46 897.477,1209.95 898.063,1208.29 898.65,1206.94 899.236,1209.67 899.823,1210.88 900.409,1211.82 900.996,1215.28 901.582,1218.49 902.168,1216.79 902.755,1216.24 903.341,1213.49 903.928,1210.69 904.514,1212.02 905.1,1211.73 905.687,1211.29 906.273,1212.46 906.86,1212.38 907.446,1212.19 908.032,1209.55 908.619,1209.22 909.205,1209.04 909.792,1207.48 910.378,1208.64 910.965,1208.61 911.551,1209.86 912.137,1206.26 912.724,1205.19 913.31,1205.41 913.897,1209.3 914.483,1206.58 915.069,1205.39 915.656,1205.71 916.242,1201.93 916.829,1201.09 917.415,1199 918.002,1199.31 918.588,1202.14 919.174,1199.82 919.761,1201.54 920.347,1200.47 920.934,1198.4 921.52,1200.26 922.106,1199.32 922.693,1199.78 923.279,1204.02 923.866,1203.19 924.452,1204.58 925.038,1204.9 925.625,1206.22 926.211,1207.88 926.798,1205.49 927.384,1204.5 927.971,1204.92 928.557,1204.86 929.143,1206.13 929.73,1205.05 930.316,1205.35 930.903,1205.28 931.489,1208.14 932.075,1210.51 932.662,1210.27 933.248,1210.05 933.835,1209.6 934.421,1209.94 935.007,1212.33 935.594,1210.81 936.18,1210.96 936.767,1210.62 937.353,1209.17 937.94,1209 938.526,1210.22 939.112,1209.09 939.699,1207.81 940.285,1207.44 940.872,1207.4 941.458,1207.47 942.044,1207.42 942.631,1208.8 943.217,1211.43 943.804,1209.91 944.39,1210.85 944.976,1209.4 945.563,1210.49 946.149,1210.21 946.736,1206.21 947.322,1206.27 947.909,1206.36 948.495,1208.79 949.081,1207.34 949.668,1209.67 950.254,1209.67 950.841,1212.17 951.427,1211.83 952.013,1210.12 952.6,1209.85 953.186,1209.72 953.773,1210.72 954.359,1210.65 954.945,1210.2 955.532,1212.46 956.118,1212.46 956.705,1209.75 957.291,1208.2 957.878,1208.12 958.464,1208 959.05,1210.53 959.637,1209.25 960.223,1210.23 960.81,1209.96 961.396,1210.05 961.982,1208.68 962.569,1208.68 963.155,1211.19 963.742,1215.69 964.328,1216.2 964.915,1216.91 965.501,1213.9 966.087,1213.61 966.674,1212.1 967.26,1212.99 967.847,1213.98 968.433,1213.48 969.019,1211.57 969.606,1209.68 970.192,1208.31 970.779,1209.52 971.365,1211.82 971.951,1211.33 972.538,1210.78 973.124,1209.17 973.711,1208.94 974.297,1207.89 974.884,1205.39 975.47,1205.03 976.056,1202.37 976.643,1203.46 977.229,1207.26 977.816,1206.21 978.402,1206.26 978.988,1206.37 979.575,1209.11 980.161,1211.51 980.748,1210.89 981.334,1209.49 981.92,1209.44 982.507,1209.44 983.093,1207.88 983.68,1206.38 984.266,1200.04 984.853,1200.16 985.439,1201.59 986.025,1202.09 986.612,1200.81 987.198,1199.86 987.785,1201.53 988.371,1199.36 988.957,1201.02 989.544,1201.2 990.13,1201.49 990.717,1201.68 991.303,1201.74 991.889,1201.96 992.476,1202.12 993.062,1202.12 993.649,1202.54 994.235,1203.96 994.822,1201.59 995.408,1202.16 995.994,1202.46 996.581,1202.72 997.167,1202.66 997.754,1202.87 998.34,1204.17 998.926,1204.36 999.513,1204.39 1000.1,1201.98 1000.69,1204.63 1001.27,1206.01 1001.86,1208.61 1002.44,1209.85 1003.03,1210.95 1003.62,1208.42 1004.2,1207 1004.79,1207.16 1005.38,1207.28 1005.96,1207.22 1006.55,1206.16 1007.14,1207.6 1007.72,1208.55 1008.31,1208.36 1008.9,1207.02 1009.48,1205.46 1010.07,1209.35 1010.65,1209.2 1011.24,1206.65 1011.83,1206.72 1012.41,1208.12 1013,1209.33 1013.59,1206.72 1014.17,1206.69 1014.76,1207.88 1015.35,1209.09 1015.93,1207.95 1016.52,1208.11 1017.11,1209.18 1017.69,1207.67 1018.28,1207.58 1018.86,1205.33 1019.45,1202.92 1020.04,1203.29 1020.62,1201.02 1021.21,1199.1 1021.8,1199.79 1022.38,1201.39 1022.97,1202.99 1023.56,1204.52 1024.14,1203.21 1024.73,1204.68 1025.32,1203.44 1025.9,1202.33 1026.49,1201.5 1027.07,1201.76 1027.66,1200.98 1028.25,1201.2 1028.83,1204.09 1029.42,1204.38 1030.01,1204.81 1030.59,1203.56 1031.18,1203.58 1031.77,1207.53 1032.35,1207.47 1032.94,1206.42 1033.52,1207.47 1034.11,1207.64 1034.7,1210.1 1035.28,1212.46 1035.87,1212.2 1036.46,1210.59 1037.04,1213.01 1037.63,1210.32 1038.22,1208.85 1038.8,1208.6 1039.39,1207.42 1039.98,1207.31 1040.56,1206.07 1041.15,1206.17 1041.73,1206.29 1042.32,1207.58 1042.91,1206.6 1043.49,1205.22 1044.08,1207.84 1044.67,1206.89 1045.25,1206.65 1045.84,1206.66 1046.43,1210.33 1047.01,1207.62 1047.6,1210.29 1048.19,1207.8 1048.77,1208.82 1049.36,1206.44 1049.94,1205.15 1050.53,1202.62 1051.12,1201.67 1051.7,1200.66 1052.29,1200.84 1052.88,1203.74 1053.46,1205.01 1054.05,1204.04 1054.64,1202.91 1055.22,1201.72 1055.81,1200.56 1056.39,1202.22 1056.98,1203.68 1057.57,1201.33 1058.15,1201.9 1058.74,1200.97 1059.33,1199.72 1059.91,1199.94 1060.5,1200.12 1061.09,1200.4 1061.67,1200.61 1062.26,1198.25 1062.85,1200.43 1063.43,1200.64 1064.02,1202.33 1064.6,1203.78 1065.19,1202.66 1065.78,1201.72 1066.36,1203.13 1066.95,1207.03 1067.54,1205.85 1068.12,1207.22 1068.71,1205.82 1069.3,1204.26 1069.88,1201.65 1070.47,1198.25 1071.06,1198.85 1071.64,1199.09 1072.23,1200.74 1072.81,1200.06 1073.4,1203.08 1073.99,1206.06 1074.57,1206.26 1075.16,1206.16 1075.75,1206.11 1076.33,1206.14 1076.92,1206.25 1077.51,1204.91 1078.09,1206.31 1078.68,1206.58 1079.26,1207.6 1079.85,1207.66 1080.44,1205.99 1081.02,1211.11 1081.61,1212.06 1082.2,1209.39 1082.78,1209.39 1083.37,1211.82 1083.96,1212.99 1084.54,1210.11 1085.13,1208.53 1085.72,1209.65 1086.3,1210.55 1086.89,1214.14 1087.47,1213.84 1088.06,1214.58 1088.65,1213.03 1089.23,1215.05 1089.82,1216.8 1090.41,1216.59 1090.99,1215.86 1091.58,1216.74 1092.17,1214.74 1092.75,1213.04 1093.34,1210.18 1093.93,1207.29 1094.51,1207 1095.1,1207.05 1095.68,1207.78 1096.27,1208.71 1096.86,1208.75 1097.44,1207.39 1098.03,1210.18 1098.62,1207.33 1099.2,1207.42 1099.79,1206 1100.38,1204.8 1100.96,1203.72 1101.55,1205.08 1102.14,1203.84 1102.72,1204.89 1103.31,1206 1103.89,1206.1 1104.48,1207.55 1105.07,1203.93 1105.65,1204.06 1106.24,1206.68 1106.83,1207.86 1107.41,1206.63 1108,1209.27 1108.59,1211.86 1109.17,1211.58 1109.76,1211.37 1110.34,1212.61 1110.93,1212.49 1111.52,1210.7 1112.1,1211.4 1112.69,1211.25 1113.28,1211.14 1113.86,1210.79 1114.45,1209.23 1115.04,1209.3 1115.62,1210.17 1116.21,1206.2 1116.8,1204.86 1117.38,1203.87 1117.97,1206.43 1118.55,1207.43 1119.14,1208.51 1119.73,1208.49 1120.31,1208.39 1120.9,1209.31 1121.49,1211.36 1122.07,1212.3 1122.66,1211.78 1123.25,1215.38 1123.83,1216.28 1124.42,1214.32 1125.01,1212.52 1125.59,1209.59 1126.18,1210.58 1126.76,1209 1127.35,1206.42 1127.94,1207.53 1128.52,1205.97 1129.11,1205.86 1129.7,1208.39 1130.28,1206.75 1130.87,1206.55 1131.46,1211.4 1132.04,1211.05 1132.63,1208.18 1133.21,1208.13 1133.8,1209.25 1134.39,1210.18 1134.97,1208.54 1135.56,1207.07 1136.15,1207.26 1136.73,1207.32 1137.32,1205.04 1137.91,1207.76 1138.49,1205.09 1139.08,1205.11 1139.67,1202.33 1140.25,1205.36 1140.84,1206.84 1141.42,1205.53 1142.01,1204.41 1142.6,1204.38 1143.18,1203.38 1143.77,1202.04 1144.36,1202.14 1144.94,1201.17 1145.53,1200.39 1146.12,1204.42 1146.7,1201.9 1147.29,1204.42 1147.88,1205.85 1148.46,1205.83 1149.05,1203.19 1149.63,1203.68 1150.22,1207.61 1150.81,1204.86 1151.39,1206.17 1151.98,1207.3 1152.57,1208.4 1153.15,1205.54 1153.74,1204.15 1154.33,1204.34 1154.91,1205.61 1155.5,1208.15 1156.09,1208 1156.67,1206.71 1157.26,1203.01 1157.84,1203.11 1158.43,1203.33 1159.02,1203.46 1159.6,1202.24 1160.19,1203.5 1160.78,1203.71 1161.36,1202.89 1161.95,1205.4 1162.54,1209.34 1163.12,1208.73 1163.71,1208.54 1164.29,1208.29 1164.88,1206.93 1165.47,1207.32 1166.05,1207.22 1166.64,1203.62 1167.23,1205.13 1167.81,1206.48 1168.4,1206.34 1168.99,1204.89 1169.57,1206.06 1170.16,1208.29 1170.75,1208.06 1171.33,1208.07 1171.92,1205.25 1172.5,1202.77 1173.09,1203.21 1173.68,1203.19 1174.26,1204.73 1174.85,1204.42 1175.44,1206.23 1176.02,1206.12 1176.61,1206.19 1177.2,1204.79 1177.78,1206.08 1178.37,1207.31 1178.96,1208.49 1179.54,1209.63 1180.13,1214.47 1180.71,1215.29 1181.3,1214.86 1181.89,1215.91 1182.47,1214.08 1183.06,1211 1183.65,1210.65 1184.23,1210.49 1184.82,1211.21 1185.41,1209.46 1185.99,1210.46 1186.58,1212.67 1187.16,1209.8 1187.75,1209.56 1188.34,1209.42 1188.92,1209.31 1189.51,1210.36 1190.1,1211.08 1190.68,1209.7 1191.27,1209.6 1191.86,1210.58 1192.44,1208.83 1193.03,1208.78 1193.62,1207.55 1194.2,1206.2 1194.79,1204.96 1195.37,1207.47 1195.96,1204.86 1196.55,1203.82 1197.13,1201.61 1197.72,1205.62 1198.31,1206.98 1198.89,1204.43 1199.48,1205.8 1200.07,1204.56 1200.65,1208.23 1201.24,1208.14 1201.83,1207.96 1202.41,1207.88 1203,1206.6 1203.58,1205.47 1204.17,1202.86 1204.76,1204.37 1205.34,1207.26 1205.93,1209.91 1206.52,1211.15 1207.1,1211.34 1207.69,1211.29 1208.28,1209.85 1208.86,1209.42 1209.45,1206.85 1210.03,1204.24 1210.62,1203.47 1211.21,1203.7 1211.79,1206.23 1212.38,1207.72 1212.97,1206.26 1213.55,1207.32 1214.14,1208.61 1214.73,1208.54 1215.31,1209.85 1215.9,1209.91 1216.49,1210.95 1217.07,1209.5 1217.66,1213.2 1218.24,1212.63 1218.83,1213.76 1219.42,1213.44 1220,1212.02 1220.59,1211.87 1221.18,1213.04 1221.76,1211.24 1222.35,1209.77 1222.94,1209.54 1223.52,1212.1 1224.11,1211.9 1224.7,1208.85 1225.28,1209.99 1225.87,1207.17 1226.45,1208.51 1227.04,1209.58 1227.63,1205.68 1228.21,1208.24 1228.8,1209.18 1229.39,1210.44 1229.97,1209.09 1230.56,1208.95 1231.15,1207.44 1231.73,1205.96 1232.32,1205.96 1232.91,1202.3 1233.49,1204.99 1234.08,1205.09 1234.66,1201.25 1235.25,1203.01 1235.84,1200.71 1236.42,1200.82 1237.01,1198.77 1237.6,1199.09 1238.18,1198.09 1238.77,1195.94 1239.36,1196.5 1239.94,1194.65 1240.53,1196.41 1241.11,1198.18 1241.7,1197.64 1242.29,1195.23 1242.87,1195.85 1243.46,1195.09 1244.05,1197.17 1244.63,1197.66 1245.22,1197.93 1245.81,1198.41 1246.39,1201.16 1246.98,1203.92 1247.57,1204.28 1248.15,1204.3 1248.74,1205.85 1249.32,1205.91 1249.91,1207.15 1250.5,1208.44 1251.08,1209.6 1251.67,1209.1 1252.26,1208.86 1252.84,1210.37 1253.43,1210.35 1254.02,1210.24 1254.6,1209.98 1255.19,1212 1255.78,1210.49 1256.36,1211.59 1256.95,1211.11 1257.53,1209.38 1258.12,1209.13 1258.71,1207.77 1259.29,1206.53 1259.88,1206.47 1260.47,1203.87 1261.05,1205.29 1261.64,1204.61 1262.23,1201.07 1262.81,1203.99 1263.4,1202.8 1263.98,1202.9 1264.57,1205.66 1265.16,1203.03 1265.74,1204.42 1266.33,1204.32 1266.92,1201.77 1267.5,1202.07 1268.09,1202.3 1268.68,1205.32 1269.26,1205.3 1269.85,1205.19 1270.44,1207.43 1271.02,1207.55 1271.61,1207.31 1272.19,1208.38 1272.78,1208.28 1273.37,1203.24 1273.95,1203.43 1274.54,1203.37 1275.13,1203.38 1275.71,1202.16 1276.3,1201.06 1276.89,1202.7 1277.47,1201.7 1278.06,1201.94 1278.65,1203.44 1279.23,1203.71 1279.82,1205.07 1280.4,1206.38 1280.99,1206.44 1281.58,1207.68 1282.16,1204.97 1282.75,1203.82 1283.34,1201.41 1283.92,1202.62 1284.51,1201.71 1285.1,1199.12 1285.68,1199.84 1286.27,1197.7 1286.86,1197.85 1287.44,1194.5 1288.03,1198.78 1288.61,1199.24 1289.2,1201.11 1289.79,1202.28 1290.37,1199.94 1290.96,1199.19 1291.55,1199.44 1292.13,1203.52 1292.72,1207.38 1293.31,1207.24 1293.89,1207.13 1294.48,1207.05 1295.06,1206.95 1295.65,1206.67 1296.24,1205.59 1296.82,1205.53 1297.41,1207.03 1298,1207 1298.58,1206.98 1299.17,1205.59 1299.76,1205.62 1300.34,1205.87 1300.93,1208.45 1301.52,1207.37 1302.1,1203.94 1302.69,1202.74 1303.27,1204.02 1303.86,1204.27 1304.45,1201.9 1305.03,1202.04 1305.62,1201.11 1306.21,1202.72 1306.79,1204.14 1307.38,1203.07 1307.97,1204.5 1308.55,1206.01 1309.14,1205.91 1309.73,1203.26 1310.31,1204.78 1310.9,1201.05 1311.48,1199.76 1312.07,1199.98 1312.66,1199.05 1313.24,1200.6 1313.83,1202.32 1314.42,1202.81 1315,1202.74 1315.59,1206.49 1316.18,1206.44 1316.76,1205.23 1317.35,1208.07 1317.93,1208.15 1318.52,1210.43 1319.11,1212.63 1319.69,1212.63 1320.28,1213.14 1320.87,1213.95 1321.45,1213.52 1322.04,1211.94 1322.63,1211.93 1323.21,1210.28 1323.8,1208.7 1324.39,1207.11 1324.97,1205.6 1325.56,1204.37 1326.14,1200.91 1326.73,1202.2 1327.32,1201.1 1327.9,1204.02 1328.49,1204.03 1329.08,1202.86 1329.66,1204.21 1330.25,1204.29 1330.84,1203.25 1331.42,1204.59 1332.01,1207.3 1332.6,1206.13 1333.18,1204.83 1333.77,1204.99 1334.35,1203.79 1334.94,1202.93 1335.53,1205.67 1336.11,1207.06 1336.7,1205.78 1337.29,1205.86 1337.87,1204.6 1338.46,1204.31 1339.05,1205.69 1339.63,1206.98 1340.22,1205.42 1340.8,1206.57 1341.39,1205.14 1341.98,1205.27 1342.56,1205.3 1343.15,1205.23 1343.74,1206.66 1344.32,1207.56 1344.91,1206.14 1345.5,1207.15 1346.08,1208.48 1346.67,1205.85 1347.26,1205.83 1347.84,1207.08 1348.43,1206.76 1349.01,1204.18 1349.6,1204.14 1350.19,1205.45 1350.77,1204.15 1351.36,1204.22 1351.95,1204.26 1352.53,1205.39 1353.12,1204.07 1353.71,1204.14 1354.29,1207.87 1354.88,1206.51 1355.47,1207.61 1356.05,1206.45 1356.64,1206.5 1357.22,1205.32 1357.81,1204.29 1358.4,1205.85 1358.98,1203.35 1359.57,1203.37 1360.16,1204.74 1360.74,1204.98 1361.33,1205.07 1361.92,1204.91 1362.5,1206.43 1363.09,1207.85 1363.68,1207.93 1364.26,1209.07 1364.85,1208.9 1365.43,1210.15 1366.02,1212.43 1366.61,1211.83 1367.19,1211.63 1367.78,1210.03 1368.37,1213.64 1368.95,1211.91 1369.54,1212.88 1370.13,1211.12 1370.71,1208.31 1371.3,1207.09 1371.88,1207.07 1372.47,1208.17 1373.06,1206.93 1373.64,1204.2 1374.23,1202.68 1374.82,1204.07 1375.4,1204.2 1375.99,1203.22 1376.58,1200.64 1377.16,1202.1 1377.75,1202.21 1378.34,1203.48 1378.92,1203.36 1379.51,1203.4 1380.09,1203.48 1380.68,1201.08 1381.27,1198.71 1381.85,1198.94 1382.44,1196.66 1383.03,1195.72 1383.61,1196.53 1384.2,1195.68 1384.79,1197.9 1385.37,1198.46 1385.96,1200.16 1386.55,1197.79 1387.13,1199.34 1387.72,1199.51 1388.3,1199.7 1388.89,1201.2 1389.48,1199.16 1390.06,1199.62 1390.65,1202.7 1391.24,1201.5 1391.82,1201.81 1392.41,1205.73 1393,1206.99 1393.58,1210.61 1394.17,1209.1 1394.75,1207.35 1395.34,1210.93 1395.93,1213.13 1396.51,1211.43 1397.1,1215.12 1397.69,1214.95 1398.27,1211.99 1398.86,1211.56 1399.45,1209.94 1400.03,1209.87 1400.62,1210.93 1401.21,1206.78 1401.79,1210.45 1402.38,1210.15 1402.96,1207.27 1403.55,1207.31 1404.14,1204.46 1404.72,1204.6 1405.31,1204.42 1405.9,1204.54 1406.48,1203.19 1407.07,1202.06 1407.66,1199.83 1408.24,1198.92 1408.83,1200.4 1409.42,1198.5 1410,1198.78 1410.59,1199.23 1411.17,1200.72 1411.76,1202.5 1412.35,1202.64 1412.93,1202.91 1413.52,1204.3 1414.11,1204.39 1414.69,1204.2 1415.28,1205.27 1415.87,1207.67 1416.45,1208.94 1417.04,1210.06 1417.63,1212.28 1418.21,1213.31 1418.8,1212.99 1419.38,1211.38 1419.97,1212.29 1420.56,1209.29 1421.14,1207.76 1421.73,1210.16 1422.32,1209.95 1422.9,1208.38 1423.49,1208.34 1424.08,1208.28 1424.66,1209.48 1425.25,1209.27 1425.83,1215.56 1426.42,1214.06 1427.01,1209.72 1427.59,1214.62 1428.18,1215.3 1428.77,1215.7 1429.35,1215.03 1429.94,1218.16 1430.53,1213.73 1431.11,1211.12 1431.7,1209.69 1432.29,1206.8 1432.87,1205.44 1433.46,1204.36 1434.04,1203.12 1434.63,1203.41 1435.22,1205.02 1435.8,1203.94 1436.39,1204 1436.98,1204.15 1437.56,1204.28 1438.15,1205.6 1438.74,1205.73 1439.32,1205.85 1439.91,1205.62 1440.5,1203.48 1441.08,1203.57 1441.67,1203.72 1442.25,1204.88 1442.84,1204.91 1443.43,1205.03 1444.01,1203.93 1444.6,1200.3 1445.19,1196.9 1445.77,1197.54 1446.36,1199.28 1446.95,1201.95 1447.53,1198.56 1448.12,1199.03 1448.7,1199 1449.29,1199.42 1449.88,1200.93 1450.46,1201.34 1451.05,1201.77 1451.64,1203.43 1452.22,1203.63 1452.81,1203.56 1453.4,1202.59 1453.98,1201.66 1454.57,1201.84 1455.16,1204.64 1455.74,1206.02 1456.33,1208.49 1456.91,1209.88 1457.5,1206.08 1458.09,1205.97 1458.67,1204.64 1459.26,1200.96 1459.85,1201.25 1460.43,1200.36 1461.02,1200.7 1461.61,1201.11 1462.19,1200.09 1462.78,1204.2 1463.37,1204.32 1463.95,1208.25 1464.54,1210.63 1465.12,1211.53 1465.71,1212.57 1466.3,1214.78 1466.88,1211.63 1467.47,1210.09 1468.06,1208.37 1468.64,1208.4 1469.23,1206.78 1469.82,1205.5 1470.4,1207.83 1470.99,1206.51 1471.57,1205.29 1472.16,1204.26 1472.75,1200.58 1473.33,1203.35 1473.92,1204.8 1474.51,1207.24 1475.09,1204.6 1475.68,1204.58 1476.27,1204.72 1476.85,1201.16 1477.44,1201.26 1478.03,1200.3 1478.61,1203.57 1479.2,1204.05 1479.78,1205.54 1480.37,1205.6 1480.96,1206.9 1481.54,1206.88 1482.13,1208.51 1482.72,1208.19 1483.3,1209.46 1483.89,1210.86 1484.48,1212 1485.06,1212.83 1485.65,1210.06 1486.24,1212.42 1486.82,1212.25 1487.41,1213.23 1487.99,1214.4 1488.58,1212.67 1489.17,1211.31 1489.75,1213.73 1490.34,1212.17 1490.93,1209.15 1491.51,1211.33 1492.1,1212.32 1492.69,1209.53 1493.27,1209.42 1493.86,1207.67 1494.45,1207.74 1495.03,1210.34 1495.62,1210.01 1496.2,1207.25 1496.79,1205.71 1497.38,1205.53 1497.96,1205.48 1498.55,1205.31 1499.14,1202.64 1499.72,1202.71 1500.31,1203.03 1500.9,1203.48 1501.48,1201.09 1502.07,1202.79 1502.65,1204.11 1503.24,1202.97 1503.83,1205.42 1504.41,1206.61 1505,1206.74 1505.59,1205.61 1506.17,1208.05 1506.76,1209.34 1507.35,1209.01 1507.93,1209.98 1508.52,1208.29 1509.11,1207.8 1509.69,1208.92 1510.28,1204.68 1510.86,1203.47 1511.45,1205.11 1512.04,1206.5 1512.62,1206.57 1513.21,1207.86 1513.8,1206.46 1514.38,1207.66 1514.97,1207.52 1515.56,1207.27 1516.14,1204.81 1516.73,1205.91 1517.32,1205.71 1517.9,1205.88 1518.49,1204.77 1519.07,1203.69 1519.66,1203.97 1520.25,1204.17 1520.83,1203.05 1521.42,1200.79 1522.01,1198.6 1522.59,1200.13 1523.18,1202.77 1523.77,1208.08 1524.35,1210.48 1524.94,1210.06 1525.52,1210.7 1526.11,1208.84 1526.7,1209.75 1527.28,1209.58 1527.87,1207 1528.46,1208.32 1529.04,1208.28 1529.63,1204.54 1530.22,1205.67 1530.8,1205.8 1531.39,1206.94 1531.98,1206.93 1532.56,1206.88 1533.15,1207.92 1533.73,1210.76 1534.32,1210.74 1534.91,1208.1 1535.49,1210.47 1536.08,1212.55 1536.67,1212.36 1537.25,1213.21 1537.84,1214.08 1538.43,1213.95 1539.01,1213.37 1539.6,1214.34 1540.19,1216.43 1540.77,1217.16 1541.36,1218.87 1541.94,1218.24 1542.53,1220.26 1543.12,1216.75 1543.7,1218.74 1544.29,1217 1544.88,1214.92 1545.46,1216.8 1546.05,1215.16 1546.64,1214.5 1547.22,1213.89 1547.81,1214.91 1548.4,1213.28 1548.98,1215.08 1549.57,1217.17 1550.15,1219.09 1550.74,1217 1551.33,1215.12 1551.91,1212.1 1552.5,1210.62 1553.09,1209.1 1553.67,1206.28 1554.26,1203.7 1554.85,1202.5 1555.43,1202.62 1556.02,1199.04 1556.6,1199.21 1557.19,1201.93 1557.78,1202.29 1558.36,1203.62 1558.95,1202.56 1559.54,1201.29 1560.12,1201.57 1560.71,1203.07 1561.3,1204.52 1561.88,1204.51 1562.47,1204.44 1563.06,1201.9 1563.64,1203.21 1564.23,1204.63 1564.81,1204.84 1565.4,1203.55 1565.99,1203.71 1566.57,1204.88 1567.16,1202.61 1567.75,1200.14 1568.33,1199.08 1568.92,1202.31 1569.51,1202.5 1570.09,1201.38 1570.68,1200.37 1571.27,1198.34 1571.85,1198.61 1572.44,1198.9 1573.02,1201.62 1573.61,1200.69 1574.2,1204.61 1574.78,1206.34 1575.37,1206.21 1575.96,1208.66 1576.54,1208.87 1577.13,1208.91 1577.72,1210.03 1578.3,1209.94 1578.89,1208.82 1579.47,1205.87 1580.06,1204.54 1580.65,1208.38 1581.23,1209.29 1581.82,1209.39 1582.41,1209.41 1582.99,1210.41 1583.58,1210.18 1584.17,1210.32 1584.75,1210.18 1585.34,1207.55 1585.93,1207.41 1586.51,1207.32 1587.1,1204.81 1587.68,1204.68 1588.27,1206.08 1588.86,1203.43 1589.44,1202.22 1590.03,1202.42 1590.62,1202.68 1591.2,1204.08 1591.79,1202.88 1592.38,1205.7 1592.96,1206.9 1593.55,1205.27 1594.14,1205.39 1594.72,1204.36 1595.31,1202.06 1595.89,1204.72 1596.48,1207.54 1597.07,1208.75 1597.65,1208.55 1598.24,1207.25 1598.83,1207.15 1599.41,1207.31 1600,1206.16 1600.59,1208.3 1601.17,1206.89 1601.76,1205.44 1602.34,1202.98 1602.93,1203.32 1603.52,1202.1 1604.1,1202.17 1604.69,1205.02 1605.28,1201.44 1605.86,1205.55 1606.45,1205.42 1607.04,1205.6 1607.62,1208.19 1608.21,1206.85 1608.8,1208.06 1609.38,1207.64 1609.97,1207.54 1610.55,1207.31 1611.14,1207.36 1611.73,1206.1 1612.31,1206.35 1612.9,1206.34 1613.49,1203.67 1614.07,1202.39 1614.66,1203.01 1615.25,1203.19 1615.83,1200.69 1616.42,1200.97 1617.01,1203.8 1617.59,1205.25 1618.18,1205.27 1618.76,1205.44 1619.35,1204.11 1619.94,1204.31 1620.52,1203.04 1621.11,1202.1 1621.7,1202.39 1622.28,1202.64 1622.87,1205.42 1623.46,1204.17 1624.04,1204.37 1624.63,1205.71 1625.22,1204.39 1625.8,1203.42 1626.39,1203.42 1626.97,1202.47 1627.56,1203.93 1628.15,1204.08 1628.73,1202.74 1629.32,1204.06 1629.91,1207.8 1630.49,1207.93 1631.08,1209.06 1631.67,1208.73 1632.25,1208.7 1632.84,1208.85 1633.42,1212.61 1634.01,1214.83 1634.6,1211.82 1635.18,1209.35 1635.77,1208.88 1636.36,1206.33 1636.94,1207.55 1637.53,1206.23 1638.12,1209.74 1638.7,1205.52 1639.29,1207.09 1639.88,1207.24 1640.46,1208.5 1641.05,1208.1 1641.63,1209.48 1642.22,1204.25 1642.81,1205.69 1643.39,1209.45 1643.98,1208.12 1644.57,1207.93 1645.15,1208.04 1645.74,1207.97 1646.33,1207.98 1646.91,1208.37 1647.5,1208.47 1648.09,1207.45 1648.67,1207.6 1649.26,1210.09 1649.84,1208.63 1650.43,1208.52 1651.02,1208.68 1651.6,1211.03 1652.19,1209.39 1652.78,1207.94 1653.36,1205.16 1653.95,1205.33 1654.54,1205.35 1655.12,1205.25 1655.71,1203.72 1656.29,1202.6 1656.88,1204.34 1657.47,1204.12 1658.05,1205.44 1658.64,1205.64 1659.23,1205.66 1659.81,1205.89 1660.4,1203.26 1660.99,1201.98 1661.57,1204.65 1662.16,1204.74 1662.75,1204.75 1663.33,1204.75 1663.92,1204.91 1664.5,1204.85 1665.09,1204.74 1665.68,1203.74 1666.26,1203.82 1666.85,1205.14 1667.44,1206.13 1668.02,1203.59 1668.61,1201.3 1669.2,1203.95 1669.78,1203.08 1670.37,1203.27 1670.96,1204.63 1671.54,1202.11 1672.13,1203.71 1672.71,1199.07 1673.3,1198.41 1673.89,1200.34 1674.47,1200.74 1675.06,1199.96 1675.65,1198.92 1676.23,1198.25 1676.82,1198.59 1677.41,1201.62 1677.99,1202.03 1678.58,1203.47 1679.17,1206.03 1679.75,1209.76 1680.34,1209.61 1680.92,1208.24 1681.51,1208.13 1682.1,1209.23 1682.68,1211.93 1683.27,1209.31 1683.86,1209.23 1684.44,1210.15 1685.03,1209.86 1685.62,1208.51 1686.2,1208.54 1686.79,1209.65 1687.37,1207.96 1687.96,1206.46 1688.55,1205.16 1689.13,1205.23 1689.72,1205.31 1690.31,1205.28 1690.89,1208.24 1691.48,1210.65 1692.07,1209.23 1692.65,1210.39 1693.24,1211.18 1693.83,1210.85 1694.41,1210.32 1695,1208.9 1695.58,1208.68 1696.17,1208.45 1696.76,1207.06 1697.34,1206.91 1697.93,1205.41 1698.52,1205.51 1699.1,1204.38 1699.69,1205.58 1700.28,1205.43 1700.86,1208.03 1701.45,1206.95 1702.04,1208.16 1702.62,1205.39 1703.21,1204.14 1703.79,1207.81 1704.38,1206.42 1704.97,1207.7 1705.55,1210.2 1706.14,1208.79 1706.73,1209.95 1707.31,1210.09 1707.9,1208.87 1708.49,1206.49 1709.07,1207.59 1709.66,1206.39 1710.24,1207.68 1710.83,1208.55 1711.42,1205.78 1712,1205.58 1712.59,1207.04 1713.18,1206.74 1713.76,1205.46 1714.35,1204.09 1714.94,1206.93 1715.52,1204.21 1716.11,1203.08 1716.7,1205.54 1717.28,1205.39 1717.87,1206.58 1718.45,1207.86 1719.04,1207.77 1719.63,1207.72 1720.21,1209.15 1720.8,1207.83 1721.39,1207.85 1721.97,1207.89 1722.56,1205.14 1723.15,1205.14 1723.73,1201.24 1724.32,1201.53 1724.91,1201.78 1725.49,1204.18 1726.08,1202.87 1726.66,1202.89 1727.25,1204.31 1727.84,1208.08 1728.42,1209.05 1729.01,1208.72 1729.6,1208.43 1730.18,1205.78 1730.77,1207.17 1731.36,1206.97 1731.94,1208.31 1732.53,1205.75 1733.11,1205.77 1733.7,1203.35 1734.29,1203.35 1734.87,1202.2 1735.46,1202.31 1736.05,1203.78 1736.63,1206.39 1737.22,1207.59 1737.81,1206.17 1738.39,1204.92 1738.98,1205.05 1739.57,1203.81 1740.15,1202.53 1740.74,1202.74 1741.32,1201.77 1741.91,1201.94 1742.5,1204.45 1743.08,1204.37 1743.67,1202.97 1744.26,1200.7 1744.84,1200.87 1745.43,1202.18 1746.02,1202.53 1746.6,1202.7 1747.19,1204.18 1747.78,1204.53 1748.36,1204.64 1748.95,1206.02 1749.53,1203.43 1750.12,1203.31 1750.71,1204.83 1751.29,1207.51 1751.88,1207.36 1752.47,1208.45 1753.05,1208.24 1753.64,1209.71 1754.23,1210.91 1754.81,1213.23 1755.4,1212.69 1755.99,1209.67 1756.57,1207.03 1757.16,1209.71 1757.74,1209.54 1758.33,1208.06 1758.92,1207.88 1759.5,1205.27 1760.09,1205.16 1760.68,1205.1 1761.26,1203.87 1761.85,1202.63 1762.44,1206.49 1763.02,1202.76 1763.61,1202.91 1764.19,1197.95 1764.78,1198.66 1765.37,1200.4 1765.95,1203.1 1766.54,1201.93 1767.13,1204.82 1767.71,1204.68 1768.3,1205.78 1768.89,1206.16 1769.47,1206.09 1770.06,1208.47 1770.65,1207.22 1771.23,1204.72 1771.82,1200.75 1772.4,1202.52 1772.99,1203.79 1773.58,1202.59 1774.16,1202.87 1774.75,1201.64 1775.34,1203.5 1775.92,1201.53 1776.51,1196.99 1777.1,1197.69 1777.68,1196.64 1778.27,1198.41 1778.86,1196.32 1779.44,1195.48 1780.03,1196.27 1780.61,1196.8 1781.2,1196.02 1781.79,1196.7 1782.37,1195.93 1782.96,1197.76 1783.55,1198.21 1784.13,1198.79 1784.72,1202.86 1785.31,1201.64 1785.89,1203.11 1786.48,1204.39 1787.06,1204.45 1787.65,1205.74 1788.24,1205.77 1788.82,1203.32 1789.41,1204.72 1790,1205.71 1790.58,1209.38 1791.17,1206.64 1791.76,1206.46 1792.34,1208.76 1792.93,1211.19 1793.52,1212.05 1794.1,1214.24 1794.69,1212.78 1795.27,1212.54 1795.86,1212.28 1796.45,1213.36 1797.03,1214.14 1797.62,1212.58 1798.21,1213.55 1798.79,1209.44 1799.38,1209.24 1799.97,1207.79 1800.55,1208.91 1801.14,1208.68 1801.73,1208.69 1802.31,1206.07 1802.9,1203.37 1803.48,1204.78 1804.07,1204.62 1804.66,1203.39 1805.24,1204.66 1805.83,1204.49 1806.42,1204.69 1807,1206.06 1807.59,1206.19 1808.18,1206.37 1808.76,1204.97 1809.35,1205.18 1809.94,1203.91 1810.52,1205 1811.11,1205.03 1811.69,1206.34 1812.28,1204.9 1812.87,1202.28 1813.45,1198.76 1814.04,1200.29 1814.63,1203.24 1815.21,1202.25 1815.8,1202.28 1816.39,1202.53 1816.97,1202.79 1817.56,1201.62 1818.14,1201.75 1818.73,1201 1819.32,1201.06 1819.9,1199.99 1820.49,1201.7 1821.08,1200.96 1821.66,1200.14 1822.25,1201.7 1822.84,1199.27 1823.42,1199.59 1824.01,1199.87 1824.6,1198.92 1825.18,1200.39 1825.77,1199.43 1826.35,1200.98 1826.94,1202.34 1827.53,1203.88 1828.11,1205.29 1828.7,1206.68 1829.29,1209.25 1829.87,1209.09 1830.46,1207.5 1831.05,1209.58 1831.63,1209.33 1832.22,1207.99 1832.81,1207.69 1833.39,1208.72 1833.98,1208.59 1834.56,1205.67 1835.15,1204.46 1835.74,1200.85 1836.32,1201.32 1836.91,1202.89 1837.5,1201.57 1838.08,1204.32 1838.67,1204.48 1839.26,1203.21 1839.84,1203.37 1840.43,1203.71 1841.01,1202.37 1841.6,1204 1842.19,1203.76 1842.77,1205.15 1843.36,1206.66 1843.95,1208.03 1844.53,1206.9 1845.12,1210.3 1845.71,1211.43 1846.29,1211.51 1846.88,1213.41 1847.47,1212.01 1848.05,1211.76 1848.64,1208.96 1849.22,1208.8 1849.81,1207.43 1850.4,1208.21 1850.98,1206.87 1851.57,1206.81 1852.16,1208.21 1852.74,1209.32 1853.33,1208.73 1853.92,1208.54 1854.5,1209.55 1855.09,1211.79 1855.68,1211.41 1856.26,1210.88 1856.85,1211.82 1857.43,1211.32 1858.02,1210.96 1858.61,1210.85 1859.19,1213.38 1859.78,1213.94 1860.37,1213.53 1860.95,1211.79 1861.54,1210.14 1862.13,1212.29 1862.71,1212.84 1863.3,1210.06 1863.88,1209.69 1864.47,1209.56 1865.06,1210.32 1865.64,1208.59 1866.23,1207.12 1866.82,1207.96 1867.4,1206.35 1867.99,1206.27 1868.58,1205.23 1869.16,1205.46 1869.75,1202.99 1870.34,1204.45 1870.92,1204.58 1871.51,1203.37 1872.09,1203.6 1872.68,1202.6 1873.27,1203.08 1873.85,1207.02 1874.44,1205.48 1875.03,1206.76 1875.61,1208.02 1876.2,1208.05 1876.79,1206.42 1877.37,1206.55 1877.96,1202.7 1878.55,1205.24 1879.13,1205.03 1879.72,1206.39 1880.3,1206.37 1880.89,1206.53 1881.48,1205.41 1882.06,1203.05 1882.65,1203.29 1883.24,1203.32 1883.82,1204.9 1884.41,1206.49 1885,1205.07 1885.58,1207.79 1886.17,1207.69 1886.76,1210.29 1887.34,1207.52 1887.93,1207.53 1888.51,1205.95 1889.1,1205.98 1889.69,1208.27 1890.27,1205.55 1890.86,1206.74 1891.45,1206.61 1892.03,1207.79 1892.62,1206.65 1893.21,1204.17 1893.79,1201.83 1894.38,1203.27 1894.96,1204.79 1895.55,1204.74 1896.14,1206.03 1896.72,1206.09 1897.31,1207.08 1897.9,1205.81 1898.48,1208.3 1899.07,1204.58 1899.66,1206.9 1900.24,1205.51 1900.83,1204.16 1901.42,1204.59 1902,1203.74 1902.59,1203.96 1903.17,1202.87 1903.76,1201.59 1904.35,1203.27 1904.93,1202.53 1905.52,1205.16 1906.11,1204.98 1906.69,1203.74 1907.28,1202.63 1907.87,1204.1 1908.45,1204.22 1909.04,1204.16 1909.63,1203.07 1910.21,1201.88 1910.8,1202.42 1911.38,1200.94 1911.97,1201.13 1912.56,1200.04 1913.14,1198.14 1913.73,1198.54 1914.32,1198.85 1914.9,1201.9 1915.49,1202.04 1916.08,1198.54 1916.66,1200.07 1917.25,1201.59 1917.83,1204.43 1918.42,1203.1 1919.01,1205.72 1919.59,1202 1920.18,1199.86 1920.77,1202.71 1921.35,1206.88 1921.94,1206.61 1922.53,1209.06 1923.11,1212.6 1923.7,1212.37 1924.29,1213.56 1924.87,1211.82 1925.46,1212.52 1926.04,1211.97 1926.63,1211.68 1927.22,1212.53 1927.8,1213.45 1928.39,1212.1 1928.98,1214.33 1929.56,1213.92 1930.15,1213.43 1930.74,1212.78 1931.32,1210.81 1931.91,1210.67 1932.5,1210.21 1933.08,1208.78 1933.67,1207.42 1934.25,1207.44 1934.84,1207.39 1935.43,1208.19 1936.01,1207.77 1936.6,1208.85 1937.19,1206.24 1937.77,1203.41 1938.36,1204.75 1938.95,1204.95 1939.53,1205.99 1940.12,1206.08 1940.71,1203.55 1941.29,1203.86 1941.88,1202.84 1942.46,1203.12 1943.05,1204.45 1943.64,1202.04 1944.22,1203.21 1944.81,1200.58 1945.4,1199.39 1945.98,1199.69 1946.57,1198.66 1947.16,1199.24 1947.74,1199.86 1948.33,1201.6 1948.91,1201.95 1949.5,1200.79 1950.09,1203.67 1950.67,1203.93 1951.26,1203.85 1951.85,1204.03 1952.43,1205.23 1953.02,1206.54 1953.61,1206.63 1954.19,1206.75 1954.78,1206.59 1955.37,1206.72 1955.95,1210.66 1956.54,1209.46 1957.12,1210.5 1957.71,1211.89 1958.3,1211.61 1958.88,1211.32 1959.47,1209.83 1960.06,1208.45 1960.64,1205.4 1961.23,1205.39 1961.82,1205.37 1962.4,1203.95 1962.99,1206.77 1963.58,1206.77 1964.16,1208.21 1964.75,1205.61 1965.33,1205.65 1965.92,1206.99 1966.51,1207.98 1967.09,1209.1 1967.68,1208.85 1968.27,1211.08 1968.85,1213.13 1969.44,1211.44 1970.03,1212.38 1970.61,1210.81 1971.2,1211.75 1971.78,1211.84 1972.37,1211.33 1972.96,1210.91 1973.54,1210.68 1974.13,1210.38 1974.72,1212.24 1975.3,1208.23 1975.89,1206.89 1976.48,1209.38 1977.06,1209.36 1977.65,1209.25 1978.24,1208.74 1978.82,1207.27 1979.41,1208.28 1979.99,1208.19 1980.58,1207 1981.17,1204.7 1981.75,1204.68 1982.34,1205.76 1982.93,1204.41 1983.51,1204.56 1984.1,1203.43 1984.69,1203.48 1985.27,1202.56 1985.86,1204.18 1986.45,1202.76 1987.03,1204.27 1987.62,1206.83 1988.2,1209.4 1988.79,1211.84 1989.38,1212.76 1989.96,1208.64 1990.55,1209.49 1991.14,1209.41 1991.72,1210.66 1992.31,1210.61 1992.9,1211.6 1993.48,1212.44 1994.07,1213.45 1994.65,1209.2 1995.24,1209.08 1995.83,1207.49 1996.41,1207.27 1997,1209.82 1997.59,1212.19 1998.17,1212.92 1998.76,1212.49 1999.35,1212.08 1999.93,1211.84 2000.52,1212.81 2001.11,1212.36 2001.69,1212.51 2002.28,1212.03 2002.86,1210.2 2003.45,1208.65 2004.04,1205.78 2004.62,1204.59 2005.21,1207.1 2005.8,1206.02 2006.38,1204.77 2006.97,1204.85 2007.56,1205.93 2008.14,1208.45 2008.73,1205.56 2009.32,1205.69 2009.9,1206.66 2010.49,1207.59 2011.07,1208.77 2011.66,1203.62 2012.25,1201.02 2012.83,1201.55 2013.42,1201.62 2014.01,1204.3 2014.59,1200.28 2015.18,1201.89 2015.77,1204.57 2016.35,1204.56 2016.94,1205.89 2017.53,1205.91 2018.11,1202.25 2018.7,1202.19 2019.28,1202.36 2019.87,1202.52 2020.46,1201.42 2021.04,1201.53 2021.63,1201.74 2022.22,1202.03 2022.8,1201.23 2023.39,1201.5 2023.98,1201.84 2024.56,1201.85 2025.15,1200.54 2025.73,1200.64 2026.32,1202.09 2026.91,1203.72 2027.49,1202.49 2028.08,1202.66 2028.67,1206.61 2029.25,1205.35 2029.84,1204.38 2030.43,1203.35 2031.01,1203.45 2031.6,1204.73 2032.19,1204.93 2032.77,1206.1 2033.36,1208.9 2033.94,1208.76 2034.53,1211.13 2035.12,1208.63 2035.7,1208.25 2036.29,1205.59 2036.88,1205.72 2037.46,1206 2038.05,1207.11 2038.64,1208.2 2039.22,1207.97 2039.81,1206.33 2040.4,1203.76 2040.98,1205.03 2041.57,1206.47 2042.15,1202.96 2042.74,1202.16 2043.33,1203.52 2043.91,1198.84 2044.5,1200.39 2045.09,1200.48 2045.67,1202.03 2046.26,1203.51 2046.85,1202.24 2047.43,1203.65 2048.02,1205.17 2048.6,1205.27 2049.19,1206.68 2049.78,1206.62 2050.36,1207.67 2050.95,1208.83 2051.54,1206.05 2052.12,1204.54 2052.71,1204.94 2053.3,1207.5 2053.88,1209.89 2054.47,1205.96 2055.06,1207.23 2055.64,1205.93 2056.23,1204.85 2056.81,1200.87 2057.4,1199.91 2057.99,1199.13 2058.57,1202.04 2059.16,1203.21 2059.75,1203.31 2060.33,1202.09 2060.92,1203.79 2061.51,1204.15 2062.09,1204.35 2062.68,1208.27 2063.27,1210.62 2063.85,1209.48 2064.44,1207.96 2065.02,1206.71 2065.61,1208.01 2066.2,1206.73 2066.78,1206.93 2067.37,1206.82 2067.96,1206.77 2068.54,1207.03 2069.13,1208.31 2069.72,1209.13 2070.3,1210.17 2070.89,1211.32 2071.48,1210.9 2072.06,1210.61 2072.65,1210.41 2073.23,1212.82 2073.82,1212.57 2074.41,1210.73 2074.99,1210.62 2075.58,1214.19 2076.17,1213.84 2076.75,1210.88 2077.34,1210.55 2077.93,1210.46 2078.51,1210.3 2079.1,1211.34 2079.68,1209.92 2080.27,1211.03 2080.86,1208.25 2081.44,1208.27 2082.03,1205.73 2082.62,1208.23 2083.2,1209.38 2083.79,1206.8 2084.38,1205.67 2084.96,1202.92 2085.55,1201.94 2086.14,1201.14 2086.72,1202.52 2087.31,1202.85 2087.89,1202.93 2088.48,1204.36 2089.07,1204.48 2089.65,1203.27 2090.24,1203.26 2090.83,1203.65 2091.41,1206.05 2092,1204.73 2092.59,1204.68 2093.17,1208.52 2093.76,1208.27 2094.35,1205.53 2094.93,1203.07 2095.52,1204.66 2096.1,1206.21 2096.69,1203.52 2097.28,1199.94 2097.86,1199.03 2098.45,1200.67 2099.04,1201.16 2099.62,1202.9 2100.21,1201.87 2100.8,1200.9 2101.38,1203.81 2101.97,1204 2102.55,1206.45 2103.14,1205.12 2103.73,1206.4 2104.31,1206.43 2104.9,1205.33 2105.49,1203.84 2106.07,1202.67 2106.66,1201.61 2107.25,1201.67 2107.83,1200.88 2108.42,1198.67 2109.01,1199.14 2109.59,1202.37 2110.18,1205.11 2110.76,1205.12 2111.35,1205.05 2111.94,1205.12 2112.52,1204.01 2113.11,1204.25 2113.7,1204.19 2114.28,1202.98 2114.87,1204.48 2115.46,1205.97 2116.04,1208.44 2116.63,1209.71 2117.22,1209.59 2117.8,1209.43 2118.39,1209.24 2118.97,1206.47 2119.56,1206.37 2120.15,1205.31 2120.73,1204.27 2121.32,1204.4 2121.91,1205.95 2122.49,1208.45 2123.08,1206.97 2123.67,1206.81 2124.25,1205.48 2124.84,1204.01 2125.42,1204.2 2126.01,1206.63 2126.6,1206.65 2127.18,1205.64 2127.77,1205.54 2128.36,1205.37 2128.94,1202.84 2129.53,1202.84 2130.12,1200.55 2130.7,1201.08 2131.29,1200.22 2131.88,1200.79 2132.46,1199.65 2133.05,1201.31 2133.63,1199.01 2134.22,1199.16 2134.81,1200.78 2135.39,1202.33 2135.98,1201.13 2136.57,1204.96 2137.15,1205.3 2137.74,1207.74 2138.33,1208.7 2138.91,1205.76 2139.5,1209.61 2140.09,1210.45 2140.67,1212.77 2141.26,1212.12 2141.84,1214.25 2142.43,1215.13 2143.02,1213.61 2143.6,1215.88 2144.19,1215.44 2144.78,1213.69 2145.36,1213.49 2145.95,1215.72 2146.54,1216.52 2147.12,1215.92 2147.71,1215.54 2148.3,1214.79 2148.88,1214.35 2149.47,1211.32 2150.05,1205.84 2150.64,1205.76 2151.23,1203.24 2151.81,1204.89 2152.4,1204.74 2152.99,1203.5 2153.57,1202.5 2154.16,1201.65 2154.75,1200.86 2155.33,1199.91 2155.92,1201.19 2156.5,1202.64 2157.09,1202.82 2157.68,1202.74 2158.26,1202.75 \"/>\n<path clip-path=\"url(#clip112)\" d=\"M986.025 1206.35 L986.612 1206.35 L987.198 1206.35 L987.785 1206.35 L988.371 1206.35 L988.957 1206.35 L989.544 1206.35 L990.13 1206.35 L990.717 1206.35 L991.303 1206.35 L991.889 1206.35 L992.476 1206.35 L993.062 1206.35 L993.649 1206.35 L994.235 1206.35 L994.822 1206.35 L995.408 1206.35 L995.994 1206.35 L996.581 1206.35 L997.167 1206.35 L997.754 1206.35 L998.34 1206.35 L998.926 1206.35 L999.513 1206.35 L1000.1 1206.35 L1000.69 1206.35 L1001.27 1206.35 L1001.86 1206.35 L1002.44 1206.35 L1003.03 1206.35 L1003.62 1206.35 L1004.2 1206.35 L1004.79 1206.35 L1005.38 1206.35 L1005.96 1206.35 L1006.55 1206.35 L1007.14 1206.35 L1007.72 1206.35 L1008.31 1206.35 L1008.9 1206.35 L1009.48 1206.35 L1010.07 1206.35 L1010.65 1206.35 L1011.24 1206.35 L1011.83 1206.35 L1012.41 1206.35 L1013 1206.35 L1013.59 1206.35 L1014.17 1206.35 L1014.76 1206.35 L1015.35 1206.35 L1015.93 1206.35 L1016.52 1206.35 L1017.11 1206.35 L1017.69 1206.35 L1018.28 1206.35 L1018.86 1206.35 L1019.45 1206.35 L1020.04 1206.35 L1020.62 1206.35 L1021.21 1206.35 L1021.8 1206.35 L1022.38 1206.35 L1022.97 1206.35 L1023.56 1206.35 L1024.14 1206.35 L1024.73 1206.35 L1025.32 1206.35 L1025.9 1206.35 L1026.49 1206.35 L1027.07 1206.35 L1027.66 1206.35 L1028.25 1206.35 L1028.83 1206.35 L1029.42 1206.35 L1030.01 1206.35 L1030.59 1206.35 L1031.18 1206.35 L1031.77 1206.35 L1032.35 1206.35 L1032.94 1206.35 L1033.52 1206.35 L1034.11 1206.35 L1034.7 1206.35 L1035.28 1206.35 L1035.87 1206.35 L1036.46 1206.35 L1037.04 1206.35 L1037.63 1206.35 L1038.22 1206.35 L1038.8 1206.35 L1039.39 1206.35 L1039.98 1206.35 L1040.56 1206.35 L1041.15 1206.35 L1041.73 1206.35 L1042.32 1206.35 L1042.91 1206.35 L1043.49 1206.35 L1044.08 1206.35 L1044.67 1206.35 L1045.25 1206.35 L1045.84 1206.35 L1046.43 1206.35 L1047.01 1206.35 L1047.6 1206.35 L1048.19 1206.35 L1048.77 1206.35 L1049.36 1206.35 L1049.94 1206.35 L1050.53 1206.35 L1051.12 1206.35 L1051.7 1206.35 L1052.29 1206.35 L1052.88 1206.35 L1053.46 1206.35 L1054.05 1206.35 L1054.64 1206.35 L1055.22 1206.35 L1055.81 1206.35 L1056.39 1206.35 L1056.98 1206.35 L1057.57 1206.35 L1058.15 1206.35 L1058.74 1206.35 L1059.33 1206.35 L1059.91 1206.35 L1060.5 1206.35 L1061.09 1206.35 L1061.67 1206.35 L1062.26 1206.35 L1062.85 1206.35 L1063.43 1206.35 L1064.02 1206.35 L1064.6 1206.35 L1065.19 1206.35 L1065.78 1206.35 L1066.36 1206.35 L1066.95 1206.35 L1067.54 1206.35 L1068.12 1206.35 L1068.71 1206.35 L1069.3 1206.35 L1069.88 1206.35 L1070.47 1206.35 L1071.06 1206.35 L1071.64 1206.35 L1072.23 1206.35 L1072.81 1206.35 L1073.4 1206.35 L1073.99 1206.35 L1074.57 1206.35 L1075.16 1206.35 L1075.75 1206.35 L1076.33 1206.35 L1076.92 1206.35 L1077.51 1206.35 L1078.09 1206.35 L1078.68 1206.35 L1079.26 1206.35 L1079.85 1206.35 L1080.44 1206.35 L1081.02 1206.35 L1081.61 1206.35 L1082.2 1206.35 L1082.78 1206.35 L1083.37 1206.35 L1083.96 1206.35 L1084.54 1206.35 L1085.13 1206.35 L1085.72 1206.35 L1086.3 1206.35 L1086.89 1206.35 L1087.47 1206.35 L1088.06 1206.35 L1088.65 1206.35 L1089.23 1206.35 L1089.82 1206.35 L1090.41 1206.35 L1090.99 1206.35 L1091.58 1206.35 L1092.17 1206.35 L1092.75 1206.35 L1093.34 1206.35 L1093.93 1206.35 L1094.51 1206.35 L1095.1 1206.35 L1095.68 1206.35 L1096.27 1206.35 L1096.86 1206.35 L1097.44 1206.35 L1098.03 1206.35 L1098.62 1206.35 L1099.2 1206.35 L1099.79 1206.35 L1100.38 1206.35 L1100.96 1206.35 L1101.55 1206.35 L1102.14 1206.35 L1102.72 1206.35 L1103.31 1206.35 L1103.89 1206.35 L1104.48 1206.35 L1105.07 1206.35 L1105.65 1206.35 L1106.24 1206.35 L1106.83 1206.35 L1107.41 1206.35 L1108 1206.35 L1108.59 1206.35 L1109.17 1206.35 L1109.76 1206.35 L1110.34 1206.35 L1110.93 1206.35 L1111.52 1206.35 L1112.1 1206.35 L1112.69 1206.35 L1113.28 1206.35 L1113.86 1206.35 L1114.45 1206.35 L1115.04 1206.35 L1115.62 1206.35 L1116.21 1206.35 L1116.8 1206.35 L1117.38 1206.35 L1117.97 1206.35 L1118.55 1206.35 L1119.14 1206.35 L1119.73 1206.35 L1120.31 1206.35 L1120.9 1206.35 L1121.49 1206.35 L1122.07 1206.35 L1122.66 1206.35 L1123.25 1206.35 L1123.83 1206.35 L1124.42 1206.35 L1125.01 1206.35 L1125.59 1206.35 L1126.18 1206.35 L1126.76 1206.35 L1127.35 1206.35 L1127.94 1206.35 L1128.52 1206.35 L1129.11 1206.35 L1129.7 1206.35 L1130.28 1206.35 L1130.87 1206.35 L1131.46 1206.35 L1132.04 1206.35 L1132.63 1206.35 L1133.21 1206.35 L1133.8 1206.35 L1134.39 1206.35 L1134.97 1206.35 L1135.56 1206.35 L1136.15 1206.35 L1136.73 1206.35 L1137.32 1206.35 L1137.91 1206.35 L1138.49 1206.35 L1139.08 1206.35 L1139.67 1206.35 L1140.25 1206.35 L1140.84 1206.35 L1141.42 1206.35 L1142.01 1206.35 L1142.6 1206.35 L1143.18 1206.35 L1143.77 1206.35 L1144.36 1206.35 L1144.94 1206.35 L1145.53 1206.35 L1146.12 1206.35 L1146.7 1206.35 L1147.29 1206.35 L1147.88 1206.35 L1148.46 1206.35 L1149.05 1206.35 L1149.63 1206.35 L1150.22 1206.35 L1150.81 1206.35 L1151.39 1206.35 L1151.98 1206.35 L1152.57 1206.35 L1153.15 1206.35 L1153.74 1206.35 L1154.33 1206.35 L1154.91 1206.35 L1155.5 1206.35 L1156.09 1206.35 L1156.67 1206.35 L1157.26 1206.35 L1157.84 1206.35 L1158.43 1206.35 L1159.02 1206.35 L1159.6 1206.35 L1160.19 1206.35 L1160.78 1206.35 L1161.36 1206.35 L1161.95 1206.35 L1162.54 1206.35 L1163.12 1206.35 L1163.71 1206.35 L1164.29 1206.35 L1164.88 1206.35 L1165.47 1206.35 L1166.05 1206.35 L1166.64 1206.35 L1167.23 1206.35 L1167.81 1206.35 L1168.4 1206.35 L1168.99 1206.35 L1169.57 1206.35 L1170.16 1206.35 L1170.75 1206.35 L1171.33 1206.35 L1171.92 1206.35 L1172.5 1206.35 L1173.09 1206.35 L1173.68 1206.35 L1174.26 1206.35 L1174.85 1206.35 L1175.44 1206.35 L1176.02 1206.35 L1176.61 1206.35 L1177.2 1206.35 L1177.78 1206.35 L1178.37 1206.35 L1178.96 1206.35 L1179.54 1206.35 L1180.13 1206.35 L1180.71 1206.35 L1181.3 1206.35 L1181.89 1206.35 L1182.47 1206.35 L1183.06 1206.35 L1183.65 1206.35 L1184.23 1206.35 L1184.82 1206.35 L1185.41 1206.35 L1185.99 1206.35 L1186.58 1206.35 L1187.16 1206.35 L1187.75 1206.35 L1188.34 1206.35 L1188.92 1206.35 L1189.51 1206.35 L1190.1 1206.35 L1190.68 1206.35 L1191.27 1206.35 L1191.86 1206.35 L1192.44 1206.35 L1193.03 1206.35 L1193.62 1206.35 L1194.2 1206.35 L1194.79 1206.35 L1195.37 1206.35 L1195.96 1206.35 L1196.55 1206.35 L1197.13 1206.35 L1197.72 1206.35 L1198.31 1206.35 L1198.89 1206.35 L1199.48 1206.35 L1200.07 1206.35 L1200.65 1206.35 L1201.24 1206.35 L1201.83 1206.35 L1202.41 1206.35 L1203 1206.35 L1203.58 1206.35 L1204.17 1206.35 L1204.76 1206.35 L1205.34 1206.35 L1205.93 1206.35 L1206.52 1206.35 L1207.1 1206.35 L1207.69 1206.35 L1208.28 1206.35 L1208.86 1206.35 L1209.45 1206.35 L1210.03 1206.35 L1210.62 1206.35 L1211.21 1206.35 L1211.79 1206.35 L1212.38 1206.35 L1212.97 1206.35 L1213.55 1206.35 L1214.14 1206.35 L1214.73 1206.35 L1215.31 1206.35 L1215.9 1206.35 L1216.49 1206.35 L1217.07 1206.35 L1217.66 1206.35 L1218.24 1206.35 L1218.83 1206.35 L1219.42 1206.35 L1220 1206.35 L1220.59 1206.35 L1221.18 1206.35 L1221.76 1206.35 L1222.35 1206.35 L1222.94 1206.35 L1223.52 1206.35 L1224.11 1206.35 L1224.7 1206.35 L1225.28 1206.35 L1225.87 1206.35 L1226.45 1206.35 L1227.04 1206.35 L1227.63 1206.35 L1228.21 1206.35 L1228.8 1206.35 L1229.39 1206.35 L1229.97 1206.35 L1230.56 1206.35 L1231.15 1206.35 L1231.73 1206.35 L1232.32 1206.35 L1232.91 1206.35 L1233.49 1206.35 L1234.08 1206.35 L1234.66 1206.35 L1235.25 1206.35 L1235.84 1206.35 L1236.42 1206.35 L1237.01 1206.35 L1237.6 1206.35 L1238.18 1206.35 L1238.77 1206.35 L1239.36 1206.35 L1239.94 1206.35 L1240.53 1206.35 L1241.11 1206.35 L1241.7 1206.35 L1242.29 1206.35 L1242.87 1206.35 L1243.46 1206.35 L1244.05 1206.35 L1244.63 1206.35 L1245.22 1206.35 L1245.81 1206.35 L1246.39 1206.35 L1246.98 1206.35 L1247.57 1206.35 L1248.15 1206.35 L1248.74 1206.35 L1249.32 1206.35 L1249.91 1206.35 L1250.5 1206.35 L1251.08 1206.35 L1251.67 1206.35 L1252.26 1206.35 L1252.84 1206.35 L1253.43 1206.35 L1254.02 1206.35 L1254.6 1206.35 L1255.19 1206.35 L1255.78 1206.35 L1256.36 1206.35 L1256.95 1206.35 L1257.53 1206.35 L1258.12 1206.35 L1258.71 1206.35 L1259.29 1206.35 L1259.88 1206.35 L1260.47 1206.35 L1261.05 1206.35 L1261.64 1206.35 L1262.23 1206.35 L1262.81 1206.35 L1263.4 1206.35 L1263.98 1206.35 L1264.57 1206.35 L1265.16 1206.35 L1265.74 1206.35 L1266.33 1206.35 L1266.92 1206.35 L1267.5 1206.35 L1268.09 1206.35 L1268.68 1206.35 L1269.26 1206.35 L1269.85 1206.35 L1270.44 1206.35 L1271.02 1206.35 L1271.61 1206.35 L1272.19 1206.35 L1272.78 1206.35 L1273.37 1206.35 L1273.95 1206.35 L1274.54 1206.35 L1275.13 1206.35 L1275.71 1206.35 L1276.3 1206.35 L1276.89 1206.35 L1277.47 1206.35 L1278.06 1206.35 L1278.65 1206.35 L1279.23 1206.35 L1279.82 1206.35 L1280.4 1206.35 L1280.99 1206.35 L1281.58 1206.35 L1282.16 1206.35 L1282.75 1206.35 L1283.34 1206.35 L1283.92 1206.35 L1284.51 1206.35 L1285.1 1206.35 L1285.68 1206.35 L1286.27 1206.35 L1286.86 1206.35 L1287.44 1206.35 L1288.03 1206.35 L1288.61 1206.35 L1289.2 1206.35 L1289.79 1206.35 L1290.37 1206.35 L1290.96 1206.35 L1291.55 1206.35 L1292.13 1206.35 L1292.72 1206.35 L1293.31 1206.35 L1293.89 1206.35 L1294.48 1206.35 L1295.06 1206.35 L1295.65 1206.35 L1296.24 1206.35 L1296.82 1206.35 L1297.41 1206.35 L1298 1206.35 L1298.58 1206.35 L1299.17 1206.35 L1299.76 1206.35 L1300.34 1206.35 L1300.93 1206.35 L1301.52 1206.35 L1302.1 1206.35 L1302.69 1206.35 L1303.27 1206.35 L1303.86 1206.35 L1304.45 1206.35 L1305.03 1206.35 L1305.62 1206.35 L1306.21 1206.35 L1306.79 1206.35 L1307.38 1206.35 L1307.97 1206.35 L1308.55 1206.35 L1309.14 1206.35 L1309.73 1206.35 L1310.31 1206.35 L1310.9 1206.35 L1311.48 1206.35 L1312.07 1206.35 L1312.66 1206.35 L1313.24 1206.35 L1313.83 1206.35 L1314.42 1206.35 L1315 1206.35 L1315.59 1206.35 L1316.18 1206.35 L1316.76 1206.35 L1317.35 1206.35 L1317.93 1206.35 L1318.52 1206.35 L1319.11 1206.35 L1319.69 1206.35 L1320.28 1206.35 L1320.87 1206.35 L1321.45 1206.35 L1322.04 1206.35 L1322.63 1206.35 L1323.21 1206.35 L1323.8 1206.35 L1324.39 1206.35 L1324.97 1206.35 L1325.56 1206.35 L1326.14 1206.35 L1326.73 1206.35 L1327.32 1206.35 L1327.9 1206.35 L1328.49 1206.35 L1329.08 1206.35 L1329.66 1206.35 L1330.25 1206.35 L1330.84 1206.35 L1331.42 1206.35 L1332.01 1206.35 L1332.6 1206.35 L1333.18 1206.35 L1333.77 1206.35 L1334.35 1206.35 L1334.94 1206.35 L1335.53 1206.35 L1336.11 1206.35 L1336.7 1206.35 L1337.29 1206.35 L1337.87 1206.35 L1338.46 1206.35 L1339.05 1206.35 L1339.63 1206.35 L1340.22 1206.35 L1340.8 1206.35 L1341.39 1206.35 L1341.98 1206.35 L1342.56 1206.35 L1343.15 1206.35 L1343.74 1206.35 L1344.32 1206.35 L1344.91 1206.35 L1345.5 1206.35 L1346.08 1206.35 L1346.67 1206.35 L1347.26 1206.35 L1347.84 1206.35 L1348.43 1206.35 L1349.01 1206.35 L1349.6 1206.35 L1350.19 1206.35 L1350.77 1206.35 L1351.36 1206.35 L1351.95 1206.35 L1352.53 1206.35 L1353.12 1206.35 L1353.71 1206.35 L1354.29 1206.35 L1354.88 1206.35 L1355.47 1206.35 L1356.05 1206.35 L1356.64 1206.35 L1357.22 1206.35 L1357.81 1206.35 L1358.4 1206.35 L1358.98 1206.35 L1359.57 1206.35 L1360.16 1206.35 L1360.74 1206.35 L1361.33 1206.35 L1361.92 1206.35 L1362.5 1206.35 L1363.09 1206.35 L1363.68 1206.35 L1364.26 1206.35 L1364.85 1206.35 L1365.43 1206.35 L1366.02 1206.35 L1366.61 1206.35 L1367.19 1206.35 L1367.78 1206.35 L1368.37 1206.35 L1368.95 1206.35 L1369.54 1206.35 L1370.13 1206.35 L1370.71 1206.35 L1371.3 1206.35 L1371.88 1206.35 L1372.47 1206.35 L1373.06 1206.35 L1373.64 1206.35 L1374.23 1206.35 L1374.82 1206.35 L1375.4 1206.35 L1375.99 1206.35 L1376.58 1206.35 L1377.16 1206.35 L1377.75 1206.35 L1378.34 1206.35 L1378.92 1206.35 L1379.51 1206.35 L1380.09 1206.35 L1380.68 1206.35 L1381.27 1206.35 L1381.85 1206.35 L1382.44 1206.35 L1383.03 1206.35 L1383.61 1206.35 L1384.2 1206.35 L1384.79 1206.35 L1385.37 1206.35 L1385.96 1206.35 L1386.55 1206.35 L1387.13 1206.35 L1387.72 1206.35 L1388.3 1206.35 L1388.89 1206.35 L1389.48 1206.35 L1390.06 1206.35 L1390.65 1206.35 L1391.24 1206.35 L1391.82 1206.35 L1392.41 1206.35 L1393 1206.35 L1393.58 1206.35 L1394.17 1206.35 L1394.75 1206.35 L1395.34 1206.35 L1395.93 1206.35 L1396.51 1206.35 L1397.1 1206.35 L1397.69 1206.35 L1398.27 1206.35 L1398.86 1206.35 L1399.45 1206.35 L1400.03 1206.35 L1400.62 1206.35 L1401.21 1206.35 L1401.79 1206.35 L1402.38 1206.35 L1402.96 1206.35 L1403.55 1206.35 L1404.14 1206.35 L1404.72 1206.35 L1405.31 1206.35 L1405.9 1206.35 L1406.48 1206.35 L1407.07 1206.35 L1407.66 1206.35 L1408.24 1206.35 L1408.83 1206.35 L1409.42 1206.35 L1410 1206.35 L1410.59 1206.35 L1411.17 1206.35 L1411.76 1206.35 L1412.35 1206.35 L1412.93 1206.35 L1413.52 1206.35 L1414.11 1206.35 L1414.69 1206.35 L1415.28 1206.35 L1415.87 1206.35 L1416.45 1206.35 L1417.04 1206.35 L1417.63 1206.35 L1418.21 1206.35 L1418.8 1206.35 L1419.38 1206.35 L1419.97 1206.35 L1420.56 1206.35 L1421.14 1206.35 L1421.73 1206.35 L1422.32 1206.35 L1422.9 1206.35 L1423.49 1206.35 L1424.08 1206.35 L1424.66 1206.35 L1425.25 1206.35 L1425.83 1206.35 L1426.42 1206.35 L1427.01 1206.35 L1427.59 1206.35 L1428.18 1206.35 L1428.77 1206.35 L1429.35 1206.35 L1429.94 1206.35 L1430.53 1206.35 L1431.11 1206.35 L1431.7 1206.35 L1432.29 1206.35 L1432.87 1206.35 L1433.46 1206.35 L1434.04 1206.35 L1434.63 1206.35 L1435.22 1206.35 L1435.8 1206.35 L1436.39 1206.35 L1436.98 1206.35 L1437.56 1206.35 L1438.15 1206.35 L1438.74 1206.35 L1439.32 1206.35 L1439.91 1206.35 L1440.5 1206.35 L1441.08 1206.35 L1441.67 1206.35 L1442.25 1206.35 L1442.84 1206.35 L1443.43 1206.35 L1444.01 1206.35 L1444.6 1206.35 L1445.19 1206.35 L1445.77 1206.35 L1446.36 1206.35 L1446.95 1206.35 L1447.53 1206.35 L1448.12 1206.35 L1448.7 1206.35 L1449.29 1206.35 L1449.88 1206.35 L1450.46 1206.35 L1451.05 1206.35 L1451.64 1206.35 L1452.22 1206.35 L1452.81 1206.35 L1453.4 1206.35 L1453.98 1206.35 L1454.57 1206.35 L1455.16 1206.35 L1455.74 1206.35 L1456.33 1206.35 L1456.91 1206.35 L1457.5 1206.35 L1458.09 1206.35 L1458.67 1206.35 L1459.26 1206.35 L1459.85 1206.35 L1460.43 1206.35 L1461.02 1206.35 L1461.61 1206.35 L1462.19 1206.35 L1462.78 1206.35 L1463.37 1206.35 L1463.95 1206.35 L1464.54 1206.35 L1465.12 1206.35 L1465.71 1206.35 L1466.3 1206.35 L1466.88 1206.35 L1467.47 1206.35 L1468.06 1206.35 L1468.64 1206.35 L1469.23 1206.35 L1469.82 1206.35 L1470.4 1206.35 L1470.99 1206.35 L1471.57 1206.35 L1472.16 1206.35 L1472.75 1206.35 L1473.33 1206.35 L1473.92 1206.35 L1474.51 1206.35 L1475.09 1206.35 L1475.68 1206.35 L1476.27 1206.35 L1476.85 1206.35 L1477.44 1206.35 L1478.03 1206.35 L1478.61 1206.35 L1479.2 1206.35 L1479.78 1206.35 L1480.37 1206.35 L1480.96 1206.35 L1481.54 1206.35 L1482.13 1206.35 L1482.72 1206.35 L1483.3 1206.35 L1483.89 1206.35 L1484.48 1206.35 L1485.06 1206.35 L1485.65 1206.35 L1486.24 1206.35 L1486.82 1206.35 L1487.41 1206.35 L1487.99 1206.35 L1488.58 1206.35 L1489.17 1206.35 L1489.75 1206.35 L1490.34 1206.35 L1490.93 1206.35 L1491.51 1206.35 L1492.1 1206.35 L1492.69 1206.35 L1493.27 1206.35 L1493.86 1206.35 L1494.45 1206.35 L1495.03 1206.35 L1495.62 1206.35 L1496.2 1206.35 L1496.79 1206.35 L1497.38 1206.35 L1497.96 1206.35 L1498.55 1206.35 L1499.14 1206.35 L1499.72 1206.35 L1500.31 1206.35 L1500.9 1206.35 L1501.48 1206.35 L1502.07 1206.35 L1502.65 1206.35 L1503.24 1206.35 L1503.83 1206.35 L1504.41 1206.35 L1505 1206.35 L1505.59 1206.35 L1506.17 1206.35 L1506.76 1206.35 L1507.35 1206.35 L1507.93 1206.35 L1508.52 1206.35 L1509.11 1206.35 L1509.69 1206.35 L1510.28 1206.35 L1510.86 1206.35 L1511.45 1206.35 L1512.04 1206.35 L1512.62 1206.35 L1513.21 1206.35 L1513.8 1206.35 L1514.38 1206.35 L1514.97 1206.35 L1515.56 1206.35 L1516.14 1206.35 L1516.73 1206.35 L1517.32 1206.35 L1517.9 1206.35 L1518.49 1206.35 L1519.07 1206.35 L1519.66 1206.35 L1520.25 1206.35 L1520.83 1206.35 L1521.42 1206.35 L1522.01 1206.35 L1522.59 1206.35 L1523.18 1206.35 L1523.77 1206.35 L1524.35 1206.35 L1524.94 1206.35 L1525.52 1206.35 L1526.11 1206.35 L1526.7 1206.35 L1527.28 1206.35 L1527.87 1206.35 L1528.46 1206.35 L1529.04 1206.35 L1529.63 1206.35 L1530.22 1206.35 L1530.8 1206.35 L1531.39 1206.35 L1531.98 1206.35 L1532.56 1206.35 L1533.15 1206.35 L1533.73 1206.35 L1534.32 1206.35 L1534.91 1206.35 L1535.49 1206.35 L1536.08 1206.35 L1536.67 1206.35 L1537.25 1206.35 L1537.84 1206.35 L1538.43 1206.35 L1539.01 1206.35 L1539.6 1206.35 L1540.19 1206.35 L1540.77 1206.35 L1541.36 1206.35 L1541.94 1206.35 L1542.53 1206.35 L1543.12 1206.35 L1543.7 1206.35 L1544.29 1206.35 L1544.88 1206.35 L1545.46 1206.35 L1546.05 1206.35 L1546.64 1206.35 L1547.22 1206.35 L1547.81 1206.35 L1548.4 1206.35 L1548.98 1206.35 L1549.57 1206.35 L1550.15 1206.35 L1550.74 1206.35 L1551.33 1206.35 L1551.91 1206.35 L1552.5 1206.35 L1553.09 1206.35 L1553.67 1206.35 L1554.26 1206.35 L1554.85 1206.35 L1555.43 1206.35 L1556.02 1206.35 L1556.6 1206.35 L1557.19 1206.35 L1557.78 1206.35 L1558.36 1206.35 L1558.95 1206.35 L1559.54 1206.35 L1560.12 1206.35 L1560.71 1206.35 L1561.3 1206.35 L1561.88 1206.35 L1562.47 1206.35 L1563.06 1206.35 L1563.64 1206.35 L1564.23 1206.35 L1564.81 1206.35 L1565.4 1206.35 L1565.99 1206.35 L1566.57 1206.35 L1567.16 1206.35 L1567.75 1206.35 L1568.33 1206.35 L1568.92 1206.35 L1569.51 1206.35 L1570.09 1206.35 L1570.68 1206.35 L1571.27 1206.35 L1571.85 1206.35 L1572.44 1206.35 L1573.02 1206.35 L1573.61 1206.35 L1574.2 1206.35 L1574.78 1206.35 L1575.37 1206.35 L1575.96 1206.35 L1576.54 1206.35 L1577.13 1206.35 L1577.72 1206.35 L1578.3 1206.35 L1578.89 1206.35 L1579.47 1206.35 L1580.06 1206.35 L1580.65 1206.35 L1581.23 1206.35 L1581.82 1206.35 L1582.41 1206.35 L1582.99 1206.35 L1583.58 1206.35 L1584.17 1206.35 L1584.75 1206.35 L1585.34 1206.35 L1585.93 1206.35 L1586.51 1206.35 L1587.1 1206.35 L1587.68 1206.35 L1588.27 1206.35 L1588.86 1206.35 L1589.44 1206.35 L1590.03 1206.35 L1590.62 1206.35 L1591.2 1206.35 L1591.79 1206.35 L1592.38 1206.35 L1592.96 1206.35 L1593.55 1206.35 L1594.14 1206.35 L1594.72 1206.35 L1595.31 1206.35 L1595.89 1206.35 L1596.48 1206.35 L1597.07 1206.35 L1597.65 1206.35 L1598.24 1206.35 L1598.83 1206.35 L1599.41 1206.35 L1600 1206.35 L1600.59 1206.35 L1601.17 1206.35 L1601.76 1206.35 L1602.34 1206.35 L1602.93 1206.35 L1603.52 1206.35 L1604.1 1206.35 L1604.69 1206.35 L1605.28 1206.35 L1605.86 1206.35 L1606.45 1206.35 L1607.04 1206.35 L1607.62 1206.35 L1608.21 1206.35 L1608.8 1206.35 L1609.38 1206.35 L1609.97 1206.35 L1610.55 1206.35 L1611.14 1206.35 L1611.73 1206.35 L1612.31 1206.35 L1612.9 1206.35 L1613.49 1206.35 L1614.07 1206.35 L1614.66 1206.35 L1615.25 1206.35 L1615.83 1206.35 L1616.42 1206.35 L1617.01 1206.35 L1617.59 1206.35 L1618.18 1206.35 L1618.76 1206.35 L1619.35 1206.35 L1619.94 1206.35 L1620.52 1206.35 L1621.11 1206.35 L1621.7 1206.35 L1622.28 1206.35 L1622.87 1206.35 L1623.46 1206.35 L1624.04 1206.35 L1624.63 1206.35 L1625.22 1206.35 L1625.8 1206.35 L1626.39 1206.35 L1626.97 1206.35 L1627.56 1206.35 L1628.15 1206.35 L1628.73 1206.35 L1629.32 1206.35 L1629.91 1206.35 L1630.49 1206.35 L1631.08 1206.35 L1631.67 1206.35 L1632.25 1206.35 L1632.84 1206.35 L1633.42 1206.35 L1634.01 1206.35 L1634.6 1206.35 L1635.18 1206.35 L1635.77 1206.35 L1636.36 1206.35 L1636.94 1206.35 L1637.53 1206.35 L1638.12 1206.35 L1638.7 1206.35 L1639.29 1206.35 L1639.88 1206.35 L1640.46 1206.35 L1641.05 1206.35 L1641.63 1206.35 L1642.22 1206.35 L1642.81 1206.35 L1643.39 1206.35 L1643.98 1206.35 L1644.57 1206.35 L1645.15 1206.35 L1645.74 1206.35 L1646.33 1206.35 L1646.91 1206.35 L1647.5 1206.35 L1648.09 1206.35 L1648.67 1206.35 L1649.26 1206.35 L1649.84 1206.35 L1650.43 1206.35 L1651.02 1206.35 L1651.6 1206.35 L1652.19 1206.35 L1652.78 1206.35 L1653.36 1206.35 L1653.95 1206.35 L1654.54 1206.35 L1655.12 1206.35 L1655.71 1206.35 L1656.29 1206.35 L1656.88 1206.35 L1657.47 1206.35 L1658.05 1206.35 L1658.64 1206.35 L1659.23 1206.35 L1659.81 1206.35 L1660.4 1206.35 L1660.99 1206.35 L1661.57 1206.35 L1662.16 1206.35 L1662.75 1206.35 L1663.33 1206.35 L1663.92 1206.35 L1664.5 1206.35 L1665.09 1206.35 L1665.68 1206.35 L1666.26 1206.35 L1666.85 1206.35 L1667.44 1206.35 L1668.02 1206.35 L1668.61 1206.35 L1669.2 1206.35 L1669.78 1206.35 L1670.37 1206.35 L1670.96 1206.35 L1671.54 1206.35 L1672.13 1206.35 L1672.71 1206.35 L1673.3 1206.35 L1673.89 1206.35 L1674.47 1206.35 L1675.06 1206.35 L1675.65 1206.35 L1676.23 1206.35 L1676.82 1206.35 L1677.41 1206.35 L1677.99 1206.35 L1678.58 1206.35 L1679.17 1206.35 L1679.75 1206.35 L1680.34 1206.35 L1680.92 1206.35 L1681.51 1206.35 L1682.1 1206.35 L1682.68 1206.35 L1683.27 1206.35 L1683.86 1206.35 L1684.44 1206.35 L1685.03 1206.35 L1685.62 1206.35 L1686.2 1206.35 L1686.79 1206.35 L1687.37 1206.35 L1687.96 1206.35 L1688.55 1206.35 L1689.13 1206.35 L1689.72 1206.35 L1690.31 1206.35 L1690.89 1206.35 L1691.48 1206.35 L1692.07 1206.35 L1692.65 1206.35 L1693.24 1206.35 L1693.83 1206.35 L1694.41 1206.35 L1695 1206.35 L1695.58 1206.35 L1696.17 1206.35 L1696.76 1206.35 L1697.34 1206.35 L1697.93 1206.35 L1698.52 1206.35 L1699.1 1206.35 L1699.69 1206.35 L1700.28 1206.35 L1700.86 1206.35 L1701.45 1206.35 L1702.04 1206.35 L1702.62 1206.35 L1703.21 1206.35 L1703.79 1206.35 L1704.38 1206.35 L1704.97 1206.35 L1705.55 1206.35 L1706.14 1206.35 L1706.73 1206.35 L1707.31 1206.35 L1707.9 1206.35 L1708.49 1206.35 L1709.07 1206.35 L1709.66 1206.35 L1710.24 1206.35 L1710.83 1206.35 L1711.42 1206.35 L1712 1206.35 L1712.59 1206.35 L1713.18 1206.35 L1713.76 1206.35 L1714.35 1206.35 L1714.94 1206.35 L1715.52 1206.35 L1716.11 1206.35 L1716.7 1206.35 L1717.28 1206.35 L1717.87 1206.35 L1718.45 1206.35 L1719.04 1206.35 L1719.63 1206.35 L1720.21 1206.35 L1720.8 1206.35 L1721.39 1206.35 L1721.97 1206.35 L1722.56 1206.35 L1723.15 1206.35 L1723.73 1206.35 L1724.32 1206.35 L1724.91 1206.35 L1725.49 1206.35 L1726.08 1206.35 L1726.66 1206.35 L1727.25 1206.35 L1727.84 1206.35 L1728.42 1206.35 L1729.01 1206.35 L1729.6 1206.35 L1730.18 1206.35 L1730.77 1206.35 L1731.36 1206.35 L1731.94 1206.35 L1732.53 1206.35 L1733.11 1206.35 L1733.7 1206.35 L1734.29 1206.35 L1734.87 1206.35 L1735.46 1206.35 L1736.05 1206.35 L1736.63 1206.35 L1737.22 1206.35 L1737.81 1206.35 L1738.39 1206.35 L1738.98 1206.35 L1739.57 1206.35 L1740.15 1206.35 L1740.74 1206.35 L1741.32 1206.35 L1741.91 1206.35 L1742.5 1206.35 L1743.08 1206.35 L1743.67 1206.35 L1744.26 1206.35 L1744.84 1206.35 L1745.43 1206.35 L1746.02 1206.35 L1746.6 1206.35 L1747.19 1206.35 L1747.78 1206.35 L1748.36 1206.35 L1748.95 1206.35 L1749.53 1206.35 L1750.12 1206.35 L1750.71 1206.35 L1751.29 1206.35 L1751.88 1206.35 L1752.47 1206.35 L1753.05 1206.35 L1753.64 1206.35 L1754.23 1206.35 L1754.81 1206.35 L1755.4 1206.35 L1755.99 1206.35 L1756.57 1206.35 L1757.16 1206.35 L1757.74 1206.35 L1758.33 1206.35 L1758.92 1206.35 L1759.5 1206.35 L1760.09 1206.35 L1760.68 1206.35 L1761.26 1206.35 L1761.85 1206.35 L1762.44 1206.35 L1763.02 1206.35 L1763.61 1206.35 L1764.19 1206.35 L1764.78 1206.35 L1765.37 1206.35 L1765.95 1206.35 L1766.54 1206.35 L1767.13 1206.35 L1767.71 1206.35 L1768.3 1206.35 L1768.89 1206.35 L1769.47 1206.35 L1770.06 1206.35 L1770.65 1206.35 L1771.23 1206.35 L1771.82 1206.35 L1772.4 1206.35 L1772.99 1206.35 L1773.58 1206.35 L1774.16 1206.35 L1774.75 1206.35 L1775.34 1206.35 L1775.92 1206.35 L1776.51 1206.35 L1777.1 1206.35 L1777.68 1206.35 L1778.27 1206.35 L1778.86 1206.35 L1779.44 1206.35 L1780.03 1206.35 L1780.61 1206.35 L1781.2 1206.35 L1781.79 1206.35 L1782.37 1206.35 L1782.96 1206.35 L1783.55 1206.35 L1784.13 1206.35 L1784.72 1206.35 L1785.31 1206.35 L1785.89 1206.35 L1786.48 1206.35 L1787.06 1206.35 L1787.65 1206.35 L1788.24 1206.35 L1788.82 1206.35 L1789.41 1206.35 L1790 1206.35 L1790.58 1206.35 L1791.17 1206.35 L1791.76 1206.35 L1792.34 1206.35 L1792.93 1206.35 L1793.52 1206.35 L1794.1 1206.35 L1794.69 1206.35 L1795.27 1206.35 L1795.86 1206.35 L1796.45 1206.35 L1797.03 1206.35 L1797.62 1206.35 L1798.21 1206.35 L1798.79 1206.35 L1799.38 1206.35 L1799.97 1206.35 L1800.55 1206.35 L1801.14 1206.35 L1801.73 1206.35 L1802.31 1206.35 L1802.9 1206.35 L1803.48 1206.35 L1804.07 1206.35 L1804.66 1206.35 L1805.24 1206.35 L1805.83 1206.35 L1806.42 1206.35 L1807 1206.35 L1807.59 1206.35 L1808.18 1206.35 L1808.76 1206.35 L1809.35 1206.35 L1809.94 1206.35 L1810.52 1206.35 L1811.11 1206.35 L1811.69 1206.35 L1812.28 1206.35 L1812.87 1206.35 L1813.45 1206.35 L1814.04 1206.35 L1814.63 1206.35 L1815.21 1206.35 L1815.8 1206.35 L1816.39 1206.35 L1816.97 1206.35 L1817.56 1206.35 L1818.14 1206.35 L1818.73 1206.35 L1819.32 1206.35 L1819.9 1206.35 L1820.49 1206.35 L1821.08 1206.35 L1821.66 1206.35 L1822.25 1206.35 L1822.84 1206.35 L1823.42 1206.35 L1824.01 1206.35 L1824.6 1206.35 L1825.18 1206.35 L1825.77 1206.35 L1826.35 1206.35 L1826.94 1206.35 L1827.53 1206.35 L1828.11 1206.35 L1828.7 1206.35 L1829.29 1206.35 L1829.87 1206.35 L1830.46 1206.35 L1831.05 1206.35 L1831.63 1206.35 L1832.22 1206.35 L1832.81 1206.35 L1833.39 1206.35 L1833.98 1206.35 L1834.56 1206.35 L1835.15 1206.35 L1835.74 1206.35 L1836.32 1206.35 L1836.91 1206.35 L1837.5 1206.35 L1838.08 1206.35 L1838.67 1206.35 L1839.26 1206.35 L1839.84 1206.35 L1840.43 1206.35 L1841.01 1206.35 L1841.6 1206.35 L1842.19 1206.35 L1842.77 1206.35 L1843.36 1206.35 L1843.95 1206.35 L1844.53 1206.35 L1845.12 1206.35 L1845.71 1206.35 L1846.29 1206.35 L1846.88 1206.35 L1847.47 1206.35 L1848.05 1206.35 L1848.64 1206.35 L1849.22 1206.35 L1849.81 1206.35 L1850.4 1206.35 L1850.98 1206.35 L1851.57 1206.35 L1852.16 1206.35 L1852.74 1206.35 L1853.33 1206.35 L1853.92 1206.35 L1854.5 1206.35 L1855.09 1206.35 L1855.68 1206.35 L1856.26 1206.35 L1856.85 1206.35 L1857.43 1206.35 L1858.02 1206.35 L1858.61 1206.35 L1859.19 1206.35 L1859.78 1206.35 L1860.37 1206.35 L1860.95 1206.35 L1861.54 1206.35 L1862.13 1206.35 L1862.71 1206.35 L1863.3 1206.35 L1863.88 1206.35 L1864.47 1206.35 L1865.06 1206.35 L1865.64 1206.35 L1866.23 1206.35 L1866.82 1206.35 L1867.4 1206.35 L1867.99 1206.35 L1868.58 1206.35 L1869.16 1206.35 L1869.75 1206.35 L1870.34 1206.35 L1870.92 1206.35 L1871.51 1206.35 L1872.09 1206.35 L1872.68 1206.35 L1873.27 1206.35 L1873.85 1206.35 L1874.44 1206.35 L1875.03 1206.35 L1875.61 1206.35 L1876.2 1206.35 L1876.79 1206.35 L1877.37 1206.35 L1877.96 1206.35 L1878.55 1206.35 L1879.13 1206.35 L1879.72 1206.35 L1880.3 1206.35 L1880.89 1206.35 L1881.48 1206.35 L1882.06 1206.35 L1882.65 1206.35 L1883.24 1206.35 L1883.82 1206.35 L1884.41 1206.35 L1885 1206.35 L1885.58 1206.35 L1886.17 1206.35 L1886.76 1206.35 L1887.34 1206.35 L1887.93 1206.35 L1888.51 1206.35 L1889.1 1206.35 L1889.69 1206.35 L1890.27 1206.35 L1890.86 1206.35 L1891.45 1206.35 L1892.03 1206.35 L1892.62 1206.35 L1893.21 1206.35 L1893.79 1206.35 L1894.38 1206.35 L1894.96 1206.35 L1895.55 1206.35 L1896.14 1206.35 L1896.72 1206.35 L1897.31 1206.35 L1897.9 1206.35 L1898.48 1206.35 L1899.07 1206.35 L1899.66 1206.35 L1900.24 1206.35 L1900.83 1206.35 L1901.42 1206.35 L1902 1206.35 L1902.59 1206.35 L1903.17 1206.35 L1903.76 1206.35 L1904.35 1206.35 L1904.93 1206.35 L1905.52 1206.35 L1906.11 1206.35 L1906.69 1206.35 L1907.28 1206.35 L1907.87 1206.35 L1908.45 1206.35 L1909.04 1206.35 L1909.63 1206.35 L1910.21 1206.35 L1910.8 1206.35 L1911.38 1206.35 L1911.97 1206.35 L1912.56 1206.35 L1913.14 1206.35 L1913.73 1206.35 L1914.32 1206.35 L1914.9 1206.35 L1915.49 1206.35 L1916.08 1206.35 L1916.66 1206.35 L1917.25 1206.35 L1917.83 1206.35 L1918.42 1206.35 L1919.01 1206.35 L1919.59 1206.35 L1920.18 1206.35 L1920.77 1206.35 L1921.35 1206.35 L1921.94 1206.35 L1922.53 1206.35 L1923.11 1206.35 L1923.7 1206.35 L1924.29 1206.35 L1924.87 1206.35 L1925.46 1206.35 L1926.04 1206.35 L1926.63 1206.35 L1927.22 1206.35 L1927.8 1206.35 L1928.39 1206.35 L1928.98 1206.35 L1929.56 1206.35 L1930.15 1206.35 L1930.74 1206.35 L1931.32 1206.35 L1931.91 1206.35 L1932.5 1206.35 L1933.08 1206.35 L1933.67 1206.35 L1934.25 1206.35 L1934.84 1206.35 L1935.43 1206.35 L1936.01 1206.35 L1936.6 1206.35 L1937.19 1206.35 L1937.77 1206.35 L1938.36 1206.35 L1938.95 1206.35 L1939.53 1206.35 L1940.12 1206.35 L1940.71 1206.35 L1941.29 1206.35 L1941.88 1206.35 L1942.46 1206.35 L1943.05 1206.35 L1943.64 1206.35 L1944.22 1206.35 L1944.81 1206.35 L1945.4 1206.35 L1945.98 1206.35 L1946.57 1206.35 L1947.16 1206.35 L1947.74 1206.35 L1948.33 1206.35 L1948.91 1206.35 L1949.5 1206.35 L1950.09 1206.35 L1950.67 1206.35 L1951.26 1206.35 L1951.85 1206.35 L1952.43 1206.35 L1953.02 1206.35 L1953.61 1206.35 L1954.19 1206.35 L1954.78 1206.35 L1955.37 1206.35 L1955.95 1206.35 L1956.54 1206.35 L1957.12 1206.35 L1957.71 1206.35 L1958.3 1206.35 L1958.88 1206.35 L1959.47 1206.35 L1960.06 1206.35 L1960.64 1206.35 L1961.23 1206.35 L1961.82 1206.35 L1962.4 1206.35 L1962.99 1206.35 L1963.58 1206.35 L1964.16 1206.35 L1964.75 1206.35 L1965.33 1206.35 L1965.92 1206.35 L1966.51 1206.35 L1967.09 1206.35 L1967.68 1206.35 L1968.27 1206.35 L1968.85 1206.35 L1969.44 1206.35 L1970.03 1206.35 L1970.61 1206.35 L1971.2 1206.35 L1971.78 1206.35 L1972.37 1206.35 L1972.96 1206.35 L1973.54 1206.35 L1974.13 1206.35 L1974.72 1206.35 L1975.3 1206.35 L1975.89 1206.35 L1976.48 1206.35 L1977.06 1206.35 L1977.65 1206.35 L1978.24 1206.35 L1978.82 1206.35 L1979.41 1206.35 L1979.99 1206.35 L1980.58 1206.35 L1981.17 1206.35 L1981.75 1206.35 L1982.34 1206.35 L1982.93 1206.35 L1983.51 1206.35 L1984.1 1206.35 L1984.69 1206.35 L1985.27 1206.35 L1985.86 1206.35 L1986.45 1206.35 L1987.03 1206.35 L1987.62 1206.35 L1988.2 1206.35 L1988.79 1206.35 L1989.38 1206.35 L1989.96 1206.35 L1990.55 1206.35 L1991.14 1206.35 L1991.72 1206.35 L1992.31 1206.35 L1992.9 1206.35 L1993.48 1206.35 L1994.07 1206.35 L1994.65 1206.35 L1995.24 1206.35 L1995.83 1206.35 L1996.41 1206.35 L1997 1206.35 L1997.59 1206.35 L1998.17 1206.35 L1998.76 1206.35 L1999.35 1206.35 L1999.93 1206.35 L2000.52 1206.35 L2001.11 1206.35 L2001.69 1206.35 L2002.28 1206.35 L2002.86 1206.35 L2003.45 1206.35 L2004.04 1206.35 L2004.62 1206.35 L2005.21 1206.35 L2005.8 1206.35 L2006.38 1206.35 L2006.97 1206.35 L2007.56 1206.35 L2008.14 1206.35 L2008.73 1206.35 L2009.32 1206.35 L2009.9 1206.35 L2010.49 1206.35 L2011.07 1206.35 L2011.66 1206.35 L2012.25 1206.35 L2012.83 1206.35 L2013.42 1206.35 L2014.01 1206.35 L2014.59 1206.35 L2015.18 1206.35 L2015.77 1206.35 L2016.35 1206.35 L2016.94 1206.35 L2017.53 1206.35 L2018.11 1206.35 L2018.7 1206.35 L2019.28 1206.35 L2019.87 1206.35 L2020.46 1206.35 L2021.04 1206.35 L2021.63 1206.35 L2022.22 1206.35 L2022.8 1206.35 L2023.39 1206.35 L2023.98 1206.35 L2024.56 1206.35 L2025.15 1206.35 L2025.73 1206.35 L2026.32 1206.35 L2026.91 1206.35 L2027.49 1206.35 L2028.08 1206.35 L2028.67 1206.35 L2029.25 1206.35 L2029.84 1206.35 L2030.43 1206.35 L2031.01 1206.35 L2031.6 1206.35 L2032.19 1206.35 L2032.77 1206.35 L2033.36 1206.35 L2033.94 1206.35 L2034.53 1206.35 L2035.12 1206.35 L2035.7 1206.35 L2036.29 1206.35 L2036.88 1206.35 L2037.46 1206.35 L2038.05 1206.35 L2038.64 1206.35 L2039.22 1206.35 L2039.81 1206.35 L2040.4 1206.35 L2040.98 1206.35 L2041.57 1206.35 L2042.15 1206.35 L2042.74 1206.35 L2043.33 1206.35 L2043.91 1206.35 L2044.5 1206.35 L2045.09 1206.35 L2045.67 1206.35 L2046.26 1206.35 L2046.85 1206.35 L2047.43 1206.35 L2048.02 1206.35 L2048.6 1206.35 L2049.19 1206.35 L2049.78 1206.35 L2050.36 1206.35 L2050.95 1206.35 L2051.54 1206.35 L2052.12 1206.35 L2052.71 1206.35 L2053.3 1206.35 L2053.88 1206.35 L2054.47 1206.35 L2055.06 1206.35 L2055.64 1206.35 L2056.23 1206.35 L2056.81 1206.35 L2057.4 1206.35 L2057.99 1206.35 L2058.57 1206.35 L2059.16 1206.35 L2059.75 1206.35 L2060.33 1206.35 L2060.92 1206.35 L2061.51 1206.35 L2062.09 1206.35 L2062.68 1206.35 L2063.27 1206.35 L2063.85 1206.35 L2064.44 1206.35 L2065.02 1206.35 L2065.61 1206.35 L2066.2 1206.35 L2066.78 1206.35 L2067.37 1206.35 L2067.96 1206.35 L2068.54 1206.35 L2069.13 1206.35 L2069.72 1206.35 L2070.3 1206.35 L2070.89 1206.35 L2071.48 1206.35 L2072.06 1206.35 L2072.65 1206.35 L2073.23 1206.35 L2073.82 1206.35 L2074.41 1206.35 L2074.99 1206.35 L2075.58 1206.35 L2076.17 1206.35 L2076.75 1206.35 L2077.34 1206.35 L2077.93 1206.35 L2078.51 1206.35 L2079.1 1206.35 L2079.68 1206.35 L2080.27 1206.35 L2080.86 1206.35 L2081.44 1206.35 L2082.03 1206.35 L2082.62 1206.35 L2083.2 1206.35 L2083.79 1206.35 L2084.38 1206.35 L2084.96 1206.35 L2085.55 1206.35 L2086.14 1206.35 L2086.72 1206.35 L2087.31 1206.35 L2087.89 1206.35 L2088.48 1206.35 L2089.07 1206.35 L2089.65 1206.35 L2090.24 1206.35 L2090.83 1206.35 L2091.41 1206.35 L2092 1206.35 L2092.59 1206.35 L2093.17 1206.35 L2093.76 1206.35 L2094.35 1206.35 L2094.93 1206.35 L2095.52 1206.35 L2096.1 1206.35 L2096.69 1206.35 L2097.28 1206.35 L2097.86 1206.35 L2098.45 1206.35 L2099.04 1206.35 L2099.62 1206.35 L2100.21 1206.35 L2100.8 1206.35 L2101.38 1206.35 L2101.97 1206.35 L2102.55 1206.35 L2103.14 1206.35 L2103.73 1206.35 L2104.31 1206.35 L2104.9 1206.35 L2105.49 1206.35 L2106.07 1206.35 L2106.66 1206.35 L2107.25 1206.35 L2107.83 1206.35 L2108.42 1206.35 L2109.01 1206.35 L2109.59 1206.35 L2110.18 1206.35 L2110.76 1206.35 L2111.35 1206.35 L2111.94 1206.35 L2112.52 1206.35 L2113.11 1206.35 L2113.7 1206.35 L2114.28 1206.35 L2114.87 1206.35 L2115.46 1206.35 L2116.04 1206.35 L2116.63 1206.35 L2117.22 1206.35 L2117.8 1206.35 L2118.39 1206.35 L2118.97 1206.35 L2119.56 1206.35 L2120.15 1206.35 L2120.73 1206.35 L2121.32 1206.35 L2121.91 1206.35 L2122.49 1206.35 L2123.08 1206.35 L2123.67 1206.35 L2124.25 1206.35 L2124.84 1206.35 L2125.42 1206.35 L2126.01 1206.35 L2126.6 1206.35 L2127.18 1206.35 L2127.77 1206.35 L2128.36 1206.35 L2128.94 1206.35 L2129.53 1206.35 L2130.12 1206.35 L2130.7 1206.35 L2131.29 1206.35 L2131.88 1206.35 L2132.46 1206.35 L2133.05 1206.35 L2133.63 1206.35 L2134.22 1206.35 L2134.81 1206.35 L2135.39 1206.35 L2135.98 1206.35 L2136.57 1206.35 L2137.15 1206.35 L2137.74 1206.35 L2138.33 1206.35 L2138.91 1206.35 L2139.5 1206.35 L2140.09 1206.35 L2140.67 1206.35 L2141.26 1206.35 L2141.84 1206.35 L2142.43 1206.35 L2143.02 1206.35 L2143.6 1206.35 L2144.19 1206.35 L2144.78 1206.35 L2145.36 1206.35 L2145.95 1206.35 L2146.54 1206.35 L2147.12 1206.35 L2147.71 1206.35 L2148.3 1206.35 L2148.88 1206.35 L2149.47 1206.35 L2150.05 1206.35 L2150.64 1206.35 L2151.23 1206.35 L2151.81 1206.35 L2152.4 1206.35 L2152.99 1206.35 L2153.57 1206.35 L2154.16 1206.35 L2154.75 1206.35 L2155.33 1206.35 L2155.92 1206.35 L2156.5 1206.35 L2157.09 1206.35 L2157.68 1206.35 L2158.26 1206.35 L2158.26 1205.79 L2157.68 1205.79 L2157.09 1205.79 L2156.5 1205.79 L2155.92 1205.79 L2155.33 1205.79 L2154.75 1205.79 L2154.16 1205.79 L2153.57 1205.79 L2152.99 1205.79 L2152.4 1205.79 L2151.81 1205.79 L2151.23 1205.79 L2150.64 1205.79 L2150.05 1205.79 L2149.47 1205.79 L2148.88 1205.79 L2148.3 1205.79 L2147.71 1205.79 L2147.12 1205.79 L2146.54 1205.79 L2145.95 1205.79 L2145.36 1205.79 L2144.78 1205.79 L2144.19 1205.79 L2143.6 1205.79 L2143.02 1205.79 L2142.43 1205.79 L2141.84 1205.79 L2141.26 1205.79 L2140.67 1205.79 L2140.09 1205.79 L2139.5 1205.79 L2138.91 1205.79 L2138.33 1205.79 L2137.74 1205.79 L2137.15 1205.79 L2136.57 1205.79 L2135.98 1205.79 L2135.39 1205.79 L2134.81 1205.79 L2134.22 1205.79 L2133.63 1205.79 L2133.05 1205.79 L2132.46 1205.79 L2131.88 1205.79 L2131.29 1205.79 L2130.7 1205.79 L2130.12 1205.79 L2129.53 1205.79 L2128.94 1205.79 L2128.36 1205.79 L2127.77 1205.79 L2127.18 1205.79 L2126.6 1205.79 L2126.01 1205.79 L2125.42 1205.79 L2124.84 1205.79 L2124.25 1205.79 L2123.67 1205.79 L2123.08 1205.79 L2122.49 1205.79 L2121.91 1205.79 L2121.32 1205.79 L2120.73 1205.79 L2120.15 1205.79 L2119.56 1205.79 L2118.97 1205.79 L2118.39 1205.79 L2117.8 1205.79 L2117.22 1205.79 L2116.63 1205.79 L2116.04 1205.79 L2115.46 1205.79 L2114.87 1205.79 L2114.28 1205.79 L2113.7 1205.79 L2113.11 1205.79 L2112.52 1205.79 L2111.94 1205.79 L2111.35 1205.79 L2110.76 1205.79 L2110.18 1205.79 L2109.59 1205.79 L2109.01 1205.79 L2108.42 1205.79 L2107.83 1205.79 L2107.25 1205.79 L2106.66 1205.79 L2106.07 1205.79 L2105.49 1205.79 L2104.9 1205.79 L2104.31 1205.79 L2103.73 1205.79 L2103.14 1205.79 L2102.55 1205.79 L2101.97 1205.79 L2101.38 1205.79 L2100.8 1205.79 L2100.21 1205.79 L2099.62 1205.79 L2099.04 1205.79 L2098.45 1205.79 L2097.86 1205.79 L2097.28 1205.79 L2096.69 1205.79 L2096.1 1205.79 L2095.52 1205.79 L2094.93 1205.79 L2094.35 1205.79 L2093.76 1205.79 L2093.17 1205.79 L2092.59 1205.79 L2092 1205.79 L2091.41 1205.79 L2090.83 1205.79 L2090.24 1205.79 L2089.65 1205.79 L2089.07 1205.79 L2088.48 1205.79 L2087.89 1205.79 L2087.31 1205.79 L2086.72 1205.79 L2086.14 1205.79 L2085.55 1205.79 L2084.96 1205.79 L2084.38 1205.79 L2083.79 1205.79 L2083.2 1205.79 L2082.62 1205.79 L2082.03 1205.79 L2081.44 1205.79 L2080.86 1205.79 L2080.27 1205.79 L2079.68 1205.79 L2079.1 1205.79 L2078.51 1205.79 L2077.93 1205.79 L2077.34 1205.79 L2076.75 1205.79 L2076.17 1205.79 L2075.58 1205.79 L2074.99 1205.79 L2074.41 1205.79 L2073.82 1205.79 L2073.23 1205.79 L2072.65 1205.79 L2072.06 1205.79 L2071.48 1205.79 L2070.89 1205.79 L2070.3 1205.79 L2069.72 1205.79 L2069.13 1205.79 L2068.54 1205.79 L2067.96 1205.79 L2067.37 1205.79 L2066.78 1205.79 L2066.2 1205.79 L2065.61 1205.79 L2065.02 1205.79 L2064.44 1205.79 L2063.85 1205.79 L2063.27 1205.79 L2062.68 1205.79 L2062.09 1205.79 L2061.51 1205.79 L2060.92 1205.79 L2060.33 1205.79 L2059.75 1205.79 L2059.16 1205.79 L2058.57 1205.79 L2057.99 1205.79 L2057.4 1205.79 L2056.81 1205.79 L2056.23 1205.79 L2055.64 1205.79 L2055.06 1205.79 L2054.47 1205.79 L2053.88 1205.79 L2053.3 1205.79 L2052.71 1205.79 L2052.12 1205.79 L2051.54 1205.79 L2050.95 1205.79 L2050.36 1205.79 L2049.78 1205.79 L2049.19 1205.79 L2048.6 1205.79 L2048.02 1205.79 L2047.43 1205.79 L2046.85 1205.79 L2046.26 1205.79 L2045.67 1205.79 L2045.09 1205.79 L2044.5 1205.79 L2043.91 1205.79 L2043.33 1205.79 L2042.74 1205.79 L2042.15 1205.79 L2041.57 1205.79 L2040.98 1205.79 L2040.4 1205.79 L2039.81 1205.79 L2039.22 1205.79 L2038.64 1205.79 L2038.05 1205.79 L2037.46 1205.79 L2036.88 1205.79 L2036.29 1205.79 L2035.7 1205.79 L2035.12 1205.79 L2034.53 1205.79 L2033.94 1205.79 L2033.36 1205.79 L2032.77 1205.79 L2032.19 1205.79 L2031.6 1205.79 L2031.01 1205.79 L2030.43 1205.79 L2029.84 1205.79 L2029.25 1205.79 L2028.67 1205.79 L2028.08 1205.79 L2027.49 1205.79 L2026.91 1205.79 L2026.32 1205.79 L2025.73 1205.79 L2025.15 1205.79 L2024.56 1205.79 L2023.98 1205.79 L2023.39 1205.79 L2022.8 1205.79 L2022.22 1205.79 L2021.63 1205.79 L2021.04 1205.79 L2020.46 1205.79 L2019.87 1205.79 L2019.28 1205.79 L2018.7 1205.79 L2018.11 1205.79 L2017.53 1205.79 L2016.94 1205.79 L2016.35 1205.79 L2015.77 1205.79 L2015.18 1205.79 L2014.59 1205.79 L2014.01 1205.79 L2013.42 1205.79 L2012.83 1205.79 L2012.25 1205.79 L2011.66 1205.79 L2011.07 1205.79 L2010.49 1205.79 L2009.9 1205.79 L2009.32 1205.79 L2008.73 1205.79 L2008.14 1205.79 L2007.56 1205.79 L2006.97 1205.79 L2006.38 1205.79 L2005.8 1205.79 L2005.21 1205.79 L2004.62 1205.79 L2004.04 1205.79 L2003.45 1205.79 L2002.86 1205.79 L2002.28 1205.79 L2001.69 1205.79 L2001.11 1205.79 L2000.52 1205.79 L1999.93 1205.79 L1999.35 1205.79 L1998.76 1205.79 L1998.17 1205.79 L1997.59 1205.79 L1997 1205.79 L1996.41 1205.79 L1995.83 1205.79 L1995.24 1205.79 L1994.65 1205.79 L1994.07 1205.79 L1993.48 1205.79 L1992.9 1205.79 L1992.31 1205.79 L1991.72 1205.79 L1991.14 1205.79 L1990.55 1205.79 L1989.96 1205.79 L1989.38 1205.79 L1988.79 1205.79 L1988.2 1205.79 L1987.62 1205.79 L1987.03 1205.79 L1986.45 1205.79 L1985.86 1205.79 L1985.27 1205.79 L1984.69 1205.79 L1984.1 1205.79 L1983.51 1205.79 L1982.93 1205.79 L1982.34 1205.79 L1981.75 1205.79 L1981.17 1205.79 L1980.58 1205.79 L1979.99 1205.79 L1979.41 1205.79 L1978.82 1205.79 L1978.24 1205.79 L1977.65 1205.79 L1977.06 1205.79 L1976.48 1205.79 L1975.89 1205.79 L1975.3 1205.79 L1974.72 1205.79 L1974.13 1205.79 L1973.54 1205.79 L1972.96 1205.79 L1972.37 1205.79 L1971.78 1205.79 L1971.2 1205.79 L1970.61 1205.79 L1970.03 1205.79 L1969.44 1205.79 L1968.85 1205.79 L1968.27 1205.79 L1967.68 1205.79 L1967.09 1205.79 L1966.51 1205.79 L1965.92 1205.79 L1965.33 1205.79 L1964.75 1205.79 L1964.16 1205.79 L1963.58 1205.79 L1962.99 1205.79 L1962.4 1205.79 L1961.82 1205.79 L1961.23 1205.79 L1960.64 1205.79 L1960.06 1205.79 L1959.47 1205.79 L1958.88 1205.79 L1958.3 1205.79 L1957.71 1205.79 L1957.12 1205.79 L1956.54 1205.79 L1955.95 1205.79 L1955.37 1205.79 L1954.78 1205.79 L1954.19 1205.79 L1953.61 1205.79 L1953.02 1205.79 L1952.43 1205.79 L1951.85 1205.79 L1951.26 1205.79 L1950.67 1205.79 L1950.09 1205.79 L1949.5 1205.79 L1948.91 1205.79 L1948.33 1205.79 L1947.74 1205.79 L1947.16 1205.79 L1946.57 1205.79 L1945.98 1205.79 L1945.4 1205.79 L1944.81 1205.79 L1944.22 1205.79 L1943.64 1205.79 L1943.05 1205.79 L1942.46 1205.79 L1941.88 1205.79 L1941.29 1205.79 L1940.71 1205.79 L1940.12 1205.79 L1939.53 1205.79 L1938.95 1205.79 L1938.36 1205.79 L1937.77 1205.79 L1937.19 1205.79 L1936.6 1205.79 L1936.01 1205.79 L1935.43 1205.79 L1934.84 1205.79 L1934.25 1205.79 L1933.67 1205.79 L1933.08 1205.79 L1932.5 1205.79 L1931.91 1205.79 L1931.32 1205.79 L1930.74 1205.79 L1930.15 1205.79 L1929.56 1205.79 L1928.98 1205.79 L1928.39 1205.79 L1927.8 1205.79 L1927.22 1205.79 L1926.63 1205.79 L1926.04 1205.79 L1925.46 1205.79 L1924.87 1205.79 L1924.29 1205.79 L1923.7 1205.79 L1923.11 1205.79 L1922.53 1205.79 L1921.94 1205.79 L1921.35 1205.79 L1920.77 1205.79 L1920.18 1205.79 L1919.59 1205.79 L1919.01 1205.79 L1918.42 1205.79 L1917.83 1205.79 L1917.25 1205.79 L1916.66 1205.79 L1916.08 1205.79 L1915.49 1205.79 L1914.9 1205.79 L1914.32 1205.79 L1913.73 1205.79 L1913.14 1205.79 L1912.56 1205.79 L1911.97 1205.79 L1911.38 1205.79 L1910.8 1205.79 L1910.21 1205.79 L1909.63 1205.79 L1909.04 1205.79 L1908.45 1205.79 L1907.87 1205.79 L1907.28 1205.79 L1906.69 1205.79 L1906.11 1205.79 L1905.52 1205.79 L1904.93 1205.79 L1904.35 1205.79 L1903.76 1205.79 L1903.17 1205.79 L1902.59 1205.79 L1902 1205.79 L1901.42 1205.79 L1900.83 1205.79 L1900.24 1205.79 L1899.66 1205.79 L1899.07 1205.79 L1898.48 1205.79 L1897.9 1205.79 L1897.31 1205.79 L1896.72 1205.79 L1896.14 1205.79 L1895.55 1205.79 L1894.96 1205.79 L1894.38 1205.79 L1893.79 1205.79 L1893.21 1205.79 L1892.62 1205.79 L1892.03 1205.79 L1891.45 1205.79 L1890.86 1205.79 L1890.27 1205.79 L1889.69 1205.79 L1889.1 1205.79 L1888.51 1205.79 L1887.93 1205.79 L1887.34 1205.79 L1886.76 1205.79 L1886.17 1205.79 L1885.58 1205.79 L1885 1205.79 L1884.41 1205.79 L1883.82 1205.79 L1883.24 1205.79 L1882.65 1205.79 L1882.06 1205.79 L1881.48 1205.79 L1880.89 1205.79 L1880.3 1205.79 L1879.72 1205.79 L1879.13 1205.79 L1878.55 1205.79 L1877.96 1205.79 L1877.37 1205.79 L1876.79 1205.79 L1876.2 1205.79 L1875.61 1205.79 L1875.03 1205.79 L1874.44 1205.79 L1873.85 1205.79 L1873.27 1205.79 L1872.68 1205.79 L1872.09 1205.79 L1871.51 1205.79 L1870.92 1205.79 L1870.34 1205.79 L1869.75 1205.79 L1869.16 1205.79 L1868.58 1205.79 L1867.99 1205.79 L1867.4 1205.79 L1866.82 1205.79 L1866.23 1205.79 L1865.64 1205.79 L1865.06 1205.79 L1864.47 1205.79 L1863.88 1205.79 L1863.3 1205.79 L1862.71 1205.79 L1862.13 1205.79 L1861.54 1205.79 L1860.95 1205.79 L1860.37 1205.79 L1859.78 1205.79 L1859.19 1205.79 L1858.61 1205.79 L1858.02 1205.79 L1857.43 1205.79 L1856.85 1205.79 L1856.26 1205.79 L1855.68 1205.79 L1855.09 1205.79 L1854.5 1205.79 L1853.92 1205.79 L1853.33 1205.79 L1852.74 1205.79 L1852.16 1205.79 L1851.57 1205.79 L1850.98 1205.79 L1850.4 1205.79 L1849.81 1205.79 L1849.22 1205.79 L1848.64 1205.79 L1848.05 1205.79 L1847.47 1205.79 L1846.88 1205.79 L1846.29 1205.79 L1845.71 1205.79 L1845.12 1205.79 L1844.53 1205.79 L1843.95 1205.79 L1843.36 1205.79 L1842.77 1205.79 L1842.19 1205.79 L1841.6 1205.79 L1841.01 1205.79 L1840.43 1205.79 L1839.84 1205.79 L1839.26 1205.79 L1838.67 1205.79 L1838.08 1205.79 L1837.5 1205.79 L1836.91 1205.79 L1836.32 1205.79 L1835.74 1205.79 L1835.15 1205.79 L1834.56 1205.79 L1833.98 1205.79 L1833.39 1205.79 L1832.81 1205.79 L1832.22 1205.79 L1831.63 1205.79 L1831.05 1205.79 L1830.46 1205.79 L1829.87 1205.79 L1829.29 1205.79 L1828.7 1205.79 L1828.11 1205.79 L1827.53 1205.79 L1826.94 1205.79 L1826.35 1205.79 L1825.77 1205.79 L1825.18 1205.79 L1824.6 1205.79 L1824.01 1205.79 L1823.42 1205.79 L1822.84 1205.79 L1822.25 1205.79 L1821.66 1205.79 L1821.08 1205.79 L1820.49 1205.79 L1819.9 1205.79 L1819.32 1205.79 L1818.73 1205.79 L1818.14 1205.79 L1817.56 1205.79 L1816.97 1205.79 L1816.39 1205.79 L1815.8 1205.79 L1815.21 1205.79 L1814.63 1205.79 L1814.04 1205.79 L1813.45 1205.79 L1812.87 1205.79 L1812.28 1205.79 L1811.69 1205.79 L1811.11 1205.79 L1810.52 1205.79 L1809.94 1205.79 L1809.35 1205.79 L1808.76 1205.79 L1808.18 1205.79 L1807.59 1205.79 L1807 1205.79 L1806.42 1205.79 L1805.83 1205.79 L1805.24 1205.79 L1804.66 1205.79 L1804.07 1205.79 L1803.48 1205.79 L1802.9 1205.79 L1802.31 1205.79 L1801.73 1205.79 L1801.14 1205.79 L1800.55 1205.79 L1799.97 1205.79 L1799.38 1205.79 L1798.79 1205.79 L1798.21 1205.79 L1797.62 1205.79 L1797.03 1205.79 L1796.45 1205.79 L1795.86 1205.79 L1795.27 1205.79 L1794.69 1205.79 L1794.1 1205.79 L1793.52 1205.79 L1792.93 1205.79 L1792.34 1205.79 L1791.76 1205.79 L1791.17 1205.79 L1790.58 1205.79 L1790 1205.79 L1789.41 1205.79 L1788.82 1205.79 L1788.24 1205.79 L1787.65 1205.79 L1787.06 1205.79 L1786.48 1205.79 L1785.89 1205.79 L1785.31 1205.79 L1784.72 1205.79 L1784.13 1205.79 L1783.55 1205.79 L1782.96 1205.79 L1782.37 1205.79 L1781.79 1205.79 L1781.2 1205.79 L1780.61 1205.79 L1780.03 1205.79 L1779.44 1205.79 L1778.86 1205.79 L1778.27 1205.79 L1777.68 1205.79 L1777.1 1205.79 L1776.51 1205.79 L1775.92 1205.79 L1775.34 1205.79 L1774.75 1205.79 L1774.16 1205.79 L1773.58 1205.79 L1772.99 1205.79 L1772.4 1205.79 L1771.82 1205.79 L1771.23 1205.79 L1770.65 1205.79 L1770.06 1205.79 L1769.47 1205.79 L1768.89 1205.79 L1768.3 1205.79 L1767.71 1205.79 L1767.13 1205.79 L1766.54 1205.79 L1765.95 1205.79 L1765.37 1205.79 L1764.78 1205.79 L1764.19 1205.79 L1763.61 1205.79 L1763.02 1205.79 L1762.44 1205.79 L1761.85 1205.79 L1761.26 1205.79 L1760.68 1205.79 L1760.09 1205.79 L1759.5 1205.79 L1758.92 1205.79 L1758.33 1205.79 L1757.74 1205.79 L1757.16 1205.79 L1756.57 1205.79 L1755.99 1205.79 L1755.4 1205.79 L1754.81 1205.79 L1754.23 1205.79 L1753.64 1205.79 L1753.05 1205.79 L1752.47 1205.79 L1751.88 1205.79 L1751.29 1205.79 L1750.71 1205.79 L1750.12 1205.79 L1749.53 1205.79 L1748.95 1205.79 L1748.36 1205.79 L1747.78 1205.79 L1747.19 1205.79 L1746.6 1205.79 L1746.02 1205.79 L1745.43 1205.79 L1744.84 1205.79 L1744.26 1205.79 L1743.67 1205.79 L1743.08 1205.79 L1742.5 1205.79 L1741.91 1205.79 L1741.32 1205.79 L1740.74 1205.79 L1740.15 1205.79 L1739.57 1205.79 L1738.98 1205.79 L1738.39 1205.79 L1737.81 1205.79 L1737.22 1205.79 L1736.63 1205.79 L1736.05 1205.79 L1735.46 1205.79 L1734.87 1205.79 L1734.29 1205.79 L1733.7 1205.79 L1733.11 1205.79 L1732.53 1205.79 L1731.94 1205.79 L1731.36 1205.79 L1730.77 1205.79 L1730.18 1205.79 L1729.6 1205.79 L1729.01 1205.79 L1728.42 1205.79 L1727.84 1205.79 L1727.25 1205.79 L1726.66 1205.79 L1726.08 1205.79 L1725.49 1205.79 L1724.91 1205.79 L1724.32 1205.79 L1723.73 1205.79 L1723.15 1205.79 L1722.56 1205.79 L1721.97 1205.79 L1721.39 1205.79 L1720.8 1205.79 L1720.21 1205.79 L1719.63 1205.79 L1719.04 1205.79 L1718.45 1205.79 L1717.87 1205.79 L1717.28 1205.79 L1716.7 1205.79 L1716.11 1205.79 L1715.52 1205.79 L1714.94 1205.79 L1714.35 1205.79 L1713.76 1205.79 L1713.18 1205.79 L1712.59 1205.79 L1712 1205.79 L1711.42 1205.79 L1710.83 1205.79 L1710.24 1205.79 L1709.66 1205.79 L1709.07 1205.79 L1708.49 1205.79 L1707.9 1205.79 L1707.31 1205.79 L1706.73 1205.79 L1706.14 1205.79 L1705.55 1205.79 L1704.97 1205.79 L1704.38 1205.79 L1703.79 1205.79 L1703.21 1205.79 L1702.62 1205.79 L1702.04 1205.79 L1701.45 1205.79 L1700.86 1205.79 L1700.28 1205.79 L1699.69 1205.79 L1699.1 1205.79 L1698.52 1205.79 L1697.93 1205.79 L1697.34 1205.79 L1696.76 1205.79 L1696.17 1205.79 L1695.58 1205.79 L1695 1205.79 L1694.41 1205.79 L1693.83 1205.79 L1693.24 1205.79 L1692.65 1205.79 L1692.07 1205.79 L1691.48 1205.79 L1690.89 1205.79 L1690.31 1205.79 L1689.72 1205.79 L1689.13 1205.79 L1688.55 1205.79 L1687.96 1205.79 L1687.37 1205.79 L1686.79 1205.79 L1686.2 1205.79 L1685.62 1205.79 L1685.03 1205.79 L1684.44 1205.79 L1683.86 1205.79 L1683.27 1205.79 L1682.68 1205.79 L1682.1 1205.79 L1681.51 1205.79 L1680.92 1205.79 L1680.34 1205.79 L1679.75 1205.79 L1679.17 1205.79 L1678.58 1205.79 L1677.99 1205.79 L1677.41 1205.79 L1676.82 1205.79 L1676.23 1205.79 L1675.65 1205.79 L1675.06 1205.79 L1674.47 1205.79 L1673.89 1205.79 L1673.3 1205.79 L1672.71 1205.79 L1672.13 1205.79 L1671.54 1205.79 L1670.96 1205.79 L1670.37 1205.79 L1669.78 1205.79 L1669.2 1205.79 L1668.61 1205.79 L1668.02 1205.79 L1667.44 1205.79 L1666.85 1205.79 L1666.26 1205.79 L1665.68 1205.79 L1665.09 1205.79 L1664.5 1205.79 L1663.92 1205.79 L1663.33 1205.79 L1662.75 1205.79 L1662.16 1205.79 L1661.57 1205.79 L1660.99 1205.79 L1660.4 1205.79 L1659.81 1205.79 L1659.23 1205.79 L1658.64 1205.79 L1658.05 1205.79 L1657.47 1205.79 L1656.88 1205.79 L1656.29 1205.79 L1655.71 1205.79 L1655.12 1205.79 L1654.54 1205.79 L1653.95 1205.79 L1653.36 1205.79 L1652.78 1205.79 L1652.19 1205.79 L1651.6 1205.79 L1651.02 1205.79 L1650.43 1205.79 L1649.84 1205.79 L1649.26 1205.79 L1648.67 1205.79 L1648.09 1205.79 L1647.5 1205.79 L1646.91 1205.79 L1646.33 1205.79 L1645.74 1205.79 L1645.15 1205.79 L1644.57 1205.79 L1643.98 1205.79 L1643.39 1205.79 L1642.81 1205.79 L1642.22 1205.79 L1641.63 1205.79 L1641.05 1205.79 L1640.46 1205.79 L1639.88 1205.79 L1639.29 1205.79 L1638.7 1205.79 L1638.12 1205.79 L1637.53 1205.79 L1636.94 1205.79 L1636.36 1205.79 L1635.77 1205.79 L1635.18 1205.79 L1634.6 1205.79 L1634.01 1205.79 L1633.42 1205.79 L1632.84 1205.79 L1632.25 1205.79 L1631.67 1205.79 L1631.08 1205.79 L1630.49 1205.79 L1629.91 1205.79 L1629.32 1205.79 L1628.73 1205.79 L1628.15 1205.79 L1627.56 1205.79 L1626.97 1205.79 L1626.39 1205.79 L1625.8 1205.79 L1625.22 1205.79 L1624.63 1205.79 L1624.04 1205.79 L1623.46 1205.79 L1622.87 1205.79 L1622.28 1205.79 L1621.7 1205.79 L1621.11 1205.79 L1620.52 1205.79 L1619.94 1205.79 L1619.35 1205.79 L1618.76 1205.79 L1618.18 1205.79 L1617.59 1205.79 L1617.01 1205.79 L1616.42 1205.79 L1615.83 1205.79 L1615.25 1205.79 L1614.66 1205.79 L1614.07 1205.79 L1613.49 1205.79 L1612.9 1205.79 L1612.31 1205.79 L1611.73 1205.79 L1611.14 1205.79 L1610.55 1205.79 L1609.97 1205.79 L1609.38 1205.79 L1608.8 1205.79 L1608.21 1205.79 L1607.62 1205.79 L1607.04 1205.79 L1606.45 1205.79 L1605.86 1205.79 L1605.28 1205.79 L1604.69 1205.79 L1604.1 1205.79 L1603.52 1205.79 L1602.93 1205.79 L1602.34 1205.79 L1601.76 1205.79 L1601.17 1205.79 L1600.59 1205.79 L1600 1205.79 L1599.41 1205.79 L1598.83 1205.79 L1598.24 1205.79 L1597.65 1205.79 L1597.07 1205.79 L1596.48 1205.79 L1595.89 1205.79 L1595.31 1205.79 L1594.72 1205.79 L1594.14 1205.79 L1593.55 1205.79 L1592.96 1205.79 L1592.38 1205.79 L1591.79 1205.79 L1591.2 1205.79 L1590.62 1205.79 L1590.03 1205.79 L1589.44 1205.79 L1588.86 1205.79 L1588.27 1205.79 L1587.68 1205.79 L1587.1 1205.79 L1586.51 1205.79 L1585.93 1205.79 L1585.34 1205.79 L1584.75 1205.79 L1584.17 1205.79 L1583.58 1205.79 L1582.99 1205.79 L1582.41 1205.79 L1581.82 1205.79 L1581.23 1205.79 L1580.65 1205.79 L1580.06 1205.79 L1579.47 1205.79 L1578.89 1205.79 L1578.3 1205.79 L1577.72 1205.79 L1577.13 1205.79 L1576.54 1205.79 L1575.96 1205.79 L1575.37 1205.79 L1574.78 1205.79 L1574.2 1205.79 L1573.61 1205.79 L1573.02 1205.79 L1572.44 1205.79 L1571.85 1205.79 L1571.27 1205.79 L1570.68 1205.79 L1570.09 1205.79 L1569.51 1205.79 L1568.92 1205.79 L1568.33 1205.79 L1567.75 1205.79 L1567.16 1205.79 L1566.57 1205.79 L1565.99 1205.79 L1565.4 1205.79 L1564.81 1205.79 L1564.23 1205.79 L1563.64 1205.79 L1563.06 1205.79 L1562.47 1205.79 L1561.88 1205.79 L1561.3 1205.79 L1560.71 1205.79 L1560.12 1205.79 L1559.54 1205.79 L1558.95 1205.79 L1558.36 1205.79 L1557.78 1205.79 L1557.19 1205.79 L1556.6 1205.79 L1556.02 1205.79 L1555.43 1205.79 L1554.85 1205.79 L1554.26 1205.79 L1553.67 1205.79 L1553.09 1205.79 L1552.5 1205.79 L1551.91 1205.79 L1551.33 1205.79 L1550.74 1205.79 L1550.15 1205.79 L1549.57 1205.79 L1548.98 1205.79 L1548.4 1205.79 L1547.81 1205.79 L1547.22 1205.79 L1546.64 1205.79 L1546.05 1205.79 L1545.46 1205.79 L1544.88 1205.79 L1544.29 1205.79 L1543.7 1205.79 L1543.12 1205.79 L1542.53 1205.79 L1541.94 1205.79 L1541.36 1205.79 L1540.77 1205.79 L1540.19 1205.79 L1539.6 1205.79 L1539.01 1205.79 L1538.43 1205.79 L1537.84 1205.79 L1537.25 1205.79 L1536.67 1205.79 L1536.08 1205.79 L1535.49 1205.79 L1534.91 1205.79 L1534.32 1205.79 L1533.73 1205.79 L1533.15 1205.79 L1532.56 1205.79 L1531.98 1205.79 L1531.39 1205.79 L1530.8 1205.79 L1530.22 1205.79 L1529.63 1205.79 L1529.04 1205.79 L1528.46 1205.79 L1527.87 1205.79 L1527.28 1205.79 L1526.7 1205.79 L1526.11 1205.79 L1525.52 1205.79 L1524.94 1205.79 L1524.35 1205.79 L1523.77 1205.79 L1523.18 1205.79 L1522.59 1205.79 L1522.01 1205.79 L1521.42 1205.79 L1520.83 1205.79 L1520.25 1205.79 L1519.66 1205.79 L1519.07 1205.79 L1518.49 1205.79 L1517.9 1205.79 L1517.32 1205.79 L1516.73 1205.79 L1516.14 1205.79 L1515.56 1205.79 L1514.97 1205.79 L1514.38 1205.79 L1513.8 1205.79 L1513.21 1205.79 L1512.62 1205.79 L1512.04 1205.79 L1511.45 1205.79 L1510.86 1205.79 L1510.28 1205.79 L1509.69 1205.79 L1509.11 1205.79 L1508.52 1205.79 L1507.93 1205.79 L1507.35 1205.79 L1506.76 1205.79 L1506.17 1205.79 L1505.59 1205.79 L1505 1205.79 L1504.41 1205.79 L1503.83 1205.79 L1503.24 1205.79 L1502.65 1205.79 L1502.07 1205.79 L1501.48 1205.79 L1500.9 1205.79 L1500.31 1205.79 L1499.72 1205.79 L1499.14 1205.79 L1498.55 1205.79 L1497.96 1205.79 L1497.38 1205.79 L1496.79 1205.79 L1496.2 1205.79 L1495.62 1205.79 L1495.03 1205.79 L1494.45 1205.79 L1493.86 1205.79 L1493.27 1205.79 L1492.69 1205.79 L1492.1 1205.79 L1491.51 1205.79 L1490.93 1205.79 L1490.34 1205.79 L1489.75 1205.79 L1489.17 1205.79 L1488.58 1205.79 L1487.99 1205.79 L1487.41 1205.79 L1486.82 1205.79 L1486.24 1205.79 L1485.65 1205.79 L1485.06 1205.79 L1484.48 1205.79 L1483.89 1205.79 L1483.3 1205.79 L1482.72 1205.79 L1482.13 1205.79 L1481.54 1205.79 L1480.96 1205.79 L1480.37 1205.79 L1479.78 1205.79 L1479.2 1205.79 L1478.61 1205.79 L1478.03 1205.79 L1477.44 1205.79 L1476.85 1205.79 L1476.27 1205.79 L1475.68 1205.79 L1475.09 1205.79 L1474.51 1205.79 L1473.92 1205.79 L1473.33 1205.79 L1472.75 1205.79 L1472.16 1205.79 L1471.57 1205.79 L1470.99 1205.79 L1470.4 1205.79 L1469.82 1205.79 L1469.23 1205.79 L1468.64 1205.79 L1468.06 1205.79 L1467.47 1205.79 L1466.88 1205.79 L1466.3 1205.79 L1465.71 1205.79 L1465.12 1205.79 L1464.54 1205.79 L1463.95 1205.79 L1463.37 1205.79 L1462.78 1205.79 L1462.19 1205.79 L1461.61 1205.79 L1461.02 1205.79 L1460.43 1205.79 L1459.85 1205.79 L1459.26 1205.79 L1458.67 1205.79 L1458.09 1205.79 L1457.5 1205.79 L1456.91 1205.79 L1456.33 1205.79 L1455.74 1205.79 L1455.16 1205.79 L1454.57 1205.79 L1453.98 1205.79 L1453.4 1205.79 L1452.81 1205.79 L1452.22 1205.79 L1451.64 1205.79 L1451.05 1205.79 L1450.46 1205.79 L1449.88 1205.79 L1449.29 1205.79 L1448.7 1205.79 L1448.12 1205.79 L1447.53 1205.79 L1446.95 1205.79 L1446.36 1205.79 L1445.77 1205.79 L1445.19 1205.79 L1444.6 1205.79 L1444.01 1205.79 L1443.43 1205.79 L1442.84 1205.79 L1442.25 1205.79 L1441.67 1205.79 L1441.08 1205.79 L1440.5 1205.79 L1439.91 1205.79 L1439.32 1205.79 L1438.74 1205.79 L1438.15 1205.79 L1437.56 1205.79 L1436.98 1205.79 L1436.39 1205.79 L1435.8 1205.79 L1435.22 1205.79 L1434.63 1205.79 L1434.04 1205.79 L1433.46 1205.79 L1432.87 1205.79 L1432.29 1205.79 L1431.7 1205.79 L1431.11 1205.79 L1430.53 1205.79 L1429.94 1205.79 L1429.35 1205.79 L1428.77 1205.79 L1428.18 1205.79 L1427.59 1205.79 L1427.01 1205.79 L1426.42 1205.79 L1425.83 1205.79 L1425.25 1205.79 L1424.66 1205.79 L1424.08 1205.79 L1423.49 1205.79 L1422.9 1205.79 L1422.32 1205.79 L1421.73 1205.79 L1421.14 1205.79 L1420.56 1205.79 L1419.97 1205.79 L1419.38 1205.79 L1418.8 1205.79 L1418.21 1205.79 L1417.63 1205.79 L1417.04 1205.79 L1416.45 1205.79 L1415.87 1205.79 L1415.28 1205.79 L1414.69 1205.79 L1414.11 1205.79 L1413.52 1205.79 L1412.93 1205.79 L1412.35 1205.79 L1411.76 1205.79 L1411.17 1205.79 L1410.59 1205.79 L1410 1205.79 L1409.42 1205.79 L1408.83 1205.79 L1408.24 1205.79 L1407.66 1205.79 L1407.07 1205.79 L1406.48 1205.79 L1405.9 1205.79 L1405.31 1205.79 L1404.72 1205.79 L1404.14 1205.79 L1403.55 1205.79 L1402.96 1205.79 L1402.38 1205.79 L1401.79 1205.79 L1401.21 1205.79 L1400.62 1205.79 L1400.03 1205.79 L1399.45 1205.79 L1398.86 1205.79 L1398.27 1205.79 L1397.69 1205.79 L1397.1 1205.79 L1396.51 1205.79 L1395.93 1205.79 L1395.34 1205.79 L1394.75 1205.79 L1394.17 1205.79 L1393.58 1205.79 L1393 1205.79 L1392.41 1205.79 L1391.82 1205.79 L1391.24 1205.79 L1390.65 1205.79 L1390.06 1205.79 L1389.48 1205.79 L1388.89 1205.79 L1388.3 1205.79 L1387.72 1205.79 L1387.13 1205.79 L1386.55 1205.79 L1385.96 1205.79 L1385.37 1205.79 L1384.79 1205.79 L1384.2 1205.79 L1383.61 1205.79 L1383.03 1205.79 L1382.44 1205.79 L1381.85 1205.79 L1381.27 1205.79 L1380.68 1205.79 L1380.09 1205.79 L1379.51 1205.79 L1378.92 1205.79 L1378.34 1205.79 L1377.75 1205.79 L1377.16 1205.79 L1376.58 1205.79 L1375.99 1205.79 L1375.4 1205.79 L1374.82 1205.79 L1374.23 1205.79 L1373.64 1205.79 L1373.06 1205.79 L1372.47 1205.79 L1371.88 1205.79 L1371.3 1205.79 L1370.71 1205.79 L1370.13 1205.79 L1369.54 1205.79 L1368.95 1205.79 L1368.37 1205.79 L1367.78 1205.79 L1367.19 1205.79 L1366.61 1205.79 L1366.02 1205.79 L1365.43 1205.79 L1364.85 1205.79 L1364.26 1205.79 L1363.68 1205.79 L1363.09 1205.79 L1362.5 1205.79 L1361.92 1205.79 L1361.33 1205.79 L1360.74 1205.79 L1360.16 1205.79 L1359.57 1205.79 L1358.98 1205.79 L1358.4 1205.79 L1357.81 1205.79 L1357.22 1205.79 L1356.64 1205.79 L1356.05 1205.79 L1355.47 1205.79 L1354.88 1205.79 L1354.29 1205.79 L1353.71 1205.79 L1353.12 1205.79 L1352.53 1205.79 L1351.95 1205.79 L1351.36 1205.79 L1350.77 1205.79 L1350.19 1205.79 L1349.6 1205.79 L1349.01 1205.79 L1348.43 1205.79 L1347.84 1205.79 L1347.26 1205.79 L1346.67 1205.79 L1346.08 1205.79 L1345.5 1205.79 L1344.91 1205.79 L1344.32 1205.79 L1343.74 1205.79 L1343.15 1205.79 L1342.56 1205.79 L1341.98 1205.79 L1341.39 1205.79 L1340.8 1205.79 L1340.22 1205.79 L1339.63 1205.79 L1339.05 1205.79 L1338.46 1205.79 L1337.87 1205.79 L1337.29 1205.79 L1336.7 1205.79 L1336.11 1205.79 L1335.53 1205.79 L1334.94 1205.79 L1334.35 1205.79 L1333.77 1205.79 L1333.18 1205.79 L1332.6 1205.79 L1332.01 1205.79 L1331.42 1205.79 L1330.84 1205.79 L1330.25 1205.79 L1329.66 1205.79 L1329.08 1205.79 L1328.49 1205.79 L1327.9 1205.79 L1327.32 1205.79 L1326.73 1205.79 L1326.14 1205.79 L1325.56 1205.79 L1324.97 1205.79 L1324.39 1205.79 L1323.8 1205.79 L1323.21 1205.79 L1322.63 1205.79 L1322.04 1205.79 L1321.45 1205.79 L1320.87 1205.79 L1320.28 1205.79 L1319.69 1205.79 L1319.11 1205.79 L1318.52 1205.79 L1317.93 1205.79 L1317.35 1205.79 L1316.76 1205.79 L1316.18 1205.79 L1315.59 1205.79 L1315 1205.79 L1314.42 1205.79 L1313.83 1205.79 L1313.24 1205.79 L1312.66 1205.79 L1312.07 1205.79 L1311.48 1205.79 L1310.9 1205.79 L1310.31 1205.79 L1309.73 1205.79 L1309.14 1205.79 L1308.55 1205.79 L1307.97 1205.79 L1307.38 1205.79 L1306.79 1205.79 L1306.21 1205.79 L1305.62 1205.79 L1305.03 1205.79 L1304.45 1205.79 L1303.86 1205.79 L1303.27 1205.79 L1302.69 1205.79 L1302.1 1205.79 L1301.52 1205.79 L1300.93 1205.79 L1300.34 1205.79 L1299.76 1205.79 L1299.17 1205.79 L1298.58 1205.79 L1298 1205.79 L1297.41 1205.79 L1296.82 1205.79 L1296.24 1205.79 L1295.65 1205.79 L1295.06 1205.79 L1294.48 1205.79 L1293.89 1205.79 L1293.31 1205.79 L1292.72 1205.79 L1292.13 1205.79 L1291.55 1205.79 L1290.96 1205.79 L1290.37 1205.79 L1289.79 1205.79 L1289.2 1205.79 L1288.61 1205.79 L1288.03 1205.79 L1287.44 1205.79 L1286.86 1205.79 L1286.27 1205.79 L1285.68 1205.79 L1285.1 1205.79 L1284.51 1205.79 L1283.92 1205.79 L1283.34 1205.79 L1282.75 1205.79 L1282.16 1205.79 L1281.58 1205.79 L1280.99 1205.79 L1280.4 1205.79 L1279.82 1205.79 L1279.23 1205.79 L1278.65 1205.79 L1278.06 1205.79 L1277.47 1205.79 L1276.89 1205.79 L1276.3 1205.79 L1275.71 1205.79 L1275.13 1205.79 L1274.54 1205.79 L1273.95 1205.79 L1273.37 1205.79 L1272.78 1205.79 L1272.19 1205.79 L1271.61 1205.79 L1271.02 1205.79 L1270.44 1205.79 L1269.85 1205.79 L1269.26 1205.79 L1268.68 1205.79 L1268.09 1205.79 L1267.5 1205.79 L1266.92 1205.79 L1266.33 1205.79 L1265.74 1205.79 L1265.16 1205.79 L1264.57 1205.79 L1263.98 1205.79 L1263.4 1205.79 L1262.81 1205.79 L1262.23 1205.79 L1261.64 1205.79 L1261.05 1205.79 L1260.47 1205.79 L1259.88 1205.79 L1259.29 1205.79 L1258.71 1205.79 L1258.12 1205.79 L1257.53 1205.79 L1256.95 1205.79 L1256.36 1205.79 L1255.78 1205.79 L1255.19 1205.79 L1254.6 1205.79 L1254.02 1205.79 L1253.43 1205.79 L1252.84 1205.79 L1252.26 1205.79 L1251.67 1205.79 L1251.08 1205.79 L1250.5 1205.79 L1249.91 1205.79 L1249.32 1205.79 L1248.74 1205.79 L1248.15 1205.79 L1247.57 1205.79 L1246.98 1205.79 L1246.39 1205.79 L1245.81 1205.79 L1245.22 1205.79 L1244.63 1205.79 L1244.05 1205.79 L1243.46 1205.79 L1242.87 1205.79 L1242.29 1205.79 L1241.7 1205.79 L1241.11 1205.79 L1240.53 1205.79 L1239.94 1205.79 L1239.36 1205.79 L1238.77 1205.79 L1238.18 1205.79 L1237.6 1205.79 L1237.01 1205.79 L1236.42 1205.79 L1235.84 1205.79 L1235.25 1205.79 L1234.66 1205.79 L1234.08 1205.79 L1233.49 1205.79 L1232.91 1205.79 L1232.32 1205.79 L1231.73 1205.79 L1231.15 1205.79 L1230.56 1205.79 L1229.97 1205.79 L1229.39 1205.79 L1228.8 1205.79 L1228.21 1205.79 L1227.63 1205.79 L1227.04 1205.79 L1226.45 1205.79 L1225.87 1205.79 L1225.28 1205.79 L1224.7 1205.79 L1224.11 1205.79 L1223.52 1205.79 L1222.94 1205.79 L1222.35 1205.79 L1221.76 1205.79 L1221.18 1205.79 L1220.59 1205.79 L1220 1205.79 L1219.42 1205.79 L1218.83 1205.79 L1218.24 1205.79 L1217.66 1205.79 L1217.07 1205.79 L1216.49 1205.79 L1215.9 1205.79 L1215.31 1205.79 L1214.73 1205.79 L1214.14 1205.79 L1213.55 1205.79 L1212.97 1205.79 L1212.38 1205.79 L1211.79 1205.79 L1211.21 1205.79 L1210.62 1205.79 L1210.03 1205.79 L1209.45 1205.79 L1208.86 1205.79 L1208.28 1205.79 L1207.69 1205.79 L1207.1 1205.79 L1206.52 1205.79 L1205.93 1205.79 L1205.34 1205.79 L1204.76 1205.79 L1204.17 1205.79 L1203.58 1205.79 L1203 1205.79 L1202.41 1205.79 L1201.83 1205.79 L1201.24 1205.79 L1200.65 1205.79 L1200.07 1205.79 L1199.48 1205.79 L1198.89 1205.79 L1198.31 1205.79 L1197.72 1205.79 L1197.13 1205.79 L1196.55 1205.79 L1195.96 1205.79 L1195.37 1205.79 L1194.79 1205.79 L1194.2 1205.79 L1193.62 1205.79 L1193.03 1205.79 L1192.44 1205.79 L1191.86 1205.79 L1191.27 1205.79 L1190.68 1205.79 L1190.1 1205.79 L1189.51 1205.79 L1188.92 1205.79 L1188.34 1205.79 L1187.75 1205.79 L1187.16 1205.79 L1186.58 1205.79 L1185.99 1205.79 L1185.41 1205.79 L1184.82 1205.79 L1184.23 1205.79 L1183.65 1205.79 L1183.06 1205.79 L1182.47 1205.79 L1181.89 1205.79 L1181.3 1205.79 L1180.71 1205.79 L1180.13 1205.79 L1179.54 1205.79 L1178.96 1205.79 L1178.37 1205.79 L1177.78 1205.79 L1177.2 1205.79 L1176.61 1205.79 L1176.02 1205.79 L1175.44 1205.79 L1174.85 1205.79 L1174.26 1205.79 L1173.68 1205.79 L1173.09 1205.79 L1172.5 1205.79 L1171.92 1205.79 L1171.33 1205.79 L1170.75 1205.79 L1170.16 1205.79 L1169.57 1205.79 L1168.99 1205.79 L1168.4 1205.79 L1167.81 1205.79 L1167.23 1205.79 L1166.64 1205.79 L1166.05 1205.79 L1165.47 1205.79 L1164.88 1205.79 L1164.29 1205.79 L1163.71 1205.79 L1163.12 1205.79 L1162.54 1205.79 L1161.95 1205.79 L1161.36 1205.79 L1160.78 1205.79 L1160.19 1205.79 L1159.6 1205.79 L1159.02 1205.79 L1158.43 1205.79 L1157.84 1205.79 L1157.26 1205.79 L1156.67 1205.79 L1156.09 1205.79 L1155.5 1205.79 L1154.91 1205.79 L1154.33 1205.79 L1153.74 1205.79 L1153.15 1205.79 L1152.57 1205.79 L1151.98 1205.79 L1151.39 1205.79 L1150.81 1205.79 L1150.22 1205.79 L1149.63 1205.79 L1149.05 1205.79 L1148.46 1205.79 L1147.88 1205.79 L1147.29 1205.79 L1146.7 1205.79 L1146.12 1205.79 L1145.53 1205.79 L1144.94 1205.79 L1144.36 1205.79 L1143.77 1205.79 L1143.18 1205.79 L1142.6 1205.79 L1142.01 1205.79 L1141.42 1205.79 L1140.84 1205.79 L1140.25 1205.79 L1139.67 1205.79 L1139.08 1205.79 L1138.49 1205.79 L1137.91 1205.79 L1137.32 1205.79 L1136.73 1205.79 L1136.15 1205.79 L1135.56 1205.79 L1134.97 1205.79 L1134.39 1205.79 L1133.8 1205.79 L1133.21 1205.79 L1132.63 1205.79 L1132.04 1205.79 L1131.46 1205.79 L1130.87 1205.79 L1130.28 1205.79 L1129.7 1205.79 L1129.11 1205.79 L1128.52 1205.79 L1127.94 1205.79 L1127.35 1205.79 L1126.76 1205.79 L1126.18 1205.79 L1125.59 1205.79 L1125.01 1205.79 L1124.42 1205.79 L1123.83 1205.79 L1123.25 1205.79 L1122.66 1205.79 L1122.07 1205.79 L1121.49 1205.79 L1120.9 1205.79 L1120.31 1205.79 L1119.73 1205.79 L1119.14 1205.79 L1118.55 1205.79 L1117.97 1205.79 L1117.38 1205.79 L1116.8 1205.79 L1116.21 1205.79 L1115.62 1205.79 L1115.04 1205.79 L1114.45 1205.79 L1113.86 1205.79 L1113.28 1205.79 L1112.69 1205.79 L1112.1 1205.79 L1111.52 1205.79 L1110.93 1205.79 L1110.34 1205.79 L1109.76 1205.79 L1109.17 1205.79 L1108.59 1205.79 L1108 1205.79 L1107.41 1205.79 L1106.83 1205.79 L1106.24 1205.79 L1105.65 1205.79 L1105.07 1205.79 L1104.48 1205.79 L1103.89 1205.79 L1103.31 1205.79 L1102.72 1205.79 L1102.14 1205.79 L1101.55 1205.79 L1100.96 1205.79 L1100.38 1205.79 L1099.79 1205.79 L1099.2 1205.79 L1098.62 1205.79 L1098.03 1205.79 L1097.44 1205.79 L1096.86 1205.79 L1096.27 1205.79 L1095.68 1205.79 L1095.1 1205.79 L1094.51 1205.79 L1093.93 1205.79 L1093.34 1205.79 L1092.75 1205.79 L1092.17 1205.79 L1091.58 1205.79 L1090.99 1205.79 L1090.41 1205.79 L1089.82 1205.79 L1089.23 1205.79 L1088.65 1205.79 L1088.06 1205.79 L1087.47 1205.79 L1086.89 1205.79 L1086.3 1205.79 L1085.72 1205.79 L1085.13 1205.79 L1084.54 1205.79 L1083.96 1205.79 L1083.37 1205.79 L1082.78 1205.79 L1082.2 1205.79 L1081.61 1205.79 L1081.02 1205.79 L1080.44 1205.79 L1079.85 1205.79 L1079.26 1205.79 L1078.68 1205.79 L1078.09 1205.79 L1077.51 1205.79 L1076.92 1205.79 L1076.33 1205.79 L1075.75 1205.79 L1075.16 1205.79 L1074.57 1205.79 L1073.99 1205.79 L1073.4 1205.79 L1072.81 1205.79 L1072.23 1205.79 L1071.64 1205.79 L1071.06 1205.79 L1070.47 1205.79 L1069.88 1205.79 L1069.3 1205.79 L1068.71 1205.79 L1068.12 1205.79 L1067.54 1205.79 L1066.95 1205.79 L1066.36 1205.79 L1065.78 1205.79 L1065.19 1205.79 L1064.6 1205.79 L1064.02 1205.79 L1063.43 1205.79 L1062.85 1205.79 L1062.26 1205.79 L1061.67 1205.79 L1061.09 1205.79 L1060.5 1205.79 L1059.91 1205.79 L1059.33 1205.79 L1058.74 1205.79 L1058.15 1205.79 L1057.57 1205.79 L1056.98 1205.79 L1056.39 1205.79 L1055.81 1205.79 L1055.22 1205.79 L1054.64 1205.79 L1054.05 1205.79 L1053.46 1205.79 L1052.88 1205.79 L1052.29 1205.79 L1051.7 1205.79 L1051.12 1205.79 L1050.53 1205.79 L1049.94 1205.79 L1049.36 1205.79 L1048.77 1205.79 L1048.19 1205.79 L1047.6 1205.79 L1047.01 1205.79 L1046.43 1205.79 L1045.84 1205.79 L1045.25 1205.79 L1044.67 1205.79 L1044.08 1205.79 L1043.49 1205.79 L1042.91 1205.79 L1042.32 1205.79 L1041.73 1205.79 L1041.15 1205.79 L1040.56 1205.79 L1039.98 1205.79 L1039.39 1205.79 L1038.8 1205.79 L1038.22 1205.79 L1037.63 1205.79 L1037.04 1205.79 L1036.46 1205.79 L1035.87 1205.79 L1035.28 1205.79 L1034.7 1205.79 L1034.11 1205.79 L1033.52 1205.79 L1032.94 1205.79 L1032.35 1205.79 L1031.77 1205.79 L1031.18 1205.79 L1030.59 1205.79 L1030.01 1205.79 L1029.42 1205.79 L1028.83 1205.79 L1028.25 1205.79 L1027.66 1205.79 L1027.07 1205.79 L1026.49 1205.79 L1025.9 1205.79 L1025.32 1205.79 L1024.73 1205.79 L1024.14 1205.79 L1023.56 1205.79 L1022.97 1205.79 L1022.38 1205.79 L1021.8 1205.79 L1021.21 1205.79 L1020.62 1205.79 L1020.04 1205.79 L1019.45 1205.79 L1018.86 1205.79 L1018.28 1205.79 L1017.69 1205.79 L1017.11 1205.79 L1016.52 1205.79 L1015.93 1205.79 L1015.35 1205.79 L1014.76 1205.79 L1014.17 1205.79 L1013.59 1205.79 L1013 1205.79 L1012.41 1205.79 L1011.83 1205.79 L1011.24 1205.79 L1010.65 1205.79 L1010.07 1205.79 L1009.48 1205.79 L1008.9 1205.79 L1008.31 1205.79 L1007.72 1205.79 L1007.14 1205.79 L1006.55 1205.79 L1005.96 1205.79 L1005.38 1205.79 L1004.79 1205.79 L1004.2 1205.79 L1003.62 1205.79 L1003.03 1205.79 L1002.44 1205.79 L1001.86 1205.79 L1001.27 1205.79 L1000.69 1205.79 L1000.1 1205.79 L999.513 1205.79 L998.926 1205.79 L998.34 1205.79 L997.754 1205.79 L997.167 1205.79 L996.581 1205.79 L995.994 1205.79 L995.408 1205.79 L994.822 1205.79 L994.235 1205.79 L993.649 1205.79 L993.062 1205.79 L992.476 1205.79 L991.889 1205.79 L991.303 1205.79 L990.717 1205.79 L990.13 1205.79 L989.544 1205.79 L988.957 1205.79 L988.371 1205.79 L987.785 1205.79 L987.198 1205.79 L986.612 1205.79 L986.025 1205.79  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1206.07 986.612,1206.07 987.198,1206.07 987.785,1206.07 988.371,1206.07 988.957,1206.07 989.544,1206.07 990.13,1206.07 990.717,1206.07 991.303,1206.07 991.889,1206.07 992.476,1206.07 993.062,1206.07 993.649,1206.07 994.235,1206.07 994.822,1206.07 995.408,1206.07 995.994,1206.07 996.581,1206.07 997.167,1206.07 997.754,1206.07 998.34,1206.07 998.926,1206.07 999.513,1206.07 1000.1,1206.07 1000.69,1206.07 1001.27,1206.07 1001.86,1206.07 1002.44,1206.07 1003.03,1206.07 1003.62,1206.07 1004.2,1206.07 1004.79,1206.07 1005.38,1206.07 1005.96,1206.07 1006.55,1206.07 1007.14,1206.07 1007.72,1206.07 1008.31,1206.07 1008.9,1206.07 1009.48,1206.07 1010.07,1206.07 1010.65,1206.07 1011.24,1206.07 1011.83,1206.07 1012.41,1206.07 1013,1206.07 1013.59,1206.07 1014.17,1206.07 1014.76,1206.07 1015.35,1206.07 1015.93,1206.07 1016.52,1206.07 1017.11,1206.07 1017.69,1206.07 1018.28,1206.07 1018.86,1206.07 1019.45,1206.07 1020.04,1206.07 1020.62,1206.07 1021.21,1206.07 1021.8,1206.07 1022.38,1206.07 1022.97,1206.07 1023.56,1206.07 1024.14,1206.07 1024.73,1206.07 1025.32,1206.07 1025.9,1206.07 1026.49,1206.07 1027.07,1206.07 1027.66,1206.07 1028.25,1206.07 1028.83,1206.07 1029.42,1206.07 1030.01,1206.07 1030.59,1206.07 1031.18,1206.07 1031.77,1206.07 1032.35,1206.07 1032.94,1206.07 1033.52,1206.07 1034.11,1206.07 1034.7,1206.07 1035.28,1206.07 1035.87,1206.07 1036.46,1206.07 1037.04,1206.07 1037.63,1206.07 1038.22,1206.07 1038.8,1206.07 1039.39,1206.07 1039.98,1206.07 1040.56,1206.07 1041.15,1206.07 1041.73,1206.07 1042.32,1206.07 1042.91,1206.07 1043.49,1206.07 1044.08,1206.07 1044.67,1206.07 1045.25,1206.07 1045.84,1206.07 1046.43,1206.07 1047.01,1206.07 1047.6,1206.07 1048.19,1206.07 1048.77,1206.07 1049.36,1206.07 1049.94,1206.07 1050.53,1206.07 1051.12,1206.07 1051.7,1206.07 1052.29,1206.07 1052.88,1206.07 1053.46,1206.07 1054.05,1206.07 1054.64,1206.07 1055.22,1206.07 1055.81,1206.07 1056.39,1206.07 1056.98,1206.07 1057.57,1206.07 1058.15,1206.07 1058.74,1206.07 1059.33,1206.07 1059.91,1206.07 1060.5,1206.07 1061.09,1206.07 1061.67,1206.07 1062.26,1206.07 1062.85,1206.07 1063.43,1206.07 1064.02,1206.07 1064.6,1206.07 1065.19,1206.07 1065.78,1206.07 1066.36,1206.07 1066.95,1206.07 1067.54,1206.07 1068.12,1206.07 1068.71,1206.07 1069.3,1206.07 1069.88,1206.07 1070.47,1206.07 1071.06,1206.07 1071.64,1206.07 1072.23,1206.07 1072.81,1206.07 1073.4,1206.07 1073.99,1206.07 1074.57,1206.07 1075.16,1206.07 1075.75,1206.07 1076.33,1206.07 1076.92,1206.07 1077.51,1206.07 1078.09,1206.07 1078.68,1206.07 1079.26,1206.07 1079.85,1206.07 1080.44,1206.07 1081.02,1206.07 1081.61,1206.07 1082.2,1206.07 1082.78,1206.07 1083.37,1206.07 1083.96,1206.07 1084.54,1206.07 1085.13,1206.07 1085.72,1206.07 1086.3,1206.07 1086.89,1206.07 1087.47,1206.07 1088.06,1206.07 1088.65,1206.07 1089.23,1206.07 1089.82,1206.07 1090.41,1206.07 1090.99,1206.07 1091.58,1206.07 1092.17,1206.07 1092.75,1206.07 1093.34,1206.07 1093.93,1206.07 1094.51,1206.07 1095.1,1206.07 1095.68,1206.07 1096.27,1206.07 1096.86,1206.07 1097.44,1206.07 1098.03,1206.07 1098.62,1206.07 1099.2,1206.07 1099.79,1206.07 1100.38,1206.07 1100.96,1206.07 1101.55,1206.07 1102.14,1206.07 1102.72,1206.07 1103.31,1206.07 1103.89,1206.07 1104.48,1206.07 1105.07,1206.07 1105.65,1206.07 1106.24,1206.07 1106.83,1206.07 1107.41,1206.07 1108,1206.07 1108.59,1206.07 1109.17,1206.07 1109.76,1206.07 1110.34,1206.07 1110.93,1206.07 1111.52,1206.07 1112.1,1206.07 1112.69,1206.07 1113.28,1206.07 1113.86,1206.07 1114.45,1206.07 1115.04,1206.07 1115.62,1206.07 1116.21,1206.07 1116.8,1206.07 1117.38,1206.07 1117.97,1206.07 1118.55,1206.07 1119.14,1206.07 1119.73,1206.07 1120.31,1206.07 1120.9,1206.07 1121.49,1206.07 1122.07,1206.07 1122.66,1206.07 1123.25,1206.07 1123.83,1206.07 1124.42,1206.07 1125.01,1206.07 1125.59,1206.07 1126.18,1206.07 1126.76,1206.07 1127.35,1206.07 1127.94,1206.07 1128.52,1206.07 1129.11,1206.07 1129.7,1206.07 1130.28,1206.07 1130.87,1206.07 1131.46,1206.07 1132.04,1206.07 1132.63,1206.07 1133.21,1206.07 1133.8,1206.07 1134.39,1206.07 1134.97,1206.07 1135.56,1206.07 1136.15,1206.07 1136.73,1206.07 1137.32,1206.07 1137.91,1206.07 1138.49,1206.07 1139.08,1206.07 1139.67,1206.07 1140.25,1206.07 1140.84,1206.07 1141.42,1206.07 1142.01,1206.07 1142.6,1206.07 1143.18,1206.07 1143.77,1206.07 1144.36,1206.07 1144.94,1206.07 1145.53,1206.07 1146.12,1206.07 1146.7,1206.07 1147.29,1206.07 1147.88,1206.07 1148.46,1206.07 1149.05,1206.07 1149.63,1206.07 1150.22,1206.07 1150.81,1206.07 1151.39,1206.07 1151.98,1206.07 1152.57,1206.07 1153.15,1206.07 1153.74,1206.07 1154.33,1206.07 1154.91,1206.07 1155.5,1206.07 1156.09,1206.07 1156.67,1206.07 1157.26,1206.07 1157.84,1206.07 1158.43,1206.07 1159.02,1206.07 1159.6,1206.07 1160.19,1206.07 1160.78,1206.07 1161.36,1206.07 1161.95,1206.07 1162.54,1206.07 1163.12,1206.07 1163.71,1206.07 1164.29,1206.07 1164.88,1206.07 1165.47,1206.07 1166.05,1206.07 1166.64,1206.07 1167.23,1206.07 1167.81,1206.07 1168.4,1206.07 1168.99,1206.07 1169.57,1206.07 1170.16,1206.07 1170.75,1206.07 1171.33,1206.07 1171.92,1206.07 1172.5,1206.07 1173.09,1206.07 1173.68,1206.07 1174.26,1206.07 1174.85,1206.07 1175.44,1206.07 1176.02,1206.07 1176.61,1206.07 1177.2,1206.07 1177.78,1206.07 1178.37,1206.07 1178.96,1206.07 1179.54,1206.07 1180.13,1206.07 1180.71,1206.07 1181.3,1206.07 1181.89,1206.07 1182.47,1206.07 1183.06,1206.07 1183.65,1206.07 1184.23,1206.07 1184.82,1206.07 1185.41,1206.07 1185.99,1206.07 1186.58,1206.07 1187.16,1206.07 1187.75,1206.07 1188.34,1206.07 1188.92,1206.07 1189.51,1206.07 1190.1,1206.07 1190.68,1206.07 1191.27,1206.07 1191.86,1206.07 1192.44,1206.07 1193.03,1206.07 1193.62,1206.07 1194.2,1206.07 1194.79,1206.07 1195.37,1206.07 1195.96,1206.07 1196.55,1206.07 1197.13,1206.07 1197.72,1206.07 1198.31,1206.07 1198.89,1206.07 1199.48,1206.07 1200.07,1206.07 1200.65,1206.07 1201.24,1206.07 1201.83,1206.07 1202.41,1206.07 1203,1206.07 1203.58,1206.07 1204.17,1206.07 1204.76,1206.07 1205.34,1206.07 1205.93,1206.07 1206.52,1206.07 1207.1,1206.07 1207.69,1206.07 1208.28,1206.07 1208.86,1206.07 1209.45,1206.07 1210.03,1206.07 1210.62,1206.07 1211.21,1206.07 1211.79,1206.07 1212.38,1206.07 1212.97,1206.07 1213.55,1206.07 1214.14,1206.07 1214.73,1206.07 1215.31,1206.07 1215.9,1206.07 1216.49,1206.07 1217.07,1206.07 1217.66,1206.07 1218.24,1206.07 1218.83,1206.07 1219.42,1206.07 1220,1206.07 1220.59,1206.07 1221.18,1206.07 1221.76,1206.07 1222.35,1206.07 1222.94,1206.07 1223.52,1206.07 1224.11,1206.07 1224.7,1206.07 1225.28,1206.07 1225.87,1206.07 1226.45,1206.07 1227.04,1206.07 1227.63,1206.07 1228.21,1206.07 1228.8,1206.07 1229.39,1206.07 1229.97,1206.07 1230.56,1206.07 1231.15,1206.07 1231.73,1206.07 1232.32,1206.07 1232.91,1206.07 1233.49,1206.07 1234.08,1206.07 1234.66,1206.07 1235.25,1206.07 1235.84,1206.07 1236.42,1206.07 1237.01,1206.07 1237.6,1206.07 1238.18,1206.07 1238.77,1206.07 1239.36,1206.07 1239.94,1206.07 1240.53,1206.07 1241.11,1206.07 1241.7,1206.07 1242.29,1206.07 1242.87,1206.07 1243.46,1206.07 1244.05,1206.07 1244.63,1206.07 1245.22,1206.07 1245.81,1206.07 1246.39,1206.07 1246.98,1206.07 1247.57,1206.07 1248.15,1206.07 1248.74,1206.07 1249.32,1206.07 1249.91,1206.07 1250.5,1206.07 1251.08,1206.07 1251.67,1206.07 1252.26,1206.07 1252.84,1206.07 1253.43,1206.07 1254.02,1206.07 1254.6,1206.07 1255.19,1206.07 1255.78,1206.07 1256.36,1206.07 1256.95,1206.07 1257.53,1206.07 1258.12,1206.07 1258.71,1206.07 1259.29,1206.07 1259.88,1206.07 1260.47,1206.07 1261.05,1206.07 1261.64,1206.07 1262.23,1206.07 1262.81,1206.07 1263.4,1206.07 1263.98,1206.07 1264.57,1206.07 1265.16,1206.07 1265.74,1206.07 1266.33,1206.07 1266.92,1206.07 1267.5,1206.07 1268.09,1206.07 1268.68,1206.07 1269.26,1206.07 1269.85,1206.07 1270.44,1206.07 1271.02,1206.07 1271.61,1206.07 1272.19,1206.07 1272.78,1206.07 1273.37,1206.07 1273.95,1206.07 1274.54,1206.07 1275.13,1206.07 1275.71,1206.07 1276.3,1206.07 1276.89,1206.07 1277.47,1206.07 1278.06,1206.07 1278.65,1206.07 1279.23,1206.07 1279.82,1206.07 1280.4,1206.07 1280.99,1206.07 1281.58,1206.07 1282.16,1206.07 1282.75,1206.07 1283.34,1206.07 1283.92,1206.07 1284.51,1206.07 1285.1,1206.07 1285.68,1206.07 1286.27,1206.07 1286.86,1206.07 1287.44,1206.07 1288.03,1206.07 1288.61,1206.07 1289.2,1206.07 1289.79,1206.07 1290.37,1206.07 1290.96,1206.07 1291.55,1206.07 1292.13,1206.07 1292.72,1206.07 1293.31,1206.07 1293.89,1206.07 1294.48,1206.07 1295.06,1206.07 1295.65,1206.07 1296.24,1206.07 1296.82,1206.07 1297.41,1206.07 1298,1206.07 1298.58,1206.07 1299.17,1206.07 1299.76,1206.07 1300.34,1206.07 1300.93,1206.07 1301.52,1206.07 1302.1,1206.07 1302.69,1206.07 1303.27,1206.07 1303.86,1206.07 1304.45,1206.07 1305.03,1206.07 1305.62,1206.07 1306.21,1206.07 1306.79,1206.07 1307.38,1206.07 1307.97,1206.07 1308.55,1206.07 1309.14,1206.07 1309.73,1206.07 1310.31,1206.07 1310.9,1206.07 1311.48,1206.07 1312.07,1206.07 1312.66,1206.07 1313.24,1206.07 1313.83,1206.07 1314.42,1206.07 1315,1206.07 1315.59,1206.07 1316.18,1206.07 1316.76,1206.07 1317.35,1206.07 1317.93,1206.07 1318.52,1206.07 1319.11,1206.07 1319.69,1206.07 1320.28,1206.07 1320.87,1206.07 1321.45,1206.07 1322.04,1206.07 1322.63,1206.07 1323.21,1206.07 1323.8,1206.07 1324.39,1206.07 1324.97,1206.07 1325.56,1206.07 1326.14,1206.07 1326.73,1206.07 1327.32,1206.07 1327.9,1206.07 1328.49,1206.07 1329.08,1206.07 1329.66,1206.07 1330.25,1206.07 1330.84,1206.07 1331.42,1206.07 1332.01,1206.07 1332.6,1206.07 1333.18,1206.07 1333.77,1206.07 1334.35,1206.07 1334.94,1206.07 1335.53,1206.07 1336.11,1206.07 1336.7,1206.07 1337.29,1206.07 1337.87,1206.07 1338.46,1206.07 1339.05,1206.07 1339.63,1206.07 1340.22,1206.07 1340.8,1206.07 1341.39,1206.07 1341.98,1206.07 1342.56,1206.07 1343.15,1206.07 1343.74,1206.07 1344.32,1206.07 1344.91,1206.07 1345.5,1206.07 1346.08,1206.07 1346.67,1206.07 1347.26,1206.07 1347.84,1206.07 1348.43,1206.07 1349.01,1206.07 1349.6,1206.07 1350.19,1206.07 1350.77,1206.07 1351.36,1206.07 1351.95,1206.07 1352.53,1206.07 1353.12,1206.07 1353.71,1206.07 1354.29,1206.07 1354.88,1206.07 1355.47,1206.07 1356.05,1206.07 1356.64,1206.07 1357.22,1206.07 1357.81,1206.07 1358.4,1206.07 1358.98,1206.07 1359.57,1206.07 1360.16,1206.07 1360.74,1206.07 1361.33,1206.07 1361.92,1206.07 1362.5,1206.07 1363.09,1206.07 1363.68,1206.07 1364.26,1206.07 1364.85,1206.07 1365.43,1206.07 1366.02,1206.07 1366.61,1206.07 1367.19,1206.07 1367.78,1206.07 1368.37,1206.07 1368.95,1206.07 1369.54,1206.07 1370.13,1206.07 1370.71,1206.07 1371.3,1206.07 1371.88,1206.07 1372.47,1206.07 1373.06,1206.07 1373.64,1206.07 1374.23,1206.07 1374.82,1206.07 1375.4,1206.07 1375.99,1206.07 1376.58,1206.07 1377.16,1206.07 1377.75,1206.07 1378.34,1206.07 1378.92,1206.07 1379.51,1206.07 1380.09,1206.07 1380.68,1206.07 1381.27,1206.07 1381.85,1206.07 1382.44,1206.07 1383.03,1206.07 1383.61,1206.07 1384.2,1206.07 1384.79,1206.07 1385.37,1206.07 1385.96,1206.07 1386.55,1206.07 1387.13,1206.07 1387.72,1206.07 1388.3,1206.07 1388.89,1206.07 1389.48,1206.07 1390.06,1206.07 1390.65,1206.07 1391.24,1206.07 1391.82,1206.07 1392.41,1206.07 1393,1206.07 1393.58,1206.07 1394.17,1206.07 1394.75,1206.07 1395.34,1206.07 1395.93,1206.07 1396.51,1206.07 1397.1,1206.07 1397.69,1206.07 1398.27,1206.07 1398.86,1206.07 1399.45,1206.07 1400.03,1206.07 1400.62,1206.07 1401.21,1206.07 1401.79,1206.07 1402.38,1206.07 1402.96,1206.07 1403.55,1206.07 1404.14,1206.07 1404.72,1206.07 1405.31,1206.07 1405.9,1206.07 1406.48,1206.07 1407.07,1206.07 1407.66,1206.07 1408.24,1206.07 1408.83,1206.07 1409.42,1206.07 1410,1206.07 1410.59,1206.07 1411.17,1206.07 1411.76,1206.07 1412.35,1206.07 1412.93,1206.07 1413.52,1206.07 1414.11,1206.07 1414.69,1206.07 1415.28,1206.07 1415.87,1206.07 1416.45,1206.07 1417.04,1206.07 1417.63,1206.07 1418.21,1206.07 1418.8,1206.07 1419.38,1206.07 1419.97,1206.07 1420.56,1206.07 1421.14,1206.07 1421.73,1206.07 1422.32,1206.07 1422.9,1206.07 1423.49,1206.07 1424.08,1206.07 1424.66,1206.07 1425.25,1206.07 1425.83,1206.07 1426.42,1206.07 1427.01,1206.07 1427.59,1206.07 1428.18,1206.07 1428.77,1206.07 1429.35,1206.07 1429.94,1206.07 1430.53,1206.07 1431.11,1206.07 1431.7,1206.07 1432.29,1206.07 1432.87,1206.07 1433.46,1206.07 1434.04,1206.07 1434.63,1206.07 1435.22,1206.07 1435.8,1206.07 1436.39,1206.07 1436.98,1206.07 1437.56,1206.07 1438.15,1206.07 1438.74,1206.07 1439.32,1206.07 1439.91,1206.07 1440.5,1206.07 1441.08,1206.07 1441.67,1206.07 1442.25,1206.07 1442.84,1206.07 1443.43,1206.07 1444.01,1206.07 1444.6,1206.07 1445.19,1206.07 1445.77,1206.07 1446.36,1206.07 1446.95,1206.07 1447.53,1206.07 1448.12,1206.07 1448.7,1206.07 1449.29,1206.07 1449.88,1206.07 1450.46,1206.07 1451.05,1206.07 1451.64,1206.07 1452.22,1206.07 1452.81,1206.07 1453.4,1206.07 1453.98,1206.07 1454.57,1206.07 1455.16,1206.07 1455.74,1206.07 1456.33,1206.07 1456.91,1206.07 1457.5,1206.07 1458.09,1206.07 1458.67,1206.07 1459.26,1206.07 1459.85,1206.07 1460.43,1206.07 1461.02,1206.07 1461.61,1206.07 1462.19,1206.07 1462.78,1206.07 1463.37,1206.07 1463.95,1206.07 1464.54,1206.07 1465.12,1206.07 1465.71,1206.07 1466.3,1206.07 1466.88,1206.07 1467.47,1206.07 1468.06,1206.07 1468.64,1206.07 1469.23,1206.07 1469.82,1206.07 1470.4,1206.07 1470.99,1206.07 1471.57,1206.07 1472.16,1206.07 1472.75,1206.07 1473.33,1206.07 1473.92,1206.07 1474.51,1206.07 1475.09,1206.07 1475.68,1206.07 1476.27,1206.07 1476.85,1206.07 1477.44,1206.07 1478.03,1206.07 1478.61,1206.07 1479.2,1206.07 1479.78,1206.07 1480.37,1206.07 1480.96,1206.07 1481.54,1206.07 1482.13,1206.07 1482.72,1206.07 1483.3,1206.07 1483.89,1206.07 1484.48,1206.07 1485.06,1206.07 1485.65,1206.07 1486.24,1206.07 1486.82,1206.07 1487.41,1206.07 1487.99,1206.07 1488.58,1206.07 1489.17,1206.07 1489.75,1206.07 1490.34,1206.07 1490.93,1206.07 1491.51,1206.07 1492.1,1206.07 1492.69,1206.07 1493.27,1206.07 1493.86,1206.07 1494.45,1206.07 1495.03,1206.07 1495.62,1206.07 1496.2,1206.07 1496.79,1206.07 1497.38,1206.07 1497.96,1206.07 1498.55,1206.07 1499.14,1206.07 1499.72,1206.07 1500.31,1206.07 1500.9,1206.07 1501.48,1206.07 1502.07,1206.07 1502.65,1206.07 1503.24,1206.07 1503.83,1206.07 1504.41,1206.07 1505,1206.07 1505.59,1206.07 1506.17,1206.07 1506.76,1206.07 1507.35,1206.07 1507.93,1206.07 1508.52,1206.07 1509.11,1206.07 1509.69,1206.07 1510.28,1206.07 1510.86,1206.07 1511.45,1206.07 1512.04,1206.07 1512.62,1206.07 1513.21,1206.07 1513.8,1206.07 1514.38,1206.07 1514.97,1206.07 1515.56,1206.07 1516.14,1206.07 1516.73,1206.07 1517.32,1206.07 1517.9,1206.07 1518.49,1206.07 1519.07,1206.07 1519.66,1206.07 1520.25,1206.07 1520.83,1206.07 1521.42,1206.07 1522.01,1206.07 1522.59,1206.07 1523.18,1206.07 1523.77,1206.07 1524.35,1206.07 1524.94,1206.07 1525.52,1206.07 1526.11,1206.07 1526.7,1206.07 1527.28,1206.07 1527.87,1206.07 1528.46,1206.07 1529.04,1206.07 1529.63,1206.07 1530.22,1206.07 1530.8,1206.07 1531.39,1206.07 1531.98,1206.07 1532.56,1206.07 1533.15,1206.07 1533.73,1206.07 1534.32,1206.07 1534.91,1206.07 1535.49,1206.07 1536.08,1206.07 1536.67,1206.07 1537.25,1206.07 1537.84,1206.07 1538.43,1206.07 1539.01,1206.07 1539.6,1206.07 1540.19,1206.07 1540.77,1206.07 1541.36,1206.07 1541.94,1206.07 1542.53,1206.07 1543.12,1206.07 1543.7,1206.07 1544.29,1206.07 1544.88,1206.07 1545.46,1206.07 1546.05,1206.07 1546.64,1206.07 1547.22,1206.07 1547.81,1206.07 1548.4,1206.07 1548.98,1206.07 1549.57,1206.07 1550.15,1206.07 1550.74,1206.07 1551.33,1206.07 1551.91,1206.07 1552.5,1206.07 1553.09,1206.07 1553.67,1206.07 1554.26,1206.07 1554.85,1206.07 1555.43,1206.07 1556.02,1206.07 1556.6,1206.07 1557.19,1206.07 1557.78,1206.07 1558.36,1206.07 1558.95,1206.07 1559.54,1206.07 1560.12,1206.07 1560.71,1206.07 1561.3,1206.07 1561.88,1206.07 1562.47,1206.07 1563.06,1206.07 1563.64,1206.07 1564.23,1206.07 1564.81,1206.07 1565.4,1206.07 1565.99,1206.07 1566.57,1206.07 1567.16,1206.07 1567.75,1206.07 1568.33,1206.07 1568.92,1206.07 1569.51,1206.07 1570.09,1206.07 1570.68,1206.07 1571.27,1206.07 1571.85,1206.07 1572.44,1206.07 1573.02,1206.07 1573.61,1206.07 1574.2,1206.07 1574.78,1206.07 1575.37,1206.07 1575.96,1206.07 1576.54,1206.07 1577.13,1206.07 1577.72,1206.07 1578.3,1206.07 1578.89,1206.07 1579.47,1206.07 1580.06,1206.07 1580.65,1206.07 1581.23,1206.07 1581.82,1206.07 1582.41,1206.07 1582.99,1206.07 1583.58,1206.07 1584.17,1206.07 1584.75,1206.07 1585.34,1206.07 1585.93,1206.07 1586.51,1206.07 1587.1,1206.07 1587.68,1206.07 1588.27,1206.07 1588.86,1206.07 1589.44,1206.07 1590.03,1206.07 1590.62,1206.07 1591.2,1206.07 1591.79,1206.07 1592.38,1206.07 1592.96,1206.07 1593.55,1206.07 1594.14,1206.07 1594.72,1206.07 1595.31,1206.07 1595.89,1206.07 1596.48,1206.07 1597.07,1206.07 1597.65,1206.07 1598.24,1206.07 1598.83,1206.07 1599.41,1206.07 1600,1206.07 1600.59,1206.07 1601.17,1206.07 1601.76,1206.07 1602.34,1206.07 1602.93,1206.07 1603.52,1206.07 1604.1,1206.07 1604.69,1206.07 1605.28,1206.07 1605.86,1206.07 1606.45,1206.07 1607.04,1206.07 1607.62,1206.07 1608.21,1206.07 1608.8,1206.07 1609.38,1206.07 1609.97,1206.07 1610.55,1206.07 1611.14,1206.07 1611.73,1206.07 1612.31,1206.07 1612.9,1206.07 1613.49,1206.07 1614.07,1206.07 1614.66,1206.07 1615.25,1206.07 1615.83,1206.07 1616.42,1206.07 1617.01,1206.07 1617.59,1206.07 1618.18,1206.07 1618.76,1206.07 1619.35,1206.07 1619.94,1206.07 1620.52,1206.07 1621.11,1206.07 1621.7,1206.07 1622.28,1206.07 1622.87,1206.07 1623.46,1206.07 1624.04,1206.07 1624.63,1206.07 1625.22,1206.07 1625.8,1206.07 1626.39,1206.07 1626.97,1206.07 1627.56,1206.07 1628.15,1206.07 1628.73,1206.07 1629.32,1206.07 1629.91,1206.07 1630.49,1206.07 1631.08,1206.07 1631.67,1206.07 1632.25,1206.07 1632.84,1206.07 1633.42,1206.07 1634.01,1206.07 1634.6,1206.07 1635.18,1206.07 1635.77,1206.07 1636.36,1206.07 1636.94,1206.07 1637.53,1206.07 1638.12,1206.07 1638.7,1206.07 1639.29,1206.07 1639.88,1206.07 1640.46,1206.07 1641.05,1206.07 1641.63,1206.07 1642.22,1206.07 1642.81,1206.07 1643.39,1206.07 1643.98,1206.07 1644.57,1206.07 1645.15,1206.07 1645.74,1206.07 1646.33,1206.07 1646.91,1206.07 1647.5,1206.07 1648.09,1206.07 1648.67,1206.07 1649.26,1206.07 1649.84,1206.07 1650.43,1206.07 1651.02,1206.07 1651.6,1206.07 1652.19,1206.07 1652.78,1206.07 1653.36,1206.07 1653.95,1206.07 1654.54,1206.07 1655.12,1206.07 1655.71,1206.07 1656.29,1206.07 1656.88,1206.07 1657.47,1206.07 1658.05,1206.07 1658.64,1206.07 1659.23,1206.07 1659.81,1206.07 1660.4,1206.07 1660.99,1206.07 1661.57,1206.07 1662.16,1206.07 1662.75,1206.07 1663.33,1206.07 1663.92,1206.07 1664.5,1206.07 1665.09,1206.07 1665.68,1206.07 1666.26,1206.07 1666.85,1206.07 1667.44,1206.07 1668.02,1206.07 1668.61,1206.07 1669.2,1206.07 1669.78,1206.07 1670.37,1206.07 1670.96,1206.07 1671.54,1206.07 1672.13,1206.07 1672.71,1206.07 1673.3,1206.07 1673.89,1206.07 1674.47,1206.07 1675.06,1206.07 1675.65,1206.07 1676.23,1206.07 1676.82,1206.07 1677.41,1206.07 1677.99,1206.07 1678.58,1206.07 1679.17,1206.07 1679.75,1206.07 1680.34,1206.07 1680.92,1206.07 1681.51,1206.07 1682.1,1206.07 1682.68,1206.07 1683.27,1206.07 1683.86,1206.07 1684.44,1206.07 1685.03,1206.07 1685.62,1206.07 1686.2,1206.07 1686.79,1206.07 1687.37,1206.07 1687.96,1206.07 1688.55,1206.07 1689.13,1206.07 1689.72,1206.07 1690.31,1206.07 1690.89,1206.07 1691.48,1206.07 1692.07,1206.07 1692.65,1206.07 1693.24,1206.07 1693.83,1206.07 1694.41,1206.07 1695,1206.07 1695.58,1206.07 1696.17,1206.07 1696.76,1206.07 1697.34,1206.07 1697.93,1206.07 1698.52,1206.07 1699.1,1206.07 1699.69,1206.07 1700.28,1206.07 1700.86,1206.07 1701.45,1206.07 1702.04,1206.07 1702.62,1206.07 1703.21,1206.07 1703.79,1206.07 1704.38,1206.07 1704.97,1206.07 1705.55,1206.07 1706.14,1206.07 1706.73,1206.07 1707.31,1206.07 1707.9,1206.07 1708.49,1206.07 1709.07,1206.07 1709.66,1206.07 1710.24,1206.07 1710.83,1206.07 1711.42,1206.07 1712,1206.07 1712.59,1206.07 1713.18,1206.07 1713.76,1206.07 1714.35,1206.07 1714.94,1206.07 1715.52,1206.07 1716.11,1206.07 1716.7,1206.07 1717.28,1206.07 1717.87,1206.07 1718.45,1206.07 1719.04,1206.07 1719.63,1206.07 1720.21,1206.07 1720.8,1206.07 1721.39,1206.07 1721.97,1206.07 1722.56,1206.07 1723.15,1206.07 1723.73,1206.07 1724.32,1206.07 1724.91,1206.07 1725.49,1206.07 1726.08,1206.07 1726.66,1206.07 1727.25,1206.07 1727.84,1206.07 1728.42,1206.07 1729.01,1206.07 1729.6,1206.07 1730.18,1206.07 1730.77,1206.07 1731.36,1206.07 1731.94,1206.07 1732.53,1206.07 1733.11,1206.07 1733.7,1206.07 1734.29,1206.07 1734.87,1206.07 1735.46,1206.07 1736.05,1206.07 1736.63,1206.07 1737.22,1206.07 1737.81,1206.07 1738.39,1206.07 1738.98,1206.07 1739.57,1206.07 1740.15,1206.07 1740.74,1206.07 1741.32,1206.07 1741.91,1206.07 1742.5,1206.07 1743.08,1206.07 1743.67,1206.07 1744.26,1206.07 1744.84,1206.07 1745.43,1206.07 1746.02,1206.07 1746.6,1206.07 1747.19,1206.07 1747.78,1206.07 1748.36,1206.07 1748.95,1206.07 1749.53,1206.07 1750.12,1206.07 1750.71,1206.07 1751.29,1206.07 1751.88,1206.07 1752.47,1206.07 1753.05,1206.07 1753.64,1206.07 1754.23,1206.07 1754.81,1206.07 1755.4,1206.07 1755.99,1206.07 1756.57,1206.07 1757.16,1206.07 1757.74,1206.07 1758.33,1206.07 1758.92,1206.07 1759.5,1206.07 1760.09,1206.07 1760.68,1206.07 1761.26,1206.07 1761.85,1206.07 1762.44,1206.07 1763.02,1206.07 1763.61,1206.07 1764.19,1206.07 1764.78,1206.07 1765.37,1206.07 1765.95,1206.07 1766.54,1206.07 1767.13,1206.07 1767.71,1206.07 1768.3,1206.07 1768.89,1206.07 1769.47,1206.07 1770.06,1206.07 1770.65,1206.07 1771.23,1206.07 1771.82,1206.07 1772.4,1206.07 1772.99,1206.07 1773.58,1206.07 1774.16,1206.07 1774.75,1206.07 1775.34,1206.07 1775.92,1206.07 1776.51,1206.07 1777.1,1206.07 1777.68,1206.07 1778.27,1206.07 1778.86,1206.07 1779.44,1206.07 1780.03,1206.07 1780.61,1206.07 1781.2,1206.07 1781.79,1206.07 1782.37,1206.07 1782.96,1206.07 1783.55,1206.07 1784.13,1206.07 1784.72,1206.07 1785.31,1206.07 1785.89,1206.07 1786.48,1206.07 1787.06,1206.07 1787.65,1206.07 1788.24,1206.07 1788.82,1206.07 1789.41,1206.07 1790,1206.07 1790.58,1206.07 1791.17,1206.07 1791.76,1206.07 1792.34,1206.07 1792.93,1206.07 1793.52,1206.07 1794.1,1206.07 1794.69,1206.07 1795.27,1206.07 1795.86,1206.07 1796.45,1206.07 1797.03,1206.07 1797.62,1206.07 1798.21,1206.07 1798.79,1206.07 1799.38,1206.07 1799.97,1206.07 1800.55,1206.07 1801.14,1206.07 1801.73,1206.07 1802.31,1206.07 1802.9,1206.07 1803.48,1206.07 1804.07,1206.07 1804.66,1206.07 1805.24,1206.07 1805.83,1206.07 1806.42,1206.07 1807,1206.07 1807.59,1206.07 1808.18,1206.07 1808.76,1206.07 1809.35,1206.07 1809.94,1206.07 1810.52,1206.07 1811.11,1206.07 1811.69,1206.07 1812.28,1206.07 1812.87,1206.07 1813.45,1206.07 1814.04,1206.07 1814.63,1206.07 1815.21,1206.07 1815.8,1206.07 1816.39,1206.07 1816.97,1206.07 1817.56,1206.07 1818.14,1206.07 1818.73,1206.07 1819.32,1206.07 1819.9,1206.07 1820.49,1206.07 1821.08,1206.07 1821.66,1206.07 1822.25,1206.07 1822.84,1206.07 1823.42,1206.07 1824.01,1206.07 1824.6,1206.07 1825.18,1206.07 1825.77,1206.07 1826.35,1206.07 1826.94,1206.07 1827.53,1206.07 1828.11,1206.07 1828.7,1206.07 1829.29,1206.07 1829.87,1206.07 1830.46,1206.07 1831.05,1206.07 1831.63,1206.07 1832.22,1206.07 1832.81,1206.07 1833.39,1206.07 1833.98,1206.07 1834.56,1206.07 1835.15,1206.07 1835.74,1206.07 1836.32,1206.07 1836.91,1206.07 1837.5,1206.07 1838.08,1206.07 1838.67,1206.07 1839.26,1206.07 1839.84,1206.07 1840.43,1206.07 1841.01,1206.07 1841.6,1206.07 1842.19,1206.07 1842.77,1206.07 1843.36,1206.07 1843.95,1206.07 1844.53,1206.07 1845.12,1206.07 1845.71,1206.07 1846.29,1206.07 1846.88,1206.07 1847.47,1206.07 1848.05,1206.07 1848.64,1206.07 1849.22,1206.07 1849.81,1206.07 1850.4,1206.07 1850.98,1206.07 1851.57,1206.07 1852.16,1206.07 1852.74,1206.07 1853.33,1206.07 1853.92,1206.07 1854.5,1206.07 1855.09,1206.07 1855.68,1206.07 1856.26,1206.07 1856.85,1206.07 1857.43,1206.07 1858.02,1206.07 1858.61,1206.07 1859.19,1206.07 1859.78,1206.07 1860.37,1206.07 1860.95,1206.07 1861.54,1206.07 1862.13,1206.07 1862.71,1206.07 1863.3,1206.07 1863.88,1206.07 1864.47,1206.07 1865.06,1206.07 1865.64,1206.07 1866.23,1206.07 1866.82,1206.07 1867.4,1206.07 1867.99,1206.07 1868.58,1206.07 1869.16,1206.07 1869.75,1206.07 1870.34,1206.07 1870.92,1206.07 1871.51,1206.07 1872.09,1206.07 1872.68,1206.07 1873.27,1206.07 1873.85,1206.07 1874.44,1206.07 1875.03,1206.07 1875.61,1206.07 1876.2,1206.07 1876.79,1206.07 1877.37,1206.07 1877.96,1206.07 1878.55,1206.07 1879.13,1206.07 1879.72,1206.07 1880.3,1206.07 1880.89,1206.07 1881.48,1206.07 1882.06,1206.07 1882.65,1206.07 1883.24,1206.07 1883.82,1206.07 1884.41,1206.07 1885,1206.07 1885.58,1206.07 1886.17,1206.07 1886.76,1206.07 1887.34,1206.07 1887.93,1206.07 1888.51,1206.07 1889.1,1206.07 1889.69,1206.07 1890.27,1206.07 1890.86,1206.07 1891.45,1206.07 1892.03,1206.07 1892.62,1206.07 1893.21,1206.07 1893.79,1206.07 1894.38,1206.07 1894.96,1206.07 1895.55,1206.07 1896.14,1206.07 1896.72,1206.07 1897.31,1206.07 1897.9,1206.07 1898.48,1206.07 1899.07,1206.07 1899.66,1206.07 1900.24,1206.07 1900.83,1206.07 1901.42,1206.07 1902,1206.07 1902.59,1206.07 1903.17,1206.07 1903.76,1206.07 1904.35,1206.07 1904.93,1206.07 1905.52,1206.07 1906.11,1206.07 1906.69,1206.07 1907.28,1206.07 1907.87,1206.07 1908.45,1206.07 1909.04,1206.07 1909.63,1206.07 1910.21,1206.07 1910.8,1206.07 1911.38,1206.07 1911.97,1206.07 1912.56,1206.07 1913.14,1206.07 1913.73,1206.07 1914.32,1206.07 1914.9,1206.07 1915.49,1206.07 1916.08,1206.07 1916.66,1206.07 1917.25,1206.07 1917.83,1206.07 1918.42,1206.07 1919.01,1206.07 1919.59,1206.07 1920.18,1206.07 1920.77,1206.07 1921.35,1206.07 1921.94,1206.07 1922.53,1206.07 1923.11,1206.07 1923.7,1206.07 1924.29,1206.07 1924.87,1206.07 1925.46,1206.07 1926.04,1206.07 1926.63,1206.07 1927.22,1206.07 1927.8,1206.07 1928.39,1206.07 1928.98,1206.07 1929.56,1206.07 1930.15,1206.07 1930.74,1206.07 1931.32,1206.07 1931.91,1206.07 1932.5,1206.07 1933.08,1206.07 1933.67,1206.07 1934.25,1206.07 1934.84,1206.07 1935.43,1206.07 1936.01,1206.07 1936.6,1206.07 1937.19,1206.07 1937.77,1206.07 1938.36,1206.07 1938.95,1206.07 1939.53,1206.07 1940.12,1206.07 1940.71,1206.07 1941.29,1206.07 1941.88,1206.07 1942.46,1206.07 1943.05,1206.07 1943.64,1206.07 1944.22,1206.07 1944.81,1206.07 1945.4,1206.07 1945.98,1206.07 1946.57,1206.07 1947.16,1206.07 1947.74,1206.07 1948.33,1206.07 1948.91,1206.07 1949.5,1206.07 1950.09,1206.07 1950.67,1206.07 1951.26,1206.07 1951.85,1206.07 1952.43,1206.07 1953.02,1206.07 1953.61,1206.07 1954.19,1206.07 1954.78,1206.07 1955.37,1206.07 1955.95,1206.07 1956.54,1206.07 1957.12,1206.07 1957.71,1206.07 1958.3,1206.07 1958.88,1206.07 1959.47,1206.07 1960.06,1206.07 1960.64,1206.07 1961.23,1206.07 1961.82,1206.07 1962.4,1206.07 1962.99,1206.07 1963.58,1206.07 1964.16,1206.07 1964.75,1206.07 1965.33,1206.07 1965.92,1206.07 1966.51,1206.07 1967.09,1206.07 1967.68,1206.07 1968.27,1206.07 1968.85,1206.07 1969.44,1206.07 1970.03,1206.07 1970.61,1206.07 1971.2,1206.07 1971.78,1206.07 1972.37,1206.07 1972.96,1206.07 1973.54,1206.07 1974.13,1206.07 1974.72,1206.07 1975.3,1206.07 1975.89,1206.07 1976.48,1206.07 1977.06,1206.07 1977.65,1206.07 1978.24,1206.07 1978.82,1206.07 1979.41,1206.07 1979.99,1206.07 1980.58,1206.07 1981.17,1206.07 1981.75,1206.07 1982.34,1206.07 1982.93,1206.07 1983.51,1206.07 1984.1,1206.07 1984.69,1206.07 1985.27,1206.07 1985.86,1206.07 1986.45,1206.07 1987.03,1206.07 1987.62,1206.07 1988.2,1206.07 1988.79,1206.07 1989.38,1206.07 1989.96,1206.07 1990.55,1206.07 1991.14,1206.07 1991.72,1206.07 1992.31,1206.07 1992.9,1206.07 1993.48,1206.07 1994.07,1206.07 1994.65,1206.07 1995.24,1206.07 1995.83,1206.07 1996.41,1206.07 1997,1206.07 1997.59,1206.07 1998.17,1206.07 1998.76,1206.07 1999.35,1206.07 1999.93,1206.07 2000.52,1206.07 2001.11,1206.07 2001.69,1206.07 2002.28,1206.07 2002.86,1206.07 2003.45,1206.07 2004.04,1206.07 2004.62,1206.07 2005.21,1206.07 2005.8,1206.07 2006.38,1206.07 2006.97,1206.07 2007.56,1206.07 2008.14,1206.07 2008.73,1206.07 2009.32,1206.07 2009.9,1206.07 2010.49,1206.07 2011.07,1206.07 2011.66,1206.07 2012.25,1206.07 2012.83,1206.07 2013.42,1206.07 2014.01,1206.07 2014.59,1206.07 2015.18,1206.07 2015.77,1206.07 2016.35,1206.07 2016.94,1206.07 2017.53,1206.07 2018.11,1206.07 2018.7,1206.07 2019.28,1206.07 2019.87,1206.07 2020.46,1206.07 2021.04,1206.07 2021.63,1206.07 2022.22,1206.07 2022.8,1206.07 2023.39,1206.07 2023.98,1206.07 2024.56,1206.07 2025.15,1206.07 2025.73,1206.07 2026.32,1206.07 2026.91,1206.07 2027.49,1206.07 2028.08,1206.07 2028.67,1206.07 2029.25,1206.07 2029.84,1206.07 2030.43,1206.07 2031.01,1206.07 2031.6,1206.07 2032.19,1206.07 2032.77,1206.07 2033.36,1206.07 2033.94,1206.07 2034.53,1206.07 2035.12,1206.07 2035.7,1206.07 2036.29,1206.07 2036.88,1206.07 2037.46,1206.07 2038.05,1206.07 2038.64,1206.07 2039.22,1206.07 2039.81,1206.07 2040.4,1206.07 2040.98,1206.07 2041.57,1206.07 2042.15,1206.07 2042.74,1206.07 2043.33,1206.07 2043.91,1206.07 2044.5,1206.07 2045.09,1206.07 2045.67,1206.07 2046.26,1206.07 2046.85,1206.07 2047.43,1206.07 2048.02,1206.07 2048.6,1206.07 2049.19,1206.07 2049.78,1206.07 2050.36,1206.07 2050.95,1206.07 2051.54,1206.07 2052.12,1206.07 2052.71,1206.07 2053.3,1206.07 2053.88,1206.07 2054.47,1206.07 2055.06,1206.07 2055.64,1206.07 2056.23,1206.07 2056.81,1206.07 2057.4,1206.07 2057.99,1206.07 2058.57,1206.07 2059.16,1206.07 2059.75,1206.07 2060.33,1206.07 2060.92,1206.07 2061.51,1206.07 2062.09,1206.07 2062.68,1206.07 2063.27,1206.07 2063.85,1206.07 2064.44,1206.07 2065.02,1206.07 2065.61,1206.07 2066.2,1206.07 2066.78,1206.07 2067.37,1206.07 2067.96,1206.07 2068.54,1206.07 2069.13,1206.07 2069.72,1206.07 2070.3,1206.07 2070.89,1206.07 2071.48,1206.07 2072.06,1206.07 2072.65,1206.07 2073.23,1206.07 2073.82,1206.07 2074.41,1206.07 2074.99,1206.07 2075.58,1206.07 2076.17,1206.07 2076.75,1206.07 2077.34,1206.07 2077.93,1206.07 2078.51,1206.07 2079.1,1206.07 2079.68,1206.07 2080.27,1206.07 2080.86,1206.07 2081.44,1206.07 2082.03,1206.07 2082.62,1206.07 2083.2,1206.07 2083.79,1206.07 2084.38,1206.07 2084.96,1206.07 2085.55,1206.07 2086.14,1206.07 2086.72,1206.07 2087.31,1206.07 2087.89,1206.07 2088.48,1206.07 2089.07,1206.07 2089.65,1206.07 2090.24,1206.07 2090.83,1206.07 2091.41,1206.07 2092,1206.07 2092.59,1206.07 2093.17,1206.07 2093.76,1206.07 2094.35,1206.07 2094.93,1206.07 2095.52,1206.07 2096.1,1206.07 2096.69,1206.07 2097.28,1206.07 2097.86,1206.07 2098.45,1206.07 2099.04,1206.07 2099.62,1206.07 2100.21,1206.07 2100.8,1206.07 2101.38,1206.07 2101.97,1206.07 2102.55,1206.07 2103.14,1206.07 2103.73,1206.07 2104.31,1206.07 2104.9,1206.07 2105.49,1206.07 2106.07,1206.07 2106.66,1206.07 2107.25,1206.07 2107.83,1206.07 2108.42,1206.07 2109.01,1206.07 2109.59,1206.07 2110.18,1206.07 2110.76,1206.07 2111.35,1206.07 2111.94,1206.07 2112.52,1206.07 2113.11,1206.07 2113.7,1206.07 2114.28,1206.07 2114.87,1206.07 2115.46,1206.07 2116.04,1206.07 2116.63,1206.07 2117.22,1206.07 2117.8,1206.07 2118.39,1206.07 2118.97,1206.07 2119.56,1206.07 2120.15,1206.07 2120.73,1206.07 2121.32,1206.07 2121.91,1206.07 2122.49,1206.07 2123.08,1206.07 2123.67,1206.07 2124.25,1206.07 2124.84,1206.07 2125.42,1206.07 2126.01,1206.07 2126.6,1206.07 2127.18,1206.07 2127.77,1206.07 2128.36,1206.07 2128.94,1206.07 2129.53,1206.07 2130.12,1206.07 2130.7,1206.07 2131.29,1206.07 2131.88,1206.07 2132.46,1206.07 2133.05,1206.07 2133.63,1206.07 2134.22,1206.07 2134.81,1206.07 2135.39,1206.07 2135.98,1206.07 2136.57,1206.07 2137.15,1206.07 2137.74,1206.07 2138.33,1206.07 2138.91,1206.07 2139.5,1206.07 2140.09,1206.07 2140.67,1206.07 2141.26,1206.07 2141.84,1206.07 2142.43,1206.07 2143.02,1206.07 2143.6,1206.07 2144.19,1206.07 2144.78,1206.07 2145.36,1206.07 2145.95,1206.07 2146.54,1206.07 2147.12,1206.07 2147.71,1206.07 2148.3,1206.07 2148.88,1206.07 2149.47,1206.07 2150.05,1206.07 2150.64,1206.07 2151.23,1206.07 2151.81,1206.07 2152.4,1206.07 2152.99,1206.07 2153.57,1206.07 2154.16,1206.07 2154.75,1206.07 2155.33,1206.07 2155.92,1206.07 2156.5,1206.07 2157.09,1206.07 2157.68,1206.07 2158.26,1206.07 \"/>\n<path clip-path=\"url(#clip112)\" d=\"M986.025 1205.95 L986.612 1205.95 L987.198 1205.95 L987.785 1205.95 L988.371 1205.95 L988.957 1205.95 L989.544 1205.95 L990.13 1205.95 L990.717 1205.95 L991.303 1205.95 L991.889 1205.95 L992.476 1205.95 L993.062 1205.95 L993.649 1205.95 L994.235 1205.95 L994.822 1205.95 L995.408 1205.95 L995.994 1205.95 L996.581 1205.95 L997.167 1205.95 L997.754 1205.95 L998.34 1205.95 L998.926 1205.95 L999.513 1205.95 L1000.1 1205.95 L1000.69 1205.95 L1001.27 1205.95 L1001.86 1205.95 L1002.44 1205.95 L1003.03 1205.95 L1003.62 1205.95 L1004.2 1205.95 L1004.79 1205.95 L1005.38 1205.95 L1005.96 1205.95 L1006.55 1205.95 L1007.14 1205.95 L1007.72 1205.95 L1008.31 1205.95 L1008.9 1205.95 L1009.48 1205.95 L1010.07 1205.95 L1010.65 1205.95 L1011.24 1205.95 L1011.83 1205.95 L1012.41 1205.95 L1013 1205.95 L1013.59 1205.95 L1014.17 1205.95 L1014.76 1205.95 L1015.35 1205.95 L1015.93 1205.95 L1016.52 1205.95 L1017.11 1205.95 L1017.69 1205.95 L1018.28 1205.95 L1018.86 1205.95 L1019.45 1205.95 L1020.04 1205.95 L1020.62 1205.95 L1021.21 1205.95 L1021.8 1205.95 L1022.38 1205.95 L1022.97 1205.95 L1023.56 1205.95 L1024.14 1205.95 L1024.73 1205.95 L1025.32 1205.95 L1025.9 1205.95 L1026.49 1205.95 L1027.07 1205.95 L1027.66 1205.95 L1028.25 1205.95 L1028.83 1205.95 L1029.42 1205.95 L1030.01 1205.95 L1030.59 1205.95 L1031.18 1205.95 L1031.77 1205.95 L1032.35 1205.95 L1032.94 1205.95 L1033.52 1205.95 L1034.11 1205.95 L1034.7 1205.95 L1035.28 1205.95 L1035.87 1205.95 L1036.46 1205.95 L1037.04 1205.95 L1037.63 1205.95 L1038.22 1205.95 L1038.8 1205.95 L1039.39 1205.95 L1039.98 1205.95 L1040.56 1205.95 L1041.15 1205.95 L1041.73 1205.95 L1042.32 1205.95 L1042.91 1205.95 L1043.49 1205.95 L1044.08 1205.95 L1044.67 1205.95 L1045.25 1205.95 L1045.84 1205.95 L1046.43 1205.95 L1047.01 1205.95 L1047.6 1205.95 L1048.19 1205.95 L1048.77 1205.95 L1049.36 1205.95 L1049.94 1205.95 L1050.53 1205.95 L1051.12 1205.95 L1051.7 1205.95 L1052.29 1205.95 L1052.88 1205.95 L1053.46 1205.95 L1054.05 1205.95 L1054.64 1205.95 L1055.22 1205.95 L1055.81 1205.95 L1056.39 1205.95 L1056.98 1205.95 L1057.57 1205.95 L1058.15 1205.95 L1058.74 1205.95 L1059.33 1205.95 L1059.91 1205.95 L1060.5 1205.95 L1061.09 1205.95 L1061.67 1205.95 L1062.26 1205.95 L1062.85 1205.95 L1063.43 1205.95 L1064.02 1205.95 L1064.6 1205.95 L1065.19 1205.95 L1065.78 1205.95 L1066.36 1205.95 L1066.95 1205.95 L1067.54 1205.95 L1068.12 1205.95 L1068.71 1205.95 L1069.3 1205.95 L1069.88 1205.95 L1070.47 1205.95 L1071.06 1205.95 L1071.64 1205.95 L1072.23 1205.95 L1072.81 1205.95 L1073.4 1205.95 L1073.99 1205.95 L1074.57 1205.95 L1075.16 1205.95 L1075.75 1205.95 L1076.33 1205.95 L1076.92 1205.95 L1077.51 1205.95 L1078.09 1205.95 L1078.68 1205.95 L1079.26 1205.95 L1079.85 1205.95 L1080.44 1205.95 L1081.02 1205.95 L1081.61 1205.95 L1082.2 1205.95 L1082.78 1205.95 L1083.37 1205.95 L1083.96 1205.95 L1084.54 1205.95 L1085.13 1205.95 L1085.72 1205.95 L1086.3 1205.95 L1086.89 1205.95 L1087.47 1205.95 L1088.06 1205.95 L1088.65 1205.95 L1089.23 1205.95 L1089.82 1205.95 L1090.41 1205.95 L1090.99 1205.95 L1091.58 1205.95 L1092.17 1205.95 L1092.75 1205.95 L1093.34 1205.95 L1093.93 1205.95 L1094.51 1205.95 L1095.1 1205.95 L1095.68 1205.95 L1096.27 1205.95 L1096.86 1205.95 L1097.44 1205.95 L1098.03 1205.95 L1098.62 1205.95 L1099.2 1205.95 L1099.79 1205.95 L1100.38 1205.95 L1100.96 1205.95 L1101.55 1205.95 L1102.14 1205.95 L1102.72 1205.95 L1103.31 1205.95 L1103.89 1205.95 L1104.48 1205.95 L1105.07 1205.95 L1105.65 1205.95 L1106.24 1205.95 L1106.83 1205.95 L1107.41 1205.95 L1108 1205.95 L1108.59 1205.95 L1109.17 1205.95 L1109.76 1205.95 L1110.34 1205.95 L1110.93 1205.95 L1111.52 1205.95 L1112.1 1205.95 L1112.69 1205.95 L1113.28 1205.95 L1113.86 1205.95 L1114.45 1205.95 L1115.04 1205.95 L1115.62 1205.95 L1116.21 1205.95 L1116.8 1205.95 L1117.38 1205.95 L1117.97 1205.95 L1118.55 1205.95 L1119.14 1205.95 L1119.73 1205.95 L1120.31 1205.95 L1120.9 1205.95 L1121.49 1205.95 L1122.07 1205.95 L1122.66 1205.95 L1123.25 1205.95 L1123.83 1205.95 L1124.42 1205.95 L1125.01 1205.95 L1125.59 1205.95 L1126.18 1205.95 L1126.76 1205.95 L1127.35 1205.95 L1127.94 1205.95 L1128.52 1205.95 L1129.11 1205.95 L1129.7 1205.95 L1130.28 1205.95 L1130.87 1205.95 L1131.46 1205.95 L1132.04 1205.95 L1132.63 1205.95 L1133.21 1205.95 L1133.8 1205.95 L1134.39 1205.95 L1134.97 1205.95 L1135.56 1205.95 L1136.15 1205.95 L1136.73 1205.95 L1137.32 1205.95 L1137.91 1205.95 L1138.49 1205.95 L1139.08 1205.95 L1139.67 1205.95 L1140.25 1205.95 L1140.84 1205.95 L1141.42 1205.95 L1142.01 1205.95 L1142.6 1205.95 L1143.18 1205.95 L1143.77 1205.95 L1144.36 1205.95 L1144.94 1205.95 L1145.53 1205.95 L1146.12 1205.95 L1146.7 1205.95 L1147.29 1205.95 L1147.88 1205.95 L1148.46 1205.95 L1149.05 1205.95 L1149.63 1205.95 L1150.22 1205.95 L1150.81 1205.95 L1151.39 1205.95 L1151.98 1205.95 L1152.57 1205.95 L1153.15 1205.95 L1153.74 1205.95 L1154.33 1205.95 L1154.91 1205.95 L1155.5 1205.95 L1156.09 1205.95 L1156.67 1205.95 L1157.26 1205.95 L1157.84 1205.95 L1158.43 1205.95 L1159.02 1205.95 L1159.6 1205.95 L1160.19 1205.95 L1160.78 1205.95 L1161.36 1205.95 L1161.95 1205.95 L1162.54 1205.95 L1163.12 1205.95 L1163.71 1205.95 L1164.29 1205.95 L1164.88 1205.95 L1165.47 1205.95 L1166.05 1205.95 L1166.64 1205.95 L1167.23 1205.95 L1167.81 1205.95 L1168.4 1205.95 L1168.99 1205.95 L1169.57 1205.95 L1170.16 1205.95 L1170.75 1205.95 L1171.33 1205.95 L1171.92 1205.95 L1172.5 1205.95 L1173.09 1205.95 L1173.68 1205.95 L1174.26 1205.95 L1174.85 1205.95 L1175.44 1205.95 L1176.02 1205.95 L1176.61 1205.95 L1177.2 1205.95 L1177.78 1205.95 L1178.37 1205.95 L1178.96 1205.95 L1179.54 1205.95 L1180.13 1205.95 L1180.71 1205.95 L1181.3 1205.95 L1181.89 1205.95 L1182.47 1205.95 L1183.06 1205.95 L1183.65 1205.95 L1184.23 1205.95 L1184.82 1205.95 L1185.41 1205.95 L1185.99 1205.95 L1186.58 1205.95 L1187.16 1205.95 L1187.75 1205.95 L1188.34 1205.95 L1188.92 1205.95 L1189.51 1205.95 L1190.1 1205.95 L1190.68 1205.95 L1191.27 1205.95 L1191.86 1205.95 L1192.44 1205.95 L1193.03 1205.95 L1193.62 1205.95 L1194.2 1205.95 L1194.79 1205.95 L1195.37 1205.95 L1195.96 1205.95 L1196.55 1205.95 L1197.13 1205.95 L1197.72 1205.95 L1198.31 1205.95 L1198.89 1205.95 L1199.48 1205.95 L1200.07 1205.95 L1200.65 1205.95 L1201.24 1205.95 L1201.83 1205.95 L1202.41 1205.95 L1203 1205.95 L1203.58 1205.95 L1204.17 1205.95 L1204.76 1205.95 L1205.34 1205.95 L1205.93 1205.95 L1206.52 1205.95 L1207.1 1205.95 L1207.69 1205.95 L1208.28 1205.95 L1208.86 1205.95 L1209.45 1205.95 L1210.03 1205.95 L1210.62 1205.95 L1211.21 1205.95 L1211.79 1205.95 L1212.38 1205.95 L1212.97 1205.95 L1213.55 1205.95 L1214.14 1205.95 L1214.73 1205.95 L1215.31 1205.95 L1215.9 1205.95 L1216.49 1205.95 L1217.07 1205.95 L1217.66 1205.95 L1218.24 1205.95 L1218.83 1205.95 L1219.42 1205.95 L1220 1205.95 L1220.59 1205.95 L1221.18 1205.95 L1221.76 1205.95 L1222.35 1205.95 L1222.94 1205.95 L1223.52 1205.95 L1224.11 1205.95 L1224.7 1205.95 L1225.28 1205.95 L1225.87 1205.95 L1226.45 1205.95 L1227.04 1205.95 L1227.63 1205.95 L1228.21 1205.95 L1228.8 1205.95 L1229.39 1205.95 L1229.97 1205.95 L1230.56 1205.95 L1231.15 1205.95 L1231.73 1205.95 L1232.32 1205.95 L1232.91 1205.95 L1233.49 1205.95 L1234.08 1205.95 L1234.66 1205.95 L1235.25 1205.95 L1235.84 1205.95 L1236.42 1205.95 L1237.01 1205.95 L1237.6 1205.95 L1238.18 1205.95 L1238.77 1205.95 L1239.36 1205.95 L1239.94 1205.95 L1240.53 1205.95 L1241.11 1205.95 L1241.7 1205.95 L1242.29 1205.95 L1242.87 1205.95 L1243.46 1205.95 L1244.05 1205.95 L1244.63 1205.95 L1245.22 1205.95 L1245.81 1205.95 L1246.39 1205.95 L1246.98 1205.95 L1247.57 1205.95 L1248.15 1205.95 L1248.74 1205.95 L1249.32 1205.95 L1249.91 1205.95 L1250.5 1205.95 L1251.08 1205.95 L1251.67 1205.95 L1252.26 1205.95 L1252.84 1205.95 L1253.43 1205.95 L1254.02 1205.95 L1254.6 1205.95 L1255.19 1205.95 L1255.78 1205.95 L1256.36 1205.95 L1256.95 1205.95 L1257.53 1205.95 L1258.12 1205.95 L1258.71 1205.95 L1259.29 1205.95 L1259.88 1205.95 L1260.47 1205.95 L1261.05 1205.95 L1261.64 1205.95 L1262.23 1205.95 L1262.81 1205.95 L1263.4 1205.95 L1263.98 1205.95 L1264.57 1205.95 L1265.16 1205.95 L1265.74 1205.95 L1266.33 1205.95 L1266.92 1205.95 L1267.5 1205.95 L1268.09 1205.95 L1268.68 1205.95 L1269.26 1205.95 L1269.85 1205.95 L1270.44 1205.95 L1271.02 1205.95 L1271.61 1205.95 L1272.19 1205.95 L1272.78 1205.95 L1273.37 1205.95 L1273.95 1205.95 L1274.54 1205.95 L1275.13 1205.95 L1275.71 1205.95 L1276.3 1205.95 L1276.89 1205.95 L1277.47 1205.95 L1278.06 1205.95 L1278.65 1205.95 L1279.23 1205.95 L1279.82 1205.95 L1280.4 1205.95 L1280.99 1205.95 L1281.58 1205.95 L1282.16 1205.95 L1282.75 1205.95 L1283.34 1205.95 L1283.92 1205.95 L1284.51 1205.95 L1285.1 1205.95 L1285.68 1205.95 L1286.27 1205.95 L1286.86 1205.95 L1287.44 1205.95 L1288.03 1205.95 L1288.61 1205.95 L1289.2 1205.95 L1289.79 1205.95 L1290.37 1205.95 L1290.96 1205.95 L1291.55 1205.95 L1292.13 1205.95 L1292.72 1205.95 L1293.31 1205.95 L1293.89 1205.95 L1294.48 1205.95 L1295.06 1205.95 L1295.65 1205.95 L1296.24 1205.95 L1296.82 1205.95 L1297.41 1205.95 L1298 1205.95 L1298.58 1205.95 L1299.17 1205.95 L1299.76 1205.95 L1300.34 1205.95 L1300.93 1205.95 L1301.52 1205.95 L1302.1 1205.95 L1302.69 1205.95 L1303.27 1205.95 L1303.86 1205.95 L1304.45 1205.95 L1305.03 1205.95 L1305.62 1205.95 L1306.21 1205.95 L1306.79 1205.95 L1307.38 1205.95 L1307.97 1205.95 L1308.55 1205.95 L1309.14 1205.95 L1309.73 1205.95 L1310.31 1205.95 L1310.9 1205.95 L1311.48 1205.95 L1312.07 1205.95 L1312.66 1205.95 L1313.24 1205.95 L1313.83 1205.95 L1314.42 1205.95 L1315 1205.95 L1315.59 1205.95 L1316.18 1205.95 L1316.76 1205.95 L1317.35 1205.95 L1317.93 1205.95 L1318.52 1205.95 L1319.11 1205.95 L1319.69 1205.95 L1320.28 1205.95 L1320.87 1205.95 L1321.45 1205.95 L1322.04 1205.95 L1322.63 1205.95 L1323.21 1205.95 L1323.8 1205.95 L1324.39 1205.95 L1324.97 1205.95 L1325.56 1205.95 L1326.14 1205.95 L1326.73 1205.95 L1327.32 1205.95 L1327.9 1205.95 L1328.49 1205.95 L1329.08 1205.95 L1329.66 1205.95 L1330.25 1205.95 L1330.84 1205.95 L1331.42 1205.95 L1332.01 1205.95 L1332.6 1205.95 L1333.18 1205.95 L1333.77 1205.95 L1334.35 1205.95 L1334.94 1205.95 L1335.53 1205.95 L1336.11 1205.95 L1336.7 1205.95 L1337.29 1205.95 L1337.87 1205.95 L1338.46 1205.95 L1339.05 1205.95 L1339.63 1205.95 L1340.22 1205.95 L1340.8 1205.95 L1341.39 1205.95 L1341.98 1205.95 L1342.56 1205.95 L1343.15 1205.95 L1343.74 1205.95 L1344.32 1205.95 L1344.91 1205.95 L1345.5 1205.95 L1346.08 1205.95 L1346.67 1205.95 L1347.26 1205.95 L1347.84 1205.95 L1348.43 1205.95 L1349.01 1205.95 L1349.6 1205.95 L1350.19 1205.95 L1350.77 1205.95 L1351.36 1205.95 L1351.95 1205.95 L1352.53 1205.95 L1353.12 1205.95 L1353.71 1205.95 L1354.29 1205.95 L1354.88 1205.95 L1355.47 1205.95 L1356.05 1205.95 L1356.64 1205.95 L1357.22 1205.95 L1357.81 1205.95 L1358.4 1205.95 L1358.98 1205.95 L1359.57 1205.95 L1360.16 1205.95 L1360.74 1205.95 L1361.33 1205.95 L1361.92 1205.95 L1362.5 1205.95 L1363.09 1205.95 L1363.68 1205.95 L1364.26 1205.95 L1364.85 1205.95 L1365.43 1205.95 L1366.02 1205.95 L1366.61 1205.95 L1367.19 1205.95 L1367.78 1205.95 L1368.37 1205.95 L1368.95 1205.95 L1369.54 1205.95 L1370.13 1205.95 L1370.71 1205.95 L1371.3 1205.95 L1371.88 1205.95 L1372.47 1205.95 L1373.06 1205.95 L1373.64 1205.95 L1374.23 1205.95 L1374.82 1205.95 L1375.4 1205.95 L1375.99 1205.95 L1376.58 1205.95 L1377.16 1205.95 L1377.75 1205.95 L1378.34 1205.95 L1378.92 1205.95 L1379.51 1205.95 L1380.09 1205.95 L1380.68 1205.95 L1381.27 1205.95 L1381.85 1205.95 L1382.44 1205.95 L1383.03 1205.95 L1383.61 1205.95 L1384.2 1205.95 L1384.79 1205.95 L1385.37 1205.95 L1385.96 1205.95 L1386.55 1205.95 L1387.13 1205.95 L1387.72 1205.95 L1388.3 1205.95 L1388.89 1205.95 L1389.48 1205.95 L1390.06 1205.95 L1390.65 1205.95 L1391.24 1205.95 L1391.82 1205.95 L1392.41 1205.95 L1393 1205.95 L1393.58 1205.95 L1394.17 1205.95 L1394.75 1205.95 L1395.34 1205.95 L1395.93 1205.95 L1396.51 1205.95 L1397.1 1205.95 L1397.69 1205.95 L1398.27 1205.95 L1398.86 1205.95 L1399.45 1205.95 L1400.03 1205.95 L1400.62 1205.95 L1401.21 1205.95 L1401.79 1205.95 L1402.38 1205.95 L1402.96 1205.95 L1403.55 1205.95 L1404.14 1205.95 L1404.72 1205.95 L1405.31 1205.95 L1405.9 1205.95 L1406.48 1205.95 L1407.07 1205.95 L1407.66 1205.95 L1408.24 1205.95 L1408.83 1205.95 L1409.42 1205.95 L1410 1205.95 L1410.59 1205.95 L1411.17 1205.95 L1411.76 1205.95 L1412.35 1205.95 L1412.93 1205.95 L1413.52 1205.95 L1414.11 1205.95 L1414.69 1205.95 L1415.28 1205.95 L1415.87 1205.95 L1416.45 1205.95 L1417.04 1205.95 L1417.63 1205.95 L1418.21 1205.95 L1418.8 1205.95 L1419.38 1205.95 L1419.97 1205.95 L1420.56 1205.95 L1421.14 1205.95 L1421.73 1205.95 L1422.32 1205.95 L1422.9 1205.95 L1423.49 1205.95 L1424.08 1205.95 L1424.66 1205.95 L1425.25 1205.95 L1425.83 1205.95 L1426.42 1205.95 L1427.01 1205.95 L1427.59 1205.95 L1428.18 1205.95 L1428.77 1205.95 L1429.35 1205.95 L1429.94 1205.95 L1430.53 1205.95 L1431.11 1205.95 L1431.7 1205.95 L1432.29 1205.95 L1432.87 1205.95 L1433.46 1205.95 L1434.04 1205.95 L1434.63 1205.95 L1435.22 1205.95 L1435.8 1205.95 L1436.39 1205.95 L1436.98 1205.95 L1437.56 1205.95 L1438.15 1205.95 L1438.74 1205.95 L1439.32 1205.95 L1439.91 1205.95 L1440.5 1205.95 L1441.08 1205.95 L1441.67 1205.95 L1442.25 1205.95 L1442.84 1205.95 L1443.43 1205.95 L1444.01 1205.95 L1444.6 1205.95 L1445.19 1205.95 L1445.77 1205.95 L1446.36 1205.95 L1446.95 1205.95 L1447.53 1205.95 L1448.12 1205.95 L1448.7 1205.95 L1449.29 1205.95 L1449.88 1205.95 L1450.46 1205.95 L1451.05 1205.95 L1451.64 1205.95 L1452.22 1205.95 L1452.81 1205.95 L1453.4 1205.95 L1453.98 1205.95 L1454.57 1205.95 L1455.16 1205.95 L1455.74 1205.95 L1456.33 1205.95 L1456.91 1205.95 L1457.5 1205.95 L1458.09 1205.95 L1458.67 1205.95 L1459.26 1205.95 L1459.85 1205.95 L1460.43 1205.95 L1461.02 1205.95 L1461.61 1205.95 L1462.19 1205.95 L1462.78 1205.95 L1463.37 1205.95 L1463.95 1205.95 L1464.54 1205.95 L1465.12 1205.95 L1465.71 1205.95 L1466.3 1205.95 L1466.88 1205.95 L1467.47 1205.95 L1468.06 1205.95 L1468.64 1205.95 L1469.23 1205.95 L1469.82 1205.95 L1470.4 1205.95 L1470.99 1205.95 L1471.57 1205.95 L1472.16 1205.95 L1472.75 1205.95 L1473.33 1205.95 L1473.92 1205.95 L1474.51 1205.95 L1475.09 1205.95 L1475.68 1205.95 L1476.27 1205.95 L1476.85 1205.95 L1477.44 1205.95 L1478.03 1205.95 L1478.61 1205.95 L1479.2 1205.95 L1479.78 1205.95 L1480.37 1205.95 L1480.96 1205.95 L1481.54 1205.95 L1482.13 1205.95 L1482.72 1205.95 L1483.3 1205.95 L1483.89 1205.95 L1484.48 1205.95 L1485.06 1205.95 L1485.65 1205.95 L1486.24 1205.95 L1486.82 1205.95 L1487.41 1205.95 L1487.99 1205.95 L1488.58 1205.95 L1489.17 1205.95 L1489.75 1205.95 L1490.34 1205.95 L1490.93 1205.95 L1491.51 1205.95 L1492.1 1205.95 L1492.69 1205.95 L1493.27 1205.95 L1493.86 1205.95 L1494.45 1205.95 L1495.03 1205.95 L1495.62 1205.95 L1496.2 1205.95 L1496.79 1205.95 L1497.38 1205.95 L1497.96 1205.95 L1498.55 1205.95 L1499.14 1205.95 L1499.72 1205.95 L1500.31 1205.95 L1500.9 1205.95 L1501.48 1205.95 L1502.07 1205.95 L1502.65 1205.95 L1503.24 1205.95 L1503.83 1205.95 L1504.41 1205.95 L1505 1205.95 L1505.59 1205.95 L1506.17 1205.95 L1506.76 1205.95 L1507.35 1205.95 L1507.93 1205.95 L1508.52 1205.95 L1509.11 1205.95 L1509.69 1205.95 L1510.28 1205.95 L1510.86 1205.95 L1511.45 1205.95 L1512.04 1205.95 L1512.62 1205.95 L1513.21 1205.95 L1513.8 1205.95 L1514.38 1205.95 L1514.97 1205.95 L1515.56 1205.95 L1516.14 1205.95 L1516.73 1205.95 L1517.32 1205.95 L1517.9 1205.95 L1518.49 1205.95 L1519.07 1205.95 L1519.66 1205.95 L1520.25 1205.95 L1520.83 1205.95 L1521.42 1205.95 L1522.01 1205.95 L1522.59 1205.95 L1523.18 1205.95 L1523.77 1205.95 L1524.35 1205.95 L1524.94 1205.95 L1525.52 1205.95 L1526.11 1205.95 L1526.7 1205.95 L1527.28 1205.95 L1527.87 1205.95 L1528.46 1205.95 L1529.04 1205.95 L1529.63 1205.95 L1530.22 1205.95 L1530.8 1205.95 L1531.39 1205.95 L1531.98 1205.95 L1532.56 1205.95 L1533.15 1205.95 L1533.73 1205.95 L1534.32 1205.95 L1534.91 1205.95 L1535.49 1205.95 L1536.08 1205.95 L1536.67 1205.95 L1537.25 1205.95 L1537.84 1205.95 L1538.43 1205.95 L1539.01 1205.95 L1539.6 1205.95 L1540.19 1205.95 L1540.77 1205.95 L1541.36 1205.95 L1541.94 1205.95 L1542.53 1205.95 L1543.12 1205.95 L1543.7 1205.95 L1544.29 1205.95 L1544.88 1205.95 L1545.46 1205.95 L1546.05 1205.95 L1546.64 1205.95 L1547.22 1205.95 L1547.81 1205.95 L1548.4 1205.95 L1548.98 1205.95 L1549.57 1205.95 L1550.15 1205.95 L1550.74 1205.95 L1551.33 1205.95 L1551.91 1205.95 L1552.5 1205.95 L1553.09 1205.95 L1553.67 1205.95 L1554.26 1205.95 L1554.85 1205.95 L1555.43 1205.95 L1556.02 1205.95 L1556.6 1205.95 L1557.19 1205.95 L1557.78 1205.95 L1558.36 1205.95 L1558.95 1205.95 L1559.54 1205.95 L1560.12 1205.95 L1560.71 1205.95 L1561.3 1205.95 L1561.88 1205.95 L1562.47 1205.95 L1563.06 1205.95 L1563.64 1205.95 L1564.23 1205.95 L1564.81 1205.95 L1565.4 1205.95 L1565.99 1205.95 L1566.57 1205.95 L1567.16 1205.95 L1567.75 1205.95 L1568.33 1205.95 L1568.92 1205.95 L1569.51 1205.95 L1570.09 1205.95 L1570.68 1205.95 L1571.27 1205.95 L1571.85 1205.95 L1572.44 1205.95 L1573.02 1205.95 L1573.61 1205.95 L1574.2 1205.95 L1574.78 1205.95 L1575.37 1205.95 L1575.96 1205.95 L1576.54 1205.95 L1577.13 1205.95 L1577.72 1205.95 L1578.3 1205.95 L1578.89 1205.95 L1579.47 1205.95 L1580.06 1205.95 L1580.65 1205.95 L1581.23 1205.95 L1581.82 1205.95 L1582.41 1205.95 L1582.99 1205.95 L1583.58 1205.95 L1584.17 1205.95 L1584.75 1205.95 L1585.34 1205.95 L1585.93 1205.95 L1586.51 1205.95 L1587.1 1205.95 L1587.68 1205.95 L1588.27 1205.95 L1588.86 1205.95 L1589.44 1205.95 L1590.03 1205.95 L1590.62 1205.95 L1591.2 1205.95 L1591.79 1205.95 L1592.38 1205.95 L1592.96 1205.95 L1593.55 1205.95 L1594.14 1205.95 L1594.72 1205.95 L1595.31 1205.95 L1595.89 1205.95 L1596.48 1205.95 L1597.07 1205.95 L1597.65 1205.95 L1598.24 1205.95 L1598.83 1205.95 L1599.41 1205.95 L1600 1205.95 L1600.59 1205.95 L1601.17 1205.95 L1601.76 1205.95 L1602.34 1205.95 L1602.93 1205.95 L1603.52 1205.95 L1604.1 1205.95 L1604.69 1205.95 L1605.28 1205.95 L1605.86 1205.95 L1606.45 1205.95 L1607.04 1205.95 L1607.62 1205.95 L1608.21 1205.95 L1608.8 1205.95 L1609.38 1205.95 L1609.97 1205.95 L1610.55 1205.95 L1611.14 1205.95 L1611.73 1205.95 L1612.31 1205.95 L1612.9 1205.95 L1613.49 1205.95 L1614.07 1205.95 L1614.66 1205.95 L1615.25 1205.95 L1615.83 1205.95 L1616.42 1205.95 L1617.01 1205.95 L1617.59 1205.95 L1618.18 1205.95 L1618.76 1205.95 L1619.35 1205.95 L1619.94 1205.95 L1620.52 1205.95 L1621.11 1205.95 L1621.7 1205.95 L1622.28 1205.95 L1622.87 1205.95 L1623.46 1205.95 L1624.04 1205.95 L1624.63 1205.95 L1625.22 1205.95 L1625.8 1205.95 L1626.39 1205.95 L1626.97 1205.95 L1627.56 1205.95 L1628.15 1205.95 L1628.73 1205.95 L1629.32 1205.95 L1629.91 1205.95 L1630.49 1205.95 L1631.08 1205.95 L1631.67 1205.95 L1632.25 1205.95 L1632.84 1205.95 L1633.42 1205.95 L1634.01 1205.95 L1634.6 1205.95 L1635.18 1205.95 L1635.77 1205.95 L1636.36 1205.95 L1636.94 1205.95 L1637.53 1205.95 L1638.12 1205.95 L1638.7 1205.95 L1639.29 1205.95 L1639.88 1205.95 L1640.46 1205.95 L1641.05 1205.95 L1641.63 1205.95 L1642.22 1205.95 L1642.81 1205.95 L1643.39 1205.95 L1643.98 1205.95 L1644.57 1205.95 L1645.15 1205.95 L1645.74 1205.95 L1646.33 1205.95 L1646.91 1205.95 L1647.5 1205.95 L1648.09 1205.95 L1648.67 1205.95 L1649.26 1205.95 L1649.84 1205.95 L1650.43 1205.95 L1651.02 1205.95 L1651.6 1205.95 L1652.19 1205.95 L1652.78 1205.95 L1653.36 1205.95 L1653.95 1205.95 L1654.54 1205.95 L1655.12 1205.95 L1655.71 1205.95 L1656.29 1205.95 L1656.88 1205.95 L1657.47 1205.95 L1658.05 1205.95 L1658.64 1205.95 L1659.23 1205.95 L1659.81 1205.95 L1660.4 1205.95 L1660.99 1205.95 L1661.57 1205.95 L1662.16 1205.95 L1662.75 1205.95 L1663.33 1205.95 L1663.92 1205.95 L1664.5 1205.95 L1665.09 1205.95 L1665.68 1205.95 L1666.26 1205.95 L1666.85 1205.95 L1667.44 1205.95 L1668.02 1205.95 L1668.61 1205.95 L1669.2 1205.95 L1669.78 1205.95 L1670.37 1205.95 L1670.96 1205.95 L1671.54 1205.95 L1672.13 1205.95 L1672.71 1205.95 L1673.3 1205.95 L1673.89 1205.95 L1674.47 1205.95 L1675.06 1205.95 L1675.65 1205.95 L1676.23 1205.95 L1676.82 1205.95 L1677.41 1205.95 L1677.99 1205.95 L1678.58 1205.95 L1679.17 1205.95 L1679.75 1205.95 L1680.34 1205.95 L1680.92 1205.95 L1681.51 1205.95 L1682.1 1205.95 L1682.68 1205.95 L1683.27 1205.95 L1683.86 1205.95 L1684.44 1205.95 L1685.03 1205.95 L1685.62 1205.95 L1686.2 1205.95 L1686.79 1205.95 L1687.37 1205.95 L1687.96 1205.95 L1688.55 1205.95 L1689.13 1205.95 L1689.72 1205.95 L1690.31 1205.95 L1690.89 1205.95 L1691.48 1205.95 L1692.07 1205.95 L1692.65 1205.95 L1693.24 1205.95 L1693.83 1205.95 L1694.41 1205.95 L1695 1205.95 L1695.58 1205.95 L1696.17 1205.95 L1696.76 1205.95 L1697.34 1205.95 L1697.93 1205.95 L1698.52 1205.95 L1699.1 1205.95 L1699.69 1205.95 L1700.28 1205.95 L1700.86 1205.95 L1701.45 1205.95 L1702.04 1205.95 L1702.62 1205.95 L1703.21 1205.95 L1703.79 1205.95 L1704.38 1205.95 L1704.97 1205.95 L1705.55 1205.95 L1706.14 1205.95 L1706.73 1205.95 L1707.31 1205.95 L1707.9 1205.95 L1708.49 1205.95 L1709.07 1205.95 L1709.66 1205.95 L1710.24 1205.95 L1710.83 1205.95 L1711.42 1205.95 L1712 1205.95 L1712.59 1205.95 L1713.18 1205.95 L1713.76 1205.95 L1714.35 1205.95 L1714.94 1205.95 L1715.52 1205.95 L1716.11 1205.95 L1716.7 1205.95 L1717.28 1205.95 L1717.87 1205.95 L1718.45 1205.95 L1719.04 1205.95 L1719.63 1205.95 L1720.21 1205.95 L1720.8 1205.95 L1721.39 1205.95 L1721.97 1205.95 L1722.56 1205.95 L1723.15 1205.95 L1723.73 1205.95 L1724.32 1205.95 L1724.91 1205.95 L1725.49 1205.95 L1726.08 1205.95 L1726.66 1205.95 L1727.25 1205.95 L1727.84 1205.95 L1728.42 1205.95 L1729.01 1205.95 L1729.6 1205.95 L1730.18 1205.95 L1730.77 1205.95 L1731.36 1205.95 L1731.94 1205.95 L1732.53 1205.95 L1733.11 1205.95 L1733.7 1205.95 L1734.29 1205.95 L1734.87 1205.95 L1735.46 1205.95 L1736.05 1205.95 L1736.63 1205.95 L1737.22 1205.95 L1737.81 1205.95 L1738.39 1205.95 L1738.98 1205.95 L1739.57 1205.95 L1740.15 1205.95 L1740.74 1205.95 L1741.32 1205.95 L1741.91 1205.95 L1742.5 1205.95 L1743.08 1205.95 L1743.67 1205.95 L1744.26 1205.95 L1744.84 1205.95 L1745.43 1205.95 L1746.02 1205.95 L1746.6 1205.95 L1747.19 1205.95 L1747.78 1205.95 L1748.36 1205.95 L1748.95 1205.95 L1749.53 1205.95 L1750.12 1205.95 L1750.71 1205.95 L1751.29 1205.95 L1751.88 1205.95 L1752.47 1205.95 L1753.05 1205.95 L1753.64 1205.95 L1754.23 1205.95 L1754.81 1205.95 L1755.4 1205.95 L1755.99 1205.95 L1756.57 1205.95 L1757.16 1205.95 L1757.74 1205.95 L1758.33 1205.95 L1758.92 1205.95 L1759.5 1205.95 L1760.09 1205.95 L1760.68 1205.95 L1761.26 1205.95 L1761.85 1205.95 L1762.44 1205.95 L1763.02 1205.95 L1763.61 1205.95 L1764.19 1205.95 L1764.78 1205.95 L1765.37 1205.95 L1765.95 1205.95 L1766.54 1205.95 L1767.13 1205.95 L1767.71 1205.95 L1768.3 1205.95 L1768.89 1205.95 L1769.47 1205.95 L1770.06 1205.95 L1770.65 1205.95 L1771.23 1205.95 L1771.82 1205.95 L1772.4 1205.95 L1772.99 1205.95 L1773.58 1205.95 L1774.16 1205.95 L1774.75 1205.95 L1775.34 1205.95 L1775.92 1205.95 L1776.51 1205.95 L1777.1 1205.95 L1777.68 1205.95 L1778.27 1205.95 L1778.86 1205.95 L1779.44 1205.95 L1780.03 1205.95 L1780.61 1205.95 L1781.2 1205.95 L1781.79 1205.95 L1782.37 1205.95 L1782.96 1205.95 L1783.55 1205.95 L1784.13 1205.95 L1784.72 1205.95 L1785.31 1205.95 L1785.89 1205.95 L1786.48 1205.95 L1787.06 1205.95 L1787.65 1205.95 L1788.24 1205.95 L1788.82 1205.95 L1789.41 1205.95 L1790 1205.95 L1790.58 1205.95 L1791.17 1205.95 L1791.76 1205.95 L1792.34 1205.95 L1792.93 1205.95 L1793.52 1205.95 L1794.1 1205.95 L1794.69 1205.95 L1795.27 1205.95 L1795.86 1205.95 L1796.45 1205.95 L1797.03 1205.95 L1797.62 1205.95 L1798.21 1205.95 L1798.79 1205.95 L1799.38 1205.95 L1799.97 1205.95 L1800.55 1205.95 L1801.14 1205.95 L1801.73 1205.95 L1802.31 1205.95 L1802.9 1205.95 L1803.48 1205.95 L1804.07 1205.95 L1804.66 1205.95 L1805.24 1205.95 L1805.83 1205.95 L1806.42 1205.95 L1807 1205.95 L1807.59 1205.95 L1808.18 1205.95 L1808.76 1205.95 L1809.35 1205.95 L1809.94 1205.95 L1810.52 1205.95 L1811.11 1205.95 L1811.69 1205.95 L1812.28 1205.95 L1812.87 1205.95 L1813.45 1205.95 L1814.04 1205.95 L1814.63 1205.95 L1815.21 1205.95 L1815.8 1205.95 L1816.39 1205.95 L1816.97 1205.95 L1817.56 1205.95 L1818.14 1205.95 L1818.73 1205.95 L1819.32 1205.95 L1819.9 1205.95 L1820.49 1205.95 L1821.08 1205.95 L1821.66 1205.95 L1822.25 1205.95 L1822.84 1205.95 L1823.42 1205.95 L1824.01 1205.95 L1824.6 1205.95 L1825.18 1205.95 L1825.77 1205.95 L1826.35 1205.95 L1826.94 1205.95 L1827.53 1205.95 L1828.11 1205.95 L1828.7 1205.95 L1829.29 1205.95 L1829.87 1205.95 L1830.46 1205.95 L1831.05 1205.95 L1831.63 1205.95 L1832.22 1205.95 L1832.81 1205.95 L1833.39 1205.95 L1833.98 1205.95 L1834.56 1205.95 L1835.15 1205.95 L1835.74 1205.95 L1836.32 1205.95 L1836.91 1205.95 L1837.5 1205.95 L1838.08 1205.95 L1838.67 1205.95 L1839.26 1205.95 L1839.84 1205.95 L1840.43 1205.95 L1841.01 1205.95 L1841.6 1205.95 L1842.19 1205.95 L1842.77 1205.95 L1843.36 1205.95 L1843.95 1205.95 L1844.53 1205.95 L1845.12 1205.95 L1845.71 1205.95 L1846.29 1205.95 L1846.88 1205.95 L1847.47 1205.95 L1848.05 1205.95 L1848.64 1205.95 L1849.22 1205.95 L1849.81 1205.95 L1850.4 1205.95 L1850.98 1205.95 L1851.57 1205.95 L1852.16 1205.95 L1852.74 1205.95 L1853.33 1205.95 L1853.92 1205.95 L1854.5 1205.95 L1855.09 1205.95 L1855.68 1205.95 L1856.26 1205.95 L1856.85 1205.95 L1857.43 1205.95 L1858.02 1205.95 L1858.61 1205.95 L1859.19 1205.95 L1859.78 1205.95 L1860.37 1205.95 L1860.95 1205.95 L1861.54 1205.95 L1862.13 1205.95 L1862.71 1205.95 L1863.3 1205.95 L1863.88 1205.95 L1864.47 1205.95 L1865.06 1205.95 L1865.64 1205.95 L1866.23 1205.95 L1866.82 1205.95 L1867.4 1205.95 L1867.99 1205.95 L1868.58 1205.95 L1869.16 1205.95 L1869.75 1205.95 L1870.34 1205.95 L1870.92 1205.95 L1871.51 1205.95 L1872.09 1205.95 L1872.68 1205.95 L1873.27 1205.95 L1873.85 1205.95 L1874.44 1205.95 L1875.03 1205.95 L1875.61 1205.95 L1876.2 1205.95 L1876.79 1205.95 L1877.37 1205.95 L1877.96 1205.95 L1878.55 1205.95 L1879.13 1205.95 L1879.72 1205.95 L1880.3 1205.95 L1880.89 1205.95 L1881.48 1205.95 L1882.06 1205.95 L1882.65 1205.95 L1883.24 1205.95 L1883.82 1205.95 L1884.41 1205.95 L1885 1205.95 L1885.58 1205.95 L1886.17 1205.95 L1886.76 1205.95 L1887.34 1205.95 L1887.93 1205.95 L1888.51 1205.95 L1889.1 1205.95 L1889.69 1205.95 L1890.27 1205.95 L1890.86 1205.95 L1891.45 1205.95 L1892.03 1205.95 L1892.62 1205.95 L1893.21 1205.95 L1893.79 1205.95 L1894.38 1205.95 L1894.96 1205.95 L1895.55 1205.95 L1896.14 1205.95 L1896.72 1205.95 L1897.31 1205.95 L1897.9 1205.95 L1898.48 1205.95 L1899.07 1205.95 L1899.66 1205.95 L1900.24 1205.95 L1900.83 1205.95 L1901.42 1205.95 L1902 1205.95 L1902.59 1205.95 L1903.17 1205.95 L1903.76 1205.95 L1904.35 1205.95 L1904.93 1205.95 L1905.52 1205.95 L1906.11 1205.95 L1906.69 1205.95 L1907.28 1205.95 L1907.87 1205.95 L1908.45 1205.95 L1909.04 1205.95 L1909.63 1205.95 L1910.21 1205.95 L1910.8 1205.95 L1911.38 1205.95 L1911.97 1205.95 L1912.56 1205.95 L1913.14 1205.95 L1913.73 1205.95 L1914.32 1205.95 L1914.9 1205.95 L1915.49 1205.95 L1916.08 1205.95 L1916.66 1205.95 L1917.25 1205.95 L1917.83 1205.95 L1918.42 1205.95 L1919.01 1205.95 L1919.59 1205.95 L1920.18 1205.95 L1920.77 1205.95 L1921.35 1205.95 L1921.94 1205.95 L1922.53 1205.95 L1923.11 1205.95 L1923.7 1205.95 L1924.29 1205.95 L1924.87 1205.95 L1925.46 1205.95 L1926.04 1205.95 L1926.63 1205.95 L1927.22 1205.95 L1927.8 1205.95 L1928.39 1205.95 L1928.98 1205.95 L1929.56 1205.95 L1930.15 1205.95 L1930.74 1205.95 L1931.32 1205.95 L1931.91 1205.95 L1932.5 1205.95 L1933.08 1205.95 L1933.67 1205.95 L1934.25 1205.95 L1934.84 1205.95 L1935.43 1205.95 L1936.01 1205.95 L1936.6 1205.95 L1937.19 1205.95 L1937.77 1205.95 L1938.36 1205.95 L1938.95 1205.95 L1939.53 1205.95 L1940.12 1205.95 L1940.71 1205.95 L1941.29 1205.95 L1941.88 1205.95 L1942.46 1205.95 L1943.05 1205.95 L1943.64 1205.95 L1944.22 1205.95 L1944.81 1205.95 L1945.4 1205.95 L1945.98 1205.95 L1946.57 1205.95 L1947.16 1205.95 L1947.74 1205.95 L1948.33 1205.95 L1948.91 1205.95 L1949.5 1205.95 L1950.09 1205.95 L1950.67 1205.95 L1951.26 1205.95 L1951.85 1205.95 L1952.43 1205.95 L1953.02 1205.95 L1953.61 1205.95 L1954.19 1205.95 L1954.78 1205.95 L1955.37 1205.95 L1955.95 1205.95 L1956.54 1205.95 L1957.12 1205.95 L1957.71 1205.95 L1958.3 1205.95 L1958.88 1205.95 L1959.47 1205.95 L1960.06 1205.95 L1960.64 1205.95 L1961.23 1205.95 L1961.82 1205.95 L1962.4 1205.95 L1962.99 1205.95 L1963.58 1205.95 L1964.16 1205.95 L1964.75 1205.95 L1965.33 1205.95 L1965.92 1205.95 L1966.51 1205.95 L1967.09 1205.95 L1967.68 1205.95 L1968.27 1205.95 L1968.85 1205.95 L1969.44 1205.95 L1970.03 1205.95 L1970.61 1205.95 L1971.2 1205.95 L1971.78 1205.95 L1972.37 1205.95 L1972.96 1205.95 L1973.54 1205.95 L1974.13 1205.95 L1974.72 1205.95 L1975.3 1205.95 L1975.89 1205.95 L1976.48 1205.95 L1977.06 1205.95 L1977.65 1205.95 L1978.24 1205.95 L1978.82 1205.95 L1979.41 1205.95 L1979.99 1205.95 L1980.58 1205.95 L1981.17 1205.95 L1981.75 1205.95 L1982.34 1205.95 L1982.93 1205.95 L1983.51 1205.95 L1984.1 1205.95 L1984.69 1205.95 L1985.27 1205.95 L1985.86 1205.95 L1986.45 1205.95 L1987.03 1205.95 L1987.62 1205.95 L1988.2 1205.95 L1988.79 1205.95 L1989.38 1205.95 L1989.96 1205.95 L1990.55 1205.95 L1991.14 1205.95 L1991.72 1205.95 L1992.31 1205.95 L1992.9 1205.95 L1993.48 1205.95 L1994.07 1205.95 L1994.65 1205.95 L1995.24 1205.95 L1995.83 1205.95 L1996.41 1205.95 L1997 1205.95 L1997.59 1205.95 L1998.17 1205.95 L1998.76 1205.95 L1999.35 1205.95 L1999.93 1205.95 L2000.52 1205.95 L2001.11 1205.95 L2001.69 1205.95 L2002.28 1205.95 L2002.86 1205.95 L2003.45 1205.95 L2004.04 1205.95 L2004.62 1205.95 L2005.21 1205.95 L2005.8 1205.95 L2006.38 1205.95 L2006.97 1205.95 L2007.56 1205.95 L2008.14 1205.95 L2008.73 1205.95 L2009.32 1205.95 L2009.9 1205.95 L2010.49 1205.95 L2011.07 1205.95 L2011.66 1205.95 L2012.25 1205.95 L2012.83 1205.95 L2013.42 1205.95 L2014.01 1205.95 L2014.59 1205.95 L2015.18 1205.95 L2015.77 1205.95 L2016.35 1205.95 L2016.94 1205.95 L2017.53 1205.95 L2018.11 1205.95 L2018.7 1205.95 L2019.28 1205.95 L2019.87 1205.95 L2020.46 1205.95 L2021.04 1205.95 L2021.63 1205.95 L2022.22 1205.95 L2022.8 1205.95 L2023.39 1205.95 L2023.98 1205.95 L2024.56 1205.95 L2025.15 1205.95 L2025.73 1205.95 L2026.32 1205.95 L2026.91 1205.95 L2027.49 1205.95 L2028.08 1205.95 L2028.67 1205.95 L2029.25 1205.95 L2029.84 1205.95 L2030.43 1205.95 L2031.01 1205.95 L2031.6 1205.95 L2032.19 1205.95 L2032.77 1205.95 L2033.36 1205.95 L2033.94 1205.95 L2034.53 1205.95 L2035.12 1205.95 L2035.7 1205.95 L2036.29 1205.95 L2036.88 1205.95 L2037.46 1205.95 L2038.05 1205.95 L2038.64 1205.95 L2039.22 1205.95 L2039.81 1205.95 L2040.4 1205.95 L2040.98 1205.95 L2041.57 1205.95 L2042.15 1205.95 L2042.74 1205.95 L2043.33 1205.95 L2043.91 1205.95 L2044.5 1205.95 L2045.09 1205.95 L2045.67 1205.95 L2046.26 1205.95 L2046.85 1205.95 L2047.43 1205.95 L2048.02 1205.95 L2048.6 1205.95 L2049.19 1205.95 L2049.78 1205.95 L2050.36 1205.95 L2050.95 1205.95 L2051.54 1205.95 L2052.12 1205.95 L2052.71 1205.95 L2053.3 1205.95 L2053.88 1205.95 L2054.47 1205.95 L2055.06 1205.95 L2055.64 1205.95 L2056.23 1205.95 L2056.81 1205.95 L2057.4 1205.95 L2057.99 1205.95 L2058.57 1205.95 L2059.16 1205.95 L2059.75 1205.95 L2060.33 1205.95 L2060.92 1205.95 L2061.51 1205.95 L2062.09 1205.95 L2062.68 1205.95 L2063.27 1205.95 L2063.85 1205.95 L2064.44 1205.95 L2065.02 1205.95 L2065.61 1205.95 L2066.2 1205.95 L2066.78 1205.95 L2067.37 1205.95 L2067.96 1205.95 L2068.54 1205.95 L2069.13 1205.95 L2069.72 1205.95 L2070.3 1205.95 L2070.89 1205.95 L2071.48 1205.95 L2072.06 1205.95 L2072.65 1205.95 L2073.23 1205.95 L2073.82 1205.95 L2074.41 1205.95 L2074.99 1205.95 L2075.58 1205.95 L2076.17 1205.95 L2076.75 1205.95 L2077.34 1205.95 L2077.93 1205.95 L2078.51 1205.95 L2079.1 1205.95 L2079.68 1205.95 L2080.27 1205.95 L2080.86 1205.95 L2081.44 1205.95 L2082.03 1205.95 L2082.62 1205.95 L2083.2 1205.95 L2083.79 1205.95 L2084.38 1205.95 L2084.96 1205.95 L2085.55 1205.95 L2086.14 1205.95 L2086.72 1205.95 L2087.31 1205.95 L2087.89 1205.95 L2088.48 1205.95 L2089.07 1205.95 L2089.65 1205.95 L2090.24 1205.95 L2090.83 1205.95 L2091.41 1205.95 L2092 1205.95 L2092.59 1205.95 L2093.17 1205.95 L2093.76 1205.95 L2094.35 1205.95 L2094.93 1205.95 L2095.52 1205.95 L2096.1 1205.95 L2096.69 1205.95 L2097.28 1205.95 L2097.86 1205.95 L2098.45 1205.95 L2099.04 1205.95 L2099.62 1205.95 L2100.21 1205.95 L2100.8 1205.95 L2101.38 1205.95 L2101.97 1205.95 L2102.55 1205.95 L2103.14 1205.95 L2103.73 1205.95 L2104.31 1205.95 L2104.9 1205.95 L2105.49 1205.95 L2106.07 1205.95 L2106.66 1205.95 L2107.25 1205.95 L2107.83 1205.95 L2108.42 1205.95 L2109.01 1205.95 L2109.59 1205.95 L2110.18 1205.95 L2110.76 1205.95 L2111.35 1205.95 L2111.94 1205.95 L2112.52 1205.95 L2113.11 1205.95 L2113.7 1205.95 L2114.28 1205.95 L2114.87 1205.95 L2115.46 1205.95 L2116.04 1205.95 L2116.63 1205.95 L2117.22 1205.95 L2117.8 1205.95 L2118.39 1205.95 L2118.97 1205.95 L2119.56 1205.95 L2120.15 1205.95 L2120.73 1205.95 L2121.32 1205.95 L2121.91 1205.95 L2122.49 1205.95 L2123.08 1205.95 L2123.67 1205.95 L2124.25 1205.95 L2124.84 1205.95 L2125.42 1205.95 L2126.01 1205.95 L2126.6 1205.95 L2127.18 1205.95 L2127.77 1205.95 L2128.36 1205.95 L2128.94 1205.95 L2129.53 1205.95 L2130.12 1205.95 L2130.7 1205.95 L2131.29 1205.95 L2131.88 1205.95 L2132.46 1205.95 L2133.05 1205.95 L2133.63 1205.95 L2134.22 1205.95 L2134.81 1205.95 L2135.39 1205.95 L2135.98 1205.95 L2136.57 1205.95 L2137.15 1205.95 L2137.74 1205.95 L2138.33 1205.95 L2138.91 1205.95 L2139.5 1205.95 L2140.09 1205.95 L2140.67 1205.95 L2141.26 1205.95 L2141.84 1205.95 L2142.43 1205.95 L2143.02 1205.95 L2143.6 1205.95 L2144.19 1205.95 L2144.78 1205.95 L2145.36 1205.95 L2145.95 1205.95 L2146.54 1205.95 L2147.12 1205.95 L2147.71 1205.95 L2148.3 1205.95 L2148.88 1205.95 L2149.47 1205.95 L2150.05 1205.95 L2150.64 1205.95 L2151.23 1205.95 L2151.81 1205.95 L2152.4 1205.95 L2152.99 1205.95 L2153.57 1205.95 L2154.16 1205.95 L2154.75 1205.95 L2155.33 1205.95 L2155.92 1205.95 L2156.5 1205.95 L2157.09 1205.95 L2157.68 1205.95 L2158.26 1205.95 L2158.26 1205.81 L2157.68 1205.81 L2157.09 1205.81 L2156.5 1205.81 L2155.92 1205.81 L2155.33 1205.81 L2154.75 1205.81 L2154.16 1205.81 L2153.57 1205.81 L2152.99 1205.81 L2152.4 1205.81 L2151.81 1205.81 L2151.23 1205.81 L2150.64 1205.81 L2150.05 1205.81 L2149.47 1205.81 L2148.88 1205.81 L2148.3 1205.81 L2147.71 1205.81 L2147.12 1205.81 L2146.54 1205.81 L2145.95 1205.81 L2145.36 1205.81 L2144.78 1205.81 L2144.19 1205.81 L2143.6 1205.81 L2143.02 1205.81 L2142.43 1205.81 L2141.84 1205.81 L2141.26 1205.81 L2140.67 1205.81 L2140.09 1205.81 L2139.5 1205.81 L2138.91 1205.81 L2138.33 1205.81 L2137.74 1205.81 L2137.15 1205.81 L2136.57 1205.81 L2135.98 1205.81 L2135.39 1205.81 L2134.81 1205.81 L2134.22 1205.81 L2133.63 1205.81 L2133.05 1205.81 L2132.46 1205.81 L2131.88 1205.81 L2131.29 1205.81 L2130.7 1205.81 L2130.12 1205.81 L2129.53 1205.81 L2128.94 1205.81 L2128.36 1205.81 L2127.77 1205.81 L2127.18 1205.81 L2126.6 1205.81 L2126.01 1205.81 L2125.42 1205.81 L2124.84 1205.81 L2124.25 1205.81 L2123.67 1205.81 L2123.08 1205.81 L2122.49 1205.81 L2121.91 1205.81 L2121.32 1205.81 L2120.73 1205.81 L2120.15 1205.81 L2119.56 1205.81 L2118.97 1205.81 L2118.39 1205.81 L2117.8 1205.81 L2117.22 1205.81 L2116.63 1205.81 L2116.04 1205.81 L2115.46 1205.81 L2114.87 1205.81 L2114.28 1205.81 L2113.7 1205.81 L2113.11 1205.81 L2112.52 1205.81 L2111.94 1205.81 L2111.35 1205.81 L2110.76 1205.81 L2110.18 1205.81 L2109.59 1205.81 L2109.01 1205.81 L2108.42 1205.81 L2107.83 1205.81 L2107.25 1205.81 L2106.66 1205.81 L2106.07 1205.81 L2105.49 1205.81 L2104.9 1205.81 L2104.31 1205.81 L2103.73 1205.81 L2103.14 1205.81 L2102.55 1205.81 L2101.97 1205.81 L2101.38 1205.81 L2100.8 1205.81 L2100.21 1205.81 L2099.62 1205.81 L2099.04 1205.81 L2098.45 1205.81 L2097.86 1205.81 L2097.28 1205.81 L2096.69 1205.81 L2096.1 1205.81 L2095.52 1205.81 L2094.93 1205.81 L2094.35 1205.81 L2093.76 1205.81 L2093.17 1205.81 L2092.59 1205.81 L2092 1205.81 L2091.41 1205.81 L2090.83 1205.81 L2090.24 1205.81 L2089.65 1205.81 L2089.07 1205.81 L2088.48 1205.81 L2087.89 1205.81 L2087.31 1205.81 L2086.72 1205.81 L2086.14 1205.81 L2085.55 1205.81 L2084.96 1205.81 L2084.38 1205.81 L2083.79 1205.81 L2083.2 1205.81 L2082.62 1205.81 L2082.03 1205.81 L2081.44 1205.81 L2080.86 1205.81 L2080.27 1205.81 L2079.68 1205.81 L2079.1 1205.81 L2078.51 1205.81 L2077.93 1205.81 L2077.34 1205.81 L2076.75 1205.81 L2076.17 1205.81 L2075.58 1205.81 L2074.99 1205.81 L2074.41 1205.81 L2073.82 1205.81 L2073.23 1205.81 L2072.65 1205.81 L2072.06 1205.81 L2071.48 1205.81 L2070.89 1205.81 L2070.3 1205.81 L2069.72 1205.81 L2069.13 1205.81 L2068.54 1205.81 L2067.96 1205.81 L2067.37 1205.81 L2066.78 1205.81 L2066.2 1205.81 L2065.61 1205.81 L2065.02 1205.81 L2064.44 1205.81 L2063.85 1205.81 L2063.27 1205.81 L2062.68 1205.81 L2062.09 1205.81 L2061.51 1205.81 L2060.92 1205.81 L2060.33 1205.81 L2059.75 1205.81 L2059.16 1205.81 L2058.57 1205.81 L2057.99 1205.81 L2057.4 1205.81 L2056.81 1205.81 L2056.23 1205.81 L2055.64 1205.81 L2055.06 1205.81 L2054.47 1205.81 L2053.88 1205.81 L2053.3 1205.81 L2052.71 1205.81 L2052.12 1205.81 L2051.54 1205.81 L2050.95 1205.81 L2050.36 1205.81 L2049.78 1205.81 L2049.19 1205.81 L2048.6 1205.81 L2048.02 1205.81 L2047.43 1205.81 L2046.85 1205.81 L2046.26 1205.81 L2045.67 1205.81 L2045.09 1205.81 L2044.5 1205.81 L2043.91 1205.81 L2043.33 1205.81 L2042.74 1205.81 L2042.15 1205.81 L2041.57 1205.81 L2040.98 1205.81 L2040.4 1205.81 L2039.81 1205.81 L2039.22 1205.81 L2038.64 1205.81 L2038.05 1205.81 L2037.46 1205.81 L2036.88 1205.81 L2036.29 1205.81 L2035.7 1205.81 L2035.12 1205.81 L2034.53 1205.81 L2033.94 1205.81 L2033.36 1205.81 L2032.77 1205.81 L2032.19 1205.81 L2031.6 1205.81 L2031.01 1205.81 L2030.43 1205.81 L2029.84 1205.81 L2029.25 1205.81 L2028.67 1205.81 L2028.08 1205.81 L2027.49 1205.81 L2026.91 1205.81 L2026.32 1205.81 L2025.73 1205.81 L2025.15 1205.81 L2024.56 1205.81 L2023.98 1205.81 L2023.39 1205.81 L2022.8 1205.81 L2022.22 1205.81 L2021.63 1205.81 L2021.04 1205.81 L2020.46 1205.81 L2019.87 1205.81 L2019.28 1205.81 L2018.7 1205.81 L2018.11 1205.81 L2017.53 1205.81 L2016.94 1205.81 L2016.35 1205.81 L2015.77 1205.81 L2015.18 1205.81 L2014.59 1205.81 L2014.01 1205.81 L2013.42 1205.81 L2012.83 1205.81 L2012.25 1205.81 L2011.66 1205.81 L2011.07 1205.81 L2010.49 1205.81 L2009.9 1205.81 L2009.32 1205.81 L2008.73 1205.81 L2008.14 1205.81 L2007.56 1205.81 L2006.97 1205.81 L2006.38 1205.81 L2005.8 1205.81 L2005.21 1205.81 L2004.62 1205.81 L2004.04 1205.81 L2003.45 1205.81 L2002.86 1205.81 L2002.28 1205.81 L2001.69 1205.81 L2001.11 1205.81 L2000.52 1205.81 L1999.93 1205.81 L1999.35 1205.81 L1998.76 1205.81 L1998.17 1205.81 L1997.59 1205.81 L1997 1205.81 L1996.41 1205.81 L1995.83 1205.81 L1995.24 1205.81 L1994.65 1205.81 L1994.07 1205.81 L1993.48 1205.81 L1992.9 1205.81 L1992.31 1205.81 L1991.72 1205.81 L1991.14 1205.81 L1990.55 1205.81 L1989.96 1205.81 L1989.38 1205.81 L1988.79 1205.81 L1988.2 1205.81 L1987.62 1205.81 L1987.03 1205.81 L1986.45 1205.81 L1985.86 1205.81 L1985.27 1205.81 L1984.69 1205.81 L1984.1 1205.81 L1983.51 1205.81 L1982.93 1205.81 L1982.34 1205.81 L1981.75 1205.81 L1981.17 1205.81 L1980.58 1205.81 L1979.99 1205.81 L1979.41 1205.81 L1978.82 1205.81 L1978.24 1205.81 L1977.65 1205.81 L1977.06 1205.81 L1976.48 1205.81 L1975.89 1205.81 L1975.3 1205.81 L1974.72 1205.81 L1974.13 1205.81 L1973.54 1205.81 L1972.96 1205.81 L1972.37 1205.81 L1971.78 1205.81 L1971.2 1205.81 L1970.61 1205.81 L1970.03 1205.81 L1969.44 1205.81 L1968.85 1205.81 L1968.27 1205.81 L1967.68 1205.81 L1967.09 1205.81 L1966.51 1205.81 L1965.92 1205.81 L1965.33 1205.81 L1964.75 1205.81 L1964.16 1205.81 L1963.58 1205.81 L1962.99 1205.81 L1962.4 1205.81 L1961.82 1205.81 L1961.23 1205.81 L1960.64 1205.81 L1960.06 1205.81 L1959.47 1205.81 L1958.88 1205.81 L1958.3 1205.81 L1957.71 1205.81 L1957.12 1205.81 L1956.54 1205.81 L1955.95 1205.81 L1955.37 1205.81 L1954.78 1205.81 L1954.19 1205.81 L1953.61 1205.81 L1953.02 1205.81 L1952.43 1205.81 L1951.85 1205.81 L1951.26 1205.81 L1950.67 1205.81 L1950.09 1205.81 L1949.5 1205.81 L1948.91 1205.81 L1948.33 1205.81 L1947.74 1205.81 L1947.16 1205.81 L1946.57 1205.81 L1945.98 1205.81 L1945.4 1205.81 L1944.81 1205.81 L1944.22 1205.81 L1943.64 1205.81 L1943.05 1205.81 L1942.46 1205.81 L1941.88 1205.81 L1941.29 1205.81 L1940.71 1205.81 L1940.12 1205.81 L1939.53 1205.81 L1938.95 1205.81 L1938.36 1205.81 L1937.77 1205.81 L1937.19 1205.81 L1936.6 1205.81 L1936.01 1205.81 L1935.43 1205.81 L1934.84 1205.81 L1934.25 1205.81 L1933.67 1205.81 L1933.08 1205.81 L1932.5 1205.81 L1931.91 1205.81 L1931.32 1205.81 L1930.74 1205.81 L1930.15 1205.81 L1929.56 1205.81 L1928.98 1205.81 L1928.39 1205.81 L1927.8 1205.81 L1927.22 1205.81 L1926.63 1205.81 L1926.04 1205.81 L1925.46 1205.81 L1924.87 1205.81 L1924.29 1205.81 L1923.7 1205.81 L1923.11 1205.81 L1922.53 1205.81 L1921.94 1205.81 L1921.35 1205.81 L1920.77 1205.81 L1920.18 1205.81 L1919.59 1205.81 L1919.01 1205.81 L1918.42 1205.81 L1917.83 1205.81 L1917.25 1205.81 L1916.66 1205.81 L1916.08 1205.81 L1915.49 1205.81 L1914.9 1205.81 L1914.32 1205.81 L1913.73 1205.81 L1913.14 1205.81 L1912.56 1205.81 L1911.97 1205.81 L1911.38 1205.81 L1910.8 1205.81 L1910.21 1205.81 L1909.63 1205.81 L1909.04 1205.81 L1908.45 1205.81 L1907.87 1205.81 L1907.28 1205.81 L1906.69 1205.81 L1906.11 1205.81 L1905.52 1205.81 L1904.93 1205.81 L1904.35 1205.81 L1903.76 1205.81 L1903.17 1205.81 L1902.59 1205.81 L1902 1205.81 L1901.42 1205.81 L1900.83 1205.81 L1900.24 1205.81 L1899.66 1205.81 L1899.07 1205.81 L1898.48 1205.81 L1897.9 1205.81 L1897.31 1205.81 L1896.72 1205.81 L1896.14 1205.81 L1895.55 1205.81 L1894.96 1205.81 L1894.38 1205.81 L1893.79 1205.81 L1893.21 1205.81 L1892.62 1205.81 L1892.03 1205.81 L1891.45 1205.81 L1890.86 1205.81 L1890.27 1205.81 L1889.69 1205.81 L1889.1 1205.81 L1888.51 1205.81 L1887.93 1205.81 L1887.34 1205.81 L1886.76 1205.81 L1886.17 1205.81 L1885.58 1205.81 L1885 1205.81 L1884.41 1205.81 L1883.82 1205.81 L1883.24 1205.81 L1882.65 1205.81 L1882.06 1205.81 L1881.48 1205.81 L1880.89 1205.81 L1880.3 1205.81 L1879.72 1205.81 L1879.13 1205.81 L1878.55 1205.81 L1877.96 1205.81 L1877.37 1205.81 L1876.79 1205.81 L1876.2 1205.81 L1875.61 1205.81 L1875.03 1205.81 L1874.44 1205.81 L1873.85 1205.81 L1873.27 1205.81 L1872.68 1205.81 L1872.09 1205.81 L1871.51 1205.81 L1870.92 1205.81 L1870.34 1205.81 L1869.75 1205.81 L1869.16 1205.81 L1868.58 1205.81 L1867.99 1205.81 L1867.4 1205.81 L1866.82 1205.81 L1866.23 1205.81 L1865.64 1205.81 L1865.06 1205.81 L1864.47 1205.81 L1863.88 1205.81 L1863.3 1205.81 L1862.71 1205.81 L1862.13 1205.81 L1861.54 1205.81 L1860.95 1205.81 L1860.37 1205.81 L1859.78 1205.81 L1859.19 1205.81 L1858.61 1205.81 L1858.02 1205.81 L1857.43 1205.81 L1856.85 1205.81 L1856.26 1205.81 L1855.68 1205.81 L1855.09 1205.81 L1854.5 1205.81 L1853.92 1205.81 L1853.33 1205.81 L1852.74 1205.81 L1852.16 1205.81 L1851.57 1205.81 L1850.98 1205.81 L1850.4 1205.81 L1849.81 1205.81 L1849.22 1205.81 L1848.64 1205.81 L1848.05 1205.81 L1847.47 1205.81 L1846.88 1205.81 L1846.29 1205.81 L1845.71 1205.81 L1845.12 1205.81 L1844.53 1205.81 L1843.95 1205.81 L1843.36 1205.81 L1842.77 1205.81 L1842.19 1205.81 L1841.6 1205.81 L1841.01 1205.81 L1840.43 1205.81 L1839.84 1205.81 L1839.26 1205.81 L1838.67 1205.81 L1838.08 1205.81 L1837.5 1205.81 L1836.91 1205.81 L1836.32 1205.81 L1835.74 1205.81 L1835.15 1205.81 L1834.56 1205.81 L1833.98 1205.81 L1833.39 1205.81 L1832.81 1205.81 L1832.22 1205.81 L1831.63 1205.81 L1831.05 1205.81 L1830.46 1205.81 L1829.87 1205.81 L1829.29 1205.81 L1828.7 1205.81 L1828.11 1205.81 L1827.53 1205.81 L1826.94 1205.81 L1826.35 1205.81 L1825.77 1205.81 L1825.18 1205.81 L1824.6 1205.81 L1824.01 1205.81 L1823.42 1205.81 L1822.84 1205.81 L1822.25 1205.81 L1821.66 1205.81 L1821.08 1205.81 L1820.49 1205.81 L1819.9 1205.81 L1819.32 1205.81 L1818.73 1205.81 L1818.14 1205.81 L1817.56 1205.81 L1816.97 1205.81 L1816.39 1205.81 L1815.8 1205.81 L1815.21 1205.81 L1814.63 1205.81 L1814.04 1205.81 L1813.45 1205.81 L1812.87 1205.81 L1812.28 1205.81 L1811.69 1205.81 L1811.11 1205.81 L1810.52 1205.81 L1809.94 1205.81 L1809.35 1205.81 L1808.76 1205.81 L1808.18 1205.81 L1807.59 1205.81 L1807 1205.81 L1806.42 1205.81 L1805.83 1205.81 L1805.24 1205.81 L1804.66 1205.81 L1804.07 1205.81 L1803.48 1205.81 L1802.9 1205.81 L1802.31 1205.81 L1801.73 1205.81 L1801.14 1205.81 L1800.55 1205.81 L1799.97 1205.81 L1799.38 1205.81 L1798.79 1205.81 L1798.21 1205.81 L1797.62 1205.81 L1797.03 1205.81 L1796.45 1205.81 L1795.86 1205.81 L1795.27 1205.81 L1794.69 1205.81 L1794.1 1205.81 L1793.52 1205.81 L1792.93 1205.81 L1792.34 1205.81 L1791.76 1205.81 L1791.17 1205.81 L1790.58 1205.81 L1790 1205.81 L1789.41 1205.81 L1788.82 1205.81 L1788.24 1205.81 L1787.65 1205.81 L1787.06 1205.81 L1786.48 1205.81 L1785.89 1205.81 L1785.31 1205.81 L1784.72 1205.81 L1784.13 1205.81 L1783.55 1205.81 L1782.96 1205.81 L1782.37 1205.81 L1781.79 1205.81 L1781.2 1205.81 L1780.61 1205.81 L1780.03 1205.81 L1779.44 1205.81 L1778.86 1205.81 L1778.27 1205.81 L1777.68 1205.81 L1777.1 1205.81 L1776.51 1205.81 L1775.92 1205.81 L1775.34 1205.81 L1774.75 1205.81 L1774.16 1205.81 L1773.58 1205.81 L1772.99 1205.81 L1772.4 1205.81 L1771.82 1205.81 L1771.23 1205.81 L1770.65 1205.81 L1770.06 1205.81 L1769.47 1205.81 L1768.89 1205.81 L1768.3 1205.81 L1767.71 1205.81 L1767.13 1205.81 L1766.54 1205.81 L1765.95 1205.81 L1765.37 1205.81 L1764.78 1205.81 L1764.19 1205.81 L1763.61 1205.81 L1763.02 1205.81 L1762.44 1205.81 L1761.85 1205.81 L1761.26 1205.81 L1760.68 1205.81 L1760.09 1205.81 L1759.5 1205.81 L1758.92 1205.81 L1758.33 1205.81 L1757.74 1205.81 L1757.16 1205.81 L1756.57 1205.81 L1755.99 1205.81 L1755.4 1205.81 L1754.81 1205.81 L1754.23 1205.81 L1753.64 1205.81 L1753.05 1205.81 L1752.47 1205.81 L1751.88 1205.81 L1751.29 1205.81 L1750.71 1205.81 L1750.12 1205.81 L1749.53 1205.81 L1748.95 1205.81 L1748.36 1205.81 L1747.78 1205.81 L1747.19 1205.81 L1746.6 1205.81 L1746.02 1205.81 L1745.43 1205.81 L1744.84 1205.81 L1744.26 1205.81 L1743.67 1205.81 L1743.08 1205.81 L1742.5 1205.81 L1741.91 1205.81 L1741.32 1205.81 L1740.74 1205.81 L1740.15 1205.81 L1739.57 1205.81 L1738.98 1205.81 L1738.39 1205.81 L1737.81 1205.81 L1737.22 1205.81 L1736.63 1205.81 L1736.05 1205.81 L1735.46 1205.81 L1734.87 1205.81 L1734.29 1205.81 L1733.7 1205.81 L1733.11 1205.81 L1732.53 1205.81 L1731.94 1205.81 L1731.36 1205.81 L1730.77 1205.81 L1730.18 1205.81 L1729.6 1205.81 L1729.01 1205.81 L1728.42 1205.81 L1727.84 1205.81 L1727.25 1205.81 L1726.66 1205.81 L1726.08 1205.81 L1725.49 1205.81 L1724.91 1205.81 L1724.32 1205.81 L1723.73 1205.81 L1723.15 1205.81 L1722.56 1205.81 L1721.97 1205.81 L1721.39 1205.81 L1720.8 1205.81 L1720.21 1205.81 L1719.63 1205.81 L1719.04 1205.81 L1718.45 1205.81 L1717.87 1205.81 L1717.28 1205.81 L1716.7 1205.81 L1716.11 1205.81 L1715.52 1205.81 L1714.94 1205.81 L1714.35 1205.81 L1713.76 1205.81 L1713.18 1205.81 L1712.59 1205.81 L1712 1205.81 L1711.42 1205.81 L1710.83 1205.81 L1710.24 1205.81 L1709.66 1205.81 L1709.07 1205.81 L1708.49 1205.81 L1707.9 1205.81 L1707.31 1205.81 L1706.73 1205.81 L1706.14 1205.81 L1705.55 1205.81 L1704.97 1205.81 L1704.38 1205.81 L1703.79 1205.81 L1703.21 1205.81 L1702.62 1205.81 L1702.04 1205.81 L1701.45 1205.81 L1700.86 1205.81 L1700.28 1205.81 L1699.69 1205.81 L1699.1 1205.81 L1698.52 1205.81 L1697.93 1205.81 L1697.34 1205.81 L1696.76 1205.81 L1696.17 1205.81 L1695.58 1205.81 L1695 1205.81 L1694.41 1205.81 L1693.83 1205.81 L1693.24 1205.81 L1692.65 1205.81 L1692.07 1205.81 L1691.48 1205.81 L1690.89 1205.81 L1690.31 1205.81 L1689.72 1205.81 L1689.13 1205.81 L1688.55 1205.81 L1687.96 1205.81 L1687.37 1205.81 L1686.79 1205.81 L1686.2 1205.81 L1685.62 1205.81 L1685.03 1205.81 L1684.44 1205.81 L1683.86 1205.81 L1683.27 1205.81 L1682.68 1205.81 L1682.1 1205.81 L1681.51 1205.81 L1680.92 1205.81 L1680.34 1205.81 L1679.75 1205.81 L1679.17 1205.81 L1678.58 1205.81 L1677.99 1205.81 L1677.41 1205.81 L1676.82 1205.81 L1676.23 1205.81 L1675.65 1205.81 L1675.06 1205.81 L1674.47 1205.81 L1673.89 1205.81 L1673.3 1205.81 L1672.71 1205.81 L1672.13 1205.81 L1671.54 1205.81 L1670.96 1205.81 L1670.37 1205.81 L1669.78 1205.81 L1669.2 1205.81 L1668.61 1205.81 L1668.02 1205.81 L1667.44 1205.81 L1666.85 1205.81 L1666.26 1205.81 L1665.68 1205.81 L1665.09 1205.81 L1664.5 1205.81 L1663.92 1205.81 L1663.33 1205.81 L1662.75 1205.81 L1662.16 1205.81 L1661.57 1205.81 L1660.99 1205.81 L1660.4 1205.81 L1659.81 1205.81 L1659.23 1205.81 L1658.64 1205.81 L1658.05 1205.81 L1657.47 1205.81 L1656.88 1205.81 L1656.29 1205.81 L1655.71 1205.81 L1655.12 1205.81 L1654.54 1205.81 L1653.95 1205.81 L1653.36 1205.81 L1652.78 1205.81 L1652.19 1205.81 L1651.6 1205.81 L1651.02 1205.81 L1650.43 1205.81 L1649.84 1205.81 L1649.26 1205.81 L1648.67 1205.81 L1648.09 1205.81 L1647.5 1205.81 L1646.91 1205.81 L1646.33 1205.81 L1645.74 1205.81 L1645.15 1205.81 L1644.57 1205.81 L1643.98 1205.81 L1643.39 1205.81 L1642.81 1205.81 L1642.22 1205.81 L1641.63 1205.81 L1641.05 1205.81 L1640.46 1205.81 L1639.88 1205.81 L1639.29 1205.81 L1638.7 1205.81 L1638.12 1205.81 L1637.53 1205.81 L1636.94 1205.81 L1636.36 1205.81 L1635.77 1205.81 L1635.18 1205.81 L1634.6 1205.81 L1634.01 1205.81 L1633.42 1205.81 L1632.84 1205.81 L1632.25 1205.81 L1631.67 1205.81 L1631.08 1205.81 L1630.49 1205.81 L1629.91 1205.81 L1629.32 1205.81 L1628.73 1205.81 L1628.15 1205.81 L1627.56 1205.81 L1626.97 1205.81 L1626.39 1205.81 L1625.8 1205.81 L1625.22 1205.81 L1624.63 1205.81 L1624.04 1205.81 L1623.46 1205.81 L1622.87 1205.81 L1622.28 1205.81 L1621.7 1205.81 L1621.11 1205.81 L1620.52 1205.81 L1619.94 1205.81 L1619.35 1205.81 L1618.76 1205.81 L1618.18 1205.81 L1617.59 1205.81 L1617.01 1205.81 L1616.42 1205.81 L1615.83 1205.81 L1615.25 1205.81 L1614.66 1205.81 L1614.07 1205.81 L1613.49 1205.81 L1612.9 1205.81 L1612.31 1205.81 L1611.73 1205.81 L1611.14 1205.81 L1610.55 1205.81 L1609.97 1205.81 L1609.38 1205.81 L1608.8 1205.81 L1608.21 1205.81 L1607.62 1205.81 L1607.04 1205.81 L1606.45 1205.81 L1605.86 1205.81 L1605.28 1205.81 L1604.69 1205.81 L1604.1 1205.81 L1603.52 1205.81 L1602.93 1205.81 L1602.34 1205.81 L1601.76 1205.81 L1601.17 1205.81 L1600.59 1205.81 L1600 1205.81 L1599.41 1205.81 L1598.83 1205.81 L1598.24 1205.81 L1597.65 1205.81 L1597.07 1205.81 L1596.48 1205.81 L1595.89 1205.81 L1595.31 1205.81 L1594.72 1205.81 L1594.14 1205.81 L1593.55 1205.81 L1592.96 1205.81 L1592.38 1205.81 L1591.79 1205.81 L1591.2 1205.81 L1590.62 1205.81 L1590.03 1205.81 L1589.44 1205.81 L1588.86 1205.81 L1588.27 1205.81 L1587.68 1205.81 L1587.1 1205.81 L1586.51 1205.81 L1585.93 1205.81 L1585.34 1205.81 L1584.75 1205.81 L1584.17 1205.81 L1583.58 1205.81 L1582.99 1205.81 L1582.41 1205.81 L1581.82 1205.81 L1581.23 1205.81 L1580.65 1205.81 L1580.06 1205.81 L1579.47 1205.81 L1578.89 1205.81 L1578.3 1205.81 L1577.72 1205.81 L1577.13 1205.81 L1576.54 1205.81 L1575.96 1205.81 L1575.37 1205.81 L1574.78 1205.81 L1574.2 1205.81 L1573.61 1205.81 L1573.02 1205.81 L1572.44 1205.81 L1571.85 1205.81 L1571.27 1205.81 L1570.68 1205.81 L1570.09 1205.81 L1569.51 1205.81 L1568.92 1205.81 L1568.33 1205.81 L1567.75 1205.81 L1567.16 1205.81 L1566.57 1205.81 L1565.99 1205.81 L1565.4 1205.81 L1564.81 1205.81 L1564.23 1205.81 L1563.64 1205.81 L1563.06 1205.81 L1562.47 1205.81 L1561.88 1205.81 L1561.3 1205.81 L1560.71 1205.81 L1560.12 1205.81 L1559.54 1205.81 L1558.95 1205.81 L1558.36 1205.81 L1557.78 1205.81 L1557.19 1205.81 L1556.6 1205.81 L1556.02 1205.81 L1555.43 1205.81 L1554.85 1205.81 L1554.26 1205.81 L1553.67 1205.81 L1553.09 1205.81 L1552.5 1205.81 L1551.91 1205.81 L1551.33 1205.81 L1550.74 1205.81 L1550.15 1205.81 L1549.57 1205.81 L1548.98 1205.81 L1548.4 1205.81 L1547.81 1205.81 L1547.22 1205.81 L1546.64 1205.81 L1546.05 1205.81 L1545.46 1205.81 L1544.88 1205.81 L1544.29 1205.81 L1543.7 1205.81 L1543.12 1205.81 L1542.53 1205.81 L1541.94 1205.81 L1541.36 1205.81 L1540.77 1205.81 L1540.19 1205.81 L1539.6 1205.81 L1539.01 1205.81 L1538.43 1205.81 L1537.84 1205.81 L1537.25 1205.81 L1536.67 1205.81 L1536.08 1205.81 L1535.49 1205.81 L1534.91 1205.81 L1534.32 1205.81 L1533.73 1205.81 L1533.15 1205.81 L1532.56 1205.81 L1531.98 1205.81 L1531.39 1205.81 L1530.8 1205.81 L1530.22 1205.81 L1529.63 1205.81 L1529.04 1205.81 L1528.46 1205.81 L1527.87 1205.81 L1527.28 1205.81 L1526.7 1205.81 L1526.11 1205.81 L1525.52 1205.81 L1524.94 1205.81 L1524.35 1205.81 L1523.77 1205.81 L1523.18 1205.81 L1522.59 1205.81 L1522.01 1205.81 L1521.42 1205.81 L1520.83 1205.81 L1520.25 1205.81 L1519.66 1205.81 L1519.07 1205.81 L1518.49 1205.81 L1517.9 1205.81 L1517.32 1205.81 L1516.73 1205.81 L1516.14 1205.81 L1515.56 1205.81 L1514.97 1205.81 L1514.38 1205.81 L1513.8 1205.81 L1513.21 1205.81 L1512.62 1205.81 L1512.04 1205.81 L1511.45 1205.81 L1510.86 1205.81 L1510.28 1205.81 L1509.69 1205.81 L1509.11 1205.81 L1508.52 1205.81 L1507.93 1205.81 L1507.35 1205.81 L1506.76 1205.81 L1506.17 1205.81 L1505.59 1205.81 L1505 1205.81 L1504.41 1205.81 L1503.83 1205.81 L1503.24 1205.81 L1502.65 1205.81 L1502.07 1205.81 L1501.48 1205.81 L1500.9 1205.81 L1500.31 1205.81 L1499.72 1205.81 L1499.14 1205.81 L1498.55 1205.81 L1497.96 1205.81 L1497.38 1205.81 L1496.79 1205.81 L1496.2 1205.81 L1495.62 1205.81 L1495.03 1205.81 L1494.45 1205.81 L1493.86 1205.81 L1493.27 1205.81 L1492.69 1205.81 L1492.1 1205.81 L1491.51 1205.81 L1490.93 1205.81 L1490.34 1205.81 L1489.75 1205.81 L1489.17 1205.81 L1488.58 1205.81 L1487.99 1205.81 L1487.41 1205.81 L1486.82 1205.81 L1486.24 1205.81 L1485.65 1205.81 L1485.06 1205.81 L1484.48 1205.81 L1483.89 1205.81 L1483.3 1205.81 L1482.72 1205.81 L1482.13 1205.81 L1481.54 1205.81 L1480.96 1205.81 L1480.37 1205.81 L1479.78 1205.81 L1479.2 1205.81 L1478.61 1205.81 L1478.03 1205.81 L1477.44 1205.81 L1476.85 1205.81 L1476.27 1205.81 L1475.68 1205.81 L1475.09 1205.81 L1474.51 1205.81 L1473.92 1205.81 L1473.33 1205.81 L1472.75 1205.81 L1472.16 1205.81 L1471.57 1205.81 L1470.99 1205.81 L1470.4 1205.81 L1469.82 1205.81 L1469.23 1205.81 L1468.64 1205.81 L1468.06 1205.81 L1467.47 1205.81 L1466.88 1205.81 L1466.3 1205.81 L1465.71 1205.81 L1465.12 1205.81 L1464.54 1205.81 L1463.95 1205.81 L1463.37 1205.81 L1462.78 1205.81 L1462.19 1205.81 L1461.61 1205.81 L1461.02 1205.81 L1460.43 1205.81 L1459.85 1205.81 L1459.26 1205.81 L1458.67 1205.81 L1458.09 1205.81 L1457.5 1205.81 L1456.91 1205.81 L1456.33 1205.81 L1455.74 1205.81 L1455.16 1205.81 L1454.57 1205.81 L1453.98 1205.81 L1453.4 1205.81 L1452.81 1205.81 L1452.22 1205.81 L1451.64 1205.81 L1451.05 1205.81 L1450.46 1205.81 L1449.88 1205.81 L1449.29 1205.81 L1448.7 1205.81 L1448.12 1205.81 L1447.53 1205.81 L1446.95 1205.81 L1446.36 1205.81 L1445.77 1205.81 L1445.19 1205.81 L1444.6 1205.81 L1444.01 1205.81 L1443.43 1205.81 L1442.84 1205.81 L1442.25 1205.81 L1441.67 1205.81 L1441.08 1205.81 L1440.5 1205.81 L1439.91 1205.81 L1439.32 1205.81 L1438.74 1205.81 L1438.15 1205.81 L1437.56 1205.81 L1436.98 1205.81 L1436.39 1205.81 L1435.8 1205.81 L1435.22 1205.81 L1434.63 1205.81 L1434.04 1205.81 L1433.46 1205.81 L1432.87 1205.81 L1432.29 1205.81 L1431.7 1205.81 L1431.11 1205.81 L1430.53 1205.81 L1429.94 1205.81 L1429.35 1205.81 L1428.77 1205.81 L1428.18 1205.81 L1427.59 1205.81 L1427.01 1205.81 L1426.42 1205.81 L1425.83 1205.81 L1425.25 1205.81 L1424.66 1205.81 L1424.08 1205.81 L1423.49 1205.81 L1422.9 1205.81 L1422.32 1205.81 L1421.73 1205.81 L1421.14 1205.81 L1420.56 1205.81 L1419.97 1205.81 L1419.38 1205.81 L1418.8 1205.81 L1418.21 1205.81 L1417.63 1205.81 L1417.04 1205.81 L1416.45 1205.81 L1415.87 1205.81 L1415.28 1205.81 L1414.69 1205.81 L1414.11 1205.81 L1413.52 1205.81 L1412.93 1205.81 L1412.35 1205.81 L1411.76 1205.81 L1411.17 1205.81 L1410.59 1205.81 L1410 1205.81 L1409.42 1205.81 L1408.83 1205.81 L1408.24 1205.81 L1407.66 1205.81 L1407.07 1205.81 L1406.48 1205.81 L1405.9 1205.81 L1405.31 1205.81 L1404.72 1205.81 L1404.14 1205.81 L1403.55 1205.81 L1402.96 1205.81 L1402.38 1205.81 L1401.79 1205.81 L1401.21 1205.81 L1400.62 1205.81 L1400.03 1205.81 L1399.45 1205.81 L1398.86 1205.81 L1398.27 1205.81 L1397.69 1205.81 L1397.1 1205.81 L1396.51 1205.81 L1395.93 1205.81 L1395.34 1205.81 L1394.75 1205.81 L1394.17 1205.81 L1393.58 1205.81 L1393 1205.81 L1392.41 1205.81 L1391.82 1205.81 L1391.24 1205.81 L1390.65 1205.81 L1390.06 1205.81 L1389.48 1205.81 L1388.89 1205.81 L1388.3 1205.81 L1387.72 1205.81 L1387.13 1205.81 L1386.55 1205.81 L1385.96 1205.81 L1385.37 1205.81 L1384.79 1205.81 L1384.2 1205.81 L1383.61 1205.81 L1383.03 1205.81 L1382.44 1205.81 L1381.85 1205.81 L1381.27 1205.81 L1380.68 1205.81 L1380.09 1205.81 L1379.51 1205.81 L1378.92 1205.81 L1378.34 1205.81 L1377.75 1205.81 L1377.16 1205.81 L1376.58 1205.81 L1375.99 1205.81 L1375.4 1205.81 L1374.82 1205.81 L1374.23 1205.81 L1373.64 1205.81 L1373.06 1205.81 L1372.47 1205.81 L1371.88 1205.81 L1371.3 1205.81 L1370.71 1205.81 L1370.13 1205.81 L1369.54 1205.81 L1368.95 1205.81 L1368.37 1205.81 L1367.78 1205.81 L1367.19 1205.81 L1366.61 1205.81 L1366.02 1205.81 L1365.43 1205.81 L1364.85 1205.81 L1364.26 1205.81 L1363.68 1205.81 L1363.09 1205.81 L1362.5 1205.81 L1361.92 1205.81 L1361.33 1205.81 L1360.74 1205.81 L1360.16 1205.81 L1359.57 1205.81 L1358.98 1205.81 L1358.4 1205.81 L1357.81 1205.81 L1357.22 1205.81 L1356.64 1205.81 L1356.05 1205.81 L1355.47 1205.81 L1354.88 1205.81 L1354.29 1205.81 L1353.71 1205.81 L1353.12 1205.81 L1352.53 1205.81 L1351.95 1205.81 L1351.36 1205.81 L1350.77 1205.81 L1350.19 1205.81 L1349.6 1205.81 L1349.01 1205.81 L1348.43 1205.81 L1347.84 1205.81 L1347.26 1205.81 L1346.67 1205.81 L1346.08 1205.81 L1345.5 1205.81 L1344.91 1205.81 L1344.32 1205.81 L1343.74 1205.81 L1343.15 1205.81 L1342.56 1205.81 L1341.98 1205.81 L1341.39 1205.81 L1340.8 1205.81 L1340.22 1205.81 L1339.63 1205.81 L1339.05 1205.81 L1338.46 1205.81 L1337.87 1205.81 L1337.29 1205.81 L1336.7 1205.81 L1336.11 1205.81 L1335.53 1205.81 L1334.94 1205.81 L1334.35 1205.81 L1333.77 1205.81 L1333.18 1205.81 L1332.6 1205.81 L1332.01 1205.81 L1331.42 1205.81 L1330.84 1205.81 L1330.25 1205.81 L1329.66 1205.81 L1329.08 1205.81 L1328.49 1205.81 L1327.9 1205.81 L1327.32 1205.81 L1326.73 1205.81 L1326.14 1205.81 L1325.56 1205.81 L1324.97 1205.81 L1324.39 1205.81 L1323.8 1205.81 L1323.21 1205.81 L1322.63 1205.81 L1322.04 1205.81 L1321.45 1205.81 L1320.87 1205.81 L1320.28 1205.81 L1319.69 1205.81 L1319.11 1205.81 L1318.52 1205.81 L1317.93 1205.81 L1317.35 1205.81 L1316.76 1205.81 L1316.18 1205.81 L1315.59 1205.81 L1315 1205.81 L1314.42 1205.81 L1313.83 1205.81 L1313.24 1205.81 L1312.66 1205.81 L1312.07 1205.81 L1311.48 1205.81 L1310.9 1205.81 L1310.31 1205.81 L1309.73 1205.81 L1309.14 1205.81 L1308.55 1205.81 L1307.97 1205.81 L1307.38 1205.81 L1306.79 1205.81 L1306.21 1205.81 L1305.62 1205.81 L1305.03 1205.81 L1304.45 1205.81 L1303.86 1205.81 L1303.27 1205.81 L1302.69 1205.81 L1302.1 1205.81 L1301.52 1205.81 L1300.93 1205.81 L1300.34 1205.81 L1299.76 1205.81 L1299.17 1205.81 L1298.58 1205.81 L1298 1205.81 L1297.41 1205.81 L1296.82 1205.81 L1296.24 1205.81 L1295.65 1205.81 L1295.06 1205.81 L1294.48 1205.81 L1293.89 1205.81 L1293.31 1205.81 L1292.72 1205.81 L1292.13 1205.81 L1291.55 1205.81 L1290.96 1205.81 L1290.37 1205.81 L1289.79 1205.81 L1289.2 1205.81 L1288.61 1205.81 L1288.03 1205.81 L1287.44 1205.81 L1286.86 1205.81 L1286.27 1205.81 L1285.68 1205.81 L1285.1 1205.81 L1284.51 1205.81 L1283.92 1205.81 L1283.34 1205.81 L1282.75 1205.81 L1282.16 1205.81 L1281.58 1205.81 L1280.99 1205.81 L1280.4 1205.81 L1279.82 1205.81 L1279.23 1205.81 L1278.65 1205.81 L1278.06 1205.81 L1277.47 1205.81 L1276.89 1205.81 L1276.3 1205.81 L1275.71 1205.81 L1275.13 1205.81 L1274.54 1205.81 L1273.95 1205.81 L1273.37 1205.81 L1272.78 1205.81 L1272.19 1205.81 L1271.61 1205.81 L1271.02 1205.81 L1270.44 1205.81 L1269.85 1205.81 L1269.26 1205.81 L1268.68 1205.81 L1268.09 1205.81 L1267.5 1205.81 L1266.92 1205.81 L1266.33 1205.81 L1265.74 1205.81 L1265.16 1205.81 L1264.57 1205.81 L1263.98 1205.81 L1263.4 1205.81 L1262.81 1205.81 L1262.23 1205.81 L1261.64 1205.81 L1261.05 1205.81 L1260.47 1205.81 L1259.88 1205.81 L1259.29 1205.81 L1258.71 1205.81 L1258.12 1205.81 L1257.53 1205.81 L1256.95 1205.81 L1256.36 1205.81 L1255.78 1205.81 L1255.19 1205.81 L1254.6 1205.81 L1254.02 1205.81 L1253.43 1205.81 L1252.84 1205.81 L1252.26 1205.81 L1251.67 1205.81 L1251.08 1205.81 L1250.5 1205.81 L1249.91 1205.81 L1249.32 1205.81 L1248.74 1205.81 L1248.15 1205.81 L1247.57 1205.81 L1246.98 1205.81 L1246.39 1205.81 L1245.81 1205.81 L1245.22 1205.81 L1244.63 1205.81 L1244.05 1205.81 L1243.46 1205.81 L1242.87 1205.81 L1242.29 1205.81 L1241.7 1205.81 L1241.11 1205.81 L1240.53 1205.81 L1239.94 1205.81 L1239.36 1205.81 L1238.77 1205.81 L1238.18 1205.81 L1237.6 1205.81 L1237.01 1205.81 L1236.42 1205.81 L1235.84 1205.81 L1235.25 1205.81 L1234.66 1205.81 L1234.08 1205.81 L1233.49 1205.81 L1232.91 1205.81 L1232.32 1205.81 L1231.73 1205.81 L1231.15 1205.81 L1230.56 1205.81 L1229.97 1205.81 L1229.39 1205.81 L1228.8 1205.81 L1228.21 1205.81 L1227.63 1205.81 L1227.04 1205.81 L1226.45 1205.81 L1225.87 1205.81 L1225.28 1205.81 L1224.7 1205.81 L1224.11 1205.81 L1223.52 1205.81 L1222.94 1205.81 L1222.35 1205.81 L1221.76 1205.81 L1221.18 1205.81 L1220.59 1205.81 L1220 1205.81 L1219.42 1205.81 L1218.83 1205.81 L1218.24 1205.81 L1217.66 1205.81 L1217.07 1205.81 L1216.49 1205.81 L1215.9 1205.81 L1215.31 1205.81 L1214.73 1205.81 L1214.14 1205.81 L1213.55 1205.81 L1212.97 1205.81 L1212.38 1205.81 L1211.79 1205.81 L1211.21 1205.81 L1210.62 1205.81 L1210.03 1205.81 L1209.45 1205.81 L1208.86 1205.81 L1208.28 1205.81 L1207.69 1205.81 L1207.1 1205.81 L1206.52 1205.81 L1205.93 1205.81 L1205.34 1205.81 L1204.76 1205.81 L1204.17 1205.81 L1203.58 1205.81 L1203 1205.81 L1202.41 1205.81 L1201.83 1205.81 L1201.24 1205.81 L1200.65 1205.81 L1200.07 1205.81 L1199.48 1205.81 L1198.89 1205.81 L1198.31 1205.81 L1197.72 1205.81 L1197.13 1205.81 L1196.55 1205.81 L1195.96 1205.81 L1195.37 1205.81 L1194.79 1205.81 L1194.2 1205.81 L1193.62 1205.81 L1193.03 1205.81 L1192.44 1205.81 L1191.86 1205.81 L1191.27 1205.81 L1190.68 1205.81 L1190.1 1205.81 L1189.51 1205.81 L1188.92 1205.81 L1188.34 1205.81 L1187.75 1205.81 L1187.16 1205.81 L1186.58 1205.81 L1185.99 1205.81 L1185.41 1205.81 L1184.82 1205.81 L1184.23 1205.81 L1183.65 1205.81 L1183.06 1205.81 L1182.47 1205.81 L1181.89 1205.81 L1181.3 1205.81 L1180.71 1205.81 L1180.13 1205.81 L1179.54 1205.81 L1178.96 1205.81 L1178.37 1205.81 L1177.78 1205.81 L1177.2 1205.81 L1176.61 1205.81 L1176.02 1205.81 L1175.44 1205.81 L1174.85 1205.81 L1174.26 1205.81 L1173.68 1205.81 L1173.09 1205.81 L1172.5 1205.81 L1171.92 1205.81 L1171.33 1205.81 L1170.75 1205.81 L1170.16 1205.81 L1169.57 1205.81 L1168.99 1205.81 L1168.4 1205.81 L1167.81 1205.81 L1167.23 1205.81 L1166.64 1205.81 L1166.05 1205.81 L1165.47 1205.81 L1164.88 1205.81 L1164.29 1205.81 L1163.71 1205.81 L1163.12 1205.81 L1162.54 1205.81 L1161.95 1205.81 L1161.36 1205.81 L1160.78 1205.81 L1160.19 1205.81 L1159.6 1205.81 L1159.02 1205.81 L1158.43 1205.81 L1157.84 1205.81 L1157.26 1205.81 L1156.67 1205.81 L1156.09 1205.81 L1155.5 1205.81 L1154.91 1205.81 L1154.33 1205.81 L1153.74 1205.81 L1153.15 1205.81 L1152.57 1205.81 L1151.98 1205.81 L1151.39 1205.81 L1150.81 1205.81 L1150.22 1205.81 L1149.63 1205.81 L1149.05 1205.81 L1148.46 1205.81 L1147.88 1205.81 L1147.29 1205.81 L1146.7 1205.81 L1146.12 1205.81 L1145.53 1205.81 L1144.94 1205.81 L1144.36 1205.81 L1143.77 1205.81 L1143.18 1205.81 L1142.6 1205.81 L1142.01 1205.81 L1141.42 1205.81 L1140.84 1205.81 L1140.25 1205.81 L1139.67 1205.81 L1139.08 1205.81 L1138.49 1205.81 L1137.91 1205.81 L1137.32 1205.81 L1136.73 1205.81 L1136.15 1205.81 L1135.56 1205.81 L1134.97 1205.81 L1134.39 1205.81 L1133.8 1205.81 L1133.21 1205.81 L1132.63 1205.81 L1132.04 1205.81 L1131.46 1205.81 L1130.87 1205.81 L1130.28 1205.81 L1129.7 1205.81 L1129.11 1205.81 L1128.52 1205.81 L1127.94 1205.81 L1127.35 1205.81 L1126.76 1205.81 L1126.18 1205.81 L1125.59 1205.81 L1125.01 1205.81 L1124.42 1205.81 L1123.83 1205.81 L1123.25 1205.81 L1122.66 1205.81 L1122.07 1205.81 L1121.49 1205.81 L1120.9 1205.81 L1120.31 1205.81 L1119.73 1205.81 L1119.14 1205.81 L1118.55 1205.81 L1117.97 1205.81 L1117.38 1205.81 L1116.8 1205.81 L1116.21 1205.81 L1115.62 1205.81 L1115.04 1205.81 L1114.45 1205.81 L1113.86 1205.81 L1113.28 1205.81 L1112.69 1205.81 L1112.1 1205.81 L1111.52 1205.81 L1110.93 1205.81 L1110.34 1205.81 L1109.76 1205.81 L1109.17 1205.81 L1108.59 1205.81 L1108 1205.81 L1107.41 1205.81 L1106.83 1205.81 L1106.24 1205.81 L1105.65 1205.81 L1105.07 1205.81 L1104.48 1205.81 L1103.89 1205.81 L1103.31 1205.81 L1102.72 1205.81 L1102.14 1205.81 L1101.55 1205.81 L1100.96 1205.81 L1100.38 1205.81 L1099.79 1205.81 L1099.2 1205.81 L1098.62 1205.81 L1098.03 1205.81 L1097.44 1205.81 L1096.86 1205.81 L1096.27 1205.81 L1095.68 1205.81 L1095.1 1205.81 L1094.51 1205.81 L1093.93 1205.81 L1093.34 1205.81 L1092.75 1205.81 L1092.17 1205.81 L1091.58 1205.81 L1090.99 1205.81 L1090.41 1205.81 L1089.82 1205.81 L1089.23 1205.81 L1088.65 1205.81 L1088.06 1205.81 L1087.47 1205.81 L1086.89 1205.81 L1086.3 1205.81 L1085.72 1205.81 L1085.13 1205.81 L1084.54 1205.81 L1083.96 1205.81 L1083.37 1205.81 L1082.78 1205.81 L1082.2 1205.81 L1081.61 1205.81 L1081.02 1205.81 L1080.44 1205.81 L1079.85 1205.81 L1079.26 1205.81 L1078.68 1205.81 L1078.09 1205.81 L1077.51 1205.81 L1076.92 1205.81 L1076.33 1205.81 L1075.75 1205.81 L1075.16 1205.81 L1074.57 1205.81 L1073.99 1205.81 L1073.4 1205.81 L1072.81 1205.81 L1072.23 1205.81 L1071.64 1205.81 L1071.06 1205.81 L1070.47 1205.81 L1069.88 1205.81 L1069.3 1205.81 L1068.71 1205.81 L1068.12 1205.81 L1067.54 1205.81 L1066.95 1205.81 L1066.36 1205.81 L1065.78 1205.81 L1065.19 1205.81 L1064.6 1205.81 L1064.02 1205.81 L1063.43 1205.81 L1062.85 1205.81 L1062.26 1205.81 L1061.67 1205.81 L1061.09 1205.81 L1060.5 1205.81 L1059.91 1205.81 L1059.33 1205.81 L1058.74 1205.81 L1058.15 1205.81 L1057.57 1205.81 L1056.98 1205.81 L1056.39 1205.81 L1055.81 1205.81 L1055.22 1205.81 L1054.64 1205.81 L1054.05 1205.81 L1053.46 1205.81 L1052.88 1205.81 L1052.29 1205.81 L1051.7 1205.81 L1051.12 1205.81 L1050.53 1205.81 L1049.94 1205.81 L1049.36 1205.81 L1048.77 1205.81 L1048.19 1205.81 L1047.6 1205.81 L1047.01 1205.81 L1046.43 1205.81 L1045.84 1205.81 L1045.25 1205.81 L1044.67 1205.81 L1044.08 1205.81 L1043.49 1205.81 L1042.91 1205.81 L1042.32 1205.81 L1041.73 1205.81 L1041.15 1205.81 L1040.56 1205.81 L1039.98 1205.81 L1039.39 1205.81 L1038.8 1205.81 L1038.22 1205.81 L1037.63 1205.81 L1037.04 1205.81 L1036.46 1205.81 L1035.87 1205.81 L1035.28 1205.81 L1034.7 1205.81 L1034.11 1205.81 L1033.52 1205.81 L1032.94 1205.81 L1032.35 1205.81 L1031.77 1205.81 L1031.18 1205.81 L1030.59 1205.81 L1030.01 1205.81 L1029.42 1205.81 L1028.83 1205.81 L1028.25 1205.81 L1027.66 1205.81 L1027.07 1205.81 L1026.49 1205.81 L1025.9 1205.81 L1025.32 1205.81 L1024.73 1205.81 L1024.14 1205.81 L1023.56 1205.81 L1022.97 1205.81 L1022.38 1205.81 L1021.8 1205.81 L1021.21 1205.81 L1020.62 1205.81 L1020.04 1205.81 L1019.45 1205.81 L1018.86 1205.81 L1018.28 1205.81 L1017.69 1205.81 L1017.11 1205.81 L1016.52 1205.81 L1015.93 1205.81 L1015.35 1205.81 L1014.76 1205.81 L1014.17 1205.81 L1013.59 1205.81 L1013 1205.81 L1012.41 1205.81 L1011.83 1205.81 L1011.24 1205.81 L1010.65 1205.81 L1010.07 1205.81 L1009.48 1205.81 L1008.9 1205.81 L1008.31 1205.81 L1007.72 1205.81 L1007.14 1205.81 L1006.55 1205.81 L1005.96 1205.81 L1005.38 1205.81 L1004.79 1205.81 L1004.2 1205.81 L1003.62 1205.81 L1003.03 1205.81 L1002.44 1205.81 L1001.86 1205.81 L1001.27 1205.81 L1000.69 1205.81 L1000.1 1205.81 L999.513 1205.81 L998.926 1205.81 L998.34 1205.81 L997.754 1205.81 L997.167 1205.81 L996.581 1205.81 L995.994 1205.81 L995.408 1205.81 L994.822 1205.81 L994.235 1205.81 L993.649 1205.81 L993.062 1205.81 L992.476 1205.81 L991.889 1205.81 L991.303 1205.81 L990.717 1205.81 L990.13 1205.81 L989.544 1205.81 L988.957 1205.81 L988.371 1205.81 L987.785 1205.81 L987.198 1205.81 L986.612 1205.81 L986.025 1205.81  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1205.88 986.612,1205.88 987.198,1205.88 987.785,1205.88 988.371,1205.88 988.957,1205.88 989.544,1205.88 990.13,1205.88 990.717,1205.88 991.303,1205.88 991.889,1205.88 992.476,1205.88 993.062,1205.88 993.649,1205.88 994.235,1205.88 994.822,1205.88 995.408,1205.88 995.994,1205.88 996.581,1205.88 997.167,1205.88 997.754,1205.88 998.34,1205.88 998.926,1205.88 999.513,1205.88 1000.1,1205.88 1000.69,1205.88 1001.27,1205.88 1001.86,1205.88 1002.44,1205.88 1003.03,1205.88 1003.62,1205.88 1004.2,1205.88 1004.79,1205.88 1005.38,1205.88 1005.96,1205.88 1006.55,1205.88 1007.14,1205.88 1007.72,1205.88 1008.31,1205.88 1008.9,1205.88 1009.48,1205.88 1010.07,1205.88 1010.65,1205.88 1011.24,1205.88 1011.83,1205.88 1012.41,1205.88 1013,1205.88 1013.59,1205.88 1014.17,1205.88 1014.76,1205.88 1015.35,1205.88 1015.93,1205.88 1016.52,1205.88 1017.11,1205.88 1017.69,1205.88 1018.28,1205.88 1018.86,1205.88 1019.45,1205.88 1020.04,1205.88 1020.62,1205.88 1021.21,1205.88 1021.8,1205.88 1022.38,1205.88 1022.97,1205.88 1023.56,1205.88 1024.14,1205.88 1024.73,1205.88 1025.32,1205.88 1025.9,1205.88 1026.49,1205.88 1027.07,1205.88 1027.66,1205.88 1028.25,1205.88 1028.83,1205.88 1029.42,1205.88 1030.01,1205.88 1030.59,1205.88 1031.18,1205.88 1031.77,1205.88 1032.35,1205.88 1032.94,1205.88 1033.52,1205.88 1034.11,1205.88 1034.7,1205.88 1035.28,1205.88 1035.87,1205.88 1036.46,1205.88 1037.04,1205.88 1037.63,1205.88 1038.22,1205.88 1038.8,1205.88 1039.39,1205.88 1039.98,1205.88 1040.56,1205.88 1041.15,1205.88 1041.73,1205.88 1042.32,1205.88 1042.91,1205.88 1043.49,1205.88 1044.08,1205.88 1044.67,1205.88 1045.25,1205.88 1045.84,1205.88 1046.43,1205.88 1047.01,1205.88 1047.6,1205.88 1048.19,1205.88 1048.77,1205.88 1049.36,1205.88 1049.94,1205.88 1050.53,1205.88 1051.12,1205.88 1051.7,1205.88 1052.29,1205.88 1052.88,1205.88 1053.46,1205.88 1054.05,1205.88 1054.64,1205.88 1055.22,1205.88 1055.81,1205.88 1056.39,1205.88 1056.98,1205.88 1057.57,1205.88 1058.15,1205.88 1058.74,1205.88 1059.33,1205.88 1059.91,1205.88 1060.5,1205.88 1061.09,1205.88 1061.67,1205.88 1062.26,1205.88 1062.85,1205.88 1063.43,1205.88 1064.02,1205.88 1064.6,1205.88 1065.19,1205.88 1065.78,1205.88 1066.36,1205.88 1066.95,1205.88 1067.54,1205.88 1068.12,1205.88 1068.71,1205.88 1069.3,1205.88 1069.88,1205.88 1070.47,1205.88 1071.06,1205.88 1071.64,1205.88 1072.23,1205.88 1072.81,1205.88 1073.4,1205.88 1073.99,1205.88 1074.57,1205.88 1075.16,1205.88 1075.75,1205.88 1076.33,1205.88 1076.92,1205.88 1077.51,1205.88 1078.09,1205.88 1078.68,1205.88 1079.26,1205.88 1079.85,1205.88 1080.44,1205.88 1081.02,1205.88 1081.61,1205.88 1082.2,1205.88 1082.78,1205.88 1083.37,1205.88 1083.96,1205.88 1084.54,1205.88 1085.13,1205.88 1085.72,1205.88 1086.3,1205.88 1086.89,1205.88 1087.47,1205.88 1088.06,1205.88 1088.65,1205.88 1089.23,1205.88 1089.82,1205.88 1090.41,1205.88 1090.99,1205.88 1091.58,1205.88 1092.17,1205.88 1092.75,1205.88 1093.34,1205.88 1093.93,1205.88 1094.51,1205.88 1095.1,1205.88 1095.68,1205.88 1096.27,1205.88 1096.86,1205.88 1097.44,1205.88 1098.03,1205.88 1098.62,1205.88 1099.2,1205.88 1099.79,1205.88 1100.38,1205.88 1100.96,1205.88 1101.55,1205.88 1102.14,1205.88 1102.72,1205.88 1103.31,1205.88 1103.89,1205.88 1104.48,1205.88 1105.07,1205.88 1105.65,1205.88 1106.24,1205.88 1106.83,1205.88 1107.41,1205.88 1108,1205.88 1108.59,1205.88 1109.17,1205.88 1109.76,1205.88 1110.34,1205.88 1110.93,1205.88 1111.52,1205.88 1112.1,1205.88 1112.69,1205.88 1113.28,1205.88 1113.86,1205.88 1114.45,1205.88 1115.04,1205.88 1115.62,1205.88 1116.21,1205.88 1116.8,1205.88 1117.38,1205.88 1117.97,1205.88 1118.55,1205.88 1119.14,1205.88 1119.73,1205.88 1120.31,1205.88 1120.9,1205.88 1121.49,1205.88 1122.07,1205.88 1122.66,1205.88 1123.25,1205.88 1123.83,1205.88 1124.42,1205.88 1125.01,1205.88 1125.59,1205.88 1126.18,1205.88 1126.76,1205.88 1127.35,1205.88 1127.94,1205.88 1128.52,1205.88 1129.11,1205.88 1129.7,1205.88 1130.28,1205.88 1130.87,1205.88 1131.46,1205.88 1132.04,1205.88 1132.63,1205.88 1133.21,1205.88 1133.8,1205.88 1134.39,1205.88 1134.97,1205.88 1135.56,1205.88 1136.15,1205.88 1136.73,1205.88 1137.32,1205.88 1137.91,1205.88 1138.49,1205.88 1139.08,1205.88 1139.67,1205.88 1140.25,1205.88 1140.84,1205.88 1141.42,1205.88 1142.01,1205.88 1142.6,1205.88 1143.18,1205.88 1143.77,1205.88 1144.36,1205.88 1144.94,1205.88 1145.53,1205.88 1146.12,1205.88 1146.7,1205.88 1147.29,1205.88 1147.88,1205.88 1148.46,1205.88 1149.05,1205.88 1149.63,1205.88 1150.22,1205.88 1150.81,1205.88 1151.39,1205.88 1151.98,1205.88 1152.57,1205.88 1153.15,1205.88 1153.74,1205.88 1154.33,1205.88 1154.91,1205.88 1155.5,1205.88 1156.09,1205.88 1156.67,1205.88 1157.26,1205.88 1157.84,1205.88 1158.43,1205.88 1159.02,1205.88 1159.6,1205.88 1160.19,1205.88 1160.78,1205.88 1161.36,1205.88 1161.95,1205.88 1162.54,1205.88 1163.12,1205.88 1163.71,1205.88 1164.29,1205.88 1164.88,1205.88 1165.47,1205.88 1166.05,1205.88 1166.64,1205.88 1167.23,1205.88 1167.81,1205.88 1168.4,1205.88 1168.99,1205.88 1169.57,1205.88 1170.16,1205.88 1170.75,1205.88 1171.33,1205.88 1171.92,1205.88 1172.5,1205.88 1173.09,1205.88 1173.68,1205.88 1174.26,1205.88 1174.85,1205.88 1175.44,1205.88 1176.02,1205.88 1176.61,1205.88 1177.2,1205.88 1177.78,1205.88 1178.37,1205.88 1178.96,1205.88 1179.54,1205.88 1180.13,1205.88 1180.71,1205.88 1181.3,1205.88 1181.89,1205.88 1182.47,1205.88 1183.06,1205.88 1183.65,1205.88 1184.23,1205.88 1184.82,1205.88 1185.41,1205.88 1185.99,1205.88 1186.58,1205.88 1187.16,1205.88 1187.75,1205.88 1188.34,1205.88 1188.92,1205.88 1189.51,1205.88 1190.1,1205.88 1190.68,1205.88 1191.27,1205.88 1191.86,1205.88 1192.44,1205.88 1193.03,1205.88 1193.62,1205.88 1194.2,1205.88 1194.79,1205.88 1195.37,1205.88 1195.96,1205.88 1196.55,1205.88 1197.13,1205.88 1197.72,1205.88 1198.31,1205.88 1198.89,1205.88 1199.48,1205.88 1200.07,1205.88 1200.65,1205.88 1201.24,1205.88 1201.83,1205.88 1202.41,1205.88 1203,1205.88 1203.58,1205.88 1204.17,1205.88 1204.76,1205.88 1205.34,1205.88 1205.93,1205.88 1206.52,1205.88 1207.1,1205.88 1207.69,1205.88 1208.28,1205.88 1208.86,1205.88 1209.45,1205.88 1210.03,1205.88 1210.62,1205.88 1211.21,1205.88 1211.79,1205.88 1212.38,1205.88 1212.97,1205.88 1213.55,1205.88 1214.14,1205.88 1214.73,1205.88 1215.31,1205.88 1215.9,1205.88 1216.49,1205.88 1217.07,1205.88 1217.66,1205.88 1218.24,1205.88 1218.83,1205.88 1219.42,1205.88 1220,1205.88 1220.59,1205.88 1221.18,1205.88 1221.76,1205.88 1222.35,1205.88 1222.94,1205.88 1223.52,1205.88 1224.11,1205.88 1224.7,1205.88 1225.28,1205.88 1225.87,1205.88 1226.45,1205.88 1227.04,1205.88 1227.63,1205.88 1228.21,1205.88 1228.8,1205.88 1229.39,1205.88 1229.97,1205.88 1230.56,1205.88 1231.15,1205.88 1231.73,1205.88 1232.32,1205.88 1232.91,1205.88 1233.49,1205.88 1234.08,1205.88 1234.66,1205.88 1235.25,1205.88 1235.84,1205.88 1236.42,1205.88 1237.01,1205.88 1237.6,1205.88 1238.18,1205.88 1238.77,1205.88 1239.36,1205.88 1239.94,1205.88 1240.53,1205.88 1241.11,1205.88 1241.7,1205.88 1242.29,1205.88 1242.87,1205.88 1243.46,1205.88 1244.05,1205.88 1244.63,1205.88 1245.22,1205.88 1245.81,1205.88 1246.39,1205.88 1246.98,1205.88 1247.57,1205.88 1248.15,1205.88 1248.74,1205.88 1249.32,1205.88 1249.91,1205.88 1250.5,1205.88 1251.08,1205.88 1251.67,1205.88 1252.26,1205.88 1252.84,1205.88 1253.43,1205.88 1254.02,1205.88 1254.6,1205.88 1255.19,1205.88 1255.78,1205.88 1256.36,1205.88 1256.95,1205.88 1257.53,1205.88 1258.12,1205.88 1258.71,1205.88 1259.29,1205.88 1259.88,1205.88 1260.47,1205.88 1261.05,1205.88 1261.64,1205.88 1262.23,1205.88 1262.81,1205.88 1263.4,1205.88 1263.98,1205.88 1264.57,1205.88 1265.16,1205.88 1265.74,1205.88 1266.33,1205.88 1266.92,1205.88 1267.5,1205.88 1268.09,1205.88 1268.68,1205.88 1269.26,1205.88 1269.85,1205.88 1270.44,1205.88 1271.02,1205.88 1271.61,1205.88 1272.19,1205.88 1272.78,1205.88 1273.37,1205.88 1273.95,1205.88 1274.54,1205.88 1275.13,1205.88 1275.71,1205.88 1276.3,1205.88 1276.89,1205.88 1277.47,1205.88 1278.06,1205.88 1278.65,1205.88 1279.23,1205.88 1279.82,1205.88 1280.4,1205.88 1280.99,1205.88 1281.58,1205.88 1282.16,1205.88 1282.75,1205.88 1283.34,1205.88 1283.92,1205.88 1284.51,1205.88 1285.1,1205.88 1285.68,1205.88 1286.27,1205.88 1286.86,1205.88 1287.44,1205.88 1288.03,1205.88 1288.61,1205.88 1289.2,1205.88 1289.79,1205.88 1290.37,1205.88 1290.96,1205.88 1291.55,1205.88 1292.13,1205.88 1292.72,1205.88 1293.31,1205.88 1293.89,1205.88 1294.48,1205.88 1295.06,1205.88 1295.65,1205.88 1296.24,1205.88 1296.82,1205.88 1297.41,1205.88 1298,1205.88 1298.58,1205.88 1299.17,1205.88 1299.76,1205.88 1300.34,1205.88 1300.93,1205.88 1301.52,1205.88 1302.1,1205.88 1302.69,1205.88 1303.27,1205.88 1303.86,1205.88 1304.45,1205.88 1305.03,1205.88 1305.62,1205.88 1306.21,1205.88 1306.79,1205.88 1307.38,1205.88 1307.97,1205.88 1308.55,1205.88 1309.14,1205.88 1309.73,1205.88 1310.31,1205.88 1310.9,1205.88 1311.48,1205.88 1312.07,1205.88 1312.66,1205.88 1313.24,1205.88 1313.83,1205.88 1314.42,1205.88 1315,1205.88 1315.59,1205.88 1316.18,1205.88 1316.76,1205.88 1317.35,1205.88 1317.93,1205.88 1318.52,1205.88 1319.11,1205.88 1319.69,1205.88 1320.28,1205.88 1320.87,1205.88 1321.45,1205.88 1322.04,1205.88 1322.63,1205.88 1323.21,1205.88 1323.8,1205.88 1324.39,1205.88 1324.97,1205.88 1325.56,1205.88 1326.14,1205.88 1326.73,1205.88 1327.32,1205.88 1327.9,1205.88 1328.49,1205.88 1329.08,1205.88 1329.66,1205.88 1330.25,1205.88 1330.84,1205.88 1331.42,1205.88 1332.01,1205.88 1332.6,1205.88 1333.18,1205.88 1333.77,1205.88 1334.35,1205.88 1334.94,1205.88 1335.53,1205.88 1336.11,1205.88 1336.7,1205.88 1337.29,1205.88 1337.87,1205.88 1338.46,1205.88 1339.05,1205.88 1339.63,1205.88 1340.22,1205.88 1340.8,1205.88 1341.39,1205.88 1341.98,1205.88 1342.56,1205.88 1343.15,1205.88 1343.74,1205.88 1344.32,1205.88 1344.91,1205.88 1345.5,1205.88 1346.08,1205.88 1346.67,1205.88 1347.26,1205.88 1347.84,1205.88 1348.43,1205.88 1349.01,1205.88 1349.6,1205.88 1350.19,1205.88 1350.77,1205.88 1351.36,1205.88 1351.95,1205.88 1352.53,1205.88 1353.12,1205.88 1353.71,1205.88 1354.29,1205.88 1354.88,1205.88 1355.47,1205.88 1356.05,1205.88 1356.64,1205.88 1357.22,1205.88 1357.81,1205.88 1358.4,1205.88 1358.98,1205.88 1359.57,1205.88 1360.16,1205.88 1360.74,1205.88 1361.33,1205.88 1361.92,1205.88 1362.5,1205.88 1363.09,1205.88 1363.68,1205.88 1364.26,1205.88 1364.85,1205.88 1365.43,1205.88 1366.02,1205.88 1366.61,1205.88 1367.19,1205.88 1367.78,1205.88 1368.37,1205.88 1368.95,1205.88 1369.54,1205.88 1370.13,1205.88 1370.71,1205.88 1371.3,1205.88 1371.88,1205.88 1372.47,1205.88 1373.06,1205.88 1373.64,1205.88 1374.23,1205.88 1374.82,1205.88 1375.4,1205.88 1375.99,1205.88 1376.58,1205.88 1377.16,1205.88 1377.75,1205.88 1378.34,1205.88 1378.92,1205.88 1379.51,1205.88 1380.09,1205.88 1380.68,1205.88 1381.27,1205.88 1381.85,1205.88 1382.44,1205.88 1383.03,1205.88 1383.61,1205.88 1384.2,1205.88 1384.79,1205.88 1385.37,1205.88 1385.96,1205.88 1386.55,1205.88 1387.13,1205.88 1387.72,1205.88 1388.3,1205.88 1388.89,1205.88 1389.48,1205.88 1390.06,1205.88 1390.65,1205.88 1391.24,1205.88 1391.82,1205.88 1392.41,1205.88 1393,1205.88 1393.58,1205.88 1394.17,1205.88 1394.75,1205.88 1395.34,1205.88 1395.93,1205.88 1396.51,1205.88 1397.1,1205.88 1397.69,1205.88 1398.27,1205.88 1398.86,1205.88 1399.45,1205.88 1400.03,1205.88 1400.62,1205.88 1401.21,1205.88 1401.79,1205.88 1402.38,1205.88 1402.96,1205.88 1403.55,1205.88 1404.14,1205.88 1404.72,1205.88 1405.31,1205.88 1405.9,1205.88 1406.48,1205.88 1407.07,1205.88 1407.66,1205.88 1408.24,1205.88 1408.83,1205.88 1409.42,1205.88 1410,1205.88 1410.59,1205.88 1411.17,1205.88 1411.76,1205.88 1412.35,1205.88 1412.93,1205.88 1413.52,1205.88 1414.11,1205.88 1414.69,1205.88 1415.28,1205.88 1415.87,1205.88 1416.45,1205.88 1417.04,1205.88 1417.63,1205.88 1418.21,1205.88 1418.8,1205.88 1419.38,1205.88 1419.97,1205.88 1420.56,1205.88 1421.14,1205.88 1421.73,1205.88 1422.32,1205.88 1422.9,1205.88 1423.49,1205.88 1424.08,1205.88 1424.66,1205.88 1425.25,1205.88 1425.83,1205.88 1426.42,1205.88 1427.01,1205.88 1427.59,1205.88 1428.18,1205.88 1428.77,1205.88 1429.35,1205.88 1429.94,1205.88 1430.53,1205.88 1431.11,1205.88 1431.7,1205.88 1432.29,1205.88 1432.87,1205.88 1433.46,1205.88 1434.04,1205.88 1434.63,1205.88 1435.22,1205.88 1435.8,1205.88 1436.39,1205.88 1436.98,1205.88 1437.56,1205.88 1438.15,1205.88 1438.74,1205.88 1439.32,1205.88 1439.91,1205.88 1440.5,1205.88 1441.08,1205.88 1441.67,1205.88 1442.25,1205.88 1442.84,1205.88 1443.43,1205.88 1444.01,1205.88 1444.6,1205.88 1445.19,1205.88 1445.77,1205.88 1446.36,1205.88 1446.95,1205.88 1447.53,1205.88 1448.12,1205.88 1448.7,1205.88 1449.29,1205.88 1449.88,1205.88 1450.46,1205.88 1451.05,1205.88 1451.64,1205.88 1452.22,1205.88 1452.81,1205.88 1453.4,1205.88 1453.98,1205.88 1454.57,1205.88 1455.16,1205.88 1455.74,1205.88 1456.33,1205.88 1456.91,1205.88 1457.5,1205.88 1458.09,1205.88 1458.67,1205.88 1459.26,1205.88 1459.85,1205.88 1460.43,1205.88 1461.02,1205.88 1461.61,1205.88 1462.19,1205.88 1462.78,1205.88 1463.37,1205.88 1463.95,1205.88 1464.54,1205.88 1465.12,1205.88 1465.71,1205.88 1466.3,1205.88 1466.88,1205.88 1467.47,1205.88 1468.06,1205.88 1468.64,1205.88 1469.23,1205.88 1469.82,1205.88 1470.4,1205.88 1470.99,1205.88 1471.57,1205.88 1472.16,1205.88 1472.75,1205.88 1473.33,1205.88 1473.92,1205.88 1474.51,1205.88 1475.09,1205.88 1475.68,1205.88 1476.27,1205.88 1476.85,1205.88 1477.44,1205.88 1478.03,1205.88 1478.61,1205.88 1479.2,1205.88 1479.78,1205.88 1480.37,1205.88 1480.96,1205.88 1481.54,1205.88 1482.13,1205.88 1482.72,1205.88 1483.3,1205.88 1483.89,1205.88 1484.48,1205.88 1485.06,1205.88 1485.65,1205.88 1486.24,1205.88 1486.82,1205.88 1487.41,1205.88 1487.99,1205.88 1488.58,1205.88 1489.17,1205.88 1489.75,1205.88 1490.34,1205.88 1490.93,1205.88 1491.51,1205.88 1492.1,1205.88 1492.69,1205.88 1493.27,1205.88 1493.86,1205.88 1494.45,1205.88 1495.03,1205.88 1495.62,1205.88 1496.2,1205.88 1496.79,1205.88 1497.38,1205.88 1497.96,1205.88 1498.55,1205.88 1499.14,1205.88 1499.72,1205.88 1500.31,1205.88 1500.9,1205.88 1501.48,1205.88 1502.07,1205.88 1502.65,1205.88 1503.24,1205.88 1503.83,1205.88 1504.41,1205.88 1505,1205.88 1505.59,1205.88 1506.17,1205.88 1506.76,1205.88 1507.35,1205.88 1507.93,1205.88 1508.52,1205.88 1509.11,1205.88 1509.69,1205.88 1510.28,1205.88 1510.86,1205.88 1511.45,1205.88 1512.04,1205.88 1512.62,1205.88 1513.21,1205.88 1513.8,1205.88 1514.38,1205.88 1514.97,1205.88 1515.56,1205.88 1516.14,1205.88 1516.73,1205.88 1517.32,1205.88 1517.9,1205.88 1518.49,1205.88 1519.07,1205.88 1519.66,1205.88 1520.25,1205.88 1520.83,1205.88 1521.42,1205.88 1522.01,1205.88 1522.59,1205.88 1523.18,1205.88 1523.77,1205.88 1524.35,1205.88 1524.94,1205.88 1525.52,1205.88 1526.11,1205.88 1526.7,1205.88 1527.28,1205.88 1527.87,1205.88 1528.46,1205.88 1529.04,1205.88 1529.63,1205.88 1530.22,1205.88 1530.8,1205.88 1531.39,1205.88 1531.98,1205.88 1532.56,1205.88 1533.15,1205.88 1533.73,1205.88 1534.32,1205.88 1534.91,1205.88 1535.49,1205.88 1536.08,1205.88 1536.67,1205.88 1537.25,1205.88 1537.84,1205.88 1538.43,1205.88 1539.01,1205.88 1539.6,1205.88 1540.19,1205.88 1540.77,1205.88 1541.36,1205.88 1541.94,1205.88 1542.53,1205.88 1543.12,1205.88 1543.7,1205.88 1544.29,1205.88 1544.88,1205.88 1545.46,1205.88 1546.05,1205.88 1546.64,1205.88 1547.22,1205.88 1547.81,1205.88 1548.4,1205.88 1548.98,1205.88 1549.57,1205.88 1550.15,1205.88 1550.74,1205.88 1551.33,1205.88 1551.91,1205.88 1552.5,1205.88 1553.09,1205.88 1553.67,1205.88 1554.26,1205.88 1554.85,1205.88 1555.43,1205.88 1556.02,1205.88 1556.6,1205.88 1557.19,1205.88 1557.78,1205.88 1558.36,1205.88 1558.95,1205.88 1559.54,1205.88 1560.12,1205.88 1560.71,1205.88 1561.3,1205.88 1561.88,1205.88 1562.47,1205.88 1563.06,1205.88 1563.64,1205.88 1564.23,1205.88 1564.81,1205.88 1565.4,1205.88 1565.99,1205.88 1566.57,1205.88 1567.16,1205.88 1567.75,1205.88 1568.33,1205.88 1568.92,1205.88 1569.51,1205.88 1570.09,1205.88 1570.68,1205.88 1571.27,1205.88 1571.85,1205.88 1572.44,1205.88 1573.02,1205.88 1573.61,1205.88 1574.2,1205.88 1574.78,1205.88 1575.37,1205.88 1575.96,1205.88 1576.54,1205.88 1577.13,1205.88 1577.72,1205.88 1578.3,1205.88 1578.89,1205.88 1579.47,1205.88 1580.06,1205.88 1580.65,1205.88 1581.23,1205.88 1581.82,1205.88 1582.41,1205.88 1582.99,1205.88 1583.58,1205.88 1584.17,1205.88 1584.75,1205.88 1585.34,1205.88 1585.93,1205.88 1586.51,1205.88 1587.1,1205.88 1587.68,1205.88 1588.27,1205.88 1588.86,1205.88 1589.44,1205.88 1590.03,1205.88 1590.62,1205.88 1591.2,1205.88 1591.79,1205.88 1592.38,1205.88 1592.96,1205.88 1593.55,1205.88 1594.14,1205.88 1594.72,1205.88 1595.31,1205.88 1595.89,1205.88 1596.48,1205.88 1597.07,1205.88 1597.65,1205.88 1598.24,1205.88 1598.83,1205.88 1599.41,1205.88 1600,1205.88 1600.59,1205.88 1601.17,1205.88 1601.76,1205.88 1602.34,1205.88 1602.93,1205.88 1603.52,1205.88 1604.1,1205.88 1604.69,1205.88 1605.28,1205.88 1605.86,1205.88 1606.45,1205.88 1607.04,1205.88 1607.62,1205.88 1608.21,1205.88 1608.8,1205.88 1609.38,1205.88 1609.97,1205.88 1610.55,1205.88 1611.14,1205.88 1611.73,1205.88 1612.31,1205.88 1612.9,1205.88 1613.49,1205.88 1614.07,1205.88 1614.66,1205.88 1615.25,1205.88 1615.83,1205.88 1616.42,1205.88 1617.01,1205.88 1617.59,1205.88 1618.18,1205.88 1618.76,1205.88 1619.35,1205.88 1619.94,1205.88 1620.52,1205.88 1621.11,1205.88 1621.7,1205.88 1622.28,1205.88 1622.87,1205.88 1623.46,1205.88 1624.04,1205.88 1624.63,1205.88 1625.22,1205.88 1625.8,1205.88 1626.39,1205.88 1626.97,1205.88 1627.56,1205.88 1628.15,1205.88 1628.73,1205.88 1629.32,1205.88 1629.91,1205.88 1630.49,1205.88 1631.08,1205.88 1631.67,1205.88 1632.25,1205.88 1632.84,1205.88 1633.42,1205.88 1634.01,1205.88 1634.6,1205.88 1635.18,1205.88 1635.77,1205.88 1636.36,1205.88 1636.94,1205.88 1637.53,1205.88 1638.12,1205.88 1638.7,1205.88 1639.29,1205.88 1639.88,1205.88 1640.46,1205.88 1641.05,1205.88 1641.63,1205.88 1642.22,1205.88 1642.81,1205.88 1643.39,1205.88 1643.98,1205.88 1644.57,1205.88 1645.15,1205.88 1645.74,1205.88 1646.33,1205.88 1646.91,1205.88 1647.5,1205.88 1648.09,1205.88 1648.67,1205.88 1649.26,1205.88 1649.84,1205.88 1650.43,1205.88 1651.02,1205.88 1651.6,1205.88 1652.19,1205.88 1652.78,1205.88 1653.36,1205.88 1653.95,1205.88 1654.54,1205.88 1655.12,1205.88 1655.71,1205.88 1656.29,1205.88 1656.88,1205.88 1657.47,1205.88 1658.05,1205.88 1658.64,1205.88 1659.23,1205.88 1659.81,1205.88 1660.4,1205.88 1660.99,1205.88 1661.57,1205.88 1662.16,1205.88 1662.75,1205.88 1663.33,1205.88 1663.92,1205.88 1664.5,1205.88 1665.09,1205.88 1665.68,1205.88 1666.26,1205.88 1666.85,1205.88 1667.44,1205.88 1668.02,1205.88 1668.61,1205.88 1669.2,1205.88 1669.78,1205.88 1670.37,1205.88 1670.96,1205.88 1671.54,1205.88 1672.13,1205.88 1672.71,1205.88 1673.3,1205.88 1673.89,1205.88 1674.47,1205.88 1675.06,1205.88 1675.65,1205.88 1676.23,1205.88 1676.82,1205.88 1677.41,1205.88 1677.99,1205.88 1678.58,1205.88 1679.17,1205.88 1679.75,1205.88 1680.34,1205.88 1680.92,1205.88 1681.51,1205.88 1682.1,1205.88 1682.68,1205.88 1683.27,1205.88 1683.86,1205.88 1684.44,1205.88 1685.03,1205.88 1685.62,1205.88 1686.2,1205.88 1686.79,1205.88 1687.37,1205.88 1687.96,1205.88 1688.55,1205.88 1689.13,1205.88 1689.72,1205.88 1690.31,1205.88 1690.89,1205.88 1691.48,1205.88 1692.07,1205.88 1692.65,1205.88 1693.24,1205.88 1693.83,1205.88 1694.41,1205.88 1695,1205.88 1695.58,1205.88 1696.17,1205.88 1696.76,1205.88 1697.34,1205.88 1697.93,1205.88 1698.52,1205.88 1699.1,1205.88 1699.69,1205.88 1700.28,1205.88 1700.86,1205.88 1701.45,1205.88 1702.04,1205.88 1702.62,1205.88 1703.21,1205.88 1703.79,1205.88 1704.38,1205.88 1704.97,1205.88 1705.55,1205.88 1706.14,1205.88 1706.73,1205.88 1707.31,1205.88 1707.9,1205.88 1708.49,1205.88 1709.07,1205.88 1709.66,1205.88 1710.24,1205.88 1710.83,1205.88 1711.42,1205.88 1712,1205.88 1712.59,1205.88 1713.18,1205.88 1713.76,1205.88 1714.35,1205.88 1714.94,1205.88 1715.52,1205.88 1716.11,1205.88 1716.7,1205.88 1717.28,1205.88 1717.87,1205.88 1718.45,1205.88 1719.04,1205.88 1719.63,1205.88 1720.21,1205.88 1720.8,1205.88 1721.39,1205.88 1721.97,1205.88 1722.56,1205.88 1723.15,1205.88 1723.73,1205.88 1724.32,1205.88 1724.91,1205.88 1725.49,1205.88 1726.08,1205.88 1726.66,1205.88 1727.25,1205.88 1727.84,1205.88 1728.42,1205.88 1729.01,1205.88 1729.6,1205.88 1730.18,1205.88 1730.77,1205.88 1731.36,1205.88 1731.94,1205.88 1732.53,1205.88 1733.11,1205.88 1733.7,1205.88 1734.29,1205.88 1734.87,1205.88 1735.46,1205.88 1736.05,1205.88 1736.63,1205.88 1737.22,1205.88 1737.81,1205.88 1738.39,1205.88 1738.98,1205.88 1739.57,1205.88 1740.15,1205.88 1740.74,1205.88 1741.32,1205.88 1741.91,1205.88 1742.5,1205.88 1743.08,1205.88 1743.67,1205.88 1744.26,1205.88 1744.84,1205.88 1745.43,1205.88 1746.02,1205.88 1746.6,1205.88 1747.19,1205.88 1747.78,1205.88 1748.36,1205.88 1748.95,1205.88 1749.53,1205.88 1750.12,1205.88 1750.71,1205.88 1751.29,1205.88 1751.88,1205.88 1752.47,1205.88 1753.05,1205.88 1753.64,1205.88 1754.23,1205.88 1754.81,1205.88 1755.4,1205.88 1755.99,1205.88 1756.57,1205.88 1757.16,1205.88 1757.74,1205.88 1758.33,1205.88 1758.92,1205.88 1759.5,1205.88 1760.09,1205.88 1760.68,1205.88 1761.26,1205.88 1761.85,1205.88 1762.44,1205.88 1763.02,1205.88 1763.61,1205.88 1764.19,1205.88 1764.78,1205.88 1765.37,1205.88 1765.95,1205.88 1766.54,1205.88 1767.13,1205.88 1767.71,1205.88 1768.3,1205.88 1768.89,1205.88 1769.47,1205.88 1770.06,1205.88 1770.65,1205.88 1771.23,1205.88 1771.82,1205.88 1772.4,1205.88 1772.99,1205.88 1773.58,1205.88 1774.16,1205.88 1774.75,1205.88 1775.34,1205.88 1775.92,1205.88 1776.51,1205.88 1777.1,1205.88 1777.68,1205.88 1778.27,1205.88 1778.86,1205.88 1779.44,1205.88 1780.03,1205.88 1780.61,1205.88 1781.2,1205.88 1781.79,1205.88 1782.37,1205.88 1782.96,1205.88 1783.55,1205.88 1784.13,1205.88 1784.72,1205.88 1785.31,1205.88 1785.89,1205.88 1786.48,1205.88 1787.06,1205.88 1787.65,1205.88 1788.24,1205.88 1788.82,1205.88 1789.41,1205.88 1790,1205.88 1790.58,1205.88 1791.17,1205.88 1791.76,1205.88 1792.34,1205.88 1792.93,1205.88 1793.52,1205.88 1794.1,1205.88 1794.69,1205.88 1795.27,1205.88 1795.86,1205.88 1796.45,1205.88 1797.03,1205.88 1797.62,1205.88 1798.21,1205.88 1798.79,1205.88 1799.38,1205.88 1799.97,1205.88 1800.55,1205.88 1801.14,1205.88 1801.73,1205.88 1802.31,1205.88 1802.9,1205.88 1803.48,1205.88 1804.07,1205.88 1804.66,1205.88 1805.24,1205.88 1805.83,1205.88 1806.42,1205.88 1807,1205.88 1807.59,1205.88 1808.18,1205.88 1808.76,1205.88 1809.35,1205.88 1809.94,1205.88 1810.52,1205.88 1811.11,1205.88 1811.69,1205.88 1812.28,1205.88 1812.87,1205.88 1813.45,1205.88 1814.04,1205.88 1814.63,1205.88 1815.21,1205.88 1815.8,1205.88 1816.39,1205.88 1816.97,1205.88 1817.56,1205.88 1818.14,1205.88 1818.73,1205.88 1819.32,1205.88 1819.9,1205.88 1820.49,1205.88 1821.08,1205.88 1821.66,1205.88 1822.25,1205.88 1822.84,1205.88 1823.42,1205.88 1824.01,1205.88 1824.6,1205.88 1825.18,1205.88 1825.77,1205.88 1826.35,1205.88 1826.94,1205.88 1827.53,1205.88 1828.11,1205.88 1828.7,1205.88 1829.29,1205.88 1829.87,1205.88 1830.46,1205.88 1831.05,1205.88 1831.63,1205.88 1832.22,1205.88 1832.81,1205.88 1833.39,1205.88 1833.98,1205.88 1834.56,1205.88 1835.15,1205.88 1835.74,1205.88 1836.32,1205.88 1836.91,1205.88 1837.5,1205.88 1838.08,1205.88 1838.67,1205.88 1839.26,1205.88 1839.84,1205.88 1840.43,1205.88 1841.01,1205.88 1841.6,1205.88 1842.19,1205.88 1842.77,1205.88 1843.36,1205.88 1843.95,1205.88 1844.53,1205.88 1845.12,1205.88 1845.71,1205.88 1846.29,1205.88 1846.88,1205.88 1847.47,1205.88 1848.05,1205.88 1848.64,1205.88 1849.22,1205.88 1849.81,1205.88 1850.4,1205.88 1850.98,1205.88 1851.57,1205.88 1852.16,1205.88 1852.74,1205.88 1853.33,1205.88 1853.92,1205.88 1854.5,1205.88 1855.09,1205.88 1855.68,1205.88 1856.26,1205.88 1856.85,1205.88 1857.43,1205.88 1858.02,1205.88 1858.61,1205.88 1859.19,1205.88 1859.78,1205.88 1860.37,1205.88 1860.95,1205.88 1861.54,1205.88 1862.13,1205.88 1862.71,1205.88 1863.3,1205.88 1863.88,1205.88 1864.47,1205.88 1865.06,1205.88 1865.64,1205.88 1866.23,1205.88 1866.82,1205.88 1867.4,1205.88 1867.99,1205.88 1868.58,1205.88 1869.16,1205.88 1869.75,1205.88 1870.34,1205.88 1870.92,1205.88 1871.51,1205.88 1872.09,1205.88 1872.68,1205.88 1873.27,1205.88 1873.85,1205.88 1874.44,1205.88 1875.03,1205.88 1875.61,1205.88 1876.2,1205.88 1876.79,1205.88 1877.37,1205.88 1877.96,1205.88 1878.55,1205.88 1879.13,1205.88 1879.72,1205.88 1880.3,1205.88 1880.89,1205.88 1881.48,1205.88 1882.06,1205.88 1882.65,1205.88 1883.24,1205.88 1883.82,1205.88 1884.41,1205.88 1885,1205.88 1885.58,1205.88 1886.17,1205.88 1886.76,1205.88 1887.34,1205.88 1887.93,1205.88 1888.51,1205.88 1889.1,1205.88 1889.69,1205.88 1890.27,1205.88 1890.86,1205.88 1891.45,1205.88 1892.03,1205.88 1892.62,1205.88 1893.21,1205.88 1893.79,1205.88 1894.38,1205.88 1894.96,1205.88 1895.55,1205.88 1896.14,1205.88 1896.72,1205.88 1897.31,1205.88 1897.9,1205.88 1898.48,1205.88 1899.07,1205.88 1899.66,1205.88 1900.24,1205.88 1900.83,1205.88 1901.42,1205.88 1902,1205.88 1902.59,1205.88 1903.17,1205.88 1903.76,1205.88 1904.35,1205.88 1904.93,1205.88 1905.52,1205.88 1906.11,1205.88 1906.69,1205.88 1907.28,1205.88 1907.87,1205.88 1908.45,1205.88 1909.04,1205.88 1909.63,1205.88 1910.21,1205.88 1910.8,1205.88 1911.38,1205.88 1911.97,1205.88 1912.56,1205.88 1913.14,1205.88 1913.73,1205.88 1914.32,1205.88 1914.9,1205.88 1915.49,1205.88 1916.08,1205.88 1916.66,1205.88 1917.25,1205.88 1917.83,1205.88 1918.42,1205.88 1919.01,1205.88 1919.59,1205.88 1920.18,1205.88 1920.77,1205.88 1921.35,1205.88 1921.94,1205.88 1922.53,1205.88 1923.11,1205.88 1923.7,1205.88 1924.29,1205.88 1924.87,1205.88 1925.46,1205.88 1926.04,1205.88 1926.63,1205.88 1927.22,1205.88 1927.8,1205.88 1928.39,1205.88 1928.98,1205.88 1929.56,1205.88 1930.15,1205.88 1930.74,1205.88 1931.32,1205.88 1931.91,1205.88 1932.5,1205.88 1933.08,1205.88 1933.67,1205.88 1934.25,1205.88 1934.84,1205.88 1935.43,1205.88 1936.01,1205.88 1936.6,1205.88 1937.19,1205.88 1937.77,1205.88 1938.36,1205.88 1938.95,1205.88 1939.53,1205.88 1940.12,1205.88 1940.71,1205.88 1941.29,1205.88 1941.88,1205.88 1942.46,1205.88 1943.05,1205.88 1943.64,1205.88 1944.22,1205.88 1944.81,1205.88 1945.4,1205.88 1945.98,1205.88 1946.57,1205.88 1947.16,1205.88 1947.74,1205.88 1948.33,1205.88 1948.91,1205.88 1949.5,1205.88 1950.09,1205.88 1950.67,1205.88 1951.26,1205.88 1951.85,1205.88 1952.43,1205.88 1953.02,1205.88 1953.61,1205.88 1954.19,1205.88 1954.78,1205.88 1955.37,1205.88 1955.95,1205.88 1956.54,1205.88 1957.12,1205.88 1957.71,1205.88 1958.3,1205.88 1958.88,1205.88 1959.47,1205.88 1960.06,1205.88 1960.64,1205.88 1961.23,1205.88 1961.82,1205.88 1962.4,1205.88 1962.99,1205.88 1963.58,1205.88 1964.16,1205.88 1964.75,1205.88 1965.33,1205.88 1965.92,1205.88 1966.51,1205.88 1967.09,1205.88 1967.68,1205.88 1968.27,1205.88 1968.85,1205.88 1969.44,1205.88 1970.03,1205.88 1970.61,1205.88 1971.2,1205.88 1971.78,1205.88 1972.37,1205.88 1972.96,1205.88 1973.54,1205.88 1974.13,1205.88 1974.72,1205.88 1975.3,1205.88 1975.89,1205.88 1976.48,1205.88 1977.06,1205.88 1977.65,1205.88 1978.24,1205.88 1978.82,1205.88 1979.41,1205.88 1979.99,1205.88 1980.58,1205.88 1981.17,1205.88 1981.75,1205.88 1982.34,1205.88 1982.93,1205.88 1983.51,1205.88 1984.1,1205.88 1984.69,1205.88 1985.27,1205.88 1985.86,1205.88 1986.45,1205.88 1987.03,1205.88 1987.62,1205.88 1988.2,1205.88 1988.79,1205.88 1989.38,1205.88 1989.96,1205.88 1990.55,1205.88 1991.14,1205.88 1991.72,1205.88 1992.31,1205.88 1992.9,1205.88 1993.48,1205.88 1994.07,1205.88 1994.65,1205.88 1995.24,1205.88 1995.83,1205.88 1996.41,1205.88 1997,1205.88 1997.59,1205.88 1998.17,1205.88 1998.76,1205.88 1999.35,1205.88 1999.93,1205.88 2000.52,1205.88 2001.11,1205.88 2001.69,1205.88 2002.28,1205.88 2002.86,1205.88 2003.45,1205.88 2004.04,1205.88 2004.62,1205.88 2005.21,1205.88 2005.8,1205.88 2006.38,1205.88 2006.97,1205.88 2007.56,1205.88 2008.14,1205.88 2008.73,1205.88 2009.32,1205.88 2009.9,1205.88 2010.49,1205.88 2011.07,1205.88 2011.66,1205.88 2012.25,1205.88 2012.83,1205.88 2013.42,1205.88 2014.01,1205.88 2014.59,1205.88 2015.18,1205.88 2015.77,1205.88 2016.35,1205.88 2016.94,1205.88 2017.53,1205.88 2018.11,1205.88 2018.7,1205.88 2019.28,1205.88 2019.87,1205.88 2020.46,1205.88 2021.04,1205.88 2021.63,1205.88 2022.22,1205.88 2022.8,1205.88 2023.39,1205.88 2023.98,1205.88 2024.56,1205.88 2025.15,1205.88 2025.73,1205.88 2026.32,1205.88 2026.91,1205.88 2027.49,1205.88 2028.08,1205.88 2028.67,1205.88 2029.25,1205.88 2029.84,1205.88 2030.43,1205.88 2031.01,1205.88 2031.6,1205.88 2032.19,1205.88 2032.77,1205.88 2033.36,1205.88 2033.94,1205.88 2034.53,1205.88 2035.12,1205.88 2035.7,1205.88 2036.29,1205.88 2036.88,1205.88 2037.46,1205.88 2038.05,1205.88 2038.64,1205.88 2039.22,1205.88 2039.81,1205.88 2040.4,1205.88 2040.98,1205.88 2041.57,1205.88 2042.15,1205.88 2042.74,1205.88 2043.33,1205.88 2043.91,1205.88 2044.5,1205.88 2045.09,1205.88 2045.67,1205.88 2046.26,1205.88 2046.85,1205.88 2047.43,1205.88 2048.02,1205.88 2048.6,1205.88 2049.19,1205.88 2049.78,1205.88 2050.36,1205.88 2050.95,1205.88 2051.54,1205.88 2052.12,1205.88 2052.71,1205.88 2053.3,1205.88 2053.88,1205.88 2054.47,1205.88 2055.06,1205.88 2055.64,1205.88 2056.23,1205.88 2056.81,1205.88 2057.4,1205.88 2057.99,1205.88 2058.57,1205.88 2059.16,1205.88 2059.75,1205.88 2060.33,1205.88 2060.92,1205.88 2061.51,1205.88 2062.09,1205.88 2062.68,1205.88 2063.27,1205.88 2063.85,1205.88 2064.44,1205.88 2065.02,1205.88 2065.61,1205.88 2066.2,1205.88 2066.78,1205.88 2067.37,1205.88 2067.96,1205.88 2068.54,1205.88 2069.13,1205.88 2069.72,1205.88 2070.3,1205.88 2070.89,1205.88 2071.48,1205.88 2072.06,1205.88 2072.65,1205.88 2073.23,1205.88 2073.82,1205.88 2074.41,1205.88 2074.99,1205.88 2075.58,1205.88 2076.17,1205.88 2076.75,1205.88 2077.34,1205.88 2077.93,1205.88 2078.51,1205.88 2079.1,1205.88 2079.68,1205.88 2080.27,1205.88 2080.86,1205.88 2081.44,1205.88 2082.03,1205.88 2082.62,1205.88 2083.2,1205.88 2083.79,1205.88 2084.38,1205.88 2084.96,1205.88 2085.55,1205.88 2086.14,1205.88 2086.72,1205.88 2087.31,1205.88 2087.89,1205.88 2088.48,1205.88 2089.07,1205.88 2089.65,1205.88 2090.24,1205.88 2090.83,1205.88 2091.41,1205.88 2092,1205.88 2092.59,1205.88 2093.17,1205.88 2093.76,1205.88 2094.35,1205.88 2094.93,1205.88 2095.52,1205.88 2096.1,1205.88 2096.69,1205.88 2097.28,1205.88 2097.86,1205.88 2098.45,1205.88 2099.04,1205.88 2099.62,1205.88 2100.21,1205.88 2100.8,1205.88 2101.38,1205.88 2101.97,1205.88 2102.55,1205.88 2103.14,1205.88 2103.73,1205.88 2104.31,1205.88 2104.9,1205.88 2105.49,1205.88 2106.07,1205.88 2106.66,1205.88 2107.25,1205.88 2107.83,1205.88 2108.42,1205.88 2109.01,1205.88 2109.59,1205.88 2110.18,1205.88 2110.76,1205.88 2111.35,1205.88 2111.94,1205.88 2112.52,1205.88 2113.11,1205.88 2113.7,1205.88 2114.28,1205.88 2114.87,1205.88 2115.46,1205.88 2116.04,1205.88 2116.63,1205.88 2117.22,1205.88 2117.8,1205.88 2118.39,1205.88 2118.97,1205.88 2119.56,1205.88 2120.15,1205.88 2120.73,1205.88 2121.32,1205.88 2121.91,1205.88 2122.49,1205.88 2123.08,1205.88 2123.67,1205.88 2124.25,1205.88 2124.84,1205.88 2125.42,1205.88 2126.01,1205.88 2126.6,1205.88 2127.18,1205.88 2127.77,1205.88 2128.36,1205.88 2128.94,1205.88 2129.53,1205.88 2130.12,1205.88 2130.7,1205.88 2131.29,1205.88 2131.88,1205.88 2132.46,1205.88 2133.05,1205.88 2133.63,1205.88 2134.22,1205.88 2134.81,1205.88 2135.39,1205.88 2135.98,1205.88 2136.57,1205.88 2137.15,1205.88 2137.74,1205.88 2138.33,1205.88 2138.91,1205.88 2139.5,1205.88 2140.09,1205.88 2140.67,1205.88 2141.26,1205.88 2141.84,1205.88 2142.43,1205.88 2143.02,1205.88 2143.6,1205.88 2144.19,1205.88 2144.78,1205.88 2145.36,1205.88 2145.95,1205.88 2146.54,1205.88 2147.12,1205.88 2147.71,1205.88 2148.3,1205.88 2148.88,1205.88 2149.47,1205.88 2150.05,1205.88 2150.64,1205.88 2151.23,1205.88 2151.81,1205.88 2152.4,1205.88 2152.99,1205.88 2153.57,1205.88 2154.16,1205.88 2154.75,1205.88 2155.33,1205.88 2155.92,1205.88 2156.5,1205.88 2157.09,1205.88 2157.68,1205.88 2158.26,1205.88 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.35,1188.59 1400.84,899.083 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1222.65 985.439,1188.59 2158.26,1188.59 2158.26,1222.65 985.439,1222.65 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip110)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip110)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip113\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip113)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip113)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip113)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip113)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip113)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip113)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip113)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip113)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip113)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip113)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip110)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip110)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip113)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-6762.81 164.91,-6415.34 165.469,-7262.63 166.029,-8015.91 166.588,-8681.87 167.147,-9299.34 167.706,-9854.93 168.266,-10352.7 168.825,-10796.3 169.384,-11189.3 169.943,-11517.8 170.503,-11087.6 171.062,-11369 171.621,-11620.3 172.18,-11834.3 172.74,-11450.9 173.299,-11628.6 173.858,-11780.1 174.417,-11878.1 174.977,-11965.1 175.536,-11635.3 176.095,-11681.5 176.655,-11361.4 177.214,-10773 177.773,-10792.2 178.332,-10797.7 178.892,-10772.7 179.451,-10488.8 180.01,-10436.9 180.569,-10379 181.129,-10097.8 181.688,-10007.4 182.247,-9911.07 182.806,-9646.06 183.366,-9212.06 183.925,-9094.45 184.484,-8823.95 185.043,-8699.94 185.603,-8577.31 186.162,-8447.89 186.721,-8201.01 187.28,-7961.82 187.84,-7829.45 188.399,-7703.98 188.958,-7466.05 189.517,-7339.31 190.077,-7120.22 190.636,-6904.66 191.195,-6772.2 191.754,-6567.87 192.314,-6366.99 192.873,-6096.12 193.432,-5980.68 193.991,-5601.38 194.551,-5490.49 195.11,-5327.18 195.669,-5213.79 196.228,-5098.02 196.788,-4926.5 197.347,-4658.2 197.906,-4503.89 198.465,-4260.14 199.025,-4114.4 199.584,-3924.48 200.143,-3792.85 200.702,-3653.71 201.262,-3387.42 201.821,-3261.14 202.38,-3137.68 202.939,-3015.36 203.499,-2858.37 204.058,-2746.86 204.617,-2641.4 205.176,-2499.54 205.736,-2393.95 206.295,-2327.42 206.854,-2263.8 207.413,-2102.58 207.973,-2039.47 208.532,-1916.22 209.091,-1825.39 209.65,-1707.79 210.21,-1594.81 210.769,-1489.7 211.328,-1387.22 211.887,-1286.46 212.447,-1216.27 213.006,-1121.05 213.565,-1079.22 214.124,-1010.6 214.684,-914.254 215.243,-798.024 215.802,-734.741 216.361,-652.062 216.921,-572.137 217.48,-519.479 218.039,-395.323 218.598,-368.261 219.158,-296.339 219.717,-224.407 220.276,-181.192 220.835,-109.572 221.395,-46.9558 221.954,-6.30496 222.513,56.639 223.072,114.268 223.632,154.087 224.191,191.952 224.75,270.478 225.309,304.037 225.869,357.377 226.428,410.831 226.987,440.023 227.546,489.034 228.106,513.581 228.665,601.207 229.224,606.504 229.783,588.561 230.343,618.948 230.902,621.733 231.461,625.269 232.02,649.226 232.58,635.524 233.139,640.259 233.698,663.609 234.257,704.216 234.817,725.154 235.376,704.954 235.935,742.928 236.494,799.341 237.054,835.773 237.613,831.455 238.172,811.301 238.731,830.083 239.291,848.21 239.85,884.231 240.409,882.337 240.968,898.079 241.528,912.35 242.087,909.729 242.646,887.69 243.205,884.591 243.765,898.684 244.324,880.524 244.883,879.296 245.442,896.648 246.002,916.058 246.561,917.163 247.12,900.424 247.679,937.345 248.239,954.651 248.798,990.395 249.357,1004.08 249.916,1001.01 250.476,1013.23 251.035,1040.29 251.594,1088.42 252.153,1129.97 252.713,1106.33 253.272,1082.88 253.831,1092.04 254.39,1085.66 254.95,1093.5 255.509,1067.3 256.068,1060.14 256.627,1073.69 257.187,1085.72 257.746,1079.9 258.305,1104.72 258.864,1146.67 259.424,1136.12 259.983,1144.43 260.542,1117.73 261.101,1108.95 261.661,1087.45 262.22,1081.13 262.779,1073.06 263.338,1067.29 263.898,1061.89 264.457,1071.87 265.016,1063.52 265.575,1021.29 266.135,1019.14 266.694,1084.51 267.253,1077.73 267.812,1072.36 268.372,1068.26 268.931,1094.43 269.49,1104.82 270.049,1164.57 270.609,1172.28 271.168,1143.4 271.727,1148.81 272.286,1173.9 272.846,1165.53 273.405,1188.37 273.964,1176.46 274.523,1183 275.083,1202.18 275.642,1222.08 276.201,1222.51 276.76,1224.25 277.32,1225.21 277.879,1211.99 278.438,1199.34 278.997,1202.4 279.557,1187.02 280.116,1222.93 280.675,1192.97 281.234,1177.33 281.794,1230.35 282.353,1235.21 282.912,1221.5 283.471,1256.75 284.031,1222.52 284.59,1224.1 285.149,1227.43 285.708,1179.91 286.268,1149.77 286.827,1111.08 287.386,1087.43 287.945,1061.03 288.505,1039.59 289.064,1049.38 289.623,1043.15 290.182,1055.16 290.742,1048.18 291.301,1057.11 291.86,1102.99 292.419,1090.65 292.979,1081.51 293.538,1090.87 294.097,1082.19 294.656,1024.08 295.216,1020.11 295.775,995.766 296.334,1011.4 296.893,1020.78 297.453,1000.5 298.012,1030.64 298.571,1011.13 299.13,1042.84 299.69,1040.44 300.249,1049.09 300.808,1043.1 301.368,1021.65 301.927,1014.04 302.486,1006.22 303.045,1047.65 303.605,1041.19 304.164,1068.25 304.723,1077.43 305.282,1069.8 305.842,1094.03 306.401,1115.13 306.96,1119.13 307.519,1158.59 308.079,1145.3 308.638,1132.52 309.197,1124.48 309.756,1125.32 310.316,1128.01 310.875,1132.65 311.434,1085.89 311.993,1109.02 312.553,1081.05 313.112,1120.07 313.671,1093.2 314.23,1083.84 314.79,1025.07 315.349,1018.43 315.908,998.661 316.467,976.836 317.027,988.121 317.586,981.772 318.145,959.683 318.704,987.662 319.264,963.676 319.823,957.875 320.382,969.239 320.941,965.164 321.501,941.138 322.06,987.526 322.619,997.529 323.178,1005.4 323.738,1013.72 324.297,1036.83 324.856,1009.89 325.415,1003.19 325.975,1028.16 326.534,985.37 327.093,977.577 327.652,941.111 328.212,903.688 328.771,918.575 329.33,933.689 329.889,928.395 330.449,925.51 331.008,921.789 331.567,938.206 332.126,933.121 332.686,928.985 333.245,923.301 333.804,903.746 334.363,867.555 334.923,897.538 335.482,879.274 336.041,863.099 336.6,812.484 337.16,813.141 337.719,828.304 338.278,828.97 338.837,843.913 339.397,809.602 339.956,796.812 340.515,798.765 341.074,804.109 341.634,790.43 342.193,809.625 342.752,827.242 343.311,829.742 343.871,829.725 344.43,846.836 344.989,867.386 345.548,863.942 346.108,899.341 346.667,895.588 347.226,879.284 347.785,892.311 348.345,890.607 348.904,892.824 349.463,889.985 350.022,905.587 350.582,917.401 351.141,913.776 351.7,912.026 352.259,926.681 352.819,952.418 353.378,947.249 353.937,923.144 354.496,938.184 355.056,945.044 355.615,951.574 356.174,947.128 356.733,959.925 357.293,954.445 357.852,946.164 358.411,940.505 358.97,931.009 359.53,911.66 360.089,889.094 360.648,902.981 361.207,897.193 361.767,912.705 362.326,922.065 362.885,884.737 363.444,911.893 364.004,921.877 364.563,869.199 365.122,882.198 365.681,849.184 366.241,862.08 366.8,860.648 367.359,889.094 367.918,902.704 368.478,895.073 369.037,876.139 369.596,875.589 370.155,871.538 370.715,885.567 371.274,897.054 371.833,840.465 372.392,855.777 372.952,852.862 373.511,854.007 374.07,835.458 374.629,852.654 375.189,854.279 375.748,823.158 376.307,852.092 376.866,850.192 377.426,851.293 377.985,849.584 378.544,847.487 379.103,814.989 379.663,849.447 380.222,779.561 380.781,763.856 381.34,783.369 381.9,784.737 382.459,769.84 383.018,754.254 383.577,770.77 384.137,769.455 384.696,789.687 385.255,802.433 385.814,819.699 386.374,780.807 386.933,759.308 387.492,780.068 388.051,781.781 388.611,817.815 389.17,835.025 389.729,835.547 390.288,865.46 390.848,860.865 391.407,888.278 391.966,868.19 392.525,879.684 393.085,891.416 393.644,885.756 394.203,882.797 394.762,877.839 395.322,887.105 395.881,913.332 396.44,904.294 396.999,898.51 397.559,907.255 398.118,916.702 398.677,911.291 399.236,905.218 399.796,916.937 400.355,928.909 400.914,922.291 401.473,933.517 402.033,952.468 402.592,962.631 403.151,920.818 403.71,898.671 404.27,875.99 404.829,887.787 405.388,881.2 405.947,857.406 406.507,852.334 407.066,911.613 407.625,894.254 408.184,890.028 408.744,836.863 409.303,834.43 409.862,878.278 410.421,837.397 410.981,854.392 411.54,864.516 412.099,859.678 412.658,853.867 413.218,833.885 413.777,812.03 414.336,877.31 414.895,841.273 415.455,851.036 416.014,813.297 416.573,828.217 417.132,824.32 417.692,821.449 418.251,818.765 418.81,801.443 419.369,799.024 419.929,813.826 420.488,795.1 421.047,743.528 421.606,744.318 422.166,744.238 422.725,744.325 423.284,714.449 423.843,684.929 424.403,720.862 424.962,707.449 425.521,711.062 426.08,714.254 426.64,717.656 427.199,707.889 427.758,710.161 428.318,746.567 428.877,718.424 429.436,720.267 429.995,721.359 430.555,695.049 431.114,714.553 431.673,736.055 432.232,754.881 432.792,789.478 433.351,787.176 433.91,786.736 434.469,786.127 435.029,766.244 435.588,732.945 436.147,719.543 436.706,721.898 437.266,739.09 437.825,726.171 438.384,746.795 438.943,780.364 439.503,779.106 440.062,762.812 440.621,777.496 441.18,775.907 441.74,756.967 442.299,771.543 442.858,784.831 443.417,788.492 443.977,787.406 444.536,801.486 445.095,797.325 445.654,844.111 446.214,860.344 446.773,871.07 447.332,897.891 447.891,891.567 448.451,868.042 449.01,780.256 449.569,781.974 450.128,784.822 450.688,814.979 451.247,826.666 451.806,872.213 452.365,866.363 452.925,841.115 453.484,837.753 454.043,819.698 454.602,801.388 455.162,799.401 455.721,763.715 456.28,713.494 456.839,729.597 457.399,727.413 457.958,725.543 458.517,741.716 459.076,740.202 459.636,786.745 460.195,784.302 460.754,766.088 461.313,766.679 461.873,751.148 462.432,765.519 462.991,764.331 463.55,780.517 464.11,780.62 464.669,764.891 465.228,777.446 465.787,773.36 466.347,771.615 466.906,771.286 467.465,753.015 468.024,750.08 468.584,748.947 469.143,800.53 469.702,794.343 470.261,772.829 470.821,757.332 471.38,737.754 471.939,739.275 472.498,724.132 473.058,676.607 473.617,631.033 474.176,686.027 474.735,688.015 475.295,693.691 475.854,698.466 476.413,746.536 476.972,732.662 477.532,719.044 478.091,736.79 478.65,770.438 479.209,772.38 479.769,735.243 480.328,718.348 480.887,704.104 481.446,691.432 482.006,712.584 482.565,731.65 483.124,694.623 483.683,698.34 484.243,683.605 484.802,686.242 485.361,705.234 485.92,724.695 486.48,708.574 487.039,692.307 487.598,677.299 488.157,683.407 488.717,704.295 489.276,706.715 489.835,708.957 490.394,708.738 490.954,728.496 491.513,711.682 492.072,714.509 492.631,715.832 493.191,733.222 493.75,731.806 494.309,716.812 494.868,704.68 495.428,709.543 495.987,691.913 496.546,659.311 497.105,643.467 497.665,649.213 498.224,657.34 498.783,642.172 499.342,650.549 499.902,638.953 500.461,646.813 501.02,636.173 501.579,644.363 502.139,665.843 502.698,622.985 503.257,648.23 503.816,652.454 504.376,688.438 504.935,723.103 505.494,709.638 506.053,694.175 506.613,711.213 507.172,745.961 507.731,747.403 508.29,750.149 508.85,747.048 509.409,762.649 509.968,774.333 510.527,753.685 511.087,756.092 511.646,753.056 512.205,751.79 512.764,750.615 513.324,750.214 513.883,779.644 514.442,807.837 515.001,822.688 515.561,848.058 516.12,842.621 516.679,836.57 517.238,846.098 517.798,887.846 518.357,896.223 518.916,902.681 519.475,907.629 520.035,899.097 520.594,840.711 521.153,820.758 521.712,829.912 522.272,842.207 522.831,838.17 523.39,829.373 523.949,839.687 524.509,834.018 525.068,863.403 525.627,854.01 526.186,830 526.746,822.274 527.305,798.656 527.864,845.526 528.423,823.11 528.983,788.096 529.542,771.074 530.101,765.396 530.66,781.535 531.22,759.095 531.779,755.27 532.338,733.878 532.897,733.728 533.457,749.993 534.016,768.557 534.575,781.678 535.134,775.65 535.694,792.212 536.253,804.711 536.812,800.086 537.371,780.455 537.931,792.219 538.49,818.381 539.049,813.163 539.608,791.93 540.168,804.486 540.727,766.282 541.286,793.425 541.845,755.528 542.405,722.715 542.964,770.273 543.523,769.175 544.082,795.723 544.642,777.891 545.201,773.423 545.76,775.712 546.319,742.243 546.879,705.054 547.438,671.998 547.997,693.572 548.556,678.754 549.116,713.194 549.675,730.329 550.234,745.329 550.793,727.936 551.353,742.886 551.912,710.386 552.471,711.785 553.031,727.392 553.59,709.004 554.149,726.404 554.708,774.66 555.268,756.187 555.827,749.921 556.386,747.25 556.945,730.348 557.505,729.281 558.064,732.093 558.623,730.297 559.182,747.194 559.742,710.475 560.301,695.289 560.86,694.077 561.419,708.085 561.979,690.513 562.538,672.87 563.097,706.953 563.656,690.787 564.216,674.884 564.775,694.973 565.334,679.813 565.893,680.465 566.453,697.785 567.012,710.993 567.571,695.133 568.13,700.398 568.69,700.553 569.249,700.911 569.808,715.392 570.367,715.752 570.927,719.763 571.486,719.307 572.045,687.215 572.604,674.354 573.164,678.131 573.723,694.173 574.282,692.96 574.841,659.41 575.401,682.181 575.96,701.028 576.519,704.335 577.078,690.643 577.638,693.84 578.197,740.248 578.756,724.213 579.315,706.15 579.875,755.655 580.434,716.197 580.993,700.425 581.552,717.532 582.112,717.865 582.671,734.03 583.23,733.994 583.789,749.192 584.349,762.238 584.908,774.976 585.467,772.442 586.026,770.158 586.586,779.851 587.145,759.228 587.704,755.951 588.263,736.959 588.823,735.467 589.382,734.083 589.941,784.926 590.5,734.214 591.06,747.495 591.619,747.523 592.178,744.978 592.737,740.556 593.297,721.746 593.856,723.319 594.415,689.562 594.974,712.142 595.534,694.903 596.093,677.527 596.652,680.731 597.211,716.79 597.771,737.102 598.33,721.688 598.889,704.174 599.448,691.467 600.008,726.847 600.567,746.356 601.126,762.359 601.685,796.305 602.245,809.879 602.804,808.74 603.363,789.887 603.922,787.578 604.482,781.861 605.041,775.092 605.6,788.342 606.159,799.719 606.719,796.596 607.278,776.075 607.837,755.842 608.396,754.943 608.956,753.409 609.515,747.511 610.074,743.809 610.633,741.263 611.193,737.817 611.752,734.084 612.311,716.472 612.87,718.456 613.43,701.699 613.989,749.718 614.548,763.659 615.107,762.143 615.667,742.324 616.226,740.111 616.785,706.62 617.344,710.13 617.904,679.964 618.463,681.244 619.022,680.159 619.581,696.151 620.141,697.876 620.7,634.829 621.259,638.357 621.818,612.233 622.378,651.324 622.937,640.384 623.496,661.973 624.055,694.497 624.615,698.243 625.174,696.623 625.733,680.633 626.292,684.426 626.852,669.344 627.411,670.694 627.97,720.547 628.529,717.85 629.089,730.731 629.648,746.205 630.207,746.891 630.766,746.398 631.326,745.61 631.885,695.451 632.444,680.834 633.003,667.711 633.563,700.239 634.122,684.995 634.681,687.093 635.24,704.241 635.8,736.224 636.359,714.864 636.918,697.548 637.477,732.551 638.037,748.124 638.596,760.17 639.155,804.607 639.714,845.778 640.274,823.978 640.833,816.817 641.392,781.591 641.951,745.721 642.511,762.749 643.07,759.034 643.629,753.394 644.188,768.353 644.748,767.306 645.307,764.971 645.866,731.054 646.425,726.766 646.985,724.562 647.544,704.438 648.103,719.405 648.662,718.993 649.222,735.039 649.781,688.785 650.34,675.17 650.899,677.92 651.459,727.885 652.018,692.924 652.577,677.697 653.136,681.835 653.696,633.234 654.255,622.564 654.814,595.7 655.373,599.694 655.933,635.925 656.492,606.205 657.051,628.238 657.61,614.587 658.17,588.055 658.729,611.908 659.288,599.837 659.847,605.711 660.407,660.054 660.966,649.48 661.525,667.304 662.084,671.429 662.644,688.327 663.203,709.564 663.762,678.973 664.321,666.27 664.881,671.684 665.44,670.925 665.999,687.221 666.558,673.278 667.118,677.162 667.677,676.274 668.236,712.899 668.795,743.312 669.355,740.33 669.914,737.427 670.473,731.704 671.032,736.019 671.592,766.746 672.151,747.148 672.71,749.082 673.269,744.789 673.829,726.213 674.388,723.946 674.947,739.692 675.506,725.169 676.066,708.716 676.625,703.967 677.184,703.444 677.743,704.364 678.303,703.726 678.862,721.37 679.421,755.206 679.981,735.626 680.54,747.753 681.099,729.088 681.658,743.163 682.218,739.488 682.777,688.2 683.336,688.947 683.895,690.17 684.455,721.308 685.014,702.646 685.573,732.615 686.132,732.547 686.692,764.717 687.251,760.273 687.81,738.415 688.369,734.875 688.929,733.207 689.488,746.024 690.047,745.105 690.606,739.417 691.166,768.357 691.725,768.438 692.284,733.655 692.843,713.74 693.403,712.761 693.962,711.222 694.521,743.574 695.08,727.133 695.64,739.732 696.199,736.282 696.758,737.399 697.317,719.876 697.877,719.936 698.436,752.066 698.995,809.811 699.554,816.356 700.114,825.439 700.673,786.88 701.232,783.177 701.791,763.701 702.351,775.203 702.91,787.834 703.469,781.501 704.028,756.9 704.588,732.743 705.147,715.153 705.706,730.683 706.265,760.135 706.825,753.916 707.384,746.795 707.943,726.203 708.502,723.27 709.062,709.809 709.621,677.705 710.18,673.097 710.739,638.954 711.299,652.888 711.858,701.71 712.417,688.196 712.976,688.792 713.536,690.303 714.095,725.366 714.654,756.173 715.213,748.211 715.773,730.255 716.332,729.669 716.891,729.642 717.45,709.672 718.01,690.358 718.569,609.077 719.128,610.547 719.687,628.87 720.247,635.286 720.806,618.917 721.365,606.779 721.924,628.182 722.484,600.278 723.043,621.566 723.602,623.905 724.161,627.646 724.721,630.053 725.28,630.897 725.839,633.655 726.398,635.735 726.958,635.673 727.517,641.171 728.076,659.362 728.635,628.937 729.195,636.239 729.754,640.075 730.313,643.4 730.872,642.704 731.432,645.408 731.991,662.078 732.55,664.404 733.109,664.903 733.669,633.952 734.228,667.962 734.787,685.64 735.346,719 735.906,734.893 736.465,749.042 737.024,716.586 737.583,698.325 738.143,700.361 738.702,701.869 739.261,701.214 739.82,687.516 740.38,706.03 740.939,718.178 741.498,715.753 742.057,698.539 742.617,678.608 743.176,728.427 743.735,726.589 744.294,693.828 744.854,694.733 745.413,712.678 745.972,728.184 746.531,694.782 747.091,694.312 747.65,709.596 748.209,725.2 748.768,710.567 749.328,712.534 749.887,726.283 750.446,706.945 751.005,705.746 751.565,676.945 752.124,646.001 752.683,650.71 753.242,621.629 753.802,597.041 754.361,605.788 754.92,626.401 755.479,646.87 756.039,666.507 756.598,649.751 757.157,668.59 757.716,652.684 758.276,638.45 758.835,627.709 759.394,631.088 759.953,621.119 760.513,623.929 761.072,660.959 761.631,664.733 762.19,670.233 762.75,654.231 763.309,654.403 763.868,705.186 764.427,704.417 764.987,690.914 765.546,704.324 766.105,706.603 766.664,738.093 767.224,768.4 767.783,765.081 768.342,744.328 768.901,775.368 769.461,740.954 770.02,722.027 770.579,718.882 771.138,703.763 771.698,702.353 772.257,686.389 772.816,687.713 773.375,689.206 773.935,705.717 774.494,693.262 775.053,675.499 775.612,709.113 776.172,696.91 776.731,693.862 777.29,693.955 777.849,741.061 778.409,706.281 778.968,740.523 779.527,708.569 780.086,721.714 780.646,691.163 781.205,674.594 781.764,642.121 782.323,629.944 782.883,616.996 783.442,619.259 784.001,656.535 784.56,672.835 785.12,660.382 785.679,645.875 786.238,630.541 786.797,615.664 787.357,636.953 787.916,655.738 788.475,625.592 789.034,632.936 789.594,620.929 790.153,604.939 790.712,607.771 791.271,610.127 791.831,613.646 792.39,616.323 792.949,586.082 793.508,614.032 794.068,616.792 794.627,638.38 795.186,657.049 795.745,642.625 796.305,630.58 796.864,648.718 797.423,698.709 797.982,683.615 798.542,701.163 799.101,683.157 799.66,663.173 800.219,629.673 800.779,586.066 801.338,593.715 801.897,596.916 802.456,618.085 803.016,609.291 803.575,648.033 804.134,686.302 804.693,688.886 805.253,687.611 805.812,686.879 806.371,687.261 806.931,688.693 807.49,671.569 808.049,689.503 808.608,693.005 809.168,706.005 809.727,706.815 810.286,685.367 810.845,751.119 811.405,763.252 811.964,728.94 812.523,729.025 813.082,760.192 813.642,775.212 814.201,738.227 814.76,717.955 815.319,732.275 815.879,743.848 816.438,789.905 816.997,786.082 817.556,795.545 818.116,775.728 818.675,801.642 819.234,824.022 819.793,821.302 820.353,811.93 820.912,823.222 821.471,797.621 822.03,775.853 822.59,739.118 823.149,702.086 823.708,698.349 824.267,698.976 824.827,708.274 825.386,720.234 825.945,720.774 826.504,703.395 827.064,739.143 827.623,702.558 828.182,703.678 828.741,685.493 829.301,670.07 829.86,656.201 830.419,673.734 830.978,657.759 831.538,671.215 832.097,685.496 832.656,686.835 833.215,705.327 833.775,658.958 834.334,660.659 834.893,694.167 835.452,709.383 836.012,693.584 836.571,727.465 837.13,760.704 837.689,757.112 838.249,754.404 838.808,770.335 839.367,768.807 839.926,745.734 840.486,754.788 841.045,752.871 841.604,751.465 842.163,746.981 842.723,726.954 843.282,727.848 843.841,738.979 844.4,688.107 844.96,670.912 845.519,658.12 846.078,690.984 846.637,703.884 847.197,717.738 847.756,717.485 848.315,716.1 848.874,727.919 849.434,754.292 849.993,766.337 850.552,759.622 851.111,805.891 851.671,817.343 852.23,792.237 852.789,769.146 853.348,731.564 853.908,744.216 854.467,723.926 855.026,690.838 855.585,705.183 856.145,685.119 856.704,683.656 857.263,716.135 857.822,695.154 858.382,692.552 858.941,754.838 859.5,750.235 860.059,713.529 860.619,712.853 861.178,727.228 861.737,739.112 862.296,718.088 862.856,699.213 863.415,701.627 863.974,702.429 864.533,673.186 865.093,708.017 865.652,673.851 866.211,674.05 866.77,638.426 867.33,677.335 867.889,696.274 868.448,679.496 869.007,665.096 869.567,664.686 870.126,651.93 870.685,634.744 871.244,636.036 871.804,623.475 872.363,613.505 872.922,665.184 873.481,632.943 874.041,665.295 874.6,683.562 875.159,683.307 875.718,649.48 876.278,655.731 876.837,706.095 877.396,670.933 877.955,687.731 878.515,702.198 879.074,716.317 879.633,679.547 880.192,661.793 880.752,664.226 881.311,680.503 881.87,713.081 882.429,711.177 882.989,694.607 883.548,647.079 884.107,648.413 884.666,651.193 885.226,652.979 885.785,637.28 886.344,653.383 886.903,656.167 887.463,645.613 888.022,677.772 888.581,728.318 889.14,720.474 889.7,718.131 890.259,714.884 890.818,697.423 891.377,702.463 891.937,701.114 892.496,654.952 893.055,674.309 893.614,691.719 894.174,689.853 894.733,671.24 895.292,686.241 895.851,714.912 896.411,711.94 896.97,711.994 897.529,675.823 898.088,644.083 898.648,649.665 899.207,649.462 899.766,669.155 900.325,665.213 900.885,688.469 901.444,687.085 902.003,687.892 902.562,669.919 903.122,686.525 903.681,702.304 904.24,717.498 904.799,732.129 905.359,794.225 905.918,804.66 906.477,799.154 907.036,812.585 907.596,789.154 908.155,749.6 908.714,745.127 909.273,743.153 909.833,752.295 910.392,729.844 910.951,742.713 911.51,771.133 912.07,734.308 912.629,731.203 913.188,729.413 913.747,727.929 914.307,741.39 914.866,750.697 915.425,732.986 915.984,731.678 916.544,744.29 917.103,721.845 917.662,721.115 918.221,705.406 918.781,688.099 919.34,672.129 919.899,704.368 920.458,670.818 921.018,657.534 921.577,629.189 922.136,680.647 922.695,698.059 923.255,665.332 923.814,682.995 924.373,667.045 924.932,714.056 925.492,712.902 926.051,710.65 926.61,709.608 927.169,693.204 927.729,678.726 928.288,645.159 928.847,664.65 929.406,701.664 929.966,735.641 930.525,751.538 931.084,753.961 931.644,753.348 932.203,734.835 932.762,729.358 933.321,696.456 933.881,662.964 934.44,653.041 934.999,655.933 935.558,688.41 936.118,707.524 936.677,688.799 937.236,702.456 937.795,719.019 938.355,718.095 938.914,734.847 939.473,735.599 940.032,749.004 940.592,730.415 941.151,777.808 941.71,770.512 942.269,785.092 942.829,780.953 943.388,762.695 943.947,760.843 944.506,775.816 945.066,752.724 945.625,733.85 946.184,730.969 946.743,763.802 947.303,761.144 947.862,722.032 948.421,736.698 948.98,700.56 949.54,717.7 950.099,731.415 950.658,681.457 951.217,714.3 951.777,726.277 952.336,742.485 952.895,725.158 953.454,723.364 954.014,704.006 954.573,685.011 955.132,685.051 955.691,638.01 956.251,672.525 956.81,673.779 957.369,624.619 957.928,647.103 958.488,617.599 959.047,619.102 959.606,592.781 960.165,596.917 960.725,583.975 961.284,556.387 961.843,563.596 962.402,539.935 962.962,562.426 963.521,585.197 964.08,578.264 964.639,547.344 965.199,555.316 965.758,545.559 966.317,572.236 966.876,578.502 967.436,581.936 967.995,588.067 968.554,623.415 969.113,658.816 969.673,663.45 970.232,663.637 970.791,683.613 971.35,684.402 971.91,700.207 972.469,716.85 973.028,731.649 973.587,725.294 974.147,722.177 974.706,741.501 975.265,741.366 975.824,739.905 976.384,736.563 976.943,762.44 977.502,743.128 978.061,757.219 978.621,751.003 979.18,728.851 979.739,725.696 980.298,708.192 980.858,692.325 981.417,691.558 981.976,658.194 982.535,676.454 983.095,667.617 983.654,622.256 984.213,659.774 984.772,644.416 985.332,645.685 985.891,681.088 986.45,647.424 987.009,665.179 987.569,664.005 988.128,631.288 988.687,635.116 989.246,637.979 989.806,676.737 990.365,676.536 990.924,675.159 991.483,703.875 992.043,705.395 992.602,702.283 993.161,716.032 993.72,714.776 994.28,650.096 994.839,652.494 995.398,651.71 995.957,651.865 996.517,636.284 997.076,622.144 997.635,643.207 998.194,630.378 998.754,633.457 999.313,652.638 999.872,656.079 1000.43,673.558 1000.99,690.366 1001.55,691.125 1002.11,707.084 1002.67,672.275 1003.23,657.585 1003.79,626.634 1004.35,642.134 1004.91,630.457 1005.46,597.299 1006.02,606.434 1006.58,579.075 1007.14,580.963 1007.7,537.985 1008.26,592.838 1008.82,598.743 1009.38,622.786 1009.94,637.72 1010.5,607.709 1011.06,598.081 1011.62,601.353 1012.18,653.654 1012.73,703.163 1013.29,701.352 1013.85,699.957 1014.41,698.989 1014.97,697.742 1015.53,694.074 1016.09,680.196 1016.65,679.493 1017.21,698.776 1017.77,698.273 1018.33,698.02 1018.89,680.207 1019.45,680.563 1020.01,683.887 1020.56,716.934 1021.12,703.035 1021.68,659.049 1022.24,643.668 1022.8,660.095 1023.36,663.27 1023.92,632.843 1024.48,634.728 1025.04,622.763 1025.6,643.419 1026.16,661.586 1026.72,647.972 1027.28,666.299 1027.83,685.621 1028.39,684.315 1028.95,650.289 1029.51,669.809 1030.07,621.999 1030.63,605.464 1031.19,608.32 1031.75,596.393 1032.31,616.226 1032.87,638.268 1033.43,644.592 1033.99,643.677 1034.55,691.774 1035.1,691.164 1035.66,675.596 1036.22,711.997 1036.78,713.072 1037.34,742.305 1037.9,770.559 1038.46,770.567 1039.02,777.074 1039.58,787.496 1040.14,782.023 1040.7,761.653 1041.26,761.635 1041.82,740.347 1042.38,720.155 1042.93,699.746 1043.49,680.371 1044.05,664.654 1044.61,620.193 1045.17,636.736 1045.73,622.659 1046.29,660.119 1046.85,660.203 1047.41,645.202 1047.97,662.555 1048.53,663.558 1049.09,650.192 1049.65,667.47 1050.2,702.209 1050.76,687.231 1051.32,670.514 1051.88,672.48 1052.44,657.172 1053,646.099 1053.56,681.289 1054.12,699.095 1054.68,682.728 1055.24,683.697 1055.8,667.528 1056.36,663.792 1056.92,681.467 1057.48,698.076 1058.03,678.068 1058.59,692.811 1059.15,674.517 1059.71,676.129 1060.27,676.537 1060.83,675.576 1061.39,694.014 1061.95,705.493 1062.51,687.349 1063.07,700.294 1063.63,717.319 1064.19,683.562 1064.75,683.314 1065.3,699.319 1065.86,695.248 1066.42,662.176 1066.98,661.659 1067.54,678.419 1068.1,661.818 1068.66,662.654 1069.22,663.144 1069.78,677.696 1070.34,660.7 1070.9,661.673 1071.46,709.515 1072.02,692.084 1072.57,706.2 1073.13,691.287 1073.69,691.949 1074.25,676.757 1074.81,663.566 1075.37,683.551 1075.93,651.535 1076.49,651.799 1077.05,669.326 1077.61,672.45 1078.17,673.627 1078.73,671.529 1079.29,691.08 1079.85,709.266 1080.4,710.293 1080.96,724.894 1081.52,722.654 1082.08,738.797 1082.64,767.99 1083.2,760.296 1083.76,757.736 1084.32,737.218 1084.88,783.463 1085.44,761.278 1086,773.743 1086.56,751.145 1087.12,715.108 1087.67,699.538 1088.23,699.195 1088.79,713.342 1089.35,697.495 1089.91,662.389 1090.47,642.966 1091.03,660.721 1091.59,662.346 1092.15,649.848 1092.71,616.74 1093.27,635.511 1093.83,636.86 1094.39,653.16 1094.94,651.584 1095.5,652.132 1096.06,653.164 1096.62,622.356 1097.18,592.03 1097.74,594.937 1098.3,565.738 1098.86,553.586 1099.42,564.022 1099.98,553.077 1100.54,581.555 1101.1,588.782 1101.66,610.569 1102.22,580.171 1102.77,600.011 1103.33,602.203 1103.89,604.724 1104.45,623.944 1105.01,597.761 1105.57,603.624 1106.13,643.209 1106.69,627.736 1107.25,631.732 1107.81,682.005 1108.37,698.222 1108.93,744.583 1109.49,725.224 1110.04,702.789 1110.6,748.782 1111.16,777.027 1111.72,755.193 1112.28,802.477 1112.84,800.266 1113.4,762.347 1113.96,756.867 1114.52,736.032 1115.08,735.205 1115.64,748.763 1116.2,695.462 1116.76,742.622 1117.31,738.683 1117.87,701.801 1118.43,702.347 1118.99,665.752 1119.55,667.565 1120.11,665.185 1120.67,666.834 1121.23,649.471 1121.79,634.918 1122.35,606.367 1122.91,594.697 1123.47,613.655 1124.03,589.246 1124.59,592.911 1125.14,598.658 1125.7,617.788 1126.26,640.54 1126.82,642.407 1127.38,645.821 1127.94,663.719 1128.5,664.893 1129.06,662.357 1129.62,676.115 1130.18,706.871 1130.74,723.164 1131.3,737.594 1131.86,766.056 1132.41,779.308 1132.97,775.217 1133.53,754.469 1134.09,766.202 1134.65,727.673 1135.21,708.118 1135.77,738.886 1136.33,736.133 1136.89,716.002 1137.45,715.518 1138.01,714.736 1138.57,730.161 1139.13,727.449 1139.68,808.091 1140.24,788.877 1140.8,733.285 1141.36,796.088 1141.92,804.822 1142.48,809.891 1143.04,801.297 1143.6,841.559 1144.16,784.665 1144.72,751.186 1145.28,732.791 1145.84,695.755 1146.4,678.307 1146.96,664.502 1147.51,648.527 1148.07,652.214 1148.63,672.874 1149.19,659.067 1149.75,659.793 1150.31,661.768 1150.87,663.376 1151.43,680.367 1151.99,682.1 1152.55,683.532 1153.11,680.57 1153.67,653.213 1154.23,654.354 1154.78,656.187 1155.34,671.191 1155.9,671.475 1156.46,672.996 1157.02,658.955 1157.58,612.316 1158.14,568.709 1158.7,577.006 1159.26,599.355 1159.82,633.604 1160.38,590.021 1160.94,596.07 1161.5,595.685 1162.05,601.134 1162.61,620.484 1163.17,625.726 1163.73,631.186 1164.29,652.47 1164.85,655.102 1165.41,654.253 1165.97,641.786 1166.53,629.771 1167.09,632.121 1167.65,668.113 1168.21,685.716 1168.77,717.459 1169.33,735.337 1169.88,686.574 1170.44,685.114 1171,668.004 1171.56,620.787 1172.12,624.613 1172.68,613.094 1173.24,617.474 1173.8,622.748 1174.36,609.723 1174.92,662.369 1175.48,663.905 1176.04,714.32 1176.6,744.857 1177.15,756.382 1177.71,769.769 1178.27,798.129 1178.83,757.729 1179.39,737.911 1179.95,715.957 1180.51,716.254 1181.07,695.447 1181.63,679.106 1182.19,708.978 1182.75,692.013 1183.31,676.343 1183.87,663.183 1184.43,615.952 1184.98,651.46 1185.54,670.049 1186.1,701.428 1186.66,667.482 1187.22,667.338 1187.78,669.041 1188.34,623.355 1188.9,624.638 1189.46,612.376 1190.02,654.34 1190.58,660.521 1191.14,679.591 1191.7,680.334 1192.25,697.095 1192.81,696.773 1193.37,717.663 1193.93,713.593 1194.49,729.916 1195.05,747.844 1195.61,762.534 1196.17,773.146 1196.73,737.546 1197.29,767.898 1197.85,765.736 1198.41,778.216 1198.97,793.283 1199.52,771.036 1200.08,753.607 1200.64,784.727 1201.2,764.675 1201.76,725.931 1202.32,753.845 1202.88,766.535 1203.44,730.83 1204,729.372 1204.56,706.899 1205.12,707.76 1205.68,741.164 1206.24,736.942 1206.8,701.533 1207.35,681.822 1207.91,679.493 1208.47,678.849 1209.03,676.662 1209.59,642.359 1210.15,643.308 1210.71,647.435 1211.27,653.154 1211.83,622.487 1212.39,644.293 1212.95,661.244 1213.51,646.642 1214.07,678.088 1214.62,693.273 1215.18,694.939 1215.74,680.558 1216.3,711.844 1216.86,728.296 1217.42,724.061 1217.98,736.551 1218.54,714.884 1219.1,708.576 1219.66,722.957 1220.22,668.609 1220.78,653.071 1221.34,674.064 1221.89,691.918 1222.45,692.782 1223.01,709.395 1223.57,691.431 1224.13,706.842 1224.69,704.981 1225.25,701.8 1225.81,670.273 1226.37,684.396 1226.93,681.763 1227.49,684.005 1228.05,669.701 1228.61,655.869 1229.17,659.465 1229.72,662.024 1230.28,647.626 1230.84,618.608 1231.4,590.51 1231.96,610.21 1232.52,644.098 1233.08,712.184 1233.64,742.952 1234.2,737.636 1234.76,745.78 1235.32,721.953 1235.88,733.668 1236.44,731.485 1236.99,698.298 1237.55,715.22 1238.11,714.812 1238.67,666.821 1239.23,681.271 1239.79,682.894 1240.35,697.527 1240.91,697.47 1241.47,696.789 1242.03,710.186 1242.59,746.584 1243.15,746.262 1243.71,712.484 1244.26,742.842 1244.82,769.517 1245.38,767.143 1245.94,778.06 1246.5,789.199 1247.06,787.49 1247.62,779.997 1248.18,792.443 1248.74,819.354 1249.3,828.699 1249.86,850.618 1250.42,842.469 1250.98,868.505 1251.54,823.396 1252.09,848.91 1252.65,826.559 1253.21,799.933 1253.77,824.06 1254.33,802.953 1254.89,794.556 1255.45,786.714 1256.01,799.791 1256.57,778.857 1257.13,801.961 1257.69,828.805 1258.25,853.388 1258.81,826.648 1259.36,802.487 1259.92,763.783 1260.48,744.727 1261.04,725.245 1261.6,689.081 1262.16,655.942 1262.72,640.538 1263.28,642.107 1263.84,596.169 1264.4,598.423 1264.96,633.328 1265.52,637.92 1266.08,655.002 1266.63,641.335 1267.19,625.084 1267.75,628.636 1268.31,647.878 1268.87,666.464 1269.43,666.336 1269.99,665.51 1270.55,632.894 1271.11,649.68 1271.67,667.92 1272.23,670.595 1272.79,654.061 1273.35,656.126 1273.91,671.119 1274.46,641.965 1275.02,610.352 1275.58,596.744 1276.14,638.205 1276.7,640.64 1277.26,626.282 1277.82,613.22 1278.38,587.273 1278.94,590.657 1279.5,594.429 1280.06,629.255 1280.62,617.394 1281.18,667.634 1281.73,689.883 1282.29,688.246 1282.85,719.6 1283.41,722.311 1283.97,722.835 1284.53,737.25 1285.09,736.013 1285.65,721.631 1286.21,683.776 1286.77,666.719 1287.33,716.05 1287.89,727.73 1288.45,729.045 1289,729.271 1289.56,742.129 1290.12,739.124 1290.68,740.936 1291.24,739.075 1291.8,705.37 1292.36,703.556 1292.92,702.385 1293.48,670.259 1294.04,668.557 1294.6,686.489 1295.16,652.532 1295.72,637.067 1296.28,639.524 1296.83,642.958 1297.39,660.845 1297.95,645.519 1298.51,681.645 1299.07,697.029 1299.63,676.184 1300.19,677.676 1300.75,664.41 1301.31,634.938 1301.87,669.13 1302.43,705.201 1302.99,720.787 1303.55,718.275 1304.1,701.524 1304.66,700.206 1305.22,702.258 1305.78,687.606 1306.34,714.975 1306.9,696.95 1307.46,678.346 1308.02,646.785 1308.58,651.157 1309.14,635.521 1309.7,636.378 1310.26,672.972 1310.82,627.059 1311.38,679.685 1311.93,678.051 1312.49,680.423 1313.05,713.562 1313.61,696.382 1314.17,711.945 1314.73,706.571 1315.29,705.309 1315.85,702.329 1316.41,702.926 1316.97,686.774 1317.53,690.004 1318.09,689.866 1318.65,655.633 1319.2,639.176 1319.76,647.192 1320.32,649.445 1320.88,617.432 1321.44,621.034 1322,657.267 1322.56,675.9 1323.12,676.169 1323.68,678.369 1324.24,661.289 1324.8,663.799 1325.36,647.51 1325.92,635.532 1326.47,639.18 1327.03,642.373 1327.59,678.012 1328.15,662.013 1328.71,664.526 1329.27,681.749 1329.83,664.799 1330.39,652.461 1330.95,652.371 1331.51,640.237 1332.07,658.975 1332.63,660.869 1333.19,643.672 1333.75,660.551 1334.3,708.544 1334.86,710.289 1335.42,724.815 1335.98,720.513 1336.54,720.192 1337.1,722.108 1337.66,770.296 1338.22,798.782 1338.78,760.229 1339.34,728.504 1339.9,722.493 1340.46,689.757 1341.02,705.39 1341.57,688.487 1342.13,733.444 1342.69,679.297 1343.25,699.451 1343.81,701.376 1344.37,717.544 1344.93,712.476 1345.49,730.101 1346.05,663.041 1346.61,681.56 1347.17,729.798 1347.73,712.703 1348.29,710.266 1348.84,711.63 1349.4,710.816 1349.96,710.874 1350.52,715.843 1351.08,717.197 1351.64,704.103 1352.2,705.999 1352.76,737.94 1353.32,719.184 1353.88,717.814 1354.44,719.911 1355,749.982 1355.56,728.957 1356.12,710.418 1356.67,674.73 1357.23,676.924 1357.79,677.22 1358.35,675.817 1358.91,656.269 1359.47,641.947 1360.03,664.223 1360.59,661.319 1361.15,678.359 1361.71,680.879 1362.27,681.196 1362.83,684.088 1363.39,650.401 1363.94,633.905 1364.5,668.139 1365.06,669.281 1365.62,669.433 1366.18,669.525 1366.74,671.553 1367.3,670.69 1367.86,669.375 1368.42,656.486 1368.98,657.524 1369.54,674.475 1370.1,687.169 1370.66,654.639 1371.21,625.241 1371.77,659.231 1372.33,648.034 1372.89,650.541 1373.45,667.987 1374.01,635.585 1374.57,656.091 1375.13,596.581 1375.69,588.165 1376.25,612.828 1376.81,617.972 1377.37,608.063 1377.93,594.665 1378.49,586.082 1379.04,590.459 1379.6,629.366 1380.16,634.605 1380.72,653.037 1381.28,685.891 1381.84,733.678 1382.4,731.798 1382.96,714.27 1383.52,712.78 1384.08,726.908 1384.64,761.605 1385.2,727.955 1385.76,727.001 1386.31,738.708 1386.87,734.984 1387.43,717.695 1387.99,718.044 1388.55,732.356 1389.11,710.593 1389.67,691.395 1390.23,674.722 1390.79,675.674 1391.35,676.586 1391.91,676.273 1392.47,714.27 1393.03,745.162 1393.58,726.961 1394.14,741.783 1394.7,751.953 1395.26,747.73 1395.82,740.907 1396.38,722.665 1396.94,719.897 1397.5,716.954 1398.06,699.093 1398.62,697.137 1399.18,677.878 1399.74,679.176 1400.3,664.72 1400.86,680.167 1401.41,678.25 1401.97,711.593 1402.53,697.674 1403.09,713.253 1403.65,677.738 1404.21,661.664 1404.77,708.669 1405.33,690.856 1405.89,707.295 1406.45,739.397 1407.01,721.268 1407.57,736.203 1408.13,738.02 1408.68,722.259 1409.24,691.824 1409.8,705.867 1410.36,690.567 1410.92,707.045 1411.48,718.251 1412.04,682.665 1412.6,680.063 1413.16,698.832 1413.72,694.931 1414.28,678.513 1414.84,661.008 1415.4,697.403 1415.95,662.486 1416.51,648.096 1417.07,679.632 1417.63,677.643 1418.19,692.91 1418.75,709.31 1419.31,708.164 1419.87,707.532 1420.43,725.909 1420.99,709.032 1421.55,709.247 1422.11,709.743 1422.67,674.419 1423.23,674.523 1423.78,624.439 1424.34,628.191 1424.9,631.408 1425.46,662.18 1426.02,645.36 1426.58,645.665 1427.14,663.781 1427.7,712.162 1428.26,724.627 1428.82,720.37 1429.38,716.641 1429.94,682.678 1430.5,700.565 1431.05,697.92 1431.61,715.111 1432.17,682.251 1432.73,682.495 1433.29,651.508 1433.85,651.495 1434.41,636.779 1434.97,638.185 1435.53,657.061 1436.09,690.515 1436.65,705.874 1437.21,687.727 1437.77,671.658 1438.33,673.361 1438.88,657.362 1439.44,640.995 1440,643.648 1440.56,631.232 1441.12,633.466 1441.68,665.559 1442.24,664.642 1442.8,646.635 1443.36,617.482 1443.92,619.727 1444.48,636.488 1445.04,640.938 1445.6,643.199 1446.15,662.103 1446.71,666.663 1447.27,668.006 1447.83,685.708 1448.39,652.573 1448.95,651.055 1449.51,670.45 1450.07,704.817 1450.63,702.991 1451.19,716.943 1451.75,714.262 1452.31,733.132 1452.87,748.528 1453.42,778.311 1453.98,771.296 1454.54,732.64 1455.1,698.777 1455.66,733.11 1456.22,730.976 1456.78,711.923 1457.34,709.588 1457.9,676.186 1458.46,674.7 1459.02,673.967 1459.58,658.196 1460.14,642.257 1460.7,691.792 1461.25,643.873 1461.81,645.894 1462.37,582.242 1462.93,591.315 1463.49,613.604 1464.05,648.255 1464.61,633.254 1465.17,670.372 1465.73,668.612 1466.29,682.712 1466.85,687.609 1467.41,686.619 1467.97,717.129 1468.52,701.125 1469.08,669.089 1469.64,618.094 1470.2,640.842 1470.76,657.204 1471.32,641.752 1471.88,645.301 1472.44,629.614 1473,653.428 1473.56,628.209 1474.12,569.949 1474.68,578.936 1475.24,565.474 1475.79,588.124 1476.35,561.349 1476.91,550.595 1477.47,560.666 1478.03,567.445 1478.59,557.502 1479.15,566.22 1479.71,556.296 1480.27,579.836 1480.83,585.536 1481.39,592.983 1481.95,645.25 1482.51,629.504 1483.07,648.475 1483.62,664.845 1484.18,665.583 1484.74,682.117 1485.3,682.597 1485.86,651.108 1486.42,669.024 1486.98,681.803 1487.54,728.925 1488.1,693.758 1488.66,691.452 1489.22,720.877 1489.78,752.064 1490.34,763.099 1490.89,791.215 1491.45,772.456 1492.01,769.387 1492.57,766.129 1493.13,779.948 1493.69,789.976 1494.25,769.95 1494.81,782.335 1495.37,729.585 1495.93,727.123 1496.49,708.437 1497.05,722.845 1497.61,719.917 1498.16,719.955 1498.72,686.418 1499.28,651.791 1499.84,669.878 1500.4,667.793 1500.96,651.99 1501.52,668.263 1502.08,666.074 1502.64,668.632 1503.2,686.285 1503.76,687.99 1504.32,690.299 1504.88,672.338 1505.44,674.95 1505.99,658.732 1506.55,672.616 1507.11,673.05 1507.67,689.813 1508.23,671.438 1508.79,637.83 1509.35,592.558 1509.91,612.275 1510.47,650.035 1511.03,637.339 1511.59,637.777 1512.15,640.986 1512.71,644.301 1513.26,629.364 1513.82,630.997 1514.38,621.413 1514.94,622.092 1515.5,608.374 1516.06,630.395 1516.62,620.828 1517.18,610.285 1517.74,630.331 1518.3,599.188 1518.86,603.251 1519.42,606.853 1519.98,594.712 1520.53,613.475 1521.09,601.176 1521.65,621.046 1522.21,638.609 1522.77,658.244 1523.33,676.417 1523.89,694.26 1524.45,727.17 1525.01,725.165 1525.57,704.69 1526.13,731.385 1526.69,728.236 1527.25,711.03 1527.81,707.244 1528.36,720.453 1528.92,718.772 1529.48,681.235 1530.04,665.752 1530.6,619.486 1531.16,625.418 1531.72,645.567 1532.28,628.703 1532.84,664.009 1533.4,666.021 1533.96,649.647 1534.52,651.768 1535.08,656.102 1535.63,638.922 1536.19,659.903 1536.75,656.77 1537.31,674.582 1537.87,693.962 1538.43,711.5 1538.99,697.077 1539.55,740.686 1540.11,755.14 1540.67,756.151 1541.23,780.575 1541.79,762.572 1542.35,759.402 1542.9,723.531 1543.46,721.478 1544.02,703.817 1544.58,713.844 1545.14,696.663 1545.7,695.852 1546.26,713.907 1546.82,728.087 1547.38,720.539 1547.94,718.032 1548.5,731 1549.06,759.825 1549.62,754.942 1550.18,748.104 1550.73,760.189 1551.29,753.781 1551.85,749.073 1552.41,747.706 1552.97,780.242 1553.53,787.388 1554.09,782.116 1554.65,759.828 1555.21,738.657 1555.77,766.236 1556.33,773.241 1556.89,737.592 1557.45,732.895 1558,731.207 1558.56,740.901 1559.12,718.787 1559.68,699.923 1560.24,710.647 1560.8,690.033 1561.36,689.013 1561.92,675.652 1562.48,678.564 1563.04,646.936 1563.6,665.555 1564.16,667.279 1564.72,651.818 1565.28,654.69 1565.83,641.819 1566.39,647.997 1566.95,698.584 1567.51,678.855 1568.07,695.191 1568.63,711.396 1569.19,711.742 1569.75,690.851 1570.31,692.567 1570.87,643.166 1571.43,675.701 1571.99,673.047 1572.55,690.509 1573.1,690.268 1573.66,692.279 1574.22,677.888 1574.78,647.622 1575.34,650.74 1575.9,651.165 1576.46,671.441 1577.02,691.799 1577.58,673.588 1578.14,708.432 1578.7,707.196 1579.26,740.558 1579.82,705.055 1580.37,705.18 1580.93,684.889 1581.49,685.192 1582.05,714.684 1582.61,679.744 1583.17,695.027 1583.73,693.338 1584.29,708.419 1584.85,693.855 1585.41,661.969 1585.97,632.045 1586.53,650.508 1587.09,669.922 1587.65,669.285 1588.2,685.941 1588.76,686.681 1589.32,699.368 1589.88,683.084 1590.44,714.954 1591,667.249 1591.56,697.039 1592.12,679.225 1592.68,661.844 1593.24,667.361 1593.8,656.512 1594.36,659.341 1594.92,645.362 1595.47,628.923 1596.03,650.543 1596.59,640.991 1597.15,674.762 1597.71,672.379 1598.27,656.552 1598.83,642.314 1599.39,661.144 1599.95,662.635 1600.51,661.857 1601.07,647.86 1601.63,632.685 1602.19,639.516 1602.74,620.628 1603.3,622.987 1603.86,609.097 1604.42,584.633 1604.98,589.766 1605.54,593.757 1606.1,632.908 1606.66,634.682 1607.22,589.821 1607.78,609.41 1608.34,628.957 1608.9,665.368 1609.46,648.275 1610.02,681.894 1610.57,634.182 1611.13,606.678 1611.69,643.278 1612.25,696.85 1612.81,693.323 1613.37,724.804 1613.93,770.187 1614.49,767.166 1615.05,782.426 1615.61,760.124 1616.17,769.177 1616.73,762.147 1617.29,758.339 1617.84,769.324 1618.4,781.068 1618.96,763.82 1619.52,792.348 1620.08,787.058 1620.64,780.857 1621.2,772.524 1621.76,747.226 1622.32,745.464 1622.88,739.527 1623.44,721.174 1624,703.747 1624.56,703.962 1625.11,703.27 1625.67,713.622 1626.23,708.256 1626.79,722.033 1627.35,688.644 1627.91,652.228 1628.47,669.472 1629.03,671.98 1629.59,685.402 1630.15,686.55 1630.71,654.046 1631.27,657.986 1631.83,644.946 1632.39,648.502 1632.94,665.561 1633.5,634.748 1634.06,649.731 1634.62,616.014 1635.18,600.719 1635.74,604.579 1636.3,591.32 1636.86,598.788 1637.42,606.718 1637.98,629.112 1638.54,633.592 1639.1,618.679 1639.66,655.659 1640.21,658.933 1640.77,657.914 1641.33,660.205 1641.89,675.678 1642.45,692.468 1643.01,693.64 1643.57,695.123 1644.13,693.095 1644.69,694.692 1645.25,745.271 1645.81,729.885 1646.37,743.204 1646.93,761.005 1647.48,757.435 1648.04,753.698 1648.6,734.695 1649.16,716.895 1649.72,677.814 1650.28,677.65 1650.84,677.437 1651.4,659.233 1651.96,695.364 1652.52,695.389 1653.08,713.884 1653.64,680.477 1654.2,680.971 1654.76,698.249 1655.31,710.958 1655.87,725.248 1656.43,722.044 1656.99,750.685 1657.55,777.031 1658.11,755.298 1658.67,767.38 1659.23,747.252 1659.79,759.318 1660.35,760.368 1660.91,753.938 1661.47,748.462 1662.03,745.518 1662.58,741.673 1663.14,765.537 1663.7,714.13 1664.26,696.893 1664.82,728.886 1665.38,728.618 1665.94,727.212 1666.5,720.603 1667.06,701.807 1667.62,714.765 1668.18,713.646 1668.74,698.325 1669.3,668.835 1669.85,668.567 1670.41,682.425 1670.97,665.162 1671.53,667.02 1672.09,652.578 1672.65,653.154 1673.21,641.434 1673.77,662.095 1674.33,643.872 1674.89,663.358 1675.45,696.096 1676.01,729.107 1676.57,760.46 1677.13,772.226 1677.68,719.424 1678.24,730.267 1678.8,729.304 1679.36,745.291 1679.92,744.706 1680.48,757.293 1681.04,768.056 1681.6,781.032 1682.16,726.575 1682.72,724.97 1683.28,704.613 1683.84,701.786 1684.4,734.567 1684.95,764.958 1685.51,774.316 1686.07,768.71 1686.63,763.522 1687.19,760.361 1687.75,772.844 1688.31,767.053 1688.87,768.967 1689.43,762.817 1689.99,739.32 1690.55,719.525 1691.11,682.645 1691.67,667.427 1692.23,699.58 1692.78,685.754 1693.34,669.713 1693.9,670.768 1694.46,684.647 1695.02,716.888 1695.58,679.811 1696.14,681.57 1696.7,694.03 1697.26,705.934 1697.82,721.042 1698.38,655.033 1698.94,621.605 1699.5,628.37 1700.05,629.321 1700.61,663.693 1701.17,612.129 1701.73,632.777 1702.29,667.206 1702.85,667.082 1703.41,684.052 1703.97,684.333 1704.53,637.407 1705.09,636.567 1705.65,638.794 1706.21,640.901 1706.77,626.783 1707.32,628.113 1707.88,630.853 1708.44,634.623 1709,624.351 1709.56,627.808 1710.12,632.197 1710.68,632.237 1711.24,615.466 1711.8,616.794 1712.36,635.345 1712.92,656.266 1713.48,640.412 1714.04,642.657 1714.6,693.362 1715.15,677.115 1715.71,664.771 1716.27,651.487 1716.83,652.819 1717.39,669.149 1717.95,671.748 1718.51,686.814 1719.07,722.742 1719.63,720.918 1720.19,751.264 1720.75,719.269 1721.31,714.425 1721.87,680.287 1722.42,681.95 1722.98,685.438 1723.54,699.698 1724.1,713.777 1724.66,710.726 1725.22,689.706 1725.78,656.808 1726.34,673.048 1726.9,691.533 1727.46,646.449 1728.02,636.288 1728.58,653.681 1729.14,593.67 1729.69,613.556 1730.25,614.738 1730.81,634.514 1731.37,653.575 1731.93,637.275 1732.49,655.352 1733.05,674.892 1733.61,676.179 1734.17,694.256 1734.73,693.418 1735.29,706.96 1735.85,721.777 1736.41,686.103 1736.97,666.746 1737.52,671.858 1738.08,704.79 1738.64,735.465 1739.2,685.006 1739.76,701.237 1740.32,684.666 1740.88,670.794 1741.44,619.679 1742,607.327 1742.56,597.343 1743.12,634.695 1743.68,649.698 1744.24,651.007 1744.79,635.382 1745.35,657.159 1745.91,661.717 1746.47,664.319 1747.03,714.633 1747.59,744.737 1748.15,730.101 1748.71,710.594 1749.27,694.627 1749.83,711.307 1750.39,694.815 1750.95,697.408 1751.51,696.007 1752.06,695.347 1752.62,698.693 1753.18,715.129 1753.74,725.705 1754.3,738.941 1754.86,753.72 1755.42,748.331 1755.98,744.654 1756.54,742.067 1757.1,772.944 1757.66,769.806 1758.22,746.198 1758.78,744.795 1759.34,790.62 1759.89,786.112 1760.45,748.139 1761.01,743.817 1761.57,742.743 1762.13,740.684 1762.69,754.056 1763.25,735.81 1763.81,749.994 1764.37,714.424 1764.93,714.601 1765.49,682.011 1766.05,714.152 1766.61,728.9 1767.16,695.755 1767.72,681.322 1768.28,646.016 1768.84,633.425 1769.4,623.201 1769.96,640.824 1770.52,645.141 1771.08,646.085 1771.64,664.442 1772.2,666.022 1772.76,650.512 1773.32,650.369 1773.88,655.34 1774.43,686.169 1774.99,669.249 1775.55,668.592 1776.11,717.889 1776.67,714.581 1777.23,679.42 1777.79,647.906 1778.35,668.374 1778.91,688.15 1779.47,653.712 1780.03,607.73 1780.59,596.065 1781.15,617.171 1781.71,623.464 1782.26,645.734 1782.82,632.563 1783.38,620.042 1783.94,657.391 1784.5,659.804 1785.06,691.234 1785.62,674.256 1786.18,690.637 1786.74,691.054 1787.3,676.927 1787.86,657.8 1788.42,642.731 1788.98,629.162 1789.53,629.997 1790.09,619.783 1790.65,591.484 1791.21,597.532 1791.77,638.928 1792.33,674.124 1792.89,674.245 1793.45,673.358 1794.01,674.255 1794.57,659.962 1795.13,663.027 1795.69,662.278 1796.25,646.72 1796.8,665.975 1797.36,685.069 1797.92,716.865 1798.48,733.122 1799.04,731.508 1799.6,729.503 1800.16,727.011 1800.72,691.548 1801.28,690.29 1801.84,676.671 1802.4,663.317 1802.96,664.997 1803.52,684.923 1804.08,716.988 1804.63,697.982 1805.19,695.873 1805.75,678.79 1806.31,659.945 1806.87,662.379 1807.43,693.587 1807.99,693.85 1808.55,680.913 1809.11,679.551 1809.67,677.403 1810.23,644.997 1810.79,645.006 1811.35,615.574 1811.9,622.387 1812.46,611.34 1813.02,618.718 1813.58,604.044 1814.14,625.396 1814.7,595.87 1815.26,597.786 1815.82,618.514 1816.38,638.394 1816.94,622.989 1817.5,672.102 1818.06,676.476 1818.62,707.883 1819.18,720.115 1819.73,682.486 1820.29,731.853 1820.85,742.633 1821.41,772.402 1821.97,764.042 1822.53,791.285 1823.09,802.632 1823.65,783.186 1824.21,812.285 1824.77,806.643 1825.33,784.128 1825.89,781.57 1826.45,810.154 1827,820.412 1827.56,812.813 1828.12,807.937 1828.68,798.296 1829.24,792.624 1829.8,753.717 1830.36,683.505 1830.92,682.486 1831.48,650.058 1832.04,671.324 1832.6,669.359 1833.16,653.431 1833.72,640.536 1834.27,629.756 1834.83,619.547 1835.39,607.341 1835.95,623.756 1836.51,642.449 1837.07,644.657 1837.63,643.723 1838.19,643.857 \"/>\n<path clip-path=\"url(#clip113)\" d=\"M720.247 689.973 L720.806 689.973 L721.365 689.973 L721.924 689.973 L722.484 689.973 L723.043 689.973 L723.602 689.973 L724.161 689.973 L724.721 689.973 L725.28 689.973 L725.839 689.973 L726.398 689.973 L726.958 689.973 L727.517 689.973 L728.076 689.973 L728.635 689.973 L729.195 689.973 L729.754 689.973 L730.313 689.973 L730.872 689.973 L731.432 689.973 L731.991 689.973 L732.55 689.973 L733.109 689.973 L733.669 689.973 L734.228 689.973 L734.787 689.973 L735.346 689.973 L735.906 689.973 L736.465 689.973 L737.024 689.973 L737.583 689.973 L738.143 689.973 L738.702 689.973 L739.261 689.973 L739.82 689.973 L740.38 689.973 L740.939 689.973 L741.498 689.973 L742.057 689.973 L742.617 689.973 L743.176 689.973 L743.735 689.973 L744.294 689.973 L744.854 689.973 L745.413 689.973 L745.972 689.973 L746.531 689.973 L747.091 689.973 L747.65 689.973 L748.209 689.973 L748.768 689.973 L749.328 689.973 L749.887 689.973 L750.446 689.973 L751.005 689.973 L751.565 689.973 L752.124 689.973 L752.683 689.973 L753.242 689.973 L753.802 689.973 L754.361 689.973 L754.92 689.973 L755.479 689.973 L756.039 689.973 L756.598 689.973 L757.157 689.973 L757.716 689.973 L758.276 689.973 L758.835 689.973 L759.394 689.973 L759.953 689.973 L760.513 689.973 L761.072 689.973 L761.631 689.973 L762.19 689.973 L762.75 689.973 L763.309 689.973 L763.868 689.973 L764.427 689.973 L764.987 689.973 L765.546 689.973 L766.105 689.973 L766.664 689.973 L767.224 689.973 L767.783 689.973 L768.342 689.973 L768.901 689.973 L769.461 689.973 L770.02 689.973 L770.579 689.973 L771.138 689.973 L771.698 689.973 L772.257 689.973 L772.816 689.973 L773.375 689.973 L773.935 689.973 L774.494 689.973 L775.053 689.973 L775.612 689.973 L776.172 689.973 L776.731 689.973 L777.29 689.973 L777.849 689.973 L778.409 689.973 L778.968 689.973 L779.527 689.973 L780.086 689.973 L780.646 689.973 L781.205 689.973 L781.764 689.973 L782.323 689.973 L782.883 689.973 L783.442 689.973 L784.001 689.973 L784.56 689.973 L785.12 689.973 L785.679 689.973 L786.238 689.973 L786.797 689.973 L787.357 689.973 L787.916 689.973 L788.475 689.973 L789.034 689.973 L789.594 689.973 L790.153 689.973 L790.712 689.973 L791.271 689.973 L791.831 689.973 L792.39 689.973 L792.949 689.973 L793.508 689.973 L794.068 689.973 L794.627 689.973 L795.186 689.973 L795.745 689.973 L796.305 689.973 L796.864 689.973 L797.423 689.973 L797.982 689.973 L798.542 689.973 L799.101 689.973 L799.66 689.973 L800.219 689.973 L800.779 689.973 L801.338 689.973 L801.897 689.973 L802.456 689.973 L803.016 689.973 L803.575 689.973 L804.134 689.973 L804.693 689.973 L805.253 689.973 L805.812 689.973 L806.371 689.973 L806.931 689.973 L807.49 689.973 L808.049 689.973 L808.608 689.973 L809.168 689.973 L809.727 689.973 L810.286 689.973 L810.845 689.973 L811.405 689.973 L811.964 689.973 L812.523 689.973 L813.082 689.973 L813.642 689.973 L814.201 689.973 L814.76 689.973 L815.319 689.973 L815.879 689.973 L816.438 689.973 L816.997 689.973 L817.556 689.973 L818.116 689.973 L818.675 689.973 L819.234 689.973 L819.793 689.973 L820.353 689.973 L820.912 689.973 L821.471 689.973 L822.03 689.973 L822.59 689.973 L823.149 689.973 L823.708 689.973 L824.267 689.973 L824.827 689.973 L825.386 689.973 L825.945 689.973 L826.504 689.973 L827.064 689.973 L827.623 689.973 L828.182 689.973 L828.741 689.973 L829.301 689.973 L829.86 689.973 L830.419 689.973 L830.978 689.973 L831.538 689.973 L832.097 689.973 L832.656 689.973 L833.215 689.973 L833.775 689.973 L834.334 689.973 L834.893 689.973 L835.452 689.973 L836.012 689.973 L836.571 689.973 L837.13 689.973 L837.689 689.973 L838.249 689.973 L838.808 689.973 L839.367 689.973 L839.926 689.973 L840.486 689.973 L841.045 689.973 L841.604 689.973 L842.163 689.973 L842.723 689.973 L843.282 689.973 L843.841 689.973 L844.4 689.973 L844.96 689.973 L845.519 689.973 L846.078 689.973 L846.637 689.973 L847.197 689.973 L847.756 689.973 L848.315 689.973 L848.874 689.973 L849.434 689.973 L849.993 689.973 L850.552 689.973 L851.111 689.973 L851.671 689.973 L852.23 689.973 L852.789 689.973 L853.348 689.973 L853.908 689.973 L854.467 689.973 L855.026 689.973 L855.585 689.973 L856.145 689.973 L856.704 689.973 L857.263 689.973 L857.822 689.973 L858.382 689.973 L858.941 689.973 L859.5 689.973 L860.059 689.973 L860.619 689.973 L861.178 689.973 L861.737 689.973 L862.296 689.973 L862.856 689.973 L863.415 689.973 L863.974 689.973 L864.533 689.973 L865.093 689.973 L865.652 689.973 L866.211 689.973 L866.77 689.973 L867.33 689.973 L867.889 689.973 L868.448 689.973 L869.007 689.973 L869.567 689.973 L870.126 689.973 L870.685 689.973 L871.244 689.973 L871.804 689.973 L872.363 689.973 L872.922 689.973 L873.481 689.973 L874.041 689.973 L874.6 689.973 L875.159 689.973 L875.718 689.973 L876.278 689.973 L876.837 689.973 L877.396 689.973 L877.955 689.973 L878.515 689.973 L879.074 689.973 L879.633 689.973 L880.192 689.973 L880.752 689.973 L881.311 689.973 L881.87 689.973 L882.429 689.973 L882.989 689.973 L883.548 689.973 L884.107 689.973 L884.666 689.973 L885.226 689.973 L885.785 689.973 L886.344 689.973 L886.903 689.973 L887.463 689.973 L888.022 689.973 L888.581 689.973 L889.14 689.973 L889.7 689.973 L890.259 689.973 L890.818 689.973 L891.377 689.973 L891.937 689.973 L892.496 689.973 L893.055 689.973 L893.614 689.973 L894.174 689.973 L894.733 689.973 L895.292 689.973 L895.851 689.973 L896.411 689.973 L896.97 689.973 L897.529 689.973 L898.088 689.973 L898.648 689.973 L899.207 689.973 L899.766 689.973 L900.325 689.973 L900.885 689.973 L901.444 689.973 L902.003 689.973 L902.562 689.973 L903.122 689.973 L903.681 689.973 L904.24 689.973 L904.799 689.973 L905.359 689.973 L905.918 689.973 L906.477 689.973 L907.036 689.973 L907.596 689.973 L908.155 689.973 L908.714 689.973 L909.273 689.973 L909.833 689.973 L910.392 689.973 L910.951 689.973 L911.51 689.973 L912.07 689.973 L912.629 689.973 L913.188 689.973 L913.747 689.973 L914.307 689.973 L914.866 689.973 L915.425 689.973 L915.984 689.973 L916.544 689.973 L917.103 689.973 L917.662 689.973 L918.221 689.973 L918.781 689.973 L919.34 689.973 L919.899 689.973 L920.458 689.973 L921.018 689.973 L921.577 689.973 L922.136 689.973 L922.695 689.973 L923.255 689.973 L923.814 689.973 L924.373 689.973 L924.932 689.973 L925.492 689.973 L926.051 689.973 L926.61 689.973 L927.169 689.973 L927.729 689.973 L928.288 689.973 L928.847 689.973 L929.406 689.973 L929.966 689.973 L930.525 689.973 L931.084 689.973 L931.644 689.973 L932.203 689.973 L932.762 689.973 L933.321 689.973 L933.881 689.973 L934.44 689.973 L934.999 689.973 L935.558 689.973 L936.118 689.973 L936.677 689.973 L937.236 689.973 L937.795 689.973 L938.355 689.973 L938.914 689.973 L939.473 689.973 L940.032 689.973 L940.592 689.973 L941.151 689.973 L941.71 689.973 L942.269 689.973 L942.829 689.973 L943.388 689.973 L943.947 689.973 L944.506 689.973 L945.066 689.973 L945.625 689.973 L946.184 689.973 L946.743 689.973 L947.303 689.973 L947.862 689.973 L948.421 689.973 L948.98 689.973 L949.54 689.973 L950.099 689.973 L950.658 689.973 L951.217 689.973 L951.777 689.973 L952.336 689.973 L952.895 689.973 L953.454 689.973 L954.014 689.973 L954.573 689.973 L955.132 689.973 L955.691 689.973 L956.251 689.973 L956.81 689.973 L957.369 689.973 L957.928 689.973 L958.488 689.973 L959.047 689.973 L959.606 689.973 L960.165 689.973 L960.725 689.973 L961.284 689.973 L961.843 689.973 L962.402 689.973 L962.962 689.973 L963.521 689.973 L964.08 689.973 L964.639 689.973 L965.199 689.973 L965.758 689.973 L966.317 689.973 L966.876 689.973 L967.436 689.973 L967.995 689.973 L968.554 689.973 L969.113 689.973 L969.673 689.973 L970.232 689.973 L970.791 689.973 L971.35 689.973 L971.91 689.973 L972.469 689.973 L973.028 689.973 L973.587 689.973 L974.147 689.973 L974.706 689.973 L975.265 689.973 L975.824 689.973 L976.384 689.973 L976.943 689.973 L977.502 689.973 L978.061 689.973 L978.621 689.973 L979.18 689.973 L979.739 689.973 L980.298 689.973 L980.858 689.973 L981.417 689.973 L981.976 689.973 L982.535 689.973 L983.095 689.973 L983.654 689.973 L984.213 689.973 L984.772 689.973 L985.332 689.973 L985.891 689.973 L986.45 689.973 L987.009 689.973 L987.569 689.973 L988.128 689.973 L988.687 689.973 L989.246 689.973 L989.806 689.973 L990.365 689.973 L990.924 689.973 L991.483 689.973 L992.043 689.973 L992.602 689.973 L993.161 689.973 L993.72 689.973 L994.28 689.973 L994.839 689.973 L995.398 689.973 L995.957 689.973 L996.517 689.973 L997.076 689.973 L997.635 689.973 L998.194 689.973 L998.754 689.973 L999.313 689.973 L999.872 689.973 L1000.43 689.973 L1000.99 689.973 L1001.55 689.973 L1002.11 689.973 L1002.67 689.973 L1003.23 689.973 L1003.79 689.973 L1004.35 689.973 L1004.91 689.973 L1005.46 689.973 L1006.02 689.973 L1006.58 689.973 L1007.14 689.973 L1007.7 689.973 L1008.26 689.973 L1008.82 689.973 L1009.38 689.973 L1009.94 689.973 L1010.5 689.973 L1011.06 689.973 L1011.62 689.973 L1012.18 689.973 L1012.73 689.973 L1013.29 689.973 L1013.85 689.973 L1014.41 689.973 L1014.97 689.973 L1015.53 689.973 L1016.09 689.973 L1016.65 689.973 L1017.21 689.973 L1017.77 689.973 L1018.33 689.973 L1018.89 689.973 L1019.45 689.973 L1020.01 689.973 L1020.56 689.973 L1021.12 689.973 L1021.68 689.973 L1022.24 689.973 L1022.8 689.973 L1023.36 689.973 L1023.92 689.973 L1024.48 689.973 L1025.04 689.973 L1025.6 689.973 L1026.16 689.973 L1026.72 689.973 L1027.28 689.973 L1027.83 689.973 L1028.39 689.973 L1028.95 689.973 L1029.51 689.973 L1030.07 689.973 L1030.63 689.973 L1031.19 689.973 L1031.75 689.973 L1032.31 689.973 L1032.87 689.973 L1033.43 689.973 L1033.99 689.973 L1034.55 689.973 L1035.1 689.973 L1035.66 689.973 L1036.22 689.973 L1036.78 689.973 L1037.34 689.973 L1037.9 689.973 L1038.46 689.973 L1039.02 689.973 L1039.58 689.973 L1040.14 689.973 L1040.7 689.973 L1041.26 689.973 L1041.82 689.973 L1042.38 689.973 L1042.93 689.973 L1043.49 689.973 L1044.05 689.973 L1044.61 689.973 L1045.17 689.973 L1045.73 689.973 L1046.29 689.973 L1046.85 689.973 L1047.41 689.973 L1047.97 689.973 L1048.53 689.973 L1049.09 689.973 L1049.65 689.973 L1050.2 689.973 L1050.76 689.973 L1051.32 689.973 L1051.88 689.973 L1052.44 689.973 L1053 689.973 L1053.56 689.973 L1054.12 689.973 L1054.68 689.973 L1055.24 689.973 L1055.8 689.973 L1056.36 689.973 L1056.92 689.973 L1057.48 689.973 L1058.03 689.973 L1058.59 689.973 L1059.15 689.973 L1059.71 689.973 L1060.27 689.973 L1060.83 689.973 L1061.39 689.973 L1061.95 689.973 L1062.51 689.973 L1063.07 689.973 L1063.63 689.973 L1064.19 689.973 L1064.75 689.973 L1065.3 689.973 L1065.86 689.973 L1066.42 689.973 L1066.98 689.973 L1067.54 689.973 L1068.1 689.973 L1068.66 689.973 L1069.22 689.973 L1069.78 689.973 L1070.34 689.973 L1070.9 689.973 L1071.46 689.973 L1072.02 689.973 L1072.57 689.973 L1073.13 689.973 L1073.69 689.973 L1074.25 689.973 L1074.81 689.973 L1075.37 689.973 L1075.93 689.973 L1076.49 689.973 L1077.05 689.973 L1077.61 689.973 L1078.17 689.973 L1078.73 689.973 L1079.29 689.973 L1079.85 689.973 L1080.4 689.973 L1080.96 689.973 L1081.52 689.973 L1082.08 689.973 L1082.64 689.973 L1083.2 689.973 L1083.76 689.973 L1084.32 689.973 L1084.88 689.973 L1085.44 689.973 L1086 689.973 L1086.56 689.973 L1087.12 689.973 L1087.67 689.973 L1088.23 689.973 L1088.79 689.973 L1089.35 689.973 L1089.91 689.973 L1090.47 689.973 L1091.03 689.973 L1091.59 689.973 L1092.15 689.973 L1092.71 689.973 L1093.27 689.973 L1093.83 689.973 L1094.39 689.973 L1094.94 689.973 L1095.5 689.973 L1096.06 689.973 L1096.62 689.973 L1097.18 689.973 L1097.74 689.973 L1098.3 689.973 L1098.86 689.973 L1099.42 689.973 L1099.98 689.973 L1100.54 689.973 L1101.1 689.973 L1101.66 689.973 L1102.22 689.973 L1102.77 689.973 L1103.33 689.973 L1103.89 689.973 L1104.45 689.973 L1105.01 689.973 L1105.57 689.973 L1106.13 689.973 L1106.69 689.973 L1107.25 689.973 L1107.81 689.973 L1108.37 689.973 L1108.93 689.973 L1109.49 689.973 L1110.04 689.973 L1110.6 689.973 L1111.16 689.973 L1111.72 689.973 L1112.28 689.973 L1112.84 689.973 L1113.4 689.973 L1113.96 689.973 L1114.52 689.973 L1115.08 689.973 L1115.64 689.973 L1116.2 689.973 L1116.76 689.973 L1117.31 689.973 L1117.87 689.973 L1118.43 689.973 L1118.99 689.973 L1119.55 689.973 L1120.11 689.973 L1120.67 689.973 L1121.23 689.973 L1121.79 689.973 L1122.35 689.973 L1122.91 689.973 L1123.47 689.973 L1124.03 689.973 L1124.59 689.973 L1125.14 689.973 L1125.7 689.973 L1126.26 689.973 L1126.82 689.973 L1127.38 689.973 L1127.94 689.973 L1128.5 689.973 L1129.06 689.973 L1129.62 689.973 L1130.18 689.973 L1130.74 689.973 L1131.3 689.973 L1131.86 689.973 L1132.41 689.973 L1132.97 689.973 L1133.53 689.973 L1134.09 689.973 L1134.65 689.973 L1135.21 689.973 L1135.77 689.973 L1136.33 689.973 L1136.89 689.973 L1137.45 689.973 L1138.01 689.973 L1138.57 689.973 L1139.13 689.973 L1139.68 689.973 L1140.24 689.973 L1140.8 689.973 L1141.36 689.973 L1141.92 689.973 L1142.48 689.973 L1143.04 689.973 L1143.6 689.973 L1144.16 689.973 L1144.72 689.973 L1145.28 689.973 L1145.84 689.973 L1146.4 689.973 L1146.96 689.973 L1147.51 689.973 L1148.07 689.973 L1148.63 689.973 L1149.19 689.973 L1149.75 689.973 L1150.31 689.973 L1150.87 689.973 L1151.43 689.973 L1151.99 689.973 L1152.55 689.973 L1153.11 689.973 L1153.67 689.973 L1154.23 689.973 L1154.78 689.973 L1155.34 689.973 L1155.9 689.973 L1156.46 689.973 L1157.02 689.973 L1157.58 689.973 L1158.14 689.973 L1158.7 689.973 L1159.26 689.973 L1159.82 689.973 L1160.38 689.973 L1160.94 689.973 L1161.5 689.973 L1162.05 689.973 L1162.61 689.973 L1163.17 689.973 L1163.73 689.973 L1164.29 689.973 L1164.85 689.973 L1165.41 689.973 L1165.97 689.973 L1166.53 689.973 L1167.09 689.973 L1167.65 689.973 L1168.21 689.973 L1168.77 689.973 L1169.33 689.973 L1169.88 689.973 L1170.44 689.973 L1171 689.973 L1171.56 689.973 L1172.12 689.973 L1172.68 689.973 L1173.24 689.973 L1173.8 689.973 L1174.36 689.973 L1174.92 689.973 L1175.48 689.973 L1176.04 689.973 L1176.6 689.973 L1177.15 689.973 L1177.71 689.973 L1178.27 689.973 L1178.83 689.973 L1179.39 689.973 L1179.95 689.973 L1180.51 689.973 L1181.07 689.973 L1181.63 689.973 L1182.19 689.973 L1182.75 689.973 L1183.31 689.973 L1183.87 689.973 L1184.43 689.973 L1184.98 689.973 L1185.54 689.973 L1186.1 689.973 L1186.66 689.973 L1187.22 689.973 L1187.78 689.973 L1188.34 689.973 L1188.9 689.973 L1189.46 689.973 L1190.02 689.973 L1190.58 689.973 L1191.14 689.973 L1191.7 689.973 L1192.25 689.973 L1192.81 689.973 L1193.37 689.973 L1193.93 689.973 L1194.49 689.973 L1195.05 689.973 L1195.61 689.973 L1196.17 689.973 L1196.73 689.973 L1197.29 689.973 L1197.85 689.973 L1198.41 689.973 L1198.97 689.973 L1199.52 689.973 L1200.08 689.973 L1200.64 689.973 L1201.2 689.973 L1201.76 689.973 L1202.32 689.973 L1202.88 689.973 L1203.44 689.973 L1204 689.973 L1204.56 689.973 L1205.12 689.973 L1205.68 689.973 L1206.24 689.973 L1206.8 689.973 L1207.35 689.973 L1207.91 689.973 L1208.47 689.973 L1209.03 689.973 L1209.59 689.973 L1210.15 689.973 L1210.71 689.973 L1211.27 689.973 L1211.83 689.973 L1212.39 689.973 L1212.95 689.973 L1213.51 689.973 L1214.07 689.973 L1214.62 689.973 L1215.18 689.973 L1215.74 689.973 L1216.3 689.973 L1216.86 689.973 L1217.42 689.973 L1217.98 689.973 L1218.54 689.973 L1219.1 689.973 L1219.66 689.973 L1220.22 689.973 L1220.78 689.973 L1221.34 689.973 L1221.89 689.973 L1222.45 689.973 L1223.01 689.973 L1223.57 689.973 L1224.13 689.973 L1224.69 689.973 L1225.25 689.973 L1225.81 689.973 L1226.37 689.973 L1226.93 689.973 L1227.49 689.973 L1228.05 689.973 L1228.61 689.973 L1229.17 689.973 L1229.72 689.973 L1230.28 689.973 L1230.84 689.973 L1231.4 689.973 L1231.96 689.973 L1232.52 689.973 L1233.08 689.973 L1233.64 689.973 L1234.2 689.973 L1234.76 689.973 L1235.32 689.973 L1235.88 689.973 L1236.44 689.973 L1236.99 689.973 L1237.55 689.973 L1238.11 689.973 L1238.67 689.973 L1239.23 689.973 L1239.79 689.973 L1240.35 689.973 L1240.91 689.973 L1241.47 689.973 L1242.03 689.973 L1242.59 689.973 L1243.15 689.973 L1243.71 689.973 L1244.26 689.973 L1244.82 689.973 L1245.38 689.973 L1245.94 689.973 L1246.5 689.973 L1247.06 689.973 L1247.62 689.973 L1248.18 689.973 L1248.74 689.973 L1249.3 689.973 L1249.86 689.973 L1250.42 689.973 L1250.98 689.973 L1251.54 689.973 L1252.09 689.973 L1252.65 689.973 L1253.21 689.973 L1253.77 689.973 L1254.33 689.973 L1254.89 689.973 L1255.45 689.973 L1256.01 689.973 L1256.57 689.973 L1257.13 689.973 L1257.69 689.973 L1258.25 689.973 L1258.81 689.973 L1259.36 689.973 L1259.92 689.973 L1260.48 689.973 L1261.04 689.973 L1261.6 689.973 L1262.16 689.973 L1262.72 689.973 L1263.28 689.973 L1263.84 689.973 L1264.4 689.973 L1264.96 689.973 L1265.52 689.973 L1266.08 689.973 L1266.63 689.973 L1267.19 689.973 L1267.75 689.973 L1268.31 689.973 L1268.87 689.973 L1269.43 689.973 L1269.99 689.973 L1270.55 689.973 L1271.11 689.973 L1271.67 689.973 L1272.23 689.973 L1272.79 689.973 L1273.35 689.973 L1273.91 689.973 L1274.46 689.973 L1275.02 689.973 L1275.58 689.973 L1276.14 689.973 L1276.7 689.973 L1277.26 689.973 L1277.82 689.973 L1278.38 689.973 L1278.94 689.973 L1279.5 689.973 L1280.06 689.973 L1280.62 689.973 L1281.18 689.973 L1281.73 689.973 L1282.29 689.973 L1282.85 689.973 L1283.41 689.973 L1283.97 689.973 L1284.53 689.973 L1285.09 689.973 L1285.65 689.973 L1286.21 689.973 L1286.77 689.973 L1287.33 689.973 L1287.89 689.973 L1288.45 689.973 L1289 689.973 L1289.56 689.973 L1290.12 689.973 L1290.68 689.973 L1291.24 689.973 L1291.8 689.973 L1292.36 689.973 L1292.92 689.973 L1293.48 689.973 L1294.04 689.973 L1294.6 689.973 L1295.16 689.973 L1295.72 689.973 L1296.28 689.973 L1296.83 689.973 L1297.39 689.973 L1297.95 689.973 L1298.51 689.973 L1299.07 689.973 L1299.63 689.973 L1300.19 689.973 L1300.75 689.973 L1301.31 689.973 L1301.87 689.973 L1302.43 689.973 L1302.99 689.973 L1303.55 689.973 L1304.1 689.973 L1304.66 689.973 L1305.22 689.973 L1305.78 689.973 L1306.34 689.973 L1306.9 689.973 L1307.46 689.973 L1308.02 689.973 L1308.58 689.973 L1309.14 689.973 L1309.7 689.973 L1310.26 689.973 L1310.82 689.973 L1311.38 689.973 L1311.93 689.973 L1312.49 689.973 L1313.05 689.973 L1313.61 689.973 L1314.17 689.973 L1314.73 689.973 L1315.29 689.973 L1315.85 689.973 L1316.41 689.973 L1316.97 689.973 L1317.53 689.973 L1318.09 689.973 L1318.65 689.973 L1319.2 689.973 L1319.76 689.973 L1320.32 689.973 L1320.88 689.973 L1321.44 689.973 L1322 689.973 L1322.56 689.973 L1323.12 689.973 L1323.68 689.973 L1324.24 689.973 L1324.8 689.973 L1325.36 689.973 L1325.92 689.973 L1326.47 689.973 L1327.03 689.973 L1327.59 689.973 L1328.15 689.973 L1328.71 689.973 L1329.27 689.973 L1329.83 689.973 L1330.39 689.973 L1330.95 689.973 L1331.51 689.973 L1332.07 689.973 L1332.63 689.973 L1333.19 689.973 L1333.75 689.973 L1334.3 689.973 L1334.86 689.973 L1335.42 689.973 L1335.98 689.973 L1336.54 689.973 L1337.1 689.973 L1337.66 689.973 L1338.22 689.973 L1338.78 689.973 L1339.34 689.973 L1339.9 689.973 L1340.46 689.973 L1341.02 689.973 L1341.57 689.973 L1342.13 689.973 L1342.69 689.973 L1343.25 689.973 L1343.81 689.973 L1344.37 689.973 L1344.93 689.973 L1345.49 689.973 L1346.05 689.973 L1346.61 689.973 L1347.17 689.973 L1347.73 689.973 L1348.29 689.973 L1348.84 689.973 L1349.4 689.973 L1349.96 689.973 L1350.52 689.973 L1351.08 689.973 L1351.64 689.973 L1352.2 689.973 L1352.76 689.973 L1353.32 689.973 L1353.88 689.973 L1354.44 689.973 L1355 689.973 L1355.56 689.973 L1356.12 689.973 L1356.67 689.973 L1357.23 689.973 L1357.79 689.973 L1358.35 689.973 L1358.91 689.973 L1359.47 689.973 L1360.03 689.973 L1360.59 689.973 L1361.15 689.973 L1361.71 689.973 L1362.27 689.973 L1362.83 689.973 L1363.39 689.973 L1363.94 689.973 L1364.5 689.973 L1365.06 689.973 L1365.62 689.973 L1366.18 689.973 L1366.74 689.973 L1367.3 689.973 L1367.86 689.973 L1368.42 689.973 L1368.98 689.973 L1369.54 689.973 L1370.1 689.973 L1370.66 689.973 L1371.21 689.973 L1371.77 689.973 L1372.33 689.973 L1372.89 689.973 L1373.45 689.973 L1374.01 689.973 L1374.57 689.973 L1375.13 689.973 L1375.69 689.973 L1376.25 689.973 L1376.81 689.973 L1377.37 689.973 L1377.93 689.973 L1378.49 689.973 L1379.04 689.973 L1379.6 689.973 L1380.16 689.973 L1380.72 689.973 L1381.28 689.973 L1381.84 689.973 L1382.4 689.973 L1382.96 689.973 L1383.52 689.973 L1384.08 689.973 L1384.64 689.973 L1385.2 689.973 L1385.76 689.973 L1386.31 689.973 L1386.87 689.973 L1387.43 689.973 L1387.99 689.973 L1388.55 689.973 L1389.11 689.973 L1389.67 689.973 L1390.23 689.973 L1390.79 689.973 L1391.35 689.973 L1391.91 689.973 L1392.47 689.973 L1393.03 689.973 L1393.58 689.973 L1394.14 689.973 L1394.7 689.973 L1395.26 689.973 L1395.82 689.973 L1396.38 689.973 L1396.94 689.973 L1397.5 689.973 L1398.06 689.973 L1398.62 689.973 L1399.18 689.973 L1399.74 689.973 L1400.3 689.973 L1400.86 689.973 L1401.41 689.973 L1401.97 689.973 L1402.53 689.973 L1403.09 689.973 L1403.65 689.973 L1404.21 689.973 L1404.77 689.973 L1405.33 689.973 L1405.89 689.973 L1406.45 689.973 L1407.01 689.973 L1407.57 689.973 L1408.13 689.973 L1408.68 689.973 L1409.24 689.973 L1409.8 689.973 L1410.36 689.973 L1410.92 689.973 L1411.48 689.973 L1412.04 689.973 L1412.6 689.973 L1413.16 689.973 L1413.72 689.973 L1414.28 689.973 L1414.84 689.973 L1415.4 689.973 L1415.95 689.973 L1416.51 689.973 L1417.07 689.973 L1417.63 689.973 L1418.19 689.973 L1418.75 689.973 L1419.31 689.973 L1419.87 689.973 L1420.43 689.973 L1420.99 689.973 L1421.55 689.973 L1422.11 689.973 L1422.67 689.973 L1423.23 689.973 L1423.78 689.973 L1424.34 689.973 L1424.9 689.973 L1425.46 689.973 L1426.02 689.973 L1426.58 689.973 L1427.14 689.973 L1427.7 689.973 L1428.26 689.973 L1428.82 689.973 L1429.38 689.973 L1429.94 689.973 L1430.5 689.973 L1431.05 689.973 L1431.61 689.973 L1432.17 689.973 L1432.73 689.973 L1433.29 689.973 L1433.85 689.973 L1434.41 689.973 L1434.97 689.973 L1435.53 689.973 L1436.09 689.973 L1436.65 689.973 L1437.21 689.973 L1437.77 689.973 L1438.33 689.973 L1438.88 689.973 L1439.44 689.973 L1440 689.973 L1440.56 689.973 L1441.12 689.973 L1441.68 689.973 L1442.24 689.973 L1442.8 689.973 L1443.36 689.973 L1443.92 689.973 L1444.48 689.973 L1445.04 689.973 L1445.6 689.973 L1446.15 689.973 L1446.71 689.973 L1447.27 689.973 L1447.83 689.973 L1448.39 689.973 L1448.95 689.973 L1449.51 689.973 L1450.07 689.973 L1450.63 689.973 L1451.19 689.973 L1451.75 689.973 L1452.31 689.973 L1452.87 689.973 L1453.42 689.973 L1453.98 689.973 L1454.54 689.973 L1455.1 689.973 L1455.66 689.973 L1456.22 689.973 L1456.78 689.973 L1457.34 689.973 L1457.9 689.973 L1458.46 689.973 L1459.02 689.973 L1459.58 689.973 L1460.14 689.973 L1460.7 689.973 L1461.25 689.973 L1461.81 689.973 L1462.37 689.973 L1462.93 689.973 L1463.49 689.973 L1464.05 689.973 L1464.61 689.973 L1465.17 689.973 L1465.73 689.973 L1466.29 689.973 L1466.85 689.973 L1467.41 689.973 L1467.97 689.973 L1468.52 689.973 L1469.08 689.973 L1469.64 689.973 L1470.2 689.973 L1470.76 689.973 L1471.32 689.973 L1471.88 689.973 L1472.44 689.973 L1473 689.973 L1473.56 689.973 L1474.12 689.973 L1474.68 689.973 L1475.24 689.973 L1475.79 689.973 L1476.35 689.973 L1476.91 689.973 L1477.47 689.973 L1478.03 689.973 L1478.59 689.973 L1479.15 689.973 L1479.71 689.973 L1480.27 689.973 L1480.83 689.973 L1481.39 689.973 L1481.95 689.973 L1482.51 689.973 L1483.07 689.973 L1483.62 689.973 L1484.18 689.973 L1484.74 689.973 L1485.3 689.973 L1485.86 689.973 L1486.42 689.973 L1486.98 689.973 L1487.54 689.973 L1488.1 689.973 L1488.66 689.973 L1489.22 689.973 L1489.78 689.973 L1490.34 689.973 L1490.89 689.973 L1491.45 689.973 L1492.01 689.973 L1492.57 689.973 L1493.13 689.973 L1493.69 689.973 L1494.25 689.973 L1494.81 689.973 L1495.37 689.973 L1495.93 689.973 L1496.49 689.973 L1497.05 689.973 L1497.61 689.973 L1498.16 689.973 L1498.72 689.973 L1499.28 689.973 L1499.84 689.973 L1500.4 689.973 L1500.96 689.973 L1501.52 689.973 L1502.08 689.973 L1502.64 689.973 L1503.2 689.973 L1503.76 689.973 L1504.32 689.973 L1504.88 689.973 L1505.44 689.973 L1505.99 689.973 L1506.55 689.973 L1507.11 689.973 L1507.67 689.973 L1508.23 689.973 L1508.79 689.973 L1509.35 689.973 L1509.91 689.973 L1510.47 689.973 L1511.03 689.973 L1511.59 689.973 L1512.15 689.973 L1512.71 689.973 L1513.26 689.973 L1513.82 689.973 L1514.38 689.973 L1514.94 689.973 L1515.5 689.973 L1516.06 689.973 L1516.62 689.973 L1517.18 689.973 L1517.74 689.973 L1518.3 689.973 L1518.86 689.973 L1519.42 689.973 L1519.98 689.973 L1520.53 689.973 L1521.09 689.973 L1521.65 689.973 L1522.21 689.973 L1522.77 689.973 L1523.33 689.973 L1523.89 689.973 L1524.45 689.973 L1525.01 689.973 L1525.57 689.973 L1526.13 689.973 L1526.69 689.973 L1527.25 689.973 L1527.81 689.973 L1528.36 689.973 L1528.92 689.973 L1529.48 689.973 L1530.04 689.973 L1530.6 689.973 L1531.16 689.973 L1531.72 689.973 L1532.28 689.973 L1532.84 689.973 L1533.4 689.973 L1533.96 689.973 L1534.52 689.973 L1535.08 689.973 L1535.63 689.973 L1536.19 689.973 L1536.75 689.973 L1537.31 689.973 L1537.87 689.973 L1538.43 689.973 L1538.99 689.973 L1539.55 689.973 L1540.11 689.973 L1540.67 689.973 L1541.23 689.973 L1541.79 689.973 L1542.35 689.973 L1542.9 689.973 L1543.46 689.973 L1544.02 689.973 L1544.58 689.973 L1545.14 689.973 L1545.7 689.973 L1546.26 689.973 L1546.82 689.973 L1547.38 689.973 L1547.94 689.973 L1548.5 689.973 L1549.06 689.973 L1549.62 689.973 L1550.18 689.973 L1550.73 689.973 L1551.29 689.973 L1551.85 689.973 L1552.41 689.973 L1552.97 689.973 L1553.53 689.973 L1554.09 689.973 L1554.65 689.973 L1555.21 689.973 L1555.77 689.973 L1556.33 689.973 L1556.89 689.973 L1557.45 689.973 L1558 689.973 L1558.56 689.973 L1559.12 689.973 L1559.68 689.973 L1560.24 689.973 L1560.8 689.973 L1561.36 689.973 L1561.92 689.973 L1562.48 689.973 L1563.04 689.973 L1563.6 689.973 L1564.16 689.973 L1564.72 689.973 L1565.28 689.973 L1565.83 689.973 L1566.39 689.973 L1566.95 689.973 L1567.51 689.973 L1568.07 689.973 L1568.63 689.973 L1569.19 689.973 L1569.75 689.973 L1570.31 689.973 L1570.87 689.973 L1571.43 689.973 L1571.99 689.973 L1572.55 689.973 L1573.1 689.973 L1573.66 689.973 L1574.22 689.973 L1574.78 689.973 L1575.34 689.973 L1575.9 689.973 L1576.46 689.973 L1577.02 689.973 L1577.58 689.973 L1578.14 689.973 L1578.7 689.973 L1579.26 689.973 L1579.82 689.973 L1580.37 689.973 L1580.93 689.973 L1581.49 689.973 L1582.05 689.973 L1582.61 689.973 L1583.17 689.973 L1583.73 689.973 L1584.29 689.973 L1584.85 689.973 L1585.41 689.973 L1585.97 689.973 L1586.53 689.973 L1587.09 689.973 L1587.65 689.973 L1588.2 689.973 L1588.76 689.973 L1589.32 689.973 L1589.88 689.973 L1590.44 689.973 L1591 689.973 L1591.56 689.973 L1592.12 689.973 L1592.68 689.973 L1593.24 689.973 L1593.8 689.973 L1594.36 689.973 L1594.92 689.973 L1595.47 689.973 L1596.03 689.973 L1596.59 689.973 L1597.15 689.973 L1597.71 689.973 L1598.27 689.973 L1598.83 689.973 L1599.39 689.973 L1599.95 689.973 L1600.51 689.973 L1601.07 689.973 L1601.63 689.973 L1602.19 689.973 L1602.74 689.973 L1603.3 689.973 L1603.86 689.973 L1604.42 689.973 L1604.98 689.973 L1605.54 689.973 L1606.1 689.973 L1606.66 689.973 L1607.22 689.973 L1607.78 689.973 L1608.34 689.973 L1608.9 689.973 L1609.46 689.973 L1610.02 689.973 L1610.57 689.973 L1611.13 689.973 L1611.69 689.973 L1612.25 689.973 L1612.81 689.973 L1613.37 689.973 L1613.93 689.973 L1614.49 689.973 L1615.05 689.973 L1615.61 689.973 L1616.17 689.973 L1616.73 689.973 L1617.29 689.973 L1617.84 689.973 L1618.4 689.973 L1618.96 689.973 L1619.52 689.973 L1620.08 689.973 L1620.64 689.973 L1621.2 689.973 L1621.76 689.973 L1622.32 689.973 L1622.88 689.973 L1623.44 689.973 L1624 689.973 L1624.56 689.973 L1625.11 689.973 L1625.67 689.973 L1626.23 689.973 L1626.79 689.973 L1627.35 689.973 L1627.91 689.973 L1628.47 689.973 L1629.03 689.973 L1629.59 689.973 L1630.15 689.973 L1630.71 689.973 L1631.27 689.973 L1631.83 689.973 L1632.39 689.973 L1632.94 689.973 L1633.5 689.973 L1634.06 689.973 L1634.62 689.973 L1635.18 689.973 L1635.74 689.973 L1636.3 689.973 L1636.86 689.973 L1637.42 689.973 L1637.98 689.973 L1638.54 689.973 L1639.1 689.973 L1639.66 689.973 L1640.21 689.973 L1640.77 689.973 L1641.33 689.973 L1641.89 689.973 L1642.45 689.973 L1643.01 689.973 L1643.57 689.973 L1644.13 689.973 L1644.69 689.973 L1645.25 689.973 L1645.81 689.973 L1646.37 689.973 L1646.93 689.973 L1647.48 689.973 L1648.04 689.973 L1648.6 689.973 L1649.16 689.973 L1649.72 689.973 L1650.28 689.973 L1650.84 689.973 L1651.4 689.973 L1651.96 689.973 L1652.52 689.973 L1653.08 689.973 L1653.64 689.973 L1654.2 689.973 L1654.76 689.973 L1655.31 689.973 L1655.87 689.973 L1656.43 689.973 L1656.99 689.973 L1657.55 689.973 L1658.11 689.973 L1658.67 689.973 L1659.23 689.973 L1659.79 689.973 L1660.35 689.973 L1660.91 689.973 L1661.47 689.973 L1662.03 689.973 L1662.58 689.973 L1663.14 689.973 L1663.7 689.973 L1664.26 689.973 L1664.82 689.973 L1665.38 689.973 L1665.94 689.973 L1666.5 689.973 L1667.06 689.973 L1667.62 689.973 L1668.18 689.973 L1668.74 689.973 L1669.3 689.973 L1669.85 689.973 L1670.41 689.973 L1670.97 689.973 L1671.53 689.973 L1672.09 689.973 L1672.65 689.973 L1673.21 689.973 L1673.77 689.973 L1674.33 689.973 L1674.89 689.973 L1675.45 689.973 L1676.01 689.973 L1676.57 689.973 L1677.13 689.973 L1677.68 689.973 L1678.24 689.973 L1678.8 689.973 L1679.36 689.973 L1679.92 689.973 L1680.48 689.973 L1681.04 689.973 L1681.6 689.973 L1682.16 689.973 L1682.72 689.973 L1683.28 689.973 L1683.84 689.973 L1684.4 689.973 L1684.95 689.973 L1685.51 689.973 L1686.07 689.973 L1686.63 689.973 L1687.19 689.973 L1687.75 689.973 L1688.31 689.973 L1688.87 689.973 L1689.43 689.973 L1689.99 689.973 L1690.55 689.973 L1691.11 689.973 L1691.67 689.973 L1692.23 689.973 L1692.78 689.973 L1693.34 689.973 L1693.9 689.973 L1694.46 689.973 L1695.02 689.973 L1695.58 689.973 L1696.14 689.973 L1696.7 689.973 L1697.26 689.973 L1697.82 689.973 L1698.38 689.973 L1698.94 689.973 L1699.5 689.973 L1700.05 689.973 L1700.61 689.973 L1701.17 689.973 L1701.73 689.973 L1702.29 689.973 L1702.85 689.973 L1703.41 689.973 L1703.97 689.973 L1704.53 689.973 L1705.09 689.973 L1705.65 689.973 L1706.21 689.973 L1706.77 689.973 L1707.32 689.973 L1707.88 689.973 L1708.44 689.973 L1709 689.973 L1709.56 689.973 L1710.12 689.973 L1710.68 689.973 L1711.24 689.973 L1711.8 689.973 L1712.36 689.973 L1712.92 689.973 L1713.48 689.973 L1714.04 689.973 L1714.6 689.973 L1715.15 689.973 L1715.71 689.973 L1716.27 689.973 L1716.83 689.973 L1717.39 689.973 L1717.95 689.973 L1718.51 689.973 L1719.07 689.973 L1719.63 689.973 L1720.19 689.973 L1720.75 689.973 L1721.31 689.973 L1721.87 689.973 L1722.42 689.973 L1722.98 689.973 L1723.54 689.973 L1724.1 689.973 L1724.66 689.973 L1725.22 689.973 L1725.78 689.973 L1726.34 689.973 L1726.9 689.973 L1727.46 689.973 L1728.02 689.973 L1728.58 689.973 L1729.14 689.973 L1729.69 689.973 L1730.25 689.973 L1730.81 689.973 L1731.37 689.973 L1731.93 689.973 L1732.49 689.973 L1733.05 689.973 L1733.61 689.973 L1734.17 689.973 L1734.73 689.973 L1735.29 689.973 L1735.85 689.973 L1736.41 689.973 L1736.97 689.973 L1737.52 689.973 L1738.08 689.973 L1738.64 689.973 L1739.2 689.973 L1739.76 689.973 L1740.32 689.973 L1740.88 689.973 L1741.44 689.973 L1742 689.973 L1742.56 689.973 L1743.12 689.973 L1743.68 689.973 L1744.24 689.973 L1744.79 689.973 L1745.35 689.973 L1745.91 689.973 L1746.47 689.973 L1747.03 689.973 L1747.59 689.973 L1748.15 689.973 L1748.71 689.973 L1749.27 689.973 L1749.83 689.973 L1750.39 689.973 L1750.95 689.973 L1751.51 689.973 L1752.06 689.973 L1752.62 689.973 L1753.18 689.973 L1753.74 689.973 L1754.3 689.973 L1754.86 689.973 L1755.42 689.973 L1755.98 689.973 L1756.54 689.973 L1757.1 689.973 L1757.66 689.973 L1758.22 689.973 L1758.78 689.973 L1759.34 689.973 L1759.89 689.973 L1760.45 689.973 L1761.01 689.973 L1761.57 689.973 L1762.13 689.973 L1762.69 689.973 L1763.25 689.973 L1763.81 689.973 L1764.37 689.973 L1764.93 689.973 L1765.49 689.973 L1766.05 689.973 L1766.61 689.973 L1767.16 689.973 L1767.72 689.973 L1768.28 689.973 L1768.84 689.973 L1769.4 689.973 L1769.96 689.973 L1770.52 689.973 L1771.08 689.973 L1771.64 689.973 L1772.2 689.973 L1772.76 689.973 L1773.32 689.973 L1773.88 689.973 L1774.43 689.973 L1774.99 689.973 L1775.55 689.973 L1776.11 689.973 L1776.67 689.973 L1777.23 689.973 L1777.79 689.973 L1778.35 689.973 L1778.91 689.973 L1779.47 689.973 L1780.03 689.973 L1780.59 689.973 L1781.15 689.973 L1781.71 689.973 L1782.26 689.973 L1782.82 689.973 L1783.38 689.973 L1783.94 689.973 L1784.5 689.973 L1785.06 689.973 L1785.62 689.973 L1786.18 689.973 L1786.74 689.973 L1787.3 689.973 L1787.86 689.973 L1788.42 689.973 L1788.98 689.973 L1789.53 689.973 L1790.09 689.973 L1790.65 689.973 L1791.21 689.973 L1791.77 689.973 L1792.33 689.973 L1792.89 689.973 L1793.45 689.973 L1794.01 689.973 L1794.57 689.973 L1795.13 689.973 L1795.69 689.973 L1796.25 689.973 L1796.8 689.973 L1797.36 689.973 L1797.92 689.973 L1798.48 689.973 L1799.04 689.973 L1799.6 689.973 L1800.16 689.973 L1800.72 689.973 L1801.28 689.973 L1801.84 689.973 L1802.4 689.973 L1802.96 689.973 L1803.52 689.973 L1804.08 689.973 L1804.63 689.973 L1805.19 689.973 L1805.75 689.973 L1806.31 689.973 L1806.87 689.973 L1807.43 689.973 L1807.99 689.973 L1808.55 689.973 L1809.11 689.973 L1809.67 689.973 L1810.23 689.973 L1810.79 689.973 L1811.35 689.973 L1811.9 689.973 L1812.46 689.973 L1813.02 689.973 L1813.58 689.973 L1814.14 689.973 L1814.7 689.973 L1815.26 689.973 L1815.82 689.973 L1816.38 689.973 L1816.94 689.973 L1817.5 689.973 L1818.06 689.973 L1818.62 689.973 L1819.18 689.973 L1819.73 689.973 L1820.29 689.973 L1820.85 689.973 L1821.41 689.973 L1821.97 689.973 L1822.53 689.973 L1823.09 689.973 L1823.65 689.973 L1824.21 689.973 L1824.77 689.973 L1825.33 689.973 L1825.89 689.973 L1826.45 689.973 L1827 689.973 L1827.56 689.973 L1828.12 689.973 L1828.68 689.973 L1829.24 689.973 L1829.8 689.973 L1830.36 689.973 L1830.92 689.973 L1831.48 689.973 L1832.04 689.973 L1832.6 689.973 L1833.16 689.973 L1833.72 689.973 L1834.27 689.973 L1834.83 689.973 L1835.39 689.973 L1835.95 689.973 L1836.51 689.973 L1837.07 689.973 L1837.63 689.973 L1838.19 689.973 L1838.19 682.787 L1837.63 682.787 L1837.07 682.787 L1836.51 682.787 L1835.95 682.787 L1835.39 682.787 L1834.83 682.787 L1834.27 682.787 L1833.72 682.787 L1833.16 682.787 L1832.6 682.787 L1832.04 682.787 L1831.48 682.787 L1830.92 682.787 L1830.36 682.787 L1829.8 682.787 L1829.24 682.787 L1828.68 682.787 L1828.12 682.787 L1827.56 682.787 L1827 682.787 L1826.45 682.787 L1825.89 682.787 L1825.33 682.787 L1824.77 682.787 L1824.21 682.787 L1823.65 682.787 L1823.09 682.787 L1822.53 682.787 L1821.97 682.787 L1821.41 682.787 L1820.85 682.787 L1820.29 682.787 L1819.73 682.787 L1819.18 682.787 L1818.62 682.787 L1818.06 682.787 L1817.5 682.787 L1816.94 682.787 L1816.38 682.787 L1815.82 682.787 L1815.26 682.787 L1814.7 682.787 L1814.14 682.787 L1813.58 682.787 L1813.02 682.787 L1812.46 682.787 L1811.9 682.787 L1811.35 682.787 L1810.79 682.787 L1810.23 682.787 L1809.67 682.787 L1809.11 682.787 L1808.55 682.787 L1807.99 682.787 L1807.43 682.787 L1806.87 682.787 L1806.31 682.787 L1805.75 682.787 L1805.19 682.787 L1804.63 682.787 L1804.08 682.787 L1803.52 682.787 L1802.96 682.787 L1802.4 682.787 L1801.84 682.787 L1801.28 682.787 L1800.72 682.787 L1800.16 682.787 L1799.6 682.787 L1799.04 682.787 L1798.48 682.787 L1797.92 682.787 L1797.36 682.787 L1796.8 682.787 L1796.25 682.787 L1795.69 682.787 L1795.13 682.787 L1794.57 682.787 L1794.01 682.787 L1793.45 682.787 L1792.89 682.787 L1792.33 682.787 L1791.77 682.787 L1791.21 682.787 L1790.65 682.787 L1790.09 682.787 L1789.53 682.787 L1788.98 682.787 L1788.42 682.787 L1787.86 682.787 L1787.3 682.787 L1786.74 682.787 L1786.18 682.787 L1785.62 682.787 L1785.06 682.787 L1784.5 682.787 L1783.94 682.787 L1783.38 682.787 L1782.82 682.787 L1782.26 682.787 L1781.71 682.787 L1781.15 682.787 L1780.59 682.787 L1780.03 682.787 L1779.47 682.787 L1778.91 682.787 L1778.35 682.787 L1777.79 682.787 L1777.23 682.787 L1776.67 682.787 L1776.11 682.787 L1775.55 682.787 L1774.99 682.787 L1774.43 682.787 L1773.88 682.787 L1773.32 682.787 L1772.76 682.787 L1772.2 682.787 L1771.64 682.787 L1771.08 682.787 L1770.52 682.787 L1769.96 682.787 L1769.4 682.787 L1768.84 682.787 L1768.28 682.787 L1767.72 682.787 L1767.16 682.787 L1766.61 682.787 L1766.05 682.787 L1765.49 682.787 L1764.93 682.787 L1764.37 682.787 L1763.81 682.787 L1763.25 682.787 L1762.69 682.787 L1762.13 682.787 L1761.57 682.787 L1761.01 682.787 L1760.45 682.787 L1759.89 682.787 L1759.34 682.787 L1758.78 682.787 L1758.22 682.787 L1757.66 682.787 L1757.1 682.787 L1756.54 682.787 L1755.98 682.787 L1755.42 682.787 L1754.86 682.787 L1754.3 682.787 L1753.74 682.787 L1753.18 682.787 L1752.62 682.787 L1752.06 682.787 L1751.51 682.787 L1750.95 682.787 L1750.39 682.787 L1749.83 682.787 L1749.27 682.787 L1748.71 682.787 L1748.15 682.787 L1747.59 682.787 L1747.03 682.787 L1746.47 682.787 L1745.91 682.787 L1745.35 682.787 L1744.79 682.787 L1744.24 682.787 L1743.68 682.787 L1743.12 682.787 L1742.56 682.787 L1742 682.787 L1741.44 682.787 L1740.88 682.787 L1740.32 682.787 L1739.76 682.787 L1739.2 682.787 L1738.64 682.787 L1738.08 682.787 L1737.52 682.787 L1736.97 682.787 L1736.41 682.787 L1735.85 682.787 L1735.29 682.787 L1734.73 682.787 L1734.17 682.787 L1733.61 682.787 L1733.05 682.787 L1732.49 682.787 L1731.93 682.787 L1731.37 682.787 L1730.81 682.787 L1730.25 682.787 L1729.69 682.787 L1729.14 682.787 L1728.58 682.787 L1728.02 682.787 L1727.46 682.787 L1726.9 682.787 L1726.34 682.787 L1725.78 682.787 L1725.22 682.787 L1724.66 682.787 L1724.1 682.787 L1723.54 682.787 L1722.98 682.787 L1722.42 682.787 L1721.87 682.787 L1721.31 682.787 L1720.75 682.787 L1720.19 682.787 L1719.63 682.787 L1719.07 682.787 L1718.51 682.787 L1717.95 682.787 L1717.39 682.787 L1716.83 682.787 L1716.27 682.787 L1715.71 682.787 L1715.15 682.787 L1714.6 682.787 L1714.04 682.787 L1713.48 682.787 L1712.92 682.787 L1712.36 682.787 L1711.8 682.787 L1711.24 682.787 L1710.68 682.787 L1710.12 682.787 L1709.56 682.787 L1709 682.787 L1708.44 682.787 L1707.88 682.787 L1707.32 682.787 L1706.77 682.787 L1706.21 682.787 L1705.65 682.787 L1705.09 682.787 L1704.53 682.787 L1703.97 682.787 L1703.41 682.787 L1702.85 682.787 L1702.29 682.787 L1701.73 682.787 L1701.17 682.787 L1700.61 682.787 L1700.05 682.787 L1699.5 682.787 L1698.94 682.787 L1698.38 682.787 L1697.82 682.787 L1697.26 682.787 L1696.7 682.787 L1696.14 682.787 L1695.58 682.787 L1695.02 682.787 L1694.46 682.787 L1693.9 682.787 L1693.34 682.787 L1692.78 682.787 L1692.23 682.787 L1691.67 682.787 L1691.11 682.787 L1690.55 682.787 L1689.99 682.787 L1689.43 682.787 L1688.87 682.787 L1688.31 682.787 L1687.75 682.787 L1687.19 682.787 L1686.63 682.787 L1686.07 682.787 L1685.51 682.787 L1684.95 682.787 L1684.4 682.787 L1683.84 682.787 L1683.28 682.787 L1682.72 682.787 L1682.16 682.787 L1681.6 682.787 L1681.04 682.787 L1680.48 682.787 L1679.92 682.787 L1679.36 682.787 L1678.8 682.787 L1678.24 682.787 L1677.68 682.787 L1677.13 682.787 L1676.57 682.787 L1676.01 682.787 L1675.45 682.787 L1674.89 682.787 L1674.33 682.787 L1673.77 682.787 L1673.21 682.787 L1672.65 682.787 L1672.09 682.787 L1671.53 682.787 L1670.97 682.787 L1670.41 682.787 L1669.85 682.787 L1669.3 682.787 L1668.74 682.787 L1668.18 682.787 L1667.62 682.787 L1667.06 682.787 L1666.5 682.787 L1665.94 682.787 L1665.38 682.787 L1664.82 682.787 L1664.26 682.787 L1663.7 682.787 L1663.14 682.787 L1662.58 682.787 L1662.03 682.787 L1661.47 682.787 L1660.91 682.787 L1660.35 682.787 L1659.79 682.787 L1659.23 682.787 L1658.67 682.787 L1658.11 682.787 L1657.55 682.787 L1656.99 682.787 L1656.43 682.787 L1655.87 682.787 L1655.31 682.787 L1654.76 682.787 L1654.2 682.787 L1653.64 682.787 L1653.08 682.787 L1652.52 682.787 L1651.96 682.787 L1651.4 682.787 L1650.84 682.787 L1650.28 682.787 L1649.72 682.787 L1649.16 682.787 L1648.6 682.787 L1648.04 682.787 L1647.48 682.787 L1646.93 682.787 L1646.37 682.787 L1645.81 682.787 L1645.25 682.787 L1644.69 682.787 L1644.13 682.787 L1643.57 682.787 L1643.01 682.787 L1642.45 682.787 L1641.89 682.787 L1641.33 682.787 L1640.77 682.787 L1640.21 682.787 L1639.66 682.787 L1639.1 682.787 L1638.54 682.787 L1637.98 682.787 L1637.42 682.787 L1636.86 682.787 L1636.3 682.787 L1635.74 682.787 L1635.18 682.787 L1634.62 682.787 L1634.06 682.787 L1633.5 682.787 L1632.94 682.787 L1632.39 682.787 L1631.83 682.787 L1631.27 682.787 L1630.71 682.787 L1630.15 682.787 L1629.59 682.787 L1629.03 682.787 L1628.47 682.787 L1627.91 682.787 L1627.35 682.787 L1626.79 682.787 L1626.23 682.787 L1625.67 682.787 L1625.11 682.787 L1624.56 682.787 L1624 682.787 L1623.44 682.787 L1622.88 682.787 L1622.32 682.787 L1621.76 682.787 L1621.2 682.787 L1620.64 682.787 L1620.08 682.787 L1619.52 682.787 L1618.96 682.787 L1618.4 682.787 L1617.84 682.787 L1617.29 682.787 L1616.73 682.787 L1616.17 682.787 L1615.61 682.787 L1615.05 682.787 L1614.49 682.787 L1613.93 682.787 L1613.37 682.787 L1612.81 682.787 L1612.25 682.787 L1611.69 682.787 L1611.13 682.787 L1610.57 682.787 L1610.02 682.787 L1609.46 682.787 L1608.9 682.787 L1608.34 682.787 L1607.78 682.787 L1607.22 682.787 L1606.66 682.787 L1606.1 682.787 L1605.54 682.787 L1604.98 682.787 L1604.42 682.787 L1603.86 682.787 L1603.3 682.787 L1602.74 682.787 L1602.19 682.787 L1601.63 682.787 L1601.07 682.787 L1600.51 682.787 L1599.95 682.787 L1599.39 682.787 L1598.83 682.787 L1598.27 682.787 L1597.71 682.787 L1597.15 682.787 L1596.59 682.787 L1596.03 682.787 L1595.47 682.787 L1594.92 682.787 L1594.36 682.787 L1593.8 682.787 L1593.24 682.787 L1592.68 682.787 L1592.12 682.787 L1591.56 682.787 L1591 682.787 L1590.44 682.787 L1589.88 682.787 L1589.32 682.787 L1588.76 682.787 L1588.2 682.787 L1587.65 682.787 L1587.09 682.787 L1586.53 682.787 L1585.97 682.787 L1585.41 682.787 L1584.85 682.787 L1584.29 682.787 L1583.73 682.787 L1583.17 682.787 L1582.61 682.787 L1582.05 682.787 L1581.49 682.787 L1580.93 682.787 L1580.37 682.787 L1579.82 682.787 L1579.26 682.787 L1578.7 682.787 L1578.14 682.787 L1577.58 682.787 L1577.02 682.787 L1576.46 682.787 L1575.9 682.787 L1575.34 682.787 L1574.78 682.787 L1574.22 682.787 L1573.66 682.787 L1573.1 682.787 L1572.55 682.787 L1571.99 682.787 L1571.43 682.787 L1570.87 682.787 L1570.31 682.787 L1569.75 682.787 L1569.19 682.787 L1568.63 682.787 L1568.07 682.787 L1567.51 682.787 L1566.95 682.787 L1566.39 682.787 L1565.83 682.787 L1565.28 682.787 L1564.72 682.787 L1564.16 682.787 L1563.6 682.787 L1563.04 682.787 L1562.48 682.787 L1561.92 682.787 L1561.36 682.787 L1560.8 682.787 L1560.24 682.787 L1559.68 682.787 L1559.12 682.787 L1558.56 682.787 L1558 682.787 L1557.45 682.787 L1556.89 682.787 L1556.33 682.787 L1555.77 682.787 L1555.21 682.787 L1554.65 682.787 L1554.09 682.787 L1553.53 682.787 L1552.97 682.787 L1552.41 682.787 L1551.85 682.787 L1551.29 682.787 L1550.73 682.787 L1550.18 682.787 L1549.62 682.787 L1549.06 682.787 L1548.5 682.787 L1547.94 682.787 L1547.38 682.787 L1546.82 682.787 L1546.26 682.787 L1545.7 682.787 L1545.14 682.787 L1544.58 682.787 L1544.02 682.787 L1543.46 682.787 L1542.9 682.787 L1542.35 682.787 L1541.79 682.787 L1541.23 682.787 L1540.67 682.787 L1540.11 682.787 L1539.55 682.787 L1538.99 682.787 L1538.43 682.787 L1537.87 682.787 L1537.31 682.787 L1536.75 682.787 L1536.19 682.787 L1535.63 682.787 L1535.08 682.787 L1534.52 682.787 L1533.96 682.787 L1533.4 682.787 L1532.84 682.787 L1532.28 682.787 L1531.72 682.787 L1531.16 682.787 L1530.6 682.787 L1530.04 682.787 L1529.48 682.787 L1528.92 682.787 L1528.36 682.787 L1527.81 682.787 L1527.25 682.787 L1526.69 682.787 L1526.13 682.787 L1525.57 682.787 L1525.01 682.787 L1524.45 682.787 L1523.89 682.787 L1523.33 682.787 L1522.77 682.787 L1522.21 682.787 L1521.65 682.787 L1521.09 682.787 L1520.53 682.787 L1519.98 682.787 L1519.42 682.787 L1518.86 682.787 L1518.3 682.787 L1517.74 682.787 L1517.18 682.787 L1516.62 682.787 L1516.06 682.787 L1515.5 682.787 L1514.94 682.787 L1514.38 682.787 L1513.82 682.787 L1513.26 682.787 L1512.71 682.787 L1512.15 682.787 L1511.59 682.787 L1511.03 682.787 L1510.47 682.787 L1509.91 682.787 L1509.35 682.787 L1508.79 682.787 L1508.23 682.787 L1507.67 682.787 L1507.11 682.787 L1506.55 682.787 L1505.99 682.787 L1505.44 682.787 L1504.88 682.787 L1504.32 682.787 L1503.76 682.787 L1503.2 682.787 L1502.64 682.787 L1502.08 682.787 L1501.52 682.787 L1500.96 682.787 L1500.4 682.787 L1499.84 682.787 L1499.28 682.787 L1498.72 682.787 L1498.16 682.787 L1497.61 682.787 L1497.05 682.787 L1496.49 682.787 L1495.93 682.787 L1495.37 682.787 L1494.81 682.787 L1494.25 682.787 L1493.69 682.787 L1493.13 682.787 L1492.57 682.787 L1492.01 682.787 L1491.45 682.787 L1490.89 682.787 L1490.34 682.787 L1489.78 682.787 L1489.22 682.787 L1488.66 682.787 L1488.1 682.787 L1487.54 682.787 L1486.98 682.787 L1486.42 682.787 L1485.86 682.787 L1485.3 682.787 L1484.74 682.787 L1484.18 682.787 L1483.62 682.787 L1483.07 682.787 L1482.51 682.787 L1481.95 682.787 L1481.39 682.787 L1480.83 682.787 L1480.27 682.787 L1479.71 682.787 L1479.15 682.787 L1478.59 682.787 L1478.03 682.787 L1477.47 682.787 L1476.91 682.787 L1476.35 682.787 L1475.79 682.787 L1475.24 682.787 L1474.68 682.787 L1474.12 682.787 L1473.56 682.787 L1473 682.787 L1472.44 682.787 L1471.88 682.787 L1471.32 682.787 L1470.76 682.787 L1470.2 682.787 L1469.64 682.787 L1469.08 682.787 L1468.52 682.787 L1467.97 682.787 L1467.41 682.787 L1466.85 682.787 L1466.29 682.787 L1465.73 682.787 L1465.17 682.787 L1464.61 682.787 L1464.05 682.787 L1463.49 682.787 L1462.93 682.787 L1462.37 682.787 L1461.81 682.787 L1461.25 682.787 L1460.7 682.787 L1460.14 682.787 L1459.58 682.787 L1459.02 682.787 L1458.46 682.787 L1457.9 682.787 L1457.34 682.787 L1456.78 682.787 L1456.22 682.787 L1455.66 682.787 L1455.1 682.787 L1454.54 682.787 L1453.98 682.787 L1453.42 682.787 L1452.87 682.787 L1452.31 682.787 L1451.75 682.787 L1451.19 682.787 L1450.63 682.787 L1450.07 682.787 L1449.51 682.787 L1448.95 682.787 L1448.39 682.787 L1447.83 682.787 L1447.27 682.787 L1446.71 682.787 L1446.15 682.787 L1445.6 682.787 L1445.04 682.787 L1444.48 682.787 L1443.92 682.787 L1443.36 682.787 L1442.8 682.787 L1442.24 682.787 L1441.68 682.787 L1441.12 682.787 L1440.56 682.787 L1440 682.787 L1439.44 682.787 L1438.88 682.787 L1438.33 682.787 L1437.77 682.787 L1437.21 682.787 L1436.65 682.787 L1436.09 682.787 L1435.53 682.787 L1434.97 682.787 L1434.41 682.787 L1433.85 682.787 L1433.29 682.787 L1432.73 682.787 L1432.17 682.787 L1431.61 682.787 L1431.05 682.787 L1430.5 682.787 L1429.94 682.787 L1429.38 682.787 L1428.82 682.787 L1428.26 682.787 L1427.7 682.787 L1427.14 682.787 L1426.58 682.787 L1426.02 682.787 L1425.46 682.787 L1424.9 682.787 L1424.34 682.787 L1423.78 682.787 L1423.23 682.787 L1422.67 682.787 L1422.11 682.787 L1421.55 682.787 L1420.99 682.787 L1420.43 682.787 L1419.87 682.787 L1419.31 682.787 L1418.75 682.787 L1418.19 682.787 L1417.63 682.787 L1417.07 682.787 L1416.51 682.787 L1415.95 682.787 L1415.4 682.787 L1414.84 682.787 L1414.28 682.787 L1413.72 682.787 L1413.16 682.787 L1412.6 682.787 L1412.04 682.787 L1411.48 682.787 L1410.92 682.787 L1410.36 682.787 L1409.8 682.787 L1409.24 682.787 L1408.68 682.787 L1408.13 682.787 L1407.57 682.787 L1407.01 682.787 L1406.45 682.787 L1405.89 682.787 L1405.33 682.787 L1404.77 682.787 L1404.21 682.787 L1403.65 682.787 L1403.09 682.787 L1402.53 682.787 L1401.97 682.787 L1401.41 682.787 L1400.86 682.787 L1400.3 682.787 L1399.74 682.787 L1399.18 682.787 L1398.62 682.787 L1398.06 682.787 L1397.5 682.787 L1396.94 682.787 L1396.38 682.787 L1395.82 682.787 L1395.26 682.787 L1394.7 682.787 L1394.14 682.787 L1393.58 682.787 L1393.03 682.787 L1392.47 682.787 L1391.91 682.787 L1391.35 682.787 L1390.79 682.787 L1390.23 682.787 L1389.67 682.787 L1389.11 682.787 L1388.55 682.787 L1387.99 682.787 L1387.43 682.787 L1386.87 682.787 L1386.31 682.787 L1385.76 682.787 L1385.2 682.787 L1384.64 682.787 L1384.08 682.787 L1383.52 682.787 L1382.96 682.787 L1382.4 682.787 L1381.84 682.787 L1381.28 682.787 L1380.72 682.787 L1380.16 682.787 L1379.6 682.787 L1379.04 682.787 L1378.49 682.787 L1377.93 682.787 L1377.37 682.787 L1376.81 682.787 L1376.25 682.787 L1375.69 682.787 L1375.13 682.787 L1374.57 682.787 L1374.01 682.787 L1373.45 682.787 L1372.89 682.787 L1372.33 682.787 L1371.77 682.787 L1371.21 682.787 L1370.66 682.787 L1370.1 682.787 L1369.54 682.787 L1368.98 682.787 L1368.42 682.787 L1367.86 682.787 L1367.3 682.787 L1366.74 682.787 L1366.18 682.787 L1365.62 682.787 L1365.06 682.787 L1364.5 682.787 L1363.94 682.787 L1363.39 682.787 L1362.83 682.787 L1362.27 682.787 L1361.71 682.787 L1361.15 682.787 L1360.59 682.787 L1360.03 682.787 L1359.47 682.787 L1358.91 682.787 L1358.35 682.787 L1357.79 682.787 L1357.23 682.787 L1356.67 682.787 L1356.12 682.787 L1355.56 682.787 L1355 682.787 L1354.44 682.787 L1353.88 682.787 L1353.32 682.787 L1352.76 682.787 L1352.2 682.787 L1351.64 682.787 L1351.08 682.787 L1350.52 682.787 L1349.96 682.787 L1349.4 682.787 L1348.84 682.787 L1348.29 682.787 L1347.73 682.787 L1347.17 682.787 L1346.61 682.787 L1346.05 682.787 L1345.49 682.787 L1344.93 682.787 L1344.37 682.787 L1343.81 682.787 L1343.25 682.787 L1342.69 682.787 L1342.13 682.787 L1341.57 682.787 L1341.02 682.787 L1340.46 682.787 L1339.9 682.787 L1339.34 682.787 L1338.78 682.787 L1338.22 682.787 L1337.66 682.787 L1337.1 682.787 L1336.54 682.787 L1335.98 682.787 L1335.42 682.787 L1334.86 682.787 L1334.3 682.787 L1333.75 682.787 L1333.19 682.787 L1332.63 682.787 L1332.07 682.787 L1331.51 682.787 L1330.95 682.787 L1330.39 682.787 L1329.83 682.787 L1329.27 682.787 L1328.71 682.787 L1328.15 682.787 L1327.59 682.787 L1327.03 682.787 L1326.47 682.787 L1325.92 682.787 L1325.36 682.787 L1324.8 682.787 L1324.24 682.787 L1323.68 682.787 L1323.12 682.787 L1322.56 682.787 L1322 682.787 L1321.44 682.787 L1320.88 682.787 L1320.32 682.787 L1319.76 682.787 L1319.2 682.787 L1318.65 682.787 L1318.09 682.787 L1317.53 682.787 L1316.97 682.787 L1316.41 682.787 L1315.85 682.787 L1315.29 682.787 L1314.73 682.787 L1314.17 682.787 L1313.61 682.787 L1313.05 682.787 L1312.49 682.787 L1311.93 682.787 L1311.38 682.787 L1310.82 682.787 L1310.26 682.787 L1309.7 682.787 L1309.14 682.787 L1308.58 682.787 L1308.02 682.787 L1307.46 682.787 L1306.9 682.787 L1306.34 682.787 L1305.78 682.787 L1305.22 682.787 L1304.66 682.787 L1304.1 682.787 L1303.55 682.787 L1302.99 682.787 L1302.43 682.787 L1301.87 682.787 L1301.31 682.787 L1300.75 682.787 L1300.19 682.787 L1299.63 682.787 L1299.07 682.787 L1298.51 682.787 L1297.95 682.787 L1297.39 682.787 L1296.83 682.787 L1296.28 682.787 L1295.72 682.787 L1295.16 682.787 L1294.6 682.787 L1294.04 682.787 L1293.48 682.787 L1292.92 682.787 L1292.36 682.787 L1291.8 682.787 L1291.24 682.787 L1290.68 682.787 L1290.12 682.787 L1289.56 682.787 L1289 682.787 L1288.45 682.787 L1287.89 682.787 L1287.33 682.787 L1286.77 682.787 L1286.21 682.787 L1285.65 682.787 L1285.09 682.787 L1284.53 682.787 L1283.97 682.787 L1283.41 682.787 L1282.85 682.787 L1282.29 682.787 L1281.73 682.787 L1281.18 682.787 L1280.62 682.787 L1280.06 682.787 L1279.5 682.787 L1278.94 682.787 L1278.38 682.787 L1277.82 682.787 L1277.26 682.787 L1276.7 682.787 L1276.14 682.787 L1275.58 682.787 L1275.02 682.787 L1274.46 682.787 L1273.91 682.787 L1273.35 682.787 L1272.79 682.787 L1272.23 682.787 L1271.67 682.787 L1271.11 682.787 L1270.55 682.787 L1269.99 682.787 L1269.43 682.787 L1268.87 682.787 L1268.31 682.787 L1267.75 682.787 L1267.19 682.787 L1266.63 682.787 L1266.08 682.787 L1265.52 682.787 L1264.96 682.787 L1264.4 682.787 L1263.84 682.787 L1263.28 682.787 L1262.72 682.787 L1262.16 682.787 L1261.6 682.787 L1261.04 682.787 L1260.48 682.787 L1259.92 682.787 L1259.36 682.787 L1258.81 682.787 L1258.25 682.787 L1257.69 682.787 L1257.13 682.787 L1256.57 682.787 L1256.01 682.787 L1255.45 682.787 L1254.89 682.787 L1254.33 682.787 L1253.77 682.787 L1253.21 682.787 L1252.65 682.787 L1252.09 682.787 L1251.54 682.787 L1250.98 682.787 L1250.42 682.787 L1249.86 682.787 L1249.3 682.787 L1248.74 682.787 L1248.18 682.787 L1247.62 682.787 L1247.06 682.787 L1246.5 682.787 L1245.94 682.787 L1245.38 682.787 L1244.82 682.787 L1244.26 682.787 L1243.71 682.787 L1243.15 682.787 L1242.59 682.787 L1242.03 682.787 L1241.47 682.787 L1240.91 682.787 L1240.35 682.787 L1239.79 682.787 L1239.23 682.787 L1238.67 682.787 L1238.11 682.787 L1237.55 682.787 L1236.99 682.787 L1236.44 682.787 L1235.88 682.787 L1235.32 682.787 L1234.76 682.787 L1234.2 682.787 L1233.64 682.787 L1233.08 682.787 L1232.52 682.787 L1231.96 682.787 L1231.4 682.787 L1230.84 682.787 L1230.28 682.787 L1229.72 682.787 L1229.17 682.787 L1228.61 682.787 L1228.05 682.787 L1227.49 682.787 L1226.93 682.787 L1226.37 682.787 L1225.81 682.787 L1225.25 682.787 L1224.69 682.787 L1224.13 682.787 L1223.57 682.787 L1223.01 682.787 L1222.45 682.787 L1221.89 682.787 L1221.34 682.787 L1220.78 682.787 L1220.22 682.787 L1219.66 682.787 L1219.1 682.787 L1218.54 682.787 L1217.98 682.787 L1217.42 682.787 L1216.86 682.787 L1216.3 682.787 L1215.74 682.787 L1215.18 682.787 L1214.62 682.787 L1214.07 682.787 L1213.51 682.787 L1212.95 682.787 L1212.39 682.787 L1211.83 682.787 L1211.27 682.787 L1210.71 682.787 L1210.15 682.787 L1209.59 682.787 L1209.03 682.787 L1208.47 682.787 L1207.91 682.787 L1207.35 682.787 L1206.8 682.787 L1206.24 682.787 L1205.68 682.787 L1205.12 682.787 L1204.56 682.787 L1204 682.787 L1203.44 682.787 L1202.88 682.787 L1202.32 682.787 L1201.76 682.787 L1201.2 682.787 L1200.64 682.787 L1200.08 682.787 L1199.52 682.787 L1198.97 682.787 L1198.41 682.787 L1197.85 682.787 L1197.29 682.787 L1196.73 682.787 L1196.17 682.787 L1195.61 682.787 L1195.05 682.787 L1194.49 682.787 L1193.93 682.787 L1193.37 682.787 L1192.81 682.787 L1192.25 682.787 L1191.7 682.787 L1191.14 682.787 L1190.58 682.787 L1190.02 682.787 L1189.46 682.787 L1188.9 682.787 L1188.34 682.787 L1187.78 682.787 L1187.22 682.787 L1186.66 682.787 L1186.1 682.787 L1185.54 682.787 L1184.98 682.787 L1184.43 682.787 L1183.87 682.787 L1183.31 682.787 L1182.75 682.787 L1182.19 682.787 L1181.63 682.787 L1181.07 682.787 L1180.51 682.787 L1179.95 682.787 L1179.39 682.787 L1178.83 682.787 L1178.27 682.787 L1177.71 682.787 L1177.15 682.787 L1176.6 682.787 L1176.04 682.787 L1175.48 682.787 L1174.92 682.787 L1174.36 682.787 L1173.8 682.787 L1173.24 682.787 L1172.68 682.787 L1172.12 682.787 L1171.56 682.787 L1171 682.787 L1170.44 682.787 L1169.88 682.787 L1169.33 682.787 L1168.77 682.787 L1168.21 682.787 L1167.65 682.787 L1167.09 682.787 L1166.53 682.787 L1165.97 682.787 L1165.41 682.787 L1164.85 682.787 L1164.29 682.787 L1163.73 682.787 L1163.17 682.787 L1162.61 682.787 L1162.05 682.787 L1161.5 682.787 L1160.94 682.787 L1160.38 682.787 L1159.82 682.787 L1159.26 682.787 L1158.7 682.787 L1158.14 682.787 L1157.58 682.787 L1157.02 682.787 L1156.46 682.787 L1155.9 682.787 L1155.34 682.787 L1154.78 682.787 L1154.23 682.787 L1153.67 682.787 L1153.11 682.787 L1152.55 682.787 L1151.99 682.787 L1151.43 682.787 L1150.87 682.787 L1150.31 682.787 L1149.75 682.787 L1149.19 682.787 L1148.63 682.787 L1148.07 682.787 L1147.51 682.787 L1146.96 682.787 L1146.4 682.787 L1145.84 682.787 L1145.28 682.787 L1144.72 682.787 L1144.16 682.787 L1143.6 682.787 L1143.04 682.787 L1142.48 682.787 L1141.92 682.787 L1141.36 682.787 L1140.8 682.787 L1140.24 682.787 L1139.68 682.787 L1139.13 682.787 L1138.57 682.787 L1138.01 682.787 L1137.45 682.787 L1136.89 682.787 L1136.33 682.787 L1135.77 682.787 L1135.21 682.787 L1134.65 682.787 L1134.09 682.787 L1133.53 682.787 L1132.97 682.787 L1132.41 682.787 L1131.86 682.787 L1131.3 682.787 L1130.74 682.787 L1130.18 682.787 L1129.62 682.787 L1129.06 682.787 L1128.5 682.787 L1127.94 682.787 L1127.38 682.787 L1126.82 682.787 L1126.26 682.787 L1125.7 682.787 L1125.14 682.787 L1124.59 682.787 L1124.03 682.787 L1123.47 682.787 L1122.91 682.787 L1122.35 682.787 L1121.79 682.787 L1121.23 682.787 L1120.67 682.787 L1120.11 682.787 L1119.55 682.787 L1118.99 682.787 L1118.43 682.787 L1117.87 682.787 L1117.31 682.787 L1116.76 682.787 L1116.2 682.787 L1115.64 682.787 L1115.08 682.787 L1114.52 682.787 L1113.96 682.787 L1113.4 682.787 L1112.84 682.787 L1112.28 682.787 L1111.72 682.787 L1111.16 682.787 L1110.6 682.787 L1110.04 682.787 L1109.49 682.787 L1108.93 682.787 L1108.37 682.787 L1107.81 682.787 L1107.25 682.787 L1106.69 682.787 L1106.13 682.787 L1105.57 682.787 L1105.01 682.787 L1104.45 682.787 L1103.89 682.787 L1103.33 682.787 L1102.77 682.787 L1102.22 682.787 L1101.66 682.787 L1101.1 682.787 L1100.54 682.787 L1099.98 682.787 L1099.42 682.787 L1098.86 682.787 L1098.3 682.787 L1097.74 682.787 L1097.18 682.787 L1096.62 682.787 L1096.06 682.787 L1095.5 682.787 L1094.94 682.787 L1094.39 682.787 L1093.83 682.787 L1093.27 682.787 L1092.71 682.787 L1092.15 682.787 L1091.59 682.787 L1091.03 682.787 L1090.47 682.787 L1089.91 682.787 L1089.35 682.787 L1088.79 682.787 L1088.23 682.787 L1087.67 682.787 L1087.12 682.787 L1086.56 682.787 L1086 682.787 L1085.44 682.787 L1084.88 682.787 L1084.32 682.787 L1083.76 682.787 L1083.2 682.787 L1082.64 682.787 L1082.08 682.787 L1081.52 682.787 L1080.96 682.787 L1080.4 682.787 L1079.85 682.787 L1079.29 682.787 L1078.73 682.787 L1078.17 682.787 L1077.61 682.787 L1077.05 682.787 L1076.49 682.787 L1075.93 682.787 L1075.37 682.787 L1074.81 682.787 L1074.25 682.787 L1073.69 682.787 L1073.13 682.787 L1072.57 682.787 L1072.02 682.787 L1071.46 682.787 L1070.9 682.787 L1070.34 682.787 L1069.78 682.787 L1069.22 682.787 L1068.66 682.787 L1068.1 682.787 L1067.54 682.787 L1066.98 682.787 L1066.42 682.787 L1065.86 682.787 L1065.3 682.787 L1064.75 682.787 L1064.19 682.787 L1063.63 682.787 L1063.07 682.787 L1062.51 682.787 L1061.95 682.787 L1061.39 682.787 L1060.83 682.787 L1060.27 682.787 L1059.71 682.787 L1059.15 682.787 L1058.59 682.787 L1058.03 682.787 L1057.48 682.787 L1056.92 682.787 L1056.36 682.787 L1055.8 682.787 L1055.24 682.787 L1054.68 682.787 L1054.12 682.787 L1053.56 682.787 L1053 682.787 L1052.44 682.787 L1051.88 682.787 L1051.32 682.787 L1050.76 682.787 L1050.2 682.787 L1049.65 682.787 L1049.09 682.787 L1048.53 682.787 L1047.97 682.787 L1047.41 682.787 L1046.85 682.787 L1046.29 682.787 L1045.73 682.787 L1045.17 682.787 L1044.61 682.787 L1044.05 682.787 L1043.49 682.787 L1042.93 682.787 L1042.38 682.787 L1041.82 682.787 L1041.26 682.787 L1040.7 682.787 L1040.14 682.787 L1039.58 682.787 L1039.02 682.787 L1038.46 682.787 L1037.9 682.787 L1037.34 682.787 L1036.78 682.787 L1036.22 682.787 L1035.66 682.787 L1035.1 682.787 L1034.55 682.787 L1033.99 682.787 L1033.43 682.787 L1032.87 682.787 L1032.31 682.787 L1031.75 682.787 L1031.19 682.787 L1030.63 682.787 L1030.07 682.787 L1029.51 682.787 L1028.95 682.787 L1028.39 682.787 L1027.83 682.787 L1027.28 682.787 L1026.72 682.787 L1026.16 682.787 L1025.6 682.787 L1025.04 682.787 L1024.48 682.787 L1023.92 682.787 L1023.36 682.787 L1022.8 682.787 L1022.24 682.787 L1021.68 682.787 L1021.12 682.787 L1020.56 682.787 L1020.01 682.787 L1019.45 682.787 L1018.89 682.787 L1018.33 682.787 L1017.77 682.787 L1017.21 682.787 L1016.65 682.787 L1016.09 682.787 L1015.53 682.787 L1014.97 682.787 L1014.41 682.787 L1013.85 682.787 L1013.29 682.787 L1012.73 682.787 L1012.18 682.787 L1011.62 682.787 L1011.06 682.787 L1010.5 682.787 L1009.94 682.787 L1009.38 682.787 L1008.82 682.787 L1008.26 682.787 L1007.7 682.787 L1007.14 682.787 L1006.58 682.787 L1006.02 682.787 L1005.46 682.787 L1004.91 682.787 L1004.35 682.787 L1003.79 682.787 L1003.23 682.787 L1002.67 682.787 L1002.11 682.787 L1001.55 682.787 L1000.99 682.787 L1000.43 682.787 L999.872 682.787 L999.313 682.787 L998.754 682.787 L998.194 682.787 L997.635 682.787 L997.076 682.787 L996.517 682.787 L995.957 682.787 L995.398 682.787 L994.839 682.787 L994.28 682.787 L993.72 682.787 L993.161 682.787 L992.602 682.787 L992.043 682.787 L991.483 682.787 L990.924 682.787 L990.365 682.787 L989.806 682.787 L989.246 682.787 L988.687 682.787 L988.128 682.787 L987.569 682.787 L987.009 682.787 L986.45 682.787 L985.891 682.787 L985.332 682.787 L984.772 682.787 L984.213 682.787 L983.654 682.787 L983.095 682.787 L982.535 682.787 L981.976 682.787 L981.417 682.787 L980.858 682.787 L980.298 682.787 L979.739 682.787 L979.18 682.787 L978.621 682.787 L978.061 682.787 L977.502 682.787 L976.943 682.787 L976.384 682.787 L975.824 682.787 L975.265 682.787 L974.706 682.787 L974.147 682.787 L973.587 682.787 L973.028 682.787 L972.469 682.787 L971.91 682.787 L971.35 682.787 L970.791 682.787 L970.232 682.787 L969.673 682.787 L969.113 682.787 L968.554 682.787 L967.995 682.787 L967.436 682.787 L966.876 682.787 L966.317 682.787 L965.758 682.787 L965.199 682.787 L964.639 682.787 L964.08 682.787 L963.521 682.787 L962.962 682.787 L962.402 682.787 L961.843 682.787 L961.284 682.787 L960.725 682.787 L960.165 682.787 L959.606 682.787 L959.047 682.787 L958.488 682.787 L957.928 682.787 L957.369 682.787 L956.81 682.787 L956.251 682.787 L955.691 682.787 L955.132 682.787 L954.573 682.787 L954.014 682.787 L953.454 682.787 L952.895 682.787 L952.336 682.787 L951.777 682.787 L951.217 682.787 L950.658 682.787 L950.099 682.787 L949.54 682.787 L948.98 682.787 L948.421 682.787 L947.862 682.787 L947.303 682.787 L946.743 682.787 L946.184 682.787 L945.625 682.787 L945.066 682.787 L944.506 682.787 L943.947 682.787 L943.388 682.787 L942.829 682.787 L942.269 682.787 L941.71 682.787 L941.151 682.787 L940.592 682.787 L940.032 682.787 L939.473 682.787 L938.914 682.787 L938.355 682.787 L937.795 682.787 L937.236 682.787 L936.677 682.787 L936.118 682.787 L935.558 682.787 L934.999 682.787 L934.44 682.787 L933.881 682.787 L933.321 682.787 L932.762 682.787 L932.203 682.787 L931.644 682.787 L931.084 682.787 L930.525 682.787 L929.966 682.787 L929.406 682.787 L928.847 682.787 L928.288 682.787 L927.729 682.787 L927.169 682.787 L926.61 682.787 L926.051 682.787 L925.492 682.787 L924.932 682.787 L924.373 682.787 L923.814 682.787 L923.255 682.787 L922.695 682.787 L922.136 682.787 L921.577 682.787 L921.018 682.787 L920.458 682.787 L919.899 682.787 L919.34 682.787 L918.781 682.787 L918.221 682.787 L917.662 682.787 L917.103 682.787 L916.544 682.787 L915.984 682.787 L915.425 682.787 L914.866 682.787 L914.307 682.787 L913.747 682.787 L913.188 682.787 L912.629 682.787 L912.07 682.787 L911.51 682.787 L910.951 682.787 L910.392 682.787 L909.833 682.787 L909.273 682.787 L908.714 682.787 L908.155 682.787 L907.596 682.787 L907.036 682.787 L906.477 682.787 L905.918 682.787 L905.359 682.787 L904.799 682.787 L904.24 682.787 L903.681 682.787 L903.122 682.787 L902.562 682.787 L902.003 682.787 L901.444 682.787 L900.885 682.787 L900.325 682.787 L899.766 682.787 L899.207 682.787 L898.648 682.787 L898.088 682.787 L897.529 682.787 L896.97 682.787 L896.411 682.787 L895.851 682.787 L895.292 682.787 L894.733 682.787 L894.174 682.787 L893.614 682.787 L893.055 682.787 L892.496 682.787 L891.937 682.787 L891.377 682.787 L890.818 682.787 L890.259 682.787 L889.7 682.787 L889.14 682.787 L888.581 682.787 L888.022 682.787 L887.463 682.787 L886.903 682.787 L886.344 682.787 L885.785 682.787 L885.226 682.787 L884.666 682.787 L884.107 682.787 L883.548 682.787 L882.989 682.787 L882.429 682.787 L881.87 682.787 L881.311 682.787 L880.752 682.787 L880.192 682.787 L879.633 682.787 L879.074 682.787 L878.515 682.787 L877.955 682.787 L877.396 682.787 L876.837 682.787 L876.278 682.787 L875.718 682.787 L875.159 682.787 L874.6 682.787 L874.041 682.787 L873.481 682.787 L872.922 682.787 L872.363 682.787 L871.804 682.787 L871.244 682.787 L870.685 682.787 L870.126 682.787 L869.567 682.787 L869.007 682.787 L868.448 682.787 L867.889 682.787 L867.33 682.787 L866.77 682.787 L866.211 682.787 L865.652 682.787 L865.093 682.787 L864.533 682.787 L863.974 682.787 L863.415 682.787 L862.856 682.787 L862.296 682.787 L861.737 682.787 L861.178 682.787 L860.619 682.787 L860.059 682.787 L859.5 682.787 L858.941 682.787 L858.382 682.787 L857.822 682.787 L857.263 682.787 L856.704 682.787 L856.145 682.787 L855.585 682.787 L855.026 682.787 L854.467 682.787 L853.908 682.787 L853.348 682.787 L852.789 682.787 L852.23 682.787 L851.671 682.787 L851.111 682.787 L850.552 682.787 L849.993 682.787 L849.434 682.787 L848.874 682.787 L848.315 682.787 L847.756 682.787 L847.197 682.787 L846.637 682.787 L846.078 682.787 L845.519 682.787 L844.96 682.787 L844.4 682.787 L843.841 682.787 L843.282 682.787 L842.723 682.787 L842.163 682.787 L841.604 682.787 L841.045 682.787 L840.486 682.787 L839.926 682.787 L839.367 682.787 L838.808 682.787 L838.249 682.787 L837.689 682.787 L837.13 682.787 L836.571 682.787 L836.012 682.787 L835.452 682.787 L834.893 682.787 L834.334 682.787 L833.775 682.787 L833.215 682.787 L832.656 682.787 L832.097 682.787 L831.538 682.787 L830.978 682.787 L830.419 682.787 L829.86 682.787 L829.301 682.787 L828.741 682.787 L828.182 682.787 L827.623 682.787 L827.064 682.787 L826.504 682.787 L825.945 682.787 L825.386 682.787 L824.827 682.787 L824.267 682.787 L823.708 682.787 L823.149 682.787 L822.59 682.787 L822.03 682.787 L821.471 682.787 L820.912 682.787 L820.353 682.787 L819.793 682.787 L819.234 682.787 L818.675 682.787 L818.116 682.787 L817.556 682.787 L816.997 682.787 L816.438 682.787 L815.879 682.787 L815.319 682.787 L814.76 682.787 L814.201 682.787 L813.642 682.787 L813.082 682.787 L812.523 682.787 L811.964 682.787 L811.405 682.787 L810.845 682.787 L810.286 682.787 L809.727 682.787 L809.168 682.787 L808.608 682.787 L808.049 682.787 L807.49 682.787 L806.931 682.787 L806.371 682.787 L805.812 682.787 L805.253 682.787 L804.693 682.787 L804.134 682.787 L803.575 682.787 L803.016 682.787 L802.456 682.787 L801.897 682.787 L801.338 682.787 L800.779 682.787 L800.219 682.787 L799.66 682.787 L799.101 682.787 L798.542 682.787 L797.982 682.787 L797.423 682.787 L796.864 682.787 L796.305 682.787 L795.745 682.787 L795.186 682.787 L794.627 682.787 L794.068 682.787 L793.508 682.787 L792.949 682.787 L792.39 682.787 L791.831 682.787 L791.271 682.787 L790.712 682.787 L790.153 682.787 L789.594 682.787 L789.034 682.787 L788.475 682.787 L787.916 682.787 L787.357 682.787 L786.797 682.787 L786.238 682.787 L785.679 682.787 L785.12 682.787 L784.56 682.787 L784.001 682.787 L783.442 682.787 L782.883 682.787 L782.323 682.787 L781.764 682.787 L781.205 682.787 L780.646 682.787 L780.086 682.787 L779.527 682.787 L778.968 682.787 L778.409 682.787 L777.849 682.787 L777.29 682.787 L776.731 682.787 L776.172 682.787 L775.612 682.787 L775.053 682.787 L774.494 682.787 L773.935 682.787 L773.375 682.787 L772.816 682.787 L772.257 682.787 L771.698 682.787 L771.138 682.787 L770.579 682.787 L770.02 682.787 L769.461 682.787 L768.901 682.787 L768.342 682.787 L767.783 682.787 L767.224 682.787 L766.664 682.787 L766.105 682.787 L765.546 682.787 L764.987 682.787 L764.427 682.787 L763.868 682.787 L763.309 682.787 L762.75 682.787 L762.19 682.787 L761.631 682.787 L761.072 682.787 L760.513 682.787 L759.953 682.787 L759.394 682.787 L758.835 682.787 L758.276 682.787 L757.716 682.787 L757.157 682.787 L756.598 682.787 L756.039 682.787 L755.479 682.787 L754.92 682.787 L754.361 682.787 L753.802 682.787 L753.242 682.787 L752.683 682.787 L752.124 682.787 L751.565 682.787 L751.005 682.787 L750.446 682.787 L749.887 682.787 L749.328 682.787 L748.768 682.787 L748.209 682.787 L747.65 682.787 L747.091 682.787 L746.531 682.787 L745.972 682.787 L745.413 682.787 L744.854 682.787 L744.294 682.787 L743.735 682.787 L743.176 682.787 L742.617 682.787 L742.057 682.787 L741.498 682.787 L740.939 682.787 L740.38 682.787 L739.82 682.787 L739.261 682.787 L738.702 682.787 L738.143 682.787 L737.583 682.787 L737.024 682.787 L736.465 682.787 L735.906 682.787 L735.346 682.787 L734.787 682.787 L734.228 682.787 L733.669 682.787 L733.109 682.787 L732.55 682.787 L731.991 682.787 L731.432 682.787 L730.872 682.787 L730.313 682.787 L729.754 682.787 L729.195 682.787 L728.635 682.787 L728.076 682.787 L727.517 682.787 L726.958 682.787 L726.398 682.787 L725.839 682.787 L725.28 682.787 L724.721 682.787 L724.161 682.787 L723.602 682.787 L723.043 682.787 L722.484 682.787 L721.924 682.787 L721.365 682.787 L720.806 682.787 L720.247 682.787  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip113)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.38 720.806,686.38 721.365,686.38 721.924,686.38 722.484,686.38 723.043,686.38 723.602,686.38 724.161,686.38 724.721,686.38 725.28,686.38 725.839,686.38 726.398,686.38 726.958,686.38 727.517,686.38 728.076,686.38 728.635,686.38 729.195,686.38 729.754,686.38 730.313,686.38 730.872,686.38 731.432,686.38 731.991,686.38 732.55,686.38 733.109,686.38 733.669,686.38 734.228,686.38 734.787,686.38 735.346,686.38 735.906,686.38 736.465,686.38 737.024,686.38 737.583,686.38 738.143,686.38 738.702,686.38 739.261,686.38 739.82,686.38 740.38,686.38 740.939,686.38 741.498,686.38 742.057,686.38 742.617,686.38 743.176,686.38 743.735,686.38 744.294,686.38 744.854,686.38 745.413,686.38 745.972,686.38 746.531,686.38 747.091,686.38 747.65,686.38 748.209,686.38 748.768,686.38 749.328,686.38 749.887,686.38 750.446,686.38 751.005,686.38 751.565,686.38 752.124,686.38 752.683,686.38 753.242,686.38 753.802,686.38 754.361,686.38 754.92,686.38 755.479,686.38 756.039,686.38 756.598,686.38 757.157,686.38 757.716,686.38 758.276,686.38 758.835,686.38 759.394,686.38 759.953,686.38 760.513,686.38 761.072,686.38 761.631,686.38 762.19,686.38 762.75,686.38 763.309,686.38 763.868,686.38 764.427,686.38 764.987,686.38 765.546,686.38 766.105,686.38 766.664,686.38 767.224,686.38 767.783,686.38 768.342,686.38 768.901,686.38 769.461,686.38 770.02,686.38 770.579,686.38 771.138,686.38 771.698,686.38 772.257,686.38 772.816,686.38 773.375,686.38 773.935,686.38 774.494,686.38 775.053,686.38 775.612,686.38 776.172,686.38 776.731,686.38 777.29,686.38 777.849,686.38 778.409,686.38 778.968,686.38 779.527,686.38 780.086,686.38 780.646,686.38 781.205,686.38 781.764,686.38 782.323,686.38 782.883,686.38 783.442,686.38 784.001,686.38 784.56,686.38 785.12,686.38 785.679,686.38 786.238,686.38 786.797,686.38 787.357,686.38 787.916,686.38 788.475,686.38 789.034,686.38 789.594,686.38 790.153,686.38 790.712,686.38 791.271,686.38 791.831,686.38 792.39,686.38 792.949,686.38 793.508,686.38 794.068,686.38 794.627,686.38 795.186,686.38 795.745,686.38 796.305,686.38 796.864,686.38 797.423,686.38 797.982,686.38 798.542,686.38 799.101,686.38 799.66,686.38 800.219,686.38 800.779,686.38 801.338,686.38 801.897,686.38 802.456,686.38 803.016,686.38 803.575,686.38 804.134,686.38 804.693,686.38 805.253,686.38 805.812,686.38 806.371,686.38 806.931,686.38 807.49,686.38 808.049,686.38 808.608,686.38 809.168,686.38 809.727,686.38 810.286,686.38 810.845,686.38 811.405,686.38 811.964,686.38 812.523,686.38 813.082,686.38 813.642,686.38 814.201,686.38 814.76,686.38 815.319,686.38 815.879,686.38 816.438,686.38 816.997,686.38 817.556,686.38 818.116,686.38 818.675,686.38 819.234,686.38 819.793,686.38 820.353,686.38 820.912,686.38 821.471,686.38 822.03,686.38 822.59,686.38 823.149,686.38 823.708,686.38 824.267,686.38 824.827,686.38 825.386,686.38 825.945,686.38 826.504,686.38 827.064,686.38 827.623,686.38 828.182,686.38 828.741,686.38 829.301,686.38 829.86,686.38 830.419,686.38 830.978,686.38 831.538,686.38 832.097,686.38 832.656,686.38 833.215,686.38 833.775,686.38 834.334,686.38 834.893,686.38 835.452,686.38 836.012,686.38 836.571,686.38 837.13,686.38 837.689,686.38 838.249,686.38 838.808,686.38 839.367,686.38 839.926,686.38 840.486,686.38 841.045,686.38 841.604,686.38 842.163,686.38 842.723,686.38 843.282,686.38 843.841,686.38 844.4,686.38 844.96,686.38 845.519,686.38 846.078,686.38 846.637,686.38 847.197,686.38 847.756,686.38 848.315,686.38 848.874,686.38 849.434,686.38 849.993,686.38 850.552,686.38 851.111,686.38 851.671,686.38 852.23,686.38 852.789,686.38 853.348,686.38 853.908,686.38 854.467,686.38 855.026,686.38 855.585,686.38 856.145,686.38 856.704,686.38 857.263,686.38 857.822,686.38 858.382,686.38 858.941,686.38 859.5,686.38 860.059,686.38 860.619,686.38 861.178,686.38 861.737,686.38 862.296,686.38 862.856,686.38 863.415,686.38 863.974,686.38 864.533,686.38 865.093,686.38 865.652,686.38 866.211,686.38 866.77,686.38 867.33,686.38 867.889,686.38 868.448,686.38 869.007,686.38 869.567,686.38 870.126,686.38 870.685,686.38 871.244,686.38 871.804,686.38 872.363,686.38 872.922,686.38 873.481,686.38 874.041,686.38 874.6,686.38 875.159,686.38 875.718,686.38 876.278,686.38 876.837,686.38 877.396,686.38 877.955,686.38 878.515,686.38 879.074,686.38 879.633,686.38 880.192,686.38 880.752,686.38 881.311,686.38 881.87,686.38 882.429,686.38 882.989,686.38 883.548,686.38 884.107,686.38 884.666,686.38 885.226,686.38 885.785,686.38 886.344,686.38 886.903,686.38 887.463,686.38 888.022,686.38 888.581,686.38 889.14,686.38 889.7,686.38 890.259,686.38 890.818,686.38 891.377,686.38 891.937,686.38 892.496,686.38 893.055,686.38 893.614,686.38 894.174,686.38 894.733,686.38 895.292,686.38 895.851,686.38 896.411,686.38 896.97,686.38 897.529,686.38 898.088,686.38 898.648,686.38 899.207,686.38 899.766,686.38 900.325,686.38 900.885,686.38 901.444,686.38 902.003,686.38 902.562,686.38 903.122,686.38 903.681,686.38 904.24,686.38 904.799,686.38 905.359,686.38 905.918,686.38 906.477,686.38 907.036,686.38 907.596,686.38 908.155,686.38 908.714,686.38 909.273,686.38 909.833,686.38 910.392,686.38 910.951,686.38 911.51,686.38 912.07,686.38 912.629,686.38 913.188,686.38 913.747,686.38 914.307,686.38 914.866,686.38 915.425,686.38 915.984,686.38 916.544,686.38 917.103,686.38 917.662,686.38 918.221,686.38 918.781,686.38 919.34,686.38 919.899,686.38 920.458,686.38 921.018,686.38 921.577,686.38 922.136,686.38 922.695,686.38 923.255,686.38 923.814,686.38 924.373,686.38 924.932,686.38 925.492,686.38 926.051,686.38 926.61,686.38 927.169,686.38 927.729,686.38 928.288,686.38 928.847,686.38 929.406,686.38 929.966,686.38 930.525,686.38 931.084,686.38 931.644,686.38 932.203,686.38 932.762,686.38 933.321,686.38 933.881,686.38 934.44,686.38 934.999,686.38 935.558,686.38 936.118,686.38 936.677,686.38 937.236,686.38 937.795,686.38 938.355,686.38 938.914,686.38 939.473,686.38 940.032,686.38 940.592,686.38 941.151,686.38 941.71,686.38 942.269,686.38 942.829,686.38 943.388,686.38 943.947,686.38 944.506,686.38 945.066,686.38 945.625,686.38 946.184,686.38 946.743,686.38 947.303,686.38 947.862,686.38 948.421,686.38 948.98,686.38 949.54,686.38 950.099,686.38 950.658,686.38 951.217,686.38 951.777,686.38 952.336,686.38 952.895,686.38 953.454,686.38 954.014,686.38 954.573,686.38 955.132,686.38 955.691,686.38 956.251,686.38 956.81,686.38 957.369,686.38 957.928,686.38 958.488,686.38 959.047,686.38 959.606,686.38 960.165,686.38 960.725,686.38 961.284,686.38 961.843,686.38 962.402,686.38 962.962,686.38 963.521,686.38 964.08,686.38 964.639,686.38 965.199,686.38 965.758,686.38 966.317,686.38 966.876,686.38 967.436,686.38 967.995,686.38 968.554,686.38 969.113,686.38 969.673,686.38 970.232,686.38 970.791,686.38 971.35,686.38 971.91,686.38 972.469,686.38 973.028,686.38 973.587,686.38 974.147,686.38 974.706,686.38 975.265,686.38 975.824,686.38 976.384,686.38 976.943,686.38 977.502,686.38 978.061,686.38 978.621,686.38 979.18,686.38 979.739,686.38 980.298,686.38 980.858,686.38 981.417,686.38 981.976,686.38 982.535,686.38 983.095,686.38 983.654,686.38 984.213,686.38 984.772,686.38 985.332,686.38 985.891,686.38 986.45,686.38 987.009,686.38 987.569,686.38 988.128,686.38 988.687,686.38 989.246,686.38 989.806,686.38 990.365,686.38 990.924,686.38 991.483,686.38 992.043,686.38 992.602,686.38 993.161,686.38 993.72,686.38 994.28,686.38 994.839,686.38 995.398,686.38 995.957,686.38 996.517,686.38 997.076,686.38 997.635,686.38 998.194,686.38 998.754,686.38 999.313,686.38 999.872,686.38 1000.43,686.38 1000.99,686.38 1001.55,686.38 1002.11,686.38 1002.67,686.38 1003.23,686.38 1003.79,686.38 1004.35,686.38 1004.91,686.38 1005.46,686.38 1006.02,686.38 1006.58,686.38 1007.14,686.38 1007.7,686.38 1008.26,686.38 1008.82,686.38 1009.38,686.38 1009.94,686.38 1010.5,686.38 1011.06,686.38 1011.62,686.38 1012.18,686.38 1012.73,686.38 1013.29,686.38 1013.85,686.38 1014.41,686.38 1014.97,686.38 1015.53,686.38 1016.09,686.38 1016.65,686.38 1017.21,686.38 1017.77,686.38 1018.33,686.38 1018.89,686.38 1019.45,686.38 1020.01,686.38 1020.56,686.38 1021.12,686.38 1021.68,686.38 1022.24,686.38 1022.8,686.38 1023.36,686.38 1023.92,686.38 1024.48,686.38 1025.04,686.38 1025.6,686.38 1026.16,686.38 1026.72,686.38 1027.28,686.38 1027.83,686.38 1028.39,686.38 1028.95,686.38 1029.51,686.38 1030.07,686.38 1030.63,686.38 1031.19,686.38 1031.75,686.38 1032.31,686.38 1032.87,686.38 1033.43,686.38 1033.99,686.38 1034.55,686.38 1035.1,686.38 1035.66,686.38 1036.22,686.38 1036.78,686.38 1037.34,686.38 1037.9,686.38 1038.46,686.38 1039.02,686.38 1039.58,686.38 1040.14,686.38 1040.7,686.38 1041.26,686.38 1041.82,686.38 1042.38,686.38 1042.93,686.38 1043.49,686.38 1044.05,686.38 1044.61,686.38 1045.17,686.38 1045.73,686.38 1046.29,686.38 1046.85,686.38 1047.41,686.38 1047.97,686.38 1048.53,686.38 1049.09,686.38 1049.65,686.38 1050.2,686.38 1050.76,686.38 1051.32,686.38 1051.88,686.38 1052.44,686.38 1053,686.38 1053.56,686.38 1054.12,686.38 1054.68,686.38 1055.24,686.38 1055.8,686.38 1056.36,686.38 1056.92,686.38 1057.48,686.38 1058.03,686.38 1058.59,686.38 1059.15,686.38 1059.71,686.38 1060.27,686.38 1060.83,686.38 1061.39,686.38 1061.95,686.38 1062.51,686.38 1063.07,686.38 1063.63,686.38 1064.19,686.38 1064.75,686.38 1065.3,686.38 1065.86,686.38 1066.42,686.38 1066.98,686.38 1067.54,686.38 1068.1,686.38 1068.66,686.38 1069.22,686.38 1069.78,686.38 1070.34,686.38 1070.9,686.38 1071.46,686.38 1072.02,686.38 1072.57,686.38 1073.13,686.38 1073.69,686.38 1074.25,686.38 1074.81,686.38 1075.37,686.38 1075.93,686.38 1076.49,686.38 1077.05,686.38 1077.61,686.38 1078.17,686.38 1078.73,686.38 1079.29,686.38 1079.85,686.38 1080.4,686.38 1080.96,686.38 1081.52,686.38 1082.08,686.38 1082.64,686.38 1083.2,686.38 1083.76,686.38 1084.32,686.38 1084.88,686.38 1085.44,686.38 1086,686.38 1086.56,686.38 1087.12,686.38 1087.67,686.38 1088.23,686.38 1088.79,686.38 1089.35,686.38 1089.91,686.38 1090.47,686.38 1091.03,686.38 1091.59,686.38 1092.15,686.38 1092.71,686.38 1093.27,686.38 1093.83,686.38 1094.39,686.38 1094.94,686.38 1095.5,686.38 1096.06,686.38 1096.62,686.38 1097.18,686.38 1097.74,686.38 1098.3,686.38 1098.86,686.38 1099.42,686.38 1099.98,686.38 1100.54,686.38 1101.1,686.38 1101.66,686.38 1102.22,686.38 1102.77,686.38 1103.33,686.38 1103.89,686.38 1104.45,686.38 1105.01,686.38 1105.57,686.38 1106.13,686.38 1106.69,686.38 1107.25,686.38 1107.81,686.38 1108.37,686.38 1108.93,686.38 1109.49,686.38 1110.04,686.38 1110.6,686.38 1111.16,686.38 1111.72,686.38 1112.28,686.38 1112.84,686.38 1113.4,686.38 1113.96,686.38 1114.52,686.38 1115.08,686.38 1115.64,686.38 1116.2,686.38 1116.76,686.38 1117.31,686.38 1117.87,686.38 1118.43,686.38 1118.99,686.38 1119.55,686.38 1120.11,686.38 1120.67,686.38 1121.23,686.38 1121.79,686.38 1122.35,686.38 1122.91,686.38 1123.47,686.38 1124.03,686.38 1124.59,686.38 1125.14,686.38 1125.7,686.38 1126.26,686.38 1126.82,686.38 1127.38,686.38 1127.94,686.38 1128.5,686.38 1129.06,686.38 1129.62,686.38 1130.18,686.38 1130.74,686.38 1131.3,686.38 1131.86,686.38 1132.41,686.38 1132.97,686.38 1133.53,686.38 1134.09,686.38 1134.65,686.38 1135.21,686.38 1135.77,686.38 1136.33,686.38 1136.89,686.38 1137.45,686.38 1138.01,686.38 1138.57,686.38 1139.13,686.38 1139.68,686.38 1140.24,686.38 1140.8,686.38 1141.36,686.38 1141.92,686.38 1142.48,686.38 1143.04,686.38 1143.6,686.38 1144.16,686.38 1144.72,686.38 1145.28,686.38 1145.84,686.38 1146.4,686.38 1146.96,686.38 1147.51,686.38 1148.07,686.38 1148.63,686.38 1149.19,686.38 1149.75,686.38 1150.31,686.38 1150.87,686.38 1151.43,686.38 1151.99,686.38 1152.55,686.38 1153.11,686.38 1153.67,686.38 1154.23,686.38 1154.78,686.38 1155.34,686.38 1155.9,686.38 1156.46,686.38 1157.02,686.38 1157.58,686.38 1158.14,686.38 1158.7,686.38 1159.26,686.38 1159.82,686.38 1160.38,686.38 1160.94,686.38 1161.5,686.38 1162.05,686.38 1162.61,686.38 1163.17,686.38 1163.73,686.38 1164.29,686.38 1164.85,686.38 1165.41,686.38 1165.97,686.38 1166.53,686.38 1167.09,686.38 1167.65,686.38 1168.21,686.38 1168.77,686.38 1169.33,686.38 1169.88,686.38 1170.44,686.38 1171,686.38 1171.56,686.38 1172.12,686.38 1172.68,686.38 1173.24,686.38 1173.8,686.38 1174.36,686.38 1174.92,686.38 1175.48,686.38 1176.04,686.38 1176.6,686.38 1177.15,686.38 1177.71,686.38 1178.27,686.38 1178.83,686.38 1179.39,686.38 1179.95,686.38 1180.51,686.38 1181.07,686.38 1181.63,686.38 1182.19,686.38 1182.75,686.38 1183.31,686.38 1183.87,686.38 1184.43,686.38 1184.98,686.38 1185.54,686.38 1186.1,686.38 1186.66,686.38 1187.22,686.38 1187.78,686.38 1188.34,686.38 1188.9,686.38 1189.46,686.38 1190.02,686.38 1190.58,686.38 1191.14,686.38 1191.7,686.38 1192.25,686.38 1192.81,686.38 1193.37,686.38 1193.93,686.38 1194.49,686.38 1195.05,686.38 1195.61,686.38 1196.17,686.38 1196.73,686.38 1197.29,686.38 1197.85,686.38 1198.41,686.38 1198.97,686.38 1199.52,686.38 1200.08,686.38 1200.64,686.38 1201.2,686.38 1201.76,686.38 1202.32,686.38 1202.88,686.38 1203.44,686.38 1204,686.38 1204.56,686.38 1205.12,686.38 1205.68,686.38 1206.24,686.38 1206.8,686.38 1207.35,686.38 1207.91,686.38 1208.47,686.38 1209.03,686.38 1209.59,686.38 1210.15,686.38 1210.71,686.38 1211.27,686.38 1211.83,686.38 1212.39,686.38 1212.95,686.38 1213.51,686.38 1214.07,686.38 1214.62,686.38 1215.18,686.38 1215.74,686.38 1216.3,686.38 1216.86,686.38 1217.42,686.38 1217.98,686.38 1218.54,686.38 1219.1,686.38 1219.66,686.38 1220.22,686.38 1220.78,686.38 1221.34,686.38 1221.89,686.38 1222.45,686.38 1223.01,686.38 1223.57,686.38 1224.13,686.38 1224.69,686.38 1225.25,686.38 1225.81,686.38 1226.37,686.38 1226.93,686.38 1227.49,686.38 1228.05,686.38 1228.61,686.38 1229.17,686.38 1229.72,686.38 1230.28,686.38 1230.84,686.38 1231.4,686.38 1231.96,686.38 1232.52,686.38 1233.08,686.38 1233.64,686.38 1234.2,686.38 1234.76,686.38 1235.32,686.38 1235.88,686.38 1236.44,686.38 1236.99,686.38 1237.55,686.38 1238.11,686.38 1238.67,686.38 1239.23,686.38 1239.79,686.38 1240.35,686.38 1240.91,686.38 1241.47,686.38 1242.03,686.38 1242.59,686.38 1243.15,686.38 1243.71,686.38 1244.26,686.38 1244.82,686.38 1245.38,686.38 1245.94,686.38 1246.5,686.38 1247.06,686.38 1247.62,686.38 1248.18,686.38 1248.74,686.38 1249.3,686.38 1249.86,686.38 1250.42,686.38 1250.98,686.38 1251.54,686.38 1252.09,686.38 1252.65,686.38 1253.21,686.38 1253.77,686.38 1254.33,686.38 1254.89,686.38 1255.45,686.38 1256.01,686.38 1256.57,686.38 1257.13,686.38 1257.69,686.38 1258.25,686.38 1258.81,686.38 1259.36,686.38 1259.92,686.38 1260.48,686.38 1261.04,686.38 1261.6,686.38 1262.16,686.38 1262.72,686.38 1263.28,686.38 1263.84,686.38 1264.4,686.38 1264.96,686.38 1265.52,686.38 1266.08,686.38 1266.63,686.38 1267.19,686.38 1267.75,686.38 1268.31,686.38 1268.87,686.38 1269.43,686.38 1269.99,686.38 1270.55,686.38 1271.11,686.38 1271.67,686.38 1272.23,686.38 1272.79,686.38 1273.35,686.38 1273.91,686.38 1274.46,686.38 1275.02,686.38 1275.58,686.38 1276.14,686.38 1276.7,686.38 1277.26,686.38 1277.82,686.38 1278.38,686.38 1278.94,686.38 1279.5,686.38 1280.06,686.38 1280.62,686.38 1281.18,686.38 1281.73,686.38 1282.29,686.38 1282.85,686.38 1283.41,686.38 1283.97,686.38 1284.53,686.38 1285.09,686.38 1285.65,686.38 1286.21,686.38 1286.77,686.38 1287.33,686.38 1287.89,686.38 1288.45,686.38 1289,686.38 1289.56,686.38 1290.12,686.38 1290.68,686.38 1291.24,686.38 1291.8,686.38 1292.36,686.38 1292.92,686.38 1293.48,686.38 1294.04,686.38 1294.6,686.38 1295.16,686.38 1295.72,686.38 1296.28,686.38 1296.83,686.38 1297.39,686.38 1297.95,686.38 1298.51,686.38 1299.07,686.38 1299.63,686.38 1300.19,686.38 1300.75,686.38 1301.31,686.38 1301.87,686.38 1302.43,686.38 1302.99,686.38 1303.55,686.38 1304.1,686.38 1304.66,686.38 1305.22,686.38 1305.78,686.38 1306.34,686.38 1306.9,686.38 1307.46,686.38 1308.02,686.38 1308.58,686.38 1309.14,686.38 1309.7,686.38 1310.26,686.38 1310.82,686.38 1311.38,686.38 1311.93,686.38 1312.49,686.38 1313.05,686.38 1313.61,686.38 1314.17,686.38 1314.73,686.38 1315.29,686.38 1315.85,686.38 1316.41,686.38 1316.97,686.38 1317.53,686.38 1318.09,686.38 1318.65,686.38 1319.2,686.38 1319.76,686.38 1320.32,686.38 1320.88,686.38 1321.44,686.38 1322,686.38 1322.56,686.38 1323.12,686.38 1323.68,686.38 1324.24,686.38 1324.8,686.38 1325.36,686.38 1325.92,686.38 1326.47,686.38 1327.03,686.38 1327.59,686.38 1328.15,686.38 1328.71,686.38 1329.27,686.38 1329.83,686.38 1330.39,686.38 1330.95,686.38 1331.51,686.38 1332.07,686.38 1332.63,686.38 1333.19,686.38 1333.75,686.38 1334.3,686.38 1334.86,686.38 1335.42,686.38 1335.98,686.38 1336.54,686.38 1337.1,686.38 1337.66,686.38 1338.22,686.38 1338.78,686.38 1339.34,686.38 1339.9,686.38 1340.46,686.38 1341.02,686.38 1341.57,686.38 1342.13,686.38 1342.69,686.38 1343.25,686.38 1343.81,686.38 1344.37,686.38 1344.93,686.38 1345.49,686.38 1346.05,686.38 1346.61,686.38 1347.17,686.38 1347.73,686.38 1348.29,686.38 1348.84,686.38 1349.4,686.38 1349.96,686.38 1350.52,686.38 1351.08,686.38 1351.64,686.38 1352.2,686.38 1352.76,686.38 1353.32,686.38 1353.88,686.38 1354.44,686.38 1355,686.38 1355.56,686.38 1356.12,686.38 1356.67,686.38 1357.23,686.38 1357.79,686.38 1358.35,686.38 1358.91,686.38 1359.47,686.38 1360.03,686.38 1360.59,686.38 1361.15,686.38 1361.71,686.38 1362.27,686.38 1362.83,686.38 1363.39,686.38 1363.94,686.38 1364.5,686.38 1365.06,686.38 1365.62,686.38 1366.18,686.38 1366.74,686.38 1367.3,686.38 1367.86,686.38 1368.42,686.38 1368.98,686.38 1369.54,686.38 1370.1,686.38 1370.66,686.38 1371.21,686.38 1371.77,686.38 1372.33,686.38 1372.89,686.38 1373.45,686.38 1374.01,686.38 1374.57,686.38 1375.13,686.38 1375.69,686.38 1376.25,686.38 1376.81,686.38 1377.37,686.38 1377.93,686.38 1378.49,686.38 1379.04,686.38 1379.6,686.38 1380.16,686.38 1380.72,686.38 1381.28,686.38 1381.84,686.38 1382.4,686.38 1382.96,686.38 1383.52,686.38 1384.08,686.38 1384.64,686.38 1385.2,686.38 1385.76,686.38 1386.31,686.38 1386.87,686.38 1387.43,686.38 1387.99,686.38 1388.55,686.38 1389.11,686.38 1389.67,686.38 1390.23,686.38 1390.79,686.38 1391.35,686.38 1391.91,686.38 1392.47,686.38 1393.03,686.38 1393.58,686.38 1394.14,686.38 1394.7,686.38 1395.26,686.38 1395.82,686.38 1396.38,686.38 1396.94,686.38 1397.5,686.38 1398.06,686.38 1398.62,686.38 1399.18,686.38 1399.74,686.38 1400.3,686.38 1400.86,686.38 1401.41,686.38 1401.97,686.38 1402.53,686.38 1403.09,686.38 1403.65,686.38 1404.21,686.38 1404.77,686.38 1405.33,686.38 1405.89,686.38 1406.45,686.38 1407.01,686.38 1407.57,686.38 1408.13,686.38 1408.68,686.38 1409.24,686.38 1409.8,686.38 1410.36,686.38 1410.92,686.38 1411.48,686.38 1412.04,686.38 1412.6,686.38 1413.16,686.38 1413.72,686.38 1414.28,686.38 1414.84,686.38 1415.4,686.38 1415.95,686.38 1416.51,686.38 1417.07,686.38 1417.63,686.38 1418.19,686.38 1418.75,686.38 1419.31,686.38 1419.87,686.38 1420.43,686.38 1420.99,686.38 1421.55,686.38 1422.11,686.38 1422.67,686.38 1423.23,686.38 1423.78,686.38 1424.34,686.38 1424.9,686.38 1425.46,686.38 1426.02,686.38 1426.58,686.38 1427.14,686.38 1427.7,686.38 1428.26,686.38 1428.82,686.38 1429.38,686.38 1429.94,686.38 1430.5,686.38 1431.05,686.38 1431.61,686.38 1432.17,686.38 1432.73,686.38 1433.29,686.38 1433.85,686.38 1434.41,686.38 1434.97,686.38 1435.53,686.38 1436.09,686.38 1436.65,686.38 1437.21,686.38 1437.77,686.38 1438.33,686.38 1438.88,686.38 1439.44,686.38 1440,686.38 1440.56,686.38 1441.12,686.38 1441.68,686.38 1442.24,686.38 1442.8,686.38 1443.36,686.38 1443.92,686.38 1444.48,686.38 1445.04,686.38 1445.6,686.38 1446.15,686.38 1446.71,686.38 1447.27,686.38 1447.83,686.38 1448.39,686.38 1448.95,686.38 1449.51,686.38 1450.07,686.38 1450.63,686.38 1451.19,686.38 1451.75,686.38 1452.31,686.38 1452.87,686.38 1453.42,686.38 1453.98,686.38 1454.54,686.38 1455.1,686.38 1455.66,686.38 1456.22,686.38 1456.78,686.38 1457.34,686.38 1457.9,686.38 1458.46,686.38 1459.02,686.38 1459.58,686.38 1460.14,686.38 1460.7,686.38 1461.25,686.38 1461.81,686.38 1462.37,686.38 1462.93,686.38 1463.49,686.38 1464.05,686.38 1464.61,686.38 1465.17,686.38 1465.73,686.38 1466.29,686.38 1466.85,686.38 1467.41,686.38 1467.97,686.38 1468.52,686.38 1469.08,686.38 1469.64,686.38 1470.2,686.38 1470.76,686.38 1471.32,686.38 1471.88,686.38 1472.44,686.38 1473,686.38 1473.56,686.38 1474.12,686.38 1474.68,686.38 1475.24,686.38 1475.79,686.38 1476.35,686.38 1476.91,686.38 1477.47,686.38 1478.03,686.38 1478.59,686.38 1479.15,686.38 1479.71,686.38 1480.27,686.38 1480.83,686.38 1481.39,686.38 1481.95,686.38 1482.51,686.38 1483.07,686.38 1483.62,686.38 1484.18,686.38 1484.74,686.38 1485.3,686.38 1485.86,686.38 1486.42,686.38 1486.98,686.38 1487.54,686.38 1488.1,686.38 1488.66,686.38 1489.22,686.38 1489.78,686.38 1490.34,686.38 1490.89,686.38 1491.45,686.38 1492.01,686.38 1492.57,686.38 1493.13,686.38 1493.69,686.38 1494.25,686.38 1494.81,686.38 1495.37,686.38 1495.93,686.38 1496.49,686.38 1497.05,686.38 1497.61,686.38 1498.16,686.38 1498.72,686.38 1499.28,686.38 1499.84,686.38 1500.4,686.38 1500.96,686.38 1501.52,686.38 1502.08,686.38 1502.64,686.38 1503.2,686.38 1503.76,686.38 1504.32,686.38 1504.88,686.38 1505.44,686.38 1505.99,686.38 1506.55,686.38 1507.11,686.38 1507.67,686.38 1508.23,686.38 1508.79,686.38 1509.35,686.38 1509.91,686.38 1510.47,686.38 1511.03,686.38 1511.59,686.38 1512.15,686.38 1512.71,686.38 1513.26,686.38 1513.82,686.38 1514.38,686.38 1514.94,686.38 1515.5,686.38 1516.06,686.38 1516.62,686.38 1517.18,686.38 1517.74,686.38 1518.3,686.38 1518.86,686.38 1519.42,686.38 1519.98,686.38 1520.53,686.38 1521.09,686.38 1521.65,686.38 1522.21,686.38 1522.77,686.38 1523.33,686.38 1523.89,686.38 1524.45,686.38 1525.01,686.38 1525.57,686.38 1526.13,686.38 1526.69,686.38 1527.25,686.38 1527.81,686.38 1528.36,686.38 1528.92,686.38 1529.48,686.38 1530.04,686.38 1530.6,686.38 1531.16,686.38 1531.72,686.38 1532.28,686.38 1532.84,686.38 1533.4,686.38 1533.96,686.38 1534.52,686.38 1535.08,686.38 1535.63,686.38 1536.19,686.38 1536.75,686.38 1537.31,686.38 1537.87,686.38 1538.43,686.38 1538.99,686.38 1539.55,686.38 1540.11,686.38 1540.67,686.38 1541.23,686.38 1541.79,686.38 1542.35,686.38 1542.9,686.38 1543.46,686.38 1544.02,686.38 1544.58,686.38 1545.14,686.38 1545.7,686.38 1546.26,686.38 1546.82,686.38 1547.38,686.38 1547.94,686.38 1548.5,686.38 1549.06,686.38 1549.62,686.38 1550.18,686.38 1550.73,686.38 1551.29,686.38 1551.85,686.38 1552.41,686.38 1552.97,686.38 1553.53,686.38 1554.09,686.38 1554.65,686.38 1555.21,686.38 1555.77,686.38 1556.33,686.38 1556.89,686.38 1557.45,686.38 1558,686.38 1558.56,686.38 1559.12,686.38 1559.68,686.38 1560.24,686.38 1560.8,686.38 1561.36,686.38 1561.92,686.38 1562.48,686.38 1563.04,686.38 1563.6,686.38 1564.16,686.38 1564.72,686.38 1565.28,686.38 1565.83,686.38 1566.39,686.38 1566.95,686.38 1567.51,686.38 1568.07,686.38 1568.63,686.38 1569.19,686.38 1569.75,686.38 1570.31,686.38 1570.87,686.38 1571.43,686.38 1571.99,686.38 1572.55,686.38 1573.1,686.38 1573.66,686.38 1574.22,686.38 1574.78,686.38 1575.34,686.38 1575.9,686.38 1576.46,686.38 1577.02,686.38 1577.58,686.38 1578.14,686.38 1578.7,686.38 1579.26,686.38 1579.82,686.38 1580.37,686.38 1580.93,686.38 1581.49,686.38 1582.05,686.38 1582.61,686.38 1583.17,686.38 1583.73,686.38 1584.29,686.38 1584.85,686.38 1585.41,686.38 1585.97,686.38 1586.53,686.38 1587.09,686.38 1587.65,686.38 1588.2,686.38 1588.76,686.38 1589.32,686.38 1589.88,686.38 1590.44,686.38 1591,686.38 1591.56,686.38 1592.12,686.38 1592.68,686.38 1593.24,686.38 1593.8,686.38 1594.36,686.38 1594.92,686.38 1595.47,686.38 1596.03,686.38 1596.59,686.38 1597.15,686.38 1597.71,686.38 1598.27,686.38 1598.83,686.38 1599.39,686.38 1599.95,686.38 1600.51,686.38 1601.07,686.38 1601.63,686.38 1602.19,686.38 1602.74,686.38 1603.3,686.38 1603.86,686.38 1604.42,686.38 1604.98,686.38 1605.54,686.38 1606.1,686.38 1606.66,686.38 1607.22,686.38 1607.78,686.38 1608.34,686.38 1608.9,686.38 1609.46,686.38 1610.02,686.38 1610.57,686.38 1611.13,686.38 1611.69,686.38 1612.25,686.38 1612.81,686.38 1613.37,686.38 1613.93,686.38 1614.49,686.38 1615.05,686.38 1615.61,686.38 1616.17,686.38 1616.73,686.38 1617.29,686.38 1617.84,686.38 1618.4,686.38 1618.96,686.38 1619.52,686.38 1620.08,686.38 1620.64,686.38 1621.2,686.38 1621.76,686.38 1622.32,686.38 1622.88,686.38 1623.44,686.38 1624,686.38 1624.56,686.38 1625.11,686.38 1625.67,686.38 1626.23,686.38 1626.79,686.38 1627.35,686.38 1627.91,686.38 1628.47,686.38 1629.03,686.38 1629.59,686.38 1630.15,686.38 1630.71,686.38 1631.27,686.38 1631.83,686.38 1632.39,686.38 1632.94,686.38 1633.5,686.38 1634.06,686.38 1634.62,686.38 1635.18,686.38 1635.74,686.38 1636.3,686.38 1636.86,686.38 1637.42,686.38 1637.98,686.38 1638.54,686.38 1639.1,686.38 1639.66,686.38 1640.21,686.38 1640.77,686.38 1641.33,686.38 1641.89,686.38 1642.45,686.38 1643.01,686.38 1643.57,686.38 1644.13,686.38 1644.69,686.38 1645.25,686.38 1645.81,686.38 1646.37,686.38 1646.93,686.38 1647.48,686.38 1648.04,686.38 1648.6,686.38 1649.16,686.38 1649.72,686.38 1650.28,686.38 1650.84,686.38 1651.4,686.38 1651.96,686.38 1652.52,686.38 1653.08,686.38 1653.64,686.38 1654.2,686.38 1654.76,686.38 1655.31,686.38 1655.87,686.38 1656.43,686.38 1656.99,686.38 1657.55,686.38 1658.11,686.38 1658.67,686.38 1659.23,686.38 1659.79,686.38 1660.35,686.38 1660.91,686.38 1661.47,686.38 1662.03,686.38 1662.58,686.38 1663.14,686.38 1663.7,686.38 1664.26,686.38 1664.82,686.38 1665.38,686.38 1665.94,686.38 1666.5,686.38 1667.06,686.38 1667.62,686.38 1668.18,686.38 1668.74,686.38 1669.3,686.38 1669.85,686.38 1670.41,686.38 1670.97,686.38 1671.53,686.38 1672.09,686.38 1672.65,686.38 1673.21,686.38 1673.77,686.38 1674.33,686.38 1674.89,686.38 1675.45,686.38 1676.01,686.38 1676.57,686.38 1677.13,686.38 1677.68,686.38 1678.24,686.38 1678.8,686.38 1679.36,686.38 1679.92,686.38 1680.48,686.38 1681.04,686.38 1681.6,686.38 1682.16,686.38 1682.72,686.38 1683.28,686.38 1683.84,686.38 1684.4,686.38 1684.95,686.38 1685.51,686.38 1686.07,686.38 1686.63,686.38 1687.19,686.38 1687.75,686.38 1688.31,686.38 1688.87,686.38 1689.43,686.38 1689.99,686.38 1690.55,686.38 1691.11,686.38 1691.67,686.38 1692.23,686.38 1692.78,686.38 1693.34,686.38 1693.9,686.38 1694.46,686.38 1695.02,686.38 1695.58,686.38 1696.14,686.38 1696.7,686.38 1697.26,686.38 1697.82,686.38 1698.38,686.38 1698.94,686.38 1699.5,686.38 1700.05,686.38 1700.61,686.38 1701.17,686.38 1701.73,686.38 1702.29,686.38 1702.85,686.38 1703.41,686.38 1703.97,686.38 1704.53,686.38 1705.09,686.38 1705.65,686.38 1706.21,686.38 1706.77,686.38 1707.32,686.38 1707.88,686.38 1708.44,686.38 1709,686.38 1709.56,686.38 1710.12,686.38 1710.68,686.38 1711.24,686.38 1711.8,686.38 1712.36,686.38 1712.92,686.38 1713.48,686.38 1714.04,686.38 1714.6,686.38 1715.15,686.38 1715.71,686.38 1716.27,686.38 1716.83,686.38 1717.39,686.38 1717.95,686.38 1718.51,686.38 1719.07,686.38 1719.63,686.38 1720.19,686.38 1720.75,686.38 1721.31,686.38 1721.87,686.38 1722.42,686.38 1722.98,686.38 1723.54,686.38 1724.1,686.38 1724.66,686.38 1725.22,686.38 1725.78,686.38 1726.34,686.38 1726.9,686.38 1727.46,686.38 1728.02,686.38 1728.58,686.38 1729.14,686.38 1729.69,686.38 1730.25,686.38 1730.81,686.38 1731.37,686.38 1731.93,686.38 1732.49,686.38 1733.05,686.38 1733.61,686.38 1734.17,686.38 1734.73,686.38 1735.29,686.38 1735.85,686.38 1736.41,686.38 1736.97,686.38 1737.52,686.38 1738.08,686.38 1738.64,686.38 1739.2,686.38 1739.76,686.38 1740.32,686.38 1740.88,686.38 1741.44,686.38 1742,686.38 1742.56,686.38 1743.12,686.38 1743.68,686.38 1744.24,686.38 1744.79,686.38 1745.35,686.38 1745.91,686.38 1746.47,686.38 1747.03,686.38 1747.59,686.38 1748.15,686.38 1748.71,686.38 1749.27,686.38 1749.83,686.38 1750.39,686.38 1750.95,686.38 1751.51,686.38 1752.06,686.38 1752.62,686.38 1753.18,686.38 1753.74,686.38 1754.3,686.38 1754.86,686.38 1755.42,686.38 1755.98,686.38 1756.54,686.38 1757.1,686.38 1757.66,686.38 1758.22,686.38 1758.78,686.38 1759.34,686.38 1759.89,686.38 1760.45,686.38 1761.01,686.38 1761.57,686.38 1762.13,686.38 1762.69,686.38 1763.25,686.38 1763.81,686.38 1764.37,686.38 1764.93,686.38 1765.49,686.38 1766.05,686.38 1766.61,686.38 1767.16,686.38 1767.72,686.38 1768.28,686.38 1768.84,686.38 1769.4,686.38 1769.96,686.38 1770.52,686.38 1771.08,686.38 1771.64,686.38 1772.2,686.38 1772.76,686.38 1773.32,686.38 1773.88,686.38 1774.43,686.38 1774.99,686.38 1775.55,686.38 1776.11,686.38 1776.67,686.38 1777.23,686.38 1777.79,686.38 1778.35,686.38 1778.91,686.38 1779.47,686.38 1780.03,686.38 1780.59,686.38 1781.15,686.38 1781.71,686.38 1782.26,686.38 1782.82,686.38 1783.38,686.38 1783.94,686.38 1784.5,686.38 1785.06,686.38 1785.62,686.38 1786.18,686.38 1786.74,686.38 1787.3,686.38 1787.86,686.38 1788.42,686.38 1788.98,686.38 1789.53,686.38 1790.09,686.38 1790.65,686.38 1791.21,686.38 1791.77,686.38 1792.33,686.38 1792.89,686.38 1793.45,686.38 1794.01,686.38 1794.57,686.38 1795.13,686.38 1795.69,686.38 1796.25,686.38 1796.8,686.38 1797.36,686.38 1797.92,686.38 1798.48,686.38 1799.04,686.38 1799.6,686.38 1800.16,686.38 1800.72,686.38 1801.28,686.38 1801.84,686.38 1802.4,686.38 1802.96,686.38 1803.52,686.38 1804.08,686.38 1804.63,686.38 1805.19,686.38 1805.75,686.38 1806.31,686.38 1806.87,686.38 1807.43,686.38 1807.99,686.38 1808.55,686.38 1809.11,686.38 1809.67,686.38 1810.23,686.38 1810.79,686.38 1811.35,686.38 1811.9,686.38 1812.46,686.38 1813.02,686.38 1813.58,686.38 1814.14,686.38 1814.7,686.38 1815.26,686.38 1815.82,686.38 1816.38,686.38 1816.94,686.38 1817.5,686.38 1818.06,686.38 1818.62,686.38 1819.18,686.38 1819.73,686.38 1820.29,686.38 1820.85,686.38 1821.41,686.38 1821.97,686.38 1822.53,686.38 1823.09,686.38 1823.65,686.38 1824.21,686.38 1824.77,686.38 1825.33,686.38 1825.89,686.38 1826.45,686.38 1827,686.38 1827.56,686.38 1828.12,686.38 1828.68,686.38 1829.24,686.38 1829.8,686.38 1830.36,686.38 1830.92,686.38 1831.48,686.38 1832.04,686.38 1832.6,686.38 1833.16,686.38 1833.72,686.38 1834.27,686.38 1834.83,686.38 1835.39,686.38 1835.95,686.38 1836.51,686.38 1837.07,686.38 1837.63,686.38 1838.19,686.38 \"/>\n<path clip-path=\"url(#clip113)\" d=\"M720.247 684.803 L720.806 684.803 L721.365 684.803 L721.924 684.803 L722.484 684.803 L723.043 684.803 L723.602 684.803 L724.161 684.803 L724.721 684.803 L725.28 684.803 L725.839 684.803 L726.398 684.803 L726.958 684.803 L727.517 684.803 L728.076 684.803 L728.635 684.803 L729.195 684.803 L729.754 684.803 L730.313 684.803 L730.872 684.803 L731.432 684.803 L731.991 684.803 L732.55 684.803 L733.109 684.803 L733.669 684.803 L734.228 684.803 L734.787 684.803 L735.346 684.803 L735.906 684.803 L736.465 684.803 L737.024 684.803 L737.583 684.803 L738.143 684.803 L738.702 684.803 L739.261 684.803 L739.82 684.803 L740.38 684.803 L740.939 684.803 L741.498 684.803 L742.057 684.803 L742.617 684.803 L743.176 684.803 L743.735 684.803 L744.294 684.803 L744.854 684.803 L745.413 684.803 L745.972 684.803 L746.531 684.803 L747.091 684.803 L747.65 684.803 L748.209 684.803 L748.768 684.803 L749.328 684.803 L749.887 684.803 L750.446 684.803 L751.005 684.803 L751.565 684.803 L752.124 684.803 L752.683 684.803 L753.242 684.803 L753.802 684.803 L754.361 684.803 L754.92 684.803 L755.479 684.803 L756.039 684.803 L756.598 684.803 L757.157 684.803 L757.716 684.803 L758.276 684.803 L758.835 684.803 L759.394 684.803 L759.953 684.803 L760.513 684.803 L761.072 684.803 L761.631 684.803 L762.19 684.803 L762.75 684.803 L763.309 684.803 L763.868 684.803 L764.427 684.803 L764.987 684.803 L765.546 684.803 L766.105 684.803 L766.664 684.803 L767.224 684.803 L767.783 684.803 L768.342 684.803 L768.901 684.803 L769.461 684.803 L770.02 684.803 L770.579 684.803 L771.138 684.803 L771.698 684.803 L772.257 684.803 L772.816 684.803 L773.375 684.803 L773.935 684.803 L774.494 684.803 L775.053 684.803 L775.612 684.803 L776.172 684.803 L776.731 684.803 L777.29 684.803 L777.849 684.803 L778.409 684.803 L778.968 684.803 L779.527 684.803 L780.086 684.803 L780.646 684.803 L781.205 684.803 L781.764 684.803 L782.323 684.803 L782.883 684.803 L783.442 684.803 L784.001 684.803 L784.56 684.803 L785.12 684.803 L785.679 684.803 L786.238 684.803 L786.797 684.803 L787.357 684.803 L787.916 684.803 L788.475 684.803 L789.034 684.803 L789.594 684.803 L790.153 684.803 L790.712 684.803 L791.271 684.803 L791.831 684.803 L792.39 684.803 L792.949 684.803 L793.508 684.803 L794.068 684.803 L794.627 684.803 L795.186 684.803 L795.745 684.803 L796.305 684.803 L796.864 684.803 L797.423 684.803 L797.982 684.803 L798.542 684.803 L799.101 684.803 L799.66 684.803 L800.219 684.803 L800.779 684.803 L801.338 684.803 L801.897 684.803 L802.456 684.803 L803.016 684.803 L803.575 684.803 L804.134 684.803 L804.693 684.803 L805.253 684.803 L805.812 684.803 L806.371 684.803 L806.931 684.803 L807.49 684.803 L808.049 684.803 L808.608 684.803 L809.168 684.803 L809.727 684.803 L810.286 684.803 L810.845 684.803 L811.405 684.803 L811.964 684.803 L812.523 684.803 L813.082 684.803 L813.642 684.803 L814.201 684.803 L814.76 684.803 L815.319 684.803 L815.879 684.803 L816.438 684.803 L816.997 684.803 L817.556 684.803 L818.116 684.803 L818.675 684.803 L819.234 684.803 L819.793 684.803 L820.353 684.803 L820.912 684.803 L821.471 684.803 L822.03 684.803 L822.59 684.803 L823.149 684.803 L823.708 684.803 L824.267 684.803 L824.827 684.803 L825.386 684.803 L825.945 684.803 L826.504 684.803 L827.064 684.803 L827.623 684.803 L828.182 684.803 L828.741 684.803 L829.301 684.803 L829.86 684.803 L830.419 684.803 L830.978 684.803 L831.538 684.803 L832.097 684.803 L832.656 684.803 L833.215 684.803 L833.775 684.803 L834.334 684.803 L834.893 684.803 L835.452 684.803 L836.012 684.803 L836.571 684.803 L837.13 684.803 L837.689 684.803 L838.249 684.803 L838.808 684.803 L839.367 684.803 L839.926 684.803 L840.486 684.803 L841.045 684.803 L841.604 684.803 L842.163 684.803 L842.723 684.803 L843.282 684.803 L843.841 684.803 L844.4 684.803 L844.96 684.803 L845.519 684.803 L846.078 684.803 L846.637 684.803 L847.197 684.803 L847.756 684.803 L848.315 684.803 L848.874 684.803 L849.434 684.803 L849.993 684.803 L850.552 684.803 L851.111 684.803 L851.671 684.803 L852.23 684.803 L852.789 684.803 L853.348 684.803 L853.908 684.803 L854.467 684.803 L855.026 684.803 L855.585 684.803 L856.145 684.803 L856.704 684.803 L857.263 684.803 L857.822 684.803 L858.382 684.803 L858.941 684.803 L859.5 684.803 L860.059 684.803 L860.619 684.803 L861.178 684.803 L861.737 684.803 L862.296 684.803 L862.856 684.803 L863.415 684.803 L863.974 684.803 L864.533 684.803 L865.093 684.803 L865.652 684.803 L866.211 684.803 L866.77 684.803 L867.33 684.803 L867.889 684.803 L868.448 684.803 L869.007 684.803 L869.567 684.803 L870.126 684.803 L870.685 684.803 L871.244 684.803 L871.804 684.803 L872.363 684.803 L872.922 684.803 L873.481 684.803 L874.041 684.803 L874.6 684.803 L875.159 684.803 L875.718 684.803 L876.278 684.803 L876.837 684.803 L877.396 684.803 L877.955 684.803 L878.515 684.803 L879.074 684.803 L879.633 684.803 L880.192 684.803 L880.752 684.803 L881.311 684.803 L881.87 684.803 L882.429 684.803 L882.989 684.803 L883.548 684.803 L884.107 684.803 L884.666 684.803 L885.226 684.803 L885.785 684.803 L886.344 684.803 L886.903 684.803 L887.463 684.803 L888.022 684.803 L888.581 684.803 L889.14 684.803 L889.7 684.803 L890.259 684.803 L890.818 684.803 L891.377 684.803 L891.937 684.803 L892.496 684.803 L893.055 684.803 L893.614 684.803 L894.174 684.803 L894.733 684.803 L895.292 684.803 L895.851 684.803 L896.411 684.803 L896.97 684.803 L897.529 684.803 L898.088 684.803 L898.648 684.803 L899.207 684.803 L899.766 684.803 L900.325 684.803 L900.885 684.803 L901.444 684.803 L902.003 684.803 L902.562 684.803 L903.122 684.803 L903.681 684.803 L904.24 684.803 L904.799 684.803 L905.359 684.803 L905.918 684.803 L906.477 684.803 L907.036 684.803 L907.596 684.803 L908.155 684.803 L908.714 684.803 L909.273 684.803 L909.833 684.803 L910.392 684.803 L910.951 684.803 L911.51 684.803 L912.07 684.803 L912.629 684.803 L913.188 684.803 L913.747 684.803 L914.307 684.803 L914.866 684.803 L915.425 684.803 L915.984 684.803 L916.544 684.803 L917.103 684.803 L917.662 684.803 L918.221 684.803 L918.781 684.803 L919.34 684.803 L919.899 684.803 L920.458 684.803 L921.018 684.803 L921.577 684.803 L922.136 684.803 L922.695 684.803 L923.255 684.803 L923.814 684.803 L924.373 684.803 L924.932 684.803 L925.492 684.803 L926.051 684.803 L926.61 684.803 L927.169 684.803 L927.729 684.803 L928.288 684.803 L928.847 684.803 L929.406 684.803 L929.966 684.803 L930.525 684.803 L931.084 684.803 L931.644 684.803 L932.203 684.803 L932.762 684.803 L933.321 684.803 L933.881 684.803 L934.44 684.803 L934.999 684.803 L935.558 684.803 L936.118 684.803 L936.677 684.803 L937.236 684.803 L937.795 684.803 L938.355 684.803 L938.914 684.803 L939.473 684.803 L940.032 684.803 L940.592 684.803 L941.151 684.803 L941.71 684.803 L942.269 684.803 L942.829 684.803 L943.388 684.803 L943.947 684.803 L944.506 684.803 L945.066 684.803 L945.625 684.803 L946.184 684.803 L946.743 684.803 L947.303 684.803 L947.862 684.803 L948.421 684.803 L948.98 684.803 L949.54 684.803 L950.099 684.803 L950.658 684.803 L951.217 684.803 L951.777 684.803 L952.336 684.803 L952.895 684.803 L953.454 684.803 L954.014 684.803 L954.573 684.803 L955.132 684.803 L955.691 684.803 L956.251 684.803 L956.81 684.803 L957.369 684.803 L957.928 684.803 L958.488 684.803 L959.047 684.803 L959.606 684.803 L960.165 684.803 L960.725 684.803 L961.284 684.803 L961.843 684.803 L962.402 684.803 L962.962 684.803 L963.521 684.803 L964.08 684.803 L964.639 684.803 L965.199 684.803 L965.758 684.803 L966.317 684.803 L966.876 684.803 L967.436 684.803 L967.995 684.803 L968.554 684.803 L969.113 684.803 L969.673 684.803 L970.232 684.803 L970.791 684.803 L971.35 684.803 L971.91 684.803 L972.469 684.803 L973.028 684.803 L973.587 684.803 L974.147 684.803 L974.706 684.803 L975.265 684.803 L975.824 684.803 L976.384 684.803 L976.943 684.803 L977.502 684.803 L978.061 684.803 L978.621 684.803 L979.18 684.803 L979.739 684.803 L980.298 684.803 L980.858 684.803 L981.417 684.803 L981.976 684.803 L982.535 684.803 L983.095 684.803 L983.654 684.803 L984.213 684.803 L984.772 684.803 L985.332 684.803 L985.891 684.803 L986.45 684.803 L987.009 684.803 L987.569 684.803 L988.128 684.803 L988.687 684.803 L989.246 684.803 L989.806 684.803 L990.365 684.803 L990.924 684.803 L991.483 684.803 L992.043 684.803 L992.602 684.803 L993.161 684.803 L993.72 684.803 L994.28 684.803 L994.839 684.803 L995.398 684.803 L995.957 684.803 L996.517 684.803 L997.076 684.803 L997.635 684.803 L998.194 684.803 L998.754 684.803 L999.313 684.803 L999.872 684.803 L1000.43 684.803 L1000.99 684.803 L1001.55 684.803 L1002.11 684.803 L1002.67 684.803 L1003.23 684.803 L1003.79 684.803 L1004.35 684.803 L1004.91 684.803 L1005.46 684.803 L1006.02 684.803 L1006.58 684.803 L1007.14 684.803 L1007.7 684.803 L1008.26 684.803 L1008.82 684.803 L1009.38 684.803 L1009.94 684.803 L1010.5 684.803 L1011.06 684.803 L1011.62 684.803 L1012.18 684.803 L1012.73 684.803 L1013.29 684.803 L1013.85 684.803 L1014.41 684.803 L1014.97 684.803 L1015.53 684.803 L1016.09 684.803 L1016.65 684.803 L1017.21 684.803 L1017.77 684.803 L1018.33 684.803 L1018.89 684.803 L1019.45 684.803 L1020.01 684.803 L1020.56 684.803 L1021.12 684.803 L1021.68 684.803 L1022.24 684.803 L1022.8 684.803 L1023.36 684.803 L1023.92 684.803 L1024.48 684.803 L1025.04 684.803 L1025.6 684.803 L1026.16 684.803 L1026.72 684.803 L1027.28 684.803 L1027.83 684.803 L1028.39 684.803 L1028.95 684.803 L1029.51 684.803 L1030.07 684.803 L1030.63 684.803 L1031.19 684.803 L1031.75 684.803 L1032.31 684.803 L1032.87 684.803 L1033.43 684.803 L1033.99 684.803 L1034.55 684.803 L1035.1 684.803 L1035.66 684.803 L1036.22 684.803 L1036.78 684.803 L1037.34 684.803 L1037.9 684.803 L1038.46 684.803 L1039.02 684.803 L1039.58 684.803 L1040.14 684.803 L1040.7 684.803 L1041.26 684.803 L1041.82 684.803 L1042.38 684.803 L1042.93 684.803 L1043.49 684.803 L1044.05 684.803 L1044.61 684.803 L1045.17 684.803 L1045.73 684.803 L1046.29 684.803 L1046.85 684.803 L1047.41 684.803 L1047.97 684.803 L1048.53 684.803 L1049.09 684.803 L1049.65 684.803 L1050.2 684.803 L1050.76 684.803 L1051.32 684.803 L1051.88 684.803 L1052.44 684.803 L1053 684.803 L1053.56 684.803 L1054.12 684.803 L1054.68 684.803 L1055.24 684.803 L1055.8 684.803 L1056.36 684.803 L1056.92 684.803 L1057.48 684.803 L1058.03 684.803 L1058.59 684.803 L1059.15 684.803 L1059.71 684.803 L1060.27 684.803 L1060.83 684.803 L1061.39 684.803 L1061.95 684.803 L1062.51 684.803 L1063.07 684.803 L1063.63 684.803 L1064.19 684.803 L1064.75 684.803 L1065.3 684.803 L1065.86 684.803 L1066.42 684.803 L1066.98 684.803 L1067.54 684.803 L1068.1 684.803 L1068.66 684.803 L1069.22 684.803 L1069.78 684.803 L1070.34 684.803 L1070.9 684.803 L1071.46 684.803 L1072.02 684.803 L1072.57 684.803 L1073.13 684.803 L1073.69 684.803 L1074.25 684.803 L1074.81 684.803 L1075.37 684.803 L1075.93 684.803 L1076.49 684.803 L1077.05 684.803 L1077.61 684.803 L1078.17 684.803 L1078.73 684.803 L1079.29 684.803 L1079.85 684.803 L1080.4 684.803 L1080.96 684.803 L1081.52 684.803 L1082.08 684.803 L1082.64 684.803 L1083.2 684.803 L1083.76 684.803 L1084.32 684.803 L1084.88 684.803 L1085.44 684.803 L1086 684.803 L1086.56 684.803 L1087.12 684.803 L1087.67 684.803 L1088.23 684.803 L1088.79 684.803 L1089.35 684.803 L1089.91 684.803 L1090.47 684.803 L1091.03 684.803 L1091.59 684.803 L1092.15 684.803 L1092.71 684.803 L1093.27 684.803 L1093.83 684.803 L1094.39 684.803 L1094.94 684.803 L1095.5 684.803 L1096.06 684.803 L1096.62 684.803 L1097.18 684.803 L1097.74 684.803 L1098.3 684.803 L1098.86 684.803 L1099.42 684.803 L1099.98 684.803 L1100.54 684.803 L1101.1 684.803 L1101.66 684.803 L1102.22 684.803 L1102.77 684.803 L1103.33 684.803 L1103.89 684.803 L1104.45 684.803 L1105.01 684.803 L1105.57 684.803 L1106.13 684.803 L1106.69 684.803 L1107.25 684.803 L1107.81 684.803 L1108.37 684.803 L1108.93 684.803 L1109.49 684.803 L1110.04 684.803 L1110.6 684.803 L1111.16 684.803 L1111.72 684.803 L1112.28 684.803 L1112.84 684.803 L1113.4 684.803 L1113.96 684.803 L1114.52 684.803 L1115.08 684.803 L1115.64 684.803 L1116.2 684.803 L1116.76 684.803 L1117.31 684.803 L1117.87 684.803 L1118.43 684.803 L1118.99 684.803 L1119.55 684.803 L1120.11 684.803 L1120.67 684.803 L1121.23 684.803 L1121.79 684.803 L1122.35 684.803 L1122.91 684.803 L1123.47 684.803 L1124.03 684.803 L1124.59 684.803 L1125.14 684.803 L1125.7 684.803 L1126.26 684.803 L1126.82 684.803 L1127.38 684.803 L1127.94 684.803 L1128.5 684.803 L1129.06 684.803 L1129.62 684.803 L1130.18 684.803 L1130.74 684.803 L1131.3 684.803 L1131.86 684.803 L1132.41 684.803 L1132.97 684.803 L1133.53 684.803 L1134.09 684.803 L1134.65 684.803 L1135.21 684.803 L1135.77 684.803 L1136.33 684.803 L1136.89 684.803 L1137.45 684.803 L1138.01 684.803 L1138.57 684.803 L1139.13 684.803 L1139.68 684.803 L1140.24 684.803 L1140.8 684.803 L1141.36 684.803 L1141.92 684.803 L1142.48 684.803 L1143.04 684.803 L1143.6 684.803 L1144.16 684.803 L1144.72 684.803 L1145.28 684.803 L1145.84 684.803 L1146.4 684.803 L1146.96 684.803 L1147.51 684.803 L1148.07 684.803 L1148.63 684.803 L1149.19 684.803 L1149.75 684.803 L1150.31 684.803 L1150.87 684.803 L1151.43 684.803 L1151.99 684.803 L1152.55 684.803 L1153.11 684.803 L1153.67 684.803 L1154.23 684.803 L1154.78 684.803 L1155.34 684.803 L1155.9 684.803 L1156.46 684.803 L1157.02 684.803 L1157.58 684.803 L1158.14 684.803 L1158.7 684.803 L1159.26 684.803 L1159.82 684.803 L1160.38 684.803 L1160.94 684.803 L1161.5 684.803 L1162.05 684.803 L1162.61 684.803 L1163.17 684.803 L1163.73 684.803 L1164.29 684.803 L1164.85 684.803 L1165.41 684.803 L1165.97 684.803 L1166.53 684.803 L1167.09 684.803 L1167.65 684.803 L1168.21 684.803 L1168.77 684.803 L1169.33 684.803 L1169.88 684.803 L1170.44 684.803 L1171 684.803 L1171.56 684.803 L1172.12 684.803 L1172.68 684.803 L1173.24 684.803 L1173.8 684.803 L1174.36 684.803 L1174.92 684.803 L1175.48 684.803 L1176.04 684.803 L1176.6 684.803 L1177.15 684.803 L1177.71 684.803 L1178.27 684.803 L1178.83 684.803 L1179.39 684.803 L1179.95 684.803 L1180.51 684.803 L1181.07 684.803 L1181.63 684.803 L1182.19 684.803 L1182.75 684.803 L1183.31 684.803 L1183.87 684.803 L1184.43 684.803 L1184.98 684.803 L1185.54 684.803 L1186.1 684.803 L1186.66 684.803 L1187.22 684.803 L1187.78 684.803 L1188.34 684.803 L1188.9 684.803 L1189.46 684.803 L1190.02 684.803 L1190.58 684.803 L1191.14 684.803 L1191.7 684.803 L1192.25 684.803 L1192.81 684.803 L1193.37 684.803 L1193.93 684.803 L1194.49 684.803 L1195.05 684.803 L1195.61 684.803 L1196.17 684.803 L1196.73 684.803 L1197.29 684.803 L1197.85 684.803 L1198.41 684.803 L1198.97 684.803 L1199.52 684.803 L1200.08 684.803 L1200.64 684.803 L1201.2 684.803 L1201.76 684.803 L1202.32 684.803 L1202.88 684.803 L1203.44 684.803 L1204 684.803 L1204.56 684.803 L1205.12 684.803 L1205.68 684.803 L1206.24 684.803 L1206.8 684.803 L1207.35 684.803 L1207.91 684.803 L1208.47 684.803 L1209.03 684.803 L1209.59 684.803 L1210.15 684.803 L1210.71 684.803 L1211.27 684.803 L1211.83 684.803 L1212.39 684.803 L1212.95 684.803 L1213.51 684.803 L1214.07 684.803 L1214.62 684.803 L1215.18 684.803 L1215.74 684.803 L1216.3 684.803 L1216.86 684.803 L1217.42 684.803 L1217.98 684.803 L1218.54 684.803 L1219.1 684.803 L1219.66 684.803 L1220.22 684.803 L1220.78 684.803 L1221.34 684.803 L1221.89 684.803 L1222.45 684.803 L1223.01 684.803 L1223.57 684.803 L1224.13 684.803 L1224.69 684.803 L1225.25 684.803 L1225.81 684.803 L1226.37 684.803 L1226.93 684.803 L1227.49 684.803 L1228.05 684.803 L1228.61 684.803 L1229.17 684.803 L1229.72 684.803 L1230.28 684.803 L1230.84 684.803 L1231.4 684.803 L1231.96 684.803 L1232.52 684.803 L1233.08 684.803 L1233.64 684.803 L1234.2 684.803 L1234.76 684.803 L1235.32 684.803 L1235.88 684.803 L1236.44 684.803 L1236.99 684.803 L1237.55 684.803 L1238.11 684.803 L1238.67 684.803 L1239.23 684.803 L1239.79 684.803 L1240.35 684.803 L1240.91 684.803 L1241.47 684.803 L1242.03 684.803 L1242.59 684.803 L1243.15 684.803 L1243.71 684.803 L1244.26 684.803 L1244.82 684.803 L1245.38 684.803 L1245.94 684.803 L1246.5 684.803 L1247.06 684.803 L1247.62 684.803 L1248.18 684.803 L1248.74 684.803 L1249.3 684.803 L1249.86 684.803 L1250.42 684.803 L1250.98 684.803 L1251.54 684.803 L1252.09 684.803 L1252.65 684.803 L1253.21 684.803 L1253.77 684.803 L1254.33 684.803 L1254.89 684.803 L1255.45 684.803 L1256.01 684.803 L1256.57 684.803 L1257.13 684.803 L1257.69 684.803 L1258.25 684.803 L1258.81 684.803 L1259.36 684.803 L1259.92 684.803 L1260.48 684.803 L1261.04 684.803 L1261.6 684.803 L1262.16 684.803 L1262.72 684.803 L1263.28 684.803 L1263.84 684.803 L1264.4 684.803 L1264.96 684.803 L1265.52 684.803 L1266.08 684.803 L1266.63 684.803 L1267.19 684.803 L1267.75 684.803 L1268.31 684.803 L1268.87 684.803 L1269.43 684.803 L1269.99 684.803 L1270.55 684.803 L1271.11 684.803 L1271.67 684.803 L1272.23 684.803 L1272.79 684.803 L1273.35 684.803 L1273.91 684.803 L1274.46 684.803 L1275.02 684.803 L1275.58 684.803 L1276.14 684.803 L1276.7 684.803 L1277.26 684.803 L1277.82 684.803 L1278.38 684.803 L1278.94 684.803 L1279.5 684.803 L1280.06 684.803 L1280.62 684.803 L1281.18 684.803 L1281.73 684.803 L1282.29 684.803 L1282.85 684.803 L1283.41 684.803 L1283.97 684.803 L1284.53 684.803 L1285.09 684.803 L1285.65 684.803 L1286.21 684.803 L1286.77 684.803 L1287.33 684.803 L1287.89 684.803 L1288.45 684.803 L1289 684.803 L1289.56 684.803 L1290.12 684.803 L1290.68 684.803 L1291.24 684.803 L1291.8 684.803 L1292.36 684.803 L1292.92 684.803 L1293.48 684.803 L1294.04 684.803 L1294.6 684.803 L1295.16 684.803 L1295.72 684.803 L1296.28 684.803 L1296.83 684.803 L1297.39 684.803 L1297.95 684.803 L1298.51 684.803 L1299.07 684.803 L1299.63 684.803 L1300.19 684.803 L1300.75 684.803 L1301.31 684.803 L1301.87 684.803 L1302.43 684.803 L1302.99 684.803 L1303.55 684.803 L1304.1 684.803 L1304.66 684.803 L1305.22 684.803 L1305.78 684.803 L1306.34 684.803 L1306.9 684.803 L1307.46 684.803 L1308.02 684.803 L1308.58 684.803 L1309.14 684.803 L1309.7 684.803 L1310.26 684.803 L1310.82 684.803 L1311.38 684.803 L1311.93 684.803 L1312.49 684.803 L1313.05 684.803 L1313.61 684.803 L1314.17 684.803 L1314.73 684.803 L1315.29 684.803 L1315.85 684.803 L1316.41 684.803 L1316.97 684.803 L1317.53 684.803 L1318.09 684.803 L1318.65 684.803 L1319.2 684.803 L1319.76 684.803 L1320.32 684.803 L1320.88 684.803 L1321.44 684.803 L1322 684.803 L1322.56 684.803 L1323.12 684.803 L1323.68 684.803 L1324.24 684.803 L1324.8 684.803 L1325.36 684.803 L1325.92 684.803 L1326.47 684.803 L1327.03 684.803 L1327.59 684.803 L1328.15 684.803 L1328.71 684.803 L1329.27 684.803 L1329.83 684.803 L1330.39 684.803 L1330.95 684.803 L1331.51 684.803 L1332.07 684.803 L1332.63 684.803 L1333.19 684.803 L1333.75 684.803 L1334.3 684.803 L1334.86 684.803 L1335.42 684.803 L1335.98 684.803 L1336.54 684.803 L1337.1 684.803 L1337.66 684.803 L1338.22 684.803 L1338.78 684.803 L1339.34 684.803 L1339.9 684.803 L1340.46 684.803 L1341.02 684.803 L1341.57 684.803 L1342.13 684.803 L1342.69 684.803 L1343.25 684.803 L1343.81 684.803 L1344.37 684.803 L1344.93 684.803 L1345.49 684.803 L1346.05 684.803 L1346.61 684.803 L1347.17 684.803 L1347.73 684.803 L1348.29 684.803 L1348.84 684.803 L1349.4 684.803 L1349.96 684.803 L1350.52 684.803 L1351.08 684.803 L1351.64 684.803 L1352.2 684.803 L1352.76 684.803 L1353.32 684.803 L1353.88 684.803 L1354.44 684.803 L1355 684.803 L1355.56 684.803 L1356.12 684.803 L1356.67 684.803 L1357.23 684.803 L1357.79 684.803 L1358.35 684.803 L1358.91 684.803 L1359.47 684.803 L1360.03 684.803 L1360.59 684.803 L1361.15 684.803 L1361.71 684.803 L1362.27 684.803 L1362.83 684.803 L1363.39 684.803 L1363.94 684.803 L1364.5 684.803 L1365.06 684.803 L1365.62 684.803 L1366.18 684.803 L1366.74 684.803 L1367.3 684.803 L1367.86 684.803 L1368.42 684.803 L1368.98 684.803 L1369.54 684.803 L1370.1 684.803 L1370.66 684.803 L1371.21 684.803 L1371.77 684.803 L1372.33 684.803 L1372.89 684.803 L1373.45 684.803 L1374.01 684.803 L1374.57 684.803 L1375.13 684.803 L1375.69 684.803 L1376.25 684.803 L1376.81 684.803 L1377.37 684.803 L1377.93 684.803 L1378.49 684.803 L1379.04 684.803 L1379.6 684.803 L1380.16 684.803 L1380.72 684.803 L1381.28 684.803 L1381.84 684.803 L1382.4 684.803 L1382.96 684.803 L1383.52 684.803 L1384.08 684.803 L1384.64 684.803 L1385.2 684.803 L1385.76 684.803 L1386.31 684.803 L1386.87 684.803 L1387.43 684.803 L1387.99 684.803 L1388.55 684.803 L1389.11 684.803 L1389.67 684.803 L1390.23 684.803 L1390.79 684.803 L1391.35 684.803 L1391.91 684.803 L1392.47 684.803 L1393.03 684.803 L1393.58 684.803 L1394.14 684.803 L1394.7 684.803 L1395.26 684.803 L1395.82 684.803 L1396.38 684.803 L1396.94 684.803 L1397.5 684.803 L1398.06 684.803 L1398.62 684.803 L1399.18 684.803 L1399.74 684.803 L1400.3 684.803 L1400.86 684.803 L1401.41 684.803 L1401.97 684.803 L1402.53 684.803 L1403.09 684.803 L1403.65 684.803 L1404.21 684.803 L1404.77 684.803 L1405.33 684.803 L1405.89 684.803 L1406.45 684.803 L1407.01 684.803 L1407.57 684.803 L1408.13 684.803 L1408.68 684.803 L1409.24 684.803 L1409.8 684.803 L1410.36 684.803 L1410.92 684.803 L1411.48 684.803 L1412.04 684.803 L1412.6 684.803 L1413.16 684.803 L1413.72 684.803 L1414.28 684.803 L1414.84 684.803 L1415.4 684.803 L1415.95 684.803 L1416.51 684.803 L1417.07 684.803 L1417.63 684.803 L1418.19 684.803 L1418.75 684.803 L1419.31 684.803 L1419.87 684.803 L1420.43 684.803 L1420.99 684.803 L1421.55 684.803 L1422.11 684.803 L1422.67 684.803 L1423.23 684.803 L1423.78 684.803 L1424.34 684.803 L1424.9 684.803 L1425.46 684.803 L1426.02 684.803 L1426.58 684.803 L1427.14 684.803 L1427.7 684.803 L1428.26 684.803 L1428.82 684.803 L1429.38 684.803 L1429.94 684.803 L1430.5 684.803 L1431.05 684.803 L1431.61 684.803 L1432.17 684.803 L1432.73 684.803 L1433.29 684.803 L1433.85 684.803 L1434.41 684.803 L1434.97 684.803 L1435.53 684.803 L1436.09 684.803 L1436.65 684.803 L1437.21 684.803 L1437.77 684.803 L1438.33 684.803 L1438.88 684.803 L1439.44 684.803 L1440 684.803 L1440.56 684.803 L1441.12 684.803 L1441.68 684.803 L1442.24 684.803 L1442.8 684.803 L1443.36 684.803 L1443.92 684.803 L1444.48 684.803 L1445.04 684.803 L1445.6 684.803 L1446.15 684.803 L1446.71 684.803 L1447.27 684.803 L1447.83 684.803 L1448.39 684.803 L1448.95 684.803 L1449.51 684.803 L1450.07 684.803 L1450.63 684.803 L1451.19 684.803 L1451.75 684.803 L1452.31 684.803 L1452.87 684.803 L1453.42 684.803 L1453.98 684.803 L1454.54 684.803 L1455.1 684.803 L1455.66 684.803 L1456.22 684.803 L1456.78 684.803 L1457.34 684.803 L1457.9 684.803 L1458.46 684.803 L1459.02 684.803 L1459.58 684.803 L1460.14 684.803 L1460.7 684.803 L1461.25 684.803 L1461.81 684.803 L1462.37 684.803 L1462.93 684.803 L1463.49 684.803 L1464.05 684.803 L1464.61 684.803 L1465.17 684.803 L1465.73 684.803 L1466.29 684.803 L1466.85 684.803 L1467.41 684.803 L1467.97 684.803 L1468.52 684.803 L1469.08 684.803 L1469.64 684.803 L1470.2 684.803 L1470.76 684.803 L1471.32 684.803 L1471.88 684.803 L1472.44 684.803 L1473 684.803 L1473.56 684.803 L1474.12 684.803 L1474.68 684.803 L1475.24 684.803 L1475.79 684.803 L1476.35 684.803 L1476.91 684.803 L1477.47 684.803 L1478.03 684.803 L1478.59 684.803 L1479.15 684.803 L1479.71 684.803 L1480.27 684.803 L1480.83 684.803 L1481.39 684.803 L1481.95 684.803 L1482.51 684.803 L1483.07 684.803 L1483.62 684.803 L1484.18 684.803 L1484.74 684.803 L1485.3 684.803 L1485.86 684.803 L1486.42 684.803 L1486.98 684.803 L1487.54 684.803 L1488.1 684.803 L1488.66 684.803 L1489.22 684.803 L1489.78 684.803 L1490.34 684.803 L1490.89 684.803 L1491.45 684.803 L1492.01 684.803 L1492.57 684.803 L1493.13 684.803 L1493.69 684.803 L1494.25 684.803 L1494.81 684.803 L1495.37 684.803 L1495.93 684.803 L1496.49 684.803 L1497.05 684.803 L1497.61 684.803 L1498.16 684.803 L1498.72 684.803 L1499.28 684.803 L1499.84 684.803 L1500.4 684.803 L1500.96 684.803 L1501.52 684.803 L1502.08 684.803 L1502.64 684.803 L1503.2 684.803 L1503.76 684.803 L1504.32 684.803 L1504.88 684.803 L1505.44 684.803 L1505.99 684.803 L1506.55 684.803 L1507.11 684.803 L1507.67 684.803 L1508.23 684.803 L1508.79 684.803 L1509.35 684.803 L1509.91 684.803 L1510.47 684.803 L1511.03 684.803 L1511.59 684.803 L1512.15 684.803 L1512.71 684.803 L1513.26 684.803 L1513.82 684.803 L1514.38 684.803 L1514.94 684.803 L1515.5 684.803 L1516.06 684.803 L1516.62 684.803 L1517.18 684.803 L1517.74 684.803 L1518.3 684.803 L1518.86 684.803 L1519.42 684.803 L1519.98 684.803 L1520.53 684.803 L1521.09 684.803 L1521.65 684.803 L1522.21 684.803 L1522.77 684.803 L1523.33 684.803 L1523.89 684.803 L1524.45 684.803 L1525.01 684.803 L1525.57 684.803 L1526.13 684.803 L1526.69 684.803 L1527.25 684.803 L1527.81 684.803 L1528.36 684.803 L1528.92 684.803 L1529.48 684.803 L1530.04 684.803 L1530.6 684.803 L1531.16 684.803 L1531.72 684.803 L1532.28 684.803 L1532.84 684.803 L1533.4 684.803 L1533.96 684.803 L1534.52 684.803 L1535.08 684.803 L1535.63 684.803 L1536.19 684.803 L1536.75 684.803 L1537.31 684.803 L1537.87 684.803 L1538.43 684.803 L1538.99 684.803 L1539.55 684.803 L1540.11 684.803 L1540.67 684.803 L1541.23 684.803 L1541.79 684.803 L1542.35 684.803 L1542.9 684.803 L1543.46 684.803 L1544.02 684.803 L1544.58 684.803 L1545.14 684.803 L1545.7 684.803 L1546.26 684.803 L1546.82 684.803 L1547.38 684.803 L1547.94 684.803 L1548.5 684.803 L1549.06 684.803 L1549.62 684.803 L1550.18 684.803 L1550.73 684.803 L1551.29 684.803 L1551.85 684.803 L1552.41 684.803 L1552.97 684.803 L1553.53 684.803 L1554.09 684.803 L1554.65 684.803 L1555.21 684.803 L1555.77 684.803 L1556.33 684.803 L1556.89 684.803 L1557.45 684.803 L1558 684.803 L1558.56 684.803 L1559.12 684.803 L1559.68 684.803 L1560.24 684.803 L1560.8 684.803 L1561.36 684.803 L1561.92 684.803 L1562.48 684.803 L1563.04 684.803 L1563.6 684.803 L1564.16 684.803 L1564.72 684.803 L1565.28 684.803 L1565.83 684.803 L1566.39 684.803 L1566.95 684.803 L1567.51 684.803 L1568.07 684.803 L1568.63 684.803 L1569.19 684.803 L1569.75 684.803 L1570.31 684.803 L1570.87 684.803 L1571.43 684.803 L1571.99 684.803 L1572.55 684.803 L1573.1 684.803 L1573.66 684.803 L1574.22 684.803 L1574.78 684.803 L1575.34 684.803 L1575.9 684.803 L1576.46 684.803 L1577.02 684.803 L1577.58 684.803 L1578.14 684.803 L1578.7 684.803 L1579.26 684.803 L1579.82 684.803 L1580.37 684.803 L1580.93 684.803 L1581.49 684.803 L1582.05 684.803 L1582.61 684.803 L1583.17 684.803 L1583.73 684.803 L1584.29 684.803 L1584.85 684.803 L1585.41 684.803 L1585.97 684.803 L1586.53 684.803 L1587.09 684.803 L1587.65 684.803 L1588.2 684.803 L1588.76 684.803 L1589.32 684.803 L1589.88 684.803 L1590.44 684.803 L1591 684.803 L1591.56 684.803 L1592.12 684.803 L1592.68 684.803 L1593.24 684.803 L1593.8 684.803 L1594.36 684.803 L1594.92 684.803 L1595.47 684.803 L1596.03 684.803 L1596.59 684.803 L1597.15 684.803 L1597.71 684.803 L1598.27 684.803 L1598.83 684.803 L1599.39 684.803 L1599.95 684.803 L1600.51 684.803 L1601.07 684.803 L1601.63 684.803 L1602.19 684.803 L1602.74 684.803 L1603.3 684.803 L1603.86 684.803 L1604.42 684.803 L1604.98 684.803 L1605.54 684.803 L1606.1 684.803 L1606.66 684.803 L1607.22 684.803 L1607.78 684.803 L1608.34 684.803 L1608.9 684.803 L1609.46 684.803 L1610.02 684.803 L1610.57 684.803 L1611.13 684.803 L1611.69 684.803 L1612.25 684.803 L1612.81 684.803 L1613.37 684.803 L1613.93 684.803 L1614.49 684.803 L1615.05 684.803 L1615.61 684.803 L1616.17 684.803 L1616.73 684.803 L1617.29 684.803 L1617.84 684.803 L1618.4 684.803 L1618.96 684.803 L1619.52 684.803 L1620.08 684.803 L1620.64 684.803 L1621.2 684.803 L1621.76 684.803 L1622.32 684.803 L1622.88 684.803 L1623.44 684.803 L1624 684.803 L1624.56 684.803 L1625.11 684.803 L1625.67 684.803 L1626.23 684.803 L1626.79 684.803 L1627.35 684.803 L1627.91 684.803 L1628.47 684.803 L1629.03 684.803 L1629.59 684.803 L1630.15 684.803 L1630.71 684.803 L1631.27 684.803 L1631.83 684.803 L1632.39 684.803 L1632.94 684.803 L1633.5 684.803 L1634.06 684.803 L1634.62 684.803 L1635.18 684.803 L1635.74 684.803 L1636.3 684.803 L1636.86 684.803 L1637.42 684.803 L1637.98 684.803 L1638.54 684.803 L1639.1 684.803 L1639.66 684.803 L1640.21 684.803 L1640.77 684.803 L1641.33 684.803 L1641.89 684.803 L1642.45 684.803 L1643.01 684.803 L1643.57 684.803 L1644.13 684.803 L1644.69 684.803 L1645.25 684.803 L1645.81 684.803 L1646.37 684.803 L1646.93 684.803 L1647.48 684.803 L1648.04 684.803 L1648.6 684.803 L1649.16 684.803 L1649.72 684.803 L1650.28 684.803 L1650.84 684.803 L1651.4 684.803 L1651.96 684.803 L1652.52 684.803 L1653.08 684.803 L1653.64 684.803 L1654.2 684.803 L1654.76 684.803 L1655.31 684.803 L1655.87 684.803 L1656.43 684.803 L1656.99 684.803 L1657.55 684.803 L1658.11 684.803 L1658.67 684.803 L1659.23 684.803 L1659.79 684.803 L1660.35 684.803 L1660.91 684.803 L1661.47 684.803 L1662.03 684.803 L1662.58 684.803 L1663.14 684.803 L1663.7 684.803 L1664.26 684.803 L1664.82 684.803 L1665.38 684.803 L1665.94 684.803 L1666.5 684.803 L1667.06 684.803 L1667.62 684.803 L1668.18 684.803 L1668.74 684.803 L1669.3 684.803 L1669.85 684.803 L1670.41 684.803 L1670.97 684.803 L1671.53 684.803 L1672.09 684.803 L1672.65 684.803 L1673.21 684.803 L1673.77 684.803 L1674.33 684.803 L1674.89 684.803 L1675.45 684.803 L1676.01 684.803 L1676.57 684.803 L1677.13 684.803 L1677.68 684.803 L1678.24 684.803 L1678.8 684.803 L1679.36 684.803 L1679.92 684.803 L1680.48 684.803 L1681.04 684.803 L1681.6 684.803 L1682.16 684.803 L1682.72 684.803 L1683.28 684.803 L1683.84 684.803 L1684.4 684.803 L1684.95 684.803 L1685.51 684.803 L1686.07 684.803 L1686.63 684.803 L1687.19 684.803 L1687.75 684.803 L1688.31 684.803 L1688.87 684.803 L1689.43 684.803 L1689.99 684.803 L1690.55 684.803 L1691.11 684.803 L1691.67 684.803 L1692.23 684.803 L1692.78 684.803 L1693.34 684.803 L1693.9 684.803 L1694.46 684.803 L1695.02 684.803 L1695.58 684.803 L1696.14 684.803 L1696.7 684.803 L1697.26 684.803 L1697.82 684.803 L1698.38 684.803 L1698.94 684.803 L1699.5 684.803 L1700.05 684.803 L1700.61 684.803 L1701.17 684.803 L1701.73 684.803 L1702.29 684.803 L1702.85 684.803 L1703.41 684.803 L1703.97 684.803 L1704.53 684.803 L1705.09 684.803 L1705.65 684.803 L1706.21 684.803 L1706.77 684.803 L1707.32 684.803 L1707.88 684.803 L1708.44 684.803 L1709 684.803 L1709.56 684.803 L1710.12 684.803 L1710.68 684.803 L1711.24 684.803 L1711.8 684.803 L1712.36 684.803 L1712.92 684.803 L1713.48 684.803 L1714.04 684.803 L1714.6 684.803 L1715.15 684.803 L1715.71 684.803 L1716.27 684.803 L1716.83 684.803 L1717.39 684.803 L1717.95 684.803 L1718.51 684.803 L1719.07 684.803 L1719.63 684.803 L1720.19 684.803 L1720.75 684.803 L1721.31 684.803 L1721.87 684.803 L1722.42 684.803 L1722.98 684.803 L1723.54 684.803 L1724.1 684.803 L1724.66 684.803 L1725.22 684.803 L1725.78 684.803 L1726.34 684.803 L1726.9 684.803 L1727.46 684.803 L1728.02 684.803 L1728.58 684.803 L1729.14 684.803 L1729.69 684.803 L1730.25 684.803 L1730.81 684.803 L1731.37 684.803 L1731.93 684.803 L1732.49 684.803 L1733.05 684.803 L1733.61 684.803 L1734.17 684.803 L1734.73 684.803 L1735.29 684.803 L1735.85 684.803 L1736.41 684.803 L1736.97 684.803 L1737.52 684.803 L1738.08 684.803 L1738.64 684.803 L1739.2 684.803 L1739.76 684.803 L1740.32 684.803 L1740.88 684.803 L1741.44 684.803 L1742 684.803 L1742.56 684.803 L1743.12 684.803 L1743.68 684.803 L1744.24 684.803 L1744.79 684.803 L1745.35 684.803 L1745.91 684.803 L1746.47 684.803 L1747.03 684.803 L1747.59 684.803 L1748.15 684.803 L1748.71 684.803 L1749.27 684.803 L1749.83 684.803 L1750.39 684.803 L1750.95 684.803 L1751.51 684.803 L1752.06 684.803 L1752.62 684.803 L1753.18 684.803 L1753.74 684.803 L1754.3 684.803 L1754.86 684.803 L1755.42 684.803 L1755.98 684.803 L1756.54 684.803 L1757.1 684.803 L1757.66 684.803 L1758.22 684.803 L1758.78 684.803 L1759.34 684.803 L1759.89 684.803 L1760.45 684.803 L1761.01 684.803 L1761.57 684.803 L1762.13 684.803 L1762.69 684.803 L1763.25 684.803 L1763.81 684.803 L1764.37 684.803 L1764.93 684.803 L1765.49 684.803 L1766.05 684.803 L1766.61 684.803 L1767.16 684.803 L1767.72 684.803 L1768.28 684.803 L1768.84 684.803 L1769.4 684.803 L1769.96 684.803 L1770.52 684.803 L1771.08 684.803 L1771.64 684.803 L1772.2 684.803 L1772.76 684.803 L1773.32 684.803 L1773.88 684.803 L1774.43 684.803 L1774.99 684.803 L1775.55 684.803 L1776.11 684.803 L1776.67 684.803 L1777.23 684.803 L1777.79 684.803 L1778.35 684.803 L1778.91 684.803 L1779.47 684.803 L1780.03 684.803 L1780.59 684.803 L1781.15 684.803 L1781.71 684.803 L1782.26 684.803 L1782.82 684.803 L1783.38 684.803 L1783.94 684.803 L1784.5 684.803 L1785.06 684.803 L1785.62 684.803 L1786.18 684.803 L1786.74 684.803 L1787.3 684.803 L1787.86 684.803 L1788.42 684.803 L1788.98 684.803 L1789.53 684.803 L1790.09 684.803 L1790.65 684.803 L1791.21 684.803 L1791.77 684.803 L1792.33 684.803 L1792.89 684.803 L1793.45 684.803 L1794.01 684.803 L1794.57 684.803 L1795.13 684.803 L1795.69 684.803 L1796.25 684.803 L1796.8 684.803 L1797.36 684.803 L1797.92 684.803 L1798.48 684.803 L1799.04 684.803 L1799.6 684.803 L1800.16 684.803 L1800.72 684.803 L1801.28 684.803 L1801.84 684.803 L1802.4 684.803 L1802.96 684.803 L1803.52 684.803 L1804.08 684.803 L1804.63 684.803 L1805.19 684.803 L1805.75 684.803 L1806.31 684.803 L1806.87 684.803 L1807.43 684.803 L1807.99 684.803 L1808.55 684.803 L1809.11 684.803 L1809.67 684.803 L1810.23 684.803 L1810.79 684.803 L1811.35 684.803 L1811.9 684.803 L1812.46 684.803 L1813.02 684.803 L1813.58 684.803 L1814.14 684.803 L1814.7 684.803 L1815.26 684.803 L1815.82 684.803 L1816.38 684.803 L1816.94 684.803 L1817.5 684.803 L1818.06 684.803 L1818.62 684.803 L1819.18 684.803 L1819.73 684.803 L1820.29 684.803 L1820.85 684.803 L1821.41 684.803 L1821.97 684.803 L1822.53 684.803 L1823.09 684.803 L1823.65 684.803 L1824.21 684.803 L1824.77 684.803 L1825.33 684.803 L1825.89 684.803 L1826.45 684.803 L1827 684.803 L1827.56 684.803 L1828.12 684.803 L1828.68 684.803 L1829.24 684.803 L1829.8 684.803 L1830.36 684.803 L1830.92 684.803 L1831.48 684.803 L1832.04 684.803 L1832.6 684.803 L1833.16 684.803 L1833.72 684.803 L1834.27 684.803 L1834.83 684.803 L1835.39 684.803 L1835.95 684.803 L1836.51 684.803 L1837.07 684.803 L1837.63 684.803 L1838.19 684.803 L1838.19 683.064 L1837.63 683.064 L1837.07 683.064 L1836.51 683.064 L1835.95 683.064 L1835.39 683.064 L1834.83 683.064 L1834.27 683.064 L1833.72 683.064 L1833.16 683.064 L1832.6 683.064 L1832.04 683.064 L1831.48 683.064 L1830.92 683.064 L1830.36 683.064 L1829.8 683.064 L1829.24 683.064 L1828.68 683.064 L1828.12 683.064 L1827.56 683.064 L1827 683.064 L1826.45 683.064 L1825.89 683.064 L1825.33 683.064 L1824.77 683.064 L1824.21 683.064 L1823.65 683.064 L1823.09 683.064 L1822.53 683.064 L1821.97 683.064 L1821.41 683.064 L1820.85 683.064 L1820.29 683.064 L1819.73 683.064 L1819.18 683.064 L1818.62 683.064 L1818.06 683.064 L1817.5 683.064 L1816.94 683.064 L1816.38 683.064 L1815.82 683.064 L1815.26 683.064 L1814.7 683.064 L1814.14 683.064 L1813.58 683.064 L1813.02 683.064 L1812.46 683.064 L1811.9 683.064 L1811.35 683.064 L1810.79 683.064 L1810.23 683.064 L1809.67 683.064 L1809.11 683.064 L1808.55 683.064 L1807.99 683.064 L1807.43 683.064 L1806.87 683.064 L1806.31 683.064 L1805.75 683.064 L1805.19 683.064 L1804.63 683.064 L1804.08 683.064 L1803.52 683.064 L1802.96 683.064 L1802.4 683.064 L1801.84 683.064 L1801.28 683.064 L1800.72 683.064 L1800.16 683.064 L1799.6 683.064 L1799.04 683.064 L1798.48 683.064 L1797.92 683.064 L1797.36 683.064 L1796.8 683.064 L1796.25 683.064 L1795.69 683.064 L1795.13 683.064 L1794.57 683.064 L1794.01 683.064 L1793.45 683.064 L1792.89 683.064 L1792.33 683.064 L1791.77 683.064 L1791.21 683.064 L1790.65 683.064 L1790.09 683.064 L1789.53 683.064 L1788.98 683.064 L1788.42 683.064 L1787.86 683.064 L1787.3 683.064 L1786.74 683.064 L1786.18 683.064 L1785.62 683.064 L1785.06 683.064 L1784.5 683.064 L1783.94 683.064 L1783.38 683.064 L1782.82 683.064 L1782.26 683.064 L1781.71 683.064 L1781.15 683.064 L1780.59 683.064 L1780.03 683.064 L1779.47 683.064 L1778.91 683.064 L1778.35 683.064 L1777.79 683.064 L1777.23 683.064 L1776.67 683.064 L1776.11 683.064 L1775.55 683.064 L1774.99 683.064 L1774.43 683.064 L1773.88 683.064 L1773.32 683.064 L1772.76 683.064 L1772.2 683.064 L1771.64 683.064 L1771.08 683.064 L1770.52 683.064 L1769.96 683.064 L1769.4 683.064 L1768.84 683.064 L1768.28 683.064 L1767.72 683.064 L1767.16 683.064 L1766.61 683.064 L1766.05 683.064 L1765.49 683.064 L1764.93 683.064 L1764.37 683.064 L1763.81 683.064 L1763.25 683.064 L1762.69 683.064 L1762.13 683.064 L1761.57 683.064 L1761.01 683.064 L1760.45 683.064 L1759.89 683.064 L1759.34 683.064 L1758.78 683.064 L1758.22 683.064 L1757.66 683.064 L1757.1 683.064 L1756.54 683.064 L1755.98 683.064 L1755.42 683.064 L1754.86 683.064 L1754.3 683.064 L1753.74 683.064 L1753.18 683.064 L1752.62 683.064 L1752.06 683.064 L1751.51 683.064 L1750.95 683.064 L1750.39 683.064 L1749.83 683.064 L1749.27 683.064 L1748.71 683.064 L1748.15 683.064 L1747.59 683.064 L1747.03 683.064 L1746.47 683.064 L1745.91 683.064 L1745.35 683.064 L1744.79 683.064 L1744.24 683.064 L1743.68 683.064 L1743.12 683.064 L1742.56 683.064 L1742 683.064 L1741.44 683.064 L1740.88 683.064 L1740.32 683.064 L1739.76 683.064 L1739.2 683.064 L1738.64 683.064 L1738.08 683.064 L1737.52 683.064 L1736.97 683.064 L1736.41 683.064 L1735.85 683.064 L1735.29 683.064 L1734.73 683.064 L1734.17 683.064 L1733.61 683.064 L1733.05 683.064 L1732.49 683.064 L1731.93 683.064 L1731.37 683.064 L1730.81 683.064 L1730.25 683.064 L1729.69 683.064 L1729.14 683.064 L1728.58 683.064 L1728.02 683.064 L1727.46 683.064 L1726.9 683.064 L1726.34 683.064 L1725.78 683.064 L1725.22 683.064 L1724.66 683.064 L1724.1 683.064 L1723.54 683.064 L1722.98 683.064 L1722.42 683.064 L1721.87 683.064 L1721.31 683.064 L1720.75 683.064 L1720.19 683.064 L1719.63 683.064 L1719.07 683.064 L1718.51 683.064 L1717.95 683.064 L1717.39 683.064 L1716.83 683.064 L1716.27 683.064 L1715.71 683.064 L1715.15 683.064 L1714.6 683.064 L1714.04 683.064 L1713.48 683.064 L1712.92 683.064 L1712.36 683.064 L1711.8 683.064 L1711.24 683.064 L1710.68 683.064 L1710.12 683.064 L1709.56 683.064 L1709 683.064 L1708.44 683.064 L1707.88 683.064 L1707.32 683.064 L1706.77 683.064 L1706.21 683.064 L1705.65 683.064 L1705.09 683.064 L1704.53 683.064 L1703.97 683.064 L1703.41 683.064 L1702.85 683.064 L1702.29 683.064 L1701.73 683.064 L1701.17 683.064 L1700.61 683.064 L1700.05 683.064 L1699.5 683.064 L1698.94 683.064 L1698.38 683.064 L1697.82 683.064 L1697.26 683.064 L1696.7 683.064 L1696.14 683.064 L1695.58 683.064 L1695.02 683.064 L1694.46 683.064 L1693.9 683.064 L1693.34 683.064 L1692.78 683.064 L1692.23 683.064 L1691.67 683.064 L1691.11 683.064 L1690.55 683.064 L1689.99 683.064 L1689.43 683.064 L1688.87 683.064 L1688.31 683.064 L1687.75 683.064 L1687.19 683.064 L1686.63 683.064 L1686.07 683.064 L1685.51 683.064 L1684.95 683.064 L1684.4 683.064 L1683.84 683.064 L1683.28 683.064 L1682.72 683.064 L1682.16 683.064 L1681.6 683.064 L1681.04 683.064 L1680.48 683.064 L1679.92 683.064 L1679.36 683.064 L1678.8 683.064 L1678.24 683.064 L1677.68 683.064 L1677.13 683.064 L1676.57 683.064 L1676.01 683.064 L1675.45 683.064 L1674.89 683.064 L1674.33 683.064 L1673.77 683.064 L1673.21 683.064 L1672.65 683.064 L1672.09 683.064 L1671.53 683.064 L1670.97 683.064 L1670.41 683.064 L1669.85 683.064 L1669.3 683.064 L1668.74 683.064 L1668.18 683.064 L1667.62 683.064 L1667.06 683.064 L1666.5 683.064 L1665.94 683.064 L1665.38 683.064 L1664.82 683.064 L1664.26 683.064 L1663.7 683.064 L1663.14 683.064 L1662.58 683.064 L1662.03 683.064 L1661.47 683.064 L1660.91 683.064 L1660.35 683.064 L1659.79 683.064 L1659.23 683.064 L1658.67 683.064 L1658.11 683.064 L1657.55 683.064 L1656.99 683.064 L1656.43 683.064 L1655.87 683.064 L1655.31 683.064 L1654.76 683.064 L1654.2 683.064 L1653.64 683.064 L1653.08 683.064 L1652.52 683.064 L1651.96 683.064 L1651.4 683.064 L1650.84 683.064 L1650.28 683.064 L1649.72 683.064 L1649.16 683.064 L1648.6 683.064 L1648.04 683.064 L1647.48 683.064 L1646.93 683.064 L1646.37 683.064 L1645.81 683.064 L1645.25 683.064 L1644.69 683.064 L1644.13 683.064 L1643.57 683.064 L1643.01 683.064 L1642.45 683.064 L1641.89 683.064 L1641.33 683.064 L1640.77 683.064 L1640.21 683.064 L1639.66 683.064 L1639.1 683.064 L1638.54 683.064 L1637.98 683.064 L1637.42 683.064 L1636.86 683.064 L1636.3 683.064 L1635.74 683.064 L1635.18 683.064 L1634.62 683.064 L1634.06 683.064 L1633.5 683.064 L1632.94 683.064 L1632.39 683.064 L1631.83 683.064 L1631.27 683.064 L1630.71 683.064 L1630.15 683.064 L1629.59 683.064 L1629.03 683.064 L1628.47 683.064 L1627.91 683.064 L1627.35 683.064 L1626.79 683.064 L1626.23 683.064 L1625.67 683.064 L1625.11 683.064 L1624.56 683.064 L1624 683.064 L1623.44 683.064 L1622.88 683.064 L1622.32 683.064 L1621.76 683.064 L1621.2 683.064 L1620.64 683.064 L1620.08 683.064 L1619.52 683.064 L1618.96 683.064 L1618.4 683.064 L1617.84 683.064 L1617.29 683.064 L1616.73 683.064 L1616.17 683.064 L1615.61 683.064 L1615.05 683.064 L1614.49 683.064 L1613.93 683.064 L1613.37 683.064 L1612.81 683.064 L1612.25 683.064 L1611.69 683.064 L1611.13 683.064 L1610.57 683.064 L1610.02 683.064 L1609.46 683.064 L1608.9 683.064 L1608.34 683.064 L1607.78 683.064 L1607.22 683.064 L1606.66 683.064 L1606.1 683.064 L1605.54 683.064 L1604.98 683.064 L1604.42 683.064 L1603.86 683.064 L1603.3 683.064 L1602.74 683.064 L1602.19 683.064 L1601.63 683.064 L1601.07 683.064 L1600.51 683.064 L1599.95 683.064 L1599.39 683.064 L1598.83 683.064 L1598.27 683.064 L1597.71 683.064 L1597.15 683.064 L1596.59 683.064 L1596.03 683.064 L1595.47 683.064 L1594.92 683.064 L1594.36 683.064 L1593.8 683.064 L1593.24 683.064 L1592.68 683.064 L1592.12 683.064 L1591.56 683.064 L1591 683.064 L1590.44 683.064 L1589.88 683.064 L1589.32 683.064 L1588.76 683.064 L1588.2 683.064 L1587.65 683.064 L1587.09 683.064 L1586.53 683.064 L1585.97 683.064 L1585.41 683.064 L1584.85 683.064 L1584.29 683.064 L1583.73 683.064 L1583.17 683.064 L1582.61 683.064 L1582.05 683.064 L1581.49 683.064 L1580.93 683.064 L1580.37 683.064 L1579.82 683.064 L1579.26 683.064 L1578.7 683.064 L1578.14 683.064 L1577.58 683.064 L1577.02 683.064 L1576.46 683.064 L1575.9 683.064 L1575.34 683.064 L1574.78 683.064 L1574.22 683.064 L1573.66 683.064 L1573.1 683.064 L1572.55 683.064 L1571.99 683.064 L1571.43 683.064 L1570.87 683.064 L1570.31 683.064 L1569.75 683.064 L1569.19 683.064 L1568.63 683.064 L1568.07 683.064 L1567.51 683.064 L1566.95 683.064 L1566.39 683.064 L1565.83 683.064 L1565.28 683.064 L1564.72 683.064 L1564.16 683.064 L1563.6 683.064 L1563.04 683.064 L1562.48 683.064 L1561.92 683.064 L1561.36 683.064 L1560.8 683.064 L1560.24 683.064 L1559.68 683.064 L1559.12 683.064 L1558.56 683.064 L1558 683.064 L1557.45 683.064 L1556.89 683.064 L1556.33 683.064 L1555.77 683.064 L1555.21 683.064 L1554.65 683.064 L1554.09 683.064 L1553.53 683.064 L1552.97 683.064 L1552.41 683.064 L1551.85 683.064 L1551.29 683.064 L1550.73 683.064 L1550.18 683.064 L1549.62 683.064 L1549.06 683.064 L1548.5 683.064 L1547.94 683.064 L1547.38 683.064 L1546.82 683.064 L1546.26 683.064 L1545.7 683.064 L1545.14 683.064 L1544.58 683.064 L1544.02 683.064 L1543.46 683.064 L1542.9 683.064 L1542.35 683.064 L1541.79 683.064 L1541.23 683.064 L1540.67 683.064 L1540.11 683.064 L1539.55 683.064 L1538.99 683.064 L1538.43 683.064 L1537.87 683.064 L1537.31 683.064 L1536.75 683.064 L1536.19 683.064 L1535.63 683.064 L1535.08 683.064 L1534.52 683.064 L1533.96 683.064 L1533.4 683.064 L1532.84 683.064 L1532.28 683.064 L1531.72 683.064 L1531.16 683.064 L1530.6 683.064 L1530.04 683.064 L1529.48 683.064 L1528.92 683.064 L1528.36 683.064 L1527.81 683.064 L1527.25 683.064 L1526.69 683.064 L1526.13 683.064 L1525.57 683.064 L1525.01 683.064 L1524.45 683.064 L1523.89 683.064 L1523.33 683.064 L1522.77 683.064 L1522.21 683.064 L1521.65 683.064 L1521.09 683.064 L1520.53 683.064 L1519.98 683.064 L1519.42 683.064 L1518.86 683.064 L1518.3 683.064 L1517.74 683.064 L1517.18 683.064 L1516.62 683.064 L1516.06 683.064 L1515.5 683.064 L1514.94 683.064 L1514.38 683.064 L1513.82 683.064 L1513.26 683.064 L1512.71 683.064 L1512.15 683.064 L1511.59 683.064 L1511.03 683.064 L1510.47 683.064 L1509.91 683.064 L1509.35 683.064 L1508.79 683.064 L1508.23 683.064 L1507.67 683.064 L1507.11 683.064 L1506.55 683.064 L1505.99 683.064 L1505.44 683.064 L1504.88 683.064 L1504.32 683.064 L1503.76 683.064 L1503.2 683.064 L1502.64 683.064 L1502.08 683.064 L1501.52 683.064 L1500.96 683.064 L1500.4 683.064 L1499.84 683.064 L1499.28 683.064 L1498.72 683.064 L1498.16 683.064 L1497.61 683.064 L1497.05 683.064 L1496.49 683.064 L1495.93 683.064 L1495.37 683.064 L1494.81 683.064 L1494.25 683.064 L1493.69 683.064 L1493.13 683.064 L1492.57 683.064 L1492.01 683.064 L1491.45 683.064 L1490.89 683.064 L1490.34 683.064 L1489.78 683.064 L1489.22 683.064 L1488.66 683.064 L1488.1 683.064 L1487.54 683.064 L1486.98 683.064 L1486.42 683.064 L1485.86 683.064 L1485.3 683.064 L1484.74 683.064 L1484.18 683.064 L1483.62 683.064 L1483.07 683.064 L1482.51 683.064 L1481.95 683.064 L1481.39 683.064 L1480.83 683.064 L1480.27 683.064 L1479.71 683.064 L1479.15 683.064 L1478.59 683.064 L1478.03 683.064 L1477.47 683.064 L1476.91 683.064 L1476.35 683.064 L1475.79 683.064 L1475.24 683.064 L1474.68 683.064 L1474.12 683.064 L1473.56 683.064 L1473 683.064 L1472.44 683.064 L1471.88 683.064 L1471.32 683.064 L1470.76 683.064 L1470.2 683.064 L1469.64 683.064 L1469.08 683.064 L1468.52 683.064 L1467.97 683.064 L1467.41 683.064 L1466.85 683.064 L1466.29 683.064 L1465.73 683.064 L1465.17 683.064 L1464.61 683.064 L1464.05 683.064 L1463.49 683.064 L1462.93 683.064 L1462.37 683.064 L1461.81 683.064 L1461.25 683.064 L1460.7 683.064 L1460.14 683.064 L1459.58 683.064 L1459.02 683.064 L1458.46 683.064 L1457.9 683.064 L1457.34 683.064 L1456.78 683.064 L1456.22 683.064 L1455.66 683.064 L1455.1 683.064 L1454.54 683.064 L1453.98 683.064 L1453.42 683.064 L1452.87 683.064 L1452.31 683.064 L1451.75 683.064 L1451.19 683.064 L1450.63 683.064 L1450.07 683.064 L1449.51 683.064 L1448.95 683.064 L1448.39 683.064 L1447.83 683.064 L1447.27 683.064 L1446.71 683.064 L1446.15 683.064 L1445.6 683.064 L1445.04 683.064 L1444.48 683.064 L1443.92 683.064 L1443.36 683.064 L1442.8 683.064 L1442.24 683.064 L1441.68 683.064 L1441.12 683.064 L1440.56 683.064 L1440 683.064 L1439.44 683.064 L1438.88 683.064 L1438.33 683.064 L1437.77 683.064 L1437.21 683.064 L1436.65 683.064 L1436.09 683.064 L1435.53 683.064 L1434.97 683.064 L1434.41 683.064 L1433.85 683.064 L1433.29 683.064 L1432.73 683.064 L1432.17 683.064 L1431.61 683.064 L1431.05 683.064 L1430.5 683.064 L1429.94 683.064 L1429.38 683.064 L1428.82 683.064 L1428.26 683.064 L1427.7 683.064 L1427.14 683.064 L1426.58 683.064 L1426.02 683.064 L1425.46 683.064 L1424.9 683.064 L1424.34 683.064 L1423.78 683.064 L1423.23 683.064 L1422.67 683.064 L1422.11 683.064 L1421.55 683.064 L1420.99 683.064 L1420.43 683.064 L1419.87 683.064 L1419.31 683.064 L1418.75 683.064 L1418.19 683.064 L1417.63 683.064 L1417.07 683.064 L1416.51 683.064 L1415.95 683.064 L1415.4 683.064 L1414.84 683.064 L1414.28 683.064 L1413.72 683.064 L1413.16 683.064 L1412.6 683.064 L1412.04 683.064 L1411.48 683.064 L1410.92 683.064 L1410.36 683.064 L1409.8 683.064 L1409.24 683.064 L1408.68 683.064 L1408.13 683.064 L1407.57 683.064 L1407.01 683.064 L1406.45 683.064 L1405.89 683.064 L1405.33 683.064 L1404.77 683.064 L1404.21 683.064 L1403.65 683.064 L1403.09 683.064 L1402.53 683.064 L1401.97 683.064 L1401.41 683.064 L1400.86 683.064 L1400.3 683.064 L1399.74 683.064 L1399.18 683.064 L1398.62 683.064 L1398.06 683.064 L1397.5 683.064 L1396.94 683.064 L1396.38 683.064 L1395.82 683.064 L1395.26 683.064 L1394.7 683.064 L1394.14 683.064 L1393.58 683.064 L1393.03 683.064 L1392.47 683.064 L1391.91 683.064 L1391.35 683.064 L1390.79 683.064 L1390.23 683.064 L1389.67 683.064 L1389.11 683.064 L1388.55 683.064 L1387.99 683.064 L1387.43 683.064 L1386.87 683.064 L1386.31 683.064 L1385.76 683.064 L1385.2 683.064 L1384.64 683.064 L1384.08 683.064 L1383.52 683.064 L1382.96 683.064 L1382.4 683.064 L1381.84 683.064 L1381.28 683.064 L1380.72 683.064 L1380.16 683.064 L1379.6 683.064 L1379.04 683.064 L1378.49 683.064 L1377.93 683.064 L1377.37 683.064 L1376.81 683.064 L1376.25 683.064 L1375.69 683.064 L1375.13 683.064 L1374.57 683.064 L1374.01 683.064 L1373.45 683.064 L1372.89 683.064 L1372.33 683.064 L1371.77 683.064 L1371.21 683.064 L1370.66 683.064 L1370.1 683.064 L1369.54 683.064 L1368.98 683.064 L1368.42 683.064 L1367.86 683.064 L1367.3 683.064 L1366.74 683.064 L1366.18 683.064 L1365.62 683.064 L1365.06 683.064 L1364.5 683.064 L1363.94 683.064 L1363.39 683.064 L1362.83 683.064 L1362.27 683.064 L1361.71 683.064 L1361.15 683.064 L1360.59 683.064 L1360.03 683.064 L1359.47 683.064 L1358.91 683.064 L1358.35 683.064 L1357.79 683.064 L1357.23 683.064 L1356.67 683.064 L1356.12 683.064 L1355.56 683.064 L1355 683.064 L1354.44 683.064 L1353.88 683.064 L1353.32 683.064 L1352.76 683.064 L1352.2 683.064 L1351.64 683.064 L1351.08 683.064 L1350.52 683.064 L1349.96 683.064 L1349.4 683.064 L1348.84 683.064 L1348.29 683.064 L1347.73 683.064 L1347.17 683.064 L1346.61 683.064 L1346.05 683.064 L1345.49 683.064 L1344.93 683.064 L1344.37 683.064 L1343.81 683.064 L1343.25 683.064 L1342.69 683.064 L1342.13 683.064 L1341.57 683.064 L1341.02 683.064 L1340.46 683.064 L1339.9 683.064 L1339.34 683.064 L1338.78 683.064 L1338.22 683.064 L1337.66 683.064 L1337.1 683.064 L1336.54 683.064 L1335.98 683.064 L1335.42 683.064 L1334.86 683.064 L1334.3 683.064 L1333.75 683.064 L1333.19 683.064 L1332.63 683.064 L1332.07 683.064 L1331.51 683.064 L1330.95 683.064 L1330.39 683.064 L1329.83 683.064 L1329.27 683.064 L1328.71 683.064 L1328.15 683.064 L1327.59 683.064 L1327.03 683.064 L1326.47 683.064 L1325.92 683.064 L1325.36 683.064 L1324.8 683.064 L1324.24 683.064 L1323.68 683.064 L1323.12 683.064 L1322.56 683.064 L1322 683.064 L1321.44 683.064 L1320.88 683.064 L1320.32 683.064 L1319.76 683.064 L1319.2 683.064 L1318.65 683.064 L1318.09 683.064 L1317.53 683.064 L1316.97 683.064 L1316.41 683.064 L1315.85 683.064 L1315.29 683.064 L1314.73 683.064 L1314.17 683.064 L1313.61 683.064 L1313.05 683.064 L1312.49 683.064 L1311.93 683.064 L1311.38 683.064 L1310.82 683.064 L1310.26 683.064 L1309.7 683.064 L1309.14 683.064 L1308.58 683.064 L1308.02 683.064 L1307.46 683.064 L1306.9 683.064 L1306.34 683.064 L1305.78 683.064 L1305.22 683.064 L1304.66 683.064 L1304.1 683.064 L1303.55 683.064 L1302.99 683.064 L1302.43 683.064 L1301.87 683.064 L1301.31 683.064 L1300.75 683.064 L1300.19 683.064 L1299.63 683.064 L1299.07 683.064 L1298.51 683.064 L1297.95 683.064 L1297.39 683.064 L1296.83 683.064 L1296.28 683.064 L1295.72 683.064 L1295.16 683.064 L1294.6 683.064 L1294.04 683.064 L1293.48 683.064 L1292.92 683.064 L1292.36 683.064 L1291.8 683.064 L1291.24 683.064 L1290.68 683.064 L1290.12 683.064 L1289.56 683.064 L1289 683.064 L1288.45 683.064 L1287.89 683.064 L1287.33 683.064 L1286.77 683.064 L1286.21 683.064 L1285.65 683.064 L1285.09 683.064 L1284.53 683.064 L1283.97 683.064 L1283.41 683.064 L1282.85 683.064 L1282.29 683.064 L1281.73 683.064 L1281.18 683.064 L1280.62 683.064 L1280.06 683.064 L1279.5 683.064 L1278.94 683.064 L1278.38 683.064 L1277.82 683.064 L1277.26 683.064 L1276.7 683.064 L1276.14 683.064 L1275.58 683.064 L1275.02 683.064 L1274.46 683.064 L1273.91 683.064 L1273.35 683.064 L1272.79 683.064 L1272.23 683.064 L1271.67 683.064 L1271.11 683.064 L1270.55 683.064 L1269.99 683.064 L1269.43 683.064 L1268.87 683.064 L1268.31 683.064 L1267.75 683.064 L1267.19 683.064 L1266.63 683.064 L1266.08 683.064 L1265.52 683.064 L1264.96 683.064 L1264.4 683.064 L1263.84 683.064 L1263.28 683.064 L1262.72 683.064 L1262.16 683.064 L1261.6 683.064 L1261.04 683.064 L1260.48 683.064 L1259.92 683.064 L1259.36 683.064 L1258.81 683.064 L1258.25 683.064 L1257.69 683.064 L1257.13 683.064 L1256.57 683.064 L1256.01 683.064 L1255.45 683.064 L1254.89 683.064 L1254.33 683.064 L1253.77 683.064 L1253.21 683.064 L1252.65 683.064 L1252.09 683.064 L1251.54 683.064 L1250.98 683.064 L1250.42 683.064 L1249.86 683.064 L1249.3 683.064 L1248.74 683.064 L1248.18 683.064 L1247.62 683.064 L1247.06 683.064 L1246.5 683.064 L1245.94 683.064 L1245.38 683.064 L1244.82 683.064 L1244.26 683.064 L1243.71 683.064 L1243.15 683.064 L1242.59 683.064 L1242.03 683.064 L1241.47 683.064 L1240.91 683.064 L1240.35 683.064 L1239.79 683.064 L1239.23 683.064 L1238.67 683.064 L1238.11 683.064 L1237.55 683.064 L1236.99 683.064 L1236.44 683.064 L1235.88 683.064 L1235.32 683.064 L1234.76 683.064 L1234.2 683.064 L1233.64 683.064 L1233.08 683.064 L1232.52 683.064 L1231.96 683.064 L1231.4 683.064 L1230.84 683.064 L1230.28 683.064 L1229.72 683.064 L1229.17 683.064 L1228.61 683.064 L1228.05 683.064 L1227.49 683.064 L1226.93 683.064 L1226.37 683.064 L1225.81 683.064 L1225.25 683.064 L1224.69 683.064 L1224.13 683.064 L1223.57 683.064 L1223.01 683.064 L1222.45 683.064 L1221.89 683.064 L1221.34 683.064 L1220.78 683.064 L1220.22 683.064 L1219.66 683.064 L1219.1 683.064 L1218.54 683.064 L1217.98 683.064 L1217.42 683.064 L1216.86 683.064 L1216.3 683.064 L1215.74 683.064 L1215.18 683.064 L1214.62 683.064 L1214.07 683.064 L1213.51 683.064 L1212.95 683.064 L1212.39 683.064 L1211.83 683.064 L1211.27 683.064 L1210.71 683.064 L1210.15 683.064 L1209.59 683.064 L1209.03 683.064 L1208.47 683.064 L1207.91 683.064 L1207.35 683.064 L1206.8 683.064 L1206.24 683.064 L1205.68 683.064 L1205.12 683.064 L1204.56 683.064 L1204 683.064 L1203.44 683.064 L1202.88 683.064 L1202.32 683.064 L1201.76 683.064 L1201.2 683.064 L1200.64 683.064 L1200.08 683.064 L1199.52 683.064 L1198.97 683.064 L1198.41 683.064 L1197.85 683.064 L1197.29 683.064 L1196.73 683.064 L1196.17 683.064 L1195.61 683.064 L1195.05 683.064 L1194.49 683.064 L1193.93 683.064 L1193.37 683.064 L1192.81 683.064 L1192.25 683.064 L1191.7 683.064 L1191.14 683.064 L1190.58 683.064 L1190.02 683.064 L1189.46 683.064 L1188.9 683.064 L1188.34 683.064 L1187.78 683.064 L1187.22 683.064 L1186.66 683.064 L1186.1 683.064 L1185.54 683.064 L1184.98 683.064 L1184.43 683.064 L1183.87 683.064 L1183.31 683.064 L1182.75 683.064 L1182.19 683.064 L1181.63 683.064 L1181.07 683.064 L1180.51 683.064 L1179.95 683.064 L1179.39 683.064 L1178.83 683.064 L1178.27 683.064 L1177.71 683.064 L1177.15 683.064 L1176.6 683.064 L1176.04 683.064 L1175.48 683.064 L1174.92 683.064 L1174.36 683.064 L1173.8 683.064 L1173.24 683.064 L1172.68 683.064 L1172.12 683.064 L1171.56 683.064 L1171 683.064 L1170.44 683.064 L1169.88 683.064 L1169.33 683.064 L1168.77 683.064 L1168.21 683.064 L1167.65 683.064 L1167.09 683.064 L1166.53 683.064 L1165.97 683.064 L1165.41 683.064 L1164.85 683.064 L1164.29 683.064 L1163.73 683.064 L1163.17 683.064 L1162.61 683.064 L1162.05 683.064 L1161.5 683.064 L1160.94 683.064 L1160.38 683.064 L1159.82 683.064 L1159.26 683.064 L1158.7 683.064 L1158.14 683.064 L1157.58 683.064 L1157.02 683.064 L1156.46 683.064 L1155.9 683.064 L1155.34 683.064 L1154.78 683.064 L1154.23 683.064 L1153.67 683.064 L1153.11 683.064 L1152.55 683.064 L1151.99 683.064 L1151.43 683.064 L1150.87 683.064 L1150.31 683.064 L1149.75 683.064 L1149.19 683.064 L1148.63 683.064 L1148.07 683.064 L1147.51 683.064 L1146.96 683.064 L1146.4 683.064 L1145.84 683.064 L1145.28 683.064 L1144.72 683.064 L1144.16 683.064 L1143.6 683.064 L1143.04 683.064 L1142.48 683.064 L1141.92 683.064 L1141.36 683.064 L1140.8 683.064 L1140.24 683.064 L1139.68 683.064 L1139.13 683.064 L1138.57 683.064 L1138.01 683.064 L1137.45 683.064 L1136.89 683.064 L1136.33 683.064 L1135.77 683.064 L1135.21 683.064 L1134.65 683.064 L1134.09 683.064 L1133.53 683.064 L1132.97 683.064 L1132.41 683.064 L1131.86 683.064 L1131.3 683.064 L1130.74 683.064 L1130.18 683.064 L1129.62 683.064 L1129.06 683.064 L1128.5 683.064 L1127.94 683.064 L1127.38 683.064 L1126.82 683.064 L1126.26 683.064 L1125.7 683.064 L1125.14 683.064 L1124.59 683.064 L1124.03 683.064 L1123.47 683.064 L1122.91 683.064 L1122.35 683.064 L1121.79 683.064 L1121.23 683.064 L1120.67 683.064 L1120.11 683.064 L1119.55 683.064 L1118.99 683.064 L1118.43 683.064 L1117.87 683.064 L1117.31 683.064 L1116.76 683.064 L1116.2 683.064 L1115.64 683.064 L1115.08 683.064 L1114.52 683.064 L1113.96 683.064 L1113.4 683.064 L1112.84 683.064 L1112.28 683.064 L1111.72 683.064 L1111.16 683.064 L1110.6 683.064 L1110.04 683.064 L1109.49 683.064 L1108.93 683.064 L1108.37 683.064 L1107.81 683.064 L1107.25 683.064 L1106.69 683.064 L1106.13 683.064 L1105.57 683.064 L1105.01 683.064 L1104.45 683.064 L1103.89 683.064 L1103.33 683.064 L1102.77 683.064 L1102.22 683.064 L1101.66 683.064 L1101.1 683.064 L1100.54 683.064 L1099.98 683.064 L1099.42 683.064 L1098.86 683.064 L1098.3 683.064 L1097.74 683.064 L1097.18 683.064 L1096.62 683.064 L1096.06 683.064 L1095.5 683.064 L1094.94 683.064 L1094.39 683.064 L1093.83 683.064 L1093.27 683.064 L1092.71 683.064 L1092.15 683.064 L1091.59 683.064 L1091.03 683.064 L1090.47 683.064 L1089.91 683.064 L1089.35 683.064 L1088.79 683.064 L1088.23 683.064 L1087.67 683.064 L1087.12 683.064 L1086.56 683.064 L1086 683.064 L1085.44 683.064 L1084.88 683.064 L1084.32 683.064 L1083.76 683.064 L1083.2 683.064 L1082.64 683.064 L1082.08 683.064 L1081.52 683.064 L1080.96 683.064 L1080.4 683.064 L1079.85 683.064 L1079.29 683.064 L1078.73 683.064 L1078.17 683.064 L1077.61 683.064 L1077.05 683.064 L1076.49 683.064 L1075.93 683.064 L1075.37 683.064 L1074.81 683.064 L1074.25 683.064 L1073.69 683.064 L1073.13 683.064 L1072.57 683.064 L1072.02 683.064 L1071.46 683.064 L1070.9 683.064 L1070.34 683.064 L1069.78 683.064 L1069.22 683.064 L1068.66 683.064 L1068.1 683.064 L1067.54 683.064 L1066.98 683.064 L1066.42 683.064 L1065.86 683.064 L1065.3 683.064 L1064.75 683.064 L1064.19 683.064 L1063.63 683.064 L1063.07 683.064 L1062.51 683.064 L1061.95 683.064 L1061.39 683.064 L1060.83 683.064 L1060.27 683.064 L1059.71 683.064 L1059.15 683.064 L1058.59 683.064 L1058.03 683.064 L1057.48 683.064 L1056.92 683.064 L1056.36 683.064 L1055.8 683.064 L1055.24 683.064 L1054.68 683.064 L1054.12 683.064 L1053.56 683.064 L1053 683.064 L1052.44 683.064 L1051.88 683.064 L1051.32 683.064 L1050.76 683.064 L1050.2 683.064 L1049.65 683.064 L1049.09 683.064 L1048.53 683.064 L1047.97 683.064 L1047.41 683.064 L1046.85 683.064 L1046.29 683.064 L1045.73 683.064 L1045.17 683.064 L1044.61 683.064 L1044.05 683.064 L1043.49 683.064 L1042.93 683.064 L1042.38 683.064 L1041.82 683.064 L1041.26 683.064 L1040.7 683.064 L1040.14 683.064 L1039.58 683.064 L1039.02 683.064 L1038.46 683.064 L1037.9 683.064 L1037.34 683.064 L1036.78 683.064 L1036.22 683.064 L1035.66 683.064 L1035.1 683.064 L1034.55 683.064 L1033.99 683.064 L1033.43 683.064 L1032.87 683.064 L1032.31 683.064 L1031.75 683.064 L1031.19 683.064 L1030.63 683.064 L1030.07 683.064 L1029.51 683.064 L1028.95 683.064 L1028.39 683.064 L1027.83 683.064 L1027.28 683.064 L1026.72 683.064 L1026.16 683.064 L1025.6 683.064 L1025.04 683.064 L1024.48 683.064 L1023.92 683.064 L1023.36 683.064 L1022.8 683.064 L1022.24 683.064 L1021.68 683.064 L1021.12 683.064 L1020.56 683.064 L1020.01 683.064 L1019.45 683.064 L1018.89 683.064 L1018.33 683.064 L1017.77 683.064 L1017.21 683.064 L1016.65 683.064 L1016.09 683.064 L1015.53 683.064 L1014.97 683.064 L1014.41 683.064 L1013.85 683.064 L1013.29 683.064 L1012.73 683.064 L1012.18 683.064 L1011.62 683.064 L1011.06 683.064 L1010.5 683.064 L1009.94 683.064 L1009.38 683.064 L1008.82 683.064 L1008.26 683.064 L1007.7 683.064 L1007.14 683.064 L1006.58 683.064 L1006.02 683.064 L1005.46 683.064 L1004.91 683.064 L1004.35 683.064 L1003.79 683.064 L1003.23 683.064 L1002.67 683.064 L1002.11 683.064 L1001.55 683.064 L1000.99 683.064 L1000.43 683.064 L999.872 683.064 L999.313 683.064 L998.754 683.064 L998.194 683.064 L997.635 683.064 L997.076 683.064 L996.517 683.064 L995.957 683.064 L995.398 683.064 L994.839 683.064 L994.28 683.064 L993.72 683.064 L993.161 683.064 L992.602 683.064 L992.043 683.064 L991.483 683.064 L990.924 683.064 L990.365 683.064 L989.806 683.064 L989.246 683.064 L988.687 683.064 L988.128 683.064 L987.569 683.064 L987.009 683.064 L986.45 683.064 L985.891 683.064 L985.332 683.064 L984.772 683.064 L984.213 683.064 L983.654 683.064 L983.095 683.064 L982.535 683.064 L981.976 683.064 L981.417 683.064 L980.858 683.064 L980.298 683.064 L979.739 683.064 L979.18 683.064 L978.621 683.064 L978.061 683.064 L977.502 683.064 L976.943 683.064 L976.384 683.064 L975.824 683.064 L975.265 683.064 L974.706 683.064 L974.147 683.064 L973.587 683.064 L973.028 683.064 L972.469 683.064 L971.91 683.064 L971.35 683.064 L970.791 683.064 L970.232 683.064 L969.673 683.064 L969.113 683.064 L968.554 683.064 L967.995 683.064 L967.436 683.064 L966.876 683.064 L966.317 683.064 L965.758 683.064 L965.199 683.064 L964.639 683.064 L964.08 683.064 L963.521 683.064 L962.962 683.064 L962.402 683.064 L961.843 683.064 L961.284 683.064 L960.725 683.064 L960.165 683.064 L959.606 683.064 L959.047 683.064 L958.488 683.064 L957.928 683.064 L957.369 683.064 L956.81 683.064 L956.251 683.064 L955.691 683.064 L955.132 683.064 L954.573 683.064 L954.014 683.064 L953.454 683.064 L952.895 683.064 L952.336 683.064 L951.777 683.064 L951.217 683.064 L950.658 683.064 L950.099 683.064 L949.54 683.064 L948.98 683.064 L948.421 683.064 L947.862 683.064 L947.303 683.064 L946.743 683.064 L946.184 683.064 L945.625 683.064 L945.066 683.064 L944.506 683.064 L943.947 683.064 L943.388 683.064 L942.829 683.064 L942.269 683.064 L941.71 683.064 L941.151 683.064 L940.592 683.064 L940.032 683.064 L939.473 683.064 L938.914 683.064 L938.355 683.064 L937.795 683.064 L937.236 683.064 L936.677 683.064 L936.118 683.064 L935.558 683.064 L934.999 683.064 L934.44 683.064 L933.881 683.064 L933.321 683.064 L932.762 683.064 L932.203 683.064 L931.644 683.064 L931.084 683.064 L930.525 683.064 L929.966 683.064 L929.406 683.064 L928.847 683.064 L928.288 683.064 L927.729 683.064 L927.169 683.064 L926.61 683.064 L926.051 683.064 L925.492 683.064 L924.932 683.064 L924.373 683.064 L923.814 683.064 L923.255 683.064 L922.695 683.064 L922.136 683.064 L921.577 683.064 L921.018 683.064 L920.458 683.064 L919.899 683.064 L919.34 683.064 L918.781 683.064 L918.221 683.064 L917.662 683.064 L917.103 683.064 L916.544 683.064 L915.984 683.064 L915.425 683.064 L914.866 683.064 L914.307 683.064 L913.747 683.064 L913.188 683.064 L912.629 683.064 L912.07 683.064 L911.51 683.064 L910.951 683.064 L910.392 683.064 L909.833 683.064 L909.273 683.064 L908.714 683.064 L908.155 683.064 L907.596 683.064 L907.036 683.064 L906.477 683.064 L905.918 683.064 L905.359 683.064 L904.799 683.064 L904.24 683.064 L903.681 683.064 L903.122 683.064 L902.562 683.064 L902.003 683.064 L901.444 683.064 L900.885 683.064 L900.325 683.064 L899.766 683.064 L899.207 683.064 L898.648 683.064 L898.088 683.064 L897.529 683.064 L896.97 683.064 L896.411 683.064 L895.851 683.064 L895.292 683.064 L894.733 683.064 L894.174 683.064 L893.614 683.064 L893.055 683.064 L892.496 683.064 L891.937 683.064 L891.377 683.064 L890.818 683.064 L890.259 683.064 L889.7 683.064 L889.14 683.064 L888.581 683.064 L888.022 683.064 L887.463 683.064 L886.903 683.064 L886.344 683.064 L885.785 683.064 L885.226 683.064 L884.666 683.064 L884.107 683.064 L883.548 683.064 L882.989 683.064 L882.429 683.064 L881.87 683.064 L881.311 683.064 L880.752 683.064 L880.192 683.064 L879.633 683.064 L879.074 683.064 L878.515 683.064 L877.955 683.064 L877.396 683.064 L876.837 683.064 L876.278 683.064 L875.718 683.064 L875.159 683.064 L874.6 683.064 L874.041 683.064 L873.481 683.064 L872.922 683.064 L872.363 683.064 L871.804 683.064 L871.244 683.064 L870.685 683.064 L870.126 683.064 L869.567 683.064 L869.007 683.064 L868.448 683.064 L867.889 683.064 L867.33 683.064 L866.77 683.064 L866.211 683.064 L865.652 683.064 L865.093 683.064 L864.533 683.064 L863.974 683.064 L863.415 683.064 L862.856 683.064 L862.296 683.064 L861.737 683.064 L861.178 683.064 L860.619 683.064 L860.059 683.064 L859.5 683.064 L858.941 683.064 L858.382 683.064 L857.822 683.064 L857.263 683.064 L856.704 683.064 L856.145 683.064 L855.585 683.064 L855.026 683.064 L854.467 683.064 L853.908 683.064 L853.348 683.064 L852.789 683.064 L852.23 683.064 L851.671 683.064 L851.111 683.064 L850.552 683.064 L849.993 683.064 L849.434 683.064 L848.874 683.064 L848.315 683.064 L847.756 683.064 L847.197 683.064 L846.637 683.064 L846.078 683.064 L845.519 683.064 L844.96 683.064 L844.4 683.064 L843.841 683.064 L843.282 683.064 L842.723 683.064 L842.163 683.064 L841.604 683.064 L841.045 683.064 L840.486 683.064 L839.926 683.064 L839.367 683.064 L838.808 683.064 L838.249 683.064 L837.689 683.064 L837.13 683.064 L836.571 683.064 L836.012 683.064 L835.452 683.064 L834.893 683.064 L834.334 683.064 L833.775 683.064 L833.215 683.064 L832.656 683.064 L832.097 683.064 L831.538 683.064 L830.978 683.064 L830.419 683.064 L829.86 683.064 L829.301 683.064 L828.741 683.064 L828.182 683.064 L827.623 683.064 L827.064 683.064 L826.504 683.064 L825.945 683.064 L825.386 683.064 L824.827 683.064 L824.267 683.064 L823.708 683.064 L823.149 683.064 L822.59 683.064 L822.03 683.064 L821.471 683.064 L820.912 683.064 L820.353 683.064 L819.793 683.064 L819.234 683.064 L818.675 683.064 L818.116 683.064 L817.556 683.064 L816.997 683.064 L816.438 683.064 L815.879 683.064 L815.319 683.064 L814.76 683.064 L814.201 683.064 L813.642 683.064 L813.082 683.064 L812.523 683.064 L811.964 683.064 L811.405 683.064 L810.845 683.064 L810.286 683.064 L809.727 683.064 L809.168 683.064 L808.608 683.064 L808.049 683.064 L807.49 683.064 L806.931 683.064 L806.371 683.064 L805.812 683.064 L805.253 683.064 L804.693 683.064 L804.134 683.064 L803.575 683.064 L803.016 683.064 L802.456 683.064 L801.897 683.064 L801.338 683.064 L800.779 683.064 L800.219 683.064 L799.66 683.064 L799.101 683.064 L798.542 683.064 L797.982 683.064 L797.423 683.064 L796.864 683.064 L796.305 683.064 L795.745 683.064 L795.186 683.064 L794.627 683.064 L794.068 683.064 L793.508 683.064 L792.949 683.064 L792.39 683.064 L791.831 683.064 L791.271 683.064 L790.712 683.064 L790.153 683.064 L789.594 683.064 L789.034 683.064 L788.475 683.064 L787.916 683.064 L787.357 683.064 L786.797 683.064 L786.238 683.064 L785.679 683.064 L785.12 683.064 L784.56 683.064 L784.001 683.064 L783.442 683.064 L782.883 683.064 L782.323 683.064 L781.764 683.064 L781.205 683.064 L780.646 683.064 L780.086 683.064 L779.527 683.064 L778.968 683.064 L778.409 683.064 L777.849 683.064 L777.29 683.064 L776.731 683.064 L776.172 683.064 L775.612 683.064 L775.053 683.064 L774.494 683.064 L773.935 683.064 L773.375 683.064 L772.816 683.064 L772.257 683.064 L771.698 683.064 L771.138 683.064 L770.579 683.064 L770.02 683.064 L769.461 683.064 L768.901 683.064 L768.342 683.064 L767.783 683.064 L767.224 683.064 L766.664 683.064 L766.105 683.064 L765.546 683.064 L764.987 683.064 L764.427 683.064 L763.868 683.064 L763.309 683.064 L762.75 683.064 L762.19 683.064 L761.631 683.064 L761.072 683.064 L760.513 683.064 L759.953 683.064 L759.394 683.064 L758.835 683.064 L758.276 683.064 L757.716 683.064 L757.157 683.064 L756.598 683.064 L756.039 683.064 L755.479 683.064 L754.92 683.064 L754.361 683.064 L753.802 683.064 L753.242 683.064 L752.683 683.064 L752.124 683.064 L751.565 683.064 L751.005 683.064 L750.446 683.064 L749.887 683.064 L749.328 683.064 L748.768 683.064 L748.209 683.064 L747.65 683.064 L747.091 683.064 L746.531 683.064 L745.972 683.064 L745.413 683.064 L744.854 683.064 L744.294 683.064 L743.735 683.064 L743.176 683.064 L742.617 683.064 L742.057 683.064 L741.498 683.064 L740.939 683.064 L740.38 683.064 L739.82 683.064 L739.261 683.064 L738.702 683.064 L738.143 683.064 L737.583 683.064 L737.024 683.064 L736.465 683.064 L735.906 683.064 L735.346 683.064 L734.787 683.064 L734.228 683.064 L733.669 683.064 L733.109 683.064 L732.55 683.064 L731.991 683.064 L731.432 683.064 L730.872 683.064 L730.313 683.064 L729.754 683.064 L729.195 683.064 L728.635 683.064 L728.076 683.064 L727.517 683.064 L726.958 683.064 L726.398 683.064 L725.839 683.064 L725.28 683.064 L724.721 683.064 L724.161 683.064 L723.602 683.064 L723.043 683.064 L722.484 683.064 L721.924 683.064 L721.365 683.064 L720.806 683.064 L720.247 683.064  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip113)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.96 720.806,683.96 721.365,683.96 721.924,683.96 722.484,683.96 723.043,683.96 723.602,683.96 724.161,683.96 724.721,683.96 725.28,683.96 725.839,683.96 726.398,683.96 726.958,683.96 727.517,683.96 728.076,683.96 728.635,683.96 729.195,683.96 729.754,683.96 730.313,683.96 730.872,683.96 731.432,683.96 731.991,683.96 732.55,683.96 733.109,683.96 733.669,683.96 734.228,683.96 734.787,683.96 735.346,683.96 735.906,683.96 736.465,683.96 737.024,683.96 737.583,683.96 738.143,683.96 738.702,683.96 739.261,683.96 739.82,683.96 740.38,683.96 740.939,683.96 741.498,683.96 742.057,683.96 742.617,683.96 743.176,683.96 743.735,683.96 744.294,683.96 744.854,683.96 745.413,683.96 745.972,683.96 746.531,683.96 747.091,683.96 747.65,683.96 748.209,683.96 748.768,683.96 749.328,683.96 749.887,683.96 750.446,683.96 751.005,683.96 751.565,683.96 752.124,683.96 752.683,683.96 753.242,683.96 753.802,683.96 754.361,683.96 754.92,683.96 755.479,683.96 756.039,683.96 756.598,683.96 757.157,683.96 757.716,683.96 758.276,683.96 758.835,683.96 759.394,683.96 759.953,683.96 760.513,683.96 761.072,683.96 761.631,683.96 762.19,683.96 762.75,683.96 763.309,683.96 763.868,683.96 764.427,683.96 764.987,683.96 765.546,683.96 766.105,683.96 766.664,683.96 767.224,683.96 767.783,683.96 768.342,683.96 768.901,683.96 769.461,683.96 770.02,683.96 770.579,683.96 771.138,683.96 771.698,683.96 772.257,683.96 772.816,683.96 773.375,683.96 773.935,683.96 774.494,683.96 775.053,683.96 775.612,683.96 776.172,683.96 776.731,683.96 777.29,683.96 777.849,683.96 778.409,683.96 778.968,683.96 779.527,683.96 780.086,683.96 780.646,683.96 781.205,683.96 781.764,683.96 782.323,683.96 782.883,683.96 783.442,683.96 784.001,683.96 784.56,683.96 785.12,683.96 785.679,683.96 786.238,683.96 786.797,683.96 787.357,683.96 787.916,683.96 788.475,683.96 789.034,683.96 789.594,683.96 790.153,683.96 790.712,683.96 791.271,683.96 791.831,683.96 792.39,683.96 792.949,683.96 793.508,683.96 794.068,683.96 794.627,683.96 795.186,683.96 795.745,683.96 796.305,683.96 796.864,683.96 797.423,683.96 797.982,683.96 798.542,683.96 799.101,683.96 799.66,683.96 800.219,683.96 800.779,683.96 801.338,683.96 801.897,683.96 802.456,683.96 803.016,683.96 803.575,683.96 804.134,683.96 804.693,683.96 805.253,683.96 805.812,683.96 806.371,683.96 806.931,683.96 807.49,683.96 808.049,683.96 808.608,683.96 809.168,683.96 809.727,683.96 810.286,683.96 810.845,683.96 811.405,683.96 811.964,683.96 812.523,683.96 813.082,683.96 813.642,683.96 814.201,683.96 814.76,683.96 815.319,683.96 815.879,683.96 816.438,683.96 816.997,683.96 817.556,683.96 818.116,683.96 818.675,683.96 819.234,683.96 819.793,683.96 820.353,683.96 820.912,683.96 821.471,683.96 822.03,683.96 822.59,683.96 823.149,683.96 823.708,683.96 824.267,683.96 824.827,683.96 825.386,683.96 825.945,683.96 826.504,683.96 827.064,683.96 827.623,683.96 828.182,683.96 828.741,683.96 829.301,683.96 829.86,683.96 830.419,683.96 830.978,683.96 831.538,683.96 832.097,683.96 832.656,683.96 833.215,683.96 833.775,683.96 834.334,683.96 834.893,683.96 835.452,683.96 836.012,683.96 836.571,683.96 837.13,683.96 837.689,683.96 838.249,683.96 838.808,683.96 839.367,683.96 839.926,683.96 840.486,683.96 841.045,683.96 841.604,683.96 842.163,683.96 842.723,683.96 843.282,683.96 843.841,683.96 844.4,683.96 844.96,683.96 845.519,683.96 846.078,683.96 846.637,683.96 847.197,683.96 847.756,683.96 848.315,683.96 848.874,683.96 849.434,683.96 849.993,683.96 850.552,683.96 851.111,683.96 851.671,683.96 852.23,683.96 852.789,683.96 853.348,683.96 853.908,683.96 854.467,683.96 855.026,683.96 855.585,683.96 856.145,683.96 856.704,683.96 857.263,683.96 857.822,683.96 858.382,683.96 858.941,683.96 859.5,683.96 860.059,683.96 860.619,683.96 861.178,683.96 861.737,683.96 862.296,683.96 862.856,683.96 863.415,683.96 863.974,683.96 864.533,683.96 865.093,683.96 865.652,683.96 866.211,683.96 866.77,683.96 867.33,683.96 867.889,683.96 868.448,683.96 869.007,683.96 869.567,683.96 870.126,683.96 870.685,683.96 871.244,683.96 871.804,683.96 872.363,683.96 872.922,683.96 873.481,683.96 874.041,683.96 874.6,683.96 875.159,683.96 875.718,683.96 876.278,683.96 876.837,683.96 877.396,683.96 877.955,683.96 878.515,683.96 879.074,683.96 879.633,683.96 880.192,683.96 880.752,683.96 881.311,683.96 881.87,683.96 882.429,683.96 882.989,683.96 883.548,683.96 884.107,683.96 884.666,683.96 885.226,683.96 885.785,683.96 886.344,683.96 886.903,683.96 887.463,683.96 888.022,683.96 888.581,683.96 889.14,683.96 889.7,683.96 890.259,683.96 890.818,683.96 891.377,683.96 891.937,683.96 892.496,683.96 893.055,683.96 893.614,683.96 894.174,683.96 894.733,683.96 895.292,683.96 895.851,683.96 896.411,683.96 896.97,683.96 897.529,683.96 898.088,683.96 898.648,683.96 899.207,683.96 899.766,683.96 900.325,683.96 900.885,683.96 901.444,683.96 902.003,683.96 902.562,683.96 903.122,683.96 903.681,683.96 904.24,683.96 904.799,683.96 905.359,683.96 905.918,683.96 906.477,683.96 907.036,683.96 907.596,683.96 908.155,683.96 908.714,683.96 909.273,683.96 909.833,683.96 910.392,683.96 910.951,683.96 911.51,683.96 912.07,683.96 912.629,683.96 913.188,683.96 913.747,683.96 914.307,683.96 914.866,683.96 915.425,683.96 915.984,683.96 916.544,683.96 917.103,683.96 917.662,683.96 918.221,683.96 918.781,683.96 919.34,683.96 919.899,683.96 920.458,683.96 921.018,683.96 921.577,683.96 922.136,683.96 922.695,683.96 923.255,683.96 923.814,683.96 924.373,683.96 924.932,683.96 925.492,683.96 926.051,683.96 926.61,683.96 927.169,683.96 927.729,683.96 928.288,683.96 928.847,683.96 929.406,683.96 929.966,683.96 930.525,683.96 931.084,683.96 931.644,683.96 932.203,683.96 932.762,683.96 933.321,683.96 933.881,683.96 934.44,683.96 934.999,683.96 935.558,683.96 936.118,683.96 936.677,683.96 937.236,683.96 937.795,683.96 938.355,683.96 938.914,683.96 939.473,683.96 940.032,683.96 940.592,683.96 941.151,683.96 941.71,683.96 942.269,683.96 942.829,683.96 943.388,683.96 943.947,683.96 944.506,683.96 945.066,683.96 945.625,683.96 946.184,683.96 946.743,683.96 947.303,683.96 947.862,683.96 948.421,683.96 948.98,683.96 949.54,683.96 950.099,683.96 950.658,683.96 951.217,683.96 951.777,683.96 952.336,683.96 952.895,683.96 953.454,683.96 954.014,683.96 954.573,683.96 955.132,683.96 955.691,683.96 956.251,683.96 956.81,683.96 957.369,683.96 957.928,683.96 958.488,683.96 959.047,683.96 959.606,683.96 960.165,683.96 960.725,683.96 961.284,683.96 961.843,683.96 962.402,683.96 962.962,683.96 963.521,683.96 964.08,683.96 964.639,683.96 965.199,683.96 965.758,683.96 966.317,683.96 966.876,683.96 967.436,683.96 967.995,683.96 968.554,683.96 969.113,683.96 969.673,683.96 970.232,683.96 970.791,683.96 971.35,683.96 971.91,683.96 972.469,683.96 973.028,683.96 973.587,683.96 974.147,683.96 974.706,683.96 975.265,683.96 975.824,683.96 976.384,683.96 976.943,683.96 977.502,683.96 978.061,683.96 978.621,683.96 979.18,683.96 979.739,683.96 980.298,683.96 980.858,683.96 981.417,683.96 981.976,683.96 982.535,683.96 983.095,683.96 983.654,683.96 984.213,683.96 984.772,683.96 985.332,683.96 985.891,683.96 986.45,683.96 987.009,683.96 987.569,683.96 988.128,683.96 988.687,683.96 989.246,683.96 989.806,683.96 990.365,683.96 990.924,683.96 991.483,683.96 992.043,683.96 992.602,683.96 993.161,683.96 993.72,683.96 994.28,683.96 994.839,683.96 995.398,683.96 995.957,683.96 996.517,683.96 997.076,683.96 997.635,683.96 998.194,683.96 998.754,683.96 999.313,683.96 999.872,683.96 1000.43,683.96 1000.99,683.96 1001.55,683.96 1002.11,683.96 1002.67,683.96 1003.23,683.96 1003.79,683.96 1004.35,683.96 1004.91,683.96 1005.46,683.96 1006.02,683.96 1006.58,683.96 1007.14,683.96 1007.7,683.96 1008.26,683.96 1008.82,683.96 1009.38,683.96 1009.94,683.96 1010.5,683.96 1011.06,683.96 1011.62,683.96 1012.18,683.96 1012.73,683.96 1013.29,683.96 1013.85,683.96 1014.41,683.96 1014.97,683.96 1015.53,683.96 1016.09,683.96 1016.65,683.96 1017.21,683.96 1017.77,683.96 1018.33,683.96 1018.89,683.96 1019.45,683.96 1020.01,683.96 1020.56,683.96 1021.12,683.96 1021.68,683.96 1022.24,683.96 1022.8,683.96 1023.36,683.96 1023.92,683.96 1024.48,683.96 1025.04,683.96 1025.6,683.96 1026.16,683.96 1026.72,683.96 1027.28,683.96 1027.83,683.96 1028.39,683.96 1028.95,683.96 1029.51,683.96 1030.07,683.96 1030.63,683.96 1031.19,683.96 1031.75,683.96 1032.31,683.96 1032.87,683.96 1033.43,683.96 1033.99,683.96 1034.55,683.96 1035.1,683.96 1035.66,683.96 1036.22,683.96 1036.78,683.96 1037.34,683.96 1037.9,683.96 1038.46,683.96 1039.02,683.96 1039.58,683.96 1040.14,683.96 1040.7,683.96 1041.26,683.96 1041.82,683.96 1042.38,683.96 1042.93,683.96 1043.49,683.96 1044.05,683.96 1044.61,683.96 1045.17,683.96 1045.73,683.96 1046.29,683.96 1046.85,683.96 1047.41,683.96 1047.97,683.96 1048.53,683.96 1049.09,683.96 1049.65,683.96 1050.2,683.96 1050.76,683.96 1051.32,683.96 1051.88,683.96 1052.44,683.96 1053,683.96 1053.56,683.96 1054.12,683.96 1054.68,683.96 1055.24,683.96 1055.8,683.96 1056.36,683.96 1056.92,683.96 1057.48,683.96 1058.03,683.96 1058.59,683.96 1059.15,683.96 1059.71,683.96 1060.27,683.96 1060.83,683.96 1061.39,683.96 1061.95,683.96 1062.51,683.96 1063.07,683.96 1063.63,683.96 1064.19,683.96 1064.75,683.96 1065.3,683.96 1065.86,683.96 1066.42,683.96 1066.98,683.96 1067.54,683.96 1068.1,683.96 1068.66,683.96 1069.22,683.96 1069.78,683.96 1070.34,683.96 1070.9,683.96 1071.46,683.96 1072.02,683.96 1072.57,683.96 1073.13,683.96 1073.69,683.96 1074.25,683.96 1074.81,683.96 1075.37,683.96 1075.93,683.96 1076.49,683.96 1077.05,683.96 1077.61,683.96 1078.17,683.96 1078.73,683.96 1079.29,683.96 1079.85,683.96 1080.4,683.96 1080.96,683.96 1081.52,683.96 1082.08,683.96 1082.64,683.96 1083.2,683.96 1083.76,683.96 1084.32,683.96 1084.88,683.96 1085.44,683.96 1086,683.96 1086.56,683.96 1087.12,683.96 1087.67,683.96 1088.23,683.96 1088.79,683.96 1089.35,683.96 1089.91,683.96 1090.47,683.96 1091.03,683.96 1091.59,683.96 1092.15,683.96 1092.71,683.96 1093.27,683.96 1093.83,683.96 1094.39,683.96 1094.94,683.96 1095.5,683.96 1096.06,683.96 1096.62,683.96 1097.18,683.96 1097.74,683.96 1098.3,683.96 1098.86,683.96 1099.42,683.96 1099.98,683.96 1100.54,683.96 1101.1,683.96 1101.66,683.96 1102.22,683.96 1102.77,683.96 1103.33,683.96 1103.89,683.96 1104.45,683.96 1105.01,683.96 1105.57,683.96 1106.13,683.96 1106.69,683.96 1107.25,683.96 1107.81,683.96 1108.37,683.96 1108.93,683.96 1109.49,683.96 1110.04,683.96 1110.6,683.96 1111.16,683.96 1111.72,683.96 1112.28,683.96 1112.84,683.96 1113.4,683.96 1113.96,683.96 1114.52,683.96 1115.08,683.96 1115.64,683.96 1116.2,683.96 1116.76,683.96 1117.31,683.96 1117.87,683.96 1118.43,683.96 1118.99,683.96 1119.55,683.96 1120.11,683.96 1120.67,683.96 1121.23,683.96 1121.79,683.96 1122.35,683.96 1122.91,683.96 1123.47,683.96 1124.03,683.96 1124.59,683.96 1125.14,683.96 1125.7,683.96 1126.26,683.96 1126.82,683.96 1127.38,683.96 1127.94,683.96 1128.5,683.96 1129.06,683.96 1129.62,683.96 1130.18,683.96 1130.74,683.96 1131.3,683.96 1131.86,683.96 1132.41,683.96 1132.97,683.96 1133.53,683.96 1134.09,683.96 1134.65,683.96 1135.21,683.96 1135.77,683.96 1136.33,683.96 1136.89,683.96 1137.45,683.96 1138.01,683.96 1138.57,683.96 1139.13,683.96 1139.68,683.96 1140.24,683.96 1140.8,683.96 1141.36,683.96 1141.92,683.96 1142.48,683.96 1143.04,683.96 1143.6,683.96 1144.16,683.96 1144.72,683.96 1145.28,683.96 1145.84,683.96 1146.4,683.96 1146.96,683.96 1147.51,683.96 1148.07,683.96 1148.63,683.96 1149.19,683.96 1149.75,683.96 1150.31,683.96 1150.87,683.96 1151.43,683.96 1151.99,683.96 1152.55,683.96 1153.11,683.96 1153.67,683.96 1154.23,683.96 1154.78,683.96 1155.34,683.96 1155.9,683.96 1156.46,683.96 1157.02,683.96 1157.58,683.96 1158.14,683.96 1158.7,683.96 1159.26,683.96 1159.82,683.96 1160.38,683.96 1160.94,683.96 1161.5,683.96 1162.05,683.96 1162.61,683.96 1163.17,683.96 1163.73,683.96 1164.29,683.96 1164.85,683.96 1165.41,683.96 1165.97,683.96 1166.53,683.96 1167.09,683.96 1167.65,683.96 1168.21,683.96 1168.77,683.96 1169.33,683.96 1169.88,683.96 1170.44,683.96 1171,683.96 1171.56,683.96 1172.12,683.96 1172.68,683.96 1173.24,683.96 1173.8,683.96 1174.36,683.96 1174.92,683.96 1175.48,683.96 1176.04,683.96 1176.6,683.96 1177.15,683.96 1177.71,683.96 1178.27,683.96 1178.83,683.96 1179.39,683.96 1179.95,683.96 1180.51,683.96 1181.07,683.96 1181.63,683.96 1182.19,683.96 1182.75,683.96 1183.31,683.96 1183.87,683.96 1184.43,683.96 1184.98,683.96 1185.54,683.96 1186.1,683.96 1186.66,683.96 1187.22,683.96 1187.78,683.96 1188.34,683.96 1188.9,683.96 1189.46,683.96 1190.02,683.96 1190.58,683.96 1191.14,683.96 1191.7,683.96 1192.25,683.96 1192.81,683.96 1193.37,683.96 1193.93,683.96 1194.49,683.96 1195.05,683.96 1195.61,683.96 1196.17,683.96 1196.73,683.96 1197.29,683.96 1197.85,683.96 1198.41,683.96 1198.97,683.96 1199.52,683.96 1200.08,683.96 1200.64,683.96 1201.2,683.96 1201.76,683.96 1202.32,683.96 1202.88,683.96 1203.44,683.96 1204,683.96 1204.56,683.96 1205.12,683.96 1205.68,683.96 1206.24,683.96 1206.8,683.96 1207.35,683.96 1207.91,683.96 1208.47,683.96 1209.03,683.96 1209.59,683.96 1210.15,683.96 1210.71,683.96 1211.27,683.96 1211.83,683.96 1212.39,683.96 1212.95,683.96 1213.51,683.96 1214.07,683.96 1214.62,683.96 1215.18,683.96 1215.74,683.96 1216.3,683.96 1216.86,683.96 1217.42,683.96 1217.98,683.96 1218.54,683.96 1219.1,683.96 1219.66,683.96 1220.22,683.96 1220.78,683.96 1221.34,683.96 1221.89,683.96 1222.45,683.96 1223.01,683.96 1223.57,683.96 1224.13,683.96 1224.69,683.96 1225.25,683.96 1225.81,683.96 1226.37,683.96 1226.93,683.96 1227.49,683.96 1228.05,683.96 1228.61,683.96 1229.17,683.96 1229.72,683.96 1230.28,683.96 1230.84,683.96 1231.4,683.96 1231.96,683.96 1232.52,683.96 1233.08,683.96 1233.64,683.96 1234.2,683.96 1234.76,683.96 1235.32,683.96 1235.88,683.96 1236.44,683.96 1236.99,683.96 1237.55,683.96 1238.11,683.96 1238.67,683.96 1239.23,683.96 1239.79,683.96 1240.35,683.96 1240.91,683.96 1241.47,683.96 1242.03,683.96 1242.59,683.96 1243.15,683.96 1243.71,683.96 1244.26,683.96 1244.82,683.96 1245.38,683.96 1245.94,683.96 1246.5,683.96 1247.06,683.96 1247.62,683.96 1248.18,683.96 1248.74,683.96 1249.3,683.96 1249.86,683.96 1250.42,683.96 1250.98,683.96 1251.54,683.96 1252.09,683.96 1252.65,683.96 1253.21,683.96 1253.77,683.96 1254.33,683.96 1254.89,683.96 1255.45,683.96 1256.01,683.96 1256.57,683.96 1257.13,683.96 1257.69,683.96 1258.25,683.96 1258.81,683.96 1259.36,683.96 1259.92,683.96 1260.48,683.96 1261.04,683.96 1261.6,683.96 1262.16,683.96 1262.72,683.96 1263.28,683.96 1263.84,683.96 1264.4,683.96 1264.96,683.96 1265.52,683.96 1266.08,683.96 1266.63,683.96 1267.19,683.96 1267.75,683.96 1268.31,683.96 1268.87,683.96 1269.43,683.96 1269.99,683.96 1270.55,683.96 1271.11,683.96 1271.67,683.96 1272.23,683.96 1272.79,683.96 1273.35,683.96 1273.91,683.96 1274.46,683.96 1275.02,683.96 1275.58,683.96 1276.14,683.96 1276.7,683.96 1277.26,683.96 1277.82,683.96 1278.38,683.96 1278.94,683.96 1279.5,683.96 1280.06,683.96 1280.62,683.96 1281.18,683.96 1281.73,683.96 1282.29,683.96 1282.85,683.96 1283.41,683.96 1283.97,683.96 1284.53,683.96 1285.09,683.96 1285.65,683.96 1286.21,683.96 1286.77,683.96 1287.33,683.96 1287.89,683.96 1288.45,683.96 1289,683.96 1289.56,683.96 1290.12,683.96 1290.68,683.96 1291.24,683.96 1291.8,683.96 1292.36,683.96 1292.92,683.96 1293.48,683.96 1294.04,683.96 1294.6,683.96 1295.16,683.96 1295.72,683.96 1296.28,683.96 1296.83,683.96 1297.39,683.96 1297.95,683.96 1298.51,683.96 1299.07,683.96 1299.63,683.96 1300.19,683.96 1300.75,683.96 1301.31,683.96 1301.87,683.96 1302.43,683.96 1302.99,683.96 1303.55,683.96 1304.1,683.96 1304.66,683.96 1305.22,683.96 1305.78,683.96 1306.34,683.96 1306.9,683.96 1307.46,683.96 1308.02,683.96 1308.58,683.96 1309.14,683.96 1309.7,683.96 1310.26,683.96 1310.82,683.96 1311.38,683.96 1311.93,683.96 1312.49,683.96 1313.05,683.96 1313.61,683.96 1314.17,683.96 1314.73,683.96 1315.29,683.96 1315.85,683.96 1316.41,683.96 1316.97,683.96 1317.53,683.96 1318.09,683.96 1318.65,683.96 1319.2,683.96 1319.76,683.96 1320.32,683.96 1320.88,683.96 1321.44,683.96 1322,683.96 1322.56,683.96 1323.12,683.96 1323.68,683.96 1324.24,683.96 1324.8,683.96 1325.36,683.96 1325.92,683.96 1326.47,683.96 1327.03,683.96 1327.59,683.96 1328.15,683.96 1328.71,683.96 1329.27,683.96 1329.83,683.96 1330.39,683.96 1330.95,683.96 1331.51,683.96 1332.07,683.96 1332.63,683.96 1333.19,683.96 1333.75,683.96 1334.3,683.96 1334.86,683.96 1335.42,683.96 1335.98,683.96 1336.54,683.96 1337.1,683.96 1337.66,683.96 1338.22,683.96 1338.78,683.96 1339.34,683.96 1339.9,683.96 1340.46,683.96 1341.02,683.96 1341.57,683.96 1342.13,683.96 1342.69,683.96 1343.25,683.96 1343.81,683.96 1344.37,683.96 1344.93,683.96 1345.49,683.96 1346.05,683.96 1346.61,683.96 1347.17,683.96 1347.73,683.96 1348.29,683.96 1348.84,683.96 1349.4,683.96 1349.96,683.96 1350.52,683.96 1351.08,683.96 1351.64,683.96 1352.2,683.96 1352.76,683.96 1353.32,683.96 1353.88,683.96 1354.44,683.96 1355,683.96 1355.56,683.96 1356.12,683.96 1356.67,683.96 1357.23,683.96 1357.79,683.96 1358.35,683.96 1358.91,683.96 1359.47,683.96 1360.03,683.96 1360.59,683.96 1361.15,683.96 1361.71,683.96 1362.27,683.96 1362.83,683.96 1363.39,683.96 1363.94,683.96 1364.5,683.96 1365.06,683.96 1365.62,683.96 1366.18,683.96 1366.74,683.96 1367.3,683.96 1367.86,683.96 1368.42,683.96 1368.98,683.96 1369.54,683.96 1370.1,683.96 1370.66,683.96 1371.21,683.96 1371.77,683.96 1372.33,683.96 1372.89,683.96 1373.45,683.96 1374.01,683.96 1374.57,683.96 1375.13,683.96 1375.69,683.96 1376.25,683.96 1376.81,683.96 1377.37,683.96 1377.93,683.96 1378.49,683.96 1379.04,683.96 1379.6,683.96 1380.16,683.96 1380.72,683.96 1381.28,683.96 1381.84,683.96 1382.4,683.96 1382.96,683.96 1383.52,683.96 1384.08,683.96 1384.64,683.96 1385.2,683.96 1385.76,683.96 1386.31,683.96 1386.87,683.96 1387.43,683.96 1387.99,683.96 1388.55,683.96 1389.11,683.96 1389.67,683.96 1390.23,683.96 1390.79,683.96 1391.35,683.96 1391.91,683.96 1392.47,683.96 1393.03,683.96 1393.58,683.96 1394.14,683.96 1394.7,683.96 1395.26,683.96 1395.82,683.96 1396.38,683.96 1396.94,683.96 1397.5,683.96 1398.06,683.96 1398.62,683.96 1399.18,683.96 1399.74,683.96 1400.3,683.96 1400.86,683.96 1401.41,683.96 1401.97,683.96 1402.53,683.96 1403.09,683.96 1403.65,683.96 1404.21,683.96 1404.77,683.96 1405.33,683.96 1405.89,683.96 1406.45,683.96 1407.01,683.96 1407.57,683.96 1408.13,683.96 1408.68,683.96 1409.24,683.96 1409.8,683.96 1410.36,683.96 1410.92,683.96 1411.48,683.96 1412.04,683.96 1412.6,683.96 1413.16,683.96 1413.72,683.96 1414.28,683.96 1414.84,683.96 1415.4,683.96 1415.95,683.96 1416.51,683.96 1417.07,683.96 1417.63,683.96 1418.19,683.96 1418.75,683.96 1419.31,683.96 1419.87,683.96 1420.43,683.96 1420.99,683.96 1421.55,683.96 1422.11,683.96 1422.67,683.96 1423.23,683.96 1423.78,683.96 1424.34,683.96 1424.9,683.96 1425.46,683.96 1426.02,683.96 1426.58,683.96 1427.14,683.96 1427.7,683.96 1428.26,683.96 1428.82,683.96 1429.38,683.96 1429.94,683.96 1430.5,683.96 1431.05,683.96 1431.61,683.96 1432.17,683.96 1432.73,683.96 1433.29,683.96 1433.85,683.96 1434.41,683.96 1434.97,683.96 1435.53,683.96 1436.09,683.96 1436.65,683.96 1437.21,683.96 1437.77,683.96 1438.33,683.96 1438.88,683.96 1439.44,683.96 1440,683.96 1440.56,683.96 1441.12,683.96 1441.68,683.96 1442.24,683.96 1442.8,683.96 1443.36,683.96 1443.92,683.96 1444.48,683.96 1445.04,683.96 1445.6,683.96 1446.15,683.96 1446.71,683.96 1447.27,683.96 1447.83,683.96 1448.39,683.96 1448.95,683.96 1449.51,683.96 1450.07,683.96 1450.63,683.96 1451.19,683.96 1451.75,683.96 1452.31,683.96 1452.87,683.96 1453.42,683.96 1453.98,683.96 1454.54,683.96 1455.1,683.96 1455.66,683.96 1456.22,683.96 1456.78,683.96 1457.34,683.96 1457.9,683.96 1458.46,683.96 1459.02,683.96 1459.58,683.96 1460.14,683.96 1460.7,683.96 1461.25,683.96 1461.81,683.96 1462.37,683.96 1462.93,683.96 1463.49,683.96 1464.05,683.96 1464.61,683.96 1465.17,683.96 1465.73,683.96 1466.29,683.96 1466.85,683.96 1467.41,683.96 1467.97,683.96 1468.52,683.96 1469.08,683.96 1469.64,683.96 1470.2,683.96 1470.76,683.96 1471.32,683.96 1471.88,683.96 1472.44,683.96 1473,683.96 1473.56,683.96 1474.12,683.96 1474.68,683.96 1475.24,683.96 1475.79,683.96 1476.35,683.96 1476.91,683.96 1477.47,683.96 1478.03,683.96 1478.59,683.96 1479.15,683.96 1479.71,683.96 1480.27,683.96 1480.83,683.96 1481.39,683.96 1481.95,683.96 1482.51,683.96 1483.07,683.96 1483.62,683.96 1484.18,683.96 1484.74,683.96 1485.3,683.96 1485.86,683.96 1486.42,683.96 1486.98,683.96 1487.54,683.96 1488.1,683.96 1488.66,683.96 1489.22,683.96 1489.78,683.96 1490.34,683.96 1490.89,683.96 1491.45,683.96 1492.01,683.96 1492.57,683.96 1493.13,683.96 1493.69,683.96 1494.25,683.96 1494.81,683.96 1495.37,683.96 1495.93,683.96 1496.49,683.96 1497.05,683.96 1497.61,683.96 1498.16,683.96 1498.72,683.96 1499.28,683.96 1499.84,683.96 1500.4,683.96 1500.96,683.96 1501.52,683.96 1502.08,683.96 1502.64,683.96 1503.2,683.96 1503.76,683.96 1504.32,683.96 1504.88,683.96 1505.44,683.96 1505.99,683.96 1506.55,683.96 1507.11,683.96 1507.67,683.96 1508.23,683.96 1508.79,683.96 1509.35,683.96 1509.91,683.96 1510.47,683.96 1511.03,683.96 1511.59,683.96 1512.15,683.96 1512.71,683.96 1513.26,683.96 1513.82,683.96 1514.38,683.96 1514.94,683.96 1515.5,683.96 1516.06,683.96 1516.62,683.96 1517.18,683.96 1517.74,683.96 1518.3,683.96 1518.86,683.96 1519.42,683.96 1519.98,683.96 1520.53,683.96 1521.09,683.96 1521.65,683.96 1522.21,683.96 1522.77,683.96 1523.33,683.96 1523.89,683.96 1524.45,683.96 1525.01,683.96 1525.57,683.96 1526.13,683.96 1526.69,683.96 1527.25,683.96 1527.81,683.96 1528.36,683.96 1528.92,683.96 1529.48,683.96 1530.04,683.96 1530.6,683.96 1531.16,683.96 1531.72,683.96 1532.28,683.96 1532.84,683.96 1533.4,683.96 1533.96,683.96 1534.52,683.96 1535.08,683.96 1535.63,683.96 1536.19,683.96 1536.75,683.96 1537.31,683.96 1537.87,683.96 1538.43,683.96 1538.99,683.96 1539.55,683.96 1540.11,683.96 1540.67,683.96 1541.23,683.96 1541.79,683.96 1542.35,683.96 1542.9,683.96 1543.46,683.96 1544.02,683.96 1544.58,683.96 1545.14,683.96 1545.7,683.96 1546.26,683.96 1546.82,683.96 1547.38,683.96 1547.94,683.96 1548.5,683.96 1549.06,683.96 1549.62,683.96 1550.18,683.96 1550.73,683.96 1551.29,683.96 1551.85,683.96 1552.41,683.96 1552.97,683.96 1553.53,683.96 1554.09,683.96 1554.65,683.96 1555.21,683.96 1555.77,683.96 1556.33,683.96 1556.89,683.96 1557.45,683.96 1558,683.96 1558.56,683.96 1559.12,683.96 1559.68,683.96 1560.24,683.96 1560.8,683.96 1561.36,683.96 1561.92,683.96 1562.48,683.96 1563.04,683.96 1563.6,683.96 1564.16,683.96 1564.72,683.96 1565.28,683.96 1565.83,683.96 1566.39,683.96 1566.95,683.96 1567.51,683.96 1568.07,683.96 1568.63,683.96 1569.19,683.96 1569.75,683.96 1570.31,683.96 1570.87,683.96 1571.43,683.96 1571.99,683.96 1572.55,683.96 1573.1,683.96 1573.66,683.96 1574.22,683.96 1574.78,683.96 1575.34,683.96 1575.9,683.96 1576.46,683.96 1577.02,683.96 1577.58,683.96 1578.14,683.96 1578.7,683.96 1579.26,683.96 1579.82,683.96 1580.37,683.96 1580.93,683.96 1581.49,683.96 1582.05,683.96 1582.61,683.96 1583.17,683.96 1583.73,683.96 1584.29,683.96 1584.85,683.96 1585.41,683.96 1585.97,683.96 1586.53,683.96 1587.09,683.96 1587.65,683.96 1588.2,683.96 1588.76,683.96 1589.32,683.96 1589.88,683.96 1590.44,683.96 1591,683.96 1591.56,683.96 1592.12,683.96 1592.68,683.96 1593.24,683.96 1593.8,683.96 1594.36,683.96 1594.92,683.96 1595.47,683.96 1596.03,683.96 1596.59,683.96 1597.15,683.96 1597.71,683.96 1598.27,683.96 1598.83,683.96 1599.39,683.96 1599.95,683.96 1600.51,683.96 1601.07,683.96 1601.63,683.96 1602.19,683.96 1602.74,683.96 1603.3,683.96 1603.86,683.96 1604.42,683.96 1604.98,683.96 1605.54,683.96 1606.1,683.96 1606.66,683.96 1607.22,683.96 1607.78,683.96 1608.34,683.96 1608.9,683.96 1609.46,683.96 1610.02,683.96 1610.57,683.96 1611.13,683.96 1611.69,683.96 1612.25,683.96 1612.81,683.96 1613.37,683.96 1613.93,683.96 1614.49,683.96 1615.05,683.96 1615.61,683.96 1616.17,683.96 1616.73,683.96 1617.29,683.96 1617.84,683.96 1618.4,683.96 1618.96,683.96 1619.52,683.96 1620.08,683.96 1620.64,683.96 1621.2,683.96 1621.76,683.96 1622.32,683.96 1622.88,683.96 1623.44,683.96 1624,683.96 1624.56,683.96 1625.11,683.96 1625.67,683.96 1626.23,683.96 1626.79,683.96 1627.35,683.96 1627.91,683.96 1628.47,683.96 1629.03,683.96 1629.59,683.96 1630.15,683.96 1630.71,683.96 1631.27,683.96 1631.83,683.96 1632.39,683.96 1632.94,683.96 1633.5,683.96 1634.06,683.96 1634.62,683.96 1635.18,683.96 1635.74,683.96 1636.3,683.96 1636.86,683.96 1637.42,683.96 1637.98,683.96 1638.54,683.96 1639.1,683.96 1639.66,683.96 1640.21,683.96 1640.77,683.96 1641.33,683.96 1641.89,683.96 1642.45,683.96 1643.01,683.96 1643.57,683.96 1644.13,683.96 1644.69,683.96 1645.25,683.96 1645.81,683.96 1646.37,683.96 1646.93,683.96 1647.48,683.96 1648.04,683.96 1648.6,683.96 1649.16,683.96 1649.72,683.96 1650.28,683.96 1650.84,683.96 1651.4,683.96 1651.96,683.96 1652.52,683.96 1653.08,683.96 1653.64,683.96 1654.2,683.96 1654.76,683.96 1655.31,683.96 1655.87,683.96 1656.43,683.96 1656.99,683.96 1657.55,683.96 1658.11,683.96 1658.67,683.96 1659.23,683.96 1659.79,683.96 1660.35,683.96 1660.91,683.96 1661.47,683.96 1662.03,683.96 1662.58,683.96 1663.14,683.96 1663.7,683.96 1664.26,683.96 1664.82,683.96 1665.38,683.96 1665.94,683.96 1666.5,683.96 1667.06,683.96 1667.62,683.96 1668.18,683.96 1668.74,683.96 1669.3,683.96 1669.85,683.96 1670.41,683.96 1670.97,683.96 1671.53,683.96 1672.09,683.96 1672.65,683.96 1673.21,683.96 1673.77,683.96 1674.33,683.96 1674.89,683.96 1675.45,683.96 1676.01,683.96 1676.57,683.96 1677.13,683.96 1677.68,683.96 1678.24,683.96 1678.8,683.96 1679.36,683.96 1679.92,683.96 1680.48,683.96 1681.04,683.96 1681.6,683.96 1682.16,683.96 1682.72,683.96 1683.28,683.96 1683.84,683.96 1684.4,683.96 1684.95,683.96 1685.51,683.96 1686.07,683.96 1686.63,683.96 1687.19,683.96 1687.75,683.96 1688.31,683.96 1688.87,683.96 1689.43,683.96 1689.99,683.96 1690.55,683.96 1691.11,683.96 1691.67,683.96 1692.23,683.96 1692.78,683.96 1693.34,683.96 1693.9,683.96 1694.46,683.96 1695.02,683.96 1695.58,683.96 1696.14,683.96 1696.7,683.96 1697.26,683.96 1697.82,683.96 1698.38,683.96 1698.94,683.96 1699.5,683.96 1700.05,683.96 1700.61,683.96 1701.17,683.96 1701.73,683.96 1702.29,683.96 1702.85,683.96 1703.41,683.96 1703.97,683.96 1704.53,683.96 1705.09,683.96 1705.65,683.96 1706.21,683.96 1706.77,683.96 1707.32,683.96 1707.88,683.96 1708.44,683.96 1709,683.96 1709.56,683.96 1710.12,683.96 1710.68,683.96 1711.24,683.96 1711.8,683.96 1712.36,683.96 1712.92,683.96 1713.48,683.96 1714.04,683.96 1714.6,683.96 1715.15,683.96 1715.71,683.96 1716.27,683.96 1716.83,683.96 1717.39,683.96 1717.95,683.96 1718.51,683.96 1719.07,683.96 1719.63,683.96 1720.19,683.96 1720.75,683.96 1721.31,683.96 1721.87,683.96 1722.42,683.96 1722.98,683.96 1723.54,683.96 1724.1,683.96 1724.66,683.96 1725.22,683.96 1725.78,683.96 1726.34,683.96 1726.9,683.96 1727.46,683.96 1728.02,683.96 1728.58,683.96 1729.14,683.96 1729.69,683.96 1730.25,683.96 1730.81,683.96 1731.37,683.96 1731.93,683.96 1732.49,683.96 1733.05,683.96 1733.61,683.96 1734.17,683.96 1734.73,683.96 1735.29,683.96 1735.85,683.96 1736.41,683.96 1736.97,683.96 1737.52,683.96 1738.08,683.96 1738.64,683.96 1739.2,683.96 1739.76,683.96 1740.32,683.96 1740.88,683.96 1741.44,683.96 1742,683.96 1742.56,683.96 1743.12,683.96 1743.68,683.96 1744.24,683.96 1744.79,683.96 1745.35,683.96 1745.91,683.96 1746.47,683.96 1747.03,683.96 1747.59,683.96 1748.15,683.96 1748.71,683.96 1749.27,683.96 1749.83,683.96 1750.39,683.96 1750.95,683.96 1751.51,683.96 1752.06,683.96 1752.62,683.96 1753.18,683.96 1753.74,683.96 1754.3,683.96 1754.86,683.96 1755.42,683.96 1755.98,683.96 1756.54,683.96 1757.1,683.96 1757.66,683.96 1758.22,683.96 1758.78,683.96 1759.34,683.96 1759.89,683.96 1760.45,683.96 1761.01,683.96 1761.57,683.96 1762.13,683.96 1762.69,683.96 1763.25,683.96 1763.81,683.96 1764.37,683.96 1764.93,683.96 1765.49,683.96 1766.05,683.96 1766.61,683.96 1767.16,683.96 1767.72,683.96 1768.28,683.96 1768.84,683.96 1769.4,683.96 1769.96,683.96 1770.52,683.96 1771.08,683.96 1771.64,683.96 1772.2,683.96 1772.76,683.96 1773.32,683.96 1773.88,683.96 1774.43,683.96 1774.99,683.96 1775.55,683.96 1776.11,683.96 1776.67,683.96 1777.23,683.96 1777.79,683.96 1778.35,683.96 1778.91,683.96 1779.47,683.96 1780.03,683.96 1780.59,683.96 1781.15,683.96 1781.71,683.96 1782.26,683.96 1782.82,683.96 1783.38,683.96 1783.94,683.96 1784.5,683.96 1785.06,683.96 1785.62,683.96 1786.18,683.96 1786.74,683.96 1787.3,683.96 1787.86,683.96 1788.42,683.96 1788.98,683.96 1789.53,683.96 1790.09,683.96 1790.65,683.96 1791.21,683.96 1791.77,683.96 1792.33,683.96 1792.89,683.96 1793.45,683.96 1794.01,683.96 1794.57,683.96 1795.13,683.96 1795.69,683.96 1796.25,683.96 1796.8,683.96 1797.36,683.96 1797.92,683.96 1798.48,683.96 1799.04,683.96 1799.6,683.96 1800.16,683.96 1800.72,683.96 1801.28,683.96 1801.84,683.96 1802.4,683.96 1802.96,683.96 1803.52,683.96 1804.08,683.96 1804.63,683.96 1805.19,683.96 1805.75,683.96 1806.31,683.96 1806.87,683.96 1807.43,683.96 1807.99,683.96 1808.55,683.96 1809.11,683.96 1809.67,683.96 1810.23,683.96 1810.79,683.96 1811.35,683.96 1811.9,683.96 1812.46,683.96 1813.02,683.96 1813.58,683.96 1814.14,683.96 1814.7,683.96 1815.26,683.96 1815.82,683.96 1816.38,683.96 1816.94,683.96 1817.5,683.96 1818.06,683.96 1818.62,683.96 1819.18,683.96 1819.73,683.96 1820.29,683.96 1820.85,683.96 1821.41,683.96 1821.97,683.96 1822.53,683.96 1823.09,683.96 1823.65,683.96 1824.21,683.96 1824.77,683.96 1825.33,683.96 1825.89,683.96 1826.45,683.96 1827,683.96 1827.56,683.96 1828.12,683.96 1828.68,683.96 1829.24,683.96 1829.8,683.96 1830.36,683.96 1830.92,683.96 1831.48,683.96 1832.04,683.96 1832.6,683.96 1833.16,683.96 1833.72,683.96 1834.27,683.96 1834.83,683.96 1835.39,683.96 1835.95,683.96 1836.51,683.96 1837.07,683.96 1837.63,683.96 1838.19,683.96 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.029156762271897 ± 0.018088117987156163\nProjected Energy: -4.016975494646425 ± (0.004244897167432704, 0.004509854545201364)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.450741</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3505e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1362e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.257e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.373e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.685e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.985e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.3631242916133726\n -0.7590191922770959\n  0.1358418221962232\n  0.157899986946072\n  0.8767114411781414\n  1.530592997097334\n  1.5835732611867455\n  3.0728703303258706\n  3.1256726539518356\n  4.862107221562171\n  6.260694850380599\n  6.402671211183111\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor\nexp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is deterimed by the type of the parameters t, u, and v.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
