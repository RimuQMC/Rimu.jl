var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2146693573365382 ± 0.0018656617898291292\n   G2(1) = 0.917394984190499 ± 0.0007913039559999166\n   G2(2) = 0.98004692213913 ± 0.0010567491556601391\n   G2(3) = 0.990446830004203 ± 0.0014764668040818554\n   G2(4) = 0.98004692213913 ± 0.0010567491556601391\n   G2(5) = 0.917394984190499 ± 0.0007913039559999166\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.003863130904039 ± 0.13718440729035494\n   Replica 2: -3.9897012669818053 ± 0.13180962612353692\n   Replica 3: -4.010294355335717 ± 0.12825147828439176\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip490\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip490)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip491\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip490)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip492\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.54 2211.02,1003.54 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.258 2211.02,746.258 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.978 2211.02,488.978 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.697 2211.02,231.697 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.54 423.181,1003.54 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.258 423.181,746.258 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.978 423.181,488.978 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.697 423.181,231.697 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.18 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.96 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.96 363.608 1260.85 Q363.608 1253.72 361.779 1250.18 Q359.973 1246.62 356.339 1246.62 M356.339 1242.91 Q362.149 1242.91 365.205 1247.52 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.58 365.205 1274.19 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.19 Q344.395 1269.58 344.395 1260.85 Q344.395 1252.1 347.45 1247.52 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M290.043 1016.88 L306.363 1016.88 L306.363 1020.82 L284.418 1020.82 L284.418 1016.88 Q287.08 1014.13 291.664 1009.5 Q296.27 1004.85 297.451 1003.5 Q299.696 1000.98 300.576 999.245 Q301.478 997.486 301.478 995.796 Q301.478 993.041 299.534 991.305 Q297.613 989.569 294.511 989.569 Q292.312 989.569 289.858 990.333 Q287.427 991.097 284.65 992.648 L284.65 987.926 Q287.474 986.791 289.927 986.213 Q292.381 985.634 294.418 985.634 Q299.789 985.634 302.983 988.319 Q306.177 991.004 306.177 995.495 Q306.177 997.625 305.367 999.546 Q304.58 1001.44 302.474 1004.04 Q301.895 1004.71 298.793 1007.93 Q295.691 1011.12 290.043 1016.88 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M316.224 986.259 L334.58 986.259 L334.58 990.194 L320.506 990.194 L320.506 998.666 Q321.524 998.319 322.543 998.157 Q323.562 997.972 324.58 997.972 Q330.367 997.972 333.747 1001.14 Q337.126 1004.31 337.126 1009.73 Q337.126 1015.31 333.654 1018.41 Q330.182 1021.49 323.862 1021.49 Q321.687 1021.49 319.418 1021.12 Q317.173 1020.75 314.765 1020.01 L314.765 1015.31 Q316.849 1016.44 319.071 1017 Q321.293 1017.56 323.77 1017.56 Q327.774 1017.56 330.112 1015.45 Q332.45 1013.34 332.45 1009.73 Q332.45 1006.12 330.112 1004.01 Q327.774 1001.91 323.77 1001.91 Q321.895 1001.91 320.02 1002.32 Q318.168 1002.74 316.224 1003.62 L316.224 986.259 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M356.339 989.338 Q352.728 989.338 350.899 992.903 Q349.094 996.444 349.094 1003.57 Q349.094 1010.68 350.899 1014.25 Q352.728 1017.79 356.339 1017.79 Q359.973 1017.79 361.779 1014.25 Q363.608 1010.68 363.608 1003.57 Q363.608 996.444 361.779 992.903 Q359.973 989.338 356.339 989.338 M356.339 985.634 Q362.149 985.634 365.205 990.241 Q368.284 994.824 368.284 1003.57 Q368.284 1012.3 365.205 1016.91 Q362.149 1021.49 356.339 1021.49 Q350.529 1021.49 347.45 1016.91 Q344.395 1012.3 344.395 1003.57 Q344.395 994.824 347.45 990.241 Q350.529 985.634 356.339 985.634 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M286.062 728.978 L304.418 728.978 L304.418 732.913 L290.344 732.913 L290.344 741.386 Q291.363 741.038 292.381 740.876 Q293.4 740.691 294.418 740.691 Q300.205 740.691 303.585 743.862 Q306.964 747.034 306.964 752.45 Q306.964 758.029 303.492 761.131 Q300.02 764.21 293.701 764.21 Q291.525 764.21 289.256 763.839 Q287.011 763.469 284.603 762.728 L284.603 758.029 Q286.687 759.163 288.909 759.719 Q291.131 760.274 293.608 760.274 Q297.613 760.274 299.951 758.168 Q302.288 756.061 302.288 752.45 Q302.288 748.839 299.951 746.733 Q297.613 744.626 293.608 744.626 Q291.733 744.626 289.858 745.043 Q288.006 745.46 286.062 746.339 L286.062 728.978 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M326.177 732.057 Q322.566 732.057 320.737 735.622 Q318.932 739.163 318.932 746.293 Q318.932 753.399 320.737 756.964 Q322.566 760.506 326.177 760.506 Q329.811 760.506 331.617 756.964 Q333.446 753.399 333.446 746.293 Q333.446 739.163 331.617 735.622 Q329.811 732.057 326.177 732.057 M326.177 728.353 Q331.987 728.353 335.043 732.96 Q338.122 737.543 338.122 746.293 Q338.122 755.02 335.043 759.626 Q331.987 764.21 326.177 764.21 Q320.367 764.21 317.288 759.626 Q314.233 755.02 314.233 746.293 Q314.233 737.543 317.288 732.96 Q320.367 728.353 326.177 728.353 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M356.339 732.057 Q352.728 732.057 350.899 735.622 Q349.094 739.163 349.094 746.293 Q349.094 753.399 350.899 756.964 Q352.728 760.506 356.339 760.506 Q359.973 760.506 361.779 756.964 Q363.608 753.399 363.608 746.293 Q363.608 739.163 361.779 735.622 Q359.973 732.057 356.339 732.057 M356.339 728.353 Q362.149 728.353 365.205 732.96 Q368.284 737.543 368.284 746.293 Q368.284 755.02 365.205 759.626 Q362.149 764.21 356.339 764.21 Q350.529 764.21 347.45 759.626 Q344.395 755.02 344.395 746.293 Q344.395 737.543 347.45 732.96 Q350.529 728.353 356.339 728.353 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M284.835 471.698 L307.057 471.698 L307.057 473.688 L294.511 506.258 L289.627 506.258 L301.432 475.633 L284.835 475.633 L284.835 471.698 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M316.224 471.698 L334.58 471.698 L334.58 475.633 L320.506 475.633 L320.506 484.105 Q321.524 483.758 322.543 483.596 Q323.562 483.41 324.58 483.41 Q330.367 483.41 333.747 486.582 Q337.126 489.753 337.126 495.17 Q337.126 500.748 333.654 503.85 Q330.182 506.929 323.862 506.929 Q321.687 506.929 319.418 506.558 Q317.173 506.188 314.765 505.447 L314.765 500.748 Q316.849 501.883 319.071 502.438 Q321.293 502.994 323.77 502.994 Q327.774 502.994 330.112 500.887 Q332.45 498.781 332.45 495.17 Q332.45 491.559 330.112 489.452 Q327.774 487.346 323.77 487.346 Q321.895 487.346 320.02 487.762 Q318.168 488.179 316.224 489.059 L316.224 471.698 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M356.339 474.776 Q352.728 474.776 350.899 478.341 Q349.094 481.883 349.094 489.012 Q349.094 496.119 350.899 499.683 Q352.728 503.225 356.339 503.225 Q359.973 503.225 361.779 499.683 Q363.608 496.119 363.608 489.012 Q363.608 481.883 361.779 478.341 Q359.973 474.776 356.339 474.776 M356.339 471.073 Q362.149 471.073 365.205 475.679 Q368.284 480.262 368.284 489.012 Q368.284 497.739 365.205 502.346 Q362.149 506.929 356.339 506.929 Q350.529 506.929 347.45 502.346 Q344.395 497.739 344.395 489.012 Q344.395 480.262 347.45 475.679 Q350.529 471.073 356.339 471.073 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M256.664 245.042 L264.303 245.042 L264.303 218.676 L255.992 220.343 L255.992 216.083 L264.256 214.417 L268.932 214.417 L268.932 245.042 L276.571 245.042 L276.571 248.977 L256.664 248.977 L256.664 245.042 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M296.015 217.495 Q292.404 217.495 290.576 221.06 Q288.77 224.602 288.77 231.732 Q288.77 238.838 290.576 242.403 Q292.404 245.944 296.015 245.944 Q299.65 245.944 301.455 242.403 Q303.284 238.838 303.284 231.732 Q303.284 224.602 301.455 221.06 Q299.65 217.495 296.015 217.495 M296.015 213.792 Q301.826 213.792 304.881 218.398 Q307.96 222.982 307.96 231.732 Q307.96 240.458 304.881 245.065 Q301.826 249.648 296.015 249.648 Q290.205 249.648 287.127 245.065 Q284.071 240.458 284.071 231.732 Q284.071 222.982 287.127 218.398 Q290.205 213.792 296.015 213.792 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M326.177 217.495 Q322.566 217.495 320.737 221.06 Q318.932 224.602 318.932 231.732 Q318.932 238.838 320.737 242.403 Q322.566 245.944 326.177 245.944 Q329.811 245.944 331.617 242.403 Q333.446 238.838 333.446 231.732 Q333.446 224.602 331.617 221.06 Q329.811 217.495 326.177 217.495 M326.177 213.792 Q331.987 213.792 335.043 218.398 Q338.122 222.982 338.122 231.732 Q338.122 240.458 335.043 245.065 Q331.987 249.648 326.177 249.648 Q320.367 249.648 317.288 245.065 Q314.233 240.458 314.233 231.732 Q314.233 222.982 317.288 218.398 Q320.367 213.792 326.177 213.792 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M356.339 217.495 Q352.728 217.495 350.899 221.06 Q349.094 224.602 349.094 231.732 Q349.094 238.838 350.899 242.403 Q352.728 245.944 356.339 245.944 Q359.973 245.944 361.779 242.403 Q363.608 238.838 363.608 231.732 Q363.608 224.602 361.779 221.06 Q359.973 217.495 356.339 217.495 M356.339 213.792 Q362.149 213.792 365.205 218.398 Q368.284 222.982 368.284 231.732 Q368.284 240.458 365.205 245.065 Q362.149 249.648 356.339 249.648 Q350.529 249.648 347.45 245.065 Q344.395 240.458 344.395 231.732 Q344.395 222.982 347.45 218.398 Q350.529 213.792 356.339 213.792 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip492)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.697 4017.76,231.697 \"/>\n<polyline clip-path=\"url(#clip492)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.28 457.123,1249.1 457.691,1248.89 458.259,1248.59 458.828,1247.2 459.396,1246.84 459.964,1246.34 460.533,1245.79 461.101,1245.13 461.669,1244.42 462.238,1243.63 462.806,1242.76 463.375,1240.76 463.943,1238.67 464.511,1237.57 465.08,1235.3 465.648,1232.94 466.216,1231.54 466.785,1229.98 467.353,1228.28 467.921,1225.42 468.49,1223.49 469.058,1221.43 469.626,1219.19 470.195,1216.82 470.763,1214.28 471.331,1211.59 471.9,1208.66 472.468,1204.54 473.036,1201.32 473.605,1196.87 474.173,1193.16 474.741,1188.32 475.31,1183.17 475.878,1178.87 476.446,1174.38 477.015,1169.7 477.583,1164.84 478.152,1159.7 478.72,1154.3 479.288,1147.77 479.857,1141.99 480.425,1134.97 480.993,1127.71 481.562,1121.25 482.13,1113.37 482.698,1105.44 483.267,1098.39 483.835,1090.08 484.403,1081.6 484.972,1071.9 485.54,1060.1 486.108,1051.21 486.677,1039.91 487.245,1030.54 487.813,1019.93 488.382,1010.44 488.95,1000.79 489.518,990.869 490.087,981.895 490.655,971.923 491.224,962.767 491.792,952.44 492.36,941.026 492.929,931.753 493.497,920.206 494.065,909.718 494.634,894.954 495.202,885.441 495.77,875.01 496.339,864.458 496.907,851.804 497.475,839.258 498.044,827.837 498.612,817.624 499.18,807.351 499.749,798.311 500.317,786.243 500.885,774.883 501.454,763.815 502.022,752.924 502.59,742.039 503.159,732.31 503.727,721.736 504.295,712.313 504.864,699.959 505.432,690.805 506.001,680.711 506.569,671.759 507.137,662.771 507.706,653.943 508.274,645.139 508.842,636.56 509.411,628.058 509.979,619.627 510.547,611.342 511.116,601.161 511.684,593.179 512.252,585.103 512.821,576.26 513.389,567.64 513.957,560.186 514.526,553.813 515.094,546.505 515.662,538.403 516.231,531.454 516.799,526.679 517.367,518.734 517.936,511.964 518.504,505.297 519.072,497.676 519.641,491.3 520.209,487.04 520.778,481.848 521.346,474.697 521.914,466.679 522.483,460.888 523.051,455.308 523.619,448.792 524.188,442.422 524.756,436.436 525.324,428.33 525.893,425.753 526.461,420.112 527.029,417.517 527.598,415.969 528.166,411.322 528.734,406.661 529.303,401.167 529.871,397.757 530.439,391.311 531.008,387.235 531.576,383.316 532.144,377.368 532.713,374.581 533.281,369.249 533.85,364.823 534.418,362.52 534.986,358.304 535.555,356.11 536.123,353.936 536.691,351.945 537.26,349.954 537.828,346.953 538.396,343.947 538.965,342.005 539.533,339.915 540.101,338.264 540.67,333.884 541.238,331.876 541.806,329.968 542.375,329.116 542.943,327.489 543.511,325.629 544.08,323.865 544.648,320.933 545.216,319.303 545.785,318.666 546.353,318.008 546.921,314.194 547.49,311.392 548.058,308.084 548.627,305.946 549.195,303.636 549.763,302.702 550.332,300.395 550.9,297.415 551.468,295.466 552.037,295.557 552.605,292.537 553.173,289.495 553.742,285.674 554.31,283.039 554.878,280.508 555.447,278.071 556.015,277.747 556.583,277.28 557.152,277.161 557.72,275.922 558.288,276.733 558.857,278.049 559.425,275.491 559.993,273.889 560.562,267.471 561.13,264.409 561.698,263.852 562.267,263.167 562.835,263.445 563.404,262.703 563.972,260.874 564.54,260.263 565.109,257.547 565.677,257.012 566.245,258.716 566.814,257.011 567.382,258.53 567.95,257.991 568.519,256.309 569.087,259.868 569.655,259.986 570.224,260.251 570.792,262.384 571.36,263.583 571.929,261.455 572.497,262.507 573.065,263.346 573.634,264.296 574.202,265.016 574.77,263.486 575.339,264.038 575.907,264.607 576.476,263.227 577.044,258.775 577.612,256.76 578.181,256.815 578.749,255.797 579.317,254.952 579.886,254.108 580.454,255.277 581.022,254.347 581.591,253.61 582.159,253.593 582.727,252.656 583.296,252.741 583.864,253.016 584.432,252.027 585.001,253.072 585.569,252.274 586.137,252.326 586.706,251.251 587.274,251.523 587.842,252.784 588.411,251.734 588.979,251.841 589.547,246.742 590.116,245.331 590.684,244.806 591.253,245.071 591.821,247.592 592.389,248.748 592.958,250.855 593.526,249.551 594.094,248.571 594.663,245.566 595.231,244.785 595.799,247.094 596.368,248.343 596.936,247.421 597.504,248.777 598.073,249.978 598.641,248.906 599.209,248.99 599.778,248.856 600.346,248.797 600.914,247.666 601.483,246.542 602.051,248.685 602.619,248.476 603.188,249.358 603.756,246.779 604.325,245.714 604.893,247.94 605.461,248.993 606.03,246.716 606.598,245.79 607.166,246.148 607.735,247.927 608.303,247.622 608.871,244.126 609.44,244.292 610.008,243.276 610.576,242.085 611.145,243.157 611.713,243.041 612.281,243.86 612.85,243.749 613.418,245.72 613.986,245.665 614.555,245.556 615.123,245.425 615.691,246.472 616.26,245.173 616.828,246.121 617.396,245.938 617.965,245.566 618.533,244.116 619.102,244.053 619.67,243.982 620.238,243.828 620.807,242.58 621.375,242.498 621.943,243.214 622.512,244.216 623.08,245.103 623.648,246.059 624.217,246.589 624.785,247.103 625.353,246.577 625.922,247.069 626.49,245.603 627.058,245.08 627.627,243.893 628.195,242.567 628.763,244.334 629.332,244.973 629.9,244.519 630.468,245.013 631.037,244.484 631.605,243.114 632.173,241.564 632.742,241.384 633.31,240.039 633.879,239.014 634.447,239.061 635.015,235.89 635.584,237.304 636.152,237.434 636.72,238.546 637.289,238.399 637.857,238.336 638.425,237.472 638.994,236.529 639.562,236.501 640.13,237.654 640.699,238.684 641.267,239.573 641.835,237.293 642.404,237.223 642.972,238.217 643.54,239.249 644.109,240.185 644.677,239.845 645.245,239.508 645.814,237.364 646.382,236.51 646.951,235.438 647.519,235.374 648.087,235.536 648.656,236.686 649.224,236.622 649.792,236.604 650.361,235.573 650.929,232.508 651.497,229.818 652.066,230.375 652.634,229.997 653.202,230.548 653.771,232.058 654.339,230.528 654.907,229.812 655.476,230.303 656.044,230.889 656.612,230.465 657.181,226.901 657.749,224.642 658.317,225.693 658.886,226.574 659.454,227.422 660.022,228.371 660.591,230.196 661.159,230.781 661.728,232.21 662.296,231.521 662.864,228.979 663.433,229.651 664.001,228.337 664.569,229.084 665.138,229.976 665.706,232.632 666.274,231.037 666.843,233.755 667.411,233.221 667.979,231.318 668.548,231.946 669.116,232.359 669.684,235.16 670.253,234.368 670.821,235.767 671.389,235.99 671.958,235.359 672.526,235.742 673.094,234.874 673.663,236.227 674.231,234.206 674.799,234.558 675.368,233.92 675.936,236.248 676.505,238.591 677.073,238.553 677.641,240.749 678.21,240.676 678.778,241.622 679.346,240.541 679.915,240.44 680.483,239.338 681.051,240.362 681.62,241.176 682.188,238.808 682.756,238.697 683.325,238.786 683.893,239.513 684.461,240.284 685.03,238.175 685.598,237.973 686.166,237.078 686.735,237.925 687.303,235.868 687.871,237.014 688.44,235.009 689.008,235.186 689.577,235.231 690.145,236.092 690.713,234.88 691.282,234.832 691.85,233.031 692.418,234.485 692.987,234.606 693.555,234.663 694.123,235.843 694.692,236.072 695.26,236.194 695.828,237.44 696.397,235.259 696.965,235.292 697.533,234.545 698.102,235.621 698.67,235.712 699.238,235.706 699.807,235.837 700.375,234.875 700.943,236.025 701.512,234.741 702.08,233.785 702.648,232.59 703.217,233.893 703.785,233.102 704.354,233.327 704.922,232.445 705.49,232.697 706.059,233.048 706.627,232.271 707.195,230.462 707.764,230.873 708.332,229.992 708.9,230.442 709.469,230.768 710.037,231.085 710.605,231.455 711.174,231.867 711.742,232.159 712.31,231.286 712.879,230.512 713.447,230.891 714.015,230.287 714.584,229.906 715.152,229.321 715.72,228.792 716.289,227.336 716.857,228.698 717.425,227.61 717.994,226.27 718.562,227.16 719.131,232.117 719.699,232.486 720.267,234.879 720.836,233.041 721.404,232.318 721.972,232.705 722.541,232.938 723.109,235.269 723.677,236.414 724.246,236.281 724.814,238.208 725.382,238.041 725.951,236.686 726.519,238.923 727.087,238.604 727.656,236.415 728.224,235.318 728.792,237.293 729.361,236.116 729.929,236.238 730.497,237.29 731.066,239.164 731.634,237.927 732.203,235.887 732.771,234.706 733.339,234.896 733.908,235.814 734.476,235.731 735.044,234.802 735.613,236.9 736.181,237.751 736.749,239.587 737.318,240.474 737.886,240.947 738.454,238.553 739.023,240.244 739.591,238.993 740.159,238.69 740.728,238.554 741.296,240.283 741.864,238.478 742.433,236.97 743.001,236.768 743.569,235.806 744.138,233.669 744.706,237.7 745.274,236.418 745.843,234.227 746.411,233.181 746.98,233.21 747.548,234.414 748.116,233.331 748.685,234.237 749.253,234.273 749.821,235.204 750.39,235.811 750.958,235.436 751.526,233.354 752.095,232.321 752.663,231.251 753.231,230.332 753.8,226.48 754.368,224.027 754.936,223.684 755.505,223.285 756.073,225.206 756.641,226.047 757.21,225.592 757.778,227.327 758.346,227.916 758.915,228.463 759.483,229.89 760.052,231.437 760.62,231.712 761.188,231.773 761.757,232.985 762.325,234.219 762.893,235.346 763.462,236.372 764.03,236.103 764.598,236.003 765.167,237.823 765.735,235.573 766.303,234.256 766.872,235.155 767.44,234.813 768.008,231.441 768.577,232.724 769.145,232.785 769.713,232.984 770.282,234.107 770.85,236.026 771.418,236.029 771.987,234.009 772.555,234.038 773.123,235.069 773.692,235 774.26,233.097 774.829,235.21 775.397,238.355 775.965,239.153 776.534,236.81 777.102,235.458 777.67,234.357 778.239,237.261 778.807,238.076 779.375,237.834 779.944,239.552 780.512,238.198 781.08,235.925 781.649,236.637 782.217,235.395 782.785,235.273 783.354,234.996 783.922,233.721 784.49,233.496 785.059,232.479 785.627,232.561 786.195,232.722 786.764,233.701 787.332,236.669 787.9,235.521 788.469,234.301 789.037,232.429 789.606,231.362 790.174,231.419 790.742,232.596 791.311,232.46 791.879,231.059 792.447,232.153 793.016,231.075 793.584,232.095 794.152,230.118 794.721,231.205 795.289,229.085 795.857,229.52 796.426,227.921 796.994,227.294 797.562,227.797 798.131,228.298 798.699,229.583 799.267,230.073 799.836,234.665 800.404,234.759 800.972,233.469 801.541,232.42 802.109,232.622 802.678,232.611 803.246,232.701 803.814,231.827 804.383,232.116 804.951,231.468 805.519,231.568 806.088,230.62 806.656,228.599 807.224,229.911 807.793,229.92 808.361,229.246 808.929,229.586 809.498,227.997 810.066,228.541 810.634,228.979 811.203,228.215 811.771,230.726 812.339,231.858 812.908,232.121 813.476,232.188 814.044,230.03 814.613,233.367 815.181,235.247 815.749,235.161 816.318,235.158 816.886,234.985 817.455,236.952 818.023,235.829 818.591,236.824 819.16,239.734 819.728,238.345 820.296,239.148 820.865,239.689 821.433,239.132 822.001,239.72 822.57,239.301 823.138,238.863 823.706,238.517 824.275,239.1 824.843,238.522 825.411,239.019 825.98,237.454 826.548,233.986 827.116,234.982 827.685,234.814 828.253,233.445 828.821,233.316 829.39,233.259 829.958,231.263 830.526,230.189 831.095,232.378 831.663,229.212 832.232,227.35 832.8,228.737 833.368,230.022 833.937,231.287 834.505,231.351 835.073,231.479 835.642,230.313 836.21,233.528 836.778,232.411 837.347,230.854 837.915,232.091 838.483,232.071 839.052,232.086 839.62,232.272 840.188,232.379 840.757,232.448 841.325,234.58 841.893,236.404 842.462,236.205 843.03,237.793 843.598,236.34 844.167,234.879 844.735,235.685 845.304,233.326 845.872,231.163 846.44,232.555 847.009,231.687 847.577,229.628 848.145,227.722 848.714,225.848 849.282,227.402 849.85,227.814 850.419,226.162 850.987,226.362 851.555,226 852.124,230.429 852.692,231.554 853.26,231.545 853.829,229.625 854.397,229.91 854.965,231.057 855.534,232.275 856.102,228.242 856.67,229.486 857.239,231.676 857.807,233.98 858.375,232.997 858.944,233.724 859.512,234.567 860.081,236.534 860.649,232.039 861.217,234.244 861.786,236.186 862.354,236.163 862.922,233.813 863.491,233.611 864.059,236.498 864.627,236.025 865.196,235.721 865.764,235.44 866.332,235.247 866.901,236.12 867.469,234.615 868.037,235.661 868.606,235.493 869.174,234.126 869.742,233.911 870.311,233.976 870.879,233.89 871.447,234.905 872.016,234.875 872.584,235.876 873.152,236.685 873.721,236.42 874.289,237.176 874.858,236.687 875.426,235.277 875.994,234.866 876.563,233.551 877.131,232.54 877.699,232.473 878.268,229.012 878.836,229.016 879.404,229.123 879.973,227.128 880.541,227.529 881.109,225.759 881.678,229.061 882.246,229.266 882.814,230.387 883.383,230.432 883.951,230.346 884.519,233.3 885.088,232.187 885.656,233.22 886.224,231.055 886.793,231.945 887.361,230.871 887.93,231.096 888.498,230.235 889.066,231.204 889.635,232.241 890.203,232.27 890.771,231.162 891.34,232.288 891.908,232.222 892.476,230.049 893.045,230.181 893.613,230.316 894.181,231.371 894.75,229.174 895.318,229.428 895.886,229.55 896.455,230.742 897.023,230.893 897.591,232.252 898.16,232.204 898.728,231.184 899.296,230.294 899.865,229.547 900.433,231.845 901.001,231.934 901.57,234.971 902.138,234.939 902.707,234.734 903.275,235.452 903.843,236.099 904.412,234.859 904.98,233.712 905.548,232.805 906.117,231.612 906.685,231.722 907.253,229.672 907.822,228.578 908.39,228.69 908.958,226.947 909.527,228.325 910.095,229.661 910.663,230.87 911.232,230.136 911.8,230.164 912.368,230.366 912.937,228.372 913.505,232.728 914.073,232.654 914.642,233.515 915.21,233.362 915.779,232.347 916.347,231.447 916.915,229.398 917.484,231.729 918.052,231.728 918.62,232.64 919.189,232.481 919.757,232.582 920.325,233.7 920.894,231.457 921.462,231.399 922.03,233.549 922.599,232.517 923.167,232.642 923.735,231.455 924.304,231.594 924.872,230.736 925.44,231.926 926.009,235.94 926.577,236.756 927.145,236.261 927.714,233.899 928.282,234.953 928.85,234.789 929.419,234.587 929.987,233.633 930.556,235.699 931.124,235.364 931.692,234.863 932.261,232.512 932.829,232.372 933.397,231.361 933.966,230.504 934.534,230.594 935.102,228.592 935.671,228.849 936.239,228.939 936.807,226.384 937.376,225.782 937.944,226.378 938.512,226.614 939.081,224.89 939.649,227.308 940.217,227.878 940.786,228.085 941.354,230.559 941.922,229.811 942.491,227.971 943.059,228.584 943.627,228.825 944.196,228.228 944.764,231.825 945.333,229.813 945.901,231.075 946.469,231.349 947.038,232.748 947.606,232.668 948.174,232.691 948.743,230.75 949.311,229.817 949.879,231.031 950.448,233.238 951.016,232.358 951.584,231.408 952.153,231.633 952.721,230.764 953.289,231.997 953.858,231.978 954.426,233.14 954.994,232.123 955.563,230.196 956.131,229.323 956.699,228.613 957.268,227.757 957.836,226.079 958.405,224.559 958.973,226.293 959.541,229.856 960.11,228.181 960.678,227.678 961.246,227.948 961.815,228.453 962.383,227.8 962.951,230.324 963.52,230.531 964.088,228.566 964.656,229.851 965.225,230.909 965.793,233.213 966.361,233.159 966.93,232.076 967.498,231.026 968.066,231.135 968.635,230.326 969.203,231.378 969.771,229.604 970.34,228.74 970.908,230.095 971.476,230.48 972.045,229.911 972.613,229.316 973.182,232.071 973.75,233.044 974.318,232.202 974.887,231.403 975.455,234.601 976.023,235.748 976.592,236.543 977.16,239.465 977.728,240.122 978.297,240.535 978.865,241.276 979.433,238.435 980.002,241.217 980.57,240.869 981.138,238.299 981.707,236.915 982.275,234.755 982.843,234.663 983.412,236.463 983.98,237.365 984.548,238.072 985.117,238.66 985.685,238.348 986.253,238.023 986.822,238.675 987.39,238.344 987.959,237.761 988.527,235.391 989.095,235.14 989.664,234.024 990.232,234.76 990.8,236 991.369,236.638 991.937,236.303 992.505,235.748 993.074,235.521 993.642,235.213 994.21,234.839 994.779,235.787 995.347,239.471 995.915,240.232 996.484,238.419 997.052,236.867 997.62,235.39 998.189,234.899 998.757,233.595 999.325,231.209 999.894,231.167 1000.46,231.013 1001.03,230.84 1001.6,231.514 1002.17,231.502 1002.74,231.608 1003.3,230.369 1003.87,231.268 1004.44,232.406 1005.01,234.232 1005.58,233.048 1006.15,232.068 1006.71,229.129 1007.28,228.119 1007.85,228.323 1008.42,227.36 1008.99,227.476 1009.56,225.811 1010.12,227.286 1010.69,225.219 1011.26,227.459 1011.83,226.707 1012.4,229.136 1012.97,229.271 1013.53,229.361 1014.1,229.704 1014.67,229.721 1015.24,231.979 1015.81,230.874 1016.38,229.905 1016.94,230.91 1017.51,232.016 1018.08,232.173 1018.65,235.132 1019.22,232.907 1019.79,233.985 1020.35,232.746 1020.92,231.361 1021.49,233.643 1022.06,233.638 1022.63,234.602 1023.2,234.27 1023.76,232.862 1024.33,232.931 1024.9,231.908 1025.47,233.985 1026.04,234.68 1026.61,234.602 1027.17,235.425 1027.74,235.057 1028.31,234.97 1028.88,235.801 1029.45,234.457 1030.02,234.159 1030.58,233.822 1031.15,232.421 1031.72,232.227 1032.29,231.205 1032.86,228.903 1033.43,231.069 1033.99,232.192 1034.56,233.408 1035.13,232.824 1035.7,232.759 1036.27,232.658 1036.84,232.544 1037.4,233.472 1037.97,234.229 1038.54,233.981 1039.11,234.918 1039.68,233.205 1040.25,230.897 1040.81,229.955 1041.38,230.022 1041.95,229.972 1042.52,229.052 1043.09,229.859 1043.66,230.941 1044.22,230.7 1044.79,233.79 1045.36,234.547 1045.93,232.214 1046.5,233.105 1047.07,232.074 1047.63,232.102 1048.2,232.03 1048.77,232.146 1049.34,231.862 1049.91,230.696 1050.48,230.75 1051.05,230.711 1051.61,229.631 1052.18,228.638 1052.75,231.234 1053.32,231.072 1053.89,231.184 1054.46,229.302 1055.02,230.336 1055.59,231.167 1056.16,232.079 1056.73,231.058 1057.3,232.272 1057.87,232.19 1058.43,232.075 1059,231.941 1059.57,231.868 1060.14,231.782 1060.71,229.646 1061.28,230.887 1061.84,229.802 1062.41,231.178 1062.98,233.359 1063.55,232.371 1064.12,231.275 1064.69,229.049 1065.25,227.324 1065.82,228.478 1066.39,230.88 1066.96,230.925 1067.53,231.031 1068.1,229.991 1068.66,232.098 1069.23,232.781 1069.8,232.702 1070.37,232.564 1070.94,233.599 1071.51,232.55 1072.07,231.413 1072.64,229.659 1073.21,230.894 1073.78,230.762 1074.35,231.814 1074.92,230.748 1075.48,230.732 1076.05,233.972 1076.62,232.835 1077.19,232.562 1077.76,233.414 1078.33,232.437 1078.89,233.536 1079.46,233.157 1080.03,231.03 1080.6,232.097 1081.17,232.067 1081.74,230.035 1082.3,228.85 1082.87,230.155 1083.44,231.255 1084.01,230.262 1084.58,231.18 1085.15,231.142 1085.71,231.012 1086.28,231.137 1086.85,232.378 1087.42,233.521 1087.99,232.439 1088.56,231.322 1089.12,231.118 1089.69,231.126 1090.26,231.278 1090.83,231.209 1091.4,230.064 1091.97,231.132 1092.53,229.123 1093.1,231.133 1093.67,229.779 1094.24,230.913 1094.81,229.87 1095.38,229.055 1095.94,229.115 1096.51,228.126 1097.08,227.264 1097.65,226.267 1098.22,226.649 1098.79,226.156 1099.35,226.407 1099.92,227.845 1100.49,228.355 1101.06,229.533 1101.63,230.836 1102.2,236.186 1102.76,236.134 1103.33,238.837 1103.9,237.529 1104.47,237.996 1105.04,236.509 1105.61,235.316 1106.17,235.353 1106.74,232.107 1107.31,233.136 1107.88,233.108 1108.45,230.974 1109.02,233.099 1109.58,232.164 1110.15,231.014 1110.72,232.143 1111.29,231.083 1111.86,230.441 1112.43,231.635 1112.99,231.521 1113.56,230.456 1114.13,230.553 1114.7,228.463 1115.27,228.818 1115.84,226.024 1116.4,223.213 1116.97,223.702 1117.54,226.436 1118.11,229.077 1118.68,229.283 1119.25,229.356 1119.81,228.612 1120.38,228.737 1120.95,228.939 1121.52,228.365 1122.09,226.778 1122.66,227.322 1123.23,228.619 1123.79,229.88 1124.36,226.963 1124.93,231.332 1125.5,229.386 1126.07,226.493 1126.64,227.148 1127.2,230.606 1127.77,230.876 1128.34,231.936 1128.91,229.807 1129.48,231.934 1130.05,230.109 1130.61,230.464 1131.18,229.775 1131.75,231.029 1132.32,231.082 1132.89,232.241 1133.46,231.282 1134.02,233.48 1134.59,233.602 1135.16,234.444 1135.73,233.104 1136.3,232.054 1136.87,231.196 1137.43,232.239 1138,233.353 1138.57,234.401 1139.14,233.515 1139.71,234.539 1140.28,234.441 1140.84,234.045 1141.41,235.834 1141.98,231.445 1142.55,229.338 1143.12,229.823 1143.69,229.077 1144.25,230.331 1144.82,233.664 1145.39,233.616 1145.96,229.449 1146.53,227.815 1147.1,230.292 1147.66,230.469 1148.23,233.792 1148.8,234.756 1149.37,235.718 1149.94,237.636 1150.51,238.218 1151.07,236.641 1151.64,237.327 1152.21,237.074 1152.78,236.545 1153.35,233.112 1153.92,233.058 1154.48,234.103 1155.05,233.015 1155.62,233.02 1156.19,233.07 1156.76,231.884 1157.33,233.09 1157.89,231.098 1158.46,230.95 1159.03,231.085 1159.6,230.355 1160.17,229.7 1160.74,230.946 1161.3,233.031 1161.87,235.847 1162.44,233.471 1163.01,231.336 1163.58,229.314 1164.15,229.354 1164.71,230.637 1165.28,233.009 1165.85,231.879 1166.42,228.779 1166.99,231.017 1167.56,231.186 1168.12,232.282 1168.69,231.245 1169.26,231.159 1169.83,232.36 1170.4,232.408 1170.97,233.245 1171.53,234.347 1172.1,233.062 1172.67,231.014 1173.24,231.073 1173.81,232.092 1174.38,229.903 1174.94,232.066 1175.51,233.927 1176.08,233.873 1176.65,229.622 1177.22,230.882 1177.79,230.856 1178.35,229.674 1178.92,228.997 1179.49,231.248 1180.06,231.163 1180.63,230.279 1181.2,230.471 1181.76,230.538 1182.33,231.714 1182.9,230.723 1183.47,229.802 1184.04,230.108 1184.61,227.186 1185.17,227.688 1185.74,227.991 1186.31,228.376 1186.88,228.692 1187.45,230.095 1188.02,229.343 1188.58,229.523 1189.15,230.829 1189.72,230.067 1190.29,229.456 1190.86,229.747 1191.43,230.929 1192,231.14 1192.56,230.397 1193.13,229.403 1193.7,231.764 1194.27,233.935 1194.84,232.649 1195.41,229.375 1195.97,229.726 1196.54,228.567 1197.11,225.874 1197.68,226.551 1198.25,229.139 1198.82,229.436 1199.38,230.714 1199.95,229.976 1200.52,229.115 1201.09,227.413 1201.66,226.748 1202.23,225.195 1202.79,226.027 1203.36,226.841 1203.93,226.152 1204.5,226.669 1205.07,227.206 1205.64,228.871 1206.2,229.423 1206.77,230.74 1207.34,230.947 1207.91,232.317 1208.48,232.358 1209.05,233.633 1209.61,237.733 1210.18,237.451 1210.75,236.287 1211.32,234.979 1211.89,237.176 1212.46,237.807 1213.02,239.817 1213.59,238.393 1214.16,239.104 1214.73,238.853 1215.3,239.737 1215.87,238.338 1216.43,237.713 1217,237.364 1217.57,237.155 1218.14,235.982 1218.71,235.548 1219.28,235.338 1219.84,235.07 1220.41,235.95 1220.98,235.73 1221.55,237.455 1222.12,236.203 1222.69,232.875 1223.25,233.855 1223.82,232.916 1224.39,231.632 1224.96,235.657 1225.53,235.249 1226.1,235.915 1226.66,235.581 1227.23,234.086 1227.8,234.981 1228.37,234.625 1228.94,236.509 1229.51,234.239 1230.07,236.201 1230.64,236.967 1231.21,237.707 1231.78,237.348 1232.35,237.826 1232.92,238.334 1233.48,239.817 1234.05,240.108 1234.62,239.312 1235.19,235.481 1235.76,237.101 1236.33,237.683 1236.89,238.108 1237.46,236.486 1238.03,236.897 1238.6,237.51 1239.17,236.969 1239.74,235.68 1240.3,235.222 1240.87,232.619 1241.44,232.49 1242.01,231.092 1242.58,228.835 1243.15,229.741 1243.71,229.871 1244.28,232.761 1244.85,232.446 1245.42,230.308 1245.99,231.481 1246.56,228.366 1247.12,227.332 1247.69,228.458 1248.26,228.326 1248.83,230.322 1249.4,231.228 1249.97,230.258 1250.53,230.25 1251.1,229.112 1251.67,229.111 1252.24,230.3 1252.81,230.214 1253.38,231.358 1253.94,231.347 1254.51,229.08 1255.08,231.263 1255.65,233.258 1256.22,234.886 1256.79,234.423 1257.35,236.122 1257.92,234.795 1258.49,233.323 1259.06,234.006 1259.63,236.001 1260.2,236.653 1260.76,237.201 1261.33,233.686 1261.9,229.488 1262.47,229.673 1263.04,229.72 1263.61,227.608 1264.18,229.724 1264.74,230.742 1265.31,230.329 1265.88,231.336 1266.45,231.098 1267.02,231.02 1267.59,231.072 1268.15,230.804 1268.72,230.691 1269.29,226.312 1269.86,229.711 1270.43,229.74 1271,228.736 1271.56,228.79 1272.13,229.963 1272.7,229.194 1273.27,231.014 1273.84,232.818 1274.41,231.725 1274.97,231.755 1275.54,233.805 1276.11,233.349 1276.68,233.393 1277.25,231.239 1277.82,231.124 1278.38,229.867 1278.95,229.043 1279.52,229.231 1280.09,229.15 1280.66,227.277 1281.23,229.523 1281.79,229.673 1282.36,228.509 1282.93,229.747 1283.5,228.823 1284.07,228.846 1284.64,227.049 1285.2,225.239 1285.77,224.627 1286.34,225.075 1286.91,225.739 1287.48,225.338 1288.05,225.91 1288.61,224.318 1289.18,224.954 1289.75,226.406 1290.32,227.892 1290.89,228.973 1291.46,230.207 1292.02,229.338 1292.59,228.358 1293.16,229.618 1293.73,229.879 1294.3,228.972 1294.87,230.23 1295.43,227.163 1296,227.386 1296.57,226.641 1297.14,229.291 1297.71,227.288 1298.28,225.673 1298.84,225.14 1299.41,225.761 1299.98,223.044 1300.55,222.599 1301.12,224.603 1301.69,225.337 1302.25,224.703 1302.82,226.245 1303.39,228.801 1303.96,230.32 1304.53,230.633 1305.1,229.79 1305.66,230.242 1306.23,232.485 1306.8,231.506 1307.37,230.456 1307.94,229.701 1308.51,226.117 1309.07,225.644 1309.64,227.301 1310.21,228.791 1310.78,231.218 1311.35,232.486 1311.92,233.545 1312.48,233.659 1313.05,232.554 1313.62,232.734 1314.19,231.847 1314.76,231.944 1315.33,231.9 1315.89,231.037 1316.46,232.035 1317.03,232.095 1317.6,234.394 1318.17,233.44 1318.74,235.614 1319.3,232.382 1319.87,232.509 1320.44,233.782 1321.01,233.872 1321.58,234.959 1322.15,233.789 1322.71,233.808 1323.28,232.82 1323.85,232.833 1324.42,231.941 1324.99,233.053 1325.56,233.102 1326.12,233.158 1326.69,232.005 1327.26,231.961 1327.83,234.25 1328.4,235.188 1328.97,234.89 1329.53,234.729 1330.1,237.712 1330.67,235.274 1331.24,235.179 1331.81,236.07 1332.38,234.619 1332.94,233.412 1333.51,234.112 1334.08,234.892 1334.65,234.739 1335.22,238.69 1335.79,240.256 1336.36,238.737 1336.92,239.412 1337.49,238.935 1338.06,240.252 1338.63,237.91 1339.2,239.488 1339.77,237.696 1340.33,235.205 1340.9,234.078 1341.47,233.798 1342.04,233.504 1342.61,233.23 1343.18,233.065 1343.74,233.998 1344.31,233.799 1344.88,232.347 1345.45,232.231 1346.02,231.009 1346.59,231.162 1347.15,230.3 1347.72,231.3 1348.29,233.398 1348.86,231.6 1349.43,230.342 1350,229.201 1350.56,225.056 1351.13,225.292 1351.7,224.539 1352.27,224.06 1352.84,223.809 1353.41,223.073 1353.97,224.013 1354.54,224.977 1355.11,226.625 1355.68,226.188 1356.25,224.347 1356.82,226.004 1357.38,227.732 1357.95,225.988 1358.52,227.485 1359.09,227.958 1359.66,228.42 1360.23,226.801 1360.79,228.503 1361.36,229.788 1361.93,230.045 1362.5,230.196 1363.07,231.453 1363.64,233.574 1364.2,233.494 1364.77,231.244 1365.34,232.484 1365.91,231.41 1366.48,230.4 1367.05,228.359 1367.61,227.604 1368.18,227.098 1368.75,229.789 1369.32,230.118 1369.89,229.289 1370.46,230.451 1371.02,230.58 1371.59,231.722 1372.16,231.844 1372.73,232.866 1373.3,233.07 1373.87,234.232 1374.43,236.155 1375,237.994 1375.57,239.605 1376.14,241.275 1376.71,241.773 1377.28,242.192 1377.84,243.491 1378.41,242.599 1378.98,240.781 1379.55,237.257 1380.12,235.954 1380.69,236.853 1381.25,234.72 1381.82,234.557 1382.39,234.503 1382.96,239.429 1383.53,239.817 1384.1,240.263 1384.66,238.52 1385.23,239.17 1385.8,239.615 1386.37,237.914 1386.94,235.141 1387.51,235.879 1388.07,235.423 1388.64,235.057 1389.21,236.015 1389.78,235.306 1390.35,236.009 1390.92,236.628 1391.48,237.072 1392.05,237.517 1392.62,235.051 1393.19,235.069 1393.76,233.716 1394.33,233.649 1394.89,234.349 1395.46,236.189 1396.03,234.698 1396.6,233.375 1397.17,232.197 1397.74,231.059 1398.3,230.976 1398.87,229.851 1399.44,229.844 1400.01,228.773 1400.58,231.782 1401.15,233.398 1401.71,233.118 1402.28,231.654 1402.85,231.724 1403.42,232.665 1403.99,231.316 1404.56,230.319 1405.13,229.178 1405.69,231.179 1406.26,235.075 1406.83,234.681 1407.4,235.522 1407.97,234.02 1408.54,233.837 1409.1,232.442 1409.67,235.672 1410.24,235.382 1410.81,234.832 1411.38,232.391 1411.95,231.041 1412.51,230.745 1413.08,232.744 1413.65,231.405 1414.22,229.434 1414.79,229.407 1415.36,229.287 1415.92,230.512 1416.49,226.502 1417.06,226.765 1417.63,228.068 1418.2,229.216 1418.77,228.39 1419.33,231.34 1419.9,232.545 1420.47,230.277 1421.04,228.182 1421.61,228.195 1422.18,228.325 1422.74,227.386 1423.31,226.727 1423.88,227.185 1424.45,228.472 1425.02,228.638 1425.59,231.899 1426.15,230.505 1426.72,230.741 1427.29,231.683 1427.86,230.729 1428.43,232.49 1429,231.453 1429.56,232.603 1430.13,230.563 1430.7,230.483 1431.27,230.43 1431.84,227.45 1432.41,225.8 1432.97,227.056 1433.54,224.399 1434.11,228.014 1434.68,228.338 1435.25,229.731 1435.82,229.989 1436.38,230.247 1436.95,228.103 1437.52,229.211 1438.09,230.309 1438.66,231.452 1439.23,232.418 1439.79,232.434 1440.36,232.241 1440.93,234.057 1441.5,232.687 1442.07,230.725 1442.64,230.895 1443.2,229.85 1443.77,231.884 1444.34,231.616 1444.91,231.68 1445.48,230.278 1446.05,233.443 1446.61,235.367 1447.18,235.158 1447.75,234.89 1448.32,231.6 1448.89,229.652 1449.46,231.053 1450.02,230.193 1450.59,231.275 1451.16,229.312 1451.73,229.53 1452.3,227.635 1452.87,227.776 1453.43,229.104 1454,228.28 1454.57,224.756 1455.14,225.295 1455.71,226.022 1456.28,227.351 1456.84,231.942 1457.41,230.934 1457.98,232.154 1458.55,232.17 1459.12,234.301 1459.69,235.152 1460.25,233.848 1460.82,234.576 1461.39,233.408 1461.96,235.096 1462.53,234.799 1463.1,234.528 1463.66,235.313 1464.23,235.032 1464.8,236.661 1465.37,236.154 1465.94,233.747 1466.51,227.478 1467.07,228.909 1467.64,231.171 1468.21,231.17 1468.78,231.077 1469.35,232.095 1469.92,231.007 1470.48,231.144 1471.05,233.347 1471.62,233.264 1472.19,233.251 1472.76,234.153 1473.33,233.944 1473.89,235.948 1474.46,234.448 1475.03,234.305 1475.6,235.334 1476.17,234.815 1476.74,232.555 1477.31,233.457 1477.87,233.243 1478.44,234.086 1479.01,231.904 1479.58,231.856 1480.15,229.806 1480.72,228.789 1481.28,228.76 1481.85,229.112 1482.42,228.958 1482.99,228.941 1483.56,228.037 1484.13,229.458 1484.69,229.599 1485.26,227.49 1485.83,226.603 1486.4,226.011 1486.97,225.458 1487.54,228.05 1488.1,229.585 1488.67,228.615 1489.24,227.606 1489.81,226.786 1490.38,227.212 1490.95,229.823 1491.51,227.87 1492.08,229.306 1492.65,230.455 1493.22,229.549 1493.79,231.036 1494.36,232.25 1494.92,230.107 1495.49,230.1 1496.06,230.8 1496.63,230.982 1497.2,230.226 1497.77,229.255 1498.33,228.451 1498.9,230.764 1499.47,230.063 1500.04,230.445 1500.61,232.882 1501.18,233.82 1501.74,231.74 1502.31,230.77 1502.88,232.047 1503.45,232.188 1504.02,233.298 1504.59,233.044 1505.15,234.095 1505.72,230.867 1506.29,231.129 1506.86,232.285 1507.43,231.465 1508,231.564 1508.56,230.63 1509.13,230.87 1509.7,229.917 1510.27,232.298 1510.84,232.2 1511.41,233.018 1511.97,234.996 1512.54,235.922 1513.11,235.491 1513.68,235.356 1514.25,234.119 1514.82,230.838 1515.38,231.96 1515.95,232.997 1516.52,232.999 1517.09,232.995 1517.66,232.744 1518.23,234.676 1518.79,233.503 1519.36,231.278 1519.93,231.496 1520.5,230.42 1521.07,228.599 1521.64,228.866 1522.2,232.26 1522.77,232.995 1523.34,230.946 1523.91,227.794 1524.48,227.041 1525.05,226.431 1525.61,228.04 1526.18,231.481 1526.75,229.544 1527.32,230.609 1527.89,230.777 1528.46,231.714 1529.02,230.652 1529.59,228.795 1530.16,231.075 1530.73,232.246 1531.3,230.955 1531.87,230.989 1532.43,229.87 1533,229.981 1533.57,235.312 1534.14,235.059 1534.71,236.843 1535.28,237.294 1535.84,236.051 1536.41,235.679 1536.98,236.177 1537.55,236.031 1538.12,233.785 1538.69,234.914 1539.25,233.562 1539.82,233.577 1540.39,232.481 1540.96,232.454 1541.53,234.497 1542.1,234.339 1542.66,233.139 1543.23,229.902 1543.8,229.998 1544.37,229.019 1544.94,228.309 1545.51,230.672 1546.08,229.655 1546.64,231.008 1547.21,229.017 1547.78,226.231 1548.35,224.578 1548.92,226.025 1549.49,227.273 1550.05,226.592 1550.62,225.037 1551.19,227.62 1551.76,227.169 1552.33,226.523 1552.9,226.732 1553.46,225.257 1554.03,227.857 1554.6,230.637 1555.17,227.735 1555.74,229.172 1556.31,228.278 1556.87,230.583 1557.44,233.805 1558.01,232.638 1558.58,232.64 1559.15,233.772 1559.72,236.144 1560.28,234.992 1560.85,234.865 1561.42,233.668 1561.99,233.634 1562.56,234.455 1563.13,237.317 1563.69,238.042 1564.26,237.644 1564.83,239.495 1565.4,241.017 1565.97,243.454 1566.54,241.499 1567.1,242.672 1567.67,240.909 1568.24,240.043 1568.81,239.452 1569.38,239.776 1569.95,241.158 1570.51,242.524 1571.08,242.566 1571.65,241.715 1572.22,241.698 1572.79,241.936 1573.36,242.054 1573.92,242.05 1574.49,242.197 1575.06,241.174 1575.63,242.47 1576.2,241.312 1576.77,237.355 1577.33,235.728 1577.9,234.305 1578.47,234.019 1579.04,233.609 1579.61,233.268 1580.18,231.991 1580.74,233.088 1581.31,233.642 1581.88,234.266 1582.45,232.734 1583.02,233.517 1583.59,232.074 1584.15,232.795 1584.72,232.509 1585.29,233.117 1585.86,233.968 1586.43,233.663 1587,232.281 1587.56,231.935 1588.13,229.725 1588.7,229.666 1589.27,230.696 1589.84,231.674 1590.41,230.233 1590.97,231.116 1591.54,230.975 1592.11,231.728 1592.68,229.404 1593.25,229.403 1593.82,228.24 1594.38,230.336 1594.95,228.452 1595.52,228.99 1596.09,229.075 1596.66,228.079 1597.23,226.086 1597.79,225.259 1598.36,224.641 1598.93,224.943 1599.5,226.245 1600.07,227.495 1600.64,229.569 1601.2,229.535 1601.77,229.528 1602.34,228.609 1602.91,228.839 1603.48,227.786 1604.05,225.951 1604.61,225.071 1605.18,225.4 1605.75,223.653 1606.32,225.139 1606.89,227.411 1607.46,228.804 1608.02,228.752 1608.59,225.518 1609.16,224.838 1609.73,225.252 1610.3,224.504 1610.87,221.86 1611.43,225.531 1612,227.852 1612.57,229.313 1613.14,228.451 1613.71,227.643 1614.28,227.906 1614.84,228.297 1615.41,226.517 1615.98,230.989 1616.55,230.062 1617.12,230.362 1617.69,229.679 1618.26,228.804 1618.82,229.131 1619.39,228.462 1619.96,228.513 1620.53,230.65 1621.1,230.499 1621.67,232.747 1622.23,231.935 1622.8,231.972 1623.37,231.886 1623.94,231.042 1624.51,231.12 1625.08,232.338 1625.64,233.349 1626.21,234.348 1626.78,233.145 1627.35,233.004 1627.92,235.18 1628.49,233.911 1629.05,232.746 1629.62,231.654 1630.19,231.57 1630.76,232.869 1631.33,232.776 1631.9,231.627 1632.46,230.951 1633.03,231.358 1633.6,231.462 1634.17,231.526 1634.74,233.759 1635.31,234.609 1635.87,233.387 1636.44,233.216 1637.01,233.103 1637.58,231.896 1638.15,231.81 1638.72,232.845 1639.28,232.823 1639.85,230.854 1640.42,232.896 1640.99,231.814 1641.56,231.727 1642.13,231.472 1642.69,228.398 1643.26,228.585 1643.83,230.893 1644.4,230.056 1644.97,229.144 1645.54,230.356 1646.1,231.321 1646.67,232.39 1647.24,234.502 1647.81,235.499 1648.38,235.403 1648.95,234.025 1649.51,233.988 1650.08,233.763 1650.65,231.754 1651.22,231.681 1651.79,231.688 1652.36,230.79 1652.92,228.678 1653.49,228.908 1654.06,232.084 1654.63,231.975 1655.2,232.038 1655.77,233.052 1656.33,233.971 1656.9,234.972 1657.47,233.561 1658.04,233.442 1658.61,232.152 1659.18,230.126 1659.74,229.101 1660.31,232.192 1660.88,230.909 1661.45,231.934 1662.02,228.715 1662.59,227.991 1663.15,230.405 1663.72,229.614 1664.29,229.717 1664.86,229.985 1665.43,231.095 1666,229.216 1666.56,229.317 1667.13,229.517 1667.7,229.608 1668.27,232.147 1668.84,232.081 1669.41,232.366 1669.97,231.385 1670.54,228.36 1671.11,228.514 1671.68,229.828 1672.25,228.898 1672.82,231.265 1673.38,231.166 1673.95,228.098 1674.52,227.383 1675.09,227.694 1675.66,230.078 1676.23,230.096 1676.79,229.331 1677.36,229.72 1677.93,227.592 1678.5,227.724 1679.07,229.053 1679.64,228.203 1680.2,228.424 1680.77,233.002 1681.34,233.913 1681.91,233.68 1682.48,234.595 1683.05,234.457 1683.61,234.181 1684.18,234.023 1684.75,234.875 1685.32,234.713 1685.89,230.417 1686.46,230.717 1687.02,232.076 1687.59,233.248 1688.16,231.033 1688.73,232.384 1689.3,233.423 1689.87,234.324 1690.44,234.011 1691,233.918 1691.57,234.781 1692.14,232.402 1692.71,233.62 1693.28,236.569 1693.85,237.263 1694.41,233.89 1694.98,236.808 1695.55,238.403 1696.12,240.928 1696.69,238.094 1697.26,235.668 1697.82,236.346 1698.39,233.887 1698.96,234.643 1699.53,233.465 1700.1,234.42 1700.67,235.119 1701.23,235.563 1701.8,236.35 1702.37,235.109 1702.94,232.617 1703.51,232.624 1704.08,234.48 1704.64,232.262 1705.21,234.071 1705.78,231.746 1706.35,231.631 1706.92,231.628 1707.49,230.484 1708.05,229.427 1708.62,230.341 1709.19,232.501 1709.76,232.478 1710.33,230.362 1710.9,231.658 1711.46,230.58 1712.03,231.487 1712.6,231.344 1713.17,233.331 1713.74,231.141 1714.31,230.034 1714.87,229.96 1715.44,229.849 1716.01,230.813 1716.58,230.65 1717.15,230.766 1717.72,231.962 1718.28,232.057 1718.85,230.868 1719.42,230.808 1719.99,227.999 1720.56,227.067 1721.13,226.143 1721.69,226.257 1722.26,229.748 1722.83,230.796 1723.4,230.881 1723.97,232.948 1724.54,232.925 1725.1,231.809 1725.67,230.629 1726.24,229.719 1726.81,226.928 1727.38,226.313 1727.95,226.756 1728.51,227.159 1729.08,226.5 1729.65,224.967 1730.22,224.427 1730.79,219.895 1731.36,224.918 1731.92,224.451 1732.49,226.047 1733.06,224.478 1733.63,224.921 1734.2,224.227 1734.77,225.691 1735.33,225.26 1735.9,228.603 1736.47,226.693 1737.04,226.051 1737.61,225.545 1738.18,225.038 1738.74,225.649 1739.31,227.183 1739.88,229.769 1740.45,234.084 1741.02,232.167 1741.59,232.293 1742.15,232.303 1742.72,233.359 1743.29,233.359 1743.86,233.469 1744.43,233.575 1745,232.707 1745.56,232.905 1746.13,233.974 1746.7,233.899 1747.27,235.086 1747.84,235.977 1748.41,235.698 1748.97,236.733 1749.54,238.495 1750.11,239.311 1750.68,235.732 1751.25,234.566 1751.82,234.45 1752.38,234.211 1752.95,234.939 1753.52,234.53 1754.09,234.29 1754.66,235.098 1755.23,234.167 1755.79,233.906 1756.36,231.672 1756.93,233.699 1757.5,233.587 1758.07,233.488 1758.64,234.463 1759.21,235.326 1759.77,234.711 1760.34,236.554 1760.91,238.281 1761.48,236.036 1762.05,232.634 1762.62,234.431 1763.18,233.13 1763.75,230.833 1764.32,231.07 1764.89,233.192 1765.46,232.087 1766.03,233.191 1766.59,231.909 1767.16,232.993 1767.73,229.841 1768.3,228.729 1768.87,229.778 1769.44,230.073 1770,231.237 1770.57,231.991 1771.14,233.774 1771.71,234.762 1772.28,233.55 1772.85,233.549 1773.41,231.301 1773.98,232.547 1774.55,234.704 1775.12,234.554 1775.69,233.256 1776.26,232.325 1776.82,234.395 1777.39,235.287 1777.96,235.238 1778.53,234.032 1779.1,233.056 1779.67,235.101 1780.23,234.763 1780.8,235.316 1781.37,235.052 1781.94,235.69 1782.51,235.557 1783.08,236.067 1783.64,235.572 1784.21,234.248 1784.78,232.974 1785.35,233.959 1785.92,231.397 1786.49,231.577 1787.05,232.419 1787.62,232.182 1788.19,233.154 1788.76,231.943 1789.33,232.798 1789.9,231.6 1790.46,233.483 1791.03,233.124 1791.6,232.959 1792.17,231.78 1792.74,230.799 1793.31,230.878 1793.87,230.864 1794.44,229.636 1795.01,228.904 1795.58,229.914 1796.15,229.816 1796.72,229.918 1797.28,229.774 1797.85,231.965 1798.42,228.736 1798.99,228.868 1799.56,226.808 1800.13,227.06 1800.69,225.268 1801.26,224.824 1801.83,225.318 1802.4,225.5 1802.97,226.008 1803.54,229.544 1804.1,229.576 1804.67,229.793 1805.24,231.063 1805.81,228.965 1806.38,228.105 1806.95,230.311 1807.51,229.514 1808.08,228.417 1808.65,227.832 1809.22,227.089 1809.79,225.149 1810.36,227.609 1810.92,227.93 1811.49,229.451 1812.06,230.352 1812.63,230.437 1813.2,231.594 1813.77,232.574 1814.33,233.542 1814.9,234.468 1815.47,232.451 1816.04,231.348 1816.61,229.337 1817.18,233.556 1817.74,231.445 1818.31,232.646 1818.88,229.765 1819.45,229.772 1820.02,228.995 1820.59,228.157 1821.15,227.6 1821.72,229.94 1822.29,229.985 1822.86,231.26 1823.43,231.333 1824,230.399 1824.56,233.475 1825.13,233.477 1825.7,233.421 1826.27,230.199 1826.84,232.437 1827.41,232.317 1827.97,234.447 1828.54,234.176 1829.11,233.915 1829.68,233.643 1830.25,233.437 1830.82,233.493 1831.39,234.538 1831.95,232.309 1832.52,230.267 1833.09,228.22 1833.66,227.568 1834.23,226.675 1834.8,226.18 1835.36,225.651 1835.93,228.417 1836.5,230.901 1837.07,232.216 1837.64,232.253 1838.21,234.243 1838.77,234.11 1839.34,235.938 1839.91,234.599 1840.48,234.496 1841.05,233.417 1841.62,231.325 1842.18,230.293 1842.75,230.484 1843.32,233.741 1843.89,234.76 1844.46,234.669 1845.03,232.468 1845.59,232.412 1846.16,233.403 1846.73,230.09 1847.3,231.525 1847.87,231.636 1848.44,231.417 1849,230.529 1849.57,231.713 1850.14,229.711 1850.71,228.844 1851.28,226.924 1851.85,228.426 1852.41,227.781 1852.98,226.052 1853.55,226.542 1854.12,226.173 1854.69,228.818 1855.26,227.028 1855.82,225.377 1856.39,228.153 1856.96,229.473 1857.53,231.851 1858.1,233.909 1858.67,231.931 1859.23,231.915 1859.8,232.09 1860.37,232.266 1860.94,230.289 1861.51,233.463 1862.08,234.436 1862.64,234.63 1863.21,233.74 1863.78,235.853 1864.35,237.617 1864.92,236.291 1865.49,236.069 1866.05,236.792 1866.62,238.66 1867.19,239.116 1867.76,237.735 1868.33,235.376 1868.9,232.953 1869.46,234.144 1870.03,233.918 1870.6,234.703 1871.17,234.525 1871.74,234.492 1872.31,237.529 1872.87,236.362 1873.44,236.275 1874.01,234.794 1874.58,236.5 1875.15,236.25 1875.72,235.818 1876.28,235.597 1876.85,237.22 1877.42,237.862 1877.99,237.419 1878.56,238.037 1879.13,237.531 1879.69,235.026 1880.26,236.651 1880.83,236.29 1881.4,234.967 1881.97,234.681 1882.54,234.491 1883.1,233.203 1883.67,232.97 1884.24,233.835 1884.81,234.515 1885.38,232.984 1885.95,232.89 1886.51,232.93 1887.08,231.846 1887.65,231.797 1888.22,231.671 1888.79,230.766 1889.36,230.561 1889.92,230.58 1890.49,230.701 1891.06,231.851 1891.63,231.782 1892.2,230.775 1892.77,230.746 1893.33,231.714 1893.9,231.794 1894.47,230.753 1895.04,230.68 1895.61,230.693 1896.18,230.776 1896.74,229.68 1897.31,231.722 1897.88,232.407 1898.45,230.217 1899.02,232.255 1899.59,231.192 1900.16,229.159 1900.72,228.243 1901.29,227.507 1901.86,224.274 1902.43,224.634 1903,226.154 1903.57,225.588 1904.13,224.94 1904.7,225.438 1905.27,228.939 1905.84,230.043 1906.41,231.178 1906.98,233.284 1907.54,232.061 1908.11,233.092 1908.68,232.938 1909.25,231.804 1909.82,230.847 1910.39,234.059 1910.95,231.728 1911.52,231.596 1912.09,230.449 1912.66,230.55 1913.23,229.361 1913.8,229.437 1914.36,230.687 1914.93,229.687 1915.5,229.81 1916.07,230.055 1916.64,231.327 1917.21,228.15 1917.77,228.313 1918.34,228.472 1918.91,230.737 1919.48,229.904 1920.05,230.042 1920.62,233.349 1921.18,233.336 1921.75,232.195 1922.32,232.083 1922.89,230.009 1923.46,227.304 1924.03,225.454 1924.59,227.129 1925.16,229.437 1925.73,228.698 1926.3,230.013 1926.87,230.183 1927.44,230.317 1928,231.42 1928.57,233.349 1929.14,233.341 1929.71,234.265 1930.28,234.156 1930.85,233.077 1931.41,232.96 1931.98,234.775 1932.55,235.596 1933.12,235.233 1933.69,232.83 1934.26,230.85 1934.82,233.965 1935.39,237.008 1935.96,236.726 1936.53,236.114 1937.1,234.722 1937.67,233.632 1938.23,236.508 1938.8,237.176 1939.37,237.637 1939.94,237.3 1940.51,235.899 1941.08,236.55 1941.64,238.068 1942.21,237.626 1942.78,238.057 1943.35,236.6 1943.92,234.84 1944.49,235.327 1945.05,235.114 1945.62,234.624 1946.19,234.322 1946.76,233.082 1947.33,234.131 1947.9,231.619 1948.46,228.384 1949.03,227.455 1949.6,227.626 1950.17,227.795 1950.74,228.001 1951.31,227.58 1951.87,226.661 1952.44,227.022 1953.01,228.334 1953.58,228.644 1954.15,228.847 1954.72,229.012 1955.28,227.194 1955.85,226.218 1956.42,226.621 1956.99,227.974 1957.56,228.413 1958.13,231.568 1958.69,231.378 1959.26,230.263 1959.83,230.463 1960.4,227.503 1960.97,226.716 1961.54,228.865 1962.1,228.016 1962.67,229.226 1963.24,229.259 1963.81,229.407 1964.38,227.614 1964.95,229.116 1965.51,230.321 1966.08,230.701 1966.65,232.856 1967.22,234.954 1967.79,236.017 1968.36,235.855 1968.92,235.361 1969.49,234.251 1970.06,236.058 1970.63,234.664 1971.2,234.359 1971.77,235.299 1972.34,235.118 1972.9,236.855 1973.47,234.176 1974.04,232.86 1974.61,232.677 1975.18,233.913 1975.75,233.616 1976.31,233.3 1976.88,233.031 1977.45,234.981 1978.02,232.493 1978.59,232.359 1979.16,232.3 1979.72,230.108 1980.29,231.308 1980.86,230.45 1981.43,229.142 1982,230.433 1982.57,230.626 1983.13,230.947 1983.7,231.003 1984.27,232.095 1984.84,233.108 1985.41,233.037 1985.98,233.146 1986.54,232.04 1987.11,230.927 1987.68,228.803 1988.25,228.049 1988.82,227.387 1989.39,226.8 1989.95,228.04 1990.52,228.129 1991.09,229.443 1991.66,230.832 1992.23,230.874 1992.8,232.098 1993.36,231.976 1993.93,230.966 1994.5,231.841 1995.07,232.857 1995.64,231.659 1996.21,230.447 1996.77,231.544 1997.34,231.598 1997.91,231.516 1998.48,228.335 1999.05,228.766 1999.62,228.111 2000.18,231.341 2000.75,230.22 2001.32,229.475 2001.89,232.519 2002.46,232.325 2003.03,229.15 2003.59,229.448 2004.16,231.815 2004.73,231.848 2005.3,231.691 2005.87,230.888 2006.44,232.091 2007,231.991 2007.57,229.809 2008.14,231.204 2008.71,230.344 2009.28,231.512 2009.85,230.572 2010.41,229.676 2010.98,231.999 2011.55,233.043 2012.12,233.088 2012.69,233.78 2013.26,232.726 2013.82,229.669 2014.39,230.848 2014.96,231.219 2015.53,230.374 2016.1,229.482 2016.67,231.526 2017.23,232.495 2017.8,231.46 2018.37,233.774 2018.94,235.737 2019.51,233.597 2020.08,234.298 2020.64,235.092 2021.21,235.164 2021.78,233.919 2022.35,233.799 2022.92,233.779 2023.49,233.488 2024.05,233.4 2024.62,235.205 2025.19,234.847 2025.76,234.71 2026.33,234.492 2026.9,235.202 2027.46,235.063 2028.03,233.041 2028.6,233.995 2029.17,232.854 2029.74,231.786 2030.31,230.993 2030.87,232.22 2031.44,234.134 2032.01,232.051 2032.58,230.927 2033.15,229.008 2033.72,230.486 2034.28,229.612 2034.85,233.13 2035.42,232.214 2035.99,235.274 2036.56,234.957 2037.13,233.617 2037.69,232.407 2038.26,231.389 2038.83,232.493 2039.4,232.176 2039.97,231.185 2040.54,234.023 2041.11,233.983 2041.67,233.759 2042.24,232.6 2042.81,231.519 2043.38,231.49 2043.95,231.337 2044.52,232.568 2045.08,234.445 2045.65,235.223 2046.22,233.911 2046.79,233.792 2047.36,233.477 2047.93,230.273 2048.49,232.372 2049.06,232.189 2049.63,232.976 2050.2,231.687 2050.77,230.677 2051.34,228.596 2051.9,224.858 2052.47,226.331 2053.04,227.538 2053.61,227.583 2054.18,229.742 2054.75,230.689 2055.31,229.823 2055.88,230.133 2056.45,229.114 2057.02,227.194 2057.59,229.546 2058.16,229.53 2058.72,228.782 2059.29,228.994 2059.86,228.912 2060.43,229.303 2061,229.438 2061.57,230.442 2062.13,232.545 2062.7,232.562 2063.27,234.775 2063.84,234.647 2064.41,233.192 2064.98,233.11 2065.54,234.191 2066.11,233.206 2066.68,232.326 2067.25,232.345 2067.82,231.615 2068.39,228.646 2068.95,229.883 2069.52,230.08 2070.09,230.348 2070.66,230.519 2071.23,229.606 2071.8,229.733 2072.36,230.794 2072.93,230.809 2073.5,231.013 2074.07,230.129 2074.64,230.221 2075.21,230.385 2075.77,230.548 2076.34,231.75 2076.91,230.919 2077.48,231.164 2078.05,231.232 2078.62,231.037 2079.18,229.953 2079.75,231.055 2080.32,231.143 2080.89,231.171 2081.46,234.053 2082.03,234.087 2082.59,232.817 2083.16,232.63 2083.73,230.532 2084.3,230.602 2084.87,229.871 2085.44,230.289 2086,230.41 2086.57,232.547 2087.14,232.285 2087.71,232.255 2088.28,234.348 2088.85,235.127 2089.41,234.866 2089.98,232.93 2090.55,232.113 2091.12,233.985 2091.69,233.787 2092.26,233.661 2092.82,233.669 2093.39,234.757 2093.96,234.354 2094.53,235.139 2095.1,233.84 2095.67,233.497 2096.23,233.337 2096.8,234.416 2097.37,234.219 2097.94,237.946 2098.51,237.851 2099.08,237.633 2099.64,234.994 2100.21,237.788 2100.78,237.154 2101.35,238.828 2101.92,240.223 2102.49,238.447 2103.05,236.89 2103.62,236.281 2104.19,237.992 2104.76,238.376 2105.33,237.51 2105.9,235.921 2106.46,235.318 2107.03,235.097 2107.6,232.722 2108.17,231.611 2108.74,231.388 2109.31,230.167 2109.87,230.06 2110.44,229.846 2111.01,227.836 2111.58,228.912 2112.15,226.885 2112.72,227.086 2113.29,228.297 2113.85,227.445 2114.42,227.617 2114.99,226.813 2115.56,224.903 2116.13,223.183 2116.7,224.758 2117.26,224.087 2117.83,224.629 2118.4,226.125 2118.97,224.551 2119.54,226.17 2120.11,225.29 2120.67,224.467 2121.24,224.831 2121.81,225.297 2122.38,225.736 2122.95,226.137 2123.52,227.872 2124.08,227.107 2124.65,227.324 2125.22,228.777 2125.79,229.031 2126.36,229.236 2126.93,230.483 2127.49,230.504 2128.06,230.463 2128.63,229.482 2129.2,228.668 2129.77,228.828 2130.34,233.039 2130.9,233.015 2131.47,232.758 2132.04,229.606 2132.61,230.885 2133.18,232.013 2133.75,231.055 2134.31,229.133 2134.88,229.598 2135.45,231.892 2136.02,231.931 2136.59,233.11 2137.16,231.938 2137.72,231.009 2138.29,232.974 2138.86,231.977 2139.43,233.039 2140,232.912 2140.57,230.439 2141.13,230.693 2141.7,231.735 2142.27,228.708 2142.84,229.964 2143.41,231.088 2143.98,233.34 2144.54,233.38 2145.11,233.408 2145.68,236.499 2146.25,238.347 2146.82,238.149 2147.39,236.582 2147.95,236.421 2148.52,237.168 2149.09,234.75 2149.66,233.435 2150.23,231.249 2150.8,229.1 2151.36,228.187 2151.93,227.578 2152.5,227.842 2153.07,227.961 2153.64,229.429 2154.21,228.701 2154.77,228.709 2155.34,226.875 2155.91,225.245 2156.48,224.88 2157.05,225.395 2157.62,226.872 2158.18,228.259 2158.75,230.519 2159.32,230.698 2159.89,227.798 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip490)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip490)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip490)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip490)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.029 ± 0.025\n  with uncertainty of ± 0.0022936437414755443\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01556 ± (0.00233579, 0.00238819) (MC)\n  95% confidence interval: [-4.0202, -4.01099]) (MC)\n  linear error propagation: -4.01562 ± 0.00244224\n  |δ_y| = |0.00177467| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.01555667891901, val_l = 0.004639374519185502, val_u = 0.004566528510912882)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip520\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip520)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip521\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip520)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip522\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1134.35 2211.02,1134.35 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,967.721 2211.02,967.721 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,801.094 2211.02,801.094 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,634.466 2211.02,634.466 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,467.839 2211.02,467.839 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,301.211 2211.02,301.211 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1134.35 365.751,1134.35 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,967.721 365.751,967.721 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,801.094 365.751,801.094 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,634.466 365.751,634.466 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,467.839 365.751,467.839 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,301.211 365.751,301.211 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M298.909 1120.15 Q295.298 1120.15 293.469 1123.71 Q291.664 1127.25 291.664 1134.38 Q291.664 1141.49 293.469 1145.05 Q295.298 1148.6 298.909 1148.6 Q302.543 1148.6 304.349 1145.05 Q306.177 1141.49 306.177 1134.38 Q306.177 1127.25 304.349 1123.71 Q302.543 1120.15 298.909 1120.15 M298.909 1116.44 Q304.719 1116.44 307.775 1121.05 Q310.853 1125.63 310.853 1134.38 Q310.853 1143.11 307.775 1147.72 Q304.719 1152.3 298.909 1152.3 Q293.099 1152.3 290.02 1147.72 Q286.964 1143.11 286.964 1134.38 Q286.964 1125.63 290.02 1121.05 Q293.099 1116.44 298.909 1116.44 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M259.557 981.066 L267.196 981.066 L267.196 954.7 L258.886 956.367 L258.886 952.108 L267.15 950.441 L271.826 950.441 L271.826 981.066 L279.465 981.066 L279.465 985.001 L259.557 985.001 L259.557 981.066 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M298.909 953.52 Q295.298 953.52 293.469 957.084 Q291.664 960.626 291.664 967.756 Q291.664 974.862 293.469 978.427 Q295.298 981.969 298.909 981.969 Q302.543 981.969 304.349 978.427 Q306.177 974.862 306.177 967.756 Q306.177 960.626 304.349 957.084 Q302.543 953.52 298.909 953.52 M298.909 949.816 Q304.719 949.816 307.775 954.422 Q310.853 959.006 310.853 967.756 Q310.853 976.482 307.775 981.089 Q304.719 985.672 298.909 985.672 Q293.099 985.672 290.02 981.089 Q286.964 976.482 286.964 967.756 Q286.964 959.006 290.02 954.422 Q293.099 949.816 298.909 949.816 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M262.775 814.438 L279.094 814.438 L279.094 818.374 L257.15 818.374 L257.15 814.438 Q259.812 811.684 264.395 807.054 Q269.002 802.401 270.182 801.059 Q272.428 798.536 273.307 796.8 Q274.21 795.04 274.21 793.351 Q274.21 790.596 272.266 788.86 Q270.344 787.124 267.242 787.124 Q265.043 787.124 262.59 787.888 Q260.159 788.651 257.381 790.202 L257.381 785.48 Q260.205 784.346 262.659 783.767 Q265.113 783.189 267.15 783.189 Q272.52 783.189 275.715 785.874 Q278.909 788.559 278.909 793.05 Q278.909 795.179 278.099 797.1 Q277.312 798.999 275.205 801.591 Q274.627 802.262 271.525 805.48 Q268.423 808.674 262.775 814.438 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M298.909 786.892 Q295.298 786.892 293.469 790.457 Q291.664 793.999 291.664 801.128 Q291.664 808.235 293.469 811.799 Q295.298 815.341 298.909 815.341 Q302.543 815.341 304.349 811.799 Q306.177 808.235 306.177 801.128 Q306.177 793.999 304.349 790.457 Q302.543 786.892 298.909 786.892 M298.909 783.189 Q304.719 783.189 307.775 787.795 Q310.853 792.378 310.853 801.128 Q310.853 809.855 307.775 814.462 Q304.719 819.045 298.909 819.045 Q293.099 819.045 290.02 814.462 Q286.964 809.855 286.964 801.128 Q286.964 792.378 290.02 787.795 Q293.099 783.189 298.909 783.189 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M272.914 633.112 Q276.27 633.83 278.145 636.098 Q280.043 638.367 280.043 641.7 Q280.043 646.816 276.525 649.616 Q273.006 652.417 266.525 652.417 Q264.349 652.417 262.034 651.978 Q259.742 651.561 257.289 650.704 L257.289 646.191 Q259.233 647.325 261.548 647.904 Q263.863 648.482 266.386 648.482 Q270.784 648.482 273.076 646.746 Q275.39 645.01 275.39 641.7 Q275.39 638.644 273.238 636.931 Q271.108 635.195 267.289 635.195 L263.261 635.195 L263.261 631.353 L267.474 631.353 Q270.923 631.353 272.752 629.987 Q274.58 628.598 274.58 626.005 Q274.58 623.343 272.682 621.931 Q270.807 620.496 267.289 620.496 Q265.367 620.496 263.168 620.913 Q260.969 621.33 258.33 622.209 L258.33 618.043 Q260.992 617.302 263.307 616.931 Q265.645 616.561 267.705 616.561 Q273.029 616.561 276.131 618.992 Q279.233 621.399 279.233 625.519 Q279.233 628.39 277.59 630.38 Q275.946 632.348 272.914 633.112 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M298.909 620.265 Q295.298 620.265 293.469 623.83 Q291.664 627.371 291.664 634.501 Q291.664 641.607 293.469 645.172 Q295.298 648.714 298.909 648.714 Q302.543 648.714 304.349 645.172 Q306.177 641.607 306.177 634.501 Q306.177 627.371 304.349 623.83 Q302.543 620.265 298.909 620.265 M298.909 616.561 Q304.719 616.561 307.775 621.168 Q310.853 625.751 310.853 634.501 Q310.853 643.228 307.775 647.834 Q304.719 652.417 298.909 652.417 Q293.099 652.417 290.02 647.834 Q286.964 643.228 286.964 634.501 Q286.964 625.751 290.02 621.168 Q293.099 616.561 298.909 616.561 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M271.594 454.633 L259.789 473.082 L271.594 473.082 L271.594 454.633 M270.367 450.559 L276.247 450.559 L276.247 473.082 L281.177 473.082 L281.177 476.971 L276.247 476.971 L276.247 485.119 L271.594 485.119 L271.594 476.971 L255.992 476.971 L255.992 472.457 L270.367 450.559 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M298.909 453.637 Q295.298 453.637 293.469 457.202 Q291.664 460.744 291.664 467.873 Q291.664 474.98 293.469 478.545 Q295.298 482.086 298.909 482.086 Q302.543 482.086 304.349 478.545 Q306.177 474.98 306.177 467.873 Q306.177 460.744 304.349 457.202 Q302.543 453.637 298.909 453.637 M298.909 449.934 Q304.719 449.934 307.775 454.54 Q310.853 459.123 310.853 467.873 Q310.853 476.6 307.775 481.207 Q304.719 485.79 298.909 485.79 Q293.099 485.79 290.02 481.207 Q286.964 476.6 286.964 467.873 Q286.964 459.123 290.02 454.54 Q293.099 449.934 298.909 449.934 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M258.793 283.931 L277.15 283.931 L277.15 287.866 L263.076 287.866 L263.076 296.339 Q264.094 295.991 265.113 295.829 Q266.131 295.644 267.15 295.644 Q272.937 295.644 276.316 298.815 Q279.696 301.987 279.696 307.403 Q279.696 312.982 276.224 316.084 Q272.752 319.162 266.432 319.162 Q264.256 319.162 261.988 318.792 Q259.742 318.422 257.335 317.681 L257.335 312.982 Q259.418 314.116 261.641 314.672 Q263.863 315.227 266.34 315.227 Q270.344 315.227 272.682 313.121 Q275.02 311.014 275.02 307.403 Q275.02 303.792 272.682 301.686 Q270.344 299.579 266.34 299.579 Q264.465 299.579 262.59 299.996 Q260.738 300.413 258.793 301.292 L258.793 283.931 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M298.909 287.01 Q295.298 287.01 293.469 290.575 Q291.664 294.116 291.664 301.246 Q291.664 308.352 293.469 311.917 Q295.298 315.459 298.909 315.459 Q302.543 315.459 304.349 311.917 Q306.177 308.352 306.177 301.246 Q306.177 294.116 304.349 290.575 Q302.543 287.01 298.909 287.01 M298.909 283.306 Q304.719 283.306 307.775 287.913 Q310.853 292.496 310.853 301.246 Q310.853 309.973 307.775 314.579 Q304.719 319.162 298.909 319.162 Q293.099 319.162 290.02 314.579 Q286.964 309.973 286.964 301.246 Q286.964 292.496 290.02 287.913 Q293.099 283.306 298.909 283.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip522)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1011.57 400.199,898.779 400.786,922.261 401.372,823.17 401.958,728.284 402.545,643.512 403.131,670.942 403.718,591.659 404.304,524.351 404.891,461.695 405.477,407.64 406.063,355.971 406.65,309.492 407.236,267.867 407.823,302.402 408.409,332.394 408.995,296.179 409.582,321.528 410.168,343.102 410.755,313.905 411.341,289.328 411.927,269.015 412.514,291.203 413.1,273.68 413.687,258.36 414.273,246.605 414.86,236.194 415.446,228.62 416.032,222.49 416.619,219.895 417.205,243.769 417.792,241.88 418.378,263.981 418.964,266.65 419.551,287.945 420.137,310.519 420.724,315.05 421.31,319.991 421.896,325.648 422.483,331.76 423.069,339.398 423.656,348.222 424.242,368.663 424.829,377.614 425.415,398.138 426.001,418.337 426.588,428.255 427.174,449.641 427.761,469.113 428.347,478.99 428.933,497.647 429.52,515.663 430.106,540.69 430.693,577.899 431.279,593.262 431.865,622.202 432.452,637.683 433.038,659.008 433.625,672.859 434.211,686.587 434.798,700.812 435.384,709.6 435.97,722.554 436.557,731.108 437.143,744.386 437.73,761.675 438.316,769.376 438.902,785.871 439.489,797.627 440.075,824.964 440.662,832.295 441.248,842.675 441.835,853.204 442.421,870.499 443.007,886.978 443.594,899.529 444.18,908.148 444.767,916.842 445.353,921.833 445.939,935.533 446.526,947.059 447.112,957.677 447.699,967.744 448.285,977.75 448.871,984.751 449.458,993.919 450.044,1000.24 450.631,1013.75 451.217,1019.58 451.804,1027.7 452.39,1033.23 452.976,1038.95 453.563,1044.4 454.149,1049.9 454.736,1055.02 455.322,1060.09 455.908,1065.12 456.495,1069.96 457.081,1078.84 457.668,1083.33 458.254,1088.15 458.84,1094.61 459.427,1100.76 460.013,1104.76 460.6,1106.82 461.186,1110.8 461.773,1116.4 462.359,1119.98 462.945,1119.67 463.532,1125.3 464.118,1128.94 464.705,1132.51 465.291,1137.92 465.877,1141.26 466.464,1141.01 467.05,1142.51 467.637,1147.5 468.223,1154.12 468.809,1157.09 469.396,1159.83 469.982,1164.25 470.569,1168.56 471.155,1172.36 471.742,1179.75 472.328,1178.3 472.914,1181.88 473.501,1180.68 474.087,1177.86 474.674,1180.06 475.26,1182.39 475.846,1186.14 476.433,1186.72 477.019,1192.15 477.606,1194.02 478.192,1195.73 478.778,1200.67 479.365,1200.88 479.951,1205.05 480.538,1207.96 481.124,1207.76 481.711,1210.5 482.297,1210.3 482.883,1210.13 483.47,1209.74 484.056,1209.4 484.643,1210.62 485.229,1211.92 485.815,1211.72 486.402,1211.78 486.988,1211.26 487.575,1214.78 488.161,1214.94 488.748,1215 489.334,1213.56 489.92,1213.29 490.507,1213.39 491.093,1213.4 491.68,1215.14 492.266,1215.08 492.852,1213.63 493.439,1212.23 494.025,1215.38 494.612,1217.17 495.198,1219.75 495.784,1220.74 496.371,1222.03 496.957,1221.43 497.544,1222.79 498.13,1225.16 498.717,1226.15 499.303,1224.31 499.889,1226.85 500.476,1229.49 501.062,1233.29 501.649,1235.52 502.235,1237.67 502.821,1239.76 503.408,1238.97 503.994,1238.4 504.581,1237.36 505.167,1237.86 505.753,1235.57 506.34,1232.56 506.926,1234.87 507.513,1235.91 508.099,1243.61 508.686,1246.85 509.272,1246.75 509.858,1246.84 510.445,1245.63 511.031,1245.81 511.618,1247.48 512.204,1247.55 512.79,1250.48 513.377,1250.53 513.963,1247.55 514.55,1249.16 515.136,1246.43 515.722,1246.46 516.309,1248.05 516.895,1242.58 517.482,1241.68 518.068,1240.57 518.655,1236.92 519.241,1234.48 519.827,1236.54 520.414,1234.33 521,1232.37 521.587,1230.24 522.173,1228.4 522.759,1229.61 523.346,1228.02 523.932,1226.4 524.519,1227.41 525.105,1232.64 525.691,1234.66 526.278,1233.93 526.864,1234.64 527.451,1235.16 528.037,1235.69 528.624,1233.52 529.21,1234.16 529.796,1234.56 530.383,1234.01 530.969,1234.7 531.556,1234.04 532.142,1233.12 532.728,1233.89 533.315,1231.95 533.901,1232.47 534.488,1231.86 535.074,1232.77 535.661,1231.89 536.247,1229.67 536.833,1230.53 537.42,1229.87 538.006,1236.19 538.593,1237.69 539.179,1238.04 539.765,1237.34 540.352,1233.61 540.938,1231.65 541.525,1228.37 542.111,1229.62 542.697,1230.47 543.284,1234.06 543.87,1234.75 544.457,1231.31 545.043,1229.23 545.63,1230.03 546.216,1227.8 546.802,1225.74 547.389,1226.71 547.975,1226.14 548.562,1225.87 549.148,1225.5 549.734,1226.57 550.321,1227.67 550.907,1224.4 551.494,1224.24 552.08,1222.62 552.666,1225.62 553.253,1226.65 553.839,1223.3 554.426,1221.46 555.012,1224.07 555.599,1224.92 556.185,1224.07 556.771,1221.31 557.358,1221.29 557.944,1225.56 558.531,1225.01 559.117,1226.04 559.703,1227.33 560.29,1225.63 560.876,1225.49 561.463,1224.1 562.049,1223.93 562.635,1220.98 563.222,1220.68 563.808,1220.47 564.395,1220.28 564.981,1218.52 565.568,1219.87 566.154,1218.25 566.74,1218.12 567.327,1218.25 567.913,1219.83 568.5,1219.59 569.086,1219.36 569.672,1219.25 570.259,1220.6 570.845,1220.42 571.432,1219.19 572.018,1217.55 572.605,1216.03 573.191,1214.4 573.777,1213.32 574.364,1212.24 574.95,1212.54 575.537,1211.5 576.123,1213.06 576.709,1213.4 577.296,1214.64 577.882,1216.09 578.469,1213.44 579.055,1212.26 579.641,1212.52 580.228,1211.53 580.814,1211.89 581.401,1213.39 581.987,1215.16 582.574,1215.14 583.16,1216.68 583.746,1217.83 584.333,1217.58 584.919,1221.6 585.506,1219.61 586.092,1219.29 586.678,1217.66 587.265,1217.68 587.851,1217.59 588.438,1218.57 589.024,1219.67 589.61,1219.58 590.197,1217.93 590.783,1216.4 591.37,1215.04 591.956,1217.86 592.543,1217.81 593.129,1216.35 593.715,1214.81 594.302,1213.36 594.888,1213.59 595.475,1213.83 596.061,1216.48 596.647,1217.47 597.234,1218.76 597.82,1218.75 598.407,1218.44 598.993,1216.82 599.579,1216.77 600.166,1216.67 600.752,1217.91 601.339,1221.87 601.925,1225.4 602.512,1224.71 603.098,1225.24 603.684,1224.56 604.271,1222.6 604.857,1224.61 605.444,1225.58 606.03,1224.98 606.616,1224.25 607.203,1224.83 607.789,1229.55 608.376,1232.65 608.962,1231.45 609.548,1230.44 610.135,1229.46 610.721,1228.32 611.308,1226 611.894,1225.27 612.481,1223.41 613.067,1224.3 613.653,1227.66 614.24,1226.85 614.826,1228.63 615.413,1227.73 615.999,1226.63 616.585,1223.16 617.172,1225.25 617.758,1221.67 618.345,1222.32 618.931,1224.8 619.518,1223.98 620.104,1223.43 620.69,1219.7 621.277,1220.66 621.863,1218.74 622.45,1218.34 623.036,1219.06 623.622,1218.46 624.209,1219.5 624.795,1217.63 625.382,1220.19 625.968,1219.66 626.554,1220.43 627.141,1217.29 627.727,1214.05 628.314,1213.93 628.9,1210.82 629.487,1210.68 630.073,1209.19 630.659,1210.37 631.246,1210.28 631.832,1211.52 632.419,1209.96 633.005,1208.64 633.591,1211.55 634.178,1211.51 634.764,1211.21 635.351,1210.06 635.937,1208.83 636.523,1211.42 637.11,1211.52 637.696,1212.54 638.283,1211.28 638.869,1213.85 639.456,1212.22 640.042,1214.74 640.628,1214.42 641.215,1214.27 641.801,1213.03 642.388,1214.53 642.974,1214.51 643.56,1216.81 644.147,1214.85 644.733,1214.62 645.32,1214.47 645.906,1212.83 646.492,1212.42 647.079,1212.14 647.665,1210.37 648.252,1213.12 648.838,1212.98 649.425,1213.88 650.011,1212.38 650.597,1212.15 651.184,1212.06 651.77,1211.78 652.357,1212.95 652.943,1211.34 653.529,1212.93 654.116,1214.12 654.702,1215.64 655.289,1213.9 655.875,1214.89 656.462,1214.55 657.048,1215.68 657.634,1215.32 658.221,1214.83 658.807,1215.83 659.394,1218.2 659.98,1217.69 660.566,1218.87 661.153,1218.32 661.739,1217.93 662.326,1217.53 662.912,1217.06 663.498,1216.52 664.085,1216.13 664.671,1217.27 665.258,1218.31 665.844,1217.84 666.431,1218.65 667.017,1219.19 667.603,1220.01 668.19,1220.77 668.776,1222.76 669.363,1221.08 669.949,1222.59 670.535,1224.46 671.122,1223.43 671.708,1217.01 672.295,1216.51 672.881,1213.32 673.467,1215.67 674.054,1216.6 674.64,1216.07 675.227,1215.73 675.813,1212.61 676.4,1211 676.986,1211.06 677.572,1208.38 678.159,1208.43 678.745,1210.07 679.332,1206.96 679.918,1207.2 680.504,1209.93 681.091,1211.26 681.677,1208.55 682.264,1209.96 682.85,1209.69 683.436,1208.17 684.023,1205.54 684.609,1206.99 685.196,1209.53 685.782,1210.99 686.369,1210.66 686.955,1209.36 687.541,1209.36 688.128,1210.49 688.714,1207.63 689.301,1206.36 689.887,1203.76 690.473,1202.38 691.06,1201.52 691.646,1204.46 692.233,1202.03 692.819,1203.48 693.405,1203.69 693.992,1203.69 694.578,1201.21 695.165,1203.39 695.751,1205.22 696.338,1205.35 696.924,1206.49 697.51,1209.22 698.097,1203.82 698.683,1205.37 699.27,1208.15 699.856,1209.47 700.442,1209.39 701.029,1207.76 701.615,1209.12 702.202,1207.88 702.788,1207.77 703.375,1206.47 703.961,1205.57 704.547,1205.96 705.134,1208.62 705.72,1209.95 706.307,1211.34 706.893,1212.57 707.479,1217.68 708.066,1221.03 708.652,1221.68 709.239,1222.41 709.825,1220.11 710.411,1219.17 710.998,1219.91 711.584,1217.79 712.171,1217.13 712.757,1216.51 713.344,1214.71 713.93,1212.71 714.516,1212.36 715.103,1212.28 715.689,1210.67 716.276,1209 716.862,1207.45 717.448,1205.99 718.035,1206.23 718.621,1206.24 719.208,1203.72 719.794,1206.54 720.38,1208.19 720.967,1206.93 721.553,1207.29 722.14,1211.68 722.726,1209.99 723.313,1209.88 723.899,1209.59 724.485,1208.07 725.072,1205.46 725.658,1205.34 726.245,1207.91 726.831,1207.81 727.417,1206.38 728.004,1206.39 728.59,1208.82 729.177,1205.99 729.763,1201.72 730.349,1200.49 730.936,1203.41 731.522,1205.07 732.109,1206.43 732.695,1202.51 733.282,1201.28 733.868,1201.44 734.454,1198.99 735.041,1200.59 735.627,1203.44 736.214,1202.38 736.8,1203.9 737.386,1203.97 737.973,1204.24 738.559,1205.85 739.146,1206.09 739.732,1207.39 740.318,1207.26 740.905,1207.03 741.491,1205.71 742.078,1201.72 742.664,1203.11 743.251,1204.63 743.837,1207.04 744.423,1208.43 745.01,1208.37 745.596,1206.82 746.183,1206.97 746.769,1208.81 747.355,1207.38 747.942,1208.79 748.528,1207.46 749.115,1210.06 749.701,1208.66 750.288,1211.47 750.874,1210.97 751.46,1213.13 752.047,1214.05 752.633,1213.51 753.22,1212.95 753.806,1211.34 754.392,1210.75 754.979,1204.72 755.565,1204.52 756.152,1206.15 756.738,1207.49 757.324,1207.2 757.911,1207.19 758.497,1207.05 759.084,1208.18 759.67,1207.79 760.257,1208.64 760.843,1208.52 761.429,1209.77 762.016,1212.46 762.602,1210.81 763.189,1210.85 763.775,1211.78 764.361,1211.4 764.948,1213.54 765.534,1212.93 766.121,1212.43 766.707,1213.51 767.293,1210.29 767.88,1208.82 768.466,1208.46 769.053,1208.36 769.639,1211.2 770.226,1206.84 770.812,1204.3 771.398,1204.32 771.985,1204.24 772.571,1204.38 773.158,1201.68 773.744,1203.04 774.33,1201.61 774.917,1197.61 775.503,1199.25 776.09,1198 776.676,1197.09 777.262,1197.62 777.849,1196.65 778.435,1197 779.022,1197.38 779.608,1197.66 780.195,1196.7 780.781,1197.28 781.367,1196.44 781.954,1198.33 782.54,1202.78 783.127,1201.4 783.713,1201.54 784.299,1203.27 784.886,1203.4 785.472,1203.43 786.059,1206.03 786.645,1207.46 787.232,1204.61 787.818,1208.77 788.404,1211.28 788.991,1209.57 789.577,1207.95 790.164,1206.33 790.75,1206.25 791.336,1206.09 791.923,1207.64 792.509,1203.42 793.096,1204.86 793.682,1206.89 794.268,1205.28 794.855,1205.3 795.441,1205.27 796.028,1205.01 796.614,1204.86 797.201,1204.75 797.787,1201.91 798.373,1199.41 798.96,1199.56 799.546,1197.33 800.133,1199.1 800.719,1200.92 801.305,1199.77 801.892,1202.79 802.478,1205.6 803.065,1203.78 803.651,1204.9 804.237,1207.62 804.824,1210.19 805.41,1212.75 805.997,1210.86 806.583,1210.43 807.17,1212.7 807.756,1212.58 808.342,1213.2 808.929,1207.51 809.515,1206.06 810.102,1206.08 810.688,1208.61 811.274,1208.29 811.861,1206.82 812.447,1205.23 813.034,1210.54 813.62,1208.99 814.206,1206.15 814.793,1203.11 815.379,1204.35 815.966,1203.35 816.552,1202.18 817.139,1199.5 817.725,1205.33 818.311,1202.4 818.898,1199.76 819.484,1199.68 820.071,1202.68 820.657,1202.89 821.243,1199.01 821.83,1199.51 822.416,1199.81 823.003,1200.07 823.589,1200.23 824.175,1198.98 824.762,1200.86 825.348,1199.4 825.935,1199.52 826.521,1201.23 827.108,1201.45 827.694,1201.31 828.28,1201.37 828.867,1199.96 829.453,1199.92 830.04,1198.51 830.626,1197.33 831.212,1197.55 831.799,1196.43 832.385,1196.93 832.972,1198.67 833.558,1199.13 834.145,1200.78 834.731,1202.07 835.317,1202.14 835.904,1206.69 836.49,1206.75 837.077,1206.68 837.663,1209.38 838.249,1208.97 838.836,1211.4 839.422,1207.21 840.009,1207.01 840.595,1205.59 841.181,1205.57 841.768,1205.71 842.354,1201.84 842.941,1203.27 843.527,1201.9 844.114,1204.72 844.7,1203.56 845.286,1204.97 845.873,1204.7 846.459,1205.85 847.046,1204.61 847.632,1203.25 848.218,1203.2 848.805,1204.65 849.391,1203.17 849.978,1203.24 850.564,1206.1 851.15,1205.97 851.737,1205.83 852.323,1204.47 852.91,1207.38 853.496,1207.11 854.083,1207.01 854.669,1205.49 855.255,1205.32 855.842,1203.54 856.428,1203.59 857.015,1204.92 857.601,1206.11 858.187,1207.13 858.774,1204.16 859.36,1204.04 859.947,1200.01 860.533,1199.97 861.119,1200.16 861.706,1199.13 862.292,1198.17 862.879,1199.7 863.465,1201.14 864.052,1202.28 864.638,1203.83 865.224,1203.69 865.811,1206.39 866.397,1207.89 866.984,1207.82 867.57,1210.19 868.156,1208.5 868.743,1206.83 869.329,1205.29 869.916,1206.28 870.502,1206.28 871.089,1206.05 871.675,1208.72 872.261,1203.05 872.848,1203.13 873.434,1201.96 874.021,1202.12 874.607,1203.42 875.193,1204.59 875.78,1207.3 876.366,1204.28 876.953,1204.28 877.539,1203.08 878.125,1203.26 878.712,1203.11 879.298,1201.61 879.885,1204.52 880.471,1204.6 881.058,1201.77 881.644,1203.09 882.23,1202.9 882.817,1204.44 883.403,1204.27 883.99,1205.4 884.576,1203.85 885.162,1198.53 885.749,1197.34 886.335,1197.87 886.922,1200.88 887.508,1199.43 888.094,1199.56 888.681,1199.75 889.267,1200.93 889.854,1198.15 890.44,1198.49 891.027,1199.06 891.613,1202.08 892.199,1202.25 892.786,1203.57 893.372,1204.71 893.959,1204.62 894.545,1207.29 895.131,1207.03 895.718,1206.99 896.304,1210.42 896.891,1211.35 897.477,1210.72 898.063,1210.54 898.65,1212.94 899.236,1209.94 899.823,1209.3 900.409,1209.13 900.996,1205.96 901.582,1206.98 902.168,1209.45 902.755,1208.74 903.341,1208.5 903.928,1209.36 904.514,1204.71 905.1,1207.36 905.687,1205.74 906.273,1205.4 906.86,1203.56 907.446,1203.64 908.032,1203.58 908.619,1206.12 909.205,1207.38 909.792,1205.82 910.378,1202.92 910.965,1204.05 911.551,1205.28 912.137,1204.99 912.724,1206.14 913.31,1204.54 913.897,1204.56 914.483,1203.01 915.069,1204.32 915.656,1206.85 916.242,1208.04 916.829,1209.04 917.415,1210.25 918.002,1212.56 918.588,1214.7 919.174,1212.6 919.761,1208.05 920.347,1210.31 920.934,1211.06 921.52,1210.81 922.106,1210.24 922.693,1211.19 923.279,1207.96 923.866,1207.72 924.452,1210.34 925.038,1208.73 925.625,1207.38 926.211,1204.36 926.798,1204.39 927.384,1205.78 927.971,1207.16 928.557,1207.03 929.143,1208.12 929.73,1206.76 930.316,1209.11 930.903,1210.31 931.489,1208.6 932.075,1208.13 932.662,1208.91 933.248,1209.74 933.835,1206.17 934.421,1204.87 935.007,1205.95 935.594,1206.99 936.18,1202.77 936.767,1201.17 937.353,1200.01 937.94,1196 938.526,1194.93 939.112,1194.16 939.699,1192.94 940.285,1196.47 940.872,1192.59 941.458,1192.81 942.044,1195.99 942.631,1197.66 943.217,1200.39 943.804,1200.43 944.39,1197.97 944.976,1196.65 945.563,1195.56 946.149,1194.61 946.736,1194.85 947.322,1195.11 947.909,1194.07 948.495,1194.33 949.081,1194.94 949.668,1197.92 950.254,1198.16 950.841,1199.55 951.427,1198.52 952.013,1196.79 952.6,1195.83 953.186,1196.15 953.773,1196.77 954.359,1196.96 954.945,1197.27 955.532,1197.68 956.118,1196.34 956.705,1191.34 957.291,1190.12 957.878,1192.31 958.464,1194.2 959.05,1196.02 959.637,1196.58 960.223,1198.22 960.81,1201.33 961.396,1201.4 961.982,1201.61 962.569,1201.86 963.155,1200.99 963.742,1201.01 964.328,1200.88 964.915,1202.52 965.501,1201.36 966.087,1199.87 966.674,1197.44 967.26,1198.94 967.847,1200.2 968.433,1204.07 969.019,1205.46 969.606,1205.29 970.192,1206.64 970.779,1206.6 971.365,1208.9 971.951,1207.11 972.538,1209.94 973.124,1207.17 973.711,1208.27 974.297,1205.2 974.884,1205.09 975.47,1205.03 976.056,1204.64 976.643,1204.67 977.229,1201.74 977.816,1203.19 978.402,1204.49 978.988,1203.21 979.575,1201.77 980.161,1201.55 980.748,1197.62 981.334,1200.48 981.92,1199.02 982.507,1200.6 983.093,1202.41 983.68,1199.4 984.266,1199.36 984.853,1198.03 985.439,1198.39 986.025,1200.19 986.612,1200.07 987.198,1201.39 987.785,1198.64 988.371,1197.66 988.957,1197.68 989.544,1196.52 990.13,1196.91 990.717,1196.93 991.303,1195.75 991.889,1197.42 992.476,1197.75 993.062,1198.13 993.649,1199.93 994.235,1200.16 994.822,1201.5 995.408,1204.55 995.994,1201.77 996.581,1200.3 997.167,1198.68 997.754,1199.41 998.34,1199.46 998.926,1199.57 999.513,1199.69 1000.1,1198.44 1000.69,1197.4 1001.27,1197.66 1001.86,1196.36 1002.44,1198.54 1003.03,1201.56 1003.62,1202.82 1004.2,1202.78 1004.79,1202.88 1005.38,1204.14 1005.96,1203.15 1006.55,1201.77 1007.14,1202.1 1007.72,1198.05 1008.31,1196.99 1008.9,1200 1009.48,1198.81 1010.07,1200.14 1010.65,1200.09 1011.24,1200.18 1011.83,1200.01 1012.41,1200.38 1013,1201.91 1013.59,1201.87 1014.17,1201.94 1014.76,1203.39 1015.35,1204.76 1015.93,1201.41 1016.52,1201.64 1017.11,1201.5 1017.69,1204 1018.28,1202.7 1018.86,1201.64 1019.45,1200.45 1020.04,1201.79 1020.62,1200.2 1021.21,1200.29 1021.8,1200.43 1022.38,1200.6 1022.97,1200.69 1023.56,1200.8 1024.14,1203.61 1024.73,1202.03 1025.32,1203.48 1025.9,1201.72 1026.49,1198.85 1027.07,1200.11 1027.66,1201.54 1028.25,1204.49 1028.83,1206.83 1029.42,1205.42 1030.01,1202.34 1030.59,1202.3 1031.18,1202.18 1031.77,1203.57 1032.35,1200.83 1032.94,1199.92 1033.52,1199.99 1034.11,1200.15 1034.7,1198.76 1035.28,1200.1 1035.87,1201.58 1036.46,1203.9 1037.04,1202.32 1037.63,1202.52 1038.22,1201.15 1038.8,1202.56 1039.39,1202.6 1039.98,1198.35 1040.56,1199.79 1041.15,1200.12 1041.73,1198.97 1042.32,1200.22 1042.91,1198.75 1043.49,1199.2 1044.08,1201.98 1044.67,1200.58 1045.25,1200.61 1045.84,1203.29 1046.43,1204.89 1047.01,1203.24 1047.6,1201.83 1048.19,1203.15 1048.77,1201.98 1049.36,1202.04 1049.94,1202.23 1050.53,1202.08 1051.12,1200.46 1051.7,1198.93 1052.29,1200.31 1052.88,1201.77 1053.46,1202.05 1054.05,1202.05 1054.64,1201.87 1055.22,1201.97 1055.81,1203.49 1056.39,1202.12 1056.98,1204.79 1057.57,1202.2 1058.15,1204.01 1058.74,1202.56 1059.33,1203.96 1059.91,1205.08 1060.5,1205.07 1061.09,1206.44 1061.67,1207.66 1062.26,1209.09 1062.85,1208.73 1063.43,1209.5 1064.02,1209.32 1064.6,1207.56 1065.19,1206.99 1065.78,1205.53 1066.36,1203.86 1066.95,1196.8 1067.54,1196.76 1068.12,1193.05 1068.71,1194.6 1069.3,1193.83 1069.88,1195.64 1070.47,1197.1 1071.06,1196.96 1071.64,1201.16 1072.23,1199.79 1072.81,1199.79 1073.4,1202.57 1073.99,1199.78 1074.57,1200.98 1075.16,1202.49 1075.75,1201.02 1076.33,1202.41 1076.92,1203.27 1077.51,1201.72 1078.09,1201.88 1078.68,1203.29 1079.26,1203.19 1079.85,1205.98 1080.44,1205.59 1081.02,1209.34 1081.61,1213.18 1082.2,1212.76 1082.78,1209.37 1083.37,1206.03 1083.96,1205.83 1084.54,1205.8 1085.13,1206.84 1085.72,1206.75 1086.3,1206.56 1086.89,1207.39 1087.47,1209.56 1088.06,1208.98 1088.65,1207.38 1089.23,1205.8 1089.82,1209.69 1090.41,1204.05 1090.99,1206.63 1091.58,1210.5 1092.17,1209.77 1092.75,1205.33 1093.34,1205 1093.93,1203.62 1094.51,1206.43 1095.1,1203.67 1095.68,1206.07 1096.27,1205.65 1096.86,1206.59 1097.44,1204.98 1098.03,1204.93 1098.62,1203.41 1099.2,1204.67 1099.79,1201.77 1100.38,1201.56 1100.96,1200.4 1101.55,1202.1 1102.14,1203.45 1102.72,1204.58 1103.31,1203.21 1103.89,1201.73 1104.48,1200.3 1105.07,1201.4 1105.65,1200 1106.24,1200.05 1106.83,1200.51 1107.41,1198.07 1108,1203.77 1108.59,1206.56 1109.17,1205.98 1109.76,1207.02 1110.34,1205.43 1110.93,1201.06 1111.52,1201.07 1112.1,1206.53 1112.69,1208.74 1113.28,1205.57 1113.86,1205.38 1114.45,1201.02 1115.04,1199.69 1115.62,1198.33 1116.21,1195.68 1116.8,1194.75 1117.38,1196.68 1117.97,1195.64 1118.55,1195.83 1119.14,1196.39 1119.73,1200.81 1120.31,1200.85 1120.9,1199.43 1121.49,1200.81 1122.07,1200.77 1122.66,1200.67 1123.25,1202.2 1123.83,1200.6 1124.42,1203.2 1125.01,1203.41 1125.59,1203.25 1126.18,1204.23 1126.76,1205.13 1127.35,1203.54 1127.94,1200.8 1128.52,1197.03 1129.11,1200.07 1129.7,1202.85 1130.28,1205.53 1130.87,1205.54 1131.46,1203.91 1132.04,1200.8 1132.63,1202.26 1133.21,1206.34 1133.8,1203.47 1134.39,1203.26 1134.97,1201.83 1135.56,1203.18 1136.15,1203.31 1136.73,1201.74 1137.32,1201.65 1137.91,1200.53 1138.49,1199.03 1139.08,1200.66 1139.67,1203.33 1140.25,1203.27 1140.84,1201.94 1141.42,1204.82 1142.01,1202.01 1142.6,1199.54 1143.18,1199.56 1143.77,1205.12 1144.36,1203.51 1144.94,1203.56 1145.53,1205.14 1146.12,1206.09 1146.7,1203.19 1147.29,1203.31 1147.88,1204.49 1148.46,1204.28 1149.05,1204.22 1149.63,1202.7 1150.22,1204.01 1150.81,1205.25 1151.39,1204.89 1151.98,1208.78 1152.57,1208.24 1153.15,1207.94 1153.74,1207.53 1154.33,1207.2 1154.91,1205.43 1155.5,1206.46 1156.09,1206.29 1156.67,1204.62 1157.26,1205.65 1157.84,1206.5 1158.43,1206.17 1159.02,1204.66 1159.6,1204.4 1160.19,1205.4 1160.78,1206.74 1161.36,1203.69 1161.95,1200.81 1162.54,1202.46 1163.12,1206.75 1163.71,1206.35 1164.29,1207.93 1164.88,1211.55 1165.47,1210.81 1166.05,1207.54 1166.64,1207.21 1167.23,1205.59 1167.81,1206.59 1168.4,1207.77 1168.99,1210.08 1169.57,1211.06 1170.16,1213.23 1170.75,1212.3 1171.33,1211.38 1171.92,1212.41 1172.5,1211.88 1173.09,1211.3 1173.68,1209.22 1174.26,1208.57 1174.85,1206.89 1175.44,1206.64 1176.02,1204.85 1176.61,1204.78 1177.2,1203.08 1177.78,1197.59 1178.37,1197.81 1178.96,1199.2 1179.54,1200.82 1180.13,1197.82 1180.71,1196.84 1181.3,1194 1181.89,1195.69 1182.47,1194.57 1183.06,1194.71 1183.65,1193.35 1184.23,1195 1184.82,1195.66 1185.41,1195.97 1185.99,1196.1 1186.58,1197.51 1187.16,1197.98 1187.75,1198.15 1188.34,1198.41 1188.92,1197.16 1189.51,1197.34 1190.1,1194.95 1190.68,1196.46 1191.27,1200.75 1191.86,1199.42 1192.44,1200.61 1193.03,1202.28 1193.62,1196.95 1194.2,1197.39 1194.79,1196.41 1195.37,1196.75 1195.96,1198.63 1196.55,1197.38 1197.13,1197.77 1197.72,1195.19 1198.31,1198.08 1198.89,1195.41 1199.48,1194.28 1200.07,1193.16 1200.65,1193.48 1201.24,1192.69 1201.83,1191.86 1202.41,1189.71 1203,1189.12 1203.58,1189.96 1204.17,1194.85 1204.76,1192.6 1205.34,1191.69 1205.93,1190.97 1206.52,1192.95 1207.1,1192.28 1207.69,1191.33 1208.28,1191.9 1208.86,1193.48 1209.45,1193.98 1210.03,1197.34 1210.62,1197.48 1211.21,1199.31 1211.79,1202.3 1212.38,1201.18 1212.97,1201.06 1213.55,1197.29 1214.14,1197.68 1214.73,1200.48 1215.31,1198.97 1215.9,1203.09 1216.49,1204.53 1217.07,1203.16 1217.66,1203.42 1218.24,1200.88 1218.83,1199.72 1219.42,1201.01 1220,1201.06 1220.59,1202.6 1221.18,1202.66 1221.76,1201.16 1222.35,1201.31 1222.94,1199.84 1223.52,1199.86 1224.11,1202.86 1224.7,1200.05 1225.28,1197.42 1225.87,1195.23 1226.45,1195.76 1227.04,1193.44 1227.63,1195.08 1228.21,1196.95 1228.8,1196 1229.39,1193.3 1229.97,1192.32 1230.56,1191.47 1231.15,1195.98 1231.73,1201.48 1232.32,1201.29 1232.91,1201.28 1233.49,1204.12 1234.08,1201.43 1234.66,1200.14 1235.25,1200.71 1235.84,1199.42 1236.42,1199.74 1237.01,1199.86 1237.6,1199.81 1238.18,1200.18 1238.77,1200.35 1239.36,1206.14 1239.94,1201.81 1240.53,1201.82 1241.11,1203.2 1241.7,1203.2 1242.29,1201.73 1242.87,1202.79 1243.46,1200.45 1244.05,1198.09 1244.63,1199.5 1245.22,1199.46 1245.81,1196.75 1246.39,1197.3 1246.98,1197.2 1247.57,1200 1248.15,1200.16 1248.74,1201.84 1249.32,1202.97 1249.91,1202.79 1250.5,1202.96 1251.08,1205.5 1251.67,1202.65 1252.26,1202.51 1252.84,1204.1 1253.43,1202.55 1254.02,1203.82 1254.6,1203.86 1255.19,1206.3 1255.78,1208.8 1256.36,1209.77 1256.95,1209.36 1257.53,1208.66 1258.12,1209.34 1258.71,1208.75 1259.29,1210.99 1259.88,1210.35 1260.47,1208.62 1261.05,1206.8 1261.64,1205.47 1262.23,1203.92 1262.81,1205.1 1263.4,1206.45 1263.98,1204.88 1264.57,1204.59 1265.16,1205.83 1265.74,1204.24 1266.33,1208.32 1266.92,1208.15 1267.5,1209.24 1268.09,1205.88 1268.68,1208.58 1269.26,1210.82 1269.85,1211.67 1270.44,1211.03 1271.02,1214.74 1271.61,1215.55 1272.19,1213.16 1272.78,1212.38 1273.37,1213.37 1273.95,1211.53 1274.54,1208.31 1275.13,1206.38 1275.71,1206 1276.3,1207.14 1276.89,1206.59 1277.47,1203.67 1278.06,1204.94 1278.65,1206.33 1279.23,1207.36 1279.82,1212.13 1280.4,1212.9 1280.99,1210.88 1281.58,1209.03 1282.16,1205.9 1282.75,1204.24 1283.34,1202.82 1283.92,1202.62 1284.51,1204.03 1285.1,1203.77 1285.68,1204.91 1286.27,1204.78 1286.86,1204.83 1287.44,1205.97 1288.03,1204.67 1288.61,1204.58 1289.2,1201.53 1289.79,1202.72 1290.37,1199.79 1290.96,1203.97 1291.55,1203.79 1292.13,1202.08 1292.72,1201.91 1293.31,1200.41 1293.89,1201.88 1294.48,1201.8 1295.06,1203.05 1295.65,1203 1296.24,1204.15 1296.82,1202.68 1297.41,1202.58 1298,1202.47 1298.58,1203.95 1299.17,1204 1299.76,1200.97 1300.34,1199.66 1300.93,1199.96 1301.52,1200.1 1302.1,1196.06 1302.69,1199.14 1303.27,1199.17 1303.86,1197.9 1304.45,1199.71 1305.03,1201.23 1305.62,1200.26 1306.21,1199.16 1306.79,1199.28 1307.38,1193.96 1307.97,1191.69 1308.55,1193.49 1309.14,1192.41 1309.73,1192.84 1310.31,1190.9 1310.9,1193.8 1311.48,1191.54 1312.07,1193.72 1312.66,1196.87 1313.24,1198.27 1313.83,1198.58 1314.42,1198.91 1315,1199.23 1315.59,1199.41 1316.18,1198.14 1316.76,1198.34 1317.35,1200.21 1317.93,1200.35 1318.52,1201.95 1319.11,1201.76 1319.69,1202.91 1320.28,1201.63 1320.87,1198.87 1321.45,1201.2 1322.04,1202.86 1322.63,1204.4 1323.21,1209.92 1323.8,1209.78 1324.39,1210.93 1324.97,1211.75 1325.56,1212.27 1326.14,1213.44 1326.73,1212.43 1327.32,1211.37 1327.9,1209.37 1328.49,1210.08 1329.08,1212.64 1329.66,1210.65 1330.25,1208.53 1330.84,1210.92 1331.42,1209.1 1332.01,1208.59 1332.6,1208.08 1333.18,1210.29 1333.77,1208.18 1334.35,1206.57 1334.94,1206.28 1335.53,1206.12 1336.11,1204.5 1336.7,1201.7 1337.29,1201.76 1337.87,1204.69 1338.46,1203.06 1339.05,1204.46 1339.63,1205.8 1340.22,1208.53 1340.8,1209.61 1341.39,1210.38 1341.98,1206.95 1342.56,1206.57 1343.15,1207.7 1343.74,1206.23 1344.32,1206.09 1344.91,1204.62 1345.5,1204.45 1346.08,1203.1 1346.67,1202.8 1347.26,1201.22 1347.84,1198.61 1348.43,1196.05 1349.01,1193.74 1349.6,1191.31 1350.19,1190.4 1350.77,1189.58 1351.36,1187.57 1351.95,1188.45 1352.53,1190.6 1353.12,1195.05 1353.71,1196.63 1354.29,1195.33 1354.88,1198.03 1355.47,1198.16 1356.05,1198.16 1356.64,1191.55 1357.22,1190.83 1357.81,1190.02 1358.4,1192.12 1358.98,1191.08 1359.57,1190.29 1360.16,1192.35 1360.74,1195.87 1361.33,1194.8 1361.92,1195.3 1362.5,1195.69 1363.09,1194.33 1363.68,1195.16 1364.26,1194.13 1364.85,1193.2 1365.43,1192.48 1366.02,1191.75 1366.61,1194.87 1367.19,1194.76 1367.78,1196.46 1368.37,1196.5 1368.95,1195.52 1369.54,1193.01 1370.13,1194.87 1370.71,1196.55 1371.3,1198.06 1371.88,1199.55 1372.47,1199.68 1373.06,1201.18 1373.64,1201.24 1374.23,1202.7 1374.82,1198.8 1375.4,1196.67 1375.99,1196.99 1376.58,1198.89 1377.16,1198.8 1377.75,1197.56 1378.34,1199.31 1378.92,1200.64 1379.51,1202.18 1380.09,1199.6 1380.68,1194.46 1381.27,1194.9 1381.85,1193.71 1382.44,1195.6 1383.03,1195.78 1383.61,1197.57 1384.2,1193.27 1384.79,1193.55 1385.37,1194.19 1385.96,1197.34 1386.55,1199.1 1387.13,1199.51 1387.72,1196.89 1388.3,1198.64 1388.89,1201.24 1389.48,1201.34 1390.06,1201.56 1390.65,1200 1391.24,1205.32 1391.82,1205.1 1392.41,1203.52 1393,1202.1 1393.58,1203.25 1394.17,1199.45 1394.75,1197.86 1395.34,1200.84 1395.93,1203.63 1396.51,1203.71 1397.1,1203.63 1397.69,1204.95 1398.27,1205.93 1398.86,1205.45 1399.45,1203.88 1400.03,1203.74 1400.62,1199.52 1401.21,1201.35 1401.79,1201.07 1402.38,1199.85 1402.96,1201.11 1403.55,1198.81 1404.14,1200.16 1404.72,1198.65 1405.31,1201.32 1405.9,1201.46 1406.48,1201.56 1407.07,1205.52 1407.66,1207.8 1408.24,1206.3 1408.83,1209.91 1409.42,1205.34 1410,1205.01 1410.59,1203.26 1411.17,1202.98 1411.76,1202.68 1412.35,1205.54 1412.93,1204.18 1413.52,1202.79 1414.11,1201.32 1414.69,1200.05 1415.28,1200.01 1415.87,1200.25 1416.45,1197.83 1417.04,1199.58 1417.63,1202.15 1418.21,1201.95 1418.8,1203.35 1419.38,1200.71 1419.97,1201.06 1420.56,1200.98 1421.14,1202.83 1421.73,1198.68 1422.32,1196.09 1422.9,1196.27 1423.49,1196.54 1424.08,1200.81 1424.66,1203.38 1425.25,1201.58 1425.83,1202.74 1426.42,1201.35 1427.01,1203.95 1427.59,1203.72 1428.18,1206.27 1428.77,1206.19 1429.35,1204.55 1429.94,1205.7 1430.53,1210.42 1431.11,1209.89 1431.7,1209.1 1432.29,1207.5 1432.87,1201.56 1433.46,1202.88 1434.04,1201.29 1434.63,1201.26 1435.22,1198.43 1435.8,1197.23 1436.39,1198.87 1436.98,1197.85 1437.56,1199.32 1438.15,1197.04 1438.74,1197.35 1439.32,1197.63 1439.91,1196.51 1440.5,1196.79 1441.08,1194.54 1441.67,1195.09 1442.25,1198.16 1442.84,1206.38 1443.43,1204.61 1444.01,1201.7 1444.6,1201.71 1445.19,1201.85 1445.77,1200.52 1446.36,1201.95 1446.95,1201.78 1447.53,1198.88 1448.12,1198.95 1448.7,1198.93 1449.29,1197.69 1449.88,1197.91 1450.46,1195.19 1451.05,1197.07 1451.64,1197.19 1452.22,1195.76 1452.81,1196.35 1453.4,1199.26 1453.98,1198.05 1454.57,1198.28 1455.16,1197.13 1455.74,1199.95 1456.33,1200.01 1456.91,1202.71 1457.5,1204.1 1458.09,1204.22 1458.67,1203.83 1459.26,1204.1 1459.85,1204.19 1460.43,1205.45 1461.02,1203.68 1461.61,1203.55 1462.19,1206.38 1462.78,1207.66 1463.37,1208.56 1463.95,1209.44 1464.54,1206.19 1465.12,1204.26 1465.71,1205.6 1466.3,1207 1466.88,1208.19 1467.47,1207.75 1468.06,1204.43 1468.64,1207.05 1469.23,1205.26 1469.82,1203.81 1470.4,1205.03 1470.99,1203.13 1471.57,1201.54 1472.16,1204.36 1472.75,1204.41 1473.33,1203.53 1473.92,1203.31 1474.51,1204.32 1475.09,1205.64 1475.68,1206.77 1476.27,1203.8 1476.85,1204.75 1477.44,1204.29 1478.03,1201.1 1478.61,1199.83 1479.2,1202.52 1479.78,1203.8 1480.37,1202.14 1480.96,1201.95 1481.54,1200.46 1482.13,1200.76 1482.72,1199.33 1483.3,1203.54 1483.89,1203.21 1484.48,1201.7 1485.06,1202.77 1485.65,1202.65 1486.24,1203.88 1486.82,1203.59 1487.41,1204.87 1487.99,1201.77 1488.58,1201.89 1489.17,1200.79 1489.75,1198.14 1490.34,1196.83 1490.93,1197.29 1491.51,1197.37 1492.1,1198.91 1492.69,1203.19 1493.27,1201.73 1493.86,1200.35 1494.45,1200.31 1495.03,1200.29 1495.62,1200.58 1496.2,1198 1496.79,1199.48 1497.38,1202.37 1497.96,1202.09 1498.55,1203.52 1499.14,1205.95 1499.72,1205.68 1500.31,1201.28 1500.9,1200.29 1501.48,1202.96 1502.07,1207.14 1502.65,1208.23 1503.24,1209.15 1503.83,1207.17 1504.41,1202.73 1505,1205.29 1505.59,1203.94 1506.17,1203.75 1506.76,1202.53 1507.35,1203.94 1507.93,1206.41 1508.52,1203.48 1509.11,1201.95 1509.69,1203.64 1510.28,1203.61 1510.86,1205.11 1511.45,1205.01 1512.04,1198 1512.62,1198.25 1513.21,1195.79 1513.8,1195.06 1514.38,1196.56 1514.97,1196.94 1515.56,1196.18 1516.14,1196.26 1516.73,1199.12 1517.32,1197.57 1517.9,1199.28 1518.49,1199.21 1519.07,1200.61 1519.66,1200.63 1520.25,1197.9 1520.83,1198.04 1521.42,1199.56 1522.01,1203.8 1522.59,1203.72 1523.18,1205.05 1523.77,1206.06 1524.35,1203.03 1524.94,1204.4 1525.52,1202.67 1526.11,1205.31 1526.7,1209.05 1527.28,1211.36 1527.87,1209.64 1528.46,1208.15 1529.04,1209.16 1529.63,1211.33 1530.22,1208.11 1530.8,1208.81 1531.39,1209.77 1531.98,1209.63 1532.56,1211.7 1533.15,1208.45 1533.73,1204.88 1534.32,1208.74 1534.91,1206.95 1535.49,1208.19 1536.08,1205.24 1536.67,1201.01 1537.25,1202.5 1537.84,1202.47 1538.43,1200.95 1539.01,1197.75 1539.6,1199.16 1540.19,1199.25 1540.77,1200.75 1541.36,1200.74 1541.94,1199.61 1542.53,1195.74 1543.12,1194.63 1543.7,1194.99 1544.29,1192.38 1544.88,1190.15 1545.46,1186.65 1546.05,1188.95 1546.64,1187.13 1547.22,1189.2 1547.81,1190.11 1548.4,1190.68 1548.98,1190.05 1549.57,1188 1550.15,1185.93 1550.74,1185.59 1551.33,1186.44 1551.91,1186.21 1552.5,1185.63 1553.09,1185.2 1553.67,1184.94 1554.26,1184.47 1554.85,1185.57 1555.43,1183.59 1556.02,1184.85 1556.6,1189.87 1557.19,1191.88 1557.78,1193.66 1558.36,1193.98 1558.95,1194.46 1559.54,1194.86 1560.12,1196.51 1560.71,1195.05 1561.3,1194.28 1561.88,1193.4 1562.47,1195.37 1563.06,1194.3 1563.64,1196.16 1564.23,1195.2 1564.81,1195.55 1565.4,1194.73 1565.99,1193.56 1566.57,1193.91 1567.16,1195.69 1567.75,1196.13 1568.33,1199.04 1568.92,1199.17 1569.51,1197.86 1570.09,1196.6 1570.68,1198.5 1571.27,1197.37 1571.85,1197.57 1572.44,1196.6 1573.02,1199.66 1573.61,1199.72 1574.2,1201.31 1574.78,1198.64 1575.37,1201.16 1575.96,1200.53 1576.54,1200.49 1577.13,1201.87 1577.72,1204.59 1578.3,1205.82 1578.89,1206.8 1579.47,1206.58 1580.06,1205.05 1580.65,1203.54 1581.23,1200.92 1581.82,1201.02 1582.41,1201.09 1582.99,1202.35 1583.58,1202.13 1584.17,1203.59 1584.75,1206.11 1585.34,1207.41 1585.93,1207.15 1586.51,1209.6 1587.1,1207.86 1587.68,1205.04 1588.27,1203.32 1588.86,1203.46 1589.44,1207.79 1590.03,1208.85 1590.62,1208.48 1591.2,1209.63 1591.79,1213.28 1592.38,1208.72 1592.96,1205.83 1593.55,1204 1594.14,1205.2 1594.72,1206.35 1595.31,1206.11 1595.89,1205.69 1596.48,1208.12 1597.07,1202.36 1597.65,1203.6 1598.24,1203.25 1598.83,1204.19 1599.41,1205.39 1600,1205.03 1600.59,1205.98 1601.17,1206 1601.76,1203.26 1602.34,1203.49 1602.93,1200.55 1603.52,1201.6 1604.1,1201.54 1604.69,1201.65 1605.28,1202.76 1605.86,1202.67 1606.45,1201.08 1607.04,1199.72 1607.62,1198.36 1608.21,1199.88 1608.8,1200.03 1609.38,1197.12 1609.97,1198.71 1610.55,1200.19 1611.14,1201.61 1611.73,1201.72 1612.31,1200.01 1612.9,1200.1 1613.49,1201.59 1614.07,1202.48 1614.66,1201.97 1615.25,1201.84 1615.83,1201.76 1616.42,1198.81 1617.01,1197.63 1617.59,1199.17 1618.18,1199.36 1618.76,1199.47 1619.35,1201.03 1619.94,1201.13 1620.52,1199.76 1621.11,1199.76 1621.7,1202.33 1622.28,1199.66 1622.87,1201.06 1623.46,1201.17 1624.04,1201.51 1624.63,1205.57 1625.22,1205.41 1625.8,1202.44 1626.39,1203.57 1626.97,1204.81 1627.56,1203.28 1628.15,1202.04 1628.73,1200.64 1629.32,1197.83 1629.91,1196.43 1630.49,1196.46 1631.08,1198.19 1631.67,1198.18 1632.25,1198.42 1632.84,1201.02 1633.42,1201.11 1634.01,1201.11 1634.6,1202.29 1635.18,1205.1 1635.77,1204.88 1636.36,1200.76 1636.94,1200.89 1637.53,1200.8 1638.12,1199.45 1638.7,1198.2 1639.29,1196.81 1639.88,1198.6 1640.46,1198.71 1641.05,1200.37 1641.63,1203.03 1642.22,1204.42 1642.81,1200.41 1643.39,1202.09 1643.98,1200.76 1644.57,1205 1645.15,1206.03 1645.74,1202.95 1646.33,1204.02 1646.91,1203.94 1647.5,1203.64 1648.09,1202.22 1648.67,1204.71 1649.26,1204.64 1649.84,1204.44 1650.43,1204.38 1651.02,1201.08 1651.6,1201.16 1652.19,1200.77 1652.78,1202.05 1653.36,1206.05 1653.95,1205.93 1654.54,1204.28 1655.12,1205.55 1655.71,1202.5 1656.29,1202.64 1656.88,1206.7 1657.47,1207.74 1658.05,1207.44 1658.64,1204.4 1659.23,1204.42 1659.81,1205.47 1660.4,1205.02 1660.99,1207.87 1661.57,1207.81 1662.16,1206.16 1662.75,1207.35 1663.33,1207.15 1663.92,1201.19 1664.5,1199.95 1665.09,1200.2 1665.68,1198.94 1666.26,1199.04 1666.85,1199.34 1667.44,1199.48 1668.02,1198.29 1668.61,1198.43 1669.2,1204.03 1669.78,1203.67 1670.37,1201.9 1670.96,1200.34 1671.54,1203.22 1672.13,1201.46 1672.71,1200.06 1673.3,1198.83 1673.89,1199.17 1674.47,1199.24 1675.06,1198.04 1675.65,1201.1 1676.23,1199.48 1676.82,1195.52 1677.41,1194.47 1677.99,1198.8 1678.58,1194.87 1679.17,1192.62 1679.75,1189.08 1680.34,1192.61 1680.92,1195.67 1681.51,1194.67 1682.1,1197.81 1682.68,1196.75 1683.27,1198.23 1683.86,1196.92 1684.44,1195.92 1685.03,1195.25 1685.62,1194.1 1686.2,1195.63 1686.79,1198.84 1687.37,1198.81 1687.96,1196.32 1688.55,1199.19 1689.13,1196.78 1689.72,1199.79 1690.31,1199.94 1690.89,1199.95 1691.48,1201.46 1692.07,1202.89 1692.65,1201.74 1693.24,1198.92 1693.83,1198.93 1694.41,1201.71 1695,1200.03 1695.58,1201.46 1696.17,1200.29 1696.76,1200.48 1697.34,1197.86 1697.93,1200.72 1698.52,1202.19 1699.1,1202.33 1699.69,1202.52 1700.28,1201.3 1700.86,1201.54 1701.45,1201.41 1702.04,1199.85 1702.62,1199.72 1703.21,1201.28 1703.79,1201.38 1704.38,1205.11 1704.97,1206.43 1705.55,1207.77 1706.14,1207.76 1706.73,1203.31 1707.31,1201.97 1707.9,1201.88 1708.49,1199.17 1709.07,1199.17 1709.66,1200.61 1710.24,1202.17 1710.83,1203.4 1711.42,1207.13 1712,1208.06 1712.59,1207.61 1713.18,1207.21 1713.76,1208.2 1714.35,1210.34 1714.94,1211.23 1715.52,1217.35 1716.11,1211.07 1716.7,1211.86 1717.28,1209.95 1717.87,1212.16 1718.45,1211.76 1719.04,1212.85 1719.63,1211.12 1720.21,1211.84 1720.8,1207.61 1721.39,1210.21 1721.97,1211.18 1722.56,1211.99 1723.15,1212.81 1723.73,1212.18 1724.32,1210.32 1724.91,1207.03 1725.49,1201.38 1726.08,1203.86 1726.66,1203.68 1727.25,1203.65 1727.84,1202.24 1728.42,1202.19 1729.01,1202 1729.6,1201.82 1730.18,1202.92 1730.77,1202.63 1731.36,1201.18 1731.94,1201.22 1732.53,1199.59 1733.11,1198.32 1733.7,1198.58 1734.29,1197.11 1734.87,1194.63 1735.46,1193.37 1736.05,1197.93 1736.63,1199.37 1737.22,1199.45 1737.81,1199.69 1738.39,1198.66 1738.98,1199.12 1739.57,1199.37 1740.15,1198.23 1740.74,1199.37 1741.32,1199.66 1741.91,1202.55 1742.5,1199.87 1743.08,1199.97 1743.67,1200.05 1744.26,1198.71 1744.84,1197.5 1745.43,1198.22 1746.02,1195.7 1746.6,1193.28 1747.19,1196.09 1747.78,1200.48 1748.36,1198.08 1748.95,1199.73 1749.53,1202.73 1750.12,1202.44 1750.71,1199.65 1751.29,1201.07 1751.88,1199.6 1752.47,1201.26 1753.05,1199.82 1753.64,1203.95 1754.23,1205.46 1754.81,1204.16 1755.4,1203.82 1755.99,1202.32 1756.57,1201.34 1757.16,1198.97 1757.74,1197.61 1758.33,1199.14 1758.92,1199.09 1759.5,1202.01 1760.09,1200.38 1760.68,1197.5 1761.26,1197.62 1761.85,1199.26 1762.44,1200.46 1763.02,1197.7 1763.61,1196.45 1764.19,1196.42 1764.78,1197.93 1765.37,1199.16 1765.95,1196.41 1766.54,1196.77 1767.13,1195.96 1767.71,1196.22 1768.3,1195.28 1768.89,1195.36 1769.47,1194.58 1770.06,1195.12 1770.65,1196.78 1771.23,1198.4 1771.82,1197.06 1772.4,1200.39 1772.99,1200.16 1773.58,1199.05 1774.16,1199.35 1774.75,1198.05 1775.34,1199.61 1775.92,1198.47 1776.51,1200.03 1777.1,1197.54 1777.68,1197.97 1778.27,1198.15 1778.86,1199.68 1779.44,1200.97 1780.03,1200.89 1780.61,1200.93 1781.2,1202.57 1781.79,1203.59 1782.37,1202.33 1782.96,1202.51 1783.55,1202.42 1784.13,1202.66 1784.72,1199.81 1785.31,1204.07 1785.89,1203.97 1786.48,1206.75 1787.06,1206.55 1787.65,1209.02 1788.24,1209.77 1788.82,1209.3 1789.41,1209.23 1790,1208.72 1790.58,1204.21 1791.17,1204.23 1791.76,1204 1792.34,1202.37 1792.93,1205.15 1793.52,1206.36 1794.1,1203.54 1794.69,1204.63 1795.27,1206.13 1795.86,1206.99 1796.45,1208.06 1797.03,1210.73 1797.62,1207.67 1798.21,1207.35 1798.79,1205.44 1799.38,1204.31 1799.97,1204.24 1800.55,1202.74 1801.14,1201.45 1801.73,1200.15 1802.31,1198.87 1802.9,1201.47 1803.48,1202.91 1804.07,1205.57 1804.66,1200.06 1805.24,1202.8 1805.83,1201.22 1806.42,1205 1807,1205.04 1807.59,1206.12 1808.18,1207.29 1808.76,1208.11 1809.35,1205.14 1809.94,1205.12 1810.52,1203.48 1811.11,1203.4 1811.69,1204.64 1812.28,1200.61 1812.87,1200.56 1813.45,1200.59 1814.04,1204.8 1814.63,1201.88 1815.21,1202.02 1815.8,1199.19 1816.39,1199.48 1816.97,1199.76 1817.56,1200.06 1818.14,1200.28 1818.73,1200.16 1819.32,1198.73 1819.9,1201.61 1820.49,1204.29 1821.08,1207.03 1821.66,1207.97 1822.25,1209.26 1822.84,1210.04 1823.42,1210.87 1824.01,1207.39 1824.6,1204.2 1825.18,1202.48 1825.77,1202.42 1826.35,1199.77 1826.94,1199.88 1827.53,1197.4 1828.11,1199.06 1828.7,1199.13 1829.29,1200.48 1829.87,1203.2 1830.46,1204.58 1831.05,1204.36 1831.63,1200.09 1832.22,1198.68 1832.81,1198.72 1833.39,1201.56 1833.98,1201.61 1834.56,1200.29 1835.15,1204.62 1835.74,1202.77 1836.32,1202.62 1836.91,1202.91 1837.5,1204.09 1838.08,1202.56 1838.67,1205.2 1839.26,1206.4 1839.84,1209 1840.43,1207.14 1841.01,1208.08 1841.6,1210.45 1842.19,1209.96 1842.77,1210.57 1843.36,1207.24 1843.95,1209.67 1844.53,1211.96 1845.12,1208.47 1845.71,1206.82 1846.29,1203.74 1846.88,1201.01 1847.47,1203.57 1848.05,1203.59 1848.64,1203.35 1849.22,1203.11 1849.81,1205.71 1850.4,1201.55 1850.98,1200.21 1851.57,1199.89 1852.16,1200.99 1852.74,1198.14 1853.33,1195.68 1853.92,1197.29 1854.5,1197.47 1855.09,1196.39 1855.68,1193.78 1856.26,1192.99 1856.85,1194.64 1857.43,1197.61 1858.02,1200.72 1858.61,1199.11 1859.19,1199.35 1859.78,1198.25 1860.37,1198.41 1860.95,1198.38 1861.54,1194.28 1862.13,1195.68 1862.71,1195.67 1863.3,1197.52 1863.88,1195.17 1864.47,1195.38 1865.06,1195.84 1865.64,1196.02 1866.23,1193.77 1866.82,1192.77 1867.4,1193.2 1867.99,1192.23 1868.58,1192.74 1869.16,1195.91 1869.75,1193.67 1870.34,1194.02 1870.92,1195.65 1871.51,1195.95 1872.09,1196.12 1872.68,1197.75 1873.27,1198.02 1873.85,1196.85 1874.44,1195.89 1875.03,1197.84 1875.61,1197.94 1876.2,1197.85 1876.79,1199.25 1877.37,1199.31 1877.96,1199.48 1878.55,1200.67 1879.13,1200.97 1879.72,1200.97 1880.3,1200.84 1880.89,1199.35 1881.48,1199.43 1882.06,1200.76 1882.65,1200.82 1883.24,1199.57 1883.82,1199.47 1884.41,1200.84 1885,1200.96 1885.58,1200.97 1886.17,1200.88 1886.76,1202.35 1887.34,1199.71 1887.93,1198.81 1888.51,1201.68 1889.1,1199.03 1889.69,1200.41 1890.27,1203.11 1890.86,1204.38 1891.45,1205.44 1892.03,1209.8 1892.62,1209.52 1893.21,1207.7 1893.79,1208.59 1894.38,1209.6 1894.96,1209.12 1895.55,1204.67 1896.14,1203.29 1896.72,1201.84 1897.31,1199.06 1897.9,1200.64 1898.48,1199.27 1899.07,1199.44 1899.66,1200.9 1900.24,1202.16 1900.83,1197.94 1901.42,1200.96 1902,1201.14 1902.59,1202.65 1903.17,1202.55 1903.76,1204.15 1904.35,1204.11 1904.93,1202.52 1905.52,1203.86 1906.11,1203.75 1906.69,1203.48 1907.28,1201.84 1907.87,1206.04 1908.45,1205.92 1909.04,1205.8 1909.63,1202.9 1910.21,1204.02 1910.8,1203.88 1911.38,1199.56 1911.97,1199.53 1912.56,1201 1913.14,1201.13 1913.73,1203.86 1914.32,1207.47 1914.9,1210.01 1915.49,1207.97 1916.08,1205.05 1916.66,1206.08 1917.25,1204.43 1917.83,1204.25 1918.42,1204.11 1919.01,1202.69 1919.59,1200.15 1920.18,1200.11 1920.77,1198.85 1921.35,1198.93 1921.94,1200.29 1922.53,1200.41 1923.11,1197.97 1923.7,1196.81 1924.29,1197.19 1924.87,1200.28 1925.46,1202.86 1926.04,1198.77 1926.63,1194.67 1927.22,1194.91 1927.8,1195.59 1928.39,1197.32 1928.98,1198.69 1929.56,1194.82 1930.15,1193.81 1930.74,1193.06 1931.32,1193.35 1931.91,1195.07 1932.5,1194.09 1933.08,1191.95 1933.67,1192.37 1934.25,1191.64 1934.84,1193.42 1935.43,1195.62 1936.01,1194.89 1936.6,1195.08 1937.19,1195.64 1937.77,1195.97 1938.36,1197.54 1938.95,1196.12 1939.53,1199.38 1940.12,1203.65 1940.71,1204.95 1941.29,1204.84 1941.88,1204.72 1942.46,1204.55 1943.05,1205.2 1943.64,1206.52 1944.22,1206.17 1944.81,1204.57 1945.4,1204.24 1945.98,1204.06 1946.57,1203.91 1947.16,1206.38 1947.74,1207.78 1948.33,1207.39 1948.91,1205.74 1949.5,1205.26 1950.09,1201.18 1950.67,1201.43 1951.26,1202.91 1951.85,1202.69 1952.43,1206.62 1953.02,1207.76 1953.61,1205.06 1954.19,1206.25 1954.78,1204.76 1955.37,1204.78 1955.95,1204.65 1956.54,1207.07 1957.12,1205.19 1957.71,1203.67 1958.3,1203.21 1958.88,1200.38 1959.47,1197.58 1960.06,1196.08 1960.64,1196.18 1961.23,1196.73 1961.82,1198.11 1962.4,1195.65 1962.99,1197.38 1963.58,1197.71 1964.16,1196.39 1964.75,1196.54 1965.33,1194.15 1965.92,1197.56 1966.51,1199.24 1967.09,1199.45 1967.68,1197.79 1968.27,1198.13 1968.85,1198.5 1969.44,1198.81 1970.03,1196.19 1970.61,1199.4 1971.2,1199.56 1971.78,1199.62 1972.37,1202.5 1972.96,1200.96 1973.54,1202.1 1974.13,1203.86 1974.72,1202.22 1975.3,1202 1975.89,1201.6 1976.48,1201.55 1977.06,1200.12 1977.65,1198.77 1978.24,1198.83 1978.82,1198.65 1979.41,1200.08 1979.99,1201.54 1980.58,1204.36 1981.17,1205.43 1981.75,1206.39 1982.34,1207.28 1982.93,1205.77 1983.51,1205.75 1984.1,1204.11 1984.69,1202.34 1985.27,1202.3 1985.86,1200.71 1986.45,1200.86 1987.03,1202.19 1987.62,1201.05 1988.2,1199.7 1988.79,1201.26 1989.38,1202.86 1989.96,1201.44 1990.55,1201.37 1991.14,1201.48 1991.72,1205.68 1992.31,1205.2 1992.9,1206.14 1993.48,1201.98 1994.07,1203.46 1994.65,1204.49 1995.24,1200.52 1995.83,1200.76 1996.41,1204.93 1997,1204.61 1997.59,1201.54 1998.17,1201.49 1998.76,1201.7 1999.35,1202.76 1999.93,1201.19 2000.52,1201.31 2001.11,1204.19 2001.69,1202.39 2002.28,1203.54 2002.86,1202.03 2003.45,1203.28 2004.04,1204.49 2004.62,1201.48 2005.21,1200.09 2005.8,1199.99 2006.38,1199.04 2006.97,1200.38 2007.56,1204.39 2008.14,1202.89 2008.73,1202.42 2009.32,1203.55 2009.9,1204.76 2010.49,1202.12 2011.07,1200.84 2011.66,1202.19 2012.25,1199.14 2012.83,1196.48 2013.42,1199.21 2014.01,1198.24 2014.59,1197.12 2015.18,1196.93 2015.77,1198.49 2016.35,1198.59 2016.94,1198.57 2017.53,1198.9 2018.11,1198.97 2018.7,1196.53 2019.28,1196.92 2019.87,1197.02 2020.46,1197.22 2021.04,1196.21 2021.63,1196.3 2022.22,1198.9 2022.8,1197.6 2023.39,1199.05 2023.98,1200.43 2024.56,1201.48 2025.15,1199.87 2025.73,1197.33 2026.32,1200.02 2026.91,1201.5 2027.49,1204.05 2028.08,1202.17 2028.67,1203.35 2029.25,1198.76 2029.84,1199.93 2030.43,1195.87 2031.01,1196.2 2031.6,1197.89 2032.19,1199.44 2032.77,1200.76 2033.36,1199.31 2033.94,1199.71 2034.53,1201.01 2035.12,1197.27 2035.7,1197.26 2036.29,1197.5 2036.88,1198.98 2037.46,1200.38 2038.05,1200.43 2038.64,1200.63 2039.22,1199.02 2039.81,1196.51 2040.4,1195.41 2040.98,1197.05 2041.57,1197.15 2042.15,1197.52 2042.74,1201.7 2043.33,1198.97 2043.91,1199.19 2044.5,1198.14 2045.09,1199.81 2045.67,1201.14 2046.26,1203.92 2046.85,1208.91 2047.43,1207.15 2048.02,1205.7 2048.6,1205.75 2049.19,1203.01 2049.78,1201.82 2050.36,1202.98 2050.95,1202.62 2051.54,1204.01 2052.12,1206.6 2052.71,1203.62 2053.3,1203.7 2053.88,1204.74 2054.47,1204.54 2055.06,1204.71 2055.64,1204.27 2056.23,1204.16 2056.81,1202.89 2057.4,1200.14 2057.99,1200.1 2058.57,1197.15 2059.16,1197.24 2059.75,1199.09 2060.33,1199.16 2060.92,1197.69 2061.51,1198.93 2062.09,1200.05 2062.68,1200.01 2063.27,1200.96 2063.85,1204.88 2064.44,1203.33 2065.02,1203.11 2065.61,1202.8 2066.2,1202.61 2066.78,1203.85 2067.37,1203.73 2067.96,1202.38 2068.54,1202.39 2069.13,1202.14 2069.72,1203.33 2070.3,1203.25 2070.89,1203.07 2071.48,1202.89 2072.06,1201.33 2072.65,1202.42 2073.23,1202.12 2073.82,1202.04 2074.41,1202.31 2074.99,1203.76 2075.58,1202.35 2076.17,1202.25 2076.75,1202.23 2077.34,1198.43 2077.93,1198.33 2078.51,1199.95 2079.1,1200.16 2079.68,1202.91 2080.27,1202.85 2080.86,1203.84 2081.44,1203.34 2082.03,1203.21 2082.62,1200.43 2083.2,1200.75 2083.79,1200.77 2084.38,1197.99 2084.96,1196.89 2085.55,1197.15 2086.14,1199.63 2086.72,1200.67 2087.31,1198.19 2087.89,1198.39 2088.48,1198.5 2089.07,1198.44 2089.65,1196.95 2090.24,1197.4 2090.83,1196.3 2091.41,1197.93 2092,1198.32 2092.59,1198.49 2093.17,1197.02 2093.76,1197.21 2094.35,1192.2 2094.93,1192.16 2095.52,1192.29 2096.1,1195.64 2096.69,1191.85 2097.28,1192.53 2097.86,1190.16 2098.45,1188.12 2099.04,1190.26 2099.62,1192.16 2100.21,1192.83 2100.8,1190.44 2101.38,1189.76 2101.97,1190.74 2102.55,1192.7 2103.14,1193.39 2103.73,1193.59 2104.31,1196.65 2104.9,1198.09 2105.49,1198.39 2106.07,1200 2106.66,1200.19 2107.25,1200.51 2107.83,1203.21 2108.42,1201.89 2109.01,1204.63 2109.59,1204.49 2110.18,1203.02 2110.76,1204.22 2111.35,1204.11 2111.94,1205.27 2112.52,1207.91 2113.11,1210.34 2113.7,1208.49 2114.28,1209.55 2114.87,1209.04 2115.46,1207.26 2116.04,1209.47 2116.63,1207.52 2117.22,1208.82 2117.8,1210.07 2118.39,1209.78 2118.97,1209.34 2119.56,1208.93 2120.15,1208.56 2120.73,1206.42 2121.32,1207.53 2121.91,1207.36 2122.49,1205.56 2123.08,1205.3 2123.67,1205.1 2124.25,1203.52 2124.84,1203.52 2125.42,1203.61 2126.01,1204.93 2126.6,1206.06 2127.18,1205.93 2127.77,1200.44 2128.36,1200.44 2128.94,1200.75 2129.53,1204.88 2130.12,1203.25 2130.7,1201.78 2131.29,1203.04 2131.88,1205.59 2132.46,1205.04 2133.05,1202.07 2133.63,1202.01 2134.22,1200.45 2134.81,1201.96 2135.39,1203.18 2135.98,1200.6 2136.57,1201.89 2137.15,1200.48 2137.74,1200.61 2138.33,1203.85 2138.91,1203.54 2139.5,1202.19 2140.09,1206.19 2140.67,1204.61 2141.26,1203.17 2141.84,1200.21 2142.43,1200.11 2143.02,1200.03 2143.6,1195.89 2144.19,1193.31 2144.78,1193.4 2145.36,1195.31 2145.95,1195.4 2146.54,1194.29 2147.12,1197.35 2147.71,1199.02 2148.3,1201.86 2148.88,1204.71 2149.47,1205.98 2150.05,1206.87 2150.64,1206.63 2151.23,1206.57 2151.81,1204.73 2152.4,1205.75 2152.99,1205.82 2153.57,1208.31 2154.16,1210.58 2154.75,1211.22 2155.33,1210.72 2155.92,1208.94 2156.5,1207.24 2157.09,1204.35 2157.68,1204.15 2158.26,1208 \"/>\n<path clip-path=\"url(#clip522)\" d=\"M986.025 1201.9 L986.612 1201.9 L987.198 1201.9 L987.785 1201.9 L988.371 1201.9 L988.957 1201.9 L989.544 1201.9 L990.13 1201.9 L990.717 1201.9 L991.303 1201.9 L991.889 1201.9 L992.476 1201.9 L993.062 1201.9 L993.649 1201.9 L994.235 1201.9 L994.822 1201.9 L995.408 1201.9 L995.994 1201.9 L996.581 1201.9 L997.167 1201.9 L997.754 1201.9 L998.34 1201.9 L998.926 1201.9 L999.513 1201.9 L1000.1 1201.9 L1000.69 1201.9 L1001.27 1201.9 L1001.86 1201.9 L1002.44 1201.9 L1003.03 1201.9 L1003.62 1201.9 L1004.2 1201.9 L1004.79 1201.9 L1005.38 1201.9 L1005.96 1201.9 L1006.55 1201.9 L1007.14 1201.9 L1007.72 1201.9 L1008.31 1201.9 L1008.9 1201.9 L1009.48 1201.9 L1010.07 1201.9 L1010.65 1201.9 L1011.24 1201.9 L1011.83 1201.9 L1012.41 1201.9 L1013 1201.9 L1013.59 1201.9 L1014.17 1201.9 L1014.76 1201.9 L1015.35 1201.9 L1015.93 1201.9 L1016.52 1201.9 L1017.11 1201.9 L1017.69 1201.9 L1018.28 1201.9 L1018.86 1201.9 L1019.45 1201.9 L1020.04 1201.9 L1020.62 1201.9 L1021.21 1201.9 L1021.8 1201.9 L1022.38 1201.9 L1022.97 1201.9 L1023.56 1201.9 L1024.14 1201.9 L1024.73 1201.9 L1025.32 1201.9 L1025.9 1201.9 L1026.49 1201.9 L1027.07 1201.9 L1027.66 1201.9 L1028.25 1201.9 L1028.83 1201.9 L1029.42 1201.9 L1030.01 1201.9 L1030.59 1201.9 L1031.18 1201.9 L1031.77 1201.9 L1032.35 1201.9 L1032.94 1201.9 L1033.52 1201.9 L1034.11 1201.9 L1034.7 1201.9 L1035.28 1201.9 L1035.87 1201.9 L1036.46 1201.9 L1037.04 1201.9 L1037.63 1201.9 L1038.22 1201.9 L1038.8 1201.9 L1039.39 1201.9 L1039.98 1201.9 L1040.56 1201.9 L1041.15 1201.9 L1041.73 1201.9 L1042.32 1201.9 L1042.91 1201.9 L1043.49 1201.9 L1044.08 1201.9 L1044.67 1201.9 L1045.25 1201.9 L1045.84 1201.9 L1046.43 1201.9 L1047.01 1201.9 L1047.6 1201.9 L1048.19 1201.9 L1048.77 1201.9 L1049.36 1201.9 L1049.94 1201.9 L1050.53 1201.9 L1051.12 1201.9 L1051.7 1201.9 L1052.29 1201.9 L1052.88 1201.9 L1053.46 1201.9 L1054.05 1201.9 L1054.64 1201.9 L1055.22 1201.9 L1055.81 1201.9 L1056.39 1201.9 L1056.98 1201.9 L1057.57 1201.9 L1058.15 1201.9 L1058.74 1201.9 L1059.33 1201.9 L1059.91 1201.9 L1060.5 1201.9 L1061.09 1201.9 L1061.67 1201.9 L1062.26 1201.9 L1062.85 1201.9 L1063.43 1201.9 L1064.02 1201.9 L1064.6 1201.9 L1065.19 1201.9 L1065.78 1201.9 L1066.36 1201.9 L1066.95 1201.9 L1067.54 1201.9 L1068.12 1201.9 L1068.71 1201.9 L1069.3 1201.9 L1069.88 1201.9 L1070.47 1201.9 L1071.06 1201.9 L1071.64 1201.9 L1072.23 1201.9 L1072.81 1201.9 L1073.4 1201.9 L1073.99 1201.9 L1074.57 1201.9 L1075.16 1201.9 L1075.75 1201.9 L1076.33 1201.9 L1076.92 1201.9 L1077.51 1201.9 L1078.09 1201.9 L1078.68 1201.9 L1079.26 1201.9 L1079.85 1201.9 L1080.44 1201.9 L1081.02 1201.9 L1081.61 1201.9 L1082.2 1201.9 L1082.78 1201.9 L1083.37 1201.9 L1083.96 1201.9 L1084.54 1201.9 L1085.13 1201.9 L1085.72 1201.9 L1086.3 1201.9 L1086.89 1201.9 L1087.47 1201.9 L1088.06 1201.9 L1088.65 1201.9 L1089.23 1201.9 L1089.82 1201.9 L1090.41 1201.9 L1090.99 1201.9 L1091.58 1201.9 L1092.17 1201.9 L1092.75 1201.9 L1093.34 1201.9 L1093.93 1201.9 L1094.51 1201.9 L1095.1 1201.9 L1095.68 1201.9 L1096.27 1201.9 L1096.86 1201.9 L1097.44 1201.9 L1098.03 1201.9 L1098.62 1201.9 L1099.2 1201.9 L1099.79 1201.9 L1100.38 1201.9 L1100.96 1201.9 L1101.55 1201.9 L1102.14 1201.9 L1102.72 1201.9 L1103.31 1201.9 L1103.89 1201.9 L1104.48 1201.9 L1105.07 1201.9 L1105.65 1201.9 L1106.24 1201.9 L1106.83 1201.9 L1107.41 1201.9 L1108 1201.9 L1108.59 1201.9 L1109.17 1201.9 L1109.76 1201.9 L1110.34 1201.9 L1110.93 1201.9 L1111.52 1201.9 L1112.1 1201.9 L1112.69 1201.9 L1113.28 1201.9 L1113.86 1201.9 L1114.45 1201.9 L1115.04 1201.9 L1115.62 1201.9 L1116.21 1201.9 L1116.8 1201.9 L1117.38 1201.9 L1117.97 1201.9 L1118.55 1201.9 L1119.14 1201.9 L1119.73 1201.9 L1120.31 1201.9 L1120.9 1201.9 L1121.49 1201.9 L1122.07 1201.9 L1122.66 1201.9 L1123.25 1201.9 L1123.83 1201.9 L1124.42 1201.9 L1125.01 1201.9 L1125.59 1201.9 L1126.18 1201.9 L1126.76 1201.9 L1127.35 1201.9 L1127.94 1201.9 L1128.52 1201.9 L1129.11 1201.9 L1129.7 1201.9 L1130.28 1201.9 L1130.87 1201.9 L1131.46 1201.9 L1132.04 1201.9 L1132.63 1201.9 L1133.21 1201.9 L1133.8 1201.9 L1134.39 1201.9 L1134.97 1201.9 L1135.56 1201.9 L1136.15 1201.9 L1136.73 1201.9 L1137.32 1201.9 L1137.91 1201.9 L1138.49 1201.9 L1139.08 1201.9 L1139.67 1201.9 L1140.25 1201.9 L1140.84 1201.9 L1141.42 1201.9 L1142.01 1201.9 L1142.6 1201.9 L1143.18 1201.9 L1143.77 1201.9 L1144.36 1201.9 L1144.94 1201.9 L1145.53 1201.9 L1146.12 1201.9 L1146.7 1201.9 L1147.29 1201.9 L1147.88 1201.9 L1148.46 1201.9 L1149.05 1201.9 L1149.63 1201.9 L1150.22 1201.9 L1150.81 1201.9 L1151.39 1201.9 L1151.98 1201.9 L1152.57 1201.9 L1153.15 1201.9 L1153.74 1201.9 L1154.33 1201.9 L1154.91 1201.9 L1155.5 1201.9 L1156.09 1201.9 L1156.67 1201.9 L1157.26 1201.9 L1157.84 1201.9 L1158.43 1201.9 L1159.02 1201.9 L1159.6 1201.9 L1160.19 1201.9 L1160.78 1201.9 L1161.36 1201.9 L1161.95 1201.9 L1162.54 1201.9 L1163.12 1201.9 L1163.71 1201.9 L1164.29 1201.9 L1164.88 1201.9 L1165.47 1201.9 L1166.05 1201.9 L1166.64 1201.9 L1167.23 1201.9 L1167.81 1201.9 L1168.4 1201.9 L1168.99 1201.9 L1169.57 1201.9 L1170.16 1201.9 L1170.75 1201.9 L1171.33 1201.9 L1171.92 1201.9 L1172.5 1201.9 L1173.09 1201.9 L1173.68 1201.9 L1174.26 1201.9 L1174.85 1201.9 L1175.44 1201.9 L1176.02 1201.9 L1176.61 1201.9 L1177.2 1201.9 L1177.78 1201.9 L1178.37 1201.9 L1178.96 1201.9 L1179.54 1201.9 L1180.13 1201.9 L1180.71 1201.9 L1181.3 1201.9 L1181.89 1201.9 L1182.47 1201.9 L1183.06 1201.9 L1183.65 1201.9 L1184.23 1201.9 L1184.82 1201.9 L1185.41 1201.9 L1185.99 1201.9 L1186.58 1201.9 L1187.16 1201.9 L1187.75 1201.9 L1188.34 1201.9 L1188.92 1201.9 L1189.51 1201.9 L1190.1 1201.9 L1190.68 1201.9 L1191.27 1201.9 L1191.86 1201.9 L1192.44 1201.9 L1193.03 1201.9 L1193.62 1201.9 L1194.2 1201.9 L1194.79 1201.9 L1195.37 1201.9 L1195.96 1201.9 L1196.55 1201.9 L1197.13 1201.9 L1197.72 1201.9 L1198.31 1201.9 L1198.89 1201.9 L1199.48 1201.9 L1200.07 1201.9 L1200.65 1201.9 L1201.24 1201.9 L1201.83 1201.9 L1202.41 1201.9 L1203 1201.9 L1203.58 1201.9 L1204.17 1201.9 L1204.76 1201.9 L1205.34 1201.9 L1205.93 1201.9 L1206.52 1201.9 L1207.1 1201.9 L1207.69 1201.9 L1208.28 1201.9 L1208.86 1201.9 L1209.45 1201.9 L1210.03 1201.9 L1210.62 1201.9 L1211.21 1201.9 L1211.79 1201.9 L1212.38 1201.9 L1212.97 1201.9 L1213.55 1201.9 L1214.14 1201.9 L1214.73 1201.9 L1215.31 1201.9 L1215.9 1201.9 L1216.49 1201.9 L1217.07 1201.9 L1217.66 1201.9 L1218.24 1201.9 L1218.83 1201.9 L1219.42 1201.9 L1220 1201.9 L1220.59 1201.9 L1221.18 1201.9 L1221.76 1201.9 L1222.35 1201.9 L1222.94 1201.9 L1223.52 1201.9 L1224.11 1201.9 L1224.7 1201.9 L1225.28 1201.9 L1225.87 1201.9 L1226.45 1201.9 L1227.04 1201.9 L1227.63 1201.9 L1228.21 1201.9 L1228.8 1201.9 L1229.39 1201.9 L1229.97 1201.9 L1230.56 1201.9 L1231.15 1201.9 L1231.73 1201.9 L1232.32 1201.9 L1232.91 1201.9 L1233.49 1201.9 L1234.08 1201.9 L1234.66 1201.9 L1235.25 1201.9 L1235.84 1201.9 L1236.42 1201.9 L1237.01 1201.9 L1237.6 1201.9 L1238.18 1201.9 L1238.77 1201.9 L1239.36 1201.9 L1239.94 1201.9 L1240.53 1201.9 L1241.11 1201.9 L1241.7 1201.9 L1242.29 1201.9 L1242.87 1201.9 L1243.46 1201.9 L1244.05 1201.9 L1244.63 1201.9 L1245.22 1201.9 L1245.81 1201.9 L1246.39 1201.9 L1246.98 1201.9 L1247.57 1201.9 L1248.15 1201.9 L1248.74 1201.9 L1249.32 1201.9 L1249.91 1201.9 L1250.5 1201.9 L1251.08 1201.9 L1251.67 1201.9 L1252.26 1201.9 L1252.84 1201.9 L1253.43 1201.9 L1254.02 1201.9 L1254.6 1201.9 L1255.19 1201.9 L1255.78 1201.9 L1256.36 1201.9 L1256.95 1201.9 L1257.53 1201.9 L1258.12 1201.9 L1258.71 1201.9 L1259.29 1201.9 L1259.88 1201.9 L1260.47 1201.9 L1261.05 1201.9 L1261.64 1201.9 L1262.23 1201.9 L1262.81 1201.9 L1263.4 1201.9 L1263.98 1201.9 L1264.57 1201.9 L1265.16 1201.9 L1265.74 1201.9 L1266.33 1201.9 L1266.92 1201.9 L1267.5 1201.9 L1268.09 1201.9 L1268.68 1201.9 L1269.26 1201.9 L1269.85 1201.9 L1270.44 1201.9 L1271.02 1201.9 L1271.61 1201.9 L1272.19 1201.9 L1272.78 1201.9 L1273.37 1201.9 L1273.95 1201.9 L1274.54 1201.9 L1275.13 1201.9 L1275.71 1201.9 L1276.3 1201.9 L1276.89 1201.9 L1277.47 1201.9 L1278.06 1201.9 L1278.65 1201.9 L1279.23 1201.9 L1279.82 1201.9 L1280.4 1201.9 L1280.99 1201.9 L1281.58 1201.9 L1282.16 1201.9 L1282.75 1201.9 L1283.34 1201.9 L1283.92 1201.9 L1284.51 1201.9 L1285.1 1201.9 L1285.68 1201.9 L1286.27 1201.9 L1286.86 1201.9 L1287.44 1201.9 L1288.03 1201.9 L1288.61 1201.9 L1289.2 1201.9 L1289.79 1201.9 L1290.37 1201.9 L1290.96 1201.9 L1291.55 1201.9 L1292.13 1201.9 L1292.72 1201.9 L1293.31 1201.9 L1293.89 1201.9 L1294.48 1201.9 L1295.06 1201.9 L1295.65 1201.9 L1296.24 1201.9 L1296.82 1201.9 L1297.41 1201.9 L1298 1201.9 L1298.58 1201.9 L1299.17 1201.9 L1299.76 1201.9 L1300.34 1201.9 L1300.93 1201.9 L1301.52 1201.9 L1302.1 1201.9 L1302.69 1201.9 L1303.27 1201.9 L1303.86 1201.9 L1304.45 1201.9 L1305.03 1201.9 L1305.62 1201.9 L1306.21 1201.9 L1306.79 1201.9 L1307.38 1201.9 L1307.97 1201.9 L1308.55 1201.9 L1309.14 1201.9 L1309.73 1201.9 L1310.31 1201.9 L1310.9 1201.9 L1311.48 1201.9 L1312.07 1201.9 L1312.66 1201.9 L1313.24 1201.9 L1313.83 1201.9 L1314.42 1201.9 L1315 1201.9 L1315.59 1201.9 L1316.18 1201.9 L1316.76 1201.9 L1317.35 1201.9 L1317.93 1201.9 L1318.52 1201.9 L1319.11 1201.9 L1319.69 1201.9 L1320.28 1201.9 L1320.87 1201.9 L1321.45 1201.9 L1322.04 1201.9 L1322.63 1201.9 L1323.21 1201.9 L1323.8 1201.9 L1324.39 1201.9 L1324.97 1201.9 L1325.56 1201.9 L1326.14 1201.9 L1326.73 1201.9 L1327.32 1201.9 L1327.9 1201.9 L1328.49 1201.9 L1329.08 1201.9 L1329.66 1201.9 L1330.25 1201.9 L1330.84 1201.9 L1331.42 1201.9 L1332.01 1201.9 L1332.6 1201.9 L1333.18 1201.9 L1333.77 1201.9 L1334.35 1201.9 L1334.94 1201.9 L1335.53 1201.9 L1336.11 1201.9 L1336.7 1201.9 L1337.29 1201.9 L1337.87 1201.9 L1338.46 1201.9 L1339.05 1201.9 L1339.63 1201.9 L1340.22 1201.9 L1340.8 1201.9 L1341.39 1201.9 L1341.98 1201.9 L1342.56 1201.9 L1343.15 1201.9 L1343.74 1201.9 L1344.32 1201.9 L1344.91 1201.9 L1345.5 1201.9 L1346.08 1201.9 L1346.67 1201.9 L1347.26 1201.9 L1347.84 1201.9 L1348.43 1201.9 L1349.01 1201.9 L1349.6 1201.9 L1350.19 1201.9 L1350.77 1201.9 L1351.36 1201.9 L1351.95 1201.9 L1352.53 1201.9 L1353.12 1201.9 L1353.71 1201.9 L1354.29 1201.9 L1354.88 1201.9 L1355.47 1201.9 L1356.05 1201.9 L1356.64 1201.9 L1357.22 1201.9 L1357.81 1201.9 L1358.4 1201.9 L1358.98 1201.9 L1359.57 1201.9 L1360.16 1201.9 L1360.74 1201.9 L1361.33 1201.9 L1361.92 1201.9 L1362.5 1201.9 L1363.09 1201.9 L1363.68 1201.9 L1364.26 1201.9 L1364.85 1201.9 L1365.43 1201.9 L1366.02 1201.9 L1366.61 1201.9 L1367.19 1201.9 L1367.78 1201.9 L1368.37 1201.9 L1368.95 1201.9 L1369.54 1201.9 L1370.13 1201.9 L1370.71 1201.9 L1371.3 1201.9 L1371.88 1201.9 L1372.47 1201.9 L1373.06 1201.9 L1373.64 1201.9 L1374.23 1201.9 L1374.82 1201.9 L1375.4 1201.9 L1375.99 1201.9 L1376.58 1201.9 L1377.16 1201.9 L1377.75 1201.9 L1378.34 1201.9 L1378.92 1201.9 L1379.51 1201.9 L1380.09 1201.9 L1380.68 1201.9 L1381.27 1201.9 L1381.85 1201.9 L1382.44 1201.9 L1383.03 1201.9 L1383.61 1201.9 L1384.2 1201.9 L1384.79 1201.9 L1385.37 1201.9 L1385.96 1201.9 L1386.55 1201.9 L1387.13 1201.9 L1387.72 1201.9 L1388.3 1201.9 L1388.89 1201.9 L1389.48 1201.9 L1390.06 1201.9 L1390.65 1201.9 L1391.24 1201.9 L1391.82 1201.9 L1392.41 1201.9 L1393 1201.9 L1393.58 1201.9 L1394.17 1201.9 L1394.75 1201.9 L1395.34 1201.9 L1395.93 1201.9 L1396.51 1201.9 L1397.1 1201.9 L1397.69 1201.9 L1398.27 1201.9 L1398.86 1201.9 L1399.45 1201.9 L1400.03 1201.9 L1400.62 1201.9 L1401.21 1201.9 L1401.79 1201.9 L1402.38 1201.9 L1402.96 1201.9 L1403.55 1201.9 L1404.14 1201.9 L1404.72 1201.9 L1405.31 1201.9 L1405.9 1201.9 L1406.48 1201.9 L1407.07 1201.9 L1407.66 1201.9 L1408.24 1201.9 L1408.83 1201.9 L1409.42 1201.9 L1410 1201.9 L1410.59 1201.9 L1411.17 1201.9 L1411.76 1201.9 L1412.35 1201.9 L1412.93 1201.9 L1413.52 1201.9 L1414.11 1201.9 L1414.69 1201.9 L1415.28 1201.9 L1415.87 1201.9 L1416.45 1201.9 L1417.04 1201.9 L1417.63 1201.9 L1418.21 1201.9 L1418.8 1201.9 L1419.38 1201.9 L1419.97 1201.9 L1420.56 1201.9 L1421.14 1201.9 L1421.73 1201.9 L1422.32 1201.9 L1422.9 1201.9 L1423.49 1201.9 L1424.08 1201.9 L1424.66 1201.9 L1425.25 1201.9 L1425.83 1201.9 L1426.42 1201.9 L1427.01 1201.9 L1427.59 1201.9 L1428.18 1201.9 L1428.77 1201.9 L1429.35 1201.9 L1429.94 1201.9 L1430.53 1201.9 L1431.11 1201.9 L1431.7 1201.9 L1432.29 1201.9 L1432.87 1201.9 L1433.46 1201.9 L1434.04 1201.9 L1434.63 1201.9 L1435.22 1201.9 L1435.8 1201.9 L1436.39 1201.9 L1436.98 1201.9 L1437.56 1201.9 L1438.15 1201.9 L1438.74 1201.9 L1439.32 1201.9 L1439.91 1201.9 L1440.5 1201.9 L1441.08 1201.9 L1441.67 1201.9 L1442.25 1201.9 L1442.84 1201.9 L1443.43 1201.9 L1444.01 1201.9 L1444.6 1201.9 L1445.19 1201.9 L1445.77 1201.9 L1446.36 1201.9 L1446.95 1201.9 L1447.53 1201.9 L1448.12 1201.9 L1448.7 1201.9 L1449.29 1201.9 L1449.88 1201.9 L1450.46 1201.9 L1451.05 1201.9 L1451.64 1201.9 L1452.22 1201.9 L1452.81 1201.9 L1453.4 1201.9 L1453.98 1201.9 L1454.57 1201.9 L1455.16 1201.9 L1455.74 1201.9 L1456.33 1201.9 L1456.91 1201.9 L1457.5 1201.9 L1458.09 1201.9 L1458.67 1201.9 L1459.26 1201.9 L1459.85 1201.9 L1460.43 1201.9 L1461.02 1201.9 L1461.61 1201.9 L1462.19 1201.9 L1462.78 1201.9 L1463.37 1201.9 L1463.95 1201.9 L1464.54 1201.9 L1465.12 1201.9 L1465.71 1201.9 L1466.3 1201.9 L1466.88 1201.9 L1467.47 1201.9 L1468.06 1201.9 L1468.64 1201.9 L1469.23 1201.9 L1469.82 1201.9 L1470.4 1201.9 L1470.99 1201.9 L1471.57 1201.9 L1472.16 1201.9 L1472.75 1201.9 L1473.33 1201.9 L1473.92 1201.9 L1474.51 1201.9 L1475.09 1201.9 L1475.68 1201.9 L1476.27 1201.9 L1476.85 1201.9 L1477.44 1201.9 L1478.03 1201.9 L1478.61 1201.9 L1479.2 1201.9 L1479.78 1201.9 L1480.37 1201.9 L1480.96 1201.9 L1481.54 1201.9 L1482.13 1201.9 L1482.72 1201.9 L1483.3 1201.9 L1483.89 1201.9 L1484.48 1201.9 L1485.06 1201.9 L1485.65 1201.9 L1486.24 1201.9 L1486.82 1201.9 L1487.41 1201.9 L1487.99 1201.9 L1488.58 1201.9 L1489.17 1201.9 L1489.75 1201.9 L1490.34 1201.9 L1490.93 1201.9 L1491.51 1201.9 L1492.1 1201.9 L1492.69 1201.9 L1493.27 1201.9 L1493.86 1201.9 L1494.45 1201.9 L1495.03 1201.9 L1495.62 1201.9 L1496.2 1201.9 L1496.79 1201.9 L1497.38 1201.9 L1497.96 1201.9 L1498.55 1201.9 L1499.14 1201.9 L1499.72 1201.9 L1500.31 1201.9 L1500.9 1201.9 L1501.48 1201.9 L1502.07 1201.9 L1502.65 1201.9 L1503.24 1201.9 L1503.83 1201.9 L1504.41 1201.9 L1505 1201.9 L1505.59 1201.9 L1506.17 1201.9 L1506.76 1201.9 L1507.35 1201.9 L1507.93 1201.9 L1508.52 1201.9 L1509.11 1201.9 L1509.69 1201.9 L1510.28 1201.9 L1510.86 1201.9 L1511.45 1201.9 L1512.04 1201.9 L1512.62 1201.9 L1513.21 1201.9 L1513.8 1201.9 L1514.38 1201.9 L1514.97 1201.9 L1515.56 1201.9 L1516.14 1201.9 L1516.73 1201.9 L1517.32 1201.9 L1517.9 1201.9 L1518.49 1201.9 L1519.07 1201.9 L1519.66 1201.9 L1520.25 1201.9 L1520.83 1201.9 L1521.42 1201.9 L1522.01 1201.9 L1522.59 1201.9 L1523.18 1201.9 L1523.77 1201.9 L1524.35 1201.9 L1524.94 1201.9 L1525.52 1201.9 L1526.11 1201.9 L1526.7 1201.9 L1527.28 1201.9 L1527.87 1201.9 L1528.46 1201.9 L1529.04 1201.9 L1529.63 1201.9 L1530.22 1201.9 L1530.8 1201.9 L1531.39 1201.9 L1531.98 1201.9 L1532.56 1201.9 L1533.15 1201.9 L1533.73 1201.9 L1534.32 1201.9 L1534.91 1201.9 L1535.49 1201.9 L1536.08 1201.9 L1536.67 1201.9 L1537.25 1201.9 L1537.84 1201.9 L1538.43 1201.9 L1539.01 1201.9 L1539.6 1201.9 L1540.19 1201.9 L1540.77 1201.9 L1541.36 1201.9 L1541.94 1201.9 L1542.53 1201.9 L1543.12 1201.9 L1543.7 1201.9 L1544.29 1201.9 L1544.88 1201.9 L1545.46 1201.9 L1546.05 1201.9 L1546.64 1201.9 L1547.22 1201.9 L1547.81 1201.9 L1548.4 1201.9 L1548.98 1201.9 L1549.57 1201.9 L1550.15 1201.9 L1550.74 1201.9 L1551.33 1201.9 L1551.91 1201.9 L1552.5 1201.9 L1553.09 1201.9 L1553.67 1201.9 L1554.26 1201.9 L1554.85 1201.9 L1555.43 1201.9 L1556.02 1201.9 L1556.6 1201.9 L1557.19 1201.9 L1557.78 1201.9 L1558.36 1201.9 L1558.95 1201.9 L1559.54 1201.9 L1560.12 1201.9 L1560.71 1201.9 L1561.3 1201.9 L1561.88 1201.9 L1562.47 1201.9 L1563.06 1201.9 L1563.64 1201.9 L1564.23 1201.9 L1564.81 1201.9 L1565.4 1201.9 L1565.99 1201.9 L1566.57 1201.9 L1567.16 1201.9 L1567.75 1201.9 L1568.33 1201.9 L1568.92 1201.9 L1569.51 1201.9 L1570.09 1201.9 L1570.68 1201.9 L1571.27 1201.9 L1571.85 1201.9 L1572.44 1201.9 L1573.02 1201.9 L1573.61 1201.9 L1574.2 1201.9 L1574.78 1201.9 L1575.37 1201.9 L1575.96 1201.9 L1576.54 1201.9 L1577.13 1201.9 L1577.72 1201.9 L1578.3 1201.9 L1578.89 1201.9 L1579.47 1201.9 L1580.06 1201.9 L1580.65 1201.9 L1581.23 1201.9 L1581.82 1201.9 L1582.41 1201.9 L1582.99 1201.9 L1583.58 1201.9 L1584.17 1201.9 L1584.75 1201.9 L1585.34 1201.9 L1585.93 1201.9 L1586.51 1201.9 L1587.1 1201.9 L1587.68 1201.9 L1588.27 1201.9 L1588.86 1201.9 L1589.44 1201.9 L1590.03 1201.9 L1590.62 1201.9 L1591.2 1201.9 L1591.79 1201.9 L1592.38 1201.9 L1592.96 1201.9 L1593.55 1201.9 L1594.14 1201.9 L1594.72 1201.9 L1595.31 1201.9 L1595.89 1201.9 L1596.48 1201.9 L1597.07 1201.9 L1597.65 1201.9 L1598.24 1201.9 L1598.83 1201.9 L1599.41 1201.9 L1600 1201.9 L1600.59 1201.9 L1601.17 1201.9 L1601.76 1201.9 L1602.34 1201.9 L1602.93 1201.9 L1603.52 1201.9 L1604.1 1201.9 L1604.69 1201.9 L1605.28 1201.9 L1605.86 1201.9 L1606.45 1201.9 L1607.04 1201.9 L1607.62 1201.9 L1608.21 1201.9 L1608.8 1201.9 L1609.38 1201.9 L1609.97 1201.9 L1610.55 1201.9 L1611.14 1201.9 L1611.73 1201.9 L1612.31 1201.9 L1612.9 1201.9 L1613.49 1201.9 L1614.07 1201.9 L1614.66 1201.9 L1615.25 1201.9 L1615.83 1201.9 L1616.42 1201.9 L1617.01 1201.9 L1617.59 1201.9 L1618.18 1201.9 L1618.76 1201.9 L1619.35 1201.9 L1619.94 1201.9 L1620.52 1201.9 L1621.11 1201.9 L1621.7 1201.9 L1622.28 1201.9 L1622.87 1201.9 L1623.46 1201.9 L1624.04 1201.9 L1624.63 1201.9 L1625.22 1201.9 L1625.8 1201.9 L1626.39 1201.9 L1626.97 1201.9 L1627.56 1201.9 L1628.15 1201.9 L1628.73 1201.9 L1629.32 1201.9 L1629.91 1201.9 L1630.49 1201.9 L1631.08 1201.9 L1631.67 1201.9 L1632.25 1201.9 L1632.84 1201.9 L1633.42 1201.9 L1634.01 1201.9 L1634.6 1201.9 L1635.18 1201.9 L1635.77 1201.9 L1636.36 1201.9 L1636.94 1201.9 L1637.53 1201.9 L1638.12 1201.9 L1638.7 1201.9 L1639.29 1201.9 L1639.88 1201.9 L1640.46 1201.9 L1641.05 1201.9 L1641.63 1201.9 L1642.22 1201.9 L1642.81 1201.9 L1643.39 1201.9 L1643.98 1201.9 L1644.57 1201.9 L1645.15 1201.9 L1645.74 1201.9 L1646.33 1201.9 L1646.91 1201.9 L1647.5 1201.9 L1648.09 1201.9 L1648.67 1201.9 L1649.26 1201.9 L1649.84 1201.9 L1650.43 1201.9 L1651.02 1201.9 L1651.6 1201.9 L1652.19 1201.9 L1652.78 1201.9 L1653.36 1201.9 L1653.95 1201.9 L1654.54 1201.9 L1655.12 1201.9 L1655.71 1201.9 L1656.29 1201.9 L1656.88 1201.9 L1657.47 1201.9 L1658.05 1201.9 L1658.64 1201.9 L1659.23 1201.9 L1659.81 1201.9 L1660.4 1201.9 L1660.99 1201.9 L1661.57 1201.9 L1662.16 1201.9 L1662.75 1201.9 L1663.33 1201.9 L1663.92 1201.9 L1664.5 1201.9 L1665.09 1201.9 L1665.68 1201.9 L1666.26 1201.9 L1666.85 1201.9 L1667.44 1201.9 L1668.02 1201.9 L1668.61 1201.9 L1669.2 1201.9 L1669.78 1201.9 L1670.37 1201.9 L1670.96 1201.9 L1671.54 1201.9 L1672.13 1201.9 L1672.71 1201.9 L1673.3 1201.9 L1673.89 1201.9 L1674.47 1201.9 L1675.06 1201.9 L1675.65 1201.9 L1676.23 1201.9 L1676.82 1201.9 L1677.41 1201.9 L1677.99 1201.9 L1678.58 1201.9 L1679.17 1201.9 L1679.75 1201.9 L1680.34 1201.9 L1680.92 1201.9 L1681.51 1201.9 L1682.1 1201.9 L1682.68 1201.9 L1683.27 1201.9 L1683.86 1201.9 L1684.44 1201.9 L1685.03 1201.9 L1685.62 1201.9 L1686.2 1201.9 L1686.79 1201.9 L1687.37 1201.9 L1687.96 1201.9 L1688.55 1201.9 L1689.13 1201.9 L1689.72 1201.9 L1690.31 1201.9 L1690.89 1201.9 L1691.48 1201.9 L1692.07 1201.9 L1692.65 1201.9 L1693.24 1201.9 L1693.83 1201.9 L1694.41 1201.9 L1695 1201.9 L1695.58 1201.9 L1696.17 1201.9 L1696.76 1201.9 L1697.34 1201.9 L1697.93 1201.9 L1698.52 1201.9 L1699.1 1201.9 L1699.69 1201.9 L1700.28 1201.9 L1700.86 1201.9 L1701.45 1201.9 L1702.04 1201.9 L1702.62 1201.9 L1703.21 1201.9 L1703.79 1201.9 L1704.38 1201.9 L1704.97 1201.9 L1705.55 1201.9 L1706.14 1201.9 L1706.73 1201.9 L1707.31 1201.9 L1707.9 1201.9 L1708.49 1201.9 L1709.07 1201.9 L1709.66 1201.9 L1710.24 1201.9 L1710.83 1201.9 L1711.42 1201.9 L1712 1201.9 L1712.59 1201.9 L1713.18 1201.9 L1713.76 1201.9 L1714.35 1201.9 L1714.94 1201.9 L1715.52 1201.9 L1716.11 1201.9 L1716.7 1201.9 L1717.28 1201.9 L1717.87 1201.9 L1718.45 1201.9 L1719.04 1201.9 L1719.63 1201.9 L1720.21 1201.9 L1720.8 1201.9 L1721.39 1201.9 L1721.97 1201.9 L1722.56 1201.9 L1723.15 1201.9 L1723.73 1201.9 L1724.32 1201.9 L1724.91 1201.9 L1725.49 1201.9 L1726.08 1201.9 L1726.66 1201.9 L1727.25 1201.9 L1727.84 1201.9 L1728.42 1201.9 L1729.01 1201.9 L1729.6 1201.9 L1730.18 1201.9 L1730.77 1201.9 L1731.36 1201.9 L1731.94 1201.9 L1732.53 1201.9 L1733.11 1201.9 L1733.7 1201.9 L1734.29 1201.9 L1734.87 1201.9 L1735.46 1201.9 L1736.05 1201.9 L1736.63 1201.9 L1737.22 1201.9 L1737.81 1201.9 L1738.39 1201.9 L1738.98 1201.9 L1739.57 1201.9 L1740.15 1201.9 L1740.74 1201.9 L1741.32 1201.9 L1741.91 1201.9 L1742.5 1201.9 L1743.08 1201.9 L1743.67 1201.9 L1744.26 1201.9 L1744.84 1201.9 L1745.43 1201.9 L1746.02 1201.9 L1746.6 1201.9 L1747.19 1201.9 L1747.78 1201.9 L1748.36 1201.9 L1748.95 1201.9 L1749.53 1201.9 L1750.12 1201.9 L1750.71 1201.9 L1751.29 1201.9 L1751.88 1201.9 L1752.47 1201.9 L1753.05 1201.9 L1753.64 1201.9 L1754.23 1201.9 L1754.81 1201.9 L1755.4 1201.9 L1755.99 1201.9 L1756.57 1201.9 L1757.16 1201.9 L1757.74 1201.9 L1758.33 1201.9 L1758.92 1201.9 L1759.5 1201.9 L1760.09 1201.9 L1760.68 1201.9 L1761.26 1201.9 L1761.85 1201.9 L1762.44 1201.9 L1763.02 1201.9 L1763.61 1201.9 L1764.19 1201.9 L1764.78 1201.9 L1765.37 1201.9 L1765.95 1201.9 L1766.54 1201.9 L1767.13 1201.9 L1767.71 1201.9 L1768.3 1201.9 L1768.89 1201.9 L1769.47 1201.9 L1770.06 1201.9 L1770.65 1201.9 L1771.23 1201.9 L1771.82 1201.9 L1772.4 1201.9 L1772.99 1201.9 L1773.58 1201.9 L1774.16 1201.9 L1774.75 1201.9 L1775.34 1201.9 L1775.92 1201.9 L1776.51 1201.9 L1777.1 1201.9 L1777.68 1201.9 L1778.27 1201.9 L1778.86 1201.9 L1779.44 1201.9 L1780.03 1201.9 L1780.61 1201.9 L1781.2 1201.9 L1781.79 1201.9 L1782.37 1201.9 L1782.96 1201.9 L1783.55 1201.9 L1784.13 1201.9 L1784.72 1201.9 L1785.31 1201.9 L1785.89 1201.9 L1786.48 1201.9 L1787.06 1201.9 L1787.65 1201.9 L1788.24 1201.9 L1788.82 1201.9 L1789.41 1201.9 L1790 1201.9 L1790.58 1201.9 L1791.17 1201.9 L1791.76 1201.9 L1792.34 1201.9 L1792.93 1201.9 L1793.52 1201.9 L1794.1 1201.9 L1794.69 1201.9 L1795.27 1201.9 L1795.86 1201.9 L1796.45 1201.9 L1797.03 1201.9 L1797.62 1201.9 L1798.21 1201.9 L1798.79 1201.9 L1799.38 1201.9 L1799.97 1201.9 L1800.55 1201.9 L1801.14 1201.9 L1801.73 1201.9 L1802.31 1201.9 L1802.9 1201.9 L1803.48 1201.9 L1804.07 1201.9 L1804.66 1201.9 L1805.24 1201.9 L1805.83 1201.9 L1806.42 1201.9 L1807 1201.9 L1807.59 1201.9 L1808.18 1201.9 L1808.76 1201.9 L1809.35 1201.9 L1809.94 1201.9 L1810.52 1201.9 L1811.11 1201.9 L1811.69 1201.9 L1812.28 1201.9 L1812.87 1201.9 L1813.45 1201.9 L1814.04 1201.9 L1814.63 1201.9 L1815.21 1201.9 L1815.8 1201.9 L1816.39 1201.9 L1816.97 1201.9 L1817.56 1201.9 L1818.14 1201.9 L1818.73 1201.9 L1819.32 1201.9 L1819.9 1201.9 L1820.49 1201.9 L1821.08 1201.9 L1821.66 1201.9 L1822.25 1201.9 L1822.84 1201.9 L1823.42 1201.9 L1824.01 1201.9 L1824.6 1201.9 L1825.18 1201.9 L1825.77 1201.9 L1826.35 1201.9 L1826.94 1201.9 L1827.53 1201.9 L1828.11 1201.9 L1828.7 1201.9 L1829.29 1201.9 L1829.87 1201.9 L1830.46 1201.9 L1831.05 1201.9 L1831.63 1201.9 L1832.22 1201.9 L1832.81 1201.9 L1833.39 1201.9 L1833.98 1201.9 L1834.56 1201.9 L1835.15 1201.9 L1835.74 1201.9 L1836.32 1201.9 L1836.91 1201.9 L1837.5 1201.9 L1838.08 1201.9 L1838.67 1201.9 L1839.26 1201.9 L1839.84 1201.9 L1840.43 1201.9 L1841.01 1201.9 L1841.6 1201.9 L1842.19 1201.9 L1842.77 1201.9 L1843.36 1201.9 L1843.95 1201.9 L1844.53 1201.9 L1845.12 1201.9 L1845.71 1201.9 L1846.29 1201.9 L1846.88 1201.9 L1847.47 1201.9 L1848.05 1201.9 L1848.64 1201.9 L1849.22 1201.9 L1849.81 1201.9 L1850.4 1201.9 L1850.98 1201.9 L1851.57 1201.9 L1852.16 1201.9 L1852.74 1201.9 L1853.33 1201.9 L1853.92 1201.9 L1854.5 1201.9 L1855.09 1201.9 L1855.68 1201.9 L1856.26 1201.9 L1856.85 1201.9 L1857.43 1201.9 L1858.02 1201.9 L1858.61 1201.9 L1859.19 1201.9 L1859.78 1201.9 L1860.37 1201.9 L1860.95 1201.9 L1861.54 1201.9 L1862.13 1201.9 L1862.71 1201.9 L1863.3 1201.9 L1863.88 1201.9 L1864.47 1201.9 L1865.06 1201.9 L1865.64 1201.9 L1866.23 1201.9 L1866.82 1201.9 L1867.4 1201.9 L1867.99 1201.9 L1868.58 1201.9 L1869.16 1201.9 L1869.75 1201.9 L1870.34 1201.9 L1870.92 1201.9 L1871.51 1201.9 L1872.09 1201.9 L1872.68 1201.9 L1873.27 1201.9 L1873.85 1201.9 L1874.44 1201.9 L1875.03 1201.9 L1875.61 1201.9 L1876.2 1201.9 L1876.79 1201.9 L1877.37 1201.9 L1877.96 1201.9 L1878.55 1201.9 L1879.13 1201.9 L1879.72 1201.9 L1880.3 1201.9 L1880.89 1201.9 L1881.48 1201.9 L1882.06 1201.9 L1882.65 1201.9 L1883.24 1201.9 L1883.82 1201.9 L1884.41 1201.9 L1885 1201.9 L1885.58 1201.9 L1886.17 1201.9 L1886.76 1201.9 L1887.34 1201.9 L1887.93 1201.9 L1888.51 1201.9 L1889.1 1201.9 L1889.69 1201.9 L1890.27 1201.9 L1890.86 1201.9 L1891.45 1201.9 L1892.03 1201.9 L1892.62 1201.9 L1893.21 1201.9 L1893.79 1201.9 L1894.38 1201.9 L1894.96 1201.9 L1895.55 1201.9 L1896.14 1201.9 L1896.72 1201.9 L1897.31 1201.9 L1897.9 1201.9 L1898.48 1201.9 L1899.07 1201.9 L1899.66 1201.9 L1900.24 1201.9 L1900.83 1201.9 L1901.42 1201.9 L1902 1201.9 L1902.59 1201.9 L1903.17 1201.9 L1903.76 1201.9 L1904.35 1201.9 L1904.93 1201.9 L1905.52 1201.9 L1906.11 1201.9 L1906.69 1201.9 L1907.28 1201.9 L1907.87 1201.9 L1908.45 1201.9 L1909.04 1201.9 L1909.63 1201.9 L1910.21 1201.9 L1910.8 1201.9 L1911.38 1201.9 L1911.97 1201.9 L1912.56 1201.9 L1913.14 1201.9 L1913.73 1201.9 L1914.32 1201.9 L1914.9 1201.9 L1915.49 1201.9 L1916.08 1201.9 L1916.66 1201.9 L1917.25 1201.9 L1917.83 1201.9 L1918.42 1201.9 L1919.01 1201.9 L1919.59 1201.9 L1920.18 1201.9 L1920.77 1201.9 L1921.35 1201.9 L1921.94 1201.9 L1922.53 1201.9 L1923.11 1201.9 L1923.7 1201.9 L1924.29 1201.9 L1924.87 1201.9 L1925.46 1201.9 L1926.04 1201.9 L1926.63 1201.9 L1927.22 1201.9 L1927.8 1201.9 L1928.39 1201.9 L1928.98 1201.9 L1929.56 1201.9 L1930.15 1201.9 L1930.74 1201.9 L1931.32 1201.9 L1931.91 1201.9 L1932.5 1201.9 L1933.08 1201.9 L1933.67 1201.9 L1934.25 1201.9 L1934.84 1201.9 L1935.43 1201.9 L1936.01 1201.9 L1936.6 1201.9 L1937.19 1201.9 L1937.77 1201.9 L1938.36 1201.9 L1938.95 1201.9 L1939.53 1201.9 L1940.12 1201.9 L1940.71 1201.9 L1941.29 1201.9 L1941.88 1201.9 L1942.46 1201.9 L1943.05 1201.9 L1943.64 1201.9 L1944.22 1201.9 L1944.81 1201.9 L1945.4 1201.9 L1945.98 1201.9 L1946.57 1201.9 L1947.16 1201.9 L1947.74 1201.9 L1948.33 1201.9 L1948.91 1201.9 L1949.5 1201.9 L1950.09 1201.9 L1950.67 1201.9 L1951.26 1201.9 L1951.85 1201.9 L1952.43 1201.9 L1953.02 1201.9 L1953.61 1201.9 L1954.19 1201.9 L1954.78 1201.9 L1955.37 1201.9 L1955.95 1201.9 L1956.54 1201.9 L1957.12 1201.9 L1957.71 1201.9 L1958.3 1201.9 L1958.88 1201.9 L1959.47 1201.9 L1960.06 1201.9 L1960.64 1201.9 L1961.23 1201.9 L1961.82 1201.9 L1962.4 1201.9 L1962.99 1201.9 L1963.58 1201.9 L1964.16 1201.9 L1964.75 1201.9 L1965.33 1201.9 L1965.92 1201.9 L1966.51 1201.9 L1967.09 1201.9 L1967.68 1201.9 L1968.27 1201.9 L1968.85 1201.9 L1969.44 1201.9 L1970.03 1201.9 L1970.61 1201.9 L1971.2 1201.9 L1971.78 1201.9 L1972.37 1201.9 L1972.96 1201.9 L1973.54 1201.9 L1974.13 1201.9 L1974.72 1201.9 L1975.3 1201.9 L1975.89 1201.9 L1976.48 1201.9 L1977.06 1201.9 L1977.65 1201.9 L1978.24 1201.9 L1978.82 1201.9 L1979.41 1201.9 L1979.99 1201.9 L1980.58 1201.9 L1981.17 1201.9 L1981.75 1201.9 L1982.34 1201.9 L1982.93 1201.9 L1983.51 1201.9 L1984.1 1201.9 L1984.69 1201.9 L1985.27 1201.9 L1985.86 1201.9 L1986.45 1201.9 L1987.03 1201.9 L1987.62 1201.9 L1988.2 1201.9 L1988.79 1201.9 L1989.38 1201.9 L1989.96 1201.9 L1990.55 1201.9 L1991.14 1201.9 L1991.72 1201.9 L1992.31 1201.9 L1992.9 1201.9 L1993.48 1201.9 L1994.07 1201.9 L1994.65 1201.9 L1995.24 1201.9 L1995.83 1201.9 L1996.41 1201.9 L1997 1201.9 L1997.59 1201.9 L1998.17 1201.9 L1998.76 1201.9 L1999.35 1201.9 L1999.93 1201.9 L2000.52 1201.9 L2001.11 1201.9 L2001.69 1201.9 L2002.28 1201.9 L2002.86 1201.9 L2003.45 1201.9 L2004.04 1201.9 L2004.62 1201.9 L2005.21 1201.9 L2005.8 1201.9 L2006.38 1201.9 L2006.97 1201.9 L2007.56 1201.9 L2008.14 1201.9 L2008.73 1201.9 L2009.32 1201.9 L2009.9 1201.9 L2010.49 1201.9 L2011.07 1201.9 L2011.66 1201.9 L2012.25 1201.9 L2012.83 1201.9 L2013.42 1201.9 L2014.01 1201.9 L2014.59 1201.9 L2015.18 1201.9 L2015.77 1201.9 L2016.35 1201.9 L2016.94 1201.9 L2017.53 1201.9 L2018.11 1201.9 L2018.7 1201.9 L2019.28 1201.9 L2019.87 1201.9 L2020.46 1201.9 L2021.04 1201.9 L2021.63 1201.9 L2022.22 1201.9 L2022.8 1201.9 L2023.39 1201.9 L2023.98 1201.9 L2024.56 1201.9 L2025.15 1201.9 L2025.73 1201.9 L2026.32 1201.9 L2026.91 1201.9 L2027.49 1201.9 L2028.08 1201.9 L2028.67 1201.9 L2029.25 1201.9 L2029.84 1201.9 L2030.43 1201.9 L2031.01 1201.9 L2031.6 1201.9 L2032.19 1201.9 L2032.77 1201.9 L2033.36 1201.9 L2033.94 1201.9 L2034.53 1201.9 L2035.12 1201.9 L2035.7 1201.9 L2036.29 1201.9 L2036.88 1201.9 L2037.46 1201.9 L2038.05 1201.9 L2038.64 1201.9 L2039.22 1201.9 L2039.81 1201.9 L2040.4 1201.9 L2040.98 1201.9 L2041.57 1201.9 L2042.15 1201.9 L2042.74 1201.9 L2043.33 1201.9 L2043.91 1201.9 L2044.5 1201.9 L2045.09 1201.9 L2045.67 1201.9 L2046.26 1201.9 L2046.85 1201.9 L2047.43 1201.9 L2048.02 1201.9 L2048.6 1201.9 L2049.19 1201.9 L2049.78 1201.9 L2050.36 1201.9 L2050.95 1201.9 L2051.54 1201.9 L2052.12 1201.9 L2052.71 1201.9 L2053.3 1201.9 L2053.88 1201.9 L2054.47 1201.9 L2055.06 1201.9 L2055.64 1201.9 L2056.23 1201.9 L2056.81 1201.9 L2057.4 1201.9 L2057.99 1201.9 L2058.57 1201.9 L2059.16 1201.9 L2059.75 1201.9 L2060.33 1201.9 L2060.92 1201.9 L2061.51 1201.9 L2062.09 1201.9 L2062.68 1201.9 L2063.27 1201.9 L2063.85 1201.9 L2064.44 1201.9 L2065.02 1201.9 L2065.61 1201.9 L2066.2 1201.9 L2066.78 1201.9 L2067.37 1201.9 L2067.96 1201.9 L2068.54 1201.9 L2069.13 1201.9 L2069.72 1201.9 L2070.3 1201.9 L2070.89 1201.9 L2071.48 1201.9 L2072.06 1201.9 L2072.65 1201.9 L2073.23 1201.9 L2073.82 1201.9 L2074.41 1201.9 L2074.99 1201.9 L2075.58 1201.9 L2076.17 1201.9 L2076.75 1201.9 L2077.34 1201.9 L2077.93 1201.9 L2078.51 1201.9 L2079.1 1201.9 L2079.68 1201.9 L2080.27 1201.9 L2080.86 1201.9 L2081.44 1201.9 L2082.03 1201.9 L2082.62 1201.9 L2083.2 1201.9 L2083.79 1201.9 L2084.38 1201.9 L2084.96 1201.9 L2085.55 1201.9 L2086.14 1201.9 L2086.72 1201.9 L2087.31 1201.9 L2087.89 1201.9 L2088.48 1201.9 L2089.07 1201.9 L2089.65 1201.9 L2090.24 1201.9 L2090.83 1201.9 L2091.41 1201.9 L2092 1201.9 L2092.59 1201.9 L2093.17 1201.9 L2093.76 1201.9 L2094.35 1201.9 L2094.93 1201.9 L2095.52 1201.9 L2096.1 1201.9 L2096.69 1201.9 L2097.28 1201.9 L2097.86 1201.9 L2098.45 1201.9 L2099.04 1201.9 L2099.62 1201.9 L2100.21 1201.9 L2100.8 1201.9 L2101.38 1201.9 L2101.97 1201.9 L2102.55 1201.9 L2103.14 1201.9 L2103.73 1201.9 L2104.31 1201.9 L2104.9 1201.9 L2105.49 1201.9 L2106.07 1201.9 L2106.66 1201.9 L2107.25 1201.9 L2107.83 1201.9 L2108.42 1201.9 L2109.01 1201.9 L2109.59 1201.9 L2110.18 1201.9 L2110.76 1201.9 L2111.35 1201.9 L2111.94 1201.9 L2112.52 1201.9 L2113.11 1201.9 L2113.7 1201.9 L2114.28 1201.9 L2114.87 1201.9 L2115.46 1201.9 L2116.04 1201.9 L2116.63 1201.9 L2117.22 1201.9 L2117.8 1201.9 L2118.39 1201.9 L2118.97 1201.9 L2119.56 1201.9 L2120.15 1201.9 L2120.73 1201.9 L2121.32 1201.9 L2121.91 1201.9 L2122.49 1201.9 L2123.08 1201.9 L2123.67 1201.9 L2124.25 1201.9 L2124.84 1201.9 L2125.42 1201.9 L2126.01 1201.9 L2126.6 1201.9 L2127.18 1201.9 L2127.77 1201.9 L2128.36 1201.9 L2128.94 1201.9 L2129.53 1201.9 L2130.12 1201.9 L2130.7 1201.9 L2131.29 1201.9 L2131.88 1201.9 L2132.46 1201.9 L2133.05 1201.9 L2133.63 1201.9 L2134.22 1201.9 L2134.81 1201.9 L2135.39 1201.9 L2135.98 1201.9 L2136.57 1201.9 L2137.15 1201.9 L2137.74 1201.9 L2138.33 1201.9 L2138.91 1201.9 L2139.5 1201.9 L2140.09 1201.9 L2140.67 1201.9 L2141.26 1201.9 L2141.84 1201.9 L2142.43 1201.9 L2143.02 1201.9 L2143.6 1201.9 L2144.19 1201.9 L2144.78 1201.9 L2145.36 1201.9 L2145.95 1201.9 L2146.54 1201.9 L2147.12 1201.9 L2147.71 1201.9 L2148.3 1201.9 L2148.88 1201.9 L2149.47 1201.9 L2150.05 1201.9 L2150.64 1201.9 L2151.23 1201.9 L2151.81 1201.9 L2152.4 1201.9 L2152.99 1201.9 L2153.57 1201.9 L2154.16 1201.9 L2154.75 1201.9 L2155.33 1201.9 L2155.92 1201.9 L2156.5 1201.9 L2157.09 1201.9 L2157.68 1201.9 L2158.26 1201.9 L2158.26 1201.05 L2157.68 1201.05 L2157.09 1201.05 L2156.5 1201.05 L2155.92 1201.05 L2155.33 1201.05 L2154.75 1201.05 L2154.16 1201.05 L2153.57 1201.05 L2152.99 1201.05 L2152.4 1201.05 L2151.81 1201.05 L2151.23 1201.05 L2150.64 1201.05 L2150.05 1201.05 L2149.47 1201.05 L2148.88 1201.05 L2148.3 1201.05 L2147.71 1201.05 L2147.12 1201.05 L2146.54 1201.05 L2145.95 1201.05 L2145.36 1201.05 L2144.78 1201.05 L2144.19 1201.05 L2143.6 1201.05 L2143.02 1201.05 L2142.43 1201.05 L2141.84 1201.05 L2141.26 1201.05 L2140.67 1201.05 L2140.09 1201.05 L2139.5 1201.05 L2138.91 1201.05 L2138.33 1201.05 L2137.74 1201.05 L2137.15 1201.05 L2136.57 1201.05 L2135.98 1201.05 L2135.39 1201.05 L2134.81 1201.05 L2134.22 1201.05 L2133.63 1201.05 L2133.05 1201.05 L2132.46 1201.05 L2131.88 1201.05 L2131.29 1201.05 L2130.7 1201.05 L2130.12 1201.05 L2129.53 1201.05 L2128.94 1201.05 L2128.36 1201.05 L2127.77 1201.05 L2127.18 1201.05 L2126.6 1201.05 L2126.01 1201.05 L2125.42 1201.05 L2124.84 1201.05 L2124.25 1201.05 L2123.67 1201.05 L2123.08 1201.05 L2122.49 1201.05 L2121.91 1201.05 L2121.32 1201.05 L2120.73 1201.05 L2120.15 1201.05 L2119.56 1201.05 L2118.97 1201.05 L2118.39 1201.05 L2117.8 1201.05 L2117.22 1201.05 L2116.63 1201.05 L2116.04 1201.05 L2115.46 1201.05 L2114.87 1201.05 L2114.28 1201.05 L2113.7 1201.05 L2113.11 1201.05 L2112.52 1201.05 L2111.94 1201.05 L2111.35 1201.05 L2110.76 1201.05 L2110.18 1201.05 L2109.59 1201.05 L2109.01 1201.05 L2108.42 1201.05 L2107.83 1201.05 L2107.25 1201.05 L2106.66 1201.05 L2106.07 1201.05 L2105.49 1201.05 L2104.9 1201.05 L2104.31 1201.05 L2103.73 1201.05 L2103.14 1201.05 L2102.55 1201.05 L2101.97 1201.05 L2101.38 1201.05 L2100.8 1201.05 L2100.21 1201.05 L2099.62 1201.05 L2099.04 1201.05 L2098.45 1201.05 L2097.86 1201.05 L2097.28 1201.05 L2096.69 1201.05 L2096.1 1201.05 L2095.52 1201.05 L2094.93 1201.05 L2094.35 1201.05 L2093.76 1201.05 L2093.17 1201.05 L2092.59 1201.05 L2092 1201.05 L2091.41 1201.05 L2090.83 1201.05 L2090.24 1201.05 L2089.65 1201.05 L2089.07 1201.05 L2088.48 1201.05 L2087.89 1201.05 L2087.31 1201.05 L2086.72 1201.05 L2086.14 1201.05 L2085.55 1201.05 L2084.96 1201.05 L2084.38 1201.05 L2083.79 1201.05 L2083.2 1201.05 L2082.62 1201.05 L2082.03 1201.05 L2081.44 1201.05 L2080.86 1201.05 L2080.27 1201.05 L2079.68 1201.05 L2079.1 1201.05 L2078.51 1201.05 L2077.93 1201.05 L2077.34 1201.05 L2076.75 1201.05 L2076.17 1201.05 L2075.58 1201.05 L2074.99 1201.05 L2074.41 1201.05 L2073.82 1201.05 L2073.23 1201.05 L2072.65 1201.05 L2072.06 1201.05 L2071.48 1201.05 L2070.89 1201.05 L2070.3 1201.05 L2069.72 1201.05 L2069.13 1201.05 L2068.54 1201.05 L2067.96 1201.05 L2067.37 1201.05 L2066.78 1201.05 L2066.2 1201.05 L2065.61 1201.05 L2065.02 1201.05 L2064.44 1201.05 L2063.85 1201.05 L2063.27 1201.05 L2062.68 1201.05 L2062.09 1201.05 L2061.51 1201.05 L2060.92 1201.05 L2060.33 1201.05 L2059.75 1201.05 L2059.16 1201.05 L2058.57 1201.05 L2057.99 1201.05 L2057.4 1201.05 L2056.81 1201.05 L2056.23 1201.05 L2055.64 1201.05 L2055.06 1201.05 L2054.47 1201.05 L2053.88 1201.05 L2053.3 1201.05 L2052.71 1201.05 L2052.12 1201.05 L2051.54 1201.05 L2050.95 1201.05 L2050.36 1201.05 L2049.78 1201.05 L2049.19 1201.05 L2048.6 1201.05 L2048.02 1201.05 L2047.43 1201.05 L2046.85 1201.05 L2046.26 1201.05 L2045.67 1201.05 L2045.09 1201.05 L2044.5 1201.05 L2043.91 1201.05 L2043.33 1201.05 L2042.74 1201.05 L2042.15 1201.05 L2041.57 1201.05 L2040.98 1201.05 L2040.4 1201.05 L2039.81 1201.05 L2039.22 1201.05 L2038.64 1201.05 L2038.05 1201.05 L2037.46 1201.05 L2036.88 1201.05 L2036.29 1201.05 L2035.7 1201.05 L2035.12 1201.05 L2034.53 1201.05 L2033.94 1201.05 L2033.36 1201.05 L2032.77 1201.05 L2032.19 1201.05 L2031.6 1201.05 L2031.01 1201.05 L2030.43 1201.05 L2029.84 1201.05 L2029.25 1201.05 L2028.67 1201.05 L2028.08 1201.05 L2027.49 1201.05 L2026.91 1201.05 L2026.32 1201.05 L2025.73 1201.05 L2025.15 1201.05 L2024.56 1201.05 L2023.98 1201.05 L2023.39 1201.05 L2022.8 1201.05 L2022.22 1201.05 L2021.63 1201.05 L2021.04 1201.05 L2020.46 1201.05 L2019.87 1201.05 L2019.28 1201.05 L2018.7 1201.05 L2018.11 1201.05 L2017.53 1201.05 L2016.94 1201.05 L2016.35 1201.05 L2015.77 1201.05 L2015.18 1201.05 L2014.59 1201.05 L2014.01 1201.05 L2013.42 1201.05 L2012.83 1201.05 L2012.25 1201.05 L2011.66 1201.05 L2011.07 1201.05 L2010.49 1201.05 L2009.9 1201.05 L2009.32 1201.05 L2008.73 1201.05 L2008.14 1201.05 L2007.56 1201.05 L2006.97 1201.05 L2006.38 1201.05 L2005.8 1201.05 L2005.21 1201.05 L2004.62 1201.05 L2004.04 1201.05 L2003.45 1201.05 L2002.86 1201.05 L2002.28 1201.05 L2001.69 1201.05 L2001.11 1201.05 L2000.52 1201.05 L1999.93 1201.05 L1999.35 1201.05 L1998.76 1201.05 L1998.17 1201.05 L1997.59 1201.05 L1997 1201.05 L1996.41 1201.05 L1995.83 1201.05 L1995.24 1201.05 L1994.65 1201.05 L1994.07 1201.05 L1993.48 1201.05 L1992.9 1201.05 L1992.31 1201.05 L1991.72 1201.05 L1991.14 1201.05 L1990.55 1201.05 L1989.96 1201.05 L1989.38 1201.05 L1988.79 1201.05 L1988.2 1201.05 L1987.62 1201.05 L1987.03 1201.05 L1986.45 1201.05 L1985.86 1201.05 L1985.27 1201.05 L1984.69 1201.05 L1984.1 1201.05 L1983.51 1201.05 L1982.93 1201.05 L1982.34 1201.05 L1981.75 1201.05 L1981.17 1201.05 L1980.58 1201.05 L1979.99 1201.05 L1979.41 1201.05 L1978.82 1201.05 L1978.24 1201.05 L1977.65 1201.05 L1977.06 1201.05 L1976.48 1201.05 L1975.89 1201.05 L1975.3 1201.05 L1974.72 1201.05 L1974.13 1201.05 L1973.54 1201.05 L1972.96 1201.05 L1972.37 1201.05 L1971.78 1201.05 L1971.2 1201.05 L1970.61 1201.05 L1970.03 1201.05 L1969.44 1201.05 L1968.85 1201.05 L1968.27 1201.05 L1967.68 1201.05 L1967.09 1201.05 L1966.51 1201.05 L1965.92 1201.05 L1965.33 1201.05 L1964.75 1201.05 L1964.16 1201.05 L1963.58 1201.05 L1962.99 1201.05 L1962.4 1201.05 L1961.82 1201.05 L1961.23 1201.05 L1960.64 1201.05 L1960.06 1201.05 L1959.47 1201.05 L1958.88 1201.05 L1958.3 1201.05 L1957.71 1201.05 L1957.12 1201.05 L1956.54 1201.05 L1955.95 1201.05 L1955.37 1201.05 L1954.78 1201.05 L1954.19 1201.05 L1953.61 1201.05 L1953.02 1201.05 L1952.43 1201.05 L1951.85 1201.05 L1951.26 1201.05 L1950.67 1201.05 L1950.09 1201.05 L1949.5 1201.05 L1948.91 1201.05 L1948.33 1201.05 L1947.74 1201.05 L1947.16 1201.05 L1946.57 1201.05 L1945.98 1201.05 L1945.4 1201.05 L1944.81 1201.05 L1944.22 1201.05 L1943.64 1201.05 L1943.05 1201.05 L1942.46 1201.05 L1941.88 1201.05 L1941.29 1201.05 L1940.71 1201.05 L1940.12 1201.05 L1939.53 1201.05 L1938.95 1201.05 L1938.36 1201.05 L1937.77 1201.05 L1937.19 1201.05 L1936.6 1201.05 L1936.01 1201.05 L1935.43 1201.05 L1934.84 1201.05 L1934.25 1201.05 L1933.67 1201.05 L1933.08 1201.05 L1932.5 1201.05 L1931.91 1201.05 L1931.32 1201.05 L1930.74 1201.05 L1930.15 1201.05 L1929.56 1201.05 L1928.98 1201.05 L1928.39 1201.05 L1927.8 1201.05 L1927.22 1201.05 L1926.63 1201.05 L1926.04 1201.05 L1925.46 1201.05 L1924.87 1201.05 L1924.29 1201.05 L1923.7 1201.05 L1923.11 1201.05 L1922.53 1201.05 L1921.94 1201.05 L1921.35 1201.05 L1920.77 1201.05 L1920.18 1201.05 L1919.59 1201.05 L1919.01 1201.05 L1918.42 1201.05 L1917.83 1201.05 L1917.25 1201.05 L1916.66 1201.05 L1916.08 1201.05 L1915.49 1201.05 L1914.9 1201.05 L1914.32 1201.05 L1913.73 1201.05 L1913.14 1201.05 L1912.56 1201.05 L1911.97 1201.05 L1911.38 1201.05 L1910.8 1201.05 L1910.21 1201.05 L1909.63 1201.05 L1909.04 1201.05 L1908.45 1201.05 L1907.87 1201.05 L1907.28 1201.05 L1906.69 1201.05 L1906.11 1201.05 L1905.52 1201.05 L1904.93 1201.05 L1904.35 1201.05 L1903.76 1201.05 L1903.17 1201.05 L1902.59 1201.05 L1902 1201.05 L1901.42 1201.05 L1900.83 1201.05 L1900.24 1201.05 L1899.66 1201.05 L1899.07 1201.05 L1898.48 1201.05 L1897.9 1201.05 L1897.31 1201.05 L1896.72 1201.05 L1896.14 1201.05 L1895.55 1201.05 L1894.96 1201.05 L1894.38 1201.05 L1893.79 1201.05 L1893.21 1201.05 L1892.62 1201.05 L1892.03 1201.05 L1891.45 1201.05 L1890.86 1201.05 L1890.27 1201.05 L1889.69 1201.05 L1889.1 1201.05 L1888.51 1201.05 L1887.93 1201.05 L1887.34 1201.05 L1886.76 1201.05 L1886.17 1201.05 L1885.58 1201.05 L1885 1201.05 L1884.41 1201.05 L1883.82 1201.05 L1883.24 1201.05 L1882.65 1201.05 L1882.06 1201.05 L1881.48 1201.05 L1880.89 1201.05 L1880.3 1201.05 L1879.72 1201.05 L1879.13 1201.05 L1878.55 1201.05 L1877.96 1201.05 L1877.37 1201.05 L1876.79 1201.05 L1876.2 1201.05 L1875.61 1201.05 L1875.03 1201.05 L1874.44 1201.05 L1873.85 1201.05 L1873.27 1201.05 L1872.68 1201.05 L1872.09 1201.05 L1871.51 1201.05 L1870.92 1201.05 L1870.34 1201.05 L1869.75 1201.05 L1869.16 1201.05 L1868.58 1201.05 L1867.99 1201.05 L1867.4 1201.05 L1866.82 1201.05 L1866.23 1201.05 L1865.64 1201.05 L1865.06 1201.05 L1864.47 1201.05 L1863.88 1201.05 L1863.3 1201.05 L1862.71 1201.05 L1862.13 1201.05 L1861.54 1201.05 L1860.95 1201.05 L1860.37 1201.05 L1859.78 1201.05 L1859.19 1201.05 L1858.61 1201.05 L1858.02 1201.05 L1857.43 1201.05 L1856.85 1201.05 L1856.26 1201.05 L1855.68 1201.05 L1855.09 1201.05 L1854.5 1201.05 L1853.92 1201.05 L1853.33 1201.05 L1852.74 1201.05 L1852.16 1201.05 L1851.57 1201.05 L1850.98 1201.05 L1850.4 1201.05 L1849.81 1201.05 L1849.22 1201.05 L1848.64 1201.05 L1848.05 1201.05 L1847.47 1201.05 L1846.88 1201.05 L1846.29 1201.05 L1845.71 1201.05 L1845.12 1201.05 L1844.53 1201.05 L1843.95 1201.05 L1843.36 1201.05 L1842.77 1201.05 L1842.19 1201.05 L1841.6 1201.05 L1841.01 1201.05 L1840.43 1201.05 L1839.84 1201.05 L1839.26 1201.05 L1838.67 1201.05 L1838.08 1201.05 L1837.5 1201.05 L1836.91 1201.05 L1836.32 1201.05 L1835.74 1201.05 L1835.15 1201.05 L1834.56 1201.05 L1833.98 1201.05 L1833.39 1201.05 L1832.81 1201.05 L1832.22 1201.05 L1831.63 1201.05 L1831.05 1201.05 L1830.46 1201.05 L1829.87 1201.05 L1829.29 1201.05 L1828.7 1201.05 L1828.11 1201.05 L1827.53 1201.05 L1826.94 1201.05 L1826.35 1201.05 L1825.77 1201.05 L1825.18 1201.05 L1824.6 1201.05 L1824.01 1201.05 L1823.42 1201.05 L1822.84 1201.05 L1822.25 1201.05 L1821.66 1201.05 L1821.08 1201.05 L1820.49 1201.05 L1819.9 1201.05 L1819.32 1201.05 L1818.73 1201.05 L1818.14 1201.05 L1817.56 1201.05 L1816.97 1201.05 L1816.39 1201.05 L1815.8 1201.05 L1815.21 1201.05 L1814.63 1201.05 L1814.04 1201.05 L1813.45 1201.05 L1812.87 1201.05 L1812.28 1201.05 L1811.69 1201.05 L1811.11 1201.05 L1810.52 1201.05 L1809.94 1201.05 L1809.35 1201.05 L1808.76 1201.05 L1808.18 1201.05 L1807.59 1201.05 L1807 1201.05 L1806.42 1201.05 L1805.83 1201.05 L1805.24 1201.05 L1804.66 1201.05 L1804.07 1201.05 L1803.48 1201.05 L1802.9 1201.05 L1802.31 1201.05 L1801.73 1201.05 L1801.14 1201.05 L1800.55 1201.05 L1799.97 1201.05 L1799.38 1201.05 L1798.79 1201.05 L1798.21 1201.05 L1797.62 1201.05 L1797.03 1201.05 L1796.45 1201.05 L1795.86 1201.05 L1795.27 1201.05 L1794.69 1201.05 L1794.1 1201.05 L1793.52 1201.05 L1792.93 1201.05 L1792.34 1201.05 L1791.76 1201.05 L1791.17 1201.05 L1790.58 1201.05 L1790 1201.05 L1789.41 1201.05 L1788.82 1201.05 L1788.24 1201.05 L1787.65 1201.05 L1787.06 1201.05 L1786.48 1201.05 L1785.89 1201.05 L1785.31 1201.05 L1784.72 1201.05 L1784.13 1201.05 L1783.55 1201.05 L1782.96 1201.05 L1782.37 1201.05 L1781.79 1201.05 L1781.2 1201.05 L1780.61 1201.05 L1780.03 1201.05 L1779.44 1201.05 L1778.86 1201.05 L1778.27 1201.05 L1777.68 1201.05 L1777.1 1201.05 L1776.51 1201.05 L1775.92 1201.05 L1775.34 1201.05 L1774.75 1201.05 L1774.16 1201.05 L1773.58 1201.05 L1772.99 1201.05 L1772.4 1201.05 L1771.82 1201.05 L1771.23 1201.05 L1770.65 1201.05 L1770.06 1201.05 L1769.47 1201.05 L1768.89 1201.05 L1768.3 1201.05 L1767.71 1201.05 L1767.13 1201.05 L1766.54 1201.05 L1765.95 1201.05 L1765.37 1201.05 L1764.78 1201.05 L1764.19 1201.05 L1763.61 1201.05 L1763.02 1201.05 L1762.44 1201.05 L1761.85 1201.05 L1761.26 1201.05 L1760.68 1201.05 L1760.09 1201.05 L1759.5 1201.05 L1758.92 1201.05 L1758.33 1201.05 L1757.74 1201.05 L1757.16 1201.05 L1756.57 1201.05 L1755.99 1201.05 L1755.4 1201.05 L1754.81 1201.05 L1754.23 1201.05 L1753.64 1201.05 L1753.05 1201.05 L1752.47 1201.05 L1751.88 1201.05 L1751.29 1201.05 L1750.71 1201.05 L1750.12 1201.05 L1749.53 1201.05 L1748.95 1201.05 L1748.36 1201.05 L1747.78 1201.05 L1747.19 1201.05 L1746.6 1201.05 L1746.02 1201.05 L1745.43 1201.05 L1744.84 1201.05 L1744.26 1201.05 L1743.67 1201.05 L1743.08 1201.05 L1742.5 1201.05 L1741.91 1201.05 L1741.32 1201.05 L1740.74 1201.05 L1740.15 1201.05 L1739.57 1201.05 L1738.98 1201.05 L1738.39 1201.05 L1737.81 1201.05 L1737.22 1201.05 L1736.63 1201.05 L1736.05 1201.05 L1735.46 1201.05 L1734.87 1201.05 L1734.29 1201.05 L1733.7 1201.05 L1733.11 1201.05 L1732.53 1201.05 L1731.94 1201.05 L1731.36 1201.05 L1730.77 1201.05 L1730.18 1201.05 L1729.6 1201.05 L1729.01 1201.05 L1728.42 1201.05 L1727.84 1201.05 L1727.25 1201.05 L1726.66 1201.05 L1726.08 1201.05 L1725.49 1201.05 L1724.91 1201.05 L1724.32 1201.05 L1723.73 1201.05 L1723.15 1201.05 L1722.56 1201.05 L1721.97 1201.05 L1721.39 1201.05 L1720.8 1201.05 L1720.21 1201.05 L1719.63 1201.05 L1719.04 1201.05 L1718.45 1201.05 L1717.87 1201.05 L1717.28 1201.05 L1716.7 1201.05 L1716.11 1201.05 L1715.52 1201.05 L1714.94 1201.05 L1714.35 1201.05 L1713.76 1201.05 L1713.18 1201.05 L1712.59 1201.05 L1712 1201.05 L1711.42 1201.05 L1710.83 1201.05 L1710.24 1201.05 L1709.66 1201.05 L1709.07 1201.05 L1708.49 1201.05 L1707.9 1201.05 L1707.31 1201.05 L1706.73 1201.05 L1706.14 1201.05 L1705.55 1201.05 L1704.97 1201.05 L1704.38 1201.05 L1703.79 1201.05 L1703.21 1201.05 L1702.62 1201.05 L1702.04 1201.05 L1701.45 1201.05 L1700.86 1201.05 L1700.28 1201.05 L1699.69 1201.05 L1699.1 1201.05 L1698.52 1201.05 L1697.93 1201.05 L1697.34 1201.05 L1696.76 1201.05 L1696.17 1201.05 L1695.58 1201.05 L1695 1201.05 L1694.41 1201.05 L1693.83 1201.05 L1693.24 1201.05 L1692.65 1201.05 L1692.07 1201.05 L1691.48 1201.05 L1690.89 1201.05 L1690.31 1201.05 L1689.72 1201.05 L1689.13 1201.05 L1688.55 1201.05 L1687.96 1201.05 L1687.37 1201.05 L1686.79 1201.05 L1686.2 1201.05 L1685.62 1201.05 L1685.03 1201.05 L1684.44 1201.05 L1683.86 1201.05 L1683.27 1201.05 L1682.68 1201.05 L1682.1 1201.05 L1681.51 1201.05 L1680.92 1201.05 L1680.34 1201.05 L1679.75 1201.05 L1679.17 1201.05 L1678.58 1201.05 L1677.99 1201.05 L1677.41 1201.05 L1676.82 1201.05 L1676.23 1201.05 L1675.65 1201.05 L1675.06 1201.05 L1674.47 1201.05 L1673.89 1201.05 L1673.3 1201.05 L1672.71 1201.05 L1672.13 1201.05 L1671.54 1201.05 L1670.96 1201.05 L1670.37 1201.05 L1669.78 1201.05 L1669.2 1201.05 L1668.61 1201.05 L1668.02 1201.05 L1667.44 1201.05 L1666.85 1201.05 L1666.26 1201.05 L1665.68 1201.05 L1665.09 1201.05 L1664.5 1201.05 L1663.92 1201.05 L1663.33 1201.05 L1662.75 1201.05 L1662.16 1201.05 L1661.57 1201.05 L1660.99 1201.05 L1660.4 1201.05 L1659.81 1201.05 L1659.23 1201.05 L1658.64 1201.05 L1658.05 1201.05 L1657.47 1201.05 L1656.88 1201.05 L1656.29 1201.05 L1655.71 1201.05 L1655.12 1201.05 L1654.54 1201.05 L1653.95 1201.05 L1653.36 1201.05 L1652.78 1201.05 L1652.19 1201.05 L1651.6 1201.05 L1651.02 1201.05 L1650.43 1201.05 L1649.84 1201.05 L1649.26 1201.05 L1648.67 1201.05 L1648.09 1201.05 L1647.5 1201.05 L1646.91 1201.05 L1646.33 1201.05 L1645.74 1201.05 L1645.15 1201.05 L1644.57 1201.05 L1643.98 1201.05 L1643.39 1201.05 L1642.81 1201.05 L1642.22 1201.05 L1641.63 1201.05 L1641.05 1201.05 L1640.46 1201.05 L1639.88 1201.05 L1639.29 1201.05 L1638.7 1201.05 L1638.12 1201.05 L1637.53 1201.05 L1636.94 1201.05 L1636.36 1201.05 L1635.77 1201.05 L1635.18 1201.05 L1634.6 1201.05 L1634.01 1201.05 L1633.42 1201.05 L1632.84 1201.05 L1632.25 1201.05 L1631.67 1201.05 L1631.08 1201.05 L1630.49 1201.05 L1629.91 1201.05 L1629.32 1201.05 L1628.73 1201.05 L1628.15 1201.05 L1627.56 1201.05 L1626.97 1201.05 L1626.39 1201.05 L1625.8 1201.05 L1625.22 1201.05 L1624.63 1201.05 L1624.04 1201.05 L1623.46 1201.05 L1622.87 1201.05 L1622.28 1201.05 L1621.7 1201.05 L1621.11 1201.05 L1620.52 1201.05 L1619.94 1201.05 L1619.35 1201.05 L1618.76 1201.05 L1618.18 1201.05 L1617.59 1201.05 L1617.01 1201.05 L1616.42 1201.05 L1615.83 1201.05 L1615.25 1201.05 L1614.66 1201.05 L1614.07 1201.05 L1613.49 1201.05 L1612.9 1201.05 L1612.31 1201.05 L1611.73 1201.05 L1611.14 1201.05 L1610.55 1201.05 L1609.97 1201.05 L1609.38 1201.05 L1608.8 1201.05 L1608.21 1201.05 L1607.62 1201.05 L1607.04 1201.05 L1606.45 1201.05 L1605.86 1201.05 L1605.28 1201.05 L1604.69 1201.05 L1604.1 1201.05 L1603.52 1201.05 L1602.93 1201.05 L1602.34 1201.05 L1601.76 1201.05 L1601.17 1201.05 L1600.59 1201.05 L1600 1201.05 L1599.41 1201.05 L1598.83 1201.05 L1598.24 1201.05 L1597.65 1201.05 L1597.07 1201.05 L1596.48 1201.05 L1595.89 1201.05 L1595.31 1201.05 L1594.72 1201.05 L1594.14 1201.05 L1593.55 1201.05 L1592.96 1201.05 L1592.38 1201.05 L1591.79 1201.05 L1591.2 1201.05 L1590.62 1201.05 L1590.03 1201.05 L1589.44 1201.05 L1588.86 1201.05 L1588.27 1201.05 L1587.68 1201.05 L1587.1 1201.05 L1586.51 1201.05 L1585.93 1201.05 L1585.34 1201.05 L1584.75 1201.05 L1584.17 1201.05 L1583.58 1201.05 L1582.99 1201.05 L1582.41 1201.05 L1581.82 1201.05 L1581.23 1201.05 L1580.65 1201.05 L1580.06 1201.05 L1579.47 1201.05 L1578.89 1201.05 L1578.3 1201.05 L1577.72 1201.05 L1577.13 1201.05 L1576.54 1201.05 L1575.96 1201.05 L1575.37 1201.05 L1574.78 1201.05 L1574.2 1201.05 L1573.61 1201.05 L1573.02 1201.05 L1572.44 1201.05 L1571.85 1201.05 L1571.27 1201.05 L1570.68 1201.05 L1570.09 1201.05 L1569.51 1201.05 L1568.92 1201.05 L1568.33 1201.05 L1567.75 1201.05 L1567.16 1201.05 L1566.57 1201.05 L1565.99 1201.05 L1565.4 1201.05 L1564.81 1201.05 L1564.23 1201.05 L1563.64 1201.05 L1563.06 1201.05 L1562.47 1201.05 L1561.88 1201.05 L1561.3 1201.05 L1560.71 1201.05 L1560.12 1201.05 L1559.54 1201.05 L1558.95 1201.05 L1558.36 1201.05 L1557.78 1201.05 L1557.19 1201.05 L1556.6 1201.05 L1556.02 1201.05 L1555.43 1201.05 L1554.85 1201.05 L1554.26 1201.05 L1553.67 1201.05 L1553.09 1201.05 L1552.5 1201.05 L1551.91 1201.05 L1551.33 1201.05 L1550.74 1201.05 L1550.15 1201.05 L1549.57 1201.05 L1548.98 1201.05 L1548.4 1201.05 L1547.81 1201.05 L1547.22 1201.05 L1546.64 1201.05 L1546.05 1201.05 L1545.46 1201.05 L1544.88 1201.05 L1544.29 1201.05 L1543.7 1201.05 L1543.12 1201.05 L1542.53 1201.05 L1541.94 1201.05 L1541.36 1201.05 L1540.77 1201.05 L1540.19 1201.05 L1539.6 1201.05 L1539.01 1201.05 L1538.43 1201.05 L1537.84 1201.05 L1537.25 1201.05 L1536.67 1201.05 L1536.08 1201.05 L1535.49 1201.05 L1534.91 1201.05 L1534.32 1201.05 L1533.73 1201.05 L1533.15 1201.05 L1532.56 1201.05 L1531.98 1201.05 L1531.39 1201.05 L1530.8 1201.05 L1530.22 1201.05 L1529.63 1201.05 L1529.04 1201.05 L1528.46 1201.05 L1527.87 1201.05 L1527.28 1201.05 L1526.7 1201.05 L1526.11 1201.05 L1525.52 1201.05 L1524.94 1201.05 L1524.35 1201.05 L1523.77 1201.05 L1523.18 1201.05 L1522.59 1201.05 L1522.01 1201.05 L1521.42 1201.05 L1520.83 1201.05 L1520.25 1201.05 L1519.66 1201.05 L1519.07 1201.05 L1518.49 1201.05 L1517.9 1201.05 L1517.32 1201.05 L1516.73 1201.05 L1516.14 1201.05 L1515.56 1201.05 L1514.97 1201.05 L1514.38 1201.05 L1513.8 1201.05 L1513.21 1201.05 L1512.62 1201.05 L1512.04 1201.05 L1511.45 1201.05 L1510.86 1201.05 L1510.28 1201.05 L1509.69 1201.05 L1509.11 1201.05 L1508.52 1201.05 L1507.93 1201.05 L1507.35 1201.05 L1506.76 1201.05 L1506.17 1201.05 L1505.59 1201.05 L1505 1201.05 L1504.41 1201.05 L1503.83 1201.05 L1503.24 1201.05 L1502.65 1201.05 L1502.07 1201.05 L1501.48 1201.05 L1500.9 1201.05 L1500.31 1201.05 L1499.72 1201.05 L1499.14 1201.05 L1498.55 1201.05 L1497.96 1201.05 L1497.38 1201.05 L1496.79 1201.05 L1496.2 1201.05 L1495.62 1201.05 L1495.03 1201.05 L1494.45 1201.05 L1493.86 1201.05 L1493.27 1201.05 L1492.69 1201.05 L1492.1 1201.05 L1491.51 1201.05 L1490.93 1201.05 L1490.34 1201.05 L1489.75 1201.05 L1489.17 1201.05 L1488.58 1201.05 L1487.99 1201.05 L1487.41 1201.05 L1486.82 1201.05 L1486.24 1201.05 L1485.65 1201.05 L1485.06 1201.05 L1484.48 1201.05 L1483.89 1201.05 L1483.3 1201.05 L1482.72 1201.05 L1482.13 1201.05 L1481.54 1201.05 L1480.96 1201.05 L1480.37 1201.05 L1479.78 1201.05 L1479.2 1201.05 L1478.61 1201.05 L1478.03 1201.05 L1477.44 1201.05 L1476.85 1201.05 L1476.27 1201.05 L1475.68 1201.05 L1475.09 1201.05 L1474.51 1201.05 L1473.92 1201.05 L1473.33 1201.05 L1472.75 1201.05 L1472.16 1201.05 L1471.57 1201.05 L1470.99 1201.05 L1470.4 1201.05 L1469.82 1201.05 L1469.23 1201.05 L1468.64 1201.05 L1468.06 1201.05 L1467.47 1201.05 L1466.88 1201.05 L1466.3 1201.05 L1465.71 1201.05 L1465.12 1201.05 L1464.54 1201.05 L1463.95 1201.05 L1463.37 1201.05 L1462.78 1201.05 L1462.19 1201.05 L1461.61 1201.05 L1461.02 1201.05 L1460.43 1201.05 L1459.85 1201.05 L1459.26 1201.05 L1458.67 1201.05 L1458.09 1201.05 L1457.5 1201.05 L1456.91 1201.05 L1456.33 1201.05 L1455.74 1201.05 L1455.16 1201.05 L1454.57 1201.05 L1453.98 1201.05 L1453.4 1201.05 L1452.81 1201.05 L1452.22 1201.05 L1451.64 1201.05 L1451.05 1201.05 L1450.46 1201.05 L1449.88 1201.05 L1449.29 1201.05 L1448.7 1201.05 L1448.12 1201.05 L1447.53 1201.05 L1446.95 1201.05 L1446.36 1201.05 L1445.77 1201.05 L1445.19 1201.05 L1444.6 1201.05 L1444.01 1201.05 L1443.43 1201.05 L1442.84 1201.05 L1442.25 1201.05 L1441.67 1201.05 L1441.08 1201.05 L1440.5 1201.05 L1439.91 1201.05 L1439.32 1201.05 L1438.74 1201.05 L1438.15 1201.05 L1437.56 1201.05 L1436.98 1201.05 L1436.39 1201.05 L1435.8 1201.05 L1435.22 1201.05 L1434.63 1201.05 L1434.04 1201.05 L1433.46 1201.05 L1432.87 1201.05 L1432.29 1201.05 L1431.7 1201.05 L1431.11 1201.05 L1430.53 1201.05 L1429.94 1201.05 L1429.35 1201.05 L1428.77 1201.05 L1428.18 1201.05 L1427.59 1201.05 L1427.01 1201.05 L1426.42 1201.05 L1425.83 1201.05 L1425.25 1201.05 L1424.66 1201.05 L1424.08 1201.05 L1423.49 1201.05 L1422.9 1201.05 L1422.32 1201.05 L1421.73 1201.05 L1421.14 1201.05 L1420.56 1201.05 L1419.97 1201.05 L1419.38 1201.05 L1418.8 1201.05 L1418.21 1201.05 L1417.63 1201.05 L1417.04 1201.05 L1416.45 1201.05 L1415.87 1201.05 L1415.28 1201.05 L1414.69 1201.05 L1414.11 1201.05 L1413.52 1201.05 L1412.93 1201.05 L1412.35 1201.05 L1411.76 1201.05 L1411.17 1201.05 L1410.59 1201.05 L1410 1201.05 L1409.42 1201.05 L1408.83 1201.05 L1408.24 1201.05 L1407.66 1201.05 L1407.07 1201.05 L1406.48 1201.05 L1405.9 1201.05 L1405.31 1201.05 L1404.72 1201.05 L1404.14 1201.05 L1403.55 1201.05 L1402.96 1201.05 L1402.38 1201.05 L1401.79 1201.05 L1401.21 1201.05 L1400.62 1201.05 L1400.03 1201.05 L1399.45 1201.05 L1398.86 1201.05 L1398.27 1201.05 L1397.69 1201.05 L1397.1 1201.05 L1396.51 1201.05 L1395.93 1201.05 L1395.34 1201.05 L1394.75 1201.05 L1394.17 1201.05 L1393.58 1201.05 L1393 1201.05 L1392.41 1201.05 L1391.82 1201.05 L1391.24 1201.05 L1390.65 1201.05 L1390.06 1201.05 L1389.48 1201.05 L1388.89 1201.05 L1388.3 1201.05 L1387.72 1201.05 L1387.13 1201.05 L1386.55 1201.05 L1385.96 1201.05 L1385.37 1201.05 L1384.79 1201.05 L1384.2 1201.05 L1383.61 1201.05 L1383.03 1201.05 L1382.44 1201.05 L1381.85 1201.05 L1381.27 1201.05 L1380.68 1201.05 L1380.09 1201.05 L1379.51 1201.05 L1378.92 1201.05 L1378.34 1201.05 L1377.75 1201.05 L1377.16 1201.05 L1376.58 1201.05 L1375.99 1201.05 L1375.4 1201.05 L1374.82 1201.05 L1374.23 1201.05 L1373.64 1201.05 L1373.06 1201.05 L1372.47 1201.05 L1371.88 1201.05 L1371.3 1201.05 L1370.71 1201.05 L1370.13 1201.05 L1369.54 1201.05 L1368.95 1201.05 L1368.37 1201.05 L1367.78 1201.05 L1367.19 1201.05 L1366.61 1201.05 L1366.02 1201.05 L1365.43 1201.05 L1364.85 1201.05 L1364.26 1201.05 L1363.68 1201.05 L1363.09 1201.05 L1362.5 1201.05 L1361.92 1201.05 L1361.33 1201.05 L1360.74 1201.05 L1360.16 1201.05 L1359.57 1201.05 L1358.98 1201.05 L1358.4 1201.05 L1357.81 1201.05 L1357.22 1201.05 L1356.64 1201.05 L1356.05 1201.05 L1355.47 1201.05 L1354.88 1201.05 L1354.29 1201.05 L1353.71 1201.05 L1353.12 1201.05 L1352.53 1201.05 L1351.95 1201.05 L1351.36 1201.05 L1350.77 1201.05 L1350.19 1201.05 L1349.6 1201.05 L1349.01 1201.05 L1348.43 1201.05 L1347.84 1201.05 L1347.26 1201.05 L1346.67 1201.05 L1346.08 1201.05 L1345.5 1201.05 L1344.91 1201.05 L1344.32 1201.05 L1343.74 1201.05 L1343.15 1201.05 L1342.56 1201.05 L1341.98 1201.05 L1341.39 1201.05 L1340.8 1201.05 L1340.22 1201.05 L1339.63 1201.05 L1339.05 1201.05 L1338.46 1201.05 L1337.87 1201.05 L1337.29 1201.05 L1336.7 1201.05 L1336.11 1201.05 L1335.53 1201.05 L1334.94 1201.05 L1334.35 1201.05 L1333.77 1201.05 L1333.18 1201.05 L1332.6 1201.05 L1332.01 1201.05 L1331.42 1201.05 L1330.84 1201.05 L1330.25 1201.05 L1329.66 1201.05 L1329.08 1201.05 L1328.49 1201.05 L1327.9 1201.05 L1327.32 1201.05 L1326.73 1201.05 L1326.14 1201.05 L1325.56 1201.05 L1324.97 1201.05 L1324.39 1201.05 L1323.8 1201.05 L1323.21 1201.05 L1322.63 1201.05 L1322.04 1201.05 L1321.45 1201.05 L1320.87 1201.05 L1320.28 1201.05 L1319.69 1201.05 L1319.11 1201.05 L1318.52 1201.05 L1317.93 1201.05 L1317.35 1201.05 L1316.76 1201.05 L1316.18 1201.05 L1315.59 1201.05 L1315 1201.05 L1314.42 1201.05 L1313.83 1201.05 L1313.24 1201.05 L1312.66 1201.05 L1312.07 1201.05 L1311.48 1201.05 L1310.9 1201.05 L1310.31 1201.05 L1309.73 1201.05 L1309.14 1201.05 L1308.55 1201.05 L1307.97 1201.05 L1307.38 1201.05 L1306.79 1201.05 L1306.21 1201.05 L1305.62 1201.05 L1305.03 1201.05 L1304.45 1201.05 L1303.86 1201.05 L1303.27 1201.05 L1302.69 1201.05 L1302.1 1201.05 L1301.52 1201.05 L1300.93 1201.05 L1300.34 1201.05 L1299.76 1201.05 L1299.17 1201.05 L1298.58 1201.05 L1298 1201.05 L1297.41 1201.05 L1296.82 1201.05 L1296.24 1201.05 L1295.65 1201.05 L1295.06 1201.05 L1294.48 1201.05 L1293.89 1201.05 L1293.31 1201.05 L1292.72 1201.05 L1292.13 1201.05 L1291.55 1201.05 L1290.96 1201.05 L1290.37 1201.05 L1289.79 1201.05 L1289.2 1201.05 L1288.61 1201.05 L1288.03 1201.05 L1287.44 1201.05 L1286.86 1201.05 L1286.27 1201.05 L1285.68 1201.05 L1285.1 1201.05 L1284.51 1201.05 L1283.92 1201.05 L1283.34 1201.05 L1282.75 1201.05 L1282.16 1201.05 L1281.58 1201.05 L1280.99 1201.05 L1280.4 1201.05 L1279.82 1201.05 L1279.23 1201.05 L1278.65 1201.05 L1278.06 1201.05 L1277.47 1201.05 L1276.89 1201.05 L1276.3 1201.05 L1275.71 1201.05 L1275.13 1201.05 L1274.54 1201.05 L1273.95 1201.05 L1273.37 1201.05 L1272.78 1201.05 L1272.19 1201.05 L1271.61 1201.05 L1271.02 1201.05 L1270.44 1201.05 L1269.85 1201.05 L1269.26 1201.05 L1268.68 1201.05 L1268.09 1201.05 L1267.5 1201.05 L1266.92 1201.05 L1266.33 1201.05 L1265.74 1201.05 L1265.16 1201.05 L1264.57 1201.05 L1263.98 1201.05 L1263.4 1201.05 L1262.81 1201.05 L1262.23 1201.05 L1261.64 1201.05 L1261.05 1201.05 L1260.47 1201.05 L1259.88 1201.05 L1259.29 1201.05 L1258.71 1201.05 L1258.12 1201.05 L1257.53 1201.05 L1256.95 1201.05 L1256.36 1201.05 L1255.78 1201.05 L1255.19 1201.05 L1254.6 1201.05 L1254.02 1201.05 L1253.43 1201.05 L1252.84 1201.05 L1252.26 1201.05 L1251.67 1201.05 L1251.08 1201.05 L1250.5 1201.05 L1249.91 1201.05 L1249.32 1201.05 L1248.74 1201.05 L1248.15 1201.05 L1247.57 1201.05 L1246.98 1201.05 L1246.39 1201.05 L1245.81 1201.05 L1245.22 1201.05 L1244.63 1201.05 L1244.05 1201.05 L1243.46 1201.05 L1242.87 1201.05 L1242.29 1201.05 L1241.7 1201.05 L1241.11 1201.05 L1240.53 1201.05 L1239.94 1201.05 L1239.36 1201.05 L1238.77 1201.05 L1238.18 1201.05 L1237.6 1201.05 L1237.01 1201.05 L1236.42 1201.05 L1235.84 1201.05 L1235.25 1201.05 L1234.66 1201.05 L1234.08 1201.05 L1233.49 1201.05 L1232.91 1201.05 L1232.32 1201.05 L1231.73 1201.05 L1231.15 1201.05 L1230.56 1201.05 L1229.97 1201.05 L1229.39 1201.05 L1228.8 1201.05 L1228.21 1201.05 L1227.63 1201.05 L1227.04 1201.05 L1226.45 1201.05 L1225.87 1201.05 L1225.28 1201.05 L1224.7 1201.05 L1224.11 1201.05 L1223.52 1201.05 L1222.94 1201.05 L1222.35 1201.05 L1221.76 1201.05 L1221.18 1201.05 L1220.59 1201.05 L1220 1201.05 L1219.42 1201.05 L1218.83 1201.05 L1218.24 1201.05 L1217.66 1201.05 L1217.07 1201.05 L1216.49 1201.05 L1215.9 1201.05 L1215.31 1201.05 L1214.73 1201.05 L1214.14 1201.05 L1213.55 1201.05 L1212.97 1201.05 L1212.38 1201.05 L1211.79 1201.05 L1211.21 1201.05 L1210.62 1201.05 L1210.03 1201.05 L1209.45 1201.05 L1208.86 1201.05 L1208.28 1201.05 L1207.69 1201.05 L1207.1 1201.05 L1206.52 1201.05 L1205.93 1201.05 L1205.34 1201.05 L1204.76 1201.05 L1204.17 1201.05 L1203.58 1201.05 L1203 1201.05 L1202.41 1201.05 L1201.83 1201.05 L1201.24 1201.05 L1200.65 1201.05 L1200.07 1201.05 L1199.48 1201.05 L1198.89 1201.05 L1198.31 1201.05 L1197.72 1201.05 L1197.13 1201.05 L1196.55 1201.05 L1195.96 1201.05 L1195.37 1201.05 L1194.79 1201.05 L1194.2 1201.05 L1193.62 1201.05 L1193.03 1201.05 L1192.44 1201.05 L1191.86 1201.05 L1191.27 1201.05 L1190.68 1201.05 L1190.1 1201.05 L1189.51 1201.05 L1188.92 1201.05 L1188.34 1201.05 L1187.75 1201.05 L1187.16 1201.05 L1186.58 1201.05 L1185.99 1201.05 L1185.41 1201.05 L1184.82 1201.05 L1184.23 1201.05 L1183.65 1201.05 L1183.06 1201.05 L1182.47 1201.05 L1181.89 1201.05 L1181.3 1201.05 L1180.71 1201.05 L1180.13 1201.05 L1179.54 1201.05 L1178.96 1201.05 L1178.37 1201.05 L1177.78 1201.05 L1177.2 1201.05 L1176.61 1201.05 L1176.02 1201.05 L1175.44 1201.05 L1174.85 1201.05 L1174.26 1201.05 L1173.68 1201.05 L1173.09 1201.05 L1172.5 1201.05 L1171.92 1201.05 L1171.33 1201.05 L1170.75 1201.05 L1170.16 1201.05 L1169.57 1201.05 L1168.99 1201.05 L1168.4 1201.05 L1167.81 1201.05 L1167.23 1201.05 L1166.64 1201.05 L1166.05 1201.05 L1165.47 1201.05 L1164.88 1201.05 L1164.29 1201.05 L1163.71 1201.05 L1163.12 1201.05 L1162.54 1201.05 L1161.95 1201.05 L1161.36 1201.05 L1160.78 1201.05 L1160.19 1201.05 L1159.6 1201.05 L1159.02 1201.05 L1158.43 1201.05 L1157.84 1201.05 L1157.26 1201.05 L1156.67 1201.05 L1156.09 1201.05 L1155.5 1201.05 L1154.91 1201.05 L1154.33 1201.05 L1153.74 1201.05 L1153.15 1201.05 L1152.57 1201.05 L1151.98 1201.05 L1151.39 1201.05 L1150.81 1201.05 L1150.22 1201.05 L1149.63 1201.05 L1149.05 1201.05 L1148.46 1201.05 L1147.88 1201.05 L1147.29 1201.05 L1146.7 1201.05 L1146.12 1201.05 L1145.53 1201.05 L1144.94 1201.05 L1144.36 1201.05 L1143.77 1201.05 L1143.18 1201.05 L1142.6 1201.05 L1142.01 1201.05 L1141.42 1201.05 L1140.84 1201.05 L1140.25 1201.05 L1139.67 1201.05 L1139.08 1201.05 L1138.49 1201.05 L1137.91 1201.05 L1137.32 1201.05 L1136.73 1201.05 L1136.15 1201.05 L1135.56 1201.05 L1134.97 1201.05 L1134.39 1201.05 L1133.8 1201.05 L1133.21 1201.05 L1132.63 1201.05 L1132.04 1201.05 L1131.46 1201.05 L1130.87 1201.05 L1130.28 1201.05 L1129.7 1201.05 L1129.11 1201.05 L1128.52 1201.05 L1127.94 1201.05 L1127.35 1201.05 L1126.76 1201.05 L1126.18 1201.05 L1125.59 1201.05 L1125.01 1201.05 L1124.42 1201.05 L1123.83 1201.05 L1123.25 1201.05 L1122.66 1201.05 L1122.07 1201.05 L1121.49 1201.05 L1120.9 1201.05 L1120.31 1201.05 L1119.73 1201.05 L1119.14 1201.05 L1118.55 1201.05 L1117.97 1201.05 L1117.38 1201.05 L1116.8 1201.05 L1116.21 1201.05 L1115.62 1201.05 L1115.04 1201.05 L1114.45 1201.05 L1113.86 1201.05 L1113.28 1201.05 L1112.69 1201.05 L1112.1 1201.05 L1111.52 1201.05 L1110.93 1201.05 L1110.34 1201.05 L1109.76 1201.05 L1109.17 1201.05 L1108.59 1201.05 L1108 1201.05 L1107.41 1201.05 L1106.83 1201.05 L1106.24 1201.05 L1105.65 1201.05 L1105.07 1201.05 L1104.48 1201.05 L1103.89 1201.05 L1103.31 1201.05 L1102.72 1201.05 L1102.14 1201.05 L1101.55 1201.05 L1100.96 1201.05 L1100.38 1201.05 L1099.79 1201.05 L1099.2 1201.05 L1098.62 1201.05 L1098.03 1201.05 L1097.44 1201.05 L1096.86 1201.05 L1096.27 1201.05 L1095.68 1201.05 L1095.1 1201.05 L1094.51 1201.05 L1093.93 1201.05 L1093.34 1201.05 L1092.75 1201.05 L1092.17 1201.05 L1091.58 1201.05 L1090.99 1201.05 L1090.41 1201.05 L1089.82 1201.05 L1089.23 1201.05 L1088.65 1201.05 L1088.06 1201.05 L1087.47 1201.05 L1086.89 1201.05 L1086.3 1201.05 L1085.72 1201.05 L1085.13 1201.05 L1084.54 1201.05 L1083.96 1201.05 L1083.37 1201.05 L1082.78 1201.05 L1082.2 1201.05 L1081.61 1201.05 L1081.02 1201.05 L1080.44 1201.05 L1079.85 1201.05 L1079.26 1201.05 L1078.68 1201.05 L1078.09 1201.05 L1077.51 1201.05 L1076.92 1201.05 L1076.33 1201.05 L1075.75 1201.05 L1075.16 1201.05 L1074.57 1201.05 L1073.99 1201.05 L1073.4 1201.05 L1072.81 1201.05 L1072.23 1201.05 L1071.64 1201.05 L1071.06 1201.05 L1070.47 1201.05 L1069.88 1201.05 L1069.3 1201.05 L1068.71 1201.05 L1068.12 1201.05 L1067.54 1201.05 L1066.95 1201.05 L1066.36 1201.05 L1065.78 1201.05 L1065.19 1201.05 L1064.6 1201.05 L1064.02 1201.05 L1063.43 1201.05 L1062.85 1201.05 L1062.26 1201.05 L1061.67 1201.05 L1061.09 1201.05 L1060.5 1201.05 L1059.91 1201.05 L1059.33 1201.05 L1058.74 1201.05 L1058.15 1201.05 L1057.57 1201.05 L1056.98 1201.05 L1056.39 1201.05 L1055.81 1201.05 L1055.22 1201.05 L1054.64 1201.05 L1054.05 1201.05 L1053.46 1201.05 L1052.88 1201.05 L1052.29 1201.05 L1051.7 1201.05 L1051.12 1201.05 L1050.53 1201.05 L1049.94 1201.05 L1049.36 1201.05 L1048.77 1201.05 L1048.19 1201.05 L1047.6 1201.05 L1047.01 1201.05 L1046.43 1201.05 L1045.84 1201.05 L1045.25 1201.05 L1044.67 1201.05 L1044.08 1201.05 L1043.49 1201.05 L1042.91 1201.05 L1042.32 1201.05 L1041.73 1201.05 L1041.15 1201.05 L1040.56 1201.05 L1039.98 1201.05 L1039.39 1201.05 L1038.8 1201.05 L1038.22 1201.05 L1037.63 1201.05 L1037.04 1201.05 L1036.46 1201.05 L1035.87 1201.05 L1035.28 1201.05 L1034.7 1201.05 L1034.11 1201.05 L1033.52 1201.05 L1032.94 1201.05 L1032.35 1201.05 L1031.77 1201.05 L1031.18 1201.05 L1030.59 1201.05 L1030.01 1201.05 L1029.42 1201.05 L1028.83 1201.05 L1028.25 1201.05 L1027.66 1201.05 L1027.07 1201.05 L1026.49 1201.05 L1025.9 1201.05 L1025.32 1201.05 L1024.73 1201.05 L1024.14 1201.05 L1023.56 1201.05 L1022.97 1201.05 L1022.38 1201.05 L1021.8 1201.05 L1021.21 1201.05 L1020.62 1201.05 L1020.04 1201.05 L1019.45 1201.05 L1018.86 1201.05 L1018.28 1201.05 L1017.69 1201.05 L1017.11 1201.05 L1016.52 1201.05 L1015.93 1201.05 L1015.35 1201.05 L1014.76 1201.05 L1014.17 1201.05 L1013.59 1201.05 L1013 1201.05 L1012.41 1201.05 L1011.83 1201.05 L1011.24 1201.05 L1010.65 1201.05 L1010.07 1201.05 L1009.48 1201.05 L1008.9 1201.05 L1008.31 1201.05 L1007.72 1201.05 L1007.14 1201.05 L1006.55 1201.05 L1005.96 1201.05 L1005.38 1201.05 L1004.79 1201.05 L1004.2 1201.05 L1003.62 1201.05 L1003.03 1201.05 L1002.44 1201.05 L1001.86 1201.05 L1001.27 1201.05 L1000.69 1201.05 L1000.1 1201.05 L999.513 1201.05 L998.926 1201.05 L998.34 1201.05 L997.754 1201.05 L997.167 1201.05 L996.581 1201.05 L995.994 1201.05 L995.408 1201.05 L994.822 1201.05 L994.235 1201.05 L993.649 1201.05 L993.062 1201.05 L992.476 1201.05 L991.889 1201.05 L991.303 1201.05 L990.717 1201.05 L990.13 1201.05 L989.544 1201.05 L988.957 1201.05 L988.371 1201.05 L987.785 1201.05 L987.198 1201.05 L986.612 1201.05 L986.025 1201.05  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1201.48 986.612,1201.48 987.198,1201.48 987.785,1201.48 988.371,1201.48 988.957,1201.48 989.544,1201.48 990.13,1201.48 990.717,1201.48 991.303,1201.48 991.889,1201.48 992.476,1201.48 993.062,1201.48 993.649,1201.48 994.235,1201.48 994.822,1201.48 995.408,1201.48 995.994,1201.48 996.581,1201.48 997.167,1201.48 997.754,1201.48 998.34,1201.48 998.926,1201.48 999.513,1201.48 1000.1,1201.48 1000.69,1201.48 1001.27,1201.48 1001.86,1201.48 1002.44,1201.48 1003.03,1201.48 1003.62,1201.48 1004.2,1201.48 1004.79,1201.48 1005.38,1201.48 1005.96,1201.48 1006.55,1201.48 1007.14,1201.48 1007.72,1201.48 1008.31,1201.48 1008.9,1201.48 1009.48,1201.48 1010.07,1201.48 1010.65,1201.48 1011.24,1201.48 1011.83,1201.48 1012.41,1201.48 1013,1201.48 1013.59,1201.48 1014.17,1201.48 1014.76,1201.48 1015.35,1201.48 1015.93,1201.48 1016.52,1201.48 1017.11,1201.48 1017.69,1201.48 1018.28,1201.48 1018.86,1201.48 1019.45,1201.48 1020.04,1201.48 1020.62,1201.48 1021.21,1201.48 1021.8,1201.48 1022.38,1201.48 1022.97,1201.48 1023.56,1201.48 1024.14,1201.48 1024.73,1201.48 1025.32,1201.48 1025.9,1201.48 1026.49,1201.48 1027.07,1201.48 1027.66,1201.48 1028.25,1201.48 1028.83,1201.48 1029.42,1201.48 1030.01,1201.48 1030.59,1201.48 1031.18,1201.48 1031.77,1201.48 1032.35,1201.48 1032.94,1201.48 1033.52,1201.48 1034.11,1201.48 1034.7,1201.48 1035.28,1201.48 1035.87,1201.48 1036.46,1201.48 1037.04,1201.48 1037.63,1201.48 1038.22,1201.48 1038.8,1201.48 1039.39,1201.48 1039.98,1201.48 1040.56,1201.48 1041.15,1201.48 1041.73,1201.48 1042.32,1201.48 1042.91,1201.48 1043.49,1201.48 1044.08,1201.48 1044.67,1201.48 1045.25,1201.48 1045.84,1201.48 1046.43,1201.48 1047.01,1201.48 1047.6,1201.48 1048.19,1201.48 1048.77,1201.48 1049.36,1201.48 1049.94,1201.48 1050.53,1201.48 1051.12,1201.48 1051.7,1201.48 1052.29,1201.48 1052.88,1201.48 1053.46,1201.48 1054.05,1201.48 1054.64,1201.48 1055.22,1201.48 1055.81,1201.48 1056.39,1201.48 1056.98,1201.48 1057.57,1201.48 1058.15,1201.48 1058.74,1201.48 1059.33,1201.48 1059.91,1201.48 1060.5,1201.48 1061.09,1201.48 1061.67,1201.48 1062.26,1201.48 1062.85,1201.48 1063.43,1201.48 1064.02,1201.48 1064.6,1201.48 1065.19,1201.48 1065.78,1201.48 1066.36,1201.48 1066.95,1201.48 1067.54,1201.48 1068.12,1201.48 1068.71,1201.48 1069.3,1201.48 1069.88,1201.48 1070.47,1201.48 1071.06,1201.48 1071.64,1201.48 1072.23,1201.48 1072.81,1201.48 1073.4,1201.48 1073.99,1201.48 1074.57,1201.48 1075.16,1201.48 1075.75,1201.48 1076.33,1201.48 1076.92,1201.48 1077.51,1201.48 1078.09,1201.48 1078.68,1201.48 1079.26,1201.48 1079.85,1201.48 1080.44,1201.48 1081.02,1201.48 1081.61,1201.48 1082.2,1201.48 1082.78,1201.48 1083.37,1201.48 1083.96,1201.48 1084.54,1201.48 1085.13,1201.48 1085.72,1201.48 1086.3,1201.48 1086.89,1201.48 1087.47,1201.48 1088.06,1201.48 1088.65,1201.48 1089.23,1201.48 1089.82,1201.48 1090.41,1201.48 1090.99,1201.48 1091.58,1201.48 1092.17,1201.48 1092.75,1201.48 1093.34,1201.48 1093.93,1201.48 1094.51,1201.48 1095.1,1201.48 1095.68,1201.48 1096.27,1201.48 1096.86,1201.48 1097.44,1201.48 1098.03,1201.48 1098.62,1201.48 1099.2,1201.48 1099.79,1201.48 1100.38,1201.48 1100.96,1201.48 1101.55,1201.48 1102.14,1201.48 1102.72,1201.48 1103.31,1201.48 1103.89,1201.48 1104.48,1201.48 1105.07,1201.48 1105.65,1201.48 1106.24,1201.48 1106.83,1201.48 1107.41,1201.48 1108,1201.48 1108.59,1201.48 1109.17,1201.48 1109.76,1201.48 1110.34,1201.48 1110.93,1201.48 1111.52,1201.48 1112.1,1201.48 1112.69,1201.48 1113.28,1201.48 1113.86,1201.48 1114.45,1201.48 1115.04,1201.48 1115.62,1201.48 1116.21,1201.48 1116.8,1201.48 1117.38,1201.48 1117.97,1201.48 1118.55,1201.48 1119.14,1201.48 1119.73,1201.48 1120.31,1201.48 1120.9,1201.48 1121.49,1201.48 1122.07,1201.48 1122.66,1201.48 1123.25,1201.48 1123.83,1201.48 1124.42,1201.48 1125.01,1201.48 1125.59,1201.48 1126.18,1201.48 1126.76,1201.48 1127.35,1201.48 1127.94,1201.48 1128.52,1201.48 1129.11,1201.48 1129.7,1201.48 1130.28,1201.48 1130.87,1201.48 1131.46,1201.48 1132.04,1201.48 1132.63,1201.48 1133.21,1201.48 1133.8,1201.48 1134.39,1201.48 1134.97,1201.48 1135.56,1201.48 1136.15,1201.48 1136.73,1201.48 1137.32,1201.48 1137.91,1201.48 1138.49,1201.48 1139.08,1201.48 1139.67,1201.48 1140.25,1201.48 1140.84,1201.48 1141.42,1201.48 1142.01,1201.48 1142.6,1201.48 1143.18,1201.48 1143.77,1201.48 1144.36,1201.48 1144.94,1201.48 1145.53,1201.48 1146.12,1201.48 1146.7,1201.48 1147.29,1201.48 1147.88,1201.48 1148.46,1201.48 1149.05,1201.48 1149.63,1201.48 1150.22,1201.48 1150.81,1201.48 1151.39,1201.48 1151.98,1201.48 1152.57,1201.48 1153.15,1201.48 1153.74,1201.48 1154.33,1201.48 1154.91,1201.48 1155.5,1201.48 1156.09,1201.48 1156.67,1201.48 1157.26,1201.48 1157.84,1201.48 1158.43,1201.48 1159.02,1201.48 1159.6,1201.48 1160.19,1201.48 1160.78,1201.48 1161.36,1201.48 1161.95,1201.48 1162.54,1201.48 1163.12,1201.48 1163.71,1201.48 1164.29,1201.48 1164.88,1201.48 1165.47,1201.48 1166.05,1201.48 1166.64,1201.48 1167.23,1201.48 1167.81,1201.48 1168.4,1201.48 1168.99,1201.48 1169.57,1201.48 1170.16,1201.48 1170.75,1201.48 1171.33,1201.48 1171.92,1201.48 1172.5,1201.48 1173.09,1201.48 1173.68,1201.48 1174.26,1201.48 1174.85,1201.48 1175.44,1201.48 1176.02,1201.48 1176.61,1201.48 1177.2,1201.48 1177.78,1201.48 1178.37,1201.48 1178.96,1201.48 1179.54,1201.48 1180.13,1201.48 1180.71,1201.48 1181.3,1201.48 1181.89,1201.48 1182.47,1201.48 1183.06,1201.48 1183.65,1201.48 1184.23,1201.48 1184.82,1201.48 1185.41,1201.48 1185.99,1201.48 1186.58,1201.48 1187.16,1201.48 1187.75,1201.48 1188.34,1201.48 1188.92,1201.48 1189.51,1201.48 1190.1,1201.48 1190.68,1201.48 1191.27,1201.48 1191.86,1201.48 1192.44,1201.48 1193.03,1201.48 1193.62,1201.48 1194.2,1201.48 1194.79,1201.48 1195.37,1201.48 1195.96,1201.48 1196.55,1201.48 1197.13,1201.48 1197.72,1201.48 1198.31,1201.48 1198.89,1201.48 1199.48,1201.48 1200.07,1201.48 1200.65,1201.48 1201.24,1201.48 1201.83,1201.48 1202.41,1201.48 1203,1201.48 1203.58,1201.48 1204.17,1201.48 1204.76,1201.48 1205.34,1201.48 1205.93,1201.48 1206.52,1201.48 1207.1,1201.48 1207.69,1201.48 1208.28,1201.48 1208.86,1201.48 1209.45,1201.48 1210.03,1201.48 1210.62,1201.48 1211.21,1201.48 1211.79,1201.48 1212.38,1201.48 1212.97,1201.48 1213.55,1201.48 1214.14,1201.48 1214.73,1201.48 1215.31,1201.48 1215.9,1201.48 1216.49,1201.48 1217.07,1201.48 1217.66,1201.48 1218.24,1201.48 1218.83,1201.48 1219.42,1201.48 1220,1201.48 1220.59,1201.48 1221.18,1201.48 1221.76,1201.48 1222.35,1201.48 1222.94,1201.48 1223.52,1201.48 1224.11,1201.48 1224.7,1201.48 1225.28,1201.48 1225.87,1201.48 1226.45,1201.48 1227.04,1201.48 1227.63,1201.48 1228.21,1201.48 1228.8,1201.48 1229.39,1201.48 1229.97,1201.48 1230.56,1201.48 1231.15,1201.48 1231.73,1201.48 1232.32,1201.48 1232.91,1201.48 1233.49,1201.48 1234.08,1201.48 1234.66,1201.48 1235.25,1201.48 1235.84,1201.48 1236.42,1201.48 1237.01,1201.48 1237.6,1201.48 1238.18,1201.48 1238.77,1201.48 1239.36,1201.48 1239.94,1201.48 1240.53,1201.48 1241.11,1201.48 1241.7,1201.48 1242.29,1201.48 1242.87,1201.48 1243.46,1201.48 1244.05,1201.48 1244.63,1201.48 1245.22,1201.48 1245.81,1201.48 1246.39,1201.48 1246.98,1201.48 1247.57,1201.48 1248.15,1201.48 1248.74,1201.48 1249.32,1201.48 1249.91,1201.48 1250.5,1201.48 1251.08,1201.48 1251.67,1201.48 1252.26,1201.48 1252.84,1201.48 1253.43,1201.48 1254.02,1201.48 1254.6,1201.48 1255.19,1201.48 1255.78,1201.48 1256.36,1201.48 1256.95,1201.48 1257.53,1201.48 1258.12,1201.48 1258.71,1201.48 1259.29,1201.48 1259.88,1201.48 1260.47,1201.48 1261.05,1201.48 1261.64,1201.48 1262.23,1201.48 1262.81,1201.48 1263.4,1201.48 1263.98,1201.48 1264.57,1201.48 1265.16,1201.48 1265.74,1201.48 1266.33,1201.48 1266.92,1201.48 1267.5,1201.48 1268.09,1201.48 1268.68,1201.48 1269.26,1201.48 1269.85,1201.48 1270.44,1201.48 1271.02,1201.48 1271.61,1201.48 1272.19,1201.48 1272.78,1201.48 1273.37,1201.48 1273.95,1201.48 1274.54,1201.48 1275.13,1201.48 1275.71,1201.48 1276.3,1201.48 1276.89,1201.48 1277.47,1201.48 1278.06,1201.48 1278.65,1201.48 1279.23,1201.48 1279.82,1201.48 1280.4,1201.48 1280.99,1201.48 1281.58,1201.48 1282.16,1201.48 1282.75,1201.48 1283.34,1201.48 1283.92,1201.48 1284.51,1201.48 1285.1,1201.48 1285.68,1201.48 1286.27,1201.48 1286.86,1201.48 1287.44,1201.48 1288.03,1201.48 1288.61,1201.48 1289.2,1201.48 1289.79,1201.48 1290.37,1201.48 1290.96,1201.48 1291.55,1201.48 1292.13,1201.48 1292.72,1201.48 1293.31,1201.48 1293.89,1201.48 1294.48,1201.48 1295.06,1201.48 1295.65,1201.48 1296.24,1201.48 1296.82,1201.48 1297.41,1201.48 1298,1201.48 1298.58,1201.48 1299.17,1201.48 1299.76,1201.48 1300.34,1201.48 1300.93,1201.48 1301.52,1201.48 1302.1,1201.48 1302.69,1201.48 1303.27,1201.48 1303.86,1201.48 1304.45,1201.48 1305.03,1201.48 1305.62,1201.48 1306.21,1201.48 1306.79,1201.48 1307.38,1201.48 1307.97,1201.48 1308.55,1201.48 1309.14,1201.48 1309.73,1201.48 1310.31,1201.48 1310.9,1201.48 1311.48,1201.48 1312.07,1201.48 1312.66,1201.48 1313.24,1201.48 1313.83,1201.48 1314.42,1201.48 1315,1201.48 1315.59,1201.48 1316.18,1201.48 1316.76,1201.48 1317.35,1201.48 1317.93,1201.48 1318.52,1201.48 1319.11,1201.48 1319.69,1201.48 1320.28,1201.48 1320.87,1201.48 1321.45,1201.48 1322.04,1201.48 1322.63,1201.48 1323.21,1201.48 1323.8,1201.48 1324.39,1201.48 1324.97,1201.48 1325.56,1201.48 1326.14,1201.48 1326.73,1201.48 1327.32,1201.48 1327.9,1201.48 1328.49,1201.48 1329.08,1201.48 1329.66,1201.48 1330.25,1201.48 1330.84,1201.48 1331.42,1201.48 1332.01,1201.48 1332.6,1201.48 1333.18,1201.48 1333.77,1201.48 1334.35,1201.48 1334.94,1201.48 1335.53,1201.48 1336.11,1201.48 1336.7,1201.48 1337.29,1201.48 1337.87,1201.48 1338.46,1201.48 1339.05,1201.48 1339.63,1201.48 1340.22,1201.48 1340.8,1201.48 1341.39,1201.48 1341.98,1201.48 1342.56,1201.48 1343.15,1201.48 1343.74,1201.48 1344.32,1201.48 1344.91,1201.48 1345.5,1201.48 1346.08,1201.48 1346.67,1201.48 1347.26,1201.48 1347.84,1201.48 1348.43,1201.48 1349.01,1201.48 1349.6,1201.48 1350.19,1201.48 1350.77,1201.48 1351.36,1201.48 1351.95,1201.48 1352.53,1201.48 1353.12,1201.48 1353.71,1201.48 1354.29,1201.48 1354.88,1201.48 1355.47,1201.48 1356.05,1201.48 1356.64,1201.48 1357.22,1201.48 1357.81,1201.48 1358.4,1201.48 1358.98,1201.48 1359.57,1201.48 1360.16,1201.48 1360.74,1201.48 1361.33,1201.48 1361.92,1201.48 1362.5,1201.48 1363.09,1201.48 1363.68,1201.48 1364.26,1201.48 1364.85,1201.48 1365.43,1201.48 1366.02,1201.48 1366.61,1201.48 1367.19,1201.48 1367.78,1201.48 1368.37,1201.48 1368.95,1201.48 1369.54,1201.48 1370.13,1201.48 1370.71,1201.48 1371.3,1201.48 1371.88,1201.48 1372.47,1201.48 1373.06,1201.48 1373.64,1201.48 1374.23,1201.48 1374.82,1201.48 1375.4,1201.48 1375.99,1201.48 1376.58,1201.48 1377.16,1201.48 1377.75,1201.48 1378.34,1201.48 1378.92,1201.48 1379.51,1201.48 1380.09,1201.48 1380.68,1201.48 1381.27,1201.48 1381.85,1201.48 1382.44,1201.48 1383.03,1201.48 1383.61,1201.48 1384.2,1201.48 1384.79,1201.48 1385.37,1201.48 1385.96,1201.48 1386.55,1201.48 1387.13,1201.48 1387.72,1201.48 1388.3,1201.48 1388.89,1201.48 1389.48,1201.48 1390.06,1201.48 1390.65,1201.48 1391.24,1201.48 1391.82,1201.48 1392.41,1201.48 1393,1201.48 1393.58,1201.48 1394.17,1201.48 1394.75,1201.48 1395.34,1201.48 1395.93,1201.48 1396.51,1201.48 1397.1,1201.48 1397.69,1201.48 1398.27,1201.48 1398.86,1201.48 1399.45,1201.48 1400.03,1201.48 1400.62,1201.48 1401.21,1201.48 1401.79,1201.48 1402.38,1201.48 1402.96,1201.48 1403.55,1201.48 1404.14,1201.48 1404.72,1201.48 1405.31,1201.48 1405.9,1201.48 1406.48,1201.48 1407.07,1201.48 1407.66,1201.48 1408.24,1201.48 1408.83,1201.48 1409.42,1201.48 1410,1201.48 1410.59,1201.48 1411.17,1201.48 1411.76,1201.48 1412.35,1201.48 1412.93,1201.48 1413.52,1201.48 1414.11,1201.48 1414.69,1201.48 1415.28,1201.48 1415.87,1201.48 1416.45,1201.48 1417.04,1201.48 1417.63,1201.48 1418.21,1201.48 1418.8,1201.48 1419.38,1201.48 1419.97,1201.48 1420.56,1201.48 1421.14,1201.48 1421.73,1201.48 1422.32,1201.48 1422.9,1201.48 1423.49,1201.48 1424.08,1201.48 1424.66,1201.48 1425.25,1201.48 1425.83,1201.48 1426.42,1201.48 1427.01,1201.48 1427.59,1201.48 1428.18,1201.48 1428.77,1201.48 1429.35,1201.48 1429.94,1201.48 1430.53,1201.48 1431.11,1201.48 1431.7,1201.48 1432.29,1201.48 1432.87,1201.48 1433.46,1201.48 1434.04,1201.48 1434.63,1201.48 1435.22,1201.48 1435.8,1201.48 1436.39,1201.48 1436.98,1201.48 1437.56,1201.48 1438.15,1201.48 1438.74,1201.48 1439.32,1201.48 1439.91,1201.48 1440.5,1201.48 1441.08,1201.48 1441.67,1201.48 1442.25,1201.48 1442.84,1201.48 1443.43,1201.48 1444.01,1201.48 1444.6,1201.48 1445.19,1201.48 1445.77,1201.48 1446.36,1201.48 1446.95,1201.48 1447.53,1201.48 1448.12,1201.48 1448.7,1201.48 1449.29,1201.48 1449.88,1201.48 1450.46,1201.48 1451.05,1201.48 1451.64,1201.48 1452.22,1201.48 1452.81,1201.48 1453.4,1201.48 1453.98,1201.48 1454.57,1201.48 1455.16,1201.48 1455.74,1201.48 1456.33,1201.48 1456.91,1201.48 1457.5,1201.48 1458.09,1201.48 1458.67,1201.48 1459.26,1201.48 1459.85,1201.48 1460.43,1201.48 1461.02,1201.48 1461.61,1201.48 1462.19,1201.48 1462.78,1201.48 1463.37,1201.48 1463.95,1201.48 1464.54,1201.48 1465.12,1201.48 1465.71,1201.48 1466.3,1201.48 1466.88,1201.48 1467.47,1201.48 1468.06,1201.48 1468.64,1201.48 1469.23,1201.48 1469.82,1201.48 1470.4,1201.48 1470.99,1201.48 1471.57,1201.48 1472.16,1201.48 1472.75,1201.48 1473.33,1201.48 1473.92,1201.48 1474.51,1201.48 1475.09,1201.48 1475.68,1201.48 1476.27,1201.48 1476.85,1201.48 1477.44,1201.48 1478.03,1201.48 1478.61,1201.48 1479.2,1201.48 1479.78,1201.48 1480.37,1201.48 1480.96,1201.48 1481.54,1201.48 1482.13,1201.48 1482.72,1201.48 1483.3,1201.48 1483.89,1201.48 1484.48,1201.48 1485.06,1201.48 1485.65,1201.48 1486.24,1201.48 1486.82,1201.48 1487.41,1201.48 1487.99,1201.48 1488.58,1201.48 1489.17,1201.48 1489.75,1201.48 1490.34,1201.48 1490.93,1201.48 1491.51,1201.48 1492.1,1201.48 1492.69,1201.48 1493.27,1201.48 1493.86,1201.48 1494.45,1201.48 1495.03,1201.48 1495.62,1201.48 1496.2,1201.48 1496.79,1201.48 1497.38,1201.48 1497.96,1201.48 1498.55,1201.48 1499.14,1201.48 1499.72,1201.48 1500.31,1201.48 1500.9,1201.48 1501.48,1201.48 1502.07,1201.48 1502.65,1201.48 1503.24,1201.48 1503.83,1201.48 1504.41,1201.48 1505,1201.48 1505.59,1201.48 1506.17,1201.48 1506.76,1201.48 1507.35,1201.48 1507.93,1201.48 1508.52,1201.48 1509.11,1201.48 1509.69,1201.48 1510.28,1201.48 1510.86,1201.48 1511.45,1201.48 1512.04,1201.48 1512.62,1201.48 1513.21,1201.48 1513.8,1201.48 1514.38,1201.48 1514.97,1201.48 1515.56,1201.48 1516.14,1201.48 1516.73,1201.48 1517.32,1201.48 1517.9,1201.48 1518.49,1201.48 1519.07,1201.48 1519.66,1201.48 1520.25,1201.48 1520.83,1201.48 1521.42,1201.48 1522.01,1201.48 1522.59,1201.48 1523.18,1201.48 1523.77,1201.48 1524.35,1201.48 1524.94,1201.48 1525.52,1201.48 1526.11,1201.48 1526.7,1201.48 1527.28,1201.48 1527.87,1201.48 1528.46,1201.48 1529.04,1201.48 1529.63,1201.48 1530.22,1201.48 1530.8,1201.48 1531.39,1201.48 1531.98,1201.48 1532.56,1201.48 1533.15,1201.48 1533.73,1201.48 1534.32,1201.48 1534.91,1201.48 1535.49,1201.48 1536.08,1201.48 1536.67,1201.48 1537.25,1201.48 1537.84,1201.48 1538.43,1201.48 1539.01,1201.48 1539.6,1201.48 1540.19,1201.48 1540.77,1201.48 1541.36,1201.48 1541.94,1201.48 1542.53,1201.48 1543.12,1201.48 1543.7,1201.48 1544.29,1201.48 1544.88,1201.48 1545.46,1201.48 1546.05,1201.48 1546.64,1201.48 1547.22,1201.48 1547.81,1201.48 1548.4,1201.48 1548.98,1201.48 1549.57,1201.48 1550.15,1201.48 1550.74,1201.48 1551.33,1201.48 1551.91,1201.48 1552.5,1201.48 1553.09,1201.48 1553.67,1201.48 1554.26,1201.48 1554.85,1201.48 1555.43,1201.48 1556.02,1201.48 1556.6,1201.48 1557.19,1201.48 1557.78,1201.48 1558.36,1201.48 1558.95,1201.48 1559.54,1201.48 1560.12,1201.48 1560.71,1201.48 1561.3,1201.48 1561.88,1201.48 1562.47,1201.48 1563.06,1201.48 1563.64,1201.48 1564.23,1201.48 1564.81,1201.48 1565.4,1201.48 1565.99,1201.48 1566.57,1201.48 1567.16,1201.48 1567.75,1201.48 1568.33,1201.48 1568.92,1201.48 1569.51,1201.48 1570.09,1201.48 1570.68,1201.48 1571.27,1201.48 1571.85,1201.48 1572.44,1201.48 1573.02,1201.48 1573.61,1201.48 1574.2,1201.48 1574.78,1201.48 1575.37,1201.48 1575.96,1201.48 1576.54,1201.48 1577.13,1201.48 1577.72,1201.48 1578.3,1201.48 1578.89,1201.48 1579.47,1201.48 1580.06,1201.48 1580.65,1201.48 1581.23,1201.48 1581.82,1201.48 1582.41,1201.48 1582.99,1201.48 1583.58,1201.48 1584.17,1201.48 1584.75,1201.48 1585.34,1201.48 1585.93,1201.48 1586.51,1201.48 1587.1,1201.48 1587.68,1201.48 1588.27,1201.48 1588.86,1201.48 1589.44,1201.48 1590.03,1201.48 1590.62,1201.48 1591.2,1201.48 1591.79,1201.48 1592.38,1201.48 1592.96,1201.48 1593.55,1201.48 1594.14,1201.48 1594.72,1201.48 1595.31,1201.48 1595.89,1201.48 1596.48,1201.48 1597.07,1201.48 1597.65,1201.48 1598.24,1201.48 1598.83,1201.48 1599.41,1201.48 1600,1201.48 1600.59,1201.48 1601.17,1201.48 1601.76,1201.48 1602.34,1201.48 1602.93,1201.48 1603.52,1201.48 1604.1,1201.48 1604.69,1201.48 1605.28,1201.48 1605.86,1201.48 1606.45,1201.48 1607.04,1201.48 1607.62,1201.48 1608.21,1201.48 1608.8,1201.48 1609.38,1201.48 1609.97,1201.48 1610.55,1201.48 1611.14,1201.48 1611.73,1201.48 1612.31,1201.48 1612.9,1201.48 1613.49,1201.48 1614.07,1201.48 1614.66,1201.48 1615.25,1201.48 1615.83,1201.48 1616.42,1201.48 1617.01,1201.48 1617.59,1201.48 1618.18,1201.48 1618.76,1201.48 1619.35,1201.48 1619.94,1201.48 1620.52,1201.48 1621.11,1201.48 1621.7,1201.48 1622.28,1201.48 1622.87,1201.48 1623.46,1201.48 1624.04,1201.48 1624.63,1201.48 1625.22,1201.48 1625.8,1201.48 1626.39,1201.48 1626.97,1201.48 1627.56,1201.48 1628.15,1201.48 1628.73,1201.48 1629.32,1201.48 1629.91,1201.48 1630.49,1201.48 1631.08,1201.48 1631.67,1201.48 1632.25,1201.48 1632.84,1201.48 1633.42,1201.48 1634.01,1201.48 1634.6,1201.48 1635.18,1201.48 1635.77,1201.48 1636.36,1201.48 1636.94,1201.48 1637.53,1201.48 1638.12,1201.48 1638.7,1201.48 1639.29,1201.48 1639.88,1201.48 1640.46,1201.48 1641.05,1201.48 1641.63,1201.48 1642.22,1201.48 1642.81,1201.48 1643.39,1201.48 1643.98,1201.48 1644.57,1201.48 1645.15,1201.48 1645.74,1201.48 1646.33,1201.48 1646.91,1201.48 1647.5,1201.48 1648.09,1201.48 1648.67,1201.48 1649.26,1201.48 1649.84,1201.48 1650.43,1201.48 1651.02,1201.48 1651.6,1201.48 1652.19,1201.48 1652.78,1201.48 1653.36,1201.48 1653.95,1201.48 1654.54,1201.48 1655.12,1201.48 1655.71,1201.48 1656.29,1201.48 1656.88,1201.48 1657.47,1201.48 1658.05,1201.48 1658.64,1201.48 1659.23,1201.48 1659.81,1201.48 1660.4,1201.48 1660.99,1201.48 1661.57,1201.48 1662.16,1201.48 1662.75,1201.48 1663.33,1201.48 1663.92,1201.48 1664.5,1201.48 1665.09,1201.48 1665.68,1201.48 1666.26,1201.48 1666.85,1201.48 1667.44,1201.48 1668.02,1201.48 1668.61,1201.48 1669.2,1201.48 1669.78,1201.48 1670.37,1201.48 1670.96,1201.48 1671.54,1201.48 1672.13,1201.48 1672.71,1201.48 1673.3,1201.48 1673.89,1201.48 1674.47,1201.48 1675.06,1201.48 1675.65,1201.48 1676.23,1201.48 1676.82,1201.48 1677.41,1201.48 1677.99,1201.48 1678.58,1201.48 1679.17,1201.48 1679.75,1201.48 1680.34,1201.48 1680.92,1201.48 1681.51,1201.48 1682.1,1201.48 1682.68,1201.48 1683.27,1201.48 1683.86,1201.48 1684.44,1201.48 1685.03,1201.48 1685.62,1201.48 1686.2,1201.48 1686.79,1201.48 1687.37,1201.48 1687.96,1201.48 1688.55,1201.48 1689.13,1201.48 1689.72,1201.48 1690.31,1201.48 1690.89,1201.48 1691.48,1201.48 1692.07,1201.48 1692.65,1201.48 1693.24,1201.48 1693.83,1201.48 1694.41,1201.48 1695,1201.48 1695.58,1201.48 1696.17,1201.48 1696.76,1201.48 1697.34,1201.48 1697.93,1201.48 1698.52,1201.48 1699.1,1201.48 1699.69,1201.48 1700.28,1201.48 1700.86,1201.48 1701.45,1201.48 1702.04,1201.48 1702.62,1201.48 1703.21,1201.48 1703.79,1201.48 1704.38,1201.48 1704.97,1201.48 1705.55,1201.48 1706.14,1201.48 1706.73,1201.48 1707.31,1201.48 1707.9,1201.48 1708.49,1201.48 1709.07,1201.48 1709.66,1201.48 1710.24,1201.48 1710.83,1201.48 1711.42,1201.48 1712,1201.48 1712.59,1201.48 1713.18,1201.48 1713.76,1201.48 1714.35,1201.48 1714.94,1201.48 1715.52,1201.48 1716.11,1201.48 1716.7,1201.48 1717.28,1201.48 1717.87,1201.48 1718.45,1201.48 1719.04,1201.48 1719.63,1201.48 1720.21,1201.48 1720.8,1201.48 1721.39,1201.48 1721.97,1201.48 1722.56,1201.48 1723.15,1201.48 1723.73,1201.48 1724.32,1201.48 1724.91,1201.48 1725.49,1201.48 1726.08,1201.48 1726.66,1201.48 1727.25,1201.48 1727.84,1201.48 1728.42,1201.48 1729.01,1201.48 1729.6,1201.48 1730.18,1201.48 1730.77,1201.48 1731.36,1201.48 1731.94,1201.48 1732.53,1201.48 1733.11,1201.48 1733.7,1201.48 1734.29,1201.48 1734.87,1201.48 1735.46,1201.48 1736.05,1201.48 1736.63,1201.48 1737.22,1201.48 1737.81,1201.48 1738.39,1201.48 1738.98,1201.48 1739.57,1201.48 1740.15,1201.48 1740.74,1201.48 1741.32,1201.48 1741.91,1201.48 1742.5,1201.48 1743.08,1201.48 1743.67,1201.48 1744.26,1201.48 1744.84,1201.48 1745.43,1201.48 1746.02,1201.48 1746.6,1201.48 1747.19,1201.48 1747.78,1201.48 1748.36,1201.48 1748.95,1201.48 1749.53,1201.48 1750.12,1201.48 1750.71,1201.48 1751.29,1201.48 1751.88,1201.48 1752.47,1201.48 1753.05,1201.48 1753.64,1201.48 1754.23,1201.48 1754.81,1201.48 1755.4,1201.48 1755.99,1201.48 1756.57,1201.48 1757.16,1201.48 1757.74,1201.48 1758.33,1201.48 1758.92,1201.48 1759.5,1201.48 1760.09,1201.48 1760.68,1201.48 1761.26,1201.48 1761.85,1201.48 1762.44,1201.48 1763.02,1201.48 1763.61,1201.48 1764.19,1201.48 1764.78,1201.48 1765.37,1201.48 1765.95,1201.48 1766.54,1201.48 1767.13,1201.48 1767.71,1201.48 1768.3,1201.48 1768.89,1201.48 1769.47,1201.48 1770.06,1201.48 1770.65,1201.48 1771.23,1201.48 1771.82,1201.48 1772.4,1201.48 1772.99,1201.48 1773.58,1201.48 1774.16,1201.48 1774.75,1201.48 1775.34,1201.48 1775.92,1201.48 1776.51,1201.48 1777.1,1201.48 1777.68,1201.48 1778.27,1201.48 1778.86,1201.48 1779.44,1201.48 1780.03,1201.48 1780.61,1201.48 1781.2,1201.48 1781.79,1201.48 1782.37,1201.48 1782.96,1201.48 1783.55,1201.48 1784.13,1201.48 1784.72,1201.48 1785.31,1201.48 1785.89,1201.48 1786.48,1201.48 1787.06,1201.48 1787.65,1201.48 1788.24,1201.48 1788.82,1201.48 1789.41,1201.48 1790,1201.48 1790.58,1201.48 1791.17,1201.48 1791.76,1201.48 1792.34,1201.48 1792.93,1201.48 1793.52,1201.48 1794.1,1201.48 1794.69,1201.48 1795.27,1201.48 1795.86,1201.48 1796.45,1201.48 1797.03,1201.48 1797.62,1201.48 1798.21,1201.48 1798.79,1201.48 1799.38,1201.48 1799.97,1201.48 1800.55,1201.48 1801.14,1201.48 1801.73,1201.48 1802.31,1201.48 1802.9,1201.48 1803.48,1201.48 1804.07,1201.48 1804.66,1201.48 1805.24,1201.48 1805.83,1201.48 1806.42,1201.48 1807,1201.48 1807.59,1201.48 1808.18,1201.48 1808.76,1201.48 1809.35,1201.48 1809.94,1201.48 1810.52,1201.48 1811.11,1201.48 1811.69,1201.48 1812.28,1201.48 1812.87,1201.48 1813.45,1201.48 1814.04,1201.48 1814.63,1201.48 1815.21,1201.48 1815.8,1201.48 1816.39,1201.48 1816.97,1201.48 1817.56,1201.48 1818.14,1201.48 1818.73,1201.48 1819.32,1201.48 1819.9,1201.48 1820.49,1201.48 1821.08,1201.48 1821.66,1201.48 1822.25,1201.48 1822.84,1201.48 1823.42,1201.48 1824.01,1201.48 1824.6,1201.48 1825.18,1201.48 1825.77,1201.48 1826.35,1201.48 1826.94,1201.48 1827.53,1201.48 1828.11,1201.48 1828.7,1201.48 1829.29,1201.48 1829.87,1201.48 1830.46,1201.48 1831.05,1201.48 1831.63,1201.48 1832.22,1201.48 1832.81,1201.48 1833.39,1201.48 1833.98,1201.48 1834.56,1201.48 1835.15,1201.48 1835.74,1201.48 1836.32,1201.48 1836.91,1201.48 1837.5,1201.48 1838.08,1201.48 1838.67,1201.48 1839.26,1201.48 1839.84,1201.48 1840.43,1201.48 1841.01,1201.48 1841.6,1201.48 1842.19,1201.48 1842.77,1201.48 1843.36,1201.48 1843.95,1201.48 1844.53,1201.48 1845.12,1201.48 1845.71,1201.48 1846.29,1201.48 1846.88,1201.48 1847.47,1201.48 1848.05,1201.48 1848.64,1201.48 1849.22,1201.48 1849.81,1201.48 1850.4,1201.48 1850.98,1201.48 1851.57,1201.48 1852.16,1201.48 1852.74,1201.48 1853.33,1201.48 1853.92,1201.48 1854.5,1201.48 1855.09,1201.48 1855.68,1201.48 1856.26,1201.48 1856.85,1201.48 1857.43,1201.48 1858.02,1201.48 1858.61,1201.48 1859.19,1201.48 1859.78,1201.48 1860.37,1201.48 1860.95,1201.48 1861.54,1201.48 1862.13,1201.48 1862.71,1201.48 1863.3,1201.48 1863.88,1201.48 1864.47,1201.48 1865.06,1201.48 1865.64,1201.48 1866.23,1201.48 1866.82,1201.48 1867.4,1201.48 1867.99,1201.48 1868.58,1201.48 1869.16,1201.48 1869.75,1201.48 1870.34,1201.48 1870.92,1201.48 1871.51,1201.48 1872.09,1201.48 1872.68,1201.48 1873.27,1201.48 1873.85,1201.48 1874.44,1201.48 1875.03,1201.48 1875.61,1201.48 1876.2,1201.48 1876.79,1201.48 1877.37,1201.48 1877.96,1201.48 1878.55,1201.48 1879.13,1201.48 1879.72,1201.48 1880.3,1201.48 1880.89,1201.48 1881.48,1201.48 1882.06,1201.48 1882.65,1201.48 1883.24,1201.48 1883.82,1201.48 1884.41,1201.48 1885,1201.48 1885.58,1201.48 1886.17,1201.48 1886.76,1201.48 1887.34,1201.48 1887.93,1201.48 1888.51,1201.48 1889.1,1201.48 1889.69,1201.48 1890.27,1201.48 1890.86,1201.48 1891.45,1201.48 1892.03,1201.48 1892.62,1201.48 1893.21,1201.48 1893.79,1201.48 1894.38,1201.48 1894.96,1201.48 1895.55,1201.48 1896.14,1201.48 1896.72,1201.48 1897.31,1201.48 1897.9,1201.48 1898.48,1201.48 1899.07,1201.48 1899.66,1201.48 1900.24,1201.48 1900.83,1201.48 1901.42,1201.48 1902,1201.48 1902.59,1201.48 1903.17,1201.48 1903.76,1201.48 1904.35,1201.48 1904.93,1201.48 1905.52,1201.48 1906.11,1201.48 1906.69,1201.48 1907.28,1201.48 1907.87,1201.48 1908.45,1201.48 1909.04,1201.48 1909.63,1201.48 1910.21,1201.48 1910.8,1201.48 1911.38,1201.48 1911.97,1201.48 1912.56,1201.48 1913.14,1201.48 1913.73,1201.48 1914.32,1201.48 1914.9,1201.48 1915.49,1201.48 1916.08,1201.48 1916.66,1201.48 1917.25,1201.48 1917.83,1201.48 1918.42,1201.48 1919.01,1201.48 1919.59,1201.48 1920.18,1201.48 1920.77,1201.48 1921.35,1201.48 1921.94,1201.48 1922.53,1201.48 1923.11,1201.48 1923.7,1201.48 1924.29,1201.48 1924.87,1201.48 1925.46,1201.48 1926.04,1201.48 1926.63,1201.48 1927.22,1201.48 1927.8,1201.48 1928.39,1201.48 1928.98,1201.48 1929.56,1201.48 1930.15,1201.48 1930.74,1201.48 1931.32,1201.48 1931.91,1201.48 1932.5,1201.48 1933.08,1201.48 1933.67,1201.48 1934.25,1201.48 1934.84,1201.48 1935.43,1201.48 1936.01,1201.48 1936.6,1201.48 1937.19,1201.48 1937.77,1201.48 1938.36,1201.48 1938.95,1201.48 1939.53,1201.48 1940.12,1201.48 1940.71,1201.48 1941.29,1201.48 1941.88,1201.48 1942.46,1201.48 1943.05,1201.48 1943.64,1201.48 1944.22,1201.48 1944.81,1201.48 1945.4,1201.48 1945.98,1201.48 1946.57,1201.48 1947.16,1201.48 1947.74,1201.48 1948.33,1201.48 1948.91,1201.48 1949.5,1201.48 1950.09,1201.48 1950.67,1201.48 1951.26,1201.48 1951.85,1201.48 1952.43,1201.48 1953.02,1201.48 1953.61,1201.48 1954.19,1201.48 1954.78,1201.48 1955.37,1201.48 1955.95,1201.48 1956.54,1201.48 1957.12,1201.48 1957.71,1201.48 1958.3,1201.48 1958.88,1201.48 1959.47,1201.48 1960.06,1201.48 1960.64,1201.48 1961.23,1201.48 1961.82,1201.48 1962.4,1201.48 1962.99,1201.48 1963.58,1201.48 1964.16,1201.48 1964.75,1201.48 1965.33,1201.48 1965.92,1201.48 1966.51,1201.48 1967.09,1201.48 1967.68,1201.48 1968.27,1201.48 1968.85,1201.48 1969.44,1201.48 1970.03,1201.48 1970.61,1201.48 1971.2,1201.48 1971.78,1201.48 1972.37,1201.48 1972.96,1201.48 1973.54,1201.48 1974.13,1201.48 1974.72,1201.48 1975.3,1201.48 1975.89,1201.48 1976.48,1201.48 1977.06,1201.48 1977.65,1201.48 1978.24,1201.48 1978.82,1201.48 1979.41,1201.48 1979.99,1201.48 1980.58,1201.48 1981.17,1201.48 1981.75,1201.48 1982.34,1201.48 1982.93,1201.48 1983.51,1201.48 1984.1,1201.48 1984.69,1201.48 1985.27,1201.48 1985.86,1201.48 1986.45,1201.48 1987.03,1201.48 1987.62,1201.48 1988.2,1201.48 1988.79,1201.48 1989.38,1201.48 1989.96,1201.48 1990.55,1201.48 1991.14,1201.48 1991.72,1201.48 1992.31,1201.48 1992.9,1201.48 1993.48,1201.48 1994.07,1201.48 1994.65,1201.48 1995.24,1201.48 1995.83,1201.48 1996.41,1201.48 1997,1201.48 1997.59,1201.48 1998.17,1201.48 1998.76,1201.48 1999.35,1201.48 1999.93,1201.48 2000.52,1201.48 2001.11,1201.48 2001.69,1201.48 2002.28,1201.48 2002.86,1201.48 2003.45,1201.48 2004.04,1201.48 2004.62,1201.48 2005.21,1201.48 2005.8,1201.48 2006.38,1201.48 2006.97,1201.48 2007.56,1201.48 2008.14,1201.48 2008.73,1201.48 2009.32,1201.48 2009.9,1201.48 2010.49,1201.48 2011.07,1201.48 2011.66,1201.48 2012.25,1201.48 2012.83,1201.48 2013.42,1201.48 2014.01,1201.48 2014.59,1201.48 2015.18,1201.48 2015.77,1201.48 2016.35,1201.48 2016.94,1201.48 2017.53,1201.48 2018.11,1201.48 2018.7,1201.48 2019.28,1201.48 2019.87,1201.48 2020.46,1201.48 2021.04,1201.48 2021.63,1201.48 2022.22,1201.48 2022.8,1201.48 2023.39,1201.48 2023.98,1201.48 2024.56,1201.48 2025.15,1201.48 2025.73,1201.48 2026.32,1201.48 2026.91,1201.48 2027.49,1201.48 2028.08,1201.48 2028.67,1201.48 2029.25,1201.48 2029.84,1201.48 2030.43,1201.48 2031.01,1201.48 2031.6,1201.48 2032.19,1201.48 2032.77,1201.48 2033.36,1201.48 2033.94,1201.48 2034.53,1201.48 2035.12,1201.48 2035.7,1201.48 2036.29,1201.48 2036.88,1201.48 2037.46,1201.48 2038.05,1201.48 2038.64,1201.48 2039.22,1201.48 2039.81,1201.48 2040.4,1201.48 2040.98,1201.48 2041.57,1201.48 2042.15,1201.48 2042.74,1201.48 2043.33,1201.48 2043.91,1201.48 2044.5,1201.48 2045.09,1201.48 2045.67,1201.48 2046.26,1201.48 2046.85,1201.48 2047.43,1201.48 2048.02,1201.48 2048.6,1201.48 2049.19,1201.48 2049.78,1201.48 2050.36,1201.48 2050.95,1201.48 2051.54,1201.48 2052.12,1201.48 2052.71,1201.48 2053.3,1201.48 2053.88,1201.48 2054.47,1201.48 2055.06,1201.48 2055.64,1201.48 2056.23,1201.48 2056.81,1201.48 2057.4,1201.48 2057.99,1201.48 2058.57,1201.48 2059.16,1201.48 2059.75,1201.48 2060.33,1201.48 2060.92,1201.48 2061.51,1201.48 2062.09,1201.48 2062.68,1201.48 2063.27,1201.48 2063.85,1201.48 2064.44,1201.48 2065.02,1201.48 2065.61,1201.48 2066.2,1201.48 2066.78,1201.48 2067.37,1201.48 2067.96,1201.48 2068.54,1201.48 2069.13,1201.48 2069.72,1201.48 2070.3,1201.48 2070.89,1201.48 2071.48,1201.48 2072.06,1201.48 2072.65,1201.48 2073.23,1201.48 2073.82,1201.48 2074.41,1201.48 2074.99,1201.48 2075.58,1201.48 2076.17,1201.48 2076.75,1201.48 2077.34,1201.48 2077.93,1201.48 2078.51,1201.48 2079.1,1201.48 2079.68,1201.48 2080.27,1201.48 2080.86,1201.48 2081.44,1201.48 2082.03,1201.48 2082.62,1201.48 2083.2,1201.48 2083.79,1201.48 2084.38,1201.48 2084.96,1201.48 2085.55,1201.48 2086.14,1201.48 2086.72,1201.48 2087.31,1201.48 2087.89,1201.48 2088.48,1201.48 2089.07,1201.48 2089.65,1201.48 2090.24,1201.48 2090.83,1201.48 2091.41,1201.48 2092,1201.48 2092.59,1201.48 2093.17,1201.48 2093.76,1201.48 2094.35,1201.48 2094.93,1201.48 2095.52,1201.48 2096.1,1201.48 2096.69,1201.48 2097.28,1201.48 2097.86,1201.48 2098.45,1201.48 2099.04,1201.48 2099.62,1201.48 2100.21,1201.48 2100.8,1201.48 2101.38,1201.48 2101.97,1201.48 2102.55,1201.48 2103.14,1201.48 2103.73,1201.48 2104.31,1201.48 2104.9,1201.48 2105.49,1201.48 2106.07,1201.48 2106.66,1201.48 2107.25,1201.48 2107.83,1201.48 2108.42,1201.48 2109.01,1201.48 2109.59,1201.48 2110.18,1201.48 2110.76,1201.48 2111.35,1201.48 2111.94,1201.48 2112.52,1201.48 2113.11,1201.48 2113.7,1201.48 2114.28,1201.48 2114.87,1201.48 2115.46,1201.48 2116.04,1201.48 2116.63,1201.48 2117.22,1201.48 2117.8,1201.48 2118.39,1201.48 2118.97,1201.48 2119.56,1201.48 2120.15,1201.48 2120.73,1201.48 2121.32,1201.48 2121.91,1201.48 2122.49,1201.48 2123.08,1201.48 2123.67,1201.48 2124.25,1201.48 2124.84,1201.48 2125.42,1201.48 2126.01,1201.48 2126.6,1201.48 2127.18,1201.48 2127.77,1201.48 2128.36,1201.48 2128.94,1201.48 2129.53,1201.48 2130.12,1201.48 2130.7,1201.48 2131.29,1201.48 2131.88,1201.48 2132.46,1201.48 2133.05,1201.48 2133.63,1201.48 2134.22,1201.48 2134.81,1201.48 2135.39,1201.48 2135.98,1201.48 2136.57,1201.48 2137.15,1201.48 2137.74,1201.48 2138.33,1201.48 2138.91,1201.48 2139.5,1201.48 2140.09,1201.48 2140.67,1201.48 2141.26,1201.48 2141.84,1201.48 2142.43,1201.48 2143.02,1201.48 2143.6,1201.48 2144.19,1201.48 2144.78,1201.48 2145.36,1201.48 2145.95,1201.48 2146.54,1201.48 2147.12,1201.48 2147.71,1201.48 2148.3,1201.48 2148.88,1201.48 2149.47,1201.48 2150.05,1201.48 2150.64,1201.48 2151.23,1201.48 2151.81,1201.48 2152.4,1201.48 2152.99,1201.48 2153.57,1201.48 2154.16,1201.48 2154.75,1201.48 2155.33,1201.48 2155.92,1201.48 2156.5,1201.48 2157.09,1201.48 2157.68,1201.48 2158.26,1201.48 \"/>\n<path clip-path=\"url(#clip522)\" d=\"M986.025 1201.34 L986.612 1201.34 L987.198 1201.34 L987.785 1201.34 L988.371 1201.34 L988.957 1201.34 L989.544 1201.34 L990.13 1201.34 L990.717 1201.34 L991.303 1201.34 L991.889 1201.34 L992.476 1201.34 L993.062 1201.34 L993.649 1201.34 L994.235 1201.34 L994.822 1201.34 L995.408 1201.34 L995.994 1201.34 L996.581 1201.34 L997.167 1201.34 L997.754 1201.34 L998.34 1201.34 L998.926 1201.34 L999.513 1201.34 L1000.1 1201.34 L1000.69 1201.34 L1001.27 1201.34 L1001.86 1201.34 L1002.44 1201.34 L1003.03 1201.34 L1003.62 1201.34 L1004.2 1201.34 L1004.79 1201.34 L1005.38 1201.34 L1005.96 1201.34 L1006.55 1201.34 L1007.14 1201.34 L1007.72 1201.34 L1008.31 1201.34 L1008.9 1201.34 L1009.48 1201.34 L1010.07 1201.34 L1010.65 1201.34 L1011.24 1201.34 L1011.83 1201.34 L1012.41 1201.34 L1013 1201.34 L1013.59 1201.34 L1014.17 1201.34 L1014.76 1201.34 L1015.35 1201.34 L1015.93 1201.34 L1016.52 1201.34 L1017.11 1201.34 L1017.69 1201.34 L1018.28 1201.34 L1018.86 1201.34 L1019.45 1201.34 L1020.04 1201.34 L1020.62 1201.34 L1021.21 1201.34 L1021.8 1201.34 L1022.38 1201.34 L1022.97 1201.34 L1023.56 1201.34 L1024.14 1201.34 L1024.73 1201.34 L1025.32 1201.34 L1025.9 1201.34 L1026.49 1201.34 L1027.07 1201.34 L1027.66 1201.34 L1028.25 1201.34 L1028.83 1201.34 L1029.42 1201.34 L1030.01 1201.34 L1030.59 1201.34 L1031.18 1201.34 L1031.77 1201.34 L1032.35 1201.34 L1032.94 1201.34 L1033.52 1201.34 L1034.11 1201.34 L1034.7 1201.34 L1035.28 1201.34 L1035.87 1201.34 L1036.46 1201.34 L1037.04 1201.34 L1037.63 1201.34 L1038.22 1201.34 L1038.8 1201.34 L1039.39 1201.34 L1039.98 1201.34 L1040.56 1201.34 L1041.15 1201.34 L1041.73 1201.34 L1042.32 1201.34 L1042.91 1201.34 L1043.49 1201.34 L1044.08 1201.34 L1044.67 1201.34 L1045.25 1201.34 L1045.84 1201.34 L1046.43 1201.34 L1047.01 1201.34 L1047.6 1201.34 L1048.19 1201.34 L1048.77 1201.34 L1049.36 1201.34 L1049.94 1201.34 L1050.53 1201.34 L1051.12 1201.34 L1051.7 1201.34 L1052.29 1201.34 L1052.88 1201.34 L1053.46 1201.34 L1054.05 1201.34 L1054.64 1201.34 L1055.22 1201.34 L1055.81 1201.34 L1056.39 1201.34 L1056.98 1201.34 L1057.57 1201.34 L1058.15 1201.34 L1058.74 1201.34 L1059.33 1201.34 L1059.91 1201.34 L1060.5 1201.34 L1061.09 1201.34 L1061.67 1201.34 L1062.26 1201.34 L1062.85 1201.34 L1063.43 1201.34 L1064.02 1201.34 L1064.6 1201.34 L1065.19 1201.34 L1065.78 1201.34 L1066.36 1201.34 L1066.95 1201.34 L1067.54 1201.34 L1068.12 1201.34 L1068.71 1201.34 L1069.3 1201.34 L1069.88 1201.34 L1070.47 1201.34 L1071.06 1201.34 L1071.64 1201.34 L1072.23 1201.34 L1072.81 1201.34 L1073.4 1201.34 L1073.99 1201.34 L1074.57 1201.34 L1075.16 1201.34 L1075.75 1201.34 L1076.33 1201.34 L1076.92 1201.34 L1077.51 1201.34 L1078.09 1201.34 L1078.68 1201.34 L1079.26 1201.34 L1079.85 1201.34 L1080.44 1201.34 L1081.02 1201.34 L1081.61 1201.34 L1082.2 1201.34 L1082.78 1201.34 L1083.37 1201.34 L1083.96 1201.34 L1084.54 1201.34 L1085.13 1201.34 L1085.72 1201.34 L1086.3 1201.34 L1086.89 1201.34 L1087.47 1201.34 L1088.06 1201.34 L1088.65 1201.34 L1089.23 1201.34 L1089.82 1201.34 L1090.41 1201.34 L1090.99 1201.34 L1091.58 1201.34 L1092.17 1201.34 L1092.75 1201.34 L1093.34 1201.34 L1093.93 1201.34 L1094.51 1201.34 L1095.1 1201.34 L1095.68 1201.34 L1096.27 1201.34 L1096.86 1201.34 L1097.44 1201.34 L1098.03 1201.34 L1098.62 1201.34 L1099.2 1201.34 L1099.79 1201.34 L1100.38 1201.34 L1100.96 1201.34 L1101.55 1201.34 L1102.14 1201.34 L1102.72 1201.34 L1103.31 1201.34 L1103.89 1201.34 L1104.48 1201.34 L1105.07 1201.34 L1105.65 1201.34 L1106.24 1201.34 L1106.83 1201.34 L1107.41 1201.34 L1108 1201.34 L1108.59 1201.34 L1109.17 1201.34 L1109.76 1201.34 L1110.34 1201.34 L1110.93 1201.34 L1111.52 1201.34 L1112.1 1201.34 L1112.69 1201.34 L1113.28 1201.34 L1113.86 1201.34 L1114.45 1201.34 L1115.04 1201.34 L1115.62 1201.34 L1116.21 1201.34 L1116.8 1201.34 L1117.38 1201.34 L1117.97 1201.34 L1118.55 1201.34 L1119.14 1201.34 L1119.73 1201.34 L1120.31 1201.34 L1120.9 1201.34 L1121.49 1201.34 L1122.07 1201.34 L1122.66 1201.34 L1123.25 1201.34 L1123.83 1201.34 L1124.42 1201.34 L1125.01 1201.34 L1125.59 1201.34 L1126.18 1201.34 L1126.76 1201.34 L1127.35 1201.34 L1127.94 1201.34 L1128.52 1201.34 L1129.11 1201.34 L1129.7 1201.34 L1130.28 1201.34 L1130.87 1201.34 L1131.46 1201.34 L1132.04 1201.34 L1132.63 1201.34 L1133.21 1201.34 L1133.8 1201.34 L1134.39 1201.34 L1134.97 1201.34 L1135.56 1201.34 L1136.15 1201.34 L1136.73 1201.34 L1137.32 1201.34 L1137.91 1201.34 L1138.49 1201.34 L1139.08 1201.34 L1139.67 1201.34 L1140.25 1201.34 L1140.84 1201.34 L1141.42 1201.34 L1142.01 1201.34 L1142.6 1201.34 L1143.18 1201.34 L1143.77 1201.34 L1144.36 1201.34 L1144.94 1201.34 L1145.53 1201.34 L1146.12 1201.34 L1146.7 1201.34 L1147.29 1201.34 L1147.88 1201.34 L1148.46 1201.34 L1149.05 1201.34 L1149.63 1201.34 L1150.22 1201.34 L1150.81 1201.34 L1151.39 1201.34 L1151.98 1201.34 L1152.57 1201.34 L1153.15 1201.34 L1153.74 1201.34 L1154.33 1201.34 L1154.91 1201.34 L1155.5 1201.34 L1156.09 1201.34 L1156.67 1201.34 L1157.26 1201.34 L1157.84 1201.34 L1158.43 1201.34 L1159.02 1201.34 L1159.6 1201.34 L1160.19 1201.34 L1160.78 1201.34 L1161.36 1201.34 L1161.95 1201.34 L1162.54 1201.34 L1163.12 1201.34 L1163.71 1201.34 L1164.29 1201.34 L1164.88 1201.34 L1165.47 1201.34 L1166.05 1201.34 L1166.64 1201.34 L1167.23 1201.34 L1167.81 1201.34 L1168.4 1201.34 L1168.99 1201.34 L1169.57 1201.34 L1170.16 1201.34 L1170.75 1201.34 L1171.33 1201.34 L1171.92 1201.34 L1172.5 1201.34 L1173.09 1201.34 L1173.68 1201.34 L1174.26 1201.34 L1174.85 1201.34 L1175.44 1201.34 L1176.02 1201.34 L1176.61 1201.34 L1177.2 1201.34 L1177.78 1201.34 L1178.37 1201.34 L1178.96 1201.34 L1179.54 1201.34 L1180.13 1201.34 L1180.71 1201.34 L1181.3 1201.34 L1181.89 1201.34 L1182.47 1201.34 L1183.06 1201.34 L1183.65 1201.34 L1184.23 1201.34 L1184.82 1201.34 L1185.41 1201.34 L1185.99 1201.34 L1186.58 1201.34 L1187.16 1201.34 L1187.75 1201.34 L1188.34 1201.34 L1188.92 1201.34 L1189.51 1201.34 L1190.1 1201.34 L1190.68 1201.34 L1191.27 1201.34 L1191.86 1201.34 L1192.44 1201.34 L1193.03 1201.34 L1193.62 1201.34 L1194.2 1201.34 L1194.79 1201.34 L1195.37 1201.34 L1195.96 1201.34 L1196.55 1201.34 L1197.13 1201.34 L1197.72 1201.34 L1198.31 1201.34 L1198.89 1201.34 L1199.48 1201.34 L1200.07 1201.34 L1200.65 1201.34 L1201.24 1201.34 L1201.83 1201.34 L1202.41 1201.34 L1203 1201.34 L1203.58 1201.34 L1204.17 1201.34 L1204.76 1201.34 L1205.34 1201.34 L1205.93 1201.34 L1206.52 1201.34 L1207.1 1201.34 L1207.69 1201.34 L1208.28 1201.34 L1208.86 1201.34 L1209.45 1201.34 L1210.03 1201.34 L1210.62 1201.34 L1211.21 1201.34 L1211.79 1201.34 L1212.38 1201.34 L1212.97 1201.34 L1213.55 1201.34 L1214.14 1201.34 L1214.73 1201.34 L1215.31 1201.34 L1215.9 1201.34 L1216.49 1201.34 L1217.07 1201.34 L1217.66 1201.34 L1218.24 1201.34 L1218.83 1201.34 L1219.42 1201.34 L1220 1201.34 L1220.59 1201.34 L1221.18 1201.34 L1221.76 1201.34 L1222.35 1201.34 L1222.94 1201.34 L1223.52 1201.34 L1224.11 1201.34 L1224.7 1201.34 L1225.28 1201.34 L1225.87 1201.34 L1226.45 1201.34 L1227.04 1201.34 L1227.63 1201.34 L1228.21 1201.34 L1228.8 1201.34 L1229.39 1201.34 L1229.97 1201.34 L1230.56 1201.34 L1231.15 1201.34 L1231.73 1201.34 L1232.32 1201.34 L1232.91 1201.34 L1233.49 1201.34 L1234.08 1201.34 L1234.66 1201.34 L1235.25 1201.34 L1235.84 1201.34 L1236.42 1201.34 L1237.01 1201.34 L1237.6 1201.34 L1238.18 1201.34 L1238.77 1201.34 L1239.36 1201.34 L1239.94 1201.34 L1240.53 1201.34 L1241.11 1201.34 L1241.7 1201.34 L1242.29 1201.34 L1242.87 1201.34 L1243.46 1201.34 L1244.05 1201.34 L1244.63 1201.34 L1245.22 1201.34 L1245.81 1201.34 L1246.39 1201.34 L1246.98 1201.34 L1247.57 1201.34 L1248.15 1201.34 L1248.74 1201.34 L1249.32 1201.34 L1249.91 1201.34 L1250.5 1201.34 L1251.08 1201.34 L1251.67 1201.34 L1252.26 1201.34 L1252.84 1201.34 L1253.43 1201.34 L1254.02 1201.34 L1254.6 1201.34 L1255.19 1201.34 L1255.78 1201.34 L1256.36 1201.34 L1256.95 1201.34 L1257.53 1201.34 L1258.12 1201.34 L1258.71 1201.34 L1259.29 1201.34 L1259.88 1201.34 L1260.47 1201.34 L1261.05 1201.34 L1261.64 1201.34 L1262.23 1201.34 L1262.81 1201.34 L1263.4 1201.34 L1263.98 1201.34 L1264.57 1201.34 L1265.16 1201.34 L1265.74 1201.34 L1266.33 1201.34 L1266.92 1201.34 L1267.5 1201.34 L1268.09 1201.34 L1268.68 1201.34 L1269.26 1201.34 L1269.85 1201.34 L1270.44 1201.34 L1271.02 1201.34 L1271.61 1201.34 L1272.19 1201.34 L1272.78 1201.34 L1273.37 1201.34 L1273.95 1201.34 L1274.54 1201.34 L1275.13 1201.34 L1275.71 1201.34 L1276.3 1201.34 L1276.89 1201.34 L1277.47 1201.34 L1278.06 1201.34 L1278.65 1201.34 L1279.23 1201.34 L1279.82 1201.34 L1280.4 1201.34 L1280.99 1201.34 L1281.58 1201.34 L1282.16 1201.34 L1282.75 1201.34 L1283.34 1201.34 L1283.92 1201.34 L1284.51 1201.34 L1285.1 1201.34 L1285.68 1201.34 L1286.27 1201.34 L1286.86 1201.34 L1287.44 1201.34 L1288.03 1201.34 L1288.61 1201.34 L1289.2 1201.34 L1289.79 1201.34 L1290.37 1201.34 L1290.96 1201.34 L1291.55 1201.34 L1292.13 1201.34 L1292.72 1201.34 L1293.31 1201.34 L1293.89 1201.34 L1294.48 1201.34 L1295.06 1201.34 L1295.65 1201.34 L1296.24 1201.34 L1296.82 1201.34 L1297.41 1201.34 L1298 1201.34 L1298.58 1201.34 L1299.17 1201.34 L1299.76 1201.34 L1300.34 1201.34 L1300.93 1201.34 L1301.52 1201.34 L1302.1 1201.34 L1302.69 1201.34 L1303.27 1201.34 L1303.86 1201.34 L1304.45 1201.34 L1305.03 1201.34 L1305.62 1201.34 L1306.21 1201.34 L1306.79 1201.34 L1307.38 1201.34 L1307.97 1201.34 L1308.55 1201.34 L1309.14 1201.34 L1309.73 1201.34 L1310.31 1201.34 L1310.9 1201.34 L1311.48 1201.34 L1312.07 1201.34 L1312.66 1201.34 L1313.24 1201.34 L1313.83 1201.34 L1314.42 1201.34 L1315 1201.34 L1315.59 1201.34 L1316.18 1201.34 L1316.76 1201.34 L1317.35 1201.34 L1317.93 1201.34 L1318.52 1201.34 L1319.11 1201.34 L1319.69 1201.34 L1320.28 1201.34 L1320.87 1201.34 L1321.45 1201.34 L1322.04 1201.34 L1322.63 1201.34 L1323.21 1201.34 L1323.8 1201.34 L1324.39 1201.34 L1324.97 1201.34 L1325.56 1201.34 L1326.14 1201.34 L1326.73 1201.34 L1327.32 1201.34 L1327.9 1201.34 L1328.49 1201.34 L1329.08 1201.34 L1329.66 1201.34 L1330.25 1201.34 L1330.84 1201.34 L1331.42 1201.34 L1332.01 1201.34 L1332.6 1201.34 L1333.18 1201.34 L1333.77 1201.34 L1334.35 1201.34 L1334.94 1201.34 L1335.53 1201.34 L1336.11 1201.34 L1336.7 1201.34 L1337.29 1201.34 L1337.87 1201.34 L1338.46 1201.34 L1339.05 1201.34 L1339.63 1201.34 L1340.22 1201.34 L1340.8 1201.34 L1341.39 1201.34 L1341.98 1201.34 L1342.56 1201.34 L1343.15 1201.34 L1343.74 1201.34 L1344.32 1201.34 L1344.91 1201.34 L1345.5 1201.34 L1346.08 1201.34 L1346.67 1201.34 L1347.26 1201.34 L1347.84 1201.34 L1348.43 1201.34 L1349.01 1201.34 L1349.6 1201.34 L1350.19 1201.34 L1350.77 1201.34 L1351.36 1201.34 L1351.95 1201.34 L1352.53 1201.34 L1353.12 1201.34 L1353.71 1201.34 L1354.29 1201.34 L1354.88 1201.34 L1355.47 1201.34 L1356.05 1201.34 L1356.64 1201.34 L1357.22 1201.34 L1357.81 1201.34 L1358.4 1201.34 L1358.98 1201.34 L1359.57 1201.34 L1360.16 1201.34 L1360.74 1201.34 L1361.33 1201.34 L1361.92 1201.34 L1362.5 1201.34 L1363.09 1201.34 L1363.68 1201.34 L1364.26 1201.34 L1364.85 1201.34 L1365.43 1201.34 L1366.02 1201.34 L1366.61 1201.34 L1367.19 1201.34 L1367.78 1201.34 L1368.37 1201.34 L1368.95 1201.34 L1369.54 1201.34 L1370.13 1201.34 L1370.71 1201.34 L1371.3 1201.34 L1371.88 1201.34 L1372.47 1201.34 L1373.06 1201.34 L1373.64 1201.34 L1374.23 1201.34 L1374.82 1201.34 L1375.4 1201.34 L1375.99 1201.34 L1376.58 1201.34 L1377.16 1201.34 L1377.75 1201.34 L1378.34 1201.34 L1378.92 1201.34 L1379.51 1201.34 L1380.09 1201.34 L1380.68 1201.34 L1381.27 1201.34 L1381.85 1201.34 L1382.44 1201.34 L1383.03 1201.34 L1383.61 1201.34 L1384.2 1201.34 L1384.79 1201.34 L1385.37 1201.34 L1385.96 1201.34 L1386.55 1201.34 L1387.13 1201.34 L1387.72 1201.34 L1388.3 1201.34 L1388.89 1201.34 L1389.48 1201.34 L1390.06 1201.34 L1390.65 1201.34 L1391.24 1201.34 L1391.82 1201.34 L1392.41 1201.34 L1393 1201.34 L1393.58 1201.34 L1394.17 1201.34 L1394.75 1201.34 L1395.34 1201.34 L1395.93 1201.34 L1396.51 1201.34 L1397.1 1201.34 L1397.69 1201.34 L1398.27 1201.34 L1398.86 1201.34 L1399.45 1201.34 L1400.03 1201.34 L1400.62 1201.34 L1401.21 1201.34 L1401.79 1201.34 L1402.38 1201.34 L1402.96 1201.34 L1403.55 1201.34 L1404.14 1201.34 L1404.72 1201.34 L1405.31 1201.34 L1405.9 1201.34 L1406.48 1201.34 L1407.07 1201.34 L1407.66 1201.34 L1408.24 1201.34 L1408.83 1201.34 L1409.42 1201.34 L1410 1201.34 L1410.59 1201.34 L1411.17 1201.34 L1411.76 1201.34 L1412.35 1201.34 L1412.93 1201.34 L1413.52 1201.34 L1414.11 1201.34 L1414.69 1201.34 L1415.28 1201.34 L1415.87 1201.34 L1416.45 1201.34 L1417.04 1201.34 L1417.63 1201.34 L1418.21 1201.34 L1418.8 1201.34 L1419.38 1201.34 L1419.97 1201.34 L1420.56 1201.34 L1421.14 1201.34 L1421.73 1201.34 L1422.32 1201.34 L1422.9 1201.34 L1423.49 1201.34 L1424.08 1201.34 L1424.66 1201.34 L1425.25 1201.34 L1425.83 1201.34 L1426.42 1201.34 L1427.01 1201.34 L1427.59 1201.34 L1428.18 1201.34 L1428.77 1201.34 L1429.35 1201.34 L1429.94 1201.34 L1430.53 1201.34 L1431.11 1201.34 L1431.7 1201.34 L1432.29 1201.34 L1432.87 1201.34 L1433.46 1201.34 L1434.04 1201.34 L1434.63 1201.34 L1435.22 1201.34 L1435.8 1201.34 L1436.39 1201.34 L1436.98 1201.34 L1437.56 1201.34 L1438.15 1201.34 L1438.74 1201.34 L1439.32 1201.34 L1439.91 1201.34 L1440.5 1201.34 L1441.08 1201.34 L1441.67 1201.34 L1442.25 1201.34 L1442.84 1201.34 L1443.43 1201.34 L1444.01 1201.34 L1444.6 1201.34 L1445.19 1201.34 L1445.77 1201.34 L1446.36 1201.34 L1446.95 1201.34 L1447.53 1201.34 L1448.12 1201.34 L1448.7 1201.34 L1449.29 1201.34 L1449.88 1201.34 L1450.46 1201.34 L1451.05 1201.34 L1451.64 1201.34 L1452.22 1201.34 L1452.81 1201.34 L1453.4 1201.34 L1453.98 1201.34 L1454.57 1201.34 L1455.16 1201.34 L1455.74 1201.34 L1456.33 1201.34 L1456.91 1201.34 L1457.5 1201.34 L1458.09 1201.34 L1458.67 1201.34 L1459.26 1201.34 L1459.85 1201.34 L1460.43 1201.34 L1461.02 1201.34 L1461.61 1201.34 L1462.19 1201.34 L1462.78 1201.34 L1463.37 1201.34 L1463.95 1201.34 L1464.54 1201.34 L1465.12 1201.34 L1465.71 1201.34 L1466.3 1201.34 L1466.88 1201.34 L1467.47 1201.34 L1468.06 1201.34 L1468.64 1201.34 L1469.23 1201.34 L1469.82 1201.34 L1470.4 1201.34 L1470.99 1201.34 L1471.57 1201.34 L1472.16 1201.34 L1472.75 1201.34 L1473.33 1201.34 L1473.92 1201.34 L1474.51 1201.34 L1475.09 1201.34 L1475.68 1201.34 L1476.27 1201.34 L1476.85 1201.34 L1477.44 1201.34 L1478.03 1201.34 L1478.61 1201.34 L1479.2 1201.34 L1479.78 1201.34 L1480.37 1201.34 L1480.96 1201.34 L1481.54 1201.34 L1482.13 1201.34 L1482.72 1201.34 L1483.3 1201.34 L1483.89 1201.34 L1484.48 1201.34 L1485.06 1201.34 L1485.65 1201.34 L1486.24 1201.34 L1486.82 1201.34 L1487.41 1201.34 L1487.99 1201.34 L1488.58 1201.34 L1489.17 1201.34 L1489.75 1201.34 L1490.34 1201.34 L1490.93 1201.34 L1491.51 1201.34 L1492.1 1201.34 L1492.69 1201.34 L1493.27 1201.34 L1493.86 1201.34 L1494.45 1201.34 L1495.03 1201.34 L1495.62 1201.34 L1496.2 1201.34 L1496.79 1201.34 L1497.38 1201.34 L1497.96 1201.34 L1498.55 1201.34 L1499.14 1201.34 L1499.72 1201.34 L1500.31 1201.34 L1500.9 1201.34 L1501.48 1201.34 L1502.07 1201.34 L1502.65 1201.34 L1503.24 1201.34 L1503.83 1201.34 L1504.41 1201.34 L1505 1201.34 L1505.59 1201.34 L1506.17 1201.34 L1506.76 1201.34 L1507.35 1201.34 L1507.93 1201.34 L1508.52 1201.34 L1509.11 1201.34 L1509.69 1201.34 L1510.28 1201.34 L1510.86 1201.34 L1511.45 1201.34 L1512.04 1201.34 L1512.62 1201.34 L1513.21 1201.34 L1513.8 1201.34 L1514.38 1201.34 L1514.97 1201.34 L1515.56 1201.34 L1516.14 1201.34 L1516.73 1201.34 L1517.32 1201.34 L1517.9 1201.34 L1518.49 1201.34 L1519.07 1201.34 L1519.66 1201.34 L1520.25 1201.34 L1520.83 1201.34 L1521.42 1201.34 L1522.01 1201.34 L1522.59 1201.34 L1523.18 1201.34 L1523.77 1201.34 L1524.35 1201.34 L1524.94 1201.34 L1525.52 1201.34 L1526.11 1201.34 L1526.7 1201.34 L1527.28 1201.34 L1527.87 1201.34 L1528.46 1201.34 L1529.04 1201.34 L1529.63 1201.34 L1530.22 1201.34 L1530.8 1201.34 L1531.39 1201.34 L1531.98 1201.34 L1532.56 1201.34 L1533.15 1201.34 L1533.73 1201.34 L1534.32 1201.34 L1534.91 1201.34 L1535.49 1201.34 L1536.08 1201.34 L1536.67 1201.34 L1537.25 1201.34 L1537.84 1201.34 L1538.43 1201.34 L1539.01 1201.34 L1539.6 1201.34 L1540.19 1201.34 L1540.77 1201.34 L1541.36 1201.34 L1541.94 1201.34 L1542.53 1201.34 L1543.12 1201.34 L1543.7 1201.34 L1544.29 1201.34 L1544.88 1201.34 L1545.46 1201.34 L1546.05 1201.34 L1546.64 1201.34 L1547.22 1201.34 L1547.81 1201.34 L1548.4 1201.34 L1548.98 1201.34 L1549.57 1201.34 L1550.15 1201.34 L1550.74 1201.34 L1551.33 1201.34 L1551.91 1201.34 L1552.5 1201.34 L1553.09 1201.34 L1553.67 1201.34 L1554.26 1201.34 L1554.85 1201.34 L1555.43 1201.34 L1556.02 1201.34 L1556.6 1201.34 L1557.19 1201.34 L1557.78 1201.34 L1558.36 1201.34 L1558.95 1201.34 L1559.54 1201.34 L1560.12 1201.34 L1560.71 1201.34 L1561.3 1201.34 L1561.88 1201.34 L1562.47 1201.34 L1563.06 1201.34 L1563.64 1201.34 L1564.23 1201.34 L1564.81 1201.34 L1565.4 1201.34 L1565.99 1201.34 L1566.57 1201.34 L1567.16 1201.34 L1567.75 1201.34 L1568.33 1201.34 L1568.92 1201.34 L1569.51 1201.34 L1570.09 1201.34 L1570.68 1201.34 L1571.27 1201.34 L1571.85 1201.34 L1572.44 1201.34 L1573.02 1201.34 L1573.61 1201.34 L1574.2 1201.34 L1574.78 1201.34 L1575.37 1201.34 L1575.96 1201.34 L1576.54 1201.34 L1577.13 1201.34 L1577.72 1201.34 L1578.3 1201.34 L1578.89 1201.34 L1579.47 1201.34 L1580.06 1201.34 L1580.65 1201.34 L1581.23 1201.34 L1581.82 1201.34 L1582.41 1201.34 L1582.99 1201.34 L1583.58 1201.34 L1584.17 1201.34 L1584.75 1201.34 L1585.34 1201.34 L1585.93 1201.34 L1586.51 1201.34 L1587.1 1201.34 L1587.68 1201.34 L1588.27 1201.34 L1588.86 1201.34 L1589.44 1201.34 L1590.03 1201.34 L1590.62 1201.34 L1591.2 1201.34 L1591.79 1201.34 L1592.38 1201.34 L1592.96 1201.34 L1593.55 1201.34 L1594.14 1201.34 L1594.72 1201.34 L1595.31 1201.34 L1595.89 1201.34 L1596.48 1201.34 L1597.07 1201.34 L1597.65 1201.34 L1598.24 1201.34 L1598.83 1201.34 L1599.41 1201.34 L1600 1201.34 L1600.59 1201.34 L1601.17 1201.34 L1601.76 1201.34 L1602.34 1201.34 L1602.93 1201.34 L1603.52 1201.34 L1604.1 1201.34 L1604.69 1201.34 L1605.28 1201.34 L1605.86 1201.34 L1606.45 1201.34 L1607.04 1201.34 L1607.62 1201.34 L1608.21 1201.34 L1608.8 1201.34 L1609.38 1201.34 L1609.97 1201.34 L1610.55 1201.34 L1611.14 1201.34 L1611.73 1201.34 L1612.31 1201.34 L1612.9 1201.34 L1613.49 1201.34 L1614.07 1201.34 L1614.66 1201.34 L1615.25 1201.34 L1615.83 1201.34 L1616.42 1201.34 L1617.01 1201.34 L1617.59 1201.34 L1618.18 1201.34 L1618.76 1201.34 L1619.35 1201.34 L1619.94 1201.34 L1620.52 1201.34 L1621.11 1201.34 L1621.7 1201.34 L1622.28 1201.34 L1622.87 1201.34 L1623.46 1201.34 L1624.04 1201.34 L1624.63 1201.34 L1625.22 1201.34 L1625.8 1201.34 L1626.39 1201.34 L1626.97 1201.34 L1627.56 1201.34 L1628.15 1201.34 L1628.73 1201.34 L1629.32 1201.34 L1629.91 1201.34 L1630.49 1201.34 L1631.08 1201.34 L1631.67 1201.34 L1632.25 1201.34 L1632.84 1201.34 L1633.42 1201.34 L1634.01 1201.34 L1634.6 1201.34 L1635.18 1201.34 L1635.77 1201.34 L1636.36 1201.34 L1636.94 1201.34 L1637.53 1201.34 L1638.12 1201.34 L1638.7 1201.34 L1639.29 1201.34 L1639.88 1201.34 L1640.46 1201.34 L1641.05 1201.34 L1641.63 1201.34 L1642.22 1201.34 L1642.81 1201.34 L1643.39 1201.34 L1643.98 1201.34 L1644.57 1201.34 L1645.15 1201.34 L1645.74 1201.34 L1646.33 1201.34 L1646.91 1201.34 L1647.5 1201.34 L1648.09 1201.34 L1648.67 1201.34 L1649.26 1201.34 L1649.84 1201.34 L1650.43 1201.34 L1651.02 1201.34 L1651.6 1201.34 L1652.19 1201.34 L1652.78 1201.34 L1653.36 1201.34 L1653.95 1201.34 L1654.54 1201.34 L1655.12 1201.34 L1655.71 1201.34 L1656.29 1201.34 L1656.88 1201.34 L1657.47 1201.34 L1658.05 1201.34 L1658.64 1201.34 L1659.23 1201.34 L1659.81 1201.34 L1660.4 1201.34 L1660.99 1201.34 L1661.57 1201.34 L1662.16 1201.34 L1662.75 1201.34 L1663.33 1201.34 L1663.92 1201.34 L1664.5 1201.34 L1665.09 1201.34 L1665.68 1201.34 L1666.26 1201.34 L1666.85 1201.34 L1667.44 1201.34 L1668.02 1201.34 L1668.61 1201.34 L1669.2 1201.34 L1669.78 1201.34 L1670.37 1201.34 L1670.96 1201.34 L1671.54 1201.34 L1672.13 1201.34 L1672.71 1201.34 L1673.3 1201.34 L1673.89 1201.34 L1674.47 1201.34 L1675.06 1201.34 L1675.65 1201.34 L1676.23 1201.34 L1676.82 1201.34 L1677.41 1201.34 L1677.99 1201.34 L1678.58 1201.34 L1679.17 1201.34 L1679.75 1201.34 L1680.34 1201.34 L1680.92 1201.34 L1681.51 1201.34 L1682.1 1201.34 L1682.68 1201.34 L1683.27 1201.34 L1683.86 1201.34 L1684.44 1201.34 L1685.03 1201.34 L1685.62 1201.34 L1686.2 1201.34 L1686.79 1201.34 L1687.37 1201.34 L1687.96 1201.34 L1688.55 1201.34 L1689.13 1201.34 L1689.72 1201.34 L1690.31 1201.34 L1690.89 1201.34 L1691.48 1201.34 L1692.07 1201.34 L1692.65 1201.34 L1693.24 1201.34 L1693.83 1201.34 L1694.41 1201.34 L1695 1201.34 L1695.58 1201.34 L1696.17 1201.34 L1696.76 1201.34 L1697.34 1201.34 L1697.93 1201.34 L1698.52 1201.34 L1699.1 1201.34 L1699.69 1201.34 L1700.28 1201.34 L1700.86 1201.34 L1701.45 1201.34 L1702.04 1201.34 L1702.62 1201.34 L1703.21 1201.34 L1703.79 1201.34 L1704.38 1201.34 L1704.97 1201.34 L1705.55 1201.34 L1706.14 1201.34 L1706.73 1201.34 L1707.31 1201.34 L1707.9 1201.34 L1708.49 1201.34 L1709.07 1201.34 L1709.66 1201.34 L1710.24 1201.34 L1710.83 1201.34 L1711.42 1201.34 L1712 1201.34 L1712.59 1201.34 L1713.18 1201.34 L1713.76 1201.34 L1714.35 1201.34 L1714.94 1201.34 L1715.52 1201.34 L1716.11 1201.34 L1716.7 1201.34 L1717.28 1201.34 L1717.87 1201.34 L1718.45 1201.34 L1719.04 1201.34 L1719.63 1201.34 L1720.21 1201.34 L1720.8 1201.34 L1721.39 1201.34 L1721.97 1201.34 L1722.56 1201.34 L1723.15 1201.34 L1723.73 1201.34 L1724.32 1201.34 L1724.91 1201.34 L1725.49 1201.34 L1726.08 1201.34 L1726.66 1201.34 L1727.25 1201.34 L1727.84 1201.34 L1728.42 1201.34 L1729.01 1201.34 L1729.6 1201.34 L1730.18 1201.34 L1730.77 1201.34 L1731.36 1201.34 L1731.94 1201.34 L1732.53 1201.34 L1733.11 1201.34 L1733.7 1201.34 L1734.29 1201.34 L1734.87 1201.34 L1735.46 1201.34 L1736.05 1201.34 L1736.63 1201.34 L1737.22 1201.34 L1737.81 1201.34 L1738.39 1201.34 L1738.98 1201.34 L1739.57 1201.34 L1740.15 1201.34 L1740.74 1201.34 L1741.32 1201.34 L1741.91 1201.34 L1742.5 1201.34 L1743.08 1201.34 L1743.67 1201.34 L1744.26 1201.34 L1744.84 1201.34 L1745.43 1201.34 L1746.02 1201.34 L1746.6 1201.34 L1747.19 1201.34 L1747.78 1201.34 L1748.36 1201.34 L1748.95 1201.34 L1749.53 1201.34 L1750.12 1201.34 L1750.71 1201.34 L1751.29 1201.34 L1751.88 1201.34 L1752.47 1201.34 L1753.05 1201.34 L1753.64 1201.34 L1754.23 1201.34 L1754.81 1201.34 L1755.4 1201.34 L1755.99 1201.34 L1756.57 1201.34 L1757.16 1201.34 L1757.74 1201.34 L1758.33 1201.34 L1758.92 1201.34 L1759.5 1201.34 L1760.09 1201.34 L1760.68 1201.34 L1761.26 1201.34 L1761.85 1201.34 L1762.44 1201.34 L1763.02 1201.34 L1763.61 1201.34 L1764.19 1201.34 L1764.78 1201.34 L1765.37 1201.34 L1765.95 1201.34 L1766.54 1201.34 L1767.13 1201.34 L1767.71 1201.34 L1768.3 1201.34 L1768.89 1201.34 L1769.47 1201.34 L1770.06 1201.34 L1770.65 1201.34 L1771.23 1201.34 L1771.82 1201.34 L1772.4 1201.34 L1772.99 1201.34 L1773.58 1201.34 L1774.16 1201.34 L1774.75 1201.34 L1775.34 1201.34 L1775.92 1201.34 L1776.51 1201.34 L1777.1 1201.34 L1777.68 1201.34 L1778.27 1201.34 L1778.86 1201.34 L1779.44 1201.34 L1780.03 1201.34 L1780.61 1201.34 L1781.2 1201.34 L1781.79 1201.34 L1782.37 1201.34 L1782.96 1201.34 L1783.55 1201.34 L1784.13 1201.34 L1784.72 1201.34 L1785.31 1201.34 L1785.89 1201.34 L1786.48 1201.34 L1787.06 1201.34 L1787.65 1201.34 L1788.24 1201.34 L1788.82 1201.34 L1789.41 1201.34 L1790 1201.34 L1790.58 1201.34 L1791.17 1201.34 L1791.76 1201.34 L1792.34 1201.34 L1792.93 1201.34 L1793.52 1201.34 L1794.1 1201.34 L1794.69 1201.34 L1795.27 1201.34 L1795.86 1201.34 L1796.45 1201.34 L1797.03 1201.34 L1797.62 1201.34 L1798.21 1201.34 L1798.79 1201.34 L1799.38 1201.34 L1799.97 1201.34 L1800.55 1201.34 L1801.14 1201.34 L1801.73 1201.34 L1802.31 1201.34 L1802.9 1201.34 L1803.48 1201.34 L1804.07 1201.34 L1804.66 1201.34 L1805.24 1201.34 L1805.83 1201.34 L1806.42 1201.34 L1807 1201.34 L1807.59 1201.34 L1808.18 1201.34 L1808.76 1201.34 L1809.35 1201.34 L1809.94 1201.34 L1810.52 1201.34 L1811.11 1201.34 L1811.69 1201.34 L1812.28 1201.34 L1812.87 1201.34 L1813.45 1201.34 L1814.04 1201.34 L1814.63 1201.34 L1815.21 1201.34 L1815.8 1201.34 L1816.39 1201.34 L1816.97 1201.34 L1817.56 1201.34 L1818.14 1201.34 L1818.73 1201.34 L1819.32 1201.34 L1819.9 1201.34 L1820.49 1201.34 L1821.08 1201.34 L1821.66 1201.34 L1822.25 1201.34 L1822.84 1201.34 L1823.42 1201.34 L1824.01 1201.34 L1824.6 1201.34 L1825.18 1201.34 L1825.77 1201.34 L1826.35 1201.34 L1826.94 1201.34 L1827.53 1201.34 L1828.11 1201.34 L1828.7 1201.34 L1829.29 1201.34 L1829.87 1201.34 L1830.46 1201.34 L1831.05 1201.34 L1831.63 1201.34 L1832.22 1201.34 L1832.81 1201.34 L1833.39 1201.34 L1833.98 1201.34 L1834.56 1201.34 L1835.15 1201.34 L1835.74 1201.34 L1836.32 1201.34 L1836.91 1201.34 L1837.5 1201.34 L1838.08 1201.34 L1838.67 1201.34 L1839.26 1201.34 L1839.84 1201.34 L1840.43 1201.34 L1841.01 1201.34 L1841.6 1201.34 L1842.19 1201.34 L1842.77 1201.34 L1843.36 1201.34 L1843.95 1201.34 L1844.53 1201.34 L1845.12 1201.34 L1845.71 1201.34 L1846.29 1201.34 L1846.88 1201.34 L1847.47 1201.34 L1848.05 1201.34 L1848.64 1201.34 L1849.22 1201.34 L1849.81 1201.34 L1850.4 1201.34 L1850.98 1201.34 L1851.57 1201.34 L1852.16 1201.34 L1852.74 1201.34 L1853.33 1201.34 L1853.92 1201.34 L1854.5 1201.34 L1855.09 1201.34 L1855.68 1201.34 L1856.26 1201.34 L1856.85 1201.34 L1857.43 1201.34 L1858.02 1201.34 L1858.61 1201.34 L1859.19 1201.34 L1859.78 1201.34 L1860.37 1201.34 L1860.95 1201.34 L1861.54 1201.34 L1862.13 1201.34 L1862.71 1201.34 L1863.3 1201.34 L1863.88 1201.34 L1864.47 1201.34 L1865.06 1201.34 L1865.64 1201.34 L1866.23 1201.34 L1866.82 1201.34 L1867.4 1201.34 L1867.99 1201.34 L1868.58 1201.34 L1869.16 1201.34 L1869.75 1201.34 L1870.34 1201.34 L1870.92 1201.34 L1871.51 1201.34 L1872.09 1201.34 L1872.68 1201.34 L1873.27 1201.34 L1873.85 1201.34 L1874.44 1201.34 L1875.03 1201.34 L1875.61 1201.34 L1876.2 1201.34 L1876.79 1201.34 L1877.37 1201.34 L1877.96 1201.34 L1878.55 1201.34 L1879.13 1201.34 L1879.72 1201.34 L1880.3 1201.34 L1880.89 1201.34 L1881.48 1201.34 L1882.06 1201.34 L1882.65 1201.34 L1883.24 1201.34 L1883.82 1201.34 L1884.41 1201.34 L1885 1201.34 L1885.58 1201.34 L1886.17 1201.34 L1886.76 1201.34 L1887.34 1201.34 L1887.93 1201.34 L1888.51 1201.34 L1889.1 1201.34 L1889.69 1201.34 L1890.27 1201.34 L1890.86 1201.34 L1891.45 1201.34 L1892.03 1201.34 L1892.62 1201.34 L1893.21 1201.34 L1893.79 1201.34 L1894.38 1201.34 L1894.96 1201.34 L1895.55 1201.34 L1896.14 1201.34 L1896.72 1201.34 L1897.31 1201.34 L1897.9 1201.34 L1898.48 1201.34 L1899.07 1201.34 L1899.66 1201.34 L1900.24 1201.34 L1900.83 1201.34 L1901.42 1201.34 L1902 1201.34 L1902.59 1201.34 L1903.17 1201.34 L1903.76 1201.34 L1904.35 1201.34 L1904.93 1201.34 L1905.52 1201.34 L1906.11 1201.34 L1906.69 1201.34 L1907.28 1201.34 L1907.87 1201.34 L1908.45 1201.34 L1909.04 1201.34 L1909.63 1201.34 L1910.21 1201.34 L1910.8 1201.34 L1911.38 1201.34 L1911.97 1201.34 L1912.56 1201.34 L1913.14 1201.34 L1913.73 1201.34 L1914.32 1201.34 L1914.9 1201.34 L1915.49 1201.34 L1916.08 1201.34 L1916.66 1201.34 L1917.25 1201.34 L1917.83 1201.34 L1918.42 1201.34 L1919.01 1201.34 L1919.59 1201.34 L1920.18 1201.34 L1920.77 1201.34 L1921.35 1201.34 L1921.94 1201.34 L1922.53 1201.34 L1923.11 1201.34 L1923.7 1201.34 L1924.29 1201.34 L1924.87 1201.34 L1925.46 1201.34 L1926.04 1201.34 L1926.63 1201.34 L1927.22 1201.34 L1927.8 1201.34 L1928.39 1201.34 L1928.98 1201.34 L1929.56 1201.34 L1930.15 1201.34 L1930.74 1201.34 L1931.32 1201.34 L1931.91 1201.34 L1932.5 1201.34 L1933.08 1201.34 L1933.67 1201.34 L1934.25 1201.34 L1934.84 1201.34 L1935.43 1201.34 L1936.01 1201.34 L1936.6 1201.34 L1937.19 1201.34 L1937.77 1201.34 L1938.36 1201.34 L1938.95 1201.34 L1939.53 1201.34 L1940.12 1201.34 L1940.71 1201.34 L1941.29 1201.34 L1941.88 1201.34 L1942.46 1201.34 L1943.05 1201.34 L1943.64 1201.34 L1944.22 1201.34 L1944.81 1201.34 L1945.4 1201.34 L1945.98 1201.34 L1946.57 1201.34 L1947.16 1201.34 L1947.74 1201.34 L1948.33 1201.34 L1948.91 1201.34 L1949.5 1201.34 L1950.09 1201.34 L1950.67 1201.34 L1951.26 1201.34 L1951.85 1201.34 L1952.43 1201.34 L1953.02 1201.34 L1953.61 1201.34 L1954.19 1201.34 L1954.78 1201.34 L1955.37 1201.34 L1955.95 1201.34 L1956.54 1201.34 L1957.12 1201.34 L1957.71 1201.34 L1958.3 1201.34 L1958.88 1201.34 L1959.47 1201.34 L1960.06 1201.34 L1960.64 1201.34 L1961.23 1201.34 L1961.82 1201.34 L1962.4 1201.34 L1962.99 1201.34 L1963.58 1201.34 L1964.16 1201.34 L1964.75 1201.34 L1965.33 1201.34 L1965.92 1201.34 L1966.51 1201.34 L1967.09 1201.34 L1967.68 1201.34 L1968.27 1201.34 L1968.85 1201.34 L1969.44 1201.34 L1970.03 1201.34 L1970.61 1201.34 L1971.2 1201.34 L1971.78 1201.34 L1972.37 1201.34 L1972.96 1201.34 L1973.54 1201.34 L1974.13 1201.34 L1974.72 1201.34 L1975.3 1201.34 L1975.89 1201.34 L1976.48 1201.34 L1977.06 1201.34 L1977.65 1201.34 L1978.24 1201.34 L1978.82 1201.34 L1979.41 1201.34 L1979.99 1201.34 L1980.58 1201.34 L1981.17 1201.34 L1981.75 1201.34 L1982.34 1201.34 L1982.93 1201.34 L1983.51 1201.34 L1984.1 1201.34 L1984.69 1201.34 L1985.27 1201.34 L1985.86 1201.34 L1986.45 1201.34 L1987.03 1201.34 L1987.62 1201.34 L1988.2 1201.34 L1988.79 1201.34 L1989.38 1201.34 L1989.96 1201.34 L1990.55 1201.34 L1991.14 1201.34 L1991.72 1201.34 L1992.31 1201.34 L1992.9 1201.34 L1993.48 1201.34 L1994.07 1201.34 L1994.65 1201.34 L1995.24 1201.34 L1995.83 1201.34 L1996.41 1201.34 L1997 1201.34 L1997.59 1201.34 L1998.17 1201.34 L1998.76 1201.34 L1999.35 1201.34 L1999.93 1201.34 L2000.52 1201.34 L2001.11 1201.34 L2001.69 1201.34 L2002.28 1201.34 L2002.86 1201.34 L2003.45 1201.34 L2004.04 1201.34 L2004.62 1201.34 L2005.21 1201.34 L2005.8 1201.34 L2006.38 1201.34 L2006.97 1201.34 L2007.56 1201.34 L2008.14 1201.34 L2008.73 1201.34 L2009.32 1201.34 L2009.9 1201.34 L2010.49 1201.34 L2011.07 1201.34 L2011.66 1201.34 L2012.25 1201.34 L2012.83 1201.34 L2013.42 1201.34 L2014.01 1201.34 L2014.59 1201.34 L2015.18 1201.34 L2015.77 1201.34 L2016.35 1201.34 L2016.94 1201.34 L2017.53 1201.34 L2018.11 1201.34 L2018.7 1201.34 L2019.28 1201.34 L2019.87 1201.34 L2020.46 1201.34 L2021.04 1201.34 L2021.63 1201.34 L2022.22 1201.34 L2022.8 1201.34 L2023.39 1201.34 L2023.98 1201.34 L2024.56 1201.34 L2025.15 1201.34 L2025.73 1201.34 L2026.32 1201.34 L2026.91 1201.34 L2027.49 1201.34 L2028.08 1201.34 L2028.67 1201.34 L2029.25 1201.34 L2029.84 1201.34 L2030.43 1201.34 L2031.01 1201.34 L2031.6 1201.34 L2032.19 1201.34 L2032.77 1201.34 L2033.36 1201.34 L2033.94 1201.34 L2034.53 1201.34 L2035.12 1201.34 L2035.7 1201.34 L2036.29 1201.34 L2036.88 1201.34 L2037.46 1201.34 L2038.05 1201.34 L2038.64 1201.34 L2039.22 1201.34 L2039.81 1201.34 L2040.4 1201.34 L2040.98 1201.34 L2041.57 1201.34 L2042.15 1201.34 L2042.74 1201.34 L2043.33 1201.34 L2043.91 1201.34 L2044.5 1201.34 L2045.09 1201.34 L2045.67 1201.34 L2046.26 1201.34 L2046.85 1201.34 L2047.43 1201.34 L2048.02 1201.34 L2048.6 1201.34 L2049.19 1201.34 L2049.78 1201.34 L2050.36 1201.34 L2050.95 1201.34 L2051.54 1201.34 L2052.12 1201.34 L2052.71 1201.34 L2053.3 1201.34 L2053.88 1201.34 L2054.47 1201.34 L2055.06 1201.34 L2055.64 1201.34 L2056.23 1201.34 L2056.81 1201.34 L2057.4 1201.34 L2057.99 1201.34 L2058.57 1201.34 L2059.16 1201.34 L2059.75 1201.34 L2060.33 1201.34 L2060.92 1201.34 L2061.51 1201.34 L2062.09 1201.34 L2062.68 1201.34 L2063.27 1201.34 L2063.85 1201.34 L2064.44 1201.34 L2065.02 1201.34 L2065.61 1201.34 L2066.2 1201.34 L2066.78 1201.34 L2067.37 1201.34 L2067.96 1201.34 L2068.54 1201.34 L2069.13 1201.34 L2069.72 1201.34 L2070.3 1201.34 L2070.89 1201.34 L2071.48 1201.34 L2072.06 1201.34 L2072.65 1201.34 L2073.23 1201.34 L2073.82 1201.34 L2074.41 1201.34 L2074.99 1201.34 L2075.58 1201.34 L2076.17 1201.34 L2076.75 1201.34 L2077.34 1201.34 L2077.93 1201.34 L2078.51 1201.34 L2079.1 1201.34 L2079.68 1201.34 L2080.27 1201.34 L2080.86 1201.34 L2081.44 1201.34 L2082.03 1201.34 L2082.62 1201.34 L2083.2 1201.34 L2083.79 1201.34 L2084.38 1201.34 L2084.96 1201.34 L2085.55 1201.34 L2086.14 1201.34 L2086.72 1201.34 L2087.31 1201.34 L2087.89 1201.34 L2088.48 1201.34 L2089.07 1201.34 L2089.65 1201.34 L2090.24 1201.34 L2090.83 1201.34 L2091.41 1201.34 L2092 1201.34 L2092.59 1201.34 L2093.17 1201.34 L2093.76 1201.34 L2094.35 1201.34 L2094.93 1201.34 L2095.52 1201.34 L2096.1 1201.34 L2096.69 1201.34 L2097.28 1201.34 L2097.86 1201.34 L2098.45 1201.34 L2099.04 1201.34 L2099.62 1201.34 L2100.21 1201.34 L2100.8 1201.34 L2101.38 1201.34 L2101.97 1201.34 L2102.55 1201.34 L2103.14 1201.34 L2103.73 1201.34 L2104.31 1201.34 L2104.9 1201.34 L2105.49 1201.34 L2106.07 1201.34 L2106.66 1201.34 L2107.25 1201.34 L2107.83 1201.34 L2108.42 1201.34 L2109.01 1201.34 L2109.59 1201.34 L2110.18 1201.34 L2110.76 1201.34 L2111.35 1201.34 L2111.94 1201.34 L2112.52 1201.34 L2113.11 1201.34 L2113.7 1201.34 L2114.28 1201.34 L2114.87 1201.34 L2115.46 1201.34 L2116.04 1201.34 L2116.63 1201.34 L2117.22 1201.34 L2117.8 1201.34 L2118.39 1201.34 L2118.97 1201.34 L2119.56 1201.34 L2120.15 1201.34 L2120.73 1201.34 L2121.32 1201.34 L2121.91 1201.34 L2122.49 1201.34 L2123.08 1201.34 L2123.67 1201.34 L2124.25 1201.34 L2124.84 1201.34 L2125.42 1201.34 L2126.01 1201.34 L2126.6 1201.34 L2127.18 1201.34 L2127.77 1201.34 L2128.36 1201.34 L2128.94 1201.34 L2129.53 1201.34 L2130.12 1201.34 L2130.7 1201.34 L2131.29 1201.34 L2131.88 1201.34 L2132.46 1201.34 L2133.05 1201.34 L2133.63 1201.34 L2134.22 1201.34 L2134.81 1201.34 L2135.39 1201.34 L2135.98 1201.34 L2136.57 1201.34 L2137.15 1201.34 L2137.74 1201.34 L2138.33 1201.34 L2138.91 1201.34 L2139.5 1201.34 L2140.09 1201.34 L2140.67 1201.34 L2141.26 1201.34 L2141.84 1201.34 L2142.43 1201.34 L2143.02 1201.34 L2143.6 1201.34 L2144.19 1201.34 L2144.78 1201.34 L2145.36 1201.34 L2145.95 1201.34 L2146.54 1201.34 L2147.12 1201.34 L2147.71 1201.34 L2148.3 1201.34 L2148.88 1201.34 L2149.47 1201.34 L2150.05 1201.34 L2150.64 1201.34 L2151.23 1201.34 L2151.81 1201.34 L2152.4 1201.34 L2152.99 1201.34 L2153.57 1201.34 L2154.16 1201.34 L2154.75 1201.34 L2155.33 1201.34 L2155.92 1201.34 L2156.5 1201.34 L2157.09 1201.34 L2157.68 1201.34 L2158.26 1201.34 L2158.26 1201.18 L2157.68 1201.18 L2157.09 1201.18 L2156.5 1201.18 L2155.92 1201.18 L2155.33 1201.18 L2154.75 1201.18 L2154.16 1201.18 L2153.57 1201.18 L2152.99 1201.18 L2152.4 1201.18 L2151.81 1201.18 L2151.23 1201.18 L2150.64 1201.18 L2150.05 1201.18 L2149.47 1201.18 L2148.88 1201.18 L2148.3 1201.18 L2147.71 1201.18 L2147.12 1201.18 L2146.54 1201.18 L2145.95 1201.18 L2145.36 1201.18 L2144.78 1201.18 L2144.19 1201.18 L2143.6 1201.18 L2143.02 1201.18 L2142.43 1201.18 L2141.84 1201.18 L2141.26 1201.18 L2140.67 1201.18 L2140.09 1201.18 L2139.5 1201.18 L2138.91 1201.18 L2138.33 1201.18 L2137.74 1201.18 L2137.15 1201.18 L2136.57 1201.18 L2135.98 1201.18 L2135.39 1201.18 L2134.81 1201.18 L2134.22 1201.18 L2133.63 1201.18 L2133.05 1201.18 L2132.46 1201.18 L2131.88 1201.18 L2131.29 1201.18 L2130.7 1201.18 L2130.12 1201.18 L2129.53 1201.18 L2128.94 1201.18 L2128.36 1201.18 L2127.77 1201.18 L2127.18 1201.18 L2126.6 1201.18 L2126.01 1201.18 L2125.42 1201.18 L2124.84 1201.18 L2124.25 1201.18 L2123.67 1201.18 L2123.08 1201.18 L2122.49 1201.18 L2121.91 1201.18 L2121.32 1201.18 L2120.73 1201.18 L2120.15 1201.18 L2119.56 1201.18 L2118.97 1201.18 L2118.39 1201.18 L2117.8 1201.18 L2117.22 1201.18 L2116.63 1201.18 L2116.04 1201.18 L2115.46 1201.18 L2114.87 1201.18 L2114.28 1201.18 L2113.7 1201.18 L2113.11 1201.18 L2112.52 1201.18 L2111.94 1201.18 L2111.35 1201.18 L2110.76 1201.18 L2110.18 1201.18 L2109.59 1201.18 L2109.01 1201.18 L2108.42 1201.18 L2107.83 1201.18 L2107.25 1201.18 L2106.66 1201.18 L2106.07 1201.18 L2105.49 1201.18 L2104.9 1201.18 L2104.31 1201.18 L2103.73 1201.18 L2103.14 1201.18 L2102.55 1201.18 L2101.97 1201.18 L2101.38 1201.18 L2100.8 1201.18 L2100.21 1201.18 L2099.62 1201.18 L2099.04 1201.18 L2098.45 1201.18 L2097.86 1201.18 L2097.28 1201.18 L2096.69 1201.18 L2096.1 1201.18 L2095.52 1201.18 L2094.93 1201.18 L2094.35 1201.18 L2093.76 1201.18 L2093.17 1201.18 L2092.59 1201.18 L2092 1201.18 L2091.41 1201.18 L2090.83 1201.18 L2090.24 1201.18 L2089.65 1201.18 L2089.07 1201.18 L2088.48 1201.18 L2087.89 1201.18 L2087.31 1201.18 L2086.72 1201.18 L2086.14 1201.18 L2085.55 1201.18 L2084.96 1201.18 L2084.38 1201.18 L2083.79 1201.18 L2083.2 1201.18 L2082.62 1201.18 L2082.03 1201.18 L2081.44 1201.18 L2080.86 1201.18 L2080.27 1201.18 L2079.68 1201.18 L2079.1 1201.18 L2078.51 1201.18 L2077.93 1201.18 L2077.34 1201.18 L2076.75 1201.18 L2076.17 1201.18 L2075.58 1201.18 L2074.99 1201.18 L2074.41 1201.18 L2073.82 1201.18 L2073.23 1201.18 L2072.65 1201.18 L2072.06 1201.18 L2071.48 1201.18 L2070.89 1201.18 L2070.3 1201.18 L2069.72 1201.18 L2069.13 1201.18 L2068.54 1201.18 L2067.96 1201.18 L2067.37 1201.18 L2066.78 1201.18 L2066.2 1201.18 L2065.61 1201.18 L2065.02 1201.18 L2064.44 1201.18 L2063.85 1201.18 L2063.27 1201.18 L2062.68 1201.18 L2062.09 1201.18 L2061.51 1201.18 L2060.92 1201.18 L2060.33 1201.18 L2059.75 1201.18 L2059.16 1201.18 L2058.57 1201.18 L2057.99 1201.18 L2057.4 1201.18 L2056.81 1201.18 L2056.23 1201.18 L2055.64 1201.18 L2055.06 1201.18 L2054.47 1201.18 L2053.88 1201.18 L2053.3 1201.18 L2052.71 1201.18 L2052.12 1201.18 L2051.54 1201.18 L2050.95 1201.18 L2050.36 1201.18 L2049.78 1201.18 L2049.19 1201.18 L2048.6 1201.18 L2048.02 1201.18 L2047.43 1201.18 L2046.85 1201.18 L2046.26 1201.18 L2045.67 1201.18 L2045.09 1201.18 L2044.5 1201.18 L2043.91 1201.18 L2043.33 1201.18 L2042.74 1201.18 L2042.15 1201.18 L2041.57 1201.18 L2040.98 1201.18 L2040.4 1201.18 L2039.81 1201.18 L2039.22 1201.18 L2038.64 1201.18 L2038.05 1201.18 L2037.46 1201.18 L2036.88 1201.18 L2036.29 1201.18 L2035.7 1201.18 L2035.12 1201.18 L2034.53 1201.18 L2033.94 1201.18 L2033.36 1201.18 L2032.77 1201.18 L2032.19 1201.18 L2031.6 1201.18 L2031.01 1201.18 L2030.43 1201.18 L2029.84 1201.18 L2029.25 1201.18 L2028.67 1201.18 L2028.08 1201.18 L2027.49 1201.18 L2026.91 1201.18 L2026.32 1201.18 L2025.73 1201.18 L2025.15 1201.18 L2024.56 1201.18 L2023.98 1201.18 L2023.39 1201.18 L2022.8 1201.18 L2022.22 1201.18 L2021.63 1201.18 L2021.04 1201.18 L2020.46 1201.18 L2019.87 1201.18 L2019.28 1201.18 L2018.7 1201.18 L2018.11 1201.18 L2017.53 1201.18 L2016.94 1201.18 L2016.35 1201.18 L2015.77 1201.18 L2015.18 1201.18 L2014.59 1201.18 L2014.01 1201.18 L2013.42 1201.18 L2012.83 1201.18 L2012.25 1201.18 L2011.66 1201.18 L2011.07 1201.18 L2010.49 1201.18 L2009.9 1201.18 L2009.32 1201.18 L2008.73 1201.18 L2008.14 1201.18 L2007.56 1201.18 L2006.97 1201.18 L2006.38 1201.18 L2005.8 1201.18 L2005.21 1201.18 L2004.62 1201.18 L2004.04 1201.18 L2003.45 1201.18 L2002.86 1201.18 L2002.28 1201.18 L2001.69 1201.18 L2001.11 1201.18 L2000.52 1201.18 L1999.93 1201.18 L1999.35 1201.18 L1998.76 1201.18 L1998.17 1201.18 L1997.59 1201.18 L1997 1201.18 L1996.41 1201.18 L1995.83 1201.18 L1995.24 1201.18 L1994.65 1201.18 L1994.07 1201.18 L1993.48 1201.18 L1992.9 1201.18 L1992.31 1201.18 L1991.72 1201.18 L1991.14 1201.18 L1990.55 1201.18 L1989.96 1201.18 L1989.38 1201.18 L1988.79 1201.18 L1988.2 1201.18 L1987.62 1201.18 L1987.03 1201.18 L1986.45 1201.18 L1985.86 1201.18 L1985.27 1201.18 L1984.69 1201.18 L1984.1 1201.18 L1983.51 1201.18 L1982.93 1201.18 L1982.34 1201.18 L1981.75 1201.18 L1981.17 1201.18 L1980.58 1201.18 L1979.99 1201.18 L1979.41 1201.18 L1978.82 1201.18 L1978.24 1201.18 L1977.65 1201.18 L1977.06 1201.18 L1976.48 1201.18 L1975.89 1201.18 L1975.3 1201.18 L1974.72 1201.18 L1974.13 1201.18 L1973.54 1201.18 L1972.96 1201.18 L1972.37 1201.18 L1971.78 1201.18 L1971.2 1201.18 L1970.61 1201.18 L1970.03 1201.18 L1969.44 1201.18 L1968.85 1201.18 L1968.27 1201.18 L1967.68 1201.18 L1967.09 1201.18 L1966.51 1201.18 L1965.92 1201.18 L1965.33 1201.18 L1964.75 1201.18 L1964.16 1201.18 L1963.58 1201.18 L1962.99 1201.18 L1962.4 1201.18 L1961.82 1201.18 L1961.23 1201.18 L1960.64 1201.18 L1960.06 1201.18 L1959.47 1201.18 L1958.88 1201.18 L1958.3 1201.18 L1957.71 1201.18 L1957.12 1201.18 L1956.54 1201.18 L1955.95 1201.18 L1955.37 1201.18 L1954.78 1201.18 L1954.19 1201.18 L1953.61 1201.18 L1953.02 1201.18 L1952.43 1201.18 L1951.85 1201.18 L1951.26 1201.18 L1950.67 1201.18 L1950.09 1201.18 L1949.5 1201.18 L1948.91 1201.18 L1948.33 1201.18 L1947.74 1201.18 L1947.16 1201.18 L1946.57 1201.18 L1945.98 1201.18 L1945.4 1201.18 L1944.81 1201.18 L1944.22 1201.18 L1943.64 1201.18 L1943.05 1201.18 L1942.46 1201.18 L1941.88 1201.18 L1941.29 1201.18 L1940.71 1201.18 L1940.12 1201.18 L1939.53 1201.18 L1938.95 1201.18 L1938.36 1201.18 L1937.77 1201.18 L1937.19 1201.18 L1936.6 1201.18 L1936.01 1201.18 L1935.43 1201.18 L1934.84 1201.18 L1934.25 1201.18 L1933.67 1201.18 L1933.08 1201.18 L1932.5 1201.18 L1931.91 1201.18 L1931.32 1201.18 L1930.74 1201.18 L1930.15 1201.18 L1929.56 1201.18 L1928.98 1201.18 L1928.39 1201.18 L1927.8 1201.18 L1927.22 1201.18 L1926.63 1201.18 L1926.04 1201.18 L1925.46 1201.18 L1924.87 1201.18 L1924.29 1201.18 L1923.7 1201.18 L1923.11 1201.18 L1922.53 1201.18 L1921.94 1201.18 L1921.35 1201.18 L1920.77 1201.18 L1920.18 1201.18 L1919.59 1201.18 L1919.01 1201.18 L1918.42 1201.18 L1917.83 1201.18 L1917.25 1201.18 L1916.66 1201.18 L1916.08 1201.18 L1915.49 1201.18 L1914.9 1201.18 L1914.32 1201.18 L1913.73 1201.18 L1913.14 1201.18 L1912.56 1201.18 L1911.97 1201.18 L1911.38 1201.18 L1910.8 1201.18 L1910.21 1201.18 L1909.63 1201.18 L1909.04 1201.18 L1908.45 1201.18 L1907.87 1201.18 L1907.28 1201.18 L1906.69 1201.18 L1906.11 1201.18 L1905.52 1201.18 L1904.93 1201.18 L1904.35 1201.18 L1903.76 1201.18 L1903.17 1201.18 L1902.59 1201.18 L1902 1201.18 L1901.42 1201.18 L1900.83 1201.18 L1900.24 1201.18 L1899.66 1201.18 L1899.07 1201.18 L1898.48 1201.18 L1897.9 1201.18 L1897.31 1201.18 L1896.72 1201.18 L1896.14 1201.18 L1895.55 1201.18 L1894.96 1201.18 L1894.38 1201.18 L1893.79 1201.18 L1893.21 1201.18 L1892.62 1201.18 L1892.03 1201.18 L1891.45 1201.18 L1890.86 1201.18 L1890.27 1201.18 L1889.69 1201.18 L1889.1 1201.18 L1888.51 1201.18 L1887.93 1201.18 L1887.34 1201.18 L1886.76 1201.18 L1886.17 1201.18 L1885.58 1201.18 L1885 1201.18 L1884.41 1201.18 L1883.82 1201.18 L1883.24 1201.18 L1882.65 1201.18 L1882.06 1201.18 L1881.48 1201.18 L1880.89 1201.18 L1880.3 1201.18 L1879.72 1201.18 L1879.13 1201.18 L1878.55 1201.18 L1877.96 1201.18 L1877.37 1201.18 L1876.79 1201.18 L1876.2 1201.18 L1875.61 1201.18 L1875.03 1201.18 L1874.44 1201.18 L1873.85 1201.18 L1873.27 1201.18 L1872.68 1201.18 L1872.09 1201.18 L1871.51 1201.18 L1870.92 1201.18 L1870.34 1201.18 L1869.75 1201.18 L1869.16 1201.18 L1868.58 1201.18 L1867.99 1201.18 L1867.4 1201.18 L1866.82 1201.18 L1866.23 1201.18 L1865.64 1201.18 L1865.06 1201.18 L1864.47 1201.18 L1863.88 1201.18 L1863.3 1201.18 L1862.71 1201.18 L1862.13 1201.18 L1861.54 1201.18 L1860.95 1201.18 L1860.37 1201.18 L1859.78 1201.18 L1859.19 1201.18 L1858.61 1201.18 L1858.02 1201.18 L1857.43 1201.18 L1856.85 1201.18 L1856.26 1201.18 L1855.68 1201.18 L1855.09 1201.18 L1854.5 1201.18 L1853.92 1201.18 L1853.33 1201.18 L1852.74 1201.18 L1852.16 1201.18 L1851.57 1201.18 L1850.98 1201.18 L1850.4 1201.18 L1849.81 1201.18 L1849.22 1201.18 L1848.64 1201.18 L1848.05 1201.18 L1847.47 1201.18 L1846.88 1201.18 L1846.29 1201.18 L1845.71 1201.18 L1845.12 1201.18 L1844.53 1201.18 L1843.95 1201.18 L1843.36 1201.18 L1842.77 1201.18 L1842.19 1201.18 L1841.6 1201.18 L1841.01 1201.18 L1840.43 1201.18 L1839.84 1201.18 L1839.26 1201.18 L1838.67 1201.18 L1838.08 1201.18 L1837.5 1201.18 L1836.91 1201.18 L1836.32 1201.18 L1835.74 1201.18 L1835.15 1201.18 L1834.56 1201.18 L1833.98 1201.18 L1833.39 1201.18 L1832.81 1201.18 L1832.22 1201.18 L1831.63 1201.18 L1831.05 1201.18 L1830.46 1201.18 L1829.87 1201.18 L1829.29 1201.18 L1828.7 1201.18 L1828.11 1201.18 L1827.53 1201.18 L1826.94 1201.18 L1826.35 1201.18 L1825.77 1201.18 L1825.18 1201.18 L1824.6 1201.18 L1824.01 1201.18 L1823.42 1201.18 L1822.84 1201.18 L1822.25 1201.18 L1821.66 1201.18 L1821.08 1201.18 L1820.49 1201.18 L1819.9 1201.18 L1819.32 1201.18 L1818.73 1201.18 L1818.14 1201.18 L1817.56 1201.18 L1816.97 1201.18 L1816.39 1201.18 L1815.8 1201.18 L1815.21 1201.18 L1814.63 1201.18 L1814.04 1201.18 L1813.45 1201.18 L1812.87 1201.18 L1812.28 1201.18 L1811.69 1201.18 L1811.11 1201.18 L1810.52 1201.18 L1809.94 1201.18 L1809.35 1201.18 L1808.76 1201.18 L1808.18 1201.18 L1807.59 1201.18 L1807 1201.18 L1806.42 1201.18 L1805.83 1201.18 L1805.24 1201.18 L1804.66 1201.18 L1804.07 1201.18 L1803.48 1201.18 L1802.9 1201.18 L1802.31 1201.18 L1801.73 1201.18 L1801.14 1201.18 L1800.55 1201.18 L1799.97 1201.18 L1799.38 1201.18 L1798.79 1201.18 L1798.21 1201.18 L1797.62 1201.18 L1797.03 1201.18 L1796.45 1201.18 L1795.86 1201.18 L1795.27 1201.18 L1794.69 1201.18 L1794.1 1201.18 L1793.52 1201.18 L1792.93 1201.18 L1792.34 1201.18 L1791.76 1201.18 L1791.17 1201.18 L1790.58 1201.18 L1790 1201.18 L1789.41 1201.18 L1788.82 1201.18 L1788.24 1201.18 L1787.65 1201.18 L1787.06 1201.18 L1786.48 1201.18 L1785.89 1201.18 L1785.31 1201.18 L1784.72 1201.18 L1784.13 1201.18 L1783.55 1201.18 L1782.96 1201.18 L1782.37 1201.18 L1781.79 1201.18 L1781.2 1201.18 L1780.61 1201.18 L1780.03 1201.18 L1779.44 1201.18 L1778.86 1201.18 L1778.27 1201.18 L1777.68 1201.18 L1777.1 1201.18 L1776.51 1201.18 L1775.92 1201.18 L1775.34 1201.18 L1774.75 1201.18 L1774.16 1201.18 L1773.58 1201.18 L1772.99 1201.18 L1772.4 1201.18 L1771.82 1201.18 L1771.23 1201.18 L1770.65 1201.18 L1770.06 1201.18 L1769.47 1201.18 L1768.89 1201.18 L1768.3 1201.18 L1767.71 1201.18 L1767.13 1201.18 L1766.54 1201.18 L1765.95 1201.18 L1765.37 1201.18 L1764.78 1201.18 L1764.19 1201.18 L1763.61 1201.18 L1763.02 1201.18 L1762.44 1201.18 L1761.85 1201.18 L1761.26 1201.18 L1760.68 1201.18 L1760.09 1201.18 L1759.5 1201.18 L1758.92 1201.18 L1758.33 1201.18 L1757.74 1201.18 L1757.16 1201.18 L1756.57 1201.18 L1755.99 1201.18 L1755.4 1201.18 L1754.81 1201.18 L1754.23 1201.18 L1753.64 1201.18 L1753.05 1201.18 L1752.47 1201.18 L1751.88 1201.18 L1751.29 1201.18 L1750.71 1201.18 L1750.12 1201.18 L1749.53 1201.18 L1748.95 1201.18 L1748.36 1201.18 L1747.78 1201.18 L1747.19 1201.18 L1746.6 1201.18 L1746.02 1201.18 L1745.43 1201.18 L1744.84 1201.18 L1744.26 1201.18 L1743.67 1201.18 L1743.08 1201.18 L1742.5 1201.18 L1741.91 1201.18 L1741.32 1201.18 L1740.74 1201.18 L1740.15 1201.18 L1739.57 1201.18 L1738.98 1201.18 L1738.39 1201.18 L1737.81 1201.18 L1737.22 1201.18 L1736.63 1201.18 L1736.05 1201.18 L1735.46 1201.18 L1734.87 1201.18 L1734.29 1201.18 L1733.7 1201.18 L1733.11 1201.18 L1732.53 1201.18 L1731.94 1201.18 L1731.36 1201.18 L1730.77 1201.18 L1730.18 1201.18 L1729.6 1201.18 L1729.01 1201.18 L1728.42 1201.18 L1727.84 1201.18 L1727.25 1201.18 L1726.66 1201.18 L1726.08 1201.18 L1725.49 1201.18 L1724.91 1201.18 L1724.32 1201.18 L1723.73 1201.18 L1723.15 1201.18 L1722.56 1201.18 L1721.97 1201.18 L1721.39 1201.18 L1720.8 1201.18 L1720.21 1201.18 L1719.63 1201.18 L1719.04 1201.18 L1718.45 1201.18 L1717.87 1201.18 L1717.28 1201.18 L1716.7 1201.18 L1716.11 1201.18 L1715.52 1201.18 L1714.94 1201.18 L1714.35 1201.18 L1713.76 1201.18 L1713.18 1201.18 L1712.59 1201.18 L1712 1201.18 L1711.42 1201.18 L1710.83 1201.18 L1710.24 1201.18 L1709.66 1201.18 L1709.07 1201.18 L1708.49 1201.18 L1707.9 1201.18 L1707.31 1201.18 L1706.73 1201.18 L1706.14 1201.18 L1705.55 1201.18 L1704.97 1201.18 L1704.38 1201.18 L1703.79 1201.18 L1703.21 1201.18 L1702.62 1201.18 L1702.04 1201.18 L1701.45 1201.18 L1700.86 1201.18 L1700.28 1201.18 L1699.69 1201.18 L1699.1 1201.18 L1698.52 1201.18 L1697.93 1201.18 L1697.34 1201.18 L1696.76 1201.18 L1696.17 1201.18 L1695.58 1201.18 L1695 1201.18 L1694.41 1201.18 L1693.83 1201.18 L1693.24 1201.18 L1692.65 1201.18 L1692.07 1201.18 L1691.48 1201.18 L1690.89 1201.18 L1690.31 1201.18 L1689.72 1201.18 L1689.13 1201.18 L1688.55 1201.18 L1687.96 1201.18 L1687.37 1201.18 L1686.79 1201.18 L1686.2 1201.18 L1685.62 1201.18 L1685.03 1201.18 L1684.44 1201.18 L1683.86 1201.18 L1683.27 1201.18 L1682.68 1201.18 L1682.1 1201.18 L1681.51 1201.18 L1680.92 1201.18 L1680.34 1201.18 L1679.75 1201.18 L1679.17 1201.18 L1678.58 1201.18 L1677.99 1201.18 L1677.41 1201.18 L1676.82 1201.18 L1676.23 1201.18 L1675.65 1201.18 L1675.06 1201.18 L1674.47 1201.18 L1673.89 1201.18 L1673.3 1201.18 L1672.71 1201.18 L1672.13 1201.18 L1671.54 1201.18 L1670.96 1201.18 L1670.37 1201.18 L1669.78 1201.18 L1669.2 1201.18 L1668.61 1201.18 L1668.02 1201.18 L1667.44 1201.18 L1666.85 1201.18 L1666.26 1201.18 L1665.68 1201.18 L1665.09 1201.18 L1664.5 1201.18 L1663.92 1201.18 L1663.33 1201.18 L1662.75 1201.18 L1662.16 1201.18 L1661.57 1201.18 L1660.99 1201.18 L1660.4 1201.18 L1659.81 1201.18 L1659.23 1201.18 L1658.64 1201.18 L1658.05 1201.18 L1657.47 1201.18 L1656.88 1201.18 L1656.29 1201.18 L1655.71 1201.18 L1655.12 1201.18 L1654.54 1201.18 L1653.95 1201.18 L1653.36 1201.18 L1652.78 1201.18 L1652.19 1201.18 L1651.6 1201.18 L1651.02 1201.18 L1650.43 1201.18 L1649.84 1201.18 L1649.26 1201.18 L1648.67 1201.18 L1648.09 1201.18 L1647.5 1201.18 L1646.91 1201.18 L1646.33 1201.18 L1645.74 1201.18 L1645.15 1201.18 L1644.57 1201.18 L1643.98 1201.18 L1643.39 1201.18 L1642.81 1201.18 L1642.22 1201.18 L1641.63 1201.18 L1641.05 1201.18 L1640.46 1201.18 L1639.88 1201.18 L1639.29 1201.18 L1638.7 1201.18 L1638.12 1201.18 L1637.53 1201.18 L1636.94 1201.18 L1636.36 1201.18 L1635.77 1201.18 L1635.18 1201.18 L1634.6 1201.18 L1634.01 1201.18 L1633.42 1201.18 L1632.84 1201.18 L1632.25 1201.18 L1631.67 1201.18 L1631.08 1201.18 L1630.49 1201.18 L1629.91 1201.18 L1629.32 1201.18 L1628.73 1201.18 L1628.15 1201.18 L1627.56 1201.18 L1626.97 1201.18 L1626.39 1201.18 L1625.8 1201.18 L1625.22 1201.18 L1624.63 1201.18 L1624.04 1201.18 L1623.46 1201.18 L1622.87 1201.18 L1622.28 1201.18 L1621.7 1201.18 L1621.11 1201.18 L1620.52 1201.18 L1619.94 1201.18 L1619.35 1201.18 L1618.76 1201.18 L1618.18 1201.18 L1617.59 1201.18 L1617.01 1201.18 L1616.42 1201.18 L1615.83 1201.18 L1615.25 1201.18 L1614.66 1201.18 L1614.07 1201.18 L1613.49 1201.18 L1612.9 1201.18 L1612.31 1201.18 L1611.73 1201.18 L1611.14 1201.18 L1610.55 1201.18 L1609.97 1201.18 L1609.38 1201.18 L1608.8 1201.18 L1608.21 1201.18 L1607.62 1201.18 L1607.04 1201.18 L1606.45 1201.18 L1605.86 1201.18 L1605.28 1201.18 L1604.69 1201.18 L1604.1 1201.18 L1603.52 1201.18 L1602.93 1201.18 L1602.34 1201.18 L1601.76 1201.18 L1601.17 1201.18 L1600.59 1201.18 L1600 1201.18 L1599.41 1201.18 L1598.83 1201.18 L1598.24 1201.18 L1597.65 1201.18 L1597.07 1201.18 L1596.48 1201.18 L1595.89 1201.18 L1595.31 1201.18 L1594.72 1201.18 L1594.14 1201.18 L1593.55 1201.18 L1592.96 1201.18 L1592.38 1201.18 L1591.79 1201.18 L1591.2 1201.18 L1590.62 1201.18 L1590.03 1201.18 L1589.44 1201.18 L1588.86 1201.18 L1588.27 1201.18 L1587.68 1201.18 L1587.1 1201.18 L1586.51 1201.18 L1585.93 1201.18 L1585.34 1201.18 L1584.75 1201.18 L1584.17 1201.18 L1583.58 1201.18 L1582.99 1201.18 L1582.41 1201.18 L1581.82 1201.18 L1581.23 1201.18 L1580.65 1201.18 L1580.06 1201.18 L1579.47 1201.18 L1578.89 1201.18 L1578.3 1201.18 L1577.72 1201.18 L1577.13 1201.18 L1576.54 1201.18 L1575.96 1201.18 L1575.37 1201.18 L1574.78 1201.18 L1574.2 1201.18 L1573.61 1201.18 L1573.02 1201.18 L1572.44 1201.18 L1571.85 1201.18 L1571.27 1201.18 L1570.68 1201.18 L1570.09 1201.18 L1569.51 1201.18 L1568.92 1201.18 L1568.33 1201.18 L1567.75 1201.18 L1567.16 1201.18 L1566.57 1201.18 L1565.99 1201.18 L1565.4 1201.18 L1564.81 1201.18 L1564.23 1201.18 L1563.64 1201.18 L1563.06 1201.18 L1562.47 1201.18 L1561.88 1201.18 L1561.3 1201.18 L1560.71 1201.18 L1560.12 1201.18 L1559.54 1201.18 L1558.95 1201.18 L1558.36 1201.18 L1557.78 1201.18 L1557.19 1201.18 L1556.6 1201.18 L1556.02 1201.18 L1555.43 1201.18 L1554.85 1201.18 L1554.26 1201.18 L1553.67 1201.18 L1553.09 1201.18 L1552.5 1201.18 L1551.91 1201.18 L1551.33 1201.18 L1550.74 1201.18 L1550.15 1201.18 L1549.57 1201.18 L1548.98 1201.18 L1548.4 1201.18 L1547.81 1201.18 L1547.22 1201.18 L1546.64 1201.18 L1546.05 1201.18 L1545.46 1201.18 L1544.88 1201.18 L1544.29 1201.18 L1543.7 1201.18 L1543.12 1201.18 L1542.53 1201.18 L1541.94 1201.18 L1541.36 1201.18 L1540.77 1201.18 L1540.19 1201.18 L1539.6 1201.18 L1539.01 1201.18 L1538.43 1201.18 L1537.84 1201.18 L1537.25 1201.18 L1536.67 1201.18 L1536.08 1201.18 L1535.49 1201.18 L1534.91 1201.18 L1534.32 1201.18 L1533.73 1201.18 L1533.15 1201.18 L1532.56 1201.18 L1531.98 1201.18 L1531.39 1201.18 L1530.8 1201.18 L1530.22 1201.18 L1529.63 1201.18 L1529.04 1201.18 L1528.46 1201.18 L1527.87 1201.18 L1527.28 1201.18 L1526.7 1201.18 L1526.11 1201.18 L1525.52 1201.18 L1524.94 1201.18 L1524.35 1201.18 L1523.77 1201.18 L1523.18 1201.18 L1522.59 1201.18 L1522.01 1201.18 L1521.42 1201.18 L1520.83 1201.18 L1520.25 1201.18 L1519.66 1201.18 L1519.07 1201.18 L1518.49 1201.18 L1517.9 1201.18 L1517.32 1201.18 L1516.73 1201.18 L1516.14 1201.18 L1515.56 1201.18 L1514.97 1201.18 L1514.38 1201.18 L1513.8 1201.18 L1513.21 1201.18 L1512.62 1201.18 L1512.04 1201.18 L1511.45 1201.18 L1510.86 1201.18 L1510.28 1201.18 L1509.69 1201.18 L1509.11 1201.18 L1508.52 1201.18 L1507.93 1201.18 L1507.35 1201.18 L1506.76 1201.18 L1506.17 1201.18 L1505.59 1201.18 L1505 1201.18 L1504.41 1201.18 L1503.83 1201.18 L1503.24 1201.18 L1502.65 1201.18 L1502.07 1201.18 L1501.48 1201.18 L1500.9 1201.18 L1500.31 1201.18 L1499.72 1201.18 L1499.14 1201.18 L1498.55 1201.18 L1497.96 1201.18 L1497.38 1201.18 L1496.79 1201.18 L1496.2 1201.18 L1495.62 1201.18 L1495.03 1201.18 L1494.45 1201.18 L1493.86 1201.18 L1493.27 1201.18 L1492.69 1201.18 L1492.1 1201.18 L1491.51 1201.18 L1490.93 1201.18 L1490.34 1201.18 L1489.75 1201.18 L1489.17 1201.18 L1488.58 1201.18 L1487.99 1201.18 L1487.41 1201.18 L1486.82 1201.18 L1486.24 1201.18 L1485.65 1201.18 L1485.06 1201.18 L1484.48 1201.18 L1483.89 1201.18 L1483.3 1201.18 L1482.72 1201.18 L1482.13 1201.18 L1481.54 1201.18 L1480.96 1201.18 L1480.37 1201.18 L1479.78 1201.18 L1479.2 1201.18 L1478.61 1201.18 L1478.03 1201.18 L1477.44 1201.18 L1476.85 1201.18 L1476.27 1201.18 L1475.68 1201.18 L1475.09 1201.18 L1474.51 1201.18 L1473.92 1201.18 L1473.33 1201.18 L1472.75 1201.18 L1472.16 1201.18 L1471.57 1201.18 L1470.99 1201.18 L1470.4 1201.18 L1469.82 1201.18 L1469.23 1201.18 L1468.64 1201.18 L1468.06 1201.18 L1467.47 1201.18 L1466.88 1201.18 L1466.3 1201.18 L1465.71 1201.18 L1465.12 1201.18 L1464.54 1201.18 L1463.95 1201.18 L1463.37 1201.18 L1462.78 1201.18 L1462.19 1201.18 L1461.61 1201.18 L1461.02 1201.18 L1460.43 1201.18 L1459.85 1201.18 L1459.26 1201.18 L1458.67 1201.18 L1458.09 1201.18 L1457.5 1201.18 L1456.91 1201.18 L1456.33 1201.18 L1455.74 1201.18 L1455.16 1201.18 L1454.57 1201.18 L1453.98 1201.18 L1453.4 1201.18 L1452.81 1201.18 L1452.22 1201.18 L1451.64 1201.18 L1451.05 1201.18 L1450.46 1201.18 L1449.88 1201.18 L1449.29 1201.18 L1448.7 1201.18 L1448.12 1201.18 L1447.53 1201.18 L1446.95 1201.18 L1446.36 1201.18 L1445.77 1201.18 L1445.19 1201.18 L1444.6 1201.18 L1444.01 1201.18 L1443.43 1201.18 L1442.84 1201.18 L1442.25 1201.18 L1441.67 1201.18 L1441.08 1201.18 L1440.5 1201.18 L1439.91 1201.18 L1439.32 1201.18 L1438.74 1201.18 L1438.15 1201.18 L1437.56 1201.18 L1436.98 1201.18 L1436.39 1201.18 L1435.8 1201.18 L1435.22 1201.18 L1434.63 1201.18 L1434.04 1201.18 L1433.46 1201.18 L1432.87 1201.18 L1432.29 1201.18 L1431.7 1201.18 L1431.11 1201.18 L1430.53 1201.18 L1429.94 1201.18 L1429.35 1201.18 L1428.77 1201.18 L1428.18 1201.18 L1427.59 1201.18 L1427.01 1201.18 L1426.42 1201.18 L1425.83 1201.18 L1425.25 1201.18 L1424.66 1201.18 L1424.08 1201.18 L1423.49 1201.18 L1422.9 1201.18 L1422.32 1201.18 L1421.73 1201.18 L1421.14 1201.18 L1420.56 1201.18 L1419.97 1201.18 L1419.38 1201.18 L1418.8 1201.18 L1418.21 1201.18 L1417.63 1201.18 L1417.04 1201.18 L1416.45 1201.18 L1415.87 1201.18 L1415.28 1201.18 L1414.69 1201.18 L1414.11 1201.18 L1413.52 1201.18 L1412.93 1201.18 L1412.35 1201.18 L1411.76 1201.18 L1411.17 1201.18 L1410.59 1201.18 L1410 1201.18 L1409.42 1201.18 L1408.83 1201.18 L1408.24 1201.18 L1407.66 1201.18 L1407.07 1201.18 L1406.48 1201.18 L1405.9 1201.18 L1405.31 1201.18 L1404.72 1201.18 L1404.14 1201.18 L1403.55 1201.18 L1402.96 1201.18 L1402.38 1201.18 L1401.79 1201.18 L1401.21 1201.18 L1400.62 1201.18 L1400.03 1201.18 L1399.45 1201.18 L1398.86 1201.18 L1398.27 1201.18 L1397.69 1201.18 L1397.1 1201.18 L1396.51 1201.18 L1395.93 1201.18 L1395.34 1201.18 L1394.75 1201.18 L1394.17 1201.18 L1393.58 1201.18 L1393 1201.18 L1392.41 1201.18 L1391.82 1201.18 L1391.24 1201.18 L1390.65 1201.18 L1390.06 1201.18 L1389.48 1201.18 L1388.89 1201.18 L1388.3 1201.18 L1387.72 1201.18 L1387.13 1201.18 L1386.55 1201.18 L1385.96 1201.18 L1385.37 1201.18 L1384.79 1201.18 L1384.2 1201.18 L1383.61 1201.18 L1383.03 1201.18 L1382.44 1201.18 L1381.85 1201.18 L1381.27 1201.18 L1380.68 1201.18 L1380.09 1201.18 L1379.51 1201.18 L1378.92 1201.18 L1378.34 1201.18 L1377.75 1201.18 L1377.16 1201.18 L1376.58 1201.18 L1375.99 1201.18 L1375.4 1201.18 L1374.82 1201.18 L1374.23 1201.18 L1373.64 1201.18 L1373.06 1201.18 L1372.47 1201.18 L1371.88 1201.18 L1371.3 1201.18 L1370.71 1201.18 L1370.13 1201.18 L1369.54 1201.18 L1368.95 1201.18 L1368.37 1201.18 L1367.78 1201.18 L1367.19 1201.18 L1366.61 1201.18 L1366.02 1201.18 L1365.43 1201.18 L1364.85 1201.18 L1364.26 1201.18 L1363.68 1201.18 L1363.09 1201.18 L1362.5 1201.18 L1361.92 1201.18 L1361.33 1201.18 L1360.74 1201.18 L1360.16 1201.18 L1359.57 1201.18 L1358.98 1201.18 L1358.4 1201.18 L1357.81 1201.18 L1357.22 1201.18 L1356.64 1201.18 L1356.05 1201.18 L1355.47 1201.18 L1354.88 1201.18 L1354.29 1201.18 L1353.71 1201.18 L1353.12 1201.18 L1352.53 1201.18 L1351.95 1201.18 L1351.36 1201.18 L1350.77 1201.18 L1350.19 1201.18 L1349.6 1201.18 L1349.01 1201.18 L1348.43 1201.18 L1347.84 1201.18 L1347.26 1201.18 L1346.67 1201.18 L1346.08 1201.18 L1345.5 1201.18 L1344.91 1201.18 L1344.32 1201.18 L1343.74 1201.18 L1343.15 1201.18 L1342.56 1201.18 L1341.98 1201.18 L1341.39 1201.18 L1340.8 1201.18 L1340.22 1201.18 L1339.63 1201.18 L1339.05 1201.18 L1338.46 1201.18 L1337.87 1201.18 L1337.29 1201.18 L1336.7 1201.18 L1336.11 1201.18 L1335.53 1201.18 L1334.94 1201.18 L1334.35 1201.18 L1333.77 1201.18 L1333.18 1201.18 L1332.6 1201.18 L1332.01 1201.18 L1331.42 1201.18 L1330.84 1201.18 L1330.25 1201.18 L1329.66 1201.18 L1329.08 1201.18 L1328.49 1201.18 L1327.9 1201.18 L1327.32 1201.18 L1326.73 1201.18 L1326.14 1201.18 L1325.56 1201.18 L1324.97 1201.18 L1324.39 1201.18 L1323.8 1201.18 L1323.21 1201.18 L1322.63 1201.18 L1322.04 1201.18 L1321.45 1201.18 L1320.87 1201.18 L1320.28 1201.18 L1319.69 1201.18 L1319.11 1201.18 L1318.52 1201.18 L1317.93 1201.18 L1317.35 1201.18 L1316.76 1201.18 L1316.18 1201.18 L1315.59 1201.18 L1315 1201.18 L1314.42 1201.18 L1313.83 1201.18 L1313.24 1201.18 L1312.66 1201.18 L1312.07 1201.18 L1311.48 1201.18 L1310.9 1201.18 L1310.31 1201.18 L1309.73 1201.18 L1309.14 1201.18 L1308.55 1201.18 L1307.97 1201.18 L1307.38 1201.18 L1306.79 1201.18 L1306.21 1201.18 L1305.62 1201.18 L1305.03 1201.18 L1304.45 1201.18 L1303.86 1201.18 L1303.27 1201.18 L1302.69 1201.18 L1302.1 1201.18 L1301.52 1201.18 L1300.93 1201.18 L1300.34 1201.18 L1299.76 1201.18 L1299.17 1201.18 L1298.58 1201.18 L1298 1201.18 L1297.41 1201.18 L1296.82 1201.18 L1296.24 1201.18 L1295.65 1201.18 L1295.06 1201.18 L1294.48 1201.18 L1293.89 1201.18 L1293.31 1201.18 L1292.72 1201.18 L1292.13 1201.18 L1291.55 1201.18 L1290.96 1201.18 L1290.37 1201.18 L1289.79 1201.18 L1289.2 1201.18 L1288.61 1201.18 L1288.03 1201.18 L1287.44 1201.18 L1286.86 1201.18 L1286.27 1201.18 L1285.68 1201.18 L1285.1 1201.18 L1284.51 1201.18 L1283.92 1201.18 L1283.34 1201.18 L1282.75 1201.18 L1282.16 1201.18 L1281.58 1201.18 L1280.99 1201.18 L1280.4 1201.18 L1279.82 1201.18 L1279.23 1201.18 L1278.65 1201.18 L1278.06 1201.18 L1277.47 1201.18 L1276.89 1201.18 L1276.3 1201.18 L1275.71 1201.18 L1275.13 1201.18 L1274.54 1201.18 L1273.95 1201.18 L1273.37 1201.18 L1272.78 1201.18 L1272.19 1201.18 L1271.61 1201.18 L1271.02 1201.18 L1270.44 1201.18 L1269.85 1201.18 L1269.26 1201.18 L1268.68 1201.18 L1268.09 1201.18 L1267.5 1201.18 L1266.92 1201.18 L1266.33 1201.18 L1265.74 1201.18 L1265.16 1201.18 L1264.57 1201.18 L1263.98 1201.18 L1263.4 1201.18 L1262.81 1201.18 L1262.23 1201.18 L1261.64 1201.18 L1261.05 1201.18 L1260.47 1201.18 L1259.88 1201.18 L1259.29 1201.18 L1258.71 1201.18 L1258.12 1201.18 L1257.53 1201.18 L1256.95 1201.18 L1256.36 1201.18 L1255.78 1201.18 L1255.19 1201.18 L1254.6 1201.18 L1254.02 1201.18 L1253.43 1201.18 L1252.84 1201.18 L1252.26 1201.18 L1251.67 1201.18 L1251.08 1201.18 L1250.5 1201.18 L1249.91 1201.18 L1249.32 1201.18 L1248.74 1201.18 L1248.15 1201.18 L1247.57 1201.18 L1246.98 1201.18 L1246.39 1201.18 L1245.81 1201.18 L1245.22 1201.18 L1244.63 1201.18 L1244.05 1201.18 L1243.46 1201.18 L1242.87 1201.18 L1242.29 1201.18 L1241.7 1201.18 L1241.11 1201.18 L1240.53 1201.18 L1239.94 1201.18 L1239.36 1201.18 L1238.77 1201.18 L1238.18 1201.18 L1237.6 1201.18 L1237.01 1201.18 L1236.42 1201.18 L1235.84 1201.18 L1235.25 1201.18 L1234.66 1201.18 L1234.08 1201.18 L1233.49 1201.18 L1232.91 1201.18 L1232.32 1201.18 L1231.73 1201.18 L1231.15 1201.18 L1230.56 1201.18 L1229.97 1201.18 L1229.39 1201.18 L1228.8 1201.18 L1228.21 1201.18 L1227.63 1201.18 L1227.04 1201.18 L1226.45 1201.18 L1225.87 1201.18 L1225.28 1201.18 L1224.7 1201.18 L1224.11 1201.18 L1223.52 1201.18 L1222.94 1201.18 L1222.35 1201.18 L1221.76 1201.18 L1221.18 1201.18 L1220.59 1201.18 L1220 1201.18 L1219.42 1201.18 L1218.83 1201.18 L1218.24 1201.18 L1217.66 1201.18 L1217.07 1201.18 L1216.49 1201.18 L1215.9 1201.18 L1215.31 1201.18 L1214.73 1201.18 L1214.14 1201.18 L1213.55 1201.18 L1212.97 1201.18 L1212.38 1201.18 L1211.79 1201.18 L1211.21 1201.18 L1210.62 1201.18 L1210.03 1201.18 L1209.45 1201.18 L1208.86 1201.18 L1208.28 1201.18 L1207.69 1201.18 L1207.1 1201.18 L1206.52 1201.18 L1205.93 1201.18 L1205.34 1201.18 L1204.76 1201.18 L1204.17 1201.18 L1203.58 1201.18 L1203 1201.18 L1202.41 1201.18 L1201.83 1201.18 L1201.24 1201.18 L1200.65 1201.18 L1200.07 1201.18 L1199.48 1201.18 L1198.89 1201.18 L1198.31 1201.18 L1197.72 1201.18 L1197.13 1201.18 L1196.55 1201.18 L1195.96 1201.18 L1195.37 1201.18 L1194.79 1201.18 L1194.2 1201.18 L1193.62 1201.18 L1193.03 1201.18 L1192.44 1201.18 L1191.86 1201.18 L1191.27 1201.18 L1190.68 1201.18 L1190.1 1201.18 L1189.51 1201.18 L1188.92 1201.18 L1188.34 1201.18 L1187.75 1201.18 L1187.16 1201.18 L1186.58 1201.18 L1185.99 1201.18 L1185.41 1201.18 L1184.82 1201.18 L1184.23 1201.18 L1183.65 1201.18 L1183.06 1201.18 L1182.47 1201.18 L1181.89 1201.18 L1181.3 1201.18 L1180.71 1201.18 L1180.13 1201.18 L1179.54 1201.18 L1178.96 1201.18 L1178.37 1201.18 L1177.78 1201.18 L1177.2 1201.18 L1176.61 1201.18 L1176.02 1201.18 L1175.44 1201.18 L1174.85 1201.18 L1174.26 1201.18 L1173.68 1201.18 L1173.09 1201.18 L1172.5 1201.18 L1171.92 1201.18 L1171.33 1201.18 L1170.75 1201.18 L1170.16 1201.18 L1169.57 1201.18 L1168.99 1201.18 L1168.4 1201.18 L1167.81 1201.18 L1167.23 1201.18 L1166.64 1201.18 L1166.05 1201.18 L1165.47 1201.18 L1164.88 1201.18 L1164.29 1201.18 L1163.71 1201.18 L1163.12 1201.18 L1162.54 1201.18 L1161.95 1201.18 L1161.36 1201.18 L1160.78 1201.18 L1160.19 1201.18 L1159.6 1201.18 L1159.02 1201.18 L1158.43 1201.18 L1157.84 1201.18 L1157.26 1201.18 L1156.67 1201.18 L1156.09 1201.18 L1155.5 1201.18 L1154.91 1201.18 L1154.33 1201.18 L1153.74 1201.18 L1153.15 1201.18 L1152.57 1201.18 L1151.98 1201.18 L1151.39 1201.18 L1150.81 1201.18 L1150.22 1201.18 L1149.63 1201.18 L1149.05 1201.18 L1148.46 1201.18 L1147.88 1201.18 L1147.29 1201.18 L1146.7 1201.18 L1146.12 1201.18 L1145.53 1201.18 L1144.94 1201.18 L1144.36 1201.18 L1143.77 1201.18 L1143.18 1201.18 L1142.6 1201.18 L1142.01 1201.18 L1141.42 1201.18 L1140.84 1201.18 L1140.25 1201.18 L1139.67 1201.18 L1139.08 1201.18 L1138.49 1201.18 L1137.91 1201.18 L1137.32 1201.18 L1136.73 1201.18 L1136.15 1201.18 L1135.56 1201.18 L1134.97 1201.18 L1134.39 1201.18 L1133.8 1201.18 L1133.21 1201.18 L1132.63 1201.18 L1132.04 1201.18 L1131.46 1201.18 L1130.87 1201.18 L1130.28 1201.18 L1129.7 1201.18 L1129.11 1201.18 L1128.52 1201.18 L1127.94 1201.18 L1127.35 1201.18 L1126.76 1201.18 L1126.18 1201.18 L1125.59 1201.18 L1125.01 1201.18 L1124.42 1201.18 L1123.83 1201.18 L1123.25 1201.18 L1122.66 1201.18 L1122.07 1201.18 L1121.49 1201.18 L1120.9 1201.18 L1120.31 1201.18 L1119.73 1201.18 L1119.14 1201.18 L1118.55 1201.18 L1117.97 1201.18 L1117.38 1201.18 L1116.8 1201.18 L1116.21 1201.18 L1115.62 1201.18 L1115.04 1201.18 L1114.45 1201.18 L1113.86 1201.18 L1113.28 1201.18 L1112.69 1201.18 L1112.1 1201.18 L1111.52 1201.18 L1110.93 1201.18 L1110.34 1201.18 L1109.76 1201.18 L1109.17 1201.18 L1108.59 1201.18 L1108 1201.18 L1107.41 1201.18 L1106.83 1201.18 L1106.24 1201.18 L1105.65 1201.18 L1105.07 1201.18 L1104.48 1201.18 L1103.89 1201.18 L1103.31 1201.18 L1102.72 1201.18 L1102.14 1201.18 L1101.55 1201.18 L1100.96 1201.18 L1100.38 1201.18 L1099.79 1201.18 L1099.2 1201.18 L1098.62 1201.18 L1098.03 1201.18 L1097.44 1201.18 L1096.86 1201.18 L1096.27 1201.18 L1095.68 1201.18 L1095.1 1201.18 L1094.51 1201.18 L1093.93 1201.18 L1093.34 1201.18 L1092.75 1201.18 L1092.17 1201.18 L1091.58 1201.18 L1090.99 1201.18 L1090.41 1201.18 L1089.82 1201.18 L1089.23 1201.18 L1088.65 1201.18 L1088.06 1201.18 L1087.47 1201.18 L1086.89 1201.18 L1086.3 1201.18 L1085.72 1201.18 L1085.13 1201.18 L1084.54 1201.18 L1083.96 1201.18 L1083.37 1201.18 L1082.78 1201.18 L1082.2 1201.18 L1081.61 1201.18 L1081.02 1201.18 L1080.44 1201.18 L1079.85 1201.18 L1079.26 1201.18 L1078.68 1201.18 L1078.09 1201.18 L1077.51 1201.18 L1076.92 1201.18 L1076.33 1201.18 L1075.75 1201.18 L1075.16 1201.18 L1074.57 1201.18 L1073.99 1201.18 L1073.4 1201.18 L1072.81 1201.18 L1072.23 1201.18 L1071.64 1201.18 L1071.06 1201.18 L1070.47 1201.18 L1069.88 1201.18 L1069.3 1201.18 L1068.71 1201.18 L1068.12 1201.18 L1067.54 1201.18 L1066.95 1201.18 L1066.36 1201.18 L1065.78 1201.18 L1065.19 1201.18 L1064.6 1201.18 L1064.02 1201.18 L1063.43 1201.18 L1062.85 1201.18 L1062.26 1201.18 L1061.67 1201.18 L1061.09 1201.18 L1060.5 1201.18 L1059.91 1201.18 L1059.33 1201.18 L1058.74 1201.18 L1058.15 1201.18 L1057.57 1201.18 L1056.98 1201.18 L1056.39 1201.18 L1055.81 1201.18 L1055.22 1201.18 L1054.64 1201.18 L1054.05 1201.18 L1053.46 1201.18 L1052.88 1201.18 L1052.29 1201.18 L1051.7 1201.18 L1051.12 1201.18 L1050.53 1201.18 L1049.94 1201.18 L1049.36 1201.18 L1048.77 1201.18 L1048.19 1201.18 L1047.6 1201.18 L1047.01 1201.18 L1046.43 1201.18 L1045.84 1201.18 L1045.25 1201.18 L1044.67 1201.18 L1044.08 1201.18 L1043.49 1201.18 L1042.91 1201.18 L1042.32 1201.18 L1041.73 1201.18 L1041.15 1201.18 L1040.56 1201.18 L1039.98 1201.18 L1039.39 1201.18 L1038.8 1201.18 L1038.22 1201.18 L1037.63 1201.18 L1037.04 1201.18 L1036.46 1201.18 L1035.87 1201.18 L1035.28 1201.18 L1034.7 1201.18 L1034.11 1201.18 L1033.52 1201.18 L1032.94 1201.18 L1032.35 1201.18 L1031.77 1201.18 L1031.18 1201.18 L1030.59 1201.18 L1030.01 1201.18 L1029.42 1201.18 L1028.83 1201.18 L1028.25 1201.18 L1027.66 1201.18 L1027.07 1201.18 L1026.49 1201.18 L1025.9 1201.18 L1025.32 1201.18 L1024.73 1201.18 L1024.14 1201.18 L1023.56 1201.18 L1022.97 1201.18 L1022.38 1201.18 L1021.8 1201.18 L1021.21 1201.18 L1020.62 1201.18 L1020.04 1201.18 L1019.45 1201.18 L1018.86 1201.18 L1018.28 1201.18 L1017.69 1201.18 L1017.11 1201.18 L1016.52 1201.18 L1015.93 1201.18 L1015.35 1201.18 L1014.76 1201.18 L1014.17 1201.18 L1013.59 1201.18 L1013 1201.18 L1012.41 1201.18 L1011.83 1201.18 L1011.24 1201.18 L1010.65 1201.18 L1010.07 1201.18 L1009.48 1201.18 L1008.9 1201.18 L1008.31 1201.18 L1007.72 1201.18 L1007.14 1201.18 L1006.55 1201.18 L1005.96 1201.18 L1005.38 1201.18 L1004.79 1201.18 L1004.2 1201.18 L1003.62 1201.18 L1003.03 1201.18 L1002.44 1201.18 L1001.86 1201.18 L1001.27 1201.18 L1000.69 1201.18 L1000.1 1201.18 L999.513 1201.18 L998.926 1201.18 L998.34 1201.18 L997.754 1201.18 L997.167 1201.18 L996.581 1201.18 L995.994 1201.18 L995.408 1201.18 L994.822 1201.18 L994.235 1201.18 L993.649 1201.18 L993.062 1201.18 L992.476 1201.18 L991.889 1201.18 L991.303 1201.18 L990.717 1201.18 L990.13 1201.18 L989.544 1201.18 L988.957 1201.18 L988.371 1201.18 L987.785 1201.18 L987.198 1201.18 L986.612 1201.18 L986.025 1201.18  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1201.26 986.612,1201.26 987.198,1201.26 987.785,1201.26 988.371,1201.26 988.957,1201.26 989.544,1201.26 990.13,1201.26 990.717,1201.26 991.303,1201.26 991.889,1201.26 992.476,1201.26 993.062,1201.26 993.649,1201.26 994.235,1201.26 994.822,1201.26 995.408,1201.26 995.994,1201.26 996.581,1201.26 997.167,1201.26 997.754,1201.26 998.34,1201.26 998.926,1201.26 999.513,1201.26 1000.1,1201.26 1000.69,1201.26 1001.27,1201.26 1001.86,1201.26 1002.44,1201.26 1003.03,1201.26 1003.62,1201.26 1004.2,1201.26 1004.79,1201.26 1005.38,1201.26 1005.96,1201.26 1006.55,1201.26 1007.14,1201.26 1007.72,1201.26 1008.31,1201.26 1008.9,1201.26 1009.48,1201.26 1010.07,1201.26 1010.65,1201.26 1011.24,1201.26 1011.83,1201.26 1012.41,1201.26 1013,1201.26 1013.59,1201.26 1014.17,1201.26 1014.76,1201.26 1015.35,1201.26 1015.93,1201.26 1016.52,1201.26 1017.11,1201.26 1017.69,1201.26 1018.28,1201.26 1018.86,1201.26 1019.45,1201.26 1020.04,1201.26 1020.62,1201.26 1021.21,1201.26 1021.8,1201.26 1022.38,1201.26 1022.97,1201.26 1023.56,1201.26 1024.14,1201.26 1024.73,1201.26 1025.32,1201.26 1025.9,1201.26 1026.49,1201.26 1027.07,1201.26 1027.66,1201.26 1028.25,1201.26 1028.83,1201.26 1029.42,1201.26 1030.01,1201.26 1030.59,1201.26 1031.18,1201.26 1031.77,1201.26 1032.35,1201.26 1032.94,1201.26 1033.52,1201.26 1034.11,1201.26 1034.7,1201.26 1035.28,1201.26 1035.87,1201.26 1036.46,1201.26 1037.04,1201.26 1037.63,1201.26 1038.22,1201.26 1038.8,1201.26 1039.39,1201.26 1039.98,1201.26 1040.56,1201.26 1041.15,1201.26 1041.73,1201.26 1042.32,1201.26 1042.91,1201.26 1043.49,1201.26 1044.08,1201.26 1044.67,1201.26 1045.25,1201.26 1045.84,1201.26 1046.43,1201.26 1047.01,1201.26 1047.6,1201.26 1048.19,1201.26 1048.77,1201.26 1049.36,1201.26 1049.94,1201.26 1050.53,1201.26 1051.12,1201.26 1051.7,1201.26 1052.29,1201.26 1052.88,1201.26 1053.46,1201.26 1054.05,1201.26 1054.64,1201.26 1055.22,1201.26 1055.81,1201.26 1056.39,1201.26 1056.98,1201.26 1057.57,1201.26 1058.15,1201.26 1058.74,1201.26 1059.33,1201.26 1059.91,1201.26 1060.5,1201.26 1061.09,1201.26 1061.67,1201.26 1062.26,1201.26 1062.85,1201.26 1063.43,1201.26 1064.02,1201.26 1064.6,1201.26 1065.19,1201.26 1065.78,1201.26 1066.36,1201.26 1066.95,1201.26 1067.54,1201.26 1068.12,1201.26 1068.71,1201.26 1069.3,1201.26 1069.88,1201.26 1070.47,1201.26 1071.06,1201.26 1071.64,1201.26 1072.23,1201.26 1072.81,1201.26 1073.4,1201.26 1073.99,1201.26 1074.57,1201.26 1075.16,1201.26 1075.75,1201.26 1076.33,1201.26 1076.92,1201.26 1077.51,1201.26 1078.09,1201.26 1078.68,1201.26 1079.26,1201.26 1079.85,1201.26 1080.44,1201.26 1081.02,1201.26 1081.61,1201.26 1082.2,1201.26 1082.78,1201.26 1083.37,1201.26 1083.96,1201.26 1084.54,1201.26 1085.13,1201.26 1085.72,1201.26 1086.3,1201.26 1086.89,1201.26 1087.47,1201.26 1088.06,1201.26 1088.65,1201.26 1089.23,1201.26 1089.82,1201.26 1090.41,1201.26 1090.99,1201.26 1091.58,1201.26 1092.17,1201.26 1092.75,1201.26 1093.34,1201.26 1093.93,1201.26 1094.51,1201.26 1095.1,1201.26 1095.68,1201.26 1096.27,1201.26 1096.86,1201.26 1097.44,1201.26 1098.03,1201.26 1098.62,1201.26 1099.2,1201.26 1099.79,1201.26 1100.38,1201.26 1100.96,1201.26 1101.55,1201.26 1102.14,1201.26 1102.72,1201.26 1103.31,1201.26 1103.89,1201.26 1104.48,1201.26 1105.07,1201.26 1105.65,1201.26 1106.24,1201.26 1106.83,1201.26 1107.41,1201.26 1108,1201.26 1108.59,1201.26 1109.17,1201.26 1109.76,1201.26 1110.34,1201.26 1110.93,1201.26 1111.52,1201.26 1112.1,1201.26 1112.69,1201.26 1113.28,1201.26 1113.86,1201.26 1114.45,1201.26 1115.04,1201.26 1115.62,1201.26 1116.21,1201.26 1116.8,1201.26 1117.38,1201.26 1117.97,1201.26 1118.55,1201.26 1119.14,1201.26 1119.73,1201.26 1120.31,1201.26 1120.9,1201.26 1121.49,1201.26 1122.07,1201.26 1122.66,1201.26 1123.25,1201.26 1123.83,1201.26 1124.42,1201.26 1125.01,1201.26 1125.59,1201.26 1126.18,1201.26 1126.76,1201.26 1127.35,1201.26 1127.94,1201.26 1128.52,1201.26 1129.11,1201.26 1129.7,1201.26 1130.28,1201.26 1130.87,1201.26 1131.46,1201.26 1132.04,1201.26 1132.63,1201.26 1133.21,1201.26 1133.8,1201.26 1134.39,1201.26 1134.97,1201.26 1135.56,1201.26 1136.15,1201.26 1136.73,1201.26 1137.32,1201.26 1137.91,1201.26 1138.49,1201.26 1139.08,1201.26 1139.67,1201.26 1140.25,1201.26 1140.84,1201.26 1141.42,1201.26 1142.01,1201.26 1142.6,1201.26 1143.18,1201.26 1143.77,1201.26 1144.36,1201.26 1144.94,1201.26 1145.53,1201.26 1146.12,1201.26 1146.7,1201.26 1147.29,1201.26 1147.88,1201.26 1148.46,1201.26 1149.05,1201.26 1149.63,1201.26 1150.22,1201.26 1150.81,1201.26 1151.39,1201.26 1151.98,1201.26 1152.57,1201.26 1153.15,1201.26 1153.74,1201.26 1154.33,1201.26 1154.91,1201.26 1155.5,1201.26 1156.09,1201.26 1156.67,1201.26 1157.26,1201.26 1157.84,1201.26 1158.43,1201.26 1159.02,1201.26 1159.6,1201.26 1160.19,1201.26 1160.78,1201.26 1161.36,1201.26 1161.95,1201.26 1162.54,1201.26 1163.12,1201.26 1163.71,1201.26 1164.29,1201.26 1164.88,1201.26 1165.47,1201.26 1166.05,1201.26 1166.64,1201.26 1167.23,1201.26 1167.81,1201.26 1168.4,1201.26 1168.99,1201.26 1169.57,1201.26 1170.16,1201.26 1170.75,1201.26 1171.33,1201.26 1171.92,1201.26 1172.5,1201.26 1173.09,1201.26 1173.68,1201.26 1174.26,1201.26 1174.85,1201.26 1175.44,1201.26 1176.02,1201.26 1176.61,1201.26 1177.2,1201.26 1177.78,1201.26 1178.37,1201.26 1178.96,1201.26 1179.54,1201.26 1180.13,1201.26 1180.71,1201.26 1181.3,1201.26 1181.89,1201.26 1182.47,1201.26 1183.06,1201.26 1183.65,1201.26 1184.23,1201.26 1184.82,1201.26 1185.41,1201.26 1185.99,1201.26 1186.58,1201.26 1187.16,1201.26 1187.75,1201.26 1188.34,1201.26 1188.92,1201.26 1189.51,1201.26 1190.1,1201.26 1190.68,1201.26 1191.27,1201.26 1191.86,1201.26 1192.44,1201.26 1193.03,1201.26 1193.62,1201.26 1194.2,1201.26 1194.79,1201.26 1195.37,1201.26 1195.96,1201.26 1196.55,1201.26 1197.13,1201.26 1197.72,1201.26 1198.31,1201.26 1198.89,1201.26 1199.48,1201.26 1200.07,1201.26 1200.65,1201.26 1201.24,1201.26 1201.83,1201.26 1202.41,1201.26 1203,1201.26 1203.58,1201.26 1204.17,1201.26 1204.76,1201.26 1205.34,1201.26 1205.93,1201.26 1206.52,1201.26 1207.1,1201.26 1207.69,1201.26 1208.28,1201.26 1208.86,1201.26 1209.45,1201.26 1210.03,1201.26 1210.62,1201.26 1211.21,1201.26 1211.79,1201.26 1212.38,1201.26 1212.97,1201.26 1213.55,1201.26 1214.14,1201.26 1214.73,1201.26 1215.31,1201.26 1215.9,1201.26 1216.49,1201.26 1217.07,1201.26 1217.66,1201.26 1218.24,1201.26 1218.83,1201.26 1219.42,1201.26 1220,1201.26 1220.59,1201.26 1221.18,1201.26 1221.76,1201.26 1222.35,1201.26 1222.94,1201.26 1223.52,1201.26 1224.11,1201.26 1224.7,1201.26 1225.28,1201.26 1225.87,1201.26 1226.45,1201.26 1227.04,1201.26 1227.63,1201.26 1228.21,1201.26 1228.8,1201.26 1229.39,1201.26 1229.97,1201.26 1230.56,1201.26 1231.15,1201.26 1231.73,1201.26 1232.32,1201.26 1232.91,1201.26 1233.49,1201.26 1234.08,1201.26 1234.66,1201.26 1235.25,1201.26 1235.84,1201.26 1236.42,1201.26 1237.01,1201.26 1237.6,1201.26 1238.18,1201.26 1238.77,1201.26 1239.36,1201.26 1239.94,1201.26 1240.53,1201.26 1241.11,1201.26 1241.7,1201.26 1242.29,1201.26 1242.87,1201.26 1243.46,1201.26 1244.05,1201.26 1244.63,1201.26 1245.22,1201.26 1245.81,1201.26 1246.39,1201.26 1246.98,1201.26 1247.57,1201.26 1248.15,1201.26 1248.74,1201.26 1249.32,1201.26 1249.91,1201.26 1250.5,1201.26 1251.08,1201.26 1251.67,1201.26 1252.26,1201.26 1252.84,1201.26 1253.43,1201.26 1254.02,1201.26 1254.6,1201.26 1255.19,1201.26 1255.78,1201.26 1256.36,1201.26 1256.95,1201.26 1257.53,1201.26 1258.12,1201.26 1258.71,1201.26 1259.29,1201.26 1259.88,1201.26 1260.47,1201.26 1261.05,1201.26 1261.64,1201.26 1262.23,1201.26 1262.81,1201.26 1263.4,1201.26 1263.98,1201.26 1264.57,1201.26 1265.16,1201.26 1265.74,1201.26 1266.33,1201.26 1266.92,1201.26 1267.5,1201.26 1268.09,1201.26 1268.68,1201.26 1269.26,1201.26 1269.85,1201.26 1270.44,1201.26 1271.02,1201.26 1271.61,1201.26 1272.19,1201.26 1272.78,1201.26 1273.37,1201.26 1273.95,1201.26 1274.54,1201.26 1275.13,1201.26 1275.71,1201.26 1276.3,1201.26 1276.89,1201.26 1277.47,1201.26 1278.06,1201.26 1278.65,1201.26 1279.23,1201.26 1279.82,1201.26 1280.4,1201.26 1280.99,1201.26 1281.58,1201.26 1282.16,1201.26 1282.75,1201.26 1283.34,1201.26 1283.92,1201.26 1284.51,1201.26 1285.1,1201.26 1285.68,1201.26 1286.27,1201.26 1286.86,1201.26 1287.44,1201.26 1288.03,1201.26 1288.61,1201.26 1289.2,1201.26 1289.79,1201.26 1290.37,1201.26 1290.96,1201.26 1291.55,1201.26 1292.13,1201.26 1292.72,1201.26 1293.31,1201.26 1293.89,1201.26 1294.48,1201.26 1295.06,1201.26 1295.65,1201.26 1296.24,1201.26 1296.82,1201.26 1297.41,1201.26 1298,1201.26 1298.58,1201.26 1299.17,1201.26 1299.76,1201.26 1300.34,1201.26 1300.93,1201.26 1301.52,1201.26 1302.1,1201.26 1302.69,1201.26 1303.27,1201.26 1303.86,1201.26 1304.45,1201.26 1305.03,1201.26 1305.62,1201.26 1306.21,1201.26 1306.79,1201.26 1307.38,1201.26 1307.97,1201.26 1308.55,1201.26 1309.14,1201.26 1309.73,1201.26 1310.31,1201.26 1310.9,1201.26 1311.48,1201.26 1312.07,1201.26 1312.66,1201.26 1313.24,1201.26 1313.83,1201.26 1314.42,1201.26 1315,1201.26 1315.59,1201.26 1316.18,1201.26 1316.76,1201.26 1317.35,1201.26 1317.93,1201.26 1318.52,1201.26 1319.11,1201.26 1319.69,1201.26 1320.28,1201.26 1320.87,1201.26 1321.45,1201.26 1322.04,1201.26 1322.63,1201.26 1323.21,1201.26 1323.8,1201.26 1324.39,1201.26 1324.97,1201.26 1325.56,1201.26 1326.14,1201.26 1326.73,1201.26 1327.32,1201.26 1327.9,1201.26 1328.49,1201.26 1329.08,1201.26 1329.66,1201.26 1330.25,1201.26 1330.84,1201.26 1331.42,1201.26 1332.01,1201.26 1332.6,1201.26 1333.18,1201.26 1333.77,1201.26 1334.35,1201.26 1334.94,1201.26 1335.53,1201.26 1336.11,1201.26 1336.7,1201.26 1337.29,1201.26 1337.87,1201.26 1338.46,1201.26 1339.05,1201.26 1339.63,1201.26 1340.22,1201.26 1340.8,1201.26 1341.39,1201.26 1341.98,1201.26 1342.56,1201.26 1343.15,1201.26 1343.74,1201.26 1344.32,1201.26 1344.91,1201.26 1345.5,1201.26 1346.08,1201.26 1346.67,1201.26 1347.26,1201.26 1347.84,1201.26 1348.43,1201.26 1349.01,1201.26 1349.6,1201.26 1350.19,1201.26 1350.77,1201.26 1351.36,1201.26 1351.95,1201.26 1352.53,1201.26 1353.12,1201.26 1353.71,1201.26 1354.29,1201.26 1354.88,1201.26 1355.47,1201.26 1356.05,1201.26 1356.64,1201.26 1357.22,1201.26 1357.81,1201.26 1358.4,1201.26 1358.98,1201.26 1359.57,1201.26 1360.16,1201.26 1360.74,1201.26 1361.33,1201.26 1361.92,1201.26 1362.5,1201.26 1363.09,1201.26 1363.68,1201.26 1364.26,1201.26 1364.85,1201.26 1365.43,1201.26 1366.02,1201.26 1366.61,1201.26 1367.19,1201.26 1367.78,1201.26 1368.37,1201.26 1368.95,1201.26 1369.54,1201.26 1370.13,1201.26 1370.71,1201.26 1371.3,1201.26 1371.88,1201.26 1372.47,1201.26 1373.06,1201.26 1373.64,1201.26 1374.23,1201.26 1374.82,1201.26 1375.4,1201.26 1375.99,1201.26 1376.58,1201.26 1377.16,1201.26 1377.75,1201.26 1378.34,1201.26 1378.92,1201.26 1379.51,1201.26 1380.09,1201.26 1380.68,1201.26 1381.27,1201.26 1381.85,1201.26 1382.44,1201.26 1383.03,1201.26 1383.61,1201.26 1384.2,1201.26 1384.79,1201.26 1385.37,1201.26 1385.96,1201.26 1386.55,1201.26 1387.13,1201.26 1387.72,1201.26 1388.3,1201.26 1388.89,1201.26 1389.48,1201.26 1390.06,1201.26 1390.65,1201.26 1391.24,1201.26 1391.82,1201.26 1392.41,1201.26 1393,1201.26 1393.58,1201.26 1394.17,1201.26 1394.75,1201.26 1395.34,1201.26 1395.93,1201.26 1396.51,1201.26 1397.1,1201.26 1397.69,1201.26 1398.27,1201.26 1398.86,1201.26 1399.45,1201.26 1400.03,1201.26 1400.62,1201.26 1401.21,1201.26 1401.79,1201.26 1402.38,1201.26 1402.96,1201.26 1403.55,1201.26 1404.14,1201.26 1404.72,1201.26 1405.31,1201.26 1405.9,1201.26 1406.48,1201.26 1407.07,1201.26 1407.66,1201.26 1408.24,1201.26 1408.83,1201.26 1409.42,1201.26 1410,1201.26 1410.59,1201.26 1411.17,1201.26 1411.76,1201.26 1412.35,1201.26 1412.93,1201.26 1413.52,1201.26 1414.11,1201.26 1414.69,1201.26 1415.28,1201.26 1415.87,1201.26 1416.45,1201.26 1417.04,1201.26 1417.63,1201.26 1418.21,1201.26 1418.8,1201.26 1419.38,1201.26 1419.97,1201.26 1420.56,1201.26 1421.14,1201.26 1421.73,1201.26 1422.32,1201.26 1422.9,1201.26 1423.49,1201.26 1424.08,1201.26 1424.66,1201.26 1425.25,1201.26 1425.83,1201.26 1426.42,1201.26 1427.01,1201.26 1427.59,1201.26 1428.18,1201.26 1428.77,1201.26 1429.35,1201.26 1429.94,1201.26 1430.53,1201.26 1431.11,1201.26 1431.7,1201.26 1432.29,1201.26 1432.87,1201.26 1433.46,1201.26 1434.04,1201.26 1434.63,1201.26 1435.22,1201.26 1435.8,1201.26 1436.39,1201.26 1436.98,1201.26 1437.56,1201.26 1438.15,1201.26 1438.74,1201.26 1439.32,1201.26 1439.91,1201.26 1440.5,1201.26 1441.08,1201.26 1441.67,1201.26 1442.25,1201.26 1442.84,1201.26 1443.43,1201.26 1444.01,1201.26 1444.6,1201.26 1445.19,1201.26 1445.77,1201.26 1446.36,1201.26 1446.95,1201.26 1447.53,1201.26 1448.12,1201.26 1448.7,1201.26 1449.29,1201.26 1449.88,1201.26 1450.46,1201.26 1451.05,1201.26 1451.64,1201.26 1452.22,1201.26 1452.81,1201.26 1453.4,1201.26 1453.98,1201.26 1454.57,1201.26 1455.16,1201.26 1455.74,1201.26 1456.33,1201.26 1456.91,1201.26 1457.5,1201.26 1458.09,1201.26 1458.67,1201.26 1459.26,1201.26 1459.85,1201.26 1460.43,1201.26 1461.02,1201.26 1461.61,1201.26 1462.19,1201.26 1462.78,1201.26 1463.37,1201.26 1463.95,1201.26 1464.54,1201.26 1465.12,1201.26 1465.71,1201.26 1466.3,1201.26 1466.88,1201.26 1467.47,1201.26 1468.06,1201.26 1468.64,1201.26 1469.23,1201.26 1469.82,1201.26 1470.4,1201.26 1470.99,1201.26 1471.57,1201.26 1472.16,1201.26 1472.75,1201.26 1473.33,1201.26 1473.92,1201.26 1474.51,1201.26 1475.09,1201.26 1475.68,1201.26 1476.27,1201.26 1476.85,1201.26 1477.44,1201.26 1478.03,1201.26 1478.61,1201.26 1479.2,1201.26 1479.78,1201.26 1480.37,1201.26 1480.96,1201.26 1481.54,1201.26 1482.13,1201.26 1482.72,1201.26 1483.3,1201.26 1483.89,1201.26 1484.48,1201.26 1485.06,1201.26 1485.65,1201.26 1486.24,1201.26 1486.82,1201.26 1487.41,1201.26 1487.99,1201.26 1488.58,1201.26 1489.17,1201.26 1489.75,1201.26 1490.34,1201.26 1490.93,1201.26 1491.51,1201.26 1492.1,1201.26 1492.69,1201.26 1493.27,1201.26 1493.86,1201.26 1494.45,1201.26 1495.03,1201.26 1495.62,1201.26 1496.2,1201.26 1496.79,1201.26 1497.38,1201.26 1497.96,1201.26 1498.55,1201.26 1499.14,1201.26 1499.72,1201.26 1500.31,1201.26 1500.9,1201.26 1501.48,1201.26 1502.07,1201.26 1502.65,1201.26 1503.24,1201.26 1503.83,1201.26 1504.41,1201.26 1505,1201.26 1505.59,1201.26 1506.17,1201.26 1506.76,1201.26 1507.35,1201.26 1507.93,1201.26 1508.52,1201.26 1509.11,1201.26 1509.69,1201.26 1510.28,1201.26 1510.86,1201.26 1511.45,1201.26 1512.04,1201.26 1512.62,1201.26 1513.21,1201.26 1513.8,1201.26 1514.38,1201.26 1514.97,1201.26 1515.56,1201.26 1516.14,1201.26 1516.73,1201.26 1517.32,1201.26 1517.9,1201.26 1518.49,1201.26 1519.07,1201.26 1519.66,1201.26 1520.25,1201.26 1520.83,1201.26 1521.42,1201.26 1522.01,1201.26 1522.59,1201.26 1523.18,1201.26 1523.77,1201.26 1524.35,1201.26 1524.94,1201.26 1525.52,1201.26 1526.11,1201.26 1526.7,1201.26 1527.28,1201.26 1527.87,1201.26 1528.46,1201.26 1529.04,1201.26 1529.63,1201.26 1530.22,1201.26 1530.8,1201.26 1531.39,1201.26 1531.98,1201.26 1532.56,1201.26 1533.15,1201.26 1533.73,1201.26 1534.32,1201.26 1534.91,1201.26 1535.49,1201.26 1536.08,1201.26 1536.67,1201.26 1537.25,1201.26 1537.84,1201.26 1538.43,1201.26 1539.01,1201.26 1539.6,1201.26 1540.19,1201.26 1540.77,1201.26 1541.36,1201.26 1541.94,1201.26 1542.53,1201.26 1543.12,1201.26 1543.7,1201.26 1544.29,1201.26 1544.88,1201.26 1545.46,1201.26 1546.05,1201.26 1546.64,1201.26 1547.22,1201.26 1547.81,1201.26 1548.4,1201.26 1548.98,1201.26 1549.57,1201.26 1550.15,1201.26 1550.74,1201.26 1551.33,1201.26 1551.91,1201.26 1552.5,1201.26 1553.09,1201.26 1553.67,1201.26 1554.26,1201.26 1554.85,1201.26 1555.43,1201.26 1556.02,1201.26 1556.6,1201.26 1557.19,1201.26 1557.78,1201.26 1558.36,1201.26 1558.95,1201.26 1559.54,1201.26 1560.12,1201.26 1560.71,1201.26 1561.3,1201.26 1561.88,1201.26 1562.47,1201.26 1563.06,1201.26 1563.64,1201.26 1564.23,1201.26 1564.81,1201.26 1565.4,1201.26 1565.99,1201.26 1566.57,1201.26 1567.16,1201.26 1567.75,1201.26 1568.33,1201.26 1568.92,1201.26 1569.51,1201.26 1570.09,1201.26 1570.68,1201.26 1571.27,1201.26 1571.85,1201.26 1572.44,1201.26 1573.02,1201.26 1573.61,1201.26 1574.2,1201.26 1574.78,1201.26 1575.37,1201.26 1575.96,1201.26 1576.54,1201.26 1577.13,1201.26 1577.72,1201.26 1578.3,1201.26 1578.89,1201.26 1579.47,1201.26 1580.06,1201.26 1580.65,1201.26 1581.23,1201.26 1581.82,1201.26 1582.41,1201.26 1582.99,1201.26 1583.58,1201.26 1584.17,1201.26 1584.75,1201.26 1585.34,1201.26 1585.93,1201.26 1586.51,1201.26 1587.1,1201.26 1587.68,1201.26 1588.27,1201.26 1588.86,1201.26 1589.44,1201.26 1590.03,1201.26 1590.62,1201.26 1591.2,1201.26 1591.79,1201.26 1592.38,1201.26 1592.96,1201.26 1593.55,1201.26 1594.14,1201.26 1594.72,1201.26 1595.31,1201.26 1595.89,1201.26 1596.48,1201.26 1597.07,1201.26 1597.65,1201.26 1598.24,1201.26 1598.83,1201.26 1599.41,1201.26 1600,1201.26 1600.59,1201.26 1601.17,1201.26 1601.76,1201.26 1602.34,1201.26 1602.93,1201.26 1603.52,1201.26 1604.1,1201.26 1604.69,1201.26 1605.28,1201.26 1605.86,1201.26 1606.45,1201.26 1607.04,1201.26 1607.62,1201.26 1608.21,1201.26 1608.8,1201.26 1609.38,1201.26 1609.97,1201.26 1610.55,1201.26 1611.14,1201.26 1611.73,1201.26 1612.31,1201.26 1612.9,1201.26 1613.49,1201.26 1614.07,1201.26 1614.66,1201.26 1615.25,1201.26 1615.83,1201.26 1616.42,1201.26 1617.01,1201.26 1617.59,1201.26 1618.18,1201.26 1618.76,1201.26 1619.35,1201.26 1619.94,1201.26 1620.52,1201.26 1621.11,1201.26 1621.7,1201.26 1622.28,1201.26 1622.87,1201.26 1623.46,1201.26 1624.04,1201.26 1624.63,1201.26 1625.22,1201.26 1625.8,1201.26 1626.39,1201.26 1626.97,1201.26 1627.56,1201.26 1628.15,1201.26 1628.73,1201.26 1629.32,1201.26 1629.91,1201.26 1630.49,1201.26 1631.08,1201.26 1631.67,1201.26 1632.25,1201.26 1632.84,1201.26 1633.42,1201.26 1634.01,1201.26 1634.6,1201.26 1635.18,1201.26 1635.77,1201.26 1636.36,1201.26 1636.94,1201.26 1637.53,1201.26 1638.12,1201.26 1638.7,1201.26 1639.29,1201.26 1639.88,1201.26 1640.46,1201.26 1641.05,1201.26 1641.63,1201.26 1642.22,1201.26 1642.81,1201.26 1643.39,1201.26 1643.98,1201.26 1644.57,1201.26 1645.15,1201.26 1645.74,1201.26 1646.33,1201.26 1646.91,1201.26 1647.5,1201.26 1648.09,1201.26 1648.67,1201.26 1649.26,1201.26 1649.84,1201.26 1650.43,1201.26 1651.02,1201.26 1651.6,1201.26 1652.19,1201.26 1652.78,1201.26 1653.36,1201.26 1653.95,1201.26 1654.54,1201.26 1655.12,1201.26 1655.71,1201.26 1656.29,1201.26 1656.88,1201.26 1657.47,1201.26 1658.05,1201.26 1658.64,1201.26 1659.23,1201.26 1659.81,1201.26 1660.4,1201.26 1660.99,1201.26 1661.57,1201.26 1662.16,1201.26 1662.75,1201.26 1663.33,1201.26 1663.92,1201.26 1664.5,1201.26 1665.09,1201.26 1665.68,1201.26 1666.26,1201.26 1666.85,1201.26 1667.44,1201.26 1668.02,1201.26 1668.61,1201.26 1669.2,1201.26 1669.78,1201.26 1670.37,1201.26 1670.96,1201.26 1671.54,1201.26 1672.13,1201.26 1672.71,1201.26 1673.3,1201.26 1673.89,1201.26 1674.47,1201.26 1675.06,1201.26 1675.65,1201.26 1676.23,1201.26 1676.82,1201.26 1677.41,1201.26 1677.99,1201.26 1678.58,1201.26 1679.17,1201.26 1679.75,1201.26 1680.34,1201.26 1680.92,1201.26 1681.51,1201.26 1682.1,1201.26 1682.68,1201.26 1683.27,1201.26 1683.86,1201.26 1684.44,1201.26 1685.03,1201.26 1685.62,1201.26 1686.2,1201.26 1686.79,1201.26 1687.37,1201.26 1687.96,1201.26 1688.55,1201.26 1689.13,1201.26 1689.72,1201.26 1690.31,1201.26 1690.89,1201.26 1691.48,1201.26 1692.07,1201.26 1692.65,1201.26 1693.24,1201.26 1693.83,1201.26 1694.41,1201.26 1695,1201.26 1695.58,1201.26 1696.17,1201.26 1696.76,1201.26 1697.34,1201.26 1697.93,1201.26 1698.52,1201.26 1699.1,1201.26 1699.69,1201.26 1700.28,1201.26 1700.86,1201.26 1701.45,1201.26 1702.04,1201.26 1702.62,1201.26 1703.21,1201.26 1703.79,1201.26 1704.38,1201.26 1704.97,1201.26 1705.55,1201.26 1706.14,1201.26 1706.73,1201.26 1707.31,1201.26 1707.9,1201.26 1708.49,1201.26 1709.07,1201.26 1709.66,1201.26 1710.24,1201.26 1710.83,1201.26 1711.42,1201.26 1712,1201.26 1712.59,1201.26 1713.18,1201.26 1713.76,1201.26 1714.35,1201.26 1714.94,1201.26 1715.52,1201.26 1716.11,1201.26 1716.7,1201.26 1717.28,1201.26 1717.87,1201.26 1718.45,1201.26 1719.04,1201.26 1719.63,1201.26 1720.21,1201.26 1720.8,1201.26 1721.39,1201.26 1721.97,1201.26 1722.56,1201.26 1723.15,1201.26 1723.73,1201.26 1724.32,1201.26 1724.91,1201.26 1725.49,1201.26 1726.08,1201.26 1726.66,1201.26 1727.25,1201.26 1727.84,1201.26 1728.42,1201.26 1729.01,1201.26 1729.6,1201.26 1730.18,1201.26 1730.77,1201.26 1731.36,1201.26 1731.94,1201.26 1732.53,1201.26 1733.11,1201.26 1733.7,1201.26 1734.29,1201.26 1734.87,1201.26 1735.46,1201.26 1736.05,1201.26 1736.63,1201.26 1737.22,1201.26 1737.81,1201.26 1738.39,1201.26 1738.98,1201.26 1739.57,1201.26 1740.15,1201.26 1740.74,1201.26 1741.32,1201.26 1741.91,1201.26 1742.5,1201.26 1743.08,1201.26 1743.67,1201.26 1744.26,1201.26 1744.84,1201.26 1745.43,1201.26 1746.02,1201.26 1746.6,1201.26 1747.19,1201.26 1747.78,1201.26 1748.36,1201.26 1748.95,1201.26 1749.53,1201.26 1750.12,1201.26 1750.71,1201.26 1751.29,1201.26 1751.88,1201.26 1752.47,1201.26 1753.05,1201.26 1753.64,1201.26 1754.23,1201.26 1754.81,1201.26 1755.4,1201.26 1755.99,1201.26 1756.57,1201.26 1757.16,1201.26 1757.74,1201.26 1758.33,1201.26 1758.92,1201.26 1759.5,1201.26 1760.09,1201.26 1760.68,1201.26 1761.26,1201.26 1761.85,1201.26 1762.44,1201.26 1763.02,1201.26 1763.61,1201.26 1764.19,1201.26 1764.78,1201.26 1765.37,1201.26 1765.95,1201.26 1766.54,1201.26 1767.13,1201.26 1767.71,1201.26 1768.3,1201.26 1768.89,1201.26 1769.47,1201.26 1770.06,1201.26 1770.65,1201.26 1771.23,1201.26 1771.82,1201.26 1772.4,1201.26 1772.99,1201.26 1773.58,1201.26 1774.16,1201.26 1774.75,1201.26 1775.34,1201.26 1775.92,1201.26 1776.51,1201.26 1777.1,1201.26 1777.68,1201.26 1778.27,1201.26 1778.86,1201.26 1779.44,1201.26 1780.03,1201.26 1780.61,1201.26 1781.2,1201.26 1781.79,1201.26 1782.37,1201.26 1782.96,1201.26 1783.55,1201.26 1784.13,1201.26 1784.72,1201.26 1785.31,1201.26 1785.89,1201.26 1786.48,1201.26 1787.06,1201.26 1787.65,1201.26 1788.24,1201.26 1788.82,1201.26 1789.41,1201.26 1790,1201.26 1790.58,1201.26 1791.17,1201.26 1791.76,1201.26 1792.34,1201.26 1792.93,1201.26 1793.52,1201.26 1794.1,1201.26 1794.69,1201.26 1795.27,1201.26 1795.86,1201.26 1796.45,1201.26 1797.03,1201.26 1797.62,1201.26 1798.21,1201.26 1798.79,1201.26 1799.38,1201.26 1799.97,1201.26 1800.55,1201.26 1801.14,1201.26 1801.73,1201.26 1802.31,1201.26 1802.9,1201.26 1803.48,1201.26 1804.07,1201.26 1804.66,1201.26 1805.24,1201.26 1805.83,1201.26 1806.42,1201.26 1807,1201.26 1807.59,1201.26 1808.18,1201.26 1808.76,1201.26 1809.35,1201.26 1809.94,1201.26 1810.52,1201.26 1811.11,1201.26 1811.69,1201.26 1812.28,1201.26 1812.87,1201.26 1813.45,1201.26 1814.04,1201.26 1814.63,1201.26 1815.21,1201.26 1815.8,1201.26 1816.39,1201.26 1816.97,1201.26 1817.56,1201.26 1818.14,1201.26 1818.73,1201.26 1819.32,1201.26 1819.9,1201.26 1820.49,1201.26 1821.08,1201.26 1821.66,1201.26 1822.25,1201.26 1822.84,1201.26 1823.42,1201.26 1824.01,1201.26 1824.6,1201.26 1825.18,1201.26 1825.77,1201.26 1826.35,1201.26 1826.94,1201.26 1827.53,1201.26 1828.11,1201.26 1828.7,1201.26 1829.29,1201.26 1829.87,1201.26 1830.46,1201.26 1831.05,1201.26 1831.63,1201.26 1832.22,1201.26 1832.81,1201.26 1833.39,1201.26 1833.98,1201.26 1834.56,1201.26 1835.15,1201.26 1835.74,1201.26 1836.32,1201.26 1836.91,1201.26 1837.5,1201.26 1838.08,1201.26 1838.67,1201.26 1839.26,1201.26 1839.84,1201.26 1840.43,1201.26 1841.01,1201.26 1841.6,1201.26 1842.19,1201.26 1842.77,1201.26 1843.36,1201.26 1843.95,1201.26 1844.53,1201.26 1845.12,1201.26 1845.71,1201.26 1846.29,1201.26 1846.88,1201.26 1847.47,1201.26 1848.05,1201.26 1848.64,1201.26 1849.22,1201.26 1849.81,1201.26 1850.4,1201.26 1850.98,1201.26 1851.57,1201.26 1852.16,1201.26 1852.74,1201.26 1853.33,1201.26 1853.92,1201.26 1854.5,1201.26 1855.09,1201.26 1855.68,1201.26 1856.26,1201.26 1856.85,1201.26 1857.43,1201.26 1858.02,1201.26 1858.61,1201.26 1859.19,1201.26 1859.78,1201.26 1860.37,1201.26 1860.95,1201.26 1861.54,1201.26 1862.13,1201.26 1862.71,1201.26 1863.3,1201.26 1863.88,1201.26 1864.47,1201.26 1865.06,1201.26 1865.64,1201.26 1866.23,1201.26 1866.82,1201.26 1867.4,1201.26 1867.99,1201.26 1868.58,1201.26 1869.16,1201.26 1869.75,1201.26 1870.34,1201.26 1870.92,1201.26 1871.51,1201.26 1872.09,1201.26 1872.68,1201.26 1873.27,1201.26 1873.85,1201.26 1874.44,1201.26 1875.03,1201.26 1875.61,1201.26 1876.2,1201.26 1876.79,1201.26 1877.37,1201.26 1877.96,1201.26 1878.55,1201.26 1879.13,1201.26 1879.72,1201.26 1880.3,1201.26 1880.89,1201.26 1881.48,1201.26 1882.06,1201.26 1882.65,1201.26 1883.24,1201.26 1883.82,1201.26 1884.41,1201.26 1885,1201.26 1885.58,1201.26 1886.17,1201.26 1886.76,1201.26 1887.34,1201.26 1887.93,1201.26 1888.51,1201.26 1889.1,1201.26 1889.69,1201.26 1890.27,1201.26 1890.86,1201.26 1891.45,1201.26 1892.03,1201.26 1892.62,1201.26 1893.21,1201.26 1893.79,1201.26 1894.38,1201.26 1894.96,1201.26 1895.55,1201.26 1896.14,1201.26 1896.72,1201.26 1897.31,1201.26 1897.9,1201.26 1898.48,1201.26 1899.07,1201.26 1899.66,1201.26 1900.24,1201.26 1900.83,1201.26 1901.42,1201.26 1902,1201.26 1902.59,1201.26 1903.17,1201.26 1903.76,1201.26 1904.35,1201.26 1904.93,1201.26 1905.52,1201.26 1906.11,1201.26 1906.69,1201.26 1907.28,1201.26 1907.87,1201.26 1908.45,1201.26 1909.04,1201.26 1909.63,1201.26 1910.21,1201.26 1910.8,1201.26 1911.38,1201.26 1911.97,1201.26 1912.56,1201.26 1913.14,1201.26 1913.73,1201.26 1914.32,1201.26 1914.9,1201.26 1915.49,1201.26 1916.08,1201.26 1916.66,1201.26 1917.25,1201.26 1917.83,1201.26 1918.42,1201.26 1919.01,1201.26 1919.59,1201.26 1920.18,1201.26 1920.77,1201.26 1921.35,1201.26 1921.94,1201.26 1922.53,1201.26 1923.11,1201.26 1923.7,1201.26 1924.29,1201.26 1924.87,1201.26 1925.46,1201.26 1926.04,1201.26 1926.63,1201.26 1927.22,1201.26 1927.8,1201.26 1928.39,1201.26 1928.98,1201.26 1929.56,1201.26 1930.15,1201.26 1930.74,1201.26 1931.32,1201.26 1931.91,1201.26 1932.5,1201.26 1933.08,1201.26 1933.67,1201.26 1934.25,1201.26 1934.84,1201.26 1935.43,1201.26 1936.01,1201.26 1936.6,1201.26 1937.19,1201.26 1937.77,1201.26 1938.36,1201.26 1938.95,1201.26 1939.53,1201.26 1940.12,1201.26 1940.71,1201.26 1941.29,1201.26 1941.88,1201.26 1942.46,1201.26 1943.05,1201.26 1943.64,1201.26 1944.22,1201.26 1944.81,1201.26 1945.4,1201.26 1945.98,1201.26 1946.57,1201.26 1947.16,1201.26 1947.74,1201.26 1948.33,1201.26 1948.91,1201.26 1949.5,1201.26 1950.09,1201.26 1950.67,1201.26 1951.26,1201.26 1951.85,1201.26 1952.43,1201.26 1953.02,1201.26 1953.61,1201.26 1954.19,1201.26 1954.78,1201.26 1955.37,1201.26 1955.95,1201.26 1956.54,1201.26 1957.12,1201.26 1957.71,1201.26 1958.3,1201.26 1958.88,1201.26 1959.47,1201.26 1960.06,1201.26 1960.64,1201.26 1961.23,1201.26 1961.82,1201.26 1962.4,1201.26 1962.99,1201.26 1963.58,1201.26 1964.16,1201.26 1964.75,1201.26 1965.33,1201.26 1965.92,1201.26 1966.51,1201.26 1967.09,1201.26 1967.68,1201.26 1968.27,1201.26 1968.85,1201.26 1969.44,1201.26 1970.03,1201.26 1970.61,1201.26 1971.2,1201.26 1971.78,1201.26 1972.37,1201.26 1972.96,1201.26 1973.54,1201.26 1974.13,1201.26 1974.72,1201.26 1975.3,1201.26 1975.89,1201.26 1976.48,1201.26 1977.06,1201.26 1977.65,1201.26 1978.24,1201.26 1978.82,1201.26 1979.41,1201.26 1979.99,1201.26 1980.58,1201.26 1981.17,1201.26 1981.75,1201.26 1982.34,1201.26 1982.93,1201.26 1983.51,1201.26 1984.1,1201.26 1984.69,1201.26 1985.27,1201.26 1985.86,1201.26 1986.45,1201.26 1987.03,1201.26 1987.62,1201.26 1988.2,1201.26 1988.79,1201.26 1989.38,1201.26 1989.96,1201.26 1990.55,1201.26 1991.14,1201.26 1991.72,1201.26 1992.31,1201.26 1992.9,1201.26 1993.48,1201.26 1994.07,1201.26 1994.65,1201.26 1995.24,1201.26 1995.83,1201.26 1996.41,1201.26 1997,1201.26 1997.59,1201.26 1998.17,1201.26 1998.76,1201.26 1999.35,1201.26 1999.93,1201.26 2000.52,1201.26 2001.11,1201.26 2001.69,1201.26 2002.28,1201.26 2002.86,1201.26 2003.45,1201.26 2004.04,1201.26 2004.62,1201.26 2005.21,1201.26 2005.8,1201.26 2006.38,1201.26 2006.97,1201.26 2007.56,1201.26 2008.14,1201.26 2008.73,1201.26 2009.32,1201.26 2009.9,1201.26 2010.49,1201.26 2011.07,1201.26 2011.66,1201.26 2012.25,1201.26 2012.83,1201.26 2013.42,1201.26 2014.01,1201.26 2014.59,1201.26 2015.18,1201.26 2015.77,1201.26 2016.35,1201.26 2016.94,1201.26 2017.53,1201.26 2018.11,1201.26 2018.7,1201.26 2019.28,1201.26 2019.87,1201.26 2020.46,1201.26 2021.04,1201.26 2021.63,1201.26 2022.22,1201.26 2022.8,1201.26 2023.39,1201.26 2023.98,1201.26 2024.56,1201.26 2025.15,1201.26 2025.73,1201.26 2026.32,1201.26 2026.91,1201.26 2027.49,1201.26 2028.08,1201.26 2028.67,1201.26 2029.25,1201.26 2029.84,1201.26 2030.43,1201.26 2031.01,1201.26 2031.6,1201.26 2032.19,1201.26 2032.77,1201.26 2033.36,1201.26 2033.94,1201.26 2034.53,1201.26 2035.12,1201.26 2035.7,1201.26 2036.29,1201.26 2036.88,1201.26 2037.46,1201.26 2038.05,1201.26 2038.64,1201.26 2039.22,1201.26 2039.81,1201.26 2040.4,1201.26 2040.98,1201.26 2041.57,1201.26 2042.15,1201.26 2042.74,1201.26 2043.33,1201.26 2043.91,1201.26 2044.5,1201.26 2045.09,1201.26 2045.67,1201.26 2046.26,1201.26 2046.85,1201.26 2047.43,1201.26 2048.02,1201.26 2048.6,1201.26 2049.19,1201.26 2049.78,1201.26 2050.36,1201.26 2050.95,1201.26 2051.54,1201.26 2052.12,1201.26 2052.71,1201.26 2053.3,1201.26 2053.88,1201.26 2054.47,1201.26 2055.06,1201.26 2055.64,1201.26 2056.23,1201.26 2056.81,1201.26 2057.4,1201.26 2057.99,1201.26 2058.57,1201.26 2059.16,1201.26 2059.75,1201.26 2060.33,1201.26 2060.92,1201.26 2061.51,1201.26 2062.09,1201.26 2062.68,1201.26 2063.27,1201.26 2063.85,1201.26 2064.44,1201.26 2065.02,1201.26 2065.61,1201.26 2066.2,1201.26 2066.78,1201.26 2067.37,1201.26 2067.96,1201.26 2068.54,1201.26 2069.13,1201.26 2069.72,1201.26 2070.3,1201.26 2070.89,1201.26 2071.48,1201.26 2072.06,1201.26 2072.65,1201.26 2073.23,1201.26 2073.82,1201.26 2074.41,1201.26 2074.99,1201.26 2075.58,1201.26 2076.17,1201.26 2076.75,1201.26 2077.34,1201.26 2077.93,1201.26 2078.51,1201.26 2079.1,1201.26 2079.68,1201.26 2080.27,1201.26 2080.86,1201.26 2081.44,1201.26 2082.03,1201.26 2082.62,1201.26 2083.2,1201.26 2083.79,1201.26 2084.38,1201.26 2084.96,1201.26 2085.55,1201.26 2086.14,1201.26 2086.72,1201.26 2087.31,1201.26 2087.89,1201.26 2088.48,1201.26 2089.07,1201.26 2089.65,1201.26 2090.24,1201.26 2090.83,1201.26 2091.41,1201.26 2092,1201.26 2092.59,1201.26 2093.17,1201.26 2093.76,1201.26 2094.35,1201.26 2094.93,1201.26 2095.52,1201.26 2096.1,1201.26 2096.69,1201.26 2097.28,1201.26 2097.86,1201.26 2098.45,1201.26 2099.04,1201.26 2099.62,1201.26 2100.21,1201.26 2100.8,1201.26 2101.38,1201.26 2101.97,1201.26 2102.55,1201.26 2103.14,1201.26 2103.73,1201.26 2104.31,1201.26 2104.9,1201.26 2105.49,1201.26 2106.07,1201.26 2106.66,1201.26 2107.25,1201.26 2107.83,1201.26 2108.42,1201.26 2109.01,1201.26 2109.59,1201.26 2110.18,1201.26 2110.76,1201.26 2111.35,1201.26 2111.94,1201.26 2112.52,1201.26 2113.11,1201.26 2113.7,1201.26 2114.28,1201.26 2114.87,1201.26 2115.46,1201.26 2116.04,1201.26 2116.63,1201.26 2117.22,1201.26 2117.8,1201.26 2118.39,1201.26 2118.97,1201.26 2119.56,1201.26 2120.15,1201.26 2120.73,1201.26 2121.32,1201.26 2121.91,1201.26 2122.49,1201.26 2123.08,1201.26 2123.67,1201.26 2124.25,1201.26 2124.84,1201.26 2125.42,1201.26 2126.01,1201.26 2126.6,1201.26 2127.18,1201.26 2127.77,1201.26 2128.36,1201.26 2128.94,1201.26 2129.53,1201.26 2130.12,1201.26 2130.7,1201.26 2131.29,1201.26 2131.88,1201.26 2132.46,1201.26 2133.05,1201.26 2133.63,1201.26 2134.22,1201.26 2134.81,1201.26 2135.39,1201.26 2135.98,1201.26 2136.57,1201.26 2137.15,1201.26 2137.74,1201.26 2138.33,1201.26 2138.91,1201.26 2139.5,1201.26 2140.09,1201.26 2140.67,1201.26 2141.26,1201.26 2141.84,1201.26 2142.43,1201.26 2143.02,1201.26 2143.6,1201.26 2144.19,1201.26 2144.78,1201.26 2145.36,1201.26 2145.95,1201.26 2146.54,1201.26 2147.12,1201.26 2147.71,1201.26 2148.3,1201.26 2148.88,1201.26 2149.47,1201.26 2150.05,1201.26 2150.64,1201.26 2151.23,1201.26 2151.81,1201.26 2152.4,1201.26 2152.99,1201.26 2153.57,1201.26 2154.16,1201.26 2154.75,1201.26 2155.33,1201.26 2155.92,1201.26 2156.5,1201.26 2157.09,1201.26 2157.68,1201.26 2158.26,1201.26 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.54,1182.67 1401.92,899.083 \"/>\n<polyline clip-path=\"url(#clip522)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1219.33 985.439,1182.67 2158.26,1182.67 2158.26,1219.33 985.439,1219.33 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip520)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip520)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip523\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip520)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip520)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip520)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip523)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-3823.39 163.232,-4954.5 163.792,-5965.04 164.351,-5638.05 164.91,-6583.15 165.469,-7385.51 166.029,-8132.41 166.588,-8776.79 167.147,-9392.71 167.706,-9946.78 168.266,-10443 168.825,-10031.3 169.384,-9673.77 169.943,-10105.5 170.503,-9803.3 171.062,-9546.13 171.621,-9894.17 172.18,-10187.1 172.74,-10429.3 173.299,-10164.8 173.858,-10373.7 174.417,-10556.3 174.977,-10696.4 175.536,-10820.5 176.095,-10910.8 176.655,-10983.9 177.214,-11014.8 177.773,-10730.2 178.332,-10752.8 178.892,-10489.3 179.451,-10457.5 180.01,-10203.6 180.569,-9934.54 181.129,-9880.52 181.688,-9821.62 182.247,-9754.19 182.806,-9681.33 183.366,-9590.28 183.925,-9485.1 184.484,-9241.42 185.043,-9134.72 185.603,-8890.06 186.162,-8649.27 186.721,-8531.04 187.28,-8276.11 187.84,-8043.99 188.399,-7926.25 188.958,-7703.85 189.517,-7489.09 190.077,-7190.75 190.636,-6747.19 191.195,-6564.04 191.754,-6219.06 192.314,-6034.52 192.873,-5780.32 193.432,-5615.2 193.991,-5451.56 194.551,-5281.98 195.11,-5177.22 195.669,-5022.8 196.228,-4920.83 196.788,-4762.55 197.347,-4556.46 197.906,-4464.65 198.465,-4268.02 199.025,-4127.88 199.584,-3802 200.143,-3714.61 200.702,-3590.88 201.262,-3465.37 201.821,-3259.2 202.38,-3062.76 202.939,-2913.15 203.499,-2810.4 204.058,-2706.76 204.617,-2647.26 205.176,-2483.94 205.736,-2346.55 206.295,-2219.98 206.854,-2099.98 207.413,-1980.69 207.973,-1897.24 208.532,-1787.95 209.091,-1712.59 209.65,-1551.56 210.21,-1482.06 210.769,-1385.31 211.328,-1319.29 211.887,-1251.16 212.447,-1186.15 213.006,-1120.57 213.565,-1059.54 214.124,-999.167 214.684,-939.206 215.243,-881.477 215.802,-775.645 216.361,-722.058 216.921,-664.681 217.48,-587.652 218.039,-514.383 218.598,-466.604 219.158,-442.046 219.717,-394.679 220.276,-327.909 220.835,-285.209 221.395,-288.865 221.954,-221.747 222.513,-178.457 223.072,-135.85 223.632,-71.3869 224.191,-31.5486 224.75,-34.4661 225.309,-16.7017 225.869,42.8988 226.428,121.773 226.987,157.164 227.546,189.776 228.106,242.505 228.665,293.849 229.224,339.161 229.783,427.248 230.343,409.958 230.902,452.682 231.461,438.355 232.02,404.798 232.58,430.996 233.139,458.725 233.698,503.425 234.257,510.415 234.817,575.089 235.376,597.331 235.935,617.806 236.494,676.647 237.054,679.191 237.613,728.906 238.172,763.581 238.731,761.152 239.291,793.832 239.85,791.473 240.409,789.43 240.968,784.79 241.528,780.762 242.087,795.277 242.646,810.752 243.205,808.341 243.765,809.14 244.324,802.863 244.883,844.884 245.442,846.728 246.002,847.432 246.561,830.378 247.12,827.052 247.679,828.258 248.239,828.388 248.798,849.208 249.357,848.47 249.916,831.158 250.476,814.415 251.035,852.011 251.594,873.366 252.153,904.114 252.713,915.935 253.272,931.296 253.831,924.077 254.39,940.334 254.95,968.6 255.509,980.377 256.068,958.524 256.627,988.795 257.187,1020.27 257.746,1065.54 258.305,1092.15 258.864,1117.78 259.424,1142.59 259.983,1133.28 260.542,1126.42 261.101,1113.98 261.661,1120.02 262.22,1092.72 262.779,1056.8 263.338,1084.3 263.898,1096.8 264.457,1188.57 265.016,1227.21 265.575,1225.99 266.135,1227.04 266.694,1212.66 267.253,1214.75 267.812,1234.7 268.372,1235.45 268.931,1270.45 269.49,1271.01 270.049,1235.56 270.609,1254.65 271.168,1222.19 271.727,1222.51 272.286,1241.44 272.846,1176.22 273.405,1165.49 273.964,1152.34 274.523,1108.8 275.083,1079.7 275.642,1104.26 276.201,1077.87 276.76,1054.58 277.32,1029.21 277.879,1007.26 278.438,1021.69 278.997,1002.73 279.557,983.341 280.116,995.438 280.675,1057.73 281.234,1081.82 281.794,1073.09 282.353,1081.67 282.912,1087.75 283.471,1094.09 284.031,1068.26 284.59,1075.88 285.149,1080.66 285.708,1074.1 286.268,1082.33 286.827,1074.42 287.386,1063.44 287.945,1072.68 288.505,1049.54 289.064,1055.69 289.623,1048.45 290.182,1059.27 290.742,1048.81 291.301,1022.38 291.86,1032.66 292.419,1024.7 292.979,1100.12 293.538,1117.97 294.097,1122.11 294.656,1113.82 295.216,1069.37 295.775,1045.93 296.334,1006.83 296.893,1021.78 297.453,1031.92 298.012,1074.7 298.571,1082.87 299.13,1041.92 299.69,1017.15 300.249,1026.71 300.808,1000.12 301.368,975.547 301.927,987.036 302.486,980.336 303.045,977.093 303.605,972.695 304.164,985.464 304.723,998.476 305.282,959.577 305.842,957.636 306.401,938.28 306.96,974.049 307.519,986.365 308.079,946.432 308.638,924.517 309.197,955.562 309.756,965.691 310.316,955.581 310.875,922.647 311.434,922.48 311.993,973.351 312.553,966.842 313.112,979.113 313.671,994.484 314.23,974.198 314.79,972.484 315.349,955.914 315.908,953.91 316.467,918.714 317.027,915.232 317.586,912.637 318.145,910.423 318.704,889.43 319.264,905.567 319.823,886.244 320.382,884.681 320.941,886.203 321.501,905.019 322.06,902.163 322.619,899.457 323.178,898.097 323.738,914.209 324.297,912.126 324.856,897.373 325.415,877.836 325.975,859.789 326.534,840.36 327.093,827.437 327.652,814.584 328.212,818.193 328.771,805.709 329.33,824.348 329.889,828.358 330.449,843.137 331.008,860.462 331.567,828.947 332.126,814.817 332.686,817.941 333.245,806.075 333.804,810.377 334.363,828.236 334.923,849.346 335.482,849.148 336.041,867.52 336.6,881.201 337.16,878.188 337.719,926.123 338.278,902.453 338.837,898.662 339.397,879.253 339.956,879.464 340.515,878.385 341.074,890.028 341.634,903.167 342.193,902.114 342.752,882.373 343.311,864.207 343.871,847.938 344.43,881.638 344.989,881.007 345.548,863.546 346.108,845.175 346.667,827.962 347.226,830.729 347.785,833.566 348.345,865.13 348.904,876.897 349.463,892.359 350.022,892.207 350.582,888.516 351.141,869.128 351.7,868.605 352.259,867.368 352.819,882.15 353.378,929.34 353.937,971.425 354.496,963.252 355.056,969.593 355.615,961.454 356.174,938.035 356.733,962.015 357.293,973.634 357.852,966.49 358.411,957.715 358.97,964.635 359.53,1020.98 360.089,1057.83 360.648,1043.55 361.207,1031.6 361.767,1019.89 362.326,1006.32 362.885,978.663 363.444,969.924 364.004,947.701 364.563,958.396 365.122,998.426 365.681,988.712 366.241,1009.98 366.8,999.284 367.359,986.076 367.918,944.788 368.478,969.624 369.037,926.988 369.596,934.783 370.155,964.303 370.715,954.529 371.274,947.934 371.833,903.536 372.392,914.968 372.952,892.045 373.511,887.252 374.07,895.907 374.629,888.707 375.189,901.178 375.748,878.808 376.307,909.339 376.866,903.007 377.426,912.198 377.985,874.73 378.544,836.202 379.103,834.673 379.663,797.696 380.222,796.047 380.781,778.232 381.34,792.329 381.9,791.192 382.459,805.972 383.018,787.352 383.577,771.723 384.137,806.378 384.696,805.933 385.255,802.36 385.814,788.636 386.374,773.973 386.933,804.762 387.492,805.957 388.051,818.191 388.611,803.106 389.17,833.746 389.729,814.321 390.288,844.376 390.848,840.558 391.407,838.773 391.966,824.061 392.525,841.867 393.085,841.63 393.644,869.097 394.203,845.742 394.762,842.959 395.322,841.158 395.881,821.601 396.44,816.684 396.999,813.404 397.559,792.3 398.118,825.025 398.677,823.397 399.236,834.08 399.796,816.207 400.355,813.544 400.914,812.409 401.473,809.094 402.033,823.022 402.592,803.847 403.151,822.813 403.71,836.967 404.27,855.168 404.829,834.332 405.388,846.142 405.947,842.155 406.507,855.555 407.066,851.356 407.625,845.512 408.184,857.345 408.744,885.649 409.303,879.563 409.862,893.667 410.421,887.119 410.981,882.382 411.54,877.675 412.099,872.05 412.658,865.632 413.218,860.971 413.777,874.581 414.336,886.895 414.895,881.287 415.455,891.05 416.014,897.475 416.573,907.222 417.132,916.267 417.692,940.003 418.251,919.973 418.81,937.974 419.369,960.246 419.929,947.962 420.488,871.452 421.047,865.51 421.606,827.505 422.166,855.523 422.725,866.509 423.284,860.216 423.843,856.228 424.403,819.05 424.962,799.84 425.521,800.481 426.08,768.553 426.64,769.173 427.199,788.672 427.758,751.693 428.318,754.502 428.877,787.044 429.436,802.924 429.995,770.552 430.555,787.446 431.114,784.154 431.673,766.098 432.232,734.671 432.792,751.96 433.351,782.331 433.91,799.701 434.469,795.762 435.029,780.261 435.588,780.309 436.147,793.744 436.706,759.599 437.266,744.513 437.825,713.521 438.384,696.991 438.943,686.756 439.503,721.881 440.062,692.932 440.621,710.134 441.18,712.675 441.74,712.673 442.299,683.101 442.858,709.079 443.417,730.876 443.977,732.435 444.536,746.084 445.095,778.58 445.654,714.225 446.214,732.671 446.773,765.844 447.332,781.562 447.891,780.646 448.451,761.168 449.01,777.433 449.569,762.619 450.128,761.267 450.688,745.765 451.247,735.08 451.806,739.749 452.365,771.459 452.925,787.239 453.484,803.902 454.043,818.5 454.602,879.393 455.162,919.399 455.721,927.112 456.28,935.814 456.839,908.368 457.399,897.19 457.958,906.055 458.517,880.759 459.076,872.866 459.636,865.444 460.195,844.022 460.754,820.234 461.313,815.98 461.873,815.014 462.432,795.892 462.991,776.02 463.55,757.446 464.11,740.08 464.669,742.897 465.228,743.114 465.787,712.968 466.347,746.68 466.906,766.286 467.465,751.295 468.024,755.632 468.584,807.853 469.143,787.715 469.702,786.438 470.261,782.967 470.821,764.843 471.38,733.777 471.939,732.383 472.498,762.965 473.058,761.798 473.617,744.788 474.176,744.837 474.735,773.847 475.295,740.062 475.854,689.19 476.413,674.476 476.972,709.298 477.532,729.1 478.091,745.328 478.65,698.591 479.209,683.957 479.769,685.813 480.328,656.667 480.887,675.71 481.446,709.677 482.006,697.102 482.565,715.218 483.124,716.002 483.683,719.273 484.243,738.383 484.802,741.317 485.361,756.797 485.92,755.252 486.48,752.459 487.039,736.689 487.598,689.173 488.157,705.795 488.717,723.884 489.276,752.605 489.835,769.186 490.394,768.396 490.954,749.938 491.513,751.813 492.072,773.639 492.631,756.608 493.191,773.443 493.75,757.573 494.309,788.562 494.868,771.955 495.428,805.436 495.987,799.41 496.546,825.195 497.105,836.187 497.665,829.668 498.224,822.999 498.783,803.856 499.342,796.807 499.902,724.947 500.461,722.538 501.02,741.958 501.579,757.947 502.139,754.54 502.698,754.431 503.257,752.729 503.816,766.187 504.376,761.592 504.935,771.677 505.494,770.18 506.053,785.129 506.613,817.233 507.172,797.572 507.731,797.991 508.29,809.121 508.85,804.535 509.409,830.139 509.968,822.75 510.527,816.834 511.087,829.667 511.646,791.293 512.205,773.769 512.764,769.573 513.324,768.379 513.883,802.196 514.442,750.163 515.001,719.962 515.561,720.215 516.12,719.195 516.679,720.853 517.238,688.737 517.798,704.87 518.357,687.857 518.916,640.131 519.475,659.685 520.035,644.885 520.594,633.988 521.153,640.36 521.712,628.715 522.272,632.878 522.831,637.466 523.39,640.742 523.949,629.372 524.509,636.251 525.068,626.253 525.627,648.789 526.186,701.835 526.746,685.405 527.305,687.047 527.864,707.692 528.423,709.183 528.983,709.587 529.542,740.547 530.101,757.585 530.66,723.585 531.22,773.203 531.779,803.191 532.338,782.769 532.897,763.491 533.457,744.103 534.016,743.226 534.575,741.318 535.134,759.735 535.694,709.502 536.253,726.551 536.812,750.857 537.371,731.644 537.931,731.827 538.49,731.477 539.049,728.423 539.608,726.56 540.168,725.26 540.727,691.399 541.286,661.673 541.845,663.371 542.405,636.824 542.964,657.947 543.523,679.611 544.082,665.886 544.642,701.907 545.201,735.488 545.76,713.72 546.319,727.137 546.879,759.528 547.438,790.101 547.997,820.695 548.556,798.144 549.116,793.012 549.675,820.1 550.234,818.679 550.793,825.996 551.353,758.219 551.912,740.911 552.471,741.101 553.031,771.354 553.59,767.508 554.149,750.017 554.708,731.037 555.268,794.284 555.827,775.809 556.386,742.043 556.945,705.712 557.505,720.512 558.064,708.65 558.623,694.715 559.182,662.722 559.742,732.2 560.301,697.323 560.86,665.85 561.419,664.817 561.979,700.566 562.538,703.101 563.097,656.896 563.656,662.888 564.216,666.355 564.775,669.557 565.334,671.444 565.893,656.539 566.453,678.964 567.012,661.524 567.571,662.957 568.13,683.385 568.69,686.018 569.249,684.319 569.808,684.958 570.367,668.253 570.927,667.748 571.486,650.935 572.045,636.85 572.604,639.494 573.164,626.063 573.723,632.117 574.282,652.865 574.841,658.257 575.401,678.027 575.96,693.399 576.519,694.205 577.078,748.413 577.638,749.188 578.197,748.323 578.756,780.44 579.315,775.552 579.875,804.582 580.434,754.625 580.993,752.212 581.552,735.342 582.112,735.031 582.671,736.776 583.23,690.665 583.789,707.711 584.349,691.272 584.908,724.913 585.467,711.097 586.026,727.941 586.586,724.658 587.145,738.385 587.704,723.592 588.263,707.413 588.823,706.781 589.382,724.063 589.941,706.483 590.5,707.343 591.06,741.387 591.619,739.813 592.178,738.168 592.737,721.985 593.297,756.643 593.856,753.426 594.415,752.213 594.974,734.13 595.534,732.041 596.093,710.898 596.652,711.474 597.211,727.382 597.771,741.545 598.33,753.726 598.889,718.235 599.448,716.778 600.008,668.801 600.567,668.299 601.126,670.535 601.685,658.249 602.245,646.857 602.804,665.084 603.363,682.216 603.922,695.909 604.482,714.358 605.041,712.656 605.6,744.905 606.159,762.71 606.719,761.912 607.278,790.191 607.837,770.031 608.396,750.084 608.956,731.702 609.515,743.513 610.074,743.541 610.633,740.849 611.193,772.581 611.752,705.087 612.311,705.94 612.87,692.059 613.43,693.904 613.989,709.393 614.548,723.369 615.107,755.684 615.667,719.719 616.226,719.729 616.785,705.34 617.344,707.564 617.904,705.721 618.463,687.827 619.022,722.552 619.581,723.541 620.141,689.746 620.7,705.452 621.259,703.23 621.818,721.63 622.378,719.521 622.937,733.059 623.496,714.624 624.055,651.196 624.615,636.975 625.174,643.234 625.733,679.153 626.292,661.826 626.852,663.404 627.411,665.645 627.97,679.815 628.529,646.571 629.089,650.63 629.648,657.421 630.207,693.53 630.766,695.492 631.326,711.216 631.885,724.8 632.444,723.759 633.003,755.563 633.563,752.483 634.122,751.947 634.681,792.883 635.24,803.941 635.8,796.431 636.359,794.37 636.918,822.932 637.477,787.158 638.037,779.569 638.596,777.494 639.155,739.722 639.714,751.843 640.274,781.329 640.833,772.857 641.392,770.022 641.951,780.291 642.511,724.789 643.07,756.42 643.629,737.142 644.188,733.02 644.748,711.098 645.307,712.032 645.866,711.361 646.425,741.635 646.985,756.594 647.544,738.082 648.103,703.513 648.662,716.902 649.222,731.665 649.781,728.215 650.34,741.908 650.899,722.788 651.459,722.993 652.018,704.6 652.577,720.174 653.136,750.376 653.696,764.567 654.255,776.457 654.814,790.836 655.373,818.359 655.933,843.875 656.492,818.931 657.051,764.673 657.61,791.56 658.17,800.529 658.729,797.546 659.288,790.76 659.847,802.016 660.407,763.563 660.966,760.728 661.525,791.984 662.084,772.76 662.644,756.688 663.203,720.62 663.762,721.01 664.321,737.633 664.881,754.038 665.44,752.533 665.999,765.435 666.558,749.3 667.118,777.306 667.677,791.535 668.236,771.144 668.795,765.589 669.355,774.92 669.914,784.812 670.473,742.196 671.032,726.749 671.592,739.61 672.151,752.034 672.71,701.702 673.269,682.672 673.829,668.845 674.388,621.041 674.947,608.193 675.506,599.034 676.066,584.504 676.625,626.647 677.184,580.382 677.743,582.974 678.303,620.906 678.862,640.789 679.421,673.325 679.981,673.835 680.54,644.459 681.099,628.703 681.658,615.753 682.218,604.455 682.777,607.243 683.336,610.338 683.895,598.04 684.455,601.127 685.014,608.309 685.573,643.932 686.132,646.757 686.692,663.314 687.251,650.977 687.81,630.431 688.369,619.002 688.929,622.776 689.488,630.132 690.047,632.457 690.606,636.155 691.166,640.97 691.725,625.008 692.284,565.398 692.843,550.896 693.403,577.015 693.962,599.519 694.521,621.281 695.08,627.896 695.64,647.495 696.199,684.519 696.758,685.323 697.317,687.92 697.877,690.849 698.436,680.5 698.995,680.752 699.554,679.143 700.114,698.67 700.673,684.929 701.232,667.137 701.791,638.121 702.351,656.017 702.91,671.046 703.469,717.169 704.028,733.82 704.588,731.723 705.147,747.864 705.706,747.394 706.265,774.776 706.825,753.48 707.384,787.217 707.943,754.124 708.502,767.222 709.062,730.634 709.621,729.312 710.18,728.644 710.739,723.971 711.299,724.327 711.858,689.39 712.417,706.712 712.976,722.196 713.536,706.95 714.095,689.775 714.654,687.205 715.213,640.361 715.773,674.424 716.332,657.046 716.891,675.877 717.45,697.384 718.01,661.514 718.569,660.994 719.128,645.174 719.687,649.523 720.247,670.942 720.806,669.486 721.365,685.222 721.924,652.41 722.484,640.728 723.043,641.045 723.602,627.142 724.161,631.794 724.721,632.129 725.28,617.994 725.839,637.96 726.398,641.806 726.958,646.37 727.517,667.802 728.076,670.633 728.635,686.567 729.195,722.924 729.754,689.726 730.313,672.232 730.872,652.913 731.432,661.589 731.991,662.273 732.55,663.525 733.109,665.029 733.669,650.127 734.228,637.635 734.787,640.776 735.346,625.274 735.906,651.316 736.465,687.212 737.024,702.27 737.583,701.765 738.143,703.059 738.702,718.051 739.261,706.19 739.82,689.727 740.38,693.766 740.939,645.381 741.498,632.776 742.057,668.694 742.617,654.493 743.176,670.308 743.735,669.756 744.294,670.767 744.854,668.835 745.413,673.166 745.972,691.465 746.531,690.93 747.091,691.832 747.65,709.129 748.209,725.362 748.768,685.487 749.328,688.18 749.887,686.611 750.446,716.369 751.005,700.847 751.565,688.191 752.124,673.997 752.683,689.966 753.242,671.035 753.802,672.155 754.361,673.812 754.92,675.808 755.479,676.881 756.039,678.179 756.598,711.765 757.157,692.879 757.716,710.191 758.276,689.14 758.835,654.919 759.394,669.987 759.953,687.047 760.513,722.187 761.072,750.076 761.631,733.309 762.19,696.556 762.75,696.1 763.309,694.656 763.868,711.228 764.427,678.595 764.987,667.698 765.546,668.612 766.105,670.475 766.664,653.892 767.224,669.845 767.783,687.495 768.342,715.173 768.901,696.372 769.461,698.706 770.02,682.431 770.579,699.179 771.138,699.726 771.698,648.953 772.257,666.19 772.816,670.141 773.375,656.446 773.935,671.313 774.494,653.754 775.053,659.173 775.612,692.223 776.172,675.623 776.731,675.973 777.29,707.841 777.849,726.988 778.409,707.348 778.968,690.519 779.527,706.273 780.086,692.275 780.646,693.035 781.205,695.247 781.764,693.496 782.323,674.121 782.883,655.889 783.442,672.384 784.001,689.747 784.56,693.086 785.12,693.138 785.679,690.925 786.238,692.135 786.797,710.295 787.357,694.002 787.916,725.762 788.475,694.947 789.034,716.423 789.594,699.174 790.153,715.827 790.712,729.197 791.271,729.08 791.831,745.4 792.39,760.021 792.949,777.023 793.508,772.704 794.068,781.98 794.627,779.754 795.186,758.844 795.745,752.019 796.305,734.543 796.864,714.729 797.423,630.58 797.982,630.013 798.542,585.823 799.101,604.339 799.66,595.135 800.219,616.732 800.779,634.12 801.338,632.417 801.897,682.507 802.456,666.156 803.016,666.15 803.575,699.334 804.134,666.075 804.693,680.388 805.253,698.359 805.812,680.778 806.371,697.348 806.931,707.637 807.49,689.224 808.049,691.035 808.608,707.853 809.168,706.711 809.727,739.919 810.286,735.335 810.845,780.05 811.405,825.766 811.964,820.728 812.523,780.406 813.082,740.597 813.642,738.168 814.201,737.763 814.76,750.177 815.319,749.155 815.879,746.893 816.438,756.755 816.997,782.684 817.556,775.671 818.116,756.659 818.675,737.795 819.234,784.155 819.793,716.968 820.353,747.694 820.912,793.807 821.471,785.145 822.03,732.234 822.59,728.318 823.149,711.886 823.708,745.307 824.267,712.429 824.827,741.069 825.386,735.983 825.945,747.2 826.504,728.061 827.064,727.437 827.623,709.365 828.182,724.306 828.741,689.797 829.301,687.315 829.86,673.433 830.419,693.737 830.978,709.85 831.538,723.248 832.097,706.991 832.656,689.255 833.215,672.199 833.775,685.353 834.334,668.622 834.893,669.283 835.452,674.7 836.012,645.704 836.571,713.672 837.13,746.9 837.689,740.003 838.249,752.306 838.808,733.404 839.367,681.307 839.926,681.463 840.486,746.487 841.045,772.847 841.604,735.122 842.163,732.781 842.723,680.792 843.282,664.934 843.841,648.78 844.4,617.173 844.96,606.113 845.519,629.068 846.078,616.682 846.637,618.952 847.197,625.654 847.756,678.379 848.315,678.793 848.874,661.888 849.434,678.315 849.993,677.835 850.552,676.633 851.111,694.903 851.671,675.839 852.23,706.794 852.789,709.301 853.348,707.415 853.908,719.09 854.467,729.803 855.026,710.821 855.585,678.203 856.145,633.316 856.704,669.565 857.263,702.662 857.822,734.571 858.382,734.68 858.941,715.226 859.5,678.204 860.059,695.609 860.619,744.311 861.178,710.014 861.737,707.561 862.296,690.461 862.856,706.609 863.415,708.117 863.974,689.363 864.533,688.396 865.093,674.986 865.652,657.104 866.211,676.57 866.77,708.42 867.33,707.693 867.889,691.835 868.448,726.178 869.007,692.681 869.567,663.215 870.126,663.39 870.685,729.658 871.244,710.484 871.804,711.156 872.363,729.998 872.922,741.256 873.481,706.703 874.041,708.175 874.6,722.243 875.159,719.672 875.718,718.984 876.278,700.841 876.837,716.434 877.396,731.211 877.955,726.984 878.515,773.369 879.074,766.884 879.633,763.358 880.192,758.463 880.752,754.522 881.311,733.4 881.87,745.716 882.429,743.615 882.989,723.745 883.548,736.002 884.107,746.104 884.666,742.227 885.226,724.241 885.785,721.16 886.344,733.02 886.903,749.038 887.463,712.612 888.022,678.358 888.581,697.957 889.14,749.194 889.7,744.379 890.259,763.196 890.818,806.393 891.377,797.58 891.937,758.563 892.496,754.677 893.055,735.278 893.614,747.198 894.174,761.256 894.733,788.777 895.292,800.512 895.851,826.36 896.411,815.338 896.97,804.332 897.529,816.629 898.088,810.237 898.648,803.357 899.207,778.613 899.766,770.821 900.325,750.8 900.885,747.839 901.444,726.504 902.003,725.662 902.562,705.36 903.122,639.932 903.681,642.526 904.24,659.175 904.799,678.422 905.359,642.672 905.918,630.98 906.477,597.201 907.036,617.274 907.596,603.919 908.155,605.613 908.714,589.366 909.273,609.065 909.833,616.908 910.392,620.577 910.951,622.127 911.51,639.007 912.07,644.542 912.629,646.663 913.188,649.776 913.747,634.823 914.307,636.982 914.866,608.445 915.425,626.475 915.984,677.634 916.544,661.814 917.103,675.969 917.662,695.814 918.221,632.326 918.781,637.548 919.34,625.928 919.899,629.901 920.458,652.308 921.018,637.447 921.577,642.042 922.136,611.352 922.695,645.752 923.255,613.955 923.814,600.445 924.373,587.093 924.932,590.913 925.492,581.588 926.051,571.644 926.61,546.061 927.169,538.924 927.729,548.944 928.288,607.266 928.847,580.468 929.406,569.574 929.966,560.989 930.525,584.687 931.084,576.699 931.644,565.374 932.203,572.14 932.762,590.915 933.321,596.918 933.881,636.908 934.44,638.659 934.999,660.439 935.558,696.111 936.118,682.755 936.677,681.313 937.236,636.383 937.795,641.015 938.355,674.452 938.914,656.409 939.473,705.453 940.032,722.705 940.592,706.381 941.151,709.45 941.71,679.137 942.269,665.29 942.829,680.713 943.388,681.276 943.947,699.61 944.506,700.422 945.066,682.531 945.625,684.31 946.184,666.768 946.743,667.049 947.303,702.81 947.862,669.288 948.421,637.974 948.98,611.792 949.54,618.131 950.099,590.429 950.658,610.042 951.217,632.312 951.777,621.043 952.336,588.806 952.895,577.153 953.454,566.937 954.014,620.81 954.573,686.301 955.132,684.07 955.691,683.955 956.251,717.73 956.81,685.764 957.369,670.365 957.928,677.148 958.488,661.724 959.047,665.582 959.606,666.997 960.165,666.387 960.725,670.798 961.284,672.86 961.843,741.924 962.402,690.243 962.962,690.398 963.521,706.767 964.08,706.837 964.639,689.298 965.199,701.918 965.758,674.076 966.317,645.874 966.876,662.75 967.436,662.268 967.995,629.925 968.554,636.461 969.113,635.254 969.673,668.68 970.232,670.631 970.791,690.59 971.35,704.098 971.91,701.965 972.469,704.004 973.028,734.181 973.587,700.281 974.147,698.594 974.706,717.506 975.265,699.037 975.824,714.159 976.384,714.69 976.943,743.769 977.502,773.549 978.061,785.118 978.621,780.274 979.18,771.924 979.739,780.039 980.298,773.037 980.858,799.736 981.417,792.059 981.976,771.397 982.535,749.727 983.095,733.922 983.654,715.371 984.213,729.49 984.772,745.616 985.332,726.85 985.891,723.391 986.45,738.207 987.009,719.27 987.569,767.879 988.128,765.792 988.687,778.796 989.246,738.762 989.806,770.952 990.365,797.618 990.924,807.821 991.483,800.114 992.043,844.433 992.602,854.035 993.161,825.527 993.72,816.219 994.28,828.104 994.839,806.108 995.398,767.69 995.957,744.713 996.517,740.218 997.076,753.799 997.635,747.28 998.194,712.414 998.754,727.592 999.313,744.185 999.872,756.441 1000.43,813.287 1000.99,822.414 1001.55,798.318 1002.11,776.283 1002.67,739.019 1003.23,719.204 1003.79,702.254 1004.35,699.888 1004.91,716.703 1005.46,713.602 1006.02,727.262 1006.58,725.687 1007.14,726.302 1007.7,739.832 1008.26,724.318 1008.82,723.268 1009.38,686.883 1009.94,701.098 1010.5,666.229 1011.06,716.03 1011.62,713.822 1012.18,693.497 1012.73,691.42 1013.29,673.588 1013.85,691.057 1014.41,690.116 1014.97,705.036 1015.53,704.494 1016.09,718.19 1016.65,700.6 1017.21,699.403 1017.77,698.081 1018.33,715.811 1018.89,716.404 1019.45,680.227 1020.01,664.613 1020.56,668.241 1021.12,669.81 1021.68,621.682 1022.24,658.391 1022.8,658.779 1023.36,643.618 1023.92,665.209 1024.48,683.346 1025.04,671.776 1025.6,658.709 1026.16,660.142 1026.72,596.669 1027.28,569.644 1027.83,591.102 1028.39,578.207 1028.95,583.38 1029.51,560.242 1030.07,594.744 1030.63,567.786 1031.19,593.792 1031.75,631.341 1032.31,648.069 1032.87,651.743 1033.43,655.737 1033.99,659.491 1034.55,661.629 1035.1,646.484 1035.66,648.914 1036.22,671.156 1036.78,672.793 1037.34,691.863 1037.9,689.67 1038.46,703.406 1039.02,688.089 1039.58,655.148 1040.14,682.963 1040.7,702.796 1041.26,721.146 1041.82,786.923 1042.38,785.272 1042.93,799.022 1043.49,808.721 1044.05,814.98 1044.61,828.916 1045.17,816.878 1045.73,804.16 1046.29,780.426 1046.85,788.829 1047.41,819.348 1047.97,795.674 1048.53,770.342 1049.09,798.905 1049.65,777.202 1050.2,771.078 1050.76,764.971 1051.32,791.383 1051.88,766.183 1052.44,746.986 1053,743.527 1053.56,741.672 1054.12,722.348 1054.68,688.994 1055.24,689.681 1055.8,724.575 1056.36,705.184 1056.92,721.865 1057.48,737.84 1058.03,770.319 1058.59,783.2 1059.15,792.397 1059.71,751.57 1060.27,746.982 1060.83,760.494 1061.39,742.972 1061.95,741.32 1062.51,723.692 1063.07,721.769 1063.63,705.615 1064.19,702.038 1064.75,683.275 1065.3,652.103 1065.86,621.609 1066.42,594.105 1066.98,565.13 1067.54,554.243 1068.1,544.45 1068.66,520.499 1069.22,531.045 1069.78,556.575 1070.34,609.66 1070.9,628.561 1071.46,613.015 1072.02,645.141 1072.57,646.78 1073.13,646.757 1073.69,567.897 1074.25,559.34 1074.81,549.755 1075.37,574.749 1075.93,562.332 1076.49,552.949 1077.05,577.475 1077.61,619.42 1078.17,606.694 1078.73,612.614 1079.29,617.244 1079.85,601.051 1080.4,610.924 1080.96,598.695 1081.52,587.571 1082.08,579.021 1082.64,570.306 1083.2,607.514 1083.76,606.185 1084.32,626.507 1084.88,626.952 1085.44,615.287 1086,585.387 1086.56,607.572 1087.12,627.524 1087.67,645.589 1088.23,663.348 1088.79,664.851 1089.35,682.764 1089.91,683.445 1090.47,700.85 1091.03,654.42 1091.59,628.922 1092.15,632.82 1092.71,655.449 1093.27,654.357 1093.83,639.533 1094.39,660.478 1094.94,676.292 1095.5,694.647 1096.06,663.957 1096.62,602.676 1097.18,607.842 1097.74,593.64 1098.3,616.186 1098.86,618.344 1099.42,639.697 1099.98,588.479 1100.54,591.828 1101.1,599.371 1101.66,636.923 1102.22,657.979 1102.77,662.835 1103.33,631.636 1103.89,652.416 1104.45,683.515 1105.01,684.639 1105.57,687.227 1106.13,668.7 1106.69,732.04 1107.25,729.518 1107.81,710.588 1108.37,693.69 1108.93,707.419 1109.49,662.071 1110.04,643.189 1110.6,678.64 1111.16,712.001 1111.72,712.88 1112.28,711.92 1112.84,727.687 1113.4,739.353 1113.96,733.702 1114.52,714.891 1115.08,713.278 1115.64,662.939 1116.2,684.824 1116.76,681.482 1117.31,666.938 1117.87,681.964 1118.43,654.524 1118.99,670.625 1119.55,652.581 1120.11,684.424 1120.67,686.036 1121.23,687.234 1121.79,734.442 1122.35,761.606 1122.91,743.745 1123.47,786.785 1124.03,732.39 1124.59,728.435 1125.14,707.587 1125.7,704.139 1126.26,700.609 1126.82,734.745 1127.38,718.448 1127.94,701.962 1128.5,684.397 1129.06,669.256 1129.62,668.786 1130.18,671.6 1130.74,642.788 1131.3,663.674 1131.86,694.274 1132.41,691.886 1132.97,708.582 1133.53,677.139 1134.09,681.298 1134.65,680.32 1135.21,702.392 1135.77,652.971 1136.33,622.043 1136.89,624.217 1137.45,627.381 1138.01,678.286 1138.57,708.963 1139.13,687.555 1139.68,701.295 1140.24,684.731 1140.8,715.732 1141.36,713.046 1141.92,743.466 1142.48,742.506 1143.04,722.871 1143.6,736.602 1144.16,792.877 1144.72,786.584 1145.28,777.167 1145.84,758.086 1146.4,687.259 1146.96,703.053 1147.51,684.085 1148.07,683.696 1148.63,649.935 1149.19,635.688 1149.75,655.208 1150.31,643.05 1150.87,660.594 1151.43,633.41 1151.99,637.056 1152.55,640.375 1153.11,627.103 1153.67,630.417 1154.23,603.636 1154.78,610.12 1155.34,646.762 1155.9,744.755 1156.46,723.599 1157.02,688.888 1157.58,689.076 1158.14,690.696 1158.7,674.862 1159.26,691.864 1159.82,689.92 1160.38,655.372 1160.94,656.186 1161.5,655.906 1162.05,641.187 1162.61,643.721 1163.17,611.371 1163.73,633.761 1164.29,635.162 1164.85,618.099 1165.41,625.173 1165.97,659.874 1166.53,645.383 1167.09,648.213 1167.65,634.432 1168.21,668.109 1168.77,668.799 1169.33,701.006 1169.88,717.578 1170.44,718.923 1171,714.3 1171.56,717.513 1172.12,718.634 1172.68,733.682 1173.24,712.488 1173.8,710.966 1174.36,744.731 1174.92,759.931 1175.48,770.773 1176.04,781.18 1176.6,742.477 1177.15,719.497 1177.71,735.388 1178.27,752.169 1178.83,766.288 1179.39,761.114 1179.95,721.51 1180.51,752.765 1181.07,731.387 1181.63,714.069 1182.19,728.685 1182.75,705.968 1183.31,687.057 1183.87,720.62 1184.43,721.214 1184.98,710.704 1185.54,708.11 1186.1,720.225 1186.66,735.941 1187.22,749.321 1187.78,713.974 1188.34,725.284 1188.9,719.777 1189.46,681.779 1190.02,666.619 1190.58,698.76 1191.14,714.018 1191.7,694.192 1192.25,691.874 1192.81,674.217 1193.37,677.726 1193.93,660.721 1194.49,710.868 1195.05,706.996 1195.61,688.973 1196.17,701.695 1196.73,700.216 1197.29,714.953 1197.85,711.517 1198.41,726.751 1198.97,689.822 1199.52,691.187 1200.08,678.136 1200.64,646.502 1201.2,630.849 1201.76,636.357 1202.32,637.311 1202.88,655.726 1203.44,706.692 1204,689.289 1204.56,672.859 1205.12,672.424 1205.68,672.084 1206.24,675.648 1206.8,644.823 1207.35,662.423 1207.91,696.941 1208.47,693.632 1209.03,710.636 1209.59,739.649 1210.15,736.402 1210.71,683.882 1211.27,672.125 1211.83,704 1212.39,753.76 1212.95,766.772 1213.51,777.771 1214.07,754.156 1214.62,701.195 1215.18,731.731 1215.74,715.659 1216.3,713.349 1216.86,698.871 1217.42,715.595 1217.98,745.098 1218.54,710.145 1219.1,691.897 1219.66,712.061 1220.22,711.762 1220.78,729.58 1221.34,728.399 1221.89,644.882 1222.45,647.768 1223.01,618.511 1223.57,609.769 1224.13,627.722 1224.69,632.248 1225.25,623.143 1225.81,624.062 1226.37,658.214 1226.93,639.739 1227.49,660.094 1228.05,659.277 1228.61,675.973 1229.17,676.164 1229.72,643.69 1230.28,645.328 1230.84,663.437 1231.4,713.977 1231.96,713.01 1232.52,728.928 1233.08,740.9 1233.64,704.812 1234.2,721.125 1234.76,700.459 1235.32,731.981 1235.88,776.516 1236.44,804.073 1236.99,783.619 1237.55,765.806 1238.11,777.848 1238.67,803.777 1239.23,765.347 1239.79,773.682 1240.35,785.195 1240.91,783.526 1241.47,808.145 1242.03,769.387 1242.59,726.896 1243.15,772.812 1243.71,751.476 1244.26,766.299 1244.82,731.124 1245.38,680.689 1245.94,698.457 1246.5,698.127 1247.06,679.978 1247.62,641.857 1248.18,658.696 1248.74,659.683 1249.3,677.601 1249.86,677.532 1250.42,663.97 1250.98,617.867 1251.54,604.636 1252.09,608.979 1252.65,577.785 1253.21,551.202 1253.77,509.529 1254.33,536.988 1254.89,515.289 1255.45,539.917 1256.01,550.819 1256.57,557.616 1257.13,550.064 1257.69,525.606 1258.25,500.943 1258.81,496.918 1259.36,507.088 1259.92,504.24 1260.48,497.354 1261.04,492.3 1261.6,489.151 1262.16,483.599 1262.72,496.611 1263.28,473.049 1263.84,488.132 1264.4,547.925 1264.96,571.925 1265.52,593.158 1266.08,596.866 1266.63,602.624 1267.19,607.412 1267.75,627.06 1268.31,609.673 1268.87,600.506 1269.43,590.057 1269.99,613.425 1270.55,600.764 1271.11,622.945 1271.67,611.473 1272.23,615.647 1272.79,605.807 1273.35,591.93 1273.91,596.045 1274.46,617.238 1275.02,622.503 1275.58,657.204 1276.14,658.74 1276.7,643.165 1277.26,628.091 1277.82,650.764 1278.38,637.336 1278.94,639.733 1279.5,628.092 1280.06,664.653 1280.62,665.369 1281.18,684.348 1281.73,652.476 1282.29,682.508 1282.85,675.047 1283.41,674.56 1283.97,690.994 1284.53,723.365 1285.09,738.048 1285.65,749.69 1286.21,747.135 1286.77,728.838 1287.33,710.913 1287.89,679.641 1288.45,680.836 1289,681.619 1289.56,696.727 1290.12,694.057 1290.68,711.478 1291.24,741.452 1291.8,756.986 1292.36,753.875 1292.92,783.151 1293.48,762.383 1294.04,728.808 1294.6,708.254 1295.16,709.966 1295.72,761.585 1296.28,774.127 1296.83,769.769 1297.39,783.446 1297.95,826.96 1298.51,772.613 1299.07,738.133 1299.63,716.39 1300.19,730.651 1300.75,744.341 1301.31,741.466 1301.87,736.494 1302.43,765.465 1302.99,696.819 1303.55,711.624 1304.1,707.41 1304.66,718.568 1305.22,732.934 1305.78,728.693 1306.34,739.994 1306.9,740.186 1307.46,707.571 1308.02,710.282 1308.58,675.247 1309.14,687.713 1309.7,687.058 1310.26,688.336 1310.82,701.559 1311.38,700.533 1311.93,681.532 1312.49,665.388 1313.05,649.117 1313.61,667.281 1314.17,669.048 1314.73,634.292 1315.29,653.264 1315.85,670.957 1316.41,687.839 1316.97,689.176 1317.53,668.75 1318.09,669.856 1318.65,687.619 1319.2,698.28 1319.76,692.111 1320.32,690.58 1320.88,689.643 1321.44,654.492 1322,640.438 1322.56,658.823 1323.12,661.002 1323.68,662.311 1324.24,680.9 1324.8,682.196 1325.36,665.848 1325.92,665.836 1326.47,696.504 1327.03,664.595 1327.59,681.278 1328.15,682.62 1328.71,686.627 1329.27,735.032 1329.83,733.108 1330.39,697.779 1330.95,711.199 1331.51,726.038 1332.07,707.772 1332.63,693.002 1333.19,676.283 1333.75,642.753 1334.3,626.124 1334.86,626.47 1335.42,647.095 1335.98,646.953 1336.54,649.797 1337.1,680.825 1337.66,681.962 1338.22,681.856 1338.78,695.991 1339.34,729.471 1339.9,726.795 1340.46,677.684 1341.02,679.292 1341.57,678.216 1342.13,662.126 1342.69,647.209 1343.25,630.686 1343.81,651.951 1344.37,653.267 1344.93,673.052 1345.49,704.814 1346.05,721.41 1346.61,673.574 1347.17,693.626 1347.73,677.724 1348.29,728.293 1348.84,740.567 1349.4,703.789 1349.96,716.617 1350.52,715.645 1351.08,712.048 1351.64,695.113 1352.2,724.851 1352.76,724.015 1353.32,721.612 1353.88,720.859 1354.44,681.547 1355,682.447 1355.56,677.84 1356.12,693.083 1356.67,740.738 1357.23,739.34 1357.79,719.676 1358.35,734.881 1358.91,698.517 1359.47,700.204 1360.03,748.588 1360.59,760.917 1361.15,757.367 1361.71,721.158 1362.27,721.375 1362.83,733.892 1363.39,728.518 1363.94,762.538 1364.5,761.739 1365.06,742.09 1365.62,756.258 1366.18,753.858 1366.74,682.838 1367.3,668.058 1367.86,671.06 1368.42,656.002 1368.98,657.28 1369.54,660.78 1370.1,662.511 1370.66,648.334 1371.21,649.907 1371.77,716.697 1372.33,712.379 1372.89,691.281 1373.45,672.694 1374.01,707.109 1374.57,686.04 1375.13,669.434 1375.69,654.69 1376.25,658.81 1376.81,659.565 1377.37,645.26 1377.93,681.83 1378.49,662.418 1379.04,615.219 1379.6,602.721 1380.16,654.33 1380.72,607.519 1381.28,580.683 1381.84,538.516 1382.4,580.631 1382.96,617.048 1383.52,605.102 1384.08,642.521 1384.64,629.906 1385.2,647.591 1385.76,631.978 1386.31,620.09 1386.87,612.009 1387.43,598.363 1387.99,616.556 1388.55,654.819 1389.11,654.437 1389.67,624.853 1390.23,658.984 1390.79,630.278 1391.35,666.208 1391.91,668.001 1392.47,668.068 1393.03,686.098 1393.58,703.09 1394.14,689.417 1394.7,655.825 1395.26,655.954 1395.82,689.026 1396.38,669.029 1396.94,686.022 1397.5,672.089 1398.06,674.395 1398.62,643.194 1399.18,677.204 1399.74,694.784 1400.3,696.458 1400.86,698.75 1401.41,684.153 1401.97,686.992 1402.53,685.489 1403.09,666.942 1403.65,665.368 1404.21,683.976 1404.77,685.174 1405.33,729.598 1405.89,745.353 1406.45,761.257 1407.01,761.182 1407.57,708.078 1408.13,692.198 1408.68,691.132 1409.24,658.826 1409.8,658.808 1410.36,676.005 1410.92,694.548 1411.48,709.186 1412.04,753.623 1412.6,764.731 1413.16,759.436 1413.72,754.645 1414.28,766.378 1414.84,791.981 1415.4,802.501 1415.95,875.451 1416.51,800.679 1417.07,810.073 1417.63,787.323 1418.19,813.615 1418.75,808.905 1419.31,821.854 1419.87,801.238 1420.43,809.835 1420.99,759.418 1421.55,790.333 1422.11,801.931 1422.67,811.593 1423.23,821.419 1423.78,813.904 1424.34,791.737 1424.9,752.526 1425.46,685.139 1426.02,714.632 1426.58,712.503 1427.14,712.168 1427.7,695.331 1428.26,694.821 1428.82,692.56 1429.38,690.345 1429.94,703.448 1430.5,700.024 1431.05,682.79 1431.61,683.264 1432.17,663.834 1432.73,648.701 1433.29,651.786 1433.85,634.171 1434.41,604.714 1434.97,589.658 1435.53,643.988 1436.09,661.165 1436.65,662.109 1437.21,665.035 1437.77,652.757 1438.33,658.209 1438.88,661.121 1439.44,647.563 1440,661.215 1440.56,664.569 1441.12,699.106 1441.68,667.167 1442.24,668.316 1442.8,669.284 1443.36,653.354 1443.92,638.85 1444.48,647.456 1445.04,617.388 1445.6,588.523 1446.15,622.027 1446.71,674.415 1447.27,645.762 1447.83,665.45 1448.39,701.197 1448.95,697.726 1449.51,664.487 1450.07,681.45 1450.63,663.923 1451.19,683.667 1451.75,666.518 1452.31,715.749 1452.87,733.796 1453.42,718.223 1453.98,714.178 1454.54,696.366 1455.1,684.637 1455.66,656.427 1456.22,640.187 1456.78,658.382 1457.34,657.818 1457.9,692.683 1458.46,673.169 1459.02,638.874 1459.58,640.317 1460.14,659.906 1460.7,674.111 1461.25,641.265 1461.81,626.344 1462.37,626.006 1462.93,643.959 1463.49,658.624 1464.05,625.922 1464.61,630.209 1465.17,620.533 1465.73,623.586 1466.29,612.452 1466.85,613.319 1467.41,604.072 1467.97,610.548 1468.52,630.263 1469.08,649.567 1469.64,633.644 1470.2,673.329 1470.76,670.587 1471.32,657.352 1471.88,660.875 1472.44,645.399 1473,664.039 1473.56,650.489 1474.12,669.02 1474.68,639.366 1475.24,644.484 1475.79,646.644 1476.35,664.84 1476.91,680.258 1477.47,679.287 1478.03,679.764 1478.59,699.327 1479.15,711.461 1479.71,696.458 1480.27,698.547 1480.83,697.519 1481.39,700.341 1481.95,666.445 1482.51,717.16 1483.07,716.002 1483.62,749.19 1484.18,746.747 1484.74,776.247 1485.3,785.175 1485.86,779.555 1486.42,778.675 1486.98,772.631 1487.54,718.897 1488.1,719.057 1488.66,716.303 1489.22,696.92 1489.78,730.096 1490.34,744.445 1490.89,710.897 1491.45,723.855 1492.01,741.756 1492.57,751.956 1493.13,764.799 1493.69,796.612 1494.25,760.068 1494.81,756.296 1495.37,733.566 1495.93,720.108 1496.49,719.179 1497.05,701.36 1497.61,685.941 1498.16,670.405 1498.72,655.229 1499.28,686.196 1499.84,703.336 1500.4,735.07 1500.96,669.36 1501.52,702.069 1502.08,683.228 1502.64,728.277 1503.2,728.771 1503.76,741.579 1504.32,755.563 1504.88,765.397 1505.44,729.902 1505.99,729.734 1506.55,710.212 1507.11,709.196 1507.67,723.998 1508.23,675.948 1508.79,675.362 1509.35,675.707 1509.91,725.924 1510.47,691.141 1511.03,692.806 1511.59,659.023 1512.15,662.442 1512.71,665.794 1513.26,669.407 1513.82,672.054 1514.38,670.635 1514.94,653.581 1515.5,687.868 1516.06,719.82 1516.62,752.433 1517.18,763.739 1517.74,779.001 1518.3,788.306 1518.86,798.3 1519.42,756.791 1519.98,718.75 1520.53,698.298 1521.09,697.547 1521.65,665.986 1522.21,667.3 1522.77,637.676 1523.33,657.524 1523.89,658.252 1524.45,674.415 1525.01,706.86 1525.57,723.213 1526.13,720.639 1526.69,669.693 1527.25,652.978 1527.81,653.464 1528.36,687.281 1528.92,687.925 1529.48,672.078 1530.04,723.728 1530.6,701.64 1531.16,699.95 1531.72,703.41 1532.28,717.47 1532.84,699.192 1533.4,730.692 1533.96,744.928 1534.52,775.935 1535.08,753.837 1535.63,764.969 1536.19,793.291 1536.75,787.35 1537.31,794.712 1537.87,754.927 1538.43,783.914 1538.99,811.213 1539.55,769.648 1540.11,750.004 1540.67,713.278 1541.23,680.77 1541.79,711.284 1542.35,711.461 1542.9,708.635 1543.46,705.749 1544.02,736.686 1544.58,687.132 1545.14,671.227 1545.7,667.314 1546.26,680.463 1546.82,646.447 1547.38,617.237 1547.94,636.401 1548.5,638.482 1549.06,625.692 1549.62,594.527 1550.18,585.13 1550.73,604.725 1551.29,640.19 1551.85,677.302 1552.41,658.116 1552.97,660.928 1553.53,647.853 1554.09,649.736 1554.65,649.38 1555.21,600.481 1555.77,617.15 1556.33,617.078 1556.89,639.079 1557.45,611.15 1558,613.612 1558.56,619.034 1559.12,621.253 1559.68,594.37 1560.24,582.501 1560.8,587.604 1561.36,576.033 1561.92,582.095 1562.48,619.922 1563.04,593.185 1563.6,597.363 1564.16,616.861 1564.72,620.363 1565.28,622.448 1565.83,641.909 1566.39,645.114 1566.95,631.083 1567.51,619.677 1568.07,642.965 1568.63,644.064 1569.19,643.06 1569.75,659.757 1570.31,660.48 1570.87,662.44 1571.43,676.69 1571.99,680.2 1572.55,680.255 1573.1,678.7 1573.66,660.902 1574.22,661.934 1574.78,677.771 1575.34,678.502 1575.9,663.566 1576.46,662.303 1577.02,678.659 1577.58,680.104 1578.14,680.214 1578.7,679.215 1579.26,696.732 1579.82,665.227 1580.37,654.432 1580.93,688.685 1581.49,657.053 1582.05,673.622 1582.61,705.757 1583.17,720.915 1583.73,733.53 1584.29,785.46 1584.85,782.116 1585.41,760.494 1585.97,771.058 1586.53,783.083 1587.09,777.38 1587.65,724.402 1588.2,707.908 1588.76,690.553 1589.32,657.524 1589.88,676.316 1590.44,659.956 1591,661.958 1591.56,679.439 1592.12,694.473 1592.68,644.116 1593.24,680.13 1593.8,682.206 1594.36,700.292 1594.92,699.079 1595.47,718.131 1596.03,717.656 1596.59,698.708 1597.15,714.744 1597.71,713.424 1598.27,710.151 1598.83,690.644 1599.39,740.711 1599.95,739.24 1600.51,737.787 1601.07,703.186 1601.63,716.583 1602.19,714.961 1602.74,663.381 1603.3,663.086 1603.86,680.563 1604.42,682.169 1604.98,714.699 1605.54,757.695 1606.1,788.045 1606.66,763.718 1607.22,728.9 1607.78,741.198 1608.34,721.459 1608.9,719.31 1609.46,717.67 1610.02,700.74 1610.57,670.428 1611.13,670.044 1611.69,654.939 1612.25,655.879 1612.81,672.143 1613.37,673.565 1613.93,644.524 1614.49,630.591 1615.05,635.132 1615.61,671.97 1616.17,702.8 1616.73,653.976 1617.29,605.166 1617.84,607.982 1618.4,616.108 1618.96,636.747 1619.52,653.013 1620.08,606.971 1620.64,594.915 1621.2,585.918 1621.76,589.407 1622.32,609.856 1622.88,598.247 1623.44,572.714 1624,577.745 1624.56,569.073 1625.11,590.181 1625.67,616.489 1626.23,607.819 1626.79,610.061 1627.35,616.741 1627.91,620.613 1628.47,639.366 1629.03,622.392 1629.59,661.241 1630.15,712.127 1630.71,727.727 1631.27,726.357 1631.83,724.959 1632.39,722.924 1632.94,730.68 1633.5,746.357 1634.06,742.25 1634.62,723.098 1635.18,719.274 1635.74,717.031 1636.3,715.312 1636.86,744.683 1637.42,761.367 1637.98,756.726 1638.54,737.073 1639.1,731.331 1639.66,682.74 1640.21,685.769 1640.77,703.418 1641.33,700.716 1641.89,747.594 1642.45,761.221 1643.01,729.034 1643.57,743.236 1644.13,725.382 1644.69,725.613 1645.25,724.051 1645.81,752.908 1646.37,730.575 1646.93,712.438 1647.48,706.884 1648.04,673.246 1648.6,639.771 1649.16,621.957 1649.72,623.189 1650.28,629.716 1650.84,646.106 1651.4,616.766 1651.96,637.449 1652.52,641.357 1653.08,625.684 1653.64,627.421 1654.2,598.891 1654.76,639.642 1655.31,659.647 1655.87,662.17 1656.43,642.378 1656.99,646.371 1657.55,650.763 1658.11,654.513 1658.67,623.316 1659.23,661.571 1659.79,663.426 1660.35,664.155 1660.91,698.484 1661.47,680.092 1662.03,693.707 1662.58,714.653 1663.14,695.153 1663.7,692.506 1664.26,687.79 1664.82,687.127 1665.38,670.157 1665.94,654.061 1666.5,654.741 1667.06,652.605 1667.62,669.6 1668.18,687.01 1668.74,720.654 1669.3,733.378 1669.85,744.894 1670.41,755.411 1670.97,737.472 1671.53,737.214 1672.09,717.677 1672.65,696.518 1673.21,696.133 1673.77,677.105 1674.33,678.903 1674.89,694.726 1675.45,681.181 1676.01,665.122 1676.57,683.639 1677.13,702.719 1677.68,685.85 1678.24,685.042 1678.8,686.364 1679.36,736.442 1679.92,730.699 1680.48,741.891 1681.04,692.22 1681.6,709.975 1682.16,722.142 1682.72,674.914 1683.28,677.718 1683.84,727.489 1684.4,723.58 1684.95,687.038 1685.51,686.487 1686.07,688.903 1686.63,701.548 1687.19,682.858 1687.75,684.315 1688.31,718.567 1688.87,697.205 1689.43,710.884 1689.99,692.922 1690.55,707.779 1691.11,722.216 1691.67,686.282 1692.23,669.729 1692.78,668.604 1693.34,657.251 1693.9,673.243 1694.46,721.038 1695.02,703.121 1695.58,697.543 1696.14,710.993 1696.7,725.426 1697.26,693.955 1697.82,678.737 1698.38,694.799 1698.94,658.389 1699.5,626.74 1700.05,659.297 1700.61,647.644 1701.17,634.295 1701.73,632.112 1702.29,650.701 1702.85,651.904 1703.41,651.572 1703.97,655.526 1704.53,656.357 1705.09,627.333 1705.65,631.903 1706.21,633.096 1706.77,635.595 1707.32,623.515 1707.88,624.625 1708.44,655.516 1709,640.049 1709.56,657.335 1710.12,673.811 1710.68,686.269 1711.24,667.164 1711.8,636.808 1712.36,668.902 1712.92,686.502 1713.48,716.899 1714.04,694.505 1714.6,708.615 1715.15,653.869 1715.71,667.869 1716.27,619.426 1716.83,623.322 1717.39,643.467 1717.95,661.953 1718.51,677.77 1719.07,660.485 1719.63,665.227 1720.19,680.683 1720.75,636.116 1721.31,636.022 1721.87,638.852 1722.42,656.495 1722.98,673.253 1723.54,673.75 1724.1,676.224 1724.66,656.955 1725.22,627.068 1725.78,613.92 1726.34,633.547 1726.9,634.742 1727.46,639.072 1728.02,688.999 1728.58,656.391 1729.14,659.063 1729.69,646.497 1730.25,666.42 1730.81,682.32 1731.37,715.349 1731.93,774.888 1732.49,753.937 1733.05,736.659 1733.61,737.246 1734.17,704.612 1734.73,690.317 1735.29,704.249 1735.85,699.951 1736.41,716.454 1736.97,747.381 1737.52,711.853 1738.08,712.763 1738.64,725.185 1739.2,722.757 1739.76,724.875 1740.32,719.587 1740.88,718.209 1741.44,703.111 1742,670.393 1742.56,669.853 1743.12,634.675 1743.68,635.748 1744.24,657.796 1744.79,658.626 1745.35,641.128 1745.91,655.902 1746.47,669.306 1747.03,668.816 1747.59,680.118 1748.15,726.824 1748.71,708.341 1749.27,705.794 1749.83,702.078 1750.39,699.808 1750.95,714.524 1751.51,713.173 1752.06,697.093 1752.62,697.133 1753.18,694.197 1753.74,708.313 1754.3,707.36 1754.86,705.231 1755.42,703.077 1755.98,684.51 1756.54,697.567 1757.1,693.959 1757.66,693.049 1758.22,696.257 1758.78,713.528 1759.34,696.717 1759.89,695.538 1760.45,695.267 1761.01,649.998 1761.57,648.735 1762.13,668.028 1762.69,670.636 1763.25,703.379 1763.81,702.637 1764.37,714.477 1764.93,708.461 1765.49,706.992 1766.05,673.749 1766.61,677.616 1767.16,677.896 1767.72,644.714 1768.28,631.583 1768.84,634.658 1769.4,664.231 1769.96,676.72 1770.52,647.08 1771.08,649.498 1771.64,650.841 1772.2,650.099 1772.76,632.316 1773.32,637.725 1773.88,624.513 1774.43,643.963 1774.99,648.702 1775.55,650.681 1776.11,633.143 1776.67,635.406 1777.23,575.673 1777.79,575.255 1778.35,576.797 1778.91,616.708 1779.47,571.487 1780.03,579.64 1780.59,551.42 1781.15,527.067 1781.71,552.612 1782.26,575.185 1782.82,583.215 1783.38,554.697 1783.94,546.663 1784.5,558.319 1785.06,581.674 1785.62,589.897 1786.18,592.273 1786.74,628.701 1787.3,645.884 1787.86,649.427 1788.42,668.729 1788.98,670.889 1789.53,674.765 1790.09,706.905 1790.65,691.201 1791.21,723.872 1791.77,722.19 1792.33,704.621 1792.89,719.031 1793.45,717.641 1794.01,731.515 1794.57,762.923 1795.13,791.905 1795.69,769.904 1796.25,782.534 1796.8,776.402 1797.36,755.165 1797.92,781.517 1798.48,758.364 1799.04,773.858 1799.6,788.705 1800.16,785.235 1800.72,780.051 1801.28,775.156 1801.84,770.705 1802.4,745.221 1802.96,758.391 1803.52,756.409 1804.08,734.952 1804.63,731.856 1805.19,729.462 1805.75,710.622 1806.31,710.664 1806.87,711.678 1807.43,727.485 1807.99,740.956 1808.55,739.375 1809.11,673.977 1809.67,673.94 1810.23,677.597 1810.79,726.886 1811.35,707.414 1811.9,689.897 1812.46,704.89 1813.02,735.317 1813.58,728.796 1814.14,693.345 1814.7,692.668 1815.26,674.016 1815.82,692.05 1816.38,706.605 1816.94,675.859 1817.5,691.187 1818.06,674.357 1818.62,675.942 1819.18,714.522 1819.73,710.913 1820.29,694.821 1820.85,742.413 1821.41,723.597 1821.97,706.451 1822.53,671.142 1823.09,670.006 1823.65,669.043 1824.21,619.678 1824.77,588.934 1825.33,589.998 1825.89,612.815 1826.45,613.855 1827,600.577 1827.56,637.114 1828.12,656.936 1828.68,690.846 1829.24,724.788 1829.8,739.915 1830.36,750.559 1830.92,747.692 1831.48,747.008 1832.04,725.099 1832.6,737.238 1833.16,738.045 1833.72,767.732 1834.27,794.759 1834.83,802.457 1835.39,796.488 1835.95,775.294 1836.51,755.018 1837.07,720.56 1837.63,718.118 1838.19,763.986 \"/>\n<path clip-path=\"url(#clip523)\" d=\"M720.247 691.296 L720.806 691.296 L721.365 691.296 L721.924 691.296 L722.484 691.296 L723.043 691.296 L723.602 691.296 L724.161 691.296 L724.721 691.296 L725.28 691.296 L725.839 691.296 L726.398 691.296 L726.958 691.296 L727.517 691.296 L728.076 691.296 L728.635 691.296 L729.195 691.296 L729.754 691.296 L730.313 691.296 L730.872 691.296 L731.432 691.296 L731.991 691.296 L732.55 691.296 L733.109 691.296 L733.669 691.296 L734.228 691.296 L734.787 691.296 L735.346 691.296 L735.906 691.296 L736.465 691.296 L737.024 691.296 L737.583 691.296 L738.143 691.296 L738.702 691.296 L739.261 691.296 L739.82 691.296 L740.38 691.296 L740.939 691.296 L741.498 691.296 L742.057 691.296 L742.617 691.296 L743.176 691.296 L743.735 691.296 L744.294 691.296 L744.854 691.296 L745.413 691.296 L745.972 691.296 L746.531 691.296 L747.091 691.296 L747.65 691.296 L748.209 691.296 L748.768 691.296 L749.328 691.296 L749.887 691.296 L750.446 691.296 L751.005 691.296 L751.565 691.296 L752.124 691.296 L752.683 691.296 L753.242 691.296 L753.802 691.296 L754.361 691.296 L754.92 691.296 L755.479 691.296 L756.039 691.296 L756.598 691.296 L757.157 691.296 L757.716 691.296 L758.276 691.296 L758.835 691.296 L759.394 691.296 L759.953 691.296 L760.513 691.296 L761.072 691.296 L761.631 691.296 L762.19 691.296 L762.75 691.296 L763.309 691.296 L763.868 691.296 L764.427 691.296 L764.987 691.296 L765.546 691.296 L766.105 691.296 L766.664 691.296 L767.224 691.296 L767.783 691.296 L768.342 691.296 L768.901 691.296 L769.461 691.296 L770.02 691.296 L770.579 691.296 L771.138 691.296 L771.698 691.296 L772.257 691.296 L772.816 691.296 L773.375 691.296 L773.935 691.296 L774.494 691.296 L775.053 691.296 L775.612 691.296 L776.172 691.296 L776.731 691.296 L777.29 691.296 L777.849 691.296 L778.409 691.296 L778.968 691.296 L779.527 691.296 L780.086 691.296 L780.646 691.296 L781.205 691.296 L781.764 691.296 L782.323 691.296 L782.883 691.296 L783.442 691.296 L784.001 691.296 L784.56 691.296 L785.12 691.296 L785.679 691.296 L786.238 691.296 L786.797 691.296 L787.357 691.296 L787.916 691.296 L788.475 691.296 L789.034 691.296 L789.594 691.296 L790.153 691.296 L790.712 691.296 L791.271 691.296 L791.831 691.296 L792.39 691.296 L792.949 691.296 L793.508 691.296 L794.068 691.296 L794.627 691.296 L795.186 691.296 L795.745 691.296 L796.305 691.296 L796.864 691.296 L797.423 691.296 L797.982 691.296 L798.542 691.296 L799.101 691.296 L799.66 691.296 L800.219 691.296 L800.779 691.296 L801.338 691.296 L801.897 691.296 L802.456 691.296 L803.016 691.296 L803.575 691.296 L804.134 691.296 L804.693 691.296 L805.253 691.296 L805.812 691.296 L806.371 691.296 L806.931 691.296 L807.49 691.296 L808.049 691.296 L808.608 691.296 L809.168 691.296 L809.727 691.296 L810.286 691.296 L810.845 691.296 L811.405 691.296 L811.964 691.296 L812.523 691.296 L813.082 691.296 L813.642 691.296 L814.201 691.296 L814.76 691.296 L815.319 691.296 L815.879 691.296 L816.438 691.296 L816.997 691.296 L817.556 691.296 L818.116 691.296 L818.675 691.296 L819.234 691.296 L819.793 691.296 L820.353 691.296 L820.912 691.296 L821.471 691.296 L822.03 691.296 L822.59 691.296 L823.149 691.296 L823.708 691.296 L824.267 691.296 L824.827 691.296 L825.386 691.296 L825.945 691.296 L826.504 691.296 L827.064 691.296 L827.623 691.296 L828.182 691.296 L828.741 691.296 L829.301 691.296 L829.86 691.296 L830.419 691.296 L830.978 691.296 L831.538 691.296 L832.097 691.296 L832.656 691.296 L833.215 691.296 L833.775 691.296 L834.334 691.296 L834.893 691.296 L835.452 691.296 L836.012 691.296 L836.571 691.296 L837.13 691.296 L837.689 691.296 L838.249 691.296 L838.808 691.296 L839.367 691.296 L839.926 691.296 L840.486 691.296 L841.045 691.296 L841.604 691.296 L842.163 691.296 L842.723 691.296 L843.282 691.296 L843.841 691.296 L844.4 691.296 L844.96 691.296 L845.519 691.296 L846.078 691.296 L846.637 691.296 L847.197 691.296 L847.756 691.296 L848.315 691.296 L848.874 691.296 L849.434 691.296 L849.993 691.296 L850.552 691.296 L851.111 691.296 L851.671 691.296 L852.23 691.296 L852.789 691.296 L853.348 691.296 L853.908 691.296 L854.467 691.296 L855.026 691.296 L855.585 691.296 L856.145 691.296 L856.704 691.296 L857.263 691.296 L857.822 691.296 L858.382 691.296 L858.941 691.296 L859.5 691.296 L860.059 691.296 L860.619 691.296 L861.178 691.296 L861.737 691.296 L862.296 691.296 L862.856 691.296 L863.415 691.296 L863.974 691.296 L864.533 691.296 L865.093 691.296 L865.652 691.296 L866.211 691.296 L866.77 691.296 L867.33 691.296 L867.889 691.296 L868.448 691.296 L869.007 691.296 L869.567 691.296 L870.126 691.296 L870.685 691.296 L871.244 691.296 L871.804 691.296 L872.363 691.296 L872.922 691.296 L873.481 691.296 L874.041 691.296 L874.6 691.296 L875.159 691.296 L875.718 691.296 L876.278 691.296 L876.837 691.296 L877.396 691.296 L877.955 691.296 L878.515 691.296 L879.074 691.296 L879.633 691.296 L880.192 691.296 L880.752 691.296 L881.311 691.296 L881.87 691.296 L882.429 691.296 L882.989 691.296 L883.548 691.296 L884.107 691.296 L884.666 691.296 L885.226 691.296 L885.785 691.296 L886.344 691.296 L886.903 691.296 L887.463 691.296 L888.022 691.296 L888.581 691.296 L889.14 691.296 L889.7 691.296 L890.259 691.296 L890.818 691.296 L891.377 691.296 L891.937 691.296 L892.496 691.296 L893.055 691.296 L893.614 691.296 L894.174 691.296 L894.733 691.296 L895.292 691.296 L895.851 691.296 L896.411 691.296 L896.97 691.296 L897.529 691.296 L898.088 691.296 L898.648 691.296 L899.207 691.296 L899.766 691.296 L900.325 691.296 L900.885 691.296 L901.444 691.296 L902.003 691.296 L902.562 691.296 L903.122 691.296 L903.681 691.296 L904.24 691.296 L904.799 691.296 L905.359 691.296 L905.918 691.296 L906.477 691.296 L907.036 691.296 L907.596 691.296 L908.155 691.296 L908.714 691.296 L909.273 691.296 L909.833 691.296 L910.392 691.296 L910.951 691.296 L911.51 691.296 L912.07 691.296 L912.629 691.296 L913.188 691.296 L913.747 691.296 L914.307 691.296 L914.866 691.296 L915.425 691.296 L915.984 691.296 L916.544 691.296 L917.103 691.296 L917.662 691.296 L918.221 691.296 L918.781 691.296 L919.34 691.296 L919.899 691.296 L920.458 691.296 L921.018 691.296 L921.577 691.296 L922.136 691.296 L922.695 691.296 L923.255 691.296 L923.814 691.296 L924.373 691.296 L924.932 691.296 L925.492 691.296 L926.051 691.296 L926.61 691.296 L927.169 691.296 L927.729 691.296 L928.288 691.296 L928.847 691.296 L929.406 691.296 L929.966 691.296 L930.525 691.296 L931.084 691.296 L931.644 691.296 L932.203 691.296 L932.762 691.296 L933.321 691.296 L933.881 691.296 L934.44 691.296 L934.999 691.296 L935.558 691.296 L936.118 691.296 L936.677 691.296 L937.236 691.296 L937.795 691.296 L938.355 691.296 L938.914 691.296 L939.473 691.296 L940.032 691.296 L940.592 691.296 L941.151 691.296 L941.71 691.296 L942.269 691.296 L942.829 691.296 L943.388 691.296 L943.947 691.296 L944.506 691.296 L945.066 691.296 L945.625 691.296 L946.184 691.296 L946.743 691.296 L947.303 691.296 L947.862 691.296 L948.421 691.296 L948.98 691.296 L949.54 691.296 L950.099 691.296 L950.658 691.296 L951.217 691.296 L951.777 691.296 L952.336 691.296 L952.895 691.296 L953.454 691.296 L954.014 691.296 L954.573 691.296 L955.132 691.296 L955.691 691.296 L956.251 691.296 L956.81 691.296 L957.369 691.296 L957.928 691.296 L958.488 691.296 L959.047 691.296 L959.606 691.296 L960.165 691.296 L960.725 691.296 L961.284 691.296 L961.843 691.296 L962.402 691.296 L962.962 691.296 L963.521 691.296 L964.08 691.296 L964.639 691.296 L965.199 691.296 L965.758 691.296 L966.317 691.296 L966.876 691.296 L967.436 691.296 L967.995 691.296 L968.554 691.296 L969.113 691.296 L969.673 691.296 L970.232 691.296 L970.791 691.296 L971.35 691.296 L971.91 691.296 L972.469 691.296 L973.028 691.296 L973.587 691.296 L974.147 691.296 L974.706 691.296 L975.265 691.296 L975.824 691.296 L976.384 691.296 L976.943 691.296 L977.502 691.296 L978.061 691.296 L978.621 691.296 L979.18 691.296 L979.739 691.296 L980.298 691.296 L980.858 691.296 L981.417 691.296 L981.976 691.296 L982.535 691.296 L983.095 691.296 L983.654 691.296 L984.213 691.296 L984.772 691.296 L985.332 691.296 L985.891 691.296 L986.45 691.296 L987.009 691.296 L987.569 691.296 L988.128 691.296 L988.687 691.296 L989.246 691.296 L989.806 691.296 L990.365 691.296 L990.924 691.296 L991.483 691.296 L992.043 691.296 L992.602 691.296 L993.161 691.296 L993.72 691.296 L994.28 691.296 L994.839 691.296 L995.398 691.296 L995.957 691.296 L996.517 691.296 L997.076 691.296 L997.635 691.296 L998.194 691.296 L998.754 691.296 L999.313 691.296 L999.872 691.296 L1000.43 691.296 L1000.99 691.296 L1001.55 691.296 L1002.11 691.296 L1002.67 691.296 L1003.23 691.296 L1003.79 691.296 L1004.35 691.296 L1004.91 691.296 L1005.46 691.296 L1006.02 691.296 L1006.58 691.296 L1007.14 691.296 L1007.7 691.296 L1008.26 691.296 L1008.82 691.296 L1009.38 691.296 L1009.94 691.296 L1010.5 691.296 L1011.06 691.296 L1011.62 691.296 L1012.18 691.296 L1012.73 691.296 L1013.29 691.296 L1013.85 691.296 L1014.41 691.296 L1014.97 691.296 L1015.53 691.296 L1016.09 691.296 L1016.65 691.296 L1017.21 691.296 L1017.77 691.296 L1018.33 691.296 L1018.89 691.296 L1019.45 691.296 L1020.01 691.296 L1020.56 691.296 L1021.12 691.296 L1021.68 691.296 L1022.24 691.296 L1022.8 691.296 L1023.36 691.296 L1023.92 691.296 L1024.48 691.296 L1025.04 691.296 L1025.6 691.296 L1026.16 691.296 L1026.72 691.296 L1027.28 691.296 L1027.83 691.296 L1028.39 691.296 L1028.95 691.296 L1029.51 691.296 L1030.07 691.296 L1030.63 691.296 L1031.19 691.296 L1031.75 691.296 L1032.31 691.296 L1032.87 691.296 L1033.43 691.296 L1033.99 691.296 L1034.55 691.296 L1035.1 691.296 L1035.66 691.296 L1036.22 691.296 L1036.78 691.296 L1037.34 691.296 L1037.9 691.296 L1038.46 691.296 L1039.02 691.296 L1039.58 691.296 L1040.14 691.296 L1040.7 691.296 L1041.26 691.296 L1041.82 691.296 L1042.38 691.296 L1042.93 691.296 L1043.49 691.296 L1044.05 691.296 L1044.61 691.296 L1045.17 691.296 L1045.73 691.296 L1046.29 691.296 L1046.85 691.296 L1047.41 691.296 L1047.97 691.296 L1048.53 691.296 L1049.09 691.296 L1049.65 691.296 L1050.2 691.296 L1050.76 691.296 L1051.32 691.296 L1051.88 691.296 L1052.44 691.296 L1053 691.296 L1053.56 691.296 L1054.12 691.296 L1054.68 691.296 L1055.24 691.296 L1055.8 691.296 L1056.36 691.296 L1056.92 691.296 L1057.48 691.296 L1058.03 691.296 L1058.59 691.296 L1059.15 691.296 L1059.71 691.296 L1060.27 691.296 L1060.83 691.296 L1061.39 691.296 L1061.95 691.296 L1062.51 691.296 L1063.07 691.296 L1063.63 691.296 L1064.19 691.296 L1064.75 691.296 L1065.3 691.296 L1065.86 691.296 L1066.42 691.296 L1066.98 691.296 L1067.54 691.296 L1068.1 691.296 L1068.66 691.296 L1069.22 691.296 L1069.78 691.296 L1070.34 691.296 L1070.9 691.296 L1071.46 691.296 L1072.02 691.296 L1072.57 691.296 L1073.13 691.296 L1073.69 691.296 L1074.25 691.296 L1074.81 691.296 L1075.37 691.296 L1075.93 691.296 L1076.49 691.296 L1077.05 691.296 L1077.61 691.296 L1078.17 691.296 L1078.73 691.296 L1079.29 691.296 L1079.85 691.296 L1080.4 691.296 L1080.96 691.296 L1081.52 691.296 L1082.08 691.296 L1082.64 691.296 L1083.2 691.296 L1083.76 691.296 L1084.32 691.296 L1084.88 691.296 L1085.44 691.296 L1086 691.296 L1086.56 691.296 L1087.12 691.296 L1087.67 691.296 L1088.23 691.296 L1088.79 691.296 L1089.35 691.296 L1089.91 691.296 L1090.47 691.296 L1091.03 691.296 L1091.59 691.296 L1092.15 691.296 L1092.71 691.296 L1093.27 691.296 L1093.83 691.296 L1094.39 691.296 L1094.94 691.296 L1095.5 691.296 L1096.06 691.296 L1096.62 691.296 L1097.18 691.296 L1097.74 691.296 L1098.3 691.296 L1098.86 691.296 L1099.42 691.296 L1099.98 691.296 L1100.54 691.296 L1101.1 691.296 L1101.66 691.296 L1102.22 691.296 L1102.77 691.296 L1103.33 691.296 L1103.89 691.296 L1104.45 691.296 L1105.01 691.296 L1105.57 691.296 L1106.13 691.296 L1106.69 691.296 L1107.25 691.296 L1107.81 691.296 L1108.37 691.296 L1108.93 691.296 L1109.49 691.296 L1110.04 691.296 L1110.6 691.296 L1111.16 691.296 L1111.72 691.296 L1112.28 691.296 L1112.84 691.296 L1113.4 691.296 L1113.96 691.296 L1114.52 691.296 L1115.08 691.296 L1115.64 691.296 L1116.2 691.296 L1116.76 691.296 L1117.31 691.296 L1117.87 691.296 L1118.43 691.296 L1118.99 691.296 L1119.55 691.296 L1120.11 691.296 L1120.67 691.296 L1121.23 691.296 L1121.79 691.296 L1122.35 691.296 L1122.91 691.296 L1123.47 691.296 L1124.03 691.296 L1124.59 691.296 L1125.14 691.296 L1125.7 691.296 L1126.26 691.296 L1126.82 691.296 L1127.38 691.296 L1127.94 691.296 L1128.5 691.296 L1129.06 691.296 L1129.62 691.296 L1130.18 691.296 L1130.74 691.296 L1131.3 691.296 L1131.86 691.296 L1132.41 691.296 L1132.97 691.296 L1133.53 691.296 L1134.09 691.296 L1134.65 691.296 L1135.21 691.296 L1135.77 691.296 L1136.33 691.296 L1136.89 691.296 L1137.45 691.296 L1138.01 691.296 L1138.57 691.296 L1139.13 691.296 L1139.68 691.296 L1140.24 691.296 L1140.8 691.296 L1141.36 691.296 L1141.92 691.296 L1142.48 691.296 L1143.04 691.296 L1143.6 691.296 L1144.16 691.296 L1144.72 691.296 L1145.28 691.296 L1145.84 691.296 L1146.4 691.296 L1146.96 691.296 L1147.51 691.296 L1148.07 691.296 L1148.63 691.296 L1149.19 691.296 L1149.75 691.296 L1150.31 691.296 L1150.87 691.296 L1151.43 691.296 L1151.99 691.296 L1152.55 691.296 L1153.11 691.296 L1153.67 691.296 L1154.23 691.296 L1154.78 691.296 L1155.34 691.296 L1155.9 691.296 L1156.46 691.296 L1157.02 691.296 L1157.58 691.296 L1158.14 691.296 L1158.7 691.296 L1159.26 691.296 L1159.82 691.296 L1160.38 691.296 L1160.94 691.296 L1161.5 691.296 L1162.05 691.296 L1162.61 691.296 L1163.17 691.296 L1163.73 691.296 L1164.29 691.296 L1164.85 691.296 L1165.41 691.296 L1165.97 691.296 L1166.53 691.296 L1167.09 691.296 L1167.65 691.296 L1168.21 691.296 L1168.77 691.296 L1169.33 691.296 L1169.88 691.296 L1170.44 691.296 L1171 691.296 L1171.56 691.296 L1172.12 691.296 L1172.68 691.296 L1173.24 691.296 L1173.8 691.296 L1174.36 691.296 L1174.92 691.296 L1175.48 691.296 L1176.04 691.296 L1176.6 691.296 L1177.15 691.296 L1177.71 691.296 L1178.27 691.296 L1178.83 691.296 L1179.39 691.296 L1179.95 691.296 L1180.51 691.296 L1181.07 691.296 L1181.63 691.296 L1182.19 691.296 L1182.75 691.296 L1183.31 691.296 L1183.87 691.296 L1184.43 691.296 L1184.98 691.296 L1185.54 691.296 L1186.1 691.296 L1186.66 691.296 L1187.22 691.296 L1187.78 691.296 L1188.34 691.296 L1188.9 691.296 L1189.46 691.296 L1190.02 691.296 L1190.58 691.296 L1191.14 691.296 L1191.7 691.296 L1192.25 691.296 L1192.81 691.296 L1193.37 691.296 L1193.93 691.296 L1194.49 691.296 L1195.05 691.296 L1195.61 691.296 L1196.17 691.296 L1196.73 691.296 L1197.29 691.296 L1197.85 691.296 L1198.41 691.296 L1198.97 691.296 L1199.52 691.296 L1200.08 691.296 L1200.64 691.296 L1201.2 691.296 L1201.76 691.296 L1202.32 691.296 L1202.88 691.296 L1203.44 691.296 L1204 691.296 L1204.56 691.296 L1205.12 691.296 L1205.68 691.296 L1206.24 691.296 L1206.8 691.296 L1207.35 691.296 L1207.91 691.296 L1208.47 691.296 L1209.03 691.296 L1209.59 691.296 L1210.15 691.296 L1210.71 691.296 L1211.27 691.296 L1211.83 691.296 L1212.39 691.296 L1212.95 691.296 L1213.51 691.296 L1214.07 691.296 L1214.62 691.296 L1215.18 691.296 L1215.74 691.296 L1216.3 691.296 L1216.86 691.296 L1217.42 691.296 L1217.98 691.296 L1218.54 691.296 L1219.1 691.296 L1219.66 691.296 L1220.22 691.296 L1220.78 691.296 L1221.34 691.296 L1221.89 691.296 L1222.45 691.296 L1223.01 691.296 L1223.57 691.296 L1224.13 691.296 L1224.69 691.296 L1225.25 691.296 L1225.81 691.296 L1226.37 691.296 L1226.93 691.296 L1227.49 691.296 L1228.05 691.296 L1228.61 691.296 L1229.17 691.296 L1229.72 691.296 L1230.28 691.296 L1230.84 691.296 L1231.4 691.296 L1231.96 691.296 L1232.52 691.296 L1233.08 691.296 L1233.64 691.296 L1234.2 691.296 L1234.76 691.296 L1235.32 691.296 L1235.88 691.296 L1236.44 691.296 L1236.99 691.296 L1237.55 691.296 L1238.11 691.296 L1238.67 691.296 L1239.23 691.296 L1239.79 691.296 L1240.35 691.296 L1240.91 691.296 L1241.47 691.296 L1242.03 691.296 L1242.59 691.296 L1243.15 691.296 L1243.71 691.296 L1244.26 691.296 L1244.82 691.296 L1245.38 691.296 L1245.94 691.296 L1246.5 691.296 L1247.06 691.296 L1247.62 691.296 L1248.18 691.296 L1248.74 691.296 L1249.3 691.296 L1249.86 691.296 L1250.42 691.296 L1250.98 691.296 L1251.54 691.296 L1252.09 691.296 L1252.65 691.296 L1253.21 691.296 L1253.77 691.296 L1254.33 691.296 L1254.89 691.296 L1255.45 691.296 L1256.01 691.296 L1256.57 691.296 L1257.13 691.296 L1257.69 691.296 L1258.25 691.296 L1258.81 691.296 L1259.36 691.296 L1259.92 691.296 L1260.48 691.296 L1261.04 691.296 L1261.6 691.296 L1262.16 691.296 L1262.72 691.296 L1263.28 691.296 L1263.84 691.296 L1264.4 691.296 L1264.96 691.296 L1265.52 691.296 L1266.08 691.296 L1266.63 691.296 L1267.19 691.296 L1267.75 691.296 L1268.31 691.296 L1268.87 691.296 L1269.43 691.296 L1269.99 691.296 L1270.55 691.296 L1271.11 691.296 L1271.67 691.296 L1272.23 691.296 L1272.79 691.296 L1273.35 691.296 L1273.91 691.296 L1274.46 691.296 L1275.02 691.296 L1275.58 691.296 L1276.14 691.296 L1276.7 691.296 L1277.26 691.296 L1277.82 691.296 L1278.38 691.296 L1278.94 691.296 L1279.5 691.296 L1280.06 691.296 L1280.62 691.296 L1281.18 691.296 L1281.73 691.296 L1282.29 691.296 L1282.85 691.296 L1283.41 691.296 L1283.97 691.296 L1284.53 691.296 L1285.09 691.296 L1285.65 691.296 L1286.21 691.296 L1286.77 691.296 L1287.33 691.296 L1287.89 691.296 L1288.45 691.296 L1289 691.296 L1289.56 691.296 L1290.12 691.296 L1290.68 691.296 L1291.24 691.296 L1291.8 691.296 L1292.36 691.296 L1292.92 691.296 L1293.48 691.296 L1294.04 691.296 L1294.6 691.296 L1295.16 691.296 L1295.72 691.296 L1296.28 691.296 L1296.83 691.296 L1297.39 691.296 L1297.95 691.296 L1298.51 691.296 L1299.07 691.296 L1299.63 691.296 L1300.19 691.296 L1300.75 691.296 L1301.31 691.296 L1301.87 691.296 L1302.43 691.296 L1302.99 691.296 L1303.55 691.296 L1304.1 691.296 L1304.66 691.296 L1305.22 691.296 L1305.78 691.296 L1306.34 691.296 L1306.9 691.296 L1307.46 691.296 L1308.02 691.296 L1308.58 691.296 L1309.14 691.296 L1309.7 691.296 L1310.26 691.296 L1310.82 691.296 L1311.38 691.296 L1311.93 691.296 L1312.49 691.296 L1313.05 691.296 L1313.61 691.296 L1314.17 691.296 L1314.73 691.296 L1315.29 691.296 L1315.85 691.296 L1316.41 691.296 L1316.97 691.296 L1317.53 691.296 L1318.09 691.296 L1318.65 691.296 L1319.2 691.296 L1319.76 691.296 L1320.32 691.296 L1320.88 691.296 L1321.44 691.296 L1322 691.296 L1322.56 691.296 L1323.12 691.296 L1323.68 691.296 L1324.24 691.296 L1324.8 691.296 L1325.36 691.296 L1325.92 691.296 L1326.47 691.296 L1327.03 691.296 L1327.59 691.296 L1328.15 691.296 L1328.71 691.296 L1329.27 691.296 L1329.83 691.296 L1330.39 691.296 L1330.95 691.296 L1331.51 691.296 L1332.07 691.296 L1332.63 691.296 L1333.19 691.296 L1333.75 691.296 L1334.3 691.296 L1334.86 691.296 L1335.42 691.296 L1335.98 691.296 L1336.54 691.296 L1337.1 691.296 L1337.66 691.296 L1338.22 691.296 L1338.78 691.296 L1339.34 691.296 L1339.9 691.296 L1340.46 691.296 L1341.02 691.296 L1341.57 691.296 L1342.13 691.296 L1342.69 691.296 L1343.25 691.296 L1343.81 691.296 L1344.37 691.296 L1344.93 691.296 L1345.49 691.296 L1346.05 691.296 L1346.61 691.296 L1347.17 691.296 L1347.73 691.296 L1348.29 691.296 L1348.84 691.296 L1349.4 691.296 L1349.96 691.296 L1350.52 691.296 L1351.08 691.296 L1351.64 691.296 L1352.2 691.296 L1352.76 691.296 L1353.32 691.296 L1353.88 691.296 L1354.44 691.296 L1355 691.296 L1355.56 691.296 L1356.12 691.296 L1356.67 691.296 L1357.23 691.296 L1357.79 691.296 L1358.35 691.296 L1358.91 691.296 L1359.47 691.296 L1360.03 691.296 L1360.59 691.296 L1361.15 691.296 L1361.71 691.296 L1362.27 691.296 L1362.83 691.296 L1363.39 691.296 L1363.94 691.296 L1364.5 691.296 L1365.06 691.296 L1365.62 691.296 L1366.18 691.296 L1366.74 691.296 L1367.3 691.296 L1367.86 691.296 L1368.42 691.296 L1368.98 691.296 L1369.54 691.296 L1370.1 691.296 L1370.66 691.296 L1371.21 691.296 L1371.77 691.296 L1372.33 691.296 L1372.89 691.296 L1373.45 691.296 L1374.01 691.296 L1374.57 691.296 L1375.13 691.296 L1375.69 691.296 L1376.25 691.296 L1376.81 691.296 L1377.37 691.296 L1377.93 691.296 L1378.49 691.296 L1379.04 691.296 L1379.6 691.296 L1380.16 691.296 L1380.72 691.296 L1381.28 691.296 L1381.84 691.296 L1382.4 691.296 L1382.96 691.296 L1383.52 691.296 L1384.08 691.296 L1384.64 691.296 L1385.2 691.296 L1385.76 691.296 L1386.31 691.296 L1386.87 691.296 L1387.43 691.296 L1387.99 691.296 L1388.55 691.296 L1389.11 691.296 L1389.67 691.296 L1390.23 691.296 L1390.79 691.296 L1391.35 691.296 L1391.91 691.296 L1392.47 691.296 L1393.03 691.296 L1393.58 691.296 L1394.14 691.296 L1394.7 691.296 L1395.26 691.296 L1395.82 691.296 L1396.38 691.296 L1396.94 691.296 L1397.5 691.296 L1398.06 691.296 L1398.62 691.296 L1399.18 691.296 L1399.74 691.296 L1400.3 691.296 L1400.86 691.296 L1401.41 691.296 L1401.97 691.296 L1402.53 691.296 L1403.09 691.296 L1403.65 691.296 L1404.21 691.296 L1404.77 691.296 L1405.33 691.296 L1405.89 691.296 L1406.45 691.296 L1407.01 691.296 L1407.57 691.296 L1408.13 691.296 L1408.68 691.296 L1409.24 691.296 L1409.8 691.296 L1410.36 691.296 L1410.92 691.296 L1411.48 691.296 L1412.04 691.296 L1412.6 691.296 L1413.16 691.296 L1413.72 691.296 L1414.28 691.296 L1414.84 691.296 L1415.4 691.296 L1415.95 691.296 L1416.51 691.296 L1417.07 691.296 L1417.63 691.296 L1418.19 691.296 L1418.75 691.296 L1419.31 691.296 L1419.87 691.296 L1420.43 691.296 L1420.99 691.296 L1421.55 691.296 L1422.11 691.296 L1422.67 691.296 L1423.23 691.296 L1423.78 691.296 L1424.34 691.296 L1424.9 691.296 L1425.46 691.296 L1426.02 691.296 L1426.58 691.296 L1427.14 691.296 L1427.7 691.296 L1428.26 691.296 L1428.82 691.296 L1429.38 691.296 L1429.94 691.296 L1430.5 691.296 L1431.05 691.296 L1431.61 691.296 L1432.17 691.296 L1432.73 691.296 L1433.29 691.296 L1433.85 691.296 L1434.41 691.296 L1434.97 691.296 L1435.53 691.296 L1436.09 691.296 L1436.65 691.296 L1437.21 691.296 L1437.77 691.296 L1438.33 691.296 L1438.88 691.296 L1439.44 691.296 L1440 691.296 L1440.56 691.296 L1441.12 691.296 L1441.68 691.296 L1442.24 691.296 L1442.8 691.296 L1443.36 691.296 L1443.92 691.296 L1444.48 691.296 L1445.04 691.296 L1445.6 691.296 L1446.15 691.296 L1446.71 691.296 L1447.27 691.296 L1447.83 691.296 L1448.39 691.296 L1448.95 691.296 L1449.51 691.296 L1450.07 691.296 L1450.63 691.296 L1451.19 691.296 L1451.75 691.296 L1452.31 691.296 L1452.87 691.296 L1453.42 691.296 L1453.98 691.296 L1454.54 691.296 L1455.1 691.296 L1455.66 691.296 L1456.22 691.296 L1456.78 691.296 L1457.34 691.296 L1457.9 691.296 L1458.46 691.296 L1459.02 691.296 L1459.58 691.296 L1460.14 691.296 L1460.7 691.296 L1461.25 691.296 L1461.81 691.296 L1462.37 691.296 L1462.93 691.296 L1463.49 691.296 L1464.05 691.296 L1464.61 691.296 L1465.17 691.296 L1465.73 691.296 L1466.29 691.296 L1466.85 691.296 L1467.41 691.296 L1467.97 691.296 L1468.52 691.296 L1469.08 691.296 L1469.64 691.296 L1470.2 691.296 L1470.76 691.296 L1471.32 691.296 L1471.88 691.296 L1472.44 691.296 L1473 691.296 L1473.56 691.296 L1474.12 691.296 L1474.68 691.296 L1475.24 691.296 L1475.79 691.296 L1476.35 691.296 L1476.91 691.296 L1477.47 691.296 L1478.03 691.296 L1478.59 691.296 L1479.15 691.296 L1479.71 691.296 L1480.27 691.296 L1480.83 691.296 L1481.39 691.296 L1481.95 691.296 L1482.51 691.296 L1483.07 691.296 L1483.62 691.296 L1484.18 691.296 L1484.74 691.296 L1485.3 691.296 L1485.86 691.296 L1486.42 691.296 L1486.98 691.296 L1487.54 691.296 L1488.1 691.296 L1488.66 691.296 L1489.22 691.296 L1489.78 691.296 L1490.34 691.296 L1490.89 691.296 L1491.45 691.296 L1492.01 691.296 L1492.57 691.296 L1493.13 691.296 L1493.69 691.296 L1494.25 691.296 L1494.81 691.296 L1495.37 691.296 L1495.93 691.296 L1496.49 691.296 L1497.05 691.296 L1497.61 691.296 L1498.16 691.296 L1498.72 691.296 L1499.28 691.296 L1499.84 691.296 L1500.4 691.296 L1500.96 691.296 L1501.52 691.296 L1502.08 691.296 L1502.64 691.296 L1503.2 691.296 L1503.76 691.296 L1504.32 691.296 L1504.88 691.296 L1505.44 691.296 L1505.99 691.296 L1506.55 691.296 L1507.11 691.296 L1507.67 691.296 L1508.23 691.296 L1508.79 691.296 L1509.35 691.296 L1509.91 691.296 L1510.47 691.296 L1511.03 691.296 L1511.59 691.296 L1512.15 691.296 L1512.71 691.296 L1513.26 691.296 L1513.82 691.296 L1514.38 691.296 L1514.94 691.296 L1515.5 691.296 L1516.06 691.296 L1516.62 691.296 L1517.18 691.296 L1517.74 691.296 L1518.3 691.296 L1518.86 691.296 L1519.42 691.296 L1519.98 691.296 L1520.53 691.296 L1521.09 691.296 L1521.65 691.296 L1522.21 691.296 L1522.77 691.296 L1523.33 691.296 L1523.89 691.296 L1524.45 691.296 L1525.01 691.296 L1525.57 691.296 L1526.13 691.296 L1526.69 691.296 L1527.25 691.296 L1527.81 691.296 L1528.36 691.296 L1528.92 691.296 L1529.48 691.296 L1530.04 691.296 L1530.6 691.296 L1531.16 691.296 L1531.72 691.296 L1532.28 691.296 L1532.84 691.296 L1533.4 691.296 L1533.96 691.296 L1534.52 691.296 L1535.08 691.296 L1535.63 691.296 L1536.19 691.296 L1536.75 691.296 L1537.31 691.296 L1537.87 691.296 L1538.43 691.296 L1538.99 691.296 L1539.55 691.296 L1540.11 691.296 L1540.67 691.296 L1541.23 691.296 L1541.79 691.296 L1542.35 691.296 L1542.9 691.296 L1543.46 691.296 L1544.02 691.296 L1544.58 691.296 L1545.14 691.296 L1545.7 691.296 L1546.26 691.296 L1546.82 691.296 L1547.38 691.296 L1547.94 691.296 L1548.5 691.296 L1549.06 691.296 L1549.62 691.296 L1550.18 691.296 L1550.73 691.296 L1551.29 691.296 L1551.85 691.296 L1552.41 691.296 L1552.97 691.296 L1553.53 691.296 L1554.09 691.296 L1554.65 691.296 L1555.21 691.296 L1555.77 691.296 L1556.33 691.296 L1556.89 691.296 L1557.45 691.296 L1558 691.296 L1558.56 691.296 L1559.12 691.296 L1559.68 691.296 L1560.24 691.296 L1560.8 691.296 L1561.36 691.296 L1561.92 691.296 L1562.48 691.296 L1563.04 691.296 L1563.6 691.296 L1564.16 691.296 L1564.72 691.296 L1565.28 691.296 L1565.83 691.296 L1566.39 691.296 L1566.95 691.296 L1567.51 691.296 L1568.07 691.296 L1568.63 691.296 L1569.19 691.296 L1569.75 691.296 L1570.31 691.296 L1570.87 691.296 L1571.43 691.296 L1571.99 691.296 L1572.55 691.296 L1573.1 691.296 L1573.66 691.296 L1574.22 691.296 L1574.78 691.296 L1575.34 691.296 L1575.9 691.296 L1576.46 691.296 L1577.02 691.296 L1577.58 691.296 L1578.14 691.296 L1578.7 691.296 L1579.26 691.296 L1579.82 691.296 L1580.37 691.296 L1580.93 691.296 L1581.49 691.296 L1582.05 691.296 L1582.61 691.296 L1583.17 691.296 L1583.73 691.296 L1584.29 691.296 L1584.85 691.296 L1585.41 691.296 L1585.97 691.296 L1586.53 691.296 L1587.09 691.296 L1587.65 691.296 L1588.2 691.296 L1588.76 691.296 L1589.32 691.296 L1589.88 691.296 L1590.44 691.296 L1591 691.296 L1591.56 691.296 L1592.12 691.296 L1592.68 691.296 L1593.24 691.296 L1593.8 691.296 L1594.36 691.296 L1594.92 691.296 L1595.47 691.296 L1596.03 691.296 L1596.59 691.296 L1597.15 691.296 L1597.71 691.296 L1598.27 691.296 L1598.83 691.296 L1599.39 691.296 L1599.95 691.296 L1600.51 691.296 L1601.07 691.296 L1601.63 691.296 L1602.19 691.296 L1602.74 691.296 L1603.3 691.296 L1603.86 691.296 L1604.42 691.296 L1604.98 691.296 L1605.54 691.296 L1606.1 691.296 L1606.66 691.296 L1607.22 691.296 L1607.78 691.296 L1608.34 691.296 L1608.9 691.296 L1609.46 691.296 L1610.02 691.296 L1610.57 691.296 L1611.13 691.296 L1611.69 691.296 L1612.25 691.296 L1612.81 691.296 L1613.37 691.296 L1613.93 691.296 L1614.49 691.296 L1615.05 691.296 L1615.61 691.296 L1616.17 691.296 L1616.73 691.296 L1617.29 691.296 L1617.84 691.296 L1618.4 691.296 L1618.96 691.296 L1619.52 691.296 L1620.08 691.296 L1620.64 691.296 L1621.2 691.296 L1621.76 691.296 L1622.32 691.296 L1622.88 691.296 L1623.44 691.296 L1624 691.296 L1624.56 691.296 L1625.11 691.296 L1625.67 691.296 L1626.23 691.296 L1626.79 691.296 L1627.35 691.296 L1627.91 691.296 L1628.47 691.296 L1629.03 691.296 L1629.59 691.296 L1630.15 691.296 L1630.71 691.296 L1631.27 691.296 L1631.83 691.296 L1632.39 691.296 L1632.94 691.296 L1633.5 691.296 L1634.06 691.296 L1634.62 691.296 L1635.18 691.296 L1635.74 691.296 L1636.3 691.296 L1636.86 691.296 L1637.42 691.296 L1637.98 691.296 L1638.54 691.296 L1639.1 691.296 L1639.66 691.296 L1640.21 691.296 L1640.77 691.296 L1641.33 691.296 L1641.89 691.296 L1642.45 691.296 L1643.01 691.296 L1643.57 691.296 L1644.13 691.296 L1644.69 691.296 L1645.25 691.296 L1645.81 691.296 L1646.37 691.296 L1646.93 691.296 L1647.48 691.296 L1648.04 691.296 L1648.6 691.296 L1649.16 691.296 L1649.72 691.296 L1650.28 691.296 L1650.84 691.296 L1651.4 691.296 L1651.96 691.296 L1652.52 691.296 L1653.08 691.296 L1653.64 691.296 L1654.2 691.296 L1654.76 691.296 L1655.31 691.296 L1655.87 691.296 L1656.43 691.296 L1656.99 691.296 L1657.55 691.296 L1658.11 691.296 L1658.67 691.296 L1659.23 691.296 L1659.79 691.296 L1660.35 691.296 L1660.91 691.296 L1661.47 691.296 L1662.03 691.296 L1662.58 691.296 L1663.14 691.296 L1663.7 691.296 L1664.26 691.296 L1664.82 691.296 L1665.38 691.296 L1665.94 691.296 L1666.5 691.296 L1667.06 691.296 L1667.62 691.296 L1668.18 691.296 L1668.74 691.296 L1669.3 691.296 L1669.85 691.296 L1670.41 691.296 L1670.97 691.296 L1671.53 691.296 L1672.09 691.296 L1672.65 691.296 L1673.21 691.296 L1673.77 691.296 L1674.33 691.296 L1674.89 691.296 L1675.45 691.296 L1676.01 691.296 L1676.57 691.296 L1677.13 691.296 L1677.68 691.296 L1678.24 691.296 L1678.8 691.296 L1679.36 691.296 L1679.92 691.296 L1680.48 691.296 L1681.04 691.296 L1681.6 691.296 L1682.16 691.296 L1682.72 691.296 L1683.28 691.296 L1683.84 691.296 L1684.4 691.296 L1684.95 691.296 L1685.51 691.296 L1686.07 691.296 L1686.63 691.296 L1687.19 691.296 L1687.75 691.296 L1688.31 691.296 L1688.87 691.296 L1689.43 691.296 L1689.99 691.296 L1690.55 691.296 L1691.11 691.296 L1691.67 691.296 L1692.23 691.296 L1692.78 691.296 L1693.34 691.296 L1693.9 691.296 L1694.46 691.296 L1695.02 691.296 L1695.58 691.296 L1696.14 691.296 L1696.7 691.296 L1697.26 691.296 L1697.82 691.296 L1698.38 691.296 L1698.94 691.296 L1699.5 691.296 L1700.05 691.296 L1700.61 691.296 L1701.17 691.296 L1701.73 691.296 L1702.29 691.296 L1702.85 691.296 L1703.41 691.296 L1703.97 691.296 L1704.53 691.296 L1705.09 691.296 L1705.65 691.296 L1706.21 691.296 L1706.77 691.296 L1707.32 691.296 L1707.88 691.296 L1708.44 691.296 L1709 691.296 L1709.56 691.296 L1710.12 691.296 L1710.68 691.296 L1711.24 691.296 L1711.8 691.296 L1712.36 691.296 L1712.92 691.296 L1713.48 691.296 L1714.04 691.296 L1714.6 691.296 L1715.15 691.296 L1715.71 691.296 L1716.27 691.296 L1716.83 691.296 L1717.39 691.296 L1717.95 691.296 L1718.51 691.296 L1719.07 691.296 L1719.63 691.296 L1720.19 691.296 L1720.75 691.296 L1721.31 691.296 L1721.87 691.296 L1722.42 691.296 L1722.98 691.296 L1723.54 691.296 L1724.1 691.296 L1724.66 691.296 L1725.22 691.296 L1725.78 691.296 L1726.34 691.296 L1726.9 691.296 L1727.46 691.296 L1728.02 691.296 L1728.58 691.296 L1729.14 691.296 L1729.69 691.296 L1730.25 691.296 L1730.81 691.296 L1731.37 691.296 L1731.93 691.296 L1732.49 691.296 L1733.05 691.296 L1733.61 691.296 L1734.17 691.296 L1734.73 691.296 L1735.29 691.296 L1735.85 691.296 L1736.41 691.296 L1736.97 691.296 L1737.52 691.296 L1738.08 691.296 L1738.64 691.296 L1739.2 691.296 L1739.76 691.296 L1740.32 691.296 L1740.88 691.296 L1741.44 691.296 L1742 691.296 L1742.56 691.296 L1743.12 691.296 L1743.68 691.296 L1744.24 691.296 L1744.79 691.296 L1745.35 691.296 L1745.91 691.296 L1746.47 691.296 L1747.03 691.296 L1747.59 691.296 L1748.15 691.296 L1748.71 691.296 L1749.27 691.296 L1749.83 691.296 L1750.39 691.296 L1750.95 691.296 L1751.51 691.296 L1752.06 691.296 L1752.62 691.296 L1753.18 691.296 L1753.74 691.296 L1754.3 691.296 L1754.86 691.296 L1755.42 691.296 L1755.98 691.296 L1756.54 691.296 L1757.1 691.296 L1757.66 691.296 L1758.22 691.296 L1758.78 691.296 L1759.34 691.296 L1759.89 691.296 L1760.45 691.296 L1761.01 691.296 L1761.57 691.296 L1762.13 691.296 L1762.69 691.296 L1763.25 691.296 L1763.81 691.296 L1764.37 691.296 L1764.93 691.296 L1765.49 691.296 L1766.05 691.296 L1766.61 691.296 L1767.16 691.296 L1767.72 691.296 L1768.28 691.296 L1768.84 691.296 L1769.4 691.296 L1769.96 691.296 L1770.52 691.296 L1771.08 691.296 L1771.64 691.296 L1772.2 691.296 L1772.76 691.296 L1773.32 691.296 L1773.88 691.296 L1774.43 691.296 L1774.99 691.296 L1775.55 691.296 L1776.11 691.296 L1776.67 691.296 L1777.23 691.296 L1777.79 691.296 L1778.35 691.296 L1778.91 691.296 L1779.47 691.296 L1780.03 691.296 L1780.59 691.296 L1781.15 691.296 L1781.71 691.296 L1782.26 691.296 L1782.82 691.296 L1783.38 691.296 L1783.94 691.296 L1784.5 691.296 L1785.06 691.296 L1785.62 691.296 L1786.18 691.296 L1786.74 691.296 L1787.3 691.296 L1787.86 691.296 L1788.42 691.296 L1788.98 691.296 L1789.53 691.296 L1790.09 691.296 L1790.65 691.296 L1791.21 691.296 L1791.77 691.296 L1792.33 691.296 L1792.89 691.296 L1793.45 691.296 L1794.01 691.296 L1794.57 691.296 L1795.13 691.296 L1795.69 691.296 L1796.25 691.296 L1796.8 691.296 L1797.36 691.296 L1797.92 691.296 L1798.48 691.296 L1799.04 691.296 L1799.6 691.296 L1800.16 691.296 L1800.72 691.296 L1801.28 691.296 L1801.84 691.296 L1802.4 691.296 L1802.96 691.296 L1803.52 691.296 L1804.08 691.296 L1804.63 691.296 L1805.19 691.296 L1805.75 691.296 L1806.31 691.296 L1806.87 691.296 L1807.43 691.296 L1807.99 691.296 L1808.55 691.296 L1809.11 691.296 L1809.67 691.296 L1810.23 691.296 L1810.79 691.296 L1811.35 691.296 L1811.9 691.296 L1812.46 691.296 L1813.02 691.296 L1813.58 691.296 L1814.14 691.296 L1814.7 691.296 L1815.26 691.296 L1815.82 691.296 L1816.38 691.296 L1816.94 691.296 L1817.5 691.296 L1818.06 691.296 L1818.62 691.296 L1819.18 691.296 L1819.73 691.296 L1820.29 691.296 L1820.85 691.296 L1821.41 691.296 L1821.97 691.296 L1822.53 691.296 L1823.09 691.296 L1823.65 691.296 L1824.21 691.296 L1824.77 691.296 L1825.33 691.296 L1825.89 691.296 L1826.45 691.296 L1827 691.296 L1827.56 691.296 L1828.12 691.296 L1828.68 691.296 L1829.24 691.296 L1829.8 691.296 L1830.36 691.296 L1830.92 691.296 L1831.48 691.296 L1832.04 691.296 L1832.6 691.296 L1833.16 691.296 L1833.72 691.296 L1834.27 691.296 L1834.83 691.296 L1835.39 691.296 L1835.95 691.296 L1836.51 691.296 L1837.07 691.296 L1837.63 691.296 L1838.19 691.296 L1838.19 681.231 L1837.63 681.231 L1837.07 681.231 L1836.51 681.231 L1835.95 681.231 L1835.39 681.231 L1834.83 681.231 L1834.27 681.231 L1833.72 681.231 L1833.16 681.231 L1832.6 681.231 L1832.04 681.231 L1831.48 681.231 L1830.92 681.231 L1830.36 681.231 L1829.8 681.231 L1829.24 681.231 L1828.68 681.231 L1828.12 681.231 L1827.56 681.231 L1827 681.231 L1826.45 681.231 L1825.89 681.231 L1825.33 681.231 L1824.77 681.231 L1824.21 681.231 L1823.65 681.231 L1823.09 681.231 L1822.53 681.231 L1821.97 681.231 L1821.41 681.231 L1820.85 681.231 L1820.29 681.231 L1819.73 681.231 L1819.18 681.231 L1818.62 681.231 L1818.06 681.231 L1817.5 681.231 L1816.94 681.231 L1816.38 681.231 L1815.82 681.231 L1815.26 681.231 L1814.7 681.231 L1814.14 681.231 L1813.58 681.231 L1813.02 681.231 L1812.46 681.231 L1811.9 681.231 L1811.35 681.231 L1810.79 681.231 L1810.23 681.231 L1809.67 681.231 L1809.11 681.231 L1808.55 681.231 L1807.99 681.231 L1807.43 681.231 L1806.87 681.231 L1806.31 681.231 L1805.75 681.231 L1805.19 681.231 L1804.63 681.231 L1804.08 681.231 L1803.52 681.231 L1802.96 681.231 L1802.4 681.231 L1801.84 681.231 L1801.28 681.231 L1800.72 681.231 L1800.16 681.231 L1799.6 681.231 L1799.04 681.231 L1798.48 681.231 L1797.92 681.231 L1797.36 681.231 L1796.8 681.231 L1796.25 681.231 L1795.69 681.231 L1795.13 681.231 L1794.57 681.231 L1794.01 681.231 L1793.45 681.231 L1792.89 681.231 L1792.33 681.231 L1791.77 681.231 L1791.21 681.231 L1790.65 681.231 L1790.09 681.231 L1789.53 681.231 L1788.98 681.231 L1788.42 681.231 L1787.86 681.231 L1787.3 681.231 L1786.74 681.231 L1786.18 681.231 L1785.62 681.231 L1785.06 681.231 L1784.5 681.231 L1783.94 681.231 L1783.38 681.231 L1782.82 681.231 L1782.26 681.231 L1781.71 681.231 L1781.15 681.231 L1780.59 681.231 L1780.03 681.231 L1779.47 681.231 L1778.91 681.231 L1778.35 681.231 L1777.79 681.231 L1777.23 681.231 L1776.67 681.231 L1776.11 681.231 L1775.55 681.231 L1774.99 681.231 L1774.43 681.231 L1773.88 681.231 L1773.32 681.231 L1772.76 681.231 L1772.2 681.231 L1771.64 681.231 L1771.08 681.231 L1770.52 681.231 L1769.96 681.231 L1769.4 681.231 L1768.84 681.231 L1768.28 681.231 L1767.72 681.231 L1767.16 681.231 L1766.61 681.231 L1766.05 681.231 L1765.49 681.231 L1764.93 681.231 L1764.37 681.231 L1763.81 681.231 L1763.25 681.231 L1762.69 681.231 L1762.13 681.231 L1761.57 681.231 L1761.01 681.231 L1760.45 681.231 L1759.89 681.231 L1759.34 681.231 L1758.78 681.231 L1758.22 681.231 L1757.66 681.231 L1757.1 681.231 L1756.54 681.231 L1755.98 681.231 L1755.42 681.231 L1754.86 681.231 L1754.3 681.231 L1753.74 681.231 L1753.18 681.231 L1752.62 681.231 L1752.06 681.231 L1751.51 681.231 L1750.95 681.231 L1750.39 681.231 L1749.83 681.231 L1749.27 681.231 L1748.71 681.231 L1748.15 681.231 L1747.59 681.231 L1747.03 681.231 L1746.47 681.231 L1745.91 681.231 L1745.35 681.231 L1744.79 681.231 L1744.24 681.231 L1743.68 681.231 L1743.12 681.231 L1742.56 681.231 L1742 681.231 L1741.44 681.231 L1740.88 681.231 L1740.32 681.231 L1739.76 681.231 L1739.2 681.231 L1738.64 681.231 L1738.08 681.231 L1737.52 681.231 L1736.97 681.231 L1736.41 681.231 L1735.85 681.231 L1735.29 681.231 L1734.73 681.231 L1734.17 681.231 L1733.61 681.231 L1733.05 681.231 L1732.49 681.231 L1731.93 681.231 L1731.37 681.231 L1730.81 681.231 L1730.25 681.231 L1729.69 681.231 L1729.14 681.231 L1728.58 681.231 L1728.02 681.231 L1727.46 681.231 L1726.9 681.231 L1726.34 681.231 L1725.78 681.231 L1725.22 681.231 L1724.66 681.231 L1724.1 681.231 L1723.54 681.231 L1722.98 681.231 L1722.42 681.231 L1721.87 681.231 L1721.31 681.231 L1720.75 681.231 L1720.19 681.231 L1719.63 681.231 L1719.07 681.231 L1718.51 681.231 L1717.95 681.231 L1717.39 681.231 L1716.83 681.231 L1716.27 681.231 L1715.71 681.231 L1715.15 681.231 L1714.6 681.231 L1714.04 681.231 L1713.48 681.231 L1712.92 681.231 L1712.36 681.231 L1711.8 681.231 L1711.24 681.231 L1710.68 681.231 L1710.12 681.231 L1709.56 681.231 L1709 681.231 L1708.44 681.231 L1707.88 681.231 L1707.32 681.231 L1706.77 681.231 L1706.21 681.231 L1705.65 681.231 L1705.09 681.231 L1704.53 681.231 L1703.97 681.231 L1703.41 681.231 L1702.85 681.231 L1702.29 681.231 L1701.73 681.231 L1701.17 681.231 L1700.61 681.231 L1700.05 681.231 L1699.5 681.231 L1698.94 681.231 L1698.38 681.231 L1697.82 681.231 L1697.26 681.231 L1696.7 681.231 L1696.14 681.231 L1695.58 681.231 L1695.02 681.231 L1694.46 681.231 L1693.9 681.231 L1693.34 681.231 L1692.78 681.231 L1692.23 681.231 L1691.67 681.231 L1691.11 681.231 L1690.55 681.231 L1689.99 681.231 L1689.43 681.231 L1688.87 681.231 L1688.31 681.231 L1687.75 681.231 L1687.19 681.231 L1686.63 681.231 L1686.07 681.231 L1685.51 681.231 L1684.95 681.231 L1684.4 681.231 L1683.84 681.231 L1683.28 681.231 L1682.72 681.231 L1682.16 681.231 L1681.6 681.231 L1681.04 681.231 L1680.48 681.231 L1679.92 681.231 L1679.36 681.231 L1678.8 681.231 L1678.24 681.231 L1677.68 681.231 L1677.13 681.231 L1676.57 681.231 L1676.01 681.231 L1675.45 681.231 L1674.89 681.231 L1674.33 681.231 L1673.77 681.231 L1673.21 681.231 L1672.65 681.231 L1672.09 681.231 L1671.53 681.231 L1670.97 681.231 L1670.41 681.231 L1669.85 681.231 L1669.3 681.231 L1668.74 681.231 L1668.18 681.231 L1667.62 681.231 L1667.06 681.231 L1666.5 681.231 L1665.94 681.231 L1665.38 681.231 L1664.82 681.231 L1664.26 681.231 L1663.7 681.231 L1663.14 681.231 L1662.58 681.231 L1662.03 681.231 L1661.47 681.231 L1660.91 681.231 L1660.35 681.231 L1659.79 681.231 L1659.23 681.231 L1658.67 681.231 L1658.11 681.231 L1657.55 681.231 L1656.99 681.231 L1656.43 681.231 L1655.87 681.231 L1655.31 681.231 L1654.76 681.231 L1654.2 681.231 L1653.64 681.231 L1653.08 681.231 L1652.52 681.231 L1651.96 681.231 L1651.4 681.231 L1650.84 681.231 L1650.28 681.231 L1649.72 681.231 L1649.16 681.231 L1648.6 681.231 L1648.04 681.231 L1647.48 681.231 L1646.93 681.231 L1646.37 681.231 L1645.81 681.231 L1645.25 681.231 L1644.69 681.231 L1644.13 681.231 L1643.57 681.231 L1643.01 681.231 L1642.45 681.231 L1641.89 681.231 L1641.33 681.231 L1640.77 681.231 L1640.21 681.231 L1639.66 681.231 L1639.1 681.231 L1638.54 681.231 L1637.98 681.231 L1637.42 681.231 L1636.86 681.231 L1636.3 681.231 L1635.74 681.231 L1635.18 681.231 L1634.62 681.231 L1634.06 681.231 L1633.5 681.231 L1632.94 681.231 L1632.39 681.231 L1631.83 681.231 L1631.27 681.231 L1630.71 681.231 L1630.15 681.231 L1629.59 681.231 L1629.03 681.231 L1628.47 681.231 L1627.91 681.231 L1627.35 681.231 L1626.79 681.231 L1626.23 681.231 L1625.67 681.231 L1625.11 681.231 L1624.56 681.231 L1624 681.231 L1623.44 681.231 L1622.88 681.231 L1622.32 681.231 L1621.76 681.231 L1621.2 681.231 L1620.64 681.231 L1620.08 681.231 L1619.52 681.231 L1618.96 681.231 L1618.4 681.231 L1617.84 681.231 L1617.29 681.231 L1616.73 681.231 L1616.17 681.231 L1615.61 681.231 L1615.05 681.231 L1614.49 681.231 L1613.93 681.231 L1613.37 681.231 L1612.81 681.231 L1612.25 681.231 L1611.69 681.231 L1611.13 681.231 L1610.57 681.231 L1610.02 681.231 L1609.46 681.231 L1608.9 681.231 L1608.34 681.231 L1607.78 681.231 L1607.22 681.231 L1606.66 681.231 L1606.1 681.231 L1605.54 681.231 L1604.98 681.231 L1604.42 681.231 L1603.86 681.231 L1603.3 681.231 L1602.74 681.231 L1602.19 681.231 L1601.63 681.231 L1601.07 681.231 L1600.51 681.231 L1599.95 681.231 L1599.39 681.231 L1598.83 681.231 L1598.27 681.231 L1597.71 681.231 L1597.15 681.231 L1596.59 681.231 L1596.03 681.231 L1595.47 681.231 L1594.92 681.231 L1594.36 681.231 L1593.8 681.231 L1593.24 681.231 L1592.68 681.231 L1592.12 681.231 L1591.56 681.231 L1591 681.231 L1590.44 681.231 L1589.88 681.231 L1589.32 681.231 L1588.76 681.231 L1588.2 681.231 L1587.65 681.231 L1587.09 681.231 L1586.53 681.231 L1585.97 681.231 L1585.41 681.231 L1584.85 681.231 L1584.29 681.231 L1583.73 681.231 L1583.17 681.231 L1582.61 681.231 L1582.05 681.231 L1581.49 681.231 L1580.93 681.231 L1580.37 681.231 L1579.82 681.231 L1579.26 681.231 L1578.7 681.231 L1578.14 681.231 L1577.58 681.231 L1577.02 681.231 L1576.46 681.231 L1575.9 681.231 L1575.34 681.231 L1574.78 681.231 L1574.22 681.231 L1573.66 681.231 L1573.1 681.231 L1572.55 681.231 L1571.99 681.231 L1571.43 681.231 L1570.87 681.231 L1570.31 681.231 L1569.75 681.231 L1569.19 681.231 L1568.63 681.231 L1568.07 681.231 L1567.51 681.231 L1566.95 681.231 L1566.39 681.231 L1565.83 681.231 L1565.28 681.231 L1564.72 681.231 L1564.16 681.231 L1563.6 681.231 L1563.04 681.231 L1562.48 681.231 L1561.92 681.231 L1561.36 681.231 L1560.8 681.231 L1560.24 681.231 L1559.68 681.231 L1559.12 681.231 L1558.56 681.231 L1558 681.231 L1557.45 681.231 L1556.89 681.231 L1556.33 681.231 L1555.77 681.231 L1555.21 681.231 L1554.65 681.231 L1554.09 681.231 L1553.53 681.231 L1552.97 681.231 L1552.41 681.231 L1551.85 681.231 L1551.29 681.231 L1550.73 681.231 L1550.18 681.231 L1549.62 681.231 L1549.06 681.231 L1548.5 681.231 L1547.94 681.231 L1547.38 681.231 L1546.82 681.231 L1546.26 681.231 L1545.7 681.231 L1545.14 681.231 L1544.58 681.231 L1544.02 681.231 L1543.46 681.231 L1542.9 681.231 L1542.35 681.231 L1541.79 681.231 L1541.23 681.231 L1540.67 681.231 L1540.11 681.231 L1539.55 681.231 L1538.99 681.231 L1538.43 681.231 L1537.87 681.231 L1537.31 681.231 L1536.75 681.231 L1536.19 681.231 L1535.63 681.231 L1535.08 681.231 L1534.52 681.231 L1533.96 681.231 L1533.4 681.231 L1532.84 681.231 L1532.28 681.231 L1531.72 681.231 L1531.16 681.231 L1530.6 681.231 L1530.04 681.231 L1529.48 681.231 L1528.92 681.231 L1528.36 681.231 L1527.81 681.231 L1527.25 681.231 L1526.69 681.231 L1526.13 681.231 L1525.57 681.231 L1525.01 681.231 L1524.45 681.231 L1523.89 681.231 L1523.33 681.231 L1522.77 681.231 L1522.21 681.231 L1521.65 681.231 L1521.09 681.231 L1520.53 681.231 L1519.98 681.231 L1519.42 681.231 L1518.86 681.231 L1518.3 681.231 L1517.74 681.231 L1517.18 681.231 L1516.62 681.231 L1516.06 681.231 L1515.5 681.231 L1514.94 681.231 L1514.38 681.231 L1513.82 681.231 L1513.26 681.231 L1512.71 681.231 L1512.15 681.231 L1511.59 681.231 L1511.03 681.231 L1510.47 681.231 L1509.91 681.231 L1509.35 681.231 L1508.79 681.231 L1508.23 681.231 L1507.67 681.231 L1507.11 681.231 L1506.55 681.231 L1505.99 681.231 L1505.44 681.231 L1504.88 681.231 L1504.32 681.231 L1503.76 681.231 L1503.2 681.231 L1502.64 681.231 L1502.08 681.231 L1501.52 681.231 L1500.96 681.231 L1500.4 681.231 L1499.84 681.231 L1499.28 681.231 L1498.72 681.231 L1498.16 681.231 L1497.61 681.231 L1497.05 681.231 L1496.49 681.231 L1495.93 681.231 L1495.37 681.231 L1494.81 681.231 L1494.25 681.231 L1493.69 681.231 L1493.13 681.231 L1492.57 681.231 L1492.01 681.231 L1491.45 681.231 L1490.89 681.231 L1490.34 681.231 L1489.78 681.231 L1489.22 681.231 L1488.66 681.231 L1488.1 681.231 L1487.54 681.231 L1486.98 681.231 L1486.42 681.231 L1485.86 681.231 L1485.3 681.231 L1484.74 681.231 L1484.18 681.231 L1483.62 681.231 L1483.07 681.231 L1482.51 681.231 L1481.95 681.231 L1481.39 681.231 L1480.83 681.231 L1480.27 681.231 L1479.71 681.231 L1479.15 681.231 L1478.59 681.231 L1478.03 681.231 L1477.47 681.231 L1476.91 681.231 L1476.35 681.231 L1475.79 681.231 L1475.24 681.231 L1474.68 681.231 L1474.12 681.231 L1473.56 681.231 L1473 681.231 L1472.44 681.231 L1471.88 681.231 L1471.32 681.231 L1470.76 681.231 L1470.2 681.231 L1469.64 681.231 L1469.08 681.231 L1468.52 681.231 L1467.97 681.231 L1467.41 681.231 L1466.85 681.231 L1466.29 681.231 L1465.73 681.231 L1465.17 681.231 L1464.61 681.231 L1464.05 681.231 L1463.49 681.231 L1462.93 681.231 L1462.37 681.231 L1461.81 681.231 L1461.25 681.231 L1460.7 681.231 L1460.14 681.231 L1459.58 681.231 L1459.02 681.231 L1458.46 681.231 L1457.9 681.231 L1457.34 681.231 L1456.78 681.231 L1456.22 681.231 L1455.66 681.231 L1455.1 681.231 L1454.54 681.231 L1453.98 681.231 L1453.42 681.231 L1452.87 681.231 L1452.31 681.231 L1451.75 681.231 L1451.19 681.231 L1450.63 681.231 L1450.07 681.231 L1449.51 681.231 L1448.95 681.231 L1448.39 681.231 L1447.83 681.231 L1447.27 681.231 L1446.71 681.231 L1446.15 681.231 L1445.6 681.231 L1445.04 681.231 L1444.48 681.231 L1443.92 681.231 L1443.36 681.231 L1442.8 681.231 L1442.24 681.231 L1441.68 681.231 L1441.12 681.231 L1440.56 681.231 L1440 681.231 L1439.44 681.231 L1438.88 681.231 L1438.33 681.231 L1437.77 681.231 L1437.21 681.231 L1436.65 681.231 L1436.09 681.231 L1435.53 681.231 L1434.97 681.231 L1434.41 681.231 L1433.85 681.231 L1433.29 681.231 L1432.73 681.231 L1432.17 681.231 L1431.61 681.231 L1431.05 681.231 L1430.5 681.231 L1429.94 681.231 L1429.38 681.231 L1428.82 681.231 L1428.26 681.231 L1427.7 681.231 L1427.14 681.231 L1426.58 681.231 L1426.02 681.231 L1425.46 681.231 L1424.9 681.231 L1424.34 681.231 L1423.78 681.231 L1423.23 681.231 L1422.67 681.231 L1422.11 681.231 L1421.55 681.231 L1420.99 681.231 L1420.43 681.231 L1419.87 681.231 L1419.31 681.231 L1418.75 681.231 L1418.19 681.231 L1417.63 681.231 L1417.07 681.231 L1416.51 681.231 L1415.95 681.231 L1415.4 681.231 L1414.84 681.231 L1414.28 681.231 L1413.72 681.231 L1413.16 681.231 L1412.6 681.231 L1412.04 681.231 L1411.48 681.231 L1410.92 681.231 L1410.36 681.231 L1409.8 681.231 L1409.24 681.231 L1408.68 681.231 L1408.13 681.231 L1407.57 681.231 L1407.01 681.231 L1406.45 681.231 L1405.89 681.231 L1405.33 681.231 L1404.77 681.231 L1404.21 681.231 L1403.65 681.231 L1403.09 681.231 L1402.53 681.231 L1401.97 681.231 L1401.41 681.231 L1400.86 681.231 L1400.3 681.231 L1399.74 681.231 L1399.18 681.231 L1398.62 681.231 L1398.06 681.231 L1397.5 681.231 L1396.94 681.231 L1396.38 681.231 L1395.82 681.231 L1395.26 681.231 L1394.7 681.231 L1394.14 681.231 L1393.58 681.231 L1393.03 681.231 L1392.47 681.231 L1391.91 681.231 L1391.35 681.231 L1390.79 681.231 L1390.23 681.231 L1389.67 681.231 L1389.11 681.231 L1388.55 681.231 L1387.99 681.231 L1387.43 681.231 L1386.87 681.231 L1386.31 681.231 L1385.76 681.231 L1385.2 681.231 L1384.64 681.231 L1384.08 681.231 L1383.52 681.231 L1382.96 681.231 L1382.4 681.231 L1381.84 681.231 L1381.28 681.231 L1380.72 681.231 L1380.16 681.231 L1379.6 681.231 L1379.04 681.231 L1378.49 681.231 L1377.93 681.231 L1377.37 681.231 L1376.81 681.231 L1376.25 681.231 L1375.69 681.231 L1375.13 681.231 L1374.57 681.231 L1374.01 681.231 L1373.45 681.231 L1372.89 681.231 L1372.33 681.231 L1371.77 681.231 L1371.21 681.231 L1370.66 681.231 L1370.1 681.231 L1369.54 681.231 L1368.98 681.231 L1368.42 681.231 L1367.86 681.231 L1367.3 681.231 L1366.74 681.231 L1366.18 681.231 L1365.62 681.231 L1365.06 681.231 L1364.5 681.231 L1363.94 681.231 L1363.39 681.231 L1362.83 681.231 L1362.27 681.231 L1361.71 681.231 L1361.15 681.231 L1360.59 681.231 L1360.03 681.231 L1359.47 681.231 L1358.91 681.231 L1358.35 681.231 L1357.79 681.231 L1357.23 681.231 L1356.67 681.231 L1356.12 681.231 L1355.56 681.231 L1355 681.231 L1354.44 681.231 L1353.88 681.231 L1353.32 681.231 L1352.76 681.231 L1352.2 681.231 L1351.64 681.231 L1351.08 681.231 L1350.52 681.231 L1349.96 681.231 L1349.4 681.231 L1348.84 681.231 L1348.29 681.231 L1347.73 681.231 L1347.17 681.231 L1346.61 681.231 L1346.05 681.231 L1345.49 681.231 L1344.93 681.231 L1344.37 681.231 L1343.81 681.231 L1343.25 681.231 L1342.69 681.231 L1342.13 681.231 L1341.57 681.231 L1341.02 681.231 L1340.46 681.231 L1339.9 681.231 L1339.34 681.231 L1338.78 681.231 L1338.22 681.231 L1337.66 681.231 L1337.1 681.231 L1336.54 681.231 L1335.98 681.231 L1335.42 681.231 L1334.86 681.231 L1334.3 681.231 L1333.75 681.231 L1333.19 681.231 L1332.63 681.231 L1332.07 681.231 L1331.51 681.231 L1330.95 681.231 L1330.39 681.231 L1329.83 681.231 L1329.27 681.231 L1328.71 681.231 L1328.15 681.231 L1327.59 681.231 L1327.03 681.231 L1326.47 681.231 L1325.92 681.231 L1325.36 681.231 L1324.8 681.231 L1324.24 681.231 L1323.68 681.231 L1323.12 681.231 L1322.56 681.231 L1322 681.231 L1321.44 681.231 L1320.88 681.231 L1320.32 681.231 L1319.76 681.231 L1319.2 681.231 L1318.65 681.231 L1318.09 681.231 L1317.53 681.231 L1316.97 681.231 L1316.41 681.231 L1315.85 681.231 L1315.29 681.231 L1314.73 681.231 L1314.17 681.231 L1313.61 681.231 L1313.05 681.231 L1312.49 681.231 L1311.93 681.231 L1311.38 681.231 L1310.82 681.231 L1310.26 681.231 L1309.7 681.231 L1309.14 681.231 L1308.58 681.231 L1308.02 681.231 L1307.46 681.231 L1306.9 681.231 L1306.34 681.231 L1305.78 681.231 L1305.22 681.231 L1304.66 681.231 L1304.1 681.231 L1303.55 681.231 L1302.99 681.231 L1302.43 681.231 L1301.87 681.231 L1301.31 681.231 L1300.75 681.231 L1300.19 681.231 L1299.63 681.231 L1299.07 681.231 L1298.51 681.231 L1297.95 681.231 L1297.39 681.231 L1296.83 681.231 L1296.28 681.231 L1295.72 681.231 L1295.16 681.231 L1294.6 681.231 L1294.04 681.231 L1293.48 681.231 L1292.92 681.231 L1292.36 681.231 L1291.8 681.231 L1291.24 681.231 L1290.68 681.231 L1290.12 681.231 L1289.56 681.231 L1289 681.231 L1288.45 681.231 L1287.89 681.231 L1287.33 681.231 L1286.77 681.231 L1286.21 681.231 L1285.65 681.231 L1285.09 681.231 L1284.53 681.231 L1283.97 681.231 L1283.41 681.231 L1282.85 681.231 L1282.29 681.231 L1281.73 681.231 L1281.18 681.231 L1280.62 681.231 L1280.06 681.231 L1279.5 681.231 L1278.94 681.231 L1278.38 681.231 L1277.82 681.231 L1277.26 681.231 L1276.7 681.231 L1276.14 681.231 L1275.58 681.231 L1275.02 681.231 L1274.46 681.231 L1273.91 681.231 L1273.35 681.231 L1272.79 681.231 L1272.23 681.231 L1271.67 681.231 L1271.11 681.231 L1270.55 681.231 L1269.99 681.231 L1269.43 681.231 L1268.87 681.231 L1268.31 681.231 L1267.75 681.231 L1267.19 681.231 L1266.63 681.231 L1266.08 681.231 L1265.52 681.231 L1264.96 681.231 L1264.4 681.231 L1263.84 681.231 L1263.28 681.231 L1262.72 681.231 L1262.16 681.231 L1261.6 681.231 L1261.04 681.231 L1260.48 681.231 L1259.92 681.231 L1259.36 681.231 L1258.81 681.231 L1258.25 681.231 L1257.69 681.231 L1257.13 681.231 L1256.57 681.231 L1256.01 681.231 L1255.45 681.231 L1254.89 681.231 L1254.33 681.231 L1253.77 681.231 L1253.21 681.231 L1252.65 681.231 L1252.09 681.231 L1251.54 681.231 L1250.98 681.231 L1250.42 681.231 L1249.86 681.231 L1249.3 681.231 L1248.74 681.231 L1248.18 681.231 L1247.62 681.231 L1247.06 681.231 L1246.5 681.231 L1245.94 681.231 L1245.38 681.231 L1244.82 681.231 L1244.26 681.231 L1243.71 681.231 L1243.15 681.231 L1242.59 681.231 L1242.03 681.231 L1241.47 681.231 L1240.91 681.231 L1240.35 681.231 L1239.79 681.231 L1239.23 681.231 L1238.67 681.231 L1238.11 681.231 L1237.55 681.231 L1236.99 681.231 L1236.44 681.231 L1235.88 681.231 L1235.32 681.231 L1234.76 681.231 L1234.2 681.231 L1233.64 681.231 L1233.08 681.231 L1232.52 681.231 L1231.96 681.231 L1231.4 681.231 L1230.84 681.231 L1230.28 681.231 L1229.72 681.231 L1229.17 681.231 L1228.61 681.231 L1228.05 681.231 L1227.49 681.231 L1226.93 681.231 L1226.37 681.231 L1225.81 681.231 L1225.25 681.231 L1224.69 681.231 L1224.13 681.231 L1223.57 681.231 L1223.01 681.231 L1222.45 681.231 L1221.89 681.231 L1221.34 681.231 L1220.78 681.231 L1220.22 681.231 L1219.66 681.231 L1219.1 681.231 L1218.54 681.231 L1217.98 681.231 L1217.42 681.231 L1216.86 681.231 L1216.3 681.231 L1215.74 681.231 L1215.18 681.231 L1214.62 681.231 L1214.07 681.231 L1213.51 681.231 L1212.95 681.231 L1212.39 681.231 L1211.83 681.231 L1211.27 681.231 L1210.71 681.231 L1210.15 681.231 L1209.59 681.231 L1209.03 681.231 L1208.47 681.231 L1207.91 681.231 L1207.35 681.231 L1206.8 681.231 L1206.24 681.231 L1205.68 681.231 L1205.12 681.231 L1204.56 681.231 L1204 681.231 L1203.44 681.231 L1202.88 681.231 L1202.32 681.231 L1201.76 681.231 L1201.2 681.231 L1200.64 681.231 L1200.08 681.231 L1199.52 681.231 L1198.97 681.231 L1198.41 681.231 L1197.85 681.231 L1197.29 681.231 L1196.73 681.231 L1196.17 681.231 L1195.61 681.231 L1195.05 681.231 L1194.49 681.231 L1193.93 681.231 L1193.37 681.231 L1192.81 681.231 L1192.25 681.231 L1191.7 681.231 L1191.14 681.231 L1190.58 681.231 L1190.02 681.231 L1189.46 681.231 L1188.9 681.231 L1188.34 681.231 L1187.78 681.231 L1187.22 681.231 L1186.66 681.231 L1186.1 681.231 L1185.54 681.231 L1184.98 681.231 L1184.43 681.231 L1183.87 681.231 L1183.31 681.231 L1182.75 681.231 L1182.19 681.231 L1181.63 681.231 L1181.07 681.231 L1180.51 681.231 L1179.95 681.231 L1179.39 681.231 L1178.83 681.231 L1178.27 681.231 L1177.71 681.231 L1177.15 681.231 L1176.6 681.231 L1176.04 681.231 L1175.48 681.231 L1174.92 681.231 L1174.36 681.231 L1173.8 681.231 L1173.24 681.231 L1172.68 681.231 L1172.12 681.231 L1171.56 681.231 L1171 681.231 L1170.44 681.231 L1169.88 681.231 L1169.33 681.231 L1168.77 681.231 L1168.21 681.231 L1167.65 681.231 L1167.09 681.231 L1166.53 681.231 L1165.97 681.231 L1165.41 681.231 L1164.85 681.231 L1164.29 681.231 L1163.73 681.231 L1163.17 681.231 L1162.61 681.231 L1162.05 681.231 L1161.5 681.231 L1160.94 681.231 L1160.38 681.231 L1159.82 681.231 L1159.26 681.231 L1158.7 681.231 L1158.14 681.231 L1157.58 681.231 L1157.02 681.231 L1156.46 681.231 L1155.9 681.231 L1155.34 681.231 L1154.78 681.231 L1154.23 681.231 L1153.67 681.231 L1153.11 681.231 L1152.55 681.231 L1151.99 681.231 L1151.43 681.231 L1150.87 681.231 L1150.31 681.231 L1149.75 681.231 L1149.19 681.231 L1148.63 681.231 L1148.07 681.231 L1147.51 681.231 L1146.96 681.231 L1146.4 681.231 L1145.84 681.231 L1145.28 681.231 L1144.72 681.231 L1144.16 681.231 L1143.6 681.231 L1143.04 681.231 L1142.48 681.231 L1141.92 681.231 L1141.36 681.231 L1140.8 681.231 L1140.24 681.231 L1139.68 681.231 L1139.13 681.231 L1138.57 681.231 L1138.01 681.231 L1137.45 681.231 L1136.89 681.231 L1136.33 681.231 L1135.77 681.231 L1135.21 681.231 L1134.65 681.231 L1134.09 681.231 L1133.53 681.231 L1132.97 681.231 L1132.41 681.231 L1131.86 681.231 L1131.3 681.231 L1130.74 681.231 L1130.18 681.231 L1129.62 681.231 L1129.06 681.231 L1128.5 681.231 L1127.94 681.231 L1127.38 681.231 L1126.82 681.231 L1126.26 681.231 L1125.7 681.231 L1125.14 681.231 L1124.59 681.231 L1124.03 681.231 L1123.47 681.231 L1122.91 681.231 L1122.35 681.231 L1121.79 681.231 L1121.23 681.231 L1120.67 681.231 L1120.11 681.231 L1119.55 681.231 L1118.99 681.231 L1118.43 681.231 L1117.87 681.231 L1117.31 681.231 L1116.76 681.231 L1116.2 681.231 L1115.64 681.231 L1115.08 681.231 L1114.52 681.231 L1113.96 681.231 L1113.4 681.231 L1112.84 681.231 L1112.28 681.231 L1111.72 681.231 L1111.16 681.231 L1110.6 681.231 L1110.04 681.231 L1109.49 681.231 L1108.93 681.231 L1108.37 681.231 L1107.81 681.231 L1107.25 681.231 L1106.69 681.231 L1106.13 681.231 L1105.57 681.231 L1105.01 681.231 L1104.45 681.231 L1103.89 681.231 L1103.33 681.231 L1102.77 681.231 L1102.22 681.231 L1101.66 681.231 L1101.1 681.231 L1100.54 681.231 L1099.98 681.231 L1099.42 681.231 L1098.86 681.231 L1098.3 681.231 L1097.74 681.231 L1097.18 681.231 L1096.62 681.231 L1096.06 681.231 L1095.5 681.231 L1094.94 681.231 L1094.39 681.231 L1093.83 681.231 L1093.27 681.231 L1092.71 681.231 L1092.15 681.231 L1091.59 681.231 L1091.03 681.231 L1090.47 681.231 L1089.91 681.231 L1089.35 681.231 L1088.79 681.231 L1088.23 681.231 L1087.67 681.231 L1087.12 681.231 L1086.56 681.231 L1086 681.231 L1085.44 681.231 L1084.88 681.231 L1084.32 681.231 L1083.76 681.231 L1083.2 681.231 L1082.64 681.231 L1082.08 681.231 L1081.52 681.231 L1080.96 681.231 L1080.4 681.231 L1079.85 681.231 L1079.29 681.231 L1078.73 681.231 L1078.17 681.231 L1077.61 681.231 L1077.05 681.231 L1076.49 681.231 L1075.93 681.231 L1075.37 681.231 L1074.81 681.231 L1074.25 681.231 L1073.69 681.231 L1073.13 681.231 L1072.57 681.231 L1072.02 681.231 L1071.46 681.231 L1070.9 681.231 L1070.34 681.231 L1069.78 681.231 L1069.22 681.231 L1068.66 681.231 L1068.1 681.231 L1067.54 681.231 L1066.98 681.231 L1066.42 681.231 L1065.86 681.231 L1065.3 681.231 L1064.75 681.231 L1064.19 681.231 L1063.63 681.231 L1063.07 681.231 L1062.51 681.231 L1061.95 681.231 L1061.39 681.231 L1060.83 681.231 L1060.27 681.231 L1059.71 681.231 L1059.15 681.231 L1058.59 681.231 L1058.03 681.231 L1057.48 681.231 L1056.92 681.231 L1056.36 681.231 L1055.8 681.231 L1055.24 681.231 L1054.68 681.231 L1054.12 681.231 L1053.56 681.231 L1053 681.231 L1052.44 681.231 L1051.88 681.231 L1051.32 681.231 L1050.76 681.231 L1050.2 681.231 L1049.65 681.231 L1049.09 681.231 L1048.53 681.231 L1047.97 681.231 L1047.41 681.231 L1046.85 681.231 L1046.29 681.231 L1045.73 681.231 L1045.17 681.231 L1044.61 681.231 L1044.05 681.231 L1043.49 681.231 L1042.93 681.231 L1042.38 681.231 L1041.82 681.231 L1041.26 681.231 L1040.7 681.231 L1040.14 681.231 L1039.58 681.231 L1039.02 681.231 L1038.46 681.231 L1037.9 681.231 L1037.34 681.231 L1036.78 681.231 L1036.22 681.231 L1035.66 681.231 L1035.1 681.231 L1034.55 681.231 L1033.99 681.231 L1033.43 681.231 L1032.87 681.231 L1032.31 681.231 L1031.75 681.231 L1031.19 681.231 L1030.63 681.231 L1030.07 681.231 L1029.51 681.231 L1028.95 681.231 L1028.39 681.231 L1027.83 681.231 L1027.28 681.231 L1026.72 681.231 L1026.16 681.231 L1025.6 681.231 L1025.04 681.231 L1024.48 681.231 L1023.92 681.231 L1023.36 681.231 L1022.8 681.231 L1022.24 681.231 L1021.68 681.231 L1021.12 681.231 L1020.56 681.231 L1020.01 681.231 L1019.45 681.231 L1018.89 681.231 L1018.33 681.231 L1017.77 681.231 L1017.21 681.231 L1016.65 681.231 L1016.09 681.231 L1015.53 681.231 L1014.97 681.231 L1014.41 681.231 L1013.85 681.231 L1013.29 681.231 L1012.73 681.231 L1012.18 681.231 L1011.62 681.231 L1011.06 681.231 L1010.5 681.231 L1009.94 681.231 L1009.38 681.231 L1008.82 681.231 L1008.26 681.231 L1007.7 681.231 L1007.14 681.231 L1006.58 681.231 L1006.02 681.231 L1005.46 681.231 L1004.91 681.231 L1004.35 681.231 L1003.79 681.231 L1003.23 681.231 L1002.67 681.231 L1002.11 681.231 L1001.55 681.231 L1000.99 681.231 L1000.43 681.231 L999.872 681.231 L999.313 681.231 L998.754 681.231 L998.194 681.231 L997.635 681.231 L997.076 681.231 L996.517 681.231 L995.957 681.231 L995.398 681.231 L994.839 681.231 L994.28 681.231 L993.72 681.231 L993.161 681.231 L992.602 681.231 L992.043 681.231 L991.483 681.231 L990.924 681.231 L990.365 681.231 L989.806 681.231 L989.246 681.231 L988.687 681.231 L988.128 681.231 L987.569 681.231 L987.009 681.231 L986.45 681.231 L985.891 681.231 L985.332 681.231 L984.772 681.231 L984.213 681.231 L983.654 681.231 L983.095 681.231 L982.535 681.231 L981.976 681.231 L981.417 681.231 L980.858 681.231 L980.298 681.231 L979.739 681.231 L979.18 681.231 L978.621 681.231 L978.061 681.231 L977.502 681.231 L976.943 681.231 L976.384 681.231 L975.824 681.231 L975.265 681.231 L974.706 681.231 L974.147 681.231 L973.587 681.231 L973.028 681.231 L972.469 681.231 L971.91 681.231 L971.35 681.231 L970.791 681.231 L970.232 681.231 L969.673 681.231 L969.113 681.231 L968.554 681.231 L967.995 681.231 L967.436 681.231 L966.876 681.231 L966.317 681.231 L965.758 681.231 L965.199 681.231 L964.639 681.231 L964.08 681.231 L963.521 681.231 L962.962 681.231 L962.402 681.231 L961.843 681.231 L961.284 681.231 L960.725 681.231 L960.165 681.231 L959.606 681.231 L959.047 681.231 L958.488 681.231 L957.928 681.231 L957.369 681.231 L956.81 681.231 L956.251 681.231 L955.691 681.231 L955.132 681.231 L954.573 681.231 L954.014 681.231 L953.454 681.231 L952.895 681.231 L952.336 681.231 L951.777 681.231 L951.217 681.231 L950.658 681.231 L950.099 681.231 L949.54 681.231 L948.98 681.231 L948.421 681.231 L947.862 681.231 L947.303 681.231 L946.743 681.231 L946.184 681.231 L945.625 681.231 L945.066 681.231 L944.506 681.231 L943.947 681.231 L943.388 681.231 L942.829 681.231 L942.269 681.231 L941.71 681.231 L941.151 681.231 L940.592 681.231 L940.032 681.231 L939.473 681.231 L938.914 681.231 L938.355 681.231 L937.795 681.231 L937.236 681.231 L936.677 681.231 L936.118 681.231 L935.558 681.231 L934.999 681.231 L934.44 681.231 L933.881 681.231 L933.321 681.231 L932.762 681.231 L932.203 681.231 L931.644 681.231 L931.084 681.231 L930.525 681.231 L929.966 681.231 L929.406 681.231 L928.847 681.231 L928.288 681.231 L927.729 681.231 L927.169 681.231 L926.61 681.231 L926.051 681.231 L925.492 681.231 L924.932 681.231 L924.373 681.231 L923.814 681.231 L923.255 681.231 L922.695 681.231 L922.136 681.231 L921.577 681.231 L921.018 681.231 L920.458 681.231 L919.899 681.231 L919.34 681.231 L918.781 681.231 L918.221 681.231 L917.662 681.231 L917.103 681.231 L916.544 681.231 L915.984 681.231 L915.425 681.231 L914.866 681.231 L914.307 681.231 L913.747 681.231 L913.188 681.231 L912.629 681.231 L912.07 681.231 L911.51 681.231 L910.951 681.231 L910.392 681.231 L909.833 681.231 L909.273 681.231 L908.714 681.231 L908.155 681.231 L907.596 681.231 L907.036 681.231 L906.477 681.231 L905.918 681.231 L905.359 681.231 L904.799 681.231 L904.24 681.231 L903.681 681.231 L903.122 681.231 L902.562 681.231 L902.003 681.231 L901.444 681.231 L900.885 681.231 L900.325 681.231 L899.766 681.231 L899.207 681.231 L898.648 681.231 L898.088 681.231 L897.529 681.231 L896.97 681.231 L896.411 681.231 L895.851 681.231 L895.292 681.231 L894.733 681.231 L894.174 681.231 L893.614 681.231 L893.055 681.231 L892.496 681.231 L891.937 681.231 L891.377 681.231 L890.818 681.231 L890.259 681.231 L889.7 681.231 L889.14 681.231 L888.581 681.231 L888.022 681.231 L887.463 681.231 L886.903 681.231 L886.344 681.231 L885.785 681.231 L885.226 681.231 L884.666 681.231 L884.107 681.231 L883.548 681.231 L882.989 681.231 L882.429 681.231 L881.87 681.231 L881.311 681.231 L880.752 681.231 L880.192 681.231 L879.633 681.231 L879.074 681.231 L878.515 681.231 L877.955 681.231 L877.396 681.231 L876.837 681.231 L876.278 681.231 L875.718 681.231 L875.159 681.231 L874.6 681.231 L874.041 681.231 L873.481 681.231 L872.922 681.231 L872.363 681.231 L871.804 681.231 L871.244 681.231 L870.685 681.231 L870.126 681.231 L869.567 681.231 L869.007 681.231 L868.448 681.231 L867.889 681.231 L867.33 681.231 L866.77 681.231 L866.211 681.231 L865.652 681.231 L865.093 681.231 L864.533 681.231 L863.974 681.231 L863.415 681.231 L862.856 681.231 L862.296 681.231 L861.737 681.231 L861.178 681.231 L860.619 681.231 L860.059 681.231 L859.5 681.231 L858.941 681.231 L858.382 681.231 L857.822 681.231 L857.263 681.231 L856.704 681.231 L856.145 681.231 L855.585 681.231 L855.026 681.231 L854.467 681.231 L853.908 681.231 L853.348 681.231 L852.789 681.231 L852.23 681.231 L851.671 681.231 L851.111 681.231 L850.552 681.231 L849.993 681.231 L849.434 681.231 L848.874 681.231 L848.315 681.231 L847.756 681.231 L847.197 681.231 L846.637 681.231 L846.078 681.231 L845.519 681.231 L844.96 681.231 L844.4 681.231 L843.841 681.231 L843.282 681.231 L842.723 681.231 L842.163 681.231 L841.604 681.231 L841.045 681.231 L840.486 681.231 L839.926 681.231 L839.367 681.231 L838.808 681.231 L838.249 681.231 L837.689 681.231 L837.13 681.231 L836.571 681.231 L836.012 681.231 L835.452 681.231 L834.893 681.231 L834.334 681.231 L833.775 681.231 L833.215 681.231 L832.656 681.231 L832.097 681.231 L831.538 681.231 L830.978 681.231 L830.419 681.231 L829.86 681.231 L829.301 681.231 L828.741 681.231 L828.182 681.231 L827.623 681.231 L827.064 681.231 L826.504 681.231 L825.945 681.231 L825.386 681.231 L824.827 681.231 L824.267 681.231 L823.708 681.231 L823.149 681.231 L822.59 681.231 L822.03 681.231 L821.471 681.231 L820.912 681.231 L820.353 681.231 L819.793 681.231 L819.234 681.231 L818.675 681.231 L818.116 681.231 L817.556 681.231 L816.997 681.231 L816.438 681.231 L815.879 681.231 L815.319 681.231 L814.76 681.231 L814.201 681.231 L813.642 681.231 L813.082 681.231 L812.523 681.231 L811.964 681.231 L811.405 681.231 L810.845 681.231 L810.286 681.231 L809.727 681.231 L809.168 681.231 L808.608 681.231 L808.049 681.231 L807.49 681.231 L806.931 681.231 L806.371 681.231 L805.812 681.231 L805.253 681.231 L804.693 681.231 L804.134 681.231 L803.575 681.231 L803.016 681.231 L802.456 681.231 L801.897 681.231 L801.338 681.231 L800.779 681.231 L800.219 681.231 L799.66 681.231 L799.101 681.231 L798.542 681.231 L797.982 681.231 L797.423 681.231 L796.864 681.231 L796.305 681.231 L795.745 681.231 L795.186 681.231 L794.627 681.231 L794.068 681.231 L793.508 681.231 L792.949 681.231 L792.39 681.231 L791.831 681.231 L791.271 681.231 L790.712 681.231 L790.153 681.231 L789.594 681.231 L789.034 681.231 L788.475 681.231 L787.916 681.231 L787.357 681.231 L786.797 681.231 L786.238 681.231 L785.679 681.231 L785.12 681.231 L784.56 681.231 L784.001 681.231 L783.442 681.231 L782.883 681.231 L782.323 681.231 L781.764 681.231 L781.205 681.231 L780.646 681.231 L780.086 681.231 L779.527 681.231 L778.968 681.231 L778.409 681.231 L777.849 681.231 L777.29 681.231 L776.731 681.231 L776.172 681.231 L775.612 681.231 L775.053 681.231 L774.494 681.231 L773.935 681.231 L773.375 681.231 L772.816 681.231 L772.257 681.231 L771.698 681.231 L771.138 681.231 L770.579 681.231 L770.02 681.231 L769.461 681.231 L768.901 681.231 L768.342 681.231 L767.783 681.231 L767.224 681.231 L766.664 681.231 L766.105 681.231 L765.546 681.231 L764.987 681.231 L764.427 681.231 L763.868 681.231 L763.309 681.231 L762.75 681.231 L762.19 681.231 L761.631 681.231 L761.072 681.231 L760.513 681.231 L759.953 681.231 L759.394 681.231 L758.835 681.231 L758.276 681.231 L757.716 681.231 L757.157 681.231 L756.598 681.231 L756.039 681.231 L755.479 681.231 L754.92 681.231 L754.361 681.231 L753.802 681.231 L753.242 681.231 L752.683 681.231 L752.124 681.231 L751.565 681.231 L751.005 681.231 L750.446 681.231 L749.887 681.231 L749.328 681.231 L748.768 681.231 L748.209 681.231 L747.65 681.231 L747.091 681.231 L746.531 681.231 L745.972 681.231 L745.413 681.231 L744.854 681.231 L744.294 681.231 L743.735 681.231 L743.176 681.231 L742.617 681.231 L742.057 681.231 L741.498 681.231 L740.939 681.231 L740.38 681.231 L739.82 681.231 L739.261 681.231 L738.702 681.231 L738.143 681.231 L737.583 681.231 L737.024 681.231 L736.465 681.231 L735.906 681.231 L735.346 681.231 L734.787 681.231 L734.228 681.231 L733.669 681.231 L733.109 681.231 L732.55 681.231 L731.991 681.231 L731.432 681.231 L730.872 681.231 L730.313 681.231 L729.754 681.231 L729.195 681.231 L728.635 681.231 L728.076 681.231 L727.517 681.231 L726.958 681.231 L726.398 681.231 L725.839 681.231 L725.28 681.231 L724.721 681.231 L724.161 681.231 L723.602 681.231 L723.043 681.231 L722.484 681.231 L721.924 681.231 L721.365 681.231 L720.806 681.231 L720.247 681.231  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.264 720.806,686.264 721.365,686.264 721.924,686.264 722.484,686.264 723.043,686.264 723.602,686.264 724.161,686.264 724.721,686.264 725.28,686.264 725.839,686.264 726.398,686.264 726.958,686.264 727.517,686.264 728.076,686.264 728.635,686.264 729.195,686.264 729.754,686.264 730.313,686.264 730.872,686.264 731.432,686.264 731.991,686.264 732.55,686.264 733.109,686.264 733.669,686.264 734.228,686.264 734.787,686.264 735.346,686.264 735.906,686.264 736.465,686.264 737.024,686.264 737.583,686.264 738.143,686.264 738.702,686.264 739.261,686.264 739.82,686.264 740.38,686.264 740.939,686.264 741.498,686.264 742.057,686.264 742.617,686.264 743.176,686.264 743.735,686.264 744.294,686.264 744.854,686.264 745.413,686.264 745.972,686.264 746.531,686.264 747.091,686.264 747.65,686.264 748.209,686.264 748.768,686.264 749.328,686.264 749.887,686.264 750.446,686.264 751.005,686.264 751.565,686.264 752.124,686.264 752.683,686.264 753.242,686.264 753.802,686.264 754.361,686.264 754.92,686.264 755.479,686.264 756.039,686.264 756.598,686.264 757.157,686.264 757.716,686.264 758.276,686.264 758.835,686.264 759.394,686.264 759.953,686.264 760.513,686.264 761.072,686.264 761.631,686.264 762.19,686.264 762.75,686.264 763.309,686.264 763.868,686.264 764.427,686.264 764.987,686.264 765.546,686.264 766.105,686.264 766.664,686.264 767.224,686.264 767.783,686.264 768.342,686.264 768.901,686.264 769.461,686.264 770.02,686.264 770.579,686.264 771.138,686.264 771.698,686.264 772.257,686.264 772.816,686.264 773.375,686.264 773.935,686.264 774.494,686.264 775.053,686.264 775.612,686.264 776.172,686.264 776.731,686.264 777.29,686.264 777.849,686.264 778.409,686.264 778.968,686.264 779.527,686.264 780.086,686.264 780.646,686.264 781.205,686.264 781.764,686.264 782.323,686.264 782.883,686.264 783.442,686.264 784.001,686.264 784.56,686.264 785.12,686.264 785.679,686.264 786.238,686.264 786.797,686.264 787.357,686.264 787.916,686.264 788.475,686.264 789.034,686.264 789.594,686.264 790.153,686.264 790.712,686.264 791.271,686.264 791.831,686.264 792.39,686.264 792.949,686.264 793.508,686.264 794.068,686.264 794.627,686.264 795.186,686.264 795.745,686.264 796.305,686.264 796.864,686.264 797.423,686.264 797.982,686.264 798.542,686.264 799.101,686.264 799.66,686.264 800.219,686.264 800.779,686.264 801.338,686.264 801.897,686.264 802.456,686.264 803.016,686.264 803.575,686.264 804.134,686.264 804.693,686.264 805.253,686.264 805.812,686.264 806.371,686.264 806.931,686.264 807.49,686.264 808.049,686.264 808.608,686.264 809.168,686.264 809.727,686.264 810.286,686.264 810.845,686.264 811.405,686.264 811.964,686.264 812.523,686.264 813.082,686.264 813.642,686.264 814.201,686.264 814.76,686.264 815.319,686.264 815.879,686.264 816.438,686.264 816.997,686.264 817.556,686.264 818.116,686.264 818.675,686.264 819.234,686.264 819.793,686.264 820.353,686.264 820.912,686.264 821.471,686.264 822.03,686.264 822.59,686.264 823.149,686.264 823.708,686.264 824.267,686.264 824.827,686.264 825.386,686.264 825.945,686.264 826.504,686.264 827.064,686.264 827.623,686.264 828.182,686.264 828.741,686.264 829.301,686.264 829.86,686.264 830.419,686.264 830.978,686.264 831.538,686.264 832.097,686.264 832.656,686.264 833.215,686.264 833.775,686.264 834.334,686.264 834.893,686.264 835.452,686.264 836.012,686.264 836.571,686.264 837.13,686.264 837.689,686.264 838.249,686.264 838.808,686.264 839.367,686.264 839.926,686.264 840.486,686.264 841.045,686.264 841.604,686.264 842.163,686.264 842.723,686.264 843.282,686.264 843.841,686.264 844.4,686.264 844.96,686.264 845.519,686.264 846.078,686.264 846.637,686.264 847.197,686.264 847.756,686.264 848.315,686.264 848.874,686.264 849.434,686.264 849.993,686.264 850.552,686.264 851.111,686.264 851.671,686.264 852.23,686.264 852.789,686.264 853.348,686.264 853.908,686.264 854.467,686.264 855.026,686.264 855.585,686.264 856.145,686.264 856.704,686.264 857.263,686.264 857.822,686.264 858.382,686.264 858.941,686.264 859.5,686.264 860.059,686.264 860.619,686.264 861.178,686.264 861.737,686.264 862.296,686.264 862.856,686.264 863.415,686.264 863.974,686.264 864.533,686.264 865.093,686.264 865.652,686.264 866.211,686.264 866.77,686.264 867.33,686.264 867.889,686.264 868.448,686.264 869.007,686.264 869.567,686.264 870.126,686.264 870.685,686.264 871.244,686.264 871.804,686.264 872.363,686.264 872.922,686.264 873.481,686.264 874.041,686.264 874.6,686.264 875.159,686.264 875.718,686.264 876.278,686.264 876.837,686.264 877.396,686.264 877.955,686.264 878.515,686.264 879.074,686.264 879.633,686.264 880.192,686.264 880.752,686.264 881.311,686.264 881.87,686.264 882.429,686.264 882.989,686.264 883.548,686.264 884.107,686.264 884.666,686.264 885.226,686.264 885.785,686.264 886.344,686.264 886.903,686.264 887.463,686.264 888.022,686.264 888.581,686.264 889.14,686.264 889.7,686.264 890.259,686.264 890.818,686.264 891.377,686.264 891.937,686.264 892.496,686.264 893.055,686.264 893.614,686.264 894.174,686.264 894.733,686.264 895.292,686.264 895.851,686.264 896.411,686.264 896.97,686.264 897.529,686.264 898.088,686.264 898.648,686.264 899.207,686.264 899.766,686.264 900.325,686.264 900.885,686.264 901.444,686.264 902.003,686.264 902.562,686.264 903.122,686.264 903.681,686.264 904.24,686.264 904.799,686.264 905.359,686.264 905.918,686.264 906.477,686.264 907.036,686.264 907.596,686.264 908.155,686.264 908.714,686.264 909.273,686.264 909.833,686.264 910.392,686.264 910.951,686.264 911.51,686.264 912.07,686.264 912.629,686.264 913.188,686.264 913.747,686.264 914.307,686.264 914.866,686.264 915.425,686.264 915.984,686.264 916.544,686.264 917.103,686.264 917.662,686.264 918.221,686.264 918.781,686.264 919.34,686.264 919.899,686.264 920.458,686.264 921.018,686.264 921.577,686.264 922.136,686.264 922.695,686.264 923.255,686.264 923.814,686.264 924.373,686.264 924.932,686.264 925.492,686.264 926.051,686.264 926.61,686.264 927.169,686.264 927.729,686.264 928.288,686.264 928.847,686.264 929.406,686.264 929.966,686.264 930.525,686.264 931.084,686.264 931.644,686.264 932.203,686.264 932.762,686.264 933.321,686.264 933.881,686.264 934.44,686.264 934.999,686.264 935.558,686.264 936.118,686.264 936.677,686.264 937.236,686.264 937.795,686.264 938.355,686.264 938.914,686.264 939.473,686.264 940.032,686.264 940.592,686.264 941.151,686.264 941.71,686.264 942.269,686.264 942.829,686.264 943.388,686.264 943.947,686.264 944.506,686.264 945.066,686.264 945.625,686.264 946.184,686.264 946.743,686.264 947.303,686.264 947.862,686.264 948.421,686.264 948.98,686.264 949.54,686.264 950.099,686.264 950.658,686.264 951.217,686.264 951.777,686.264 952.336,686.264 952.895,686.264 953.454,686.264 954.014,686.264 954.573,686.264 955.132,686.264 955.691,686.264 956.251,686.264 956.81,686.264 957.369,686.264 957.928,686.264 958.488,686.264 959.047,686.264 959.606,686.264 960.165,686.264 960.725,686.264 961.284,686.264 961.843,686.264 962.402,686.264 962.962,686.264 963.521,686.264 964.08,686.264 964.639,686.264 965.199,686.264 965.758,686.264 966.317,686.264 966.876,686.264 967.436,686.264 967.995,686.264 968.554,686.264 969.113,686.264 969.673,686.264 970.232,686.264 970.791,686.264 971.35,686.264 971.91,686.264 972.469,686.264 973.028,686.264 973.587,686.264 974.147,686.264 974.706,686.264 975.265,686.264 975.824,686.264 976.384,686.264 976.943,686.264 977.502,686.264 978.061,686.264 978.621,686.264 979.18,686.264 979.739,686.264 980.298,686.264 980.858,686.264 981.417,686.264 981.976,686.264 982.535,686.264 983.095,686.264 983.654,686.264 984.213,686.264 984.772,686.264 985.332,686.264 985.891,686.264 986.45,686.264 987.009,686.264 987.569,686.264 988.128,686.264 988.687,686.264 989.246,686.264 989.806,686.264 990.365,686.264 990.924,686.264 991.483,686.264 992.043,686.264 992.602,686.264 993.161,686.264 993.72,686.264 994.28,686.264 994.839,686.264 995.398,686.264 995.957,686.264 996.517,686.264 997.076,686.264 997.635,686.264 998.194,686.264 998.754,686.264 999.313,686.264 999.872,686.264 1000.43,686.264 1000.99,686.264 1001.55,686.264 1002.11,686.264 1002.67,686.264 1003.23,686.264 1003.79,686.264 1004.35,686.264 1004.91,686.264 1005.46,686.264 1006.02,686.264 1006.58,686.264 1007.14,686.264 1007.7,686.264 1008.26,686.264 1008.82,686.264 1009.38,686.264 1009.94,686.264 1010.5,686.264 1011.06,686.264 1011.62,686.264 1012.18,686.264 1012.73,686.264 1013.29,686.264 1013.85,686.264 1014.41,686.264 1014.97,686.264 1015.53,686.264 1016.09,686.264 1016.65,686.264 1017.21,686.264 1017.77,686.264 1018.33,686.264 1018.89,686.264 1019.45,686.264 1020.01,686.264 1020.56,686.264 1021.12,686.264 1021.68,686.264 1022.24,686.264 1022.8,686.264 1023.36,686.264 1023.92,686.264 1024.48,686.264 1025.04,686.264 1025.6,686.264 1026.16,686.264 1026.72,686.264 1027.28,686.264 1027.83,686.264 1028.39,686.264 1028.95,686.264 1029.51,686.264 1030.07,686.264 1030.63,686.264 1031.19,686.264 1031.75,686.264 1032.31,686.264 1032.87,686.264 1033.43,686.264 1033.99,686.264 1034.55,686.264 1035.1,686.264 1035.66,686.264 1036.22,686.264 1036.78,686.264 1037.34,686.264 1037.9,686.264 1038.46,686.264 1039.02,686.264 1039.58,686.264 1040.14,686.264 1040.7,686.264 1041.26,686.264 1041.82,686.264 1042.38,686.264 1042.93,686.264 1043.49,686.264 1044.05,686.264 1044.61,686.264 1045.17,686.264 1045.73,686.264 1046.29,686.264 1046.85,686.264 1047.41,686.264 1047.97,686.264 1048.53,686.264 1049.09,686.264 1049.65,686.264 1050.2,686.264 1050.76,686.264 1051.32,686.264 1051.88,686.264 1052.44,686.264 1053,686.264 1053.56,686.264 1054.12,686.264 1054.68,686.264 1055.24,686.264 1055.8,686.264 1056.36,686.264 1056.92,686.264 1057.48,686.264 1058.03,686.264 1058.59,686.264 1059.15,686.264 1059.71,686.264 1060.27,686.264 1060.83,686.264 1061.39,686.264 1061.95,686.264 1062.51,686.264 1063.07,686.264 1063.63,686.264 1064.19,686.264 1064.75,686.264 1065.3,686.264 1065.86,686.264 1066.42,686.264 1066.98,686.264 1067.54,686.264 1068.1,686.264 1068.66,686.264 1069.22,686.264 1069.78,686.264 1070.34,686.264 1070.9,686.264 1071.46,686.264 1072.02,686.264 1072.57,686.264 1073.13,686.264 1073.69,686.264 1074.25,686.264 1074.81,686.264 1075.37,686.264 1075.93,686.264 1076.49,686.264 1077.05,686.264 1077.61,686.264 1078.17,686.264 1078.73,686.264 1079.29,686.264 1079.85,686.264 1080.4,686.264 1080.96,686.264 1081.52,686.264 1082.08,686.264 1082.64,686.264 1083.2,686.264 1083.76,686.264 1084.32,686.264 1084.88,686.264 1085.44,686.264 1086,686.264 1086.56,686.264 1087.12,686.264 1087.67,686.264 1088.23,686.264 1088.79,686.264 1089.35,686.264 1089.91,686.264 1090.47,686.264 1091.03,686.264 1091.59,686.264 1092.15,686.264 1092.71,686.264 1093.27,686.264 1093.83,686.264 1094.39,686.264 1094.94,686.264 1095.5,686.264 1096.06,686.264 1096.62,686.264 1097.18,686.264 1097.74,686.264 1098.3,686.264 1098.86,686.264 1099.42,686.264 1099.98,686.264 1100.54,686.264 1101.1,686.264 1101.66,686.264 1102.22,686.264 1102.77,686.264 1103.33,686.264 1103.89,686.264 1104.45,686.264 1105.01,686.264 1105.57,686.264 1106.13,686.264 1106.69,686.264 1107.25,686.264 1107.81,686.264 1108.37,686.264 1108.93,686.264 1109.49,686.264 1110.04,686.264 1110.6,686.264 1111.16,686.264 1111.72,686.264 1112.28,686.264 1112.84,686.264 1113.4,686.264 1113.96,686.264 1114.52,686.264 1115.08,686.264 1115.64,686.264 1116.2,686.264 1116.76,686.264 1117.31,686.264 1117.87,686.264 1118.43,686.264 1118.99,686.264 1119.55,686.264 1120.11,686.264 1120.67,686.264 1121.23,686.264 1121.79,686.264 1122.35,686.264 1122.91,686.264 1123.47,686.264 1124.03,686.264 1124.59,686.264 1125.14,686.264 1125.7,686.264 1126.26,686.264 1126.82,686.264 1127.38,686.264 1127.94,686.264 1128.5,686.264 1129.06,686.264 1129.62,686.264 1130.18,686.264 1130.74,686.264 1131.3,686.264 1131.86,686.264 1132.41,686.264 1132.97,686.264 1133.53,686.264 1134.09,686.264 1134.65,686.264 1135.21,686.264 1135.77,686.264 1136.33,686.264 1136.89,686.264 1137.45,686.264 1138.01,686.264 1138.57,686.264 1139.13,686.264 1139.68,686.264 1140.24,686.264 1140.8,686.264 1141.36,686.264 1141.92,686.264 1142.48,686.264 1143.04,686.264 1143.6,686.264 1144.16,686.264 1144.72,686.264 1145.28,686.264 1145.84,686.264 1146.4,686.264 1146.96,686.264 1147.51,686.264 1148.07,686.264 1148.63,686.264 1149.19,686.264 1149.75,686.264 1150.31,686.264 1150.87,686.264 1151.43,686.264 1151.99,686.264 1152.55,686.264 1153.11,686.264 1153.67,686.264 1154.23,686.264 1154.78,686.264 1155.34,686.264 1155.9,686.264 1156.46,686.264 1157.02,686.264 1157.58,686.264 1158.14,686.264 1158.7,686.264 1159.26,686.264 1159.82,686.264 1160.38,686.264 1160.94,686.264 1161.5,686.264 1162.05,686.264 1162.61,686.264 1163.17,686.264 1163.73,686.264 1164.29,686.264 1164.85,686.264 1165.41,686.264 1165.97,686.264 1166.53,686.264 1167.09,686.264 1167.65,686.264 1168.21,686.264 1168.77,686.264 1169.33,686.264 1169.88,686.264 1170.44,686.264 1171,686.264 1171.56,686.264 1172.12,686.264 1172.68,686.264 1173.24,686.264 1173.8,686.264 1174.36,686.264 1174.92,686.264 1175.48,686.264 1176.04,686.264 1176.6,686.264 1177.15,686.264 1177.71,686.264 1178.27,686.264 1178.83,686.264 1179.39,686.264 1179.95,686.264 1180.51,686.264 1181.07,686.264 1181.63,686.264 1182.19,686.264 1182.75,686.264 1183.31,686.264 1183.87,686.264 1184.43,686.264 1184.98,686.264 1185.54,686.264 1186.1,686.264 1186.66,686.264 1187.22,686.264 1187.78,686.264 1188.34,686.264 1188.9,686.264 1189.46,686.264 1190.02,686.264 1190.58,686.264 1191.14,686.264 1191.7,686.264 1192.25,686.264 1192.81,686.264 1193.37,686.264 1193.93,686.264 1194.49,686.264 1195.05,686.264 1195.61,686.264 1196.17,686.264 1196.73,686.264 1197.29,686.264 1197.85,686.264 1198.41,686.264 1198.97,686.264 1199.52,686.264 1200.08,686.264 1200.64,686.264 1201.2,686.264 1201.76,686.264 1202.32,686.264 1202.88,686.264 1203.44,686.264 1204,686.264 1204.56,686.264 1205.12,686.264 1205.68,686.264 1206.24,686.264 1206.8,686.264 1207.35,686.264 1207.91,686.264 1208.47,686.264 1209.03,686.264 1209.59,686.264 1210.15,686.264 1210.71,686.264 1211.27,686.264 1211.83,686.264 1212.39,686.264 1212.95,686.264 1213.51,686.264 1214.07,686.264 1214.62,686.264 1215.18,686.264 1215.74,686.264 1216.3,686.264 1216.86,686.264 1217.42,686.264 1217.98,686.264 1218.54,686.264 1219.1,686.264 1219.66,686.264 1220.22,686.264 1220.78,686.264 1221.34,686.264 1221.89,686.264 1222.45,686.264 1223.01,686.264 1223.57,686.264 1224.13,686.264 1224.69,686.264 1225.25,686.264 1225.81,686.264 1226.37,686.264 1226.93,686.264 1227.49,686.264 1228.05,686.264 1228.61,686.264 1229.17,686.264 1229.72,686.264 1230.28,686.264 1230.84,686.264 1231.4,686.264 1231.96,686.264 1232.52,686.264 1233.08,686.264 1233.64,686.264 1234.2,686.264 1234.76,686.264 1235.32,686.264 1235.88,686.264 1236.44,686.264 1236.99,686.264 1237.55,686.264 1238.11,686.264 1238.67,686.264 1239.23,686.264 1239.79,686.264 1240.35,686.264 1240.91,686.264 1241.47,686.264 1242.03,686.264 1242.59,686.264 1243.15,686.264 1243.71,686.264 1244.26,686.264 1244.82,686.264 1245.38,686.264 1245.94,686.264 1246.5,686.264 1247.06,686.264 1247.62,686.264 1248.18,686.264 1248.74,686.264 1249.3,686.264 1249.86,686.264 1250.42,686.264 1250.98,686.264 1251.54,686.264 1252.09,686.264 1252.65,686.264 1253.21,686.264 1253.77,686.264 1254.33,686.264 1254.89,686.264 1255.45,686.264 1256.01,686.264 1256.57,686.264 1257.13,686.264 1257.69,686.264 1258.25,686.264 1258.81,686.264 1259.36,686.264 1259.92,686.264 1260.48,686.264 1261.04,686.264 1261.6,686.264 1262.16,686.264 1262.72,686.264 1263.28,686.264 1263.84,686.264 1264.4,686.264 1264.96,686.264 1265.52,686.264 1266.08,686.264 1266.63,686.264 1267.19,686.264 1267.75,686.264 1268.31,686.264 1268.87,686.264 1269.43,686.264 1269.99,686.264 1270.55,686.264 1271.11,686.264 1271.67,686.264 1272.23,686.264 1272.79,686.264 1273.35,686.264 1273.91,686.264 1274.46,686.264 1275.02,686.264 1275.58,686.264 1276.14,686.264 1276.7,686.264 1277.26,686.264 1277.82,686.264 1278.38,686.264 1278.94,686.264 1279.5,686.264 1280.06,686.264 1280.62,686.264 1281.18,686.264 1281.73,686.264 1282.29,686.264 1282.85,686.264 1283.41,686.264 1283.97,686.264 1284.53,686.264 1285.09,686.264 1285.65,686.264 1286.21,686.264 1286.77,686.264 1287.33,686.264 1287.89,686.264 1288.45,686.264 1289,686.264 1289.56,686.264 1290.12,686.264 1290.68,686.264 1291.24,686.264 1291.8,686.264 1292.36,686.264 1292.92,686.264 1293.48,686.264 1294.04,686.264 1294.6,686.264 1295.16,686.264 1295.72,686.264 1296.28,686.264 1296.83,686.264 1297.39,686.264 1297.95,686.264 1298.51,686.264 1299.07,686.264 1299.63,686.264 1300.19,686.264 1300.75,686.264 1301.31,686.264 1301.87,686.264 1302.43,686.264 1302.99,686.264 1303.55,686.264 1304.1,686.264 1304.66,686.264 1305.22,686.264 1305.78,686.264 1306.34,686.264 1306.9,686.264 1307.46,686.264 1308.02,686.264 1308.58,686.264 1309.14,686.264 1309.7,686.264 1310.26,686.264 1310.82,686.264 1311.38,686.264 1311.93,686.264 1312.49,686.264 1313.05,686.264 1313.61,686.264 1314.17,686.264 1314.73,686.264 1315.29,686.264 1315.85,686.264 1316.41,686.264 1316.97,686.264 1317.53,686.264 1318.09,686.264 1318.65,686.264 1319.2,686.264 1319.76,686.264 1320.32,686.264 1320.88,686.264 1321.44,686.264 1322,686.264 1322.56,686.264 1323.12,686.264 1323.68,686.264 1324.24,686.264 1324.8,686.264 1325.36,686.264 1325.92,686.264 1326.47,686.264 1327.03,686.264 1327.59,686.264 1328.15,686.264 1328.71,686.264 1329.27,686.264 1329.83,686.264 1330.39,686.264 1330.95,686.264 1331.51,686.264 1332.07,686.264 1332.63,686.264 1333.19,686.264 1333.75,686.264 1334.3,686.264 1334.86,686.264 1335.42,686.264 1335.98,686.264 1336.54,686.264 1337.1,686.264 1337.66,686.264 1338.22,686.264 1338.78,686.264 1339.34,686.264 1339.9,686.264 1340.46,686.264 1341.02,686.264 1341.57,686.264 1342.13,686.264 1342.69,686.264 1343.25,686.264 1343.81,686.264 1344.37,686.264 1344.93,686.264 1345.49,686.264 1346.05,686.264 1346.61,686.264 1347.17,686.264 1347.73,686.264 1348.29,686.264 1348.84,686.264 1349.4,686.264 1349.96,686.264 1350.52,686.264 1351.08,686.264 1351.64,686.264 1352.2,686.264 1352.76,686.264 1353.32,686.264 1353.88,686.264 1354.44,686.264 1355,686.264 1355.56,686.264 1356.12,686.264 1356.67,686.264 1357.23,686.264 1357.79,686.264 1358.35,686.264 1358.91,686.264 1359.47,686.264 1360.03,686.264 1360.59,686.264 1361.15,686.264 1361.71,686.264 1362.27,686.264 1362.83,686.264 1363.39,686.264 1363.94,686.264 1364.5,686.264 1365.06,686.264 1365.62,686.264 1366.18,686.264 1366.74,686.264 1367.3,686.264 1367.86,686.264 1368.42,686.264 1368.98,686.264 1369.54,686.264 1370.1,686.264 1370.66,686.264 1371.21,686.264 1371.77,686.264 1372.33,686.264 1372.89,686.264 1373.45,686.264 1374.01,686.264 1374.57,686.264 1375.13,686.264 1375.69,686.264 1376.25,686.264 1376.81,686.264 1377.37,686.264 1377.93,686.264 1378.49,686.264 1379.04,686.264 1379.6,686.264 1380.16,686.264 1380.72,686.264 1381.28,686.264 1381.84,686.264 1382.4,686.264 1382.96,686.264 1383.52,686.264 1384.08,686.264 1384.64,686.264 1385.2,686.264 1385.76,686.264 1386.31,686.264 1386.87,686.264 1387.43,686.264 1387.99,686.264 1388.55,686.264 1389.11,686.264 1389.67,686.264 1390.23,686.264 1390.79,686.264 1391.35,686.264 1391.91,686.264 1392.47,686.264 1393.03,686.264 1393.58,686.264 1394.14,686.264 1394.7,686.264 1395.26,686.264 1395.82,686.264 1396.38,686.264 1396.94,686.264 1397.5,686.264 1398.06,686.264 1398.62,686.264 1399.18,686.264 1399.74,686.264 1400.3,686.264 1400.86,686.264 1401.41,686.264 1401.97,686.264 1402.53,686.264 1403.09,686.264 1403.65,686.264 1404.21,686.264 1404.77,686.264 1405.33,686.264 1405.89,686.264 1406.45,686.264 1407.01,686.264 1407.57,686.264 1408.13,686.264 1408.68,686.264 1409.24,686.264 1409.8,686.264 1410.36,686.264 1410.92,686.264 1411.48,686.264 1412.04,686.264 1412.6,686.264 1413.16,686.264 1413.72,686.264 1414.28,686.264 1414.84,686.264 1415.4,686.264 1415.95,686.264 1416.51,686.264 1417.07,686.264 1417.63,686.264 1418.19,686.264 1418.75,686.264 1419.31,686.264 1419.87,686.264 1420.43,686.264 1420.99,686.264 1421.55,686.264 1422.11,686.264 1422.67,686.264 1423.23,686.264 1423.78,686.264 1424.34,686.264 1424.9,686.264 1425.46,686.264 1426.02,686.264 1426.58,686.264 1427.14,686.264 1427.7,686.264 1428.26,686.264 1428.82,686.264 1429.38,686.264 1429.94,686.264 1430.5,686.264 1431.05,686.264 1431.61,686.264 1432.17,686.264 1432.73,686.264 1433.29,686.264 1433.85,686.264 1434.41,686.264 1434.97,686.264 1435.53,686.264 1436.09,686.264 1436.65,686.264 1437.21,686.264 1437.77,686.264 1438.33,686.264 1438.88,686.264 1439.44,686.264 1440,686.264 1440.56,686.264 1441.12,686.264 1441.68,686.264 1442.24,686.264 1442.8,686.264 1443.36,686.264 1443.92,686.264 1444.48,686.264 1445.04,686.264 1445.6,686.264 1446.15,686.264 1446.71,686.264 1447.27,686.264 1447.83,686.264 1448.39,686.264 1448.95,686.264 1449.51,686.264 1450.07,686.264 1450.63,686.264 1451.19,686.264 1451.75,686.264 1452.31,686.264 1452.87,686.264 1453.42,686.264 1453.98,686.264 1454.54,686.264 1455.1,686.264 1455.66,686.264 1456.22,686.264 1456.78,686.264 1457.34,686.264 1457.9,686.264 1458.46,686.264 1459.02,686.264 1459.58,686.264 1460.14,686.264 1460.7,686.264 1461.25,686.264 1461.81,686.264 1462.37,686.264 1462.93,686.264 1463.49,686.264 1464.05,686.264 1464.61,686.264 1465.17,686.264 1465.73,686.264 1466.29,686.264 1466.85,686.264 1467.41,686.264 1467.97,686.264 1468.52,686.264 1469.08,686.264 1469.64,686.264 1470.2,686.264 1470.76,686.264 1471.32,686.264 1471.88,686.264 1472.44,686.264 1473,686.264 1473.56,686.264 1474.12,686.264 1474.68,686.264 1475.24,686.264 1475.79,686.264 1476.35,686.264 1476.91,686.264 1477.47,686.264 1478.03,686.264 1478.59,686.264 1479.15,686.264 1479.71,686.264 1480.27,686.264 1480.83,686.264 1481.39,686.264 1481.95,686.264 1482.51,686.264 1483.07,686.264 1483.62,686.264 1484.18,686.264 1484.74,686.264 1485.3,686.264 1485.86,686.264 1486.42,686.264 1486.98,686.264 1487.54,686.264 1488.1,686.264 1488.66,686.264 1489.22,686.264 1489.78,686.264 1490.34,686.264 1490.89,686.264 1491.45,686.264 1492.01,686.264 1492.57,686.264 1493.13,686.264 1493.69,686.264 1494.25,686.264 1494.81,686.264 1495.37,686.264 1495.93,686.264 1496.49,686.264 1497.05,686.264 1497.61,686.264 1498.16,686.264 1498.72,686.264 1499.28,686.264 1499.84,686.264 1500.4,686.264 1500.96,686.264 1501.52,686.264 1502.08,686.264 1502.64,686.264 1503.2,686.264 1503.76,686.264 1504.32,686.264 1504.88,686.264 1505.44,686.264 1505.99,686.264 1506.55,686.264 1507.11,686.264 1507.67,686.264 1508.23,686.264 1508.79,686.264 1509.35,686.264 1509.91,686.264 1510.47,686.264 1511.03,686.264 1511.59,686.264 1512.15,686.264 1512.71,686.264 1513.26,686.264 1513.82,686.264 1514.38,686.264 1514.94,686.264 1515.5,686.264 1516.06,686.264 1516.62,686.264 1517.18,686.264 1517.74,686.264 1518.3,686.264 1518.86,686.264 1519.42,686.264 1519.98,686.264 1520.53,686.264 1521.09,686.264 1521.65,686.264 1522.21,686.264 1522.77,686.264 1523.33,686.264 1523.89,686.264 1524.45,686.264 1525.01,686.264 1525.57,686.264 1526.13,686.264 1526.69,686.264 1527.25,686.264 1527.81,686.264 1528.36,686.264 1528.92,686.264 1529.48,686.264 1530.04,686.264 1530.6,686.264 1531.16,686.264 1531.72,686.264 1532.28,686.264 1532.84,686.264 1533.4,686.264 1533.96,686.264 1534.52,686.264 1535.08,686.264 1535.63,686.264 1536.19,686.264 1536.75,686.264 1537.31,686.264 1537.87,686.264 1538.43,686.264 1538.99,686.264 1539.55,686.264 1540.11,686.264 1540.67,686.264 1541.23,686.264 1541.79,686.264 1542.35,686.264 1542.9,686.264 1543.46,686.264 1544.02,686.264 1544.58,686.264 1545.14,686.264 1545.7,686.264 1546.26,686.264 1546.82,686.264 1547.38,686.264 1547.94,686.264 1548.5,686.264 1549.06,686.264 1549.62,686.264 1550.18,686.264 1550.73,686.264 1551.29,686.264 1551.85,686.264 1552.41,686.264 1552.97,686.264 1553.53,686.264 1554.09,686.264 1554.65,686.264 1555.21,686.264 1555.77,686.264 1556.33,686.264 1556.89,686.264 1557.45,686.264 1558,686.264 1558.56,686.264 1559.12,686.264 1559.68,686.264 1560.24,686.264 1560.8,686.264 1561.36,686.264 1561.92,686.264 1562.48,686.264 1563.04,686.264 1563.6,686.264 1564.16,686.264 1564.72,686.264 1565.28,686.264 1565.83,686.264 1566.39,686.264 1566.95,686.264 1567.51,686.264 1568.07,686.264 1568.63,686.264 1569.19,686.264 1569.75,686.264 1570.31,686.264 1570.87,686.264 1571.43,686.264 1571.99,686.264 1572.55,686.264 1573.1,686.264 1573.66,686.264 1574.22,686.264 1574.78,686.264 1575.34,686.264 1575.9,686.264 1576.46,686.264 1577.02,686.264 1577.58,686.264 1578.14,686.264 1578.7,686.264 1579.26,686.264 1579.82,686.264 1580.37,686.264 1580.93,686.264 1581.49,686.264 1582.05,686.264 1582.61,686.264 1583.17,686.264 1583.73,686.264 1584.29,686.264 1584.85,686.264 1585.41,686.264 1585.97,686.264 1586.53,686.264 1587.09,686.264 1587.65,686.264 1588.2,686.264 1588.76,686.264 1589.32,686.264 1589.88,686.264 1590.44,686.264 1591,686.264 1591.56,686.264 1592.12,686.264 1592.68,686.264 1593.24,686.264 1593.8,686.264 1594.36,686.264 1594.92,686.264 1595.47,686.264 1596.03,686.264 1596.59,686.264 1597.15,686.264 1597.71,686.264 1598.27,686.264 1598.83,686.264 1599.39,686.264 1599.95,686.264 1600.51,686.264 1601.07,686.264 1601.63,686.264 1602.19,686.264 1602.74,686.264 1603.3,686.264 1603.86,686.264 1604.42,686.264 1604.98,686.264 1605.54,686.264 1606.1,686.264 1606.66,686.264 1607.22,686.264 1607.78,686.264 1608.34,686.264 1608.9,686.264 1609.46,686.264 1610.02,686.264 1610.57,686.264 1611.13,686.264 1611.69,686.264 1612.25,686.264 1612.81,686.264 1613.37,686.264 1613.93,686.264 1614.49,686.264 1615.05,686.264 1615.61,686.264 1616.17,686.264 1616.73,686.264 1617.29,686.264 1617.84,686.264 1618.4,686.264 1618.96,686.264 1619.52,686.264 1620.08,686.264 1620.64,686.264 1621.2,686.264 1621.76,686.264 1622.32,686.264 1622.88,686.264 1623.44,686.264 1624,686.264 1624.56,686.264 1625.11,686.264 1625.67,686.264 1626.23,686.264 1626.79,686.264 1627.35,686.264 1627.91,686.264 1628.47,686.264 1629.03,686.264 1629.59,686.264 1630.15,686.264 1630.71,686.264 1631.27,686.264 1631.83,686.264 1632.39,686.264 1632.94,686.264 1633.5,686.264 1634.06,686.264 1634.62,686.264 1635.18,686.264 1635.74,686.264 1636.3,686.264 1636.86,686.264 1637.42,686.264 1637.98,686.264 1638.54,686.264 1639.1,686.264 1639.66,686.264 1640.21,686.264 1640.77,686.264 1641.33,686.264 1641.89,686.264 1642.45,686.264 1643.01,686.264 1643.57,686.264 1644.13,686.264 1644.69,686.264 1645.25,686.264 1645.81,686.264 1646.37,686.264 1646.93,686.264 1647.48,686.264 1648.04,686.264 1648.6,686.264 1649.16,686.264 1649.72,686.264 1650.28,686.264 1650.84,686.264 1651.4,686.264 1651.96,686.264 1652.52,686.264 1653.08,686.264 1653.64,686.264 1654.2,686.264 1654.76,686.264 1655.31,686.264 1655.87,686.264 1656.43,686.264 1656.99,686.264 1657.55,686.264 1658.11,686.264 1658.67,686.264 1659.23,686.264 1659.79,686.264 1660.35,686.264 1660.91,686.264 1661.47,686.264 1662.03,686.264 1662.58,686.264 1663.14,686.264 1663.7,686.264 1664.26,686.264 1664.82,686.264 1665.38,686.264 1665.94,686.264 1666.5,686.264 1667.06,686.264 1667.62,686.264 1668.18,686.264 1668.74,686.264 1669.3,686.264 1669.85,686.264 1670.41,686.264 1670.97,686.264 1671.53,686.264 1672.09,686.264 1672.65,686.264 1673.21,686.264 1673.77,686.264 1674.33,686.264 1674.89,686.264 1675.45,686.264 1676.01,686.264 1676.57,686.264 1677.13,686.264 1677.68,686.264 1678.24,686.264 1678.8,686.264 1679.36,686.264 1679.92,686.264 1680.48,686.264 1681.04,686.264 1681.6,686.264 1682.16,686.264 1682.72,686.264 1683.28,686.264 1683.84,686.264 1684.4,686.264 1684.95,686.264 1685.51,686.264 1686.07,686.264 1686.63,686.264 1687.19,686.264 1687.75,686.264 1688.31,686.264 1688.87,686.264 1689.43,686.264 1689.99,686.264 1690.55,686.264 1691.11,686.264 1691.67,686.264 1692.23,686.264 1692.78,686.264 1693.34,686.264 1693.9,686.264 1694.46,686.264 1695.02,686.264 1695.58,686.264 1696.14,686.264 1696.7,686.264 1697.26,686.264 1697.82,686.264 1698.38,686.264 1698.94,686.264 1699.5,686.264 1700.05,686.264 1700.61,686.264 1701.17,686.264 1701.73,686.264 1702.29,686.264 1702.85,686.264 1703.41,686.264 1703.97,686.264 1704.53,686.264 1705.09,686.264 1705.65,686.264 1706.21,686.264 1706.77,686.264 1707.32,686.264 1707.88,686.264 1708.44,686.264 1709,686.264 1709.56,686.264 1710.12,686.264 1710.68,686.264 1711.24,686.264 1711.8,686.264 1712.36,686.264 1712.92,686.264 1713.48,686.264 1714.04,686.264 1714.6,686.264 1715.15,686.264 1715.71,686.264 1716.27,686.264 1716.83,686.264 1717.39,686.264 1717.95,686.264 1718.51,686.264 1719.07,686.264 1719.63,686.264 1720.19,686.264 1720.75,686.264 1721.31,686.264 1721.87,686.264 1722.42,686.264 1722.98,686.264 1723.54,686.264 1724.1,686.264 1724.66,686.264 1725.22,686.264 1725.78,686.264 1726.34,686.264 1726.9,686.264 1727.46,686.264 1728.02,686.264 1728.58,686.264 1729.14,686.264 1729.69,686.264 1730.25,686.264 1730.81,686.264 1731.37,686.264 1731.93,686.264 1732.49,686.264 1733.05,686.264 1733.61,686.264 1734.17,686.264 1734.73,686.264 1735.29,686.264 1735.85,686.264 1736.41,686.264 1736.97,686.264 1737.52,686.264 1738.08,686.264 1738.64,686.264 1739.2,686.264 1739.76,686.264 1740.32,686.264 1740.88,686.264 1741.44,686.264 1742,686.264 1742.56,686.264 1743.12,686.264 1743.68,686.264 1744.24,686.264 1744.79,686.264 1745.35,686.264 1745.91,686.264 1746.47,686.264 1747.03,686.264 1747.59,686.264 1748.15,686.264 1748.71,686.264 1749.27,686.264 1749.83,686.264 1750.39,686.264 1750.95,686.264 1751.51,686.264 1752.06,686.264 1752.62,686.264 1753.18,686.264 1753.74,686.264 1754.3,686.264 1754.86,686.264 1755.42,686.264 1755.98,686.264 1756.54,686.264 1757.1,686.264 1757.66,686.264 1758.22,686.264 1758.78,686.264 1759.34,686.264 1759.89,686.264 1760.45,686.264 1761.01,686.264 1761.57,686.264 1762.13,686.264 1762.69,686.264 1763.25,686.264 1763.81,686.264 1764.37,686.264 1764.93,686.264 1765.49,686.264 1766.05,686.264 1766.61,686.264 1767.16,686.264 1767.72,686.264 1768.28,686.264 1768.84,686.264 1769.4,686.264 1769.96,686.264 1770.52,686.264 1771.08,686.264 1771.64,686.264 1772.2,686.264 1772.76,686.264 1773.32,686.264 1773.88,686.264 1774.43,686.264 1774.99,686.264 1775.55,686.264 1776.11,686.264 1776.67,686.264 1777.23,686.264 1777.79,686.264 1778.35,686.264 1778.91,686.264 1779.47,686.264 1780.03,686.264 1780.59,686.264 1781.15,686.264 1781.71,686.264 1782.26,686.264 1782.82,686.264 1783.38,686.264 1783.94,686.264 1784.5,686.264 1785.06,686.264 1785.62,686.264 1786.18,686.264 1786.74,686.264 1787.3,686.264 1787.86,686.264 1788.42,686.264 1788.98,686.264 1789.53,686.264 1790.09,686.264 1790.65,686.264 1791.21,686.264 1791.77,686.264 1792.33,686.264 1792.89,686.264 1793.45,686.264 1794.01,686.264 1794.57,686.264 1795.13,686.264 1795.69,686.264 1796.25,686.264 1796.8,686.264 1797.36,686.264 1797.92,686.264 1798.48,686.264 1799.04,686.264 1799.6,686.264 1800.16,686.264 1800.72,686.264 1801.28,686.264 1801.84,686.264 1802.4,686.264 1802.96,686.264 1803.52,686.264 1804.08,686.264 1804.63,686.264 1805.19,686.264 1805.75,686.264 1806.31,686.264 1806.87,686.264 1807.43,686.264 1807.99,686.264 1808.55,686.264 1809.11,686.264 1809.67,686.264 1810.23,686.264 1810.79,686.264 1811.35,686.264 1811.9,686.264 1812.46,686.264 1813.02,686.264 1813.58,686.264 1814.14,686.264 1814.7,686.264 1815.26,686.264 1815.82,686.264 1816.38,686.264 1816.94,686.264 1817.5,686.264 1818.06,686.264 1818.62,686.264 1819.18,686.264 1819.73,686.264 1820.29,686.264 1820.85,686.264 1821.41,686.264 1821.97,686.264 1822.53,686.264 1823.09,686.264 1823.65,686.264 1824.21,686.264 1824.77,686.264 1825.33,686.264 1825.89,686.264 1826.45,686.264 1827,686.264 1827.56,686.264 1828.12,686.264 1828.68,686.264 1829.24,686.264 1829.8,686.264 1830.36,686.264 1830.92,686.264 1831.48,686.264 1832.04,686.264 1832.6,686.264 1833.16,686.264 1833.72,686.264 1834.27,686.264 1834.83,686.264 1835.39,686.264 1835.95,686.264 1836.51,686.264 1837.07,686.264 1837.63,686.264 1838.19,686.264 \"/>\n<path clip-path=\"url(#clip523)\" d=\"M720.247 684.6 L720.806 684.6 L721.365 684.6 L721.924 684.6 L722.484 684.6 L723.043 684.6 L723.602 684.6 L724.161 684.6 L724.721 684.6 L725.28 684.6 L725.839 684.6 L726.398 684.6 L726.958 684.6 L727.517 684.6 L728.076 684.6 L728.635 684.6 L729.195 684.6 L729.754 684.6 L730.313 684.6 L730.872 684.6 L731.432 684.6 L731.991 684.6 L732.55 684.6 L733.109 684.6 L733.669 684.6 L734.228 684.6 L734.787 684.6 L735.346 684.6 L735.906 684.6 L736.465 684.6 L737.024 684.6 L737.583 684.6 L738.143 684.6 L738.702 684.6 L739.261 684.6 L739.82 684.6 L740.38 684.6 L740.939 684.6 L741.498 684.6 L742.057 684.6 L742.617 684.6 L743.176 684.6 L743.735 684.6 L744.294 684.6 L744.854 684.6 L745.413 684.6 L745.972 684.6 L746.531 684.6 L747.091 684.6 L747.65 684.6 L748.209 684.6 L748.768 684.6 L749.328 684.6 L749.887 684.6 L750.446 684.6 L751.005 684.6 L751.565 684.6 L752.124 684.6 L752.683 684.6 L753.242 684.6 L753.802 684.6 L754.361 684.6 L754.92 684.6 L755.479 684.6 L756.039 684.6 L756.598 684.6 L757.157 684.6 L757.716 684.6 L758.276 684.6 L758.835 684.6 L759.394 684.6 L759.953 684.6 L760.513 684.6 L761.072 684.6 L761.631 684.6 L762.19 684.6 L762.75 684.6 L763.309 684.6 L763.868 684.6 L764.427 684.6 L764.987 684.6 L765.546 684.6 L766.105 684.6 L766.664 684.6 L767.224 684.6 L767.783 684.6 L768.342 684.6 L768.901 684.6 L769.461 684.6 L770.02 684.6 L770.579 684.6 L771.138 684.6 L771.698 684.6 L772.257 684.6 L772.816 684.6 L773.375 684.6 L773.935 684.6 L774.494 684.6 L775.053 684.6 L775.612 684.6 L776.172 684.6 L776.731 684.6 L777.29 684.6 L777.849 684.6 L778.409 684.6 L778.968 684.6 L779.527 684.6 L780.086 684.6 L780.646 684.6 L781.205 684.6 L781.764 684.6 L782.323 684.6 L782.883 684.6 L783.442 684.6 L784.001 684.6 L784.56 684.6 L785.12 684.6 L785.679 684.6 L786.238 684.6 L786.797 684.6 L787.357 684.6 L787.916 684.6 L788.475 684.6 L789.034 684.6 L789.594 684.6 L790.153 684.6 L790.712 684.6 L791.271 684.6 L791.831 684.6 L792.39 684.6 L792.949 684.6 L793.508 684.6 L794.068 684.6 L794.627 684.6 L795.186 684.6 L795.745 684.6 L796.305 684.6 L796.864 684.6 L797.423 684.6 L797.982 684.6 L798.542 684.6 L799.101 684.6 L799.66 684.6 L800.219 684.6 L800.779 684.6 L801.338 684.6 L801.897 684.6 L802.456 684.6 L803.016 684.6 L803.575 684.6 L804.134 684.6 L804.693 684.6 L805.253 684.6 L805.812 684.6 L806.371 684.6 L806.931 684.6 L807.49 684.6 L808.049 684.6 L808.608 684.6 L809.168 684.6 L809.727 684.6 L810.286 684.6 L810.845 684.6 L811.405 684.6 L811.964 684.6 L812.523 684.6 L813.082 684.6 L813.642 684.6 L814.201 684.6 L814.76 684.6 L815.319 684.6 L815.879 684.6 L816.438 684.6 L816.997 684.6 L817.556 684.6 L818.116 684.6 L818.675 684.6 L819.234 684.6 L819.793 684.6 L820.353 684.6 L820.912 684.6 L821.471 684.6 L822.03 684.6 L822.59 684.6 L823.149 684.6 L823.708 684.6 L824.267 684.6 L824.827 684.6 L825.386 684.6 L825.945 684.6 L826.504 684.6 L827.064 684.6 L827.623 684.6 L828.182 684.6 L828.741 684.6 L829.301 684.6 L829.86 684.6 L830.419 684.6 L830.978 684.6 L831.538 684.6 L832.097 684.6 L832.656 684.6 L833.215 684.6 L833.775 684.6 L834.334 684.6 L834.893 684.6 L835.452 684.6 L836.012 684.6 L836.571 684.6 L837.13 684.6 L837.689 684.6 L838.249 684.6 L838.808 684.6 L839.367 684.6 L839.926 684.6 L840.486 684.6 L841.045 684.6 L841.604 684.6 L842.163 684.6 L842.723 684.6 L843.282 684.6 L843.841 684.6 L844.4 684.6 L844.96 684.6 L845.519 684.6 L846.078 684.6 L846.637 684.6 L847.197 684.6 L847.756 684.6 L848.315 684.6 L848.874 684.6 L849.434 684.6 L849.993 684.6 L850.552 684.6 L851.111 684.6 L851.671 684.6 L852.23 684.6 L852.789 684.6 L853.348 684.6 L853.908 684.6 L854.467 684.6 L855.026 684.6 L855.585 684.6 L856.145 684.6 L856.704 684.6 L857.263 684.6 L857.822 684.6 L858.382 684.6 L858.941 684.6 L859.5 684.6 L860.059 684.6 L860.619 684.6 L861.178 684.6 L861.737 684.6 L862.296 684.6 L862.856 684.6 L863.415 684.6 L863.974 684.6 L864.533 684.6 L865.093 684.6 L865.652 684.6 L866.211 684.6 L866.77 684.6 L867.33 684.6 L867.889 684.6 L868.448 684.6 L869.007 684.6 L869.567 684.6 L870.126 684.6 L870.685 684.6 L871.244 684.6 L871.804 684.6 L872.363 684.6 L872.922 684.6 L873.481 684.6 L874.041 684.6 L874.6 684.6 L875.159 684.6 L875.718 684.6 L876.278 684.6 L876.837 684.6 L877.396 684.6 L877.955 684.6 L878.515 684.6 L879.074 684.6 L879.633 684.6 L880.192 684.6 L880.752 684.6 L881.311 684.6 L881.87 684.6 L882.429 684.6 L882.989 684.6 L883.548 684.6 L884.107 684.6 L884.666 684.6 L885.226 684.6 L885.785 684.6 L886.344 684.6 L886.903 684.6 L887.463 684.6 L888.022 684.6 L888.581 684.6 L889.14 684.6 L889.7 684.6 L890.259 684.6 L890.818 684.6 L891.377 684.6 L891.937 684.6 L892.496 684.6 L893.055 684.6 L893.614 684.6 L894.174 684.6 L894.733 684.6 L895.292 684.6 L895.851 684.6 L896.411 684.6 L896.97 684.6 L897.529 684.6 L898.088 684.6 L898.648 684.6 L899.207 684.6 L899.766 684.6 L900.325 684.6 L900.885 684.6 L901.444 684.6 L902.003 684.6 L902.562 684.6 L903.122 684.6 L903.681 684.6 L904.24 684.6 L904.799 684.6 L905.359 684.6 L905.918 684.6 L906.477 684.6 L907.036 684.6 L907.596 684.6 L908.155 684.6 L908.714 684.6 L909.273 684.6 L909.833 684.6 L910.392 684.6 L910.951 684.6 L911.51 684.6 L912.07 684.6 L912.629 684.6 L913.188 684.6 L913.747 684.6 L914.307 684.6 L914.866 684.6 L915.425 684.6 L915.984 684.6 L916.544 684.6 L917.103 684.6 L917.662 684.6 L918.221 684.6 L918.781 684.6 L919.34 684.6 L919.899 684.6 L920.458 684.6 L921.018 684.6 L921.577 684.6 L922.136 684.6 L922.695 684.6 L923.255 684.6 L923.814 684.6 L924.373 684.6 L924.932 684.6 L925.492 684.6 L926.051 684.6 L926.61 684.6 L927.169 684.6 L927.729 684.6 L928.288 684.6 L928.847 684.6 L929.406 684.6 L929.966 684.6 L930.525 684.6 L931.084 684.6 L931.644 684.6 L932.203 684.6 L932.762 684.6 L933.321 684.6 L933.881 684.6 L934.44 684.6 L934.999 684.6 L935.558 684.6 L936.118 684.6 L936.677 684.6 L937.236 684.6 L937.795 684.6 L938.355 684.6 L938.914 684.6 L939.473 684.6 L940.032 684.6 L940.592 684.6 L941.151 684.6 L941.71 684.6 L942.269 684.6 L942.829 684.6 L943.388 684.6 L943.947 684.6 L944.506 684.6 L945.066 684.6 L945.625 684.6 L946.184 684.6 L946.743 684.6 L947.303 684.6 L947.862 684.6 L948.421 684.6 L948.98 684.6 L949.54 684.6 L950.099 684.6 L950.658 684.6 L951.217 684.6 L951.777 684.6 L952.336 684.6 L952.895 684.6 L953.454 684.6 L954.014 684.6 L954.573 684.6 L955.132 684.6 L955.691 684.6 L956.251 684.6 L956.81 684.6 L957.369 684.6 L957.928 684.6 L958.488 684.6 L959.047 684.6 L959.606 684.6 L960.165 684.6 L960.725 684.6 L961.284 684.6 L961.843 684.6 L962.402 684.6 L962.962 684.6 L963.521 684.6 L964.08 684.6 L964.639 684.6 L965.199 684.6 L965.758 684.6 L966.317 684.6 L966.876 684.6 L967.436 684.6 L967.995 684.6 L968.554 684.6 L969.113 684.6 L969.673 684.6 L970.232 684.6 L970.791 684.6 L971.35 684.6 L971.91 684.6 L972.469 684.6 L973.028 684.6 L973.587 684.6 L974.147 684.6 L974.706 684.6 L975.265 684.6 L975.824 684.6 L976.384 684.6 L976.943 684.6 L977.502 684.6 L978.061 684.6 L978.621 684.6 L979.18 684.6 L979.739 684.6 L980.298 684.6 L980.858 684.6 L981.417 684.6 L981.976 684.6 L982.535 684.6 L983.095 684.6 L983.654 684.6 L984.213 684.6 L984.772 684.6 L985.332 684.6 L985.891 684.6 L986.45 684.6 L987.009 684.6 L987.569 684.6 L988.128 684.6 L988.687 684.6 L989.246 684.6 L989.806 684.6 L990.365 684.6 L990.924 684.6 L991.483 684.6 L992.043 684.6 L992.602 684.6 L993.161 684.6 L993.72 684.6 L994.28 684.6 L994.839 684.6 L995.398 684.6 L995.957 684.6 L996.517 684.6 L997.076 684.6 L997.635 684.6 L998.194 684.6 L998.754 684.6 L999.313 684.6 L999.872 684.6 L1000.43 684.6 L1000.99 684.6 L1001.55 684.6 L1002.11 684.6 L1002.67 684.6 L1003.23 684.6 L1003.79 684.6 L1004.35 684.6 L1004.91 684.6 L1005.46 684.6 L1006.02 684.6 L1006.58 684.6 L1007.14 684.6 L1007.7 684.6 L1008.26 684.6 L1008.82 684.6 L1009.38 684.6 L1009.94 684.6 L1010.5 684.6 L1011.06 684.6 L1011.62 684.6 L1012.18 684.6 L1012.73 684.6 L1013.29 684.6 L1013.85 684.6 L1014.41 684.6 L1014.97 684.6 L1015.53 684.6 L1016.09 684.6 L1016.65 684.6 L1017.21 684.6 L1017.77 684.6 L1018.33 684.6 L1018.89 684.6 L1019.45 684.6 L1020.01 684.6 L1020.56 684.6 L1021.12 684.6 L1021.68 684.6 L1022.24 684.6 L1022.8 684.6 L1023.36 684.6 L1023.92 684.6 L1024.48 684.6 L1025.04 684.6 L1025.6 684.6 L1026.16 684.6 L1026.72 684.6 L1027.28 684.6 L1027.83 684.6 L1028.39 684.6 L1028.95 684.6 L1029.51 684.6 L1030.07 684.6 L1030.63 684.6 L1031.19 684.6 L1031.75 684.6 L1032.31 684.6 L1032.87 684.6 L1033.43 684.6 L1033.99 684.6 L1034.55 684.6 L1035.1 684.6 L1035.66 684.6 L1036.22 684.6 L1036.78 684.6 L1037.34 684.6 L1037.9 684.6 L1038.46 684.6 L1039.02 684.6 L1039.58 684.6 L1040.14 684.6 L1040.7 684.6 L1041.26 684.6 L1041.82 684.6 L1042.38 684.6 L1042.93 684.6 L1043.49 684.6 L1044.05 684.6 L1044.61 684.6 L1045.17 684.6 L1045.73 684.6 L1046.29 684.6 L1046.85 684.6 L1047.41 684.6 L1047.97 684.6 L1048.53 684.6 L1049.09 684.6 L1049.65 684.6 L1050.2 684.6 L1050.76 684.6 L1051.32 684.6 L1051.88 684.6 L1052.44 684.6 L1053 684.6 L1053.56 684.6 L1054.12 684.6 L1054.68 684.6 L1055.24 684.6 L1055.8 684.6 L1056.36 684.6 L1056.92 684.6 L1057.48 684.6 L1058.03 684.6 L1058.59 684.6 L1059.15 684.6 L1059.71 684.6 L1060.27 684.6 L1060.83 684.6 L1061.39 684.6 L1061.95 684.6 L1062.51 684.6 L1063.07 684.6 L1063.63 684.6 L1064.19 684.6 L1064.75 684.6 L1065.3 684.6 L1065.86 684.6 L1066.42 684.6 L1066.98 684.6 L1067.54 684.6 L1068.1 684.6 L1068.66 684.6 L1069.22 684.6 L1069.78 684.6 L1070.34 684.6 L1070.9 684.6 L1071.46 684.6 L1072.02 684.6 L1072.57 684.6 L1073.13 684.6 L1073.69 684.6 L1074.25 684.6 L1074.81 684.6 L1075.37 684.6 L1075.93 684.6 L1076.49 684.6 L1077.05 684.6 L1077.61 684.6 L1078.17 684.6 L1078.73 684.6 L1079.29 684.6 L1079.85 684.6 L1080.4 684.6 L1080.96 684.6 L1081.52 684.6 L1082.08 684.6 L1082.64 684.6 L1083.2 684.6 L1083.76 684.6 L1084.32 684.6 L1084.88 684.6 L1085.44 684.6 L1086 684.6 L1086.56 684.6 L1087.12 684.6 L1087.67 684.6 L1088.23 684.6 L1088.79 684.6 L1089.35 684.6 L1089.91 684.6 L1090.47 684.6 L1091.03 684.6 L1091.59 684.6 L1092.15 684.6 L1092.71 684.6 L1093.27 684.6 L1093.83 684.6 L1094.39 684.6 L1094.94 684.6 L1095.5 684.6 L1096.06 684.6 L1096.62 684.6 L1097.18 684.6 L1097.74 684.6 L1098.3 684.6 L1098.86 684.6 L1099.42 684.6 L1099.98 684.6 L1100.54 684.6 L1101.1 684.6 L1101.66 684.6 L1102.22 684.6 L1102.77 684.6 L1103.33 684.6 L1103.89 684.6 L1104.45 684.6 L1105.01 684.6 L1105.57 684.6 L1106.13 684.6 L1106.69 684.6 L1107.25 684.6 L1107.81 684.6 L1108.37 684.6 L1108.93 684.6 L1109.49 684.6 L1110.04 684.6 L1110.6 684.6 L1111.16 684.6 L1111.72 684.6 L1112.28 684.6 L1112.84 684.6 L1113.4 684.6 L1113.96 684.6 L1114.52 684.6 L1115.08 684.6 L1115.64 684.6 L1116.2 684.6 L1116.76 684.6 L1117.31 684.6 L1117.87 684.6 L1118.43 684.6 L1118.99 684.6 L1119.55 684.6 L1120.11 684.6 L1120.67 684.6 L1121.23 684.6 L1121.79 684.6 L1122.35 684.6 L1122.91 684.6 L1123.47 684.6 L1124.03 684.6 L1124.59 684.6 L1125.14 684.6 L1125.7 684.6 L1126.26 684.6 L1126.82 684.6 L1127.38 684.6 L1127.94 684.6 L1128.5 684.6 L1129.06 684.6 L1129.62 684.6 L1130.18 684.6 L1130.74 684.6 L1131.3 684.6 L1131.86 684.6 L1132.41 684.6 L1132.97 684.6 L1133.53 684.6 L1134.09 684.6 L1134.65 684.6 L1135.21 684.6 L1135.77 684.6 L1136.33 684.6 L1136.89 684.6 L1137.45 684.6 L1138.01 684.6 L1138.57 684.6 L1139.13 684.6 L1139.68 684.6 L1140.24 684.6 L1140.8 684.6 L1141.36 684.6 L1141.92 684.6 L1142.48 684.6 L1143.04 684.6 L1143.6 684.6 L1144.16 684.6 L1144.72 684.6 L1145.28 684.6 L1145.84 684.6 L1146.4 684.6 L1146.96 684.6 L1147.51 684.6 L1148.07 684.6 L1148.63 684.6 L1149.19 684.6 L1149.75 684.6 L1150.31 684.6 L1150.87 684.6 L1151.43 684.6 L1151.99 684.6 L1152.55 684.6 L1153.11 684.6 L1153.67 684.6 L1154.23 684.6 L1154.78 684.6 L1155.34 684.6 L1155.9 684.6 L1156.46 684.6 L1157.02 684.6 L1157.58 684.6 L1158.14 684.6 L1158.7 684.6 L1159.26 684.6 L1159.82 684.6 L1160.38 684.6 L1160.94 684.6 L1161.5 684.6 L1162.05 684.6 L1162.61 684.6 L1163.17 684.6 L1163.73 684.6 L1164.29 684.6 L1164.85 684.6 L1165.41 684.6 L1165.97 684.6 L1166.53 684.6 L1167.09 684.6 L1167.65 684.6 L1168.21 684.6 L1168.77 684.6 L1169.33 684.6 L1169.88 684.6 L1170.44 684.6 L1171 684.6 L1171.56 684.6 L1172.12 684.6 L1172.68 684.6 L1173.24 684.6 L1173.8 684.6 L1174.36 684.6 L1174.92 684.6 L1175.48 684.6 L1176.04 684.6 L1176.6 684.6 L1177.15 684.6 L1177.71 684.6 L1178.27 684.6 L1178.83 684.6 L1179.39 684.6 L1179.95 684.6 L1180.51 684.6 L1181.07 684.6 L1181.63 684.6 L1182.19 684.6 L1182.75 684.6 L1183.31 684.6 L1183.87 684.6 L1184.43 684.6 L1184.98 684.6 L1185.54 684.6 L1186.1 684.6 L1186.66 684.6 L1187.22 684.6 L1187.78 684.6 L1188.34 684.6 L1188.9 684.6 L1189.46 684.6 L1190.02 684.6 L1190.58 684.6 L1191.14 684.6 L1191.7 684.6 L1192.25 684.6 L1192.81 684.6 L1193.37 684.6 L1193.93 684.6 L1194.49 684.6 L1195.05 684.6 L1195.61 684.6 L1196.17 684.6 L1196.73 684.6 L1197.29 684.6 L1197.85 684.6 L1198.41 684.6 L1198.97 684.6 L1199.52 684.6 L1200.08 684.6 L1200.64 684.6 L1201.2 684.6 L1201.76 684.6 L1202.32 684.6 L1202.88 684.6 L1203.44 684.6 L1204 684.6 L1204.56 684.6 L1205.12 684.6 L1205.68 684.6 L1206.24 684.6 L1206.8 684.6 L1207.35 684.6 L1207.91 684.6 L1208.47 684.6 L1209.03 684.6 L1209.59 684.6 L1210.15 684.6 L1210.71 684.6 L1211.27 684.6 L1211.83 684.6 L1212.39 684.6 L1212.95 684.6 L1213.51 684.6 L1214.07 684.6 L1214.62 684.6 L1215.18 684.6 L1215.74 684.6 L1216.3 684.6 L1216.86 684.6 L1217.42 684.6 L1217.98 684.6 L1218.54 684.6 L1219.1 684.6 L1219.66 684.6 L1220.22 684.6 L1220.78 684.6 L1221.34 684.6 L1221.89 684.6 L1222.45 684.6 L1223.01 684.6 L1223.57 684.6 L1224.13 684.6 L1224.69 684.6 L1225.25 684.6 L1225.81 684.6 L1226.37 684.6 L1226.93 684.6 L1227.49 684.6 L1228.05 684.6 L1228.61 684.6 L1229.17 684.6 L1229.72 684.6 L1230.28 684.6 L1230.84 684.6 L1231.4 684.6 L1231.96 684.6 L1232.52 684.6 L1233.08 684.6 L1233.64 684.6 L1234.2 684.6 L1234.76 684.6 L1235.32 684.6 L1235.88 684.6 L1236.44 684.6 L1236.99 684.6 L1237.55 684.6 L1238.11 684.6 L1238.67 684.6 L1239.23 684.6 L1239.79 684.6 L1240.35 684.6 L1240.91 684.6 L1241.47 684.6 L1242.03 684.6 L1242.59 684.6 L1243.15 684.6 L1243.71 684.6 L1244.26 684.6 L1244.82 684.6 L1245.38 684.6 L1245.94 684.6 L1246.5 684.6 L1247.06 684.6 L1247.62 684.6 L1248.18 684.6 L1248.74 684.6 L1249.3 684.6 L1249.86 684.6 L1250.42 684.6 L1250.98 684.6 L1251.54 684.6 L1252.09 684.6 L1252.65 684.6 L1253.21 684.6 L1253.77 684.6 L1254.33 684.6 L1254.89 684.6 L1255.45 684.6 L1256.01 684.6 L1256.57 684.6 L1257.13 684.6 L1257.69 684.6 L1258.25 684.6 L1258.81 684.6 L1259.36 684.6 L1259.92 684.6 L1260.48 684.6 L1261.04 684.6 L1261.6 684.6 L1262.16 684.6 L1262.72 684.6 L1263.28 684.6 L1263.84 684.6 L1264.4 684.6 L1264.96 684.6 L1265.52 684.6 L1266.08 684.6 L1266.63 684.6 L1267.19 684.6 L1267.75 684.6 L1268.31 684.6 L1268.87 684.6 L1269.43 684.6 L1269.99 684.6 L1270.55 684.6 L1271.11 684.6 L1271.67 684.6 L1272.23 684.6 L1272.79 684.6 L1273.35 684.6 L1273.91 684.6 L1274.46 684.6 L1275.02 684.6 L1275.58 684.6 L1276.14 684.6 L1276.7 684.6 L1277.26 684.6 L1277.82 684.6 L1278.38 684.6 L1278.94 684.6 L1279.5 684.6 L1280.06 684.6 L1280.62 684.6 L1281.18 684.6 L1281.73 684.6 L1282.29 684.6 L1282.85 684.6 L1283.41 684.6 L1283.97 684.6 L1284.53 684.6 L1285.09 684.6 L1285.65 684.6 L1286.21 684.6 L1286.77 684.6 L1287.33 684.6 L1287.89 684.6 L1288.45 684.6 L1289 684.6 L1289.56 684.6 L1290.12 684.6 L1290.68 684.6 L1291.24 684.6 L1291.8 684.6 L1292.36 684.6 L1292.92 684.6 L1293.48 684.6 L1294.04 684.6 L1294.6 684.6 L1295.16 684.6 L1295.72 684.6 L1296.28 684.6 L1296.83 684.6 L1297.39 684.6 L1297.95 684.6 L1298.51 684.6 L1299.07 684.6 L1299.63 684.6 L1300.19 684.6 L1300.75 684.6 L1301.31 684.6 L1301.87 684.6 L1302.43 684.6 L1302.99 684.6 L1303.55 684.6 L1304.1 684.6 L1304.66 684.6 L1305.22 684.6 L1305.78 684.6 L1306.34 684.6 L1306.9 684.6 L1307.46 684.6 L1308.02 684.6 L1308.58 684.6 L1309.14 684.6 L1309.7 684.6 L1310.26 684.6 L1310.82 684.6 L1311.38 684.6 L1311.93 684.6 L1312.49 684.6 L1313.05 684.6 L1313.61 684.6 L1314.17 684.6 L1314.73 684.6 L1315.29 684.6 L1315.85 684.6 L1316.41 684.6 L1316.97 684.6 L1317.53 684.6 L1318.09 684.6 L1318.65 684.6 L1319.2 684.6 L1319.76 684.6 L1320.32 684.6 L1320.88 684.6 L1321.44 684.6 L1322 684.6 L1322.56 684.6 L1323.12 684.6 L1323.68 684.6 L1324.24 684.6 L1324.8 684.6 L1325.36 684.6 L1325.92 684.6 L1326.47 684.6 L1327.03 684.6 L1327.59 684.6 L1328.15 684.6 L1328.71 684.6 L1329.27 684.6 L1329.83 684.6 L1330.39 684.6 L1330.95 684.6 L1331.51 684.6 L1332.07 684.6 L1332.63 684.6 L1333.19 684.6 L1333.75 684.6 L1334.3 684.6 L1334.86 684.6 L1335.42 684.6 L1335.98 684.6 L1336.54 684.6 L1337.1 684.6 L1337.66 684.6 L1338.22 684.6 L1338.78 684.6 L1339.34 684.6 L1339.9 684.6 L1340.46 684.6 L1341.02 684.6 L1341.57 684.6 L1342.13 684.6 L1342.69 684.6 L1343.25 684.6 L1343.81 684.6 L1344.37 684.6 L1344.93 684.6 L1345.49 684.6 L1346.05 684.6 L1346.61 684.6 L1347.17 684.6 L1347.73 684.6 L1348.29 684.6 L1348.84 684.6 L1349.4 684.6 L1349.96 684.6 L1350.52 684.6 L1351.08 684.6 L1351.64 684.6 L1352.2 684.6 L1352.76 684.6 L1353.32 684.6 L1353.88 684.6 L1354.44 684.6 L1355 684.6 L1355.56 684.6 L1356.12 684.6 L1356.67 684.6 L1357.23 684.6 L1357.79 684.6 L1358.35 684.6 L1358.91 684.6 L1359.47 684.6 L1360.03 684.6 L1360.59 684.6 L1361.15 684.6 L1361.71 684.6 L1362.27 684.6 L1362.83 684.6 L1363.39 684.6 L1363.94 684.6 L1364.5 684.6 L1365.06 684.6 L1365.62 684.6 L1366.18 684.6 L1366.74 684.6 L1367.3 684.6 L1367.86 684.6 L1368.42 684.6 L1368.98 684.6 L1369.54 684.6 L1370.1 684.6 L1370.66 684.6 L1371.21 684.6 L1371.77 684.6 L1372.33 684.6 L1372.89 684.6 L1373.45 684.6 L1374.01 684.6 L1374.57 684.6 L1375.13 684.6 L1375.69 684.6 L1376.25 684.6 L1376.81 684.6 L1377.37 684.6 L1377.93 684.6 L1378.49 684.6 L1379.04 684.6 L1379.6 684.6 L1380.16 684.6 L1380.72 684.6 L1381.28 684.6 L1381.84 684.6 L1382.4 684.6 L1382.96 684.6 L1383.52 684.6 L1384.08 684.6 L1384.64 684.6 L1385.2 684.6 L1385.76 684.6 L1386.31 684.6 L1386.87 684.6 L1387.43 684.6 L1387.99 684.6 L1388.55 684.6 L1389.11 684.6 L1389.67 684.6 L1390.23 684.6 L1390.79 684.6 L1391.35 684.6 L1391.91 684.6 L1392.47 684.6 L1393.03 684.6 L1393.58 684.6 L1394.14 684.6 L1394.7 684.6 L1395.26 684.6 L1395.82 684.6 L1396.38 684.6 L1396.94 684.6 L1397.5 684.6 L1398.06 684.6 L1398.62 684.6 L1399.18 684.6 L1399.74 684.6 L1400.3 684.6 L1400.86 684.6 L1401.41 684.6 L1401.97 684.6 L1402.53 684.6 L1403.09 684.6 L1403.65 684.6 L1404.21 684.6 L1404.77 684.6 L1405.33 684.6 L1405.89 684.6 L1406.45 684.6 L1407.01 684.6 L1407.57 684.6 L1408.13 684.6 L1408.68 684.6 L1409.24 684.6 L1409.8 684.6 L1410.36 684.6 L1410.92 684.6 L1411.48 684.6 L1412.04 684.6 L1412.6 684.6 L1413.16 684.6 L1413.72 684.6 L1414.28 684.6 L1414.84 684.6 L1415.4 684.6 L1415.95 684.6 L1416.51 684.6 L1417.07 684.6 L1417.63 684.6 L1418.19 684.6 L1418.75 684.6 L1419.31 684.6 L1419.87 684.6 L1420.43 684.6 L1420.99 684.6 L1421.55 684.6 L1422.11 684.6 L1422.67 684.6 L1423.23 684.6 L1423.78 684.6 L1424.34 684.6 L1424.9 684.6 L1425.46 684.6 L1426.02 684.6 L1426.58 684.6 L1427.14 684.6 L1427.7 684.6 L1428.26 684.6 L1428.82 684.6 L1429.38 684.6 L1429.94 684.6 L1430.5 684.6 L1431.05 684.6 L1431.61 684.6 L1432.17 684.6 L1432.73 684.6 L1433.29 684.6 L1433.85 684.6 L1434.41 684.6 L1434.97 684.6 L1435.53 684.6 L1436.09 684.6 L1436.65 684.6 L1437.21 684.6 L1437.77 684.6 L1438.33 684.6 L1438.88 684.6 L1439.44 684.6 L1440 684.6 L1440.56 684.6 L1441.12 684.6 L1441.68 684.6 L1442.24 684.6 L1442.8 684.6 L1443.36 684.6 L1443.92 684.6 L1444.48 684.6 L1445.04 684.6 L1445.6 684.6 L1446.15 684.6 L1446.71 684.6 L1447.27 684.6 L1447.83 684.6 L1448.39 684.6 L1448.95 684.6 L1449.51 684.6 L1450.07 684.6 L1450.63 684.6 L1451.19 684.6 L1451.75 684.6 L1452.31 684.6 L1452.87 684.6 L1453.42 684.6 L1453.98 684.6 L1454.54 684.6 L1455.1 684.6 L1455.66 684.6 L1456.22 684.6 L1456.78 684.6 L1457.34 684.6 L1457.9 684.6 L1458.46 684.6 L1459.02 684.6 L1459.58 684.6 L1460.14 684.6 L1460.7 684.6 L1461.25 684.6 L1461.81 684.6 L1462.37 684.6 L1462.93 684.6 L1463.49 684.6 L1464.05 684.6 L1464.61 684.6 L1465.17 684.6 L1465.73 684.6 L1466.29 684.6 L1466.85 684.6 L1467.41 684.6 L1467.97 684.6 L1468.52 684.6 L1469.08 684.6 L1469.64 684.6 L1470.2 684.6 L1470.76 684.6 L1471.32 684.6 L1471.88 684.6 L1472.44 684.6 L1473 684.6 L1473.56 684.6 L1474.12 684.6 L1474.68 684.6 L1475.24 684.6 L1475.79 684.6 L1476.35 684.6 L1476.91 684.6 L1477.47 684.6 L1478.03 684.6 L1478.59 684.6 L1479.15 684.6 L1479.71 684.6 L1480.27 684.6 L1480.83 684.6 L1481.39 684.6 L1481.95 684.6 L1482.51 684.6 L1483.07 684.6 L1483.62 684.6 L1484.18 684.6 L1484.74 684.6 L1485.3 684.6 L1485.86 684.6 L1486.42 684.6 L1486.98 684.6 L1487.54 684.6 L1488.1 684.6 L1488.66 684.6 L1489.22 684.6 L1489.78 684.6 L1490.34 684.6 L1490.89 684.6 L1491.45 684.6 L1492.01 684.6 L1492.57 684.6 L1493.13 684.6 L1493.69 684.6 L1494.25 684.6 L1494.81 684.6 L1495.37 684.6 L1495.93 684.6 L1496.49 684.6 L1497.05 684.6 L1497.61 684.6 L1498.16 684.6 L1498.72 684.6 L1499.28 684.6 L1499.84 684.6 L1500.4 684.6 L1500.96 684.6 L1501.52 684.6 L1502.08 684.6 L1502.64 684.6 L1503.2 684.6 L1503.76 684.6 L1504.32 684.6 L1504.88 684.6 L1505.44 684.6 L1505.99 684.6 L1506.55 684.6 L1507.11 684.6 L1507.67 684.6 L1508.23 684.6 L1508.79 684.6 L1509.35 684.6 L1509.91 684.6 L1510.47 684.6 L1511.03 684.6 L1511.59 684.6 L1512.15 684.6 L1512.71 684.6 L1513.26 684.6 L1513.82 684.6 L1514.38 684.6 L1514.94 684.6 L1515.5 684.6 L1516.06 684.6 L1516.62 684.6 L1517.18 684.6 L1517.74 684.6 L1518.3 684.6 L1518.86 684.6 L1519.42 684.6 L1519.98 684.6 L1520.53 684.6 L1521.09 684.6 L1521.65 684.6 L1522.21 684.6 L1522.77 684.6 L1523.33 684.6 L1523.89 684.6 L1524.45 684.6 L1525.01 684.6 L1525.57 684.6 L1526.13 684.6 L1526.69 684.6 L1527.25 684.6 L1527.81 684.6 L1528.36 684.6 L1528.92 684.6 L1529.48 684.6 L1530.04 684.6 L1530.6 684.6 L1531.16 684.6 L1531.72 684.6 L1532.28 684.6 L1532.84 684.6 L1533.4 684.6 L1533.96 684.6 L1534.52 684.6 L1535.08 684.6 L1535.63 684.6 L1536.19 684.6 L1536.75 684.6 L1537.31 684.6 L1537.87 684.6 L1538.43 684.6 L1538.99 684.6 L1539.55 684.6 L1540.11 684.6 L1540.67 684.6 L1541.23 684.6 L1541.79 684.6 L1542.35 684.6 L1542.9 684.6 L1543.46 684.6 L1544.02 684.6 L1544.58 684.6 L1545.14 684.6 L1545.7 684.6 L1546.26 684.6 L1546.82 684.6 L1547.38 684.6 L1547.94 684.6 L1548.5 684.6 L1549.06 684.6 L1549.62 684.6 L1550.18 684.6 L1550.73 684.6 L1551.29 684.6 L1551.85 684.6 L1552.41 684.6 L1552.97 684.6 L1553.53 684.6 L1554.09 684.6 L1554.65 684.6 L1555.21 684.6 L1555.77 684.6 L1556.33 684.6 L1556.89 684.6 L1557.45 684.6 L1558 684.6 L1558.56 684.6 L1559.12 684.6 L1559.68 684.6 L1560.24 684.6 L1560.8 684.6 L1561.36 684.6 L1561.92 684.6 L1562.48 684.6 L1563.04 684.6 L1563.6 684.6 L1564.16 684.6 L1564.72 684.6 L1565.28 684.6 L1565.83 684.6 L1566.39 684.6 L1566.95 684.6 L1567.51 684.6 L1568.07 684.6 L1568.63 684.6 L1569.19 684.6 L1569.75 684.6 L1570.31 684.6 L1570.87 684.6 L1571.43 684.6 L1571.99 684.6 L1572.55 684.6 L1573.1 684.6 L1573.66 684.6 L1574.22 684.6 L1574.78 684.6 L1575.34 684.6 L1575.9 684.6 L1576.46 684.6 L1577.02 684.6 L1577.58 684.6 L1578.14 684.6 L1578.7 684.6 L1579.26 684.6 L1579.82 684.6 L1580.37 684.6 L1580.93 684.6 L1581.49 684.6 L1582.05 684.6 L1582.61 684.6 L1583.17 684.6 L1583.73 684.6 L1584.29 684.6 L1584.85 684.6 L1585.41 684.6 L1585.97 684.6 L1586.53 684.6 L1587.09 684.6 L1587.65 684.6 L1588.2 684.6 L1588.76 684.6 L1589.32 684.6 L1589.88 684.6 L1590.44 684.6 L1591 684.6 L1591.56 684.6 L1592.12 684.6 L1592.68 684.6 L1593.24 684.6 L1593.8 684.6 L1594.36 684.6 L1594.92 684.6 L1595.47 684.6 L1596.03 684.6 L1596.59 684.6 L1597.15 684.6 L1597.71 684.6 L1598.27 684.6 L1598.83 684.6 L1599.39 684.6 L1599.95 684.6 L1600.51 684.6 L1601.07 684.6 L1601.63 684.6 L1602.19 684.6 L1602.74 684.6 L1603.3 684.6 L1603.86 684.6 L1604.42 684.6 L1604.98 684.6 L1605.54 684.6 L1606.1 684.6 L1606.66 684.6 L1607.22 684.6 L1607.78 684.6 L1608.34 684.6 L1608.9 684.6 L1609.46 684.6 L1610.02 684.6 L1610.57 684.6 L1611.13 684.6 L1611.69 684.6 L1612.25 684.6 L1612.81 684.6 L1613.37 684.6 L1613.93 684.6 L1614.49 684.6 L1615.05 684.6 L1615.61 684.6 L1616.17 684.6 L1616.73 684.6 L1617.29 684.6 L1617.84 684.6 L1618.4 684.6 L1618.96 684.6 L1619.52 684.6 L1620.08 684.6 L1620.64 684.6 L1621.2 684.6 L1621.76 684.6 L1622.32 684.6 L1622.88 684.6 L1623.44 684.6 L1624 684.6 L1624.56 684.6 L1625.11 684.6 L1625.67 684.6 L1626.23 684.6 L1626.79 684.6 L1627.35 684.6 L1627.91 684.6 L1628.47 684.6 L1629.03 684.6 L1629.59 684.6 L1630.15 684.6 L1630.71 684.6 L1631.27 684.6 L1631.83 684.6 L1632.39 684.6 L1632.94 684.6 L1633.5 684.6 L1634.06 684.6 L1634.62 684.6 L1635.18 684.6 L1635.74 684.6 L1636.3 684.6 L1636.86 684.6 L1637.42 684.6 L1637.98 684.6 L1638.54 684.6 L1639.1 684.6 L1639.66 684.6 L1640.21 684.6 L1640.77 684.6 L1641.33 684.6 L1641.89 684.6 L1642.45 684.6 L1643.01 684.6 L1643.57 684.6 L1644.13 684.6 L1644.69 684.6 L1645.25 684.6 L1645.81 684.6 L1646.37 684.6 L1646.93 684.6 L1647.48 684.6 L1648.04 684.6 L1648.6 684.6 L1649.16 684.6 L1649.72 684.6 L1650.28 684.6 L1650.84 684.6 L1651.4 684.6 L1651.96 684.6 L1652.52 684.6 L1653.08 684.6 L1653.64 684.6 L1654.2 684.6 L1654.76 684.6 L1655.31 684.6 L1655.87 684.6 L1656.43 684.6 L1656.99 684.6 L1657.55 684.6 L1658.11 684.6 L1658.67 684.6 L1659.23 684.6 L1659.79 684.6 L1660.35 684.6 L1660.91 684.6 L1661.47 684.6 L1662.03 684.6 L1662.58 684.6 L1663.14 684.6 L1663.7 684.6 L1664.26 684.6 L1664.82 684.6 L1665.38 684.6 L1665.94 684.6 L1666.5 684.6 L1667.06 684.6 L1667.62 684.6 L1668.18 684.6 L1668.74 684.6 L1669.3 684.6 L1669.85 684.6 L1670.41 684.6 L1670.97 684.6 L1671.53 684.6 L1672.09 684.6 L1672.65 684.6 L1673.21 684.6 L1673.77 684.6 L1674.33 684.6 L1674.89 684.6 L1675.45 684.6 L1676.01 684.6 L1676.57 684.6 L1677.13 684.6 L1677.68 684.6 L1678.24 684.6 L1678.8 684.6 L1679.36 684.6 L1679.92 684.6 L1680.48 684.6 L1681.04 684.6 L1681.6 684.6 L1682.16 684.6 L1682.72 684.6 L1683.28 684.6 L1683.84 684.6 L1684.4 684.6 L1684.95 684.6 L1685.51 684.6 L1686.07 684.6 L1686.63 684.6 L1687.19 684.6 L1687.75 684.6 L1688.31 684.6 L1688.87 684.6 L1689.43 684.6 L1689.99 684.6 L1690.55 684.6 L1691.11 684.6 L1691.67 684.6 L1692.23 684.6 L1692.78 684.6 L1693.34 684.6 L1693.9 684.6 L1694.46 684.6 L1695.02 684.6 L1695.58 684.6 L1696.14 684.6 L1696.7 684.6 L1697.26 684.6 L1697.82 684.6 L1698.38 684.6 L1698.94 684.6 L1699.5 684.6 L1700.05 684.6 L1700.61 684.6 L1701.17 684.6 L1701.73 684.6 L1702.29 684.6 L1702.85 684.6 L1703.41 684.6 L1703.97 684.6 L1704.53 684.6 L1705.09 684.6 L1705.65 684.6 L1706.21 684.6 L1706.77 684.6 L1707.32 684.6 L1707.88 684.6 L1708.44 684.6 L1709 684.6 L1709.56 684.6 L1710.12 684.6 L1710.68 684.6 L1711.24 684.6 L1711.8 684.6 L1712.36 684.6 L1712.92 684.6 L1713.48 684.6 L1714.04 684.6 L1714.6 684.6 L1715.15 684.6 L1715.71 684.6 L1716.27 684.6 L1716.83 684.6 L1717.39 684.6 L1717.95 684.6 L1718.51 684.6 L1719.07 684.6 L1719.63 684.6 L1720.19 684.6 L1720.75 684.6 L1721.31 684.6 L1721.87 684.6 L1722.42 684.6 L1722.98 684.6 L1723.54 684.6 L1724.1 684.6 L1724.66 684.6 L1725.22 684.6 L1725.78 684.6 L1726.34 684.6 L1726.9 684.6 L1727.46 684.6 L1728.02 684.6 L1728.58 684.6 L1729.14 684.6 L1729.69 684.6 L1730.25 684.6 L1730.81 684.6 L1731.37 684.6 L1731.93 684.6 L1732.49 684.6 L1733.05 684.6 L1733.61 684.6 L1734.17 684.6 L1734.73 684.6 L1735.29 684.6 L1735.85 684.6 L1736.41 684.6 L1736.97 684.6 L1737.52 684.6 L1738.08 684.6 L1738.64 684.6 L1739.2 684.6 L1739.76 684.6 L1740.32 684.6 L1740.88 684.6 L1741.44 684.6 L1742 684.6 L1742.56 684.6 L1743.12 684.6 L1743.68 684.6 L1744.24 684.6 L1744.79 684.6 L1745.35 684.6 L1745.91 684.6 L1746.47 684.6 L1747.03 684.6 L1747.59 684.6 L1748.15 684.6 L1748.71 684.6 L1749.27 684.6 L1749.83 684.6 L1750.39 684.6 L1750.95 684.6 L1751.51 684.6 L1752.06 684.6 L1752.62 684.6 L1753.18 684.6 L1753.74 684.6 L1754.3 684.6 L1754.86 684.6 L1755.42 684.6 L1755.98 684.6 L1756.54 684.6 L1757.1 684.6 L1757.66 684.6 L1758.22 684.6 L1758.78 684.6 L1759.34 684.6 L1759.89 684.6 L1760.45 684.6 L1761.01 684.6 L1761.57 684.6 L1762.13 684.6 L1762.69 684.6 L1763.25 684.6 L1763.81 684.6 L1764.37 684.6 L1764.93 684.6 L1765.49 684.6 L1766.05 684.6 L1766.61 684.6 L1767.16 684.6 L1767.72 684.6 L1768.28 684.6 L1768.84 684.6 L1769.4 684.6 L1769.96 684.6 L1770.52 684.6 L1771.08 684.6 L1771.64 684.6 L1772.2 684.6 L1772.76 684.6 L1773.32 684.6 L1773.88 684.6 L1774.43 684.6 L1774.99 684.6 L1775.55 684.6 L1776.11 684.6 L1776.67 684.6 L1777.23 684.6 L1777.79 684.6 L1778.35 684.6 L1778.91 684.6 L1779.47 684.6 L1780.03 684.6 L1780.59 684.6 L1781.15 684.6 L1781.71 684.6 L1782.26 684.6 L1782.82 684.6 L1783.38 684.6 L1783.94 684.6 L1784.5 684.6 L1785.06 684.6 L1785.62 684.6 L1786.18 684.6 L1786.74 684.6 L1787.3 684.6 L1787.86 684.6 L1788.42 684.6 L1788.98 684.6 L1789.53 684.6 L1790.09 684.6 L1790.65 684.6 L1791.21 684.6 L1791.77 684.6 L1792.33 684.6 L1792.89 684.6 L1793.45 684.6 L1794.01 684.6 L1794.57 684.6 L1795.13 684.6 L1795.69 684.6 L1796.25 684.6 L1796.8 684.6 L1797.36 684.6 L1797.92 684.6 L1798.48 684.6 L1799.04 684.6 L1799.6 684.6 L1800.16 684.6 L1800.72 684.6 L1801.28 684.6 L1801.84 684.6 L1802.4 684.6 L1802.96 684.6 L1803.52 684.6 L1804.08 684.6 L1804.63 684.6 L1805.19 684.6 L1805.75 684.6 L1806.31 684.6 L1806.87 684.6 L1807.43 684.6 L1807.99 684.6 L1808.55 684.6 L1809.11 684.6 L1809.67 684.6 L1810.23 684.6 L1810.79 684.6 L1811.35 684.6 L1811.9 684.6 L1812.46 684.6 L1813.02 684.6 L1813.58 684.6 L1814.14 684.6 L1814.7 684.6 L1815.26 684.6 L1815.82 684.6 L1816.38 684.6 L1816.94 684.6 L1817.5 684.6 L1818.06 684.6 L1818.62 684.6 L1819.18 684.6 L1819.73 684.6 L1820.29 684.6 L1820.85 684.6 L1821.41 684.6 L1821.97 684.6 L1822.53 684.6 L1823.09 684.6 L1823.65 684.6 L1824.21 684.6 L1824.77 684.6 L1825.33 684.6 L1825.89 684.6 L1826.45 684.6 L1827 684.6 L1827.56 684.6 L1828.12 684.6 L1828.68 684.6 L1829.24 684.6 L1829.8 684.6 L1830.36 684.6 L1830.92 684.6 L1831.48 684.6 L1832.04 684.6 L1832.6 684.6 L1833.16 684.6 L1833.72 684.6 L1834.27 684.6 L1834.83 684.6 L1835.39 684.6 L1835.95 684.6 L1836.51 684.6 L1837.07 684.6 L1837.63 684.6 L1838.19 684.6 L1838.19 682.771 L1837.63 682.771 L1837.07 682.771 L1836.51 682.771 L1835.95 682.771 L1835.39 682.771 L1834.83 682.771 L1834.27 682.771 L1833.72 682.771 L1833.16 682.771 L1832.6 682.771 L1832.04 682.771 L1831.48 682.771 L1830.92 682.771 L1830.36 682.771 L1829.8 682.771 L1829.24 682.771 L1828.68 682.771 L1828.12 682.771 L1827.56 682.771 L1827 682.771 L1826.45 682.771 L1825.89 682.771 L1825.33 682.771 L1824.77 682.771 L1824.21 682.771 L1823.65 682.771 L1823.09 682.771 L1822.53 682.771 L1821.97 682.771 L1821.41 682.771 L1820.85 682.771 L1820.29 682.771 L1819.73 682.771 L1819.18 682.771 L1818.62 682.771 L1818.06 682.771 L1817.5 682.771 L1816.94 682.771 L1816.38 682.771 L1815.82 682.771 L1815.26 682.771 L1814.7 682.771 L1814.14 682.771 L1813.58 682.771 L1813.02 682.771 L1812.46 682.771 L1811.9 682.771 L1811.35 682.771 L1810.79 682.771 L1810.23 682.771 L1809.67 682.771 L1809.11 682.771 L1808.55 682.771 L1807.99 682.771 L1807.43 682.771 L1806.87 682.771 L1806.31 682.771 L1805.75 682.771 L1805.19 682.771 L1804.63 682.771 L1804.08 682.771 L1803.52 682.771 L1802.96 682.771 L1802.4 682.771 L1801.84 682.771 L1801.28 682.771 L1800.72 682.771 L1800.16 682.771 L1799.6 682.771 L1799.04 682.771 L1798.48 682.771 L1797.92 682.771 L1797.36 682.771 L1796.8 682.771 L1796.25 682.771 L1795.69 682.771 L1795.13 682.771 L1794.57 682.771 L1794.01 682.771 L1793.45 682.771 L1792.89 682.771 L1792.33 682.771 L1791.77 682.771 L1791.21 682.771 L1790.65 682.771 L1790.09 682.771 L1789.53 682.771 L1788.98 682.771 L1788.42 682.771 L1787.86 682.771 L1787.3 682.771 L1786.74 682.771 L1786.18 682.771 L1785.62 682.771 L1785.06 682.771 L1784.5 682.771 L1783.94 682.771 L1783.38 682.771 L1782.82 682.771 L1782.26 682.771 L1781.71 682.771 L1781.15 682.771 L1780.59 682.771 L1780.03 682.771 L1779.47 682.771 L1778.91 682.771 L1778.35 682.771 L1777.79 682.771 L1777.23 682.771 L1776.67 682.771 L1776.11 682.771 L1775.55 682.771 L1774.99 682.771 L1774.43 682.771 L1773.88 682.771 L1773.32 682.771 L1772.76 682.771 L1772.2 682.771 L1771.64 682.771 L1771.08 682.771 L1770.52 682.771 L1769.96 682.771 L1769.4 682.771 L1768.84 682.771 L1768.28 682.771 L1767.72 682.771 L1767.16 682.771 L1766.61 682.771 L1766.05 682.771 L1765.49 682.771 L1764.93 682.771 L1764.37 682.771 L1763.81 682.771 L1763.25 682.771 L1762.69 682.771 L1762.13 682.771 L1761.57 682.771 L1761.01 682.771 L1760.45 682.771 L1759.89 682.771 L1759.34 682.771 L1758.78 682.771 L1758.22 682.771 L1757.66 682.771 L1757.1 682.771 L1756.54 682.771 L1755.98 682.771 L1755.42 682.771 L1754.86 682.771 L1754.3 682.771 L1753.74 682.771 L1753.18 682.771 L1752.62 682.771 L1752.06 682.771 L1751.51 682.771 L1750.95 682.771 L1750.39 682.771 L1749.83 682.771 L1749.27 682.771 L1748.71 682.771 L1748.15 682.771 L1747.59 682.771 L1747.03 682.771 L1746.47 682.771 L1745.91 682.771 L1745.35 682.771 L1744.79 682.771 L1744.24 682.771 L1743.68 682.771 L1743.12 682.771 L1742.56 682.771 L1742 682.771 L1741.44 682.771 L1740.88 682.771 L1740.32 682.771 L1739.76 682.771 L1739.2 682.771 L1738.64 682.771 L1738.08 682.771 L1737.52 682.771 L1736.97 682.771 L1736.41 682.771 L1735.85 682.771 L1735.29 682.771 L1734.73 682.771 L1734.17 682.771 L1733.61 682.771 L1733.05 682.771 L1732.49 682.771 L1731.93 682.771 L1731.37 682.771 L1730.81 682.771 L1730.25 682.771 L1729.69 682.771 L1729.14 682.771 L1728.58 682.771 L1728.02 682.771 L1727.46 682.771 L1726.9 682.771 L1726.34 682.771 L1725.78 682.771 L1725.22 682.771 L1724.66 682.771 L1724.1 682.771 L1723.54 682.771 L1722.98 682.771 L1722.42 682.771 L1721.87 682.771 L1721.31 682.771 L1720.75 682.771 L1720.19 682.771 L1719.63 682.771 L1719.07 682.771 L1718.51 682.771 L1717.95 682.771 L1717.39 682.771 L1716.83 682.771 L1716.27 682.771 L1715.71 682.771 L1715.15 682.771 L1714.6 682.771 L1714.04 682.771 L1713.48 682.771 L1712.92 682.771 L1712.36 682.771 L1711.8 682.771 L1711.24 682.771 L1710.68 682.771 L1710.12 682.771 L1709.56 682.771 L1709 682.771 L1708.44 682.771 L1707.88 682.771 L1707.32 682.771 L1706.77 682.771 L1706.21 682.771 L1705.65 682.771 L1705.09 682.771 L1704.53 682.771 L1703.97 682.771 L1703.41 682.771 L1702.85 682.771 L1702.29 682.771 L1701.73 682.771 L1701.17 682.771 L1700.61 682.771 L1700.05 682.771 L1699.5 682.771 L1698.94 682.771 L1698.38 682.771 L1697.82 682.771 L1697.26 682.771 L1696.7 682.771 L1696.14 682.771 L1695.58 682.771 L1695.02 682.771 L1694.46 682.771 L1693.9 682.771 L1693.34 682.771 L1692.78 682.771 L1692.23 682.771 L1691.67 682.771 L1691.11 682.771 L1690.55 682.771 L1689.99 682.771 L1689.43 682.771 L1688.87 682.771 L1688.31 682.771 L1687.75 682.771 L1687.19 682.771 L1686.63 682.771 L1686.07 682.771 L1685.51 682.771 L1684.95 682.771 L1684.4 682.771 L1683.84 682.771 L1683.28 682.771 L1682.72 682.771 L1682.16 682.771 L1681.6 682.771 L1681.04 682.771 L1680.48 682.771 L1679.92 682.771 L1679.36 682.771 L1678.8 682.771 L1678.24 682.771 L1677.68 682.771 L1677.13 682.771 L1676.57 682.771 L1676.01 682.771 L1675.45 682.771 L1674.89 682.771 L1674.33 682.771 L1673.77 682.771 L1673.21 682.771 L1672.65 682.771 L1672.09 682.771 L1671.53 682.771 L1670.97 682.771 L1670.41 682.771 L1669.85 682.771 L1669.3 682.771 L1668.74 682.771 L1668.18 682.771 L1667.62 682.771 L1667.06 682.771 L1666.5 682.771 L1665.94 682.771 L1665.38 682.771 L1664.82 682.771 L1664.26 682.771 L1663.7 682.771 L1663.14 682.771 L1662.58 682.771 L1662.03 682.771 L1661.47 682.771 L1660.91 682.771 L1660.35 682.771 L1659.79 682.771 L1659.23 682.771 L1658.67 682.771 L1658.11 682.771 L1657.55 682.771 L1656.99 682.771 L1656.43 682.771 L1655.87 682.771 L1655.31 682.771 L1654.76 682.771 L1654.2 682.771 L1653.64 682.771 L1653.08 682.771 L1652.52 682.771 L1651.96 682.771 L1651.4 682.771 L1650.84 682.771 L1650.28 682.771 L1649.72 682.771 L1649.16 682.771 L1648.6 682.771 L1648.04 682.771 L1647.48 682.771 L1646.93 682.771 L1646.37 682.771 L1645.81 682.771 L1645.25 682.771 L1644.69 682.771 L1644.13 682.771 L1643.57 682.771 L1643.01 682.771 L1642.45 682.771 L1641.89 682.771 L1641.33 682.771 L1640.77 682.771 L1640.21 682.771 L1639.66 682.771 L1639.1 682.771 L1638.54 682.771 L1637.98 682.771 L1637.42 682.771 L1636.86 682.771 L1636.3 682.771 L1635.74 682.771 L1635.18 682.771 L1634.62 682.771 L1634.06 682.771 L1633.5 682.771 L1632.94 682.771 L1632.39 682.771 L1631.83 682.771 L1631.27 682.771 L1630.71 682.771 L1630.15 682.771 L1629.59 682.771 L1629.03 682.771 L1628.47 682.771 L1627.91 682.771 L1627.35 682.771 L1626.79 682.771 L1626.23 682.771 L1625.67 682.771 L1625.11 682.771 L1624.56 682.771 L1624 682.771 L1623.44 682.771 L1622.88 682.771 L1622.32 682.771 L1621.76 682.771 L1621.2 682.771 L1620.64 682.771 L1620.08 682.771 L1619.52 682.771 L1618.96 682.771 L1618.4 682.771 L1617.84 682.771 L1617.29 682.771 L1616.73 682.771 L1616.17 682.771 L1615.61 682.771 L1615.05 682.771 L1614.49 682.771 L1613.93 682.771 L1613.37 682.771 L1612.81 682.771 L1612.25 682.771 L1611.69 682.771 L1611.13 682.771 L1610.57 682.771 L1610.02 682.771 L1609.46 682.771 L1608.9 682.771 L1608.34 682.771 L1607.78 682.771 L1607.22 682.771 L1606.66 682.771 L1606.1 682.771 L1605.54 682.771 L1604.98 682.771 L1604.42 682.771 L1603.86 682.771 L1603.3 682.771 L1602.74 682.771 L1602.19 682.771 L1601.63 682.771 L1601.07 682.771 L1600.51 682.771 L1599.95 682.771 L1599.39 682.771 L1598.83 682.771 L1598.27 682.771 L1597.71 682.771 L1597.15 682.771 L1596.59 682.771 L1596.03 682.771 L1595.47 682.771 L1594.92 682.771 L1594.36 682.771 L1593.8 682.771 L1593.24 682.771 L1592.68 682.771 L1592.12 682.771 L1591.56 682.771 L1591 682.771 L1590.44 682.771 L1589.88 682.771 L1589.32 682.771 L1588.76 682.771 L1588.2 682.771 L1587.65 682.771 L1587.09 682.771 L1586.53 682.771 L1585.97 682.771 L1585.41 682.771 L1584.85 682.771 L1584.29 682.771 L1583.73 682.771 L1583.17 682.771 L1582.61 682.771 L1582.05 682.771 L1581.49 682.771 L1580.93 682.771 L1580.37 682.771 L1579.82 682.771 L1579.26 682.771 L1578.7 682.771 L1578.14 682.771 L1577.58 682.771 L1577.02 682.771 L1576.46 682.771 L1575.9 682.771 L1575.34 682.771 L1574.78 682.771 L1574.22 682.771 L1573.66 682.771 L1573.1 682.771 L1572.55 682.771 L1571.99 682.771 L1571.43 682.771 L1570.87 682.771 L1570.31 682.771 L1569.75 682.771 L1569.19 682.771 L1568.63 682.771 L1568.07 682.771 L1567.51 682.771 L1566.95 682.771 L1566.39 682.771 L1565.83 682.771 L1565.28 682.771 L1564.72 682.771 L1564.16 682.771 L1563.6 682.771 L1563.04 682.771 L1562.48 682.771 L1561.92 682.771 L1561.36 682.771 L1560.8 682.771 L1560.24 682.771 L1559.68 682.771 L1559.12 682.771 L1558.56 682.771 L1558 682.771 L1557.45 682.771 L1556.89 682.771 L1556.33 682.771 L1555.77 682.771 L1555.21 682.771 L1554.65 682.771 L1554.09 682.771 L1553.53 682.771 L1552.97 682.771 L1552.41 682.771 L1551.85 682.771 L1551.29 682.771 L1550.73 682.771 L1550.18 682.771 L1549.62 682.771 L1549.06 682.771 L1548.5 682.771 L1547.94 682.771 L1547.38 682.771 L1546.82 682.771 L1546.26 682.771 L1545.7 682.771 L1545.14 682.771 L1544.58 682.771 L1544.02 682.771 L1543.46 682.771 L1542.9 682.771 L1542.35 682.771 L1541.79 682.771 L1541.23 682.771 L1540.67 682.771 L1540.11 682.771 L1539.55 682.771 L1538.99 682.771 L1538.43 682.771 L1537.87 682.771 L1537.31 682.771 L1536.75 682.771 L1536.19 682.771 L1535.63 682.771 L1535.08 682.771 L1534.52 682.771 L1533.96 682.771 L1533.4 682.771 L1532.84 682.771 L1532.28 682.771 L1531.72 682.771 L1531.16 682.771 L1530.6 682.771 L1530.04 682.771 L1529.48 682.771 L1528.92 682.771 L1528.36 682.771 L1527.81 682.771 L1527.25 682.771 L1526.69 682.771 L1526.13 682.771 L1525.57 682.771 L1525.01 682.771 L1524.45 682.771 L1523.89 682.771 L1523.33 682.771 L1522.77 682.771 L1522.21 682.771 L1521.65 682.771 L1521.09 682.771 L1520.53 682.771 L1519.98 682.771 L1519.42 682.771 L1518.86 682.771 L1518.3 682.771 L1517.74 682.771 L1517.18 682.771 L1516.62 682.771 L1516.06 682.771 L1515.5 682.771 L1514.94 682.771 L1514.38 682.771 L1513.82 682.771 L1513.26 682.771 L1512.71 682.771 L1512.15 682.771 L1511.59 682.771 L1511.03 682.771 L1510.47 682.771 L1509.91 682.771 L1509.35 682.771 L1508.79 682.771 L1508.23 682.771 L1507.67 682.771 L1507.11 682.771 L1506.55 682.771 L1505.99 682.771 L1505.44 682.771 L1504.88 682.771 L1504.32 682.771 L1503.76 682.771 L1503.2 682.771 L1502.64 682.771 L1502.08 682.771 L1501.52 682.771 L1500.96 682.771 L1500.4 682.771 L1499.84 682.771 L1499.28 682.771 L1498.72 682.771 L1498.16 682.771 L1497.61 682.771 L1497.05 682.771 L1496.49 682.771 L1495.93 682.771 L1495.37 682.771 L1494.81 682.771 L1494.25 682.771 L1493.69 682.771 L1493.13 682.771 L1492.57 682.771 L1492.01 682.771 L1491.45 682.771 L1490.89 682.771 L1490.34 682.771 L1489.78 682.771 L1489.22 682.771 L1488.66 682.771 L1488.1 682.771 L1487.54 682.771 L1486.98 682.771 L1486.42 682.771 L1485.86 682.771 L1485.3 682.771 L1484.74 682.771 L1484.18 682.771 L1483.62 682.771 L1483.07 682.771 L1482.51 682.771 L1481.95 682.771 L1481.39 682.771 L1480.83 682.771 L1480.27 682.771 L1479.71 682.771 L1479.15 682.771 L1478.59 682.771 L1478.03 682.771 L1477.47 682.771 L1476.91 682.771 L1476.35 682.771 L1475.79 682.771 L1475.24 682.771 L1474.68 682.771 L1474.12 682.771 L1473.56 682.771 L1473 682.771 L1472.44 682.771 L1471.88 682.771 L1471.32 682.771 L1470.76 682.771 L1470.2 682.771 L1469.64 682.771 L1469.08 682.771 L1468.52 682.771 L1467.97 682.771 L1467.41 682.771 L1466.85 682.771 L1466.29 682.771 L1465.73 682.771 L1465.17 682.771 L1464.61 682.771 L1464.05 682.771 L1463.49 682.771 L1462.93 682.771 L1462.37 682.771 L1461.81 682.771 L1461.25 682.771 L1460.7 682.771 L1460.14 682.771 L1459.58 682.771 L1459.02 682.771 L1458.46 682.771 L1457.9 682.771 L1457.34 682.771 L1456.78 682.771 L1456.22 682.771 L1455.66 682.771 L1455.1 682.771 L1454.54 682.771 L1453.98 682.771 L1453.42 682.771 L1452.87 682.771 L1452.31 682.771 L1451.75 682.771 L1451.19 682.771 L1450.63 682.771 L1450.07 682.771 L1449.51 682.771 L1448.95 682.771 L1448.39 682.771 L1447.83 682.771 L1447.27 682.771 L1446.71 682.771 L1446.15 682.771 L1445.6 682.771 L1445.04 682.771 L1444.48 682.771 L1443.92 682.771 L1443.36 682.771 L1442.8 682.771 L1442.24 682.771 L1441.68 682.771 L1441.12 682.771 L1440.56 682.771 L1440 682.771 L1439.44 682.771 L1438.88 682.771 L1438.33 682.771 L1437.77 682.771 L1437.21 682.771 L1436.65 682.771 L1436.09 682.771 L1435.53 682.771 L1434.97 682.771 L1434.41 682.771 L1433.85 682.771 L1433.29 682.771 L1432.73 682.771 L1432.17 682.771 L1431.61 682.771 L1431.05 682.771 L1430.5 682.771 L1429.94 682.771 L1429.38 682.771 L1428.82 682.771 L1428.26 682.771 L1427.7 682.771 L1427.14 682.771 L1426.58 682.771 L1426.02 682.771 L1425.46 682.771 L1424.9 682.771 L1424.34 682.771 L1423.78 682.771 L1423.23 682.771 L1422.67 682.771 L1422.11 682.771 L1421.55 682.771 L1420.99 682.771 L1420.43 682.771 L1419.87 682.771 L1419.31 682.771 L1418.75 682.771 L1418.19 682.771 L1417.63 682.771 L1417.07 682.771 L1416.51 682.771 L1415.95 682.771 L1415.4 682.771 L1414.84 682.771 L1414.28 682.771 L1413.72 682.771 L1413.16 682.771 L1412.6 682.771 L1412.04 682.771 L1411.48 682.771 L1410.92 682.771 L1410.36 682.771 L1409.8 682.771 L1409.24 682.771 L1408.68 682.771 L1408.13 682.771 L1407.57 682.771 L1407.01 682.771 L1406.45 682.771 L1405.89 682.771 L1405.33 682.771 L1404.77 682.771 L1404.21 682.771 L1403.65 682.771 L1403.09 682.771 L1402.53 682.771 L1401.97 682.771 L1401.41 682.771 L1400.86 682.771 L1400.3 682.771 L1399.74 682.771 L1399.18 682.771 L1398.62 682.771 L1398.06 682.771 L1397.5 682.771 L1396.94 682.771 L1396.38 682.771 L1395.82 682.771 L1395.26 682.771 L1394.7 682.771 L1394.14 682.771 L1393.58 682.771 L1393.03 682.771 L1392.47 682.771 L1391.91 682.771 L1391.35 682.771 L1390.79 682.771 L1390.23 682.771 L1389.67 682.771 L1389.11 682.771 L1388.55 682.771 L1387.99 682.771 L1387.43 682.771 L1386.87 682.771 L1386.31 682.771 L1385.76 682.771 L1385.2 682.771 L1384.64 682.771 L1384.08 682.771 L1383.52 682.771 L1382.96 682.771 L1382.4 682.771 L1381.84 682.771 L1381.28 682.771 L1380.72 682.771 L1380.16 682.771 L1379.6 682.771 L1379.04 682.771 L1378.49 682.771 L1377.93 682.771 L1377.37 682.771 L1376.81 682.771 L1376.25 682.771 L1375.69 682.771 L1375.13 682.771 L1374.57 682.771 L1374.01 682.771 L1373.45 682.771 L1372.89 682.771 L1372.33 682.771 L1371.77 682.771 L1371.21 682.771 L1370.66 682.771 L1370.1 682.771 L1369.54 682.771 L1368.98 682.771 L1368.42 682.771 L1367.86 682.771 L1367.3 682.771 L1366.74 682.771 L1366.18 682.771 L1365.62 682.771 L1365.06 682.771 L1364.5 682.771 L1363.94 682.771 L1363.39 682.771 L1362.83 682.771 L1362.27 682.771 L1361.71 682.771 L1361.15 682.771 L1360.59 682.771 L1360.03 682.771 L1359.47 682.771 L1358.91 682.771 L1358.35 682.771 L1357.79 682.771 L1357.23 682.771 L1356.67 682.771 L1356.12 682.771 L1355.56 682.771 L1355 682.771 L1354.44 682.771 L1353.88 682.771 L1353.32 682.771 L1352.76 682.771 L1352.2 682.771 L1351.64 682.771 L1351.08 682.771 L1350.52 682.771 L1349.96 682.771 L1349.4 682.771 L1348.84 682.771 L1348.29 682.771 L1347.73 682.771 L1347.17 682.771 L1346.61 682.771 L1346.05 682.771 L1345.49 682.771 L1344.93 682.771 L1344.37 682.771 L1343.81 682.771 L1343.25 682.771 L1342.69 682.771 L1342.13 682.771 L1341.57 682.771 L1341.02 682.771 L1340.46 682.771 L1339.9 682.771 L1339.34 682.771 L1338.78 682.771 L1338.22 682.771 L1337.66 682.771 L1337.1 682.771 L1336.54 682.771 L1335.98 682.771 L1335.42 682.771 L1334.86 682.771 L1334.3 682.771 L1333.75 682.771 L1333.19 682.771 L1332.63 682.771 L1332.07 682.771 L1331.51 682.771 L1330.95 682.771 L1330.39 682.771 L1329.83 682.771 L1329.27 682.771 L1328.71 682.771 L1328.15 682.771 L1327.59 682.771 L1327.03 682.771 L1326.47 682.771 L1325.92 682.771 L1325.36 682.771 L1324.8 682.771 L1324.24 682.771 L1323.68 682.771 L1323.12 682.771 L1322.56 682.771 L1322 682.771 L1321.44 682.771 L1320.88 682.771 L1320.32 682.771 L1319.76 682.771 L1319.2 682.771 L1318.65 682.771 L1318.09 682.771 L1317.53 682.771 L1316.97 682.771 L1316.41 682.771 L1315.85 682.771 L1315.29 682.771 L1314.73 682.771 L1314.17 682.771 L1313.61 682.771 L1313.05 682.771 L1312.49 682.771 L1311.93 682.771 L1311.38 682.771 L1310.82 682.771 L1310.26 682.771 L1309.7 682.771 L1309.14 682.771 L1308.58 682.771 L1308.02 682.771 L1307.46 682.771 L1306.9 682.771 L1306.34 682.771 L1305.78 682.771 L1305.22 682.771 L1304.66 682.771 L1304.1 682.771 L1303.55 682.771 L1302.99 682.771 L1302.43 682.771 L1301.87 682.771 L1301.31 682.771 L1300.75 682.771 L1300.19 682.771 L1299.63 682.771 L1299.07 682.771 L1298.51 682.771 L1297.95 682.771 L1297.39 682.771 L1296.83 682.771 L1296.28 682.771 L1295.72 682.771 L1295.16 682.771 L1294.6 682.771 L1294.04 682.771 L1293.48 682.771 L1292.92 682.771 L1292.36 682.771 L1291.8 682.771 L1291.24 682.771 L1290.68 682.771 L1290.12 682.771 L1289.56 682.771 L1289 682.771 L1288.45 682.771 L1287.89 682.771 L1287.33 682.771 L1286.77 682.771 L1286.21 682.771 L1285.65 682.771 L1285.09 682.771 L1284.53 682.771 L1283.97 682.771 L1283.41 682.771 L1282.85 682.771 L1282.29 682.771 L1281.73 682.771 L1281.18 682.771 L1280.62 682.771 L1280.06 682.771 L1279.5 682.771 L1278.94 682.771 L1278.38 682.771 L1277.82 682.771 L1277.26 682.771 L1276.7 682.771 L1276.14 682.771 L1275.58 682.771 L1275.02 682.771 L1274.46 682.771 L1273.91 682.771 L1273.35 682.771 L1272.79 682.771 L1272.23 682.771 L1271.67 682.771 L1271.11 682.771 L1270.55 682.771 L1269.99 682.771 L1269.43 682.771 L1268.87 682.771 L1268.31 682.771 L1267.75 682.771 L1267.19 682.771 L1266.63 682.771 L1266.08 682.771 L1265.52 682.771 L1264.96 682.771 L1264.4 682.771 L1263.84 682.771 L1263.28 682.771 L1262.72 682.771 L1262.16 682.771 L1261.6 682.771 L1261.04 682.771 L1260.48 682.771 L1259.92 682.771 L1259.36 682.771 L1258.81 682.771 L1258.25 682.771 L1257.69 682.771 L1257.13 682.771 L1256.57 682.771 L1256.01 682.771 L1255.45 682.771 L1254.89 682.771 L1254.33 682.771 L1253.77 682.771 L1253.21 682.771 L1252.65 682.771 L1252.09 682.771 L1251.54 682.771 L1250.98 682.771 L1250.42 682.771 L1249.86 682.771 L1249.3 682.771 L1248.74 682.771 L1248.18 682.771 L1247.62 682.771 L1247.06 682.771 L1246.5 682.771 L1245.94 682.771 L1245.38 682.771 L1244.82 682.771 L1244.26 682.771 L1243.71 682.771 L1243.15 682.771 L1242.59 682.771 L1242.03 682.771 L1241.47 682.771 L1240.91 682.771 L1240.35 682.771 L1239.79 682.771 L1239.23 682.771 L1238.67 682.771 L1238.11 682.771 L1237.55 682.771 L1236.99 682.771 L1236.44 682.771 L1235.88 682.771 L1235.32 682.771 L1234.76 682.771 L1234.2 682.771 L1233.64 682.771 L1233.08 682.771 L1232.52 682.771 L1231.96 682.771 L1231.4 682.771 L1230.84 682.771 L1230.28 682.771 L1229.72 682.771 L1229.17 682.771 L1228.61 682.771 L1228.05 682.771 L1227.49 682.771 L1226.93 682.771 L1226.37 682.771 L1225.81 682.771 L1225.25 682.771 L1224.69 682.771 L1224.13 682.771 L1223.57 682.771 L1223.01 682.771 L1222.45 682.771 L1221.89 682.771 L1221.34 682.771 L1220.78 682.771 L1220.22 682.771 L1219.66 682.771 L1219.1 682.771 L1218.54 682.771 L1217.98 682.771 L1217.42 682.771 L1216.86 682.771 L1216.3 682.771 L1215.74 682.771 L1215.18 682.771 L1214.62 682.771 L1214.07 682.771 L1213.51 682.771 L1212.95 682.771 L1212.39 682.771 L1211.83 682.771 L1211.27 682.771 L1210.71 682.771 L1210.15 682.771 L1209.59 682.771 L1209.03 682.771 L1208.47 682.771 L1207.91 682.771 L1207.35 682.771 L1206.8 682.771 L1206.24 682.771 L1205.68 682.771 L1205.12 682.771 L1204.56 682.771 L1204 682.771 L1203.44 682.771 L1202.88 682.771 L1202.32 682.771 L1201.76 682.771 L1201.2 682.771 L1200.64 682.771 L1200.08 682.771 L1199.52 682.771 L1198.97 682.771 L1198.41 682.771 L1197.85 682.771 L1197.29 682.771 L1196.73 682.771 L1196.17 682.771 L1195.61 682.771 L1195.05 682.771 L1194.49 682.771 L1193.93 682.771 L1193.37 682.771 L1192.81 682.771 L1192.25 682.771 L1191.7 682.771 L1191.14 682.771 L1190.58 682.771 L1190.02 682.771 L1189.46 682.771 L1188.9 682.771 L1188.34 682.771 L1187.78 682.771 L1187.22 682.771 L1186.66 682.771 L1186.1 682.771 L1185.54 682.771 L1184.98 682.771 L1184.43 682.771 L1183.87 682.771 L1183.31 682.771 L1182.75 682.771 L1182.19 682.771 L1181.63 682.771 L1181.07 682.771 L1180.51 682.771 L1179.95 682.771 L1179.39 682.771 L1178.83 682.771 L1178.27 682.771 L1177.71 682.771 L1177.15 682.771 L1176.6 682.771 L1176.04 682.771 L1175.48 682.771 L1174.92 682.771 L1174.36 682.771 L1173.8 682.771 L1173.24 682.771 L1172.68 682.771 L1172.12 682.771 L1171.56 682.771 L1171 682.771 L1170.44 682.771 L1169.88 682.771 L1169.33 682.771 L1168.77 682.771 L1168.21 682.771 L1167.65 682.771 L1167.09 682.771 L1166.53 682.771 L1165.97 682.771 L1165.41 682.771 L1164.85 682.771 L1164.29 682.771 L1163.73 682.771 L1163.17 682.771 L1162.61 682.771 L1162.05 682.771 L1161.5 682.771 L1160.94 682.771 L1160.38 682.771 L1159.82 682.771 L1159.26 682.771 L1158.7 682.771 L1158.14 682.771 L1157.58 682.771 L1157.02 682.771 L1156.46 682.771 L1155.9 682.771 L1155.34 682.771 L1154.78 682.771 L1154.23 682.771 L1153.67 682.771 L1153.11 682.771 L1152.55 682.771 L1151.99 682.771 L1151.43 682.771 L1150.87 682.771 L1150.31 682.771 L1149.75 682.771 L1149.19 682.771 L1148.63 682.771 L1148.07 682.771 L1147.51 682.771 L1146.96 682.771 L1146.4 682.771 L1145.84 682.771 L1145.28 682.771 L1144.72 682.771 L1144.16 682.771 L1143.6 682.771 L1143.04 682.771 L1142.48 682.771 L1141.92 682.771 L1141.36 682.771 L1140.8 682.771 L1140.24 682.771 L1139.68 682.771 L1139.13 682.771 L1138.57 682.771 L1138.01 682.771 L1137.45 682.771 L1136.89 682.771 L1136.33 682.771 L1135.77 682.771 L1135.21 682.771 L1134.65 682.771 L1134.09 682.771 L1133.53 682.771 L1132.97 682.771 L1132.41 682.771 L1131.86 682.771 L1131.3 682.771 L1130.74 682.771 L1130.18 682.771 L1129.62 682.771 L1129.06 682.771 L1128.5 682.771 L1127.94 682.771 L1127.38 682.771 L1126.82 682.771 L1126.26 682.771 L1125.7 682.771 L1125.14 682.771 L1124.59 682.771 L1124.03 682.771 L1123.47 682.771 L1122.91 682.771 L1122.35 682.771 L1121.79 682.771 L1121.23 682.771 L1120.67 682.771 L1120.11 682.771 L1119.55 682.771 L1118.99 682.771 L1118.43 682.771 L1117.87 682.771 L1117.31 682.771 L1116.76 682.771 L1116.2 682.771 L1115.64 682.771 L1115.08 682.771 L1114.52 682.771 L1113.96 682.771 L1113.4 682.771 L1112.84 682.771 L1112.28 682.771 L1111.72 682.771 L1111.16 682.771 L1110.6 682.771 L1110.04 682.771 L1109.49 682.771 L1108.93 682.771 L1108.37 682.771 L1107.81 682.771 L1107.25 682.771 L1106.69 682.771 L1106.13 682.771 L1105.57 682.771 L1105.01 682.771 L1104.45 682.771 L1103.89 682.771 L1103.33 682.771 L1102.77 682.771 L1102.22 682.771 L1101.66 682.771 L1101.1 682.771 L1100.54 682.771 L1099.98 682.771 L1099.42 682.771 L1098.86 682.771 L1098.3 682.771 L1097.74 682.771 L1097.18 682.771 L1096.62 682.771 L1096.06 682.771 L1095.5 682.771 L1094.94 682.771 L1094.39 682.771 L1093.83 682.771 L1093.27 682.771 L1092.71 682.771 L1092.15 682.771 L1091.59 682.771 L1091.03 682.771 L1090.47 682.771 L1089.91 682.771 L1089.35 682.771 L1088.79 682.771 L1088.23 682.771 L1087.67 682.771 L1087.12 682.771 L1086.56 682.771 L1086 682.771 L1085.44 682.771 L1084.88 682.771 L1084.32 682.771 L1083.76 682.771 L1083.2 682.771 L1082.64 682.771 L1082.08 682.771 L1081.52 682.771 L1080.96 682.771 L1080.4 682.771 L1079.85 682.771 L1079.29 682.771 L1078.73 682.771 L1078.17 682.771 L1077.61 682.771 L1077.05 682.771 L1076.49 682.771 L1075.93 682.771 L1075.37 682.771 L1074.81 682.771 L1074.25 682.771 L1073.69 682.771 L1073.13 682.771 L1072.57 682.771 L1072.02 682.771 L1071.46 682.771 L1070.9 682.771 L1070.34 682.771 L1069.78 682.771 L1069.22 682.771 L1068.66 682.771 L1068.1 682.771 L1067.54 682.771 L1066.98 682.771 L1066.42 682.771 L1065.86 682.771 L1065.3 682.771 L1064.75 682.771 L1064.19 682.771 L1063.63 682.771 L1063.07 682.771 L1062.51 682.771 L1061.95 682.771 L1061.39 682.771 L1060.83 682.771 L1060.27 682.771 L1059.71 682.771 L1059.15 682.771 L1058.59 682.771 L1058.03 682.771 L1057.48 682.771 L1056.92 682.771 L1056.36 682.771 L1055.8 682.771 L1055.24 682.771 L1054.68 682.771 L1054.12 682.771 L1053.56 682.771 L1053 682.771 L1052.44 682.771 L1051.88 682.771 L1051.32 682.771 L1050.76 682.771 L1050.2 682.771 L1049.65 682.771 L1049.09 682.771 L1048.53 682.771 L1047.97 682.771 L1047.41 682.771 L1046.85 682.771 L1046.29 682.771 L1045.73 682.771 L1045.17 682.771 L1044.61 682.771 L1044.05 682.771 L1043.49 682.771 L1042.93 682.771 L1042.38 682.771 L1041.82 682.771 L1041.26 682.771 L1040.7 682.771 L1040.14 682.771 L1039.58 682.771 L1039.02 682.771 L1038.46 682.771 L1037.9 682.771 L1037.34 682.771 L1036.78 682.771 L1036.22 682.771 L1035.66 682.771 L1035.1 682.771 L1034.55 682.771 L1033.99 682.771 L1033.43 682.771 L1032.87 682.771 L1032.31 682.771 L1031.75 682.771 L1031.19 682.771 L1030.63 682.771 L1030.07 682.771 L1029.51 682.771 L1028.95 682.771 L1028.39 682.771 L1027.83 682.771 L1027.28 682.771 L1026.72 682.771 L1026.16 682.771 L1025.6 682.771 L1025.04 682.771 L1024.48 682.771 L1023.92 682.771 L1023.36 682.771 L1022.8 682.771 L1022.24 682.771 L1021.68 682.771 L1021.12 682.771 L1020.56 682.771 L1020.01 682.771 L1019.45 682.771 L1018.89 682.771 L1018.33 682.771 L1017.77 682.771 L1017.21 682.771 L1016.65 682.771 L1016.09 682.771 L1015.53 682.771 L1014.97 682.771 L1014.41 682.771 L1013.85 682.771 L1013.29 682.771 L1012.73 682.771 L1012.18 682.771 L1011.62 682.771 L1011.06 682.771 L1010.5 682.771 L1009.94 682.771 L1009.38 682.771 L1008.82 682.771 L1008.26 682.771 L1007.7 682.771 L1007.14 682.771 L1006.58 682.771 L1006.02 682.771 L1005.46 682.771 L1004.91 682.771 L1004.35 682.771 L1003.79 682.771 L1003.23 682.771 L1002.67 682.771 L1002.11 682.771 L1001.55 682.771 L1000.99 682.771 L1000.43 682.771 L999.872 682.771 L999.313 682.771 L998.754 682.771 L998.194 682.771 L997.635 682.771 L997.076 682.771 L996.517 682.771 L995.957 682.771 L995.398 682.771 L994.839 682.771 L994.28 682.771 L993.72 682.771 L993.161 682.771 L992.602 682.771 L992.043 682.771 L991.483 682.771 L990.924 682.771 L990.365 682.771 L989.806 682.771 L989.246 682.771 L988.687 682.771 L988.128 682.771 L987.569 682.771 L987.009 682.771 L986.45 682.771 L985.891 682.771 L985.332 682.771 L984.772 682.771 L984.213 682.771 L983.654 682.771 L983.095 682.771 L982.535 682.771 L981.976 682.771 L981.417 682.771 L980.858 682.771 L980.298 682.771 L979.739 682.771 L979.18 682.771 L978.621 682.771 L978.061 682.771 L977.502 682.771 L976.943 682.771 L976.384 682.771 L975.824 682.771 L975.265 682.771 L974.706 682.771 L974.147 682.771 L973.587 682.771 L973.028 682.771 L972.469 682.771 L971.91 682.771 L971.35 682.771 L970.791 682.771 L970.232 682.771 L969.673 682.771 L969.113 682.771 L968.554 682.771 L967.995 682.771 L967.436 682.771 L966.876 682.771 L966.317 682.771 L965.758 682.771 L965.199 682.771 L964.639 682.771 L964.08 682.771 L963.521 682.771 L962.962 682.771 L962.402 682.771 L961.843 682.771 L961.284 682.771 L960.725 682.771 L960.165 682.771 L959.606 682.771 L959.047 682.771 L958.488 682.771 L957.928 682.771 L957.369 682.771 L956.81 682.771 L956.251 682.771 L955.691 682.771 L955.132 682.771 L954.573 682.771 L954.014 682.771 L953.454 682.771 L952.895 682.771 L952.336 682.771 L951.777 682.771 L951.217 682.771 L950.658 682.771 L950.099 682.771 L949.54 682.771 L948.98 682.771 L948.421 682.771 L947.862 682.771 L947.303 682.771 L946.743 682.771 L946.184 682.771 L945.625 682.771 L945.066 682.771 L944.506 682.771 L943.947 682.771 L943.388 682.771 L942.829 682.771 L942.269 682.771 L941.71 682.771 L941.151 682.771 L940.592 682.771 L940.032 682.771 L939.473 682.771 L938.914 682.771 L938.355 682.771 L937.795 682.771 L937.236 682.771 L936.677 682.771 L936.118 682.771 L935.558 682.771 L934.999 682.771 L934.44 682.771 L933.881 682.771 L933.321 682.771 L932.762 682.771 L932.203 682.771 L931.644 682.771 L931.084 682.771 L930.525 682.771 L929.966 682.771 L929.406 682.771 L928.847 682.771 L928.288 682.771 L927.729 682.771 L927.169 682.771 L926.61 682.771 L926.051 682.771 L925.492 682.771 L924.932 682.771 L924.373 682.771 L923.814 682.771 L923.255 682.771 L922.695 682.771 L922.136 682.771 L921.577 682.771 L921.018 682.771 L920.458 682.771 L919.899 682.771 L919.34 682.771 L918.781 682.771 L918.221 682.771 L917.662 682.771 L917.103 682.771 L916.544 682.771 L915.984 682.771 L915.425 682.771 L914.866 682.771 L914.307 682.771 L913.747 682.771 L913.188 682.771 L912.629 682.771 L912.07 682.771 L911.51 682.771 L910.951 682.771 L910.392 682.771 L909.833 682.771 L909.273 682.771 L908.714 682.771 L908.155 682.771 L907.596 682.771 L907.036 682.771 L906.477 682.771 L905.918 682.771 L905.359 682.771 L904.799 682.771 L904.24 682.771 L903.681 682.771 L903.122 682.771 L902.562 682.771 L902.003 682.771 L901.444 682.771 L900.885 682.771 L900.325 682.771 L899.766 682.771 L899.207 682.771 L898.648 682.771 L898.088 682.771 L897.529 682.771 L896.97 682.771 L896.411 682.771 L895.851 682.771 L895.292 682.771 L894.733 682.771 L894.174 682.771 L893.614 682.771 L893.055 682.771 L892.496 682.771 L891.937 682.771 L891.377 682.771 L890.818 682.771 L890.259 682.771 L889.7 682.771 L889.14 682.771 L888.581 682.771 L888.022 682.771 L887.463 682.771 L886.903 682.771 L886.344 682.771 L885.785 682.771 L885.226 682.771 L884.666 682.771 L884.107 682.771 L883.548 682.771 L882.989 682.771 L882.429 682.771 L881.87 682.771 L881.311 682.771 L880.752 682.771 L880.192 682.771 L879.633 682.771 L879.074 682.771 L878.515 682.771 L877.955 682.771 L877.396 682.771 L876.837 682.771 L876.278 682.771 L875.718 682.771 L875.159 682.771 L874.6 682.771 L874.041 682.771 L873.481 682.771 L872.922 682.771 L872.363 682.771 L871.804 682.771 L871.244 682.771 L870.685 682.771 L870.126 682.771 L869.567 682.771 L869.007 682.771 L868.448 682.771 L867.889 682.771 L867.33 682.771 L866.77 682.771 L866.211 682.771 L865.652 682.771 L865.093 682.771 L864.533 682.771 L863.974 682.771 L863.415 682.771 L862.856 682.771 L862.296 682.771 L861.737 682.771 L861.178 682.771 L860.619 682.771 L860.059 682.771 L859.5 682.771 L858.941 682.771 L858.382 682.771 L857.822 682.771 L857.263 682.771 L856.704 682.771 L856.145 682.771 L855.585 682.771 L855.026 682.771 L854.467 682.771 L853.908 682.771 L853.348 682.771 L852.789 682.771 L852.23 682.771 L851.671 682.771 L851.111 682.771 L850.552 682.771 L849.993 682.771 L849.434 682.771 L848.874 682.771 L848.315 682.771 L847.756 682.771 L847.197 682.771 L846.637 682.771 L846.078 682.771 L845.519 682.771 L844.96 682.771 L844.4 682.771 L843.841 682.771 L843.282 682.771 L842.723 682.771 L842.163 682.771 L841.604 682.771 L841.045 682.771 L840.486 682.771 L839.926 682.771 L839.367 682.771 L838.808 682.771 L838.249 682.771 L837.689 682.771 L837.13 682.771 L836.571 682.771 L836.012 682.771 L835.452 682.771 L834.893 682.771 L834.334 682.771 L833.775 682.771 L833.215 682.771 L832.656 682.771 L832.097 682.771 L831.538 682.771 L830.978 682.771 L830.419 682.771 L829.86 682.771 L829.301 682.771 L828.741 682.771 L828.182 682.771 L827.623 682.771 L827.064 682.771 L826.504 682.771 L825.945 682.771 L825.386 682.771 L824.827 682.771 L824.267 682.771 L823.708 682.771 L823.149 682.771 L822.59 682.771 L822.03 682.771 L821.471 682.771 L820.912 682.771 L820.353 682.771 L819.793 682.771 L819.234 682.771 L818.675 682.771 L818.116 682.771 L817.556 682.771 L816.997 682.771 L816.438 682.771 L815.879 682.771 L815.319 682.771 L814.76 682.771 L814.201 682.771 L813.642 682.771 L813.082 682.771 L812.523 682.771 L811.964 682.771 L811.405 682.771 L810.845 682.771 L810.286 682.771 L809.727 682.771 L809.168 682.771 L808.608 682.771 L808.049 682.771 L807.49 682.771 L806.931 682.771 L806.371 682.771 L805.812 682.771 L805.253 682.771 L804.693 682.771 L804.134 682.771 L803.575 682.771 L803.016 682.771 L802.456 682.771 L801.897 682.771 L801.338 682.771 L800.779 682.771 L800.219 682.771 L799.66 682.771 L799.101 682.771 L798.542 682.771 L797.982 682.771 L797.423 682.771 L796.864 682.771 L796.305 682.771 L795.745 682.771 L795.186 682.771 L794.627 682.771 L794.068 682.771 L793.508 682.771 L792.949 682.771 L792.39 682.771 L791.831 682.771 L791.271 682.771 L790.712 682.771 L790.153 682.771 L789.594 682.771 L789.034 682.771 L788.475 682.771 L787.916 682.771 L787.357 682.771 L786.797 682.771 L786.238 682.771 L785.679 682.771 L785.12 682.771 L784.56 682.771 L784.001 682.771 L783.442 682.771 L782.883 682.771 L782.323 682.771 L781.764 682.771 L781.205 682.771 L780.646 682.771 L780.086 682.771 L779.527 682.771 L778.968 682.771 L778.409 682.771 L777.849 682.771 L777.29 682.771 L776.731 682.771 L776.172 682.771 L775.612 682.771 L775.053 682.771 L774.494 682.771 L773.935 682.771 L773.375 682.771 L772.816 682.771 L772.257 682.771 L771.698 682.771 L771.138 682.771 L770.579 682.771 L770.02 682.771 L769.461 682.771 L768.901 682.771 L768.342 682.771 L767.783 682.771 L767.224 682.771 L766.664 682.771 L766.105 682.771 L765.546 682.771 L764.987 682.771 L764.427 682.771 L763.868 682.771 L763.309 682.771 L762.75 682.771 L762.19 682.771 L761.631 682.771 L761.072 682.771 L760.513 682.771 L759.953 682.771 L759.394 682.771 L758.835 682.771 L758.276 682.771 L757.716 682.771 L757.157 682.771 L756.598 682.771 L756.039 682.771 L755.479 682.771 L754.92 682.771 L754.361 682.771 L753.802 682.771 L753.242 682.771 L752.683 682.771 L752.124 682.771 L751.565 682.771 L751.005 682.771 L750.446 682.771 L749.887 682.771 L749.328 682.771 L748.768 682.771 L748.209 682.771 L747.65 682.771 L747.091 682.771 L746.531 682.771 L745.972 682.771 L745.413 682.771 L744.854 682.771 L744.294 682.771 L743.735 682.771 L743.176 682.771 L742.617 682.771 L742.057 682.771 L741.498 682.771 L740.939 682.771 L740.38 682.771 L739.82 682.771 L739.261 682.771 L738.702 682.771 L738.143 682.771 L737.583 682.771 L737.024 682.771 L736.465 682.771 L735.906 682.771 L735.346 682.771 L734.787 682.771 L734.228 682.771 L733.669 682.771 L733.109 682.771 L732.55 682.771 L731.991 682.771 L731.432 682.771 L730.872 682.771 L730.313 682.771 L729.754 682.771 L729.195 682.771 L728.635 682.771 L728.076 682.771 L727.517 682.771 L726.958 682.771 L726.398 682.771 L725.839 682.771 L725.28 682.771 L724.721 682.771 L724.161 682.771 L723.602 682.771 L723.043 682.771 L722.484 682.771 L721.924 682.771 L721.365 682.771 L720.806 682.771 L720.247 682.771  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip523)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.678 720.806,683.678 721.365,683.678 721.924,683.678 722.484,683.678 723.043,683.678 723.602,683.678 724.161,683.678 724.721,683.678 725.28,683.678 725.839,683.678 726.398,683.678 726.958,683.678 727.517,683.678 728.076,683.678 728.635,683.678 729.195,683.678 729.754,683.678 730.313,683.678 730.872,683.678 731.432,683.678 731.991,683.678 732.55,683.678 733.109,683.678 733.669,683.678 734.228,683.678 734.787,683.678 735.346,683.678 735.906,683.678 736.465,683.678 737.024,683.678 737.583,683.678 738.143,683.678 738.702,683.678 739.261,683.678 739.82,683.678 740.38,683.678 740.939,683.678 741.498,683.678 742.057,683.678 742.617,683.678 743.176,683.678 743.735,683.678 744.294,683.678 744.854,683.678 745.413,683.678 745.972,683.678 746.531,683.678 747.091,683.678 747.65,683.678 748.209,683.678 748.768,683.678 749.328,683.678 749.887,683.678 750.446,683.678 751.005,683.678 751.565,683.678 752.124,683.678 752.683,683.678 753.242,683.678 753.802,683.678 754.361,683.678 754.92,683.678 755.479,683.678 756.039,683.678 756.598,683.678 757.157,683.678 757.716,683.678 758.276,683.678 758.835,683.678 759.394,683.678 759.953,683.678 760.513,683.678 761.072,683.678 761.631,683.678 762.19,683.678 762.75,683.678 763.309,683.678 763.868,683.678 764.427,683.678 764.987,683.678 765.546,683.678 766.105,683.678 766.664,683.678 767.224,683.678 767.783,683.678 768.342,683.678 768.901,683.678 769.461,683.678 770.02,683.678 770.579,683.678 771.138,683.678 771.698,683.678 772.257,683.678 772.816,683.678 773.375,683.678 773.935,683.678 774.494,683.678 775.053,683.678 775.612,683.678 776.172,683.678 776.731,683.678 777.29,683.678 777.849,683.678 778.409,683.678 778.968,683.678 779.527,683.678 780.086,683.678 780.646,683.678 781.205,683.678 781.764,683.678 782.323,683.678 782.883,683.678 783.442,683.678 784.001,683.678 784.56,683.678 785.12,683.678 785.679,683.678 786.238,683.678 786.797,683.678 787.357,683.678 787.916,683.678 788.475,683.678 789.034,683.678 789.594,683.678 790.153,683.678 790.712,683.678 791.271,683.678 791.831,683.678 792.39,683.678 792.949,683.678 793.508,683.678 794.068,683.678 794.627,683.678 795.186,683.678 795.745,683.678 796.305,683.678 796.864,683.678 797.423,683.678 797.982,683.678 798.542,683.678 799.101,683.678 799.66,683.678 800.219,683.678 800.779,683.678 801.338,683.678 801.897,683.678 802.456,683.678 803.016,683.678 803.575,683.678 804.134,683.678 804.693,683.678 805.253,683.678 805.812,683.678 806.371,683.678 806.931,683.678 807.49,683.678 808.049,683.678 808.608,683.678 809.168,683.678 809.727,683.678 810.286,683.678 810.845,683.678 811.405,683.678 811.964,683.678 812.523,683.678 813.082,683.678 813.642,683.678 814.201,683.678 814.76,683.678 815.319,683.678 815.879,683.678 816.438,683.678 816.997,683.678 817.556,683.678 818.116,683.678 818.675,683.678 819.234,683.678 819.793,683.678 820.353,683.678 820.912,683.678 821.471,683.678 822.03,683.678 822.59,683.678 823.149,683.678 823.708,683.678 824.267,683.678 824.827,683.678 825.386,683.678 825.945,683.678 826.504,683.678 827.064,683.678 827.623,683.678 828.182,683.678 828.741,683.678 829.301,683.678 829.86,683.678 830.419,683.678 830.978,683.678 831.538,683.678 832.097,683.678 832.656,683.678 833.215,683.678 833.775,683.678 834.334,683.678 834.893,683.678 835.452,683.678 836.012,683.678 836.571,683.678 837.13,683.678 837.689,683.678 838.249,683.678 838.808,683.678 839.367,683.678 839.926,683.678 840.486,683.678 841.045,683.678 841.604,683.678 842.163,683.678 842.723,683.678 843.282,683.678 843.841,683.678 844.4,683.678 844.96,683.678 845.519,683.678 846.078,683.678 846.637,683.678 847.197,683.678 847.756,683.678 848.315,683.678 848.874,683.678 849.434,683.678 849.993,683.678 850.552,683.678 851.111,683.678 851.671,683.678 852.23,683.678 852.789,683.678 853.348,683.678 853.908,683.678 854.467,683.678 855.026,683.678 855.585,683.678 856.145,683.678 856.704,683.678 857.263,683.678 857.822,683.678 858.382,683.678 858.941,683.678 859.5,683.678 860.059,683.678 860.619,683.678 861.178,683.678 861.737,683.678 862.296,683.678 862.856,683.678 863.415,683.678 863.974,683.678 864.533,683.678 865.093,683.678 865.652,683.678 866.211,683.678 866.77,683.678 867.33,683.678 867.889,683.678 868.448,683.678 869.007,683.678 869.567,683.678 870.126,683.678 870.685,683.678 871.244,683.678 871.804,683.678 872.363,683.678 872.922,683.678 873.481,683.678 874.041,683.678 874.6,683.678 875.159,683.678 875.718,683.678 876.278,683.678 876.837,683.678 877.396,683.678 877.955,683.678 878.515,683.678 879.074,683.678 879.633,683.678 880.192,683.678 880.752,683.678 881.311,683.678 881.87,683.678 882.429,683.678 882.989,683.678 883.548,683.678 884.107,683.678 884.666,683.678 885.226,683.678 885.785,683.678 886.344,683.678 886.903,683.678 887.463,683.678 888.022,683.678 888.581,683.678 889.14,683.678 889.7,683.678 890.259,683.678 890.818,683.678 891.377,683.678 891.937,683.678 892.496,683.678 893.055,683.678 893.614,683.678 894.174,683.678 894.733,683.678 895.292,683.678 895.851,683.678 896.411,683.678 896.97,683.678 897.529,683.678 898.088,683.678 898.648,683.678 899.207,683.678 899.766,683.678 900.325,683.678 900.885,683.678 901.444,683.678 902.003,683.678 902.562,683.678 903.122,683.678 903.681,683.678 904.24,683.678 904.799,683.678 905.359,683.678 905.918,683.678 906.477,683.678 907.036,683.678 907.596,683.678 908.155,683.678 908.714,683.678 909.273,683.678 909.833,683.678 910.392,683.678 910.951,683.678 911.51,683.678 912.07,683.678 912.629,683.678 913.188,683.678 913.747,683.678 914.307,683.678 914.866,683.678 915.425,683.678 915.984,683.678 916.544,683.678 917.103,683.678 917.662,683.678 918.221,683.678 918.781,683.678 919.34,683.678 919.899,683.678 920.458,683.678 921.018,683.678 921.577,683.678 922.136,683.678 922.695,683.678 923.255,683.678 923.814,683.678 924.373,683.678 924.932,683.678 925.492,683.678 926.051,683.678 926.61,683.678 927.169,683.678 927.729,683.678 928.288,683.678 928.847,683.678 929.406,683.678 929.966,683.678 930.525,683.678 931.084,683.678 931.644,683.678 932.203,683.678 932.762,683.678 933.321,683.678 933.881,683.678 934.44,683.678 934.999,683.678 935.558,683.678 936.118,683.678 936.677,683.678 937.236,683.678 937.795,683.678 938.355,683.678 938.914,683.678 939.473,683.678 940.032,683.678 940.592,683.678 941.151,683.678 941.71,683.678 942.269,683.678 942.829,683.678 943.388,683.678 943.947,683.678 944.506,683.678 945.066,683.678 945.625,683.678 946.184,683.678 946.743,683.678 947.303,683.678 947.862,683.678 948.421,683.678 948.98,683.678 949.54,683.678 950.099,683.678 950.658,683.678 951.217,683.678 951.777,683.678 952.336,683.678 952.895,683.678 953.454,683.678 954.014,683.678 954.573,683.678 955.132,683.678 955.691,683.678 956.251,683.678 956.81,683.678 957.369,683.678 957.928,683.678 958.488,683.678 959.047,683.678 959.606,683.678 960.165,683.678 960.725,683.678 961.284,683.678 961.843,683.678 962.402,683.678 962.962,683.678 963.521,683.678 964.08,683.678 964.639,683.678 965.199,683.678 965.758,683.678 966.317,683.678 966.876,683.678 967.436,683.678 967.995,683.678 968.554,683.678 969.113,683.678 969.673,683.678 970.232,683.678 970.791,683.678 971.35,683.678 971.91,683.678 972.469,683.678 973.028,683.678 973.587,683.678 974.147,683.678 974.706,683.678 975.265,683.678 975.824,683.678 976.384,683.678 976.943,683.678 977.502,683.678 978.061,683.678 978.621,683.678 979.18,683.678 979.739,683.678 980.298,683.678 980.858,683.678 981.417,683.678 981.976,683.678 982.535,683.678 983.095,683.678 983.654,683.678 984.213,683.678 984.772,683.678 985.332,683.678 985.891,683.678 986.45,683.678 987.009,683.678 987.569,683.678 988.128,683.678 988.687,683.678 989.246,683.678 989.806,683.678 990.365,683.678 990.924,683.678 991.483,683.678 992.043,683.678 992.602,683.678 993.161,683.678 993.72,683.678 994.28,683.678 994.839,683.678 995.398,683.678 995.957,683.678 996.517,683.678 997.076,683.678 997.635,683.678 998.194,683.678 998.754,683.678 999.313,683.678 999.872,683.678 1000.43,683.678 1000.99,683.678 1001.55,683.678 1002.11,683.678 1002.67,683.678 1003.23,683.678 1003.79,683.678 1004.35,683.678 1004.91,683.678 1005.46,683.678 1006.02,683.678 1006.58,683.678 1007.14,683.678 1007.7,683.678 1008.26,683.678 1008.82,683.678 1009.38,683.678 1009.94,683.678 1010.5,683.678 1011.06,683.678 1011.62,683.678 1012.18,683.678 1012.73,683.678 1013.29,683.678 1013.85,683.678 1014.41,683.678 1014.97,683.678 1015.53,683.678 1016.09,683.678 1016.65,683.678 1017.21,683.678 1017.77,683.678 1018.33,683.678 1018.89,683.678 1019.45,683.678 1020.01,683.678 1020.56,683.678 1021.12,683.678 1021.68,683.678 1022.24,683.678 1022.8,683.678 1023.36,683.678 1023.92,683.678 1024.48,683.678 1025.04,683.678 1025.6,683.678 1026.16,683.678 1026.72,683.678 1027.28,683.678 1027.83,683.678 1028.39,683.678 1028.95,683.678 1029.51,683.678 1030.07,683.678 1030.63,683.678 1031.19,683.678 1031.75,683.678 1032.31,683.678 1032.87,683.678 1033.43,683.678 1033.99,683.678 1034.55,683.678 1035.1,683.678 1035.66,683.678 1036.22,683.678 1036.78,683.678 1037.34,683.678 1037.9,683.678 1038.46,683.678 1039.02,683.678 1039.58,683.678 1040.14,683.678 1040.7,683.678 1041.26,683.678 1041.82,683.678 1042.38,683.678 1042.93,683.678 1043.49,683.678 1044.05,683.678 1044.61,683.678 1045.17,683.678 1045.73,683.678 1046.29,683.678 1046.85,683.678 1047.41,683.678 1047.97,683.678 1048.53,683.678 1049.09,683.678 1049.65,683.678 1050.2,683.678 1050.76,683.678 1051.32,683.678 1051.88,683.678 1052.44,683.678 1053,683.678 1053.56,683.678 1054.12,683.678 1054.68,683.678 1055.24,683.678 1055.8,683.678 1056.36,683.678 1056.92,683.678 1057.48,683.678 1058.03,683.678 1058.59,683.678 1059.15,683.678 1059.71,683.678 1060.27,683.678 1060.83,683.678 1061.39,683.678 1061.95,683.678 1062.51,683.678 1063.07,683.678 1063.63,683.678 1064.19,683.678 1064.75,683.678 1065.3,683.678 1065.86,683.678 1066.42,683.678 1066.98,683.678 1067.54,683.678 1068.1,683.678 1068.66,683.678 1069.22,683.678 1069.78,683.678 1070.34,683.678 1070.9,683.678 1071.46,683.678 1072.02,683.678 1072.57,683.678 1073.13,683.678 1073.69,683.678 1074.25,683.678 1074.81,683.678 1075.37,683.678 1075.93,683.678 1076.49,683.678 1077.05,683.678 1077.61,683.678 1078.17,683.678 1078.73,683.678 1079.29,683.678 1079.85,683.678 1080.4,683.678 1080.96,683.678 1081.52,683.678 1082.08,683.678 1082.64,683.678 1083.2,683.678 1083.76,683.678 1084.32,683.678 1084.88,683.678 1085.44,683.678 1086,683.678 1086.56,683.678 1087.12,683.678 1087.67,683.678 1088.23,683.678 1088.79,683.678 1089.35,683.678 1089.91,683.678 1090.47,683.678 1091.03,683.678 1091.59,683.678 1092.15,683.678 1092.71,683.678 1093.27,683.678 1093.83,683.678 1094.39,683.678 1094.94,683.678 1095.5,683.678 1096.06,683.678 1096.62,683.678 1097.18,683.678 1097.74,683.678 1098.3,683.678 1098.86,683.678 1099.42,683.678 1099.98,683.678 1100.54,683.678 1101.1,683.678 1101.66,683.678 1102.22,683.678 1102.77,683.678 1103.33,683.678 1103.89,683.678 1104.45,683.678 1105.01,683.678 1105.57,683.678 1106.13,683.678 1106.69,683.678 1107.25,683.678 1107.81,683.678 1108.37,683.678 1108.93,683.678 1109.49,683.678 1110.04,683.678 1110.6,683.678 1111.16,683.678 1111.72,683.678 1112.28,683.678 1112.84,683.678 1113.4,683.678 1113.96,683.678 1114.52,683.678 1115.08,683.678 1115.64,683.678 1116.2,683.678 1116.76,683.678 1117.31,683.678 1117.87,683.678 1118.43,683.678 1118.99,683.678 1119.55,683.678 1120.11,683.678 1120.67,683.678 1121.23,683.678 1121.79,683.678 1122.35,683.678 1122.91,683.678 1123.47,683.678 1124.03,683.678 1124.59,683.678 1125.14,683.678 1125.7,683.678 1126.26,683.678 1126.82,683.678 1127.38,683.678 1127.94,683.678 1128.5,683.678 1129.06,683.678 1129.62,683.678 1130.18,683.678 1130.74,683.678 1131.3,683.678 1131.86,683.678 1132.41,683.678 1132.97,683.678 1133.53,683.678 1134.09,683.678 1134.65,683.678 1135.21,683.678 1135.77,683.678 1136.33,683.678 1136.89,683.678 1137.45,683.678 1138.01,683.678 1138.57,683.678 1139.13,683.678 1139.68,683.678 1140.24,683.678 1140.8,683.678 1141.36,683.678 1141.92,683.678 1142.48,683.678 1143.04,683.678 1143.6,683.678 1144.16,683.678 1144.72,683.678 1145.28,683.678 1145.84,683.678 1146.4,683.678 1146.96,683.678 1147.51,683.678 1148.07,683.678 1148.63,683.678 1149.19,683.678 1149.75,683.678 1150.31,683.678 1150.87,683.678 1151.43,683.678 1151.99,683.678 1152.55,683.678 1153.11,683.678 1153.67,683.678 1154.23,683.678 1154.78,683.678 1155.34,683.678 1155.9,683.678 1156.46,683.678 1157.02,683.678 1157.58,683.678 1158.14,683.678 1158.7,683.678 1159.26,683.678 1159.82,683.678 1160.38,683.678 1160.94,683.678 1161.5,683.678 1162.05,683.678 1162.61,683.678 1163.17,683.678 1163.73,683.678 1164.29,683.678 1164.85,683.678 1165.41,683.678 1165.97,683.678 1166.53,683.678 1167.09,683.678 1167.65,683.678 1168.21,683.678 1168.77,683.678 1169.33,683.678 1169.88,683.678 1170.44,683.678 1171,683.678 1171.56,683.678 1172.12,683.678 1172.68,683.678 1173.24,683.678 1173.8,683.678 1174.36,683.678 1174.92,683.678 1175.48,683.678 1176.04,683.678 1176.6,683.678 1177.15,683.678 1177.71,683.678 1178.27,683.678 1178.83,683.678 1179.39,683.678 1179.95,683.678 1180.51,683.678 1181.07,683.678 1181.63,683.678 1182.19,683.678 1182.75,683.678 1183.31,683.678 1183.87,683.678 1184.43,683.678 1184.98,683.678 1185.54,683.678 1186.1,683.678 1186.66,683.678 1187.22,683.678 1187.78,683.678 1188.34,683.678 1188.9,683.678 1189.46,683.678 1190.02,683.678 1190.58,683.678 1191.14,683.678 1191.7,683.678 1192.25,683.678 1192.81,683.678 1193.37,683.678 1193.93,683.678 1194.49,683.678 1195.05,683.678 1195.61,683.678 1196.17,683.678 1196.73,683.678 1197.29,683.678 1197.85,683.678 1198.41,683.678 1198.97,683.678 1199.52,683.678 1200.08,683.678 1200.64,683.678 1201.2,683.678 1201.76,683.678 1202.32,683.678 1202.88,683.678 1203.44,683.678 1204,683.678 1204.56,683.678 1205.12,683.678 1205.68,683.678 1206.24,683.678 1206.8,683.678 1207.35,683.678 1207.91,683.678 1208.47,683.678 1209.03,683.678 1209.59,683.678 1210.15,683.678 1210.71,683.678 1211.27,683.678 1211.83,683.678 1212.39,683.678 1212.95,683.678 1213.51,683.678 1214.07,683.678 1214.62,683.678 1215.18,683.678 1215.74,683.678 1216.3,683.678 1216.86,683.678 1217.42,683.678 1217.98,683.678 1218.54,683.678 1219.1,683.678 1219.66,683.678 1220.22,683.678 1220.78,683.678 1221.34,683.678 1221.89,683.678 1222.45,683.678 1223.01,683.678 1223.57,683.678 1224.13,683.678 1224.69,683.678 1225.25,683.678 1225.81,683.678 1226.37,683.678 1226.93,683.678 1227.49,683.678 1228.05,683.678 1228.61,683.678 1229.17,683.678 1229.72,683.678 1230.28,683.678 1230.84,683.678 1231.4,683.678 1231.96,683.678 1232.52,683.678 1233.08,683.678 1233.64,683.678 1234.2,683.678 1234.76,683.678 1235.32,683.678 1235.88,683.678 1236.44,683.678 1236.99,683.678 1237.55,683.678 1238.11,683.678 1238.67,683.678 1239.23,683.678 1239.79,683.678 1240.35,683.678 1240.91,683.678 1241.47,683.678 1242.03,683.678 1242.59,683.678 1243.15,683.678 1243.71,683.678 1244.26,683.678 1244.82,683.678 1245.38,683.678 1245.94,683.678 1246.5,683.678 1247.06,683.678 1247.62,683.678 1248.18,683.678 1248.74,683.678 1249.3,683.678 1249.86,683.678 1250.42,683.678 1250.98,683.678 1251.54,683.678 1252.09,683.678 1252.65,683.678 1253.21,683.678 1253.77,683.678 1254.33,683.678 1254.89,683.678 1255.45,683.678 1256.01,683.678 1256.57,683.678 1257.13,683.678 1257.69,683.678 1258.25,683.678 1258.81,683.678 1259.36,683.678 1259.92,683.678 1260.48,683.678 1261.04,683.678 1261.6,683.678 1262.16,683.678 1262.72,683.678 1263.28,683.678 1263.84,683.678 1264.4,683.678 1264.96,683.678 1265.52,683.678 1266.08,683.678 1266.63,683.678 1267.19,683.678 1267.75,683.678 1268.31,683.678 1268.87,683.678 1269.43,683.678 1269.99,683.678 1270.55,683.678 1271.11,683.678 1271.67,683.678 1272.23,683.678 1272.79,683.678 1273.35,683.678 1273.91,683.678 1274.46,683.678 1275.02,683.678 1275.58,683.678 1276.14,683.678 1276.7,683.678 1277.26,683.678 1277.82,683.678 1278.38,683.678 1278.94,683.678 1279.5,683.678 1280.06,683.678 1280.62,683.678 1281.18,683.678 1281.73,683.678 1282.29,683.678 1282.85,683.678 1283.41,683.678 1283.97,683.678 1284.53,683.678 1285.09,683.678 1285.65,683.678 1286.21,683.678 1286.77,683.678 1287.33,683.678 1287.89,683.678 1288.45,683.678 1289,683.678 1289.56,683.678 1290.12,683.678 1290.68,683.678 1291.24,683.678 1291.8,683.678 1292.36,683.678 1292.92,683.678 1293.48,683.678 1294.04,683.678 1294.6,683.678 1295.16,683.678 1295.72,683.678 1296.28,683.678 1296.83,683.678 1297.39,683.678 1297.95,683.678 1298.51,683.678 1299.07,683.678 1299.63,683.678 1300.19,683.678 1300.75,683.678 1301.31,683.678 1301.87,683.678 1302.43,683.678 1302.99,683.678 1303.55,683.678 1304.1,683.678 1304.66,683.678 1305.22,683.678 1305.78,683.678 1306.34,683.678 1306.9,683.678 1307.46,683.678 1308.02,683.678 1308.58,683.678 1309.14,683.678 1309.7,683.678 1310.26,683.678 1310.82,683.678 1311.38,683.678 1311.93,683.678 1312.49,683.678 1313.05,683.678 1313.61,683.678 1314.17,683.678 1314.73,683.678 1315.29,683.678 1315.85,683.678 1316.41,683.678 1316.97,683.678 1317.53,683.678 1318.09,683.678 1318.65,683.678 1319.2,683.678 1319.76,683.678 1320.32,683.678 1320.88,683.678 1321.44,683.678 1322,683.678 1322.56,683.678 1323.12,683.678 1323.68,683.678 1324.24,683.678 1324.8,683.678 1325.36,683.678 1325.92,683.678 1326.47,683.678 1327.03,683.678 1327.59,683.678 1328.15,683.678 1328.71,683.678 1329.27,683.678 1329.83,683.678 1330.39,683.678 1330.95,683.678 1331.51,683.678 1332.07,683.678 1332.63,683.678 1333.19,683.678 1333.75,683.678 1334.3,683.678 1334.86,683.678 1335.42,683.678 1335.98,683.678 1336.54,683.678 1337.1,683.678 1337.66,683.678 1338.22,683.678 1338.78,683.678 1339.34,683.678 1339.9,683.678 1340.46,683.678 1341.02,683.678 1341.57,683.678 1342.13,683.678 1342.69,683.678 1343.25,683.678 1343.81,683.678 1344.37,683.678 1344.93,683.678 1345.49,683.678 1346.05,683.678 1346.61,683.678 1347.17,683.678 1347.73,683.678 1348.29,683.678 1348.84,683.678 1349.4,683.678 1349.96,683.678 1350.52,683.678 1351.08,683.678 1351.64,683.678 1352.2,683.678 1352.76,683.678 1353.32,683.678 1353.88,683.678 1354.44,683.678 1355,683.678 1355.56,683.678 1356.12,683.678 1356.67,683.678 1357.23,683.678 1357.79,683.678 1358.35,683.678 1358.91,683.678 1359.47,683.678 1360.03,683.678 1360.59,683.678 1361.15,683.678 1361.71,683.678 1362.27,683.678 1362.83,683.678 1363.39,683.678 1363.94,683.678 1364.5,683.678 1365.06,683.678 1365.62,683.678 1366.18,683.678 1366.74,683.678 1367.3,683.678 1367.86,683.678 1368.42,683.678 1368.98,683.678 1369.54,683.678 1370.1,683.678 1370.66,683.678 1371.21,683.678 1371.77,683.678 1372.33,683.678 1372.89,683.678 1373.45,683.678 1374.01,683.678 1374.57,683.678 1375.13,683.678 1375.69,683.678 1376.25,683.678 1376.81,683.678 1377.37,683.678 1377.93,683.678 1378.49,683.678 1379.04,683.678 1379.6,683.678 1380.16,683.678 1380.72,683.678 1381.28,683.678 1381.84,683.678 1382.4,683.678 1382.96,683.678 1383.52,683.678 1384.08,683.678 1384.64,683.678 1385.2,683.678 1385.76,683.678 1386.31,683.678 1386.87,683.678 1387.43,683.678 1387.99,683.678 1388.55,683.678 1389.11,683.678 1389.67,683.678 1390.23,683.678 1390.79,683.678 1391.35,683.678 1391.91,683.678 1392.47,683.678 1393.03,683.678 1393.58,683.678 1394.14,683.678 1394.7,683.678 1395.26,683.678 1395.82,683.678 1396.38,683.678 1396.94,683.678 1397.5,683.678 1398.06,683.678 1398.62,683.678 1399.18,683.678 1399.74,683.678 1400.3,683.678 1400.86,683.678 1401.41,683.678 1401.97,683.678 1402.53,683.678 1403.09,683.678 1403.65,683.678 1404.21,683.678 1404.77,683.678 1405.33,683.678 1405.89,683.678 1406.45,683.678 1407.01,683.678 1407.57,683.678 1408.13,683.678 1408.68,683.678 1409.24,683.678 1409.8,683.678 1410.36,683.678 1410.92,683.678 1411.48,683.678 1412.04,683.678 1412.6,683.678 1413.16,683.678 1413.72,683.678 1414.28,683.678 1414.84,683.678 1415.4,683.678 1415.95,683.678 1416.51,683.678 1417.07,683.678 1417.63,683.678 1418.19,683.678 1418.75,683.678 1419.31,683.678 1419.87,683.678 1420.43,683.678 1420.99,683.678 1421.55,683.678 1422.11,683.678 1422.67,683.678 1423.23,683.678 1423.78,683.678 1424.34,683.678 1424.9,683.678 1425.46,683.678 1426.02,683.678 1426.58,683.678 1427.14,683.678 1427.7,683.678 1428.26,683.678 1428.82,683.678 1429.38,683.678 1429.94,683.678 1430.5,683.678 1431.05,683.678 1431.61,683.678 1432.17,683.678 1432.73,683.678 1433.29,683.678 1433.85,683.678 1434.41,683.678 1434.97,683.678 1435.53,683.678 1436.09,683.678 1436.65,683.678 1437.21,683.678 1437.77,683.678 1438.33,683.678 1438.88,683.678 1439.44,683.678 1440,683.678 1440.56,683.678 1441.12,683.678 1441.68,683.678 1442.24,683.678 1442.8,683.678 1443.36,683.678 1443.92,683.678 1444.48,683.678 1445.04,683.678 1445.6,683.678 1446.15,683.678 1446.71,683.678 1447.27,683.678 1447.83,683.678 1448.39,683.678 1448.95,683.678 1449.51,683.678 1450.07,683.678 1450.63,683.678 1451.19,683.678 1451.75,683.678 1452.31,683.678 1452.87,683.678 1453.42,683.678 1453.98,683.678 1454.54,683.678 1455.1,683.678 1455.66,683.678 1456.22,683.678 1456.78,683.678 1457.34,683.678 1457.9,683.678 1458.46,683.678 1459.02,683.678 1459.58,683.678 1460.14,683.678 1460.7,683.678 1461.25,683.678 1461.81,683.678 1462.37,683.678 1462.93,683.678 1463.49,683.678 1464.05,683.678 1464.61,683.678 1465.17,683.678 1465.73,683.678 1466.29,683.678 1466.85,683.678 1467.41,683.678 1467.97,683.678 1468.52,683.678 1469.08,683.678 1469.64,683.678 1470.2,683.678 1470.76,683.678 1471.32,683.678 1471.88,683.678 1472.44,683.678 1473,683.678 1473.56,683.678 1474.12,683.678 1474.68,683.678 1475.24,683.678 1475.79,683.678 1476.35,683.678 1476.91,683.678 1477.47,683.678 1478.03,683.678 1478.59,683.678 1479.15,683.678 1479.71,683.678 1480.27,683.678 1480.83,683.678 1481.39,683.678 1481.95,683.678 1482.51,683.678 1483.07,683.678 1483.62,683.678 1484.18,683.678 1484.74,683.678 1485.3,683.678 1485.86,683.678 1486.42,683.678 1486.98,683.678 1487.54,683.678 1488.1,683.678 1488.66,683.678 1489.22,683.678 1489.78,683.678 1490.34,683.678 1490.89,683.678 1491.45,683.678 1492.01,683.678 1492.57,683.678 1493.13,683.678 1493.69,683.678 1494.25,683.678 1494.81,683.678 1495.37,683.678 1495.93,683.678 1496.49,683.678 1497.05,683.678 1497.61,683.678 1498.16,683.678 1498.72,683.678 1499.28,683.678 1499.84,683.678 1500.4,683.678 1500.96,683.678 1501.52,683.678 1502.08,683.678 1502.64,683.678 1503.2,683.678 1503.76,683.678 1504.32,683.678 1504.88,683.678 1505.44,683.678 1505.99,683.678 1506.55,683.678 1507.11,683.678 1507.67,683.678 1508.23,683.678 1508.79,683.678 1509.35,683.678 1509.91,683.678 1510.47,683.678 1511.03,683.678 1511.59,683.678 1512.15,683.678 1512.71,683.678 1513.26,683.678 1513.82,683.678 1514.38,683.678 1514.94,683.678 1515.5,683.678 1516.06,683.678 1516.62,683.678 1517.18,683.678 1517.74,683.678 1518.3,683.678 1518.86,683.678 1519.42,683.678 1519.98,683.678 1520.53,683.678 1521.09,683.678 1521.65,683.678 1522.21,683.678 1522.77,683.678 1523.33,683.678 1523.89,683.678 1524.45,683.678 1525.01,683.678 1525.57,683.678 1526.13,683.678 1526.69,683.678 1527.25,683.678 1527.81,683.678 1528.36,683.678 1528.92,683.678 1529.48,683.678 1530.04,683.678 1530.6,683.678 1531.16,683.678 1531.72,683.678 1532.28,683.678 1532.84,683.678 1533.4,683.678 1533.96,683.678 1534.52,683.678 1535.08,683.678 1535.63,683.678 1536.19,683.678 1536.75,683.678 1537.31,683.678 1537.87,683.678 1538.43,683.678 1538.99,683.678 1539.55,683.678 1540.11,683.678 1540.67,683.678 1541.23,683.678 1541.79,683.678 1542.35,683.678 1542.9,683.678 1543.46,683.678 1544.02,683.678 1544.58,683.678 1545.14,683.678 1545.7,683.678 1546.26,683.678 1546.82,683.678 1547.38,683.678 1547.94,683.678 1548.5,683.678 1549.06,683.678 1549.62,683.678 1550.18,683.678 1550.73,683.678 1551.29,683.678 1551.85,683.678 1552.41,683.678 1552.97,683.678 1553.53,683.678 1554.09,683.678 1554.65,683.678 1555.21,683.678 1555.77,683.678 1556.33,683.678 1556.89,683.678 1557.45,683.678 1558,683.678 1558.56,683.678 1559.12,683.678 1559.68,683.678 1560.24,683.678 1560.8,683.678 1561.36,683.678 1561.92,683.678 1562.48,683.678 1563.04,683.678 1563.6,683.678 1564.16,683.678 1564.72,683.678 1565.28,683.678 1565.83,683.678 1566.39,683.678 1566.95,683.678 1567.51,683.678 1568.07,683.678 1568.63,683.678 1569.19,683.678 1569.75,683.678 1570.31,683.678 1570.87,683.678 1571.43,683.678 1571.99,683.678 1572.55,683.678 1573.1,683.678 1573.66,683.678 1574.22,683.678 1574.78,683.678 1575.34,683.678 1575.9,683.678 1576.46,683.678 1577.02,683.678 1577.58,683.678 1578.14,683.678 1578.7,683.678 1579.26,683.678 1579.82,683.678 1580.37,683.678 1580.93,683.678 1581.49,683.678 1582.05,683.678 1582.61,683.678 1583.17,683.678 1583.73,683.678 1584.29,683.678 1584.85,683.678 1585.41,683.678 1585.97,683.678 1586.53,683.678 1587.09,683.678 1587.65,683.678 1588.2,683.678 1588.76,683.678 1589.32,683.678 1589.88,683.678 1590.44,683.678 1591,683.678 1591.56,683.678 1592.12,683.678 1592.68,683.678 1593.24,683.678 1593.8,683.678 1594.36,683.678 1594.92,683.678 1595.47,683.678 1596.03,683.678 1596.59,683.678 1597.15,683.678 1597.71,683.678 1598.27,683.678 1598.83,683.678 1599.39,683.678 1599.95,683.678 1600.51,683.678 1601.07,683.678 1601.63,683.678 1602.19,683.678 1602.74,683.678 1603.3,683.678 1603.86,683.678 1604.42,683.678 1604.98,683.678 1605.54,683.678 1606.1,683.678 1606.66,683.678 1607.22,683.678 1607.78,683.678 1608.34,683.678 1608.9,683.678 1609.46,683.678 1610.02,683.678 1610.57,683.678 1611.13,683.678 1611.69,683.678 1612.25,683.678 1612.81,683.678 1613.37,683.678 1613.93,683.678 1614.49,683.678 1615.05,683.678 1615.61,683.678 1616.17,683.678 1616.73,683.678 1617.29,683.678 1617.84,683.678 1618.4,683.678 1618.96,683.678 1619.52,683.678 1620.08,683.678 1620.64,683.678 1621.2,683.678 1621.76,683.678 1622.32,683.678 1622.88,683.678 1623.44,683.678 1624,683.678 1624.56,683.678 1625.11,683.678 1625.67,683.678 1626.23,683.678 1626.79,683.678 1627.35,683.678 1627.91,683.678 1628.47,683.678 1629.03,683.678 1629.59,683.678 1630.15,683.678 1630.71,683.678 1631.27,683.678 1631.83,683.678 1632.39,683.678 1632.94,683.678 1633.5,683.678 1634.06,683.678 1634.62,683.678 1635.18,683.678 1635.74,683.678 1636.3,683.678 1636.86,683.678 1637.42,683.678 1637.98,683.678 1638.54,683.678 1639.1,683.678 1639.66,683.678 1640.21,683.678 1640.77,683.678 1641.33,683.678 1641.89,683.678 1642.45,683.678 1643.01,683.678 1643.57,683.678 1644.13,683.678 1644.69,683.678 1645.25,683.678 1645.81,683.678 1646.37,683.678 1646.93,683.678 1647.48,683.678 1648.04,683.678 1648.6,683.678 1649.16,683.678 1649.72,683.678 1650.28,683.678 1650.84,683.678 1651.4,683.678 1651.96,683.678 1652.52,683.678 1653.08,683.678 1653.64,683.678 1654.2,683.678 1654.76,683.678 1655.31,683.678 1655.87,683.678 1656.43,683.678 1656.99,683.678 1657.55,683.678 1658.11,683.678 1658.67,683.678 1659.23,683.678 1659.79,683.678 1660.35,683.678 1660.91,683.678 1661.47,683.678 1662.03,683.678 1662.58,683.678 1663.14,683.678 1663.7,683.678 1664.26,683.678 1664.82,683.678 1665.38,683.678 1665.94,683.678 1666.5,683.678 1667.06,683.678 1667.62,683.678 1668.18,683.678 1668.74,683.678 1669.3,683.678 1669.85,683.678 1670.41,683.678 1670.97,683.678 1671.53,683.678 1672.09,683.678 1672.65,683.678 1673.21,683.678 1673.77,683.678 1674.33,683.678 1674.89,683.678 1675.45,683.678 1676.01,683.678 1676.57,683.678 1677.13,683.678 1677.68,683.678 1678.24,683.678 1678.8,683.678 1679.36,683.678 1679.92,683.678 1680.48,683.678 1681.04,683.678 1681.6,683.678 1682.16,683.678 1682.72,683.678 1683.28,683.678 1683.84,683.678 1684.4,683.678 1684.95,683.678 1685.51,683.678 1686.07,683.678 1686.63,683.678 1687.19,683.678 1687.75,683.678 1688.31,683.678 1688.87,683.678 1689.43,683.678 1689.99,683.678 1690.55,683.678 1691.11,683.678 1691.67,683.678 1692.23,683.678 1692.78,683.678 1693.34,683.678 1693.9,683.678 1694.46,683.678 1695.02,683.678 1695.58,683.678 1696.14,683.678 1696.7,683.678 1697.26,683.678 1697.82,683.678 1698.38,683.678 1698.94,683.678 1699.5,683.678 1700.05,683.678 1700.61,683.678 1701.17,683.678 1701.73,683.678 1702.29,683.678 1702.85,683.678 1703.41,683.678 1703.97,683.678 1704.53,683.678 1705.09,683.678 1705.65,683.678 1706.21,683.678 1706.77,683.678 1707.32,683.678 1707.88,683.678 1708.44,683.678 1709,683.678 1709.56,683.678 1710.12,683.678 1710.68,683.678 1711.24,683.678 1711.8,683.678 1712.36,683.678 1712.92,683.678 1713.48,683.678 1714.04,683.678 1714.6,683.678 1715.15,683.678 1715.71,683.678 1716.27,683.678 1716.83,683.678 1717.39,683.678 1717.95,683.678 1718.51,683.678 1719.07,683.678 1719.63,683.678 1720.19,683.678 1720.75,683.678 1721.31,683.678 1721.87,683.678 1722.42,683.678 1722.98,683.678 1723.54,683.678 1724.1,683.678 1724.66,683.678 1725.22,683.678 1725.78,683.678 1726.34,683.678 1726.9,683.678 1727.46,683.678 1728.02,683.678 1728.58,683.678 1729.14,683.678 1729.69,683.678 1730.25,683.678 1730.81,683.678 1731.37,683.678 1731.93,683.678 1732.49,683.678 1733.05,683.678 1733.61,683.678 1734.17,683.678 1734.73,683.678 1735.29,683.678 1735.85,683.678 1736.41,683.678 1736.97,683.678 1737.52,683.678 1738.08,683.678 1738.64,683.678 1739.2,683.678 1739.76,683.678 1740.32,683.678 1740.88,683.678 1741.44,683.678 1742,683.678 1742.56,683.678 1743.12,683.678 1743.68,683.678 1744.24,683.678 1744.79,683.678 1745.35,683.678 1745.91,683.678 1746.47,683.678 1747.03,683.678 1747.59,683.678 1748.15,683.678 1748.71,683.678 1749.27,683.678 1749.83,683.678 1750.39,683.678 1750.95,683.678 1751.51,683.678 1752.06,683.678 1752.62,683.678 1753.18,683.678 1753.74,683.678 1754.3,683.678 1754.86,683.678 1755.42,683.678 1755.98,683.678 1756.54,683.678 1757.1,683.678 1757.66,683.678 1758.22,683.678 1758.78,683.678 1759.34,683.678 1759.89,683.678 1760.45,683.678 1761.01,683.678 1761.57,683.678 1762.13,683.678 1762.69,683.678 1763.25,683.678 1763.81,683.678 1764.37,683.678 1764.93,683.678 1765.49,683.678 1766.05,683.678 1766.61,683.678 1767.16,683.678 1767.72,683.678 1768.28,683.678 1768.84,683.678 1769.4,683.678 1769.96,683.678 1770.52,683.678 1771.08,683.678 1771.64,683.678 1772.2,683.678 1772.76,683.678 1773.32,683.678 1773.88,683.678 1774.43,683.678 1774.99,683.678 1775.55,683.678 1776.11,683.678 1776.67,683.678 1777.23,683.678 1777.79,683.678 1778.35,683.678 1778.91,683.678 1779.47,683.678 1780.03,683.678 1780.59,683.678 1781.15,683.678 1781.71,683.678 1782.26,683.678 1782.82,683.678 1783.38,683.678 1783.94,683.678 1784.5,683.678 1785.06,683.678 1785.62,683.678 1786.18,683.678 1786.74,683.678 1787.3,683.678 1787.86,683.678 1788.42,683.678 1788.98,683.678 1789.53,683.678 1790.09,683.678 1790.65,683.678 1791.21,683.678 1791.77,683.678 1792.33,683.678 1792.89,683.678 1793.45,683.678 1794.01,683.678 1794.57,683.678 1795.13,683.678 1795.69,683.678 1796.25,683.678 1796.8,683.678 1797.36,683.678 1797.92,683.678 1798.48,683.678 1799.04,683.678 1799.6,683.678 1800.16,683.678 1800.72,683.678 1801.28,683.678 1801.84,683.678 1802.4,683.678 1802.96,683.678 1803.52,683.678 1804.08,683.678 1804.63,683.678 1805.19,683.678 1805.75,683.678 1806.31,683.678 1806.87,683.678 1807.43,683.678 1807.99,683.678 1808.55,683.678 1809.11,683.678 1809.67,683.678 1810.23,683.678 1810.79,683.678 1811.35,683.678 1811.9,683.678 1812.46,683.678 1813.02,683.678 1813.58,683.678 1814.14,683.678 1814.7,683.678 1815.26,683.678 1815.82,683.678 1816.38,683.678 1816.94,683.678 1817.5,683.678 1818.06,683.678 1818.62,683.678 1819.18,683.678 1819.73,683.678 1820.29,683.678 1820.85,683.678 1821.41,683.678 1821.97,683.678 1822.53,683.678 1823.09,683.678 1823.65,683.678 1824.21,683.678 1824.77,683.678 1825.33,683.678 1825.89,683.678 1826.45,683.678 1827,683.678 1827.56,683.678 1828.12,683.678 1828.68,683.678 1829.24,683.678 1829.8,683.678 1830.36,683.678 1830.92,683.678 1831.48,683.678 1832.04,683.678 1832.6,683.678 1833.16,683.678 1833.72,683.678 1834.27,683.678 1834.83,683.678 1835.39,683.678 1835.95,683.678 1836.51,683.678 1837.07,683.678 1837.63,683.678 1838.19,683.678 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.028571066813446 ± 0.025334123169409514\nProjected Energy: -4.01555667891901 ± (0.004639374519185502, 0.004566528510912882)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.451831</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.2824e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0841e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.298e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.242e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.645e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.815e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321637\n -3.363124291613353\n -0.759019192277087\n  0.13584182219622498\n  0.15789998694607554\n  0.8767114411781307\n  1.5305929970973375\n  1.583573261186734\n  3.072870330325867\n  3.1256726539518294\n  4.862107221562172\n  6.260694850380599\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factorexp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is deterimed by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
