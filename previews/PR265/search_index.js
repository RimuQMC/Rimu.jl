var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip410\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip410)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip411\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip410)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip412\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip410)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.03 2211.02,1003.03 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.215 2211.02,745.215 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.401 2211.02,487.401 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.588 2211.02,229.588 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.03 423.181,1003.03 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.215 423.181,745.215 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.401 423.181,487.401 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.588 423.181,229.588 \"/>\n<path clip-path=\"url(#clip410)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.75 349.094 1260.88 Q349.094 1267.98 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.98 363.608 1260.88 Q363.608 1253.75 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.94 Q362.149 1242.94 365.205 1247.54 Q368.284 1252.13 368.284 1260.88 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.88 Q344.395 1252.13 347.45 1247.54 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M290.043 1016.37 L306.363 1016.37 L306.363 1020.31 L284.418 1020.31 L284.418 1016.37 Q287.08 1013.62 291.664 1008.99 Q296.27 1004.34 297.451 1002.99 Q299.696 1000.47 300.576 998.734 Q301.478 996.975 301.478 995.285 Q301.478 992.53 299.534 990.794 Q297.613 989.058 294.511 989.058 Q292.312 989.058 289.858 989.822 Q287.427 990.586 284.65 992.137 L284.65 987.415 Q287.474 986.28 289.927 985.702 Q292.381 985.123 294.418 985.123 Q299.789 985.123 302.983 987.808 Q306.177 990.493 306.177 994.984 Q306.177 997.114 305.367 999.035 Q304.58 1000.93 302.474 1003.53 Q301.895 1004.2 298.793 1007.41 Q295.691 1010.61 290.043 1016.37 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M316.224 985.748 L334.58 985.748 L334.58 989.683 L320.506 989.683 L320.506 998.155 Q321.524 997.808 322.543 997.646 Q323.562 997.461 324.58 997.461 Q330.367 997.461 333.747 1000.63 Q337.126 1003.8 337.126 1009.22 Q337.126 1014.8 333.654 1017.9 Q330.182 1020.98 323.862 1020.98 Q321.687 1020.98 319.418 1020.61 Q317.173 1020.24 314.765 1019.5 L314.765 1014.8 Q316.849 1015.93 319.071 1016.49 Q321.293 1017.04 323.77 1017.04 Q327.774 1017.04 330.112 1014.94 Q332.45 1012.83 332.45 1009.22 Q332.45 1005.61 330.112 1003.5 Q327.774 1001.4 323.77 1001.4 Q321.895 1001.4 320.02 1001.81 Q318.168 1002.23 316.224 1003.11 L316.224 985.748 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M356.339 988.827 Q352.728 988.827 350.899 992.391 Q349.094 995.933 349.094 1003.06 Q349.094 1010.17 350.899 1013.73 Q352.728 1017.28 356.339 1017.28 Q359.973 1017.28 361.779 1013.73 Q363.608 1010.17 363.608 1003.06 Q363.608 995.933 361.779 992.391 Q359.973 988.827 356.339 988.827 M356.339 985.123 Q362.149 985.123 365.205 989.729 Q368.284 994.313 368.284 1003.06 Q368.284 1011.79 365.205 1016.4 Q362.149 1020.98 356.339 1020.98 Q350.529 1020.98 347.45 1016.4 Q344.395 1011.79 344.395 1003.06 Q344.395 994.313 347.45 989.729 Q350.529 985.123 356.339 985.123 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M286.062 727.935 L304.418 727.935 L304.418 731.87 L290.344 731.87 L290.344 740.342 Q291.363 739.995 292.381 739.833 Q293.4 739.648 294.418 739.648 Q300.205 739.648 303.585 742.819 Q306.964 745.99 306.964 751.407 Q306.964 756.985 303.492 760.087 Q300.02 763.166 293.701 763.166 Q291.525 763.166 289.256 762.796 Q287.011 762.425 284.603 761.684 L284.603 756.985 Q286.687 758.12 288.909 758.675 Q291.131 759.231 293.608 759.231 Q297.613 759.231 299.951 757.124 Q302.288 755.018 302.288 751.407 Q302.288 747.796 299.951 745.689 Q297.613 743.583 293.608 743.583 Q291.733 743.583 289.858 743.999 Q288.006 744.416 286.062 745.296 L286.062 727.935 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M326.177 731.013 Q322.566 731.013 320.737 734.578 Q318.932 738.12 318.932 745.249 Q318.932 752.356 320.737 755.921 Q322.566 759.462 326.177 759.462 Q329.811 759.462 331.617 755.921 Q333.446 752.356 333.446 745.249 Q333.446 738.12 331.617 734.578 Q329.811 731.013 326.177 731.013 M326.177 727.31 Q331.987 727.31 335.043 731.916 Q338.122 736.499 338.122 745.249 Q338.122 753.976 335.043 758.583 Q331.987 763.166 326.177 763.166 Q320.367 763.166 317.288 758.583 Q314.233 753.976 314.233 745.249 Q314.233 736.499 317.288 731.916 Q320.367 727.31 326.177 727.31 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M356.339 731.013 Q352.728 731.013 350.899 734.578 Q349.094 738.12 349.094 745.249 Q349.094 752.356 350.899 755.921 Q352.728 759.462 356.339 759.462 Q359.973 759.462 361.779 755.921 Q363.608 752.356 363.608 745.249 Q363.608 738.12 361.779 734.578 Q359.973 731.013 356.339 731.013 M356.339 727.31 Q362.149 727.31 365.205 731.916 Q368.284 736.499 368.284 745.249 Q368.284 753.976 365.205 758.583 Q362.149 763.166 356.339 763.166 Q350.529 763.166 347.45 758.583 Q344.395 753.976 344.395 745.249 Q344.395 736.499 347.45 731.916 Q350.529 727.31 356.339 727.31 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M284.835 470.121 L307.057 470.121 L307.057 472.112 L294.511 504.681 L289.627 504.681 L301.432 474.057 L284.835 474.057 L284.835 470.121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M316.224 470.121 L334.58 470.121 L334.58 474.057 L320.506 474.057 L320.506 482.529 Q321.524 482.182 322.543 482.019 Q323.562 481.834 324.58 481.834 Q330.367 481.834 333.747 485.006 Q337.126 488.177 337.126 493.594 Q337.126 499.172 333.654 502.274 Q330.182 505.353 323.862 505.353 Q321.687 505.353 319.418 504.982 Q317.173 504.612 314.765 503.871 L314.765 499.172 Q316.849 500.306 319.071 500.862 Q321.293 501.418 323.77 501.418 Q327.774 501.418 330.112 499.311 Q332.45 497.205 332.45 493.594 Q332.45 489.982 330.112 487.876 Q327.774 485.769 323.77 485.769 Q321.895 485.769 320.02 486.186 Q318.168 486.603 316.224 487.482 L316.224 470.121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M356.339 473.2 Q352.728 473.2 350.899 476.765 Q349.094 480.307 349.094 487.436 Q349.094 494.543 350.899 498.107 Q352.728 501.649 356.339 501.649 Q359.973 501.649 361.779 498.107 Q363.608 494.543 363.608 487.436 Q363.608 480.307 361.779 476.765 Q359.973 473.2 356.339 473.2 M356.339 469.496 Q362.149 469.496 365.205 474.103 Q368.284 478.686 368.284 487.436 Q368.284 496.163 365.205 500.769 Q362.149 505.353 356.339 505.353 Q350.529 505.353 347.45 500.769 Q344.395 496.163 344.395 487.436 Q344.395 478.686 347.45 474.103 Q350.529 469.496 356.339 469.496 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M256.664 242.933 L264.303 242.933 L264.303 216.567 L255.992 218.234 L255.992 213.975 L264.256 212.308 L268.932 212.308 L268.932 242.933 L276.571 242.933 L276.571 246.868 L256.664 246.868 L256.664 242.933 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M296.015 215.387 Q292.404 215.387 290.576 218.952 Q288.77 222.493 288.77 229.623 Q288.77 236.729 290.576 240.294 Q292.404 243.836 296.015 243.836 Q299.65 243.836 301.455 240.294 Q303.284 236.729 303.284 229.623 Q303.284 222.493 301.455 218.952 Q299.65 215.387 296.015 215.387 M296.015 211.683 Q301.826 211.683 304.881 216.29 Q307.96 220.873 307.96 229.623 Q307.96 238.35 304.881 242.956 Q301.826 247.539 296.015 247.539 Q290.205 247.539 287.127 242.956 Q284.071 238.35 284.071 229.623 Q284.071 220.873 287.127 216.29 Q290.205 211.683 296.015 211.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M326.177 215.387 Q322.566 215.387 320.737 218.952 Q318.932 222.493 318.932 229.623 Q318.932 236.729 320.737 240.294 Q322.566 243.836 326.177 243.836 Q329.811 243.836 331.617 240.294 Q333.446 236.729 333.446 229.623 Q333.446 222.493 331.617 218.952 Q329.811 215.387 326.177 215.387 M326.177 211.683 Q331.987 211.683 335.043 216.29 Q338.122 220.873 338.122 229.623 Q338.122 238.35 335.043 242.956 Q331.987 247.539 326.177 247.539 Q320.367 247.539 317.288 242.956 Q314.233 238.35 314.233 229.623 Q314.233 220.873 317.288 216.29 Q320.367 211.683 326.177 211.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M356.339 215.387 Q352.728 215.387 350.899 218.952 Q349.094 222.493 349.094 229.623 Q349.094 236.729 350.899 240.294 Q352.728 243.836 356.339 243.836 Q359.973 243.836 361.779 240.294 Q363.608 236.729 363.608 229.623 Q363.608 222.493 361.779 218.952 Q359.973 215.387 356.339 215.387 M356.339 211.683 Q362.149 211.683 365.205 216.29 Q368.284 220.873 368.284 229.623 Q368.284 238.35 365.205 242.956 Q362.149 247.539 356.339 247.539 Q350.529 247.539 347.45 242.956 Q344.395 238.35 344.395 229.623 Q344.395 220.873 347.45 216.29 Q350.529 211.683 356.339 211.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip412)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.588 4017.76,229.588 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1247.36 456.554,1247.42 457.123,1247.37 457.691,1247.26 458.259,1247.07 458.828,1246.77 459.396,1246.35 459.964,1244.83 460.533,1244.4 461.101,1243.84 461.669,1243.17 462.238,1242.44 462.806,1240.58 463.375,1239.71 463.943,1238.75 464.511,1236.66 465.08,1234.52 465.648,1232.28 466.216,1231 466.785,1228.55 467.353,1227.04 467.921,1224.42 468.49,1222.7 469.058,1219.82 469.626,1216.8 470.195,1214.69 470.763,1211.39 471.331,1208.98 471.9,1205.34 472.468,1202.53 473.036,1197.57 473.605,1194.39 474.173,1191.14 474.741,1187.71 475.31,1184.09 475.878,1180.19 476.446,1176.1 477.015,1171.84 477.583,1166.29 478.152,1161.59 478.72,1155.73 479.288,1150.56 479.857,1144.13 480.425,1137.51 480.993,1131.71 481.562,1125.67 482.13,1117.39 482.698,1110.87 483.267,1103.14 483.835,1095.33 484.403,1088.25 484.972,1077.98 485.54,1070.68 486.108,1062.15 486.677,1054.26 487.245,1046.33 487.813,1037.13 488.382,1027.8 488.95,1019.23 489.518,1009.61 490.087,999.781 490.655,990.918 491.224,980.685 491.792,970.474 492.36,960.107 492.929,948.688 493.497,939.316 494.065,929.736 494.634,916.982 495.202,903.155 495.77,893.55 496.339,883.718 496.907,874.094 497.475,862.29 498.044,852.362 498.612,839.478 499.18,827.662 499.749,813.772 500.317,802.994 500.885,793.516 501.454,782.152 502.022,770.672 502.59,760.392 503.159,749.053 503.727,739.77 504.295,727.689 504.864,717.623 505.432,708.659 506.001,695.616 506.569,683.891 507.137,675.178 507.706,664.824 508.274,654.331 508.842,646.009 509.411,636.689 509.979,626.647 510.547,618.588 511.116,608.697 511.684,600.949 512.252,591.154 512.821,579.577 513.389,571.39 513.957,563.318 514.526,554.437 515.094,546.739 515.662,538.37 516.231,531.892 516.799,521.771 517.367,513.846 517.936,508.119 518.504,500.615 519.072,495.095 519.641,489.704 520.209,483.379 520.778,475.216 521.346,469.085 521.914,462.291 522.483,455.475 523.051,448.736 523.619,442.174 524.188,435.68 524.756,431.462 525.324,425.325 525.893,419.299 526.461,415.543 527.029,410.953 527.598,407.324 528.166,402.658 528.734,397.267 529.303,393.945 529.871,387.435 530.439,384.493 531.008,379.367 531.576,373.331 532.144,368.902 532.713,365.67 533.281,360.159 533.85,355.94 534.418,354.765 534.986,352.617 535.555,352.517 536.123,347.299 536.691,345.199 537.26,338.273 537.828,336.706 538.396,334.135 538.965,332.082 539.533,327.245 540.101,324.807 540.67,320.295 541.238,317.05 541.806,314.799 542.375,313.772 542.943,314.761 543.511,310.718 544.08,307.788 544.648,305.951 545.216,306.16 545.785,302.326 546.353,301.552 546.921,300.832 547.49,300.146 548.058,298.126 548.627,298.432 549.195,296.511 549.763,297.86 550.332,296.628 550.9,294.475 551.468,291.68 552.037,290.983 552.605,289.095 553.173,288.122 553.742,287.315 554.31,285.524 554.878,283.957 555.447,283.257 556.015,281.438 556.583,280.803 557.152,281.082 557.72,281.455 558.288,279.587 558.857,277.894 559.425,278.324 559.993,273.493 560.562,272.075 561.13,269.586 561.698,269.377 562.267,268.056 562.835,266.027 563.404,264.885 563.972,265.923 564.54,264.876 565.109,262.602 565.677,260.6 566.245,261.741 566.814,261.659 567.382,261.807 567.95,264.822 568.519,262.356 569.087,259.827 569.655,257.628 570.224,260.591 570.792,258.272 571.36,256.042 571.929,255.118 572.497,255.5 573.065,254.531 573.634,254.718 574.202,252.889 574.77,253.144 575.339,252.987 575.907,252.957 576.476,254.224 577.044,254.272 577.612,253.421 578.181,252.433 578.749,252.483 579.317,251.539 579.886,250.837 580.454,250.978 581.022,252.186 581.591,252.396 582.159,251.355 582.727,250.379 583.296,249.472 583.864,248.457 584.432,250.738 585.001,249.641 585.569,248.763 586.137,249.978 586.706,248.932 587.274,248.014 587.842,248.234 588.411,249.393 588.979,249.369 589.547,249.307 590.116,249.153 590.684,245.679 591.253,248.805 591.821,249.584 592.389,248.353 592.958,247.253 593.526,246.889 594.094,248.11 594.663,246.091 595.231,244.981 595.799,245.961 596.368,246.873 596.936,246.827 597.504,245.606 598.073,243.596 598.641,243.61 599.209,243.576 599.778,243.574 600.346,242.598 600.914,241.554 601.483,242.627 602.051,241.659 602.619,241.668 603.188,241.881 603.756,239.785 604.325,240.898 604.893,241.019 605.461,240.946 606.03,242.39 606.598,242.29 607.166,242.26 607.735,242.272 608.303,241.068 608.871,241.158 609.44,243.093 610.008,242.965 610.576,241.911 611.145,239.844 611.713,239.995 612.281,237.89 612.85,236.058 613.418,235.246 613.986,236.648 614.555,236.928 615.123,238.162 615.691,237.363 616.26,235.895 616.828,237.233 617.396,238.409 617.965,236.43 618.533,237.623 619.102,235.709 619.67,235.151 620.238,237.624 620.807,237.672 621.375,236.628 621.943,235.719 622.512,234.886 623.08,237.427 623.648,236.598 624.217,235.697 624.785,236.097 625.353,237.411 625.922,237.673 626.49,238.704 627.058,239.548 627.627,239.433 628.195,237.499 628.763,238.599 629.332,237.448 629.9,236.533 630.468,236.704 631.037,236.6 631.605,235.535 632.173,233.615 632.742,234.23 633.31,235.431 633.879,234.445 634.447,234.81 635.015,236.948 635.584,238.22 636.152,237.047 636.72,234.878 637.289,234.172 637.857,234.368 638.425,235.532 638.994,235.757 639.562,237.952 640.13,235.832 640.699,236.048 641.267,236.255 641.835,235.514 642.404,233.757 642.972,234.978 643.54,234.341 644.109,234.548 644.677,230.687 645.245,230.912 645.814,230.299 646.382,229.707 646.951,233.426 647.519,233.714 648.087,235.053 648.656,234.377 649.224,234.695 649.792,237.036 650.361,237.255 650.929,239.21 651.497,239.256 652.066,238.21 652.634,236.932 653.202,234.77 653.771,233.893 654.339,233.041 654.907,234.259 655.476,235.098 656.044,234.107 656.612,233.087 657.181,234.28 657.749,234.383 658.317,232.402 658.886,230.497 659.454,230.849 660.022,230.967 660.591,230.278 661.159,230.696 661.728,231.985 662.296,232.483 662.864,231.723 663.433,231.028 664.001,230.5 664.569,230.823 665.138,232.304 665.706,231.41 666.274,231.598 666.843,233.077 667.411,233.439 667.979,234.856 668.548,238.126 669.116,238.889 669.684,237.42 670.253,237.383 670.821,237.294 671.389,237.085 671.958,238.238 672.526,240.159 673.094,237.868 673.663,237.649 674.231,236.62 674.799,236.458 675.368,237.55 675.936,238.34 676.505,238.109 677.073,236.745 677.641,237.481 678.21,238.296 678.778,242.102 679.346,241.487 679.915,240.959 680.483,240.317 681.051,240.867 681.62,239.196 682.188,237.627 682.756,235.258 683.325,235.095 683.893,236.985 684.461,236.505 685.03,235.259 685.598,236.254 686.166,235.831 686.735,235.651 687.303,235.295 687.871,235.223 688.44,237.112 689.008,235.507 689.577,235.272 690.145,237.374 690.713,236.192 691.282,233.894 691.85,231.884 692.418,232.22 692.987,231.976 693.555,229.038 694.123,229.347 694.692,229.765 695.26,231.956 695.828,230.855 696.397,231.121 696.965,231.231 697.533,230.119 698.102,230.418 698.67,228.61 699.238,225.792 699.807,227.229 700.375,225.558 700.943,225.929 701.512,226.417 702.08,229.981 702.648,231.421 703.217,232.567 703.785,230.738 704.354,230.96 704.922,231.087 705.49,233.175 706.059,233.311 706.627,232.06 707.195,231.987 707.764,232.103 708.332,231.913 708.9,232.133 709.469,232.212 710.037,232.292 710.605,231.242 711.174,232.597 711.742,231.479 712.31,232.442 712.879,233.452 713.447,234.495 714.015,232.413 714.584,236.535 715.152,235.225 715.72,235.082 716.289,235.023 716.857,231.851 717.425,229.905 717.994,228.206 718.562,226.712 719.131,228.344 719.699,227.771 720.267,226.063 720.836,227.662 721.404,229.107 721.972,229.597 722.541,228.957 723.109,227.164 723.677,227.747 724.246,230.221 724.814,229.349 725.382,229.567 725.951,229.918 726.519,232.242 727.087,229.45 727.656,226.617 728.224,225.262 728.792,223.112 729.361,224.781 729.929,225.471 730.497,225.271 731.066,225.969 731.634,228.609 732.203,228.995 732.771,230.29 733.339,230.708 733.908,231.855 734.476,232.07 735.044,232.187 735.613,230.241 736.181,230.438 736.749,230.782 737.318,232.038 737.886,233.355 738.454,231.484 739.023,230.431 739.591,229.729 740.159,232.402 740.728,233.464 741.296,232.376 741.864,231.399 742.433,231.58 743.001,229.489 743.569,229.727 744.138,231.046 744.706,232.391 745.274,229.344 745.843,230.71 746.411,229.728 746.98,230.069 747.548,232.219 748.116,232.078 748.685,232.028 749.253,232.068 749.821,233.21 750.39,231.185 750.958,231.341 751.526,233.577 752.095,234.39 752.663,234.386 753.231,235.21 753.8,238.179 754.368,238.042 754.936,236.645 755.505,238.474 756.073,239.061 756.641,241.819 757.21,242.23 757.778,243.511 758.346,243.858 758.915,241.853 759.483,243.221 760.052,241.489 760.62,240.503 761.188,240.933 761.757,241.216 762.325,239.453 762.893,237.563 763.462,239.13 764.03,236.359 764.598,236.013 765.167,235.747 765.735,232.963 766.303,233.828 766.872,235.276 767.44,235.866 768.008,235.653 768.577,236.109 769.145,235.463 769.713,233.85 770.282,233.687 770.85,235.145 771.418,231.599 771.987,229.338 772.555,227.984 773.123,228.03 773.692,227.166 774.26,229.19 774.829,228.938 775.397,228.062 775.965,228.175 776.534,228.25 777.102,228.235 777.67,228.225 778.239,228.477 778.807,227.425 779.375,226.399 779.944,225.649 780.512,222.906 781.08,225.376 781.649,225.706 782.217,226.01 782.785,227.331 783.354,229.403 783.922,230.487 784.49,231.308 785.059,235.109 785.627,233.745 786.195,233.519 786.764,235.343 787.332,234.869 787.9,234.551 788.469,234.35 789.037,234.035 789.606,233.849 790.174,233.336 790.742,232.07 791.311,230.732 791.879,230.504 792.447,230.229 793.016,231.071 793.584,231.994 794.152,230.894 794.721,231.559 795.289,231.434 795.857,230.346 796.426,229.101 796.994,227.159 797.562,228.148 798.131,229.331 798.699,230.257 799.267,231.347 799.836,232.338 800.404,232.082 800.972,229.985 801.541,227.929 802.109,224.999 802.678,224.174 803.246,225.61 803.814,224.829 804.383,225.969 804.951,224.017 805.519,224.437 806.088,224.808 806.656,226.088 807.224,225.312 807.793,225.706 808.361,225.914 808.929,229.527 809.498,229.619 810.066,227.709 810.634,225.749 811.203,225.018 811.771,225.316 812.339,224.9 812.908,225.198 813.476,224.682 814.044,225.186 814.613,225.639 815.181,223.999 815.749,221.326 816.318,223.129 816.886,226.119 817.455,226.545 818.023,227.89 818.591,228.223 819.16,230.691 819.728,229.554 820.296,232.619 820.865,229.194 821.433,229.199 822.001,229.348 822.57,231.863 823.138,230.784 823.706,227.68 824.275,226.993 824.843,229.346 825.411,232.701 825.98,231.807 826.548,229.606 827.116,227.755 827.685,228.04 828.253,228.265 828.821,227.436 829.39,227.892 829.958,230.227 830.526,231.373 831.095,232.41 831.663,232.009 832.232,235.013 832.8,235.908 833.368,236.791 833.937,236.521 834.505,236.264 835.073,232.861 835.642,231.798 836.21,231.8 836.778,231.725 837.347,231.641 837.915,232.631 838.483,234.422 839.052,233.118 839.62,232.875 840.188,231.633 840.757,231.388 841.325,231.428 841.893,231.57 842.462,232.317 843.03,231.125 843.598,233.093 844.167,233.034 844.735,232.969 845.304,233.87 845.872,233.507 846.44,235.264 847.009,231.779 847.577,232.494 848.145,234.384 848.714,235.135 849.282,238.77 849.85,239.337 850.419,238.666 850.987,237.716 851.555,235.83 852.124,236.423 852.692,235.799 853.26,235.385 853.829,233.767 854.397,233.445 854.965,233.077 855.534,231.72 856.102,229.373 856.67,228.134 857.239,226.119 857.807,224.386 858.375,224.83 858.944,225.039 859.512,226.396 860.081,226.593 860.649,221.753 861.217,225.493 861.786,226.68 862.354,226.023 862.922,225.948 863.491,224.222 864.059,225.445 864.627,226.907 865.196,227.049 865.764,225.347 866.332,225.663 866.901,226.871 867.469,229.233 868.037,228.286 868.606,227.415 869.174,226.506 869.742,225.671 870.311,224.866 870.879,224.043 871.447,222.276 872.016,222.711 872.584,223.259 873.152,224.88 873.721,226.379 874.289,225.676 874.858,226.098 875.426,226.308 875.994,227.685 876.563,226.825 877.131,227.2 877.699,228.39 878.268,228.545 878.836,229.791 879.404,235.071 879.973,236.902 880.541,236.377 881.109,237.383 881.678,235.638 882.246,235.086 882.814,234.761 883.383,233.42 883.951,233.245 884.519,233.113 885.088,233.951 885.656,233.69 886.224,232.432 886.793,232.094 887.361,234.145 887.93,233.75 888.498,232.338 889.066,233.339 889.635,232.054 890.203,232.025 890.771,229.868 891.34,230.948 891.908,229.872 892.476,230.875 893.045,230.48 893.613,226.284 894.181,227.789 894.75,229.135 895.318,228.135 895.886,230.362 896.455,228.291 897.023,229.57 897.591,230.674 898.16,231.621 898.728,229.511 899.296,229.259 899.865,229.215 900.433,228.119 901.001,226.187 901.57,225.429 902.138,224.895 902.707,225.195 903.275,226.626 903.843,225.717 904.412,224.193 904.98,224.789 905.548,224.074 906.117,222.822 906.685,223.512 907.253,225.188 907.822,225.515 908.39,225.033 908.958,227.476 909.527,227.737 910.095,227.952 910.663,226.85 911.232,224.976 911.8,223.143 912.368,224.535 912.937,223.872 913.505,223.205 914.073,222.663 914.642,223.277 915.21,222.736 915.779,223.242 916.347,223.818 916.915,224.449 917.484,228.081 918.052,230.466 918.62,231.767 919.189,231.729 919.757,233.923 920.325,236.949 920.894,237.416 921.462,237.192 922.03,234.782 922.599,236.679 923.167,237.542 923.735,237.934 924.304,237.225 924.872,236.702 925.44,233.246 926.009,232 926.577,231.922 927.145,230.983 927.714,230.796 928.282,233.122 928.85,231.986 929.419,231.731 929.987,232.786 930.556,235.739 931.124,236.412 931.692,234.854 932.261,233.55 932.829,232.504 933.397,233.328 933.966,234.392 934.534,235.25 935.102,234.776 935.671,233.345 936.239,231.893 936.807,233.735 937.376,232.358 937.944,232.307 938.512,233.191 939.081,234.208 939.649,234.118 940.217,234.683 940.786,233.309 941.354,233.003 941.922,231.575 942.491,233.333 943.059,233.011 943.627,233.661 944.196,232.557 944.764,233.338 945.333,233.157 945.901,233.987 946.469,233.778 947.038,232.586 947.606,231.489 948.174,230.312 948.743,230.368 949.311,229.22 949.879,228.175 950.448,226.219 951.016,227.432 951.584,227.687 952.153,228.504 952.721,227.364 953.289,226.449 953.858,225.688 954.426,224.03 954.994,226.536 955.563,226.71 956.131,225.82 956.699,223.199 957.268,224.726 957.836,225.75 958.405,229.083 958.973,227.094 959.541,228.264 960.11,227.278 960.678,227.532 961.246,227.602 961.815,228.812 962.383,229.087 962.951,228.206 963.52,229.322 964.088,229.455 964.656,231.54 965.225,233.707 965.793,233.259 966.361,233.152 966.93,233.138 967.498,233.049 968.066,230.931 968.635,229.758 969.203,228.735 969.771,228.71 970.34,229.842 970.908,229.774 971.476,229.712 972.045,230.108 972.613,232.263 973.182,231.986 973.75,231.643 974.318,230.58 974.887,229.457 975.455,231.651 976.023,232.438 976.592,232.158 977.16,232.063 977.728,231.938 978.297,233.868 978.865,231.52 979.433,231.528 980.002,230.253 980.57,230.067 981.138,232.117 981.707,233.03 982.275,234.853 982.843,231.556 983.412,231.461 983.98,231.287 984.548,231.273 985.117,230.026 985.685,232.012 986.253,230.762 986.822,229.508 987.39,231.511 987.959,229.28 988.527,231.323 989.095,231.118 989.664,231.962 990.232,231.717 990.8,230.554 991.369,231.645 991.937,231.552 992.505,231.425 993.074,232.263 993.642,231.142 994.21,231.982 994.779,229.685 995.347,229.608 995.915,231.681 996.484,233.605 997.052,236.43 997.62,235.942 998.189,235.217 998.757,234.852 999.325,234.52 999.894,233.229 1000.46,232.88 1001.03,230.33 1001.6,230.041 1002.17,227.903 1002.74,226.819 1003.3,228.026 1003.87,226.947 1004.44,227.058 1005.01,225.121 1005.58,224.26 1006.15,224.515 1006.71,224.583 1007.28,224.995 1007.85,227.491 1008.42,225.667 1008.99,225.998 1009.56,226.066 1010.12,227.213 1010.69,227.48 1011.26,229.734 1011.83,229.746 1012.4,231.893 1012.97,233.755 1013.53,232.389 1014.1,230.089 1014.67,230.795 1015.24,231.73 1015.81,230.547 1016.38,232.296 1016.94,230.955 1017.51,230.869 1018.08,228.656 1018.65,227.68 1019.22,226.712 1019.79,224.917 1020.35,225.02 1020.92,226.01 1021.49,231.279 1022.06,231.297 1022.63,229.159 1023.2,230.101 1023.76,228.906 1024.33,228.952 1024.9,227.943 1025.47,226.063 1026.04,225.069 1026.61,224.317 1027.17,224.645 1027.74,221.895 1028.31,222.691 1028.88,222.096 1029.45,221.918 1030.02,223.307 1030.58,224.995 1031.15,226.485 1031.72,224.926 1032.29,225.325 1032.86,227.85 1033.43,226.947 1033.99,228.31 1034.56,229.662 1035.13,230.941 1035.7,228.683 1036.27,227.853 1036.84,228.086 1037.4,230.267 1037.97,229.369 1038.54,228.411 1039.11,228.617 1039.68,226.561 1040.25,226.972 1040.81,228.139 1041.38,227.332 1041.95,229.477 1042.52,229.674 1043.09,228.71 1043.66,229.046 1044.22,227.986 1044.79,229.223 1045.36,230.572 1045.93,230.47 1046.5,231.377 1047.07,233.486 1047.63,232.482 1048.2,230.205 1048.77,229.171 1049.34,229.191 1049.91,231.245 1050.48,230.265 1051.05,231.671 1051.61,231.434 1052.18,231.451 1052.75,229.254 1053.32,229.098 1053.89,225.038 1054.46,224.272 1055.02,226.891 1055.59,229.039 1056.16,229.383 1056.73,229.177 1057.3,230.241 1057.87,231.405 1058.43,232.264 1059,234.275 1059.57,235.001 1060.14,234.736 1060.71,234.39 1061.28,235.129 1061.84,233.681 1062.41,234.405 1062.98,233.821 1063.55,234.745 1064.12,233.428 1064.69,232.324 1065.25,234.189 1065.82,233.808 1066.39,235.377 1066.96,233.974 1067.53,233.889 1068.1,233.521 1068.66,232.176 1069.23,231.007 1069.8,229.723 1070.37,228.945 1070.94,225.845 1071.51,226.266 1072.07,229.675 1072.64,229.722 1073.21,227.904 1073.78,227.916 1074.35,226.796 1074.92,228.089 1075.48,229.273 1076.05,229.065 1076.62,230.084 1077.19,231.054 1077.76,233.022 1078.33,232.902 1078.89,231.388 1079.46,230.139 1080.03,229.063 1080.6,229.019 1081.17,227.978 1081.74,230.151 1082.3,228.356 1082.87,227.385 1083.44,225.396 1084.01,226.764 1084.58,226.975 1085.15,227.1 1085.71,228.386 1086.28,227.714 1086.85,228.916 1087.42,233.072 1087.99,231.721 1088.56,232.64 1089.12,233.318 1089.69,231.973 1090.26,231.834 1090.83,233.93 1091.4,233.521 1091.97,232.266 1092.53,232.033 1093.1,234.883 1093.67,234.381 1094.24,233.973 1094.81,231.664 1095.38,232.378 1095.94,231.976 1096.51,231.842 1097.08,230.494 1097.65,228.429 1098.22,228.478 1098.79,228.429 1099.35,229.575 1099.92,229.378 1100.49,227.316 1101.06,229.507 1101.63,229.566 1102.2,228.516 1102.76,228.46 1103.33,227.509 1103.9,227.795 1104.47,226.999 1105.04,224.085 1105.61,223.382 1106.17,223.694 1106.74,224.171 1107.31,225.433 1107.88,223.732 1108.45,222.205 1109.02,221.488 1109.58,219.895 1110.15,221.76 1110.72,223.33 1111.29,226.976 1111.86,227.082 1112.43,230.43 1112.99,228.448 1113.56,230.65 1114.13,230.354 1114.7,230.095 1115.27,230.127 1115.84,230.246 1116.4,230.274 1116.97,231.283 1117.54,232.356 1118.11,231.179 1118.68,230.153 1119.25,224.99 1119.81,225.346 1120.38,225.741 1120.95,226.077 1121.52,225.351 1122.09,225.859 1122.66,225.022 1123.23,225.523 1123.79,227.031 1124.36,227.287 1124.93,227.596 1125.5,226.743 1126.07,227.97 1126.64,229.024 1127.2,231.964 1127.77,231.848 1128.34,231.777 1128.91,232.457 1129.48,232.286 1130.05,232.037 1130.61,232.997 1131.18,232.847 1131.75,232.685 1132.32,232.566 1132.89,231.369 1133.46,232.39 1134.02,232.35 1134.59,232.264 1135.16,232.112 1135.73,231.844 1136.3,230.666 1136.87,229.501 1137.43,230.369 1138,231.492 1138.57,230.437 1139.14,229.438 1139.71,230.666 1140.28,232.575 1140.84,232.282 1141.41,233.278 1141.98,232.897 1142.55,234.966 1143.12,233.512 1143.69,235.209 1144.25,236.041 1144.82,234.646 1145.39,233.371 1145.96,232.953 1146.53,232.907 1147.1,231.803 1147.66,234.598 1148.23,235.199 1148.8,234.964 1149.37,234.475 1149.94,234.012 1150.51,232.708 1151.07,232.633 1151.64,231.57 1152.21,231.357 1152.78,232.361 1153.35,233.251 1153.92,230.834 1154.48,231.843 1155.05,230.77 1155.62,230.625 1156.19,229.636 1156.76,225.558 1157.33,225.118 1157.89,225.242 1158.46,225.462 1159.03,224.586 1159.6,222.755 1160.17,222.263 1160.74,220.648 1161.3,222.232 1161.87,224.822 1162.44,225.253 1163.01,226.621 1163.58,227.891 1164.15,229.047 1164.71,227.952 1165.28,227.081 1165.85,227.197 1166.42,226.295 1166.99,223.329 1167.56,224.997 1168.12,225.523 1168.69,224.964 1169.26,223.194 1169.83,225.604 1170.4,226.867 1170.97,225.176 1171.53,225.451 1172.1,223.906 1172.67,224.252 1173.24,225.722 1173.81,227.352 1174.38,228.673 1174.94,229.826 1175.51,231.809 1176.08,232.833 1176.65,232.777 1177.22,232.697 1177.79,232.69 1178.35,233.395 1178.92,232.437 1179.49,232.516 1180.06,232.459 1180.63,232.279 1181.2,232.956 1181.76,233.662 1182.33,234.475 1182.9,235.124 1183.47,233.824 1184.04,233.502 1184.61,232.31 1185.17,230.943 1185.74,231.767 1186.31,232.62 1186.88,232.385 1187.45,232.159 1188.02,231.973 1188.58,230.847 1189.15,230.885 1189.72,231.755 1190.29,231.689 1190.86,232.672 1191.43,231.569 1192,234.579 1192.56,237.308 1193.13,234.772 1193.7,234.322 1194.27,234.972 1194.84,234.341 1195.41,233.798 1195.97,234.306 1196.54,233.88 1197.11,232.415 1197.68,233.071 1198.25,231.693 1198.82,230.446 1199.38,230.087 1199.95,228.904 1200.52,229.814 1201.09,227.508 1201.66,226.664 1202.23,226.592 1202.79,225.567 1203.36,225.823 1203.93,225.04 1204.5,225.377 1205.07,225.837 1205.64,227.188 1206.2,229.441 1206.77,229.436 1207.34,227.407 1207.91,229.745 1208.48,230.877 1209.05,231.731 1209.61,231.49 1210.18,230.127 1210.75,230.029 1211.32,231.915 1211.89,231.81 1212.46,232.636 1213.02,232.279 1213.59,234.07 1214.16,233.813 1214.73,233.475 1215.3,233.024 1215.87,229.56 1216.43,230.463 1217,229.44 1217.57,228.246 1218.14,227.253 1218.71,225.263 1219.28,226.412 1219.84,226.614 1220.41,228.004 1220.98,227.995 1221.55,226.875 1222.12,224.95 1222.69,225.045 1223.25,226.299 1223.82,225.5 1224.39,224.703 1224.96,224.844 1225.53,224.244 1226.1,226.722 1226.66,227.816 1227.23,227.078 1227.8,229.262 1228.37,225.244 1228.94,223.607 1229.51,225.002 1230.07,226.468 1230.64,227.914 1231.21,228.201 1231.78,226.299 1232.35,227.69 1232.92,227.888 1233.48,228.204 1234.05,229.283 1234.62,229.992 1235.19,225.972 1235.76,226.237 1236.33,226.629 1236.89,228.014 1237.46,232.127 1238.03,233.052 1238.6,234.002 1239.17,232.636 1239.74,231.526 1240.3,230.407 1240.87,228.38 1241.44,229.298 1242.01,229.527 1242.58,230.546 1243.15,227.532 1243.71,228.814 1244.28,229.074 1244.85,229.164 1245.42,228.432 1245.99,228.551 1246.56,227.602 1247.12,227.863 1247.69,226.982 1248.26,227.148 1248.83,226.489 1249.4,226.804 1249.97,226.153 1250.53,225.308 1251.1,224.742 1251.67,225.076 1252.24,224.509 1252.81,225.948 1253.38,230.341 1253.94,230.296 1254.51,229.256 1255.08,229.38 1255.65,228.51 1256.22,227.777 1256.79,227.939 1257.35,232.578 1257.92,231.38 1258.49,230.546 1259.06,230.83 1259.63,233.021 1260.2,232.97 1260.76,230.951 1261.33,229.928 1261.9,231.892 1262.47,230.7 1263.04,230.811 1263.61,230.639 1264.18,233.891 1264.74,234.621 1265.31,234.197 1265.88,232.95 1266.45,231.706 1267.02,231.558 1267.59,230.298 1268.15,231.378 1268.72,233.335 1269.29,237.303 1269.86,233.527 1270.43,233.236 1271,234.167 1271.56,232.867 1272.13,235.849 1272.7,234.534 1273.27,234.011 1273.84,234.898 1274.41,234.58 1274.97,234.107 1275.54,233.935 1276.11,233.606 1276.68,233.385 1277.25,231.834 1277.82,232.795 1278.38,232.522 1278.95,231.514 1279.52,232.307 1280.09,234.084 1280.66,231.65 1281.23,232.549 1281.79,230.374 1282.36,230.283 1282.93,232.085 1283.5,232.909 1284.07,232.693 1284.64,231.244 1285.2,229.884 1285.77,229.747 1286.34,229.506 1286.91,230.601 1287.48,227.544 1288.05,228.595 1288.61,228.721 1289.18,228.753 1289.75,226.704 1290.32,228.919 1290.89,228.083 1291.46,225.256 1292.02,225.45 1292.59,223.483 1293.16,222.518 1293.73,223.971 1294.3,225.149 1294.87,225.406 1295.43,226.534 1296,228.966 1296.57,229.143 1297.14,227.945 1297.71,228.014 1298.28,229.215 1298.84,229.123 1299.41,230.238 1299.98,232.082 1300.55,231.026 1301.12,229.9 1301.69,231.038 1302.25,228.793 1302.82,229.989 1303.39,230.971 1303.96,229.636 1304.53,230.736 1305.1,230.721 1305.66,231.396 1306.23,230.201 1306.8,228.057 1307.37,228.195 1307.94,227.136 1308.51,228.392 1309.07,229.593 1309.64,229.308 1310.21,229.325 1310.78,228.312 1311.35,227.201 1311.92,226.467 1312.48,226.506 1313.05,226.997 1313.62,225.125 1314.19,224.568 1314.76,224.977 1315.33,224.117 1315.89,224.628 1316.46,224.117 1317.03,223.434 1317.6,223.719 1318.17,226.378 1318.74,229.797 1319.3,230.989 1319.87,229.886 1320.44,227.708 1321.01,228.656 1321.58,225.827 1322.15,227.187 1322.71,227.5 1323.28,226.862 1323.85,228.224 1324.42,229.421 1324.99,230.549 1325.56,231.548 1326.12,232.352 1326.69,231.868 1327.26,230.566 1327.83,228.353 1328.4,229.524 1328.97,230.866 1329.53,231.003 1330.1,229.893 1330.67,227.676 1331.24,226.599 1331.81,227.668 1332.38,226.721 1332.94,226.908 1333.51,226.325 1334.08,224.52 1334.65,228.189 1335.22,229.411 1335.79,229.297 1336.36,230.271 1336.92,232.054 1337.49,232.746 1338.06,231.525 1338.63,232.348 1339.2,232.207 1339.77,231.013 1340.33,228.76 1340.9,229.525 1341.47,229.663 1342.04,227.741 1342.61,226.663 1343.18,228.303 1343.74,228.396 1344.31,229.548 1344.88,229.745 1345.45,230.808 1346.02,229.733 1346.59,232.891 1347.15,230.645 1347.72,231.783 1348.29,229.554 1348.86,228.839 1349.43,228.063 1350,228.235 1350.56,226.324 1351.13,227.562 1351.7,228.94 1352.27,230.793 1352.84,230.539 1353.41,231.45 1353.97,232.334 1354.54,232.278 1355.11,231.226 1355.68,233.214 1356.25,230.768 1356.82,231.578 1357.38,234.644 1357.95,232.308 1358.52,233.263 1359.09,230.9 1359.66,230.144 1360.23,229.229 1360.79,227.345 1361.36,228.469 1361.93,231.844 1362.5,231.547 1363.07,232.407 1363.64,231.152 1364.2,230.126 1364.77,230.209 1365.34,230.293 1365.91,228.126 1366.48,226.327 1367.05,225.371 1367.61,225.6 1368.18,226.914 1368.75,226.026 1369.32,224.291 1369.89,224.768 1370.46,225.245 1371.02,227.56 1371.59,229.5 1372.16,228.676 1372.73,229.746 1373.3,229.782 1373.87,226.862 1374.43,228.177 1375,228.362 1375.57,228.516 1376.14,228.594 1376.71,228.479 1377.28,228.611 1377.84,227.524 1378.41,226.863 1378.98,228.219 1379.55,229.385 1380.12,229.186 1380.69,228.47 1381.25,229.568 1381.82,230.733 1382.39,229.733 1382.96,227.938 1383.53,229.22 1384.1,230.295 1384.66,230.329 1385.23,231.345 1385.8,235.452 1386.37,235.056 1386.94,234.823 1387.51,234.707 1388.07,235.314 1388.64,235.841 1389.21,235.575 1389.78,236.095 1390.35,235.996 1390.92,236.707 1391.48,237.162 1392.05,238.759 1392.62,236.039 1393.19,235.469 1393.76,234 1394.33,236.685 1394.89,235.304 1395.46,232.727 1396.03,232.625 1396.6,232.161 1397.17,235.042 1397.74,234.638 1398.3,234.14 1398.87,232.97 1399.44,232.35 1400.01,232.135 1400.58,231.915 1401.15,234.615 1401.71,236.336 1402.28,237.735 1402.85,234.905 1403.42,231.429 1403.99,231.367 1404.56,233.157 1405.13,231.869 1405.69,230.607 1406.26,230.452 1406.83,230.359 1407.4,230.172 1407.97,228.975 1408.54,229.804 1409.1,229.687 1409.67,231.638 1410.24,230.413 1410.81,229.281 1411.38,226.923 1411.95,227.863 1412.51,227.899 1413.08,227.966 1413.65,227.813 1414.22,228.722 1414.79,227.686 1415.36,229.726 1415.92,229.41 1416.49,230.193 1417.06,229.9 1417.63,228.776 1418.2,228.931 1418.77,228.88 1419.33,229.829 1419.9,228.628 1420.47,228.486 1421.04,228.26 1421.61,229.244 1422.18,228.124 1422.74,227.948 1423.31,226.794 1423.88,227.939 1424.45,226.006 1425.02,226.161 1425.59,225.281 1426.15,224.365 1426.72,223.624 1427.29,224.132 1427.86,224.204 1428.43,224.459 1429,222.624 1429.56,224.084 1430.13,223.317 1430.7,225.704 1431.27,226.94 1431.84,229.312 1432.41,229.283 1432.97,229.163 1433.54,230.076 1434.11,230.97 1434.68,231.133 1435.25,230.035 1435.82,230.835 1436.38,231.652 1436.95,231.701 1437.52,232.682 1438.09,233.522 1438.66,234.38 1439.23,232.689 1439.79,232.245 1440.36,231.082 1440.93,230.049 1441.5,230.894 1442.07,228.464 1442.64,225.4 1443.2,227.684 1443.77,229.037 1444.34,226.957 1444.91,225.159 1445.48,226.315 1446.05,226.367 1446.61,225.587 1447.18,225.667 1447.75,225.886 1448.32,228.239 1448.89,227.146 1449.46,226.154 1450.02,226.361 1450.59,228.931 1451.16,233.035 1451.73,232.762 1452.3,231.485 1452.87,232.3 1453.43,231.071 1454,228.972 1454.57,228.829 1455.14,227.842 1455.71,227.861 1456.28,227.148 1456.84,227.297 1457.41,227.775 1457.98,227.712 1458.55,227.988 1459.12,227.011 1459.69,225.373 1460.25,224.659 1460.82,224.128 1461.39,223.351 1461.96,224.047 1462.53,225.649 1463.1,224.732 1463.66,227.14 1464.23,227.375 1464.8,226.575 1465.37,225.968 1465.94,225.06 1466.51,224.257 1467.07,225.545 1467.64,227.882 1468.21,228.027 1468.78,227.276 1469.35,228.506 1469.92,229.68 1470.48,228.741 1471.05,228.898 1471.62,230.081 1472.19,230.341 1472.76,228.372 1473.33,229.795 1473.89,230.762 1474.46,230.893 1475.03,230.615 1475.6,230.586 1476.17,229.445 1476.74,228.391 1477.31,229.696 1477.87,226.616 1478.44,228.075 1479.01,228.405 1479.58,228.764 1480.15,227.945 1480.72,227.02 1481.28,227.219 1481.85,226.462 1482.42,226.95 1482.99,226.921 1483.56,226.208 1484.13,225.333 1484.69,223.789 1485.26,224.469 1485.83,224.987 1486.4,227.53 1486.97,228.965 1487.54,230.288 1488.1,229.42 1488.67,231.831 1489.24,231.786 1489.81,231.839 1490.38,232.092 1490.95,235.106 1491.51,235.765 1492.08,234.515 1492.65,235.402 1493.22,235.161 1493.79,235.88 1494.36,235.533 1494.92,234.156 1495.49,233.987 1496.06,233.742 1496.63,234.326 1497.2,235.01 1497.77,236.451 1498.33,234.864 1498.9,233.32 1499.47,233.123 1500.04,233.785 1500.61,233.386 1501.18,230.957 1501.74,231.941 1502.31,230.586 1502.88,230.482 1503.45,230.515 1504.02,230.415 1504.59,229.248 1505.15,231.349 1505.72,232.454 1506.29,232.324 1506.86,230.038 1507.43,230.116 1508,232.11 1508.56,231.971 1509.13,232.744 1509.7,233.467 1510.27,235.224 1510.84,233.777 1511.41,232.476 1511.97,233.364 1512.54,232.066 1513.11,229.871 1513.68,229.961 1514.25,228.999 1514.82,227.864 1515.38,227.938 1515.95,229.228 1516.52,228.165 1517.09,228.119 1517.66,227.436 1518.23,228.287 1518.79,229.349 1519.36,228.31 1519.93,229.343 1520.5,229.613 1521.07,230.513 1521.64,231.075 1522.2,231.932 1522.77,232.706 1523.34,230.586 1523.91,230.348 1524.48,231.341 1525.05,232.165 1525.61,233 1526.18,232.655 1526.75,231.184 1527.32,231.083 1527.89,230.84 1528.46,231.647 1529.02,230.678 1529.59,229.652 1530.16,227.466 1530.73,227.548 1531.3,224.555 1531.87,224.904 1532.43,226.26 1533,224.444 1533.57,225.594 1534.14,225.905 1534.71,227.207 1535.28,229.338 1535.84,230.178 1536.41,228.9 1536.98,229.662 1537.55,229.744 1538.12,230.561 1538.69,229.224 1539.25,228.987 1539.82,230.019 1540.39,227.792 1540.96,226.911 1541.53,225.963 1542.1,226.278 1542.66,226.651 1543.23,227.988 1543.8,229.939 1544.37,230.038 1544.94,231.864 1545.51,231.813 1546.08,230.661 1546.64,229.709 1547.21,230.81 1547.78,231.581 1548.35,231.331 1548.92,230.305 1549.49,231.404 1550.05,230.332 1550.62,231.228 1551.19,231.113 1551.76,230.073 1552.33,229.019 1552.9,229.101 1553.46,231.3 1554.03,232.439 1554.6,235.353 1555.17,234.052 1555.74,230.59 1556.31,230.378 1556.87,229.182 1557.44,225.991 1558.01,225.233 1558.58,225.289 1559.15,225.37 1559.72,224.67 1560.28,224.844 1560.85,225.225 1561.42,226.498 1561.99,224.674 1562.56,223.038 1563.13,224.42 1563.69,223.825 1564.26,223.331 1564.83,221.589 1565.4,222.383 1565.97,222.2 1566.54,225.997 1567.1,227.437 1567.67,228.612 1568.24,229.693 1568.81,230.776 1569.38,231.862 1569.95,231.74 1570.51,230.629 1571.08,230.336 1571.65,230.418 1572.22,231.328 1572.79,231.168 1573.36,232.273 1573.92,232.172 1574.49,234.997 1575.06,235.508 1575.63,238.021 1576.2,237.542 1576.77,236.948 1577.33,239.593 1577.9,241.137 1578.47,239.53 1579.04,239.756 1579.61,237.991 1580.18,237.282 1580.74,236.428 1581.31,235.848 1581.88,235.452 1582.45,237.054 1583.02,235.7 1583.59,235.254 1584.15,232.471 1584.72,230.963 1585.29,229.753 1585.86,227.409 1586.43,229.643 1587,228.671 1587.56,228.742 1588.13,231.665 1588.7,232.399 1589.27,230.964 1589.84,228.869 1590.41,229.758 1590.97,230.566 1591.54,230.281 1592.11,230.237 1592.68,229.977 1593.25,230.056 1593.82,230.778 1594.38,229.444 1594.95,228.095 1595.52,226.988 1596.09,225.994 1596.66,227.188 1597.23,227.15 1597.79,227.165 1598.36,228.416 1598.93,228.449 1599.5,227.369 1600.07,229.67 1600.64,227.592 1601.2,226.694 1601.77,225.854 1602.34,225.999 1602.91,225.194 1603.48,224.168 1604.05,223.461 1604.61,222.742 1605.18,222.065 1605.75,225.71 1606.32,226.992 1606.89,228.071 1607.46,227.224 1608.02,226.943 1608.59,228.106 1609.16,229.159 1609.73,232.248 1610.3,230.067 1610.87,229.965 1611.43,229.815 1612,229.645 1612.57,230.488 1613.14,229.584 1613.71,231.785 1614.28,231.574 1614.84,230.255 1615.41,231.231 1615.98,230.115 1616.55,229.248 1617.12,229.365 1617.69,228.299 1618.26,228.217 1618.82,226.272 1619.39,225.516 1619.96,225.658 1620.53,223.789 1621.1,222.042 1621.67,221.672 1622.23,222.953 1622.8,222.322 1623.37,221.626 1623.94,223.258 1624.51,221.714 1625.08,222.183 1625.64,224.834 1626.21,225.111 1626.78,222.335 1627.35,221.93 1627.92,224.671 1628.49,225.016 1629.05,225.518 1629.62,225.852 1630.19,227.209 1630.76,229.413 1631.33,229.35 1631.9,229.615 1632.46,230.692 1633.03,227.593 1633.6,228.825 1634.17,227.955 1634.74,225.158 1635.31,226.804 1635.87,226.016 1636.44,226.391 1637.01,226.601 1637.58,227.83 1638.15,228.112 1638.72,228.28 1639.28,229.436 1639.85,229.63 1640.42,229.696 1640.99,234.011 1641.56,232.784 1642.13,228.782 1642.69,229.951 1643.26,230.132 1643.83,231.189 1644.4,229.234 1644.97,229.283 1645.54,229.556 1646.1,231.8 1646.67,232.666 1647.24,232.633 1647.81,230.284 1648.38,231.285 1648.95,232.185 1649.51,232.095 1650.08,232.919 1650.65,231.807 1651.22,231.741 1651.79,231.477 1652.36,231.638 1652.92,231.792 1653.49,230.773 1654.06,231.89 1654.63,230.899 1655.2,231.98 1655.77,232.943 1656.33,231.853 1656.9,232.757 1657.47,232.514 1658.04,232.579 1658.61,232.403 1659.18,234.441 1659.74,239.28 1660.31,239.629 1660.88,240.081 1661.45,239.217 1662.02,237.484 1662.59,236.883 1663.15,234.483 1663.72,234.04 1664.29,230.632 1664.86,231.411 1665.43,228.056 1666,227.112 1666.56,227.002 1667.13,227.167 1667.7,228.367 1668.27,229.273 1668.84,228.214 1669.41,227.2 1669.97,227.356 1670.54,227.59 1671.11,229.529 1671.68,229.483 1672.25,229.391 1672.82,228.459 1673.38,227.38 1673.95,227.552 1674.52,228.752 1675.09,227.647 1675.66,225.7 1676.23,227.977 1676.79,226.815 1677.36,230.162 1677.93,230.141 1678.5,231.075 1679.07,230.997 1679.64,229.774 1680.2,228.64 1680.77,228.491 1681.34,228.105 1681.91,227.486 1682.48,227.489 1683.05,224.379 1683.61,222.412 1684.18,224.138 1684.75,224.698 1685.32,222.993 1685.89,222.345 1686.46,222.927 1687.02,221.391 1687.59,221.197 1688.16,220.831 1688.73,220.461 1689.3,222.34 1689.87,226.17 1690.44,227.31 1691,225.714 1691.57,228.293 1692.14,229.365 1692.71,229.574 1693.28,231.117 1693.85,233.302 1694.41,233.098 1694.98,233.973 1695.55,233.914 1696.12,236.707 1696.69,235.918 1697.26,236.545 1697.82,235.073 1698.39,234.713 1698.96,234.367 1699.53,236.251 1700.1,237.801 1700.67,235.967 1701.23,235.508 1701.8,235.249 1702.37,235.14 1702.94,234.824 1703.51,233.401 1704.08,231.381 1704.64,231.491 1705.21,232.239 1705.78,234.852 1706.35,231.43 1706.92,231.189 1707.49,230.769 1708.05,230.631 1708.62,230.482 1709.19,230.34 1709.76,231.255 1710.33,231.363 1710.9,229.995 1711.46,230.023 1712.03,229.883 1712.6,231.062 1713.17,228.756 1713.74,228.629 1714.31,229.671 1714.87,229.531 1715.44,229.57 1716.01,229.501 1716.58,229.686 1717.15,229.845 1717.72,228.772 1718.28,228.705 1718.85,228.807 1719.42,228.889 1719.99,231.155 1720.56,232.272 1721.13,230.016 1721.69,230.812 1722.26,230.785 1722.83,230.644 1723.4,230.593 1723.97,231.302 1724.54,234.192 1725.1,232.999 1725.67,231.601 1726.24,230.373 1726.81,228.213 1727.38,229.446 1727.95,230.479 1728.51,230.203 1729.08,230.262 1729.65,230.127 1730.22,229.103 1730.79,228.015 1731.36,227.249 1731.92,227.565 1732.49,227.872 1733.06,225.865 1733.63,228.989 1734.2,228.099 1734.77,230.057 1735.33,230.031 1735.9,229.799 1736.47,228.873 1737.04,227.87 1737.61,229.032 1738.18,228.044 1738.74,227.992 1739.31,229.11 1739.88,229.015 1740.45,229.125 1741.02,228.111 1741.59,225.986 1742.15,225.194 1742.72,226.357 1743.29,227.629 1743.86,226.715 1744.43,226.732 1745,226.951 1745.56,227.132 1746.13,227.325 1746.7,229.589 1747.27,230.477 1747.84,230.356 1748.41,231.173 1748.97,228.111 1749.54,228.106 1750.11,226.362 1750.68,226.67 1751.25,224.814 1751.82,223.981 1752.38,224.245 1752.95,224.728 1753.52,226.12 1754.09,225.317 1754.66,226.838 1755.23,224.975 1755.79,224.3 1756.36,226.973 1756.93,226.972 1757.5,230.255 1758.07,230.318 1758.64,230.354 1759.21,230.193 1759.77,231.362 1760.34,231.335 1760.91,230.146 1761.48,230.07 1762.05,228.222 1762.62,228.186 1763.18,228.495 1763.75,228.696 1764.32,229.09 1764.89,227.27 1765.46,226.364 1766.03,226.35 1766.59,226.714 1767.16,227.296 1767.73,228.555 1768.3,227.561 1768.87,227.76 1769.44,227.898 1770,228.023 1770.57,229.186 1771.14,231.492 1771.71,232.504 1772.28,232.358 1772.85,232.312 1773.41,234.096 1773.98,233.913 1774.55,232.797 1775.12,232.57 1775.69,232.461 1776.26,230.091 1776.82,228.15 1777.39,229.298 1777.96,230.429 1778.53,227.146 1779.1,228.643 1779.67,229.916 1780.23,227.893 1780.8,231.323 1781.37,229.674 1781.94,228.591 1782.51,228.66 1783.08,228.79 1783.64,228.651 1784.21,227.727 1784.78,228.958 1785.35,230.109 1785.92,231.082 1786.49,231.354 1787.05,231.405 1787.62,232.3 1788.19,228.034 1788.76,230.117 1789.33,229.147 1789.9,233.391 1790.46,233.237 1791.03,232.873 1791.6,232.504 1792.17,232.283 1792.74,232.054 1793.31,235.879 1793.87,235.398 1794.44,232.839 1795.01,232.508 1795.58,233.416 1796.15,235.01 1796.72,234.645 1797.28,234.288 1797.85,233.749 1798.42,232.352 1798.99,232.398 1799.56,234.034 1800.13,234.57 1800.69,233.31 1801.26,233.082 1801.83,232.953 1802.4,232.527 1802.97,233.563 1803.54,234.251 1804.1,233.765 1804.67,233.369 1805.24,235.05 1805.81,235.679 1806.38,235.314 1806.95,232.575 1807.51,232.298 1808.08,231.902 1808.65,232.614 1809.22,231.1 1809.79,230.851 1810.36,229.717 1810.92,232.728 1811.49,234.705 1812.06,232.142 1812.63,234.609 1813.2,233.048 1813.77,233.764 1814.33,233.233 1814.9,231.672 1815.47,232.38 1816.04,233.142 1816.61,232.895 1817.18,231.512 1817.74,231.163 1818.31,230.759 1818.88,231.538 1819.45,230.134 1820.02,228.99 1820.59,228.992 1821.15,229.777 1821.72,228.459 1822.29,226.371 1822.86,224.407 1823.43,224.677 1824,223.871 1824.56,224.923 1825.13,225.945 1825.7,226.105 1826.27,225.209 1826.84,225.305 1827.41,225.396 1827.97,225.522 1828.54,225.735 1829.11,223.856 1829.68,224.164 1830.25,225.301 1830.82,226.349 1831.39,227.545 1831.95,224.299 1832.52,222.734 1833.09,222.105 1833.66,223.44 1834.23,223.767 1834.8,224.152 1835.36,223.342 1835.93,223.705 1836.5,224.375 1837.07,223.494 1837.64,222.717 1838.21,221.214 1838.77,224.861 1839.34,225.003 1839.91,225.419 1840.48,226.67 1841.05,227.896 1841.62,232.139 1842.18,230.813 1842.75,230.885 1843.32,229.687 1843.89,228.778 1844.46,227.862 1845.03,230.064 1845.59,229.042 1846.16,229.366 1846.73,229.528 1847.3,228.629 1847.87,228.563 1848.44,228.761 1849,228.764 1849.57,226.085 1850.14,227.503 1850.71,229.62 1851.28,227.451 1851.85,228.848 1852.41,227.774 1852.98,229.91 1853.55,228.832 1854.12,230.048 1854.69,231.137 1855.26,232.058 1855.82,230.688 1856.39,229.465 1856.96,230.48 1857.53,229.17 1858.1,228.181 1858.67,229.088 1859.23,230.096 1859.8,230.128 1860.37,231.145 1860.94,233.931 1861.51,232.527 1862.08,230.181 1862.64,229.182 1863.21,228.092 1863.78,227.051 1864.35,226.223 1864.92,227.723 1865.49,227.754 1866.05,227.696 1866.62,228.092 1867.19,226.343 1867.76,225.566 1868.33,225.667 1868.9,227.078 1869.46,227.234 1870.03,226.38 1870.6,225.814 1871.17,225.007 1871.74,225.575 1872.31,225.893 1872.87,227.406 1873.44,227.707 1874.01,229.802 1874.58,227.99 1875.15,227.252 1875.72,228.35 1876.28,228.588 1876.85,228.619 1877.42,229.861 1877.99,232.16 1878.56,232.24 1879.13,233.234 1879.69,229.155 1880.26,228.304 1880.83,230.674 1881.4,231.573 1881.97,233.332 1882.54,235.09 1883.1,234.852 1883.67,237.631 1884.24,236.217 1884.81,234.832 1885.38,233.503 1885.95,236.534 1886.51,233.041 1887.08,233.096 1887.65,233.911 1888.22,234.869 1888.79,235.515 1889.36,236.256 1889.92,235.602 1890.49,234.037 1891.06,232.708 1891.63,232.449 1892.2,233.291 1892.77,234.036 1893.33,233.86 1893.9,233.57 1894.47,234.211 1895.04,232.811 1895.61,229.591 1896.18,229.637 1896.74,229.657 1897.31,229.616 1897.88,229.768 1898.45,229.911 1899.02,226.632 1899.59,225.981 1900.16,226.104 1900.72,226.382 1901.29,226.576 1901.86,226.787 1902.43,227.183 1903,227.27 1903.57,226.258 1904.13,227.533 1904.7,226.453 1905.27,227.609 1905.84,227.719 1906.41,227.012 1906.98,228.356 1907.54,229.422 1908.11,229.699 1908.68,229.896 1909.25,229.86 1909.82,231.869 1910.39,231.783 1910.95,231.543 1911.52,232.467 1912.09,231.372 1912.66,231.35 1913.23,230.188 1913.8,229.16 1914.36,228.122 1914.93,227.558 1915.5,228.728 1916.07,227.82 1916.64,227.942 1917.21,228.081 1917.77,228.234 1918.34,227.462 1918.91,225.59 1919.48,224.733 1920.05,224.171 1920.62,224.58 1921.18,224.719 1921.75,224.048 1922.32,225.493 1922.89,226.771 1923.46,225.976 1924.03,225.424 1924.59,225.676 1925.16,227.332 1925.73,227.684 1926.3,227.845 1926.87,228.135 1927.44,231.364 1928,232.5 1928.57,232.151 1929.14,232.955 1929.71,230.864 1930.28,232.016 1930.85,232.871 1931.41,232.688 1931.98,232.539 1932.55,230.351 1933.12,231.225 1933.69,231.104 1934.26,232.134 1934.82,229.748 1935.39,229.69 1935.96,228.708 1936.53,229.695 1937.1,227.82 1937.67,228.193 1938.23,228.47 1938.8,228.629 1939.37,228.759 1939.94,227.756 1940.51,229.077 1941.08,229.936 1941.64,230.879 1942.21,230.003 1942.78,228.994 1943.35,230.066 1943.92,230.029 1944.49,232.116 1945.05,234.065 1945.62,236.725 1946.19,236.282 1946.76,235.934 1947.33,232.383 1947.9,230.347 1948.46,231.483 1949.03,232.416 1949.6,230.198 1950.17,228.97 1950.74,228.015 1951.31,230.165 1951.87,230.154 1952.44,228.29 1953.01,229.458 1953.58,229.364 1954.15,229.381 1954.72,227.363 1955.28,227.483 1955.85,226.655 1956.42,227.982 1956.99,229.245 1957.56,233.432 1958.13,232.091 1958.69,232.006 1959.26,232.774 1959.83,232.697 1960.4,234.446 1960.97,233.874 1961.54,233.503 1962.1,233.092 1962.67,230.73 1963.24,231.614 1963.81,229.536 1964.38,228.483 1964.95,231.482 1965.51,232.175 1966.08,232.894 1966.65,233.504 1967.22,234.117 1967.79,232.63 1968.36,233.558 1968.92,230.984 1969.49,233.96 1970.06,232.448 1970.63,235.457 1971.2,234.833 1971.77,233.189 1972.34,232.965 1972.9,233.714 1973.47,233.433 1974.04,231.191 1974.61,231.962 1975.18,230.299 1975.75,229.122 1976.31,230.294 1976.88,229.07 1977.45,230.194 1978.02,229.901 1978.59,229.573 1979.16,230.758 1979.72,229.449 1980.29,228.269 1980.86,228.252 1981.43,228.055 1982,231.211 1982.57,229.898 1983.13,228.779 1983.7,226.582 1984.27,226.458 1984.84,227.644 1985.41,229.825 1985.98,229.855 1986.54,229.995 1987.11,230.079 1987.68,229.061 1988.25,228.071 1988.82,226.041 1989.39,226.182 1989.95,225.3 1990.52,223.489 1991.09,221.628 1991.66,225.098 1992.23,225.391 1992.8,226.467 1993.36,225.663 1993.93,223.879 1994.5,226.137 1995.07,228.268 1995.64,228.236 1996.21,229.187 1996.77,229.134 1997.34,231.367 1997.91,232.319 1998.48,232.183 1999.05,231.908 1999.62,231.606 2000.18,232.422 2000.75,230.09 2001.32,229.078 2001.89,230.128 2002.46,226.823 2003.03,226.949 2003.59,225.784 2004.16,226.763 2004.73,223.976 2005.3,226.261 2005.87,227.423 2006.44,227.61 2007,226.513 2007.57,226.691 2008.14,227.937 2008.71,226.994 2009.28,227.121 2009.85,225.123 2010.41,227.509 2010.98,228.554 2011.55,228.739 2012.12,230.74 2012.69,229.578 2013.26,227.648 2013.82,226.76 2014.39,229.251 2014.96,226.144 2015.53,226.161 2016.1,227.077 2016.67,226.368 2017.23,226.902 2017.8,228.19 2018.37,229.225 2018.94,230.33 2019.51,231.306 2020.08,231.001 2020.64,231.857 2021.21,230.76 2021.78,230.641 2022.35,230.638 2022.92,230.608 2023.49,230.695 2024.05,230.542 2024.62,228.636 2025.19,228.736 2025.76,229.846 2026.33,230.713 2026.9,232.917 2027.46,230.749 2028.03,230.565 2028.6,231.761 2029.17,230.61 2029.74,230.596 2030.31,230.43 2030.87,230.436 2031.44,229.458 2032.01,228.531 2032.58,230.759 2033.15,231.65 2033.72,230.422 2034.28,229.078 2034.85,230.143 2035.42,231.008 2035.99,230.525 2036.56,230.642 2037.13,230.75 2037.69,228.599 2038.26,230.649 2038.83,227.633 2039.4,226.715 2039.97,225.894 2040.54,225.13 2041.11,226.545 2041.67,227.928 2042.24,226.025 2042.81,226.579 2043.38,227.908 2043.95,227.991 2044.52,229.275 2045.08,231.412 2045.65,230.936 2046.22,233.131 2046.79,231.993 2047.36,232.667 2047.93,231.509 2048.49,230.303 2049.06,230.337 2049.63,228.219 2050.2,227.537 2050.77,229.694 2051.34,229.765 2051.9,229.496 2052.47,228.603 2053.04,228.595 2053.61,228.732 2054.18,227.928 2054.75,228.32 2055.31,227.626 2055.88,226.927 2056.45,228.104 2057.02,229.045 2057.59,229.166 2058.16,229.176 2058.72,226.199 2059.29,224.39 2059.86,225.722 2060.43,226.961 2061,224.994 2061.57,228.262 2062.13,228.374 2062.7,227.56 2063.27,231.944 2063.84,230.813 2064.41,230.635 2064.98,230.528 2065.54,233.506 2066.11,235.462 2066.68,234.981 2067.25,235.549 2067.82,231.983 2068.39,232.848 2068.95,232.576 2069.52,231.241 2070.09,232.188 2070.66,231.256 2071.23,230.254 2071.8,230.175 2072.36,231.074 2072.93,231.009 2073.5,231.078 2074.07,230.928 2074.64,230.431 2075.21,228.467 2075.77,227.47 2076.34,227.759 2076.91,228.975 2077.48,228.028 2078.05,228.041 2078.62,228.22 2079.18,228.071 2079.75,225.123 2080.32,225.612 2080.89,229.222 2081.46,229.469 2082.03,229.701 2082.59,228.734 2083.16,226.69 2083.73,226.882 2084.3,227.117 2084.87,230.409 2085.44,229.616 2086,228.664 2086.57,227.773 2087.14,229.939 2087.71,228.932 2088.28,228.06 2088.85,228.168 2089.41,229.484 2089.98,228.718 2090.55,228.023 2091.12,228.215 2091.69,228.127 2092.26,230.613 2092.82,231.635 2093.39,230.733 2093.96,230.798 2094.53,232.609 2095.1,232.474 2095.67,231.248 2096.23,232.24 2096.8,231.072 2097.37,233.101 2097.94,232.865 2098.51,231.609 2099.08,232.562 2099.64,232.341 2100.21,231.182 2100.78,231.113 2101.35,229.158 2101.92,227.134 2102.49,223.096 2103.05,225.456 2103.62,222.576 2104.19,224.078 2104.76,225.604 2105.33,226.781 2105.9,228.092 2106.46,225.855 2107.03,227.153 2107.6,225.511 2108.17,225.628 2108.74,225.944 2109.31,224.99 2109.87,224.396 2110.44,224.783 2111.01,225.136 2111.58,226.534 2112.15,226.864 2112.72,227.383 2113.29,226.734 2113.85,226.927 2114.42,228.207 2114.99,226.343 2115.56,230.905 2116.13,226.962 2116.7,226.224 2117.26,224.599 2117.83,223.018 2118.4,223.577 2118.97,224.834 2119.54,225.27 2120.11,226.701 2120.67,227.143 2121.24,227.507 2121.81,226.949 2122.38,227.395 2122.95,228.928 2123.52,227.155 2124.08,229.631 2124.65,229.798 2125.22,228.98 2125.79,228.369 2126.36,230.678 2126.93,232.92 2127.49,232.874 2128.06,231.75 2128.63,231.82 2129.2,230.925 2129.77,231.049 2130.34,230.116 2130.9,230.285 2131.47,230.673 2132.04,228.603 2132.61,230.883 2133.18,230.769 2133.75,231.903 2134.31,233.126 2134.88,234.006 2135.45,235.899 2136.02,234.483 2136.59,233.105 2137.16,232.963 2137.72,231.838 2138.29,233.704 2138.86,234.565 2139.43,237.418 2140,235.794 2140.57,235.282 2141.13,235.122 2141.7,234.051 2142.27,233.663 2142.84,233.54 2143.41,230.163 2143.98,227.956 2144.54,229.047 2145.11,230.086 2145.68,232.378 2146.25,231.041 2146.82,232.156 2147.39,233.019 2147.95,234.798 2148.52,232.351 2149.09,232.214 2149.66,235.237 2150.23,237.044 2150.8,236.542 2151.36,235.2 2151.93,233.739 2152.5,234.206 2153.07,232.977 2153.64,233.82 2154.21,230.421 2154.77,230.514 2155.34,229.519 2155.91,231.619 2156.48,231.296 2157.05,231.208 2157.62,231.984 2158.18,231.877 2158.75,233.672 2159.32,235.394 2159.89,234.818 \"/>\n<path clip-path=\"url(#clip410)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip410)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip410)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip410)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.037 ± 0.023\n  with uncertainty of ± 0.0020578988137385876\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01323 ± (0.00240525, 0.00234949) (MC)\n  95% confidence interval: [-4.01818, -4.0084]) (MC)\n  linear error propagation: -4.01334 ± 0.00244076\n  |δ_y| = |0.00160024| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.013227539694002, val_l = 0.004956098869638659, val_u = 0.004829856555776502)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip440\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip440)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip441\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip440)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip442\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1116.46 2211.02,1116.46 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,928.518 2211.02,928.518 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,740.577 2211.02,740.577 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,552.636 2211.02,552.636 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,364.695 2211.02,364.695 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1116.46 365.751,1116.46 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,928.518 365.751,928.518 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,740.577 365.751,740.577 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,552.636 365.751,552.636 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,364.695 365.751,364.695 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M298.909 1102.26 Q295.298 1102.26 293.469 1105.82 Q291.664 1109.36 291.664 1116.49 Q291.664 1123.6 293.469 1127.17 Q295.298 1130.71 298.909 1130.71 Q302.543 1130.71 304.349 1127.17 Q306.177 1123.6 306.177 1116.49 Q306.177 1109.36 304.349 1105.82 Q302.543 1102.26 298.909 1102.26 M298.909 1098.55 Q304.719 1098.55 307.775 1103.16 Q310.853 1107.74 310.853 1116.49 Q310.853 1125.22 307.775 1129.83 Q304.719 1134.41 298.909 1134.41 Q293.099 1134.41 290.02 1129.83 Q286.964 1125.22 286.964 1116.49 Q286.964 1107.74 290.02 1103.16 Q293.099 1098.55 298.909 1098.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M259.557 941.863 L267.196 941.863 L267.196 915.497 L258.886 917.164 L258.886 912.905 L267.15 911.238 L271.826 911.238 L271.826 941.863 L279.465 941.863 L279.465 945.798 L259.557 945.798 L259.557 941.863 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M298.909 914.317 Q295.298 914.317 293.469 917.882 Q291.664 921.423 291.664 928.553 Q291.664 935.659 293.469 939.224 Q295.298 942.766 298.909 942.766 Q302.543 942.766 304.349 939.224 Q306.177 935.659 306.177 928.553 Q306.177 921.423 304.349 917.882 Q302.543 914.317 298.909 914.317 M298.909 910.613 Q304.719 910.613 307.775 915.22 Q310.853 919.803 310.853 928.553 Q310.853 937.28 307.775 941.886 Q304.719 946.47 298.909 946.47 Q293.099 946.47 290.02 941.886 Q286.964 937.28 286.964 928.553 Q286.964 919.803 290.02 915.22 Q293.099 910.613 298.909 910.613 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M262.775 753.922 L279.094 753.922 L279.094 757.857 L257.15 757.857 L257.15 753.922 Q259.812 751.167 264.395 746.538 Q269.002 741.885 270.182 740.542 Q272.428 738.019 273.307 736.283 Q274.21 734.524 274.21 732.834 Q274.21 730.08 272.266 728.343 Q270.344 726.607 267.242 726.607 Q265.043 726.607 262.59 727.371 Q260.159 728.135 257.381 729.686 L257.381 724.964 Q260.205 723.83 262.659 723.251 Q265.113 722.672 267.15 722.672 Q272.52 722.672 275.715 725.357 Q278.909 728.042 278.909 732.533 Q278.909 734.663 278.099 736.584 Q277.312 738.482 275.205 741.075 Q274.627 741.746 271.525 744.964 Q268.423 748.158 262.775 753.922 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M298.909 726.376 Q295.298 726.376 293.469 729.941 Q291.664 733.482 291.664 740.612 Q291.664 747.718 293.469 751.283 Q295.298 754.825 298.909 754.825 Q302.543 754.825 304.349 751.283 Q306.177 747.718 306.177 740.612 Q306.177 733.482 304.349 729.941 Q302.543 726.376 298.909 726.376 M298.909 722.672 Q304.719 722.672 307.775 727.279 Q310.853 731.862 310.853 740.612 Q310.853 749.339 307.775 753.945 Q304.719 758.528 298.909 758.528 Q293.099 758.528 290.02 753.945 Q286.964 749.339 286.964 740.612 Q286.964 731.862 290.02 727.279 Q293.099 722.672 298.909 722.672 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M272.914 551.282 Q276.27 551.999 278.145 554.268 Q280.043 556.536 280.043 559.87 Q280.043 564.986 276.525 567.786 Q273.006 570.587 266.525 570.587 Q264.349 570.587 262.034 570.148 Q259.742 569.731 257.289 568.874 L257.289 564.361 Q259.233 565.495 261.548 566.073 Q263.863 566.652 266.386 566.652 Q270.784 566.652 273.076 564.916 Q275.39 563.18 275.39 559.87 Q275.39 556.814 273.238 555.101 Q271.108 553.365 267.289 553.365 L263.261 553.365 L263.261 549.523 L267.474 549.523 Q270.923 549.523 272.752 548.157 Q274.58 546.768 274.58 544.175 Q274.58 541.513 272.682 540.101 Q270.807 538.666 267.289 538.666 Q265.367 538.666 263.168 539.083 Q260.969 539.5 258.33 540.379 L258.33 536.213 Q260.992 535.472 263.307 535.101 Q265.645 534.731 267.705 534.731 Q273.029 534.731 276.131 537.162 Q279.233 539.569 279.233 543.689 Q279.233 546.56 277.59 548.55 Q275.946 550.518 272.914 551.282 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M298.909 538.435 Q295.298 538.435 293.469 542 Q291.664 545.541 291.664 552.671 Q291.664 559.777 293.469 563.342 Q295.298 566.884 298.909 566.884 Q302.543 566.884 304.349 563.342 Q306.177 559.777 306.177 552.671 Q306.177 545.541 304.349 542 Q302.543 538.435 298.909 538.435 M298.909 534.731 Q304.719 534.731 307.775 539.337 Q310.853 543.921 310.853 552.671 Q310.853 561.398 307.775 566.004 Q304.719 570.587 298.909 570.587 Q293.099 570.587 290.02 566.004 Q286.964 561.398 286.964 552.671 Q286.964 543.921 290.02 539.337 Q293.099 534.731 298.909 534.731 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M271.594 351.489 L259.789 369.938 L271.594 369.938 L271.594 351.489 M270.367 347.415 L276.247 347.415 L276.247 369.938 L281.177 369.938 L281.177 373.827 L276.247 373.827 L276.247 381.975 L271.594 381.975 L271.594 373.827 L255.992 373.827 L255.992 369.313 L270.367 347.415 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M298.909 350.494 Q295.298 350.494 293.469 354.058 Q291.664 357.6 291.664 364.73 Q291.664 371.836 293.469 375.401 Q295.298 378.943 298.909 378.943 Q302.543 378.943 304.349 375.401 Q306.177 371.836 306.177 364.73 Q306.177 357.6 304.349 354.058 Q302.543 350.494 298.909 350.494 M298.909 346.79 Q304.719 346.79 307.775 351.396 Q310.853 355.98 310.853 364.73 Q310.853 373.456 307.775 378.063 Q304.719 382.646 298.909 382.646 Q293.099 382.646 290.02 378.063 Q286.964 373.456 286.964 364.73 Q286.964 355.98 290.02 351.396 Q293.099 346.79 298.909 346.79 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip442)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,977.979 400.199,1250.53 400.786,1113.06 401.372,988.529 401.958,870.324 402.545,761.884 403.131,664.213 403.718,581.042 404.304,605.227 404.891,520.314 405.477,447.639 406.063,383.28 406.65,322.941 407.236,350.235 407.823,295.95 408.409,247.141 408.995,270.301 409.582,287.937 410.168,302.539 410.755,262.115 411.341,276.393 411.927,242.334 412.514,254.167 413.1,224.217 413.687,236.953 414.273,248.909 414.86,225.924 415.446,238.37 416.032,219.895 416.619,233.92 417.205,221.985 417.792,260.748 418.378,252.016 418.964,242.679 419.551,235.328 420.137,229.892 420.724,227.774 421.31,227.082 421.896,227.158 422.483,246.304 423.069,248.765 423.656,266.413 424.242,271.325 424.829,291.015 425.415,310.055 426.001,316.736 426.588,324.407 427.174,354.451 427.761,363.238 428.347,382.394 428.933,400.039 429.52,409.239 430.106,444.141 430.693,452.142 431.279,468.644 431.865,478.819 432.452,488.228 433.038,505.429 433.625,522.132 434.211,532.796 434.798,549.067 435.384,565.433 435.97,575.326 436.557,592.082 437.143,607.796 437.73,623.485 438.316,643.584 438.902,653.014 439.489,662.993 440.075,686.798 440.662,714.231 441.248,723.03 441.835,732.498 442.421,740.894 443.007,757.506 443.594,766.655 444.18,786.429 444.767,801.931 445.353,824.251 445.939,835.651 446.526,842.658 447.112,855.703 447.699,868.97 448.285,878.433 448.871,891.053 449.458,897.551 450.044,912.174 450.631,921.021 451.217,926.846 451.804,943.865 452.39,957.272 452.976,962.796 453.563,972.658 454.149,982.936 454.736,987.872 455.322,995.394 455.908,1004.77 456.495,1009.52 457.081,1018.72 457.668,1023.05 458.254,1032.22 458.84,1045.52 459.427,1051.38 460.013,1057.12 460.6,1064.77 461.186,1070.01 461.773,1076.83 462.359,1079.82 462.945,1090.53 463.532,1096.87 464.118,1098.89 464.705,1104.63 465.291,1106.56 465.877,1108.37 466.464,1112.15 467.05,1119.68 467.637,1123.42 468.223,1128.58 468.809,1133.92 469.396,1139.26 469.982,1144.42 470.569,1149.6 471.155,1150.71 471.742,1155.47 472.328,1160.16 472.914,1160.88 473.501,1163.2 474.087,1163.92 474.674,1166.59 475.26,1170.67 475.846,1171.22 476.433,1177.48 477.019,1177.64 477.606,1181.69 478.192,1187.43 478.778,1190.55 479.365,1191.74 479.951,1196.89 480.538,1199.99 481.124,1198.05 481.711,1197.79 482.297,1194.14 482.883,1199.11 483.47,1198.98 484.056,1206.97 484.643,1206.22 485.229,1207.18 485.815,1207.36 486.402,1212.18 486.988,1213.19 487.575,1217.65 488.161,1220.16 488.748,1221.15 489.334,1220.22 489.92,1216.06 490.507,1220.01 491.093,1222.26 491.68,1222.85 492.266,1220.2 492.852,1224.02 493.439,1223.06 494.025,1222.04 494.612,1220.98 495.198,1222.07 495.784,1219.51 496.371,1220.49 496.957,1216.33 497.544,1216.23 498.13,1217.63 498.717,1220.11 499.303,1219.34 499.889,1220.48 500.476,1220.23 501.062,1219.74 501.649,1220.83 502.235,1221.61 502.821,1221.08 503.408,1222.32 503.994,1221.77 504.581,1219.8 505.167,1217.67 505.753,1219.05 506.34,1220.2 506.926,1218.08 507.513,1224.15 508.099,1225.04 508.686,1227.63 509.272,1226.77 509.858,1227.62 510.445,1229.61 511.031,1230.29 511.618,1227.64 512.204,1228.18 512.79,1230.63 513.377,1232.72 513.963,1230.05 514.55,1229.23 515.136,1228.05 515.722,1222.46 516.309,1225.21 516.895,1228.11 517.482,1230.59 518.068,1225.22 518.655,1227.85 519.241,1230.41 519.827,1231.04 520.414,1229.71 521,1230.42 521.587,1229.4 522.173,1231.44 522.759,1230.36 523.346,1229.91 523.932,1229.26 524.519,1226.65 525.105,1225.84 525.691,1226.41 526.278,1227.21 526.864,1226.46 527.451,1227.22 528.037,1227.64 528.624,1226.8 529.21,1224.34 529.796,1223.35 530.383,1224.26 530.969,1225.1 531.556,1225.86 532.142,1226.82 532.728,1222.8 533.315,1223.84 533.901,1224.58 534.488,1222.18 535.074,1223.16 535.661,1223.98 536.247,1223.11 536.833,1220.8 537.42,1220.26 538.006,1219.77 538.593,1219.42 539.179,1224.1 539.765,1218.9 540.352,1217.16 540.938,1218.43 541.525,1219.55 542.111,1219.58 542.697,1217.22 543.284,1219.73 543.87,1220.92 544.457,1218.99 545.043,1217.13 545.63,1216.69 546.216,1218.03 546.802,1220.59 547.389,1220.16 547.975,1219.8 548.562,1219.39 549.148,1220.45 549.734,1221.64 550.321,1219.67 550.907,1220.75 551.494,1220.38 552.08,1219.71 552.666,1222.5 553.253,1220.52 553.839,1220.01 554.426,1219.79 555.012,1217.28 555.599,1217.05 556.185,1216.73 556.771,1216.34 557.358,1217.78 557.944,1217.31 558.531,1214.05 559.117,1213.85 559.703,1215.04 560.29,1217.79 560.876,1217.26 561.463,1220.12 562.049,1222.62 562.635,1223.64 563.222,1221.38 563.808,1220.75 564.395,1218.69 564.981,1219.64 565.568,1221.61 566.154,1219.42 566.74,1217.43 567.327,1220.14 567.913,1218.15 568.5,1220.78 569.086,1221.44 569.672,1217.57 570.259,1217.27 570.845,1218.6 571.432,1219.75 572.018,1220.81 572.605,1216.86 573.191,1217.87 573.777,1219.01 574.364,1218.24 574.95,1216.08 575.537,1215.46 576.123,1213.67 576.709,1212.14 577.296,1212.02 577.882,1214.63 578.469,1212.75 579.055,1214.21 579.641,1215.35 580.228,1214.9 580.814,1214.84 581.401,1216.23 581.987,1218.93 582.574,1217.89 583.16,1215.96 583.746,1217.26 584.333,1216.58 584.919,1213.22 585.506,1211.1 586.092,1212.61 586.678,1215.63 587.265,1216.54 587.851,1216.11 588.438,1214.23 589.024,1213.72 589.61,1210.25 590.197,1213.18 590.783,1212.67 591.37,1212.18 591.956,1213.09 592.543,1215.54 593.129,1213.6 593.715,1214.39 594.302,1213.94 594.888,1219.56 595.475,1219.19 596.061,1220.06 596.647,1220.92 597.234,1215.38 597.82,1214.84 598.407,1212.72 598.993,1213.57 599.579,1212.95 600.166,1209.3 600.752,1208.75 601.339,1205.6 601.925,1205.25 602.512,1206.53 603.098,1208.19 603.684,1211.21 604.271,1212.37 604.857,1213.52 605.444,1211.6 606.03,1210.21 606.616,1211.53 607.203,1212.92 607.789,1211.04 608.376,1210.75 608.962,1213.56 609.548,1216.32 610.135,1215.77 610.721,1215.55 611.308,1216.54 611.894,1215.9 612.481,1213.95 613.067,1213.13 613.653,1214.18 614.24,1215.15 614.826,1215.9 615.413,1215.39 615.999,1213.15 616.585,1214.4 617.172,1214.07 617.758,1211.81 618.345,1211.16 618.931,1208.93 619.518,1203.88 620.104,1202.49 620.69,1204.42 621.277,1204.25 621.863,1204.15 622.45,1204.24 623.036,1202.29 623.622,1199.15 624.209,1202.28 624.795,1202.37 625.382,1203.67 625.968,1203.71 626.554,1201.87 627.141,1200.46 627.727,1200.55 628.314,1202.34 628.9,1201.03 629.487,1199.58 630.073,1193.6 630.659,1194.16 631.246,1194.61 631.832,1195.24 632.419,1194.1 633.005,1196.28 633.591,1198.35 634.178,1201.66 634.764,1201.74 635.351,1198.75 635.937,1199.25 636.523,1200.91 637.11,1199.26 637.696,1199.7 638.283,1199.78 638.869,1200.14 639.456,1200.08 640.042,1197.09 640.628,1199.27 641.215,1199.45 641.801,1196.14 642.388,1197.68 642.974,1200.92 643.56,1203.79 644.147,1203.23 644.733,1203.51 645.32,1207.81 645.906,1207.37 646.492,1206.76 647.079,1203.49 647.665,1205.06 648.252,1204.63 648.838,1204.42 649.425,1206.03 650.011,1205.57 650.597,1208.23 651.184,1212.44 651.77,1210.42 652.357,1212.97 652.943,1212.53 653.529,1211.92 654.116,1206.72 654.702,1204.56 655.289,1202.8 655.875,1205.44 656.462,1205.07 657.048,1204.84 657.634,1201.69 658.221,1201.38 658.807,1203.14 659.394,1203.17 659.98,1202.93 660.566,1203.14 661.153,1202.74 661.739,1202.55 662.326,1202.36 662.912,1203.84 663.498,1201.78 664.085,1203.35 664.671,1201.86 665.258,1200.27 665.844,1198.6 666.431,1201.57 667.017,1195.32 667.603,1197.08 668.19,1197.13 668.776,1197.06 669.363,1201.63 669.949,1204.47 670.535,1206.98 671.122,1209.24 671.708,1206.9 672.295,1207.79 672.881,1210.38 673.467,1208.11 674.054,1206.02 674.64,1205.3 675.227,1206.25 675.813,1208.93 676.4,1208.14 676.986,1204.51 677.572,1205.79 678.159,1205.48 678.745,1204.96 679.332,1201.48 679.918,1205.56 680.504,1209.77 681.091,1211.87 681.677,1215.18 682.264,1212.9 682.85,1212.01 683.436,1212.43 684.023,1211.52 684.609,1207.71 685.196,1207.16 685.782,1205.26 686.369,1204.61 686.955,1202.87 687.541,1202.49 688.128,1202.24 688.714,1205.06 689.301,1204.75 689.887,1204.21 690.473,1202.3 691.06,1200.27 691.646,1202.95 692.233,1204.46 692.819,1205.48 693.405,1201.5 693.992,1199.83 694.578,1201.34 695.165,1202.72 695.751,1202.39 696.338,1205.45 696.924,1205.1 697.51,1203.13 698.097,1201.08 698.683,1205.54 699.27,1203.51 699.856,1204.94 700.442,1204.43 701.029,1201.21 701.615,1201.35 702.202,1201.35 702.788,1201.22 703.375,1199.44 703.961,1202.36 704.547,1202.08 705.134,1198.69 705.72,1197.36 706.307,1197.23 706.893,1195.85 707.479,1191.24 708.066,1191.2 708.652,1193.04 709.239,1190.1 709.825,1188.95 710.411,1184.53 710.998,1183.55 711.584,1181.25 712.171,1180.32 712.757,1182.92 713.344,1180.5 713.93,1182.71 714.516,1183.84 715.103,1182.88 715.689,1182.12 716.276,1184.43 716.862,1186.98 717.448,1184.39 718.035,1188.26 718.621,1188.58 719.208,1188.79 719.794,1192.77 720.38,1191.38 720.967,1189.1 721.553,1188.05 722.14,1188.18 722.726,1187.32 723.313,1188.1 723.899,1190.34 724.485,1190.46 725.072,1188.16 725.658,1193.29 726.245,1196.59 726.831,1198.61 727.417,1198.59 728.004,1199.92 728.59,1196.98 729.177,1197.37 729.763,1198.69 730.349,1198.57 730.936,1198.5 731.522,1198.56 732.109,1198.61 732.695,1198.28 733.282,1199.87 733.868,1201.46 734.454,1202.66 735.041,1206.84 735.627,1203.38 736.214,1203.01 736.8,1202.67 737.386,1200.82 737.973,1197.81 738.559,1196.2 739.146,1194.95 739.732,1189.23 740.318,1191.1 740.905,1191.32 741.491,1188.48 742.078,1189.02 742.664,1189.34 743.251,1189.5 743.837,1189.83 744.423,1189.97 745.01,1190.62 745.596,1192.4 746.183,1194.32 746.769,1194.62 747.355,1195 747.942,1193.73 748.528,1192.31 749.115,1193.88 749.701,1192.85 750.288,1192.98 750.874,1194.55 751.46,1196.38 752.047,1199.28 752.633,1197.88 753.22,1196.16 753.806,1194.79 754.392,1193.15 754.979,1191.62 755.565,1191.93 756.152,1194.97 756.738,1198.02 757.324,1202.41 757.911,1203.77 758.497,1201.8 759.084,1203.07 759.67,1201.52 760.257,1204.51 760.843,1204.06 761.429,1203.66 762.016,1201.9 762.602,1203.15 763.189,1202.69 763.775,1202.5 764.361,1197.24 764.948,1197.11 765.534,1199.94 766.121,1202.9 766.707,1204.1 767.293,1203.79 767.88,1204.53 768.466,1204.23 769.053,1205.12 769.639,1204.51 770.226,1203.97 770.812,1206.51 771.398,1210.62 771.985,1208.2 772.571,1203.97 773.158,1203.43 773.744,1201.53 774.33,1201.08 774.917,1197.45 775.503,1199.11 776.09,1194.55 776.676,1199.56 777.262,1199.56 777.849,1199.35 778.435,1195.62 779.022,1197.16 779.608,1201.74 780.195,1202.81 780.781,1199.39 781.367,1194.4 781.954,1195.65 782.54,1198.86 783.127,1201.61 783.713,1201.24 784.299,1200.95 784.886,1202.22 785.472,1201.6 786.059,1198.18 786.645,1196.46 787.232,1194.86 787.818,1195.38 788.404,1190.82 788.991,1189.32 789.577,1187.82 790.164,1188.01 790.75,1188.19 791.336,1193.08 791.923,1194.57 792.509,1194.5 793.096,1194.55 793.682,1194.61 794.268,1193.08 794.855,1190.32 795.441,1192.12 796.028,1192.38 796.614,1194.14 797.201,1194.44 797.787,1194.33 798.373,1194.06 798.96,1192.89 799.546,1194.59 800.133,1191.61 800.719,1191.6 801.305,1191.59 801.892,1190.15 802.478,1190.57 803.065,1187.83 803.651,1192.86 804.237,1191.73 804.824,1188.83 805.41,1187.56 805.997,1181.96 806.583,1180.84 807.17,1181.56 807.756,1182.72 808.342,1185.31 808.929,1184.23 809.515,1184.97 810.102,1185.41 810.688,1187.65 811.274,1188.01 811.861,1188.45 812.447,1190.37 813.034,1193.8 813.62,1195.65 814.206,1198.68 814.793,1201.35 815.379,1200.84 815.966,1200.67 816.552,1198.8 817.139,1198.6 817.725,1205.84 818.311,1200.54 818.898,1198.9 819.484,1199.96 820.071,1200.17 820.657,1202.84 821.243,1201.18 821.83,1199.14 822.416,1199 823.003,1201.6 823.589,1201.26 824.175,1199.58 824.762,1196.15 825.348,1197.57 825.935,1198.9 826.521,1200.31 827.108,1201.64 827.694,1202.94 828.28,1204.3 828.867,1207.07 829.453,1206.64 830.04,1206.03 830.626,1203.82 831.212,1201.73 831.799,1202.87 832.385,1202.36 832.972,1202.15 833.558,1200.2 834.145,1201.53 834.731,1201.06 835.317,1199.36 835.904,1199.16 836.49,1197.34 837.077,1189.46 837.663,1186.56 838.249,1187.13 838.836,1185.43 839.422,1187.81 840.009,1188.46 840.595,1188.79 841.181,1190.64 841.768,1190.79 842.354,1190.88 842.941,1189.52 843.527,1189.79 844.114,1191.54 844.7,1191.96 845.286,1188.83 845.873,1189.29 846.459,1191.27 847.046,1189.7 847.632,1191.51 848.218,1191.48 848.805,1194.62 849.391,1193 849.978,1194.57 850.564,1193.06 851.15,1193.62 851.737,1199.82 852.323,1197.68 852.91,1195.74 853.496,1197.24 854.083,1193.97 854.669,1197.02 855.255,1195.16 855.842,1193.52 856.428,1192.08 857.015,1195.16 857.601,1195.54 858.187,1195.61 858.774,1197.25 859.36,1200.16 859.947,1201.38 860.533,1202.29 861.119,1201.99 861.706,1199.99 862.292,1201.43 862.879,1203.8 863.465,1203.07 864.052,1204.27 864.638,1206.28 865.224,1205.46 865.811,1203.15 866.397,1202.8 866.984,1203.63 867.57,1200.14 868.156,1199.81 868.743,1199.55 869.329,1201.23 869.916,1204.09 870.502,1206.94 871.089,1205.06 871.675,1206.19 872.261,1207.34 872.848,1208.33 873.434,1207.62 874.021,1208.61 874.607,1208.06 875.193,1207.39 875.78,1206.62 876.366,1201.39 876.953,1197.89 877.539,1195.93 878.125,1195.92 878.712,1192.58 879.298,1187.93 879.885,1187.02 880.471,1187.12 881.058,1190.51 881.644,1187.52 882.23,1186.02 882.817,1185.2 883.403,1186.01 883.99,1186.57 884.576,1191.53 885.162,1193.28 885.749,1193.33 886.335,1194.66 886.922,1194.9 887.508,1191.4 888.094,1192.99 888.681,1193.3 889.267,1191.66 889.854,1187.16 890.44,1185.97 891.027,1188.1 891.613,1189.89 892.199,1191.34 892.786,1190.03 893.372,1188.33 893.959,1186.9 894.545,1187.45 895.131,1189.43 895.718,1191.49 896.304,1188.67 896.891,1190.61 897.477,1190.6 898.063,1189.2 898.65,1187.58 899.236,1187.58 899.823,1186.6 900.409,1188.51 900.996,1188.85 901.582,1190.88 902.168,1188.2 902.755,1188.58 903.341,1187.51 903.928,1189.03 904.514,1187.78 905.1,1187.94 905.687,1186.6 906.273,1186.78 906.86,1188.44 907.446,1189.99 908.032,1191.68 908.619,1191.58 909.205,1193.26 909.792,1194.83 910.378,1197.77 910.965,1196.07 911.551,1195.75 912.137,1194.6 912.724,1196.32 913.31,1197.74 913.897,1198.96 914.483,1201.53 915.069,1197.98 915.656,1197.81 916.242,1199.21 916.829,1203.2 917.415,1201.13 918.002,1199.75 918.588,1194.92 919.174,1197.89 919.761,1196.22 920.347,1197.73 920.934,1197.42 921.52,1197.37 922.106,1195.63 922.693,1195.25 923.279,1196.57 923.866,1194.95 924.452,1194.76 925.038,1191.66 925.625,1188.37 926.211,1188.92 926.798,1188.98 927.384,1188.89 927.971,1188.92 928.557,1191.98 929.143,1193.68 929.73,1195.2 930.316,1195.26 930.903,1193.6 931.489,1193.7 932.075,1193.79 932.662,1193.19 933.248,1189.97 933.835,1190.3 934.421,1190.74 935.007,1192.27 935.594,1193.91 936.18,1190.65 936.767,1189.41 937.353,1189.75 937.94,1189.81 938.526,1189.93 939.112,1186.98 939.699,1190.36 940.285,1190.29 940.872,1192.13 941.458,1192.39 942.044,1189.32 942.631,1187.89 943.217,1185.06 943.804,1189.83 944.39,1189.91 944.976,1190.12 945.563,1190.09 946.149,1191.9 946.736,1188.93 947.322,1190.72 947.909,1192.55 948.495,1189.57 949.081,1192.83 949.668,1189.8 950.254,1190.06 950.841,1188.75 951.427,1189.05 952.013,1190.72 952.6,1189.07 953.186,1189.15 953.773,1189.28 954.359,1187.98 954.945,1189.57 955.532,1188.27 956.118,1191.62 956.705,1191.73 957.291,1188.65 957.878,1185.72 958.464,1181.38 959.05,1181.91 959.637,1182.8 960.223,1183.19 960.81,1183.53 961.396,1185.31 961.982,1185.73 962.569,1189.43 963.155,1189.84 963.742,1193 964.328,1194.66 964.915,1192.95 965.501,1194.6 966.087,1194.51 966.674,1197.45 967.26,1198.86 967.847,1198.64 968.433,1198.68 969.019,1198.22 969.606,1194.65 970.192,1197.42 970.779,1197.04 971.365,1197.04 971.951,1195.45 972.538,1195.12 973.124,1191.83 973.711,1191.81 974.297,1188.61 974.884,1185.76 975.47,1187.68 976.056,1191.02 976.643,1189.96 977.229,1188.53 977.816,1190.23 978.402,1187.6 978.988,1189.52 979.575,1189.6 980.161,1192.86 980.748,1194.33 981.334,1195.83 981.92,1198.57 982.507,1198.55 983.093,1197.22 983.68,1189.49 984.266,1189.42 984.853,1192.55 985.439,1191.16 986.025,1192.92 986.612,1192.88 987.198,1194.39 987.785,1197.23 988.371,1198.8 988.957,1200.05 989.544,1199.72 990.13,1203.93 990.717,1202.97 991.303,1204.05 991.889,1204.53 992.476,1202.7 993.062,1200.39 993.649,1198.32 994.235,1200.72 994.822,1200.26 995.408,1196.64 995.994,1198.03 996.581,1196.09 997.167,1194.11 997.754,1192.21 998.34,1195.53 998.926,1196.79 999.513,1196.49 1000.1,1193.29 1000.69,1194.61 1001.27,1196.04 1001.86,1195.77 1002.44,1198.85 1003.03,1198.33 1003.62,1196.67 1004.2,1197.91 1004.79,1194.79 1005.38,1194.5 1005.96,1195.93 1006.55,1195.46 1007.14,1197.05 1007.72,1195.26 1008.31,1193.26 1008.9,1193.38 1009.48,1192.01 1010.07,1188.81 1010.65,1190.19 1011.24,1193.5 1011.83,1195.02 1012.41,1195 1013,1191.96 1013.59,1193.37 1014.17,1191.26 1014.76,1191.55 1015.35,1191.47 1015.93,1194.68 1016.52,1194.93 1017.11,1200.96 1017.69,1202.23 1018.28,1198.5 1018.86,1195.39 1019.45,1194.9 1020.04,1195.21 1020.62,1193.64 1021.21,1191.89 1021.8,1190.55 1022.38,1187.47 1022.97,1186.25 1023.56,1186.49 1024.14,1186.86 1024.73,1185.61 1025.32,1187.61 1025.9,1186.41 1026.49,1187.14 1027.07,1185.64 1027.66,1187.46 1028.25,1188.99 1028.83,1186.13 1029.42,1186.56 1030.01,1184.09 1030.59,1186.02 1031.18,1186.02 1031.77,1186.45 1032.35,1188.34 1032.94,1190 1033.52,1191.87 1034.11,1193.03 1034.7,1197.64 1035.28,1197.13 1035.87,1192.16 1036.46,1192.09 1037.04,1194.79 1037.63,1194.82 1038.22,1196.53 1038.8,1194.69 1039.39,1192.98 1039.98,1193.3 1040.56,1191.8 1041.15,1190.34 1041.73,1187.36 1042.32,1187.44 1042.91,1189.6 1043.49,1191.41 1044.08,1192.99 1044.67,1193.07 1045.25,1194.64 1045.84,1191.45 1046.43,1194.1 1047.01,1195.58 1047.6,1198.59 1048.19,1196.69 1048.77,1196.46 1049.36,1196.35 1049.94,1194.51 1050.53,1195.55 1051.12,1193.81 1051.7,1187.65 1052.29,1189.56 1052.88,1188.13 1053.46,1187.03 1054.05,1188.92 1054.64,1189.06 1055.22,1185.87 1055.81,1186.35 1056.39,1188.11 1056.98,1188.38 1057.57,1184.05 1058.15,1184.65 1058.74,1185.12 1059.33,1188.43 1059.91,1187.31 1060.5,1187.83 1061.09,1187.96 1061.67,1189.9 1062.26,1192.94 1062.85,1192.9 1063.43,1193.01 1064.02,1191.34 1064.6,1191.63 1065.19,1194.7 1065.78,1191.51 1066.36,1191.43 1066.95,1192.99 1067.54,1193.1 1068.12,1194.55 1068.71,1194.18 1069.3,1195.42 1069.88,1199.81 1070.47,1201.01 1071.06,1200.73 1071.64,1200.19 1072.23,1198.48 1072.81,1201.12 1073.4,1203.55 1073.99,1204.82 1074.57,1207.41 1075.16,1204.94 1075.75,1202.85 1076.33,1197.63 1076.92,1197.55 1077.51,1192.65 1078.09,1195.57 1078.68,1192.33 1079.26,1192.74 1079.85,1193.1 1080.44,1193.04 1081.02,1192.84 1081.61,1192.78 1082.2,1191.26 1082.78,1189.61 1083.37,1191.29 1083.96,1192.77 1084.54,1200.41 1085.13,1200.02 1085.72,1199.56 1086.3,1199.17 1086.89,1200.35 1087.47,1199.72 1088.06,1201.07 1088.65,1200.46 1089.23,1198.34 1089.82,1198.04 1090.41,1197.65 1090.99,1198.97 1091.58,1197.23 1092.17,1195.71 1092.75,1191.35 1093.34,1191.46 1093.93,1191.5 1094.51,1190.42 1095.1,1190.59 1095.68,1190.88 1096.27,1189.38 1096.86,1189.5 1097.44,1189.65 1098.03,1189.74 1098.62,1191.43 1099.2,1189.86 1099.79,1189.84 1100.38,1189.89 1100.96,1190.04 1101.55,1190.36 1102.14,1192.05 1102.72,1193.75 1103.31,1192.46 1103.89,1190.77 1104.48,1192.28 1105.07,1193.75 1105.65,1191.92 1106.24,1189.05 1106.83,1189.4 1107.41,1187.83 1108,1188.29 1108.59,1185.11 1109.17,1187.12 1109.76,1184.47 1110.34,1183.06 1110.93,1184.96 1111.52,1186.72 1112.1,1187.23 1112.69,1187.2 1113.28,1188.75 1113.86,1184.51 1114.45,1183.47 1115.04,1183.66 1115.62,1184.23 1116.21,1184.78 1116.8,1186.59 1117.38,1186.61 1117.97,1188.11 1118.55,1188.37 1119.14,1186.82 1119.73,1185.41 1120.31,1188.91 1120.9,1187.37 1121.49,1188.9 1122.07,1189.08 1122.66,1190.53 1123.25,1196.58 1123.83,1197.35 1124.42,1197.29 1125.01,1197.09 1125.59,1198.51 1126.18,1201.36 1126.76,1202.29 1127.35,1204.88 1127.94,1202.81 1128.52,1199.19 1129.11,1198.69 1129.7,1196.79 1130.28,1194.99 1130.87,1193.33 1131.46,1194.97 1132.04,1196.31 1132.63,1196.21 1133.21,1197.62 1133.8,1202.1 1134.39,1199.82 1134.97,1199.17 1135.56,1200.12 1136.15,1202.87 1136.73,1199.49 1137.32,1197.73 1137.91,1200.32 1138.49,1200.04 1139.08,1202.45 1139.67,1202.1 1140.25,1200.08 1140.84,1197.78 1141.42,1195.88 1142.01,1194.19 1142.6,1191.23 1143.18,1189.64 1143.77,1189.63 1144.36,1189.66 1144.94,1189.57 1145.53,1188.43 1146.12,1189.75 1146.7,1189.55 1147.29,1189.55 1147.88,1189.73 1148.46,1188.65 1149.05,1187.49 1149.63,1186.16 1150.22,1185.05 1150.81,1186.83 1151.39,1187.18 1151.98,1188.85 1152.57,1190.81 1153.15,1189.54 1153.74,1188.2 1154.33,1188.47 1154.91,1188.72 1155.5,1188.92 1156.09,1190.53 1156.67,1190.44 1157.26,1189.1 1157.84,1189.14 1158.43,1187.61 1159.02,1189.17 1159.6,1184.62 1160.19,1180.39 1160.78,1183.96 1161.36,1184.48 1161.95,1183.37 1162.54,1184.15 1163.12,1184.83 1163.71,1183.94 1164.29,1184.44 1164.88,1186.5 1165.47,1185.44 1166.05,1187.4 1166.64,1189.19 1167.23,1189.7 1167.81,1191.44 1168.4,1190.11 1168.99,1193.53 1169.57,1194.84 1170.16,1195.04 1170.75,1196.64 1171.33,1196.38 1171.92,1197.65 1172.5,1197.28 1173.09,1196.72 1173.68,1194.83 1174.26,1191.55 1174.85,1191.57 1175.44,1194.58 1176.02,1191.17 1176.61,1189.49 1177.2,1188.17 1177.78,1188.47 1178.37,1190.45 1178.96,1190.58 1179.54,1187.75 1180.13,1187.84 1180.71,1186.55 1181.3,1186.99 1181.89,1184.24 1182.47,1184.49 1183.06,1184.87 1183.65,1185.43 1184.23,1190.49 1184.82,1189.15 1185.41,1190.64 1185.99,1192.42 1186.58,1193.94 1187.16,1196.96 1187.75,1195.38 1188.34,1195.17 1188.92,1193.2 1189.51,1193.25 1190.1,1194.96 1190.68,1197.9 1191.27,1197.89 1191.86,1196.16 1192.44,1197.44 1193.03,1198.74 1193.62,1198.68 1194.2,1199.7 1194.79,1196.19 1195.37,1194.65 1195.96,1195.79 1196.55,1192.62 1197.13,1198.59 1197.72,1201.14 1198.31,1199.25 1198.89,1197.21 1199.48,1195.16 1200.07,1194.78 1200.65,1197.65 1201.24,1195.68 1201.83,1195.44 1202.41,1195.02 1203,1193.46 1203.58,1192.41 1204.17,1198.37 1204.76,1198.08 1205.34,1197.6 1205.93,1195.63 1206.52,1189.55 1207.1,1188.1 1207.69,1186.58 1208.28,1188.49 1208.86,1190.06 1209.45,1191.67 1210.03,1194.66 1210.62,1193.33 1211.21,1193 1211.79,1191.48 1212.38,1195.93 1212.97,1194.09 1213.55,1193.73 1214.14,1193.61 1214.73,1194.71 1215.31,1194.56 1215.9,1196 1216.49,1195.67 1217.07,1197.03 1217.66,1196.86 1218.24,1197.91 1218.83,1197.53 1219.42,1198.58 1220,1199.93 1220.59,1200.89 1221.18,1200.54 1221.76,1201.51 1222.35,1199.53 1222.94,1193.11 1223.52,1193.15 1224.11,1194.68 1224.7,1194.51 1225.28,1195.81 1225.87,1196.92 1226.45,1196.74 1227.04,1189.88 1227.63,1191.58 1228.21,1192.77 1228.8,1192.32 1229.39,1189.02 1229.97,1188.99 1230.56,1191.9 1231.15,1193.39 1231.73,1190.45 1232.32,1192.16 1232.91,1191.96 1233.49,1192.18 1234.08,1187.3 1234.66,1186.09 1235.25,1186.57 1235.84,1188.3 1236.42,1190.06 1237.01,1190.22 1237.6,1192.04 1238.18,1190.41 1238.77,1187.44 1239.36,1181.39 1239.94,1186.81 1240.53,1187.13 1241.11,1185.64 1241.7,1187.44 1242.29,1182.89 1242.87,1184.68 1243.46,1185.31 1244.05,1183.86 1244.63,1184.18 1245.22,1184.74 1245.81,1184.86 1246.39,1185.23 1246.98,1185.44 1247.57,1187.64 1248.15,1186.14 1248.74,1186.46 1249.32,1187.87 1249.91,1186.64 1250.5,1183.9 1251.08,1187.41 1251.67,1186 1252.26,1189.16 1252.84,1189.27 1253.43,1186.57 1254.02,1185.26 1254.6,1185.49 1255.19,1187.56 1255.78,1189.54 1256.36,1189.73 1256.95,1190.08 1257.53,1188.46 1258.12,1192.97 1258.71,1191.47 1259.29,1191.31 1259.88,1191.29 1260.47,1194.36 1261.05,1191.15 1261.64,1192.41 1262.23,1196.65 1262.81,1196.49 1263.4,1199.52 1263.98,1201.12 1264.57,1199.18 1265.16,1197.6 1265.74,1197.35 1266.33,1195.8 1266.92,1192.28 1267.5,1192.03 1268.09,1193.83 1268.68,1193.77 1269.26,1192.03 1269.85,1192.18 1270.44,1190.54 1271.02,1187.77 1271.61,1189.27 1272.19,1190.9 1272.78,1189.2 1273.37,1192.5 1273.95,1190.74 1274.54,1189.27 1275.13,1191.22 1275.71,1189.58 1276.3,1189.57 1276.89,1188.53 1277.47,1190.26 1278.06,1193.43 1278.65,1193.26 1279.23,1194.88 1279.82,1193.08 1280.4,1191.33 1280.99,1191.76 1281.58,1191.74 1282.16,1193.25 1282.75,1194.94 1283.34,1196.1 1283.92,1196.13 1284.51,1195.49 1285.1,1198.34 1285.68,1199.3 1286.27,1198.84 1286.86,1200.24 1287.44,1199.65 1288.03,1200.55 1288.61,1201.72 1289.2,1201.48 1289.79,1197.71 1290.37,1192.72 1290.96,1190.94 1291.55,1192.55 1292.13,1195.77 1292.72,1194.42 1293.31,1198.64 1293.89,1196.74 1294.48,1196.34 1295.06,1197.35 1295.65,1195.41 1296.24,1193.67 1296.82,1192 1297.41,1190.48 1298,1189.23 1298.58,1189.87 1299.17,1191.74 1299.76,1195 1300.34,1193.3 1300.93,1191.3 1301.52,1191.06 1302.1,1192.67 1302.69,1195.96 1303.27,1197.61 1303.86,1196.11 1304.45,1197.57 1305.03,1197.38 1305.62,1198.32 1306.21,1201.09 1306.79,1195.8 1307.38,1194.02 1307.97,1194.2 1308.55,1192.76 1309.14,1190.08 1309.73,1188.98 1310.31,1190.7 1310.9,1189.42 1311.48,1189.55 1312.07,1191.25 1312.66,1194.56 1313.24,1193.45 1313.83,1193.25 1314.42,1196.1 1315,1197.75 1315.59,1195.41 1316.18,1195.3 1316.76,1193.63 1317.35,1193.34 1317.93,1191.75 1318.52,1193.31 1319.11,1188.6 1319.69,1191.86 1320.28,1190.13 1320.87,1193.38 1321.45,1194.45 1322.04,1195.62 1322.63,1195.41 1323.21,1198.29 1323.8,1196.55 1324.39,1194.56 1324.97,1191.82 1325.56,1192.16 1326.14,1190.78 1326.73,1189.41 1327.32,1189.41 1327.9,1190.9 1328.49,1187.89 1329.08,1191.43 1329.66,1190.19 1330.25,1185.55 1330.84,1188.89 1331.42,1187.39 1332.01,1190.8 1332.6,1191.89 1333.18,1193.24 1333.77,1196.04 1334.35,1194.44 1334.94,1189.45 1335.53,1189.83 1336.11,1188.49 1336.7,1190.28 1337.29,1191.76 1337.87,1191.62 1338.46,1191.48 1339.05,1194.68 1339.63,1197.39 1340.22,1198.9 1340.8,1198.68 1341.39,1196.85 1341.98,1198.25 1342.56,1200.92 1343.15,1200.37 1343.74,1199.8 1344.32,1196.5 1344.91,1193.67 1345.5,1194.9 1346.08,1193.34 1346.67,1193.28 1347.26,1197.61 1347.84,1195.74 1348.43,1195.5 1349.01,1195.31 1349.6,1195.23 1350.19,1195.43 1350.77,1195.26 1351.36,1196.91 1351.95,1197.95 1352.53,1196.01 1353.12,1194.32 1353.71,1194.62 1354.29,1195.7 1354.88,1194.1 1355.47,1192.37 1356.05,1193.82 1356.64,1196.48 1357.22,1194.63 1357.81,1193.04 1358.4,1192.97 1358.98,1191.43 1359.57,1185.25 1360.16,1185.67 1360.74,1185.86 1361.33,1185.88 1361.92,1184.82 1362.5,1183.87 1363.09,1184.08 1363.68,1183.13 1364.26,1183.09 1364.85,1181.84 1365.43,1180.95 1366.02,1178.33 1366.61,1182.14 1367.19,1182.8 1367.78,1184.82 1368.37,1180.68 1368.95,1182.54 1369.54,1186.22 1370.13,1186.28 1370.71,1186.89 1371.3,1182.51 1371.88,1182.95 1372.47,1183.55 1373.06,1185.16 1373.64,1185.99 1374.23,1186.23 1374.82,1186.48 1375.4,1182.39 1375.99,1179.66 1376.58,1177.37 1377.16,1181.37 1377.75,1186.4 1378.34,1186.44 1378.92,1183.72 1379.51,1185.54 1380.09,1187.35 1380.68,1187.55 1381.27,1187.66 1381.85,1187.92 1382.44,1189.68 1383.03,1188.47 1383.61,1188.63 1384.2,1185.73 1384.79,1187.49 1385.37,1189.15 1385.96,1192.66 1386.55,1191.35 1387.13,1191.34 1387.72,1191.29 1388.3,1191.57 1388.89,1190.27 1389.48,1191.83 1390.06,1188.86 1390.65,1189.32 1391.24,1188.16 1391.82,1188.58 1392.41,1190.24 1393,1190.04 1393.58,1190.13 1394.17,1188.74 1394.75,1190.52 1395.34,1190.76 1395.93,1191.13 1396.51,1189.7 1397.1,1191.38 1397.69,1191.68 1398.27,1193.44 1398.86,1191.82 1399.45,1194.74 1400.03,1194.61 1400.62,1196.02 1401.21,1197.5 1401.79,1198.75 1402.38,1198.17 1402.96,1198.22 1403.55,1198 1404.14,1200.86 1404.72,1198.91 1405.31,1200.2 1405.9,1196.85 1406.48,1195.13 1407.07,1191.68 1407.66,1191.74 1408.24,1191.92 1408.83,1190.58 1409.42,1189.23 1410,1188.95 1410.59,1190.54 1411.17,1189.34 1411.76,1188.08 1412.35,1187.95 1412.93,1186.43 1413.52,1185.08 1414.11,1183.68 1414.69,1186.07 1415.28,1186.64 1415.87,1188.3 1416.45,1189.79 1417.04,1188.52 1417.63,1192.1 1418.21,1196.67 1418.8,1193.41 1419.38,1191.45 1419.97,1194.56 1420.56,1197.3 1421.14,1195.72 1421.73,1195.73 1422.32,1196.98 1422.9,1196.98 1423.49,1196.77 1424.08,1193.39 1424.66,1195.05 1425.25,1196.59 1425.83,1196.39 1426.42,1192.67 1427.01,1186.57 1427.59,1186.88 1428.18,1188.69 1428.77,1187.42 1429.35,1189.17 1429.94,1192.25 1430.53,1192.48 1431.11,1193.97 1431.7,1193.99 1432.29,1195.1 1432.87,1194.95 1433.46,1194.31 1434.04,1194.46 1434.63,1194.1 1435.22,1195.6 1435.8,1198.1 1436.39,1199.28 1436.98,1200.21 1437.56,1201.52 1438.15,1200.67 1438.74,1198.46 1439.32,1199.93 1439.91,1196.5 1440.5,1196.23 1441.08,1197.48 1441.67,1198.46 1442.25,1199.92 1442.84,1201.23 1443.43,1199.48 1444.01,1196.14 1444.6,1195.97 1445.19,1197.13 1445.77,1195.37 1446.36,1193.66 1446.95,1195.05 1447.53,1194.84 1448.12,1193.1 1448.7,1192.7 1449.29,1195.61 1449.88,1193.53 1450.46,1192.08 1451.05,1191.85 1451.64,1192.23 1452.22,1192.24 1452.81,1193.91 1453.4,1195.48 1453.98,1193.58 1454.57,1198.15 1455.16,1196.07 1455.74,1195.62 1456.33,1195.13 1456.91,1196.36 1457.5,1197.79 1458.09,1197.57 1458.67,1198.76 1459.26,1198.12 1459.85,1198.24 1460.43,1199.38 1461.02,1200.77 1461.61,1203.18 1462.19,1202.34 1462.78,1201.73 1463.37,1198.09 1463.95,1196.02 1464.54,1194.07 1465.12,1195.34 1465.71,1191.76 1466.3,1191.76 1466.88,1191.62 1467.47,1191.17 1468.06,1186.6 1468.64,1185.45 1469.23,1187.14 1469.82,1185.67 1470.4,1185.86 1470.99,1184.62 1471.57,1184.96 1472.16,1186.84 1472.75,1186.96 1473.33,1187.2 1473.92,1186.21 1474.51,1185.05 1475.09,1182.73 1475.68,1184.9 1476.27,1187.06 1476.85,1187.24 1477.44,1186.15 1478.03,1186.62 1478.61,1190.13 1479.2,1188.63 1479.78,1190.58 1480.37,1190.7 1480.96,1190.63 1481.54,1190.75 1482.13,1192.46 1482.72,1189.34 1483.3,1187.65 1483.89,1187.76 1484.48,1191.08 1485.06,1190.95 1485.65,1187.97 1486.24,1188.1 1486.82,1186.88 1487.41,1185.71 1487.99,1182.97 1488.58,1184.97 1489.17,1186.79 1489.75,1185.38 1490.34,1187.2 1490.93,1190.4 1491.51,1190.26 1492.1,1191.68 1492.69,1193.38 1493.27,1193.32 1493.86,1191.45 1494.45,1193.04 1495.03,1193.15 1495.62,1194.21 1496.2,1193.01 1496.79,1191.47 1497.38,1193.02 1497.96,1191.52 1498.55,1191.13 1499.14,1189.79 1499.72,1188.92 1500.31,1187.6 1500.9,1186.38 1501.48,1189.45 1502.07,1189.77 1502.65,1188.27 1503.24,1186.99 1503.83,1185.67 1504.41,1186.09 1505,1188.19 1505.59,1188.29 1506.17,1188.61 1506.76,1187.37 1507.35,1188.76 1507.93,1190.25 1508.52,1193.5 1509.11,1193.44 1509.69,1197.93 1510.28,1197.56 1510.86,1195.69 1511.45,1198.48 1512.04,1196.92 1512.62,1196.58 1513.21,1194.76 1513.8,1191.66 1514.38,1190.42 1514.97,1192.3 1515.56,1191.19 1516.14,1191.06 1516.73,1189.84 1517.32,1191.8 1517.9,1192.17 1518.49,1190.65 1519.07,1193.95 1519.66,1195.31 1520.25,1196.79 1520.83,1196.43 1521.42,1195.97 1522.01,1194.07 1522.59,1191.22 1523.18,1191.06 1523.77,1188.33 1524.35,1188.34 1524.94,1189.99 1525.52,1191.38 1526.11,1189.73 1526.7,1188.55 1527.28,1188.87 1527.87,1190.34 1528.46,1188.69 1529.04,1190.23 1529.63,1188.87 1530.22,1189 1530.8,1190.5 1531.39,1192.05 1531.98,1191.95 1532.56,1188.69 1533.15,1186.94 1533.73,1182.51 1534.32,1184.28 1534.91,1189.31 1535.49,1189.6 1536.08,1191.36 1536.67,1196.1 1537.25,1197.33 1537.84,1197.38 1538.43,1197.38 1539.01,1198.54 1539.6,1198.43 1540.19,1198 1540.77,1196.24 1541.36,1199.03 1541.94,1201.59 1542.53,1199.74 1543.12,1200.77 1543.7,1201.67 1544.29,1204.43 1544.88,1203.49 1545.46,1203.96 1546.05,1198.56 1546.64,1196.53 1547.22,1194.85 1547.81,1193.27 1548.4,1191.66 1548.98,1190 1549.57,1190.12 1550.15,1191.71 1550.74,1192.12 1551.33,1191.97 1551.91,1190.59 1552.5,1190.78 1553.09,1189.09 1553.67,1189.16 1554.26,1184.87 1554.85,1183.95 1555.43,1180.01 1556.02,1180.48 1556.6,1181.14 1557.19,1176.95 1557.78,1174.34 1558.36,1176.42 1558.95,1175.79 1559.54,1178.14 1560.12,1178.96 1560.71,1180.01 1561.3,1180.68 1561.88,1181.09 1562.47,1178.52 1563.06,1180.33 1563.64,1180.81 1564.23,1184.8 1564.81,1186.97 1565.4,1188.73 1565.99,1192.21 1566.57,1188.95 1567.16,1190.39 1567.75,1190.31 1568.33,1185.99 1568.92,1184.84 1569.51,1186.89 1570.09,1189.97 1570.68,1188.67 1571.27,1187.46 1571.85,1187.85 1572.44,1187.9 1573.02,1188.27 1573.61,1188.14 1574.2,1187.05 1574.78,1189 1575.37,1191.01 1575.96,1192.7 1576.54,1194.25 1577.13,1192.58 1577.72,1192.71 1578.3,1192.76 1578.89,1190.97 1579.47,1190.95 1580.06,1192.59 1580.65,1189.24 1581.23,1192.32 1581.82,1193.71 1582.41,1195.04 1582.99,1194.94 1583.58,1196.23 1584.17,1197.88 1584.75,1199.08 1585.34,1200.32 1585.93,1201.52 1586.51,1196.35 1587.1,1194.56 1587.68,1193.04 1588.27,1194.34 1588.86,1194.82 1589.44,1193.17 1590.03,1191.65 1590.62,1187.07 1591.2,1190.24 1591.79,1190.38 1592.38,1190.59 1592.96,1190.83 1593.55,1189.58 1594.14,1190.9 1594.72,1187.62 1595.31,1187.87 1595.89,1189.78 1596.48,1188.3 1597.07,1189.92 1597.65,1191.19 1598.24,1191.03 1598.83,1192.62 1599.41,1192.78 1600,1195.7 1600.59,1196.92 1601.17,1196.83 1601.76,1199.71 1602.34,1202.46 1602.93,1203.22 1603.52,1201.56 1604.1,1202.69 1604.69,1203.93 1605.28,1201.75 1605.86,1204.21 1606.45,1203.75 1607.04,1200.04 1607.62,1199.77 1608.21,1204.01 1608.8,1204.82 1609.38,1200.99 1609.97,1200.62 1610.55,1200.01 1611.14,1199.63 1611.73,1197.73 1612.31,1194.52 1612.9,1194.62 1613.49,1194.24 1614.07,1192.63 1614.66,1197.21 1615.25,1195.44 1615.83,1196.75 1616.42,1200.95 1617.01,1198.63 1617.59,1199.88 1618.18,1199.43 1618.76,1199.21 1619.35,1197.48 1619.94,1197.11 1620.52,1196.9 1621.11,1195.22 1621.7,1194.94 1622.28,1194.84 1622.87,1188.41 1623.46,1190.11 1624.04,1195.97 1624.63,1194.26 1625.22,1193.98 1625.8,1192.39 1626.39,1195.25 1626.97,1195.19 1627.56,1194.79 1628.15,1191.45 1628.73,1190.1 1629.32,1190.06 1629.91,1193.47 1630.49,1191.96 1631.08,1190.57 1631.67,1190.62 1632.25,1189.32 1632.84,1190.88 1633.42,1190.92 1634.01,1191.25 1634.6,1190.95 1635.18,1190.66 1635.77,1192.12 1636.36,1190.42 1636.94,1191.83 1637.53,1190.18 1638.12,1188.67 1638.7,1190.2 1639.29,1188.79 1639.88,1189.06 1640.46,1188.87 1641.05,1189.05 1641.63,1185.92 1642.22,1178.54 1642.81,1177.73 1643.39,1176.75 1643.98,1177.74 1644.57,1180.06 1645.15,1180.73 1645.74,1184.11 1646.33,1184.63 1646.91,1189.58 1647.5,1188.39 1648.09,1193.32 1648.67,1194.77 1649.26,1195 1649.84,1194.84 1650.43,1193.12 1651.02,1191.81 1651.6,1193.4 1652.19,1194.94 1652.78,1194.78 1653.36,1194.5 1653.95,1191.68 1654.54,1191.74 1655.12,1191.88 1655.71,1193.28 1656.29,1194.91 1656.88,1194.72 1657.47,1193 1658.05,1194.66 1658.64,1197.61 1659.23,1194.34 1659.81,1196.11 1660.4,1191.22 1660.99,1191.24 1661.57,1189.83 1662.16,1189.9 1662.75,1191.68 1663.33,1193.36 1663.92,1193.61 1664.5,1194.22 1665.09,1195.18 1665.68,1195.24 1666.26,1199.91 1666.85,1202.96 1667.44,1200.62 1668.02,1199.95 1668.61,1202.62 1669.2,1203.76 1669.78,1203.12 1670.37,1205.58 1670.96,1206.1 1671.54,1206.88 1672.13,1207.68 1672.71,1205.18 1673.3,1199.72 1673.89,1198.13 1674.47,1200.56 1675.06,1196.85 1675.65,1195.3 1676.23,1194.99 1676.82,1192.69 1677.41,1189.39 1677.99,1189.59 1678.58,1188.18 1679.17,1188.14 1679.75,1183.84 1680.34,1184.81 1680.92,1183.68 1681.51,1185.68 1682.1,1186.06 1682.68,1186.43 1683.27,1183.47 1683.86,1180.96 1684.44,1183.46 1685.03,1183.96 1685.62,1184.18 1686.2,1184.17 1686.79,1184.48 1687.37,1186.46 1687.96,1189.36 1688.55,1189.14 1689.13,1187.97 1689.72,1183.99 1690.31,1188.95 1690.89,1189.25 1691.48,1189.83 1692.07,1190 1692.65,1190.19 1693.24,1190.38 1693.83,1188.99 1694.41,1188.78 1695,1190.77 1695.58,1190.71 1696.17,1190.91 1696.76,1189.15 1697.34,1192.53 1697.93,1192.75 1698.52,1191.23 1699.1,1191.43 1699.69,1191.38 1700.28,1191.48 1700.86,1191.21 1701.45,1190.97 1702.04,1192.55 1702.62,1192.68 1703.21,1192.55 1703.79,1192.45 1704.38,1189.1 1704.97,1187.39 1705.55,1190.67 1706.14,1189.48 1706.73,1189.48 1707.31,1189.66 1707.9,1189.7 1708.49,1188.62 1709.07,1184.25 1709.66,1185.9 1710.24,1187.89 1710.83,1189.66 1711.42,1192.84 1712,1191.05 1712.59,1189.52 1713.18,1189.9 1713.76,1189.8 1714.35,1189.98 1714.94,1191.49 1715.52,1193.12 1716.11,1194.3 1716.7,1193.9 1717.28,1193.5 1717.87,1196.53 1718.45,1192 1719.04,1193.34 1719.63,1190.47 1720.21,1190.5 1720.8,1190.83 1721.39,1192.2 1721.97,1193.71 1722.56,1192.04 1723.15,1193.52 1723.73,1193.64 1724.32,1192.03 1724.91,1192.18 1725.49,1192.04 1726.08,1193.56 1726.66,1196.75 1727.25,1198.03 1727.84,1196.43 1728.42,1194.64 1729.01,1196.05 1729.6,1196.11 1730.18,1195.87 1730.77,1195.68 1731.36,1195.46 1731.94,1192.17 1732.53,1190.85 1733.11,1191 1733.7,1189.76 1734.29,1194.27 1734.87,1194.32 1735.46,1196.95 1736.05,1196.59 1736.63,1199.42 1737.22,1200.79 1737.81,1200.57 1738.39,1200.01 1738.98,1198.09 1739.57,1199.38 1740.15,1197.25 1740.74,1200.09 1741.32,1201.22 1741.91,1197.42 1742.5,1197.49 1743.08,1192.69 1743.67,1192.58 1744.26,1192.5 1744.84,1192.72 1745.43,1190.96 1746.02,1190.95 1746.6,1192.67 1747.19,1192.77 1747.78,1195.5 1748.36,1195.59 1748.95,1195.18 1749.53,1194.91 1750.12,1194.35 1750.71,1197.07 1751.29,1198.48 1751.88,1198.59 1752.47,1198.15 1753.05,1197.37 1753.64,1195.57 1754.23,1197.07 1754.81,1196.83 1755.4,1196.68 1755.99,1196.55 1756.57,1194.86 1757.16,1191.44 1757.74,1189.88 1758.33,1190.01 1758.92,1190 1759.5,1187.26 1760.09,1187.4 1760.68,1188.94 1761.26,1189.18 1761.85,1189.26 1762.44,1192.71 1763.02,1195.58 1763.61,1193.91 1764.19,1192.24 1764.78,1197.09 1765.37,1194.94 1765.95,1193.08 1766.54,1196.07 1767.13,1191.02 1767.71,1193.43 1768.3,1195.03 1768.89,1194.96 1769.47,1194.79 1770.06,1195.02 1770.65,1196.42 1771.23,1194.65 1771.82,1192.96 1772.4,1191.49 1772.99,1191.04 1773.58,1190.92 1774.16,1189.53 1774.75,1195.8 1775.34,1192.75 1775.92,1194.17 1776.51,1187.87 1777.1,1187.98 1777.68,1188.42 1778.27,1188.87 1778.86,1189.12 1779.44,1189.38 1780.03,1183.6 1780.61,1184.13 1781.2,1187.79 1781.79,1188.18 1782.37,1186.74 1782.96,1184.25 1783.55,1184.64 1784.13,1185.02 1784.72,1185.69 1785.31,1187.65 1785.89,1187.51 1786.48,1184.98 1787.06,1184.05 1787.65,1185.79 1788.24,1186.02 1788.82,1186.11 1789.41,1186.65 1790,1185.01 1790.58,1183.87 1791.17,1184.46 1791.76,1184.93 1792.34,1182.31 1792.93,1181.21 1793.52,1181.58 1794.1,1185.5 1794.69,1185.82 1795.27,1186.34 1795.86,1185.21 1796.45,1187.37 1797.03,1187.7 1797.62,1189.35 1798.21,1184.86 1798.79,1181.82 1799.38,1185.5 1799.97,1181.74 1800.55,1183.92 1801.14,1182.75 1801.73,1183.42 1802.31,1185.65 1802.9,1184.53 1803.48,1183.31 1804.07,1183.58 1804.66,1185.54 1805.24,1186.01 1805.83,1186.56 1806.42,1185.37 1807,1187.4 1807.59,1189.09 1808.18,1189.1 1808.76,1187.95 1809.35,1189.9 1809.94,1193.04 1810.52,1196.04 1811.11,1195.79 1811.69,1197.12 1812.28,1195.73 1812.87,1194.36 1813.45,1194.22 1814.04,1195.65 1814.63,1195.64 1815.21,1195.63 1815.8,1195.56 1816.39,1195.37 1816.97,1198.26 1817.56,1197.97 1818.14,1196.45 1818.73,1195.02 1819.32,1193.34 1819.9,1198.21 1820.49,1200.68 1821.08,1201.8 1821.66,1200.05 1822.25,1199.74 1822.84,1199.34 1823.42,1200.7 1824.01,1200.34 1824.6,1199.52 1825.18,1200.98 1825.77,1202.31 1826.35,1204.72 1826.94,1199.58 1827.53,1199.5 1828.11,1199.02 1828.7,1197.29 1829.29,1195.56 1829.87,1189.29 1830.46,1191.19 1831.05,1191.05 1831.63,1192.79 1832.22,1194.14 1832.81,1195.53 1833.39,1192.31 1833.98,1193.81 1834.56,1193.35 1835.15,1193.11 1835.74,1194.45 1836.32,1194.57 1836.91,1194.31 1837.5,1194.33 1838.08,1198.33 1838.67,1196.33 1839.26,1193.24 1839.84,1196.47 1840.43,1194.45 1841.01,1196.07 1841.6,1192.95 1842.19,1194.54 1842.77,1192.76 1843.36,1191.12 1843.95,1189.7 1844.53,1191.67 1845.12,1193.46 1845.71,1191.95 1846.29,1193.88 1846.88,1195.36 1847.47,1194.05 1848.05,1192.57 1848.64,1192.5 1849.22,1190.98 1849.81,1186.77 1850.4,1188.74 1850.98,1192.15 1851.57,1193.62 1852.16,1195.25 1852.74,1196.84 1853.33,1198.14 1853.92,1196.02 1854.5,1196.02 1855.09,1196.16 1855.68,1195.63 1856.26,1198.27 1856.85,1199.51 1857.43,1199.48 1858.02,1197.5 1858.61,1197.35 1859.19,1198.68 1859.78,1199.61 1860.37,1200.92 1860.95,1200.21 1861.54,1199.86 1862.13,1197.72 1862.71,1197.34 1863.3,1194.28 1863.88,1196.97 1864.47,1198.11 1865.06,1196.55 1865.64,1196.23 1866.23,1196.21 1866.82,1194.39 1867.4,1190.96 1867.99,1190.77 1868.58,1189.21 1869.16,1195.18 1869.75,1196.45 1870.34,1192.97 1870.92,1191.6 1871.51,1188.92 1872.09,1186.18 1872.68,1186.37 1873.27,1182.06 1873.85,1183.94 1874.44,1185.82 1875.03,1187.65 1875.61,1183.01 1876.2,1188.02 1876.79,1187.84 1877.37,1186.52 1877.96,1184.97 1878.55,1183.84 1879.13,1182.56 1879.72,1183.35 1880.3,1185.51 1880.89,1187.36 1881.48,1187.66 1882.06,1186.32 1882.65,1185.1 1883.24,1185.23 1883.82,1185.54 1884.41,1184.47 1885,1186.42 1885.58,1191.12 1886.17,1191.05 1886.76,1191.02 1887.34,1191.08 1887.93,1190.85 1888.51,1190.64 1889.1,1195.5 1889.69,1196.55 1890.27,1196.47 1890.86,1196.16 1891.45,1195.97 1892.03,1195.74 1892.62,1195.24 1893.21,1195.18 1893.79,1196.74 1894.38,1194.95 1894.96,1196.61 1895.55,1194.99 1896.14,1194.88 1896.72,1195.99 1897.31,1194.07 1897.9,1192.52 1898.48,1192.11 1899.07,1191.82 1899.66,1191.86 1900.24,1188.86 1900.83,1188.92 1901.42,1189.22 1902,1187.78 1902.59,1189.33 1903.17,1189.31 1903.76,1190.99 1904.35,1192.5 1904.93,1194.05 1905.52,1194.93 1906.11,1193.26 1906.69,1194.63 1907.28,1194.5 1907.87,1194.34 1908.45,1194.16 1909.04,1195.34 1909.63,1198.18 1910.21,1199.57 1910.8,1200.54 1911.38,1200.09 1911.97,1200.03 1912.56,1201.17 1913.14,1199.19 1913.73,1197.41 1914.32,1198.67 1914.9,1199.6 1915.49,1199.35 1916.08,1197 1916.66,1196.55 1917.25,1196.36 1917.83,1195.98 1918.42,1191.22 1919.01,1189.48 1919.59,1189.91 1920.18,1188.64 1920.77,1191.66 1921.35,1189.91 1921.94,1188.56 1922.53,1188.74 1923.11,1188.87 1923.7,1192.04 1924.29,1190.72 1924.87,1190.85 1925.46,1189.27 1926.04,1192.75 1926.63,1192.83 1927.22,1194.29 1927.8,1192.85 1928.39,1195.63 1928.98,1195.13 1929.56,1194.76 1930.15,1194.55 1930.74,1194.39 1931.32,1195.9 1931.91,1193.99 1932.5,1192.73 1933.08,1191.32 1933.67,1192.58 1934.25,1194.07 1934.84,1192.49 1935.43,1192.54 1936.01,1189.42 1936.6,1186.43 1937.19,1182.32 1937.77,1182.78 1938.36,1183.1 1938.95,1188.22 1939.53,1191.17 1940.12,1189.46 1940.71,1188.01 1941.29,1191.24 1941.88,1193.04 1942.46,1194.48 1943.05,1191.33 1943.64,1191.33 1944.22,1194.08 1944.81,1192.39 1945.4,1192.53 1945.98,1192.51 1946.57,1195.52 1947.16,1195.4 1947.74,1196.69 1948.33,1194.81 1948.91,1192.98 1949.5,1186.75 1950.09,1188.64 1950.67,1188.69 1951.26,1187.48 1951.85,1187.5 1952.43,1184.8 1953.02,1185.51 1953.61,1185.94 1954.19,1186.44 1954.78,1189.85 1955.37,1188.5 1955.95,1191.54 1956.54,1193.11 1957.12,1188.68 1957.71,1187.59 1958.3,1186.44 1958.88,1185.43 1959.47,1184.4 1960.06,1186.49 1960.64,1185.02 1961.23,1188.74 1961.82,1184.26 1962.4,1186.39 1962.99,1181.81 1963.58,1182.57 1964.16,1184.88 1964.75,1185.1 1965.33,1183.89 1965.92,1184.19 1966.51,1187.42 1967.09,1186.22 1967.68,1188.63 1968.27,1190.36 1968.85,1188.63 1969.44,1190.43 1970.03,1188.77 1970.61,1189.19 1971.2,1189.67 1971.78,1187.91 1972.37,1189.82 1972.96,1191.58 1973.54,1191.64 1974.13,1191.97 1974.72,1187.32 1975.3,1189.23 1975.89,1190.89 1976.48,1194.17 1977.06,1194.44 1977.65,1192.77 1978.24,1189.59 1978.82,1189.54 1979.41,1189.32 1979.99,1189.18 1980.58,1190.68 1981.17,1192.17 1981.75,1195.23 1982.34,1195.12 1982.93,1196.53 1983.51,1199.33 1984.1,1202.26 1984.69,1197.36 1985.27,1197.06 1985.86,1195.58 1986.45,1196.87 1987.03,1199.62 1987.62,1196.44 1988.2,1193.38 1988.79,1193.47 1989.38,1192.1 1989.96,1192.19 1990.55,1188.88 1991.14,1187.4 1991.72,1187.53 1992.31,1187.86 1992.9,1188.25 1993.48,1186.97 1994.07,1190.36 1994.65,1191.85 1995.24,1190.3 1995.83,1195.2 1996.41,1195.09 1997,1196.9 1997.59,1195.55 1998.17,1199.76 1998.76,1196.54 1999.35,1194.92 1999.93,1194.7 2000.52,1196.39 2001.11,1196.21 2001.69,1194.45 2002.28,1195.9 2002.86,1195.79 2003.45,1198.82 2004.04,1195.41 2004.62,1193.92 2005.21,1193.67 2005.8,1190.72 2006.38,1192.42 2006.97,1195.29 2007.56,1196.66 2008.14,1193.04 2008.73,1197.67 2009.32,1197.74 2009.9,1196.48 2010.49,1197.61 2011.07,1196.91 2011.66,1195.07 2012.25,1193.58 2012.83,1191.94 2013.42,1190.47 2014.01,1190.88 2014.59,1189.56 2015.18,1191.13 2015.77,1191.27 2016.35,1191.24 2016.94,1191.26 2017.53,1191.1 2018.11,1191.29 2018.7,1194.1 2019.28,1193.98 2019.87,1192.35 2020.46,1191.06 2021.04,1187.74 2021.63,1190.87 2022.22,1191.11 2022.8,1189.3 2023.39,1190.95 2023.98,1190.94 2024.56,1191.16 2025.15,1191.13 2025.73,1192.56 2026.32,1193.94 2026.91,1190.66 2027.49,1189.3 2028.08,1191.07 2028.67,1193.04 2029.25,1191.47 2029.84,1190.17 2030.43,1190.84 2031.01,1190.64 2031.6,1190.45 2032.19,1193.62 2032.77,1190.6 2033.36,1195.05 2033.94,1196.47 2034.53,1197.77 2035.12,1199.01 2035.7,1197.04 2036.29,1195.08 2036.88,1197.95 2037.46,1197.23 2038.05,1195.35 2038.64,1195.27 2039.22,1193.41 2039.81,1190.24 2040.4,1190.9 2040.98,1187.59 2041.57,1189.18 2042.15,1188.1 2042.74,1189.74 2043.33,1191.48 2043.91,1191.41 2044.5,1194.53 2045.09,1195.59 2045.67,1192.44 2046.26,1192.33 2046.85,1192.73 2047.43,1194.06 2048.02,1194.1 2048.6,1193.92 2049.19,1195.14 2049.78,1194.61 2050.36,1195.68 2050.95,1196.77 2051.54,1195.1 2052.12,1193.75 2052.71,1193.58 2053.3,1193.58 2053.88,1198.01 2054.47,1200.79 2055.06,1198.97 2055.64,1197.24 2056.23,1200.24 2056.81,1195.52 2057.4,1195.4 2057.99,1196.64 2058.57,1190.18 2059.16,1191.8 2059.75,1192.02 2060.33,1192.15 2060.92,1187.69 2061.51,1184.65 2062.09,1185.2 2062.68,1184.19 2063.27,1189.34 2063.85,1187.98 2064.44,1188.29 2065.02,1190.19 2065.61,1188.73 2066.2,1190.05 2066.78,1191.49 2067.37,1191.59 2067.96,1190.23 2068.54,1190.29 2069.13,1190.14 2069.72,1190.32 2070.3,1191.02 2070.89,1193.92 2071.48,1195.43 2072.06,1195.06 2072.65,1193.31 2073.23,1194.74 2073.82,1194.76 2074.41,1194.54 2074.99,1194.8 2075.58,1199.22 2076.17,1198.62 2076.75,1193.38 2077.34,1193.03 2077.93,1192.68 2078.51,1194.12 2079.1,1197.18 2079.68,1196.98 2080.27,1196.71 2080.86,1191.89 2081.44,1193.04 2082.03,1194.46 2082.62,1195.81 2083.2,1192.64 2083.79,1194.13 2084.38,1195.44 2084.96,1195.33 2085.55,1193.41 2086.14,1194.56 2086.72,1195.61 2087.31,1195.37 2087.89,1195.54 2088.48,1191.89 2089.07,1190.34 2089.65,1191.62 2090.24,1191.49 2090.83,1188.76 2091.41,1188.87 2092,1190.61 2092.59,1189.09 2093.17,1190.75 2093.76,1187.68 2094.35,1187.93 2094.93,1189.71 2095.52,1188.23 2096.1,1188.47 2096.69,1190.12 2097.28,1190.18 2097.86,1193.04 2098.45,1196.06 2099.04,1202.11 2099.62,1198.8 2100.21,1203.18 2100.8,1201.17 2101.38,1199.07 2101.97,1197.44 2102.55,1195.58 2103.14,1198.94 2103.73,1197.12 2104.31,1199.63 2104.9,1199.57 2105.49,1199.22 2106.07,1200.74 2106.66,1201.75 2107.25,1201.33 2107.83,1200.95 2108.42,1199.01 2109.01,1198.61 2109.59,1197.92 2110.18,1198.94 2110.76,1198.74 2111.35,1196.92 2111.94,1199.72 2112.52,1193.04 2113.11,1198.86 2113.7,1200.03 2114.28,1202.54 2114.87,1205.02 2115.46,1204.38 2116.04,1202.7 2116.63,1202.19 2117.22,1200.2 2117.8,1199.63 2118.39,1199.16 2118.97,1200.05 2119.56,1199.46 2120.15,1197.25 2120.73,1199.9 2121.32,1196.29 2121.91,1196.04 2122.49,1197.25 2123.08,1198.18 2123.67,1194.78 2124.25,1191.41 2124.84,1191.38 2125.42,1192.96 2126.01,1192.79 2126.6,1194.06 2127.18,1193.84 2127.77,1195.18 2128.36,1194.92 2128.94,1194.32 2129.53,1197.36 2130.12,1194 2130.7,1194.13 2131.29,1192.41 2131.88,1190.52 2132.46,1189.1 2133.05,1186.14 2133.63,1188.08 2134.22,1189.99 2134.81,1190.1 2135.39,1191.68 2135.98,1188.83 2136.57,1187.42 2137.15,1183.01 2137.74,1185.21 2138.33,1185.8 2138.91,1185.87 2139.5,1187.31 2140.09,1187.76 2140.67,1187.82 2141.26,1192.74 2141.84,1196 2142.43,1194.43 2143.02,1192.9 2143.6,1189.47 2144.19,1191.38 2144.78,1189.68 2145.36,1188.31 2145.95,1185.56 2146.54,1189.06 2147.12,1189.18 2147.71,1184.59 2148.3,1181.72 2148.88,1182.26 2149.47,1184.06 2150.05,1186.08 2150.64,1185.26 2151.23,1186.96 2151.81,1185.6 2152.4,1190.55 2152.99,1190.38 2153.57,1191.84 2154.16,1188.71 2154.75,1189.14 2155.33,1189.22 2155.92,1188.01 2156.5,1188.1 2157.09,1185.36 2157.68,1182.67 2158.26,1183.36 \"/>\n<path clip-path=\"url(#clip442)\" d=\"M986.025 1192.76 L986.612 1192.76 L987.198 1192.76 L987.785 1192.76 L988.371 1192.76 L988.957 1192.76 L989.544 1192.76 L990.13 1192.76 L990.717 1192.76 L991.303 1192.76 L991.889 1192.76 L992.476 1192.76 L993.062 1192.76 L993.649 1192.76 L994.235 1192.76 L994.822 1192.76 L995.408 1192.76 L995.994 1192.76 L996.581 1192.76 L997.167 1192.76 L997.754 1192.76 L998.34 1192.76 L998.926 1192.76 L999.513 1192.76 L1000.1 1192.76 L1000.69 1192.76 L1001.27 1192.76 L1001.86 1192.76 L1002.44 1192.76 L1003.03 1192.76 L1003.62 1192.76 L1004.2 1192.76 L1004.79 1192.76 L1005.38 1192.76 L1005.96 1192.76 L1006.55 1192.76 L1007.14 1192.76 L1007.72 1192.76 L1008.31 1192.76 L1008.9 1192.76 L1009.48 1192.76 L1010.07 1192.76 L1010.65 1192.76 L1011.24 1192.76 L1011.83 1192.76 L1012.41 1192.76 L1013 1192.76 L1013.59 1192.76 L1014.17 1192.76 L1014.76 1192.76 L1015.35 1192.76 L1015.93 1192.76 L1016.52 1192.76 L1017.11 1192.76 L1017.69 1192.76 L1018.28 1192.76 L1018.86 1192.76 L1019.45 1192.76 L1020.04 1192.76 L1020.62 1192.76 L1021.21 1192.76 L1021.8 1192.76 L1022.38 1192.76 L1022.97 1192.76 L1023.56 1192.76 L1024.14 1192.76 L1024.73 1192.76 L1025.32 1192.76 L1025.9 1192.76 L1026.49 1192.76 L1027.07 1192.76 L1027.66 1192.76 L1028.25 1192.76 L1028.83 1192.76 L1029.42 1192.76 L1030.01 1192.76 L1030.59 1192.76 L1031.18 1192.76 L1031.77 1192.76 L1032.35 1192.76 L1032.94 1192.76 L1033.52 1192.76 L1034.11 1192.76 L1034.7 1192.76 L1035.28 1192.76 L1035.87 1192.76 L1036.46 1192.76 L1037.04 1192.76 L1037.63 1192.76 L1038.22 1192.76 L1038.8 1192.76 L1039.39 1192.76 L1039.98 1192.76 L1040.56 1192.76 L1041.15 1192.76 L1041.73 1192.76 L1042.32 1192.76 L1042.91 1192.76 L1043.49 1192.76 L1044.08 1192.76 L1044.67 1192.76 L1045.25 1192.76 L1045.84 1192.76 L1046.43 1192.76 L1047.01 1192.76 L1047.6 1192.76 L1048.19 1192.76 L1048.77 1192.76 L1049.36 1192.76 L1049.94 1192.76 L1050.53 1192.76 L1051.12 1192.76 L1051.7 1192.76 L1052.29 1192.76 L1052.88 1192.76 L1053.46 1192.76 L1054.05 1192.76 L1054.64 1192.76 L1055.22 1192.76 L1055.81 1192.76 L1056.39 1192.76 L1056.98 1192.76 L1057.57 1192.76 L1058.15 1192.76 L1058.74 1192.76 L1059.33 1192.76 L1059.91 1192.76 L1060.5 1192.76 L1061.09 1192.76 L1061.67 1192.76 L1062.26 1192.76 L1062.85 1192.76 L1063.43 1192.76 L1064.02 1192.76 L1064.6 1192.76 L1065.19 1192.76 L1065.78 1192.76 L1066.36 1192.76 L1066.95 1192.76 L1067.54 1192.76 L1068.12 1192.76 L1068.71 1192.76 L1069.3 1192.76 L1069.88 1192.76 L1070.47 1192.76 L1071.06 1192.76 L1071.64 1192.76 L1072.23 1192.76 L1072.81 1192.76 L1073.4 1192.76 L1073.99 1192.76 L1074.57 1192.76 L1075.16 1192.76 L1075.75 1192.76 L1076.33 1192.76 L1076.92 1192.76 L1077.51 1192.76 L1078.09 1192.76 L1078.68 1192.76 L1079.26 1192.76 L1079.85 1192.76 L1080.44 1192.76 L1081.02 1192.76 L1081.61 1192.76 L1082.2 1192.76 L1082.78 1192.76 L1083.37 1192.76 L1083.96 1192.76 L1084.54 1192.76 L1085.13 1192.76 L1085.72 1192.76 L1086.3 1192.76 L1086.89 1192.76 L1087.47 1192.76 L1088.06 1192.76 L1088.65 1192.76 L1089.23 1192.76 L1089.82 1192.76 L1090.41 1192.76 L1090.99 1192.76 L1091.58 1192.76 L1092.17 1192.76 L1092.75 1192.76 L1093.34 1192.76 L1093.93 1192.76 L1094.51 1192.76 L1095.1 1192.76 L1095.68 1192.76 L1096.27 1192.76 L1096.86 1192.76 L1097.44 1192.76 L1098.03 1192.76 L1098.62 1192.76 L1099.2 1192.76 L1099.79 1192.76 L1100.38 1192.76 L1100.96 1192.76 L1101.55 1192.76 L1102.14 1192.76 L1102.72 1192.76 L1103.31 1192.76 L1103.89 1192.76 L1104.48 1192.76 L1105.07 1192.76 L1105.65 1192.76 L1106.24 1192.76 L1106.83 1192.76 L1107.41 1192.76 L1108 1192.76 L1108.59 1192.76 L1109.17 1192.76 L1109.76 1192.76 L1110.34 1192.76 L1110.93 1192.76 L1111.52 1192.76 L1112.1 1192.76 L1112.69 1192.76 L1113.28 1192.76 L1113.86 1192.76 L1114.45 1192.76 L1115.04 1192.76 L1115.62 1192.76 L1116.21 1192.76 L1116.8 1192.76 L1117.38 1192.76 L1117.97 1192.76 L1118.55 1192.76 L1119.14 1192.76 L1119.73 1192.76 L1120.31 1192.76 L1120.9 1192.76 L1121.49 1192.76 L1122.07 1192.76 L1122.66 1192.76 L1123.25 1192.76 L1123.83 1192.76 L1124.42 1192.76 L1125.01 1192.76 L1125.59 1192.76 L1126.18 1192.76 L1126.76 1192.76 L1127.35 1192.76 L1127.94 1192.76 L1128.52 1192.76 L1129.11 1192.76 L1129.7 1192.76 L1130.28 1192.76 L1130.87 1192.76 L1131.46 1192.76 L1132.04 1192.76 L1132.63 1192.76 L1133.21 1192.76 L1133.8 1192.76 L1134.39 1192.76 L1134.97 1192.76 L1135.56 1192.76 L1136.15 1192.76 L1136.73 1192.76 L1137.32 1192.76 L1137.91 1192.76 L1138.49 1192.76 L1139.08 1192.76 L1139.67 1192.76 L1140.25 1192.76 L1140.84 1192.76 L1141.42 1192.76 L1142.01 1192.76 L1142.6 1192.76 L1143.18 1192.76 L1143.77 1192.76 L1144.36 1192.76 L1144.94 1192.76 L1145.53 1192.76 L1146.12 1192.76 L1146.7 1192.76 L1147.29 1192.76 L1147.88 1192.76 L1148.46 1192.76 L1149.05 1192.76 L1149.63 1192.76 L1150.22 1192.76 L1150.81 1192.76 L1151.39 1192.76 L1151.98 1192.76 L1152.57 1192.76 L1153.15 1192.76 L1153.74 1192.76 L1154.33 1192.76 L1154.91 1192.76 L1155.5 1192.76 L1156.09 1192.76 L1156.67 1192.76 L1157.26 1192.76 L1157.84 1192.76 L1158.43 1192.76 L1159.02 1192.76 L1159.6 1192.76 L1160.19 1192.76 L1160.78 1192.76 L1161.36 1192.76 L1161.95 1192.76 L1162.54 1192.76 L1163.12 1192.76 L1163.71 1192.76 L1164.29 1192.76 L1164.88 1192.76 L1165.47 1192.76 L1166.05 1192.76 L1166.64 1192.76 L1167.23 1192.76 L1167.81 1192.76 L1168.4 1192.76 L1168.99 1192.76 L1169.57 1192.76 L1170.16 1192.76 L1170.75 1192.76 L1171.33 1192.76 L1171.92 1192.76 L1172.5 1192.76 L1173.09 1192.76 L1173.68 1192.76 L1174.26 1192.76 L1174.85 1192.76 L1175.44 1192.76 L1176.02 1192.76 L1176.61 1192.76 L1177.2 1192.76 L1177.78 1192.76 L1178.37 1192.76 L1178.96 1192.76 L1179.54 1192.76 L1180.13 1192.76 L1180.71 1192.76 L1181.3 1192.76 L1181.89 1192.76 L1182.47 1192.76 L1183.06 1192.76 L1183.65 1192.76 L1184.23 1192.76 L1184.82 1192.76 L1185.41 1192.76 L1185.99 1192.76 L1186.58 1192.76 L1187.16 1192.76 L1187.75 1192.76 L1188.34 1192.76 L1188.92 1192.76 L1189.51 1192.76 L1190.1 1192.76 L1190.68 1192.76 L1191.27 1192.76 L1191.86 1192.76 L1192.44 1192.76 L1193.03 1192.76 L1193.62 1192.76 L1194.2 1192.76 L1194.79 1192.76 L1195.37 1192.76 L1195.96 1192.76 L1196.55 1192.76 L1197.13 1192.76 L1197.72 1192.76 L1198.31 1192.76 L1198.89 1192.76 L1199.48 1192.76 L1200.07 1192.76 L1200.65 1192.76 L1201.24 1192.76 L1201.83 1192.76 L1202.41 1192.76 L1203 1192.76 L1203.58 1192.76 L1204.17 1192.76 L1204.76 1192.76 L1205.34 1192.76 L1205.93 1192.76 L1206.52 1192.76 L1207.1 1192.76 L1207.69 1192.76 L1208.28 1192.76 L1208.86 1192.76 L1209.45 1192.76 L1210.03 1192.76 L1210.62 1192.76 L1211.21 1192.76 L1211.79 1192.76 L1212.38 1192.76 L1212.97 1192.76 L1213.55 1192.76 L1214.14 1192.76 L1214.73 1192.76 L1215.31 1192.76 L1215.9 1192.76 L1216.49 1192.76 L1217.07 1192.76 L1217.66 1192.76 L1218.24 1192.76 L1218.83 1192.76 L1219.42 1192.76 L1220 1192.76 L1220.59 1192.76 L1221.18 1192.76 L1221.76 1192.76 L1222.35 1192.76 L1222.94 1192.76 L1223.52 1192.76 L1224.11 1192.76 L1224.7 1192.76 L1225.28 1192.76 L1225.87 1192.76 L1226.45 1192.76 L1227.04 1192.76 L1227.63 1192.76 L1228.21 1192.76 L1228.8 1192.76 L1229.39 1192.76 L1229.97 1192.76 L1230.56 1192.76 L1231.15 1192.76 L1231.73 1192.76 L1232.32 1192.76 L1232.91 1192.76 L1233.49 1192.76 L1234.08 1192.76 L1234.66 1192.76 L1235.25 1192.76 L1235.84 1192.76 L1236.42 1192.76 L1237.01 1192.76 L1237.6 1192.76 L1238.18 1192.76 L1238.77 1192.76 L1239.36 1192.76 L1239.94 1192.76 L1240.53 1192.76 L1241.11 1192.76 L1241.7 1192.76 L1242.29 1192.76 L1242.87 1192.76 L1243.46 1192.76 L1244.05 1192.76 L1244.63 1192.76 L1245.22 1192.76 L1245.81 1192.76 L1246.39 1192.76 L1246.98 1192.76 L1247.57 1192.76 L1248.15 1192.76 L1248.74 1192.76 L1249.32 1192.76 L1249.91 1192.76 L1250.5 1192.76 L1251.08 1192.76 L1251.67 1192.76 L1252.26 1192.76 L1252.84 1192.76 L1253.43 1192.76 L1254.02 1192.76 L1254.6 1192.76 L1255.19 1192.76 L1255.78 1192.76 L1256.36 1192.76 L1256.95 1192.76 L1257.53 1192.76 L1258.12 1192.76 L1258.71 1192.76 L1259.29 1192.76 L1259.88 1192.76 L1260.47 1192.76 L1261.05 1192.76 L1261.64 1192.76 L1262.23 1192.76 L1262.81 1192.76 L1263.4 1192.76 L1263.98 1192.76 L1264.57 1192.76 L1265.16 1192.76 L1265.74 1192.76 L1266.33 1192.76 L1266.92 1192.76 L1267.5 1192.76 L1268.09 1192.76 L1268.68 1192.76 L1269.26 1192.76 L1269.85 1192.76 L1270.44 1192.76 L1271.02 1192.76 L1271.61 1192.76 L1272.19 1192.76 L1272.78 1192.76 L1273.37 1192.76 L1273.95 1192.76 L1274.54 1192.76 L1275.13 1192.76 L1275.71 1192.76 L1276.3 1192.76 L1276.89 1192.76 L1277.47 1192.76 L1278.06 1192.76 L1278.65 1192.76 L1279.23 1192.76 L1279.82 1192.76 L1280.4 1192.76 L1280.99 1192.76 L1281.58 1192.76 L1282.16 1192.76 L1282.75 1192.76 L1283.34 1192.76 L1283.92 1192.76 L1284.51 1192.76 L1285.1 1192.76 L1285.68 1192.76 L1286.27 1192.76 L1286.86 1192.76 L1287.44 1192.76 L1288.03 1192.76 L1288.61 1192.76 L1289.2 1192.76 L1289.79 1192.76 L1290.37 1192.76 L1290.96 1192.76 L1291.55 1192.76 L1292.13 1192.76 L1292.72 1192.76 L1293.31 1192.76 L1293.89 1192.76 L1294.48 1192.76 L1295.06 1192.76 L1295.65 1192.76 L1296.24 1192.76 L1296.82 1192.76 L1297.41 1192.76 L1298 1192.76 L1298.58 1192.76 L1299.17 1192.76 L1299.76 1192.76 L1300.34 1192.76 L1300.93 1192.76 L1301.52 1192.76 L1302.1 1192.76 L1302.69 1192.76 L1303.27 1192.76 L1303.86 1192.76 L1304.45 1192.76 L1305.03 1192.76 L1305.62 1192.76 L1306.21 1192.76 L1306.79 1192.76 L1307.38 1192.76 L1307.97 1192.76 L1308.55 1192.76 L1309.14 1192.76 L1309.73 1192.76 L1310.31 1192.76 L1310.9 1192.76 L1311.48 1192.76 L1312.07 1192.76 L1312.66 1192.76 L1313.24 1192.76 L1313.83 1192.76 L1314.42 1192.76 L1315 1192.76 L1315.59 1192.76 L1316.18 1192.76 L1316.76 1192.76 L1317.35 1192.76 L1317.93 1192.76 L1318.52 1192.76 L1319.11 1192.76 L1319.69 1192.76 L1320.28 1192.76 L1320.87 1192.76 L1321.45 1192.76 L1322.04 1192.76 L1322.63 1192.76 L1323.21 1192.76 L1323.8 1192.76 L1324.39 1192.76 L1324.97 1192.76 L1325.56 1192.76 L1326.14 1192.76 L1326.73 1192.76 L1327.32 1192.76 L1327.9 1192.76 L1328.49 1192.76 L1329.08 1192.76 L1329.66 1192.76 L1330.25 1192.76 L1330.84 1192.76 L1331.42 1192.76 L1332.01 1192.76 L1332.6 1192.76 L1333.18 1192.76 L1333.77 1192.76 L1334.35 1192.76 L1334.94 1192.76 L1335.53 1192.76 L1336.11 1192.76 L1336.7 1192.76 L1337.29 1192.76 L1337.87 1192.76 L1338.46 1192.76 L1339.05 1192.76 L1339.63 1192.76 L1340.22 1192.76 L1340.8 1192.76 L1341.39 1192.76 L1341.98 1192.76 L1342.56 1192.76 L1343.15 1192.76 L1343.74 1192.76 L1344.32 1192.76 L1344.91 1192.76 L1345.5 1192.76 L1346.08 1192.76 L1346.67 1192.76 L1347.26 1192.76 L1347.84 1192.76 L1348.43 1192.76 L1349.01 1192.76 L1349.6 1192.76 L1350.19 1192.76 L1350.77 1192.76 L1351.36 1192.76 L1351.95 1192.76 L1352.53 1192.76 L1353.12 1192.76 L1353.71 1192.76 L1354.29 1192.76 L1354.88 1192.76 L1355.47 1192.76 L1356.05 1192.76 L1356.64 1192.76 L1357.22 1192.76 L1357.81 1192.76 L1358.4 1192.76 L1358.98 1192.76 L1359.57 1192.76 L1360.16 1192.76 L1360.74 1192.76 L1361.33 1192.76 L1361.92 1192.76 L1362.5 1192.76 L1363.09 1192.76 L1363.68 1192.76 L1364.26 1192.76 L1364.85 1192.76 L1365.43 1192.76 L1366.02 1192.76 L1366.61 1192.76 L1367.19 1192.76 L1367.78 1192.76 L1368.37 1192.76 L1368.95 1192.76 L1369.54 1192.76 L1370.13 1192.76 L1370.71 1192.76 L1371.3 1192.76 L1371.88 1192.76 L1372.47 1192.76 L1373.06 1192.76 L1373.64 1192.76 L1374.23 1192.76 L1374.82 1192.76 L1375.4 1192.76 L1375.99 1192.76 L1376.58 1192.76 L1377.16 1192.76 L1377.75 1192.76 L1378.34 1192.76 L1378.92 1192.76 L1379.51 1192.76 L1380.09 1192.76 L1380.68 1192.76 L1381.27 1192.76 L1381.85 1192.76 L1382.44 1192.76 L1383.03 1192.76 L1383.61 1192.76 L1384.2 1192.76 L1384.79 1192.76 L1385.37 1192.76 L1385.96 1192.76 L1386.55 1192.76 L1387.13 1192.76 L1387.72 1192.76 L1388.3 1192.76 L1388.89 1192.76 L1389.48 1192.76 L1390.06 1192.76 L1390.65 1192.76 L1391.24 1192.76 L1391.82 1192.76 L1392.41 1192.76 L1393 1192.76 L1393.58 1192.76 L1394.17 1192.76 L1394.75 1192.76 L1395.34 1192.76 L1395.93 1192.76 L1396.51 1192.76 L1397.1 1192.76 L1397.69 1192.76 L1398.27 1192.76 L1398.86 1192.76 L1399.45 1192.76 L1400.03 1192.76 L1400.62 1192.76 L1401.21 1192.76 L1401.79 1192.76 L1402.38 1192.76 L1402.96 1192.76 L1403.55 1192.76 L1404.14 1192.76 L1404.72 1192.76 L1405.31 1192.76 L1405.9 1192.76 L1406.48 1192.76 L1407.07 1192.76 L1407.66 1192.76 L1408.24 1192.76 L1408.83 1192.76 L1409.42 1192.76 L1410 1192.76 L1410.59 1192.76 L1411.17 1192.76 L1411.76 1192.76 L1412.35 1192.76 L1412.93 1192.76 L1413.52 1192.76 L1414.11 1192.76 L1414.69 1192.76 L1415.28 1192.76 L1415.87 1192.76 L1416.45 1192.76 L1417.04 1192.76 L1417.63 1192.76 L1418.21 1192.76 L1418.8 1192.76 L1419.38 1192.76 L1419.97 1192.76 L1420.56 1192.76 L1421.14 1192.76 L1421.73 1192.76 L1422.32 1192.76 L1422.9 1192.76 L1423.49 1192.76 L1424.08 1192.76 L1424.66 1192.76 L1425.25 1192.76 L1425.83 1192.76 L1426.42 1192.76 L1427.01 1192.76 L1427.59 1192.76 L1428.18 1192.76 L1428.77 1192.76 L1429.35 1192.76 L1429.94 1192.76 L1430.53 1192.76 L1431.11 1192.76 L1431.7 1192.76 L1432.29 1192.76 L1432.87 1192.76 L1433.46 1192.76 L1434.04 1192.76 L1434.63 1192.76 L1435.22 1192.76 L1435.8 1192.76 L1436.39 1192.76 L1436.98 1192.76 L1437.56 1192.76 L1438.15 1192.76 L1438.74 1192.76 L1439.32 1192.76 L1439.91 1192.76 L1440.5 1192.76 L1441.08 1192.76 L1441.67 1192.76 L1442.25 1192.76 L1442.84 1192.76 L1443.43 1192.76 L1444.01 1192.76 L1444.6 1192.76 L1445.19 1192.76 L1445.77 1192.76 L1446.36 1192.76 L1446.95 1192.76 L1447.53 1192.76 L1448.12 1192.76 L1448.7 1192.76 L1449.29 1192.76 L1449.88 1192.76 L1450.46 1192.76 L1451.05 1192.76 L1451.64 1192.76 L1452.22 1192.76 L1452.81 1192.76 L1453.4 1192.76 L1453.98 1192.76 L1454.57 1192.76 L1455.16 1192.76 L1455.74 1192.76 L1456.33 1192.76 L1456.91 1192.76 L1457.5 1192.76 L1458.09 1192.76 L1458.67 1192.76 L1459.26 1192.76 L1459.85 1192.76 L1460.43 1192.76 L1461.02 1192.76 L1461.61 1192.76 L1462.19 1192.76 L1462.78 1192.76 L1463.37 1192.76 L1463.95 1192.76 L1464.54 1192.76 L1465.12 1192.76 L1465.71 1192.76 L1466.3 1192.76 L1466.88 1192.76 L1467.47 1192.76 L1468.06 1192.76 L1468.64 1192.76 L1469.23 1192.76 L1469.82 1192.76 L1470.4 1192.76 L1470.99 1192.76 L1471.57 1192.76 L1472.16 1192.76 L1472.75 1192.76 L1473.33 1192.76 L1473.92 1192.76 L1474.51 1192.76 L1475.09 1192.76 L1475.68 1192.76 L1476.27 1192.76 L1476.85 1192.76 L1477.44 1192.76 L1478.03 1192.76 L1478.61 1192.76 L1479.2 1192.76 L1479.78 1192.76 L1480.37 1192.76 L1480.96 1192.76 L1481.54 1192.76 L1482.13 1192.76 L1482.72 1192.76 L1483.3 1192.76 L1483.89 1192.76 L1484.48 1192.76 L1485.06 1192.76 L1485.65 1192.76 L1486.24 1192.76 L1486.82 1192.76 L1487.41 1192.76 L1487.99 1192.76 L1488.58 1192.76 L1489.17 1192.76 L1489.75 1192.76 L1490.34 1192.76 L1490.93 1192.76 L1491.51 1192.76 L1492.1 1192.76 L1492.69 1192.76 L1493.27 1192.76 L1493.86 1192.76 L1494.45 1192.76 L1495.03 1192.76 L1495.62 1192.76 L1496.2 1192.76 L1496.79 1192.76 L1497.38 1192.76 L1497.96 1192.76 L1498.55 1192.76 L1499.14 1192.76 L1499.72 1192.76 L1500.31 1192.76 L1500.9 1192.76 L1501.48 1192.76 L1502.07 1192.76 L1502.65 1192.76 L1503.24 1192.76 L1503.83 1192.76 L1504.41 1192.76 L1505 1192.76 L1505.59 1192.76 L1506.17 1192.76 L1506.76 1192.76 L1507.35 1192.76 L1507.93 1192.76 L1508.52 1192.76 L1509.11 1192.76 L1509.69 1192.76 L1510.28 1192.76 L1510.86 1192.76 L1511.45 1192.76 L1512.04 1192.76 L1512.62 1192.76 L1513.21 1192.76 L1513.8 1192.76 L1514.38 1192.76 L1514.97 1192.76 L1515.56 1192.76 L1516.14 1192.76 L1516.73 1192.76 L1517.32 1192.76 L1517.9 1192.76 L1518.49 1192.76 L1519.07 1192.76 L1519.66 1192.76 L1520.25 1192.76 L1520.83 1192.76 L1521.42 1192.76 L1522.01 1192.76 L1522.59 1192.76 L1523.18 1192.76 L1523.77 1192.76 L1524.35 1192.76 L1524.94 1192.76 L1525.52 1192.76 L1526.11 1192.76 L1526.7 1192.76 L1527.28 1192.76 L1527.87 1192.76 L1528.46 1192.76 L1529.04 1192.76 L1529.63 1192.76 L1530.22 1192.76 L1530.8 1192.76 L1531.39 1192.76 L1531.98 1192.76 L1532.56 1192.76 L1533.15 1192.76 L1533.73 1192.76 L1534.32 1192.76 L1534.91 1192.76 L1535.49 1192.76 L1536.08 1192.76 L1536.67 1192.76 L1537.25 1192.76 L1537.84 1192.76 L1538.43 1192.76 L1539.01 1192.76 L1539.6 1192.76 L1540.19 1192.76 L1540.77 1192.76 L1541.36 1192.76 L1541.94 1192.76 L1542.53 1192.76 L1543.12 1192.76 L1543.7 1192.76 L1544.29 1192.76 L1544.88 1192.76 L1545.46 1192.76 L1546.05 1192.76 L1546.64 1192.76 L1547.22 1192.76 L1547.81 1192.76 L1548.4 1192.76 L1548.98 1192.76 L1549.57 1192.76 L1550.15 1192.76 L1550.74 1192.76 L1551.33 1192.76 L1551.91 1192.76 L1552.5 1192.76 L1553.09 1192.76 L1553.67 1192.76 L1554.26 1192.76 L1554.85 1192.76 L1555.43 1192.76 L1556.02 1192.76 L1556.6 1192.76 L1557.19 1192.76 L1557.78 1192.76 L1558.36 1192.76 L1558.95 1192.76 L1559.54 1192.76 L1560.12 1192.76 L1560.71 1192.76 L1561.3 1192.76 L1561.88 1192.76 L1562.47 1192.76 L1563.06 1192.76 L1563.64 1192.76 L1564.23 1192.76 L1564.81 1192.76 L1565.4 1192.76 L1565.99 1192.76 L1566.57 1192.76 L1567.16 1192.76 L1567.75 1192.76 L1568.33 1192.76 L1568.92 1192.76 L1569.51 1192.76 L1570.09 1192.76 L1570.68 1192.76 L1571.27 1192.76 L1571.85 1192.76 L1572.44 1192.76 L1573.02 1192.76 L1573.61 1192.76 L1574.2 1192.76 L1574.78 1192.76 L1575.37 1192.76 L1575.96 1192.76 L1576.54 1192.76 L1577.13 1192.76 L1577.72 1192.76 L1578.3 1192.76 L1578.89 1192.76 L1579.47 1192.76 L1580.06 1192.76 L1580.65 1192.76 L1581.23 1192.76 L1581.82 1192.76 L1582.41 1192.76 L1582.99 1192.76 L1583.58 1192.76 L1584.17 1192.76 L1584.75 1192.76 L1585.34 1192.76 L1585.93 1192.76 L1586.51 1192.76 L1587.1 1192.76 L1587.68 1192.76 L1588.27 1192.76 L1588.86 1192.76 L1589.44 1192.76 L1590.03 1192.76 L1590.62 1192.76 L1591.2 1192.76 L1591.79 1192.76 L1592.38 1192.76 L1592.96 1192.76 L1593.55 1192.76 L1594.14 1192.76 L1594.72 1192.76 L1595.31 1192.76 L1595.89 1192.76 L1596.48 1192.76 L1597.07 1192.76 L1597.65 1192.76 L1598.24 1192.76 L1598.83 1192.76 L1599.41 1192.76 L1600 1192.76 L1600.59 1192.76 L1601.17 1192.76 L1601.76 1192.76 L1602.34 1192.76 L1602.93 1192.76 L1603.52 1192.76 L1604.1 1192.76 L1604.69 1192.76 L1605.28 1192.76 L1605.86 1192.76 L1606.45 1192.76 L1607.04 1192.76 L1607.62 1192.76 L1608.21 1192.76 L1608.8 1192.76 L1609.38 1192.76 L1609.97 1192.76 L1610.55 1192.76 L1611.14 1192.76 L1611.73 1192.76 L1612.31 1192.76 L1612.9 1192.76 L1613.49 1192.76 L1614.07 1192.76 L1614.66 1192.76 L1615.25 1192.76 L1615.83 1192.76 L1616.42 1192.76 L1617.01 1192.76 L1617.59 1192.76 L1618.18 1192.76 L1618.76 1192.76 L1619.35 1192.76 L1619.94 1192.76 L1620.52 1192.76 L1621.11 1192.76 L1621.7 1192.76 L1622.28 1192.76 L1622.87 1192.76 L1623.46 1192.76 L1624.04 1192.76 L1624.63 1192.76 L1625.22 1192.76 L1625.8 1192.76 L1626.39 1192.76 L1626.97 1192.76 L1627.56 1192.76 L1628.15 1192.76 L1628.73 1192.76 L1629.32 1192.76 L1629.91 1192.76 L1630.49 1192.76 L1631.08 1192.76 L1631.67 1192.76 L1632.25 1192.76 L1632.84 1192.76 L1633.42 1192.76 L1634.01 1192.76 L1634.6 1192.76 L1635.18 1192.76 L1635.77 1192.76 L1636.36 1192.76 L1636.94 1192.76 L1637.53 1192.76 L1638.12 1192.76 L1638.7 1192.76 L1639.29 1192.76 L1639.88 1192.76 L1640.46 1192.76 L1641.05 1192.76 L1641.63 1192.76 L1642.22 1192.76 L1642.81 1192.76 L1643.39 1192.76 L1643.98 1192.76 L1644.57 1192.76 L1645.15 1192.76 L1645.74 1192.76 L1646.33 1192.76 L1646.91 1192.76 L1647.5 1192.76 L1648.09 1192.76 L1648.67 1192.76 L1649.26 1192.76 L1649.84 1192.76 L1650.43 1192.76 L1651.02 1192.76 L1651.6 1192.76 L1652.19 1192.76 L1652.78 1192.76 L1653.36 1192.76 L1653.95 1192.76 L1654.54 1192.76 L1655.12 1192.76 L1655.71 1192.76 L1656.29 1192.76 L1656.88 1192.76 L1657.47 1192.76 L1658.05 1192.76 L1658.64 1192.76 L1659.23 1192.76 L1659.81 1192.76 L1660.4 1192.76 L1660.99 1192.76 L1661.57 1192.76 L1662.16 1192.76 L1662.75 1192.76 L1663.33 1192.76 L1663.92 1192.76 L1664.5 1192.76 L1665.09 1192.76 L1665.68 1192.76 L1666.26 1192.76 L1666.85 1192.76 L1667.44 1192.76 L1668.02 1192.76 L1668.61 1192.76 L1669.2 1192.76 L1669.78 1192.76 L1670.37 1192.76 L1670.96 1192.76 L1671.54 1192.76 L1672.13 1192.76 L1672.71 1192.76 L1673.3 1192.76 L1673.89 1192.76 L1674.47 1192.76 L1675.06 1192.76 L1675.65 1192.76 L1676.23 1192.76 L1676.82 1192.76 L1677.41 1192.76 L1677.99 1192.76 L1678.58 1192.76 L1679.17 1192.76 L1679.75 1192.76 L1680.34 1192.76 L1680.92 1192.76 L1681.51 1192.76 L1682.1 1192.76 L1682.68 1192.76 L1683.27 1192.76 L1683.86 1192.76 L1684.44 1192.76 L1685.03 1192.76 L1685.62 1192.76 L1686.2 1192.76 L1686.79 1192.76 L1687.37 1192.76 L1687.96 1192.76 L1688.55 1192.76 L1689.13 1192.76 L1689.72 1192.76 L1690.31 1192.76 L1690.89 1192.76 L1691.48 1192.76 L1692.07 1192.76 L1692.65 1192.76 L1693.24 1192.76 L1693.83 1192.76 L1694.41 1192.76 L1695 1192.76 L1695.58 1192.76 L1696.17 1192.76 L1696.76 1192.76 L1697.34 1192.76 L1697.93 1192.76 L1698.52 1192.76 L1699.1 1192.76 L1699.69 1192.76 L1700.28 1192.76 L1700.86 1192.76 L1701.45 1192.76 L1702.04 1192.76 L1702.62 1192.76 L1703.21 1192.76 L1703.79 1192.76 L1704.38 1192.76 L1704.97 1192.76 L1705.55 1192.76 L1706.14 1192.76 L1706.73 1192.76 L1707.31 1192.76 L1707.9 1192.76 L1708.49 1192.76 L1709.07 1192.76 L1709.66 1192.76 L1710.24 1192.76 L1710.83 1192.76 L1711.42 1192.76 L1712 1192.76 L1712.59 1192.76 L1713.18 1192.76 L1713.76 1192.76 L1714.35 1192.76 L1714.94 1192.76 L1715.52 1192.76 L1716.11 1192.76 L1716.7 1192.76 L1717.28 1192.76 L1717.87 1192.76 L1718.45 1192.76 L1719.04 1192.76 L1719.63 1192.76 L1720.21 1192.76 L1720.8 1192.76 L1721.39 1192.76 L1721.97 1192.76 L1722.56 1192.76 L1723.15 1192.76 L1723.73 1192.76 L1724.32 1192.76 L1724.91 1192.76 L1725.49 1192.76 L1726.08 1192.76 L1726.66 1192.76 L1727.25 1192.76 L1727.84 1192.76 L1728.42 1192.76 L1729.01 1192.76 L1729.6 1192.76 L1730.18 1192.76 L1730.77 1192.76 L1731.36 1192.76 L1731.94 1192.76 L1732.53 1192.76 L1733.11 1192.76 L1733.7 1192.76 L1734.29 1192.76 L1734.87 1192.76 L1735.46 1192.76 L1736.05 1192.76 L1736.63 1192.76 L1737.22 1192.76 L1737.81 1192.76 L1738.39 1192.76 L1738.98 1192.76 L1739.57 1192.76 L1740.15 1192.76 L1740.74 1192.76 L1741.32 1192.76 L1741.91 1192.76 L1742.5 1192.76 L1743.08 1192.76 L1743.67 1192.76 L1744.26 1192.76 L1744.84 1192.76 L1745.43 1192.76 L1746.02 1192.76 L1746.6 1192.76 L1747.19 1192.76 L1747.78 1192.76 L1748.36 1192.76 L1748.95 1192.76 L1749.53 1192.76 L1750.12 1192.76 L1750.71 1192.76 L1751.29 1192.76 L1751.88 1192.76 L1752.47 1192.76 L1753.05 1192.76 L1753.64 1192.76 L1754.23 1192.76 L1754.81 1192.76 L1755.4 1192.76 L1755.99 1192.76 L1756.57 1192.76 L1757.16 1192.76 L1757.74 1192.76 L1758.33 1192.76 L1758.92 1192.76 L1759.5 1192.76 L1760.09 1192.76 L1760.68 1192.76 L1761.26 1192.76 L1761.85 1192.76 L1762.44 1192.76 L1763.02 1192.76 L1763.61 1192.76 L1764.19 1192.76 L1764.78 1192.76 L1765.37 1192.76 L1765.95 1192.76 L1766.54 1192.76 L1767.13 1192.76 L1767.71 1192.76 L1768.3 1192.76 L1768.89 1192.76 L1769.47 1192.76 L1770.06 1192.76 L1770.65 1192.76 L1771.23 1192.76 L1771.82 1192.76 L1772.4 1192.76 L1772.99 1192.76 L1773.58 1192.76 L1774.16 1192.76 L1774.75 1192.76 L1775.34 1192.76 L1775.92 1192.76 L1776.51 1192.76 L1777.1 1192.76 L1777.68 1192.76 L1778.27 1192.76 L1778.86 1192.76 L1779.44 1192.76 L1780.03 1192.76 L1780.61 1192.76 L1781.2 1192.76 L1781.79 1192.76 L1782.37 1192.76 L1782.96 1192.76 L1783.55 1192.76 L1784.13 1192.76 L1784.72 1192.76 L1785.31 1192.76 L1785.89 1192.76 L1786.48 1192.76 L1787.06 1192.76 L1787.65 1192.76 L1788.24 1192.76 L1788.82 1192.76 L1789.41 1192.76 L1790 1192.76 L1790.58 1192.76 L1791.17 1192.76 L1791.76 1192.76 L1792.34 1192.76 L1792.93 1192.76 L1793.52 1192.76 L1794.1 1192.76 L1794.69 1192.76 L1795.27 1192.76 L1795.86 1192.76 L1796.45 1192.76 L1797.03 1192.76 L1797.62 1192.76 L1798.21 1192.76 L1798.79 1192.76 L1799.38 1192.76 L1799.97 1192.76 L1800.55 1192.76 L1801.14 1192.76 L1801.73 1192.76 L1802.31 1192.76 L1802.9 1192.76 L1803.48 1192.76 L1804.07 1192.76 L1804.66 1192.76 L1805.24 1192.76 L1805.83 1192.76 L1806.42 1192.76 L1807 1192.76 L1807.59 1192.76 L1808.18 1192.76 L1808.76 1192.76 L1809.35 1192.76 L1809.94 1192.76 L1810.52 1192.76 L1811.11 1192.76 L1811.69 1192.76 L1812.28 1192.76 L1812.87 1192.76 L1813.45 1192.76 L1814.04 1192.76 L1814.63 1192.76 L1815.21 1192.76 L1815.8 1192.76 L1816.39 1192.76 L1816.97 1192.76 L1817.56 1192.76 L1818.14 1192.76 L1818.73 1192.76 L1819.32 1192.76 L1819.9 1192.76 L1820.49 1192.76 L1821.08 1192.76 L1821.66 1192.76 L1822.25 1192.76 L1822.84 1192.76 L1823.42 1192.76 L1824.01 1192.76 L1824.6 1192.76 L1825.18 1192.76 L1825.77 1192.76 L1826.35 1192.76 L1826.94 1192.76 L1827.53 1192.76 L1828.11 1192.76 L1828.7 1192.76 L1829.29 1192.76 L1829.87 1192.76 L1830.46 1192.76 L1831.05 1192.76 L1831.63 1192.76 L1832.22 1192.76 L1832.81 1192.76 L1833.39 1192.76 L1833.98 1192.76 L1834.56 1192.76 L1835.15 1192.76 L1835.74 1192.76 L1836.32 1192.76 L1836.91 1192.76 L1837.5 1192.76 L1838.08 1192.76 L1838.67 1192.76 L1839.26 1192.76 L1839.84 1192.76 L1840.43 1192.76 L1841.01 1192.76 L1841.6 1192.76 L1842.19 1192.76 L1842.77 1192.76 L1843.36 1192.76 L1843.95 1192.76 L1844.53 1192.76 L1845.12 1192.76 L1845.71 1192.76 L1846.29 1192.76 L1846.88 1192.76 L1847.47 1192.76 L1848.05 1192.76 L1848.64 1192.76 L1849.22 1192.76 L1849.81 1192.76 L1850.4 1192.76 L1850.98 1192.76 L1851.57 1192.76 L1852.16 1192.76 L1852.74 1192.76 L1853.33 1192.76 L1853.92 1192.76 L1854.5 1192.76 L1855.09 1192.76 L1855.68 1192.76 L1856.26 1192.76 L1856.85 1192.76 L1857.43 1192.76 L1858.02 1192.76 L1858.61 1192.76 L1859.19 1192.76 L1859.78 1192.76 L1860.37 1192.76 L1860.95 1192.76 L1861.54 1192.76 L1862.13 1192.76 L1862.71 1192.76 L1863.3 1192.76 L1863.88 1192.76 L1864.47 1192.76 L1865.06 1192.76 L1865.64 1192.76 L1866.23 1192.76 L1866.82 1192.76 L1867.4 1192.76 L1867.99 1192.76 L1868.58 1192.76 L1869.16 1192.76 L1869.75 1192.76 L1870.34 1192.76 L1870.92 1192.76 L1871.51 1192.76 L1872.09 1192.76 L1872.68 1192.76 L1873.27 1192.76 L1873.85 1192.76 L1874.44 1192.76 L1875.03 1192.76 L1875.61 1192.76 L1876.2 1192.76 L1876.79 1192.76 L1877.37 1192.76 L1877.96 1192.76 L1878.55 1192.76 L1879.13 1192.76 L1879.72 1192.76 L1880.3 1192.76 L1880.89 1192.76 L1881.48 1192.76 L1882.06 1192.76 L1882.65 1192.76 L1883.24 1192.76 L1883.82 1192.76 L1884.41 1192.76 L1885 1192.76 L1885.58 1192.76 L1886.17 1192.76 L1886.76 1192.76 L1887.34 1192.76 L1887.93 1192.76 L1888.51 1192.76 L1889.1 1192.76 L1889.69 1192.76 L1890.27 1192.76 L1890.86 1192.76 L1891.45 1192.76 L1892.03 1192.76 L1892.62 1192.76 L1893.21 1192.76 L1893.79 1192.76 L1894.38 1192.76 L1894.96 1192.76 L1895.55 1192.76 L1896.14 1192.76 L1896.72 1192.76 L1897.31 1192.76 L1897.9 1192.76 L1898.48 1192.76 L1899.07 1192.76 L1899.66 1192.76 L1900.24 1192.76 L1900.83 1192.76 L1901.42 1192.76 L1902 1192.76 L1902.59 1192.76 L1903.17 1192.76 L1903.76 1192.76 L1904.35 1192.76 L1904.93 1192.76 L1905.52 1192.76 L1906.11 1192.76 L1906.69 1192.76 L1907.28 1192.76 L1907.87 1192.76 L1908.45 1192.76 L1909.04 1192.76 L1909.63 1192.76 L1910.21 1192.76 L1910.8 1192.76 L1911.38 1192.76 L1911.97 1192.76 L1912.56 1192.76 L1913.14 1192.76 L1913.73 1192.76 L1914.32 1192.76 L1914.9 1192.76 L1915.49 1192.76 L1916.08 1192.76 L1916.66 1192.76 L1917.25 1192.76 L1917.83 1192.76 L1918.42 1192.76 L1919.01 1192.76 L1919.59 1192.76 L1920.18 1192.76 L1920.77 1192.76 L1921.35 1192.76 L1921.94 1192.76 L1922.53 1192.76 L1923.11 1192.76 L1923.7 1192.76 L1924.29 1192.76 L1924.87 1192.76 L1925.46 1192.76 L1926.04 1192.76 L1926.63 1192.76 L1927.22 1192.76 L1927.8 1192.76 L1928.39 1192.76 L1928.98 1192.76 L1929.56 1192.76 L1930.15 1192.76 L1930.74 1192.76 L1931.32 1192.76 L1931.91 1192.76 L1932.5 1192.76 L1933.08 1192.76 L1933.67 1192.76 L1934.25 1192.76 L1934.84 1192.76 L1935.43 1192.76 L1936.01 1192.76 L1936.6 1192.76 L1937.19 1192.76 L1937.77 1192.76 L1938.36 1192.76 L1938.95 1192.76 L1939.53 1192.76 L1940.12 1192.76 L1940.71 1192.76 L1941.29 1192.76 L1941.88 1192.76 L1942.46 1192.76 L1943.05 1192.76 L1943.64 1192.76 L1944.22 1192.76 L1944.81 1192.76 L1945.4 1192.76 L1945.98 1192.76 L1946.57 1192.76 L1947.16 1192.76 L1947.74 1192.76 L1948.33 1192.76 L1948.91 1192.76 L1949.5 1192.76 L1950.09 1192.76 L1950.67 1192.76 L1951.26 1192.76 L1951.85 1192.76 L1952.43 1192.76 L1953.02 1192.76 L1953.61 1192.76 L1954.19 1192.76 L1954.78 1192.76 L1955.37 1192.76 L1955.95 1192.76 L1956.54 1192.76 L1957.12 1192.76 L1957.71 1192.76 L1958.3 1192.76 L1958.88 1192.76 L1959.47 1192.76 L1960.06 1192.76 L1960.64 1192.76 L1961.23 1192.76 L1961.82 1192.76 L1962.4 1192.76 L1962.99 1192.76 L1963.58 1192.76 L1964.16 1192.76 L1964.75 1192.76 L1965.33 1192.76 L1965.92 1192.76 L1966.51 1192.76 L1967.09 1192.76 L1967.68 1192.76 L1968.27 1192.76 L1968.85 1192.76 L1969.44 1192.76 L1970.03 1192.76 L1970.61 1192.76 L1971.2 1192.76 L1971.78 1192.76 L1972.37 1192.76 L1972.96 1192.76 L1973.54 1192.76 L1974.13 1192.76 L1974.72 1192.76 L1975.3 1192.76 L1975.89 1192.76 L1976.48 1192.76 L1977.06 1192.76 L1977.65 1192.76 L1978.24 1192.76 L1978.82 1192.76 L1979.41 1192.76 L1979.99 1192.76 L1980.58 1192.76 L1981.17 1192.76 L1981.75 1192.76 L1982.34 1192.76 L1982.93 1192.76 L1983.51 1192.76 L1984.1 1192.76 L1984.69 1192.76 L1985.27 1192.76 L1985.86 1192.76 L1986.45 1192.76 L1987.03 1192.76 L1987.62 1192.76 L1988.2 1192.76 L1988.79 1192.76 L1989.38 1192.76 L1989.96 1192.76 L1990.55 1192.76 L1991.14 1192.76 L1991.72 1192.76 L1992.31 1192.76 L1992.9 1192.76 L1993.48 1192.76 L1994.07 1192.76 L1994.65 1192.76 L1995.24 1192.76 L1995.83 1192.76 L1996.41 1192.76 L1997 1192.76 L1997.59 1192.76 L1998.17 1192.76 L1998.76 1192.76 L1999.35 1192.76 L1999.93 1192.76 L2000.52 1192.76 L2001.11 1192.76 L2001.69 1192.76 L2002.28 1192.76 L2002.86 1192.76 L2003.45 1192.76 L2004.04 1192.76 L2004.62 1192.76 L2005.21 1192.76 L2005.8 1192.76 L2006.38 1192.76 L2006.97 1192.76 L2007.56 1192.76 L2008.14 1192.76 L2008.73 1192.76 L2009.32 1192.76 L2009.9 1192.76 L2010.49 1192.76 L2011.07 1192.76 L2011.66 1192.76 L2012.25 1192.76 L2012.83 1192.76 L2013.42 1192.76 L2014.01 1192.76 L2014.59 1192.76 L2015.18 1192.76 L2015.77 1192.76 L2016.35 1192.76 L2016.94 1192.76 L2017.53 1192.76 L2018.11 1192.76 L2018.7 1192.76 L2019.28 1192.76 L2019.87 1192.76 L2020.46 1192.76 L2021.04 1192.76 L2021.63 1192.76 L2022.22 1192.76 L2022.8 1192.76 L2023.39 1192.76 L2023.98 1192.76 L2024.56 1192.76 L2025.15 1192.76 L2025.73 1192.76 L2026.32 1192.76 L2026.91 1192.76 L2027.49 1192.76 L2028.08 1192.76 L2028.67 1192.76 L2029.25 1192.76 L2029.84 1192.76 L2030.43 1192.76 L2031.01 1192.76 L2031.6 1192.76 L2032.19 1192.76 L2032.77 1192.76 L2033.36 1192.76 L2033.94 1192.76 L2034.53 1192.76 L2035.12 1192.76 L2035.7 1192.76 L2036.29 1192.76 L2036.88 1192.76 L2037.46 1192.76 L2038.05 1192.76 L2038.64 1192.76 L2039.22 1192.76 L2039.81 1192.76 L2040.4 1192.76 L2040.98 1192.76 L2041.57 1192.76 L2042.15 1192.76 L2042.74 1192.76 L2043.33 1192.76 L2043.91 1192.76 L2044.5 1192.76 L2045.09 1192.76 L2045.67 1192.76 L2046.26 1192.76 L2046.85 1192.76 L2047.43 1192.76 L2048.02 1192.76 L2048.6 1192.76 L2049.19 1192.76 L2049.78 1192.76 L2050.36 1192.76 L2050.95 1192.76 L2051.54 1192.76 L2052.12 1192.76 L2052.71 1192.76 L2053.3 1192.76 L2053.88 1192.76 L2054.47 1192.76 L2055.06 1192.76 L2055.64 1192.76 L2056.23 1192.76 L2056.81 1192.76 L2057.4 1192.76 L2057.99 1192.76 L2058.57 1192.76 L2059.16 1192.76 L2059.75 1192.76 L2060.33 1192.76 L2060.92 1192.76 L2061.51 1192.76 L2062.09 1192.76 L2062.68 1192.76 L2063.27 1192.76 L2063.85 1192.76 L2064.44 1192.76 L2065.02 1192.76 L2065.61 1192.76 L2066.2 1192.76 L2066.78 1192.76 L2067.37 1192.76 L2067.96 1192.76 L2068.54 1192.76 L2069.13 1192.76 L2069.72 1192.76 L2070.3 1192.76 L2070.89 1192.76 L2071.48 1192.76 L2072.06 1192.76 L2072.65 1192.76 L2073.23 1192.76 L2073.82 1192.76 L2074.41 1192.76 L2074.99 1192.76 L2075.58 1192.76 L2076.17 1192.76 L2076.75 1192.76 L2077.34 1192.76 L2077.93 1192.76 L2078.51 1192.76 L2079.1 1192.76 L2079.68 1192.76 L2080.27 1192.76 L2080.86 1192.76 L2081.44 1192.76 L2082.03 1192.76 L2082.62 1192.76 L2083.2 1192.76 L2083.79 1192.76 L2084.38 1192.76 L2084.96 1192.76 L2085.55 1192.76 L2086.14 1192.76 L2086.72 1192.76 L2087.31 1192.76 L2087.89 1192.76 L2088.48 1192.76 L2089.07 1192.76 L2089.65 1192.76 L2090.24 1192.76 L2090.83 1192.76 L2091.41 1192.76 L2092 1192.76 L2092.59 1192.76 L2093.17 1192.76 L2093.76 1192.76 L2094.35 1192.76 L2094.93 1192.76 L2095.52 1192.76 L2096.1 1192.76 L2096.69 1192.76 L2097.28 1192.76 L2097.86 1192.76 L2098.45 1192.76 L2099.04 1192.76 L2099.62 1192.76 L2100.21 1192.76 L2100.8 1192.76 L2101.38 1192.76 L2101.97 1192.76 L2102.55 1192.76 L2103.14 1192.76 L2103.73 1192.76 L2104.31 1192.76 L2104.9 1192.76 L2105.49 1192.76 L2106.07 1192.76 L2106.66 1192.76 L2107.25 1192.76 L2107.83 1192.76 L2108.42 1192.76 L2109.01 1192.76 L2109.59 1192.76 L2110.18 1192.76 L2110.76 1192.76 L2111.35 1192.76 L2111.94 1192.76 L2112.52 1192.76 L2113.11 1192.76 L2113.7 1192.76 L2114.28 1192.76 L2114.87 1192.76 L2115.46 1192.76 L2116.04 1192.76 L2116.63 1192.76 L2117.22 1192.76 L2117.8 1192.76 L2118.39 1192.76 L2118.97 1192.76 L2119.56 1192.76 L2120.15 1192.76 L2120.73 1192.76 L2121.32 1192.76 L2121.91 1192.76 L2122.49 1192.76 L2123.08 1192.76 L2123.67 1192.76 L2124.25 1192.76 L2124.84 1192.76 L2125.42 1192.76 L2126.01 1192.76 L2126.6 1192.76 L2127.18 1192.76 L2127.77 1192.76 L2128.36 1192.76 L2128.94 1192.76 L2129.53 1192.76 L2130.12 1192.76 L2130.7 1192.76 L2131.29 1192.76 L2131.88 1192.76 L2132.46 1192.76 L2133.05 1192.76 L2133.63 1192.76 L2134.22 1192.76 L2134.81 1192.76 L2135.39 1192.76 L2135.98 1192.76 L2136.57 1192.76 L2137.15 1192.76 L2137.74 1192.76 L2138.33 1192.76 L2138.91 1192.76 L2139.5 1192.76 L2140.09 1192.76 L2140.67 1192.76 L2141.26 1192.76 L2141.84 1192.76 L2142.43 1192.76 L2143.02 1192.76 L2143.6 1192.76 L2144.19 1192.76 L2144.78 1192.76 L2145.36 1192.76 L2145.95 1192.76 L2146.54 1192.76 L2147.12 1192.76 L2147.71 1192.76 L2148.3 1192.76 L2148.88 1192.76 L2149.47 1192.76 L2150.05 1192.76 L2150.64 1192.76 L2151.23 1192.76 L2151.81 1192.76 L2152.4 1192.76 L2152.99 1192.76 L2153.57 1192.76 L2154.16 1192.76 L2154.75 1192.76 L2155.33 1192.76 L2155.92 1192.76 L2156.5 1192.76 L2157.09 1192.76 L2157.68 1192.76 L2158.26 1192.76 L2158.26 1191.9 L2157.68 1191.9 L2157.09 1191.9 L2156.5 1191.9 L2155.92 1191.9 L2155.33 1191.9 L2154.75 1191.9 L2154.16 1191.9 L2153.57 1191.9 L2152.99 1191.9 L2152.4 1191.9 L2151.81 1191.9 L2151.23 1191.9 L2150.64 1191.9 L2150.05 1191.9 L2149.47 1191.9 L2148.88 1191.9 L2148.3 1191.9 L2147.71 1191.9 L2147.12 1191.9 L2146.54 1191.9 L2145.95 1191.9 L2145.36 1191.9 L2144.78 1191.9 L2144.19 1191.9 L2143.6 1191.9 L2143.02 1191.9 L2142.43 1191.9 L2141.84 1191.9 L2141.26 1191.9 L2140.67 1191.9 L2140.09 1191.9 L2139.5 1191.9 L2138.91 1191.9 L2138.33 1191.9 L2137.74 1191.9 L2137.15 1191.9 L2136.57 1191.9 L2135.98 1191.9 L2135.39 1191.9 L2134.81 1191.9 L2134.22 1191.9 L2133.63 1191.9 L2133.05 1191.9 L2132.46 1191.9 L2131.88 1191.9 L2131.29 1191.9 L2130.7 1191.9 L2130.12 1191.9 L2129.53 1191.9 L2128.94 1191.9 L2128.36 1191.9 L2127.77 1191.9 L2127.18 1191.9 L2126.6 1191.9 L2126.01 1191.9 L2125.42 1191.9 L2124.84 1191.9 L2124.25 1191.9 L2123.67 1191.9 L2123.08 1191.9 L2122.49 1191.9 L2121.91 1191.9 L2121.32 1191.9 L2120.73 1191.9 L2120.15 1191.9 L2119.56 1191.9 L2118.97 1191.9 L2118.39 1191.9 L2117.8 1191.9 L2117.22 1191.9 L2116.63 1191.9 L2116.04 1191.9 L2115.46 1191.9 L2114.87 1191.9 L2114.28 1191.9 L2113.7 1191.9 L2113.11 1191.9 L2112.52 1191.9 L2111.94 1191.9 L2111.35 1191.9 L2110.76 1191.9 L2110.18 1191.9 L2109.59 1191.9 L2109.01 1191.9 L2108.42 1191.9 L2107.83 1191.9 L2107.25 1191.9 L2106.66 1191.9 L2106.07 1191.9 L2105.49 1191.9 L2104.9 1191.9 L2104.31 1191.9 L2103.73 1191.9 L2103.14 1191.9 L2102.55 1191.9 L2101.97 1191.9 L2101.38 1191.9 L2100.8 1191.9 L2100.21 1191.9 L2099.62 1191.9 L2099.04 1191.9 L2098.45 1191.9 L2097.86 1191.9 L2097.28 1191.9 L2096.69 1191.9 L2096.1 1191.9 L2095.52 1191.9 L2094.93 1191.9 L2094.35 1191.9 L2093.76 1191.9 L2093.17 1191.9 L2092.59 1191.9 L2092 1191.9 L2091.41 1191.9 L2090.83 1191.9 L2090.24 1191.9 L2089.65 1191.9 L2089.07 1191.9 L2088.48 1191.9 L2087.89 1191.9 L2087.31 1191.9 L2086.72 1191.9 L2086.14 1191.9 L2085.55 1191.9 L2084.96 1191.9 L2084.38 1191.9 L2083.79 1191.9 L2083.2 1191.9 L2082.62 1191.9 L2082.03 1191.9 L2081.44 1191.9 L2080.86 1191.9 L2080.27 1191.9 L2079.68 1191.9 L2079.1 1191.9 L2078.51 1191.9 L2077.93 1191.9 L2077.34 1191.9 L2076.75 1191.9 L2076.17 1191.9 L2075.58 1191.9 L2074.99 1191.9 L2074.41 1191.9 L2073.82 1191.9 L2073.23 1191.9 L2072.65 1191.9 L2072.06 1191.9 L2071.48 1191.9 L2070.89 1191.9 L2070.3 1191.9 L2069.72 1191.9 L2069.13 1191.9 L2068.54 1191.9 L2067.96 1191.9 L2067.37 1191.9 L2066.78 1191.9 L2066.2 1191.9 L2065.61 1191.9 L2065.02 1191.9 L2064.44 1191.9 L2063.85 1191.9 L2063.27 1191.9 L2062.68 1191.9 L2062.09 1191.9 L2061.51 1191.9 L2060.92 1191.9 L2060.33 1191.9 L2059.75 1191.9 L2059.16 1191.9 L2058.57 1191.9 L2057.99 1191.9 L2057.4 1191.9 L2056.81 1191.9 L2056.23 1191.9 L2055.64 1191.9 L2055.06 1191.9 L2054.47 1191.9 L2053.88 1191.9 L2053.3 1191.9 L2052.71 1191.9 L2052.12 1191.9 L2051.54 1191.9 L2050.95 1191.9 L2050.36 1191.9 L2049.78 1191.9 L2049.19 1191.9 L2048.6 1191.9 L2048.02 1191.9 L2047.43 1191.9 L2046.85 1191.9 L2046.26 1191.9 L2045.67 1191.9 L2045.09 1191.9 L2044.5 1191.9 L2043.91 1191.9 L2043.33 1191.9 L2042.74 1191.9 L2042.15 1191.9 L2041.57 1191.9 L2040.98 1191.9 L2040.4 1191.9 L2039.81 1191.9 L2039.22 1191.9 L2038.64 1191.9 L2038.05 1191.9 L2037.46 1191.9 L2036.88 1191.9 L2036.29 1191.9 L2035.7 1191.9 L2035.12 1191.9 L2034.53 1191.9 L2033.94 1191.9 L2033.36 1191.9 L2032.77 1191.9 L2032.19 1191.9 L2031.6 1191.9 L2031.01 1191.9 L2030.43 1191.9 L2029.84 1191.9 L2029.25 1191.9 L2028.67 1191.9 L2028.08 1191.9 L2027.49 1191.9 L2026.91 1191.9 L2026.32 1191.9 L2025.73 1191.9 L2025.15 1191.9 L2024.56 1191.9 L2023.98 1191.9 L2023.39 1191.9 L2022.8 1191.9 L2022.22 1191.9 L2021.63 1191.9 L2021.04 1191.9 L2020.46 1191.9 L2019.87 1191.9 L2019.28 1191.9 L2018.7 1191.9 L2018.11 1191.9 L2017.53 1191.9 L2016.94 1191.9 L2016.35 1191.9 L2015.77 1191.9 L2015.18 1191.9 L2014.59 1191.9 L2014.01 1191.9 L2013.42 1191.9 L2012.83 1191.9 L2012.25 1191.9 L2011.66 1191.9 L2011.07 1191.9 L2010.49 1191.9 L2009.9 1191.9 L2009.32 1191.9 L2008.73 1191.9 L2008.14 1191.9 L2007.56 1191.9 L2006.97 1191.9 L2006.38 1191.9 L2005.8 1191.9 L2005.21 1191.9 L2004.62 1191.9 L2004.04 1191.9 L2003.45 1191.9 L2002.86 1191.9 L2002.28 1191.9 L2001.69 1191.9 L2001.11 1191.9 L2000.52 1191.9 L1999.93 1191.9 L1999.35 1191.9 L1998.76 1191.9 L1998.17 1191.9 L1997.59 1191.9 L1997 1191.9 L1996.41 1191.9 L1995.83 1191.9 L1995.24 1191.9 L1994.65 1191.9 L1994.07 1191.9 L1993.48 1191.9 L1992.9 1191.9 L1992.31 1191.9 L1991.72 1191.9 L1991.14 1191.9 L1990.55 1191.9 L1989.96 1191.9 L1989.38 1191.9 L1988.79 1191.9 L1988.2 1191.9 L1987.62 1191.9 L1987.03 1191.9 L1986.45 1191.9 L1985.86 1191.9 L1985.27 1191.9 L1984.69 1191.9 L1984.1 1191.9 L1983.51 1191.9 L1982.93 1191.9 L1982.34 1191.9 L1981.75 1191.9 L1981.17 1191.9 L1980.58 1191.9 L1979.99 1191.9 L1979.41 1191.9 L1978.82 1191.9 L1978.24 1191.9 L1977.65 1191.9 L1977.06 1191.9 L1976.48 1191.9 L1975.89 1191.9 L1975.3 1191.9 L1974.72 1191.9 L1974.13 1191.9 L1973.54 1191.9 L1972.96 1191.9 L1972.37 1191.9 L1971.78 1191.9 L1971.2 1191.9 L1970.61 1191.9 L1970.03 1191.9 L1969.44 1191.9 L1968.85 1191.9 L1968.27 1191.9 L1967.68 1191.9 L1967.09 1191.9 L1966.51 1191.9 L1965.92 1191.9 L1965.33 1191.9 L1964.75 1191.9 L1964.16 1191.9 L1963.58 1191.9 L1962.99 1191.9 L1962.4 1191.9 L1961.82 1191.9 L1961.23 1191.9 L1960.64 1191.9 L1960.06 1191.9 L1959.47 1191.9 L1958.88 1191.9 L1958.3 1191.9 L1957.71 1191.9 L1957.12 1191.9 L1956.54 1191.9 L1955.95 1191.9 L1955.37 1191.9 L1954.78 1191.9 L1954.19 1191.9 L1953.61 1191.9 L1953.02 1191.9 L1952.43 1191.9 L1951.85 1191.9 L1951.26 1191.9 L1950.67 1191.9 L1950.09 1191.9 L1949.5 1191.9 L1948.91 1191.9 L1948.33 1191.9 L1947.74 1191.9 L1947.16 1191.9 L1946.57 1191.9 L1945.98 1191.9 L1945.4 1191.9 L1944.81 1191.9 L1944.22 1191.9 L1943.64 1191.9 L1943.05 1191.9 L1942.46 1191.9 L1941.88 1191.9 L1941.29 1191.9 L1940.71 1191.9 L1940.12 1191.9 L1939.53 1191.9 L1938.95 1191.9 L1938.36 1191.9 L1937.77 1191.9 L1937.19 1191.9 L1936.6 1191.9 L1936.01 1191.9 L1935.43 1191.9 L1934.84 1191.9 L1934.25 1191.9 L1933.67 1191.9 L1933.08 1191.9 L1932.5 1191.9 L1931.91 1191.9 L1931.32 1191.9 L1930.74 1191.9 L1930.15 1191.9 L1929.56 1191.9 L1928.98 1191.9 L1928.39 1191.9 L1927.8 1191.9 L1927.22 1191.9 L1926.63 1191.9 L1926.04 1191.9 L1925.46 1191.9 L1924.87 1191.9 L1924.29 1191.9 L1923.7 1191.9 L1923.11 1191.9 L1922.53 1191.9 L1921.94 1191.9 L1921.35 1191.9 L1920.77 1191.9 L1920.18 1191.9 L1919.59 1191.9 L1919.01 1191.9 L1918.42 1191.9 L1917.83 1191.9 L1917.25 1191.9 L1916.66 1191.9 L1916.08 1191.9 L1915.49 1191.9 L1914.9 1191.9 L1914.32 1191.9 L1913.73 1191.9 L1913.14 1191.9 L1912.56 1191.9 L1911.97 1191.9 L1911.38 1191.9 L1910.8 1191.9 L1910.21 1191.9 L1909.63 1191.9 L1909.04 1191.9 L1908.45 1191.9 L1907.87 1191.9 L1907.28 1191.9 L1906.69 1191.9 L1906.11 1191.9 L1905.52 1191.9 L1904.93 1191.9 L1904.35 1191.9 L1903.76 1191.9 L1903.17 1191.9 L1902.59 1191.9 L1902 1191.9 L1901.42 1191.9 L1900.83 1191.9 L1900.24 1191.9 L1899.66 1191.9 L1899.07 1191.9 L1898.48 1191.9 L1897.9 1191.9 L1897.31 1191.9 L1896.72 1191.9 L1896.14 1191.9 L1895.55 1191.9 L1894.96 1191.9 L1894.38 1191.9 L1893.79 1191.9 L1893.21 1191.9 L1892.62 1191.9 L1892.03 1191.9 L1891.45 1191.9 L1890.86 1191.9 L1890.27 1191.9 L1889.69 1191.9 L1889.1 1191.9 L1888.51 1191.9 L1887.93 1191.9 L1887.34 1191.9 L1886.76 1191.9 L1886.17 1191.9 L1885.58 1191.9 L1885 1191.9 L1884.41 1191.9 L1883.82 1191.9 L1883.24 1191.9 L1882.65 1191.9 L1882.06 1191.9 L1881.48 1191.9 L1880.89 1191.9 L1880.3 1191.9 L1879.72 1191.9 L1879.13 1191.9 L1878.55 1191.9 L1877.96 1191.9 L1877.37 1191.9 L1876.79 1191.9 L1876.2 1191.9 L1875.61 1191.9 L1875.03 1191.9 L1874.44 1191.9 L1873.85 1191.9 L1873.27 1191.9 L1872.68 1191.9 L1872.09 1191.9 L1871.51 1191.9 L1870.92 1191.9 L1870.34 1191.9 L1869.75 1191.9 L1869.16 1191.9 L1868.58 1191.9 L1867.99 1191.9 L1867.4 1191.9 L1866.82 1191.9 L1866.23 1191.9 L1865.64 1191.9 L1865.06 1191.9 L1864.47 1191.9 L1863.88 1191.9 L1863.3 1191.9 L1862.71 1191.9 L1862.13 1191.9 L1861.54 1191.9 L1860.95 1191.9 L1860.37 1191.9 L1859.78 1191.9 L1859.19 1191.9 L1858.61 1191.9 L1858.02 1191.9 L1857.43 1191.9 L1856.85 1191.9 L1856.26 1191.9 L1855.68 1191.9 L1855.09 1191.9 L1854.5 1191.9 L1853.92 1191.9 L1853.33 1191.9 L1852.74 1191.9 L1852.16 1191.9 L1851.57 1191.9 L1850.98 1191.9 L1850.4 1191.9 L1849.81 1191.9 L1849.22 1191.9 L1848.64 1191.9 L1848.05 1191.9 L1847.47 1191.9 L1846.88 1191.9 L1846.29 1191.9 L1845.71 1191.9 L1845.12 1191.9 L1844.53 1191.9 L1843.95 1191.9 L1843.36 1191.9 L1842.77 1191.9 L1842.19 1191.9 L1841.6 1191.9 L1841.01 1191.9 L1840.43 1191.9 L1839.84 1191.9 L1839.26 1191.9 L1838.67 1191.9 L1838.08 1191.9 L1837.5 1191.9 L1836.91 1191.9 L1836.32 1191.9 L1835.74 1191.9 L1835.15 1191.9 L1834.56 1191.9 L1833.98 1191.9 L1833.39 1191.9 L1832.81 1191.9 L1832.22 1191.9 L1831.63 1191.9 L1831.05 1191.9 L1830.46 1191.9 L1829.87 1191.9 L1829.29 1191.9 L1828.7 1191.9 L1828.11 1191.9 L1827.53 1191.9 L1826.94 1191.9 L1826.35 1191.9 L1825.77 1191.9 L1825.18 1191.9 L1824.6 1191.9 L1824.01 1191.9 L1823.42 1191.9 L1822.84 1191.9 L1822.25 1191.9 L1821.66 1191.9 L1821.08 1191.9 L1820.49 1191.9 L1819.9 1191.9 L1819.32 1191.9 L1818.73 1191.9 L1818.14 1191.9 L1817.56 1191.9 L1816.97 1191.9 L1816.39 1191.9 L1815.8 1191.9 L1815.21 1191.9 L1814.63 1191.9 L1814.04 1191.9 L1813.45 1191.9 L1812.87 1191.9 L1812.28 1191.9 L1811.69 1191.9 L1811.11 1191.9 L1810.52 1191.9 L1809.94 1191.9 L1809.35 1191.9 L1808.76 1191.9 L1808.18 1191.9 L1807.59 1191.9 L1807 1191.9 L1806.42 1191.9 L1805.83 1191.9 L1805.24 1191.9 L1804.66 1191.9 L1804.07 1191.9 L1803.48 1191.9 L1802.9 1191.9 L1802.31 1191.9 L1801.73 1191.9 L1801.14 1191.9 L1800.55 1191.9 L1799.97 1191.9 L1799.38 1191.9 L1798.79 1191.9 L1798.21 1191.9 L1797.62 1191.9 L1797.03 1191.9 L1796.45 1191.9 L1795.86 1191.9 L1795.27 1191.9 L1794.69 1191.9 L1794.1 1191.9 L1793.52 1191.9 L1792.93 1191.9 L1792.34 1191.9 L1791.76 1191.9 L1791.17 1191.9 L1790.58 1191.9 L1790 1191.9 L1789.41 1191.9 L1788.82 1191.9 L1788.24 1191.9 L1787.65 1191.9 L1787.06 1191.9 L1786.48 1191.9 L1785.89 1191.9 L1785.31 1191.9 L1784.72 1191.9 L1784.13 1191.9 L1783.55 1191.9 L1782.96 1191.9 L1782.37 1191.9 L1781.79 1191.9 L1781.2 1191.9 L1780.61 1191.9 L1780.03 1191.9 L1779.44 1191.9 L1778.86 1191.9 L1778.27 1191.9 L1777.68 1191.9 L1777.1 1191.9 L1776.51 1191.9 L1775.92 1191.9 L1775.34 1191.9 L1774.75 1191.9 L1774.16 1191.9 L1773.58 1191.9 L1772.99 1191.9 L1772.4 1191.9 L1771.82 1191.9 L1771.23 1191.9 L1770.65 1191.9 L1770.06 1191.9 L1769.47 1191.9 L1768.89 1191.9 L1768.3 1191.9 L1767.71 1191.9 L1767.13 1191.9 L1766.54 1191.9 L1765.95 1191.9 L1765.37 1191.9 L1764.78 1191.9 L1764.19 1191.9 L1763.61 1191.9 L1763.02 1191.9 L1762.44 1191.9 L1761.85 1191.9 L1761.26 1191.9 L1760.68 1191.9 L1760.09 1191.9 L1759.5 1191.9 L1758.92 1191.9 L1758.33 1191.9 L1757.74 1191.9 L1757.16 1191.9 L1756.57 1191.9 L1755.99 1191.9 L1755.4 1191.9 L1754.81 1191.9 L1754.23 1191.9 L1753.64 1191.9 L1753.05 1191.9 L1752.47 1191.9 L1751.88 1191.9 L1751.29 1191.9 L1750.71 1191.9 L1750.12 1191.9 L1749.53 1191.9 L1748.95 1191.9 L1748.36 1191.9 L1747.78 1191.9 L1747.19 1191.9 L1746.6 1191.9 L1746.02 1191.9 L1745.43 1191.9 L1744.84 1191.9 L1744.26 1191.9 L1743.67 1191.9 L1743.08 1191.9 L1742.5 1191.9 L1741.91 1191.9 L1741.32 1191.9 L1740.74 1191.9 L1740.15 1191.9 L1739.57 1191.9 L1738.98 1191.9 L1738.39 1191.9 L1737.81 1191.9 L1737.22 1191.9 L1736.63 1191.9 L1736.05 1191.9 L1735.46 1191.9 L1734.87 1191.9 L1734.29 1191.9 L1733.7 1191.9 L1733.11 1191.9 L1732.53 1191.9 L1731.94 1191.9 L1731.36 1191.9 L1730.77 1191.9 L1730.18 1191.9 L1729.6 1191.9 L1729.01 1191.9 L1728.42 1191.9 L1727.84 1191.9 L1727.25 1191.9 L1726.66 1191.9 L1726.08 1191.9 L1725.49 1191.9 L1724.91 1191.9 L1724.32 1191.9 L1723.73 1191.9 L1723.15 1191.9 L1722.56 1191.9 L1721.97 1191.9 L1721.39 1191.9 L1720.8 1191.9 L1720.21 1191.9 L1719.63 1191.9 L1719.04 1191.9 L1718.45 1191.9 L1717.87 1191.9 L1717.28 1191.9 L1716.7 1191.9 L1716.11 1191.9 L1715.52 1191.9 L1714.94 1191.9 L1714.35 1191.9 L1713.76 1191.9 L1713.18 1191.9 L1712.59 1191.9 L1712 1191.9 L1711.42 1191.9 L1710.83 1191.9 L1710.24 1191.9 L1709.66 1191.9 L1709.07 1191.9 L1708.49 1191.9 L1707.9 1191.9 L1707.31 1191.9 L1706.73 1191.9 L1706.14 1191.9 L1705.55 1191.9 L1704.97 1191.9 L1704.38 1191.9 L1703.79 1191.9 L1703.21 1191.9 L1702.62 1191.9 L1702.04 1191.9 L1701.45 1191.9 L1700.86 1191.9 L1700.28 1191.9 L1699.69 1191.9 L1699.1 1191.9 L1698.52 1191.9 L1697.93 1191.9 L1697.34 1191.9 L1696.76 1191.9 L1696.17 1191.9 L1695.58 1191.9 L1695 1191.9 L1694.41 1191.9 L1693.83 1191.9 L1693.24 1191.9 L1692.65 1191.9 L1692.07 1191.9 L1691.48 1191.9 L1690.89 1191.9 L1690.31 1191.9 L1689.72 1191.9 L1689.13 1191.9 L1688.55 1191.9 L1687.96 1191.9 L1687.37 1191.9 L1686.79 1191.9 L1686.2 1191.9 L1685.62 1191.9 L1685.03 1191.9 L1684.44 1191.9 L1683.86 1191.9 L1683.27 1191.9 L1682.68 1191.9 L1682.1 1191.9 L1681.51 1191.9 L1680.92 1191.9 L1680.34 1191.9 L1679.75 1191.9 L1679.17 1191.9 L1678.58 1191.9 L1677.99 1191.9 L1677.41 1191.9 L1676.82 1191.9 L1676.23 1191.9 L1675.65 1191.9 L1675.06 1191.9 L1674.47 1191.9 L1673.89 1191.9 L1673.3 1191.9 L1672.71 1191.9 L1672.13 1191.9 L1671.54 1191.9 L1670.96 1191.9 L1670.37 1191.9 L1669.78 1191.9 L1669.2 1191.9 L1668.61 1191.9 L1668.02 1191.9 L1667.44 1191.9 L1666.85 1191.9 L1666.26 1191.9 L1665.68 1191.9 L1665.09 1191.9 L1664.5 1191.9 L1663.92 1191.9 L1663.33 1191.9 L1662.75 1191.9 L1662.16 1191.9 L1661.57 1191.9 L1660.99 1191.9 L1660.4 1191.9 L1659.81 1191.9 L1659.23 1191.9 L1658.64 1191.9 L1658.05 1191.9 L1657.47 1191.9 L1656.88 1191.9 L1656.29 1191.9 L1655.71 1191.9 L1655.12 1191.9 L1654.54 1191.9 L1653.95 1191.9 L1653.36 1191.9 L1652.78 1191.9 L1652.19 1191.9 L1651.6 1191.9 L1651.02 1191.9 L1650.43 1191.9 L1649.84 1191.9 L1649.26 1191.9 L1648.67 1191.9 L1648.09 1191.9 L1647.5 1191.9 L1646.91 1191.9 L1646.33 1191.9 L1645.74 1191.9 L1645.15 1191.9 L1644.57 1191.9 L1643.98 1191.9 L1643.39 1191.9 L1642.81 1191.9 L1642.22 1191.9 L1641.63 1191.9 L1641.05 1191.9 L1640.46 1191.9 L1639.88 1191.9 L1639.29 1191.9 L1638.7 1191.9 L1638.12 1191.9 L1637.53 1191.9 L1636.94 1191.9 L1636.36 1191.9 L1635.77 1191.9 L1635.18 1191.9 L1634.6 1191.9 L1634.01 1191.9 L1633.42 1191.9 L1632.84 1191.9 L1632.25 1191.9 L1631.67 1191.9 L1631.08 1191.9 L1630.49 1191.9 L1629.91 1191.9 L1629.32 1191.9 L1628.73 1191.9 L1628.15 1191.9 L1627.56 1191.9 L1626.97 1191.9 L1626.39 1191.9 L1625.8 1191.9 L1625.22 1191.9 L1624.63 1191.9 L1624.04 1191.9 L1623.46 1191.9 L1622.87 1191.9 L1622.28 1191.9 L1621.7 1191.9 L1621.11 1191.9 L1620.52 1191.9 L1619.94 1191.9 L1619.35 1191.9 L1618.76 1191.9 L1618.18 1191.9 L1617.59 1191.9 L1617.01 1191.9 L1616.42 1191.9 L1615.83 1191.9 L1615.25 1191.9 L1614.66 1191.9 L1614.07 1191.9 L1613.49 1191.9 L1612.9 1191.9 L1612.31 1191.9 L1611.73 1191.9 L1611.14 1191.9 L1610.55 1191.9 L1609.97 1191.9 L1609.38 1191.9 L1608.8 1191.9 L1608.21 1191.9 L1607.62 1191.9 L1607.04 1191.9 L1606.45 1191.9 L1605.86 1191.9 L1605.28 1191.9 L1604.69 1191.9 L1604.1 1191.9 L1603.52 1191.9 L1602.93 1191.9 L1602.34 1191.9 L1601.76 1191.9 L1601.17 1191.9 L1600.59 1191.9 L1600 1191.9 L1599.41 1191.9 L1598.83 1191.9 L1598.24 1191.9 L1597.65 1191.9 L1597.07 1191.9 L1596.48 1191.9 L1595.89 1191.9 L1595.31 1191.9 L1594.72 1191.9 L1594.14 1191.9 L1593.55 1191.9 L1592.96 1191.9 L1592.38 1191.9 L1591.79 1191.9 L1591.2 1191.9 L1590.62 1191.9 L1590.03 1191.9 L1589.44 1191.9 L1588.86 1191.9 L1588.27 1191.9 L1587.68 1191.9 L1587.1 1191.9 L1586.51 1191.9 L1585.93 1191.9 L1585.34 1191.9 L1584.75 1191.9 L1584.17 1191.9 L1583.58 1191.9 L1582.99 1191.9 L1582.41 1191.9 L1581.82 1191.9 L1581.23 1191.9 L1580.65 1191.9 L1580.06 1191.9 L1579.47 1191.9 L1578.89 1191.9 L1578.3 1191.9 L1577.72 1191.9 L1577.13 1191.9 L1576.54 1191.9 L1575.96 1191.9 L1575.37 1191.9 L1574.78 1191.9 L1574.2 1191.9 L1573.61 1191.9 L1573.02 1191.9 L1572.44 1191.9 L1571.85 1191.9 L1571.27 1191.9 L1570.68 1191.9 L1570.09 1191.9 L1569.51 1191.9 L1568.92 1191.9 L1568.33 1191.9 L1567.75 1191.9 L1567.16 1191.9 L1566.57 1191.9 L1565.99 1191.9 L1565.4 1191.9 L1564.81 1191.9 L1564.23 1191.9 L1563.64 1191.9 L1563.06 1191.9 L1562.47 1191.9 L1561.88 1191.9 L1561.3 1191.9 L1560.71 1191.9 L1560.12 1191.9 L1559.54 1191.9 L1558.95 1191.9 L1558.36 1191.9 L1557.78 1191.9 L1557.19 1191.9 L1556.6 1191.9 L1556.02 1191.9 L1555.43 1191.9 L1554.85 1191.9 L1554.26 1191.9 L1553.67 1191.9 L1553.09 1191.9 L1552.5 1191.9 L1551.91 1191.9 L1551.33 1191.9 L1550.74 1191.9 L1550.15 1191.9 L1549.57 1191.9 L1548.98 1191.9 L1548.4 1191.9 L1547.81 1191.9 L1547.22 1191.9 L1546.64 1191.9 L1546.05 1191.9 L1545.46 1191.9 L1544.88 1191.9 L1544.29 1191.9 L1543.7 1191.9 L1543.12 1191.9 L1542.53 1191.9 L1541.94 1191.9 L1541.36 1191.9 L1540.77 1191.9 L1540.19 1191.9 L1539.6 1191.9 L1539.01 1191.9 L1538.43 1191.9 L1537.84 1191.9 L1537.25 1191.9 L1536.67 1191.9 L1536.08 1191.9 L1535.49 1191.9 L1534.91 1191.9 L1534.32 1191.9 L1533.73 1191.9 L1533.15 1191.9 L1532.56 1191.9 L1531.98 1191.9 L1531.39 1191.9 L1530.8 1191.9 L1530.22 1191.9 L1529.63 1191.9 L1529.04 1191.9 L1528.46 1191.9 L1527.87 1191.9 L1527.28 1191.9 L1526.7 1191.9 L1526.11 1191.9 L1525.52 1191.9 L1524.94 1191.9 L1524.35 1191.9 L1523.77 1191.9 L1523.18 1191.9 L1522.59 1191.9 L1522.01 1191.9 L1521.42 1191.9 L1520.83 1191.9 L1520.25 1191.9 L1519.66 1191.9 L1519.07 1191.9 L1518.49 1191.9 L1517.9 1191.9 L1517.32 1191.9 L1516.73 1191.9 L1516.14 1191.9 L1515.56 1191.9 L1514.97 1191.9 L1514.38 1191.9 L1513.8 1191.9 L1513.21 1191.9 L1512.62 1191.9 L1512.04 1191.9 L1511.45 1191.9 L1510.86 1191.9 L1510.28 1191.9 L1509.69 1191.9 L1509.11 1191.9 L1508.52 1191.9 L1507.93 1191.9 L1507.35 1191.9 L1506.76 1191.9 L1506.17 1191.9 L1505.59 1191.9 L1505 1191.9 L1504.41 1191.9 L1503.83 1191.9 L1503.24 1191.9 L1502.65 1191.9 L1502.07 1191.9 L1501.48 1191.9 L1500.9 1191.9 L1500.31 1191.9 L1499.72 1191.9 L1499.14 1191.9 L1498.55 1191.9 L1497.96 1191.9 L1497.38 1191.9 L1496.79 1191.9 L1496.2 1191.9 L1495.62 1191.9 L1495.03 1191.9 L1494.45 1191.9 L1493.86 1191.9 L1493.27 1191.9 L1492.69 1191.9 L1492.1 1191.9 L1491.51 1191.9 L1490.93 1191.9 L1490.34 1191.9 L1489.75 1191.9 L1489.17 1191.9 L1488.58 1191.9 L1487.99 1191.9 L1487.41 1191.9 L1486.82 1191.9 L1486.24 1191.9 L1485.65 1191.9 L1485.06 1191.9 L1484.48 1191.9 L1483.89 1191.9 L1483.3 1191.9 L1482.72 1191.9 L1482.13 1191.9 L1481.54 1191.9 L1480.96 1191.9 L1480.37 1191.9 L1479.78 1191.9 L1479.2 1191.9 L1478.61 1191.9 L1478.03 1191.9 L1477.44 1191.9 L1476.85 1191.9 L1476.27 1191.9 L1475.68 1191.9 L1475.09 1191.9 L1474.51 1191.9 L1473.92 1191.9 L1473.33 1191.9 L1472.75 1191.9 L1472.16 1191.9 L1471.57 1191.9 L1470.99 1191.9 L1470.4 1191.9 L1469.82 1191.9 L1469.23 1191.9 L1468.64 1191.9 L1468.06 1191.9 L1467.47 1191.9 L1466.88 1191.9 L1466.3 1191.9 L1465.71 1191.9 L1465.12 1191.9 L1464.54 1191.9 L1463.95 1191.9 L1463.37 1191.9 L1462.78 1191.9 L1462.19 1191.9 L1461.61 1191.9 L1461.02 1191.9 L1460.43 1191.9 L1459.85 1191.9 L1459.26 1191.9 L1458.67 1191.9 L1458.09 1191.9 L1457.5 1191.9 L1456.91 1191.9 L1456.33 1191.9 L1455.74 1191.9 L1455.16 1191.9 L1454.57 1191.9 L1453.98 1191.9 L1453.4 1191.9 L1452.81 1191.9 L1452.22 1191.9 L1451.64 1191.9 L1451.05 1191.9 L1450.46 1191.9 L1449.88 1191.9 L1449.29 1191.9 L1448.7 1191.9 L1448.12 1191.9 L1447.53 1191.9 L1446.95 1191.9 L1446.36 1191.9 L1445.77 1191.9 L1445.19 1191.9 L1444.6 1191.9 L1444.01 1191.9 L1443.43 1191.9 L1442.84 1191.9 L1442.25 1191.9 L1441.67 1191.9 L1441.08 1191.9 L1440.5 1191.9 L1439.91 1191.9 L1439.32 1191.9 L1438.74 1191.9 L1438.15 1191.9 L1437.56 1191.9 L1436.98 1191.9 L1436.39 1191.9 L1435.8 1191.9 L1435.22 1191.9 L1434.63 1191.9 L1434.04 1191.9 L1433.46 1191.9 L1432.87 1191.9 L1432.29 1191.9 L1431.7 1191.9 L1431.11 1191.9 L1430.53 1191.9 L1429.94 1191.9 L1429.35 1191.9 L1428.77 1191.9 L1428.18 1191.9 L1427.59 1191.9 L1427.01 1191.9 L1426.42 1191.9 L1425.83 1191.9 L1425.25 1191.9 L1424.66 1191.9 L1424.08 1191.9 L1423.49 1191.9 L1422.9 1191.9 L1422.32 1191.9 L1421.73 1191.9 L1421.14 1191.9 L1420.56 1191.9 L1419.97 1191.9 L1419.38 1191.9 L1418.8 1191.9 L1418.21 1191.9 L1417.63 1191.9 L1417.04 1191.9 L1416.45 1191.9 L1415.87 1191.9 L1415.28 1191.9 L1414.69 1191.9 L1414.11 1191.9 L1413.52 1191.9 L1412.93 1191.9 L1412.35 1191.9 L1411.76 1191.9 L1411.17 1191.9 L1410.59 1191.9 L1410 1191.9 L1409.42 1191.9 L1408.83 1191.9 L1408.24 1191.9 L1407.66 1191.9 L1407.07 1191.9 L1406.48 1191.9 L1405.9 1191.9 L1405.31 1191.9 L1404.72 1191.9 L1404.14 1191.9 L1403.55 1191.9 L1402.96 1191.9 L1402.38 1191.9 L1401.79 1191.9 L1401.21 1191.9 L1400.62 1191.9 L1400.03 1191.9 L1399.45 1191.9 L1398.86 1191.9 L1398.27 1191.9 L1397.69 1191.9 L1397.1 1191.9 L1396.51 1191.9 L1395.93 1191.9 L1395.34 1191.9 L1394.75 1191.9 L1394.17 1191.9 L1393.58 1191.9 L1393 1191.9 L1392.41 1191.9 L1391.82 1191.9 L1391.24 1191.9 L1390.65 1191.9 L1390.06 1191.9 L1389.48 1191.9 L1388.89 1191.9 L1388.3 1191.9 L1387.72 1191.9 L1387.13 1191.9 L1386.55 1191.9 L1385.96 1191.9 L1385.37 1191.9 L1384.79 1191.9 L1384.2 1191.9 L1383.61 1191.9 L1383.03 1191.9 L1382.44 1191.9 L1381.85 1191.9 L1381.27 1191.9 L1380.68 1191.9 L1380.09 1191.9 L1379.51 1191.9 L1378.92 1191.9 L1378.34 1191.9 L1377.75 1191.9 L1377.16 1191.9 L1376.58 1191.9 L1375.99 1191.9 L1375.4 1191.9 L1374.82 1191.9 L1374.23 1191.9 L1373.64 1191.9 L1373.06 1191.9 L1372.47 1191.9 L1371.88 1191.9 L1371.3 1191.9 L1370.71 1191.9 L1370.13 1191.9 L1369.54 1191.9 L1368.95 1191.9 L1368.37 1191.9 L1367.78 1191.9 L1367.19 1191.9 L1366.61 1191.9 L1366.02 1191.9 L1365.43 1191.9 L1364.85 1191.9 L1364.26 1191.9 L1363.68 1191.9 L1363.09 1191.9 L1362.5 1191.9 L1361.92 1191.9 L1361.33 1191.9 L1360.74 1191.9 L1360.16 1191.9 L1359.57 1191.9 L1358.98 1191.9 L1358.4 1191.9 L1357.81 1191.9 L1357.22 1191.9 L1356.64 1191.9 L1356.05 1191.9 L1355.47 1191.9 L1354.88 1191.9 L1354.29 1191.9 L1353.71 1191.9 L1353.12 1191.9 L1352.53 1191.9 L1351.95 1191.9 L1351.36 1191.9 L1350.77 1191.9 L1350.19 1191.9 L1349.6 1191.9 L1349.01 1191.9 L1348.43 1191.9 L1347.84 1191.9 L1347.26 1191.9 L1346.67 1191.9 L1346.08 1191.9 L1345.5 1191.9 L1344.91 1191.9 L1344.32 1191.9 L1343.74 1191.9 L1343.15 1191.9 L1342.56 1191.9 L1341.98 1191.9 L1341.39 1191.9 L1340.8 1191.9 L1340.22 1191.9 L1339.63 1191.9 L1339.05 1191.9 L1338.46 1191.9 L1337.87 1191.9 L1337.29 1191.9 L1336.7 1191.9 L1336.11 1191.9 L1335.53 1191.9 L1334.94 1191.9 L1334.35 1191.9 L1333.77 1191.9 L1333.18 1191.9 L1332.6 1191.9 L1332.01 1191.9 L1331.42 1191.9 L1330.84 1191.9 L1330.25 1191.9 L1329.66 1191.9 L1329.08 1191.9 L1328.49 1191.9 L1327.9 1191.9 L1327.32 1191.9 L1326.73 1191.9 L1326.14 1191.9 L1325.56 1191.9 L1324.97 1191.9 L1324.39 1191.9 L1323.8 1191.9 L1323.21 1191.9 L1322.63 1191.9 L1322.04 1191.9 L1321.45 1191.9 L1320.87 1191.9 L1320.28 1191.9 L1319.69 1191.9 L1319.11 1191.9 L1318.52 1191.9 L1317.93 1191.9 L1317.35 1191.9 L1316.76 1191.9 L1316.18 1191.9 L1315.59 1191.9 L1315 1191.9 L1314.42 1191.9 L1313.83 1191.9 L1313.24 1191.9 L1312.66 1191.9 L1312.07 1191.9 L1311.48 1191.9 L1310.9 1191.9 L1310.31 1191.9 L1309.73 1191.9 L1309.14 1191.9 L1308.55 1191.9 L1307.97 1191.9 L1307.38 1191.9 L1306.79 1191.9 L1306.21 1191.9 L1305.62 1191.9 L1305.03 1191.9 L1304.45 1191.9 L1303.86 1191.9 L1303.27 1191.9 L1302.69 1191.9 L1302.1 1191.9 L1301.52 1191.9 L1300.93 1191.9 L1300.34 1191.9 L1299.76 1191.9 L1299.17 1191.9 L1298.58 1191.9 L1298 1191.9 L1297.41 1191.9 L1296.82 1191.9 L1296.24 1191.9 L1295.65 1191.9 L1295.06 1191.9 L1294.48 1191.9 L1293.89 1191.9 L1293.31 1191.9 L1292.72 1191.9 L1292.13 1191.9 L1291.55 1191.9 L1290.96 1191.9 L1290.37 1191.9 L1289.79 1191.9 L1289.2 1191.9 L1288.61 1191.9 L1288.03 1191.9 L1287.44 1191.9 L1286.86 1191.9 L1286.27 1191.9 L1285.68 1191.9 L1285.1 1191.9 L1284.51 1191.9 L1283.92 1191.9 L1283.34 1191.9 L1282.75 1191.9 L1282.16 1191.9 L1281.58 1191.9 L1280.99 1191.9 L1280.4 1191.9 L1279.82 1191.9 L1279.23 1191.9 L1278.65 1191.9 L1278.06 1191.9 L1277.47 1191.9 L1276.89 1191.9 L1276.3 1191.9 L1275.71 1191.9 L1275.13 1191.9 L1274.54 1191.9 L1273.95 1191.9 L1273.37 1191.9 L1272.78 1191.9 L1272.19 1191.9 L1271.61 1191.9 L1271.02 1191.9 L1270.44 1191.9 L1269.85 1191.9 L1269.26 1191.9 L1268.68 1191.9 L1268.09 1191.9 L1267.5 1191.9 L1266.92 1191.9 L1266.33 1191.9 L1265.74 1191.9 L1265.16 1191.9 L1264.57 1191.9 L1263.98 1191.9 L1263.4 1191.9 L1262.81 1191.9 L1262.23 1191.9 L1261.64 1191.9 L1261.05 1191.9 L1260.47 1191.9 L1259.88 1191.9 L1259.29 1191.9 L1258.71 1191.9 L1258.12 1191.9 L1257.53 1191.9 L1256.95 1191.9 L1256.36 1191.9 L1255.78 1191.9 L1255.19 1191.9 L1254.6 1191.9 L1254.02 1191.9 L1253.43 1191.9 L1252.84 1191.9 L1252.26 1191.9 L1251.67 1191.9 L1251.08 1191.9 L1250.5 1191.9 L1249.91 1191.9 L1249.32 1191.9 L1248.74 1191.9 L1248.15 1191.9 L1247.57 1191.9 L1246.98 1191.9 L1246.39 1191.9 L1245.81 1191.9 L1245.22 1191.9 L1244.63 1191.9 L1244.05 1191.9 L1243.46 1191.9 L1242.87 1191.9 L1242.29 1191.9 L1241.7 1191.9 L1241.11 1191.9 L1240.53 1191.9 L1239.94 1191.9 L1239.36 1191.9 L1238.77 1191.9 L1238.18 1191.9 L1237.6 1191.9 L1237.01 1191.9 L1236.42 1191.9 L1235.84 1191.9 L1235.25 1191.9 L1234.66 1191.9 L1234.08 1191.9 L1233.49 1191.9 L1232.91 1191.9 L1232.32 1191.9 L1231.73 1191.9 L1231.15 1191.9 L1230.56 1191.9 L1229.97 1191.9 L1229.39 1191.9 L1228.8 1191.9 L1228.21 1191.9 L1227.63 1191.9 L1227.04 1191.9 L1226.45 1191.9 L1225.87 1191.9 L1225.28 1191.9 L1224.7 1191.9 L1224.11 1191.9 L1223.52 1191.9 L1222.94 1191.9 L1222.35 1191.9 L1221.76 1191.9 L1221.18 1191.9 L1220.59 1191.9 L1220 1191.9 L1219.42 1191.9 L1218.83 1191.9 L1218.24 1191.9 L1217.66 1191.9 L1217.07 1191.9 L1216.49 1191.9 L1215.9 1191.9 L1215.31 1191.9 L1214.73 1191.9 L1214.14 1191.9 L1213.55 1191.9 L1212.97 1191.9 L1212.38 1191.9 L1211.79 1191.9 L1211.21 1191.9 L1210.62 1191.9 L1210.03 1191.9 L1209.45 1191.9 L1208.86 1191.9 L1208.28 1191.9 L1207.69 1191.9 L1207.1 1191.9 L1206.52 1191.9 L1205.93 1191.9 L1205.34 1191.9 L1204.76 1191.9 L1204.17 1191.9 L1203.58 1191.9 L1203 1191.9 L1202.41 1191.9 L1201.83 1191.9 L1201.24 1191.9 L1200.65 1191.9 L1200.07 1191.9 L1199.48 1191.9 L1198.89 1191.9 L1198.31 1191.9 L1197.72 1191.9 L1197.13 1191.9 L1196.55 1191.9 L1195.96 1191.9 L1195.37 1191.9 L1194.79 1191.9 L1194.2 1191.9 L1193.62 1191.9 L1193.03 1191.9 L1192.44 1191.9 L1191.86 1191.9 L1191.27 1191.9 L1190.68 1191.9 L1190.1 1191.9 L1189.51 1191.9 L1188.92 1191.9 L1188.34 1191.9 L1187.75 1191.9 L1187.16 1191.9 L1186.58 1191.9 L1185.99 1191.9 L1185.41 1191.9 L1184.82 1191.9 L1184.23 1191.9 L1183.65 1191.9 L1183.06 1191.9 L1182.47 1191.9 L1181.89 1191.9 L1181.3 1191.9 L1180.71 1191.9 L1180.13 1191.9 L1179.54 1191.9 L1178.96 1191.9 L1178.37 1191.9 L1177.78 1191.9 L1177.2 1191.9 L1176.61 1191.9 L1176.02 1191.9 L1175.44 1191.9 L1174.85 1191.9 L1174.26 1191.9 L1173.68 1191.9 L1173.09 1191.9 L1172.5 1191.9 L1171.92 1191.9 L1171.33 1191.9 L1170.75 1191.9 L1170.16 1191.9 L1169.57 1191.9 L1168.99 1191.9 L1168.4 1191.9 L1167.81 1191.9 L1167.23 1191.9 L1166.64 1191.9 L1166.05 1191.9 L1165.47 1191.9 L1164.88 1191.9 L1164.29 1191.9 L1163.71 1191.9 L1163.12 1191.9 L1162.54 1191.9 L1161.95 1191.9 L1161.36 1191.9 L1160.78 1191.9 L1160.19 1191.9 L1159.6 1191.9 L1159.02 1191.9 L1158.43 1191.9 L1157.84 1191.9 L1157.26 1191.9 L1156.67 1191.9 L1156.09 1191.9 L1155.5 1191.9 L1154.91 1191.9 L1154.33 1191.9 L1153.74 1191.9 L1153.15 1191.9 L1152.57 1191.9 L1151.98 1191.9 L1151.39 1191.9 L1150.81 1191.9 L1150.22 1191.9 L1149.63 1191.9 L1149.05 1191.9 L1148.46 1191.9 L1147.88 1191.9 L1147.29 1191.9 L1146.7 1191.9 L1146.12 1191.9 L1145.53 1191.9 L1144.94 1191.9 L1144.36 1191.9 L1143.77 1191.9 L1143.18 1191.9 L1142.6 1191.9 L1142.01 1191.9 L1141.42 1191.9 L1140.84 1191.9 L1140.25 1191.9 L1139.67 1191.9 L1139.08 1191.9 L1138.49 1191.9 L1137.91 1191.9 L1137.32 1191.9 L1136.73 1191.9 L1136.15 1191.9 L1135.56 1191.9 L1134.97 1191.9 L1134.39 1191.9 L1133.8 1191.9 L1133.21 1191.9 L1132.63 1191.9 L1132.04 1191.9 L1131.46 1191.9 L1130.87 1191.9 L1130.28 1191.9 L1129.7 1191.9 L1129.11 1191.9 L1128.52 1191.9 L1127.94 1191.9 L1127.35 1191.9 L1126.76 1191.9 L1126.18 1191.9 L1125.59 1191.9 L1125.01 1191.9 L1124.42 1191.9 L1123.83 1191.9 L1123.25 1191.9 L1122.66 1191.9 L1122.07 1191.9 L1121.49 1191.9 L1120.9 1191.9 L1120.31 1191.9 L1119.73 1191.9 L1119.14 1191.9 L1118.55 1191.9 L1117.97 1191.9 L1117.38 1191.9 L1116.8 1191.9 L1116.21 1191.9 L1115.62 1191.9 L1115.04 1191.9 L1114.45 1191.9 L1113.86 1191.9 L1113.28 1191.9 L1112.69 1191.9 L1112.1 1191.9 L1111.52 1191.9 L1110.93 1191.9 L1110.34 1191.9 L1109.76 1191.9 L1109.17 1191.9 L1108.59 1191.9 L1108 1191.9 L1107.41 1191.9 L1106.83 1191.9 L1106.24 1191.9 L1105.65 1191.9 L1105.07 1191.9 L1104.48 1191.9 L1103.89 1191.9 L1103.31 1191.9 L1102.72 1191.9 L1102.14 1191.9 L1101.55 1191.9 L1100.96 1191.9 L1100.38 1191.9 L1099.79 1191.9 L1099.2 1191.9 L1098.62 1191.9 L1098.03 1191.9 L1097.44 1191.9 L1096.86 1191.9 L1096.27 1191.9 L1095.68 1191.9 L1095.1 1191.9 L1094.51 1191.9 L1093.93 1191.9 L1093.34 1191.9 L1092.75 1191.9 L1092.17 1191.9 L1091.58 1191.9 L1090.99 1191.9 L1090.41 1191.9 L1089.82 1191.9 L1089.23 1191.9 L1088.65 1191.9 L1088.06 1191.9 L1087.47 1191.9 L1086.89 1191.9 L1086.3 1191.9 L1085.72 1191.9 L1085.13 1191.9 L1084.54 1191.9 L1083.96 1191.9 L1083.37 1191.9 L1082.78 1191.9 L1082.2 1191.9 L1081.61 1191.9 L1081.02 1191.9 L1080.44 1191.9 L1079.85 1191.9 L1079.26 1191.9 L1078.68 1191.9 L1078.09 1191.9 L1077.51 1191.9 L1076.92 1191.9 L1076.33 1191.9 L1075.75 1191.9 L1075.16 1191.9 L1074.57 1191.9 L1073.99 1191.9 L1073.4 1191.9 L1072.81 1191.9 L1072.23 1191.9 L1071.64 1191.9 L1071.06 1191.9 L1070.47 1191.9 L1069.88 1191.9 L1069.3 1191.9 L1068.71 1191.9 L1068.12 1191.9 L1067.54 1191.9 L1066.95 1191.9 L1066.36 1191.9 L1065.78 1191.9 L1065.19 1191.9 L1064.6 1191.9 L1064.02 1191.9 L1063.43 1191.9 L1062.85 1191.9 L1062.26 1191.9 L1061.67 1191.9 L1061.09 1191.9 L1060.5 1191.9 L1059.91 1191.9 L1059.33 1191.9 L1058.74 1191.9 L1058.15 1191.9 L1057.57 1191.9 L1056.98 1191.9 L1056.39 1191.9 L1055.81 1191.9 L1055.22 1191.9 L1054.64 1191.9 L1054.05 1191.9 L1053.46 1191.9 L1052.88 1191.9 L1052.29 1191.9 L1051.7 1191.9 L1051.12 1191.9 L1050.53 1191.9 L1049.94 1191.9 L1049.36 1191.9 L1048.77 1191.9 L1048.19 1191.9 L1047.6 1191.9 L1047.01 1191.9 L1046.43 1191.9 L1045.84 1191.9 L1045.25 1191.9 L1044.67 1191.9 L1044.08 1191.9 L1043.49 1191.9 L1042.91 1191.9 L1042.32 1191.9 L1041.73 1191.9 L1041.15 1191.9 L1040.56 1191.9 L1039.98 1191.9 L1039.39 1191.9 L1038.8 1191.9 L1038.22 1191.9 L1037.63 1191.9 L1037.04 1191.9 L1036.46 1191.9 L1035.87 1191.9 L1035.28 1191.9 L1034.7 1191.9 L1034.11 1191.9 L1033.52 1191.9 L1032.94 1191.9 L1032.35 1191.9 L1031.77 1191.9 L1031.18 1191.9 L1030.59 1191.9 L1030.01 1191.9 L1029.42 1191.9 L1028.83 1191.9 L1028.25 1191.9 L1027.66 1191.9 L1027.07 1191.9 L1026.49 1191.9 L1025.9 1191.9 L1025.32 1191.9 L1024.73 1191.9 L1024.14 1191.9 L1023.56 1191.9 L1022.97 1191.9 L1022.38 1191.9 L1021.8 1191.9 L1021.21 1191.9 L1020.62 1191.9 L1020.04 1191.9 L1019.45 1191.9 L1018.86 1191.9 L1018.28 1191.9 L1017.69 1191.9 L1017.11 1191.9 L1016.52 1191.9 L1015.93 1191.9 L1015.35 1191.9 L1014.76 1191.9 L1014.17 1191.9 L1013.59 1191.9 L1013 1191.9 L1012.41 1191.9 L1011.83 1191.9 L1011.24 1191.9 L1010.65 1191.9 L1010.07 1191.9 L1009.48 1191.9 L1008.9 1191.9 L1008.31 1191.9 L1007.72 1191.9 L1007.14 1191.9 L1006.55 1191.9 L1005.96 1191.9 L1005.38 1191.9 L1004.79 1191.9 L1004.2 1191.9 L1003.62 1191.9 L1003.03 1191.9 L1002.44 1191.9 L1001.86 1191.9 L1001.27 1191.9 L1000.69 1191.9 L1000.1 1191.9 L999.513 1191.9 L998.926 1191.9 L998.34 1191.9 L997.754 1191.9 L997.167 1191.9 L996.581 1191.9 L995.994 1191.9 L995.408 1191.9 L994.822 1191.9 L994.235 1191.9 L993.649 1191.9 L993.062 1191.9 L992.476 1191.9 L991.889 1191.9 L991.303 1191.9 L990.717 1191.9 L990.13 1191.9 L989.544 1191.9 L988.957 1191.9 L988.371 1191.9 L987.785 1191.9 L987.198 1191.9 L986.612 1191.9 L986.025 1191.9  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1192.33 986.612,1192.33 987.198,1192.33 987.785,1192.33 988.371,1192.33 988.957,1192.33 989.544,1192.33 990.13,1192.33 990.717,1192.33 991.303,1192.33 991.889,1192.33 992.476,1192.33 993.062,1192.33 993.649,1192.33 994.235,1192.33 994.822,1192.33 995.408,1192.33 995.994,1192.33 996.581,1192.33 997.167,1192.33 997.754,1192.33 998.34,1192.33 998.926,1192.33 999.513,1192.33 1000.1,1192.33 1000.69,1192.33 1001.27,1192.33 1001.86,1192.33 1002.44,1192.33 1003.03,1192.33 1003.62,1192.33 1004.2,1192.33 1004.79,1192.33 1005.38,1192.33 1005.96,1192.33 1006.55,1192.33 1007.14,1192.33 1007.72,1192.33 1008.31,1192.33 1008.9,1192.33 1009.48,1192.33 1010.07,1192.33 1010.65,1192.33 1011.24,1192.33 1011.83,1192.33 1012.41,1192.33 1013,1192.33 1013.59,1192.33 1014.17,1192.33 1014.76,1192.33 1015.35,1192.33 1015.93,1192.33 1016.52,1192.33 1017.11,1192.33 1017.69,1192.33 1018.28,1192.33 1018.86,1192.33 1019.45,1192.33 1020.04,1192.33 1020.62,1192.33 1021.21,1192.33 1021.8,1192.33 1022.38,1192.33 1022.97,1192.33 1023.56,1192.33 1024.14,1192.33 1024.73,1192.33 1025.32,1192.33 1025.9,1192.33 1026.49,1192.33 1027.07,1192.33 1027.66,1192.33 1028.25,1192.33 1028.83,1192.33 1029.42,1192.33 1030.01,1192.33 1030.59,1192.33 1031.18,1192.33 1031.77,1192.33 1032.35,1192.33 1032.94,1192.33 1033.52,1192.33 1034.11,1192.33 1034.7,1192.33 1035.28,1192.33 1035.87,1192.33 1036.46,1192.33 1037.04,1192.33 1037.63,1192.33 1038.22,1192.33 1038.8,1192.33 1039.39,1192.33 1039.98,1192.33 1040.56,1192.33 1041.15,1192.33 1041.73,1192.33 1042.32,1192.33 1042.91,1192.33 1043.49,1192.33 1044.08,1192.33 1044.67,1192.33 1045.25,1192.33 1045.84,1192.33 1046.43,1192.33 1047.01,1192.33 1047.6,1192.33 1048.19,1192.33 1048.77,1192.33 1049.36,1192.33 1049.94,1192.33 1050.53,1192.33 1051.12,1192.33 1051.7,1192.33 1052.29,1192.33 1052.88,1192.33 1053.46,1192.33 1054.05,1192.33 1054.64,1192.33 1055.22,1192.33 1055.81,1192.33 1056.39,1192.33 1056.98,1192.33 1057.57,1192.33 1058.15,1192.33 1058.74,1192.33 1059.33,1192.33 1059.91,1192.33 1060.5,1192.33 1061.09,1192.33 1061.67,1192.33 1062.26,1192.33 1062.85,1192.33 1063.43,1192.33 1064.02,1192.33 1064.6,1192.33 1065.19,1192.33 1065.78,1192.33 1066.36,1192.33 1066.95,1192.33 1067.54,1192.33 1068.12,1192.33 1068.71,1192.33 1069.3,1192.33 1069.88,1192.33 1070.47,1192.33 1071.06,1192.33 1071.64,1192.33 1072.23,1192.33 1072.81,1192.33 1073.4,1192.33 1073.99,1192.33 1074.57,1192.33 1075.16,1192.33 1075.75,1192.33 1076.33,1192.33 1076.92,1192.33 1077.51,1192.33 1078.09,1192.33 1078.68,1192.33 1079.26,1192.33 1079.85,1192.33 1080.44,1192.33 1081.02,1192.33 1081.61,1192.33 1082.2,1192.33 1082.78,1192.33 1083.37,1192.33 1083.96,1192.33 1084.54,1192.33 1085.13,1192.33 1085.72,1192.33 1086.3,1192.33 1086.89,1192.33 1087.47,1192.33 1088.06,1192.33 1088.65,1192.33 1089.23,1192.33 1089.82,1192.33 1090.41,1192.33 1090.99,1192.33 1091.58,1192.33 1092.17,1192.33 1092.75,1192.33 1093.34,1192.33 1093.93,1192.33 1094.51,1192.33 1095.1,1192.33 1095.68,1192.33 1096.27,1192.33 1096.86,1192.33 1097.44,1192.33 1098.03,1192.33 1098.62,1192.33 1099.2,1192.33 1099.79,1192.33 1100.38,1192.33 1100.96,1192.33 1101.55,1192.33 1102.14,1192.33 1102.72,1192.33 1103.31,1192.33 1103.89,1192.33 1104.48,1192.33 1105.07,1192.33 1105.65,1192.33 1106.24,1192.33 1106.83,1192.33 1107.41,1192.33 1108,1192.33 1108.59,1192.33 1109.17,1192.33 1109.76,1192.33 1110.34,1192.33 1110.93,1192.33 1111.52,1192.33 1112.1,1192.33 1112.69,1192.33 1113.28,1192.33 1113.86,1192.33 1114.45,1192.33 1115.04,1192.33 1115.62,1192.33 1116.21,1192.33 1116.8,1192.33 1117.38,1192.33 1117.97,1192.33 1118.55,1192.33 1119.14,1192.33 1119.73,1192.33 1120.31,1192.33 1120.9,1192.33 1121.49,1192.33 1122.07,1192.33 1122.66,1192.33 1123.25,1192.33 1123.83,1192.33 1124.42,1192.33 1125.01,1192.33 1125.59,1192.33 1126.18,1192.33 1126.76,1192.33 1127.35,1192.33 1127.94,1192.33 1128.52,1192.33 1129.11,1192.33 1129.7,1192.33 1130.28,1192.33 1130.87,1192.33 1131.46,1192.33 1132.04,1192.33 1132.63,1192.33 1133.21,1192.33 1133.8,1192.33 1134.39,1192.33 1134.97,1192.33 1135.56,1192.33 1136.15,1192.33 1136.73,1192.33 1137.32,1192.33 1137.91,1192.33 1138.49,1192.33 1139.08,1192.33 1139.67,1192.33 1140.25,1192.33 1140.84,1192.33 1141.42,1192.33 1142.01,1192.33 1142.6,1192.33 1143.18,1192.33 1143.77,1192.33 1144.36,1192.33 1144.94,1192.33 1145.53,1192.33 1146.12,1192.33 1146.7,1192.33 1147.29,1192.33 1147.88,1192.33 1148.46,1192.33 1149.05,1192.33 1149.63,1192.33 1150.22,1192.33 1150.81,1192.33 1151.39,1192.33 1151.98,1192.33 1152.57,1192.33 1153.15,1192.33 1153.74,1192.33 1154.33,1192.33 1154.91,1192.33 1155.5,1192.33 1156.09,1192.33 1156.67,1192.33 1157.26,1192.33 1157.84,1192.33 1158.43,1192.33 1159.02,1192.33 1159.6,1192.33 1160.19,1192.33 1160.78,1192.33 1161.36,1192.33 1161.95,1192.33 1162.54,1192.33 1163.12,1192.33 1163.71,1192.33 1164.29,1192.33 1164.88,1192.33 1165.47,1192.33 1166.05,1192.33 1166.64,1192.33 1167.23,1192.33 1167.81,1192.33 1168.4,1192.33 1168.99,1192.33 1169.57,1192.33 1170.16,1192.33 1170.75,1192.33 1171.33,1192.33 1171.92,1192.33 1172.5,1192.33 1173.09,1192.33 1173.68,1192.33 1174.26,1192.33 1174.85,1192.33 1175.44,1192.33 1176.02,1192.33 1176.61,1192.33 1177.2,1192.33 1177.78,1192.33 1178.37,1192.33 1178.96,1192.33 1179.54,1192.33 1180.13,1192.33 1180.71,1192.33 1181.3,1192.33 1181.89,1192.33 1182.47,1192.33 1183.06,1192.33 1183.65,1192.33 1184.23,1192.33 1184.82,1192.33 1185.41,1192.33 1185.99,1192.33 1186.58,1192.33 1187.16,1192.33 1187.75,1192.33 1188.34,1192.33 1188.92,1192.33 1189.51,1192.33 1190.1,1192.33 1190.68,1192.33 1191.27,1192.33 1191.86,1192.33 1192.44,1192.33 1193.03,1192.33 1193.62,1192.33 1194.2,1192.33 1194.79,1192.33 1195.37,1192.33 1195.96,1192.33 1196.55,1192.33 1197.13,1192.33 1197.72,1192.33 1198.31,1192.33 1198.89,1192.33 1199.48,1192.33 1200.07,1192.33 1200.65,1192.33 1201.24,1192.33 1201.83,1192.33 1202.41,1192.33 1203,1192.33 1203.58,1192.33 1204.17,1192.33 1204.76,1192.33 1205.34,1192.33 1205.93,1192.33 1206.52,1192.33 1207.1,1192.33 1207.69,1192.33 1208.28,1192.33 1208.86,1192.33 1209.45,1192.33 1210.03,1192.33 1210.62,1192.33 1211.21,1192.33 1211.79,1192.33 1212.38,1192.33 1212.97,1192.33 1213.55,1192.33 1214.14,1192.33 1214.73,1192.33 1215.31,1192.33 1215.9,1192.33 1216.49,1192.33 1217.07,1192.33 1217.66,1192.33 1218.24,1192.33 1218.83,1192.33 1219.42,1192.33 1220,1192.33 1220.59,1192.33 1221.18,1192.33 1221.76,1192.33 1222.35,1192.33 1222.94,1192.33 1223.52,1192.33 1224.11,1192.33 1224.7,1192.33 1225.28,1192.33 1225.87,1192.33 1226.45,1192.33 1227.04,1192.33 1227.63,1192.33 1228.21,1192.33 1228.8,1192.33 1229.39,1192.33 1229.97,1192.33 1230.56,1192.33 1231.15,1192.33 1231.73,1192.33 1232.32,1192.33 1232.91,1192.33 1233.49,1192.33 1234.08,1192.33 1234.66,1192.33 1235.25,1192.33 1235.84,1192.33 1236.42,1192.33 1237.01,1192.33 1237.6,1192.33 1238.18,1192.33 1238.77,1192.33 1239.36,1192.33 1239.94,1192.33 1240.53,1192.33 1241.11,1192.33 1241.7,1192.33 1242.29,1192.33 1242.87,1192.33 1243.46,1192.33 1244.05,1192.33 1244.63,1192.33 1245.22,1192.33 1245.81,1192.33 1246.39,1192.33 1246.98,1192.33 1247.57,1192.33 1248.15,1192.33 1248.74,1192.33 1249.32,1192.33 1249.91,1192.33 1250.5,1192.33 1251.08,1192.33 1251.67,1192.33 1252.26,1192.33 1252.84,1192.33 1253.43,1192.33 1254.02,1192.33 1254.6,1192.33 1255.19,1192.33 1255.78,1192.33 1256.36,1192.33 1256.95,1192.33 1257.53,1192.33 1258.12,1192.33 1258.71,1192.33 1259.29,1192.33 1259.88,1192.33 1260.47,1192.33 1261.05,1192.33 1261.64,1192.33 1262.23,1192.33 1262.81,1192.33 1263.4,1192.33 1263.98,1192.33 1264.57,1192.33 1265.16,1192.33 1265.74,1192.33 1266.33,1192.33 1266.92,1192.33 1267.5,1192.33 1268.09,1192.33 1268.68,1192.33 1269.26,1192.33 1269.85,1192.33 1270.44,1192.33 1271.02,1192.33 1271.61,1192.33 1272.19,1192.33 1272.78,1192.33 1273.37,1192.33 1273.95,1192.33 1274.54,1192.33 1275.13,1192.33 1275.71,1192.33 1276.3,1192.33 1276.89,1192.33 1277.47,1192.33 1278.06,1192.33 1278.65,1192.33 1279.23,1192.33 1279.82,1192.33 1280.4,1192.33 1280.99,1192.33 1281.58,1192.33 1282.16,1192.33 1282.75,1192.33 1283.34,1192.33 1283.92,1192.33 1284.51,1192.33 1285.1,1192.33 1285.68,1192.33 1286.27,1192.33 1286.86,1192.33 1287.44,1192.33 1288.03,1192.33 1288.61,1192.33 1289.2,1192.33 1289.79,1192.33 1290.37,1192.33 1290.96,1192.33 1291.55,1192.33 1292.13,1192.33 1292.72,1192.33 1293.31,1192.33 1293.89,1192.33 1294.48,1192.33 1295.06,1192.33 1295.65,1192.33 1296.24,1192.33 1296.82,1192.33 1297.41,1192.33 1298,1192.33 1298.58,1192.33 1299.17,1192.33 1299.76,1192.33 1300.34,1192.33 1300.93,1192.33 1301.52,1192.33 1302.1,1192.33 1302.69,1192.33 1303.27,1192.33 1303.86,1192.33 1304.45,1192.33 1305.03,1192.33 1305.62,1192.33 1306.21,1192.33 1306.79,1192.33 1307.38,1192.33 1307.97,1192.33 1308.55,1192.33 1309.14,1192.33 1309.73,1192.33 1310.31,1192.33 1310.9,1192.33 1311.48,1192.33 1312.07,1192.33 1312.66,1192.33 1313.24,1192.33 1313.83,1192.33 1314.42,1192.33 1315,1192.33 1315.59,1192.33 1316.18,1192.33 1316.76,1192.33 1317.35,1192.33 1317.93,1192.33 1318.52,1192.33 1319.11,1192.33 1319.69,1192.33 1320.28,1192.33 1320.87,1192.33 1321.45,1192.33 1322.04,1192.33 1322.63,1192.33 1323.21,1192.33 1323.8,1192.33 1324.39,1192.33 1324.97,1192.33 1325.56,1192.33 1326.14,1192.33 1326.73,1192.33 1327.32,1192.33 1327.9,1192.33 1328.49,1192.33 1329.08,1192.33 1329.66,1192.33 1330.25,1192.33 1330.84,1192.33 1331.42,1192.33 1332.01,1192.33 1332.6,1192.33 1333.18,1192.33 1333.77,1192.33 1334.35,1192.33 1334.94,1192.33 1335.53,1192.33 1336.11,1192.33 1336.7,1192.33 1337.29,1192.33 1337.87,1192.33 1338.46,1192.33 1339.05,1192.33 1339.63,1192.33 1340.22,1192.33 1340.8,1192.33 1341.39,1192.33 1341.98,1192.33 1342.56,1192.33 1343.15,1192.33 1343.74,1192.33 1344.32,1192.33 1344.91,1192.33 1345.5,1192.33 1346.08,1192.33 1346.67,1192.33 1347.26,1192.33 1347.84,1192.33 1348.43,1192.33 1349.01,1192.33 1349.6,1192.33 1350.19,1192.33 1350.77,1192.33 1351.36,1192.33 1351.95,1192.33 1352.53,1192.33 1353.12,1192.33 1353.71,1192.33 1354.29,1192.33 1354.88,1192.33 1355.47,1192.33 1356.05,1192.33 1356.64,1192.33 1357.22,1192.33 1357.81,1192.33 1358.4,1192.33 1358.98,1192.33 1359.57,1192.33 1360.16,1192.33 1360.74,1192.33 1361.33,1192.33 1361.92,1192.33 1362.5,1192.33 1363.09,1192.33 1363.68,1192.33 1364.26,1192.33 1364.85,1192.33 1365.43,1192.33 1366.02,1192.33 1366.61,1192.33 1367.19,1192.33 1367.78,1192.33 1368.37,1192.33 1368.95,1192.33 1369.54,1192.33 1370.13,1192.33 1370.71,1192.33 1371.3,1192.33 1371.88,1192.33 1372.47,1192.33 1373.06,1192.33 1373.64,1192.33 1374.23,1192.33 1374.82,1192.33 1375.4,1192.33 1375.99,1192.33 1376.58,1192.33 1377.16,1192.33 1377.75,1192.33 1378.34,1192.33 1378.92,1192.33 1379.51,1192.33 1380.09,1192.33 1380.68,1192.33 1381.27,1192.33 1381.85,1192.33 1382.44,1192.33 1383.03,1192.33 1383.61,1192.33 1384.2,1192.33 1384.79,1192.33 1385.37,1192.33 1385.96,1192.33 1386.55,1192.33 1387.13,1192.33 1387.72,1192.33 1388.3,1192.33 1388.89,1192.33 1389.48,1192.33 1390.06,1192.33 1390.65,1192.33 1391.24,1192.33 1391.82,1192.33 1392.41,1192.33 1393,1192.33 1393.58,1192.33 1394.17,1192.33 1394.75,1192.33 1395.34,1192.33 1395.93,1192.33 1396.51,1192.33 1397.1,1192.33 1397.69,1192.33 1398.27,1192.33 1398.86,1192.33 1399.45,1192.33 1400.03,1192.33 1400.62,1192.33 1401.21,1192.33 1401.79,1192.33 1402.38,1192.33 1402.96,1192.33 1403.55,1192.33 1404.14,1192.33 1404.72,1192.33 1405.31,1192.33 1405.9,1192.33 1406.48,1192.33 1407.07,1192.33 1407.66,1192.33 1408.24,1192.33 1408.83,1192.33 1409.42,1192.33 1410,1192.33 1410.59,1192.33 1411.17,1192.33 1411.76,1192.33 1412.35,1192.33 1412.93,1192.33 1413.52,1192.33 1414.11,1192.33 1414.69,1192.33 1415.28,1192.33 1415.87,1192.33 1416.45,1192.33 1417.04,1192.33 1417.63,1192.33 1418.21,1192.33 1418.8,1192.33 1419.38,1192.33 1419.97,1192.33 1420.56,1192.33 1421.14,1192.33 1421.73,1192.33 1422.32,1192.33 1422.9,1192.33 1423.49,1192.33 1424.08,1192.33 1424.66,1192.33 1425.25,1192.33 1425.83,1192.33 1426.42,1192.33 1427.01,1192.33 1427.59,1192.33 1428.18,1192.33 1428.77,1192.33 1429.35,1192.33 1429.94,1192.33 1430.53,1192.33 1431.11,1192.33 1431.7,1192.33 1432.29,1192.33 1432.87,1192.33 1433.46,1192.33 1434.04,1192.33 1434.63,1192.33 1435.22,1192.33 1435.8,1192.33 1436.39,1192.33 1436.98,1192.33 1437.56,1192.33 1438.15,1192.33 1438.74,1192.33 1439.32,1192.33 1439.91,1192.33 1440.5,1192.33 1441.08,1192.33 1441.67,1192.33 1442.25,1192.33 1442.84,1192.33 1443.43,1192.33 1444.01,1192.33 1444.6,1192.33 1445.19,1192.33 1445.77,1192.33 1446.36,1192.33 1446.95,1192.33 1447.53,1192.33 1448.12,1192.33 1448.7,1192.33 1449.29,1192.33 1449.88,1192.33 1450.46,1192.33 1451.05,1192.33 1451.64,1192.33 1452.22,1192.33 1452.81,1192.33 1453.4,1192.33 1453.98,1192.33 1454.57,1192.33 1455.16,1192.33 1455.74,1192.33 1456.33,1192.33 1456.91,1192.33 1457.5,1192.33 1458.09,1192.33 1458.67,1192.33 1459.26,1192.33 1459.85,1192.33 1460.43,1192.33 1461.02,1192.33 1461.61,1192.33 1462.19,1192.33 1462.78,1192.33 1463.37,1192.33 1463.95,1192.33 1464.54,1192.33 1465.12,1192.33 1465.71,1192.33 1466.3,1192.33 1466.88,1192.33 1467.47,1192.33 1468.06,1192.33 1468.64,1192.33 1469.23,1192.33 1469.82,1192.33 1470.4,1192.33 1470.99,1192.33 1471.57,1192.33 1472.16,1192.33 1472.75,1192.33 1473.33,1192.33 1473.92,1192.33 1474.51,1192.33 1475.09,1192.33 1475.68,1192.33 1476.27,1192.33 1476.85,1192.33 1477.44,1192.33 1478.03,1192.33 1478.61,1192.33 1479.2,1192.33 1479.78,1192.33 1480.37,1192.33 1480.96,1192.33 1481.54,1192.33 1482.13,1192.33 1482.72,1192.33 1483.3,1192.33 1483.89,1192.33 1484.48,1192.33 1485.06,1192.33 1485.65,1192.33 1486.24,1192.33 1486.82,1192.33 1487.41,1192.33 1487.99,1192.33 1488.58,1192.33 1489.17,1192.33 1489.75,1192.33 1490.34,1192.33 1490.93,1192.33 1491.51,1192.33 1492.1,1192.33 1492.69,1192.33 1493.27,1192.33 1493.86,1192.33 1494.45,1192.33 1495.03,1192.33 1495.62,1192.33 1496.2,1192.33 1496.79,1192.33 1497.38,1192.33 1497.96,1192.33 1498.55,1192.33 1499.14,1192.33 1499.72,1192.33 1500.31,1192.33 1500.9,1192.33 1501.48,1192.33 1502.07,1192.33 1502.65,1192.33 1503.24,1192.33 1503.83,1192.33 1504.41,1192.33 1505,1192.33 1505.59,1192.33 1506.17,1192.33 1506.76,1192.33 1507.35,1192.33 1507.93,1192.33 1508.52,1192.33 1509.11,1192.33 1509.69,1192.33 1510.28,1192.33 1510.86,1192.33 1511.45,1192.33 1512.04,1192.33 1512.62,1192.33 1513.21,1192.33 1513.8,1192.33 1514.38,1192.33 1514.97,1192.33 1515.56,1192.33 1516.14,1192.33 1516.73,1192.33 1517.32,1192.33 1517.9,1192.33 1518.49,1192.33 1519.07,1192.33 1519.66,1192.33 1520.25,1192.33 1520.83,1192.33 1521.42,1192.33 1522.01,1192.33 1522.59,1192.33 1523.18,1192.33 1523.77,1192.33 1524.35,1192.33 1524.94,1192.33 1525.52,1192.33 1526.11,1192.33 1526.7,1192.33 1527.28,1192.33 1527.87,1192.33 1528.46,1192.33 1529.04,1192.33 1529.63,1192.33 1530.22,1192.33 1530.8,1192.33 1531.39,1192.33 1531.98,1192.33 1532.56,1192.33 1533.15,1192.33 1533.73,1192.33 1534.32,1192.33 1534.91,1192.33 1535.49,1192.33 1536.08,1192.33 1536.67,1192.33 1537.25,1192.33 1537.84,1192.33 1538.43,1192.33 1539.01,1192.33 1539.6,1192.33 1540.19,1192.33 1540.77,1192.33 1541.36,1192.33 1541.94,1192.33 1542.53,1192.33 1543.12,1192.33 1543.7,1192.33 1544.29,1192.33 1544.88,1192.33 1545.46,1192.33 1546.05,1192.33 1546.64,1192.33 1547.22,1192.33 1547.81,1192.33 1548.4,1192.33 1548.98,1192.33 1549.57,1192.33 1550.15,1192.33 1550.74,1192.33 1551.33,1192.33 1551.91,1192.33 1552.5,1192.33 1553.09,1192.33 1553.67,1192.33 1554.26,1192.33 1554.85,1192.33 1555.43,1192.33 1556.02,1192.33 1556.6,1192.33 1557.19,1192.33 1557.78,1192.33 1558.36,1192.33 1558.95,1192.33 1559.54,1192.33 1560.12,1192.33 1560.71,1192.33 1561.3,1192.33 1561.88,1192.33 1562.47,1192.33 1563.06,1192.33 1563.64,1192.33 1564.23,1192.33 1564.81,1192.33 1565.4,1192.33 1565.99,1192.33 1566.57,1192.33 1567.16,1192.33 1567.75,1192.33 1568.33,1192.33 1568.92,1192.33 1569.51,1192.33 1570.09,1192.33 1570.68,1192.33 1571.27,1192.33 1571.85,1192.33 1572.44,1192.33 1573.02,1192.33 1573.61,1192.33 1574.2,1192.33 1574.78,1192.33 1575.37,1192.33 1575.96,1192.33 1576.54,1192.33 1577.13,1192.33 1577.72,1192.33 1578.3,1192.33 1578.89,1192.33 1579.47,1192.33 1580.06,1192.33 1580.65,1192.33 1581.23,1192.33 1581.82,1192.33 1582.41,1192.33 1582.99,1192.33 1583.58,1192.33 1584.17,1192.33 1584.75,1192.33 1585.34,1192.33 1585.93,1192.33 1586.51,1192.33 1587.1,1192.33 1587.68,1192.33 1588.27,1192.33 1588.86,1192.33 1589.44,1192.33 1590.03,1192.33 1590.62,1192.33 1591.2,1192.33 1591.79,1192.33 1592.38,1192.33 1592.96,1192.33 1593.55,1192.33 1594.14,1192.33 1594.72,1192.33 1595.31,1192.33 1595.89,1192.33 1596.48,1192.33 1597.07,1192.33 1597.65,1192.33 1598.24,1192.33 1598.83,1192.33 1599.41,1192.33 1600,1192.33 1600.59,1192.33 1601.17,1192.33 1601.76,1192.33 1602.34,1192.33 1602.93,1192.33 1603.52,1192.33 1604.1,1192.33 1604.69,1192.33 1605.28,1192.33 1605.86,1192.33 1606.45,1192.33 1607.04,1192.33 1607.62,1192.33 1608.21,1192.33 1608.8,1192.33 1609.38,1192.33 1609.97,1192.33 1610.55,1192.33 1611.14,1192.33 1611.73,1192.33 1612.31,1192.33 1612.9,1192.33 1613.49,1192.33 1614.07,1192.33 1614.66,1192.33 1615.25,1192.33 1615.83,1192.33 1616.42,1192.33 1617.01,1192.33 1617.59,1192.33 1618.18,1192.33 1618.76,1192.33 1619.35,1192.33 1619.94,1192.33 1620.52,1192.33 1621.11,1192.33 1621.7,1192.33 1622.28,1192.33 1622.87,1192.33 1623.46,1192.33 1624.04,1192.33 1624.63,1192.33 1625.22,1192.33 1625.8,1192.33 1626.39,1192.33 1626.97,1192.33 1627.56,1192.33 1628.15,1192.33 1628.73,1192.33 1629.32,1192.33 1629.91,1192.33 1630.49,1192.33 1631.08,1192.33 1631.67,1192.33 1632.25,1192.33 1632.84,1192.33 1633.42,1192.33 1634.01,1192.33 1634.6,1192.33 1635.18,1192.33 1635.77,1192.33 1636.36,1192.33 1636.94,1192.33 1637.53,1192.33 1638.12,1192.33 1638.7,1192.33 1639.29,1192.33 1639.88,1192.33 1640.46,1192.33 1641.05,1192.33 1641.63,1192.33 1642.22,1192.33 1642.81,1192.33 1643.39,1192.33 1643.98,1192.33 1644.57,1192.33 1645.15,1192.33 1645.74,1192.33 1646.33,1192.33 1646.91,1192.33 1647.5,1192.33 1648.09,1192.33 1648.67,1192.33 1649.26,1192.33 1649.84,1192.33 1650.43,1192.33 1651.02,1192.33 1651.6,1192.33 1652.19,1192.33 1652.78,1192.33 1653.36,1192.33 1653.95,1192.33 1654.54,1192.33 1655.12,1192.33 1655.71,1192.33 1656.29,1192.33 1656.88,1192.33 1657.47,1192.33 1658.05,1192.33 1658.64,1192.33 1659.23,1192.33 1659.81,1192.33 1660.4,1192.33 1660.99,1192.33 1661.57,1192.33 1662.16,1192.33 1662.75,1192.33 1663.33,1192.33 1663.92,1192.33 1664.5,1192.33 1665.09,1192.33 1665.68,1192.33 1666.26,1192.33 1666.85,1192.33 1667.44,1192.33 1668.02,1192.33 1668.61,1192.33 1669.2,1192.33 1669.78,1192.33 1670.37,1192.33 1670.96,1192.33 1671.54,1192.33 1672.13,1192.33 1672.71,1192.33 1673.3,1192.33 1673.89,1192.33 1674.47,1192.33 1675.06,1192.33 1675.65,1192.33 1676.23,1192.33 1676.82,1192.33 1677.41,1192.33 1677.99,1192.33 1678.58,1192.33 1679.17,1192.33 1679.75,1192.33 1680.34,1192.33 1680.92,1192.33 1681.51,1192.33 1682.1,1192.33 1682.68,1192.33 1683.27,1192.33 1683.86,1192.33 1684.44,1192.33 1685.03,1192.33 1685.62,1192.33 1686.2,1192.33 1686.79,1192.33 1687.37,1192.33 1687.96,1192.33 1688.55,1192.33 1689.13,1192.33 1689.72,1192.33 1690.31,1192.33 1690.89,1192.33 1691.48,1192.33 1692.07,1192.33 1692.65,1192.33 1693.24,1192.33 1693.83,1192.33 1694.41,1192.33 1695,1192.33 1695.58,1192.33 1696.17,1192.33 1696.76,1192.33 1697.34,1192.33 1697.93,1192.33 1698.52,1192.33 1699.1,1192.33 1699.69,1192.33 1700.28,1192.33 1700.86,1192.33 1701.45,1192.33 1702.04,1192.33 1702.62,1192.33 1703.21,1192.33 1703.79,1192.33 1704.38,1192.33 1704.97,1192.33 1705.55,1192.33 1706.14,1192.33 1706.73,1192.33 1707.31,1192.33 1707.9,1192.33 1708.49,1192.33 1709.07,1192.33 1709.66,1192.33 1710.24,1192.33 1710.83,1192.33 1711.42,1192.33 1712,1192.33 1712.59,1192.33 1713.18,1192.33 1713.76,1192.33 1714.35,1192.33 1714.94,1192.33 1715.52,1192.33 1716.11,1192.33 1716.7,1192.33 1717.28,1192.33 1717.87,1192.33 1718.45,1192.33 1719.04,1192.33 1719.63,1192.33 1720.21,1192.33 1720.8,1192.33 1721.39,1192.33 1721.97,1192.33 1722.56,1192.33 1723.15,1192.33 1723.73,1192.33 1724.32,1192.33 1724.91,1192.33 1725.49,1192.33 1726.08,1192.33 1726.66,1192.33 1727.25,1192.33 1727.84,1192.33 1728.42,1192.33 1729.01,1192.33 1729.6,1192.33 1730.18,1192.33 1730.77,1192.33 1731.36,1192.33 1731.94,1192.33 1732.53,1192.33 1733.11,1192.33 1733.7,1192.33 1734.29,1192.33 1734.87,1192.33 1735.46,1192.33 1736.05,1192.33 1736.63,1192.33 1737.22,1192.33 1737.81,1192.33 1738.39,1192.33 1738.98,1192.33 1739.57,1192.33 1740.15,1192.33 1740.74,1192.33 1741.32,1192.33 1741.91,1192.33 1742.5,1192.33 1743.08,1192.33 1743.67,1192.33 1744.26,1192.33 1744.84,1192.33 1745.43,1192.33 1746.02,1192.33 1746.6,1192.33 1747.19,1192.33 1747.78,1192.33 1748.36,1192.33 1748.95,1192.33 1749.53,1192.33 1750.12,1192.33 1750.71,1192.33 1751.29,1192.33 1751.88,1192.33 1752.47,1192.33 1753.05,1192.33 1753.64,1192.33 1754.23,1192.33 1754.81,1192.33 1755.4,1192.33 1755.99,1192.33 1756.57,1192.33 1757.16,1192.33 1757.74,1192.33 1758.33,1192.33 1758.92,1192.33 1759.5,1192.33 1760.09,1192.33 1760.68,1192.33 1761.26,1192.33 1761.85,1192.33 1762.44,1192.33 1763.02,1192.33 1763.61,1192.33 1764.19,1192.33 1764.78,1192.33 1765.37,1192.33 1765.95,1192.33 1766.54,1192.33 1767.13,1192.33 1767.71,1192.33 1768.3,1192.33 1768.89,1192.33 1769.47,1192.33 1770.06,1192.33 1770.65,1192.33 1771.23,1192.33 1771.82,1192.33 1772.4,1192.33 1772.99,1192.33 1773.58,1192.33 1774.16,1192.33 1774.75,1192.33 1775.34,1192.33 1775.92,1192.33 1776.51,1192.33 1777.1,1192.33 1777.68,1192.33 1778.27,1192.33 1778.86,1192.33 1779.44,1192.33 1780.03,1192.33 1780.61,1192.33 1781.2,1192.33 1781.79,1192.33 1782.37,1192.33 1782.96,1192.33 1783.55,1192.33 1784.13,1192.33 1784.72,1192.33 1785.31,1192.33 1785.89,1192.33 1786.48,1192.33 1787.06,1192.33 1787.65,1192.33 1788.24,1192.33 1788.82,1192.33 1789.41,1192.33 1790,1192.33 1790.58,1192.33 1791.17,1192.33 1791.76,1192.33 1792.34,1192.33 1792.93,1192.33 1793.52,1192.33 1794.1,1192.33 1794.69,1192.33 1795.27,1192.33 1795.86,1192.33 1796.45,1192.33 1797.03,1192.33 1797.62,1192.33 1798.21,1192.33 1798.79,1192.33 1799.38,1192.33 1799.97,1192.33 1800.55,1192.33 1801.14,1192.33 1801.73,1192.33 1802.31,1192.33 1802.9,1192.33 1803.48,1192.33 1804.07,1192.33 1804.66,1192.33 1805.24,1192.33 1805.83,1192.33 1806.42,1192.33 1807,1192.33 1807.59,1192.33 1808.18,1192.33 1808.76,1192.33 1809.35,1192.33 1809.94,1192.33 1810.52,1192.33 1811.11,1192.33 1811.69,1192.33 1812.28,1192.33 1812.87,1192.33 1813.45,1192.33 1814.04,1192.33 1814.63,1192.33 1815.21,1192.33 1815.8,1192.33 1816.39,1192.33 1816.97,1192.33 1817.56,1192.33 1818.14,1192.33 1818.73,1192.33 1819.32,1192.33 1819.9,1192.33 1820.49,1192.33 1821.08,1192.33 1821.66,1192.33 1822.25,1192.33 1822.84,1192.33 1823.42,1192.33 1824.01,1192.33 1824.6,1192.33 1825.18,1192.33 1825.77,1192.33 1826.35,1192.33 1826.94,1192.33 1827.53,1192.33 1828.11,1192.33 1828.7,1192.33 1829.29,1192.33 1829.87,1192.33 1830.46,1192.33 1831.05,1192.33 1831.63,1192.33 1832.22,1192.33 1832.81,1192.33 1833.39,1192.33 1833.98,1192.33 1834.56,1192.33 1835.15,1192.33 1835.74,1192.33 1836.32,1192.33 1836.91,1192.33 1837.5,1192.33 1838.08,1192.33 1838.67,1192.33 1839.26,1192.33 1839.84,1192.33 1840.43,1192.33 1841.01,1192.33 1841.6,1192.33 1842.19,1192.33 1842.77,1192.33 1843.36,1192.33 1843.95,1192.33 1844.53,1192.33 1845.12,1192.33 1845.71,1192.33 1846.29,1192.33 1846.88,1192.33 1847.47,1192.33 1848.05,1192.33 1848.64,1192.33 1849.22,1192.33 1849.81,1192.33 1850.4,1192.33 1850.98,1192.33 1851.57,1192.33 1852.16,1192.33 1852.74,1192.33 1853.33,1192.33 1853.92,1192.33 1854.5,1192.33 1855.09,1192.33 1855.68,1192.33 1856.26,1192.33 1856.85,1192.33 1857.43,1192.33 1858.02,1192.33 1858.61,1192.33 1859.19,1192.33 1859.78,1192.33 1860.37,1192.33 1860.95,1192.33 1861.54,1192.33 1862.13,1192.33 1862.71,1192.33 1863.3,1192.33 1863.88,1192.33 1864.47,1192.33 1865.06,1192.33 1865.64,1192.33 1866.23,1192.33 1866.82,1192.33 1867.4,1192.33 1867.99,1192.33 1868.58,1192.33 1869.16,1192.33 1869.75,1192.33 1870.34,1192.33 1870.92,1192.33 1871.51,1192.33 1872.09,1192.33 1872.68,1192.33 1873.27,1192.33 1873.85,1192.33 1874.44,1192.33 1875.03,1192.33 1875.61,1192.33 1876.2,1192.33 1876.79,1192.33 1877.37,1192.33 1877.96,1192.33 1878.55,1192.33 1879.13,1192.33 1879.72,1192.33 1880.3,1192.33 1880.89,1192.33 1881.48,1192.33 1882.06,1192.33 1882.65,1192.33 1883.24,1192.33 1883.82,1192.33 1884.41,1192.33 1885,1192.33 1885.58,1192.33 1886.17,1192.33 1886.76,1192.33 1887.34,1192.33 1887.93,1192.33 1888.51,1192.33 1889.1,1192.33 1889.69,1192.33 1890.27,1192.33 1890.86,1192.33 1891.45,1192.33 1892.03,1192.33 1892.62,1192.33 1893.21,1192.33 1893.79,1192.33 1894.38,1192.33 1894.96,1192.33 1895.55,1192.33 1896.14,1192.33 1896.72,1192.33 1897.31,1192.33 1897.9,1192.33 1898.48,1192.33 1899.07,1192.33 1899.66,1192.33 1900.24,1192.33 1900.83,1192.33 1901.42,1192.33 1902,1192.33 1902.59,1192.33 1903.17,1192.33 1903.76,1192.33 1904.35,1192.33 1904.93,1192.33 1905.52,1192.33 1906.11,1192.33 1906.69,1192.33 1907.28,1192.33 1907.87,1192.33 1908.45,1192.33 1909.04,1192.33 1909.63,1192.33 1910.21,1192.33 1910.8,1192.33 1911.38,1192.33 1911.97,1192.33 1912.56,1192.33 1913.14,1192.33 1913.73,1192.33 1914.32,1192.33 1914.9,1192.33 1915.49,1192.33 1916.08,1192.33 1916.66,1192.33 1917.25,1192.33 1917.83,1192.33 1918.42,1192.33 1919.01,1192.33 1919.59,1192.33 1920.18,1192.33 1920.77,1192.33 1921.35,1192.33 1921.94,1192.33 1922.53,1192.33 1923.11,1192.33 1923.7,1192.33 1924.29,1192.33 1924.87,1192.33 1925.46,1192.33 1926.04,1192.33 1926.63,1192.33 1927.22,1192.33 1927.8,1192.33 1928.39,1192.33 1928.98,1192.33 1929.56,1192.33 1930.15,1192.33 1930.74,1192.33 1931.32,1192.33 1931.91,1192.33 1932.5,1192.33 1933.08,1192.33 1933.67,1192.33 1934.25,1192.33 1934.84,1192.33 1935.43,1192.33 1936.01,1192.33 1936.6,1192.33 1937.19,1192.33 1937.77,1192.33 1938.36,1192.33 1938.95,1192.33 1939.53,1192.33 1940.12,1192.33 1940.71,1192.33 1941.29,1192.33 1941.88,1192.33 1942.46,1192.33 1943.05,1192.33 1943.64,1192.33 1944.22,1192.33 1944.81,1192.33 1945.4,1192.33 1945.98,1192.33 1946.57,1192.33 1947.16,1192.33 1947.74,1192.33 1948.33,1192.33 1948.91,1192.33 1949.5,1192.33 1950.09,1192.33 1950.67,1192.33 1951.26,1192.33 1951.85,1192.33 1952.43,1192.33 1953.02,1192.33 1953.61,1192.33 1954.19,1192.33 1954.78,1192.33 1955.37,1192.33 1955.95,1192.33 1956.54,1192.33 1957.12,1192.33 1957.71,1192.33 1958.3,1192.33 1958.88,1192.33 1959.47,1192.33 1960.06,1192.33 1960.64,1192.33 1961.23,1192.33 1961.82,1192.33 1962.4,1192.33 1962.99,1192.33 1963.58,1192.33 1964.16,1192.33 1964.75,1192.33 1965.33,1192.33 1965.92,1192.33 1966.51,1192.33 1967.09,1192.33 1967.68,1192.33 1968.27,1192.33 1968.85,1192.33 1969.44,1192.33 1970.03,1192.33 1970.61,1192.33 1971.2,1192.33 1971.78,1192.33 1972.37,1192.33 1972.96,1192.33 1973.54,1192.33 1974.13,1192.33 1974.72,1192.33 1975.3,1192.33 1975.89,1192.33 1976.48,1192.33 1977.06,1192.33 1977.65,1192.33 1978.24,1192.33 1978.82,1192.33 1979.41,1192.33 1979.99,1192.33 1980.58,1192.33 1981.17,1192.33 1981.75,1192.33 1982.34,1192.33 1982.93,1192.33 1983.51,1192.33 1984.1,1192.33 1984.69,1192.33 1985.27,1192.33 1985.86,1192.33 1986.45,1192.33 1987.03,1192.33 1987.62,1192.33 1988.2,1192.33 1988.79,1192.33 1989.38,1192.33 1989.96,1192.33 1990.55,1192.33 1991.14,1192.33 1991.72,1192.33 1992.31,1192.33 1992.9,1192.33 1993.48,1192.33 1994.07,1192.33 1994.65,1192.33 1995.24,1192.33 1995.83,1192.33 1996.41,1192.33 1997,1192.33 1997.59,1192.33 1998.17,1192.33 1998.76,1192.33 1999.35,1192.33 1999.93,1192.33 2000.52,1192.33 2001.11,1192.33 2001.69,1192.33 2002.28,1192.33 2002.86,1192.33 2003.45,1192.33 2004.04,1192.33 2004.62,1192.33 2005.21,1192.33 2005.8,1192.33 2006.38,1192.33 2006.97,1192.33 2007.56,1192.33 2008.14,1192.33 2008.73,1192.33 2009.32,1192.33 2009.9,1192.33 2010.49,1192.33 2011.07,1192.33 2011.66,1192.33 2012.25,1192.33 2012.83,1192.33 2013.42,1192.33 2014.01,1192.33 2014.59,1192.33 2015.18,1192.33 2015.77,1192.33 2016.35,1192.33 2016.94,1192.33 2017.53,1192.33 2018.11,1192.33 2018.7,1192.33 2019.28,1192.33 2019.87,1192.33 2020.46,1192.33 2021.04,1192.33 2021.63,1192.33 2022.22,1192.33 2022.8,1192.33 2023.39,1192.33 2023.98,1192.33 2024.56,1192.33 2025.15,1192.33 2025.73,1192.33 2026.32,1192.33 2026.91,1192.33 2027.49,1192.33 2028.08,1192.33 2028.67,1192.33 2029.25,1192.33 2029.84,1192.33 2030.43,1192.33 2031.01,1192.33 2031.6,1192.33 2032.19,1192.33 2032.77,1192.33 2033.36,1192.33 2033.94,1192.33 2034.53,1192.33 2035.12,1192.33 2035.7,1192.33 2036.29,1192.33 2036.88,1192.33 2037.46,1192.33 2038.05,1192.33 2038.64,1192.33 2039.22,1192.33 2039.81,1192.33 2040.4,1192.33 2040.98,1192.33 2041.57,1192.33 2042.15,1192.33 2042.74,1192.33 2043.33,1192.33 2043.91,1192.33 2044.5,1192.33 2045.09,1192.33 2045.67,1192.33 2046.26,1192.33 2046.85,1192.33 2047.43,1192.33 2048.02,1192.33 2048.6,1192.33 2049.19,1192.33 2049.78,1192.33 2050.36,1192.33 2050.95,1192.33 2051.54,1192.33 2052.12,1192.33 2052.71,1192.33 2053.3,1192.33 2053.88,1192.33 2054.47,1192.33 2055.06,1192.33 2055.64,1192.33 2056.23,1192.33 2056.81,1192.33 2057.4,1192.33 2057.99,1192.33 2058.57,1192.33 2059.16,1192.33 2059.75,1192.33 2060.33,1192.33 2060.92,1192.33 2061.51,1192.33 2062.09,1192.33 2062.68,1192.33 2063.27,1192.33 2063.85,1192.33 2064.44,1192.33 2065.02,1192.33 2065.61,1192.33 2066.2,1192.33 2066.78,1192.33 2067.37,1192.33 2067.96,1192.33 2068.54,1192.33 2069.13,1192.33 2069.72,1192.33 2070.3,1192.33 2070.89,1192.33 2071.48,1192.33 2072.06,1192.33 2072.65,1192.33 2073.23,1192.33 2073.82,1192.33 2074.41,1192.33 2074.99,1192.33 2075.58,1192.33 2076.17,1192.33 2076.75,1192.33 2077.34,1192.33 2077.93,1192.33 2078.51,1192.33 2079.1,1192.33 2079.68,1192.33 2080.27,1192.33 2080.86,1192.33 2081.44,1192.33 2082.03,1192.33 2082.62,1192.33 2083.2,1192.33 2083.79,1192.33 2084.38,1192.33 2084.96,1192.33 2085.55,1192.33 2086.14,1192.33 2086.72,1192.33 2087.31,1192.33 2087.89,1192.33 2088.48,1192.33 2089.07,1192.33 2089.65,1192.33 2090.24,1192.33 2090.83,1192.33 2091.41,1192.33 2092,1192.33 2092.59,1192.33 2093.17,1192.33 2093.76,1192.33 2094.35,1192.33 2094.93,1192.33 2095.52,1192.33 2096.1,1192.33 2096.69,1192.33 2097.28,1192.33 2097.86,1192.33 2098.45,1192.33 2099.04,1192.33 2099.62,1192.33 2100.21,1192.33 2100.8,1192.33 2101.38,1192.33 2101.97,1192.33 2102.55,1192.33 2103.14,1192.33 2103.73,1192.33 2104.31,1192.33 2104.9,1192.33 2105.49,1192.33 2106.07,1192.33 2106.66,1192.33 2107.25,1192.33 2107.83,1192.33 2108.42,1192.33 2109.01,1192.33 2109.59,1192.33 2110.18,1192.33 2110.76,1192.33 2111.35,1192.33 2111.94,1192.33 2112.52,1192.33 2113.11,1192.33 2113.7,1192.33 2114.28,1192.33 2114.87,1192.33 2115.46,1192.33 2116.04,1192.33 2116.63,1192.33 2117.22,1192.33 2117.8,1192.33 2118.39,1192.33 2118.97,1192.33 2119.56,1192.33 2120.15,1192.33 2120.73,1192.33 2121.32,1192.33 2121.91,1192.33 2122.49,1192.33 2123.08,1192.33 2123.67,1192.33 2124.25,1192.33 2124.84,1192.33 2125.42,1192.33 2126.01,1192.33 2126.6,1192.33 2127.18,1192.33 2127.77,1192.33 2128.36,1192.33 2128.94,1192.33 2129.53,1192.33 2130.12,1192.33 2130.7,1192.33 2131.29,1192.33 2131.88,1192.33 2132.46,1192.33 2133.05,1192.33 2133.63,1192.33 2134.22,1192.33 2134.81,1192.33 2135.39,1192.33 2135.98,1192.33 2136.57,1192.33 2137.15,1192.33 2137.74,1192.33 2138.33,1192.33 2138.91,1192.33 2139.5,1192.33 2140.09,1192.33 2140.67,1192.33 2141.26,1192.33 2141.84,1192.33 2142.43,1192.33 2143.02,1192.33 2143.6,1192.33 2144.19,1192.33 2144.78,1192.33 2145.36,1192.33 2145.95,1192.33 2146.54,1192.33 2147.12,1192.33 2147.71,1192.33 2148.3,1192.33 2148.88,1192.33 2149.47,1192.33 2150.05,1192.33 2150.64,1192.33 2151.23,1192.33 2151.81,1192.33 2152.4,1192.33 2152.99,1192.33 2153.57,1192.33 2154.16,1192.33 2154.75,1192.33 2155.33,1192.33 2155.92,1192.33 2156.5,1192.33 2157.09,1192.33 2157.68,1192.33 2158.26,1192.33 \"/>\n<path clip-path=\"url(#clip442)\" d=\"M986.025 1191.98 L986.612 1191.98 L987.198 1191.98 L987.785 1191.98 L988.371 1191.98 L988.957 1191.98 L989.544 1191.98 L990.13 1191.98 L990.717 1191.98 L991.303 1191.98 L991.889 1191.98 L992.476 1191.98 L993.062 1191.98 L993.649 1191.98 L994.235 1191.98 L994.822 1191.98 L995.408 1191.98 L995.994 1191.98 L996.581 1191.98 L997.167 1191.98 L997.754 1191.98 L998.34 1191.98 L998.926 1191.98 L999.513 1191.98 L1000.1 1191.98 L1000.69 1191.98 L1001.27 1191.98 L1001.86 1191.98 L1002.44 1191.98 L1003.03 1191.98 L1003.62 1191.98 L1004.2 1191.98 L1004.79 1191.98 L1005.38 1191.98 L1005.96 1191.98 L1006.55 1191.98 L1007.14 1191.98 L1007.72 1191.98 L1008.31 1191.98 L1008.9 1191.98 L1009.48 1191.98 L1010.07 1191.98 L1010.65 1191.98 L1011.24 1191.98 L1011.83 1191.98 L1012.41 1191.98 L1013 1191.98 L1013.59 1191.98 L1014.17 1191.98 L1014.76 1191.98 L1015.35 1191.98 L1015.93 1191.98 L1016.52 1191.98 L1017.11 1191.98 L1017.69 1191.98 L1018.28 1191.98 L1018.86 1191.98 L1019.45 1191.98 L1020.04 1191.98 L1020.62 1191.98 L1021.21 1191.98 L1021.8 1191.98 L1022.38 1191.98 L1022.97 1191.98 L1023.56 1191.98 L1024.14 1191.98 L1024.73 1191.98 L1025.32 1191.98 L1025.9 1191.98 L1026.49 1191.98 L1027.07 1191.98 L1027.66 1191.98 L1028.25 1191.98 L1028.83 1191.98 L1029.42 1191.98 L1030.01 1191.98 L1030.59 1191.98 L1031.18 1191.98 L1031.77 1191.98 L1032.35 1191.98 L1032.94 1191.98 L1033.52 1191.98 L1034.11 1191.98 L1034.7 1191.98 L1035.28 1191.98 L1035.87 1191.98 L1036.46 1191.98 L1037.04 1191.98 L1037.63 1191.98 L1038.22 1191.98 L1038.8 1191.98 L1039.39 1191.98 L1039.98 1191.98 L1040.56 1191.98 L1041.15 1191.98 L1041.73 1191.98 L1042.32 1191.98 L1042.91 1191.98 L1043.49 1191.98 L1044.08 1191.98 L1044.67 1191.98 L1045.25 1191.98 L1045.84 1191.98 L1046.43 1191.98 L1047.01 1191.98 L1047.6 1191.98 L1048.19 1191.98 L1048.77 1191.98 L1049.36 1191.98 L1049.94 1191.98 L1050.53 1191.98 L1051.12 1191.98 L1051.7 1191.98 L1052.29 1191.98 L1052.88 1191.98 L1053.46 1191.98 L1054.05 1191.98 L1054.64 1191.98 L1055.22 1191.98 L1055.81 1191.98 L1056.39 1191.98 L1056.98 1191.98 L1057.57 1191.98 L1058.15 1191.98 L1058.74 1191.98 L1059.33 1191.98 L1059.91 1191.98 L1060.5 1191.98 L1061.09 1191.98 L1061.67 1191.98 L1062.26 1191.98 L1062.85 1191.98 L1063.43 1191.98 L1064.02 1191.98 L1064.6 1191.98 L1065.19 1191.98 L1065.78 1191.98 L1066.36 1191.98 L1066.95 1191.98 L1067.54 1191.98 L1068.12 1191.98 L1068.71 1191.98 L1069.3 1191.98 L1069.88 1191.98 L1070.47 1191.98 L1071.06 1191.98 L1071.64 1191.98 L1072.23 1191.98 L1072.81 1191.98 L1073.4 1191.98 L1073.99 1191.98 L1074.57 1191.98 L1075.16 1191.98 L1075.75 1191.98 L1076.33 1191.98 L1076.92 1191.98 L1077.51 1191.98 L1078.09 1191.98 L1078.68 1191.98 L1079.26 1191.98 L1079.85 1191.98 L1080.44 1191.98 L1081.02 1191.98 L1081.61 1191.98 L1082.2 1191.98 L1082.78 1191.98 L1083.37 1191.98 L1083.96 1191.98 L1084.54 1191.98 L1085.13 1191.98 L1085.72 1191.98 L1086.3 1191.98 L1086.89 1191.98 L1087.47 1191.98 L1088.06 1191.98 L1088.65 1191.98 L1089.23 1191.98 L1089.82 1191.98 L1090.41 1191.98 L1090.99 1191.98 L1091.58 1191.98 L1092.17 1191.98 L1092.75 1191.98 L1093.34 1191.98 L1093.93 1191.98 L1094.51 1191.98 L1095.1 1191.98 L1095.68 1191.98 L1096.27 1191.98 L1096.86 1191.98 L1097.44 1191.98 L1098.03 1191.98 L1098.62 1191.98 L1099.2 1191.98 L1099.79 1191.98 L1100.38 1191.98 L1100.96 1191.98 L1101.55 1191.98 L1102.14 1191.98 L1102.72 1191.98 L1103.31 1191.98 L1103.89 1191.98 L1104.48 1191.98 L1105.07 1191.98 L1105.65 1191.98 L1106.24 1191.98 L1106.83 1191.98 L1107.41 1191.98 L1108 1191.98 L1108.59 1191.98 L1109.17 1191.98 L1109.76 1191.98 L1110.34 1191.98 L1110.93 1191.98 L1111.52 1191.98 L1112.1 1191.98 L1112.69 1191.98 L1113.28 1191.98 L1113.86 1191.98 L1114.45 1191.98 L1115.04 1191.98 L1115.62 1191.98 L1116.21 1191.98 L1116.8 1191.98 L1117.38 1191.98 L1117.97 1191.98 L1118.55 1191.98 L1119.14 1191.98 L1119.73 1191.98 L1120.31 1191.98 L1120.9 1191.98 L1121.49 1191.98 L1122.07 1191.98 L1122.66 1191.98 L1123.25 1191.98 L1123.83 1191.98 L1124.42 1191.98 L1125.01 1191.98 L1125.59 1191.98 L1126.18 1191.98 L1126.76 1191.98 L1127.35 1191.98 L1127.94 1191.98 L1128.52 1191.98 L1129.11 1191.98 L1129.7 1191.98 L1130.28 1191.98 L1130.87 1191.98 L1131.46 1191.98 L1132.04 1191.98 L1132.63 1191.98 L1133.21 1191.98 L1133.8 1191.98 L1134.39 1191.98 L1134.97 1191.98 L1135.56 1191.98 L1136.15 1191.98 L1136.73 1191.98 L1137.32 1191.98 L1137.91 1191.98 L1138.49 1191.98 L1139.08 1191.98 L1139.67 1191.98 L1140.25 1191.98 L1140.84 1191.98 L1141.42 1191.98 L1142.01 1191.98 L1142.6 1191.98 L1143.18 1191.98 L1143.77 1191.98 L1144.36 1191.98 L1144.94 1191.98 L1145.53 1191.98 L1146.12 1191.98 L1146.7 1191.98 L1147.29 1191.98 L1147.88 1191.98 L1148.46 1191.98 L1149.05 1191.98 L1149.63 1191.98 L1150.22 1191.98 L1150.81 1191.98 L1151.39 1191.98 L1151.98 1191.98 L1152.57 1191.98 L1153.15 1191.98 L1153.74 1191.98 L1154.33 1191.98 L1154.91 1191.98 L1155.5 1191.98 L1156.09 1191.98 L1156.67 1191.98 L1157.26 1191.98 L1157.84 1191.98 L1158.43 1191.98 L1159.02 1191.98 L1159.6 1191.98 L1160.19 1191.98 L1160.78 1191.98 L1161.36 1191.98 L1161.95 1191.98 L1162.54 1191.98 L1163.12 1191.98 L1163.71 1191.98 L1164.29 1191.98 L1164.88 1191.98 L1165.47 1191.98 L1166.05 1191.98 L1166.64 1191.98 L1167.23 1191.98 L1167.81 1191.98 L1168.4 1191.98 L1168.99 1191.98 L1169.57 1191.98 L1170.16 1191.98 L1170.75 1191.98 L1171.33 1191.98 L1171.92 1191.98 L1172.5 1191.98 L1173.09 1191.98 L1173.68 1191.98 L1174.26 1191.98 L1174.85 1191.98 L1175.44 1191.98 L1176.02 1191.98 L1176.61 1191.98 L1177.2 1191.98 L1177.78 1191.98 L1178.37 1191.98 L1178.96 1191.98 L1179.54 1191.98 L1180.13 1191.98 L1180.71 1191.98 L1181.3 1191.98 L1181.89 1191.98 L1182.47 1191.98 L1183.06 1191.98 L1183.65 1191.98 L1184.23 1191.98 L1184.82 1191.98 L1185.41 1191.98 L1185.99 1191.98 L1186.58 1191.98 L1187.16 1191.98 L1187.75 1191.98 L1188.34 1191.98 L1188.92 1191.98 L1189.51 1191.98 L1190.1 1191.98 L1190.68 1191.98 L1191.27 1191.98 L1191.86 1191.98 L1192.44 1191.98 L1193.03 1191.98 L1193.62 1191.98 L1194.2 1191.98 L1194.79 1191.98 L1195.37 1191.98 L1195.96 1191.98 L1196.55 1191.98 L1197.13 1191.98 L1197.72 1191.98 L1198.31 1191.98 L1198.89 1191.98 L1199.48 1191.98 L1200.07 1191.98 L1200.65 1191.98 L1201.24 1191.98 L1201.83 1191.98 L1202.41 1191.98 L1203 1191.98 L1203.58 1191.98 L1204.17 1191.98 L1204.76 1191.98 L1205.34 1191.98 L1205.93 1191.98 L1206.52 1191.98 L1207.1 1191.98 L1207.69 1191.98 L1208.28 1191.98 L1208.86 1191.98 L1209.45 1191.98 L1210.03 1191.98 L1210.62 1191.98 L1211.21 1191.98 L1211.79 1191.98 L1212.38 1191.98 L1212.97 1191.98 L1213.55 1191.98 L1214.14 1191.98 L1214.73 1191.98 L1215.31 1191.98 L1215.9 1191.98 L1216.49 1191.98 L1217.07 1191.98 L1217.66 1191.98 L1218.24 1191.98 L1218.83 1191.98 L1219.42 1191.98 L1220 1191.98 L1220.59 1191.98 L1221.18 1191.98 L1221.76 1191.98 L1222.35 1191.98 L1222.94 1191.98 L1223.52 1191.98 L1224.11 1191.98 L1224.7 1191.98 L1225.28 1191.98 L1225.87 1191.98 L1226.45 1191.98 L1227.04 1191.98 L1227.63 1191.98 L1228.21 1191.98 L1228.8 1191.98 L1229.39 1191.98 L1229.97 1191.98 L1230.56 1191.98 L1231.15 1191.98 L1231.73 1191.98 L1232.32 1191.98 L1232.91 1191.98 L1233.49 1191.98 L1234.08 1191.98 L1234.66 1191.98 L1235.25 1191.98 L1235.84 1191.98 L1236.42 1191.98 L1237.01 1191.98 L1237.6 1191.98 L1238.18 1191.98 L1238.77 1191.98 L1239.36 1191.98 L1239.94 1191.98 L1240.53 1191.98 L1241.11 1191.98 L1241.7 1191.98 L1242.29 1191.98 L1242.87 1191.98 L1243.46 1191.98 L1244.05 1191.98 L1244.63 1191.98 L1245.22 1191.98 L1245.81 1191.98 L1246.39 1191.98 L1246.98 1191.98 L1247.57 1191.98 L1248.15 1191.98 L1248.74 1191.98 L1249.32 1191.98 L1249.91 1191.98 L1250.5 1191.98 L1251.08 1191.98 L1251.67 1191.98 L1252.26 1191.98 L1252.84 1191.98 L1253.43 1191.98 L1254.02 1191.98 L1254.6 1191.98 L1255.19 1191.98 L1255.78 1191.98 L1256.36 1191.98 L1256.95 1191.98 L1257.53 1191.98 L1258.12 1191.98 L1258.71 1191.98 L1259.29 1191.98 L1259.88 1191.98 L1260.47 1191.98 L1261.05 1191.98 L1261.64 1191.98 L1262.23 1191.98 L1262.81 1191.98 L1263.4 1191.98 L1263.98 1191.98 L1264.57 1191.98 L1265.16 1191.98 L1265.74 1191.98 L1266.33 1191.98 L1266.92 1191.98 L1267.5 1191.98 L1268.09 1191.98 L1268.68 1191.98 L1269.26 1191.98 L1269.85 1191.98 L1270.44 1191.98 L1271.02 1191.98 L1271.61 1191.98 L1272.19 1191.98 L1272.78 1191.98 L1273.37 1191.98 L1273.95 1191.98 L1274.54 1191.98 L1275.13 1191.98 L1275.71 1191.98 L1276.3 1191.98 L1276.89 1191.98 L1277.47 1191.98 L1278.06 1191.98 L1278.65 1191.98 L1279.23 1191.98 L1279.82 1191.98 L1280.4 1191.98 L1280.99 1191.98 L1281.58 1191.98 L1282.16 1191.98 L1282.75 1191.98 L1283.34 1191.98 L1283.92 1191.98 L1284.51 1191.98 L1285.1 1191.98 L1285.68 1191.98 L1286.27 1191.98 L1286.86 1191.98 L1287.44 1191.98 L1288.03 1191.98 L1288.61 1191.98 L1289.2 1191.98 L1289.79 1191.98 L1290.37 1191.98 L1290.96 1191.98 L1291.55 1191.98 L1292.13 1191.98 L1292.72 1191.98 L1293.31 1191.98 L1293.89 1191.98 L1294.48 1191.98 L1295.06 1191.98 L1295.65 1191.98 L1296.24 1191.98 L1296.82 1191.98 L1297.41 1191.98 L1298 1191.98 L1298.58 1191.98 L1299.17 1191.98 L1299.76 1191.98 L1300.34 1191.98 L1300.93 1191.98 L1301.52 1191.98 L1302.1 1191.98 L1302.69 1191.98 L1303.27 1191.98 L1303.86 1191.98 L1304.45 1191.98 L1305.03 1191.98 L1305.62 1191.98 L1306.21 1191.98 L1306.79 1191.98 L1307.38 1191.98 L1307.97 1191.98 L1308.55 1191.98 L1309.14 1191.98 L1309.73 1191.98 L1310.31 1191.98 L1310.9 1191.98 L1311.48 1191.98 L1312.07 1191.98 L1312.66 1191.98 L1313.24 1191.98 L1313.83 1191.98 L1314.42 1191.98 L1315 1191.98 L1315.59 1191.98 L1316.18 1191.98 L1316.76 1191.98 L1317.35 1191.98 L1317.93 1191.98 L1318.52 1191.98 L1319.11 1191.98 L1319.69 1191.98 L1320.28 1191.98 L1320.87 1191.98 L1321.45 1191.98 L1322.04 1191.98 L1322.63 1191.98 L1323.21 1191.98 L1323.8 1191.98 L1324.39 1191.98 L1324.97 1191.98 L1325.56 1191.98 L1326.14 1191.98 L1326.73 1191.98 L1327.32 1191.98 L1327.9 1191.98 L1328.49 1191.98 L1329.08 1191.98 L1329.66 1191.98 L1330.25 1191.98 L1330.84 1191.98 L1331.42 1191.98 L1332.01 1191.98 L1332.6 1191.98 L1333.18 1191.98 L1333.77 1191.98 L1334.35 1191.98 L1334.94 1191.98 L1335.53 1191.98 L1336.11 1191.98 L1336.7 1191.98 L1337.29 1191.98 L1337.87 1191.98 L1338.46 1191.98 L1339.05 1191.98 L1339.63 1191.98 L1340.22 1191.98 L1340.8 1191.98 L1341.39 1191.98 L1341.98 1191.98 L1342.56 1191.98 L1343.15 1191.98 L1343.74 1191.98 L1344.32 1191.98 L1344.91 1191.98 L1345.5 1191.98 L1346.08 1191.98 L1346.67 1191.98 L1347.26 1191.98 L1347.84 1191.98 L1348.43 1191.98 L1349.01 1191.98 L1349.6 1191.98 L1350.19 1191.98 L1350.77 1191.98 L1351.36 1191.98 L1351.95 1191.98 L1352.53 1191.98 L1353.12 1191.98 L1353.71 1191.98 L1354.29 1191.98 L1354.88 1191.98 L1355.47 1191.98 L1356.05 1191.98 L1356.64 1191.98 L1357.22 1191.98 L1357.81 1191.98 L1358.4 1191.98 L1358.98 1191.98 L1359.57 1191.98 L1360.16 1191.98 L1360.74 1191.98 L1361.33 1191.98 L1361.92 1191.98 L1362.5 1191.98 L1363.09 1191.98 L1363.68 1191.98 L1364.26 1191.98 L1364.85 1191.98 L1365.43 1191.98 L1366.02 1191.98 L1366.61 1191.98 L1367.19 1191.98 L1367.78 1191.98 L1368.37 1191.98 L1368.95 1191.98 L1369.54 1191.98 L1370.13 1191.98 L1370.71 1191.98 L1371.3 1191.98 L1371.88 1191.98 L1372.47 1191.98 L1373.06 1191.98 L1373.64 1191.98 L1374.23 1191.98 L1374.82 1191.98 L1375.4 1191.98 L1375.99 1191.98 L1376.58 1191.98 L1377.16 1191.98 L1377.75 1191.98 L1378.34 1191.98 L1378.92 1191.98 L1379.51 1191.98 L1380.09 1191.98 L1380.68 1191.98 L1381.27 1191.98 L1381.85 1191.98 L1382.44 1191.98 L1383.03 1191.98 L1383.61 1191.98 L1384.2 1191.98 L1384.79 1191.98 L1385.37 1191.98 L1385.96 1191.98 L1386.55 1191.98 L1387.13 1191.98 L1387.72 1191.98 L1388.3 1191.98 L1388.89 1191.98 L1389.48 1191.98 L1390.06 1191.98 L1390.65 1191.98 L1391.24 1191.98 L1391.82 1191.98 L1392.41 1191.98 L1393 1191.98 L1393.58 1191.98 L1394.17 1191.98 L1394.75 1191.98 L1395.34 1191.98 L1395.93 1191.98 L1396.51 1191.98 L1397.1 1191.98 L1397.69 1191.98 L1398.27 1191.98 L1398.86 1191.98 L1399.45 1191.98 L1400.03 1191.98 L1400.62 1191.98 L1401.21 1191.98 L1401.79 1191.98 L1402.38 1191.98 L1402.96 1191.98 L1403.55 1191.98 L1404.14 1191.98 L1404.72 1191.98 L1405.31 1191.98 L1405.9 1191.98 L1406.48 1191.98 L1407.07 1191.98 L1407.66 1191.98 L1408.24 1191.98 L1408.83 1191.98 L1409.42 1191.98 L1410 1191.98 L1410.59 1191.98 L1411.17 1191.98 L1411.76 1191.98 L1412.35 1191.98 L1412.93 1191.98 L1413.52 1191.98 L1414.11 1191.98 L1414.69 1191.98 L1415.28 1191.98 L1415.87 1191.98 L1416.45 1191.98 L1417.04 1191.98 L1417.63 1191.98 L1418.21 1191.98 L1418.8 1191.98 L1419.38 1191.98 L1419.97 1191.98 L1420.56 1191.98 L1421.14 1191.98 L1421.73 1191.98 L1422.32 1191.98 L1422.9 1191.98 L1423.49 1191.98 L1424.08 1191.98 L1424.66 1191.98 L1425.25 1191.98 L1425.83 1191.98 L1426.42 1191.98 L1427.01 1191.98 L1427.59 1191.98 L1428.18 1191.98 L1428.77 1191.98 L1429.35 1191.98 L1429.94 1191.98 L1430.53 1191.98 L1431.11 1191.98 L1431.7 1191.98 L1432.29 1191.98 L1432.87 1191.98 L1433.46 1191.98 L1434.04 1191.98 L1434.63 1191.98 L1435.22 1191.98 L1435.8 1191.98 L1436.39 1191.98 L1436.98 1191.98 L1437.56 1191.98 L1438.15 1191.98 L1438.74 1191.98 L1439.32 1191.98 L1439.91 1191.98 L1440.5 1191.98 L1441.08 1191.98 L1441.67 1191.98 L1442.25 1191.98 L1442.84 1191.98 L1443.43 1191.98 L1444.01 1191.98 L1444.6 1191.98 L1445.19 1191.98 L1445.77 1191.98 L1446.36 1191.98 L1446.95 1191.98 L1447.53 1191.98 L1448.12 1191.98 L1448.7 1191.98 L1449.29 1191.98 L1449.88 1191.98 L1450.46 1191.98 L1451.05 1191.98 L1451.64 1191.98 L1452.22 1191.98 L1452.81 1191.98 L1453.4 1191.98 L1453.98 1191.98 L1454.57 1191.98 L1455.16 1191.98 L1455.74 1191.98 L1456.33 1191.98 L1456.91 1191.98 L1457.5 1191.98 L1458.09 1191.98 L1458.67 1191.98 L1459.26 1191.98 L1459.85 1191.98 L1460.43 1191.98 L1461.02 1191.98 L1461.61 1191.98 L1462.19 1191.98 L1462.78 1191.98 L1463.37 1191.98 L1463.95 1191.98 L1464.54 1191.98 L1465.12 1191.98 L1465.71 1191.98 L1466.3 1191.98 L1466.88 1191.98 L1467.47 1191.98 L1468.06 1191.98 L1468.64 1191.98 L1469.23 1191.98 L1469.82 1191.98 L1470.4 1191.98 L1470.99 1191.98 L1471.57 1191.98 L1472.16 1191.98 L1472.75 1191.98 L1473.33 1191.98 L1473.92 1191.98 L1474.51 1191.98 L1475.09 1191.98 L1475.68 1191.98 L1476.27 1191.98 L1476.85 1191.98 L1477.44 1191.98 L1478.03 1191.98 L1478.61 1191.98 L1479.2 1191.98 L1479.78 1191.98 L1480.37 1191.98 L1480.96 1191.98 L1481.54 1191.98 L1482.13 1191.98 L1482.72 1191.98 L1483.3 1191.98 L1483.89 1191.98 L1484.48 1191.98 L1485.06 1191.98 L1485.65 1191.98 L1486.24 1191.98 L1486.82 1191.98 L1487.41 1191.98 L1487.99 1191.98 L1488.58 1191.98 L1489.17 1191.98 L1489.75 1191.98 L1490.34 1191.98 L1490.93 1191.98 L1491.51 1191.98 L1492.1 1191.98 L1492.69 1191.98 L1493.27 1191.98 L1493.86 1191.98 L1494.45 1191.98 L1495.03 1191.98 L1495.62 1191.98 L1496.2 1191.98 L1496.79 1191.98 L1497.38 1191.98 L1497.96 1191.98 L1498.55 1191.98 L1499.14 1191.98 L1499.72 1191.98 L1500.31 1191.98 L1500.9 1191.98 L1501.48 1191.98 L1502.07 1191.98 L1502.65 1191.98 L1503.24 1191.98 L1503.83 1191.98 L1504.41 1191.98 L1505 1191.98 L1505.59 1191.98 L1506.17 1191.98 L1506.76 1191.98 L1507.35 1191.98 L1507.93 1191.98 L1508.52 1191.98 L1509.11 1191.98 L1509.69 1191.98 L1510.28 1191.98 L1510.86 1191.98 L1511.45 1191.98 L1512.04 1191.98 L1512.62 1191.98 L1513.21 1191.98 L1513.8 1191.98 L1514.38 1191.98 L1514.97 1191.98 L1515.56 1191.98 L1516.14 1191.98 L1516.73 1191.98 L1517.32 1191.98 L1517.9 1191.98 L1518.49 1191.98 L1519.07 1191.98 L1519.66 1191.98 L1520.25 1191.98 L1520.83 1191.98 L1521.42 1191.98 L1522.01 1191.98 L1522.59 1191.98 L1523.18 1191.98 L1523.77 1191.98 L1524.35 1191.98 L1524.94 1191.98 L1525.52 1191.98 L1526.11 1191.98 L1526.7 1191.98 L1527.28 1191.98 L1527.87 1191.98 L1528.46 1191.98 L1529.04 1191.98 L1529.63 1191.98 L1530.22 1191.98 L1530.8 1191.98 L1531.39 1191.98 L1531.98 1191.98 L1532.56 1191.98 L1533.15 1191.98 L1533.73 1191.98 L1534.32 1191.98 L1534.91 1191.98 L1535.49 1191.98 L1536.08 1191.98 L1536.67 1191.98 L1537.25 1191.98 L1537.84 1191.98 L1538.43 1191.98 L1539.01 1191.98 L1539.6 1191.98 L1540.19 1191.98 L1540.77 1191.98 L1541.36 1191.98 L1541.94 1191.98 L1542.53 1191.98 L1543.12 1191.98 L1543.7 1191.98 L1544.29 1191.98 L1544.88 1191.98 L1545.46 1191.98 L1546.05 1191.98 L1546.64 1191.98 L1547.22 1191.98 L1547.81 1191.98 L1548.4 1191.98 L1548.98 1191.98 L1549.57 1191.98 L1550.15 1191.98 L1550.74 1191.98 L1551.33 1191.98 L1551.91 1191.98 L1552.5 1191.98 L1553.09 1191.98 L1553.67 1191.98 L1554.26 1191.98 L1554.85 1191.98 L1555.43 1191.98 L1556.02 1191.98 L1556.6 1191.98 L1557.19 1191.98 L1557.78 1191.98 L1558.36 1191.98 L1558.95 1191.98 L1559.54 1191.98 L1560.12 1191.98 L1560.71 1191.98 L1561.3 1191.98 L1561.88 1191.98 L1562.47 1191.98 L1563.06 1191.98 L1563.64 1191.98 L1564.23 1191.98 L1564.81 1191.98 L1565.4 1191.98 L1565.99 1191.98 L1566.57 1191.98 L1567.16 1191.98 L1567.75 1191.98 L1568.33 1191.98 L1568.92 1191.98 L1569.51 1191.98 L1570.09 1191.98 L1570.68 1191.98 L1571.27 1191.98 L1571.85 1191.98 L1572.44 1191.98 L1573.02 1191.98 L1573.61 1191.98 L1574.2 1191.98 L1574.78 1191.98 L1575.37 1191.98 L1575.96 1191.98 L1576.54 1191.98 L1577.13 1191.98 L1577.72 1191.98 L1578.3 1191.98 L1578.89 1191.98 L1579.47 1191.98 L1580.06 1191.98 L1580.65 1191.98 L1581.23 1191.98 L1581.82 1191.98 L1582.41 1191.98 L1582.99 1191.98 L1583.58 1191.98 L1584.17 1191.98 L1584.75 1191.98 L1585.34 1191.98 L1585.93 1191.98 L1586.51 1191.98 L1587.1 1191.98 L1587.68 1191.98 L1588.27 1191.98 L1588.86 1191.98 L1589.44 1191.98 L1590.03 1191.98 L1590.62 1191.98 L1591.2 1191.98 L1591.79 1191.98 L1592.38 1191.98 L1592.96 1191.98 L1593.55 1191.98 L1594.14 1191.98 L1594.72 1191.98 L1595.31 1191.98 L1595.89 1191.98 L1596.48 1191.98 L1597.07 1191.98 L1597.65 1191.98 L1598.24 1191.98 L1598.83 1191.98 L1599.41 1191.98 L1600 1191.98 L1600.59 1191.98 L1601.17 1191.98 L1601.76 1191.98 L1602.34 1191.98 L1602.93 1191.98 L1603.52 1191.98 L1604.1 1191.98 L1604.69 1191.98 L1605.28 1191.98 L1605.86 1191.98 L1606.45 1191.98 L1607.04 1191.98 L1607.62 1191.98 L1608.21 1191.98 L1608.8 1191.98 L1609.38 1191.98 L1609.97 1191.98 L1610.55 1191.98 L1611.14 1191.98 L1611.73 1191.98 L1612.31 1191.98 L1612.9 1191.98 L1613.49 1191.98 L1614.07 1191.98 L1614.66 1191.98 L1615.25 1191.98 L1615.83 1191.98 L1616.42 1191.98 L1617.01 1191.98 L1617.59 1191.98 L1618.18 1191.98 L1618.76 1191.98 L1619.35 1191.98 L1619.94 1191.98 L1620.52 1191.98 L1621.11 1191.98 L1621.7 1191.98 L1622.28 1191.98 L1622.87 1191.98 L1623.46 1191.98 L1624.04 1191.98 L1624.63 1191.98 L1625.22 1191.98 L1625.8 1191.98 L1626.39 1191.98 L1626.97 1191.98 L1627.56 1191.98 L1628.15 1191.98 L1628.73 1191.98 L1629.32 1191.98 L1629.91 1191.98 L1630.49 1191.98 L1631.08 1191.98 L1631.67 1191.98 L1632.25 1191.98 L1632.84 1191.98 L1633.42 1191.98 L1634.01 1191.98 L1634.6 1191.98 L1635.18 1191.98 L1635.77 1191.98 L1636.36 1191.98 L1636.94 1191.98 L1637.53 1191.98 L1638.12 1191.98 L1638.7 1191.98 L1639.29 1191.98 L1639.88 1191.98 L1640.46 1191.98 L1641.05 1191.98 L1641.63 1191.98 L1642.22 1191.98 L1642.81 1191.98 L1643.39 1191.98 L1643.98 1191.98 L1644.57 1191.98 L1645.15 1191.98 L1645.74 1191.98 L1646.33 1191.98 L1646.91 1191.98 L1647.5 1191.98 L1648.09 1191.98 L1648.67 1191.98 L1649.26 1191.98 L1649.84 1191.98 L1650.43 1191.98 L1651.02 1191.98 L1651.6 1191.98 L1652.19 1191.98 L1652.78 1191.98 L1653.36 1191.98 L1653.95 1191.98 L1654.54 1191.98 L1655.12 1191.98 L1655.71 1191.98 L1656.29 1191.98 L1656.88 1191.98 L1657.47 1191.98 L1658.05 1191.98 L1658.64 1191.98 L1659.23 1191.98 L1659.81 1191.98 L1660.4 1191.98 L1660.99 1191.98 L1661.57 1191.98 L1662.16 1191.98 L1662.75 1191.98 L1663.33 1191.98 L1663.92 1191.98 L1664.5 1191.98 L1665.09 1191.98 L1665.68 1191.98 L1666.26 1191.98 L1666.85 1191.98 L1667.44 1191.98 L1668.02 1191.98 L1668.61 1191.98 L1669.2 1191.98 L1669.78 1191.98 L1670.37 1191.98 L1670.96 1191.98 L1671.54 1191.98 L1672.13 1191.98 L1672.71 1191.98 L1673.3 1191.98 L1673.89 1191.98 L1674.47 1191.98 L1675.06 1191.98 L1675.65 1191.98 L1676.23 1191.98 L1676.82 1191.98 L1677.41 1191.98 L1677.99 1191.98 L1678.58 1191.98 L1679.17 1191.98 L1679.75 1191.98 L1680.34 1191.98 L1680.92 1191.98 L1681.51 1191.98 L1682.1 1191.98 L1682.68 1191.98 L1683.27 1191.98 L1683.86 1191.98 L1684.44 1191.98 L1685.03 1191.98 L1685.62 1191.98 L1686.2 1191.98 L1686.79 1191.98 L1687.37 1191.98 L1687.96 1191.98 L1688.55 1191.98 L1689.13 1191.98 L1689.72 1191.98 L1690.31 1191.98 L1690.89 1191.98 L1691.48 1191.98 L1692.07 1191.98 L1692.65 1191.98 L1693.24 1191.98 L1693.83 1191.98 L1694.41 1191.98 L1695 1191.98 L1695.58 1191.98 L1696.17 1191.98 L1696.76 1191.98 L1697.34 1191.98 L1697.93 1191.98 L1698.52 1191.98 L1699.1 1191.98 L1699.69 1191.98 L1700.28 1191.98 L1700.86 1191.98 L1701.45 1191.98 L1702.04 1191.98 L1702.62 1191.98 L1703.21 1191.98 L1703.79 1191.98 L1704.38 1191.98 L1704.97 1191.98 L1705.55 1191.98 L1706.14 1191.98 L1706.73 1191.98 L1707.31 1191.98 L1707.9 1191.98 L1708.49 1191.98 L1709.07 1191.98 L1709.66 1191.98 L1710.24 1191.98 L1710.83 1191.98 L1711.42 1191.98 L1712 1191.98 L1712.59 1191.98 L1713.18 1191.98 L1713.76 1191.98 L1714.35 1191.98 L1714.94 1191.98 L1715.52 1191.98 L1716.11 1191.98 L1716.7 1191.98 L1717.28 1191.98 L1717.87 1191.98 L1718.45 1191.98 L1719.04 1191.98 L1719.63 1191.98 L1720.21 1191.98 L1720.8 1191.98 L1721.39 1191.98 L1721.97 1191.98 L1722.56 1191.98 L1723.15 1191.98 L1723.73 1191.98 L1724.32 1191.98 L1724.91 1191.98 L1725.49 1191.98 L1726.08 1191.98 L1726.66 1191.98 L1727.25 1191.98 L1727.84 1191.98 L1728.42 1191.98 L1729.01 1191.98 L1729.6 1191.98 L1730.18 1191.98 L1730.77 1191.98 L1731.36 1191.98 L1731.94 1191.98 L1732.53 1191.98 L1733.11 1191.98 L1733.7 1191.98 L1734.29 1191.98 L1734.87 1191.98 L1735.46 1191.98 L1736.05 1191.98 L1736.63 1191.98 L1737.22 1191.98 L1737.81 1191.98 L1738.39 1191.98 L1738.98 1191.98 L1739.57 1191.98 L1740.15 1191.98 L1740.74 1191.98 L1741.32 1191.98 L1741.91 1191.98 L1742.5 1191.98 L1743.08 1191.98 L1743.67 1191.98 L1744.26 1191.98 L1744.84 1191.98 L1745.43 1191.98 L1746.02 1191.98 L1746.6 1191.98 L1747.19 1191.98 L1747.78 1191.98 L1748.36 1191.98 L1748.95 1191.98 L1749.53 1191.98 L1750.12 1191.98 L1750.71 1191.98 L1751.29 1191.98 L1751.88 1191.98 L1752.47 1191.98 L1753.05 1191.98 L1753.64 1191.98 L1754.23 1191.98 L1754.81 1191.98 L1755.4 1191.98 L1755.99 1191.98 L1756.57 1191.98 L1757.16 1191.98 L1757.74 1191.98 L1758.33 1191.98 L1758.92 1191.98 L1759.5 1191.98 L1760.09 1191.98 L1760.68 1191.98 L1761.26 1191.98 L1761.85 1191.98 L1762.44 1191.98 L1763.02 1191.98 L1763.61 1191.98 L1764.19 1191.98 L1764.78 1191.98 L1765.37 1191.98 L1765.95 1191.98 L1766.54 1191.98 L1767.13 1191.98 L1767.71 1191.98 L1768.3 1191.98 L1768.89 1191.98 L1769.47 1191.98 L1770.06 1191.98 L1770.65 1191.98 L1771.23 1191.98 L1771.82 1191.98 L1772.4 1191.98 L1772.99 1191.98 L1773.58 1191.98 L1774.16 1191.98 L1774.75 1191.98 L1775.34 1191.98 L1775.92 1191.98 L1776.51 1191.98 L1777.1 1191.98 L1777.68 1191.98 L1778.27 1191.98 L1778.86 1191.98 L1779.44 1191.98 L1780.03 1191.98 L1780.61 1191.98 L1781.2 1191.98 L1781.79 1191.98 L1782.37 1191.98 L1782.96 1191.98 L1783.55 1191.98 L1784.13 1191.98 L1784.72 1191.98 L1785.31 1191.98 L1785.89 1191.98 L1786.48 1191.98 L1787.06 1191.98 L1787.65 1191.98 L1788.24 1191.98 L1788.82 1191.98 L1789.41 1191.98 L1790 1191.98 L1790.58 1191.98 L1791.17 1191.98 L1791.76 1191.98 L1792.34 1191.98 L1792.93 1191.98 L1793.52 1191.98 L1794.1 1191.98 L1794.69 1191.98 L1795.27 1191.98 L1795.86 1191.98 L1796.45 1191.98 L1797.03 1191.98 L1797.62 1191.98 L1798.21 1191.98 L1798.79 1191.98 L1799.38 1191.98 L1799.97 1191.98 L1800.55 1191.98 L1801.14 1191.98 L1801.73 1191.98 L1802.31 1191.98 L1802.9 1191.98 L1803.48 1191.98 L1804.07 1191.98 L1804.66 1191.98 L1805.24 1191.98 L1805.83 1191.98 L1806.42 1191.98 L1807 1191.98 L1807.59 1191.98 L1808.18 1191.98 L1808.76 1191.98 L1809.35 1191.98 L1809.94 1191.98 L1810.52 1191.98 L1811.11 1191.98 L1811.69 1191.98 L1812.28 1191.98 L1812.87 1191.98 L1813.45 1191.98 L1814.04 1191.98 L1814.63 1191.98 L1815.21 1191.98 L1815.8 1191.98 L1816.39 1191.98 L1816.97 1191.98 L1817.56 1191.98 L1818.14 1191.98 L1818.73 1191.98 L1819.32 1191.98 L1819.9 1191.98 L1820.49 1191.98 L1821.08 1191.98 L1821.66 1191.98 L1822.25 1191.98 L1822.84 1191.98 L1823.42 1191.98 L1824.01 1191.98 L1824.6 1191.98 L1825.18 1191.98 L1825.77 1191.98 L1826.35 1191.98 L1826.94 1191.98 L1827.53 1191.98 L1828.11 1191.98 L1828.7 1191.98 L1829.29 1191.98 L1829.87 1191.98 L1830.46 1191.98 L1831.05 1191.98 L1831.63 1191.98 L1832.22 1191.98 L1832.81 1191.98 L1833.39 1191.98 L1833.98 1191.98 L1834.56 1191.98 L1835.15 1191.98 L1835.74 1191.98 L1836.32 1191.98 L1836.91 1191.98 L1837.5 1191.98 L1838.08 1191.98 L1838.67 1191.98 L1839.26 1191.98 L1839.84 1191.98 L1840.43 1191.98 L1841.01 1191.98 L1841.6 1191.98 L1842.19 1191.98 L1842.77 1191.98 L1843.36 1191.98 L1843.95 1191.98 L1844.53 1191.98 L1845.12 1191.98 L1845.71 1191.98 L1846.29 1191.98 L1846.88 1191.98 L1847.47 1191.98 L1848.05 1191.98 L1848.64 1191.98 L1849.22 1191.98 L1849.81 1191.98 L1850.4 1191.98 L1850.98 1191.98 L1851.57 1191.98 L1852.16 1191.98 L1852.74 1191.98 L1853.33 1191.98 L1853.92 1191.98 L1854.5 1191.98 L1855.09 1191.98 L1855.68 1191.98 L1856.26 1191.98 L1856.85 1191.98 L1857.43 1191.98 L1858.02 1191.98 L1858.61 1191.98 L1859.19 1191.98 L1859.78 1191.98 L1860.37 1191.98 L1860.95 1191.98 L1861.54 1191.98 L1862.13 1191.98 L1862.71 1191.98 L1863.3 1191.98 L1863.88 1191.98 L1864.47 1191.98 L1865.06 1191.98 L1865.64 1191.98 L1866.23 1191.98 L1866.82 1191.98 L1867.4 1191.98 L1867.99 1191.98 L1868.58 1191.98 L1869.16 1191.98 L1869.75 1191.98 L1870.34 1191.98 L1870.92 1191.98 L1871.51 1191.98 L1872.09 1191.98 L1872.68 1191.98 L1873.27 1191.98 L1873.85 1191.98 L1874.44 1191.98 L1875.03 1191.98 L1875.61 1191.98 L1876.2 1191.98 L1876.79 1191.98 L1877.37 1191.98 L1877.96 1191.98 L1878.55 1191.98 L1879.13 1191.98 L1879.72 1191.98 L1880.3 1191.98 L1880.89 1191.98 L1881.48 1191.98 L1882.06 1191.98 L1882.65 1191.98 L1883.24 1191.98 L1883.82 1191.98 L1884.41 1191.98 L1885 1191.98 L1885.58 1191.98 L1886.17 1191.98 L1886.76 1191.98 L1887.34 1191.98 L1887.93 1191.98 L1888.51 1191.98 L1889.1 1191.98 L1889.69 1191.98 L1890.27 1191.98 L1890.86 1191.98 L1891.45 1191.98 L1892.03 1191.98 L1892.62 1191.98 L1893.21 1191.98 L1893.79 1191.98 L1894.38 1191.98 L1894.96 1191.98 L1895.55 1191.98 L1896.14 1191.98 L1896.72 1191.98 L1897.31 1191.98 L1897.9 1191.98 L1898.48 1191.98 L1899.07 1191.98 L1899.66 1191.98 L1900.24 1191.98 L1900.83 1191.98 L1901.42 1191.98 L1902 1191.98 L1902.59 1191.98 L1903.17 1191.98 L1903.76 1191.98 L1904.35 1191.98 L1904.93 1191.98 L1905.52 1191.98 L1906.11 1191.98 L1906.69 1191.98 L1907.28 1191.98 L1907.87 1191.98 L1908.45 1191.98 L1909.04 1191.98 L1909.63 1191.98 L1910.21 1191.98 L1910.8 1191.98 L1911.38 1191.98 L1911.97 1191.98 L1912.56 1191.98 L1913.14 1191.98 L1913.73 1191.98 L1914.32 1191.98 L1914.9 1191.98 L1915.49 1191.98 L1916.08 1191.98 L1916.66 1191.98 L1917.25 1191.98 L1917.83 1191.98 L1918.42 1191.98 L1919.01 1191.98 L1919.59 1191.98 L1920.18 1191.98 L1920.77 1191.98 L1921.35 1191.98 L1921.94 1191.98 L1922.53 1191.98 L1923.11 1191.98 L1923.7 1191.98 L1924.29 1191.98 L1924.87 1191.98 L1925.46 1191.98 L1926.04 1191.98 L1926.63 1191.98 L1927.22 1191.98 L1927.8 1191.98 L1928.39 1191.98 L1928.98 1191.98 L1929.56 1191.98 L1930.15 1191.98 L1930.74 1191.98 L1931.32 1191.98 L1931.91 1191.98 L1932.5 1191.98 L1933.08 1191.98 L1933.67 1191.98 L1934.25 1191.98 L1934.84 1191.98 L1935.43 1191.98 L1936.01 1191.98 L1936.6 1191.98 L1937.19 1191.98 L1937.77 1191.98 L1938.36 1191.98 L1938.95 1191.98 L1939.53 1191.98 L1940.12 1191.98 L1940.71 1191.98 L1941.29 1191.98 L1941.88 1191.98 L1942.46 1191.98 L1943.05 1191.98 L1943.64 1191.98 L1944.22 1191.98 L1944.81 1191.98 L1945.4 1191.98 L1945.98 1191.98 L1946.57 1191.98 L1947.16 1191.98 L1947.74 1191.98 L1948.33 1191.98 L1948.91 1191.98 L1949.5 1191.98 L1950.09 1191.98 L1950.67 1191.98 L1951.26 1191.98 L1951.85 1191.98 L1952.43 1191.98 L1953.02 1191.98 L1953.61 1191.98 L1954.19 1191.98 L1954.78 1191.98 L1955.37 1191.98 L1955.95 1191.98 L1956.54 1191.98 L1957.12 1191.98 L1957.71 1191.98 L1958.3 1191.98 L1958.88 1191.98 L1959.47 1191.98 L1960.06 1191.98 L1960.64 1191.98 L1961.23 1191.98 L1961.82 1191.98 L1962.4 1191.98 L1962.99 1191.98 L1963.58 1191.98 L1964.16 1191.98 L1964.75 1191.98 L1965.33 1191.98 L1965.92 1191.98 L1966.51 1191.98 L1967.09 1191.98 L1967.68 1191.98 L1968.27 1191.98 L1968.85 1191.98 L1969.44 1191.98 L1970.03 1191.98 L1970.61 1191.98 L1971.2 1191.98 L1971.78 1191.98 L1972.37 1191.98 L1972.96 1191.98 L1973.54 1191.98 L1974.13 1191.98 L1974.72 1191.98 L1975.3 1191.98 L1975.89 1191.98 L1976.48 1191.98 L1977.06 1191.98 L1977.65 1191.98 L1978.24 1191.98 L1978.82 1191.98 L1979.41 1191.98 L1979.99 1191.98 L1980.58 1191.98 L1981.17 1191.98 L1981.75 1191.98 L1982.34 1191.98 L1982.93 1191.98 L1983.51 1191.98 L1984.1 1191.98 L1984.69 1191.98 L1985.27 1191.98 L1985.86 1191.98 L1986.45 1191.98 L1987.03 1191.98 L1987.62 1191.98 L1988.2 1191.98 L1988.79 1191.98 L1989.38 1191.98 L1989.96 1191.98 L1990.55 1191.98 L1991.14 1191.98 L1991.72 1191.98 L1992.31 1191.98 L1992.9 1191.98 L1993.48 1191.98 L1994.07 1191.98 L1994.65 1191.98 L1995.24 1191.98 L1995.83 1191.98 L1996.41 1191.98 L1997 1191.98 L1997.59 1191.98 L1998.17 1191.98 L1998.76 1191.98 L1999.35 1191.98 L1999.93 1191.98 L2000.52 1191.98 L2001.11 1191.98 L2001.69 1191.98 L2002.28 1191.98 L2002.86 1191.98 L2003.45 1191.98 L2004.04 1191.98 L2004.62 1191.98 L2005.21 1191.98 L2005.8 1191.98 L2006.38 1191.98 L2006.97 1191.98 L2007.56 1191.98 L2008.14 1191.98 L2008.73 1191.98 L2009.32 1191.98 L2009.9 1191.98 L2010.49 1191.98 L2011.07 1191.98 L2011.66 1191.98 L2012.25 1191.98 L2012.83 1191.98 L2013.42 1191.98 L2014.01 1191.98 L2014.59 1191.98 L2015.18 1191.98 L2015.77 1191.98 L2016.35 1191.98 L2016.94 1191.98 L2017.53 1191.98 L2018.11 1191.98 L2018.7 1191.98 L2019.28 1191.98 L2019.87 1191.98 L2020.46 1191.98 L2021.04 1191.98 L2021.63 1191.98 L2022.22 1191.98 L2022.8 1191.98 L2023.39 1191.98 L2023.98 1191.98 L2024.56 1191.98 L2025.15 1191.98 L2025.73 1191.98 L2026.32 1191.98 L2026.91 1191.98 L2027.49 1191.98 L2028.08 1191.98 L2028.67 1191.98 L2029.25 1191.98 L2029.84 1191.98 L2030.43 1191.98 L2031.01 1191.98 L2031.6 1191.98 L2032.19 1191.98 L2032.77 1191.98 L2033.36 1191.98 L2033.94 1191.98 L2034.53 1191.98 L2035.12 1191.98 L2035.7 1191.98 L2036.29 1191.98 L2036.88 1191.98 L2037.46 1191.98 L2038.05 1191.98 L2038.64 1191.98 L2039.22 1191.98 L2039.81 1191.98 L2040.4 1191.98 L2040.98 1191.98 L2041.57 1191.98 L2042.15 1191.98 L2042.74 1191.98 L2043.33 1191.98 L2043.91 1191.98 L2044.5 1191.98 L2045.09 1191.98 L2045.67 1191.98 L2046.26 1191.98 L2046.85 1191.98 L2047.43 1191.98 L2048.02 1191.98 L2048.6 1191.98 L2049.19 1191.98 L2049.78 1191.98 L2050.36 1191.98 L2050.95 1191.98 L2051.54 1191.98 L2052.12 1191.98 L2052.71 1191.98 L2053.3 1191.98 L2053.88 1191.98 L2054.47 1191.98 L2055.06 1191.98 L2055.64 1191.98 L2056.23 1191.98 L2056.81 1191.98 L2057.4 1191.98 L2057.99 1191.98 L2058.57 1191.98 L2059.16 1191.98 L2059.75 1191.98 L2060.33 1191.98 L2060.92 1191.98 L2061.51 1191.98 L2062.09 1191.98 L2062.68 1191.98 L2063.27 1191.98 L2063.85 1191.98 L2064.44 1191.98 L2065.02 1191.98 L2065.61 1191.98 L2066.2 1191.98 L2066.78 1191.98 L2067.37 1191.98 L2067.96 1191.98 L2068.54 1191.98 L2069.13 1191.98 L2069.72 1191.98 L2070.3 1191.98 L2070.89 1191.98 L2071.48 1191.98 L2072.06 1191.98 L2072.65 1191.98 L2073.23 1191.98 L2073.82 1191.98 L2074.41 1191.98 L2074.99 1191.98 L2075.58 1191.98 L2076.17 1191.98 L2076.75 1191.98 L2077.34 1191.98 L2077.93 1191.98 L2078.51 1191.98 L2079.1 1191.98 L2079.68 1191.98 L2080.27 1191.98 L2080.86 1191.98 L2081.44 1191.98 L2082.03 1191.98 L2082.62 1191.98 L2083.2 1191.98 L2083.79 1191.98 L2084.38 1191.98 L2084.96 1191.98 L2085.55 1191.98 L2086.14 1191.98 L2086.72 1191.98 L2087.31 1191.98 L2087.89 1191.98 L2088.48 1191.98 L2089.07 1191.98 L2089.65 1191.98 L2090.24 1191.98 L2090.83 1191.98 L2091.41 1191.98 L2092 1191.98 L2092.59 1191.98 L2093.17 1191.98 L2093.76 1191.98 L2094.35 1191.98 L2094.93 1191.98 L2095.52 1191.98 L2096.1 1191.98 L2096.69 1191.98 L2097.28 1191.98 L2097.86 1191.98 L2098.45 1191.98 L2099.04 1191.98 L2099.62 1191.98 L2100.21 1191.98 L2100.8 1191.98 L2101.38 1191.98 L2101.97 1191.98 L2102.55 1191.98 L2103.14 1191.98 L2103.73 1191.98 L2104.31 1191.98 L2104.9 1191.98 L2105.49 1191.98 L2106.07 1191.98 L2106.66 1191.98 L2107.25 1191.98 L2107.83 1191.98 L2108.42 1191.98 L2109.01 1191.98 L2109.59 1191.98 L2110.18 1191.98 L2110.76 1191.98 L2111.35 1191.98 L2111.94 1191.98 L2112.52 1191.98 L2113.11 1191.98 L2113.7 1191.98 L2114.28 1191.98 L2114.87 1191.98 L2115.46 1191.98 L2116.04 1191.98 L2116.63 1191.98 L2117.22 1191.98 L2117.8 1191.98 L2118.39 1191.98 L2118.97 1191.98 L2119.56 1191.98 L2120.15 1191.98 L2120.73 1191.98 L2121.32 1191.98 L2121.91 1191.98 L2122.49 1191.98 L2123.08 1191.98 L2123.67 1191.98 L2124.25 1191.98 L2124.84 1191.98 L2125.42 1191.98 L2126.01 1191.98 L2126.6 1191.98 L2127.18 1191.98 L2127.77 1191.98 L2128.36 1191.98 L2128.94 1191.98 L2129.53 1191.98 L2130.12 1191.98 L2130.7 1191.98 L2131.29 1191.98 L2131.88 1191.98 L2132.46 1191.98 L2133.05 1191.98 L2133.63 1191.98 L2134.22 1191.98 L2134.81 1191.98 L2135.39 1191.98 L2135.98 1191.98 L2136.57 1191.98 L2137.15 1191.98 L2137.74 1191.98 L2138.33 1191.98 L2138.91 1191.98 L2139.5 1191.98 L2140.09 1191.98 L2140.67 1191.98 L2141.26 1191.98 L2141.84 1191.98 L2142.43 1191.98 L2143.02 1191.98 L2143.6 1191.98 L2144.19 1191.98 L2144.78 1191.98 L2145.36 1191.98 L2145.95 1191.98 L2146.54 1191.98 L2147.12 1191.98 L2147.71 1191.98 L2148.3 1191.98 L2148.88 1191.98 L2149.47 1191.98 L2150.05 1191.98 L2150.64 1191.98 L2151.23 1191.98 L2151.81 1191.98 L2152.4 1191.98 L2152.99 1191.98 L2153.57 1191.98 L2154.16 1191.98 L2154.75 1191.98 L2155.33 1191.98 L2155.92 1191.98 L2156.5 1191.98 L2157.09 1191.98 L2157.68 1191.98 L2158.26 1191.98 L2158.26 1191.79 L2157.68 1191.79 L2157.09 1191.79 L2156.5 1191.79 L2155.92 1191.79 L2155.33 1191.79 L2154.75 1191.79 L2154.16 1191.79 L2153.57 1191.79 L2152.99 1191.79 L2152.4 1191.79 L2151.81 1191.79 L2151.23 1191.79 L2150.64 1191.79 L2150.05 1191.79 L2149.47 1191.79 L2148.88 1191.79 L2148.3 1191.79 L2147.71 1191.79 L2147.12 1191.79 L2146.54 1191.79 L2145.95 1191.79 L2145.36 1191.79 L2144.78 1191.79 L2144.19 1191.79 L2143.6 1191.79 L2143.02 1191.79 L2142.43 1191.79 L2141.84 1191.79 L2141.26 1191.79 L2140.67 1191.79 L2140.09 1191.79 L2139.5 1191.79 L2138.91 1191.79 L2138.33 1191.79 L2137.74 1191.79 L2137.15 1191.79 L2136.57 1191.79 L2135.98 1191.79 L2135.39 1191.79 L2134.81 1191.79 L2134.22 1191.79 L2133.63 1191.79 L2133.05 1191.79 L2132.46 1191.79 L2131.88 1191.79 L2131.29 1191.79 L2130.7 1191.79 L2130.12 1191.79 L2129.53 1191.79 L2128.94 1191.79 L2128.36 1191.79 L2127.77 1191.79 L2127.18 1191.79 L2126.6 1191.79 L2126.01 1191.79 L2125.42 1191.79 L2124.84 1191.79 L2124.25 1191.79 L2123.67 1191.79 L2123.08 1191.79 L2122.49 1191.79 L2121.91 1191.79 L2121.32 1191.79 L2120.73 1191.79 L2120.15 1191.79 L2119.56 1191.79 L2118.97 1191.79 L2118.39 1191.79 L2117.8 1191.79 L2117.22 1191.79 L2116.63 1191.79 L2116.04 1191.79 L2115.46 1191.79 L2114.87 1191.79 L2114.28 1191.79 L2113.7 1191.79 L2113.11 1191.79 L2112.52 1191.79 L2111.94 1191.79 L2111.35 1191.79 L2110.76 1191.79 L2110.18 1191.79 L2109.59 1191.79 L2109.01 1191.79 L2108.42 1191.79 L2107.83 1191.79 L2107.25 1191.79 L2106.66 1191.79 L2106.07 1191.79 L2105.49 1191.79 L2104.9 1191.79 L2104.31 1191.79 L2103.73 1191.79 L2103.14 1191.79 L2102.55 1191.79 L2101.97 1191.79 L2101.38 1191.79 L2100.8 1191.79 L2100.21 1191.79 L2099.62 1191.79 L2099.04 1191.79 L2098.45 1191.79 L2097.86 1191.79 L2097.28 1191.79 L2096.69 1191.79 L2096.1 1191.79 L2095.52 1191.79 L2094.93 1191.79 L2094.35 1191.79 L2093.76 1191.79 L2093.17 1191.79 L2092.59 1191.79 L2092 1191.79 L2091.41 1191.79 L2090.83 1191.79 L2090.24 1191.79 L2089.65 1191.79 L2089.07 1191.79 L2088.48 1191.79 L2087.89 1191.79 L2087.31 1191.79 L2086.72 1191.79 L2086.14 1191.79 L2085.55 1191.79 L2084.96 1191.79 L2084.38 1191.79 L2083.79 1191.79 L2083.2 1191.79 L2082.62 1191.79 L2082.03 1191.79 L2081.44 1191.79 L2080.86 1191.79 L2080.27 1191.79 L2079.68 1191.79 L2079.1 1191.79 L2078.51 1191.79 L2077.93 1191.79 L2077.34 1191.79 L2076.75 1191.79 L2076.17 1191.79 L2075.58 1191.79 L2074.99 1191.79 L2074.41 1191.79 L2073.82 1191.79 L2073.23 1191.79 L2072.65 1191.79 L2072.06 1191.79 L2071.48 1191.79 L2070.89 1191.79 L2070.3 1191.79 L2069.72 1191.79 L2069.13 1191.79 L2068.54 1191.79 L2067.96 1191.79 L2067.37 1191.79 L2066.78 1191.79 L2066.2 1191.79 L2065.61 1191.79 L2065.02 1191.79 L2064.44 1191.79 L2063.85 1191.79 L2063.27 1191.79 L2062.68 1191.79 L2062.09 1191.79 L2061.51 1191.79 L2060.92 1191.79 L2060.33 1191.79 L2059.75 1191.79 L2059.16 1191.79 L2058.57 1191.79 L2057.99 1191.79 L2057.4 1191.79 L2056.81 1191.79 L2056.23 1191.79 L2055.64 1191.79 L2055.06 1191.79 L2054.47 1191.79 L2053.88 1191.79 L2053.3 1191.79 L2052.71 1191.79 L2052.12 1191.79 L2051.54 1191.79 L2050.95 1191.79 L2050.36 1191.79 L2049.78 1191.79 L2049.19 1191.79 L2048.6 1191.79 L2048.02 1191.79 L2047.43 1191.79 L2046.85 1191.79 L2046.26 1191.79 L2045.67 1191.79 L2045.09 1191.79 L2044.5 1191.79 L2043.91 1191.79 L2043.33 1191.79 L2042.74 1191.79 L2042.15 1191.79 L2041.57 1191.79 L2040.98 1191.79 L2040.4 1191.79 L2039.81 1191.79 L2039.22 1191.79 L2038.64 1191.79 L2038.05 1191.79 L2037.46 1191.79 L2036.88 1191.79 L2036.29 1191.79 L2035.7 1191.79 L2035.12 1191.79 L2034.53 1191.79 L2033.94 1191.79 L2033.36 1191.79 L2032.77 1191.79 L2032.19 1191.79 L2031.6 1191.79 L2031.01 1191.79 L2030.43 1191.79 L2029.84 1191.79 L2029.25 1191.79 L2028.67 1191.79 L2028.08 1191.79 L2027.49 1191.79 L2026.91 1191.79 L2026.32 1191.79 L2025.73 1191.79 L2025.15 1191.79 L2024.56 1191.79 L2023.98 1191.79 L2023.39 1191.79 L2022.8 1191.79 L2022.22 1191.79 L2021.63 1191.79 L2021.04 1191.79 L2020.46 1191.79 L2019.87 1191.79 L2019.28 1191.79 L2018.7 1191.79 L2018.11 1191.79 L2017.53 1191.79 L2016.94 1191.79 L2016.35 1191.79 L2015.77 1191.79 L2015.18 1191.79 L2014.59 1191.79 L2014.01 1191.79 L2013.42 1191.79 L2012.83 1191.79 L2012.25 1191.79 L2011.66 1191.79 L2011.07 1191.79 L2010.49 1191.79 L2009.9 1191.79 L2009.32 1191.79 L2008.73 1191.79 L2008.14 1191.79 L2007.56 1191.79 L2006.97 1191.79 L2006.38 1191.79 L2005.8 1191.79 L2005.21 1191.79 L2004.62 1191.79 L2004.04 1191.79 L2003.45 1191.79 L2002.86 1191.79 L2002.28 1191.79 L2001.69 1191.79 L2001.11 1191.79 L2000.52 1191.79 L1999.93 1191.79 L1999.35 1191.79 L1998.76 1191.79 L1998.17 1191.79 L1997.59 1191.79 L1997 1191.79 L1996.41 1191.79 L1995.83 1191.79 L1995.24 1191.79 L1994.65 1191.79 L1994.07 1191.79 L1993.48 1191.79 L1992.9 1191.79 L1992.31 1191.79 L1991.72 1191.79 L1991.14 1191.79 L1990.55 1191.79 L1989.96 1191.79 L1989.38 1191.79 L1988.79 1191.79 L1988.2 1191.79 L1987.62 1191.79 L1987.03 1191.79 L1986.45 1191.79 L1985.86 1191.79 L1985.27 1191.79 L1984.69 1191.79 L1984.1 1191.79 L1983.51 1191.79 L1982.93 1191.79 L1982.34 1191.79 L1981.75 1191.79 L1981.17 1191.79 L1980.58 1191.79 L1979.99 1191.79 L1979.41 1191.79 L1978.82 1191.79 L1978.24 1191.79 L1977.65 1191.79 L1977.06 1191.79 L1976.48 1191.79 L1975.89 1191.79 L1975.3 1191.79 L1974.72 1191.79 L1974.13 1191.79 L1973.54 1191.79 L1972.96 1191.79 L1972.37 1191.79 L1971.78 1191.79 L1971.2 1191.79 L1970.61 1191.79 L1970.03 1191.79 L1969.44 1191.79 L1968.85 1191.79 L1968.27 1191.79 L1967.68 1191.79 L1967.09 1191.79 L1966.51 1191.79 L1965.92 1191.79 L1965.33 1191.79 L1964.75 1191.79 L1964.16 1191.79 L1963.58 1191.79 L1962.99 1191.79 L1962.4 1191.79 L1961.82 1191.79 L1961.23 1191.79 L1960.64 1191.79 L1960.06 1191.79 L1959.47 1191.79 L1958.88 1191.79 L1958.3 1191.79 L1957.71 1191.79 L1957.12 1191.79 L1956.54 1191.79 L1955.95 1191.79 L1955.37 1191.79 L1954.78 1191.79 L1954.19 1191.79 L1953.61 1191.79 L1953.02 1191.79 L1952.43 1191.79 L1951.85 1191.79 L1951.26 1191.79 L1950.67 1191.79 L1950.09 1191.79 L1949.5 1191.79 L1948.91 1191.79 L1948.33 1191.79 L1947.74 1191.79 L1947.16 1191.79 L1946.57 1191.79 L1945.98 1191.79 L1945.4 1191.79 L1944.81 1191.79 L1944.22 1191.79 L1943.64 1191.79 L1943.05 1191.79 L1942.46 1191.79 L1941.88 1191.79 L1941.29 1191.79 L1940.71 1191.79 L1940.12 1191.79 L1939.53 1191.79 L1938.95 1191.79 L1938.36 1191.79 L1937.77 1191.79 L1937.19 1191.79 L1936.6 1191.79 L1936.01 1191.79 L1935.43 1191.79 L1934.84 1191.79 L1934.25 1191.79 L1933.67 1191.79 L1933.08 1191.79 L1932.5 1191.79 L1931.91 1191.79 L1931.32 1191.79 L1930.74 1191.79 L1930.15 1191.79 L1929.56 1191.79 L1928.98 1191.79 L1928.39 1191.79 L1927.8 1191.79 L1927.22 1191.79 L1926.63 1191.79 L1926.04 1191.79 L1925.46 1191.79 L1924.87 1191.79 L1924.29 1191.79 L1923.7 1191.79 L1923.11 1191.79 L1922.53 1191.79 L1921.94 1191.79 L1921.35 1191.79 L1920.77 1191.79 L1920.18 1191.79 L1919.59 1191.79 L1919.01 1191.79 L1918.42 1191.79 L1917.83 1191.79 L1917.25 1191.79 L1916.66 1191.79 L1916.08 1191.79 L1915.49 1191.79 L1914.9 1191.79 L1914.32 1191.79 L1913.73 1191.79 L1913.14 1191.79 L1912.56 1191.79 L1911.97 1191.79 L1911.38 1191.79 L1910.8 1191.79 L1910.21 1191.79 L1909.63 1191.79 L1909.04 1191.79 L1908.45 1191.79 L1907.87 1191.79 L1907.28 1191.79 L1906.69 1191.79 L1906.11 1191.79 L1905.52 1191.79 L1904.93 1191.79 L1904.35 1191.79 L1903.76 1191.79 L1903.17 1191.79 L1902.59 1191.79 L1902 1191.79 L1901.42 1191.79 L1900.83 1191.79 L1900.24 1191.79 L1899.66 1191.79 L1899.07 1191.79 L1898.48 1191.79 L1897.9 1191.79 L1897.31 1191.79 L1896.72 1191.79 L1896.14 1191.79 L1895.55 1191.79 L1894.96 1191.79 L1894.38 1191.79 L1893.79 1191.79 L1893.21 1191.79 L1892.62 1191.79 L1892.03 1191.79 L1891.45 1191.79 L1890.86 1191.79 L1890.27 1191.79 L1889.69 1191.79 L1889.1 1191.79 L1888.51 1191.79 L1887.93 1191.79 L1887.34 1191.79 L1886.76 1191.79 L1886.17 1191.79 L1885.58 1191.79 L1885 1191.79 L1884.41 1191.79 L1883.82 1191.79 L1883.24 1191.79 L1882.65 1191.79 L1882.06 1191.79 L1881.48 1191.79 L1880.89 1191.79 L1880.3 1191.79 L1879.72 1191.79 L1879.13 1191.79 L1878.55 1191.79 L1877.96 1191.79 L1877.37 1191.79 L1876.79 1191.79 L1876.2 1191.79 L1875.61 1191.79 L1875.03 1191.79 L1874.44 1191.79 L1873.85 1191.79 L1873.27 1191.79 L1872.68 1191.79 L1872.09 1191.79 L1871.51 1191.79 L1870.92 1191.79 L1870.34 1191.79 L1869.75 1191.79 L1869.16 1191.79 L1868.58 1191.79 L1867.99 1191.79 L1867.4 1191.79 L1866.82 1191.79 L1866.23 1191.79 L1865.64 1191.79 L1865.06 1191.79 L1864.47 1191.79 L1863.88 1191.79 L1863.3 1191.79 L1862.71 1191.79 L1862.13 1191.79 L1861.54 1191.79 L1860.95 1191.79 L1860.37 1191.79 L1859.78 1191.79 L1859.19 1191.79 L1858.61 1191.79 L1858.02 1191.79 L1857.43 1191.79 L1856.85 1191.79 L1856.26 1191.79 L1855.68 1191.79 L1855.09 1191.79 L1854.5 1191.79 L1853.92 1191.79 L1853.33 1191.79 L1852.74 1191.79 L1852.16 1191.79 L1851.57 1191.79 L1850.98 1191.79 L1850.4 1191.79 L1849.81 1191.79 L1849.22 1191.79 L1848.64 1191.79 L1848.05 1191.79 L1847.47 1191.79 L1846.88 1191.79 L1846.29 1191.79 L1845.71 1191.79 L1845.12 1191.79 L1844.53 1191.79 L1843.95 1191.79 L1843.36 1191.79 L1842.77 1191.79 L1842.19 1191.79 L1841.6 1191.79 L1841.01 1191.79 L1840.43 1191.79 L1839.84 1191.79 L1839.26 1191.79 L1838.67 1191.79 L1838.08 1191.79 L1837.5 1191.79 L1836.91 1191.79 L1836.32 1191.79 L1835.74 1191.79 L1835.15 1191.79 L1834.56 1191.79 L1833.98 1191.79 L1833.39 1191.79 L1832.81 1191.79 L1832.22 1191.79 L1831.63 1191.79 L1831.05 1191.79 L1830.46 1191.79 L1829.87 1191.79 L1829.29 1191.79 L1828.7 1191.79 L1828.11 1191.79 L1827.53 1191.79 L1826.94 1191.79 L1826.35 1191.79 L1825.77 1191.79 L1825.18 1191.79 L1824.6 1191.79 L1824.01 1191.79 L1823.42 1191.79 L1822.84 1191.79 L1822.25 1191.79 L1821.66 1191.79 L1821.08 1191.79 L1820.49 1191.79 L1819.9 1191.79 L1819.32 1191.79 L1818.73 1191.79 L1818.14 1191.79 L1817.56 1191.79 L1816.97 1191.79 L1816.39 1191.79 L1815.8 1191.79 L1815.21 1191.79 L1814.63 1191.79 L1814.04 1191.79 L1813.45 1191.79 L1812.87 1191.79 L1812.28 1191.79 L1811.69 1191.79 L1811.11 1191.79 L1810.52 1191.79 L1809.94 1191.79 L1809.35 1191.79 L1808.76 1191.79 L1808.18 1191.79 L1807.59 1191.79 L1807 1191.79 L1806.42 1191.79 L1805.83 1191.79 L1805.24 1191.79 L1804.66 1191.79 L1804.07 1191.79 L1803.48 1191.79 L1802.9 1191.79 L1802.31 1191.79 L1801.73 1191.79 L1801.14 1191.79 L1800.55 1191.79 L1799.97 1191.79 L1799.38 1191.79 L1798.79 1191.79 L1798.21 1191.79 L1797.62 1191.79 L1797.03 1191.79 L1796.45 1191.79 L1795.86 1191.79 L1795.27 1191.79 L1794.69 1191.79 L1794.1 1191.79 L1793.52 1191.79 L1792.93 1191.79 L1792.34 1191.79 L1791.76 1191.79 L1791.17 1191.79 L1790.58 1191.79 L1790 1191.79 L1789.41 1191.79 L1788.82 1191.79 L1788.24 1191.79 L1787.65 1191.79 L1787.06 1191.79 L1786.48 1191.79 L1785.89 1191.79 L1785.31 1191.79 L1784.72 1191.79 L1784.13 1191.79 L1783.55 1191.79 L1782.96 1191.79 L1782.37 1191.79 L1781.79 1191.79 L1781.2 1191.79 L1780.61 1191.79 L1780.03 1191.79 L1779.44 1191.79 L1778.86 1191.79 L1778.27 1191.79 L1777.68 1191.79 L1777.1 1191.79 L1776.51 1191.79 L1775.92 1191.79 L1775.34 1191.79 L1774.75 1191.79 L1774.16 1191.79 L1773.58 1191.79 L1772.99 1191.79 L1772.4 1191.79 L1771.82 1191.79 L1771.23 1191.79 L1770.65 1191.79 L1770.06 1191.79 L1769.47 1191.79 L1768.89 1191.79 L1768.3 1191.79 L1767.71 1191.79 L1767.13 1191.79 L1766.54 1191.79 L1765.95 1191.79 L1765.37 1191.79 L1764.78 1191.79 L1764.19 1191.79 L1763.61 1191.79 L1763.02 1191.79 L1762.44 1191.79 L1761.85 1191.79 L1761.26 1191.79 L1760.68 1191.79 L1760.09 1191.79 L1759.5 1191.79 L1758.92 1191.79 L1758.33 1191.79 L1757.74 1191.79 L1757.16 1191.79 L1756.57 1191.79 L1755.99 1191.79 L1755.4 1191.79 L1754.81 1191.79 L1754.23 1191.79 L1753.64 1191.79 L1753.05 1191.79 L1752.47 1191.79 L1751.88 1191.79 L1751.29 1191.79 L1750.71 1191.79 L1750.12 1191.79 L1749.53 1191.79 L1748.95 1191.79 L1748.36 1191.79 L1747.78 1191.79 L1747.19 1191.79 L1746.6 1191.79 L1746.02 1191.79 L1745.43 1191.79 L1744.84 1191.79 L1744.26 1191.79 L1743.67 1191.79 L1743.08 1191.79 L1742.5 1191.79 L1741.91 1191.79 L1741.32 1191.79 L1740.74 1191.79 L1740.15 1191.79 L1739.57 1191.79 L1738.98 1191.79 L1738.39 1191.79 L1737.81 1191.79 L1737.22 1191.79 L1736.63 1191.79 L1736.05 1191.79 L1735.46 1191.79 L1734.87 1191.79 L1734.29 1191.79 L1733.7 1191.79 L1733.11 1191.79 L1732.53 1191.79 L1731.94 1191.79 L1731.36 1191.79 L1730.77 1191.79 L1730.18 1191.79 L1729.6 1191.79 L1729.01 1191.79 L1728.42 1191.79 L1727.84 1191.79 L1727.25 1191.79 L1726.66 1191.79 L1726.08 1191.79 L1725.49 1191.79 L1724.91 1191.79 L1724.32 1191.79 L1723.73 1191.79 L1723.15 1191.79 L1722.56 1191.79 L1721.97 1191.79 L1721.39 1191.79 L1720.8 1191.79 L1720.21 1191.79 L1719.63 1191.79 L1719.04 1191.79 L1718.45 1191.79 L1717.87 1191.79 L1717.28 1191.79 L1716.7 1191.79 L1716.11 1191.79 L1715.52 1191.79 L1714.94 1191.79 L1714.35 1191.79 L1713.76 1191.79 L1713.18 1191.79 L1712.59 1191.79 L1712 1191.79 L1711.42 1191.79 L1710.83 1191.79 L1710.24 1191.79 L1709.66 1191.79 L1709.07 1191.79 L1708.49 1191.79 L1707.9 1191.79 L1707.31 1191.79 L1706.73 1191.79 L1706.14 1191.79 L1705.55 1191.79 L1704.97 1191.79 L1704.38 1191.79 L1703.79 1191.79 L1703.21 1191.79 L1702.62 1191.79 L1702.04 1191.79 L1701.45 1191.79 L1700.86 1191.79 L1700.28 1191.79 L1699.69 1191.79 L1699.1 1191.79 L1698.52 1191.79 L1697.93 1191.79 L1697.34 1191.79 L1696.76 1191.79 L1696.17 1191.79 L1695.58 1191.79 L1695 1191.79 L1694.41 1191.79 L1693.83 1191.79 L1693.24 1191.79 L1692.65 1191.79 L1692.07 1191.79 L1691.48 1191.79 L1690.89 1191.79 L1690.31 1191.79 L1689.72 1191.79 L1689.13 1191.79 L1688.55 1191.79 L1687.96 1191.79 L1687.37 1191.79 L1686.79 1191.79 L1686.2 1191.79 L1685.62 1191.79 L1685.03 1191.79 L1684.44 1191.79 L1683.86 1191.79 L1683.27 1191.79 L1682.68 1191.79 L1682.1 1191.79 L1681.51 1191.79 L1680.92 1191.79 L1680.34 1191.79 L1679.75 1191.79 L1679.17 1191.79 L1678.58 1191.79 L1677.99 1191.79 L1677.41 1191.79 L1676.82 1191.79 L1676.23 1191.79 L1675.65 1191.79 L1675.06 1191.79 L1674.47 1191.79 L1673.89 1191.79 L1673.3 1191.79 L1672.71 1191.79 L1672.13 1191.79 L1671.54 1191.79 L1670.96 1191.79 L1670.37 1191.79 L1669.78 1191.79 L1669.2 1191.79 L1668.61 1191.79 L1668.02 1191.79 L1667.44 1191.79 L1666.85 1191.79 L1666.26 1191.79 L1665.68 1191.79 L1665.09 1191.79 L1664.5 1191.79 L1663.92 1191.79 L1663.33 1191.79 L1662.75 1191.79 L1662.16 1191.79 L1661.57 1191.79 L1660.99 1191.79 L1660.4 1191.79 L1659.81 1191.79 L1659.23 1191.79 L1658.64 1191.79 L1658.05 1191.79 L1657.47 1191.79 L1656.88 1191.79 L1656.29 1191.79 L1655.71 1191.79 L1655.12 1191.79 L1654.54 1191.79 L1653.95 1191.79 L1653.36 1191.79 L1652.78 1191.79 L1652.19 1191.79 L1651.6 1191.79 L1651.02 1191.79 L1650.43 1191.79 L1649.84 1191.79 L1649.26 1191.79 L1648.67 1191.79 L1648.09 1191.79 L1647.5 1191.79 L1646.91 1191.79 L1646.33 1191.79 L1645.74 1191.79 L1645.15 1191.79 L1644.57 1191.79 L1643.98 1191.79 L1643.39 1191.79 L1642.81 1191.79 L1642.22 1191.79 L1641.63 1191.79 L1641.05 1191.79 L1640.46 1191.79 L1639.88 1191.79 L1639.29 1191.79 L1638.7 1191.79 L1638.12 1191.79 L1637.53 1191.79 L1636.94 1191.79 L1636.36 1191.79 L1635.77 1191.79 L1635.18 1191.79 L1634.6 1191.79 L1634.01 1191.79 L1633.42 1191.79 L1632.84 1191.79 L1632.25 1191.79 L1631.67 1191.79 L1631.08 1191.79 L1630.49 1191.79 L1629.91 1191.79 L1629.32 1191.79 L1628.73 1191.79 L1628.15 1191.79 L1627.56 1191.79 L1626.97 1191.79 L1626.39 1191.79 L1625.8 1191.79 L1625.22 1191.79 L1624.63 1191.79 L1624.04 1191.79 L1623.46 1191.79 L1622.87 1191.79 L1622.28 1191.79 L1621.7 1191.79 L1621.11 1191.79 L1620.52 1191.79 L1619.94 1191.79 L1619.35 1191.79 L1618.76 1191.79 L1618.18 1191.79 L1617.59 1191.79 L1617.01 1191.79 L1616.42 1191.79 L1615.83 1191.79 L1615.25 1191.79 L1614.66 1191.79 L1614.07 1191.79 L1613.49 1191.79 L1612.9 1191.79 L1612.31 1191.79 L1611.73 1191.79 L1611.14 1191.79 L1610.55 1191.79 L1609.97 1191.79 L1609.38 1191.79 L1608.8 1191.79 L1608.21 1191.79 L1607.62 1191.79 L1607.04 1191.79 L1606.45 1191.79 L1605.86 1191.79 L1605.28 1191.79 L1604.69 1191.79 L1604.1 1191.79 L1603.52 1191.79 L1602.93 1191.79 L1602.34 1191.79 L1601.76 1191.79 L1601.17 1191.79 L1600.59 1191.79 L1600 1191.79 L1599.41 1191.79 L1598.83 1191.79 L1598.24 1191.79 L1597.65 1191.79 L1597.07 1191.79 L1596.48 1191.79 L1595.89 1191.79 L1595.31 1191.79 L1594.72 1191.79 L1594.14 1191.79 L1593.55 1191.79 L1592.96 1191.79 L1592.38 1191.79 L1591.79 1191.79 L1591.2 1191.79 L1590.62 1191.79 L1590.03 1191.79 L1589.44 1191.79 L1588.86 1191.79 L1588.27 1191.79 L1587.68 1191.79 L1587.1 1191.79 L1586.51 1191.79 L1585.93 1191.79 L1585.34 1191.79 L1584.75 1191.79 L1584.17 1191.79 L1583.58 1191.79 L1582.99 1191.79 L1582.41 1191.79 L1581.82 1191.79 L1581.23 1191.79 L1580.65 1191.79 L1580.06 1191.79 L1579.47 1191.79 L1578.89 1191.79 L1578.3 1191.79 L1577.72 1191.79 L1577.13 1191.79 L1576.54 1191.79 L1575.96 1191.79 L1575.37 1191.79 L1574.78 1191.79 L1574.2 1191.79 L1573.61 1191.79 L1573.02 1191.79 L1572.44 1191.79 L1571.85 1191.79 L1571.27 1191.79 L1570.68 1191.79 L1570.09 1191.79 L1569.51 1191.79 L1568.92 1191.79 L1568.33 1191.79 L1567.75 1191.79 L1567.16 1191.79 L1566.57 1191.79 L1565.99 1191.79 L1565.4 1191.79 L1564.81 1191.79 L1564.23 1191.79 L1563.64 1191.79 L1563.06 1191.79 L1562.47 1191.79 L1561.88 1191.79 L1561.3 1191.79 L1560.71 1191.79 L1560.12 1191.79 L1559.54 1191.79 L1558.95 1191.79 L1558.36 1191.79 L1557.78 1191.79 L1557.19 1191.79 L1556.6 1191.79 L1556.02 1191.79 L1555.43 1191.79 L1554.85 1191.79 L1554.26 1191.79 L1553.67 1191.79 L1553.09 1191.79 L1552.5 1191.79 L1551.91 1191.79 L1551.33 1191.79 L1550.74 1191.79 L1550.15 1191.79 L1549.57 1191.79 L1548.98 1191.79 L1548.4 1191.79 L1547.81 1191.79 L1547.22 1191.79 L1546.64 1191.79 L1546.05 1191.79 L1545.46 1191.79 L1544.88 1191.79 L1544.29 1191.79 L1543.7 1191.79 L1543.12 1191.79 L1542.53 1191.79 L1541.94 1191.79 L1541.36 1191.79 L1540.77 1191.79 L1540.19 1191.79 L1539.6 1191.79 L1539.01 1191.79 L1538.43 1191.79 L1537.84 1191.79 L1537.25 1191.79 L1536.67 1191.79 L1536.08 1191.79 L1535.49 1191.79 L1534.91 1191.79 L1534.32 1191.79 L1533.73 1191.79 L1533.15 1191.79 L1532.56 1191.79 L1531.98 1191.79 L1531.39 1191.79 L1530.8 1191.79 L1530.22 1191.79 L1529.63 1191.79 L1529.04 1191.79 L1528.46 1191.79 L1527.87 1191.79 L1527.28 1191.79 L1526.7 1191.79 L1526.11 1191.79 L1525.52 1191.79 L1524.94 1191.79 L1524.35 1191.79 L1523.77 1191.79 L1523.18 1191.79 L1522.59 1191.79 L1522.01 1191.79 L1521.42 1191.79 L1520.83 1191.79 L1520.25 1191.79 L1519.66 1191.79 L1519.07 1191.79 L1518.49 1191.79 L1517.9 1191.79 L1517.32 1191.79 L1516.73 1191.79 L1516.14 1191.79 L1515.56 1191.79 L1514.97 1191.79 L1514.38 1191.79 L1513.8 1191.79 L1513.21 1191.79 L1512.62 1191.79 L1512.04 1191.79 L1511.45 1191.79 L1510.86 1191.79 L1510.28 1191.79 L1509.69 1191.79 L1509.11 1191.79 L1508.52 1191.79 L1507.93 1191.79 L1507.35 1191.79 L1506.76 1191.79 L1506.17 1191.79 L1505.59 1191.79 L1505 1191.79 L1504.41 1191.79 L1503.83 1191.79 L1503.24 1191.79 L1502.65 1191.79 L1502.07 1191.79 L1501.48 1191.79 L1500.9 1191.79 L1500.31 1191.79 L1499.72 1191.79 L1499.14 1191.79 L1498.55 1191.79 L1497.96 1191.79 L1497.38 1191.79 L1496.79 1191.79 L1496.2 1191.79 L1495.62 1191.79 L1495.03 1191.79 L1494.45 1191.79 L1493.86 1191.79 L1493.27 1191.79 L1492.69 1191.79 L1492.1 1191.79 L1491.51 1191.79 L1490.93 1191.79 L1490.34 1191.79 L1489.75 1191.79 L1489.17 1191.79 L1488.58 1191.79 L1487.99 1191.79 L1487.41 1191.79 L1486.82 1191.79 L1486.24 1191.79 L1485.65 1191.79 L1485.06 1191.79 L1484.48 1191.79 L1483.89 1191.79 L1483.3 1191.79 L1482.72 1191.79 L1482.13 1191.79 L1481.54 1191.79 L1480.96 1191.79 L1480.37 1191.79 L1479.78 1191.79 L1479.2 1191.79 L1478.61 1191.79 L1478.03 1191.79 L1477.44 1191.79 L1476.85 1191.79 L1476.27 1191.79 L1475.68 1191.79 L1475.09 1191.79 L1474.51 1191.79 L1473.92 1191.79 L1473.33 1191.79 L1472.75 1191.79 L1472.16 1191.79 L1471.57 1191.79 L1470.99 1191.79 L1470.4 1191.79 L1469.82 1191.79 L1469.23 1191.79 L1468.64 1191.79 L1468.06 1191.79 L1467.47 1191.79 L1466.88 1191.79 L1466.3 1191.79 L1465.71 1191.79 L1465.12 1191.79 L1464.54 1191.79 L1463.95 1191.79 L1463.37 1191.79 L1462.78 1191.79 L1462.19 1191.79 L1461.61 1191.79 L1461.02 1191.79 L1460.43 1191.79 L1459.85 1191.79 L1459.26 1191.79 L1458.67 1191.79 L1458.09 1191.79 L1457.5 1191.79 L1456.91 1191.79 L1456.33 1191.79 L1455.74 1191.79 L1455.16 1191.79 L1454.57 1191.79 L1453.98 1191.79 L1453.4 1191.79 L1452.81 1191.79 L1452.22 1191.79 L1451.64 1191.79 L1451.05 1191.79 L1450.46 1191.79 L1449.88 1191.79 L1449.29 1191.79 L1448.7 1191.79 L1448.12 1191.79 L1447.53 1191.79 L1446.95 1191.79 L1446.36 1191.79 L1445.77 1191.79 L1445.19 1191.79 L1444.6 1191.79 L1444.01 1191.79 L1443.43 1191.79 L1442.84 1191.79 L1442.25 1191.79 L1441.67 1191.79 L1441.08 1191.79 L1440.5 1191.79 L1439.91 1191.79 L1439.32 1191.79 L1438.74 1191.79 L1438.15 1191.79 L1437.56 1191.79 L1436.98 1191.79 L1436.39 1191.79 L1435.8 1191.79 L1435.22 1191.79 L1434.63 1191.79 L1434.04 1191.79 L1433.46 1191.79 L1432.87 1191.79 L1432.29 1191.79 L1431.7 1191.79 L1431.11 1191.79 L1430.53 1191.79 L1429.94 1191.79 L1429.35 1191.79 L1428.77 1191.79 L1428.18 1191.79 L1427.59 1191.79 L1427.01 1191.79 L1426.42 1191.79 L1425.83 1191.79 L1425.25 1191.79 L1424.66 1191.79 L1424.08 1191.79 L1423.49 1191.79 L1422.9 1191.79 L1422.32 1191.79 L1421.73 1191.79 L1421.14 1191.79 L1420.56 1191.79 L1419.97 1191.79 L1419.38 1191.79 L1418.8 1191.79 L1418.21 1191.79 L1417.63 1191.79 L1417.04 1191.79 L1416.45 1191.79 L1415.87 1191.79 L1415.28 1191.79 L1414.69 1191.79 L1414.11 1191.79 L1413.52 1191.79 L1412.93 1191.79 L1412.35 1191.79 L1411.76 1191.79 L1411.17 1191.79 L1410.59 1191.79 L1410 1191.79 L1409.42 1191.79 L1408.83 1191.79 L1408.24 1191.79 L1407.66 1191.79 L1407.07 1191.79 L1406.48 1191.79 L1405.9 1191.79 L1405.31 1191.79 L1404.72 1191.79 L1404.14 1191.79 L1403.55 1191.79 L1402.96 1191.79 L1402.38 1191.79 L1401.79 1191.79 L1401.21 1191.79 L1400.62 1191.79 L1400.03 1191.79 L1399.45 1191.79 L1398.86 1191.79 L1398.27 1191.79 L1397.69 1191.79 L1397.1 1191.79 L1396.51 1191.79 L1395.93 1191.79 L1395.34 1191.79 L1394.75 1191.79 L1394.17 1191.79 L1393.58 1191.79 L1393 1191.79 L1392.41 1191.79 L1391.82 1191.79 L1391.24 1191.79 L1390.65 1191.79 L1390.06 1191.79 L1389.48 1191.79 L1388.89 1191.79 L1388.3 1191.79 L1387.72 1191.79 L1387.13 1191.79 L1386.55 1191.79 L1385.96 1191.79 L1385.37 1191.79 L1384.79 1191.79 L1384.2 1191.79 L1383.61 1191.79 L1383.03 1191.79 L1382.44 1191.79 L1381.85 1191.79 L1381.27 1191.79 L1380.68 1191.79 L1380.09 1191.79 L1379.51 1191.79 L1378.92 1191.79 L1378.34 1191.79 L1377.75 1191.79 L1377.16 1191.79 L1376.58 1191.79 L1375.99 1191.79 L1375.4 1191.79 L1374.82 1191.79 L1374.23 1191.79 L1373.64 1191.79 L1373.06 1191.79 L1372.47 1191.79 L1371.88 1191.79 L1371.3 1191.79 L1370.71 1191.79 L1370.13 1191.79 L1369.54 1191.79 L1368.95 1191.79 L1368.37 1191.79 L1367.78 1191.79 L1367.19 1191.79 L1366.61 1191.79 L1366.02 1191.79 L1365.43 1191.79 L1364.85 1191.79 L1364.26 1191.79 L1363.68 1191.79 L1363.09 1191.79 L1362.5 1191.79 L1361.92 1191.79 L1361.33 1191.79 L1360.74 1191.79 L1360.16 1191.79 L1359.57 1191.79 L1358.98 1191.79 L1358.4 1191.79 L1357.81 1191.79 L1357.22 1191.79 L1356.64 1191.79 L1356.05 1191.79 L1355.47 1191.79 L1354.88 1191.79 L1354.29 1191.79 L1353.71 1191.79 L1353.12 1191.79 L1352.53 1191.79 L1351.95 1191.79 L1351.36 1191.79 L1350.77 1191.79 L1350.19 1191.79 L1349.6 1191.79 L1349.01 1191.79 L1348.43 1191.79 L1347.84 1191.79 L1347.26 1191.79 L1346.67 1191.79 L1346.08 1191.79 L1345.5 1191.79 L1344.91 1191.79 L1344.32 1191.79 L1343.74 1191.79 L1343.15 1191.79 L1342.56 1191.79 L1341.98 1191.79 L1341.39 1191.79 L1340.8 1191.79 L1340.22 1191.79 L1339.63 1191.79 L1339.05 1191.79 L1338.46 1191.79 L1337.87 1191.79 L1337.29 1191.79 L1336.7 1191.79 L1336.11 1191.79 L1335.53 1191.79 L1334.94 1191.79 L1334.35 1191.79 L1333.77 1191.79 L1333.18 1191.79 L1332.6 1191.79 L1332.01 1191.79 L1331.42 1191.79 L1330.84 1191.79 L1330.25 1191.79 L1329.66 1191.79 L1329.08 1191.79 L1328.49 1191.79 L1327.9 1191.79 L1327.32 1191.79 L1326.73 1191.79 L1326.14 1191.79 L1325.56 1191.79 L1324.97 1191.79 L1324.39 1191.79 L1323.8 1191.79 L1323.21 1191.79 L1322.63 1191.79 L1322.04 1191.79 L1321.45 1191.79 L1320.87 1191.79 L1320.28 1191.79 L1319.69 1191.79 L1319.11 1191.79 L1318.52 1191.79 L1317.93 1191.79 L1317.35 1191.79 L1316.76 1191.79 L1316.18 1191.79 L1315.59 1191.79 L1315 1191.79 L1314.42 1191.79 L1313.83 1191.79 L1313.24 1191.79 L1312.66 1191.79 L1312.07 1191.79 L1311.48 1191.79 L1310.9 1191.79 L1310.31 1191.79 L1309.73 1191.79 L1309.14 1191.79 L1308.55 1191.79 L1307.97 1191.79 L1307.38 1191.79 L1306.79 1191.79 L1306.21 1191.79 L1305.62 1191.79 L1305.03 1191.79 L1304.45 1191.79 L1303.86 1191.79 L1303.27 1191.79 L1302.69 1191.79 L1302.1 1191.79 L1301.52 1191.79 L1300.93 1191.79 L1300.34 1191.79 L1299.76 1191.79 L1299.17 1191.79 L1298.58 1191.79 L1298 1191.79 L1297.41 1191.79 L1296.82 1191.79 L1296.24 1191.79 L1295.65 1191.79 L1295.06 1191.79 L1294.48 1191.79 L1293.89 1191.79 L1293.31 1191.79 L1292.72 1191.79 L1292.13 1191.79 L1291.55 1191.79 L1290.96 1191.79 L1290.37 1191.79 L1289.79 1191.79 L1289.2 1191.79 L1288.61 1191.79 L1288.03 1191.79 L1287.44 1191.79 L1286.86 1191.79 L1286.27 1191.79 L1285.68 1191.79 L1285.1 1191.79 L1284.51 1191.79 L1283.92 1191.79 L1283.34 1191.79 L1282.75 1191.79 L1282.16 1191.79 L1281.58 1191.79 L1280.99 1191.79 L1280.4 1191.79 L1279.82 1191.79 L1279.23 1191.79 L1278.65 1191.79 L1278.06 1191.79 L1277.47 1191.79 L1276.89 1191.79 L1276.3 1191.79 L1275.71 1191.79 L1275.13 1191.79 L1274.54 1191.79 L1273.95 1191.79 L1273.37 1191.79 L1272.78 1191.79 L1272.19 1191.79 L1271.61 1191.79 L1271.02 1191.79 L1270.44 1191.79 L1269.85 1191.79 L1269.26 1191.79 L1268.68 1191.79 L1268.09 1191.79 L1267.5 1191.79 L1266.92 1191.79 L1266.33 1191.79 L1265.74 1191.79 L1265.16 1191.79 L1264.57 1191.79 L1263.98 1191.79 L1263.4 1191.79 L1262.81 1191.79 L1262.23 1191.79 L1261.64 1191.79 L1261.05 1191.79 L1260.47 1191.79 L1259.88 1191.79 L1259.29 1191.79 L1258.71 1191.79 L1258.12 1191.79 L1257.53 1191.79 L1256.95 1191.79 L1256.36 1191.79 L1255.78 1191.79 L1255.19 1191.79 L1254.6 1191.79 L1254.02 1191.79 L1253.43 1191.79 L1252.84 1191.79 L1252.26 1191.79 L1251.67 1191.79 L1251.08 1191.79 L1250.5 1191.79 L1249.91 1191.79 L1249.32 1191.79 L1248.74 1191.79 L1248.15 1191.79 L1247.57 1191.79 L1246.98 1191.79 L1246.39 1191.79 L1245.81 1191.79 L1245.22 1191.79 L1244.63 1191.79 L1244.05 1191.79 L1243.46 1191.79 L1242.87 1191.79 L1242.29 1191.79 L1241.7 1191.79 L1241.11 1191.79 L1240.53 1191.79 L1239.94 1191.79 L1239.36 1191.79 L1238.77 1191.79 L1238.18 1191.79 L1237.6 1191.79 L1237.01 1191.79 L1236.42 1191.79 L1235.84 1191.79 L1235.25 1191.79 L1234.66 1191.79 L1234.08 1191.79 L1233.49 1191.79 L1232.91 1191.79 L1232.32 1191.79 L1231.73 1191.79 L1231.15 1191.79 L1230.56 1191.79 L1229.97 1191.79 L1229.39 1191.79 L1228.8 1191.79 L1228.21 1191.79 L1227.63 1191.79 L1227.04 1191.79 L1226.45 1191.79 L1225.87 1191.79 L1225.28 1191.79 L1224.7 1191.79 L1224.11 1191.79 L1223.52 1191.79 L1222.94 1191.79 L1222.35 1191.79 L1221.76 1191.79 L1221.18 1191.79 L1220.59 1191.79 L1220 1191.79 L1219.42 1191.79 L1218.83 1191.79 L1218.24 1191.79 L1217.66 1191.79 L1217.07 1191.79 L1216.49 1191.79 L1215.9 1191.79 L1215.31 1191.79 L1214.73 1191.79 L1214.14 1191.79 L1213.55 1191.79 L1212.97 1191.79 L1212.38 1191.79 L1211.79 1191.79 L1211.21 1191.79 L1210.62 1191.79 L1210.03 1191.79 L1209.45 1191.79 L1208.86 1191.79 L1208.28 1191.79 L1207.69 1191.79 L1207.1 1191.79 L1206.52 1191.79 L1205.93 1191.79 L1205.34 1191.79 L1204.76 1191.79 L1204.17 1191.79 L1203.58 1191.79 L1203 1191.79 L1202.41 1191.79 L1201.83 1191.79 L1201.24 1191.79 L1200.65 1191.79 L1200.07 1191.79 L1199.48 1191.79 L1198.89 1191.79 L1198.31 1191.79 L1197.72 1191.79 L1197.13 1191.79 L1196.55 1191.79 L1195.96 1191.79 L1195.37 1191.79 L1194.79 1191.79 L1194.2 1191.79 L1193.62 1191.79 L1193.03 1191.79 L1192.44 1191.79 L1191.86 1191.79 L1191.27 1191.79 L1190.68 1191.79 L1190.1 1191.79 L1189.51 1191.79 L1188.92 1191.79 L1188.34 1191.79 L1187.75 1191.79 L1187.16 1191.79 L1186.58 1191.79 L1185.99 1191.79 L1185.41 1191.79 L1184.82 1191.79 L1184.23 1191.79 L1183.65 1191.79 L1183.06 1191.79 L1182.47 1191.79 L1181.89 1191.79 L1181.3 1191.79 L1180.71 1191.79 L1180.13 1191.79 L1179.54 1191.79 L1178.96 1191.79 L1178.37 1191.79 L1177.78 1191.79 L1177.2 1191.79 L1176.61 1191.79 L1176.02 1191.79 L1175.44 1191.79 L1174.85 1191.79 L1174.26 1191.79 L1173.68 1191.79 L1173.09 1191.79 L1172.5 1191.79 L1171.92 1191.79 L1171.33 1191.79 L1170.75 1191.79 L1170.16 1191.79 L1169.57 1191.79 L1168.99 1191.79 L1168.4 1191.79 L1167.81 1191.79 L1167.23 1191.79 L1166.64 1191.79 L1166.05 1191.79 L1165.47 1191.79 L1164.88 1191.79 L1164.29 1191.79 L1163.71 1191.79 L1163.12 1191.79 L1162.54 1191.79 L1161.95 1191.79 L1161.36 1191.79 L1160.78 1191.79 L1160.19 1191.79 L1159.6 1191.79 L1159.02 1191.79 L1158.43 1191.79 L1157.84 1191.79 L1157.26 1191.79 L1156.67 1191.79 L1156.09 1191.79 L1155.5 1191.79 L1154.91 1191.79 L1154.33 1191.79 L1153.74 1191.79 L1153.15 1191.79 L1152.57 1191.79 L1151.98 1191.79 L1151.39 1191.79 L1150.81 1191.79 L1150.22 1191.79 L1149.63 1191.79 L1149.05 1191.79 L1148.46 1191.79 L1147.88 1191.79 L1147.29 1191.79 L1146.7 1191.79 L1146.12 1191.79 L1145.53 1191.79 L1144.94 1191.79 L1144.36 1191.79 L1143.77 1191.79 L1143.18 1191.79 L1142.6 1191.79 L1142.01 1191.79 L1141.42 1191.79 L1140.84 1191.79 L1140.25 1191.79 L1139.67 1191.79 L1139.08 1191.79 L1138.49 1191.79 L1137.91 1191.79 L1137.32 1191.79 L1136.73 1191.79 L1136.15 1191.79 L1135.56 1191.79 L1134.97 1191.79 L1134.39 1191.79 L1133.8 1191.79 L1133.21 1191.79 L1132.63 1191.79 L1132.04 1191.79 L1131.46 1191.79 L1130.87 1191.79 L1130.28 1191.79 L1129.7 1191.79 L1129.11 1191.79 L1128.52 1191.79 L1127.94 1191.79 L1127.35 1191.79 L1126.76 1191.79 L1126.18 1191.79 L1125.59 1191.79 L1125.01 1191.79 L1124.42 1191.79 L1123.83 1191.79 L1123.25 1191.79 L1122.66 1191.79 L1122.07 1191.79 L1121.49 1191.79 L1120.9 1191.79 L1120.31 1191.79 L1119.73 1191.79 L1119.14 1191.79 L1118.55 1191.79 L1117.97 1191.79 L1117.38 1191.79 L1116.8 1191.79 L1116.21 1191.79 L1115.62 1191.79 L1115.04 1191.79 L1114.45 1191.79 L1113.86 1191.79 L1113.28 1191.79 L1112.69 1191.79 L1112.1 1191.79 L1111.52 1191.79 L1110.93 1191.79 L1110.34 1191.79 L1109.76 1191.79 L1109.17 1191.79 L1108.59 1191.79 L1108 1191.79 L1107.41 1191.79 L1106.83 1191.79 L1106.24 1191.79 L1105.65 1191.79 L1105.07 1191.79 L1104.48 1191.79 L1103.89 1191.79 L1103.31 1191.79 L1102.72 1191.79 L1102.14 1191.79 L1101.55 1191.79 L1100.96 1191.79 L1100.38 1191.79 L1099.79 1191.79 L1099.2 1191.79 L1098.62 1191.79 L1098.03 1191.79 L1097.44 1191.79 L1096.86 1191.79 L1096.27 1191.79 L1095.68 1191.79 L1095.1 1191.79 L1094.51 1191.79 L1093.93 1191.79 L1093.34 1191.79 L1092.75 1191.79 L1092.17 1191.79 L1091.58 1191.79 L1090.99 1191.79 L1090.41 1191.79 L1089.82 1191.79 L1089.23 1191.79 L1088.65 1191.79 L1088.06 1191.79 L1087.47 1191.79 L1086.89 1191.79 L1086.3 1191.79 L1085.72 1191.79 L1085.13 1191.79 L1084.54 1191.79 L1083.96 1191.79 L1083.37 1191.79 L1082.78 1191.79 L1082.2 1191.79 L1081.61 1191.79 L1081.02 1191.79 L1080.44 1191.79 L1079.85 1191.79 L1079.26 1191.79 L1078.68 1191.79 L1078.09 1191.79 L1077.51 1191.79 L1076.92 1191.79 L1076.33 1191.79 L1075.75 1191.79 L1075.16 1191.79 L1074.57 1191.79 L1073.99 1191.79 L1073.4 1191.79 L1072.81 1191.79 L1072.23 1191.79 L1071.64 1191.79 L1071.06 1191.79 L1070.47 1191.79 L1069.88 1191.79 L1069.3 1191.79 L1068.71 1191.79 L1068.12 1191.79 L1067.54 1191.79 L1066.95 1191.79 L1066.36 1191.79 L1065.78 1191.79 L1065.19 1191.79 L1064.6 1191.79 L1064.02 1191.79 L1063.43 1191.79 L1062.85 1191.79 L1062.26 1191.79 L1061.67 1191.79 L1061.09 1191.79 L1060.5 1191.79 L1059.91 1191.79 L1059.33 1191.79 L1058.74 1191.79 L1058.15 1191.79 L1057.57 1191.79 L1056.98 1191.79 L1056.39 1191.79 L1055.81 1191.79 L1055.22 1191.79 L1054.64 1191.79 L1054.05 1191.79 L1053.46 1191.79 L1052.88 1191.79 L1052.29 1191.79 L1051.7 1191.79 L1051.12 1191.79 L1050.53 1191.79 L1049.94 1191.79 L1049.36 1191.79 L1048.77 1191.79 L1048.19 1191.79 L1047.6 1191.79 L1047.01 1191.79 L1046.43 1191.79 L1045.84 1191.79 L1045.25 1191.79 L1044.67 1191.79 L1044.08 1191.79 L1043.49 1191.79 L1042.91 1191.79 L1042.32 1191.79 L1041.73 1191.79 L1041.15 1191.79 L1040.56 1191.79 L1039.98 1191.79 L1039.39 1191.79 L1038.8 1191.79 L1038.22 1191.79 L1037.63 1191.79 L1037.04 1191.79 L1036.46 1191.79 L1035.87 1191.79 L1035.28 1191.79 L1034.7 1191.79 L1034.11 1191.79 L1033.52 1191.79 L1032.94 1191.79 L1032.35 1191.79 L1031.77 1191.79 L1031.18 1191.79 L1030.59 1191.79 L1030.01 1191.79 L1029.42 1191.79 L1028.83 1191.79 L1028.25 1191.79 L1027.66 1191.79 L1027.07 1191.79 L1026.49 1191.79 L1025.9 1191.79 L1025.32 1191.79 L1024.73 1191.79 L1024.14 1191.79 L1023.56 1191.79 L1022.97 1191.79 L1022.38 1191.79 L1021.8 1191.79 L1021.21 1191.79 L1020.62 1191.79 L1020.04 1191.79 L1019.45 1191.79 L1018.86 1191.79 L1018.28 1191.79 L1017.69 1191.79 L1017.11 1191.79 L1016.52 1191.79 L1015.93 1191.79 L1015.35 1191.79 L1014.76 1191.79 L1014.17 1191.79 L1013.59 1191.79 L1013 1191.79 L1012.41 1191.79 L1011.83 1191.79 L1011.24 1191.79 L1010.65 1191.79 L1010.07 1191.79 L1009.48 1191.79 L1008.9 1191.79 L1008.31 1191.79 L1007.72 1191.79 L1007.14 1191.79 L1006.55 1191.79 L1005.96 1191.79 L1005.38 1191.79 L1004.79 1191.79 L1004.2 1191.79 L1003.62 1191.79 L1003.03 1191.79 L1002.44 1191.79 L1001.86 1191.79 L1001.27 1191.79 L1000.69 1191.79 L1000.1 1191.79 L999.513 1191.79 L998.926 1191.79 L998.34 1191.79 L997.754 1191.79 L997.167 1191.79 L996.581 1191.79 L995.994 1191.79 L995.408 1191.79 L994.822 1191.79 L994.235 1191.79 L993.649 1191.79 L993.062 1191.79 L992.476 1191.79 L991.889 1191.79 L991.303 1191.79 L990.717 1191.79 L990.13 1191.79 L989.544 1191.79 L988.957 1191.79 L988.371 1191.79 L987.785 1191.79 L987.198 1191.79 L986.612 1191.79 L986.025 1191.79  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1191.88 986.612,1191.88 987.198,1191.88 987.785,1191.88 988.371,1191.88 988.957,1191.88 989.544,1191.88 990.13,1191.88 990.717,1191.88 991.303,1191.88 991.889,1191.88 992.476,1191.88 993.062,1191.88 993.649,1191.88 994.235,1191.88 994.822,1191.88 995.408,1191.88 995.994,1191.88 996.581,1191.88 997.167,1191.88 997.754,1191.88 998.34,1191.88 998.926,1191.88 999.513,1191.88 1000.1,1191.88 1000.69,1191.88 1001.27,1191.88 1001.86,1191.88 1002.44,1191.88 1003.03,1191.88 1003.62,1191.88 1004.2,1191.88 1004.79,1191.88 1005.38,1191.88 1005.96,1191.88 1006.55,1191.88 1007.14,1191.88 1007.72,1191.88 1008.31,1191.88 1008.9,1191.88 1009.48,1191.88 1010.07,1191.88 1010.65,1191.88 1011.24,1191.88 1011.83,1191.88 1012.41,1191.88 1013,1191.88 1013.59,1191.88 1014.17,1191.88 1014.76,1191.88 1015.35,1191.88 1015.93,1191.88 1016.52,1191.88 1017.11,1191.88 1017.69,1191.88 1018.28,1191.88 1018.86,1191.88 1019.45,1191.88 1020.04,1191.88 1020.62,1191.88 1021.21,1191.88 1021.8,1191.88 1022.38,1191.88 1022.97,1191.88 1023.56,1191.88 1024.14,1191.88 1024.73,1191.88 1025.32,1191.88 1025.9,1191.88 1026.49,1191.88 1027.07,1191.88 1027.66,1191.88 1028.25,1191.88 1028.83,1191.88 1029.42,1191.88 1030.01,1191.88 1030.59,1191.88 1031.18,1191.88 1031.77,1191.88 1032.35,1191.88 1032.94,1191.88 1033.52,1191.88 1034.11,1191.88 1034.7,1191.88 1035.28,1191.88 1035.87,1191.88 1036.46,1191.88 1037.04,1191.88 1037.63,1191.88 1038.22,1191.88 1038.8,1191.88 1039.39,1191.88 1039.98,1191.88 1040.56,1191.88 1041.15,1191.88 1041.73,1191.88 1042.32,1191.88 1042.91,1191.88 1043.49,1191.88 1044.08,1191.88 1044.67,1191.88 1045.25,1191.88 1045.84,1191.88 1046.43,1191.88 1047.01,1191.88 1047.6,1191.88 1048.19,1191.88 1048.77,1191.88 1049.36,1191.88 1049.94,1191.88 1050.53,1191.88 1051.12,1191.88 1051.7,1191.88 1052.29,1191.88 1052.88,1191.88 1053.46,1191.88 1054.05,1191.88 1054.64,1191.88 1055.22,1191.88 1055.81,1191.88 1056.39,1191.88 1056.98,1191.88 1057.57,1191.88 1058.15,1191.88 1058.74,1191.88 1059.33,1191.88 1059.91,1191.88 1060.5,1191.88 1061.09,1191.88 1061.67,1191.88 1062.26,1191.88 1062.85,1191.88 1063.43,1191.88 1064.02,1191.88 1064.6,1191.88 1065.19,1191.88 1065.78,1191.88 1066.36,1191.88 1066.95,1191.88 1067.54,1191.88 1068.12,1191.88 1068.71,1191.88 1069.3,1191.88 1069.88,1191.88 1070.47,1191.88 1071.06,1191.88 1071.64,1191.88 1072.23,1191.88 1072.81,1191.88 1073.4,1191.88 1073.99,1191.88 1074.57,1191.88 1075.16,1191.88 1075.75,1191.88 1076.33,1191.88 1076.92,1191.88 1077.51,1191.88 1078.09,1191.88 1078.68,1191.88 1079.26,1191.88 1079.85,1191.88 1080.44,1191.88 1081.02,1191.88 1081.61,1191.88 1082.2,1191.88 1082.78,1191.88 1083.37,1191.88 1083.96,1191.88 1084.54,1191.88 1085.13,1191.88 1085.72,1191.88 1086.3,1191.88 1086.89,1191.88 1087.47,1191.88 1088.06,1191.88 1088.65,1191.88 1089.23,1191.88 1089.82,1191.88 1090.41,1191.88 1090.99,1191.88 1091.58,1191.88 1092.17,1191.88 1092.75,1191.88 1093.34,1191.88 1093.93,1191.88 1094.51,1191.88 1095.1,1191.88 1095.68,1191.88 1096.27,1191.88 1096.86,1191.88 1097.44,1191.88 1098.03,1191.88 1098.62,1191.88 1099.2,1191.88 1099.79,1191.88 1100.38,1191.88 1100.96,1191.88 1101.55,1191.88 1102.14,1191.88 1102.72,1191.88 1103.31,1191.88 1103.89,1191.88 1104.48,1191.88 1105.07,1191.88 1105.65,1191.88 1106.24,1191.88 1106.83,1191.88 1107.41,1191.88 1108,1191.88 1108.59,1191.88 1109.17,1191.88 1109.76,1191.88 1110.34,1191.88 1110.93,1191.88 1111.52,1191.88 1112.1,1191.88 1112.69,1191.88 1113.28,1191.88 1113.86,1191.88 1114.45,1191.88 1115.04,1191.88 1115.62,1191.88 1116.21,1191.88 1116.8,1191.88 1117.38,1191.88 1117.97,1191.88 1118.55,1191.88 1119.14,1191.88 1119.73,1191.88 1120.31,1191.88 1120.9,1191.88 1121.49,1191.88 1122.07,1191.88 1122.66,1191.88 1123.25,1191.88 1123.83,1191.88 1124.42,1191.88 1125.01,1191.88 1125.59,1191.88 1126.18,1191.88 1126.76,1191.88 1127.35,1191.88 1127.94,1191.88 1128.52,1191.88 1129.11,1191.88 1129.7,1191.88 1130.28,1191.88 1130.87,1191.88 1131.46,1191.88 1132.04,1191.88 1132.63,1191.88 1133.21,1191.88 1133.8,1191.88 1134.39,1191.88 1134.97,1191.88 1135.56,1191.88 1136.15,1191.88 1136.73,1191.88 1137.32,1191.88 1137.91,1191.88 1138.49,1191.88 1139.08,1191.88 1139.67,1191.88 1140.25,1191.88 1140.84,1191.88 1141.42,1191.88 1142.01,1191.88 1142.6,1191.88 1143.18,1191.88 1143.77,1191.88 1144.36,1191.88 1144.94,1191.88 1145.53,1191.88 1146.12,1191.88 1146.7,1191.88 1147.29,1191.88 1147.88,1191.88 1148.46,1191.88 1149.05,1191.88 1149.63,1191.88 1150.22,1191.88 1150.81,1191.88 1151.39,1191.88 1151.98,1191.88 1152.57,1191.88 1153.15,1191.88 1153.74,1191.88 1154.33,1191.88 1154.91,1191.88 1155.5,1191.88 1156.09,1191.88 1156.67,1191.88 1157.26,1191.88 1157.84,1191.88 1158.43,1191.88 1159.02,1191.88 1159.6,1191.88 1160.19,1191.88 1160.78,1191.88 1161.36,1191.88 1161.95,1191.88 1162.54,1191.88 1163.12,1191.88 1163.71,1191.88 1164.29,1191.88 1164.88,1191.88 1165.47,1191.88 1166.05,1191.88 1166.64,1191.88 1167.23,1191.88 1167.81,1191.88 1168.4,1191.88 1168.99,1191.88 1169.57,1191.88 1170.16,1191.88 1170.75,1191.88 1171.33,1191.88 1171.92,1191.88 1172.5,1191.88 1173.09,1191.88 1173.68,1191.88 1174.26,1191.88 1174.85,1191.88 1175.44,1191.88 1176.02,1191.88 1176.61,1191.88 1177.2,1191.88 1177.78,1191.88 1178.37,1191.88 1178.96,1191.88 1179.54,1191.88 1180.13,1191.88 1180.71,1191.88 1181.3,1191.88 1181.89,1191.88 1182.47,1191.88 1183.06,1191.88 1183.65,1191.88 1184.23,1191.88 1184.82,1191.88 1185.41,1191.88 1185.99,1191.88 1186.58,1191.88 1187.16,1191.88 1187.75,1191.88 1188.34,1191.88 1188.92,1191.88 1189.51,1191.88 1190.1,1191.88 1190.68,1191.88 1191.27,1191.88 1191.86,1191.88 1192.44,1191.88 1193.03,1191.88 1193.62,1191.88 1194.2,1191.88 1194.79,1191.88 1195.37,1191.88 1195.96,1191.88 1196.55,1191.88 1197.13,1191.88 1197.72,1191.88 1198.31,1191.88 1198.89,1191.88 1199.48,1191.88 1200.07,1191.88 1200.65,1191.88 1201.24,1191.88 1201.83,1191.88 1202.41,1191.88 1203,1191.88 1203.58,1191.88 1204.17,1191.88 1204.76,1191.88 1205.34,1191.88 1205.93,1191.88 1206.52,1191.88 1207.1,1191.88 1207.69,1191.88 1208.28,1191.88 1208.86,1191.88 1209.45,1191.88 1210.03,1191.88 1210.62,1191.88 1211.21,1191.88 1211.79,1191.88 1212.38,1191.88 1212.97,1191.88 1213.55,1191.88 1214.14,1191.88 1214.73,1191.88 1215.31,1191.88 1215.9,1191.88 1216.49,1191.88 1217.07,1191.88 1217.66,1191.88 1218.24,1191.88 1218.83,1191.88 1219.42,1191.88 1220,1191.88 1220.59,1191.88 1221.18,1191.88 1221.76,1191.88 1222.35,1191.88 1222.94,1191.88 1223.52,1191.88 1224.11,1191.88 1224.7,1191.88 1225.28,1191.88 1225.87,1191.88 1226.45,1191.88 1227.04,1191.88 1227.63,1191.88 1228.21,1191.88 1228.8,1191.88 1229.39,1191.88 1229.97,1191.88 1230.56,1191.88 1231.15,1191.88 1231.73,1191.88 1232.32,1191.88 1232.91,1191.88 1233.49,1191.88 1234.08,1191.88 1234.66,1191.88 1235.25,1191.88 1235.84,1191.88 1236.42,1191.88 1237.01,1191.88 1237.6,1191.88 1238.18,1191.88 1238.77,1191.88 1239.36,1191.88 1239.94,1191.88 1240.53,1191.88 1241.11,1191.88 1241.7,1191.88 1242.29,1191.88 1242.87,1191.88 1243.46,1191.88 1244.05,1191.88 1244.63,1191.88 1245.22,1191.88 1245.81,1191.88 1246.39,1191.88 1246.98,1191.88 1247.57,1191.88 1248.15,1191.88 1248.74,1191.88 1249.32,1191.88 1249.91,1191.88 1250.5,1191.88 1251.08,1191.88 1251.67,1191.88 1252.26,1191.88 1252.84,1191.88 1253.43,1191.88 1254.02,1191.88 1254.6,1191.88 1255.19,1191.88 1255.78,1191.88 1256.36,1191.88 1256.95,1191.88 1257.53,1191.88 1258.12,1191.88 1258.71,1191.88 1259.29,1191.88 1259.88,1191.88 1260.47,1191.88 1261.05,1191.88 1261.64,1191.88 1262.23,1191.88 1262.81,1191.88 1263.4,1191.88 1263.98,1191.88 1264.57,1191.88 1265.16,1191.88 1265.74,1191.88 1266.33,1191.88 1266.92,1191.88 1267.5,1191.88 1268.09,1191.88 1268.68,1191.88 1269.26,1191.88 1269.85,1191.88 1270.44,1191.88 1271.02,1191.88 1271.61,1191.88 1272.19,1191.88 1272.78,1191.88 1273.37,1191.88 1273.95,1191.88 1274.54,1191.88 1275.13,1191.88 1275.71,1191.88 1276.3,1191.88 1276.89,1191.88 1277.47,1191.88 1278.06,1191.88 1278.65,1191.88 1279.23,1191.88 1279.82,1191.88 1280.4,1191.88 1280.99,1191.88 1281.58,1191.88 1282.16,1191.88 1282.75,1191.88 1283.34,1191.88 1283.92,1191.88 1284.51,1191.88 1285.1,1191.88 1285.68,1191.88 1286.27,1191.88 1286.86,1191.88 1287.44,1191.88 1288.03,1191.88 1288.61,1191.88 1289.2,1191.88 1289.79,1191.88 1290.37,1191.88 1290.96,1191.88 1291.55,1191.88 1292.13,1191.88 1292.72,1191.88 1293.31,1191.88 1293.89,1191.88 1294.48,1191.88 1295.06,1191.88 1295.65,1191.88 1296.24,1191.88 1296.82,1191.88 1297.41,1191.88 1298,1191.88 1298.58,1191.88 1299.17,1191.88 1299.76,1191.88 1300.34,1191.88 1300.93,1191.88 1301.52,1191.88 1302.1,1191.88 1302.69,1191.88 1303.27,1191.88 1303.86,1191.88 1304.45,1191.88 1305.03,1191.88 1305.62,1191.88 1306.21,1191.88 1306.79,1191.88 1307.38,1191.88 1307.97,1191.88 1308.55,1191.88 1309.14,1191.88 1309.73,1191.88 1310.31,1191.88 1310.9,1191.88 1311.48,1191.88 1312.07,1191.88 1312.66,1191.88 1313.24,1191.88 1313.83,1191.88 1314.42,1191.88 1315,1191.88 1315.59,1191.88 1316.18,1191.88 1316.76,1191.88 1317.35,1191.88 1317.93,1191.88 1318.52,1191.88 1319.11,1191.88 1319.69,1191.88 1320.28,1191.88 1320.87,1191.88 1321.45,1191.88 1322.04,1191.88 1322.63,1191.88 1323.21,1191.88 1323.8,1191.88 1324.39,1191.88 1324.97,1191.88 1325.56,1191.88 1326.14,1191.88 1326.73,1191.88 1327.32,1191.88 1327.9,1191.88 1328.49,1191.88 1329.08,1191.88 1329.66,1191.88 1330.25,1191.88 1330.84,1191.88 1331.42,1191.88 1332.01,1191.88 1332.6,1191.88 1333.18,1191.88 1333.77,1191.88 1334.35,1191.88 1334.94,1191.88 1335.53,1191.88 1336.11,1191.88 1336.7,1191.88 1337.29,1191.88 1337.87,1191.88 1338.46,1191.88 1339.05,1191.88 1339.63,1191.88 1340.22,1191.88 1340.8,1191.88 1341.39,1191.88 1341.98,1191.88 1342.56,1191.88 1343.15,1191.88 1343.74,1191.88 1344.32,1191.88 1344.91,1191.88 1345.5,1191.88 1346.08,1191.88 1346.67,1191.88 1347.26,1191.88 1347.84,1191.88 1348.43,1191.88 1349.01,1191.88 1349.6,1191.88 1350.19,1191.88 1350.77,1191.88 1351.36,1191.88 1351.95,1191.88 1352.53,1191.88 1353.12,1191.88 1353.71,1191.88 1354.29,1191.88 1354.88,1191.88 1355.47,1191.88 1356.05,1191.88 1356.64,1191.88 1357.22,1191.88 1357.81,1191.88 1358.4,1191.88 1358.98,1191.88 1359.57,1191.88 1360.16,1191.88 1360.74,1191.88 1361.33,1191.88 1361.92,1191.88 1362.5,1191.88 1363.09,1191.88 1363.68,1191.88 1364.26,1191.88 1364.85,1191.88 1365.43,1191.88 1366.02,1191.88 1366.61,1191.88 1367.19,1191.88 1367.78,1191.88 1368.37,1191.88 1368.95,1191.88 1369.54,1191.88 1370.13,1191.88 1370.71,1191.88 1371.3,1191.88 1371.88,1191.88 1372.47,1191.88 1373.06,1191.88 1373.64,1191.88 1374.23,1191.88 1374.82,1191.88 1375.4,1191.88 1375.99,1191.88 1376.58,1191.88 1377.16,1191.88 1377.75,1191.88 1378.34,1191.88 1378.92,1191.88 1379.51,1191.88 1380.09,1191.88 1380.68,1191.88 1381.27,1191.88 1381.85,1191.88 1382.44,1191.88 1383.03,1191.88 1383.61,1191.88 1384.2,1191.88 1384.79,1191.88 1385.37,1191.88 1385.96,1191.88 1386.55,1191.88 1387.13,1191.88 1387.72,1191.88 1388.3,1191.88 1388.89,1191.88 1389.48,1191.88 1390.06,1191.88 1390.65,1191.88 1391.24,1191.88 1391.82,1191.88 1392.41,1191.88 1393,1191.88 1393.58,1191.88 1394.17,1191.88 1394.75,1191.88 1395.34,1191.88 1395.93,1191.88 1396.51,1191.88 1397.1,1191.88 1397.69,1191.88 1398.27,1191.88 1398.86,1191.88 1399.45,1191.88 1400.03,1191.88 1400.62,1191.88 1401.21,1191.88 1401.79,1191.88 1402.38,1191.88 1402.96,1191.88 1403.55,1191.88 1404.14,1191.88 1404.72,1191.88 1405.31,1191.88 1405.9,1191.88 1406.48,1191.88 1407.07,1191.88 1407.66,1191.88 1408.24,1191.88 1408.83,1191.88 1409.42,1191.88 1410,1191.88 1410.59,1191.88 1411.17,1191.88 1411.76,1191.88 1412.35,1191.88 1412.93,1191.88 1413.52,1191.88 1414.11,1191.88 1414.69,1191.88 1415.28,1191.88 1415.87,1191.88 1416.45,1191.88 1417.04,1191.88 1417.63,1191.88 1418.21,1191.88 1418.8,1191.88 1419.38,1191.88 1419.97,1191.88 1420.56,1191.88 1421.14,1191.88 1421.73,1191.88 1422.32,1191.88 1422.9,1191.88 1423.49,1191.88 1424.08,1191.88 1424.66,1191.88 1425.25,1191.88 1425.83,1191.88 1426.42,1191.88 1427.01,1191.88 1427.59,1191.88 1428.18,1191.88 1428.77,1191.88 1429.35,1191.88 1429.94,1191.88 1430.53,1191.88 1431.11,1191.88 1431.7,1191.88 1432.29,1191.88 1432.87,1191.88 1433.46,1191.88 1434.04,1191.88 1434.63,1191.88 1435.22,1191.88 1435.8,1191.88 1436.39,1191.88 1436.98,1191.88 1437.56,1191.88 1438.15,1191.88 1438.74,1191.88 1439.32,1191.88 1439.91,1191.88 1440.5,1191.88 1441.08,1191.88 1441.67,1191.88 1442.25,1191.88 1442.84,1191.88 1443.43,1191.88 1444.01,1191.88 1444.6,1191.88 1445.19,1191.88 1445.77,1191.88 1446.36,1191.88 1446.95,1191.88 1447.53,1191.88 1448.12,1191.88 1448.7,1191.88 1449.29,1191.88 1449.88,1191.88 1450.46,1191.88 1451.05,1191.88 1451.64,1191.88 1452.22,1191.88 1452.81,1191.88 1453.4,1191.88 1453.98,1191.88 1454.57,1191.88 1455.16,1191.88 1455.74,1191.88 1456.33,1191.88 1456.91,1191.88 1457.5,1191.88 1458.09,1191.88 1458.67,1191.88 1459.26,1191.88 1459.85,1191.88 1460.43,1191.88 1461.02,1191.88 1461.61,1191.88 1462.19,1191.88 1462.78,1191.88 1463.37,1191.88 1463.95,1191.88 1464.54,1191.88 1465.12,1191.88 1465.71,1191.88 1466.3,1191.88 1466.88,1191.88 1467.47,1191.88 1468.06,1191.88 1468.64,1191.88 1469.23,1191.88 1469.82,1191.88 1470.4,1191.88 1470.99,1191.88 1471.57,1191.88 1472.16,1191.88 1472.75,1191.88 1473.33,1191.88 1473.92,1191.88 1474.51,1191.88 1475.09,1191.88 1475.68,1191.88 1476.27,1191.88 1476.85,1191.88 1477.44,1191.88 1478.03,1191.88 1478.61,1191.88 1479.2,1191.88 1479.78,1191.88 1480.37,1191.88 1480.96,1191.88 1481.54,1191.88 1482.13,1191.88 1482.72,1191.88 1483.3,1191.88 1483.89,1191.88 1484.48,1191.88 1485.06,1191.88 1485.65,1191.88 1486.24,1191.88 1486.82,1191.88 1487.41,1191.88 1487.99,1191.88 1488.58,1191.88 1489.17,1191.88 1489.75,1191.88 1490.34,1191.88 1490.93,1191.88 1491.51,1191.88 1492.1,1191.88 1492.69,1191.88 1493.27,1191.88 1493.86,1191.88 1494.45,1191.88 1495.03,1191.88 1495.62,1191.88 1496.2,1191.88 1496.79,1191.88 1497.38,1191.88 1497.96,1191.88 1498.55,1191.88 1499.14,1191.88 1499.72,1191.88 1500.31,1191.88 1500.9,1191.88 1501.48,1191.88 1502.07,1191.88 1502.65,1191.88 1503.24,1191.88 1503.83,1191.88 1504.41,1191.88 1505,1191.88 1505.59,1191.88 1506.17,1191.88 1506.76,1191.88 1507.35,1191.88 1507.93,1191.88 1508.52,1191.88 1509.11,1191.88 1509.69,1191.88 1510.28,1191.88 1510.86,1191.88 1511.45,1191.88 1512.04,1191.88 1512.62,1191.88 1513.21,1191.88 1513.8,1191.88 1514.38,1191.88 1514.97,1191.88 1515.56,1191.88 1516.14,1191.88 1516.73,1191.88 1517.32,1191.88 1517.9,1191.88 1518.49,1191.88 1519.07,1191.88 1519.66,1191.88 1520.25,1191.88 1520.83,1191.88 1521.42,1191.88 1522.01,1191.88 1522.59,1191.88 1523.18,1191.88 1523.77,1191.88 1524.35,1191.88 1524.94,1191.88 1525.52,1191.88 1526.11,1191.88 1526.7,1191.88 1527.28,1191.88 1527.87,1191.88 1528.46,1191.88 1529.04,1191.88 1529.63,1191.88 1530.22,1191.88 1530.8,1191.88 1531.39,1191.88 1531.98,1191.88 1532.56,1191.88 1533.15,1191.88 1533.73,1191.88 1534.32,1191.88 1534.91,1191.88 1535.49,1191.88 1536.08,1191.88 1536.67,1191.88 1537.25,1191.88 1537.84,1191.88 1538.43,1191.88 1539.01,1191.88 1539.6,1191.88 1540.19,1191.88 1540.77,1191.88 1541.36,1191.88 1541.94,1191.88 1542.53,1191.88 1543.12,1191.88 1543.7,1191.88 1544.29,1191.88 1544.88,1191.88 1545.46,1191.88 1546.05,1191.88 1546.64,1191.88 1547.22,1191.88 1547.81,1191.88 1548.4,1191.88 1548.98,1191.88 1549.57,1191.88 1550.15,1191.88 1550.74,1191.88 1551.33,1191.88 1551.91,1191.88 1552.5,1191.88 1553.09,1191.88 1553.67,1191.88 1554.26,1191.88 1554.85,1191.88 1555.43,1191.88 1556.02,1191.88 1556.6,1191.88 1557.19,1191.88 1557.78,1191.88 1558.36,1191.88 1558.95,1191.88 1559.54,1191.88 1560.12,1191.88 1560.71,1191.88 1561.3,1191.88 1561.88,1191.88 1562.47,1191.88 1563.06,1191.88 1563.64,1191.88 1564.23,1191.88 1564.81,1191.88 1565.4,1191.88 1565.99,1191.88 1566.57,1191.88 1567.16,1191.88 1567.75,1191.88 1568.33,1191.88 1568.92,1191.88 1569.51,1191.88 1570.09,1191.88 1570.68,1191.88 1571.27,1191.88 1571.85,1191.88 1572.44,1191.88 1573.02,1191.88 1573.61,1191.88 1574.2,1191.88 1574.78,1191.88 1575.37,1191.88 1575.96,1191.88 1576.54,1191.88 1577.13,1191.88 1577.72,1191.88 1578.3,1191.88 1578.89,1191.88 1579.47,1191.88 1580.06,1191.88 1580.65,1191.88 1581.23,1191.88 1581.82,1191.88 1582.41,1191.88 1582.99,1191.88 1583.58,1191.88 1584.17,1191.88 1584.75,1191.88 1585.34,1191.88 1585.93,1191.88 1586.51,1191.88 1587.1,1191.88 1587.68,1191.88 1588.27,1191.88 1588.86,1191.88 1589.44,1191.88 1590.03,1191.88 1590.62,1191.88 1591.2,1191.88 1591.79,1191.88 1592.38,1191.88 1592.96,1191.88 1593.55,1191.88 1594.14,1191.88 1594.72,1191.88 1595.31,1191.88 1595.89,1191.88 1596.48,1191.88 1597.07,1191.88 1597.65,1191.88 1598.24,1191.88 1598.83,1191.88 1599.41,1191.88 1600,1191.88 1600.59,1191.88 1601.17,1191.88 1601.76,1191.88 1602.34,1191.88 1602.93,1191.88 1603.52,1191.88 1604.1,1191.88 1604.69,1191.88 1605.28,1191.88 1605.86,1191.88 1606.45,1191.88 1607.04,1191.88 1607.62,1191.88 1608.21,1191.88 1608.8,1191.88 1609.38,1191.88 1609.97,1191.88 1610.55,1191.88 1611.14,1191.88 1611.73,1191.88 1612.31,1191.88 1612.9,1191.88 1613.49,1191.88 1614.07,1191.88 1614.66,1191.88 1615.25,1191.88 1615.83,1191.88 1616.42,1191.88 1617.01,1191.88 1617.59,1191.88 1618.18,1191.88 1618.76,1191.88 1619.35,1191.88 1619.94,1191.88 1620.52,1191.88 1621.11,1191.88 1621.7,1191.88 1622.28,1191.88 1622.87,1191.88 1623.46,1191.88 1624.04,1191.88 1624.63,1191.88 1625.22,1191.88 1625.8,1191.88 1626.39,1191.88 1626.97,1191.88 1627.56,1191.88 1628.15,1191.88 1628.73,1191.88 1629.32,1191.88 1629.91,1191.88 1630.49,1191.88 1631.08,1191.88 1631.67,1191.88 1632.25,1191.88 1632.84,1191.88 1633.42,1191.88 1634.01,1191.88 1634.6,1191.88 1635.18,1191.88 1635.77,1191.88 1636.36,1191.88 1636.94,1191.88 1637.53,1191.88 1638.12,1191.88 1638.7,1191.88 1639.29,1191.88 1639.88,1191.88 1640.46,1191.88 1641.05,1191.88 1641.63,1191.88 1642.22,1191.88 1642.81,1191.88 1643.39,1191.88 1643.98,1191.88 1644.57,1191.88 1645.15,1191.88 1645.74,1191.88 1646.33,1191.88 1646.91,1191.88 1647.5,1191.88 1648.09,1191.88 1648.67,1191.88 1649.26,1191.88 1649.84,1191.88 1650.43,1191.88 1651.02,1191.88 1651.6,1191.88 1652.19,1191.88 1652.78,1191.88 1653.36,1191.88 1653.95,1191.88 1654.54,1191.88 1655.12,1191.88 1655.71,1191.88 1656.29,1191.88 1656.88,1191.88 1657.47,1191.88 1658.05,1191.88 1658.64,1191.88 1659.23,1191.88 1659.81,1191.88 1660.4,1191.88 1660.99,1191.88 1661.57,1191.88 1662.16,1191.88 1662.75,1191.88 1663.33,1191.88 1663.92,1191.88 1664.5,1191.88 1665.09,1191.88 1665.68,1191.88 1666.26,1191.88 1666.85,1191.88 1667.44,1191.88 1668.02,1191.88 1668.61,1191.88 1669.2,1191.88 1669.78,1191.88 1670.37,1191.88 1670.96,1191.88 1671.54,1191.88 1672.13,1191.88 1672.71,1191.88 1673.3,1191.88 1673.89,1191.88 1674.47,1191.88 1675.06,1191.88 1675.65,1191.88 1676.23,1191.88 1676.82,1191.88 1677.41,1191.88 1677.99,1191.88 1678.58,1191.88 1679.17,1191.88 1679.75,1191.88 1680.34,1191.88 1680.92,1191.88 1681.51,1191.88 1682.1,1191.88 1682.68,1191.88 1683.27,1191.88 1683.86,1191.88 1684.44,1191.88 1685.03,1191.88 1685.62,1191.88 1686.2,1191.88 1686.79,1191.88 1687.37,1191.88 1687.96,1191.88 1688.55,1191.88 1689.13,1191.88 1689.72,1191.88 1690.31,1191.88 1690.89,1191.88 1691.48,1191.88 1692.07,1191.88 1692.65,1191.88 1693.24,1191.88 1693.83,1191.88 1694.41,1191.88 1695,1191.88 1695.58,1191.88 1696.17,1191.88 1696.76,1191.88 1697.34,1191.88 1697.93,1191.88 1698.52,1191.88 1699.1,1191.88 1699.69,1191.88 1700.28,1191.88 1700.86,1191.88 1701.45,1191.88 1702.04,1191.88 1702.62,1191.88 1703.21,1191.88 1703.79,1191.88 1704.38,1191.88 1704.97,1191.88 1705.55,1191.88 1706.14,1191.88 1706.73,1191.88 1707.31,1191.88 1707.9,1191.88 1708.49,1191.88 1709.07,1191.88 1709.66,1191.88 1710.24,1191.88 1710.83,1191.88 1711.42,1191.88 1712,1191.88 1712.59,1191.88 1713.18,1191.88 1713.76,1191.88 1714.35,1191.88 1714.94,1191.88 1715.52,1191.88 1716.11,1191.88 1716.7,1191.88 1717.28,1191.88 1717.87,1191.88 1718.45,1191.88 1719.04,1191.88 1719.63,1191.88 1720.21,1191.88 1720.8,1191.88 1721.39,1191.88 1721.97,1191.88 1722.56,1191.88 1723.15,1191.88 1723.73,1191.88 1724.32,1191.88 1724.91,1191.88 1725.49,1191.88 1726.08,1191.88 1726.66,1191.88 1727.25,1191.88 1727.84,1191.88 1728.42,1191.88 1729.01,1191.88 1729.6,1191.88 1730.18,1191.88 1730.77,1191.88 1731.36,1191.88 1731.94,1191.88 1732.53,1191.88 1733.11,1191.88 1733.7,1191.88 1734.29,1191.88 1734.87,1191.88 1735.46,1191.88 1736.05,1191.88 1736.63,1191.88 1737.22,1191.88 1737.81,1191.88 1738.39,1191.88 1738.98,1191.88 1739.57,1191.88 1740.15,1191.88 1740.74,1191.88 1741.32,1191.88 1741.91,1191.88 1742.5,1191.88 1743.08,1191.88 1743.67,1191.88 1744.26,1191.88 1744.84,1191.88 1745.43,1191.88 1746.02,1191.88 1746.6,1191.88 1747.19,1191.88 1747.78,1191.88 1748.36,1191.88 1748.95,1191.88 1749.53,1191.88 1750.12,1191.88 1750.71,1191.88 1751.29,1191.88 1751.88,1191.88 1752.47,1191.88 1753.05,1191.88 1753.64,1191.88 1754.23,1191.88 1754.81,1191.88 1755.4,1191.88 1755.99,1191.88 1756.57,1191.88 1757.16,1191.88 1757.74,1191.88 1758.33,1191.88 1758.92,1191.88 1759.5,1191.88 1760.09,1191.88 1760.68,1191.88 1761.26,1191.88 1761.85,1191.88 1762.44,1191.88 1763.02,1191.88 1763.61,1191.88 1764.19,1191.88 1764.78,1191.88 1765.37,1191.88 1765.95,1191.88 1766.54,1191.88 1767.13,1191.88 1767.71,1191.88 1768.3,1191.88 1768.89,1191.88 1769.47,1191.88 1770.06,1191.88 1770.65,1191.88 1771.23,1191.88 1771.82,1191.88 1772.4,1191.88 1772.99,1191.88 1773.58,1191.88 1774.16,1191.88 1774.75,1191.88 1775.34,1191.88 1775.92,1191.88 1776.51,1191.88 1777.1,1191.88 1777.68,1191.88 1778.27,1191.88 1778.86,1191.88 1779.44,1191.88 1780.03,1191.88 1780.61,1191.88 1781.2,1191.88 1781.79,1191.88 1782.37,1191.88 1782.96,1191.88 1783.55,1191.88 1784.13,1191.88 1784.72,1191.88 1785.31,1191.88 1785.89,1191.88 1786.48,1191.88 1787.06,1191.88 1787.65,1191.88 1788.24,1191.88 1788.82,1191.88 1789.41,1191.88 1790,1191.88 1790.58,1191.88 1791.17,1191.88 1791.76,1191.88 1792.34,1191.88 1792.93,1191.88 1793.52,1191.88 1794.1,1191.88 1794.69,1191.88 1795.27,1191.88 1795.86,1191.88 1796.45,1191.88 1797.03,1191.88 1797.62,1191.88 1798.21,1191.88 1798.79,1191.88 1799.38,1191.88 1799.97,1191.88 1800.55,1191.88 1801.14,1191.88 1801.73,1191.88 1802.31,1191.88 1802.9,1191.88 1803.48,1191.88 1804.07,1191.88 1804.66,1191.88 1805.24,1191.88 1805.83,1191.88 1806.42,1191.88 1807,1191.88 1807.59,1191.88 1808.18,1191.88 1808.76,1191.88 1809.35,1191.88 1809.94,1191.88 1810.52,1191.88 1811.11,1191.88 1811.69,1191.88 1812.28,1191.88 1812.87,1191.88 1813.45,1191.88 1814.04,1191.88 1814.63,1191.88 1815.21,1191.88 1815.8,1191.88 1816.39,1191.88 1816.97,1191.88 1817.56,1191.88 1818.14,1191.88 1818.73,1191.88 1819.32,1191.88 1819.9,1191.88 1820.49,1191.88 1821.08,1191.88 1821.66,1191.88 1822.25,1191.88 1822.84,1191.88 1823.42,1191.88 1824.01,1191.88 1824.6,1191.88 1825.18,1191.88 1825.77,1191.88 1826.35,1191.88 1826.94,1191.88 1827.53,1191.88 1828.11,1191.88 1828.7,1191.88 1829.29,1191.88 1829.87,1191.88 1830.46,1191.88 1831.05,1191.88 1831.63,1191.88 1832.22,1191.88 1832.81,1191.88 1833.39,1191.88 1833.98,1191.88 1834.56,1191.88 1835.15,1191.88 1835.74,1191.88 1836.32,1191.88 1836.91,1191.88 1837.5,1191.88 1838.08,1191.88 1838.67,1191.88 1839.26,1191.88 1839.84,1191.88 1840.43,1191.88 1841.01,1191.88 1841.6,1191.88 1842.19,1191.88 1842.77,1191.88 1843.36,1191.88 1843.95,1191.88 1844.53,1191.88 1845.12,1191.88 1845.71,1191.88 1846.29,1191.88 1846.88,1191.88 1847.47,1191.88 1848.05,1191.88 1848.64,1191.88 1849.22,1191.88 1849.81,1191.88 1850.4,1191.88 1850.98,1191.88 1851.57,1191.88 1852.16,1191.88 1852.74,1191.88 1853.33,1191.88 1853.92,1191.88 1854.5,1191.88 1855.09,1191.88 1855.68,1191.88 1856.26,1191.88 1856.85,1191.88 1857.43,1191.88 1858.02,1191.88 1858.61,1191.88 1859.19,1191.88 1859.78,1191.88 1860.37,1191.88 1860.95,1191.88 1861.54,1191.88 1862.13,1191.88 1862.71,1191.88 1863.3,1191.88 1863.88,1191.88 1864.47,1191.88 1865.06,1191.88 1865.64,1191.88 1866.23,1191.88 1866.82,1191.88 1867.4,1191.88 1867.99,1191.88 1868.58,1191.88 1869.16,1191.88 1869.75,1191.88 1870.34,1191.88 1870.92,1191.88 1871.51,1191.88 1872.09,1191.88 1872.68,1191.88 1873.27,1191.88 1873.85,1191.88 1874.44,1191.88 1875.03,1191.88 1875.61,1191.88 1876.2,1191.88 1876.79,1191.88 1877.37,1191.88 1877.96,1191.88 1878.55,1191.88 1879.13,1191.88 1879.72,1191.88 1880.3,1191.88 1880.89,1191.88 1881.48,1191.88 1882.06,1191.88 1882.65,1191.88 1883.24,1191.88 1883.82,1191.88 1884.41,1191.88 1885,1191.88 1885.58,1191.88 1886.17,1191.88 1886.76,1191.88 1887.34,1191.88 1887.93,1191.88 1888.51,1191.88 1889.1,1191.88 1889.69,1191.88 1890.27,1191.88 1890.86,1191.88 1891.45,1191.88 1892.03,1191.88 1892.62,1191.88 1893.21,1191.88 1893.79,1191.88 1894.38,1191.88 1894.96,1191.88 1895.55,1191.88 1896.14,1191.88 1896.72,1191.88 1897.31,1191.88 1897.9,1191.88 1898.48,1191.88 1899.07,1191.88 1899.66,1191.88 1900.24,1191.88 1900.83,1191.88 1901.42,1191.88 1902,1191.88 1902.59,1191.88 1903.17,1191.88 1903.76,1191.88 1904.35,1191.88 1904.93,1191.88 1905.52,1191.88 1906.11,1191.88 1906.69,1191.88 1907.28,1191.88 1907.87,1191.88 1908.45,1191.88 1909.04,1191.88 1909.63,1191.88 1910.21,1191.88 1910.8,1191.88 1911.38,1191.88 1911.97,1191.88 1912.56,1191.88 1913.14,1191.88 1913.73,1191.88 1914.32,1191.88 1914.9,1191.88 1915.49,1191.88 1916.08,1191.88 1916.66,1191.88 1917.25,1191.88 1917.83,1191.88 1918.42,1191.88 1919.01,1191.88 1919.59,1191.88 1920.18,1191.88 1920.77,1191.88 1921.35,1191.88 1921.94,1191.88 1922.53,1191.88 1923.11,1191.88 1923.7,1191.88 1924.29,1191.88 1924.87,1191.88 1925.46,1191.88 1926.04,1191.88 1926.63,1191.88 1927.22,1191.88 1927.8,1191.88 1928.39,1191.88 1928.98,1191.88 1929.56,1191.88 1930.15,1191.88 1930.74,1191.88 1931.32,1191.88 1931.91,1191.88 1932.5,1191.88 1933.08,1191.88 1933.67,1191.88 1934.25,1191.88 1934.84,1191.88 1935.43,1191.88 1936.01,1191.88 1936.6,1191.88 1937.19,1191.88 1937.77,1191.88 1938.36,1191.88 1938.95,1191.88 1939.53,1191.88 1940.12,1191.88 1940.71,1191.88 1941.29,1191.88 1941.88,1191.88 1942.46,1191.88 1943.05,1191.88 1943.64,1191.88 1944.22,1191.88 1944.81,1191.88 1945.4,1191.88 1945.98,1191.88 1946.57,1191.88 1947.16,1191.88 1947.74,1191.88 1948.33,1191.88 1948.91,1191.88 1949.5,1191.88 1950.09,1191.88 1950.67,1191.88 1951.26,1191.88 1951.85,1191.88 1952.43,1191.88 1953.02,1191.88 1953.61,1191.88 1954.19,1191.88 1954.78,1191.88 1955.37,1191.88 1955.95,1191.88 1956.54,1191.88 1957.12,1191.88 1957.71,1191.88 1958.3,1191.88 1958.88,1191.88 1959.47,1191.88 1960.06,1191.88 1960.64,1191.88 1961.23,1191.88 1961.82,1191.88 1962.4,1191.88 1962.99,1191.88 1963.58,1191.88 1964.16,1191.88 1964.75,1191.88 1965.33,1191.88 1965.92,1191.88 1966.51,1191.88 1967.09,1191.88 1967.68,1191.88 1968.27,1191.88 1968.85,1191.88 1969.44,1191.88 1970.03,1191.88 1970.61,1191.88 1971.2,1191.88 1971.78,1191.88 1972.37,1191.88 1972.96,1191.88 1973.54,1191.88 1974.13,1191.88 1974.72,1191.88 1975.3,1191.88 1975.89,1191.88 1976.48,1191.88 1977.06,1191.88 1977.65,1191.88 1978.24,1191.88 1978.82,1191.88 1979.41,1191.88 1979.99,1191.88 1980.58,1191.88 1981.17,1191.88 1981.75,1191.88 1982.34,1191.88 1982.93,1191.88 1983.51,1191.88 1984.1,1191.88 1984.69,1191.88 1985.27,1191.88 1985.86,1191.88 1986.45,1191.88 1987.03,1191.88 1987.62,1191.88 1988.2,1191.88 1988.79,1191.88 1989.38,1191.88 1989.96,1191.88 1990.55,1191.88 1991.14,1191.88 1991.72,1191.88 1992.31,1191.88 1992.9,1191.88 1993.48,1191.88 1994.07,1191.88 1994.65,1191.88 1995.24,1191.88 1995.83,1191.88 1996.41,1191.88 1997,1191.88 1997.59,1191.88 1998.17,1191.88 1998.76,1191.88 1999.35,1191.88 1999.93,1191.88 2000.52,1191.88 2001.11,1191.88 2001.69,1191.88 2002.28,1191.88 2002.86,1191.88 2003.45,1191.88 2004.04,1191.88 2004.62,1191.88 2005.21,1191.88 2005.8,1191.88 2006.38,1191.88 2006.97,1191.88 2007.56,1191.88 2008.14,1191.88 2008.73,1191.88 2009.32,1191.88 2009.9,1191.88 2010.49,1191.88 2011.07,1191.88 2011.66,1191.88 2012.25,1191.88 2012.83,1191.88 2013.42,1191.88 2014.01,1191.88 2014.59,1191.88 2015.18,1191.88 2015.77,1191.88 2016.35,1191.88 2016.94,1191.88 2017.53,1191.88 2018.11,1191.88 2018.7,1191.88 2019.28,1191.88 2019.87,1191.88 2020.46,1191.88 2021.04,1191.88 2021.63,1191.88 2022.22,1191.88 2022.8,1191.88 2023.39,1191.88 2023.98,1191.88 2024.56,1191.88 2025.15,1191.88 2025.73,1191.88 2026.32,1191.88 2026.91,1191.88 2027.49,1191.88 2028.08,1191.88 2028.67,1191.88 2029.25,1191.88 2029.84,1191.88 2030.43,1191.88 2031.01,1191.88 2031.6,1191.88 2032.19,1191.88 2032.77,1191.88 2033.36,1191.88 2033.94,1191.88 2034.53,1191.88 2035.12,1191.88 2035.7,1191.88 2036.29,1191.88 2036.88,1191.88 2037.46,1191.88 2038.05,1191.88 2038.64,1191.88 2039.22,1191.88 2039.81,1191.88 2040.4,1191.88 2040.98,1191.88 2041.57,1191.88 2042.15,1191.88 2042.74,1191.88 2043.33,1191.88 2043.91,1191.88 2044.5,1191.88 2045.09,1191.88 2045.67,1191.88 2046.26,1191.88 2046.85,1191.88 2047.43,1191.88 2048.02,1191.88 2048.6,1191.88 2049.19,1191.88 2049.78,1191.88 2050.36,1191.88 2050.95,1191.88 2051.54,1191.88 2052.12,1191.88 2052.71,1191.88 2053.3,1191.88 2053.88,1191.88 2054.47,1191.88 2055.06,1191.88 2055.64,1191.88 2056.23,1191.88 2056.81,1191.88 2057.4,1191.88 2057.99,1191.88 2058.57,1191.88 2059.16,1191.88 2059.75,1191.88 2060.33,1191.88 2060.92,1191.88 2061.51,1191.88 2062.09,1191.88 2062.68,1191.88 2063.27,1191.88 2063.85,1191.88 2064.44,1191.88 2065.02,1191.88 2065.61,1191.88 2066.2,1191.88 2066.78,1191.88 2067.37,1191.88 2067.96,1191.88 2068.54,1191.88 2069.13,1191.88 2069.72,1191.88 2070.3,1191.88 2070.89,1191.88 2071.48,1191.88 2072.06,1191.88 2072.65,1191.88 2073.23,1191.88 2073.82,1191.88 2074.41,1191.88 2074.99,1191.88 2075.58,1191.88 2076.17,1191.88 2076.75,1191.88 2077.34,1191.88 2077.93,1191.88 2078.51,1191.88 2079.1,1191.88 2079.68,1191.88 2080.27,1191.88 2080.86,1191.88 2081.44,1191.88 2082.03,1191.88 2082.62,1191.88 2083.2,1191.88 2083.79,1191.88 2084.38,1191.88 2084.96,1191.88 2085.55,1191.88 2086.14,1191.88 2086.72,1191.88 2087.31,1191.88 2087.89,1191.88 2088.48,1191.88 2089.07,1191.88 2089.65,1191.88 2090.24,1191.88 2090.83,1191.88 2091.41,1191.88 2092,1191.88 2092.59,1191.88 2093.17,1191.88 2093.76,1191.88 2094.35,1191.88 2094.93,1191.88 2095.52,1191.88 2096.1,1191.88 2096.69,1191.88 2097.28,1191.88 2097.86,1191.88 2098.45,1191.88 2099.04,1191.88 2099.62,1191.88 2100.21,1191.88 2100.8,1191.88 2101.38,1191.88 2101.97,1191.88 2102.55,1191.88 2103.14,1191.88 2103.73,1191.88 2104.31,1191.88 2104.9,1191.88 2105.49,1191.88 2106.07,1191.88 2106.66,1191.88 2107.25,1191.88 2107.83,1191.88 2108.42,1191.88 2109.01,1191.88 2109.59,1191.88 2110.18,1191.88 2110.76,1191.88 2111.35,1191.88 2111.94,1191.88 2112.52,1191.88 2113.11,1191.88 2113.7,1191.88 2114.28,1191.88 2114.87,1191.88 2115.46,1191.88 2116.04,1191.88 2116.63,1191.88 2117.22,1191.88 2117.8,1191.88 2118.39,1191.88 2118.97,1191.88 2119.56,1191.88 2120.15,1191.88 2120.73,1191.88 2121.32,1191.88 2121.91,1191.88 2122.49,1191.88 2123.08,1191.88 2123.67,1191.88 2124.25,1191.88 2124.84,1191.88 2125.42,1191.88 2126.01,1191.88 2126.6,1191.88 2127.18,1191.88 2127.77,1191.88 2128.36,1191.88 2128.94,1191.88 2129.53,1191.88 2130.12,1191.88 2130.7,1191.88 2131.29,1191.88 2131.88,1191.88 2132.46,1191.88 2133.05,1191.88 2133.63,1191.88 2134.22,1191.88 2134.81,1191.88 2135.39,1191.88 2135.98,1191.88 2136.57,1191.88 2137.15,1191.88 2137.74,1191.88 2138.33,1191.88 2138.91,1191.88 2139.5,1191.88 2140.09,1191.88 2140.67,1191.88 2141.26,1191.88 2141.84,1191.88 2142.43,1191.88 2143.02,1191.88 2143.6,1191.88 2144.19,1191.88 2144.78,1191.88 2145.36,1191.88 2145.95,1191.88 2146.54,1191.88 2147.12,1191.88 2147.71,1191.88 2148.3,1191.88 2148.88,1191.88 2149.47,1191.88 2150.05,1191.88 2150.64,1191.88 2151.23,1191.88 2151.81,1191.88 2152.4,1191.88 2152.99,1191.88 2153.57,1191.88 2154.16,1191.88 2154.75,1191.88 2155.33,1191.88 2155.92,1191.88 2156.5,1191.88 2157.09,1191.88 2157.68,1191.88 2158.26,1191.88 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1560,1170.96 1404.17,899.083 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1212.31 985.439,1170.96 2158.26,1170.96 2158.26,1212.31 985.439,1212.31 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip440)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip440)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip443\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip443)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,1303.01 162.114,-149.903 162.673,-1466.01 163.232,-2715.3 163.792,-3861.37 164.351,-4893.64 164.91,-5772.65 165.469,-5517.05 166.029,-6414.48 166.588,-7182.57 167.147,-7862.76 167.706,-8500.47 168.266,-8212.01 168.825,-8785.74 169.384,-9301.59 169.943,-9056.82 170.503,-8870.42 171.062,-8716.09 171.621,-9143.33 172.18,-8992.42 172.74,-9352.39 173.299,-9227.33 173.858,-9543.86 174.417,-9409.26 174.977,-9282.89 175.536,-9525.82 176.095,-9394.28 176.655,-9589.54 177.214,-9441.32 177.773,-9567.45 178.332,-9157.78 178.892,-9250.06 179.451,-9348.75 180.01,-9426.43 180.569,-9483.88 181.129,-9506.27 181.688,-9513.58 182.247,-9512.78 182.806,-9310.43 183.366,-9284.42 183.925,-9097.91 184.484,-9045.98 185.043,-8837.89 185.603,-8636.66 186.162,-8566.05 186.721,-8484.97 187.28,-8167.45 187.84,-8074.58 188.399,-7872.12 188.958,-7685.63 189.517,-7588.41 190.077,-7219.53 190.636,-7134.97 191.195,-6960.57 191.754,-6853.02 192.314,-6753.58 192.873,-6571.79 193.432,-6395.26 193.991,-6282.56 194.551,-6110.59 195.11,-5937.62 195.669,-5833.07 196.228,-5655.97 196.788,-5489.89 197.347,-5324.08 197.906,-5111.66 198.465,-5012 199.025,-4906.53 199.584,-4654.94 200.143,-4365 200.702,-4272.02 201.262,-4171.94 201.821,-4083.21 202.38,-3907.64 202.939,-3810.95 203.499,-3601.96 204.058,-3438.12 204.617,-3202.23 205.176,-3081.74 205.736,-3007.68 206.295,-2869.82 206.854,-2729.6 207.413,-2629.59 207.973,-2496.21 208.532,-2427.53 209.091,-2272.98 209.65,-2179.48 210.21,-2117.92 210.769,-1938.05 211.328,-1796.36 211.887,-1737.98 212.447,-1633.75 213.006,-1525.12 213.565,-1472.95 214.124,-1393.45 214.684,-1294.35 215.243,-1244.18 215.802,-1146.97 216.361,-1101.16 216.921,-1004.24 217.48,-863.653 218.039,-801.774 218.598,-741.083 219.158,-660.282 219.717,-604.855 220.276,-532.803 220.835,-501.214 221.395,-387.958 221.954,-320.969 222.513,-299.66 223.072,-238.944 223.632,-218.568 224.191,-199.474 224.75,-159.44 225.309,-79.9337 225.869,-40.3905 226.428,14.1139 226.987,70.5945 227.546,127.078 228.106,181.595 228.665,236.294 229.224,248.083 229.783,298.33 230.343,347.927 230.902,355.494 231.461,380.068 232.02,387.661 232.58,415.91 233.139,459.017 233.698,464.865 234.257,530.936 234.817,532.648 235.376,575.446 235.935,636.183 236.494,669.161 237.054,681.666 237.613,736.171 238.172,768.892 238.731,748.384 239.291,745.633 239.85,707.039 240.409,759.558 240.968,758.242 241.528,842.601 242.087,834.718 242.646,844.886 243.205,846.79 243.765,897.716 244.324,908.362 244.883,955.521 245.442,982.079 246.002,992.523 246.561,982.703 247.12,938.702 247.679,980.422 248.239,1004.29 248.798,1010.44 249.357,982.444 249.916,1022.89 250.476,1012.72 251.035,1001.9 251.594,990.718 252.153,1002.24 252.713,975.226 253.272,985.591 253.831,941.579 254.39,940.534 254.95,955.331 255.509,981.479 256.068,973.398 256.627,985.418 257.187,982.753 257.746,977.617 258.305,989.102 258.864,997.389 259.424,991.794 259.983,1004.93 260.542,999.051 261.101,978.248 261.661,955.791 262.22,970.283 262.779,982.433 263.338,960.084 263.898,1024.21 264.457,1033.64 265.016,1061.01 265.575,1051.87 266.135,1060.94 266.694,1081.95 267.253,1089.1 267.812,1061.14 268.372,1066.79 268.931,1092.69 269.49,1114.82 270.049,1086.61 270.609,1077.88 271.168,1065.44 271.727,1006.36 272.286,1035.39 272.846,1066.12 273.405,1092.25 273.964,1035.54 274.523,1063.38 275.083,1090.42 275.642,1097.05 276.201,1082.94 276.76,1090.46 277.32,1079.67 277.879,1101.26 278.438,1089.9 278.997,1085.08 279.557,1078.27 280.116,1050.6 280.675,1042.14 281.234,1048.14 281.794,1056.59 282.353,1048.68 282.912,1056.7 283.471,1061.13 284.031,1052.26 284.59,1026.2 285.149,1015.78 285.708,1025.39 286.268,1034.27 286.827,1042.34 287.386,1052.42 287.945,1009.98 288.505,1020.99 289.064,1028.82 289.623,1003.39 290.182,1013.8 290.742,1022.48 291.301,1013.23 291.86,988.869 292.419,983.089 292.979,977.937 293.538,974.26 294.097,1023.73 294.656,968.756 295.216,950.298 295.775,963.794 296.334,975.556 296.893,975.886 297.453,950.976 298.012,977.499 298.571,990.094 299.13,969.664 299.69,950 300.249,945.373 300.808,959.511 301.368,986.603 301.927,982.028 302.486,978.218 303.045,973.907 303.605,985.121 304.164,997.686 304.723,976.905 305.282,988.274 305.842,984.382 306.401,977.252 306.96,1006.75 307.519,985.907 308.079,980.481 308.638,978.105 309.197,951.621 309.756,949.233 310.316,945.782 310.875,941.661 311.434,956.865 311.993,951.89 312.553,917.504 313.112,915.356 313.671,927.98 314.23,957.014 314.79,951.44 315.349,981.601 315.908,1008.03 316.467,1018.87 317.027,994.956 317.586,988.343 318.145,966.515 318.704,976.521 319.264,997.35 319.823,974.236 320.382,953.232 320.941,981.839 321.501,960.842 322.06,988.646 322.619,995.58 323.178,954.724 323.738,951.49 324.297,965.52 324.856,977.718 325.415,988.977 325.975,947.159 326.534,957.86 327.093,969.93 327.652,961.73 328.212,938.912 328.771,932.35 329.33,913.505 329.889,897.287 330.449,896.038 331.008,923.638 331.567,903.764 332.126,919.21 332.686,931.263 333.245,926.412 333.804,925.863 334.363,940.543 334.923,969.022 335.482,958.067 336.041,937.663 336.6,951.434 337.16,944.178 337.719,908.753 338.278,886.327 338.837,902.233 339.397,934.228 339.956,943.752 340.515,939.242 341.074,919.37 341.634,913.977 342.193,877.318 342.752,908.286 343.311,902.946 343.871,897.683 344.43,907.331 344.989,933.255 345.548,912.682 346.108,921.086 346.667,916.339 347.226,975.677 347.785,971.799 348.345,981.024 348.904,990.124 349.463,931.519 350.022,925.786 350.582,903.38 351.141,912.368 351.7,905.868 352.259,867.264 352.819,861.501 353.378,828.141 353.937,824.422 354.496,838.022 355.056,855.591 355.615,887.51 356.174,899.764 356.733,911.875 357.293,891.584 357.852,876.893 358.411,890.834 358.97,905.539 359.53,885.627 360.089,882.557 360.648,912.331 361.207,941.447 361.767,935.629 362.326,933.382 362.885,943.809 363.444,937.02 364.004,916.377 364.563,907.791 365.122,918.878 365.681,929.151 366.241,937.028 366.8,931.664 367.359,907.951 367.918,921.193 368.478,917.673 369.037,893.754 369.596,886.96 370.155,863.405 370.715,810.042 371.274,795.293 371.833,815.698 372.392,813.858 372.952,812.862 373.511,813.789 374.07,793.195 374.629,760.053 375.189,793.12 375.748,794.023 376.307,807.822 376.866,808.206 377.426,788.801 377.985,773.81 378.544,774.767 379.103,793.734 379.663,779.872 380.222,764.511 380.781,701.37 381.34,707.279 381.9,711.98 382.459,718.655 383.018,706.594 383.577,729.634 384.137,751.528 384.696,786.532 385.255,787.351 385.814,755.756 386.374,761.072 386.933,778.632 387.492,761.148 388.051,765.772 388.611,766.701 389.17,770.444 389.729,769.828 390.288,738.2 390.848,761.271 391.407,763.143 391.966,728.144 392.525,744.43 393.085,778.704 393.644,809.073 394.203,803.074 394.762,806.096 395.322,851.581 395.881,846.9 396.44,840.395 396.999,805.866 397.559,822.474 398.118,817.894 398.677,815.694 399.236,832.681 399.796,827.821 400.355,855.968 400.914,900.464 401.473,879.117 402.033,906.021 402.592,901.456 403.151,894.938 403.71,839.96 404.27,817.186 404.829,798.567 405.388,826.457 405.947,822.601 406.507,820.178 407.066,786.826 407.625,783.578 408.184,802.147 408.744,802.525 409.303,799.962 409.862,802.183 410.421,797.996 410.981,795.965 411.54,793.897 412.099,809.597 412.658,787.749 413.218,804.429 413.777,788.684 414.336,771.87 414.895,754.219 415.455,785.537 416.014,719.578 416.573,738.15 417.132,738.659 417.692,737.899 418.251,786.266 418.81,816.192 419.369,842.781 419.929,866.639 420.488,841.92 421.047,851.292 421.606,878.641 422.166,854.656 422.725,832.561 423.284,825.016 423.843,835.062 424.403,863.403 424.962,854.991 425.521,816.698 426.08,830.212 426.64,826.858 427.199,821.361 427.758,784.675 428.318,827.785 428.877,872.292 429.436,894.421 429.995,929.377 430.555,905.276 431.114,895.961 431.673,900.351 432.232,890.748 432.792,850.461 433.351,844.7 433.91,824.535 434.469,817.739 435.029,799.331 435.588,795.251 436.147,792.638 436.706,822.467 437.266,819.17 437.825,813.491 438.384,793.347 438.943,771.829 439.503,800.156 440.062,816.152 440.621,826.922 441.18,784.809 441.74,767.201 442.299,783.151 442.858,797.683 443.417,794.27 443.977,826.555 444.536,822.854 445.095,802.056 445.654,780.423 446.214,827.505 446.773,806.107 447.332,821.197 447.891,815.794 448.451,781.811 449.01,783.219 449.569,783.244 450.128,781.859 450.688,763.089 451.247,793.879 451.806,790.928 452.365,755.142 452.925,741.08 453.484,739.67 454.043,725.169 454.602,676.441 455.162,675.947 455.721,695.457 456.28,664.308 456.839,652.244 457.399,605.501 457.958,595.171 458.517,570.858 459.076,561.014 459.636,588.497 460.195,562.931 460.754,586.253 461.313,598.244 461.873,588.032 462.432,580.018 462.991,604.417 463.55,631.329 464.11,604.022 464.669,644.958 465.228,648.344 465.787,650.561 466.347,692.621 466.906,677.931 467.465,653.75 468.024,642.663 468.584,644.096 469.143,635.009 469.702,643.204 470.261,666.86 470.821,668.128 471.38,643.839 471.939,698.055 472.498,733 473.058,754.341 473.617,754.11 474.176,768.144 474.735,737.121 475.295,741.212 475.854,755.167 476.413,753.863 476.972,753.114 477.532,753.767 478.091,754.335 478.65,750.798 479.209,767.653 479.769,784.397 480.328,797.122 480.887,841.235 481.446,804.673 482.006,800.79 482.565,797.229 483.124,777.629 483.683,745.798 484.243,728.804 484.802,715.61 485.361,655.134 485.92,674.965 486.48,677.247 487.039,647.221 487.598,652.933 488.157,656.328 488.717,657.976 489.276,661.478 489.835,663.029 490.394,669.821 490.954,688.623 491.513,708.917 492.072,712.147 492.631,716.192 493.191,702.751 493.75,687.76 494.309,704.335 494.868,693.46 495.428,694.823 495.987,711.382 496.546,730.713 497.105,761.337 497.665,746.581 498.224,728.446 498.783,713.963 499.342,696.608 499.902,680.453 500.461,683.645 501.02,715.868 501.579,748.042 502.139,794.47 502.698,808.786 503.257,787.977 503.816,801.42 504.376,785.05 504.935,816.696 505.494,811.85 506.053,807.633 506.613,789.061 507.172,802.296 507.731,797.432 508.29,795.37 508.85,739.814 509.409,738.399 509.968,768.376 510.527,799.671 511.087,812.305 511.646,809.033 512.205,816.868 512.764,813.648 513.324,823.066 513.883,816.681 514.442,810.957 515.001,837.826 515.561,881.273 516.12,855.674 516.679,810.894 517.238,805.276 517.798,785.126 518.357,780.424 518.916,742.063 519.475,759.604 520.035,711.368 520.594,764.325 521.153,764.377 521.712,762.145 522.272,722.654 522.831,738.944 523.39,787.337 523.949,798.705 524.509,762.577 525.068,709.844 525.627,722.975 526.186,756.923 526.746,785.982 527.305,782.068 527.864,779.011 528.423,792.424 528.983,785.938 529.542,749.782 530.101,731.555 530.66,714.659 531.22,720.116 531.779,671.973 532.338,656.144 532.897,640.227 533.457,642.264 534.016,644.189 534.575,695.878 535.134,711.619 535.694,710.908 536.253,711.397 536.812,712.071 537.371,695.836 537.931,666.637 538.49,685.723 539.049,688.47 539.608,707.023 540.168,710.249 540.727,709.068 541.286,706.258 541.845,693.875 542.405,711.813 542.964,680.332 543.523,680.184 544.082,680.148 544.642,664.885 545.201,669.295 545.76,640.337 546.319,693.568 546.879,681.617 547.438,650.903 547.997,637.558 548.556,578.302 549.116,566.466 549.675,574.092 550.234,586.347 550.793,613.681 551.353,602.371 551.912,610.12 552.471,614.748 553.031,638.516 553.59,642.307 554.149,646.911 554.708,667.222 555.268,703.496 555.827,723.019 556.386,755.057 556.945,783.249 557.505,777.91 558.064,776.099 558.623,756.253 559.182,754.149 559.742,830.743 560.301,774.699 560.86,757.361 561.419,768.554 561.979,770.821 562.538,798.952 563.097,781.477 563.656,759.851 564.216,758.439 564.775,785.886 565.334,782.252 565.893,764.522 566.453,728.291 567.012,743.276 567.571,757.347 568.13,772.267 568.69,786.285 569.249,800.091 569.808,814.423 570.367,843.716 570.927,839.17 571.486,832.729 572.045,809.331 572.604,787.315 573.164,799.318 573.723,793.912 574.282,791.686 574.841,771.11 575.401,785.18 575.96,780.15 576.519,762.218 577.078,760.161 577.638,740.894 578.197,657.617 578.756,626.971 579.315,633.009 579.875,615 580.434,640.2 580.993,647.052 581.552,650.489 582.112,670.062 582.671,671.628 583.23,672.591 583.789,658.279 584.349,661.049 584.908,679.617 585.467,684.064 586.026,650.946 586.586,655.779 587.145,676.763 587.704,660.123 588.263,679.232 588.823,678.917 589.382,712.119 589.941,695.048 590.5,711.552 591.06,695.678 591.619,701.508 592.178,767.096 592.737,744.516 593.297,723.945 593.856,739.782 594.415,705.242 594.974,737.542 595.534,717.849 596.093,700.498 596.652,685.254 597.211,717.829 597.771,721.811 598.33,722.607 598.889,739.921 599.448,770.672 600.008,783.585 600.567,793.219 601.126,789.978 601.685,768.919 602.245,784.06 602.804,809.107 603.363,801.439 603.922,814.095 604.482,835.348 605.041,826.657 605.6,802.318 606.159,798.548 606.719,807.338 607.278,770.474 607.837,767.021 608.396,764.23 608.956,782.007 609.515,812.208 610.074,842.284 610.633,822.494 611.193,834.423 611.752,846.604 612.311,857.026 612.87,849.563 613.43,859.951 613.989,854.157 614.548,847.102 615.107,839.004 615.667,783.692 616.226,746.675 616.785,725.93 617.344,725.854 617.904,690.61 618.463,641.436 619.022,631.768 619.581,632.893 620.141,668.651 620.7,637.059 621.259,621.192 621.818,612.529 622.378,621.177 622.937,627.098 623.496,679.494 624.055,698.013 624.615,698.499 625.174,712.554 625.733,715.068 626.292,678.049 626.852,694.864 627.411,698.147 627.97,680.867 628.529,633.244 629.089,620.697 629.648,643.232 630.207,662.183 630.766,677.459 631.326,663.569 631.885,645.613 632.444,630.588 633.003,636.325 633.563,657.3 634.122,679.035 634.681,649.284 635.24,669.722 635.8,669.669 636.359,654.888 636.918,637.73 637.477,637.72 638.037,627.397 638.596,647.518 639.155,651.197 639.714,672.643 640.274,644.319 640.833,648.24 641.392,636.933 641.951,653.081 642.511,639.854 643.07,641.549 643.629,627.354 644.188,629.295 644.748,646.796 645.307,663.165 645.866,681.091 646.425,679.993 646.985,697.796 647.544,714.325 648.103,745.423 648.662,727.458 649.222,724.116 649.781,711.877 650.34,730.098 650.899,745.126 651.459,758.013 652.018,785.155 652.577,747.648 653.136,745.856 653.696,760.688 654.255,802.839 654.814,780.923 655.373,766.388 655.933,715.302 656.492,746.678 657.051,729.082 657.61,744.967 658.17,741.685 658.729,741.229 659.288,722.844 659.847,718.762 660.407,732.758 660.966,715.652 661.525,713.647 662.084,680.893 662.644,646.12 663.203,651.924 663.762,652.479 664.321,651.593 664.881,651.91 665.44,684.208 665.999,702.231 666.558,718.264 667.118,718.906 667.677,701.4 668.236,702.384 668.795,703.311 669.355,697.048 669.914,662.959 670.473,666.501 671.032,671.155 671.592,687.264 672.151,704.614 672.71,670.131 673.269,657.105 673.829,660.641 674.388,661.332 674.947,662.548 675.506,631.385 676.066,667.079 676.625,666.353 677.184,685.824 677.743,688.542 678.303,656.131 678.862,640.958 679.421,611.121 679.981,661.504 680.54,662.384 681.099,664.55 681.658,664.241 682.218,683.345 682.777,651.956 683.336,670.886 683.895,690.234 684.455,658.756 685.014,693.256 685.573,661.214 686.132,663.917 686.692,650.142 687.251,653.282 687.81,670.93 688.369,653.459 688.929,654.279 689.488,655.682 690.047,641.911 690.606,658.745 691.166,645.038 691.725,680.444 692.284,681.623 692.843,649.01 693.403,618.033 693.962,572.155 694.521,577.756 695.08,587.257 695.64,591.286 696.199,594.895 696.758,613.747 697.317,618.131 697.877,657.268 698.436,661.579 698.995,695.023 699.554,712.543 700.114,694.468 700.673,711.878 701.232,710.956 701.791,742.068 702.351,756.911 702.91,754.567 703.469,755.059 704.028,750.143 704.588,712.462 705.147,741.682 705.706,737.709 706.265,737.75 706.825,720.852 707.384,717.4 707.943,682.652 708.502,682.425 709.062,648.599 709.621,618.53 710.18,638.786 710.739,674.129 711.299,662.86 711.858,647.768 712.417,665.727 712.976,637.902 713.536,658.177 714.095,659.11 714.654,693.51 715.213,709.112 715.773,724.878 716.332,753.879 716.891,753.695 717.45,739.599 718.01,657.962 718.569,657.161 719.128,690.258 719.687,675.589 720.247,694.21 720.806,693.694 721.365,709.73 721.924,739.712 722.484,756.353 723.043,769.513 723.602,766.004 724.161,810.486 724.721,800.415 725.28,811.829 725.839,816.9 726.398,797.57 726.958,773.11 727.517,751.193 728.076,776.556 728.635,771.751 729.195,733.489 729.754,748.195 730.313,727.621 730.872,706.77 731.432,686.631 731.991,721.715 732.55,735.022 733.109,731.894 733.669,698.105 734.228,712.001 734.787,727.118 735.346,724.253 735.906,756.798 736.465,751.289 737.024,733.794 737.583,746.892 738.143,713.911 738.702,710.85 739.261,725.98 739.82,720.963 740.38,737.775 740.939,718.845 741.498,697.742 742.057,699.047 742.617,684.498 743.176,650.721 743.735,665.336 744.294,700.301 744.854,716.367 745.413,716.17 745.972,683.994 746.531,698.9 747.091,676.566 747.65,679.658 748.209,678.821 748.768,712.798 749.328,715.357 749.887,779.156 750.446,792.536 751.005,753.18 751.565,720.292 752.124,715.068 752.683,718.356 753.242,701.764 753.802,683.248 754.361,669.147 754.92,636.601 755.479,623.698 756.039,626.215 756.598,630.082 757.157,616.923 757.716,638.084 758.276,625.393 758.835,633.124 759.394,617.215 759.953,636.423 760.513,652.635 761.072,622.374 761.631,626.969 762.19,600.891 762.75,621.265 763.309,621.252 763.868,625.728 764.427,645.72 764.987,663.333 765.546,683.09 766.105,695.274 766.664,744.083 767.224,738.642 767.783,686.171 768.342,685.399 768.901,713.918 769.461,714.243 770.02,732.322 770.579,712.901 771.138,694.77 771.698,698.136 772.257,682.289 772.816,666.873 773.375,635.417 773.935,636.244 774.494,659.077 775.053,678.17 775.612,694.923 776.172,695.772 776.731,712.295 777.29,678.649 777.849,706.68 778.409,722.289 778.968,754.138 779.527,734.005 780.086,731.557 780.646,730.406 781.205,710.998 781.764,721.919 782.323,703.616 782.883,638.412 783.442,658.628 784.001,643.491 784.56,631.87 785.12,651.921 785.679,653.375 786.238,619.632 786.797,624.74 787.357,643.309 787.916,646.161 788.475,600.442 789.034,606.728 789.594,611.704 790.153,646.739 790.712,634.861 791.271,640.329 791.831,641.712 792.39,662.232 792.949,694.402 793.508,693.997 794.068,695.107 794.627,677.463 795.186,680.557 795.745,712.993 796.305,679.287 796.864,678.392 797.423,694.894 797.982,696.097 798.542,711.379 799.101,707.524 799.66,720.567 800.219,766.988 800.779,779.661 801.338,776.689 801.897,771.048 802.456,752.969 803.016,780.858 803.575,806.498 804.134,819.944 804.693,847.254 805.253,821.164 805.812,799.058 806.371,743.929 806.931,743.072 807.49,691.264 808.049,722.156 808.608,687.888 809.168,692.225 809.727,696.056 810.286,695.398 810.845,693.366 811.405,692.724 811.964,676.633 812.523,659.214 813.082,676.896 813.642,692.546 814.201,773.355 814.76,769.196 815.319,764.326 815.879,760.245 816.438,772.689 816.997,766.046 817.556,780.286 818.116,773.858 818.675,751.479 819.234,748.246 819.793,744.109 820.353,758.108 820.912,739.732 821.471,723.688 822.03,677.608 822.59,678.709 823.149,679.124 823.708,667.731 824.267,669.542 824.827,672.641 825.386,656.741 825.945,658.056 826.504,659.616 827.064,660.53 827.623,678.462 828.182,661.839 828.741,661.602 829.301,662.108 829.86,663.679 830.419,667.121 830.978,684.96 831.538,702.959 832.097,689.338 832.656,671.418 833.215,687.438 833.775,702.882 834.334,683.61 834.893,653.224 835.452,656.917 836.012,640.378 836.571,645.253 837.13,611.575 837.689,632.87 838.249,604.859 838.808,589.971 839.367,610.021 839.926,628.585 840.486,634.017 841.045,633.697 841.604,650.073 842.163,605.307 842.723,594.256 843.282,596.245 843.841,602.302 844.4,608.104 844.96,627.303 845.519,627.524 846.078,643.335 846.637,646.077 847.197,629.725 847.756,614.835 848.315,651.774 848.874,635.506 849.434,651.712 849.993,653.618 850.552,668.861 851.111,732.807 851.671,740.94 852.23,740.375 852.789,738.272 853.348,753.25 853.908,783.396 854.467,793.169 855.026,820.609 855.585,798.656 856.145,760.447 856.704,755.165 857.263,735.063 857.822,716.066 858.382,698.444 858.941,715.802 859.5,729.966 860.059,728.917 860.619,743.79 861.178,791.213 861.737,767.05 862.296,760.231 862.856,770.231 863.415,799.321 863.974,763.605 864.533,745.038 865.093,772.359 865.652,769.411 866.211,794.849 866.77,791.195 867.33,769.826 867.889,745.482 868.448,725.43 869.007,707.594 869.567,676.33 870.126,659.507 870.685,659.379 871.244,659.665 871.804,658.803 872.363,646.736 872.922,660.661 873.481,658.534 874.041,658.53 874.6,660.491 875.159,648.982 875.718,636.804 876.278,622.718 876.837,610.955 877.396,629.77 877.955,633.539 878.515,651.128 879.074,671.825 879.633,658.423 880.192,644.323 880.752,647.08 881.311,649.788 881.87,651.923 882.429,668.911 882.989,667.923 883.548,653.831 884.107,654.201 884.666,638.058 885.226,654.493 885.785,606.411 886.344,561.706 886.903,599.427 887.463,604.943 888.022,593.21 888.581,601.518 889.14,608.623 889.7,599.29 890.259,604.568 890.818,626.343 891.377,615.123 891.937,635.77 892.496,654.747 893.055,660.132 893.614,678.564 894.174,664.48 894.733,700.627 895.292,714.5 895.851,716.531 896.411,733.503 896.97,730.723 897.529,744.151 898.088,740.263 898.648,734.368 899.207,714.35 899.766,679.712 900.325,679.842 900.885,711.745 901.444,675.7 902.003,657.859 902.562,644.007 903.122,647.143 903.681,668.008 904.24,669.382 904.799,639.562 905.359,640.499 905.918,626.801 906.477,631.48 907.036,602.411 907.596,605.071 908.155,609.098 908.714,615.023 909.273,668.499 909.833,654.301 910.392,670.116 910.951,688.92 911.51,704.901 912.07,736.811 912.629,720.144 913.188,717.955 913.747,697.075 914.307,697.697 914.866,715.756 915.425,746.743 915.984,746.676 916.544,728.441 917.103,741.96 917.662,755.689 918.221,754.995 918.781,765.836 919.34,728.679 919.899,712.406 920.458,724.531 921.018,691.032 921.577,754.132 922.136,781.064 922.695,761.088 923.255,739.543 923.814,717.83 924.373,713.852 924.932,744.108 925.492,723.31 926.051,720.776 926.61,716.348 927.169,699.827 927.729,688.787 928.288,751.74 928.847,748.705 929.406,743.587 929.966,722.782 930.525,658.586 931.084,643.23 931.644,627.161 932.203,647.358 932.762,663.898 933.321,680.918 933.881,712.506 934.44,698.473 934.999,694.955 935.558,678.958 936.118,725.997 936.677,706.524 937.236,702.673 937.795,701.422 938.355,713.042 938.914,711.527 939.473,726.749 940.032,723.261 940.592,737.605 941.151,735.815 941.71,746.883 942.269,742.91 942.829,753.965 943.388,768.254 943.947,778.42 944.506,774.696 945.066,784.946 945.625,763.991 946.184,696.153 946.743,696.632 947.303,712.772 947.862,710.914 948.421,724.655 948.98,736.484 949.54,734.493 950.099,662.052 950.658,679.998 951.217,692.578 951.777,687.813 952.336,652.917 952.895,652.659 953.454,683.412 954.014,699.085 954.573,668.077 955.132,686.138 955.691,684.037 956.251,686.38 956.81,634.797 957.369,621.948 957.928,627.095 958.488,645.34 959.047,663.913 959.606,665.591 960.165,684.81 960.725,667.6 961.284,636.203 961.843,572.332 962.402,629.623 962.962,633.007 963.521,617.184 964.08,636.288 964.639,588.181 965.199,607.029 965.758,613.759 966.317,598.382 966.876,601.768 967.436,607.691 967.995,609.016 968.554,612.862 969.113,615.109 969.673,638.387 970.232,622.544 970.791,625.861 971.35,640.837 971.91,627.748 972.469,598.877 973.028,635.879 973.587,621.069 974.147,654.412 974.706,655.602 975.265,627.013 975.824,613.251 976.384,615.633 976.943,637.509 977.502,658.387 978.061,660.449 978.621,664.188 979.18,646.996 979.739,694.71 980.298,678.852 980.858,677.17 981.417,676.943 981.976,709.344 982.535,675.472 983.095,688.805 983.654,733.575 984.213,731.876 984.772,763.915 985.332,780.851 985.891,760.328 986.45,743.625 987.009,740.968 987.569,724.599 988.128,687.374 988.687,684.785 989.246,703.731 989.806,703.163 990.365,684.785 990.924,686.342 991.483,668.957 992.043,639.739 992.602,655.588 993.161,672.86 993.72,654.87 994.28,689.719 994.839,671.168 995.398,655.595 995.957,676.167 996.517,658.847 997.076,658.731 997.635,647.756 998.194,666.007 998.754,699.502 999.313,697.805 999.872,714.855 1000.43,695.9 1000.99,677.408 1001.55,681.88 1002.11,681.705 1002.67,697.684 1003.23,715.518 1003.79,727.754 1004.35,728.094 1004.91,721.356 1005.46,751.481 1006.02,761.56 1006.58,756.707 1007.14,771.568 1007.7,765.261 1008.26,774.783 1008.82,787.14 1009.38,784.578 1009.94,744.764 1010.5,692.093 1011.06,673.28 1011.62,690.2 1012.18,724.323 1012.73,710.01 1013.29,754.665 1013.85,734.512 1014.41,730.342 1014.97,740.985 1015.53,720.467 1016.09,702.078 1016.65,684.394 1017.21,668.374 1017.77,655.117 1018.33,661.875 1018.89,681.673 1019.45,716.147 1020.01,698.134 1020.56,677.049 1021.12,674.501 1021.68,691.531 1022.24,726.249 1022.8,743.729 1023.36,727.88 1023.92,743.327 1024.48,741.28 1025.04,751.243 1025.6,780.494 1026.16,724.577 1026.72,705.816 1027.28,707.657 1027.83,692.43 1028.39,664.164 1028.95,652.488 1029.51,670.75 1030.07,657.188 1030.63,658.555 1031.19,676.551 1031.75,711.532 1032.31,699.775 1032.87,697.633 1033.43,727.783 1033.99,745.257 1034.55,720.436 1035.1,719.365 1035.66,701.639 1036.22,698.565 1036.78,681.79 1037.34,698.319 1037.9,648.555 1038.46,682.923 1039.02,664.678 1039.58,699.063 1040.14,710.318 1040.7,722.733 1041.26,720.489 1041.82,750.879 1042.38,732.478 1042.93,711.468 1043.49,682.541 1044.05,686.164 1044.61,671.533 1045.17,657.029 1045.73,657.063 1046.29,672.806 1046.85,640.978 1047.41,678.387 1047.97,665.27 1048.53,616.31 1049.09,651.595 1049.65,635.712 1050.2,671.795 1050.76,683.294 1051.32,697.5 1051.88,727.181 1052.44,710.241 1053,657.501 1053.56,661.482 1054.12,647.337 1054.68,666.231 1055.24,681.9 1055.8,680.427 1056.36,678.909 1056.92,712.746 1057.48,741.398 1058.03,757.374 1058.59,755.085 1059.15,735.734 1059.71,750.466 1060.27,778.712 1060.83,772.886 1061.39,766.897 1061.95,731.955 1062.51,702.133 1063.07,715.095 1063.63,698.574 1064.19,697.961 1064.75,743.73 1065.3,723.949 1065.86,721.479 1066.42,719.43 1066.98,718.542 1067.54,720.65 1068.1,718.923 1068.66,736.28 1069.22,747.28 1069.78,726.857 1070.34,708.96 1070.9,712.144 1071.46,723.525 1072.02,706.613 1072.57,688.303 1073.13,703.677 1073.69,731.816 1074.25,712.2 1074.81,695.412 1075.37,694.664 1075.93,678.444 1076.49,613.109 1077.05,617.562 1077.61,619.561 1078.17,619.764 1078.73,608.602 1079.29,598.491 1079.85,600.773 1080.4,590.691 1080.96,590.252 1081.52,577.016 1082.08,567.621 1082.64,539.965 1083.2,580.199 1083.76,587.226 1084.32,608.603 1084.88,564.813 1085.44,584.465 1086,623.361 1086.56,624.003 1087.12,630.387 1087.67,584.134 1088.23,588.829 1088.79,595.139 1089.35,612.19 1089.91,620.909 1090.47,623.448 1091.03,626.133 1091.59,582.832 1092.15,554.071 1092.71,529.826 1093.27,572.092 1093.83,625.268 1094.39,625.673 1094.94,596.916 1095.5,616.123 1096.06,635.285 1096.62,637.398 1097.18,638.601 1097.74,641.303 1098.3,659.938 1098.86,647.105 1099.42,648.871 1099.98,618.14 1100.54,636.794 1101.1,654.338 1101.66,691.441 1102.22,677.515 1102.77,677.482 1103.33,676.956 1103.89,679.845 1104.45,666.127 1105.01,682.659 1105.57,651.205 1106.13,656.137 1106.69,643.872 1107.25,648.304 1107.81,665.871 1108.37,663.684 1108.93,664.681 1109.49,649.986 1110.04,668.78 1110.6,671.311 1111.16,675.191 1111.72,660.15 1112.28,677.85 1112.84,681.054 1113.4,699.669 1113.96,682.565 1114.52,713.382 1115.08,712.045 1115.64,726.881 1116.2,742.536 1116.76,755.736 1117.31,749.619 1117.87,750.175 1118.43,747.841 1118.99,778.086 1119.55,757.416 1120.11,771.094 1120.67,735.696 1121.23,717.527 1121.79,681.104 1122.35,681.643 1122.91,683.635 1123.47,669.413 1124.03,655.192 1124.59,652.212 1125.14,669.001 1125.7,656.275 1126.26,643.042 1126.82,641.633 1127.38,625.52 1127.94,611.321 1128.5,596.552 1129.06,621.755 1129.62,627.791 1130.18,645.294 1130.74,661.092 1131.3,647.656 1131.86,685.447 1132.41,733.824 1132.97,699.314 1133.53,678.66 1134.09,711.474 1134.65,740.455 1135.21,723.71 1135.77,723.897 1136.33,737.106 1136.89,737.094 1137.45,734.868 1138.01,699.11 1138.57,716.681 1139.13,732.967 1139.68,730.791 1140.24,691.466 1140.8,627.067 1141.36,630.311 1141.92,649.455 1142.48,636.028 1143.04,654.553 1143.6,687.094 1144.16,689.541 1144.72,705.256 1145.28,705.508 1145.84,717.219 1146.4,715.633 1146.96,708.843 1147.51,710.389 1148.07,706.638 1148.63,722.447 1149.19,748.906 1149.75,761.377 1150.31,771.197 1150.87,785.008 1151.43,776.046 1151.99,752.689 1152.55,768.261 1153.11,732.03 1153.67,729.107 1154.23,742.332 1154.78,752.762 1155.34,768.09 1155.9,782.039 1156.46,763.531 1157.02,728.15 1157.58,726.403 1158.14,738.66 1158.7,720.073 1159.26,701.968 1159.82,716.692 1160.38,714.475 1160.94,696.097 1161.5,691.864 1162.05,722.566 1162.61,700.586 1163.17,685.323 1163.73,682.896 1164.29,686.874 1164.85,686.999 1165.41,704.633 1165.97,721.233 1166.53,701.105 1167.09,749.409 1167.65,727.445 1168.21,722.73 1168.77,717.467 1169.33,730.57 1169.88,745.579 1170.44,743.261 1171,755.86 1171.56,749.168 1172.12,750.434 1172.68,762.42 1173.24,777.164 1173.8,802.62 1174.36,793.771 1174.92,787.24 1175.48,748.817 1176.04,726.935 1176.6,706.325 1177.15,719.761 1177.71,681.881 1178.27,681.894 1178.83,680.382 1179.39,675.705 1179.95,627.381 1180.51,615.259 1181.07,633.092 1181.63,617.564 1182.19,619.569 1182.75,606.483 1183.31,610.024 1183.87,629.944 1184.43,631.199 1184.98,633.699 1185.54,623.211 1186.1,610.933 1186.66,586.484 1187.22,609.451 1187.78,632.196 1188.34,634.144 1188.9,622.61 1189.46,627.61 1190.02,664.706 1190.58,648.794 1191.14,669.403 1191.7,670.73 1192.25,669.938 1192.81,671.227 1193.37,689.318 1193.93,656.373 1194.49,638.431 1195.05,639.588 1195.61,674.732 1196.17,673.371 1196.73,641.818 1197.29,643.224 1197.85,630.306 1198.41,617.927 1198.97,588.989 1199.52,610.102 1200.08,629.325 1200.64,614.437 1201.2,633.731 1201.76,667.517 1202.32,666.014 1202.88,681.007 1203.44,699.006 1204,698.387 1204.56,678.63 1205.12,695.444 1205.68,696.593 1206.24,707.772 1206.8,695.072 1207.35,678.806 1207.91,695.198 1208.47,679.364 1209.03,675.193 1209.59,661.036 1210.15,651.907 1210.71,637.95 1211.27,625.032 1211.83,657.457 1212.39,660.89 1212.95,645.038 1213.51,631.516 1214.07,617.558 1214.62,621.943 1215.18,644.167 1215.74,645.259 1216.3,648.637 1216.86,635.541 1217.42,650.158 1217.98,665.955 1218.54,700.26 1219.1,699.625 1219.66,747.129 1220.22,743.22 1220.78,723.435 1221.34,752.876 1221.89,736.464 1222.45,732.829 1223.01,713.556 1223.57,680.844 1224.13,667.712 1224.69,687.61 1225.25,675.855 1225.81,674.552 1226.37,661.644 1226.93,682.37 1227.49,686.21 1228.05,670.171 1228.61,705.018 1229.17,719.381 1229.72,735.058 1230.28,731.241 1230.84,726.412 1231.4,706.352 1231.96,676.202 1232.52,674.535 1233.08,645.662 1233.64,645.769 1234.2,663.209 1234.76,677.855 1235.32,660.494 1235.88,647.989 1236.44,651.307 1236.99,666.921 1237.55,649.404 1238.11,665.714 1238.67,651.383 1239.23,652.683 1239.79,668.582 1240.35,684.996 1240.91,683.872 1241.47,649.452 1242.03,630.986 1242.59,584.102 1243.15,602.878 1243.71,656.049 1244.26,659.075 1244.82,677.638 1245.38,727.821 1245.94,740.786 1246.5,741.248 1247.06,741.305 1247.62,753.562 1248.18,752.345 1248.74,747.851 1249.3,729.251 1249.86,758.762 1250.42,785.84 1250.98,766.263 1251.54,777.156 1252.09,786.645 1252.65,815.756 1253.21,805.825 1253.77,810.886 1254.33,753.791 1254.89,732.327 1255.45,714.548 1256.01,697.872 1256.57,680.812 1257.13,663.35 1257.69,664.561 1258.25,681.382 1258.81,685.682 1259.36,684.157 1259.92,669.572 1260.48,671.569 1261.04,653.664 1261.6,654.441 1262.16,609.068 1262.72,599.312 1263.28,557.709 1263.84,562.698 1264.4,569.639 1264.96,525.429 1265.52,497.813 1266.08,519.755 1266.63,513.092 1267.19,537.943 1267.75,546.568 1268.31,557.7 1268.87,564.757 1269.43,569.083 1269.99,541.942 1270.55,561.054 1271.11,566.213 1271.67,608.381 1272.23,631.245 1272.79,649.845 1273.35,686.604 1273.91,652.192 1274.46,667.448 1275.02,666.621 1275.58,620.906 1276.14,608.712 1276.7,630.44 1277.26,662.956 1277.82,649.213 1278.38,636.447 1278.94,640.628 1279.5,641.11 1280.06,644.99 1280.62,643.63 1281.18,632.14 1281.73,652.745 1282.29,673.979 1282.85,691.801 1283.41,708.178 1283.97,690.569 1284.53,691.907 1285.09,692.424 1285.65,673.534 1286.21,673.382 1286.77,690.677 1287.33,655.23 1287.89,687.838 1288.45,702.528 1289,716.587 1289.56,715.457 1290.12,729.162 1290.68,746.567 1291.24,759.279 1291.8,772.392 1292.36,785.074 1292.92,730.408 1293.48,711.509 1294.04,695.387 1294.6,709.146 1295.16,714.273 1295.72,696.85 1296.28,680.772 1296.83,632.298 1297.39,665.812 1297.95,667.27 1298.51,669.51 1299.07,672.108 1299.63,658.841 1300.19,672.769 1300.75,638.15 1301.31,640.79 1301.87,660.928 1302.43,645.369 1302.99,662.426 1303.55,675.886 1304.1,674.15 1304.66,690.96 1305.22,692.649 1305.78,723.573 1306.34,736.429 1306.9,735.465 1307.46,765.912 1308.02,794.97 1308.58,803.064 1309.14,785.5 1309.7,797.393 1310.26,810.476 1310.82,787.448 1311.38,813.487 1311.93,808.591 1312.49,769.454 1313.05,766.58 1313.61,811.338 1314.17,819.88 1314.73,779.407 1315.29,775.529 1315.85,769.077 1316.41,765.1 1316.97,744.977 1317.53,711.116 1318.09,712.155 1318.65,708.069 1319.2,691.12 1319.76,739.472 1320.32,720.748 1320.88,734.639 1321.44,778.982 1322,754.561 1322.56,767.758 1323.12,762.991 1323.68,760.686 1324.24,742.33 1324.8,738.441 1325.36,736.253 1325.92,718.508 1326.47,715.511 1327.03,714.451 1327.59,646.448 1328.15,664.44 1328.71,726.432 1329.27,708.307 1329.83,705.347 1330.39,688.552 1330.95,718.807 1331.51,718.14 1332.07,713.942 1332.63,678.659 1333.19,664.329 1333.75,663.9 1334.3,699.941 1334.86,683.979 1335.42,669.279 1335.98,669.893 1336.54,656.137 1337.1,672.635 1337.66,672.985 1338.22,676.481 1338.78,673.355 1339.34,670.301 1339.9,685.671 1340.46,667.709 1341.02,682.603 1341.57,665.173 1342.13,649.264 1342.69,665.402 1343.25,650.463 1343.81,653.321 1344.37,651.388 1344.93,653.237 1345.49,620.217 1346.05,542.129 1346.61,533.591 1347.17,523.302 1347.73,533.765 1348.29,558.25 1348.84,565.333 1349.4,601.02 1349.96,606.507 1350.52,658.837 1351.08,646.242 1351.64,698.418 1352.2,713.705 1352.76,716.188 1353.32,714.404 1353.88,696.316 1354.44,682.459 1355,699.2 1355.56,715.517 1356.12,713.82 1356.67,710.827 1357.23,681.005 1357.79,681.738 1358.35,683.219 1358.91,697.922 1359.47,715.191 1360.03,713.173 1360.59,694.976 1361.15,712.57 1361.71,743.681 1362.27,709.192 1362.83,727.916 1363.39,676.211 1363.94,676.368 1364.5,661.501 1365.06,662.274 1365.62,681.082 1366.18,698.84 1366.74,701.468 1367.3,707.87 1367.86,718.035 1368.42,718.634 1368.98,767.99 1369.54,800.322 1370.1,775.563 1370.66,768.475 1371.21,796.629 1371.77,808.772 1372.33,801.914 1372.89,827.923 1373.45,833.473 1374.01,841.745 1374.57,850.203 1375.13,823.709 1375.69,766.041 1376.25,749.221 1376.81,774.94 1377.37,735.694 1377.93,719.265 1378.49,716.046 1379.04,691.774 1379.6,656.88 1380.16,658.941 1380.72,644.063 1381.28,643.636 1381.84,598.152 1382.4,608.43 1382.96,596.557 1383.52,617.694 1384.08,621.674 1384.64,625.567 1385.2,594.308 1385.76,567.716 1386.31,594.192 1386.87,599.48 1387.43,601.743 1387.99,601.72 1388.55,605.002 1389.11,625.841 1389.67,656.499 1390.23,654.222 1390.79,641.849 1391.35,599.805 1391.91,652.152 1392.47,655.38 1393.03,661.486 1393.58,663.299 1394.14,665.319 1394.7,667.275 1395.26,652.64 1395.82,650.43 1396.38,671.404 1396.94,670.85 1397.5,672.914 1398.06,654.275 1398.62,690.07 1399.18,692.32 1399.74,676.255 1400.3,678.418 1400.86,677.833 1401.41,678.925 1401.97,676.04 1402.53,673.516 1403.09,690.285 1403.65,691.597 1404.21,690.261 1404.77,689.209 1405.33,653.794 1405.89,635.733 1406.45,670.402 1407.01,657.757 1407.57,657.81 1408.13,659.656 1408.68,660.135 1409.24,648.665 1409.8,602.578 1410.36,619.977 1410.92,640.958 1411.48,659.659 1412.04,693.355 1412.6,674.41 1413.16,658.209 1413.72,662.28 1414.28,661.161 1414.84,663.084 1415.4,679.013 1415.95,696.24 1416.51,708.744 1417.07,704.513 1417.63,700.316 1418.19,732.302 1418.75,684.443 1419.31,698.616 1419.87,668.315 1420.43,668.567 1420.99,672.08 1421.55,686.564 1422.11,702.54 1422.67,684.814 1423.23,700.498 1423.78,701.789 1424.34,684.731 1424.9,686.37 1425.46,684.824 1426.02,700.88 1426.58,734.657 1427.14,748.163 1427.7,731.305 1428.26,712.361 1428.82,727.289 1429.38,727.917 1429.94,725.363 1430.5,723.335 1431.05,721.054 1431.61,686.209 1432.17,672.253 1432.73,673.883 1433.29,660.788 1433.85,708.423 1434.41,708.962 1434.97,736.762 1435.53,732.927 1436.09,762.892 1436.65,777.385 1437.21,774.989 1437.77,769.069 1438.33,748.769 1438.88,762.41 1439.44,739.896 1440,769.93 1440.56,781.911 1441.12,741.675 1441.68,742.494 1442.24,691.747 1442.8,690.557 1443.36,689.773 1443.92,692.062 1444.48,673.487 1445.04,673.362 1445.6,691.535 1446.15,692.56 1446.71,721.434 1447.27,722.429 1447.83,718 1448.39,715.184 1448.95,709.275 1449.51,737.983 1450.07,752.9 1450.63,754.116 1451.19,749.414 1451.75,741.171 1452.31,722.12 1452.87,738.03 1453.42,735.535 1453.98,733.929 1454.54,732.493 1455.1,714.716 1455.66,678.564 1456.22,662.039 1456.78,663.437 1457.34,663.305 1457.9,634.329 1458.46,635.832 1459.02,652.101 1459.58,654.684 1460.14,655.478 1460.7,691.904 1461.25,722.24 1461.81,704.664 1462.37,686.965 1462.93,738.266 1463.49,715.531 1464.05,695.82 1464.61,727.486 1465.17,674.098 1465.73,699.511 1466.29,716.49 1466.85,715.719 1467.41,713.967 1467.97,716.401 1468.52,731.188 1469.08,712.43 1469.64,694.544 1470.2,679.065 1470.76,674.324 1471.32,672.983 1471.88,658.328 1472.44,724.565 1473,692.333 1473.56,707.409 1474.12,640.741 1474.68,641.987 1475.24,646.609 1475.79,651.402 1476.35,653.99 1476.91,656.769 1477.47,595.635 1478.03,601.292 1478.59,639.899 1479.15,644.109 1479.71,628.886 1480.27,602.542 1480.83,606.631 1481.39,610.715 1481.95,617.772 1482.51,638.505 1483.07,636.937 1483.62,610.266 1484.18,600.424 1484.74,618.768 1485.3,621.226 1485.86,622.176 1486.42,627.855 1486.98,610.614 1487.54,598.519 1488.1,604.752 1488.66,609.709 1489.22,582.009 1489.78,570.376 1490.34,574.268 1490.89,615.728 1491.45,619.166 1492.01,624.581 1492.57,612.632 1493.13,635.553 1493.69,638.999 1494.25,656.455 1494.81,609.014 1495.37,576.85 1495.93,615.695 1496.49,575.991 1497.05,599.085 1497.61,586.716 1498.16,593.801 1498.72,617.287 1499.28,605.486 1499.84,592.616 1500.4,595.415 1500.96,616.186 1501.52,621.087 1502.08,626.945 1502.64,614.329 1503.2,635.821 1503.76,653.637 1504.32,653.789 1504.88,641.631 1505.44,662.288 1505.99,695.382 1506.55,727.115 1507.11,724.481 1507.67,738.589 1508.23,723.897 1508.79,709.329 1509.35,707.953 1509.91,723.046 1510.47,722.902 1511.03,722.781 1511.59,722.102 1512.15,720.017 1512.71,750.608 1513.26,747.541 1513.82,731.432 1514.38,716.331 1514.94,698.588 1515.5,750.052 1516.06,776.133 1516.62,788.046 1517.18,769.509 1517.74,766.29 1518.3,762.061 1518.86,776.38 1519.42,772.634 1519.98,763.967 1520.53,779.34 1521.09,793.354 1521.65,818.908 1522.21,764.52 1522.77,763.755 1523.33,758.645 1523.89,740.332 1524.45,722.012 1525.01,655.813 1525.57,675.915 1526.13,674.402 1526.69,692.837 1527.25,707.095 1527.81,721.712 1528.36,687.666 1528.92,703.576 1529.48,698.653 1530.04,696.181 1530.6,710.327 1531.16,711.651 1531.72,708.852 1532.28,709.072 1532.84,751.333 1533.4,730.194 1533.96,697.589 1534.52,731.639 1535.08,710.363 1535.63,727.454 1536.19,694.472 1536.75,711.302 1537.31,692.426 1537.87,675.156 1538.43,660.174 1538.99,680.98 1539.55,699.872 1540.11,683.959 1540.67,704.271 1541.23,719.935 1541.79,706.128 1542.35,690.432 1542.9,689.772 1543.46,673.613 1544.02,629.209 1544.58,650.01 1545.14,686.054 1545.7,701.57 1546.26,718.806 1546.82,735.591 1547.38,749.362 1547.94,726.877 1548.5,726.968 1549.06,728.443 1549.62,722.804 1550.18,750.696 1550.73,763.857 1551.29,763.514 1551.85,742.612 1552.41,740.948 1552.97,755.055 1553.53,764.905 1554.09,778.703 1554.65,771.217 1555.21,767.48 1555.77,744.904 1556.33,740.848 1556.89,708.527 1557.45,736.928 1558,748.991 1558.56,732.481 1559.12,729.134 1559.68,728.954 1560.24,709.731 1560.8,673.464 1561.36,671.407 1561.92,654.914 1562.48,718.001 1563.04,731.506 1563.6,694.654 1564.16,680.172 1564.72,651.84 1565.28,622.919 1565.83,624.988 1566.39,579.397 1566.95,599.295 1567.51,619.131 1568.07,638.502 1568.63,589.399 1569.19,642.42 1569.75,640.489 1570.31,626.545 1570.87,610.093 1571.43,598.241 1571.99,584.705 1572.55,592.985 1573.1,615.838 1573.66,635.427 1574.22,638.557 1574.78,624.391 1575.34,611.5 1575.9,612.901 1576.46,616.158 1577.02,604.807 1577.58,625.474 1578.14,675.162 1578.7,674.439 1579.26,674.118 1579.82,674.733 1580.37,672.33 1580.93,670.031 1581.49,721.412 1582.05,732.508 1582.61,731.695 1583.17,728.407 1583.73,726.365 1584.29,723.983 1584.85,718.629 1585.41,718.002 1585.97,734.58 1586.53,715.63 1587.09,733.194 1587.65,716.032 1588.2,714.919 1588.76,726.569 1589.32,706.287 1589.88,689.922 1590.44,685.624 1591,682.485 1591.56,682.966 1592.12,651.263 1592.68,651.911 1593.24,655.018 1593.8,639.851 1594.36,656.215 1594.92,656.008 1595.47,673.755 1596.03,689.728 1596.59,706.155 1597.15,715.45 1597.71,697.724 1598.27,712.233 1598.83,710.86 1599.39,709.188 1599.95,707.258 1600.51,719.784 1601.07,749.773 1601.63,764.415 1602.19,774.694 1602.74,769.966 1603.3,769.338 1603.86,781.331 1604.42,760.413 1604.98,741.659 1605.54,754.982 1606.1,764.736 1606.66,762.071 1607.22,737.326 1607.78,732.504 1608.34,730.564 1608.9,726.552 1609.46,676.233 1610.02,657.794 1610.57,662.39 1611.13,648.933 1611.69,680.837 1612.25,662.3 1612.81,648.072 1613.37,649.948 1613.93,651.343 1614.49,684.884 1615.05,670.892 1615.61,672.292 1616.17,655.602 1616.73,692.369 1617.29,693.221 1617.84,708.625 1618.4,693.396 1618.96,722.801 1619.52,717.496 1620.08,713.581 1620.64,711.419 1621.2,709.675 1621.76,725.671 1622.32,705.506 1622.88,692.161 1623.44,677.224 1624,690.608 1624.56,706.328 1625.11,689.662 1625.67,690.097 1626.23,657.12 1626.79,625.596 1627.35,582.169 1627.91,586.972 1628.47,590.408 1629.03,644.513 1629.59,675.696 1630.15,657.586 1630.71,642.309 1631.27,676.359 1631.83,695.471 1632.39,710.648 1632.94,677.353 1633.5,677.346 1634.06,706.458 1634.62,688.526 1635.18,690.032 1635.74,689.84 1636.3,721.588 1636.86,720.381 1637.42,734.018 1637.98,714.101 1638.54,694.768 1639.1,628.955 1639.66,648.907 1640.21,649.484 1640.77,636.621 1641.33,636.852 1641.89,608.305 1642.45,615.838 1643.01,620.368 1643.57,625.64 1644.13,661.762 1644.69,647.498 1645.25,679.569 1645.81,696.128 1646.37,649.306 1646.93,637.812 1647.48,625.674 1648.04,615.033 1648.6,604.146 1649.16,626.206 1649.72,610.644 1650.28,649.974 1650.84,602.634 1651.4,625.132 1651.96,576.75 1652.52,584.804 1653.08,609.136 1653.64,611.558 1654.2,598.692 1654.76,601.85 1655.31,636.004 1655.87,623.362 1656.43,648.817 1656.99,667.089 1657.55,648.815 1658.11,667.838 1658.67,650.321 1659.23,654.747 1659.79,659.802 1660.35,641.177 1660.91,661.407 1661.47,679.981 1662.03,680.655 1662.58,684.146 1663.14,635.024 1663.7,655.179 1664.26,672.668 1664.82,707.378 1665.38,710.243 1665.94,692.618 1666.5,658.966 1667.06,658.426 1667.62,656.142 1668.18,654.683 1668.74,670.535 1669.3,686.241 1669.85,718.543 1670.41,717.421 1670.97,732.276 1671.53,761.926 1672.09,792.84 1672.65,741.081 1673.21,737.867 1673.77,722.319 1674.33,735.867 1674.89,764.977 1675.45,731.409 1676.01,699.054 1676.57,699.959 1677.13,685.443 1677.68,686.395 1678.24,651.417 1678.8,635.873 1679.36,637.18 1679.92,640.704 1680.48,644.754 1681.04,631.267 1681.6,667.111 1682.16,682.864 1682.72,666.521 1683.28,718.234 1683.84,717.117 1684.4,736.174 1684.95,722.009 1685.51,766.501 1686.07,732.463 1686.63,715.276 1687.19,713.012 1687.75,730.821 1688.31,728.983 1688.87,710.337 1689.43,725.629 1689.99,724.44 1690.55,756.493 1691.11,720.489 1691.67,704.72 1692.23,702.139 1692.78,670.944 1693.34,688.857 1693.9,719.179 1694.46,733.687 1695.02,695.477 1695.58,744.319 1696.14,745.113 1696.7,731.808 1697.26,743.704 1697.82,736.321 1698.38,716.936 1698.94,701.117 1699.5,683.854 1700.05,668.281 1700.61,672.548 1701.17,658.635 1701.73,675.209 1702.29,676.709 1702.85,676.444 1703.41,676.578 1703.97,674.9 1704.53,676.971 1705.09,706.632 1705.65,705.357 1706.21,688.167 1706.77,674.454 1707.32,639.391 1707.88,672.515 1708.44,675.049 1709,655.927 1709.56,673.382 1710.12,673.278 1710.68,675.587 1711.24,675.232 1711.8,690.338 1712.36,704.947 1712.92,670.247 1713.48,655.864 1714.04,674.558 1714.6,695.422 1715.15,678.843 1715.71,665.071 1716.27,672.223 1716.83,670.091 1717.39,668.067 1717.95,701.52 1718.51,669.603 1719.07,716.664 1719.63,731.663 1720.19,745.405 1720.75,758.504 1721.31,737.709 1721.87,716.969 1722.42,747.304 1722.98,739.726 1723.54,719.81 1724.1,719.019 1724.66,699.353 1725.22,665.84 1725.78,672.766 1726.34,637.777 1726.9,654.614 1727.46,643.259 1728.02,660.547 1728.58,678.934 1729.14,678.188 1729.69,711.225 1730.25,722.353 1730.81,689.108 1731.37,687.969 1731.93,692.145 1732.49,706.199 1733.05,706.622 1733.61,704.778 1734.17,717.666 1734.73,712.028 1735.29,723.296 1735.85,734.867 1736.41,717.22 1736.97,702.907 1737.52,701.181 1738.08,701.143 1738.64,747.982 1739.2,777.328 1739.76,758.097 1740.32,739.861 1740.88,771.478 1741.44,721.675 1742,720.328 1742.56,733.475 1743.12,665.184 1743.68,682.272 1744.24,684.689 1744.79,686.05 1745.35,638.844 1745.91,606.744 1746.47,612.538 1747.03,601.886 1747.59,656.314 1748.15,641.944 1748.71,645.232 1749.27,665.345 1749.83,649.917 1750.39,663.784 1750.95,679.046 1751.51,680.076 1752.06,665.755 1752.62,666.316 1753.18,664.798 1753.74,666.702 1754.3,674.111 1754.86,704.715 1755.42,720.703 1755.98,716.819 1756.54,698.284 1757.1,713.348 1757.66,713.631 1758.22,711.291 1758.78,714.057 1759.34,760.718 1759.89,754.432 1760.45,699.046 1761.01,695.28 1761.57,691.669 1762.13,706.814 1762.69,739.157 1763.25,737.031 1763.81,734.181 1764.37,683.252 1764.93,695.462 1765.49,710.407 1766.05,724.672 1766.61,691.211 1767.16,706.937 1767.72,720.834 1768.28,719.602 1768.84,699.377 1769.4,711.445 1769.96,722.621 1770.52,720.086 1771.08,721.895 1771.64,683.275 1772.2,666.867 1772.76,680.444 1773.32,679.062 1773.88,650.175 1774.43,651.358 1774.99,669.789 1775.55,653.643 1776.11,671.232 1776.67,638.802 1777.23,641.43 1777.79,660.224 1778.35,644.582 1778.91,647.139 1779.47,664.543 1780.03,665.15 1780.59,695.412 1781.15,727.309 1781.71,791.265 1782.26,756.354 1782.82,802.646 1783.38,781.331 1783.94,759.161 1784.5,741.947 1785.06,722.241 1785.62,757.784 1786.18,738.582 1786.74,765.067 1787.3,764.476 1787.86,760.748 1788.42,776.805 1788.98,787.521 1789.53,783.062 1790.09,779.018 1790.65,758.487 1791.21,754.262 1791.77,746.96 1792.33,757.817 1792.89,755.659 1793.45,736.405 1794.01,766.056 1794.57,695.419 1795.13,756.949 1795.69,769.326 1796.25,795.795 1796.8,822.036 1797.36,815.33 1797.92,797.515 1798.48,792.168 1799.04,771.081 1799.6,765.032 1800.16,760.082 1800.72,769.471 1801.28,763.294 1801.84,739.91 1802.4,767.934 1802.96,729.808 1803.52,727.164 1804.08,739.969 1804.63,749.742 1805.19,713.833 1805.75,678.179 1806.31,677.879 1806.87,694.578 1807.43,692.808 1807.99,706.209 1808.55,703.848 1809.11,718.075 1809.67,715.247 1810.23,708.932 1810.79,741.131 1811.35,705.6 1811.9,706.998 1812.46,688.778 1813.02,668.779 1813.58,653.808 1814.14,622.538 1814.7,642.965 1815.26,663.194 1815.82,664.346 1816.38,681.038 1816.94,650.932 1817.5,636.067 1818.06,589.397 1818.62,612.674 1819.18,618.861 1819.73,619.621 1820.29,634.831 1820.85,639.578 1821.41,640.265 1821.97,692.238 1822.53,726.721 1823.09,710.102 1823.65,693.941 1824.21,657.705 1824.77,677.891 1825.33,659.896 1825.89,645.491 1826.45,616.351 1827,653.362 1827.56,654.659 1828.12,606.14 1828.68,575.819 1829.24,581.463 1829.8,600.536 1830.36,621.874 1830.92,613.221 1831.48,631.183 1832.04,616.841 1832.6,669.076 1833.16,667.363 1833.72,682.727 1834.27,649.705 1834.83,654.17 1835.39,655.022 1835.95,642.305 1836.51,643.256 1837.07,614.243 1837.63,585.789 1838.19,593.096 \"/>\n<path clip-path=\"url(#clip443)\" d=\"M720.247 692.458 L720.806 692.458 L721.365 692.458 L721.924 692.458 L722.484 692.458 L723.043 692.458 L723.602 692.458 L724.161 692.458 L724.721 692.458 L725.28 692.458 L725.839 692.458 L726.398 692.458 L726.958 692.458 L727.517 692.458 L728.076 692.458 L728.635 692.458 L729.195 692.458 L729.754 692.458 L730.313 692.458 L730.872 692.458 L731.432 692.458 L731.991 692.458 L732.55 692.458 L733.109 692.458 L733.669 692.458 L734.228 692.458 L734.787 692.458 L735.346 692.458 L735.906 692.458 L736.465 692.458 L737.024 692.458 L737.583 692.458 L738.143 692.458 L738.702 692.458 L739.261 692.458 L739.82 692.458 L740.38 692.458 L740.939 692.458 L741.498 692.458 L742.057 692.458 L742.617 692.458 L743.176 692.458 L743.735 692.458 L744.294 692.458 L744.854 692.458 L745.413 692.458 L745.972 692.458 L746.531 692.458 L747.091 692.458 L747.65 692.458 L748.209 692.458 L748.768 692.458 L749.328 692.458 L749.887 692.458 L750.446 692.458 L751.005 692.458 L751.565 692.458 L752.124 692.458 L752.683 692.458 L753.242 692.458 L753.802 692.458 L754.361 692.458 L754.92 692.458 L755.479 692.458 L756.039 692.458 L756.598 692.458 L757.157 692.458 L757.716 692.458 L758.276 692.458 L758.835 692.458 L759.394 692.458 L759.953 692.458 L760.513 692.458 L761.072 692.458 L761.631 692.458 L762.19 692.458 L762.75 692.458 L763.309 692.458 L763.868 692.458 L764.427 692.458 L764.987 692.458 L765.546 692.458 L766.105 692.458 L766.664 692.458 L767.224 692.458 L767.783 692.458 L768.342 692.458 L768.901 692.458 L769.461 692.458 L770.02 692.458 L770.579 692.458 L771.138 692.458 L771.698 692.458 L772.257 692.458 L772.816 692.458 L773.375 692.458 L773.935 692.458 L774.494 692.458 L775.053 692.458 L775.612 692.458 L776.172 692.458 L776.731 692.458 L777.29 692.458 L777.849 692.458 L778.409 692.458 L778.968 692.458 L779.527 692.458 L780.086 692.458 L780.646 692.458 L781.205 692.458 L781.764 692.458 L782.323 692.458 L782.883 692.458 L783.442 692.458 L784.001 692.458 L784.56 692.458 L785.12 692.458 L785.679 692.458 L786.238 692.458 L786.797 692.458 L787.357 692.458 L787.916 692.458 L788.475 692.458 L789.034 692.458 L789.594 692.458 L790.153 692.458 L790.712 692.458 L791.271 692.458 L791.831 692.458 L792.39 692.458 L792.949 692.458 L793.508 692.458 L794.068 692.458 L794.627 692.458 L795.186 692.458 L795.745 692.458 L796.305 692.458 L796.864 692.458 L797.423 692.458 L797.982 692.458 L798.542 692.458 L799.101 692.458 L799.66 692.458 L800.219 692.458 L800.779 692.458 L801.338 692.458 L801.897 692.458 L802.456 692.458 L803.016 692.458 L803.575 692.458 L804.134 692.458 L804.693 692.458 L805.253 692.458 L805.812 692.458 L806.371 692.458 L806.931 692.458 L807.49 692.458 L808.049 692.458 L808.608 692.458 L809.168 692.458 L809.727 692.458 L810.286 692.458 L810.845 692.458 L811.405 692.458 L811.964 692.458 L812.523 692.458 L813.082 692.458 L813.642 692.458 L814.201 692.458 L814.76 692.458 L815.319 692.458 L815.879 692.458 L816.438 692.458 L816.997 692.458 L817.556 692.458 L818.116 692.458 L818.675 692.458 L819.234 692.458 L819.793 692.458 L820.353 692.458 L820.912 692.458 L821.471 692.458 L822.03 692.458 L822.59 692.458 L823.149 692.458 L823.708 692.458 L824.267 692.458 L824.827 692.458 L825.386 692.458 L825.945 692.458 L826.504 692.458 L827.064 692.458 L827.623 692.458 L828.182 692.458 L828.741 692.458 L829.301 692.458 L829.86 692.458 L830.419 692.458 L830.978 692.458 L831.538 692.458 L832.097 692.458 L832.656 692.458 L833.215 692.458 L833.775 692.458 L834.334 692.458 L834.893 692.458 L835.452 692.458 L836.012 692.458 L836.571 692.458 L837.13 692.458 L837.689 692.458 L838.249 692.458 L838.808 692.458 L839.367 692.458 L839.926 692.458 L840.486 692.458 L841.045 692.458 L841.604 692.458 L842.163 692.458 L842.723 692.458 L843.282 692.458 L843.841 692.458 L844.4 692.458 L844.96 692.458 L845.519 692.458 L846.078 692.458 L846.637 692.458 L847.197 692.458 L847.756 692.458 L848.315 692.458 L848.874 692.458 L849.434 692.458 L849.993 692.458 L850.552 692.458 L851.111 692.458 L851.671 692.458 L852.23 692.458 L852.789 692.458 L853.348 692.458 L853.908 692.458 L854.467 692.458 L855.026 692.458 L855.585 692.458 L856.145 692.458 L856.704 692.458 L857.263 692.458 L857.822 692.458 L858.382 692.458 L858.941 692.458 L859.5 692.458 L860.059 692.458 L860.619 692.458 L861.178 692.458 L861.737 692.458 L862.296 692.458 L862.856 692.458 L863.415 692.458 L863.974 692.458 L864.533 692.458 L865.093 692.458 L865.652 692.458 L866.211 692.458 L866.77 692.458 L867.33 692.458 L867.889 692.458 L868.448 692.458 L869.007 692.458 L869.567 692.458 L870.126 692.458 L870.685 692.458 L871.244 692.458 L871.804 692.458 L872.363 692.458 L872.922 692.458 L873.481 692.458 L874.041 692.458 L874.6 692.458 L875.159 692.458 L875.718 692.458 L876.278 692.458 L876.837 692.458 L877.396 692.458 L877.955 692.458 L878.515 692.458 L879.074 692.458 L879.633 692.458 L880.192 692.458 L880.752 692.458 L881.311 692.458 L881.87 692.458 L882.429 692.458 L882.989 692.458 L883.548 692.458 L884.107 692.458 L884.666 692.458 L885.226 692.458 L885.785 692.458 L886.344 692.458 L886.903 692.458 L887.463 692.458 L888.022 692.458 L888.581 692.458 L889.14 692.458 L889.7 692.458 L890.259 692.458 L890.818 692.458 L891.377 692.458 L891.937 692.458 L892.496 692.458 L893.055 692.458 L893.614 692.458 L894.174 692.458 L894.733 692.458 L895.292 692.458 L895.851 692.458 L896.411 692.458 L896.97 692.458 L897.529 692.458 L898.088 692.458 L898.648 692.458 L899.207 692.458 L899.766 692.458 L900.325 692.458 L900.885 692.458 L901.444 692.458 L902.003 692.458 L902.562 692.458 L903.122 692.458 L903.681 692.458 L904.24 692.458 L904.799 692.458 L905.359 692.458 L905.918 692.458 L906.477 692.458 L907.036 692.458 L907.596 692.458 L908.155 692.458 L908.714 692.458 L909.273 692.458 L909.833 692.458 L910.392 692.458 L910.951 692.458 L911.51 692.458 L912.07 692.458 L912.629 692.458 L913.188 692.458 L913.747 692.458 L914.307 692.458 L914.866 692.458 L915.425 692.458 L915.984 692.458 L916.544 692.458 L917.103 692.458 L917.662 692.458 L918.221 692.458 L918.781 692.458 L919.34 692.458 L919.899 692.458 L920.458 692.458 L921.018 692.458 L921.577 692.458 L922.136 692.458 L922.695 692.458 L923.255 692.458 L923.814 692.458 L924.373 692.458 L924.932 692.458 L925.492 692.458 L926.051 692.458 L926.61 692.458 L927.169 692.458 L927.729 692.458 L928.288 692.458 L928.847 692.458 L929.406 692.458 L929.966 692.458 L930.525 692.458 L931.084 692.458 L931.644 692.458 L932.203 692.458 L932.762 692.458 L933.321 692.458 L933.881 692.458 L934.44 692.458 L934.999 692.458 L935.558 692.458 L936.118 692.458 L936.677 692.458 L937.236 692.458 L937.795 692.458 L938.355 692.458 L938.914 692.458 L939.473 692.458 L940.032 692.458 L940.592 692.458 L941.151 692.458 L941.71 692.458 L942.269 692.458 L942.829 692.458 L943.388 692.458 L943.947 692.458 L944.506 692.458 L945.066 692.458 L945.625 692.458 L946.184 692.458 L946.743 692.458 L947.303 692.458 L947.862 692.458 L948.421 692.458 L948.98 692.458 L949.54 692.458 L950.099 692.458 L950.658 692.458 L951.217 692.458 L951.777 692.458 L952.336 692.458 L952.895 692.458 L953.454 692.458 L954.014 692.458 L954.573 692.458 L955.132 692.458 L955.691 692.458 L956.251 692.458 L956.81 692.458 L957.369 692.458 L957.928 692.458 L958.488 692.458 L959.047 692.458 L959.606 692.458 L960.165 692.458 L960.725 692.458 L961.284 692.458 L961.843 692.458 L962.402 692.458 L962.962 692.458 L963.521 692.458 L964.08 692.458 L964.639 692.458 L965.199 692.458 L965.758 692.458 L966.317 692.458 L966.876 692.458 L967.436 692.458 L967.995 692.458 L968.554 692.458 L969.113 692.458 L969.673 692.458 L970.232 692.458 L970.791 692.458 L971.35 692.458 L971.91 692.458 L972.469 692.458 L973.028 692.458 L973.587 692.458 L974.147 692.458 L974.706 692.458 L975.265 692.458 L975.824 692.458 L976.384 692.458 L976.943 692.458 L977.502 692.458 L978.061 692.458 L978.621 692.458 L979.18 692.458 L979.739 692.458 L980.298 692.458 L980.858 692.458 L981.417 692.458 L981.976 692.458 L982.535 692.458 L983.095 692.458 L983.654 692.458 L984.213 692.458 L984.772 692.458 L985.332 692.458 L985.891 692.458 L986.45 692.458 L987.009 692.458 L987.569 692.458 L988.128 692.458 L988.687 692.458 L989.246 692.458 L989.806 692.458 L990.365 692.458 L990.924 692.458 L991.483 692.458 L992.043 692.458 L992.602 692.458 L993.161 692.458 L993.72 692.458 L994.28 692.458 L994.839 692.458 L995.398 692.458 L995.957 692.458 L996.517 692.458 L997.076 692.458 L997.635 692.458 L998.194 692.458 L998.754 692.458 L999.313 692.458 L999.872 692.458 L1000.43 692.458 L1000.99 692.458 L1001.55 692.458 L1002.11 692.458 L1002.67 692.458 L1003.23 692.458 L1003.79 692.458 L1004.35 692.458 L1004.91 692.458 L1005.46 692.458 L1006.02 692.458 L1006.58 692.458 L1007.14 692.458 L1007.7 692.458 L1008.26 692.458 L1008.82 692.458 L1009.38 692.458 L1009.94 692.458 L1010.5 692.458 L1011.06 692.458 L1011.62 692.458 L1012.18 692.458 L1012.73 692.458 L1013.29 692.458 L1013.85 692.458 L1014.41 692.458 L1014.97 692.458 L1015.53 692.458 L1016.09 692.458 L1016.65 692.458 L1017.21 692.458 L1017.77 692.458 L1018.33 692.458 L1018.89 692.458 L1019.45 692.458 L1020.01 692.458 L1020.56 692.458 L1021.12 692.458 L1021.68 692.458 L1022.24 692.458 L1022.8 692.458 L1023.36 692.458 L1023.92 692.458 L1024.48 692.458 L1025.04 692.458 L1025.6 692.458 L1026.16 692.458 L1026.72 692.458 L1027.28 692.458 L1027.83 692.458 L1028.39 692.458 L1028.95 692.458 L1029.51 692.458 L1030.07 692.458 L1030.63 692.458 L1031.19 692.458 L1031.75 692.458 L1032.31 692.458 L1032.87 692.458 L1033.43 692.458 L1033.99 692.458 L1034.55 692.458 L1035.1 692.458 L1035.66 692.458 L1036.22 692.458 L1036.78 692.458 L1037.34 692.458 L1037.9 692.458 L1038.46 692.458 L1039.02 692.458 L1039.58 692.458 L1040.14 692.458 L1040.7 692.458 L1041.26 692.458 L1041.82 692.458 L1042.38 692.458 L1042.93 692.458 L1043.49 692.458 L1044.05 692.458 L1044.61 692.458 L1045.17 692.458 L1045.73 692.458 L1046.29 692.458 L1046.85 692.458 L1047.41 692.458 L1047.97 692.458 L1048.53 692.458 L1049.09 692.458 L1049.65 692.458 L1050.2 692.458 L1050.76 692.458 L1051.32 692.458 L1051.88 692.458 L1052.44 692.458 L1053 692.458 L1053.56 692.458 L1054.12 692.458 L1054.68 692.458 L1055.24 692.458 L1055.8 692.458 L1056.36 692.458 L1056.92 692.458 L1057.48 692.458 L1058.03 692.458 L1058.59 692.458 L1059.15 692.458 L1059.71 692.458 L1060.27 692.458 L1060.83 692.458 L1061.39 692.458 L1061.95 692.458 L1062.51 692.458 L1063.07 692.458 L1063.63 692.458 L1064.19 692.458 L1064.75 692.458 L1065.3 692.458 L1065.86 692.458 L1066.42 692.458 L1066.98 692.458 L1067.54 692.458 L1068.1 692.458 L1068.66 692.458 L1069.22 692.458 L1069.78 692.458 L1070.34 692.458 L1070.9 692.458 L1071.46 692.458 L1072.02 692.458 L1072.57 692.458 L1073.13 692.458 L1073.69 692.458 L1074.25 692.458 L1074.81 692.458 L1075.37 692.458 L1075.93 692.458 L1076.49 692.458 L1077.05 692.458 L1077.61 692.458 L1078.17 692.458 L1078.73 692.458 L1079.29 692.458 L1079.85 692.458 L1080.4 692.458 L1080.96 692.458 L1081.52 692.458 L1082.08 692.458 L1082.64 692.458 L1083.2 692.458 L1083.76 692.458 L1084.32 692.458 L1084.88 692.458 L1085.44 692.458 L1086 692.458 L1086.56 692.458 L1087.12 692.458 L1087.67 692.458 L1088.23 692.458 L1088.79 692.458 L1089.35 692.458 L1089.91 692.458 L1090.47 692.458 L1091.03 692.458 L1091.59 692.458 L1092.15 692.458 L1092.71 692.458 L1093.27 692.458 L1093.83 692.458 L1094.39 692.458 L1094.94 692.458 L1095.5 692.458 L1096.06 692.458 L1096.62 692.458 L1097.18 692.458 L1097.74 692.458 L1098.3 692.458 L1098.86 692.458 L1099.42 692.458 L1099.98 692.458 L1100.54 692.458 L1101.1 692.458 L1101.66 692.458 L1102.22 692.458 L1102.77 692.458 L1103.33 692.458 L1103.89 692.458 L1104.45 692.458 L1105.01 692.458 L1105.57 692.458 L1106.13 692.458 L1106.69 692.458 L1107.25 692.458 L1107.81 692.458 L1108.37 692.458 L1108.93 692.458 L1109.49 692.458 L1110.04 692.458 L1110.6 692.458 L1111.16 692.458 L1111.72 692.458 L1112.28 692.458 L1112.84 692.458 L1113.4 692.458 L1113.96 692.458 L1114.52 692.458 L1115.08 692.458 L1115.64 692.458 L1116.2 692.458 L1116.76 692.458 L1117.31 692.458 L1117.87 692.458 L1118.43 692.458 L1118.99 692.458 L1119.55 692.458 L1120.11 692.458 L1120.67 692.458 L1121.23 692.458 L1121.79 692.458 L1122.35 692.458 L1122.91 692.458 L1123.47 692.458 L1124.03 692.458 L1124.59 692.458 L1125.14 692.458 L1125.7 692.458 L1126.26 692.458 L1126.82 692.458 L1127.38 692.458 L1127.94 692.458 L1128.5 692.458 L1129.06 692.458 L1129.62 692.458 L1130.18 692.458 L1130.74 692.458 L1131.3 692.458 L1131.86 692.458 L1132.41 692.458 L1132.97 692.458 L1133.53 692.458 L1134.09 692.458 L1134.65 692.458 L1135.21 692.458 L1135.77 692.458 L1136.33 692.458 L1136.89 692.458 L1137.45 692.458 L1138.01 692.458 L1138.57 692.458 L1139.13 692.458 L1139.68 692.458 L1140.24 692.458 L1140.8 692.458 L1141.36 692.458 L1141.92 692.458 L1142.48 692.458 L1143.04 692.458 L1143.6 692.458 L1144.16 692.458 L1144.72 692.458 L1145.28 692.458 L1145.84 692.458 L1146.4 692.458 L1146.96 692.458 L1147.51 692.458 L1148.07 692.458 L1148.63 692.458 L1149.19 692.458 L1149.75 692.458 L1150.31 692.458 L1150.87 692.458 L1151.43 692.458 L1151.99 692.458 L1152.55 692.458 L1153.11 692.458 L1153.67 692.458 L1154.23 692.458 L1154.78 692.458 L1155.34 692.458 L1155.9 692.458 L1156.46 692.458 L1157.02 692.458 L1157.58 692.458 L1158.14 692.458 L1158.7 692.458 L1159.26 692.458 L1159.82 692.458 L1160.38 692.458 L1160.94 692.458 L1161.5 692.458 L1162.05 692.458 L1162.61 692.458 L1163.17 692.458 L1163.73 692.458 L1164.29 692.458 L1164.85 692.458 L1165.41 692.458 L1165.97 692.458 L1166.53 692.458 L1167.09 692.458 L1167.65 692.458 L1168.21 692.458 L1168.77 692.458 L1169.33 692.458 L1169.88 692.458 L1170.44 692.458 L1171 692.458 L1171.56 692.458 L1172.12 692.458 L1172.68 692.458 L1173.24 692.458 L1173.8 692.458 L1174.36 692.458 L1174.92 692.458 L1175.48 692.458 L1176.04 692.458 L1176.6 692.458 L1177.15 692.458 L1177.71 692.458 L1178.27 692.458 L1178.83 692.458 L1179.39 692.458 L1179.95 692.458 L1180.51 692.458 L1181.07 692.458 L1181.63 692.458 L1182.19 692.458 L1182.75 692.458 L1183.31 692.458 L1183.87 692.458 L1184.43 692.458 L1184.98 692.458 L1185.54 692.458 L1186.1 692.458 L1186.66 692.458 L1187.22 692.458 L1187.78 692.458 L1188.34 692.458 L1188.9 692.458 L1189.46 692.458 L1190.02 692.458 L1190.58 692.458 L1191.14 692.458 L1191.7 692.458 L1192.25 692.458 L1192.81 692.458 L1193.37 692.458 L1193.93 692.458 L1194.49 692.458 L1195.05 692.458 L1195.61 692.458 L1196.17 692.458 L1196.73 692.458 L1197.29 692.458 L1197.85 692.458 L1198.41 692.458 L1198.97 692.458 L1199.52 692.458 L1200.08 692.458 L1200.64 692.458 L1201.2 692.458 L1201.76 692.458 L1202.32 692.458 L1202.88 692.458 L1203.44 692.458 L1204 692.458 L1204.56 692.458 L1205.12 692.458 L1205.68 692.458 L1206.24 692.458 L1206.8 692.458 L1207.35 692.458 L1207.91 692.458 L1208.47 692.458 L1209.03 692.458 L1209.59 692.458 L1210.15 692.458 L1210.71 692.458 L1211.27 692.458 L1211.83 692.458 L1212.39 692.458 L1212.95 692.458 L1213.51 692.458 L1214.07 692.458 L1214.62 692.458 L1215.18 692.458 L1215.74 692.458 L1216.3 692.458 L1216.86 692.458 L1217.42 692.458 L1217.98 692.458 L1218.54 692.458 L1219.1 692.458 L1219.66 692.458 L1220.22 692.458 L1220.78 692.458 L1221.34 692.458 L1221.89 692.458 L1222.45 692.458 L1223.01 692.458 L1223.57 692.458 L1224.13 692.458 L1224.69 692.458 L1225.25 692.458 L1225.81 692.458 L1226.37 692.458 L1226.93 692.458 L1227.49 692.458 L1228.05 692.458 L1228.61 692.458 L1229.17 692.458 L1229.72 692.458 L1230.28 692.458 L1230.84 692.458 L1231.4 692.458 L1231.96 692.458 L1232.52 692.458 L1233.08 692.458 L1233.64 692.458 L1234.2 692.458 L1234.76 692.458 L1235.32 692.458 L1235.88 692.458 L1236.44 692.458 L1236.99 692.458 L1237.55 692.458 L1238.11 692.458 L1238.67 692.458 L1239.23 692.458 L1239.79 692.458 L1240.35 692.458 L1240.91 692.458 L1241.47 692.458 L1242.03 692.458 L1242.59 692.458 L1243.15 692.458 L1243.71 692.458 L1244.26 692.458 L1244.82 692.458 L1245.38 692.458 L1245.94 692.458 L1246.5 692.458 L1247.06 692.458 L1247.62 692.458 L1248.18 692.458 L1248.74 692.458 L1249.3 692.458 L1249.86 692.458 L1250.42 692.458 L1250.98 692.458 L1251.54 692.458 L1252.09 692.458 L1252.65 692.458 L1253.21 692.458 L1253.77 692.458 L1254.33 692.458 L1254.89 692.458 L1255.45 692.458 L1256.01 692.458 L1256.57 692.458 L1257.13 692.458 L1257.69 692.458 L1258.25 692.458 L1258.81 692.458 L1259.36 692.458 L1259.92 692.458 L1260.48 692.458 L1261.04 692.458 L1261.6 692.458 L1262.16 692.458 L1262.72 692.458 L1263.28 692.458 L1263.84 692.458 L1264.4 692.458 L1264.96 692.458 L1265.52 692.458 L1266.08 692.458 L1266.63 692.458 L1267.19 692.458 L1267.75 692.458 L1268.31 692.458 L1268.87 692.458 L1269.43 692.458 L1269.99 692.458 L1270.55 692.458 L1271.11 692.458 L1271.67 692.458 L1272.23 692.458 L1272.79 692.458 L1273.35 692.458 L1273.91 692.458 L1274.46 692.458 L1275.02 692.458 L1275.58 692.458 L1276.14 692.458 L1276.7 692.458 L1277.26 692.458 L1277.82 692.458 L1278.38 692.458 L1278.94 692.458 L1279.5 692.458 L1280.06 692.458 L1280.62 692.458 L1281.18 692.458 L1281.73 692.458 L1282.29 692.458 L1282.85 692.458 L1283.41 692.458 L1283.97 692.458 L1284.53 692.458 L1285.09 692.458 L1285.65 692.458 L1286.21 692.458 L1286.77 692.458 L1287.33 692.458 L1287.89 692.458 L1288.45 692.458 L1289 692.458 L1289.56 692.458 L1290.12 692.458 L1290.68 692.458 L1291.24 692.458 L1291.8 692.458 L1292.36 692.458 L1292.92 692.458 L1293.48 692.458 L1294.04 692.458 L1294.6 692.458 L1295.16 692.458 L1295.72 692.458 L1296.28 692.458 L1296.83 692.458 L1297.39 692.458 L1297.95 692.458 L1298.51 692.458 L1299.07 692.458 L1299.63 692.458 L1300.19 692.458 L1300.75 692.458 L1301.31 692.458 L1301.87 692.458 L1302.43 692.458 L1302.99 692.458 L1303.55 692.458 L1304.1 692.458 L1304.66 692.458 L1305.22 692.458 L1305.78 692.458 L1306.34 692.458 L1306.9 692.458 L1307.46 692.458 L1308.02 692.458 L1308.58 692.458 L1309.14 692.458 L1309.7 692.458 L1310.26 692.458 L1310.82 692.458 L1311.38 692.458 L1311.93 692.458 L1312.49 692.458 L1313.05 692.458 L1313.61 692.458 L1314.17 692.458 L1314.73 692.458 L1315.29 692.458 L1315.85 692.458 L1316.41 692.458 L1316.97 692.458 L1317.53 692.458 L1318.09 692.458 L1318.65 692.458 L1319.2 692.458 L1319.76 692.458 L1320.32 692.458 L1320.88 692.458 L1321.44 692.458 L1322 692.458 L1322.56 692.458 L1323.12 692.458 L1323.68 692.458 L1324.24 692.458 L1324.8 692.458 L1325.36 692.458 L1325.92 692.458 L1326.47 692.458 L1327.03 692.458 L1327.59 692.458 L1328.15 692.458 L1328.71 692.458 L1329.27 692.458 L1329.83 692.458 L1330.39 692.458 L1330.95 692.458 L1331.51 692.458 L1332.07 692.458 L1332.63 692.458 L1333.19 692.458 L1333.75 692.458 L1334.3 692.458 L1334.86 692.458 L1335.42 692.458 L1335.98 692.458 L1336.54 692.458 L1337.1 692.458 L1337.66 692.458 L1338.22 692.458 L1338.78 692.458 L1339.34 692.458 L1339.9 692.458 L1340.46 692.458 L1341.02 692.458 L1341.57 692.458 L1342.13 692.458 L1342.69 692.458 L1343.25 692.458 L1343.81 692.458 L1344.37 692.458 L1344.93 692.458 L1345.49 692.458 L1346.05 692.458 L1346.61 692.458 L1347.17 692.458 L1347.73 692.458 L1348.29 692.458 L1348.84 692.458 L1349.4 692.458 L1349.96 692.458 L1350.52 692.458 L1351.08 692.458 L1351.64 692.458 L1352.2 692.458 L1352.76 692.458 L1353.32 692.458 L1353.88 692.458 L1354.44 692.458 L1355 692.458 L1355.56 692.458 L1356.12 692.458 L1356.67 692.458 L1357.23 692.458 L1357.79 692.458 L1358.35 692.458 L1358.91 692.458 L1359.47 692.458 L1360.03 692.458 L1360.59 692.458 L1361.15 692.458 L1361.71 692.458 L1362.27 692.458 L1362.83 692.458 L1363.39 692.458 L1363.94 692.458 L1364.5 692.458 L1365.06 692.458 L1365.62 692.458 L1366.18 692.458 L1366.74 692.458 L1367.3 692.458 L1367.86 692.458 L1368.42 692.458 L1368.98 692.458 L1369.54 692.458 L1370.1 692.458 L1370.66 692.458 L1371.21 692.458 L1371.77 692.458 L1372.33 692.458 L1372.89 692.458 L1373.45 692.458 L1374.01 692.458 L1374.57 692.458 L1375.13 692.458 L1375.69 692.458 L1376.25 692.458 L1376.81 692.458 L1377.37 692.458 L1377.93 692.458 L1378.49 692.458 L1379.04 692.458 L1379.6 692.458 L1380.16 692.458 L1380.72 692.458 L1381.28 692.458 L1381.84 692.458 L1382.4 692.458 L1382.96 692.458 L1383.52 692.458 L1384.08 692.458 L1384.64 692.458 L1385.2 692.458 L1385.76 692.458 L1386.31 692.458 L1386.87 692.458 L1387.43 692.458 L1387.99 692.458 L1388.55 692.458 L1389.11 692.458 L1389.67 692.458 L1390.23 692.458 L1390.79 692.458 L1391.35 692.458 L1391.91 692.458 L1392.47 692.458 L1393.03 692.458 L1393.58 692.458 L1394.14 692.458 L1394.7 692.458 L1395.26 692.458 L1395.82 692.458 L1396.38 692.458 L1396.94 692.458 L1397.5 692.458 L1398.06 692.458 L1398.62 692.458 L1399.18 692.458 L1399.74 692.458 L1400.3 692.458 L1400.86 692.458 L1401.41 692.458 L1401.97 692.458 L1402.53 692.458 L1403.09 692.458 L1403.65 692.458 L1404.21 692.458 L1404.77 692.458 L1405.33 692.458 L1405.89 692.458 L1406.45 692.458 L1407.01 692.458 L1407.57 692.458 L1408.13 692.458 L1408.68 692.458 L1409.24 692.458 L1409.8 692.458 L1410.36 692.458 L1410.92 692.458 L1411.48 692.458 L1412.04 692.458 L1412.6 692.458 L1413.16 692.458 L1413.72 692.458 L1414.28 692.458 L1414.84 692.458 L1415.4 692.458 L1415.95 692.458 L1416.51 692.458 L1417.07 692.458 L1417.63 692.458 L1418.19 692.458 L1418.75 692.458 L1419.31 692.458 L1419.87 692.458 L1420.43 692.458 L1420.99 692.458 L1421.55 692.458 L1422.11 692.458 L1422.67 692.458 L1423.23 692.458 L1423.78 692.458 L1424.34 692.458 L1424.9 692.458 L1425.46 692.458 L1426.02 692.458 L1426.58 692.458 L1427.14 692.458 L1427.7 692.458 L1428.26 692.458 L1428.82 692.458 L1429.38 692.458 L1429.94 692.458 L1430.5 692.458 L1431.05 692.458 L1431.61 692.458 L1432.17 692.458 L1432.73 692.458 L1433.29 692.458 L1433.85 692.458 L1434.41 692.458 L1434.97 692.458 L1435.53 692.458 L1436.09 692.458 L1436.65 692.458 L1437.21 692.458 L1437.77 692.458 L1438.33 692.458 L1438.88 692.458 L1439.44 692.458 L1440 692.458 L1440.56 692.458 L1441.12 692.458 L1441.68 692.458 L1442.24 692.458 L1442.8 692.458 L1443.36 692.458 L1443.92 692.458 L1444.48 692.458 L1445.04 692.458 L1445.6 692.458 L1446.15 692.458 L1446.71 692.458 L1447.27 692.458 L1447.83 692.458 L1448.39 692.458 L1448.95 692.458 L1449.51 692.458 L1450.07 692.458 L1450.63 692.458 L1451.19 692.458 L1451.75 692.458 L1452.31 692.458 L1452.87 692.458 L1453.42 692.458 L1453.98 692.458 L1454.54 692.458 L1455.1 692.458 L1455.66 692.458 L1456.22 692.458 L1456.78 692.458 L1457.34 692.458 L1457.9 692.458 L1458.46 692.458 L1459.02 692.458 L1459.58 692.458 L1460.14 692.458 L1460.7 692.458 L1461.25 692.458 L1461.81 692.458 L1462.37 692.458 L1462.93 692.458 L1463.49 692.458 L1464.05 692.458 L1464.61 692.458 L1465.17 692.458 L1465.73 692.458 L1466.29 692.458 L1466.85 692.458 L1467.41 692.458 L1467.97 692.458 L1468.52 692.458 L1469.08 692.458 L1469.64 692.458 L1470.2 692.458 L1470.76 692.458 L1471.32 692.458 L1471.88 692.458 L1472.44 692.458 L1473 692.458 L1473.56 692.458 L1474.12 692.458 L1474.68 692.458 L1475.24 692.458 L1475.79 692.458 L1476.35 692.458 L1476.91 692.458 L1477.47 692.458 L1478.03 692.458 L1478.59 692.458 L1479.15 692.458 L1479.71 692.458 L1480.27 692.458 L1480.83 692.458 L1481.39 692.458 L1481.95 692.458 L1482.51 692.458 L1483.07 692.458 L1483.62 692.458 L1484.18 692.458 L1484.74 692.458 L1485.3 692.458 L1485.86 692.458 L1486.42 692.458 L1486.98 692.458 L1487.54 692.458 L1488.1 692.458 L1488.66 692.458 L1489.22 692.458 L1489.78 692.458 L1490.34 692.458 L1490.89 692.458 L1491.45 692.458 L1492.01 692.458 L1492.57 692.458 L1493.13 692.458 L1493.69 692.458 L1494.25 692.458 L1494.81 692.458 L1495.37 692.458 L1495.93 692.458 L1496.49 692.458 L1497.05 692.458 L1497.61 692.458 L1498.16 692.458 L1498.72 692.458 L1499.28 692.458 L1499.84 692.458 L1500.4 692.458 L1500.96 692.458 L1501.52 692.458 L1502.08 692.458 L1502.64 692.458 L1503.2 692.458 L1503.76 692.458 L1504.32 692.458 L1504.88 692.458 L1505.44 692.458 L1505.99 692.458 L1506.55 692.458 L1507.11 692.458 L1507.67 692.458 L1508.23 692.458 L1508.79 692.458 L1509.35 692.458 L1509.91 692.458 L1510.47 692.458 L1511.03 692.458 L1511.59 692.458 L1512.15 692.458 L1512.71 692.458 L1513.26 692.458 L1513.82 692.458 L1514.38 692.458 L1514.94 692.458 L1515.5 692.458 L1516.06 692.458 L1516.62 692.458 L1517.18 692.458 L1517.74 692.458 L1518.3 692.458 L1518.86 692.458 L1519.42 692.458 L1519.98 692.458 L1520.53 692.458 L1521.09 692.458 L1521.65 692.458 L1522.21 692.458 L1522.77 692.458 L1523.33 692.458 L1523.89 692.458 L1524.45 692.458 L1525.01 692.458 L1525.57 692.458 L1526.13 692.458 L1526.69 692.458 L1527.25 692.458 L1527.81 692.458 L1528.36 692.458 L1528.92 692.458 L1529.48 692.458 L1530.04 692.458 L1530.6 692.458 L1531.16 692.458 L1531.72 692.458 L1532.28 692.458 L1532.84 692.458 L1533.4 692.458 L1533.96 692.458 L1534.52 692.458 L1535.08 692.458 L1535.63 692.458 L1536.19 692.458 L1536.75 692.458 L1537.31 692.458 L1537.87 692.458 L1538.43 692.458 L1538.99 692.458 L1539.55 692.458 L1540.11 692.458 L1540.67 692.458 L1541.23 692.458 L1541.79 692.458 L1542.35 692.458 L1542.9 692.458 L1543.46 692.458 L1544.02 692.458 L1544.58 692.458 L1545.14 692.458 L1545.7 692.458 L1546.26 692.458 L1546.82 692.458 L1547.38 692.458 L1547.94 692.458 L1548.5 692.458 L1549.06 692.458 L1549.62 692.458 L1550.18 692.458 L1550.73 692.458 L1551.29 692.458 L1551.85 692.458 L1552.41 692.458 L1552.97 692.458 L1553.53 692.458 L1554.09 692.458 L1554.65 692.458 L1555.21 692.458 L1555.77 692.458 L1556.33 692.458 L1556.89 692.458 L1557.45 692.458 L1558 692.458 L1558.56 692.458 L1559.12 692.458 L1559.68 692.458 L1560.24 692.458 L1560.8 692.458 L1561.36 692.458 L1561.92 692.458 L1562.48 692.458 L1563.04 692.458 L1563.6 692.458 L1564.16 692.458 L1564.72 692.458 L1565.28 692.458 L1565.83 692.458 L1566.39 692.458 L1566.95 692.458 L1567.51 692.458 L1568.07 692.458 L1568.63 692.458 L1569.19 692.458 L1569.75 692.458 L1570.31 692.458 L1570.87 692.458 L1571.43 692.458 L1571.99 692.458 L1572.55 692.458 L1573.1 692.458 L1573.66 692.458 L1574.22 692.458 L1574.78 692.458 L1575.34 692.458 L1575.9 692.458 L1576.46 692.458 L1577.02 692.458 L1577.58 692.458 L1578.14 692.458 L1578.7 692.458 L1579.26 692.458 L1579.82 692.458 L1580.37 692.458 L1580.93 692.458 L1581.49 692.458 L1582.05 692.458 L1582.61 692.458 L1583.17 692.458 L1583.73 692.458 L1584.29 692.458 L1584.85 692.458 L1585.41 692.458 L1585.97 692.458 L1586.53 692.458 L1587.09 692.458 L1587.65 692.458 L1588.2 692.458 L1588.76 692.458 L1589.32 692.458 L1589.88 692.458 L1590.44 692.458 L1591 692.458 L1591.56 692.458 L1592.12 692.458 L1592.68 692.458 L1593.24 692.458 L1593.8 692.458 L1594.36 692.458 L1594.92 692.458 L1595.47 692.458 L1596.03 692.458 L1596.59 692.458 L1597.15 692.458 L1597.71 692.458 L1598.27 692.458 L1598.83 692.458 L1599.39 692.458 L1599.95 692.458 L1600.51 692.458 L1601.07 692.458 L1601.63 692.458 L1602.19 692.458 L1602.74 692.458 L1603.3 692.458 L1603.86 692.458 L1604.42 692.458 L1604.98 692.458 L1605.54 692.458 L1606.1 692.458 L1606.66 692.458 L1607.22 692.458 L1607.78 692.458 L1608.34 692.458 L1608.9 692.458 L1609.46 692.458 L1610.02 692.458 L1610.57 692.458 L1611.13 692.458 L1611.69 692.458 L1612.25 692.458 L1612.81 692.458 L1613.37 692.458 L1613.93 692.458 L1614.49 692.458 L1615.05 692.458 L1615.61 692.458 L1616.17 692.458 L1616.73 692.458 L1617.29 692.458 L1617.84 692.458 L1618.4 692.458 L1618.96 692.458 L1619.52 692.458 L1620.08 692.458 L1620.64 692.458 L1621.2 692.458 L1621.76 692.458 L1622.32 692.458 L1622.88 692.458 L1623.44 692.458 L1624 692.458 L1624.56 692.458 L1625.11 692.458 L1625.67 692.458 L1626.23 692.458 L1626.79 692.458 L1627.35 692.458 L1627.91 692.458 L1628.47 692.458 L1629.03 692.458 L1629.59 692.458 L1630.15 692.458 L1630.71 692.458 L1631.27 692.458 L1631.83 692.458 L1632.39 692.458 L1632.94 692.458 L1633.5 692.458 L1634.06 692.458 L1634.62 692.458 L1635.18 692.458 L1635.74 692.458 L1636.3 692.458 L1636.86 692.458 L1637.42 692.458 L1637.98 692.458 L1638.54 692.458 L1639.1 692.458 L1639.66 692.458 L1640.21 692.458 L1640.77 692.458 L1641.33 692.458 L1641.89 692.458 L1642.45 692.458 L1643.01 692.458 L1643.57 692.458 L1644.13 692.458 L1644.69 692.458 L1645.25 692.458 L1645.81 692.458 L1646.37 692.458 L1646.93 692.458 L1647.48 692.458 L1648.04 692.458 L1648.6 692.458 L1649.16 692.458 L1649.72 692.458 L1650.28 692.458 L1650.84 692.458 L1651.4 692.458 L1651.96 692.458 L1652.52 692.458 L1653.08 692.458 L1653.64 692.458 L1654.2 692.458 L1654.76 692.458 L1655.31 692.458 L1655.87 692.458 L1656.43 692.458 L1656.99 692.458 L1657.55 692.458 L1658.11 692.458 L1658.67 692.458 L1659.23 692.458 L1659.79 692.458 L1660.35 692.458 L1660.91 692.458 L1661.47 692.458 L1662.03 692.458 L1662.58 692.458 L1663.14 692.458 L1663.7 692.458 L1664.26 692.458 L1664.82 692.458 L1665.38 692.458 L1665.94 692.458 L1666.5 692.458 L1667.06 692.458 L1667.62 692.458 L1668.18 692.458 L1668.74 692.458 L1669.3 692.458 L1669.85 692.458 L1670.41 692.458 L1670.97 692.458 L1671.53 692.458 L1672.09 692.458 L1672.65 692.458 L1673.21 692.458 L1673.77 692.458 L1674.33 692.458 L1674.89 692.458 L1675.45 692.458 L1676.01 692.458 L1676.57 692.458 L1677.13 692.458 L1677.68 692.458 L1678.24 692.458 L1678.8 692.458 L1679.36 692.458 L1679.92 692.458 L1680.48 692.458 L1681.04 692.458 L1681.6 692.458 L1682.16 692.458 L1682.72 692.458 L1683.28 692.458 L1683.84 692.458 L1684.4 692.458 L1684.95 692.458 L1685.51 692.458 L1686.07 692.458 L1686.63 692.458 L1687.19 692.458 L1687.75 692.458 L1688.31 692.458 L1688.87 692.458 L1689.43 692.458 L1689.99 692.458 L1690.55 692.458 L1691.11 692.458 L1691.67 692.458 L1692.23 692.458 L1692.78 692.458 L1693.34 692.458 L1693.9 692.458 L1694.46 692.458 L1695.02 692.458 L1695.58 692.458 L1696.14 692.458 L1696.7 692.458 L1697.26 692.458 L1697.82 692.458 L1698.38 692.458 L1698.94 692.458 L1699.5 692.458 L1700.05 692.458 L1700.61 692.458 L1701.17 692.458 L1701.73 692.458 L1702.29 692.458 L1702.85 692.458 L1703.41 692.458 L1703.97 692.458 L1704.53 692.458 L1705.09 692.458 L1705.65 692.458 L1706.21 692.458 L1706.77 692.458 L1707.32 692.458 L1707.88 692.458 L1708.44 692.458 L1709 692.458 L1709.56 692.458 L1710.12 692.458 L1710.68 692.458 L1711.24 692.458 L1711.8 692.458 L1712.36 692.458 L1712.92 692.458 L1713.48 692.458 L1714.04 692.458 L1714.6 692.458 L1715.15 692.458 L1715.71 692.458 L1716.27 692.458 L1716.83 692.458 L1717.39 692.458 L1717.95 692.458 L1718.51 692.458 L1719.07 692.458 L1719.63 692.458 L1720.19 692.458 L1720.75 692.458 L1721.31 692.458 L1721.87 692.458 L1722.42 692.458 L1722.98 692.458 L1723.54 692.458 L1724.1 692.458 L1724.66 692.458 L1725.22 692.458 L1725.78 692.458 L1726.34 692.458 L1726.9 692.458 L1727.46 692.458 L1728.02 692.458 L1728.58 692.458 L1729.14 692.458 L1729.69 692.458 L1730.25 692.458 L1730.81 692.458 L1731.37 692.458 L1731.93 692.458 L1732.49 692.458 L1733.05 692.458 L1733.61 692.458 L1734.17 692.458 L1734.73 692.458 L1735.29 692.458 L1735.85 692.458 L1736.41 692.458 L1736.97 692.458 L1737.52 692.458 L1738.08 692.458 L1738.64 692.458 L1739.2 692.458 L1739.76 692.458 L1740.32 692.458 L1740.88 692.458 L1741.44 692.458 L1742 692.458 L1742.56 692.458 L1743.12 692.458 L1743.68 692.458 L1744.24 692.458 L1744.79 692.458 L1745.35 692.458 L1745.91 692.458 L1746.47 692.458 L1747.03 692.458 L1747.59 692.458 L1748.15 692.458 L1748.71 692.458 L1749.27 692.458 L1749.83 692.458 L1750.39 692.458 L1750.95 692.458 L1751.51 692.458 L1752.06 692.458 L1752.62 692.458 L1753.18 692.458 L1753.74 692.458 L1754.3 692.458 L1754.86 692.458 L1755.42 692.458 L1755.98 692.458 L1756.54 692.458 L1757.1 692.458 L1757.66 692.458 L1758.22 692.458 L1758.78 692.458 L1759.34 692.458 L1759.89 692.458 L1760.45 692.458 L1761.01 692.458 L1761.57 692.458 L1762.13 692.458 L1762.69 692.458 L1763.25 692.458 L1763.81 692.458 L1764.37 692.458 L1764.93 692.458 L1765.49 692.458 L1766.05 692.458 L1766.61 692.458 L1767.16 692.458 L1767.72 692.458 L1768.28 692.458 L1768.84 692.458 L1769.4 692.458 L1769.96 692.458 L1770.52 692.458 L1771.08 692.458 L1771.64 692.458 L1772.2 692.458 L1772.76 692.458 L1773.32 692.458 L1773.88 692.458 L1774.43 692.458 L1774.99 692.458 L1775.55 692.458 L1776.11 692.458 L1776.67 692.458 L1777.23 692.458 L1777.79 692.458 L1778.35 692.458 L1778.91 692.458 L1779.47 692.458 L1780.03 692.458 L1780.59 692.458 L1781.15 692.458 L1781.71 692.458 L1782.26 692.458 L1782.82 692.458 L1783.38 692.458 L1783.94 692.458 L1784.5 692.458 L1785.06 692.458 L1785.62 692.458 L1786.18 692.458 L1786.74 692.458 L1787.3 692.458 L1787.86 692.458 L1788.42 692.458 L1788.98 692.458 L1789.53 692.458 L1790.09 692.458 L1790.65 692.458 L1791.21 692.458 L1791.77 692.458 L1792.33 692.458 L1792.89 692.458 L1793.45 692.458 L1794.01 692.458 L1794.57 692.458 L1795.13 692.458 L1795.69 692.458 L1796.25 692.458 L1796.8 692.458 L1797.36 692.458 L1797.92 692.458 L1798.48 692.458 L1799.04 692.458 L1799.6 692.458 L1800.16 692.458 L1800.72 692.458 L1801.28 692.458 L1801.84 692.458 L1802.4 692.458 L1802.96 692.458 L1803.52 692.458 L1804.08 692.458 L1804.63 692.458 L1805.19 692.458 L1805.75 692.458 L1806.31 692.458 L1806.87 692.458 L1807.43 692.458 L1807.99 692.458 L1808.55 692.458 L1809.11 692.458 L1809.67 692.458 L1810.23 692.458 L1810.79 692.458 L1811.35 692.458 L1811.9 692.458 L1812.46 692.458 L1813.02 692.458 L1813.58 692.458 L1814.14 692.458 L1814.7 692.458 L1815.26 692.458 L1815.82 692.458 L1816.38 692.458 L1816.94 692.458 L1817.5 692.458 L1818.06 692.458 L1818.62 692.458 L1819.18 692.458 L1819.73 692.458 L1820.29 692.458 L1820.85 692.458 L1821.41 692.458 L1821.97 692.458 L1822.53 692.458 L1823.09 692.458 L1823.65 692.458 L1824.21 692.458 L1824.77 692.458 L1825.33 692.458 L1825.89 692.458 L1826.45 692.458 L1827 692.458 L1827.56 692.458 L1828.12 692.458 L1828.68 692.458 L1829.24 692.458 L1829.8 692.458 L1830.36 692.458 L1830.92 692.458 L1831.48 692.458 L1832.04 692.458 L1832.6 692.458 L1833.16 692.458 L1833.72 692.458 L1834.27 692.458 L1834.83 692.458 L1835.39 692.458 L1835.95 692.458 L1836.51 692.458 L1837.07 692.458 L1837.63 692.458 L1838.19 692.458 L1838.19 683.428 L1837.63 683.428 L1837.07 683.428 L1836.51 683.428 L1835.95 683.428 L1835.39 683.428 L1834.83 683.428 L1834.27 683.428 L1833.72 683.428 L1833.16 683.428 L1832.6 683.428 L1832.04 683.428 L1831.48 683.428 L1830.92 683.428 L1830.36 683.428 L1829.8 683.428 L1829.24 683.428 L1828.68 683.428 L1828.12 683.428 L1827.56 683.428 L1827 683.428 L1826.45 683.428 L1825.89 683.428 L1825.33 683.428 L1824.77 683.428 L1824.21 683.428 L1823.65 683.428 L1823.09 683.428 L1822.53 683.428 L1821.97 683.428 L1821.41 683.428 L1820.85 683.428 L1820.29 683.428 L1819.73 683.428 L1819.18 683.428 L1818.62 683.428 L1818.06 683.428 L1817.5 683.428 L1816.94 683.428 L1816.38 683.428 L1815.82 683.428 L1815.26 683.428 L1814.7 683.428 L1814.14 683.428 L1813.58 683.428 L1813.02 683.428 L1812.46 683.428 L1811.9 683.428 L1811.35 683.428 L1810.79 683.428 L1810.23 683.428 L1809.67 683.428 L1809.11 683.428 L1808.55 683.428 L1807.99 683.428 L1807.43 683.428 L1806.87 683.428 L1806.31 683.428 L1805.75 683.428 L1805.19 683.428 L1804.63 683.428 L1804.08 683.428 L1803.52 683.428 L1802.96 683.428 L1802.4 683.428 L1801.84 683.428 L1801.28 683.428 L1800.72 683.428 L1800.16 683.428 L1799.6 683.428 L1799.04 683.428 L1798.48 683.428 L1797.92 683.428 L1797.36 683.428 L1796.8 683.428 L1796.25 683.428 L1795.69 683.428 L1795.13 683.428 L1794.57 683.428 L1794.01 683.428 L1793.45 683.428 L1792.89 683.428 L1792.33 683.428 L1791.77 683.428 L1791.21 683.428 L1790.65 683.428 L1790.09 683.428 L1789.53 683.428 L1788.98 683.428 L1788.42 683.428 L1787.86 683.428 L1787.3 683.428 L1786.74 683.428 L1786.18 683.428 L1785.62 683.428 L1785.06 683.428 L1784.5 683.428 L1783.94 683.428 L1783.38 683.428 L1782.82 683.428 L1782.26 683.428 L1781.71 683.428 L1781.15 683.428 L1780.59 683.428 L1780.03 683.428 L1779.47 683.428 L1778.91 683.428 L1778.35 683.428 L1777.79 683.428 L1777.23 683.428 L1776.67 683.428 L1776.11 683.428 L1775.55 683.428 L1774.99 683.428 L1774.43 683.428 L1773.88 683.428 L1773.32 683.428 L1772.76 683.428 L1772.2 683.428 L1771.64 683.428 L1771.08 683.428 L1770.52 683.428 L1769.96 683.428 L1769.4 683.428 L1768.84 683.428 L1768.28 683.428 L1767.72 683.428 L1767.16 683.428 L1766.61 683.428 L1766.05 683.428 L1765.49 683.428 L1764.93 683.428 L1764.37 683.428 L1763.81 683.428 L1763.25 683.428 L1762.69 683.428 L1762.13 683.428 L1761.57 683.428 L1761.01 683.428 L1760.45 683.428 L1759.89 683.428 L1759.34 683.428 L1758.78 683.428 L1758.22 683.428 L1757.66 683.428 L1757.1 683.428 L1756.54 683.428 L1755.98 683.428 L1755.42 683.428 L1754.86 683.428 L1754.3 683.428 L1753.74 683.428 L1753.18 683.428 L1752.62 683.428 L1752.06 683.428 L1751.51 683.428 L1750.95 683.428 L1750.39 683.428 L1749.83 683.428 L1749.27 683.428 L1748.71 683.428 L1748.15 683.428 L1747.59 683.428 L1747.03 683.428 L1746.47 683.428 L1745.91 683.428 L1745.35 683.428 L1744.79 683.428 L1744.24 683.428 L1743.68 683.428 L1743.12 683.428 L1742.56 683.428 L1742 683.428 L1741.44 683.428 L1740.88 683.428 L1740.32 683.428 L1739.76 683.428 L1739.2 683.428 L1738.64 683.428 L1738.08 683.428 L1737.52 683.428 L1736.97 683.428 L1736.41 683.428 L1735.85 683.428 L1735.29 683.428 L1734.73 683.428 L1734.17 683.428 L1733.61 683.428 L1733.05 683.428 L1732.49 683.428 L1731.93 683.428 L1731.37 683.428 L1730.81 683.428 L1730.25 683.428 L1729.69 683.428 L1729.14 683.428 L1728.58 683.428 L1728.02 683.428 L1727.46 683.428 L1726.9 683.428 L1726.34 683.428 L1725.78 683.428 L1725.22 683.428 L1724.66 683.428 L1724.1 683.428 L1723.54 683.428 L1722.98 683.428 L1722.42 683.428 L1721.87 683.428 L1721.31 683.428 L1720.75 683.428 L1720.19 683.428 L1719.63 683.428 L1719.07 683.428 L1718.51 683.428 L1717.95 683.428 L1717.39 683.428 L1716.83 683.428 L1716.27 683.428 L1715.71 683.428 L1715.15 683.428 L1714.6 683.428 L1714.04 683.428 L1713.48 683.428 L1712.92 683.428 L1712.36 683.428 L1711.8 683.428 L1711.24 683.428 L1710.68 683.428 L1710.12 683.428 L1709.56 683.428 L1709 683.428 L1708.44 683.428 L1707.88 683.428 L1707.32 683.428 L1706.77 683.428 L1706.21 683.428 L1705.65 683.428 L1705.09 683.428 L1704.53 683.428 L1703.97 683.428 L1703.41 683.428 L1702.85 683.428 L1702.29 683.428 L1701.73 683.428 L1701.17 683.428 L1700.61 683.428 L1700.05 683.428 L1699.5 683.428 L1698.94 683.428 L1698.38 683.428 L1697.82 683.428 L1697.26 683.428 L1696.7 683.428 L1696.14 683.428 L1695.58 683.428 L1695.02 683.428 L1694.46 683.428 L1693.9 683.428 L1693.34 683.428 L1692.78 683.428 L1692.23 683.428 L1691.67 683.428 L1691.11 683.428 L1690.55 683.428 L1689.99 683.428 L1689.43 683.428 L1688.87 683.428 L1688.31 683.428 L1687.75 683.428 L1687.19 683.428 L1686.63 683.428 L1686.07 683.428 L1685.51 683.428 L1684.95 683.428 L1684.4 683.428 L1683.84 683.428 L1683.28 683.428 L1682.72 683.428 L1682.16 683.428 L1681.6 683.428 L1681.04 683.428 L1680.48 683.428 L1679.92 683.428 L1679.36 683.428 L1678.8 683.428 L1678.24 683.428 L1677.68 683.428 L1677.13 683.428 L1676.57 683.428 L1676.01 683.428 L1675.45 683.428 L1674.89 683.428 L1674.33 683.428 L1673.77 683.428 L1673.21 683.428 L1672.65 683.428 L1672.09 683.428 L1671.53 683.428 L1670.97 683.428 L1670.41 683.428 L1669.85 683.428 L1669.3 683.428 L1668.74 683.428 L1668.18 683.428 L1667.62 683.428 L1667.06 683.428 L1666.5 683.428 L1665.94 683.428 L1665.38 683.428 L1664.82 683.428 L1664.26 683.428 L1663.7 683.428 L1663.14 683.428 L1662.58 683.428 L1662.03 683.428 L1661.47 683.428 L1660.91 683.428 L1660.35 683.428 L1659.79 683.428 L1659.23 683.428 L1658.67 683.428 L1658.11 683.428 L1657.55 683.428 L1656.99 683.428 L1656.43 683.428 L1655.87 683.428 L1655.31 683.428 L1654.76 683.428 L1654.2 683.428 L1653.64 683.428 L1653.08 683.428 L1652.52 683.428 L1651.96 683.428 L1651.4 683.428 L1650.84 683.428 L1650.28 683.428 L1649.72 683.428 L1649.16 683.428 L1648.6 683.428 L1648.04 683.428 L1647.48 683.428 L1646.93 683.428 L1646.37 683.428 L1645.81 683.428 L1645.25 683.428 L1644.69 683.428 L1644.13 683.428 L1643.57 683.428 L1643.01 683.428 L1642.45 683.428 L1641.89 683.428 L1641.33 683.428 L1640.77 683.428 L1640.21 683.428 L1639.66 683.428 L1639.1 683.428 L1638.54 683.428 L1637.98 683.428 L1637.42 683.428 L1636.86 683.428 L1636.3 683.428 L1635.74 683.428 L1635.18 683.428 L1634.62 683.428 L1634.06 683.428 L1633.5 683.428 L1632.94 683.428 L1632.39 683.428 L1631.83 683.428 L1631.27 683.428 L1630.71 683.428 L1630.15 683.428 L1629.59 683.428 L1629.03 683.428 L1628.47 683.428 L1627.91 683.428 L1627.35 683.428 L1626.79 683.428 L1626.23 683.428 L1625.67 683.428 L1625.11 683.428 L1624.56 683.428 L1624 683.428 L1623.44 683.428 L1622.88 683.428 L1622.32 683.428 L1621.76 683.428 L1621.2 683.428 L1620.64 683.428 L1620.08 683.428 L1619.52 683.428 L1618.96 683.428 L1618.4 683.428 L1617.84 683.428 L1617.29 683.428 L1616.73 683.428 L1616.17 683.428 L1615.61 683.428 L1615.05 683.428 L1614.49 683.428 L1613.93 683.428 L1613.37 683.428 L1612.81 683.428 L1612.25 683.428 L1611.69 683.428 L1611.13 683.428 L1610.57 683.428 L1610.02 683.428 L1609.46 683.428 L1608.9 683.428 L1608.34 683.428 L1607.78 683.428 L1607.22 683.428 L1606.66 683.428 L1606.1 683.428 L1605.54 683.428 L1604.98 683.428 L1604.42 683.428 L1603.86 683.428 L1603.3 683.428 L1602.74 683.428 L1602.19 683.428 L1601.63 683.428 L1601.07 683.428 L1600.51 683.428 L1599.95 683.428 L1599.39 683.428 L1598.83 683.428 L1598.27 683.428 L1597.71 683.428 L1597.15 683.428 L1596.59 683.428 L1596.03 683.428 L1595.47 683.428 L1594.92 683.428 L1594.36 683.428 L1593.8 683.428 L1593.24 683.428 L1592.68 683.428 L1592.12 683.428 L1591.56 683.428 L1591 683.428 L1590.44 683.428 L1589.88 683.428 L1589.32 683.428 L1588.76 683.428 L1588.2 683.428 L1587.65 683.428 L1587.09 683.428 L1586.53 683.428 L1585.97 683.428 L1585.41 683.428 L1584.85 683.428 L1584.29 683.428 L1583.73 683.428 L1583.17 683.428 L1582.61 683.428 L1582.05 683.428 L1581.49 683.428 L1580.93 683.428 L1580.37 683.428 L1579.82 683.428 L1579.26 683.428 L1578.7 683.428 L1578.14 683.428 L1577.58 683.428 L1577.02 683.428 L1576.46 683.428 L1575.9 683.428 L1575.34 683.428 L1574.78 683.428 L1574.22 683.428 L1573.66 683.428 L1573.1 683.428 L1572.55 683.428 L1571.99 683.428 L1571.43 683.428 L1570.87 683.428 L1570.31 683.428 L1569.75 683.428 L1569.19 683.428 L1568.63 683.428 L1568.07 683.428 L1567.51 683.428 L1566.95 683.428 L1566.39 683.428 L1565.83 683.428 L1565.28 683.428 L1564.72 683.428 L1564.16 683.428 L1563.6 683.428 L1563.04 683.428 L1562.48 683.428 L1561.92 683.428 L1561.36 683.428 L1560.8 683.428 L1560.24 683.428 L1559.68 683.428 L1559.12 683.428 L1558.56 683.428 L1558 683.428 L1557.45 683.428 L1556.89 683.428 L1556.33 683.428 L1555.77 683.428 L1555.21 683.428 L1554.65 683.428 L1554.09 683.428 L1553.53 683.428 L1552.97 683.428 L1552.41 683.428 L1551.85 683.428 L1551.29 683.428 L1550.73 683.428 L1550.18 683.428 L1549.62 683.428 L1549.06 683.428 L1548.5 683.428 L1547.94 683.428 L1547.38 683.428 L1546.82 683.428 L1546.26 683.428 L1545.7 683.428 L1545.14 683.428 L1544.58 683.428 L1544.02 683.428 L1543.46 683.428 L1542.9 683.428 L1542.35 683.428 L1541.79 683.428 L1541.23 683.428 L1540.67 683.428 L1540.11 683.428 L1539.55 683.428 L1538.99 683.428 L1538.43 683.428 L1537.87 683.428 L1537.31 683.428 L1536.75 683.428 L1536.19 683.428 L1535.63 683.428 L1535.08 683.428 L1534.52 683.428 L1533.96 683.428 L1533.4 683.428 L1532.84 683.428 L1532.28 683.428 L1531.72 683.428 L1531.16 683.428 L1530.6 683.428 L1530.04 683.428 L1529.48 683.428 L1528.92 683.428 L1528.36 683.428 L1527.81 683.428 L1527.25 683.428 L1526.69 683.428 L1526.13 683.428 L1525.57 683.428 L1525.01 683.428 L1524.45 683.428 L1523.89 683.428 L1523.33 683.428 L1522.77 683.428 L1522.21 683.428 L1521.65 683.428 L1521.09 683.428 L1520.53 683.428 L1519.98 683.428 L1519.42 683.428 L1518.86 683.428 L1518.3 683.428 L1517.74 683.428 L1517.18 683.428 L1516.62 683.428 L1516.06 683.428 L1515.5 683.428 L1514.94 683.428 L1514.38 683.428 L1513.82 683.428 L1513.26 683.428 L1512.71 683.428 L1512.15 683.428 L1511.59 683.428 L1511.03 683.428 L1510.47 683.428 L1509.91 683.428 L1509.35 683.428 L1508.79 683.428 L1508.23 683.428 L1507.67 683.428 L1507.11 683.428 L1506.55 683.428 L1505.99 683.428 L1505.44 683.428 L1504.88 683.428 L1504.32 683.428 L1503.76 683.428 L1503.2 683.428 L1502.64 683.428 L1502.08 683.428 L1501.52 683.428 L1500.96 683.428 L1500.4 683.428 L1499.84 683.428 L1499.28 683.428 L1498.72 683.428 L1498.16 683.428 L1497.61 683.428 L1497.05 683.428 L1496.49 683.428 L1495.93 683.428 L1495.37 683.428 L1494.81 683.428 L1494.25 683.428 L1493.69 683.428 L1493.13 683.428 L1492.57 683.428 L1492.01 683.428 L1491.45 683.428 L1490.89 683.428 L1490.34 683.428 L1489.78 683.428 L1489.22 683.428 L1488.66 683.428 L1488.1 683.428 L1487.54 683.428 L1486.98 683.428 L1486.42 683.428 L1485.86 683.428 L1485.3 683.428 L1484.74 683.428 L1484.18 683.428 L1483.62 683.428 L1483.07 683.428 L1482.51 683.428 L1481.95 683.428 L1481.39 683.428 L1480.83 683.428 L1480.27 683.428 L1479.71 683.428 L1479.15 683.428 L1478.59 683.428 L1478.03 683.428 L1477.47 683.428 L1476.91 683.428 L1476.35 683.428 L1475.79 683.428 L1475.24 683.428 L1474.68 683.428 L1474.12 683.428 L1473.56 683.428 L1473 683.428 L1472.44 683.428 L1471.88 683.428 L1471.32 683.428 L1470.76 683.428 L1470.2 683.428 L1469.64 683.428 L1469.08 683.428 L1468.52 683.428 L1467.97 683.428 L1467.41 683.428 L1466.85 683.428 L1466.29 683.428 L1465.73 683.428 L1465.17 683.428 L1464.61 683.428 L1464.05 683.428 L1463.49 683.428 L1462.93 683.428 L1462.37 683.428 L1461.81 683.428 L1461.25 683.428 L1460.7 683.428 L1460.14 683.428 L1459.58 683.428 L1459.02 683.428 L1458.46 683.428 L1457.9 683.428 L1457.34 683.428 L1456.78 683.428 L1456.22 683.428 L1455.66 683.428 L1455.1 683.428 L1454.54 683.428 L1453.98 683.428 L1453.42 683.428 L1452.87 683.428 L1452.31 683.428 L1451.75 683.428 L1451.19 683.428 L1450.63 683.428 L1450.07 683.428 L1449.51 683.428 L1448.95 683.428 L1448.39 683.428 L1447.83 683.428 L1447.27 683.428 L1446.71 683.428 L1446.15 683.428 L1445.6 683.428 L1445.04 683.428 L1444.48 683.428 L1443.92 683.428 L1443.36 683.428 L1442.8 683.428 L1442.24 683.428 L1441.68 683.428 L1441.12 683.428 L1440.56 683.428 L1440 683.428 L1439.44 683.428 L1438.88 683.428 L1438.33 683.428 L1437.77 683.428 L1437.21 683.428 L1436.65 683.428 L1436.09 683.428 L1435.53 683.428 L1434.97 683.428 L1434.41 683.428 L1433.85 683.428 L1433.29 683.428 L1432.73 683.428 L1432.17 683.428 L1431.61 683.428 L1431.05 683.428 L1430.5 683.428 L1429.94 683.428 L1429.38 683.428 L1428.82 683.428 L1428.26 683.428 L1427.7 683.428 L1427.14 683.428 L1426.58 683.428 L1426.02 683.428 L1425.46 683.428 L1424.9 683.428 L1424.34 683.428 L1423.78 683.428 L1423.23 683.428 L1422.67 683.428 L1422.11 683.428 L1421.55 683.428 L1420.99 683.428 L1420.43 683.428 L1419.87 683.428 L1419.31 683.428 L1418.75 683.428 L1418.19 683.428 L1417.63 683.428 L1417.07 683.428 L1416.51 683.428 L1415.95 683.428 L1415.4 683.428 L1414.84 683.428 L1414.28 683.428 L1413.72 683.428 L1413.16 683.428 L1412.6 683.428 L1412.04 683.428 L1411.48 683.428 L1410.92 683.428 L1410.36 683.428 L1409.8 683.428 L1409.24 683.428 L1408.68 683.428 L1408.13 683.428 L1407.57 683.428 L1407.01 683.428 L1406.45 683.428 L1405.89 683.428 L1405.33 683.428 L1404.77 683.428 L1404.21 683.428 L1403.65 683.428 L1403.09 683.428 L1402.53 683.428 L1401.97 683.428 L1401.41 683.428 L1400.86 683.428 L1400.3 683.428 L1399.74 683.428 L1399.18 683.428 L1398.62 683.428 L1398.06 683.428 L1397.5 683.428 L1396.94 683.428 L1396.38 683.428 L1395.82 683.428 L1395.26 683.428 L1394.7 683.428 L1394.14 683.428 L1393.58 683.428 L1393.03 683.428 L1392.47 683.428 L1391.91 683.428 L1391.35 683.428 L1390.79 683.428 L1390.23 683.428 L1389.67 683.428 L1389.11 683.428 L1388.55 683.428 L1387.99 683.428 L1387.43 683.428 L1386.87 683.428 L1386.31 683.428 L1385.76 683.428 L1385.2 683.428 L1384.64 683.428 L1384.08 683.428 L1383.52 683.428 L1382.96 683.428 L1382.4 683.428 L1381.84 683.428 L1381.28 683.428 L1380.72 683.428 L1380.16 683.428 L1379.6 683.428 L1379.04 683.428 L1378.49 683.428 L1377.93 683.428 L1377.37 683.428 L1376.81 683.428 L1376.25 683.428 L1375.69 683.428 L1375.13 683.428 L1374.57 683.428 L1374.01 683.428 L1373.45 683.428 L1372.89 683.428 L1372.33 683.428 L1371.77 683.428 L1371.21 683.428 L1370.66 683.428 L1370.1 683.428 L1369.54 683.428 L1368.98 683.428 L1368.42 683.428 L1367.86 683.428 L1367.3 683.428 L1366.74 683.428 L1366.18 683.428 L1365.62 683.428 L1365.06 683.428 L1364.5 683.428 L1363.94 683.428 L1363.39 683.428 L1362.83 683.428 L1362.27 683.428 L1361.71 683.428 L1361.15 683.428 L1360.59 683.428 L1360.03 683.428 L1359.47 683.428 L1358.91 683.428 L1358.35 683.428 L1357.79 683.428 L1357.23 683.428 L1356.67 683.428 L1356.12 683.428 L1355.56 683.428 L1355 683.428 L1354.44 683.428 L1353.88 683.428 L1353.32 683.428 L1352.76 683.428 L1352.2 683.428 L1351.64 683.428 L1351.08 683.428 L1350.52 683.428 L1349.96 683.428 L1349.4 683.428 L1348.84 683.428 L1348.29 683.428 L1347.73 683.428 L1347.17 683.428 L1346.61 683.428 L1346.05 683.428 L1345.49 683.428 L1344.93 683.428 L1344.37 683.428 L1343.81 683.428 L1343.25 683.428 L1342.69 683.428 L1342.13 683.428 L1341.57 683.428 L1341.02 683.428 L1340.46 683.428 L1339.9 683.428 L1339.34 683.428 L1338.78 683.428 L1338.22 683.428 L1337.66 683.428 L1337.1 683.428 L1336.54 683.428 L1335.98 683.428 L1335.42 683.428 L1334.86 683.428 L1334.3 683.428 L1333.75 683.428 L1333.19 683.428 L1332.63 683.428 L1332.07 683.428 L1331.51 683.428 L1330.95 683.428 L1330.39 683.428 L1329.83 683.428 L1329.27 683.428 L1328.71 683.428 L1328.15 683.428 L1327.59 683.428 L1327.03 683.428 L1326.47 683.428 L1325.92 683.428 L1325.36 683.428 L1324.8 683.428 L1324.24 683.428 L1323.68 683.428 L1323.12 683.428 L1322.56 683.428 L1322 683.428 L1321.44 683.428 L1320.88 683.428 L1320.32 683.428 L1319.76 683.428 L1319.2 683.428 L1318.65 683.428 L1318.09 683.428 L1317.53 683.428 L1316.97 683.428 L1316.41 683.428 L1315.85 683.428 L1315.29 683.428 L1314.73 683.428 L1314.17 683.428 L1313.61 683.428 L1313.05 683.428 L1312.49 683.428 L1311.93 683.428 L1311.38 683.428 L1310.82 683.428 L1310.26 683.428 L1309.7 683.428 L1309.14 683.428 L1308.58 683.428 L1308.02 683.428 L1307.46 683.428 L1306.9 683.428 L1306.34 683.428 L1305.78 683.428 L1305.22 683.428 L1304.66 683.428 L1304.1 683.428 L1303.55 683.428 L1302.99 683.428 L1302.43 683.428 L1301.87 683.428 L1301.31 683.428 L1300.75 683.428 L1300.19 683.428 L1299.63 683.428 L1299.07 683.428 L1298.51 683.428 L1297.95 683.428 L1297.39 683.428 L1296.83 683.428 L1296.28 683.428 L1295.72 683.428 L1295.16 683.428 L1294.6 683.428 L1294.04 683.428 L1293.48 683.428 L1292.92 683.428 L1292.36 683.428 L1291.8 683.428 L1291.24 683.428 L1290.68 683.428 L1290.12 683.428 L1289.56 683.428 L1289 683.428 L1288.45 683.428 L1287.89 683.428 L1287.33 683.428 L1286.77 683.428 L1286.21 683.428 L1285.65 683.428 L1285.09 683.428 L1284.53 683.428 L1283.97 683.428 L1283.41 683.428 L1282.85 683.428 L1282.29 683.428 L1281.73 683.428 L1281.18 683.428 L1280.62 683.428 L1280.06 683.428 L1279.5 683.428 L1278.94 683.428 L1278.38 683.428 L1277.82 683.428 L1277.26 683.428 L1276.7 683.428 L1276.14 683.428 L1275.58 683.428 L1275.02 683.428 L1274.46 683.428 L1273.91 683.428 L1273.35 683.428 L1272.79 683.428 L1272.23 683.428 L1271.67 683.428 L1271.11 683.428 L1270.55 683.428 L1269.99 683.428 L1269.43 683.428 L1268.87 683.428 L1268.31 683.428 L1267.75 683.428 L1267.19 683.428 L1266.63 683.428 L1266.08 683.428 L1265.52 683.428 L1264.96 683.428 L1264.4 683.428 L1263.84 683.428 L1263.28 683.428 L1262.72 683.428 L1262.16 683.428 L1261.6 683.428 L1261.04 683.428 L1260.48 683.428 L1259.92 683.428 L1259.36 683.428 L1258.81 683.428 L1258.25 683.428 L1257.69 683.428 L1257.13 683.428 L1256.57 683.428 L1256.01 683.428 L1255.45 683.428 L1254.89 683.428 L1254.33 683.428 L1253.77 683.428 L1253.21 683.428 L1252.65 683.428 L1252.09 683.428 L1251.54 683.428 L1250.98 683.428 L1250.42 683.428 L1249.86 683.428 L1249.3 683.428 L1248.74 683.428 L1248.18 683.428 L1247.62 683.428 L1247.06 683.428 L1246.5 683.428 L1245.94 683.428 L1245.38 683.428 L1244.82 683.428 L1244.26 683.428 L1243.71 683.428 L1243.15 683.428 L1242.59 683.428 L1242.03 683.428 L1241.47 683.428 L1240.91 683.428 L1240.35 683.428 L1239.79 683.428 L1239.23 683.428 L1238.67 683.428 L1238.11 683.428 L1237.55 683.428 L1236.99 683.428 L1236.44 683.428 L1235.88 683.428 L1235.32 683.428 L1234.76 683.428 L1234.2 683.428 L1233.64 683.428 L1233.08 683.428 L1232.52 683.428 L1231.96 683.428 L1231.4 683.428 L1230.84 683.428 L1230.28 683.428 L1229.72 683.428 L1229.17 683.428 L1228.61 683.428 L1228.05 683.428 L1227.49 683.428 L1226.93 683.428 L1226.37 683.428 L1225.81 683.428 L1225.25 683.428 L1224.69 683.428 L1224.13 683.428 L1223.57 683.428 L1223.01 683.428 L1222.45 683.428 L1221.89 683.428 L1221.34 683.428 L1220.78 683.428 L1220.22 683.428 L1219.66 683.428 L1219.1 683.428 L1218.54 683.428 L1217.98 683.428 L1217.42 683.428 L1216.86 683.428 L1216.3 683.428 L1215.74 683.428 L1215.18 683.428 L1214.62 683.428 L1214.07 683.428 L1213.51 683.428 L1212.95 683.428 L1212.39 683.428 L1211.83 683.428 L1211.27 683.428 L1210.71 683.428 L1210.15 683.428 L1209.59 683.428 L1209.03 683.428 L1208.47 683.428 L1207.91 683.428 L1207.35 683.428 L1206.8 683.428 L1206.24 683.428 L1205.68 683.428 L1205.12 683.428 L1204.56 683.428 L1204 683.428 L1203.44 683.428 L1202.88 683.428 L1202.32 683.428 L1201.76 683.428 L1201.2 683.428 L1200.64 683.428 L1200.08 683.428 L1199.52 683.428 L1198.97 683.428 L1198.41 683.428 L1197.85 683.428 L1197.29 683.428 L1196.73 683.428 L1196.17 683.428 L1195.61 683.428 L1195.05 683.428 L1194.49 683.428 L1193.93 683.428 L1193.37 683.428 L1192.81 683.428 L1192.25 683.428 L1191.7 683.428 L1191.14 683.428 L1190.58 683.428 L1190.02 683.428 L1189.46 683.428 L1188.9 683.428 L1188.34 683.428 L1187.78 683.428 L1187.22 683.428 L1186.66 683.428 L1186.1 683.428 L1185.54 683.428 L1184.98 683.428 L1184.43 683.428 L1183.87 683.428 L1183.31 683.428 L1182.75 683.428 L1182.19 683.428 L1181.63 683.428 L1181.07 683.428 L1180.51 683.428 L1179.95 683.428 L1179.39 683.428 L1178.83 683.428 L1178.27 683.428 L1177.71 683.428 L1177.15 683.428 L1176.6 683.428 L1176.04 683.428 L1175.48 683.428 L1174.92 683.428 L1174.36 683.428 L1173.8 683.428 L1173.24 683.428 L1172.68 683.428 L1172.12 683.428 L1171.56 683.428 L1171 683.428 L1170.44 683.428 L1169.88 683.428 L1169.33 683.428 L1168.77 683.428 L1168.21 683.428 L1167.65 683.428 L1167.09 683.428 L1166.53 683.428 L1165.97 683.428 L1165.41 683.428 L1164.85 683.428 L1164.29 683.428 L1163.73 683.428 L1163.17 683.428 L1162.61 683.428 L1162.05 683.428 L1161.5 683.428 L1160.94 683.428 L1160.38 683.428 L1159.82 683.428 L1159.26 683.428 L1158.7 683.428 L1158.14 683.428 L1157.58 683.428 L1157.02 683.428 L1156.46 683.428 L1155.9 683.428 L1155.34 683.428 L1154.78 683.428 L1154.23 683.428 L1153.67 683.428 L1153.11 683.428 L1152.55 683.428 L1151.99 683.428 L1151.43 683.428 L1150.87 683.428 L1150.31 683.428 L1149.75 683.428 L1149.19 683.428 L1148.63 683.428 L1148.07 683.428 L1147.51 683.428 L1146.96 683.428 L1146.4 683.428 L1145.84 683.428 L1145.28 683.428 L1144.72 683.428 L1144.16 683.428 L1143.6 683.428 L1143.04 683.428 L1142.48 683.428 L1141.92 683.428 L1141.36 683.428 L1140.8 683.428 L1140.24 683.428 L1139.68 683.428 L1139.13 683.428 L1138.57 683.428 L1138.01 683.428 L1137.45 683.428 L1136.89 683.428 L1136.33 683.428 L1135.77 683.428 L1135.21 683.428 L1134.65 683.428 L1134.09 683.428 L1133.53 683.428 L1132.97 683.428 L1132.41 683.428 L1131.86 683.428 L1131.3 683.428 L1130.74 683.428 L1130.18 683.428 L1129.62 683.428 L1129.06 683.428 L1128.5 683.428 L1127.94 683.428 L1127.38 683.428 L1126.82 683.428 L1126.26 683.428 L1125.7 683.428 L1125.14 683.428 L1124.59 683.428 L1124.03 683.428 L1123.47 683.428 L1122.91 683.428 L1122.35 683.428 L1121.79 683.428 L1121.23 683.428 L1120.67 683.428 L1120.11 683.428 L1119.55 683.428 L1118.99 683.428 L1118.43 683.428 L1117.87 683.428 L1117.31 683.428 L1116.76 683.428 L1116.2 683.428 L1115.64 683.428 L1115.08 683.428 L1114.52 683.428 L1113.96 683.428 L1113.4 683.428 L1112.84 683.428 L1112.28 683.428 L1111.72 683.428 L1111.16 683.428 L1110.6 683.428 L1110.04 683.428 L1109.49 683.428 L1108.93 683.428 L1108.37 683.428 L1107.81 683.428 L1107.25 683.428 L1106.69 683.428 L1106.13 683.428 L1105.57 683.428 L1105.01 683.428 L1104.45 683.428 L1103.89 683.428 L1103.33 683.428 L1102.77 683.428 L1102.22 683.428 L1101.66 683.428 L1101.1 683.428 L1100.54 683.428 L1099.98 683.428 L1099.42 683.428 L1098.86 683.428 L1098.3 683.428 L1097.74 683.428 L1097.18 683.428 L1096.62 683.428 L1096.06 683.428 L1095.5 683.428 L1094.94 683.428 L1094.39 683.428 L1093.83 683.428 L1093.27 683.428 L1092.71 683.428 L1092.15 683.428 L1091.59 683.428 L1091.03 683.428 L1090.47 683.428 L1089.91 683.428 L1089.35 683.428 L1088.79 683.428 L1088.23 683.428 L1087.67 683.428 L1087.12 683.428 L1086.56 683.428 L1086 683.428 L1085.44 683.428 L1084.88 683.428 L1084.32 683.428 L1083.76 683.428 L1083.2 683.428 L1082.64 683.428 L1082.08 683.428 L1081.52 683.428 L1080.96 683.428 L1080.4 683.428 L1079.85 683.428 L1079.29 683.428 L1078.73 683.428 L1078.17 683.428 L1077.61 683.428 L1077.05 683.428 L1076.49 683.428 L1075.93 683.428 L1075.37 683.428 L1074.81 683.428 L1074.25 683.428 L1073.69 683.428 L1073.13 683.428 L1072.57 683.428 L1072.02 683.428 L1071.46 683.428 L1070.9 683.428 L1070.34 683.428 L1069.78 683.428 L1069.22 683.428 L1068.66 683.428 L1068.1 683.428 L1067.54 683.428 L1066.98 683.428 L1066.42 683.428 L1065.86 683.428 L1065.3 683.428 L1064.75 683.428 L1064.19 683.428 L1063.63 683.428 L1063.07 683.428 L1062.51 683.428 L1061.95 683.428 L1061.39 683.428 L1060.83 683.428 L1060.27 683.428 L1059.71 683.428 L1059.15 683.428 L1058.59 683.428 L1058.03 683.428 L1057.48 683.428 L1056.92 683.428 L1056.36 683.428 L1055.8 683.428 L1055.24 683.428 L1054.68 683.428 L1054.12 683.428 L1053.56 683.428 L1053 683.428 L1052.44 683.428 L1051.88 683.428 L1051.32 683.428 L1050.76 683.428 L1050.2 683.428 L1049.65 683.428 L1049.09 683.428 L1048.53 683.428 L1047.97 683.428 L1047.41 683.428 L1046.85 683.428 L1046.29 683.428 L1045.73 683.428 L1045.17 683.428 L1044.61 683.428 L1044.05 683.428 L1043.49 683.428 L1042.93 683.428 L1042.38 683.428 L1041.82 683.428 L1041.26 683.428 L1040.7 683.428 L1040.14 683.428 L1039.58 683.428 L1039.02 683.428 L1038.46 683.428 L1037.9 683.428 L1037.34 683.428 L1036.78 683.428 L1036.22 683.428 L1035.66 683.428 L1035.1 683.428 L1034.55 683.428 L1033.99 683.428 L1033.43 683.428 L1032.87 683.428 L1032.31 683.428 L1031.75 683.428 L1031.19 683.428 L1030.63 683.428 L1030.07 683.428 L1029.51 683.428 L1028.95 683.428 L1028.39 683.428 L1027.83 683.428 L1027.28 683.428 L1026.72 683.428 L1026.16 683.428 L1025.6 683.428 L1025.04 683.428 L1024.48 683.428 L1023.92 683.428 L1023.36 683.428 L1022.8 683.428 L1022.24 683.428 L1021.68 683.428 L1021.12 683.428 L1020.56 683.428 L1020.01 683.428 L1019.45 683.428 L1018.89 683.428 L1018.33 683.428 L1017.77 683.428 L1017.21 683.428 L1016.65 683.428 L1016.09 683.428 L1015.53 683.428 L1014.97 683.428 L1014.41 683.428 L1013.85 683.428 L1013.29 683.428 L1012.73 683.428 L1012.18 683.428 L1011.62 683.428 L1011.06 683.428 L1010.5 683.428 L1009.94 683.428 L1009.38 683.428 L1008.82 683.428 L1008.26 683.428 L1007.7 683.428 L1007.14 683.428 L1006.58 683.428 L1006.02 683.428 L1005.46 683.428 L1004.91 683.428 L1004.35 683.428 L1003.79 683.428 L1003.23 683.428 L1002.67 683.428 L1002.11 683.428 L1001.55 683.428 L1000.99 683.428 L1000.43 683.428 L999.872 683.428 L999.313 683.428 L998.754 683.428 L998.194 683.428 L997.635 683.428 L997.076 683.428 L996.517 683.428 L995.957 683.428 L995.398 683.428 L994.839 683.428 L994.28 683.428 L993.72 683.428 L993.161 683.428 L992.602 683.428 L992.043 683.428 L991.483 683.428 L990.924 683.428 L990.365 683.428 L989.806 683.428 L989.246 683.428 L988.687 683.428 L988.128 683.428 L987.569 683.428 L987.009 683.428 L986.45 683.428 L985.891 683.428 L985.332 683.428 L984.772 683.428 L984.213 683.428 L983.654 683.428 L983.095 683.428 L982.535 683.428 L981.976 683.428 L981.417 683.428 L980.858 683.428 L980.298 683.428 L979.739 683.428 L979.18 683.428 L978.621 683.428 L978.061 683.428 L977.502 683.428 L976.943 683.428 L976.384 683.428 L975.824 683.428 L975.265 683.428 L974.706 683.428 L974.147 683.428 L973.587 683.428 L973.028 683.428 L972.469 683.428 L971.91 683.428 L971.35 683.428 L970.791 683.428 L970.232 683.428 L969.673 683.428 L969.113 683.428 L968.554 683.428 L967.995 683.428 L967.436 683.428 L966.876 683.428 L966.317 683.428 L965.758 683.428 L965.199 683.428 L964.639 683.428 L964.08 683.428 L963.521 683.428 L962.962 683.428 L962.402 683.428 L961.843 683.428 L961.284 683.428 L960.725 683.428 L960.165 683.428 L959.606 683.428 L959.047 683.428 L958.488 683.428 L957.928 683.428 L957.369 683.428 L956.81 683.428 L956.251 683.428 L955.691 683.428 L955.132 683.428 L954.573 683.428 L954.014 683.428 L953.454 683.428 L952.895 683.428 L952.336 683.428 L951.777 683.428 L951.217 683.428 L950.658 683.428 L950.099 683.428 L949.54 683.428 L948.98 683.428 L948.421 683.428 L947.862 683.428 L947.303 683.428 L946.743 683.428 L946.184 683.428 L945.625 683.428 L945.066 683.428 L944.506 683.428 L943.947 683.428 L943.388 683.428 L942.829 683.428 L942.269 683.428 L941.71 683.428 L941.151 683.428 L940.592 683.428 L940.032 683.428 L939.473 683.428 L938.914 683.428 L938.355 683.428 L937.795 683.428 L937.236 683.428 L936.677 683.428 L936.118 683.428 L935.558 683.428 L934.999 683.428 L934.44 683.428 L933.881 683.428 L933.321 683.428 L932.762 683.428 L932.203 683.428 L931.644 683.428 L931.084 683.428 L930.525 683.428 L929.966 683.428 L929.406 683.428 L928.847 683.428 L928.288 683.428 L927.729 683.428 L927.169 683.428 L926.61 683.428 L926.051 683.428 L925.492 683.428 L924.932 683.428 L924.373 683.428 L923.814 683.428 L923.255 683.428 L922.695 683.428 L922.136 683.428 L921.577 683.428 L921.018 683.428 L920.458 683.428 L919.899 683.428 L919.34 683.428 L918.781 683.428 L918.221 683.428 L917.662 683.428 L917.103 683.428 L916.544 683.428 L915.984 683.428 L915.425 683.428 L914.866 683.428 L914.307 683.428 L913.747 683.428 L913.188 683.428 L912.629 683.428 L912.07 683.428 L911.51 683.428 L910.951 683.428 L910.392 683.428 L909.833 683.428 L909.273 683.428 L908.714 683.428 L908.155 683.428 L907.596 683.428 L907.036 683.428 L906.477 683.428 L905.918 683.428 L905.359 683.428 L904.799 683.428 L904.24 683.428 L903.681 683.428 L903.122 683.428 L902.562 683.428 L902.003 683.428 L901.444 683.428 L900.885 683.428 L900.325 683.428 L899.766 683.428 L899.207 683.428 L898.648 683.428 L898.088 683.428 L897.529 683.428 L896.97 683.428 L896.411 683.428 L895.851 683.428 L895.292 683.428 L894.733 683.428 L894.174 683.428 L893.614 683.428 L893.055 683.428 L892.496 683.428 L891.937 683.428 L891.377 683.428 L890.818 683.428 L890.259 683.428 L889.7 683.428 L889.14 683.428 L888.581 683.428 L888.022 683.428 L887.463 683.428 L886.903 683.428 L886.344 683.428 L885.785 683.428 L885.226 683.428 L884.666 683.428 L884.107 683.428 L883.548 683.428 L882.989 683.428 L882.429 683.428 L881.87 683.428 L881.311 683.428 L880.752 683.428 L880.192 683.428 L879.633 683.428 L879.074 683.428 L878.515 683.428 L877.955 683.428 L877.396 683.428 L876.837 683.428 L876.278 683.428 L875.718 683.428 L875.159 683.428 L874.6 683.428 L874.041 683.428 L873.481 683.428 L872.922 683.428 L872.363 683.428 L871.804 683.428 L871.244 683.428 L870.685 683.428 L870.126 683.428 L869.567 683.428 L869.007 683.428 L868.448 683.428 L867.889 683.428 L867.33 683.428 L866.77 683.428 L866.211 683.428 L865.652 683.428 L865.093 683.428 L864.533 683.428 L863.974 683.428 L863.415 683.428 L862.856 683.428 L862.296 683.428 L861.737 683.428 L861.178 683.428 L860.619 683.428 L860.059 683.428 L859.5 683.428 L858.941 683.428 L858.382 683.428 L857.822 683.428 L857.263 683.428 L856.704 683.428 L856.145 683.428 L855.585 683.428 L855.026 683.428 L854.467 683.428 L853.908 683.428 L853.348 683.428 L852.789 683.428 L852.23 683.428 L851.671 683.428 L851.111 683.428 L850.552 683.428 L849.993 683.428 L849.434 683.428 L848.874 683.428 L848.315 683.428 L847.756 683.428 L847.197 683.428 L846.637 683.428 L846.078 683.428 L845.519 683.428 L844.96 683.428 L844.4 683.428 L843.841 683.428 L843.282 683.428 L842.723 683.428 L842.163 683.428 L841.604 683.428 L841.045 683.428 L840.486 683.428 L839.926 683.428 L839.367 683.428 L838.808 683.428 L838.249 683.428 L837.689 683.428 L837.13 683.428 L836.571 683.428 L836.012 683.428 L835.452 683.428 L834.893 683.428 L834.334 683.428 L833.775 683.428 L833.215 683.428 L832.656 683.428 L832.097 683.428 L831.538 683.428 L830.978 683.428 L830.419 683.428 L829.86 683.428 L829.301 683.428 L828.741 683.428 L828.182 683.428 L827.623 683.428 L827.064 683.428 L826.504 683.428 L825.945 683.428 L825.386 683.428 L824.827 683.428 L824.267 683.428 L823.708 683.428 L823.149 683.428 L822.59 683.428 L822.03 683.428 L821.471 683.428 L820.912 683.428 L820.353 683.428 L819.793 683.428 L819.234 683.428 L818.675 683.428 L818.116 683.428 L817.556 683.428 L816.997 683.428 L816.438 683.428 L815.879 683.428 L815.319 683.428 L814.76 683.428 L814.201 683.428 L813.642 683.428 L813.082 683.428 L812.523 683.428 L811.964 683.428 L811.405 683.428 L810.845 683.428 L810.286 683.428 L809.727 683.428 L809.168 683.428 L808.608 683.428 L808.049 683.428 L807.49 683.428 L806.931 683.428 L806.371 683.428 L805.812 683.428 L805.253 683.428 L804.693 683.428 L804.134 683.428 L803.575 683.428 L803.016 683.428 L802.456 683.428 L801.897 683.428 L801.338 683.428 L800.779 683.428 L800.219 683.428 L799.66 683.428 L799.101 683.428 L798.542 683.428 L797.982 683.428 L797.423 683.428 L796.864 683.428 L796.305 683.428 L795.745 683.428 L795.186 683.428 L794.627 683.428 L794.068 683.428 L793.508 683.428 L792.949 683.428 L792.39 683.428 L791.831 683.428 L791.271 683.428 L790.712 683.428 L790.153 683.428 L789.594 683.428 L789.034 683.428 L788.475 683.428 L787.916 683.428 L787.357 683.428 L786.797 683.428 L786.238 683.428 L785.679 683.428 L785.12 683.428 L784.56 683.428 L784.001 683.428 L783.442 683.428 L782.883 683.428 L782.323 683.428 L781.764 683.428 L781.205 683.428 L780.646 683.428 L780.086 683.428 L779.527 683.428 L778.968 683.428 L778.409 683.428 L777.849 683.428 L777.29 683.428 L776.731 683.428 L776.172 683.428 L775.612 683.428 L775.053 683.428 L774.494 683.428 L773.935 683.428 L773.375 683.428 L772.816 683.428 L772.257 683.428 L771.698 683.428 L771.138 683.428 L770.579 683.428 L770.02 683.428 L769.461 683.428 L768.901 683.428 L768.342 683.428 L767.783 683.428 L767.224 683.428 L766.664 683.428 L766.105 683.428 L765.546 683.428 L764.987 683.428 L764.427 683.428 L763.868 683.428 L763.309 683.428 L762.75 683.428 L762.19 683.428 L761.631 683.428 L761.072 683.428 L760.513 683.428 L759.953 683.428 L759.394 683.428 L758.835 683.428 L758.276 683.428 L757.716 683.428 L757.157 683.428 L756.598 683.428 L756.039 683.428 L755.479 683.428 L754.92 683.428 L754.361 683.428 L753.802 683.428 L753.242 683.428 L752.683 683.428 L752.124 683.428 L751.565 683.428 L751.005 683.428 L750.446 683.428 L749.887 683.428 L749.328 683.428 L748.768 683.428 L748.209 683.428 L747.65 683.428 L747.091 683.428 L746.531 683.428 L745.972 683.428 L745.413 683.428 L744.854 683.428 L744.294 683.428 L743.735 683.428 L743.176 683.428 L742.617 683.428 L742.057 683.428 L741.498 683.428 L740.939 683.428 L740.38 683.428 L739.82 683.428 L739.261 683.428 L738.702 683.428 L738.143 683.428 L737.583 683.428 L737.024 683.428 L736.465 683.428 L735.906 683.428 L735.346 683.428 L734.787 683.428 L734.228 683.428 L733.669 683.428 L733.109 683.428 L732.55 683.428 L731.991 683.428 L731.432 683.428 L730.872 683.428 L730.313 683.428 L729.754 683.428 L729.195 683.428 L728.635 683.428 L728.076 683.428 L727.517 683.428 L726.958 683.428 L726.398 683.428 L725.839 683.428 L725.28 683.428 L724.721 683.428 L724.161 683.428 L723.602 683.428 L723.043 683.428 L722.484 683.428 L721.924 683.428 L721.365 683.428 L720.806 683.428 L720.247 683.428  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.943 720.806,687.943 721.365,687.943 721.924,687.943 722.484,687.943 723.043,687.943 723.602,687.943 724.161,687.943 724.721,687.943 725.28,687.943 725.839,687.943 726.398,687.943 726.958,687.943 727.517,687.943 728.076,687.943 728.635,687.943 729.195,687.943 729.754,687.943 730.313,687.943 730.872,687.943 731.432,687.943 731.991,687.943 732.55,687.943 733.109,687.943 733.669,687.943 734.228,687.943 734.787,687.943 735.346,687.943 735.906,687.943 736.465,687.943 737.024,687.943 737.583,687.943 738.143,687.943 738.702,687.943 739.261,687.943 739.82,687.943 740.38,687.943 740.939,687.943 741.498,687.943 742.057,687.943 742.617,687.943 743.176,687.943 743.735,687.943 744.294,687.943 744.854,687.943 745.413,687.943 745.972,687.943 746.531,687.943 747.091,687.943 747.65,687.943 748.209,687.943 748.768,687.943 749.328,687.943 749.887,687.943 750.446,687.943 751.005,687.943 751.565,687.943 752.124,687.943 752.683,687.943 753.242,687.943 753.802,687.943 754.361,687.943 754.92,687.943 755.479,687.943 756.039,687.943 756.598,687.943 757.157,687.943 757.716,687.943 758.276,687.943 758.835,687.943 759.394,687.943 759.953,687.943 760.513,687.943 761.072,687.943 761.631,687.943 762.19,687.943 762.75,687.943 763.309,687.943 763.868,687.943 764.427,687.943 764.987,687.943 765.546,687.943 766.105,687.943 766.664,687.943 767.224,687.943 767.783,687.943 768.342,687.943 768.901,687.943 769.461,687.943 770.02,687.943 770.579,687.943 771.138,687.943 771.698,687.943 772.257,687.943 772.816,687.943 773.375,687.943 773.935,687.943 774.494,687.943 775.053,687.943 775.612,687.943 776.172,687.943 776.731,687.943 777.29,687.943 777.849,687.943 778.409,687.943 778.968,687.943 779.527,687.943 780.086,687.943 780.646,687.943 781.205,687.943 781.764,687.943 782.323,687.943 782.883,687.943 783.442,687.943 784.001,687.943 784.56,687.943 785.12,687.943 785.679,687.943 786.238,687.943 786.797,687.943 787.357,687.943 787.916,687.943 788.475,687.943 789.034,687.943 789.594,687.943 790.153,687.943 790.712,687.943 791.271,687.943 791.831,687.943 792.39,687.943 792.949,687.943 793.508,687.943 794.068,687.943 794.627,687.943 795.186,687.943 795.745,687.943 796.305,687.943 796.864,687.943 797.423,687.943 797.982,687.943 798.542,687.943 799.101,687.943 799.66,687.943 800.219,687.943 800.779,687.943 801.338,687.943 801.897,687.943 802.456,687.943 803.016,687.943 803.575,687.943 804.134,687.943 804.693,687.943 805.253,687.943 805.812,687.943 806.371,687.943 806.931,687.943 807.49,687.943 808.049,687.943 808.608,687.943 809.168,687.943 809.727,687.943 810.286,687.943 810.845,687.943 811.405,687.943 811.964,687.943 812.523,687.943 813.082,687.943 813.642,687.943 814.201,687.943 814.76,687.943 815.319,687.943 815.879,687.943 816.438,687.943 816.997,687.943 817.556,687.943 818.116,687.943 818.675,687.943 819.234,687.943 819.793,687.943 820.353,687.943 820.912,687.943 821.471,687.943 822.03,687.943 822.59,687.943 823.149,687.943 823.708,687.943 824.267,687.943 824.827,687.943 825.386,687.943 825.945,687.943 826.504,687.943 827.064,687.943 827.623,687.943 828.182,687.943 828.741,687.943 829.301,687.943 829.86,687.943 830.419,687.943 830.978,687.943 831.538,687.943 832.097,687.943 832.656,687.943 833.215,687.943 833.775,687.943 834.334,687.943 834.893,687.943 835.452,687.943 836.012,687.943 836.571,687.943 837.13,687.943 837.689,687.943 838.249,687.943 838.808,687.943 839.367,687.943 839.926,687.943 840.486,687.943 841.045,687.943 841.604,687.943 842.163,687.943 842.723,687.943 843.282,687.943 843.841,687.943 844.4,687.943 844.96,687.943 845.519,687.943 846.078,687.943 846.637,687.943 847.197,687.943 847.756,687.943 848.315,687.943 848.874,687.943 849.434,687.943 849.993,687.943 850.552,687.943 851.111,687.943 851.671,687.943 852.23,687.943 852.789,687.943 853.348,687.943 853.908,687.943 854.467,687.943 855.026,687.943 855.585,687.943 856.145,687.943 856.704,687.943 857.263,687.943 857.822,687.943 858.382,687.943 858.941,687.943 859.5,687.943 860.059,687.943 860.619,687.943 861.178,687.943 861.737,687.943 862.296,687.943 862.856,687.943 863.415,687.943 863.974,687.943 864.533,687.943 865.093,687.943 865.652,687.943 866.211,687.943 866.77,687.943 867.33,687.943 867.889,687.943 868.448,687.943 869.007,687.943 869.567,687.943 870.126,687.943 870.685,687.943 871.244,687.943 871.804,687.943 872.363,687.943 872.922,687.943 873.481,687.943 874.041,687.943 874.6,687.943 875.159,687.943 875.718,687.943 876.278,687.943 876.837,687.943 877.396,687.943 877.955,687.943 878.515,687.943 879.074,687.943 879.633,687.943 880.192,687.943 880.752,687.943 881.311,687.943 881.87,687.943 882.429,687.943 882.989,687.943 883.548,687.943 884.107,687.943 884.666,687.943 885.226,687.943 885.785,687.943 886.344,687.943 886.903,687.943 887.463,687.943 888.022,687.943 888.581,687.943 889.14,687.943 889.7,687.943 890.259,687.943 890.818,687.943 891.377,687.943 891.937,687.943 892.496,687.943 893.055,687.943 893.614,687.943 894.174,687.943 894.733,687.943 895.292,687.943 895.851,687.943 896.411,687.943 896.97,687.943 897.529,687.943 898.088,687.943 898.648,687.943 899.207,687.943 899.766,687.943 900.325,687.943 900.885,687.943 901.444,687.943 902.003,687.943 902.562,687.943 903.122,687.943 903.681,687.943 904.24,687.943 904.799,687.943 905.359,687.943 905.918,687.943 906.477,687.943 907.036,687.943 907.596,687.943 908.155,687.943 908.714,687.943 909.273,687.943 909.833,687.943 910.392,687.943 910.951,687.943 911.51,687.943 912.07,687.943 912.629,687.943 913.188,687.943 913.747,687.943 914.307,687.943 914.866,687.943 915.425,687.943 915.984,687.943 916.544,687.943 917.103,687.943 917.662,687.943 918.221,687.943 918.781,687.943 919.34,687.943 919.899,687.943 920.458,687.943 921.018,687.943 921.577,687.943 922.136,687.943 922.695,687.943 923.255,687.943 923.814,687.943 924.373,687.943 924.932,687.943 925.492,687.943 926.051,687.943 926.61,687.943 927.169,687.943 927.729,687.943 928.288,687.943 928.847,687.943 929.406,687.943 929.966,687.943 930.525,687.943 931.084,687.943 931.644,687.943 932.203,687.943 932.762,687.943 933.321,687.943 933.881,687.943 934.44,687.943 934.999,687.943 935.558,687.943 936.118,687.943 936.677,687.943 937.236,687.943 937.795,687.943 938.355,687.943 938.914,687.943 939.473,687.943 940.032,687.943 940.592,687.943 941.151,687.943 941.71,687.943 942.269,687.943 942.829,687.943 943.388,687.943 943.947,687.943 944.506,687.943 945.066,687.943 945.625,687.943 946.184,687.943 946.743,687.943 947.303,687.943 947.862,687.943 948.421,687.943 948.98,687.943 949.54,687.943 950.099,687.943 950.658,687.943 951.217,687.943 951.777,687.943 952.336,687.943 952.895,687.943 953.454,687.943 954.014,687.943 954.573,687.943 955.132,687.943 955.691,687.943 956.251,687.943 956.81,687.943 957.369,687.943 957.928,687.943 958.488,687.943 959.047,687.943 959.606,687.943 960.165,687.943 960.725,687.943 961.284,687.943 961.843,687.943 962.402,687.943 962.962,687.943 963.521,687.943 964.08,687.943 964.639,687.943 965.199,687.943 965.758,687.943 966.317,687.943 966.876,687.943 967.436,687.943 967.995,687.943 968.554,687.943 969.113,687.943 969.673,687.943 970.232,687.943 970.791,687.943 971.35,687.943 971.91,687.943 972.469,687.943 973.028,687.943 973.587,687.943 974.147,687.943 974.706,687.943 975.265,687.943 975.824,687.943 976.384,687.943 976.943,687.943 977.502,687.943 978.061,687.943 978.621,687.943 979.18,687.943 979.739,687.943 980.298,687.943 980.858,687.943 981.417,687.943 981.976,687.943 982.535,687.943 983.095,687.943 983.654,687.943 984.213,687.943 984.772,687.943 985.332,687.943 985.891,687.943 986.45,687.943 987.009,687.943 987.569,687.943 988.128,687.943 988.687,687.943 989.246,687.943 989.806,687.943 990.365,687.943 990.924,687.943 991.483,687.943 992.043,687.943 992.602,687.943 993.161,687.943 993.72,687.943 994.28,687.943 994.839,687.943 995.398,687.943 995.957,687.943 996.517,687.943 997.076,687.943 997.635,687.943 998.194,687.943 998.754,687.943 999.313,687.943 999.872,687.943 1000.43,687.943 1000.99,687.943 1001.55,687.943 1002.11,687.943 1002.67,687.943 1003.23,687.943 1003.79,687.943 1004.35,687.943 1004.91,687.943 1005.46,687.943 1006.02,687.943 1006.58,687.943 1007.14,687.943 1007.7,687.943 1008.26,687.943 1008.82,687.943 1009.38,687.943 1009.94,687.943 1010.5,687.943 1011.06,687.943 1011.62,687.943 1012.18,687.943 1012.73,687.943 1013.29,687.943 1013.85,687.943 1014.41,687.943 1014.97,687.943 1015.53,687.943 1016.09,687.943 1016.65,687.943 1017.21,687.943 1017.77,687.943 1018.33,687.943 1018.89,687.943 1019.45,687.943 1020.01,687.943 1020.56,687.943 1021.12,687.943 1021.68,687.943 1022.24,687.943 1022.8,687.943 1023.36,687.943 1023.92,687.943 1024.48,687.943 1025.04,687.943 1025.6,687.943 1026.16,687.943 1026.72,687.943 1027.28,687.943 1027.83,687.943 1028.39,687.943 1028.95,687.943 1029.51,687.943 1030.07,687.943 1030.63,687.943 1031.19,687.943 1031.75,687.943 1032.31,687.943 1032.87,687.943 1033.43,687.943 1033.99,687.943 1034.55,687.943 1035.1,687.943 1035.66,687.943 1036.22,687.943 1036.78,687.943 1037.34,687.943 1037.9,687.943 1038.46,687.943 1039.02,687.943 1039.58,687.943 1040.14,687.943 1040.7,687.943 1041.26,687.943 1041.82,687.943 1042.38,687.943 1042.93,687.943 1043.49,687.943 1044.05,687.943 1044.61,687.943 1045.17,687.943 1045.73,687.943 1046.29,687.943 1046.85,687.943 1047.41,687.943 1047.97,687.943 1048.53,687.943 1049.09,687.943 1049.65,687.943 1050.2,687.943 1050.76,687.943 1051.32,687.943 1051.88,687.943 1052.44,687.943 1053,687.943 1053.56,687.943 1054.12,687.943 1054.68,687.943 1055.24,687.943 1055.8,687.943 1056.36,687.943 1056.92,687.943 1057.48,687.943 1058.03,687.943 1058.59,687.943 1059.15,687.943 1059.71,687.943 1060.27,687.943 1060.83,687.943 1061.39,687.943 1061.95,687.943 1062.51,687.943 1063.07,687.943 1063.63,687.943 1064.19,687.943 1064.75,687.943 1065.3,687.943 1065.86,687.943 1066.42,687.943 1066.98,687.943 1067.54,687.943 1068.1,687.943 1068.66,687.943 1069.22,687.943 1069.78,687.943 1070.34,687.943 1070.9,687.943 1071.46,687.943 1072.02,687.943 1072.57,687.943 1073.13,687.943 1073.69,687.943 1074.25,687.943 1074.81,687.943 1075.37,687.943 1075.93,687.943 1076.49,687.943 1077.05,687.943 1077.61,687.943 1078.17,687.943 1078.73,687.943 1079.29,687.943 1079.85,687.943 1080.4,687.943 1080.96,687.943 1081.52,687.943 1082.08,687.943 1082.64,687.943 1083.2,687.943 1083.76,687.943 1084.32,687.943 1084.88,687.943 1085.44,687.943 1086,687.943 1086.56,687.943 1087.12,687.943 1087.67,687.943 1088.23,687.943 1088.79,687.943 1089.35,687.943 1089.91,687.943 1090.47,687.943 1091.03,687.943 1091.59,687.943 1092.15,687.943 1092.71,687.943 1093.27,687.943 1093.83,687.943 1094.39,687.943 1094.94,687.943 1095.5,687.943 1096.06,687.943 1096.62,687.943 1097.18,687.943 1097.74,687.943 1098.3,687.943 1098.86,687.943 1099.42,687.943 1099.98,687.943 1100.54,687.943 1101.1,687.943 1101.66,687.943 1102.22,687.943 1102.77,687.943 1103.33,687.943 1103.89,687.943 1104.45,687.943 1105.01,687.943 1105.57,687.943 1106.13,687.943 1106.69,687.943 1107.25,687.943 1107.81,687.943 1108.37,687.943 1108.93,687.943 1109.49,687.943 1110.04,687.943 1110.6,687.943 1111.16,687.943 1111.72,687.943 1112.28,687.943 1112.84,687.943 1113.4,687.943 1113.96,687.943 1114.52,687.943 1115.08,687.943 1115.64,687.943 1116.2,687.943 1116.76,687.943 1117.31,687.943 1117.87,687.943 1118.43,687.943 1118.99,687.943 1119.55,687.943 1120.11,687.943 1120.67,687.943 1121.23,687.943 1121.79,687.943 1122.35,687.943 1122.91,687.943 1123.47,687.943 1124.03,687.943 1124.59,687.943 1125.14,687.943 1125.7,687.943 1126.26,687.943 1126.82,687.943 1127.38,687.943 1127.94,687.943 1128.5,687.943 1129.06,687.943 1129.62,687.943 1130.18,687.943 1130.74,687.943 1131.3,687.943 1131.86,687.943 1132.41,687.943 1132.97,687.943 1133.53,687.943 1134.09,687.943 1134.65,687.943 1135.21,687.943 1135.77,687.943 1136.33,687.943 1136.89,687.943 1137.45,687.943 1138.01,687.943 1138.57,687.943 1139.13,687.943 1139.68,687.943 1140.24,687.943 1140.8,687.943 1141.36,687.943 1141.92,687.943 1142.48,687.943 1143.04,687.943 1143.6,687.943 1144.16,687.943 1144.72,687.943 1145.28,687.943 1145.84,687.943 1146.4,687.943 1146.96,687.943 1147.51,687.943 1148.07,687.943 1148.63,687.943 1149.19,687.943 1149.75,687.943 1150.31,687.943 1150.87,687.943 1151.43,687.943 1151.99,687.943 1152.55,687.943 1153.11,687.943 1153.67,687.943 1154.23,687.943 1154.78,687.943 1155.34,687.943 1155.9,687.943 1156.46,687.943 1157.02,687.943 1157.58,687.943 1158.14,687.943 1158.7,687.943 1159.26,687.943 1159.82,687.943 1160.38,687.943 1160.94,687.943 1161.5,687.943 1162.05,687.943 1162.61,687.943 1163.17,687.943 1163.73,687.943 1164.29,687.943 1164.85,687.943 1165.41,687.943 1165.97,687.943 1166.53,687.943 1167.09,687.943 1167.65,687.943 1168.21,687.943 1168.77,687.943 1169.33,687.943 1169.88,687.943 1170.44,687.943 1171,687.943 1171.56,687.943 1172.12,687.943 1172.68,687.943 1173.24,687.943 1173.8,687.943 1174.36,687.943 1174.92,687.943 1175.48,687.943 1176.04,687.943 1176.6,687.943 1177.15,687.943 1177.71,687.943 1178.27,687.943 1178.83,687.943 1179.39,687.943 1179.95,687.943 1180.51,687.943 1181.07,687.943 1181.63,687.943 1182.19,687.943 1182.75,687.943 1183.31,687.943 1183.87,687.943 1184.43,687.943 1184.98,687.943 1185.54,687.943 1186.1,687.943 1186.66,687.943 1187.22,687.943 1187.78,687.943 1188.34,687.943 1188.9,687.943 1189.46,687.943 1190.02,687.943 1190.58,687.943 1191.14,687.943 1191.7,687.943 1192.25,687.943 1192.81,687.943 1193.37,687.943 1193.93,687.943 1194.49,687.943 1195.05,687.943 1195.61,687.943 1196.17,687.943 1196.73,687.943 1197.29,687.943 1197.85,687.943 1198.41,687.943 1198.97,687.943 1199.52,687.943 1200.08,687.943 1200.64,687.943 1201.2,687.943 1201.76,687.943 1202.32,687.943 1202.88,687.943 1203.44,687.943 1204,687.943 1204.56,687.943 1205.12,687.943 1205.68,687.943 1206.24,687.943 1206.8,687.943 1207.35,687.943 1207.91,687.943 1208.47,687.943 1209.03,687.943 1209.59,687.943 1210.15,687.943 1210.71,687.943 1211.27,687.943 1211.83,687.943 1212.39,687.943 1212.95,687.943 1213.51,687.943 1214.07,687.943 1214.62,687.943 1215.18,687.943 1215.74,687.943 1216.3,687.943 1216.86,687.943 1217.42,687.943 1217.98,687.943 1218.54,687.943 1219.1,687.943 1219.66,687.943 1220.22,687.943 1220.78,687.943 1221.34,687.943 1221.89,687.943 1222.45,687.943 1223.01,687.943 1223.57,687.943 1224.13,687.943 1224.69,687.943 1225.25,687.943 1225.81,687.943 1226.37,687.943 1226.93,687.943 1227.49,687.943 1228.05,687.943 1228.61,687.943 1229.17,687.943 1229.72,687.943 1230.28,687.943 1230.84,687.943 1231.4,687.943 1231.96,687.943 1232.52,687.943 1233.08,687.943 1233.64,687.943 1234.2,687.943 1234.76,687.943 1235.32,687.943 1235.88,687.943 1236.44,687.943 1236.99,687.943 1237.55,687.943 1238.11,687.943 1238.67,687.943 1239.23,687.943 1239.79,687.943 1240.35,687.943 1240.91,687.943 1241.47,687.943 1242.03,687.943 1242.59,687.943 1243.15,687.943 1243.71,687.943 1244.26,687.943 1244.82,687.943 1245.38,687.943 1245.94,687.943 1246.5,687.943 1247.06,687.943 1247.62,687.943 1248.18,687.943 1248.74,687.943 1249.3,687.943 1249.86,687.943 1250.42,687.943 1250.98,687.943 1251.54,687.943 1252.09,687.943 1252.65,687.943 1253.21,687.943 1253.77,687.943 1254.33,687.943 1254.89,687.943 1255.45,687.943 1256.01,687.943 1256.57,687.943 1257.13,687.943 1257.69,687.943 1258.25,687.943 1258.81,687.943 1259.36,687.943 1259.92,687.943 1260.48,687.943 1261.04,687.943 1261.6,687.943 1262.16,687.943 1262.72,687.943 1263.28,687.943 1263.84,687.943 1264.4,687.943 1264.96,687.943 1265.52,687.943 1266.08,687.943 1266.63,687.943 1267.19,687.943 1267.75,687.943 1268.31,687.943 1268.87,687.943 1269.43,687.943 1269.99,687.943 1270.55,687.943 1271.11,687.943 1271.67,687.943 1272.23,687.943 1272.79,687.943 1273.35,687.943 1273.91,687.943 1274.46,687.943 1275.02,687.943 1275.58,687.943 1276.14,687.943 1276.7,687.943 1277.26,687.943 1277.82,687.943 1278.38,687.943 1278.94,687.943 1279.5,687.943 1280.06,687.943 1280.62,687.943 1281.18,687.943 1281.73,687.943 1282.29,687.943 1282.85,687.943 1283.41,687.943 1283.97,687.943 1284.53,687.943 1285.09,687.943 1285.65,687.943 1286.21,687.943 1286.77,687.943 1287.33,687.943 1287.89,687.943 1288.45,687.943 1289,687.943 1289.56,687.943 1290.12,687.943 1290.68,687.943 1291.24,687.943 1291.8,687.943 1292.36,687.943 1292.92,687.943 1293.48,687.943 1294.04,687.943 1294.6,687.943 1295.16,687.943 1295.72,687.943 1296.28,687.943 1296.83,687.943 1297.39,687.943 1297.95,687.943 1298.51,687.943 1299.07,687.943 1299.63,687.943 1300.19,687.943 1300.75,687.943 1301.31,687.943 1301.87,687.943 1302.43,687.943 1302.99,687.943 1303.55,687.943 1304.1,687.943 1304.66,687.943 1305.22,687.943 1305.78,687.943 1306.34,687.943 1306.9,687.943 1307.46,687.943 1308.02,687.943 1308.58,687.943 1309.14,687.943 1309.7,687.943 1310.26,687.943 1310.82,687.943 1311.38,687.943 1311.93,687.943 1312.49,687.943 1313.05,687.943 1313.61,687.943 1314.17,687.943 1314.73,687.943 1315.29,687.943 1315.85,687.943 1316.41,687.943 1316.97,687.943 1317.53,687.943 1318.09,687.943 1318.65,687.943 1319.2,687.943 1319.76,687.943 1320.32,687.943 1320.88,687.943 1321.44,687.943 1322,687.943 1322.56,687.943 1323.12,687.943 1323.68,687.943 1324.24,687.943 1324.8,687.943 1325.36,687.943 1325.92,687.943 1326.47,687.943 1327.03,687.943 1327.59,687.943 1328.15,687.943 1328.71,687.943 1329.27,687.943 1329.83,687.943 1330.39,687.943 1330.95,687.943 1331.51,687.943 1332.07,687.943 1332.63,687.943 1333.19,687.943 1333.75,687.943 1334.3,687.943 1334.86,687.943 1335.42,687.943 1335.98,687.943 1336.54,687.943 1337.1,687.943 1337.66,687.943 1338.22,687.943 1338.78,687.943 1339.34,687.943 1339.9,687.943 1340.46,687.943 1341.02,687.943 1341.57,687.943 1342.13,687.943 1342.69,687.943 1343.25,687.943 1343.81,687.943 1344.37,687.943 1344.93,687.943 1345.49,687.943 1346.05,687.943 1346.61,687.943 1347.17,687.943 1347.73,687.943 1348.29,687.943 1348.84,687.943 1349.4,687.943 1349.96,687.943 1350.52,687.943 1351.08,687.943 1351.64,687.943 1352.2,687.943 1352.76,687.943 1353.32,687.943 1353.88,687.943 1354.44,687.943 1355,687.943 1355.56,687.943 1356.12,687.943 1356.67,687.943 1357.23,687.943 1357.79,687.943 1358.35,687.943 1358.91,687.943 1359.47,687.943 1360.03,687.943 1360.59,687.943 1361.15,687.943 1361.71,687.943 1362.27,687.943 1362.83,687.943 1363.39,687.943 1363.94,687.943 1364.5,687.943 1365.06,687.943 1365.62,687.943 1366.18,687.943 1366.74,687.943 1367.3,687.943 1367.86,687.943 1368.42,687.943 1368.98,687.943 1369.54,687.943 1370.1,687.943 1370.66,687.943 1371.21,687.943 1371.77,687.943 1372.33,687.943 1372.89,687.943 1373.45,687.943 1374.01,687.943 1374.57,687.943 1375.13,687.943 1375.69,687.943 1376.25,687.943 1376.81,687.943 1377.37,687.943 1377.93,687.943 1378.49,687.943 1379.04,687.943 1379.6,687.943 1380.16,687.943 1380.72,687.943 1381.28,687.943 1381.84,687.943 1382.4,687.943 1382.96,687.943 1383.52,687.943 1384.08,687.943 1384.64,687.943 1385.2,687.943 1385.76,687.943 1386.31,687.943 1386.87,687.943 1387.43,687.943 1387.99,687.943 1388.55,687.943 1389.11,687.943 1389.67,687.943 1390.23,687.943 1390.79,687.943 1391.35,687.943 1391.91,687.943 1392.47,687.943 1393.03,687.943 1393.58,687.943 1394.14,687.943 1394.7,687.943 1395.26,687.943 1395.82,687.943 1396.38,687.943 1396.94,687.943 1397.5,687.943 1398.06,687.943 1398.62,687.943 1399.18,687.943 1399.74,687.943 1400.3,687.943 1400.86,687.943 1401.41,687.943 1401.97,687.943 1402.53,687.943 1403.09,687.943 1403.65,687.943 1404.21,687.943 1404.77,687.943 1405.33,687.943 1405.89,687.943 1406.45,687.943 1407.01,687.943 1407.57,687.943 1408.13,687.943 1408.68,687.943 1409.24,687.943 1409.8,687.943 1410.36,687.943 1410.92,687.943 1411.48,687.943 1412.04,687.943 1412.6,687.943 1413.16,687.943 1413.72,687.943 1414.28,687.943 1414.84,687.943 1415.4,687.943 1415.95,687.943 1416.51,687.943 1417.07,687.943 1417.63,687.943 1418.19,687.943 1418.75,687.943 1419.31,687.943 1419.87,687.943 1420.43,687.943 1420.99,687.943 1421.55,687.943 1422.11,687.943 1422.67,687.943 1423.23,687.943 1423.78,687.943 1424.34,687.943 1424.9,687.943 1425.46,687.943 1426.02,687.943 1426.58,687.943 1427.14,687.943 1427.7,687.943 1428.26,687.943 1428.82,687.943 1429.38,687.943 1429.94,687.943 1430.5,687.943 1431.05,687.943 1431.61,687.943 1432.17,687.943 1432.73,687.943 1433.29,687.943 1433.85,687.943 1434.41,687.943 1434.97,687.943 1435.53,687.943 1436.09,687.943 1436.65,687.943 1437.21,687.943 1437.77,687.943 1438.33,687.943 1438.88,687.943 1439.44,687.943 1440,687.943 1440.56,687.943 1441.12,687.943 1441.68,687.943 1442.24,687.943 1442.8,687.943 1443.36,687.943 1443.92,687.943 1444.48,687.943 1445.04,687.943 1445.6,687.943 1446.15,687.943 1446.71,687.943 1447.27,687.943 1447.83,687.943 1448.39,687.943 1448.95,687.943 1449.51,687.943 1450.07,687.943 1450.63,687.943 1451.19,687.943 1451.75,687.943 1452.31,687.943 1452.87,687.943 1453.42,687.943 1453.98,687.943 1454.54,687.943 1455.1,687.943 1455.66,687.943 1456.22,687.943 1456.78,687.943 1457.34,687.943 1457.9,687.943 1458.46,687.943 1459.02,687.943 1459.58,687.943 1460.14,687.943 1460.7,687.943 1461.25,687.943 1461.81,687.943 1462.37,687.943 1462.93,687.943 1463.49,687.943 1464.05,687.943 1464.61,687.943 1465.17,687.943 1465.73,687.943 1466.29,687.943 1466.85,687.943 1467.41,687.943 1467.97,687.943 1468.52,687.943 1469.08,687.943 1469.64,687.943 1470.2,687.943 1470.76,687.943 1471.32,687.943 1471.88,687.943 1472.44,687.943 1473,687.943 1473.56,687.943 1474.12,687.943 1474.68,687.943 1475.24,687.943 1475.79,687.943 1476.35,687.943 1476.91,687.943 1477.47,687.943 1478.03,687.943 1478.59,687.943 1479.15,687.943 1479.71,687.943 1480.27,687.943 1480.83,687.943 1481.39,687.943 1481.95,687.943 1482.51,687.943 1483.07,687.943 1483.62,687.943 1484.18,687.943 1484.74,687.943 1485.3,687.943 1485.86,687.943 1486.42,687.943 1486.98,687.943 1487.54,687.943 1488.1,687.943 1488.66,687.943 1489.22,687.943 1489.78,687.943 1490.34,687.943 1490.89,687.943 1491.45,687.943 1492.01,687.943 1492.57,687.943 1493.13,687.943 1493.69,687.943 1494.25,687.943 1494.81,687.943 1495.37,687.943 1495.93,687.943 1496.49,687.943 1497.05,687.943 1497.61,687.943 1498.16,687.943 1498.72,687.943 1499.28,687.943 1499.84,687.943 1500.4,687.943 1500.96,687.943 1501.52,687.943 1502.08,687.943 1502.64,687.943 1503.2,687.943 1503.76,687.943 1504.32,687.943 1504.88,687.943 1505.44,687.943 1505.99,687.943 1506.55,687.943 1507.11,687.943 1507.67,687.943 1508.23,687.943 1508.79,687.943 1509.35,687.943 1509.91,687.943 1510.47,687.943 1511.03,687.943 1511.59,687.943 1512.15,687.943 1512.71,687.943 1513.26,687.943 1513.82,687.943 1514.38,687.943 1514.94,687.943 1515.5,687.943 1516.06,687.943 1516.62,687.943 1517.18,687.943 1517.74,687.943 1518.3,687.943 1518.86,687.943 1519.42,687.943 1519.98,687.943 1520.53,687.943 1521.09,687.943 1521.65,687.943 1522.21,687.943 1522.77,687.943 1523.33,687.943 1523.89,687.943 1524.45,687.943 1525.01,687.943 1525.57,687.943 1526.13,687.943 1526.69,687.943 1527.25,687.943 1527.81,687.943 1528.36,687.943 1528.92,687.943 1529.48,687.943 1530.04,687.943 1530.6,687.943 1531.16,687.943 1531.72,687.943 1532.28,687.943 1532.84,687.943 1533.4,687.943 1533.96,687.943 1534.52,687.943 1535.08,687.943 1535.63,687.943 1536.19,687.943 1536.75,687.943 1537.31,687.943 1537.87,687.943 1538.43,687.943 1538.99,687.943 1539.55,687.943 1540.11,687.943 1540.67,687.943 1541.23,687.943 1541.79,687.943 1542.35,687.943 1542.9,687.943 1543.46,687.943 1544.02,687.943 1544.58,687.943 1545.14,687.943 1545.7,687.943 1546.26,687.943 1546.82,687.943 1547.38,687.943 1547.94,687.943 1548.5,687.943 1549.06,687.943 1549.62,687.943 1550.18,687.943 1550.73,687.943 1551.29,687.943 1551.85,687.943 1552.41,687.943 1552.97,687.943 1553.53,687.943 1554.09,687.943 1554.65,687.943 1555.21,687.943 1555.77,687.943 1556.33,687.943 1556.89,687.943 1557.45,687.943 1558,687.943 1558.56,687.943 1559.12,687.943 1559.68,687.943 1560.24,687.943 1560.8,687.943 1561.36,687.943 1561.92,687.943 1562.48,687.943 1563.04,687.943 1563.6,687.943 1564.16,687.943 1564.72,687.943 1565.28,687.943 1565.83,687.943 1566.39,687.943 1566.95,687.943 1567.51,687.943 1568.07,687.943 1568.63,687.943 1569.19,687.943 1569.75,687.943 1570.31,687.943 1570.87,687.943 1571.43,687.943 1571.99,687.943 1572.55,687.943 1573.1,687.943 1573.66,687.943 1574.22,687.943 1574.78,687.943 1575.34,687.943 1575.9,687.943 1576.46,687.943 1577.02,687.943 1577.58,687.943 1578.14,687.943 1578.7,687.943 1579.26,687.943 1579.82,687.943 1580.37,687.943 1580.93,687.943 1581.49,687.943 1582.05,687.943 1582.61,687.943 1583.17,687.943 1583.73,687.943 1584.29,687.943 1584.85,687.943 1585.41,687.943 1585.97,687.943 1586.53,687.943 1587.09,687.943 1587.65,687.943 1588.2,687.943 1588.76,687.943 1589.32,687.943 1589.88,687.943 1590.44,687.943 1591,687.943 1591.56,687.943 1592.12,687.943 1592.68,687.943 1593.24,687.943 1593.8,687.943 1594.36,687.943 1594.92,687.943 1595.47,687.943 1596.03,687.943 1596.59,687.943 1597.15,687.943 1597.71,687.943 1598.27,687.943 1598.83,687.943 1599.39,687.943 1599.95,687.943 1600.51,687.943 1601.07,687.943 1601.63,687.943 1602.19,687.943 1602.74,687.943 1603.3,687.943 1603.86,687.943 1604.42,687.943 1604.98,687.943 1605.54,687.943 1606.1,687.943 1606.66,687.943 1607.22,687.943 1607.78,687.943 1608.34,687.943 1608.9,687.943 1609.46,687.943 1610.02,687.943 1610.57,687.943 1611.13,687.943 1611.69,687.943 1612.25,687.943 1612.81,687.943 1613.37,687.943 1613.93,687.943 1614.49,687.943 1615.05,687.943 1615.61,687.943 1616.17,687.943 1616.73,687.943 1617.29,687.943 1617.84,687.943 1618.4,687.943 1618.96,687.943 1619.52,687.943 1620.08,687.943 1620.64,687.943 1621.2,687.943 1621.76,687.943 1622.32,687.943 1622.88,687.943 1623.44,687.943 1624,687.943 1624.56,687.943 1625.11,687.943 1625.67,687.943 1626.23,687.943 1626.79,687.943 1627.35,687.943 1627.91,687.943 1628.47,687.943 1629.03,687.943 1629.59,687.943 1630.15,687.943 1630.71,687.943 1631.27,687.943 1631.83,687.943 1632.39,687.943 1632.94,687.943 1633.5,687.943 1634.06,687.943 1634.62,687.943 1635.18,687.943 1635.74,687.943 1636.3,687.943 1636.86,687.943 1637.42,687.943 1637.98,687.943 1638.54,687.943 1639.1,687.943 1639.66,687.943 1640.21,687.943 1640.77,687.943 1641.33,687.943 1641.89,687.943 1642.45,687.943 1643.01,687.943 1643.57,687.943 1644.13,687.943 1644.69,687.943 1645.25,687.943 1645.81,687.943 1646.37,687.943 1646.93,687.943 1647.48,687.943 1648.04,687.943 1648.6,687.943 1649.16,687.943 1649.72,687.943 1650.28,687.943 1650.84,687.943 1651.4,687.943 1651.96,687.943 1652.52,687.943 1653.08,687.943 1653.64,687.943 1654.2,687.943 1654.76,687.943 1655.31,687.943 1655.87,687.943 1656.43,687.943 1656.99,687.943 1657.55,687.943 1658.11,687.943 1658.67,687.943 1659.23,687.943 1659.79,687.943 1660.35,687.943 1660.91,687.943 1661.47,687.943 1662.03,687.943 1662.58,687.943 1663.14,687.943 1663.7,687.943 1664.26,687.943 1664.82,687.943 1665.38,687.943 1665.94,687.943 1666.5,687.943 1667.06,687.943 1667.62,687.943 1668.18,687.943 1668.74,687.943 1669.3,687.943 1669.85,687.943 1670.41,687.943 1670.97,687.943 1671.53,687.943 1672.09,687.943 1672.65,687.943 1673.21,687.943 1673.77,687.943 1674.33,687.943 1674.89,687.943 1675.45,687.943 1676.01,687.943 1676.57,687.943 1677.13,687.943 1677.68,687.943 1678.24,687.943 1678.8,687.943 1679.36,687.943 1679.92,687.943 1680.48,687.943 1681.04,687.943 1681.6,687.943 1682.16,687.943 1682.72,687.943 1683.28,687.943 1683.84,687.943 1684.4,687.943 1684.95,687.943 1685.51,687.943 1686.07,687.943 1686.63,687.943 1687.19,687.943 1687.75,687.943 1688.31,687.943 1688.87,687.943 1689.43,687.943 1689.99,687.943 1690.55,687.943 1691.11,687.943 1691.67,687.943 1692.23,687.943 1692.78,687.943 1693.34,687.943 1693.9,687.943 1694.46,687.943 1695.02,687.943 1695.58,687.943 1696.14,687.943 1696.7,687.943 1697.26,687.943 1697.82,687.943 1698.38,687.943 1698.94,687.943 1699.5,687.943 1700.05,687.943 1700.61,687.943 1701.17,687.943 1701.73,687.943 1702.29,687.943 1702.85,687.943 1703.41,687.943 1703.97,687.943 1704.53,687.943 1705.09,687.943 1705.65,687.943 1706.21,687.943 1706.77,687.943 1707.32,687.943 1707.88,687.943 1708.44,687.943 1709,687.943 1709.56,687.943 1710.12,687.943 1710.68,687.943 1711.24,687.943 1711.8,687.943 1712.36,687.943 1712.92,687.943 1713.48,687.943 1714.04,687.943 1714.6,687.943 1715.15,687.943 1715.71,687.943 1716.27,687.943 1716.83,687.943 1717.39,687.943 1717.95,687.943 1718.51,687.943 1719.07,687.943 1719.63,687.943 1720.19,687.943 1720.75,687.943 1721.31,687.943 1721.87,687.943 1722.42,687.943 1722.98,687.943 1723.54,687.943 1724.1,687.943 1724.66,687.943 1725.22,687.943 1725.78,687.943 1726.34,687.943 1726.9,687.943 1727.46,687.943 1728.02,687.943 1728.58,687.943 1729.14,687.943 1729.69,687.943 1730.25,687.943 1730.81,687.943 1731.37,687.943 1731.93,687.943 1732.49,687.943 1733.05,687.943 1733.61,687.943 1734.17,687.943 1734.73,687.943 1735.29,687.943 1735.85,687.943 1736.41,687.943 1736.97,687.943 1737.52,687.943 1738.08,687.943 1738.64,687.943 1739.2,687.943 1739.76,687.943 1740.32,687.943 1740.88,687.943 1741.44,687.943 1742,687.943 1742.56,687.943 1743.12,687.943 1743.68,687.943 1744.24,687.943 1744.79,687.943 1745.35,687.943 1745.91,687.943 1746.47,687.943 1747.03,687.943 1747.59,687.943 1748.15,687.943 1748.71,687.943 1749.27,687.943 1749.83,687.943 1750.39,687.943 1750.95,687.943 1751.51,687.943 1752.06,687.943 1752.62,687.943 1753.18,687.943 1753.74,687.943 1754.3,687.943 1754.86,687.943 1755.42,687.943 1755.98,687.943 1756.54,687.943 1757.1,687.943 1757.66,687.943 1758.22,687.943 1758.78,687.943 1759.34,687.943 1759.89,687.943 1760.45,687.943 1761.01,687.943 1761.57,687.943 1762.13,687.943 1762.69,687.943 1763.25,687.943 1763.81,687.943 1764.37,687.943 1764.93,687.943 1765.49,687.943 1766.05,687.943 1766.61,687.943 1767.16,687.943 1767.72,687.943 1768.28,687.943 1768.84,687.943 1769.4,687.943 1769.96,687.943 1770.52,687.943 1771.08,687.943 1771.64,687.943 1772.2,687.943 1772.76,687.943 1773.32,687.943 1773.88,687.943 1774.43,687.943 1774.99,687.943 1775.55,687.943 1776.11,687.943 1776.67,687.943 1777.23,687.943 1777.79,687.943 1778.35,687.943 1778.91,687.943 1779.47,687.943 1780.03,687.943 1780.59,687.943 1781.15,687.943 1781.71,687.943 1782.26,687.943 1782.82,687.943 1783.38,687.943 1783.94,687.943 1784.5,687.943 1785.06,687.943 1785.62,687.943 1786.18,687.943 1786.74,687.943 1787.3,687.943 1787.86,687.943 1788.42,687.943 1788.98,687.943 1789.53,687.943 1790.09,687.943 1790.65,687.943 1791.21,687.943 1791.77,687.943 1792.33,687.943 1792.89,687.943 1793.45,687.943 1794.01,687.943 1794.57,687.943 1795.13,687.943 1795.69,687.943 1796.25,687.943 1796.8,687.943 1797.36,687.943 1797.92,687.943 1798.48,687.943 1799.04,687.943 1799.6,687.943 1800.16,687.943 1800.72,687.943 1801.28,687.943 1801.84,687.943 1802.4,687.943 1802.96,687.943 1803.52,687.943 1804.08,687.943 1804.63,687.943 1805.19,687.943 1805.75,687.943 1806.31,687.943 1806.87,687.943 1807.43,687.943 1807.99,687.943 1808.55,687.943 1809.11,687.943 1809.67,687.943 1810.23,687.943 1810.79,687.943 1811.35,687.943 1811.9,687.943 1812.46,687.943 1813.02,687.943 1813.58,687.943 1814.14,687.943 1814.7,687.943 1815.26,687.943 1815.82,687.943 1816.38,687.943 1816.94,687.943 1817.5,687.943 1818.06,687.943 1818.62,687.943 1819.18,687.943 1819.73,687.943 1820.29,687.943 1820.85,687.943 1821.41,687.943 1821.97,687.943 1822.53,687.943 1823.09,687.943 1823.65,687.943 1824.21,687.943 1824.77,687.943 1825.33,687.943 1825.89,687.943 1826.45,687.943 1827,687.943 1827.56,687.943 1828.12,687.943 1828.68,687.943 1829.24,687.943 1829.8,687.943 1830.36,687.943 1830.92,687.943 1831.48,687.943 1832.04,687.943 1832.6,687.943 1833.16,687.943 1833.72,687.943 1834.27,687.943 1834.83,687.943 1835.39,687.943 1835.95,687.943 1836.51,687.943 1837.07,687.943 1837.63,687.943 1838.19,687.943 \"/>\n<path clip-path=\"url(#clip443)\" d=\"M720.247 684.2 L720.806 684.2 L721.365 684.2 L721.924 684.2 L722.484 684.2 L723.043 684.2 L723.602 684.2 L724.161 684.2 L724.721 684.2 L725.28 684.2 L725.839 684.2 L726.398 684.2 L726.958 684.2 L727.517 684.2 L728.076 684.2 L728.635 684.2 L729.195 684.2 L729.754 684.2 L730.313 684.2 L730.872 684.2 L731.432 684.2 L731.991 684.2 L732.55 684.2 L733.109 684.2 L733.669 684.2 L734.228 684.2 L734.787 684.2 L735.346 684.2 L735.906 684.2 L736.465 684.2 L737.024 684.2 L737.583 684.2 L738.143 684.2 L738.702 684.2 L739.261 684.2 L739.82 684.2 L740.38 684.2 L740.939 684.2 L741.498 684.2 L742.057 684.2 L742.617 684.2 L743.176 684.2 L743.735 684.2 L744.294 684.2 L744.854 684.2 L745.413 684.2 L745.972 684.2 L746.531 684.2 L747.091 684.2 L747.65 684.2 L748.209 684.2 L748.768 684.2 L749.328 684.2 L749.887 684.2 L750.446 684.2 L751.005 684.2 L751.565 684.2 L752.124 684.2 L752.683 684.2 L753.242 684.2 L753.802 684.2 L754.361 684.2 L754.92 684.2 L755.479 684.2 L756.039 684.2 L756.598 684.2 L757.157 684.2 L757.716 684.2 L758.276 684.2 L758.835 684.2 L759.394 684.2 L759.953 684.2 L760.513 684.2 L761.072 684.2 L761.631 684.2 L762.19 684.2 L762.75 684.2 L763.309 684.2 L763.868 684.2 L764.427 684.2 L764.987 684.2 L765.546 684.2 L766.105 684.2 L766.664 684.2 L767.224 684.2 L767.783 684.2 L768.342 684.2 L768.901 684.2 L769.461 684.2 L770.02 684.2 L770.579 684.2 L771.138 684.2 L771.698 684.2 L772.257 684.2 L772.816 684.2 L773.375 684.2 L773.935 684.2 L774.494 684.2 L775.053 684.2 L775.612 684.2 L776.172 684.2 L776.731 684.2 L777.29 684.2 L777.849 684.2 L778.409 684.2 L778.968 684.2 L779.527 684.2 L780.086 684.2 L780.646 684.2 L781.205 684.2 L781.764 684.2 L782.323 684.2 L782.883 684.2 L783.442 684.2 L784.001 684.2 L784.56 684.2 L785.12 684.2 L785.679 684.2 L786.238 684.2 L786.797 684.2 L787.357 684.2 L787.916 684.2 L788.475 684.2 L789.034 684.2 L789.594 684.2 L790.153 684.2 L790.712 684.2 L791.271 684.2 L791.831 684.2 L792.39 684.2 L792.949 684.2 L793.508 684.2 L794.068 684.2 L794.627 684.2 L795.186 684.2 L795.745 684.2 L796.305 684.2 L796.864 684.2 L797.423 684.2 L797.982 684.2 L798.542 684.2 L799.101 684.2 L799.66 684.2 L800.219 684.2 L800.779 684.2 L801.338 684.2 L801.897 684.2 L802.456 684.2 L803.016 684.2 L803.575 684.2 L804.134 684.2 L804.693 684.2 L805.253 684.2 L805.812 684.2 L806.371 684.2 L806.931 684.2 L807.49 684.2 L808.049 684.2 L808.608 684.2 L809.168 684.2 L809.727 684.2 L810.286 684.2 L810.845 684.2 L811.405 684.2 L811.964 684.2 L812.523 684.2 L813.082 684.2 L813.642 684.2 L814.201 684.2 L814.76 684.2 L815.319 684.2 L815.879 684.2 L816.438 684.2 L816.997 684.2 L817.556 684.2 L818.116 684.2 L818.675 684.2 L819.234 684.2 L819.793 684.2 L820.353 684.2 L820.912 684.2 L821.471 684.2 L822.03 684.2 L822.59 684.2 L823.149 684.2 L823.708 684.2 L824.267 684.2 L824.827 684.2 L825.386 684.2 L825.945 684.2 L826.504 684.2 L827.064 684.2 L827.623 684.2 L828.182 684.2 L828.741 684.2 L829.301 684.2 L829.86 684.2 L830.419 684.2 L830.978 684.2 L831.538 684.2 L832.097 684.2 L832.656 684.2 L833.215 684.2 L833.775 684.2 L834.334 684.2 L834.893 684.2 L835.452 684.2 L836.012 684.2 L836.571 684.2 L837.13 684.2 L837.689 684.2 L838.249 684.2 L838.808 684.2 L839.367 684.2 L839.926 684.2 L840.486 684.2 L841.045 684.2 L841.604 684.2 L842.163 684.2 L842.723 684.2 L843.282 684.2 L843.841 684.2 L844.4 684.2 L844.96 684.2 L845.519 684.2 L846.078 684.2 L846.637 684.2 L847.197 684.2 L847.756 684.2 L848.315 684.2 L848.874 684.2 L849.434 684.2 L849.993 684.2 L850.552 684.2 L851.111 684.2 L851.671 684.2 L852.23 684.2 L852.789 684.2 L853.348 684.2 L853.908 684.2 L854.467 684.2 L855.026 684.2 L855.585 684.2 L856.145 684.2 L856.704 684.2 L857.263 684.2 L857.822 684.2 L858.382 684.2 L858.941 684.2 L859.5 684.2 L860.059 684.2 L860.619 684.2 L861.178 684.2 L861.737 684.2 L862.296 684.2 L862.856 684.2 L863.415 684.2 L863.974 684.2 L864.533 684.2 L865.093 684.2 L865.652 684.2 L866.211 684.2 L866.77 684.2 L867.33 684.2 L867.889 684.2 L868.448 684.2 L869.007 684.2 L869.567 684.2 L870.126 684.2 L870.685 684.2 L871.244 684.2 L871.804 684.2 L872.363 684.2 L872.922 684.2 L873.481 684.2 L874.041 684.2 L874.6 684.2 L875.159 684.2 L875.718 684.2 L876.278 684.2 L876.837 684.2 L877.396 684.2 L877.955 684.2 L878.515 684.2 L879.074 684.2 L879.633 684.2 L880.192 684.2 L880.752 684.2 L881.311 684.2 L881.87 684.2 L882.429 684.2 L882.989 684.2 L883.548 684.2 L884.107 684.2 L884.666 684.2 L885.226 684.2 L885.785 684.2 L886.344 684.2 L886.903 684.2 L887.463 684.2 L888.022 684.2 L888.581 684.2 L889.14 684.2 L889.7 684.2 L890.259 684.2 L890.818 684.2 L891.377 684.2 L891.937 684.2 L892.496 684.2 L893.055 684.2 L893.614 684.2 L894.174 684.2 L894.733 684.2 L895.292 684.2 L895.851 684.2 L896.411 684.2 L896.97 684.2 L897.529 684.2 L898.088 684.2 L898.648 684.2 L899.207 684.2 L899.766 684.2 L900.325 684.2 L900.885 684.2 L901.444 684.2 L902.003 684.2 L902.562 684.2 L903.122 684.2 L903.681 684.2 L904.24 684.2 L904.799 684.2 L905.359 684.2 L905.918 684.2 L906.477 684.2 L907.036 684.2 L907.596 684.2 L908.155 684.2 L908.714 684.2 L909.273 684.2 L909.833 684.2 L910.392 684.2 L910.951 684.2 L911.51 684.2 L912.07 684.2 L912.629 684.2 L913.188 684.2 L913.747 684.2 L914.307 684.2 L914.866 684.2 L915.425 684.2 L915.984 684.2 L916.544 684.2 L917.103 684.2 L917.662 684.2 L918.221 684.2 L918.781 684.2 L919.34 684.2 L919.899 684.2 L920.458 684.2 L921.018 684.2 L921.577 684.2 L922.136 684.2 L922.695 684.2 L923.255 684.2 L923.814 684.2 L924.373 684.2 L924.932 684.2 L925.492 684.2 L926.051 684.2 L926.61 684.2 L927.169 684.2 L927.729 684.2 L928.288 684.2 L928.847 684.2 L929.406 684.2 L929.966 684.2 L930.525 684.2 L931.084 684.2 L931.644 684.2 L932.203 684.2 L932.762 684.2 L933.321 684.2 L933.881 684.2 L934.44 684.2 L934.999 684.2 L935.558 684.2 L936.118 684.2 L936.677 684.2 L937.236 684.2 L937.795 684.2 L938.355 684.2 L938.914 684.2 L939.473 684.2 L940.032 684.2 L940.592 684.2 L941.151 684.2 L941.71 684.2 L942.269 684.2 L942.829 684.2 L943.388 684.2 L943.947 684.2 L944.506 684.2 L945.066 684.2 L945.625 684.2 L946.184 684.2 L946.743 684.2 L947.303 684.2 L947.862 684.2 L948.421 684.2 L948.98 684.2 L949.54 684.2 L950.099 684.2 L950.658 684.2 L951.217 684.2 L951.777 684.2 L952.336 684.2 L952.895 684.2 L953.454 684.2 L954.014 684.2 L954.573 684.2 L955.132 684.2 L955.691 684.2 L956.251 684.2 L956.81 684.2 L957.369 684.2 L957.928 684.2 L958.488 684.2 L959.047 684.2 L959.606 684.2 L960.165 684.2 L960.725 684.2 L961.284 684.2 L961.843 684.2 L962.402 684.2 L962.962 684.2 L963.521 684.2 L964.08 684.2 L964.639 684.2 L965.199 684.2 L965.758 684.2 L966.317 684.2 L966.876 684.2 L967.436 684.2 L967.995 684.2 L968.554 684.2 L969.113 684.2 L969.673 684.2 L970.232 684.2 L970.791 684.2 L971.35 684.2 L971.91 684.2 L972.469 684.2 L973.028 684.2 L973.587 684.2 L974.147 684.2 L974.706 684.2 L975.265 684.2 L975.824 684.2 L976.384 684.2 L976.943 684.2 L977.502 684.2 L978.061 684.2 L978.621 684.2 L979.18 684.2 L979.739 684.2 L980.298 684.2 L980.858 684.2 L981.417 684.2 L981.976 684.2 L982.535 684.2 L983.095 684.2 L983.654 684.2 L984.213 684.2 L984.772 684.2 L985.332 684.2 L985.891 684.2 L986.45 684.2 L987.009 684.2 L987.569 684.2 L988.128 684.2 L988.687 684.2 L989.246 684.2 L989.806 684.2 L990.365 684.2 L990.924 684.2 L991.483 684.2 L992.043 684.2 L992.602 684.2 L993.161 684.2 L993.72 684.2 L994.28 684.2 L994.839 684.2 L995.398 684.2 L995.957 684.2 L996.517 684.2 L997.076 684.2 L997.635 684.2 L998.194 684.2 L998.754 684.2 L999.313 684.2 L999.872 684.2 L1000.43 684.2 L1000.99 684.2 L1001.55 684.2 L1002.11 684.2 L1002.67 684.2 L1003.23 684.2 L1003.79 684.2 L1004.35 684.2 L1004.91 684.2 L1005.46 684.2 L1006.02 684.2 L1006.58 684.2 L1007.14 684.2 L1007.7 684.2 L1008.26 684.2 L1008.82 684.2 L1009.38 684.2 L1009.94 684.2 L1010.5 684.2 L1011.06 684.2 L1011.62 684.2 L1012.18 684.2 L1012.73 684.2 L1013.29 684.2 L1013.85 684.2 L1014.41 684.2 L1014.97 684.2 L1015.53 684.2 L1016.09 684.2 L1016.65 684.2 L1017.21 684.2 L1017.77 684.2 L1018.33 684.2 L1018.89 684.2 L1019.45 684.2 L1020.01 684.2 L1020.56 684.2 L1021.12 684.2 L1021.68 684.2 L1022.24 684.2 L1022.8 684.2 L1023.36 684.2 L1023.92 684.2 L1024.48 684.2 L1025.04 684.2 L1025.6 684.2 L1026.16 684.2 L1026.72 684.2 L1027.28 684.2 L1027.83 684.2 L1028.39 684.2 L1028.95 684.2 L1029.51 684.2 L1030.07 684.2 L1030.63 684.2 L1031.19 684.2 L1031.75 684.2 L1032.31 684.2 L1032.87 684.2 L1033.43 684.2 L1033.99 684.2 L1034.55 684.2 L1035.1 684.2 L1035.66 684.2 L1036.22 684.2 L1036.78 684.2 L1037.34 684.2 L1037.9 684.2 L1038.46 684.2 L1039.02 684.2 L1039.58 684.2 L1040.14 684.2 L1040.7 684.2 L1041.26 684.2 L1041.82 684.2 L1042.38 684.2 L1042.93 684.2 L1043.49 684.2 L1044.05 684.2 L1044.61 684.2 L1045.17 684.2 L1045.73 684.2 L1046.29 684.2 L1046.85 684.2 L1047.41 684.2 L1047.97 684.2 L1048.53 684.2 L1049.09 684.2 L1049.65 684.2 L1050.2 684.2 L1050.76 684.2 L1051.32 684.2 L1051.88 684.2 L1052.44 684.2 L1053 684.2 L1053.56 684.2 L1054.12 684.2 L1054.68 684.2 L1055.24 684.2 L1055.8 684.2 L1056.36 684.2 L1056.92 684.2 L1057.48 684.2 L1058.03 684.2 L1058.59 684.2 L1059.15 684.2 L1059.71 684.2 L1060.27 684.2 L1060.83 684.2 L1061.39 684.2 L1061.95 684.2 L1062.51 684.2 L1063.07 684.2 L1063.63 684.2 L1064.19 684.2 L1064.75 684.2 L1065.3 684.2 L1065.86 684.2 L1066.42 684.2 L1066.98 684.2 L1067.54 684.2 L1068.1 684.2 L1068.66 684.2 L1069.22 684.2 L1069.78 684.2 L1070.34 684.2 L1070.9 684.2 L1071.46 684.2 L1072.02 684.2 L1072.57 684.2 L1073.13 684.2 L1073.69 684.2 L1074.25 684.2 L1074.81 684.2 L1075.37 684.2 L1075.93 684.2 L1076.49 684.2 L1077.05 684.2 L1077.61 684.2 L1078.17 684.2 L1078.73 684.2 L1079.29 684.2 L1079.85 684.2 L1080.4 684.2 L1080.96 684.2 L1081.52 684.2 L1082.08 684.2 L1082.64 684.2 L1083.2 684.2 L1083.76 684.2 L1084.32 684.2 L1084.88 684.2 L1085.44 684.2 L1086 684.2 L1086.56 684.2 L1087.12 684.2 L1087.67 684.2 L1088.23 684.2 L1088.79 684.2 L1089.35 684.2 L1089.91 684.2 L1090.47 684.2 L1091.03 684.2 L1091.59 684.2 L1092.15 684.2 L1092.71 684.2 L1093.27 684.2 L1093.83 684.2 L1094.39 684.2 L1094.94 684.2 L1095.5 684.2 L1096.06 684.2 L1096.62 684.2 L1097.18 684.2 L1097.74 684.2 L1098.3 684.2 L1098.86 684.2 L1099.42 684.2 L1099.98 684.2 L1100.54 684.2 L1101.1 684.2 L1101.66 684.2 L1102.22 684.2 L1102.77 684.2 L1103.33 684.2 L1103.89 684.2 L1104.45 684.2 L1105.01 684.2 L1105.57 684.2 L1106.13 684.2 L1106.69 684.2 L1107.25 684.2 L1107.81 684.2 L1108.37 684.2 L1108.93 684.2 L1109.49 684.2 L1110.04 684.2 L1110.6 684.2 L1111.16 684.2 L1111.72 684.2 L1112.28 684.2 L1112.84 684.2 L1113.4 684.2 L1113.96 684.2 L1114.52 684.2 L1115.08 684.2 L1115.64 684.2 L1116.2 684.2 L1116.76 684.2 L1117.31 684.2 L1117.87 684.2 L1118.43 684.2 L1118.99 684.2 L1119.55 684.2 L1120.11 684.2 L1120.67 684.2 L1121.23 684.2 L1121.79 684.2 L1122.35 684.2 L1122.91 684.2 L1123.47 684.2 L1124.03 684.2 L1124.59 684.2 L1125.14 684.2 L1125.7 684.2 L1126.26 684.2 L1126.82 684.2 L1127.38 684.2 L1127.94 684.2 L1128.5 684.2 L1129.06 684.2 L1129.62 684.2 L1130.18 684.2 L1130.74 684.2 L1131.3 684.2 L1131.86 684.2 L1132.41 684.2 L1132.97 684.2 L1133.53 684.2 L1134.09 684.2 L1134.65 684.2 L1135.21 684.2 L1135.77 684.2 L1136.33 684.2 L1136.89 684.2 L1137.45 684.2 L1138.01 684.2 L1138.57 684.2 L1139.13 684.2 L1139.68 684.2 L1140.24 684.2 L1140.8 684.2 L1141.36 684.2 L1141.92 684.2 L1142.48 684.2 L1143.04 684.2 L1143.6 684.2 L1144.16 684.2 L1144.72 684.2 L1145.28 684.2 L1145.84 684.2 L1146.4 684.2 L1146.96 684.2 L1147.51 684.2 L1148.07 684.2 L1148.63 684.2 L1149.19 684.2 L1149.75 684.2 L1150.31 684.2 L1150.87 684.2 L1151.43 684.2 L1151.99 684.2 L1152.55 684.2 L1153.11 684.2 L1153.67 684.2 L1154.23 684.2 L1154.78 684.2 L1155.34 684.2 L1155.9 684.2 L1156.46 684.2 L1157.02 684.2 L1157.58 684.2 L1158.14 684.2 L1158.7 684.2 L1159.26 684.2 L1159.82 684.2 L1160.38 684.2 L1160.94 684.2 L1161.5 684.2 L1162.05 684.2 L1162.61 684.2 L1163.17 684.2 L1163.73 684.2 L1164.29 684.2 L1164.85 684.2 L1165.41 684.2 L1165.97 684.2 L1166.53 684.2 L1167.09 684.2 L1167.65 684.2 L1168.21 684.2 L1168.77 684.2 L1169.33 684.2 L1169.88 684.2 L1170.44 684.2 L1171 684.2 L1171.56 684.2 L1172.12 684.2 L1172.68 684.2 L1173.24 684.2 L1173.8 684.2 L1174.36 684.2 L1174.92 684.2 L1175.48 684.2 L1176.04 684.2 L1176.6 684.2 L1177.15 684.2 L1177.71 684.2 L1178.27 684.2 L1178.83 684.2 L1179.39 684.2 L1179.95 684.2 L1180.51 684.2 L1181.07 684.2 L1181.63 684.2 L1182.19 684.2 L1182.75 684.2 L1183.31 684.2 L1183.87 684.2 L1184.43 684.2 L1184.98 684.2 L1185.54 684.2 L1186.1 684.2 L1186.66 684.2 L1187.22 684.2 L1187.78 684.2 L1188.34 684.2 L1188.9 684.2 L1189.46 684.2 L1190.02 684.2 L1190.58 684.2 L1191.14 684.2 L1191.7 684.2 L1192.25 684.2 L1192.81 684.2 L1193.37 684.2 L1193.93 684.2 L1194.49 684.2 L1195.05 684.2 L1195.61 684.2 L1196.17 684.2 L1196.73 684.2 L1197.29 684.2 L1197.85 684.2 L1198.41 684.2 L1198.97 684.2 L1199.52 684.2 L1200.08 684.2 L1200.64 684.2 L1201.2 684.2 L1201.76 684.2 L1202.32 684.2 L1202.88 684.2 L1203.44 684.2 L1204 684.2 L1204.56 684.2 L1205.12 684.2 L1205.68 684.2 L1206.24 684.2 L1206.8 684.2 L1207.35 684.2 L1207.91 684.2 L1208.47 684.2 L1209.03 684.2 L1209.59 684.2 L1210.15 684.2 L1210.71 684.2 L1211.27 684.2 L1211.83 684.2 L1212.39 684.2 L1212.95 684.2 L1213.51 684.2 L1214.07 684.2 L1214.62 684.2 L1215.18 684.2 L1215.74 684.2 L1216.3 684.2 L1216.86 684.2 L1217.42 684.2 L1217.98 684.2 L1218.54 684.2 L1219.1 684.2 L1219.66 684.2 L1220.22 684.2 L1220.78 684.2 L1221.34 684.2 L1221.89 684.2 L1222.45 684.2 L1223.01 684.2 L1223.57 684.2 L1224.13 684.2 L1224.69 684.2 L1225.25 684.2 L1225.81 684.2 L1226.37 684.2 L1226.93 684.2 L1227.49 684.2 L1228.05 684.2 L1228.61 684.2 L1229.17 684.2 L1229.72 684.2 L1230.28 684.2 L1230.84 684.2 L1231.4 684.2 L1231.96 684.2 L1232.52 684.2 L1233.08 684.2 L1233.64 684.2 L1234.2 684.2 L1234.76 684.2 L1235.32 684.2 L1235.88 684.2 L1236.44 684.2 L1236.99 684.2 L1237.55 684.2 L1238.11 684.2 L1238.67 684.2 L1239.23 684.2 L1239.79 684.2 L1240.35 684.2 L1240.91 684.2 L1241.47 684.2 L1242.03 684.2 L1242.59 684.2 L1243.15 684.2 L1243.71 684.2 L1244.26 684.2 L1244.82 684.2 L1245.38 684.2 L1245.94 684.2 L1246.5 684.2 L1247.06 684.2 L1247.62 684.2 L1248.18 684.2 L1248.74 684.2 L1249.3 684.2 L1249.86 684.2 L1250.42 684.2 L1250.98 684.2 L1251.54 684.2 L1252.09 684.2 L1252.65 684.2 L1253.21 684.2 L1253.77 684.2 L1254.33 684.2 L1254.89 684.2 L1255.45 684.2 L1256.01 684.2 L1256.57 684.2 L1257.13 684.2 L1257.69 684.2 L1258.25 684.2 L1258.81 684.2 L1259.36 684.2 L1259.92 684.2 L1260.48 684.2 L1261.04 684.2 L1261.6 684.2 L1262.16 684.2 L1262.72 684.2 L1263.28 684.2 L1263.84 684.2 L1264.4 684.2 L1264.96 684.2 L1265.52 684.2 L1266.08 684.2 L1266.63 684.2 L1267.19 684.2 L1267.75 684.2 L1268.31 684.2 L1268.87 684.2 L1269.43 684.2 L1269.99 684.2 L1270.55 684.2 L1271.11 684.2 L1271.67 684.2 L1272.23 684.2 L1272.79 684.2 L1273.35 684.2 L1273.91 684.2 L1274.46 684.2 L1275.02 684.2 L1275.58 684.2 L1276.14 684.2 L1276.7 684.2 L1277.26 684.2 L1277.82 684.2 L1278.38 684.2 L1278.94 684.2 L1279.5 684.2 L1280.06 684.2 L1280.62 684.2 L1281.18 684.2 L1281.73 684.2 L1282.29 684.2 L1282.85 684.2 L1283.41 684.2 L1283.97 684.2 L1284.53 684.2 L1285.09 684.2 L1285.65 684.2 L1286.21 684.2 L1286.77 684.2 L1287.33 684.2 L1287.89 684.2 L1288.45 684.2 L1289 684.2 L1289.56 684.2 L1290.12 684.2 L1290.68 684.2 L1291.24 684.2 L1291.8 684.2 L1292.36 684.2 L1292.92 684.2 L1293.48 684.2 L1294.04 684.2 L1294.6 684.2 L1295.16 684.2 L1295.72 684.2 L1296.28 684.2 L1296.83 684.2 L1297.39 684.2 L1297.95 684.2 L1298.51 684.2 L1299.07 684.2 L1299.63 684.2 L1300.19 684.2 L1300.75 684.2 L1301.31 684.2 L1301.87 684.2 L1302.43 684.2 L1302.99 684.2 L1303.55 684.2 L1304.1 684.2 L1304.66 684.2 L1305.22 684.2 L1305.78 684.2 L1306.34 684.2 L1306.9 684.2 L1307.46 684.2 L1308.02 684.2 L1308.58 684.2 L1309.14 684.2 L1309.7 684.2 L1310.26 684.2 L1310.82 684.2 L1311.38 684.2 L1311.93 684.2 L1312.49 684.2 L1313.05 684.2 L1313.61 684.2 L1314.17 684.2 L1314.73 684.2 L1315.29 684.2 L1315.85 684.2 L1316.41 684.2 L1316.97 684.2 L1317.53 684.2 L1318.09 684.2 L1318.65 684.2 L1319.2 684.2 L1319.76 684.2 L1320.32 684.2 L1320.88 684.2 L1321.44 684.2 L1322 684.2 L1322.56 684.2 L1323.12 684.2 L1323.68 684.2 L1324.24 684.2 L1324.8 684.2 L1325.36 684.2 L1325.92 684.2 L1326.47 684.2 L1327.03 684.2 L1327.59 684.2 L1328.15 684.2 L1328.71 684.2 L1329.27 684.2 L1329.83 684.2 L1330.39 684.2 L1330.95 684.2 L1331.51 684.2 L1332.07 684.2 L1332.63 684.2 L1333.19 684.2 L1333.75 684.2 L1334.3 684.2 L1334.86 684.2 L1335.42 684.2 L1335.98 684.2 L1336.54 684.2 L1337.1 684.2 L1337.66 684.2 L1338.22 684.2 L1338.78 684.2 L1339.34 684.2 L1339.9 684.2 L1340.46 684.2 L1341.02 684.2 L1341.57 684.2 L1342.13 684.2 L1342.69 684.2 L1343.25 684.2 L1343.81 684.2 L1344.37 684.2 L1344.93 684.2 L1345.49 684.2 L1346.05 684.2 L1346.61 684.2 L1347.17 684.2 L1347.73 684.2 L1348.29 684.2 L1348.84 684.2 L1349.4 684.2 L1349.96 684.2 L1350.52 684.2 L1351.08 684.2 L1351.64 684.2 L1352.2 684.2 L1352.76 684.2 L1353.32 684.2 L1353.88 684.2 L1354.44 684.2 L1355 684.2 L1355.56 684.2 L1356.12 684.2 L1356.67 684.2 L1357.23 684.2 L1357.79 684.2 L1358.35 684.2 L1358.91 684.2 L1359.47 684.2 L1360.03 684.2 L1360.59 684.2 L1361.15 684.2 L1361.71 684.2 L1362.27 684.2 L1362.83 684.2 L1363.39 684.2 L1363.94 684.2 L1364.5 684.2 L1365.06 684.2 L1365.62 684.2 L1366.18 684.2 L1366.74 684.2 L1367.3 684.2 L1367.86 684.2 L1368.42 684.2 L1368.98 684.2 L1369.54 684.2 L1370.1 684.2 L1370.66 684.2 L1371.21 684.2 L1371.77 684.2 L1372.33 684.2 L1372.89 684.2 L1373.45 684.2 L1374.01 684.2 L1374.57 684.2 L1375.13 684.2 L1375.69 684.2 L1376.25 684.2 L1376.81 684.2 L1377.37 684.2 L1377.93 684.2 L1378.49 684.2 L1379.04 684.2 L1379.6 684.2 L1380.16 684.2 L1380.72 684.2 L1381.28 684.2 L1381.84 684.2 L1382.4 684.2 L1382.96 684.2 L1383.52 684.2 L1384.08 684.2 L1384.64 684.2 L1385.2 684.2 L1385.76 684.2 L1386.31 684.2 L1386.87 684.2 L1387.43 684.2 L1387.99 684.2 L1388.55 684.2 L1389.11 684.2 L1389.67 684.2 L1390.23 684.2 L1390.79 684.2 L1391.35 684.2 L1391.91 684.2 L1392.47 684.2 L1393.03 684.2 L1393.58 684.2 L1394.14 684.2 L1394.7 684.2 L1395.26 684.2 L1395.82 684.2 L1396.38 684.2 L1396.94 684.2 L1397.5 684.2 L1398.06 684.2 L1398.62 684.2 L1399.18 684.2 L1399.74 684.2 L1400.3 684.2 L1400.86 684.2 L1401.41 684.2 L1401.97 684.2 L1402.53 684.2 L1403.09 684.2 L1403.65 684.2 L1404.21 684.2 L1404.77 684.2 L1405.33 684.2 L1405.89 684.2 L1406.45 684.2 L1407.01 684.2 L1407.57 684.2 L1408.13 684.2 L1408.68 684.2 L1409.24 684.2 L1409.8 684.2 L1410.36 684.2 L1410.92 684.2 L1411.48 684.2 L1412.04 684.2 L1412.6 684.2 L1413.16 684.2 L1413.72 684.2 L1414.28 684.2 L1414.84 684.2 L1415.4 684.2 L1415.95 684.2 L1416.51 684.2 L1417.07 684.2 L1417.63 684.2 L1418.19 684.2 L1418.75 684.2 L1419.31 684.2 L1419.87 684.2 L1420.43 684.2 L1420.99 684.2 L1421.55 684.2 L1422.11 684.2 L1422.67 684.2 L1423.23 684.2 L1423.78 684.2 L1424.34 684.2 L1424.9 684.2 L1425.46 684.2 L1426.02 684.2 L1426.58 684.2 L1427.14 684.2 L1427.7 684.2 L1428.26 684.2 L1428.82 684.2 L1429.38 684.2 L1429.94 684.2 L1430.5 684.2 L1431.05 684.2 L1431.61 684.2 L1432.17 684.2 L1432.73 684.2 L1433.29 684.2 L1433.85 684.2 L1434.41 684.2 L1434.97 684.2 L1435.53 684.2 L1436.09 684.2 L1436.65 684.2 L1437.21 684.2 L1437.77 684.2 L1438.33 684.2 L1438.88 684.2 L1439.44 684.2 L1440 684.2 L1440.56 684.2 L1441.12 684.2 L1441.68 684.2 L1442.24 684.2 L1442.8 684.2 L1443.36 684.2 L1443.92 684.2 L1444.48 684.2 L1445.04 684.2 L1445.6 684.2 L1446.15 684.2 L1446.71 684.2 L1447.27 684.2 L1447.83 684.2 L1448.39 684.2 L1448.95 684.2 L1449.51 684.2 L1450.07 684.2 L1450.63 684.2 L1451.19 684.2 L1451.75 684.2 L1452.31 684.2 L1452.87 684.2 L1453.42 684.2 L1453.98 684.2 L1454.54 684.2 L1455.1 684.2 L1455.66 684.2 L1456.22 684.2 L1456.78 684.2 L1457.34 684.2 L1457.9 684.2 L1458.46 684.2 L1459.02 684.2 L1459.58 684.2 L1460.14 684.2 L1460.7 684.2 L1461.25 684.2 L1461.81 684.2 L1462.37 684.2 L1462.93 684.2 L1463.49 684.2 L1464.05 684.2 L1464.61 684.2 L1465.17 684.2 L1465.73 684.2 L1466.29 684.2 L1466.85 684.2 L1467.41 684.2 L1467.97 684.2 L1468.52 684.2 L1469.08 684.2 L1469.64 684.2 L1470.2 684.2 L1470.76 684.2 L1471.32 684.2 L1471.88 684.2 L1472.44 684.2 L1473 684.2 L1473.56 684.2 L1474.12 684.2 L1474.68 684.2 L1475.24 684.2 L1475.79 684.2 L1476.35 684.2 L1476.91 684.2 L1477.47 684.2 L1478.03 684.2 L1478.59 684.2 L1479.15 684.2 L1479.71 684.2 L1480.27 684.2 L1480.83 684.2 L1481.39 684.2 L1481.95 684.2 L1482.51 684.2 L1483.07 684.2 L1483.62 684.2 L1484.18 684.2 L1484.74 684.2 L1485.3 684.2 L1485.86 684.2 L1486.42 684.2 L1486.98 684.2 L1487.54 684.2 L1488.1 684.2 L1488.66 684.2 L1489.22 684.2 L1489.78 684.2 L1490.34 684.2 L1490.89 684.2 L1491.45 684.2 L1492.01 684.2 L1492.57 684.2 L1493.13 684.2 L1493.69 684.2 L1494.25 684.2 L1494.81 684.2 L1495.37 684.2 L1495.93 684.2 L1496.49 684.2 L1497.05 684.2 L1497.61 684.2 L1498.16 684.2 L1498.72 684.2 L1499.28 684.2 L1499.84 684.2 L1500.4 684.2 L1500.96 684.2 L1501.52 684.2 L1502.08 684.2 L1502.64 684.2 L1503.2 684.2 L1503.76 684.2 L1504.32 684.2 L1504.88 684.2 L1505.44 684.2 L1505.99 684.2 L1506.55 684.2 L1507.11 684.2 L1507.67 684.2 L1508.23 684.2 L1508.79 684.2 L1509.35 684.2 L1509.91 684.2 L1510.47 684.2 L1511.03 684.2 L1511.59 684.2 L1512.15 684.2 L1512.71 684.2 L1513.26 684.2 L1513.82 684.2 L1514.38 684.2 L1514.94 684.2 L1515.5 684.2 L1516.06 684.2 L1516.62 684.2 L1517.18 684.2 L1517.74 684.2 L1518.3 684.2 L1518.86 684.2 L1519.42 684.2 L1519.98 684.2 L1520.53 684.2 L1521.09 684.2 L1521.65 684.2 L1522.21 684.2 L1522.77 684.2 L1523.33 684.2 L1523.89 684.2 L1524.45 684.2 L1525.01 684.2 L1525.57 684.2 L1526.13 684.2 L1526.69 684.2 L1527.25 684.2 L1527.81 684.2 L1528.36 684.2 L1528.92 684.2 L1529.48 684.2 L1530.04 684.2 L1530.6 684.2 L1531.16 684.2 L1531.72 684.2 L1532.28 684.2 L1532.84 684.2 L1533.4 684.2 L1533.96 684.2 L1534.52 684.2 L1535.08 684.2 L1535.63 684.2 L1536.19 684.2 L1536.75 684.2 L1537.31 684.2 L1537.87 684.2 L1538.43 684.2 L1538.99 684.2 L1539.55 684.2 L1540.11 684.2 L1540.67 684.2 L1541.23 684.2 L1541.79 684.2 L1542.35 684.2 L1542.9 684.2 L1543.46 684.2 L1544.02 684.2 L1544.58 684.2 L1545.14 684.2 L1545.7 684.2 L1546.26 684.2 L1546.82 684.2 L1547.38 684.2 L1547.94 684.2 L1548.5 684.2 L1549.06 684.2 L1549.62 684.2 L1550.18 684.2 L1550.73 684.2 L1551.29 684.2 L1551.85 684.2 L1552.41 684.2 L1552.97 684.2 L1553.53 684.2 L1554.09 684.2 L1554.65 684.2 L1555.21 684.2 L1555.77 684.2 L1556.33 684.2 L1556.89 684.2 L1557.45 684.2 L1558 684.2 L1558.56 684.2 L1559.12 684.2 L1559.68 684.2 L1560.24 684.2 L1560.8 684.2 L1561.36 684.2 L1561.92 684.2 L1562.48 684.2 L1563.04 684.2 L1563.6 684.2 L1564.16 684.2 L1564.72 684.2 L1565.28 684.2 L1565.83 684.2 L1566.39 684.2 L1566.95 684.2 L1567.51 684.2 L1568.07 684.2 L1568.63 684.2 L1569.19 684.2 L1569.75 684.2 L1570.31 684.2 L1570.87 684.2 L1571.43 684.2 L1571.99 684.2 L1572.55 684.2 L1573.1 684.2 L1573.66 684.2 L1574.22 684.2 L1574.78 684.2 L1575.34 684.2 L1575.9 684.2 L1576.46 684.2 L1577.02 684.2 L1577.58 684.2 L1578.14 684.2 L1578.7 684.2 L1579.26 684.2 L1579.82 684.2 L1580.37 684.2 L1580.93 684.2 L1581.49 684.2 L1582.05 684.2 L1582.61 684.2 L1583.17 684.2 L1583.73 684.2 L1584.29 684.2 L1584.85 684.2 L1585.41 684.2 L1585.97 684.2 L1586.53 684.2 L1587.09 684.2 L1587.65 684.2 L1588.2 684.2 L1588.76 684.2 L1589.32 684.2 L1589.88 684.2 L1590.44 684.2 L1591 684.2 L1591.56 684.2 L1592.12 684.2 L1592.68 684.2 L1593.24 684.2 L1593.8 684.2 L1594.36 684.2 L1594.92 684.2 L1595.47 684.2 L1596.03 684.2 L1596.59 684.2 L1597.15 684.2 L1597.71 684.2 L1598.27 684.2 L1598.83 684.2 L1599.39 684.2 L1599.95 684.2 L1600.51 684.2 L1601.07 684.2 L1601.63 684.2 L1602.19 684.2 L1602.74 684.2 L1603.3 684.2 L1603.86 684.2 L1604.42 684.2 L1604.98 684.2 L1605.54 684.2 L1606.1 684.2 L1606.66 684.2 L1607.22 684.2 L1607.78 684.2 L1608.34 684.2 L1608.9 684.2 L1609.46 684.2 L1610.02 684.2 L1610.57 684.2 L1611.13 684.2 L1611.69 684.2 L1612.25 684.2 L1612.81 684.2 L1613.37 684.2 L1613.93 684.2 L1614.49 684.2 L1615.05 684.2 L1615.61 684.2 L1616.17 684.2 L1616.73 684.2 L1617.29 684.2 L1617.84 684.2 L1618.4 684.2 L1618.96 684.2 L1619.52 684.2 L1620.08 684.2 L1620.64 684.2 L1621.2 684.2 L1621.76 684.2 L1622.32 684.2 L1622.88 684.2 L1623.44 684.2 L1624 684.2 L1624.56 684.2 L1625.11 684.2 L1625.67 684.2 L1626.23 684.2 L1626.79 684.2 L1627.35 684.2 L1627.91 684.2 L1628.47 684.2 L1629.03 684.2 L1629.59 684.2 L1630.15 684.2 L1630.71 684.2 L1631.27 684.2 L1631.83 684.2 L1632.39 684.2 L1632.94 684.2 L1633.5 684.2 L1634.06 684.2 L1634.62 684.2 L1635.18 684.2 L1635.74 684.2 L1636.3 684.2 L1636.86 684.2 L1637.42 684.2 L1637.98 684.2 L1638.54 684.2 L1639.1 684.2 L1639.66 684.2 L1640.21 684.2 L1640.77 684.2 L1641.33 684.2 L1641.89 684.2 L1642.45 684.2 L1643.01 684.2 L1643.57 684.2 L1644.13 684.2 L1644.69 684.2 L1645.25 684.2 L1645.81 684.2 L1646.37 684.2 L1646.93 684.2 L1647.48 684.2 L1648.04 684.2 L1648.6 684.2 L1649.16 684.2 L1649.72 684.2 L1650.28 684.2 L1650.84 684.2 L1651.4 684.2 L1651.96 684.2 L1652.52 684.2 L1653.08 684.2 L1653.64 684.2 L1654.2 684.2 L1654.76 684.2 L1655.31 684.2 L1655.87 684.2 L1656.43 684.2 L1656.99 684.2 L1657.55 684.2 L1658.11 684.2 L1658.67 684.2 L1659.23 684.2 L1659.79 684.2 L1660.35 684.2 L1660.91 684.2 L1661.47 684.2 L1662.03 684.2 L1662.58 684.2 L1663.14 684.2 L1663.7 684.2 L1664.26 684.2 L1664.82 684.2 L1665.38 684.2 L1665.94 684.2 L1666.5 684.2 L1667.06 684.2 L1667.62 684.2 L1668.18 684.2 L1668.74 684.2 L1669.3 684.2 L1669.85 684.2 L1670.41 684.2 L1670.97 684.2 L1671.53 684.2 L1672.09 684.2 L1672.65 684.2 L1673.21 684.2 L1673.77 684.2 L1674.33 684.2 L1674.89 684.2 L1675.45 684.2 L1676.01 684.2 L1676.57 684.2 L1677.13 684.2 L1677.68 684.2 L1678.24 684.2 L1678.8 684.2 L1679.36 684.2 L1679.92 684.2 L1680.48 684.2 L1681.04 684.2 L1681.6 684.2 L1682.16 684.2 L1682.72 684.2 L1683.28 684.2 L1683.84 684.2 L1684.4 684.2 L1684.95 684.2 L1685.51 684.2 L1686.07 684.2 L1686.63 684.2 L1687.19 684.2 L1687.75 684.2 L1688.31 684.2 L1688.87 684.2 L1689.43 684.2 L1689.99 684.2 L1690.55 684.2 L1691.11 684.2 L1691.67 684.2 L1692.23 684.2 L1692.78 684.2 L1693.34 684.2 L1693.9 684.2 L1694.46 684.2 L1695.02 684.2 L1695.58 684.2 L1696.14 684.2 L1696.7 684.2 L1697.26 684.2 L1697.82 684.2 L1698.38 684.2 L1698.94 684.2 L1699.5 684.2 L1700.05 684.2 L1700.61 684.2 L1701.17 684.2 L1701.73 684.2 L1702.29 684.2 L1702.85 684.2 L1703.41 684.2 L1703.97 684.2 L1704.53 684.2 L1705.09 684.2 L1705.65 684.2 L1706.21 684.2 L1706.77 684.2 L1707.32 684.2 L1707.88 684.2 L1708.44 684.2 L1709 684.2 L1709.56 684.2 L1710.12 684.2 L1710.68 684.2 L1711.24 684.2 L1711.8 684.2 L1712.36 684.2 L1712.92 684.2 L1713.48 684.2 L1714.04 684.2 L1714.6 684.2 L1715.15 684.2 L1715.71 684.2 L1716.27 684.2 L1716.83 684.2 L1717.39 684.2 L1717.95 684.2 L1718.51 684.2 L1719.07 684.2 L1719.63 684.2 L1720.19 684.2 L1720.75 684.2 L1721.31 684.2 L1721.87 684.2 L1722.42 684.2 L1722.98 684.2 L1723.54 684.2 L1724.1 684.2 L1724.66 684.2 L1725.22 684.2 L1725.78 684.2 L1726.34 684.2 L1726.9 684.2 L1727.46 684.2 L1728.02 684.2 L1728.58 684.2 L1729.14 684.2 L1729.69 684.2 L1730.25 684.2 L1730.81 684.2 L1731.37 684.2 L1731.93 684.2 L1732.49 684.2 L1733.05 684.2 L1733.61 684.2 L1734.17 684.2 L1734.73 684.2 L1735.29 684.2 L1735.85 684.2 L1736.41 684.2 L1736.97 684.2 L1737.52 684.2 L1738.08 684.2 L1738.64 684.2 L1739.2 684.2 L1739.76 684.2 L1740.32 684.2 L1740.88 684.2 L1741.44 684.2 L1742 684.2 L1742.56 684.2 L1743.12 684.2 L1743.68 684.2 L1744.24 684.2 L1744.79 684.2 L1745.35 684.2 L1745.91 684.2 L1746.47 684.2 L1747.03 684.2 L1747.59 684.2 L1748.15 684.2 L1748.71 684.2 L1749.27 684.2 L1749.83 684.2 L1750.39 684.2 L1750.95 684.2 L1751.51 684.2 L1752.06 684.2 L1752.62 684.2 L1753.18 684.2 L1753.74 684.2 L1754.3 684.2 L1754.86 684.2 L1755.42 684.2 L1755.98 684.2 L1756.54 684.2 L1757.1 684.2 L1757.66 684.2 L1758.22 684.2 L1758.78 684.2 L1759.34 684.2 L1759.89 684.2 L1760.45 684.2 L1761.01 684.2 L1761.57 684.2 L1762.13 684.2 L1762.69 684.2 L1763.25 684.2 L1763.81 684.2 L1764.37 684.2 L1764.93 684.2 L1765.49 684.2 L1766.05 684.2 L1766.61 684.2 L1767.16 684.2 L1767.72 684.2 L1768.28 684.2 L1768.84 684.2 L1769.4 684.2 L1769.96 684.2 L1770.52 684.2 L1771.08 684.2 L1771.64 684.2 L1772.2 684.2 L1772.76 684.2 L1773.32 684.2 L1773.88 684.2 L1774.43 684.2 L1774.99 684.2 L1775.55 684.2 L1776.11 684.2 L1776.67 684.2 L1777.23 684.2 L1777.79 684.2 L1778.35 684.2 L1778.91 684.2 L1779.47 684.2 L1780.03 684.2 L1780.59 684.2 L1781.15 684.2 L1781.71 684.2 L1782.26 684.2 L1782.82 684.2 L1783.38 684.2 L1783.94 684.2 L1784.5 684.2 L1785.06 684.2 L1785.62 684.2 L1786.18 684.2 L1786.74 684.2 L1787.3 684.2 L1787.86 684.2 L1788.42 684.2 L1788.98 684.2 L1789.53 684.2 L1790.09 684.2 L1790.65 684.2 L1791.21 684.2 L1791.77 684.2 L1792.33 684.2 L1792.89 684.2 L1793.45 684.2 L1794.01 684.2 L1794.57 684.2 L1795.13 684.2 L1795.69 684.2 L1796.25 684.2 L1796.8 684.2 L1797.36 684.2 L1797.92 684.2 L1798.48 684.2 L1799.04 684.2 L1799.6 684.2 L1800.16 684.2 L1800.72 684.2 L1801.28 684.2 L1801.84 684.2 L1802.4 684.2 L1802.96 684.2 L1803.52 684.2 L1804.08 684.2 L1804.63 684.2 L1805.19 684.2 L1805.75 684.2 L1806.31 684.2 L1806.87 684.2 L1807.43 684.2 L1807.99 684.2 L1808.55 684.2 L1809.11 684.2 L1809.67 684.2 L1810.23 684.2 L1810.79 684.2 L1811.35 684.2 L1811.9 684.2 L1812.46 684.2 L1813.02 684.2 L1813.58 684.2 L1814.14 684.2 L1814.7 684.2 L1815.26 684.2 L1815.82 684.2 L1816.38 684.2 L1816.94 684.2 L1817.5 684.2 L1818.06 684.2 L1818.62 684.2 L1819.18 684.2 L1819.73 684.2 L1820.29 684.2 L1820.85 684.2 L1821.41 684.2 L1821.97 684.2 L1822.53 684.2 L1823.09 684.2 L1823.65 684.2 L1824.21 684.2 L1824.77 684.2 L1825.33 684.2 L1825.89 684.2 L1826.45 684.2 L1827 684.2 L1827.56 684.2 L1828.12 684.2 L1828.68 684.2 L1829.24 684.2 L1829.8 684.2 L1830.36 684.2 L1830.92 684.2 L1831.48 684.2 L1832.04 684.2 L1832.6 684.2 L1833.16 684.2 L1833.72 684.2 L1834.27 684.2 L1834.83 684.2 L1835.39 684.2 L1835.95 684.2 L1836.51 684.2 L1837.07 684.2 L1837.63 684.2 L1838.19 684.2 L1838.19 682.256 L1837.63 682.256 L1837.07 682.256 L1836.51 682.256 L1835.95 682.256 L1835.39 682.256 L1834.83 682.256 L1834.27 682.256 L1833.72 682.256 L1833.16 682.256 L1832.6 682.256 L1832.04 682.256 L1831.48 682.256 L1830.92 682.256 L1830.36 682.256 L1829.8 682.256 L1829.24 682.256 L1828.68 682.256 L1828.12 682.256 L1827.56 682.256 L1827 682.256 L1826.45 682.256 L1825.89 682.256 L1825.33 682.256 L1824.77 682.256 L1824.21 682.256 L1823.65 682.256 L1823.09 682.256 L1822.53 682.256 L1821.97 682.256 L1821.41 682.256 L1820.85 682.256 L1820.29 682.256 L1819.73 682.256 L1819.18 682.256 L1818.62 682.256 L1818.06 682.256 L1817.5 682.256 L1816.94 682.256 L1816.38 682.256 L1815.82 682.256 L1815.26 682.256 L1814.7 682.256 L1814.14 682.256 L1813.58 682.256 L1813.02 682.256 L1812.46 682.256 L1811.9 682.256 L1811.35 682.256 L1810.79 682.256 L1810.23 682.256 L1809.67 682.256 L1809.11 682.256 L1808.55 682.256 L1807.99 682.256 L1807.43 682.256 L1806.87 682.256 L1806.31 682.256 L1805.75 682.256 L1805.19 682.256 L1804.63 682.256 L1804.08 682.256 L1803.52 682.256 L1802.96 682.256 L1802.4 682.256 L1801.84 682.256 L1801.28 682.256 L1800.72 682.256 L1800.16 682.256 L1799.6 682.256 L1799.04 682.256 L1798.48 682.256 L1797.92 682.256 L1797.36 682.256 L1796.8 682.256 L1796.25 682.256 L1795.69 682.256 L1795.13 682.256 L1794.57 682.256 L1794.01 682.256 L1793.45 682.256 L1792.89 682.256 L1792.33 682.256 L1791.77 682.256 L1791.21 682.256 L1790.65 682.256 L1790.09 682.256 L1789.53 682.256 L1788.98 682.256 L1788.42 682.256 L1787.86 682.256 L1787.3 682.256 L1786.74 682.256 L1786.18 682.256 L1785.62 682.256 L1785.06 682.256 L1784.5 682.256 L1783.94 682.256 L1783.38 682.256 L1782.82 682.256 L1782.26 682.256 L1781.71 682.256 L1781.15 682.256 L1780.59 682.256 L1780.03 682.256 L1779.47 682.256 L1778.91 682.256 L1778.35 682.256 L1777.79 682.256 L1777.23 682.256 L1776.67 682.256 L1776.11 682.256 L1775.55 682.256 L1774.99 682.256 L1774.43 682.256 L1773.88 682.256 L1773.32 682.256 L1772.76 682.256 L1772.2 682.256 L1771.64 682.256 L1771.08 682.256 L1770.52 682.256 L1769.96 682.256 L1769.4 682.256 L1768.84 682.256 L1768.28 682.256 L1767.72 682.256 L1767.16 682.256 L1766.61 682.256 L1766.05 682.256 L1765.49 682.256 L1764.93 682.256 L1764.37 682.256 L1763.81 682.256 L1763.25 682.256 L1762.69 682.256 L1762.13 682.256 L1761.57 682.256 L1761.01 682.256 L1760.45 682.256 L1759.89 682.256 L1759.34 682.256 L1758.78 682.256 L1758.22 682.256 L1757.66 682.256 L1757.1 682.256 L1756.54 682.256 L1755.98 682.256 L1755.42 682.256 L1754.86 682.256 L1754.3 682.256 L1753.74 682.256 L1753.18 682.256 L1752.62 682.256 L1752.06 682.256 L1751.51 682.256 L1750.95 682.256 L1750.39 682.256 L1749.83 682.256 L1749.27 682.256 L1748.71 682.256 L1748.15 682.256 L1747.59 682.256 L1747.03 682.256 L1746.47 682.256 L1745.91 682.256 L1745.35 682.256 L1744.79 682.256 L1744.24 682.256 L1743.68 682.256 L1743.12 682.256 L1742.56 682.256 L1742 682.256 L1741.44 682.256 L1740.88 682.256 L1740.32 682.256 L1739.76 682.256 L1739.2 682.256 L1738.64 682.256 L1738.08 682.256 L1737.52 682.256 L1736.97 682.256 L1736.41 682.256 L1735.85 682.256 L1735.29 682.256 L1734.73 682.256 L1734.17 682.256 L1733.61 682.256 L1733.05 682.256 L1732.49 682.256 L1731.93 682.256 L1731.37 682.256 L1730.81 682.256 L1730.25 682.256 L1729.69 682.256 L1729.14 682.256 L1728.58 682.256 L1728.02 682.256 L1727.46 682.256 L1726.9 682.256 L1726.34 682.256 L1725.78 682.256 L1725.22 682.256 L1724.66 682.256 L1724.1 682.256 L1723.54 682.256 L1722.98 682.256 L1722.42 682.256 L1721.87 682.256 L1721.31 682.256 L1720.75 682.256 L1720.19 682.256 L1719.63 682.256 L1719.07 682.256 L1718.51 682.256 L1717.95 682.256 L1717.39 682.256 L1716.83 682.256 L1716.27 682.256 L1715.71 682.256 L1715.15 682.256 L1714.6 682.256 L1714.04 682.256 L1713.48 682.256 L1712.92 682.256 L1712.36 682.256 L1711.8 682.256 L1711.24 682.256 L1710.68 682.256 L1710.12 682.256 L1709.56 682.256 L1709 682.256 L1708.44 682.256 L1707.88 682.256 L1707.32 682.256 L1706.77 682.256 L1706.21 682.256 L1705.65 682.256 L1705.09 682.256 L1704.53 682.256 L1703.97 682.256 L1703.41 682.256 L1702.85 682.256 L1702.29 682.256 L1701.73 682.256 L1701.17 682.256 L1700.61 682.256 L1700.05 682.256 L1699.5 682.256 L1698.94 682.256 L1698.38 682.256 L1697.82 682.256 L1697.26 682.256 L1696.7 682.256 L1696.14 682.256 L1695.58 682.256 L1695.02 682.256 L1694.46 682.256 L1693.9 682.256 L1693.34 682.256 L1692.78 682.256 L1692.23 682.256 L1691.67 682.256 L1691.11 682.256 L1690.55 682.256 L1689.99 682.256 L1689.43 682.256 L1688.87 682.256 L1688.31 682.256 L1687.75 682.256 L1687.19 682.256 L1686.63 682.256 L1686.07 682.256 L1685.51 682.256 L1684.95 682.256 L1684.4 682.256 L1683.84 682.256 L1683.28 682.256 L1682.72 682.256 L1682.16 682.256 L1681.6 682.256 L1681.04 682.256 L1680.48 682.256 L1679.92 682.256 L1679.36 682.256 L1678.8 682.256 L1678.24 682.256 L1677.68 682.256 L1677.13 682.256 L1676.57 682.256 L1676.01 682.256 L1675.45 682.256 L1674.89 682.256 L1674.33 682.256 L1673.77 682.256 L1673.21 682.256 L1672.65 682.256 L1672.09 682.256 L1671.53 682.256 L1670.97 682.256 L1670.41 682.256 L1669.85 682.256 L1669.3 682.256 L1668.74 682.256 L1668.18 682.256 L1667.62 682.256 L1667.06 682.256 L1666.5 682.256 L1665.94 682.256 L1665.38 682.256 L1664.82 682.256 L1664.26 682.256 L1663.7 682.256 L1663.14 682.256 L1662.58 682.256 L1662.03 682.256 L1661.47 682.256 L1660.91 682.256 L1660.35 682.256 L1659.79 682.256 L1659.23 682.256 L1658.67 682.256 L1658.11 682.256 L1657.55 682.256 L1656.99 682.256 L1656.43 682.256 L1655.87 682.256 L1655.31 682.256 L1654.76 682.256 L1654.2 682.256 L1653.64 682.256 L1653.08 682.256 L1652.52 682.256 L1651.96 682.256 L1651.4 682.256 L1650.84 682.256 L1650.28 682.256 L1649.72 682.256 L1649.16 682.256 L1648.6 682.256 L1648.04 682.256 L1647.48 682.256 L1646.93 682.256 L1646.37 682.256 L1645.81 682.256 L1645.25 682.256 L1644.69 682.256 L1644.13 682.256 L1643.57 682.256 L1643.01 682.256 L1642.45 682.256 L1641.89 682.256 L1641.33 682.256 L1640.77 682.256 L1640.21 682.256 L1639.66 682.256 L1639.1 682.256 L1638.54 682.256 L1637.98 682.256 L1637.42 682.256 L1636.86 682.256 L1636.3 682.256 L1635.74 682.256 L1635.18 682.256 L1634.62 682.256 L1634.06 682.256 L1633.5 682.256 L1632.94 682.256 L1632.39 682.256 L1631.83 682.256 L1631.27 682.256 L1630.71 682.256 L1630.15 682.256 L1629.59 682.256 L1629.03 682.256 L1628.47 682.256 L1627.91 682.256 L1627.35 682.256 L1626.79 682.256 L1626.23 682.256 L1625.67 682.256 L1625.11 682.256 L1624.56 682.256 L1624 682.256 L1623.44 682.256 L1622.88 682.256 L1622.32 682.256 L1621.76 682.256 L1621.2 682.256 L1620.64 682.256 L1620.08 682.256 L1619.52 682.256 L1618.96 682.256 L1618.4 682.256 L1617.84 682.256 L1617.29 682.256 L1616.73 682.256 L1616.17 682.256 L1615.61 682.256 L1615.05 682.256 L1614.49 682.256 L1613.93 682.256 L1613.37 682.256 L1612.81 682.256 L1612.25 682.256 L1611.69 682.256 L1611.13 682.256 L1610.57 682.256 L1610.02 682.256 L1609.46 682.256 L1608.9 682.256 L1608.34 682.256 L1607.78 682.256 L1607.22 682.256 L1606.66 682.256 L1606.1 682.256 L1605.54 682.256 L1604.98 682.256 L1604.42 682.256 L1603.86 682.256 L1603.3 682.256 L1602.74 682.256 L1602.19 682.256 L1601.63 682.256 L1601.07 682.256 L1600.51 682.256 L1599.95 682.256 L1599.39 682.256 L1598.83 682.256 L1598.27 682.256 L1597.71 682.256 L1597.15 682.256 L1596.59 682.256 L1596.03 682.256 L1595.47 682.256 L1594.92 682.256 L1594.36 682.256 L1593.8 682.256 L1593.24 682.256 L1592.68 682.256 L1592.12 682.256 L1591.56 682.256 L1591 682.256 L1590.44 682.256 L1589.88 682.256 L1589.32 682.256 L1588.76 682.256 L1588.2 682.256 L1587.65 682.256 L1587.09 682.256 L1586.53 682.256 L1585.97 682.256 L1585.41 682.256 L1584.85 682.256 L1584.29 682.256 L1583.73 682.256 L1583.17 682.256 L1582.61 682.256 L1582.05 682.256 L1581.49 682.256 L1580.93 682.256 L1580.37 682.256 L1579.82 682.256 L1579.26 682.256 L1578.7 682.256 L1578.14 682.256 L1577.58 682.256 L1577.02 682.256 L1576.46 682.256 L1575.9 682.256 L1575.34 682.256 L1574.78 682.256 L1574.22 682.256 L1573.66 682.256 L1573.1 682.256 L1572.55 682.256 L1571.99 682.256 L1571.43 682.256 L1570.87 682.256 L1570.31 682.256 L1569.75 682.256 L1569.19 682.256 L1568.63 682.256 L1568.07 682.256 L1567.51 682.256 L1566.95 682.256 L1566.39 682.256 L1565.83 682.256 L1565.28 682.256 L1564.72 682.256 L1564.16 682.256 L1563.6 682.256 L1563.04 682.256 L1562.48 682.256 L1561.92 682.256 L1561.36 682.256 L1560.8 682.256 L1560.24 682.256 L1559.68 682.256 L1559.12 682.256 L1558.56 682.256 L1558 682.256 L1557.45 682.256 L1556.89 682.256 L1556.33 682.256 L1555.77 682.256 L1555.21 682.256 L1554.65 682.256 L1554.09 682.256 L1553.53 682.256 L1552.97 682.256 L1552.41 682.256 L1551.85 682.256 L1551.29 682.256 L1550.73 682.256 L1550.18 682.256 L1549.62 682.256 L1549.06 682.256 L1548.5 682.256 L1547.94 682.256 L1547.38 682.256 L1546.82 682.256 L1546.26 682.256 L1545.7 682.256 L1545.14 682.256 L1544.58 682.256 L1544.02 682.256 L1543.46 682.256 L1542.9 682.256 L1542.35 682.256 L1541.79 682.256 L1541.23 682.256 L1540.67 682.256 L1540.11 682.256 L1539.55 682.256 L1538.99 682.256 L1538.43 682.256 L1537.87 682.256 L1537.31 682.256 L1536.75 682.256 L1536.19 682.256 L1535.63 682.256 L1535.08 682.256 L1534.52 682.256 L1533.96 682.256 L1533.4 682.256 L1532.84 682.256 L1532.28 682.256 L1531.72 682.256 L1531.16 682.256 L1530.6 682.256 L1530.04 682.256 L1529.48 682.256 L1528.92 682.256 L1528.36 682.256 L1527.81 682.256 L1527.25 682.256 L1526.69 682.256 L1526.13 682.256 L1525.57 682.256 L1525.01 682.256 L1524.45 682.256 L1523.89 682.256 L1523.33 682.256 L1522.77 682.256 L1522.21 682.256 L1521.65 682.256 L1521.09 682.256 L1520.53 682.256 L1519.98 682.256 L1519.42 682.256 L1518.86 682.256 L1518.3 682.256 L1517.74 682.256 L1517.18 682.256 L1516.62 682.256 L1516.06 682.256 L1515.5 682.256 L1514.94 682.256 L1514.38 682.256 L1513.82 682.256 L1513.26 682.256 L1512.71 682.256 L1512.15 682.256 L1511.59 682.256 L1511.03 682.256 L1510.47 682.256 L1509.91 682.256 L1509.35 682.256 L1508.79 682.256 L1508.23 682.256 L1507.67 682.256 L1507.11 682.256 L1506.55 682.256 L1505.99 682.256 L1505.44 682.256 L1504.88 682.256 L1504.32 682.256 L1503.76 682.256 L1503.2 682.256 L1502.64 682.256 L1502.08 682.256 L1501.52 682.256 L1500.96 682.256 L1500.4 682.256 L1499.84 682.256 L1499.28 682.256 L1498.72 682.256 L1498.16 682.256 L1497.61 682.256 L1497.05 682.256 L1496.49 682.256 L1495.93 682.256 L1495.37 682.256 L1494.81 682.256 L1494.25 682.256 L1493.69 682.256 L1493.13 682.256 L1492.57 682.256 L1492.01 682.256 L1491.45 682.256 L1490.89 682.256 L1490.34 682.256 L1489.78 682.256 L1489.22 682.256 L1488.66 682.256 L1488.1 682.256 L1487.54 682.256 L1486.98 682.256 L1486.42 682.256 L1485.86 682.256 L1485.3 682.256 L1484.74 682.256 L1484.18 682.256 L1483.62 682.256 L1483.07 682.256 L1482.51 682.256 L1481.95 682.256 L1481.39 682.256 L1480.83 682.256 L1480.27 682.256 L1479.71 682.256 L1479.15 682.256 L1478.59 682.256 L1478.03 682.256 L1477.47 682.256 L1476.91 682.256 L1476.35 682.256 L1475.79 682.256 L1475.24 682.256 L1474.68 682.256 L1474.12 682.256 L1473.56 682.256 L1473 682.256 L1472.44 682.256 L1471.88 682.256 L1471.32 682.256 L1470.76 682.256 L1470.2 682.256 L1469.64 682.256 L1469.08 682.256 L1468.52 682.256 L1467.97 682.256 L1467.41 682.256 L1466.85 682.256 L1466.29 682.256 L1465.73 682.256 L1465.17 682.256 L1464.61 682.256 L1464.05 682.256 L1463.49 682.256 L1462.93 682.256 L1462.37 682.256 L1461.81 682.256 L1461.25 682.256 L1460.7 682.256 L1460.14 682.256 L1459.58 682.256 L1459.02 682.256 L1458.46 682.256 L1457.9 682.256 L1457.34 682.256 L1456.78 682.256 L1456.22 682.256 L1455.66 682.256 L1455.1 682.256 L1454.54 682.256 L1453.98 682.256 L1453.42 682.256 L1452.87 682.256 L1452.31 682.256 L1451.75 682.256 L1451.19 682.256 L1450.63 682.256 L1450.07 682.256 L1449.51 682.256 L1448.95 682.256 L1448.39 682.256 L1447.83 682.256 L1447.27 682.256 L1446.71 682.256 L1446.15 682.256 L1445.6 682.256 L1445.04 682.256 L1444.48 682.256 L1443.92 682.256 L1443.36 682.256 L1442.8 682.256 L1442.24 682.256 L1441.68 682.256 L1441.12 682.256 L1440.56 682.256 L1440 682.256 L1439.44 682.256 L1438.88 682.256 L1438.33 682.256 L1437.77 682.256 L1437.21 682.256 L1436.65 682.256 L1436.09 682.256 L1435.53 682.256 L1434.97 682.256 L1434.41 682.256 L1433.85 682.256 L1433.29 682.256 L1432.73 682.256 L1432.17 682.256 L1431.61 682.256 L1431.05 682.256 L1430.5 682.256 L1429.94 682.256 L1429.38 682.256 L1428.82 682.256 L1428.26 682.256 L1427.7 682.256 L1427.14 682.256 L1426.58 682.256 L1426.02 682.256 L1425.46 682.256 L1424.9 682.256 L1424.34 682.256 L1423.78 682.256 L1423.23 682.256 L1422.67 682.256 L1422.11 682.256 L1421.55 682.256 L1420.99 682.256 L1420.43 682.256 L1419.87 682.256 L1419.31 682.256 L1418.75 682.256 L1418.19 682.256 L1417.63 682.256 L1417.07 682.256 L1416.51 682.256 L1415.95 682.256 L1415.4 682.256 L1414.84 682.256 L1414.28 682.256 L1413.72 682.256 L1413.16 682.256 L1412.6 682.256 L1412.04 682.256 L1411.48 682.256 L1410.92 682.256 L1410.36 682.256 L1409.8 682.256 L1409.24 682.256 L1408.68 682.256 L1408.13 682.256 L1407.57 682.256 L1407.01 682.256 L1406.45 682.256 L1405.89 682.256 L1405.33 682.256 L1404.77 682.256 L1404.21 682.256 L1403.65 682.256 L1403.09 682.256 L1402.53 682.256 L1401.97 682.256 L1401.41 682.256 L1400.86 682.256 L1400.3 682.256 L1399.74 682.256 L1399.18 682.256 L1398.62 682.256 L1398.06 682.256 L1397.5 682.256 L1396.94 682.256 L1396.38 682.256 L1395.82 682.256 L1395.26 682.256 L1394.7 682.256 L1394.14 682.256 L1393.58 682.256 L1393.03 682.256 L1392.47 682.256 L1391.91 682.256 L1391.35 682.256 L1390.79 682.256 L1390.23 682.256 L1389.67 682.256 L1389.11 682.256 L1388.55 682.256 L1387.99 682.256 L1387.43 682.256 L1386.87 682.256 L1386.31 682.256 L1385.76 682.256 L1385.2 682.256 L1384.64 682.256 L1384.08 682.256 L1383.52 682.256 L1382.96 682.256 L1382.4 682.256 L1381.84 682.256 L1381.28 682.256 L1380.72 682.256 L1380.16 682.256 L1379.6 682.256 L1379.04 682.256 L1378.49 682.256 L1377.93 682.256 L1377.37 682.256 L1376.81 682.256 L1376.25 682.256 L1375.69 682.256 L1375.13 682.256 L1374.57 682.256 L1374.01 682.256 L1373.45 682.256 L1372.89 682.256 L1372.33 682.256 L1371.77 682.256 L1371.21 682.256 L1370.66 682.256 L1370.1 682.256 L1369.54 682.256 L1368.98 682.256 L1368.42 682.256 L1367.86 682.256 L1367.3 682.256 L1366.74 682.256 L1366.18 682.256 L1365.62 682.256 L1365.06 682.256 L1364.5 682.256 L1363.94 682.256 L1363.39 682.256 L1362.83 682.256 L1362.27 682.256 L1361.71 682.256 L1361.15 682.256 L1360.59 682.256 L1360.03 682.256 L1359.47 682.256 L1358.91 682.256 L1358.35 682.256 L1357.79 682.256 L1357.23 682.256 L1356.67 682.256 L1356.12 682.256 L1355.56 682.256 L1355 682.256 L1354.44 682.256 L1353.88 682.256 L1353.32 682.256 L1352.76 682.256 L1352.2 682.256 L1351.64 682.256 L1351.08 682.256 L1350.52 682.256 L1349.96 682.256 L1349.4 682.256 L1348.84 682.256 L1348.29 682.256 L1347.73 682.256 L1347.17 682.256 L1346.61 682.256 L1346.05 682.256 L1345.49 682.256 L1344.93 682.256 L1344.37 682.256 L1343.81 682.256 L1343.25 682.256 L1342.69 682.256 L1342.13 682.256 L1341.57 682.256 L1341.02 682.256 L1340.46 682.256 L1339.9 682.256 L1339.34 682.256 L1338.78 682.256 L1338.22 682.256 L1337.66 682.256 L1337.1 682.256 L1336.54 682.256 L1335.98 682.256 L1335.42 682.256 L1334.86 682.256 L1334.3 682.256 L1333.75 682.256 L1333.19 682.256 L1332.63 682.256 L1332.07 682.256 L1331.51 682.256 L1330.95 682.256 L1330.39 682.256 L1329.83 682.256 L1329.27 682.256 L1328.71 682.256 L1328.15 682.256 L1327.59 682.256 L1327.03 682.256 L1326.47 682.256 L1325.92 682.256 L1325.36 682.256 L1324.8 682.256 L1324.24 682.256 L1323.68 682.256 L1323.12 682.256 L1322.56 682.256 L1322 682.256 L1321.44 682.256 L1320.88 682.256 L1320.32 682.256 L1319.76 682.256 L1319.2 682.256 L1318.65 682.256 L1318.09 682.256 L1317.53 682.256 L1316.97 682.256 L1316.41 682.256 L1315.85 682.256 L1315.29 682.256 L1314.73 682.256 L1314.17 682.256 L1313.61 682.256 L1313.05 682.256 L1312.49 682.256 L1311.93 682.256 L1311.38 682.256 L1310.82 682.256 L1310.26 682.256 L1309.7 682.256 L1309.14 682.256 L1308.58 682.256 L1308.02 682.256 L1307.46 682.256 L1306.9 682.256 L1306.34 682.256 L1305.78 682.256 L1305.22 682.256 L1304.66 682.256 L1304.1 682.256 L1303.55 682.256 L1302.99 682.256 L1302.43 682.256 L1301.87 682.256 L1301.31 682.256 L1300.75 682.256 L1300.19 682.256 L1299.63 682.256 L1299.07 682.256 L1298.51 682.256 L1297.95 682.256 L1297.39 682.256 L1296.83 682.256 L1296.28 682.256 L1295.72 682.256 L1295.16 682.256 L1294.6 682.256 L1294.04 682.256 L1293.48 682.256 L1292.92 682.256 L1292.36 682.256 L1291.8 682.256 L1291.24 682.256 L1290.68 682.256 L1290.12 682.256 L1289.56 682.256 L1289 682.256 L1288.45 682.256 L1287.89 682.256 L1287.33 682.256 L1286.77 682.256 L1286.21 682.256 L1285.65 682.256 L1285.09 682.256 L1284.53 682.256 L1283.97 682.256 L1283.41 682.256 L1282.85 682.256 L1282.29 682.256 L1281.73 682.256 L1281.18 682.256 L1280.62 682.256 L1280.06 682.256 L1279.5 682.256 L1278.94 682.256 L1278.38 682.256 L1277.82 682.256 L1277.26 682.256 L1276.7 682.256 L1276.14 682.256 L1275.58 682.256 L1275.02 682.256 L1274.46 682.256 L1273.91 682.256 L1273.35 682.256 L1272.79 682.256 L1272.23 682.256 L1271.67 682.256 L1271.11 682.256 L1270.55 682.256 L1269.99 682.256 L1269.43 682.256 L1268.87 682.256 L1268.31 682.256 L1267.75 682.256 L1267.19 682.256 L1266.63 682.256 L1266.08 682.256 L1265.52 682.256 L1264.96 682.256 L1264.4 682.256 L1263.84 682.256 L1263.28 682.256 L1262.72 682.256 L1262.16 682.256 L1261.6 682.256 L1261.04 682.256 L1260.48 682.256 L1259.92 682.256 L1259.36 682.256 L1258.81 682.256 L1258.25 682.256 L1257.69 682.256 L1257.13 682.256 L1256.57 682.256 L1256.01 682.256 L1255.45 682.256 L1254.89 682.256 L1254.33 682.256 L1253.77 682.256 L1253.21 682.256 L1252.65 682.256 L1252.09 682.256 L1251.54 682.256 L1250.98 682.256 L1250.42 682.256 L1249.86 682.256 L1249.3 682.256 L1248.74 682.256 L1248.18 682.256 L1247.62 682.256 L1247.06 682.256 L1246.5 682.256 L1245.94 682.256 L1245.38 682.256 L1244.82 682.256 L1244.26 682.256 L1243.71 682.256 L1243.15 682.256 L1242.59 682.256 L1242.03 682.256 L1241.47 682.256 L1240.91 682.256 L1240.35 682.256 L1239.79 682.256 L1239.23 682.256 L1238.67 682.256 L1238.11 682.256 L1237.55 682.256 L1236.99 682.256 L1236.44 682.256 L1235.88 682.256 L1235.32 682.256 L1234.76 682.256 L1234.2 682.256 L1233.64 682.256 L1233.08 682.256 L1232.52 682.256 L1231.96 682.256 L1231.4 682.256 L1230.84 682.256 L1230.28 682.256 L1229.72 682.256 L1229.17 682.256 L1228.61 682.256 L1228.05 682.256 L1227.49 682.256 L1226.93 682.256 L1226.37 682.256 L1225.81 682.256 L1225.25 682.256 L1224.69 682.256 L1224.13 682.256 L1223.57 682.256 L1223.01 682.256 L1222.45 682.256 L1221.89 682.256 L1221.34 682.256 L1220.78 682.256 L1220.22 682.256 L1219.66 682.256 L1219.1 682.256 L1218.54 682.256 L1217.98 682.256 L1217.42 682.256 L1216.86 682.256 L1216.3 682.256 L1215.74 682.256 L1215.18 682.256 L1214.62 682.256 L1214.07 682.256 L1213.51 682.256 L1212.95 682.256 L1212.39 682.256 L1211.83 682.256 L1211.27 682.256 L1210.71 682.256 L1210.15 682.256 L1209.59 682.256 L1209.03 682.256 L1208.47 682.256 L1207.91 682.256 L1207.35 682.256 L1206.8 682.256 L1206.24 682.256 L1205.68 682.256 L1205.12 682.256 L1204.56 682.256 L1204 682.256 L1203.44 682.256 L1202.88 682.256 L1202.32 682.256 L1201.76 682.256 L1201.2 682.256 L1200.64 682.256 L1200.08 682.256 L1199.52 682.256 L1198.97 682.256 L1198.41 682.256 L1197.85 682.256 L1197.29 682.256 L1196.73 682.256 L1196.17 682.256 L1195.61 682.256 L1195.05 682.256 L1194.49 682.256 L1193.93 682.256 L1193.37 682.256 L1192.81 682.256 L1192.25 682.256 L1191.7 682.256 L1191.14 682.256 L1190.58 682.256 L1190.02 682.256 L1189.46 682.256 L1188.9 682.256 L1188.34 682.256 L1187.78 682.256 L1187.22 682.256 L1186.66 682.256 L1186.1 682.256 L1185.54 682.256 L1184.98 682.256 L1184.43 682.256 L1183.87 682.256 L1183.31 682.256 L1182.75 682.256 L1182.19 682.256 L1181.63 682.256 L1181.07 682.256 L1180.51 682.256 L1179.95 682.256 L1179.39 682.256 L1178.83 682.256 L1178.27 682.256 L1177.71 682.256 L1177.15 682.256 L1176.6 682.256 L1176.04 682.256 L1175.48 682.256 L1174.92 682.256 L1174.36 682.256 L1173.8 682.256 L1173.24 682.256 L1172.68 682.256 L1172.12 682.256 L1171.56 682.256 L1171 682.256 L1170.44 682.256 L1169.88 682.256 L1169.33 682.256 L1168.77 682.256 L1168.21 682.256 L1167.65 682.256 L1167.09 682.256 L1166.53 682.256 L1165.97 682.256 L1165.41 682.256 L1164.85 682.256 L1164.29 682.256 L1163.73 682.256 L1163.17 682.256 L1162.61 682.256 L1162.05 682.256 L1161.5 682.256 L1160.94 682.256 L1160.38 682.256 L1159.82 682.256 L1159.26 682.256 L1158.7 682.256 L1158.14 682.256 L1157.58 682.256 L1157.02 682.256 L1156.46 682.256 L1155.9 682.256 L1155.34 682.256 L1154.78 682.256 L1154.23 682.256 L1153.67 682.256 L1153.11 682.256 L1152.55 682.256 L1151.99 682.256 L1151.43 682.256 L1150.87 682.256 L1150.31 682.256 L1149.75 682.256 L1149.19 682.256 L1148.63 682.256 L1148.07 682.256 L1147.51 682.256 L1146.96 682.256 L1146.4 682.256 L1145.84 682.256 L1145.28 682.256 L1144.72 682.256 L1144.16 682.256 L1143.6 682.256 L1143.04 682.256 L1142.48 682.256 L1141.92 682.256 L1141.36 682.256 L1140.8 682.256 L1140.24 682.256 L1139.68 682.256 L1139.13 682.256 L1138.57 682.256 L1138.01 682.256 L1137.45 682.256 L1136.89 682.256 L1136.33 682.256 L1135.77 682.256 L1135.21 682.256 L1134.65 682.256 L1134.09 682.256 L1133.53 682.256 L1132.97 682.256 L1132.41 682.256 L1131.86 682.256 L1131.3 682.256 L1130.74 682.256 L1130.18 682.256 L1129.62 682.256 L1129.06 682.256 L1128.5 682.256 L1127.94 682.256 L1127.38 682.256 L1126.82 682.256 L1126.26 682.256 L1125.7 682.256 L1125.14 682.256 L1124.59 682.256 L1124.03 682.256 L1123.47 682.256 L1122.91 682.256 L1122.35 682.256 L1121.79 682.256 L1121.23 682.256 L1120.67 682.256 L1120.11 682.256 L1119.55 682.256 L1118.99 682.256 L1118.43 682.256 L1117.87 682.256 L1117.31 682.256 L1116.76 682.256 L1116.2 682.256 L1115.64 682.256 L1115.08 682.256 L1114.52 682.256 L1113.96 682.256 L1113.4 682.256 L1112.84 682.256 L1112.28 682.256 L1111.72 682.256 L1111.16 682.256 L1110.6 682.256 L1110.04 682.256 L1109.49 682.256 L1108.93 682.256 L1108.37 682.256 L1107.81 682.256 L1107.25 682.256 L1106.69 682.256 L1106.13 682.256 L1105.57 682.256 L1105.01 682.256 L1104.45 682.256 L1103.89 682.256 L1103.33 682.256 L1102.77 682.256 L1102.22 682.256 L1101.66 682.256 L1101.1 682.256 L1100.54 682.256 L1099.98 682.256 L1099.42 682.256 L1098.86 682.256 L1098.3 682.256 L1097.74 682.256 L1097.18 682.256 L1096.62 682.256 L1096.06 682.256 L1095.5 682.256 L1094.94 682.256 L1094.39 682.256 L1093.83 682.256 L1093.27 682.256 L1092.71 682.256 L1092.15 682.256 L1091.59 682.256 L1091.03 682.256 L1090.47 682.256 L1089.91 682.256 L1089.35 682.256 L1088.79 682.256 L1088.23 682.256 L1087.67 682.256 L1087.12 682.256 L1086.56 682.256 L1086 682.256 L1085.44 682.256 L1084.88 682.256 L1084.32 682.256 L1083.76 682.256 L1083.2 682.256 L1082.64 682.256 L1082.08 682.256 L1081.52 682.256 L1080.96 682.256 L1080.4 682.256 L1079.85 682.256 L1079.29 682.256 L1078.73 682.256 L1078.17 682.256 L1077.61 682.256 L1077.05 682.256 L1076.49 682.256 L1075.93 682.256 L1075.37 682.256 L1074.81 682.256 L1074.25 682.256 L1073.69 682.256 L1073.13 682.256 L1072.57 682.256 L1072.02 682.256 L1071.46 682.256 L1070.9 682.256 L1070.34 682.256 L1069.78 682.256 L1069.22 682.256 L1068.66 682.256 L1068.1 682.256 L1067.54 682.256 L1066.98 682.256 L1066.42 682.256 L1065.86 682.256 L1065.3 682.256 L1064.75 682.256 L1064.19 682.256 L1063.63 682.256 L1063.07 682.256 L1062.51 682.256 L1061.95 682.256 L1061.39 682.256 L1060.83 682.256 L1060.27 682.256 L1059.71 682.256 L1059.15 682.256 L1058.59 682.256 L1058.03 682.256 L1057.48 682.256 L1056.92 682.256 L1056.36 682.256 L1055.8 682.256 L1055.24 682.256 L1054.68 682.256 L1054.12 682.256 L1053.56 682.256 L1053 682.256 L1052.44 682.256 L1051.88 682.256 L1051.32 682.256 L1050.76 682.256 L1050.2 682.256 L1049.65 682.256 L1049.09 682.256 L1048.53 682.256 L1047.97 682.256 L1047.41 682.256 L1046.85 682.256 L1046.29 682.256 L1045.73 682.256 L1045.17 682.256 L1044.61 682.256 L1044.05 682.256 L1043.49 682.256 L1042.93 682.256 L1042.38 682.256 L1041.82 682.256 L1041.26 682.256 L1040.7 682.256 L1040.14 682.256 L1039.58 682.256 L1039.02 682.256 L1038.46 682.256 L1037.9 682.256 L1037.34 682.256 L1036.78 682.256 L1036.22 682.256 L1035.66 682.256 L1035.1 682.256 L1034.55 682.256 L1033.99 682.256 L1033.43 682.256 L1032.87 682.256 L1032.31 682.256 L1031.75 682.256 L1031.19 682.256 L1030.63 682.256 L1030.07 682.256 L1029.51 682.256 L1028.95 682.256 L1028.39 682.256 L1027.83 682.256 L1027.28 682.256 L1026.72 682.256 L1026.16 682.256 L1025.6 682.256 L1025.04 682.256 L1024.48 682.256 L1023.92 682.256 L1023.36 682.256 L1022.8 682.256 L1022.24 682.256 L1021.68 682.256 L1021.12 682.256 L1020.56 682.256 L1020.01 682.256 L1019.45 682.256 L1018.89 682.256 L1018.33 682.256 L1017.77 682.256 L1017.21 682.256 L1016.65 682.256 L1016.09 682.256 L1015.53 682.256 L1014.97 682.256 L1014.41 682.256 L1013.85 682.256 L1013.29 682.256 L1012.73 682.256 L1012.18 682.256 L1011.62 682.256 L1011.06 682.256 L1010.5 682.256 L1009.94 682.256 L1009.38 682.256 L1008.82 682.256 L1008.26 682.256 L1007.7 682.256 L1007.14 682.256 L1006.58 682.256 L1006.02 682.256 L1005.46 682.256 L1004.91 682.256 L1004.35 682.256 L1003.79 682.256 L1003.23 682.256 L1002.67 682.256 L1002.11 682.256 L1001.55 682.256 L1000.99 682.256 L1000.43 682.256 L999.872 682.256 L999.313 682.256 L998.754 682.256 L998.194 682.256 L997.635 682.256 L997.076 682.256 L996.517 682.256 L995.957 682.256 L995.398 682.256 L994.839 682.256 L994.28 682.256 L993.72 682.256 L993.161 682.256 L992.602 682.256 L992.043 682.256 L991.483 682.256 L990.924 682.256 L990.365 682.256 L989.806 682.256 L989.246 682.256 L988.687 682.256 L988.128 682.256 L987.569 682.256 L987.009 682.256 L986.45 682.256 L985.891 682.256 L985.332 682.256 L984.772 682.256 L984.213 682.256 L983.654 682.256 L983.095 682.256 L982.535 682.256 L981.976 682.256 L981.417 682.256 L980.858 682.256 L980.298 682.256 L979.739 682.256 L979.18 682.256 L978.621 682.256 L978.061 682.256 L977.502 682.256 L976.943 682.256 L976.384 682.256 L975.824 682.256 L975.265 682.256 L974.706 682.256 L974.147 682.256 L973.587 682.256 L973.028 682.256 L972.469 682.256 L971.91 682.256 L971.35 682.256 L970.791 682.256 L970.232 682.256 L969.673 682.256 L969.113 682.256 L968.554 682.256 L967.995 682.256 L967.436 682.256 L966.876 682.256 L966.317 682.256 L965.758 682.256 L965.199 682.256 L964.639 682.256 L964.08 682.256 L963.521 682.256 L962.962 682.256 L962.402 682.256 L961.843 682.256 L961.284 682.256 L960.725 682.256 L960.165 682.256 L959.606 682.256 L959.047 682.256 L958.488 682.256 L957.928 682.256 L957.369 682.256 L956.81 682.256 L956.251 682.256 L955.691 682.256 L955.132 682.256 L954.573 682.256 L954.014 682.256 L953.454 682.256 L952.895 682.256 L952.336 682.256 L951.777 682.256 L951.217 682.256 L950.658 682.256 L950.099 682.256 L949.54 682.256 L948.98 682.256 L948.421 682.256 L947.862 682.256 L947.303 682.256 L946.743 682.256 L946.184 682.256 L945.625 682.256 L945.066 682.256 L944.506 682.256 L943.947 682.256 L943.388 682.256 L942.829 682.256 L942.269 682.256 L941.71 682.256 L941.151 682.256 L940.592 682.256 L940.032 682.256 L939.473 682.256 L938.914 682.256 L938.355 682.256 L937.795 682.256 L937.236 682.256 L936.677 682.256 L936.118 682.256 L935.558 682.256 L934.999 682.256 L934.44 682.256 L933.881 682.256 L933.321 682.256 L932.762 682.256 L932.203 682.256 L931.644 682.256 L931.084 682.256 L930.525 682.256 L929.966 682.256 L929.406 682.256 L928.847 682.256 L928.288 682.256 L927.729 682.256 L927.169 682.256 L926.61 682.256 L926.051 682.256 L925.492 682.256 L924.932 682.256 L924.373 682.256 L923.814 682.256 L923.255 682.256 L922.695 682.256 L922.136 682.256 L921.577 682.256 L921.018 682.256 L920.458 682.256 L919.899 682.256 L919.34 682.256 L918.781 682.256 L918.221 682.256 L917.662 682.256 L917.103 682.256 L916.544 682.256 L915.984 682.256 L915.425 682.256 L914.866 682.256 L914.307 682.256 L913.747 682.256 L913.188 682.256 L912.629 682.256 L912.07 682.256 L911.51 682.256 L910.951 682.256 L910.392 682.256 L909.833 682.256 L909.273 682.256 L908.714 682.256 L908.155 682.256 L907.596 682.256 L907.036 682.256 L906.477 682.256 L905.918 682.256 L905.359 682.256 L904.799 682.256 L904.24 682.256 L903.681 682.256 L903.122 682.256 L902.562 682.256 L902.003 682.256 L901.444 682.256 L900.885 682.256 L900.325 682.256 L899.766 682.256 L899.207 682.256 L898.648 682.256 L898.088 682.256 L897.529 682.256 L896.97 682.256 L896.411 682.256 L895.851 682.256 L895.292 682.256 L894.733 682.256 L894.174 682.256 L893.614 682.256 L893.055 682.256 L892.496 682.256 L891.937 682.256 L891.377 682.256 L890.818 682.256 L890.259 682.256 L889.7 682.256 L889.14 682.256 L888.581 682.256 L888.022 682.256 L887.463 682.256 L886.903 682.256 L886.344 682.256 L885.785 682.256 L885.226 682.256 L884.666 682.256 L884.107 682.256 L883.548 682.256 L882.989 682.256 L882.429 682.256 L881.87 682.256 L881.311 682.256 L880.752 682.256 L880.192 682.256 L879.633 682.256 L879.074 682.256 L878.515 682.256 L877.955 682.256 L877.396 682.256 L876.837 682.256 L876.278 682.256 L875.718 682.256 L875.159 682.256 L874.6 682.256 L874.041 682.256 L873.481 682.256 L872.922 682.256 L872.363 682.256 L871.804 682.256 L871.244 682.256 L870.685 682.256 L870.126 682.256 L869.567 682.256 L869.007 682.256 L868.448 682.256 L867.889 682.256 L867.33 682.256 L866.77 682.256 L866.211 682.256 L865.652 682.256 L865.093 682.256 L864.533 682.256 L863.974 682.256 L863.415 682.256 L862.856 682.256 L862.296 682.256 L861.737 682.256 L861.178 682.256 L860.619 682.256 L860.059 682.256 L859.5 682.256 L858.941 682.256 L858.382 682.256 L857.822 682.256 L857.263 682.256 L856.704 682.256 L856.145 682.256 L855.585 682.256 L855.026 682.256 L854.467 682.256 L853.908 682.256 L853.348 682.256 L852.789 682.256 L852.23 682.256 L851.671 682.256 L851.111 682.256 L850.552 682.256 L849.993 682.256 L849.434 682.256 L848.874 682.256 L848.315 682.256 L847.756 682.256 L847.197 682.256 L846.637 682.256 L846.078 682.256 L845.519 682.256 L844.96 682.256 L844.4 682.256 L843.841 682.256 L843.282 682.256 L842.723 682.256 L842.163 682.256 L841.604 682.256 L841.045 682.256 L840.486 682.256 L839.926 682.256 L839.367 682.256 L838.808 682.256 L838.249 682.256 L837.689 682.256 L837.13 682.256 L836.571 682.256 L836.012 682.256 L835.452 682.256 L834.893 682.256 L834.334 682.256 L833.775 682.256 L833.215 682.256 L832.656 682.256 L832.097 682.256 L831.538 682.256 L830.978 682.256 L830.419 682.256 L829.86 682.256 L829.301 682.256 L828.741 682.256 L828.182 682.256 L827.623 682.256 L827.064 682.256 L826.504 682.256 L825.945 682.256 L825.386 682.256 L824.827 682.256 L824.267 682.256 L823.708 682.256 L823.149 682.256 L822.59 682.256 L822.03 682.256 L821.471 682.256 L820.912 682.256 L820.353 682.256 L819.793 682.256 L819.234 682.256 L818.675 682.256 L818.116 682.256 L817.556 682.256 L816.997 682.256 L816.438 682.256 L815.879 682.256 L815.319 682.256 L814.76 682.256 L814.201 682.256 L813.642 682.256 L813.082 682.256 L812.523 682.256 L811.964 682.256 L811.405 682.256 L810.845 682.256 L810.286 682.256 L809.727 682.256 L809.168 682.256 L808.608 682.256 L808.049 682.256 L807.49 682.256 L806.931 682.256 L806.371 682.256 L805.812 682.256 L805.253 682.256 L804.693 682.256 L804.134 682.256 L803.575 682.256 L803.016 682.256 L802.456 682.256 L801.897 682.256 L801.338 682.256 L800.779 682.256 L800.219 682.256 L799.66 682.256 L799.101 682.256 L798.542 682.256 L797.982 682.256 L797.423 682.256 L796.864 682.256 L796.305 682.256 L795.745 682.256 L795.186 682.256 L794.627 682.256 L794.068 682.256 L793.508 682.256 L792.949 682.256 L792.39 682.256 L791.831 682.256 L791.271 682.256 L790.712 682.256 L790.153 682.256 L789.594 682.256 L789.034 682.256 L788.475 682.256 L787.916 682.256 L787.357 682.256 L786.797 682.256 L786.238 682.256 L785.679 682.256 L785.12 682.256 L784.56 682.256 L784.001 682.256 L783.442 682.256 L782.883 682.256 L782.323 682.256 L781.764 682.256 L781.205 682.256 L780.646 682.256 L780.086 682.256 L779.527 682.256 L778.968 682.256 L778.409 682.256 L777.849 682.256 L777.29 682.256 L776.731 682.256 L776.172 682.256 L775.612 682.256 L775.053 682.256 L774.494 682.256 L773.935 682.256 L773.375 682.256 L772.816 682.256 L772.257 682.256 L771.698 682.256 L771.138 682.256 L770.579 682.256 L770.02 682.256 L769.461 682.256 L768.901 682.256 L768.342 682.256 L767.783 682.256 L767.224 682.256 L766.664 682.256 L766.105 682.256 L765.546 682.256 L764.987 682.256 L764.427 682.256 L763.868 682.256 L763.309 682.256 L762.75 682.256 L762.19 682.256 L761.631 682.256 L761.072 682.256 L760.513 682.256 L759.953 682.256 L759.394 682.256 L758.835 682.256 L758.276 682.256 L757.716 682.256 L757.157 682.256 L756.598 682.256 L756.039 682.256 L755.479 682.256 L754.92 682.256 L754.361 682.256 L753.802 682.256 L753.242 682.256 L752.683 682.256 L752.124 682.256 L751.565 682.256 L751.005 682.256 L750.446 682.256 L749.887 682.256 L749.328 682.256 L748.768 682.256 L748.209 682.256 L747.65 682.256 L747.091 682.256 L746.531 682.256 L745.972 682.256 L745.413 682.256 L744.854 682.256 L744.294 682.256 L743.735 682.256 L743.176 682.256 L742.617 682.256 L742.057 682.256 L741.498 682.256 L740.939 682.256 L740.38 682.256 L739.82 682.256 L739.261 682.256 L738.702 682.256 L738.143 682.256 L737.583 682.256 L737.024 682.256 L736.465 682.256 L735.906 682.256 L735.346 682.256 L734.787 682.256 L734.228 682.256 L733.669 682.256 L733.109 682.256 L732.55 682.256 L731.991 682.256 L731.432 682.256 L730.872 682.256 L730.313 682.256 L729.754 682.256 L729.195 682.256 L728.635 682.256 L728.076 682.256 L727.517 682.256 L726.958 682.256 L726.398 682.256 L725.839 682.256 L725.28 682.256 L724.721 682.256 L724.161 682.256 L723.602 682.256 L723.043 682.256 L722.484 682.256 L721.924 682.256 L721.365 682.256 L720.806 682.256 L720.247 682.256  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.216 720.806,683.216 721.365,683.216 721.924,683.216 722.484,683.216 723.043,683.216 723.602,683.216 724.161,683.216 724.721,683.216 725.28,683.216 725.839,683.216 726.398,683.216 726.958,683.216 727.517,683.216 728.076,683.216 728.635,683.216 729.195,683.216 729.754,683.216 730.313,683.216 730.872,683.216 731.432,683.216 731.991,683.216 732.55,683.216 733.109,683.216 733.669,683.216 734.228,683.216 734.787,683.216 735.346,683.216 735.906,683.216 736.465,683.216 737.024,683.216 737.583,683.216 738.143,683.216 738.702,683.216 739.261,683.216 739.82,683.216 740.38,683.216 740.939,683.216 741.498,683.216 742.057,683.216 742.617,683.216 743.176,683.216 743.735,683.216 744.294,683.216 744.854,683.216 745.413,683.216 745.972,683.216 746.531,683.216 747.091,683.216 747.65,683.216 748.209,683.216 748.768,683.216 749.328,683.216 749.887,683.216 750.446,683.216 751.005,683.216 751.565,683.216 752.124,683.216 752.683,683.216 753.242,683.216 753.802,683.216 754.361,683.216 754.92,683.216 755.479,683.216 756.039,683.216 756.598,683.216 757.157,683.216 757.716,683.216 758.276,683.216 758.835,683.216 759.394,683.216 759.953,683.216 760.513,683.216 761.072,683.216 761.631,683.216 762.19,683.216 762.75,683.216 763.309,683.216 763.868,683.216 764.427,683.216 764.987,683.216 765.546,683.216 766.105,683.216 766.664,683.216 767.224,683.216 767.783,683.216 768.342,683.216 768.901,683.216 769.461,683.216 770.02,683.216 770.579,683.216 771.138,683.216 771.698,683.216 772.257,683.216 772.816,683.216 773.375,683.216 773.935,683.216 774.494,683.216 775.053,683.216 775.612,683.216 776.172,683.216 776.731,683.216 777.29,683.216 777.849,683.216 778.409,683.216 778.968,683.216 779.527,683.216 780.086,683.216 780.646,683.216 781.205,683.216 781.764,683.216 782.323,683.216 782.883,683.216 783.442,683.216 784.001,683.216 784.56,683.216 785.12,683.216 785.679,683.216 786.238,683.216 786.797,683.216 787.357,683.216 787.916,683.216 788.475,683.216 789.034,683.216 789.594,683.216 790.153,683.216 790.712,683.216 791.271,683.216 791.831,683.216 792.39,683.216 792.949,683.216 793.508,683.216 794.068,683.216 794.627,683.216 795.186,683.216 795.745,683.216 796.305,683.216 796.864,683.216 797.423,683.216 797.982,683.216 798.542,683.216 799.101,683.216 799.66,683.216 800.219,683.216 800.779,683.216 801.338,683.216 801.897,683.216 802.456,683.216 803.016,683.216 803.575,683.216 804.134,683.216 804.693,683.216 805.253,683.216 805.812,683.216 806.371,683.216 806.931,683.216 807.49,683.216 808.049,683.216 808.608,683.216 809.168,683.216 809.727,683.216 810.286,683.216 810.845,683.216 811.405,683.216 811.964,683.216 812.523,683.216 813.082,683.216 813.642,683.216 814.201,683.216 814.76,683.216 815.319,683.216 815.879,683.216 816.438,683.216 816.997,683.216 817.556,683.216 818.116,683.216 818.675,683.216 819.234,683.216 819.793,683.216 820.353,683.216 820.912,683.216 821.471,683.216 822.03,683.216 822.59,683.216 823.149,683.216 823.708,683.216 824.267,683.216 824.827,683.216 825.386,683.216 825.945,683.216 826.504,683.216 827.064,683.216 827.623,683.216 828.182,683.216 828.741,683.216 829.301,683.216 829.86,683.216 830.419,683.216 830.978,683.216 831.538,683.216 832.097,683.216 832.656,683.216 833.215,683.216 833.775,683.216 834.334,683.216 834.893,683.216 835.452,683.216 836.012,683.216 836.571,683.216 837.13,683.216 837.689,683.216 838.249,683.216 838.808,683.216 839.367,683.216 839.926,683.216 840.486,683.216 841.045,683.216 841.604,683.216 842.163,683.216 842.723,683.216 843.282,683.216 843.841,683.216 844.4,683.216 844.96,683.216 845.519,683.216 846.078,683.216 846.637,683.216 847.197,683.216 847.756,683.216 848.315,683.216 848.874,683.216 849.434,683.216 849.993,683.216 850.552,683.216 851.111,683.216 851.671,683.216 852.23,683.216 852.789,683.216 853.348,683.216 853.908,683.216 854.467,683.216 855.026,683.216 855.585,683.216 856.145,683.216 856.704,683.216 857.263,683.216 857.822,683.216 858.382,683.216 858.941,683.216 859.5,683.216 860.059,683.216 860.619,683.216 861.178,683.216 861.737,683.216 862.296,683.216 862.856,683.216 863.415,683.216 863.974,683.216 864.533,683.216 865.093,683.216 865.652,683.216 866.211,683.216 866.77,683.216 867.33,683.216 867.889,683.216 868.448,683.216 869.007,683.216 869.567,683.216 870.126,683.216 870.685,683.216 871.244,683.216 871.804,683.216 872.363,683.216 872.922,683.216 873.481,683.216 874.041,683.216 874.6,683.216 875.159,683.216 875.718,683.216 876.278,683.216 876.837,683.216 877.396,683.216 877.955,683.216 878.515,683.216 879.074,683.216 879.633,683.216 880.192,683.216 880.752,683.216 881.311,683.216 881.87,683.216 882.429,683.216 882.989,683.216 883.548,683.216 884.107,683.216 884.666,683.216 885.226,683.216 885.785,683.216 886.344,683.216 886.903,683.216 887.463,683.216 888.022,683.216 888.581,683.216 889.14,683.216 889.7,683.216 890.259,683.216 890.818,683.216 891.377,683.216 891.937,683.216 892.496,683.216 893.055,683.216 893.614,683.216 894.174,683.216 894.733,683.216 895.292,683.216 895.851,683.216 896.411,683.216 896.97,683.216 897.529,683.216 898.088,683.216 898.648,683.216 899.207,683.216 899.766,683.216 900.325,683.216 900.885,683.216 901.444,683.216 902.003,683.216 902.562,683.216 903.122,683.216 903.681,683.216 904.24,683.216 904.799,683.216 905.359,683.216 905.918,683.216 906.477,683.216 907.036,683.216 907.596,683.216 908.155,683.216 908.714,683.216 909.273,683.216 909.833,683.216 910.392,683.216 910.951,683.216 911.51,683.216 912.07,683.216 912.629,683.216 913.188,683.216 913.747,683.216 914.307,683.216 914.866,683.216 915.425,683.216 915.984,683.216 916.544,683.216 917.103,683.216 917.662,683.216 918.221,683.216 918.781,683.216 919.34,683.216 919.899,683.216 920.458,683.216 921.018,683.216 921.577,683.216 922.136,683.216 922.695,683.216 923.255,683.216 923.814,683.216 924.373,683.216 924.932,683.216 925.492,683.216 926.051,683.216 926.61,683.216 927.169,683.216 927.729,683.216 928.288,683.216 928.847,683.216 929.406,683.216 929.966,683.216 930.525,683.216 931.084,683.216 931.644,683.216 932.203,683.216 932.762,683.216 933.321,683.216 933.881,683.216 934.44,683.216 934.999,683.216 935.558,683.216 936.118,683.216 936.677,683.216 937.236,683.216 937.795,683.216 938.355,683.216 938.914,683.216 939.473,683.216 940.032,683.216 940.592,683.216 941.151,683.216 941.71,683.216 942.269,683.216 942.829,683.216 943.388,683.216 943.947,683.216 944.506,683.216 945.066,683.216 945.625,683.216 946.184,683.216 946.743,683.216 947.303,683.216 947.862,683.216 948.421,683.216 948.98,683.216 949.54,683.216 950.099,683.216 950.658,683.216 951.217,683.216 951.777,683.216 952.336,683.216 952.895,683.216 953.454,683.216 954.014,683.216 954.573,683.216 955.132,683.216 955.691,683.216 956.251,683.216 956.81,683.216 957.369,683.216 957.928,683.216 958.488,683.216 959.047,683.216 959.606,683.216 960.165,683.216 960.725,683.216 961.284,683.216 961.843,683.216 962.402,683.216 962.962,683.216 963.521,683.216 964.08,683.216 964.639,683.216 965.199,683.216 965.758,683.216 966.317,683.216 966.876,683.216 967.436,683.216 967.995,683.216 968.554,683.216 969.113,683.216 969.673,683.216 970.232,683.216 970.791,683.216 971.35,683.216 971.91,683.216 972.469,683.216 973.028,683.216 973.587,683.216 974.147,683.216 974.706,683.216 975.265,683.216 975.824,683.216 976.384,683.216 976.943,683.216 977.502,683.216 978.061,683.216 978.621,683.216 979.18,683.216 979.739,683.216 980.298,683.216 980.858,683.216 981.417,683.216 981.976,683.216 982.535,683.216 983.095,683.216 983.654,683.216 984.213,683.216 984.772,683.216 985.332,683.216 985.891,683.216 986.45,683.216 987.009,683.216 987.569,683.216 988.128,683.216 988.687,683.216 989.246,683.216 989.806,683.216 990.365,683.216 990.924,683.216 991.483,683.216 992.043,683.216 992.602,683.216 993.161,683.216 993.72,683.216 994.28,683.216 994.839,683.216 995.398,683.216 995.957,683.216 996.517,683.216 997.076,683.216 997.635,683.216 998.194,683.216 998.754,683.216 999.313,683.216 999.872,683.216 1000.43,683.216 1000.99,683.216 1001.55,683.216 1002.11,683.216 1002.67,683.216 1003.23,683.216 1003.79,683.216 1004.35,683.216 1004.91,683.216 1005.46,683.216 1006.02,683.216 1006.58,683.216 1007.14,683.216 1007.7,683.216 1008.26,683.216 1008.82,683.216 1009.38,683.216 1009.94,683.216 1010.5,683.216 1011.06,683.216 1011.62,683.216 1012.18,683.216 1012.73,683.216 1013.29,683.216 1013.85,683.216 1014.41,683.216 1014.97,683.216 1015.53,683.216 1016.09,683.216 1016.65,683.216 1017.21,683.216 1017.77,683.216 1018.33,683.216 1018.89,683.216 1019.45,683.216 1020.01,683.216 1020.56,683.216 1021.12,683.216 1021.68,683.216 1022.24,683.216 1022.8,683.216 1023.36,683.216 1023.92,683.216 1024.48,683.216 1025.04,683.216 1025.6,683.216 1026.16,683.216 1026.72,683.216 1027.28,683.216 1027.83,683.216 1028.39,683.216 1028.95,683.216 1029.51,683.216 1030.07,683.216 1030.63,683.216 1031.19,683.216 1031.75,683.216 1032.31,683.216 1032.87,683.216 1033.43,683.216 1033.99,683.216 1034.55,683.216 1035.1,683.216 1035.66,683.216 1036.22,683.216 1036.78,683.216 1037.34,683.216 1037.9,683.216 1038.46,683.216 1039.02,683.216 1039.58,683.216 1040.14,683.216 1040.7,683.216 1041.26,683.216 1041.82,683.216 1042.38,683.216 1042.93,683.216 1043.49,683.216 1044.05,683.216 1044.61,683.216 1045.17,683.216 1045.73,683.216 1046.29,683.216 1046.85,683.216 1047.41,683.216 1047.97,683.216 1048.53,683.216 1049.09,683.216 1049.65,683.216 1050.2,683.216 1050.76,683.216 1051.32,683.216 1051.88,683.216 1052.44,683.216 1053,683.216 1053.56,683.216 1054.12,683.216 1054.68,683.216 1055.24,683.216 1055.8,683.216 1056.36,683.216 1056.92,683.216 1057.48,683.216 1058.03,683.216 1058.59,683.216 1059.15,683.216 1059.71,683.216 1060.27,683.216 1060.83,683.216 1061.39,683.216 1061.95,683.216 1062.51,683.216 1063.07,683.216 1063.63,683.216 1064.19,683.216 1064.75,683.216 1065.3,683.216 1065.86,683.216 1066.42,683.216 1066.98,683.216 1067.54,683.216 1068.1,683.216 1068.66,683.216 1069.22,683.216 1069.78,683.216 1070.34,683.216 1070.9,683.216 1071.46,683.216 1072.02,683.216 1072.57,683.216 1073.13,683.216 1073.69,683.216 1074.25,683.216 1074.81,683.216 1075.37,683.216 1075.93,683.216 1076.49,683.216 1077.05,683.216 1077.61,683.216 1078.17,683.216 1078.73,683.216 1079.29,683.216 1079.85,683.216 1080.4,683.216 1080.96,683.216 1081.52,683.216 1082.08,683.216 1082.64,683.216 1083.2,683.216 1083.76,683.216 1084.32,683.216 1084.88,683.216 1085.44,683.216 1086,683.216 1086.56,683.216 1087.12,683.216 1087.67,683.216 1088.23,683.216 1088.79,683.216 1089.35,683.216 1089.91,683.216 1090.47,683.216 1091.03,683.216 1091.59,683.216 1092.15,683.216 1092.71,683.216 1093.27,683.216 1093.83,683.216 1094.39,683.216 1094.94,683.216 1095.5,683.216 1096.06,683.216 1096.62,683.216 1097.18,683.216 1097.74,683.216 1098.3,683.216 1098.86,683.216 1099.42,683.216 1099.98,683.216 1100.54,683.216 1101.1,683.216 1101.66,683.216 1102.22,683.216 1102.77,683.216 1103.33,683.216 1103.89,683.216 1104.45,683.216 1105.01,683.216 1105.57,683.216 1106.13,683.216 1106.69,683.216 1107.25,683.216 1107.81,683.216 1108.37,683.216 1108.93,683.216 1109.49,683.216 1110.04,683.216 1110.6,683.216 1111.16,683.216 1111.72,683.216 1112.28,683.216 1112.84,683.216 1113.4,683.216 1113.96,683.216 1114.52,683.216 1115.08,683.216 1115.64,683.216 1116.2,683.216 1116.76,683.216 1117.31,683.216 1117.87,683.216 1118.43,683.216 1118.99,683.216 1119.55,683.216 1120.11,683.216 1120.67,683.216 1121.23,683.216 1121.79,683.216 1122.35,683.216 1122.91,683.216 1123.47,683.216 1124.03,683.216 1124.59,683.216 1125.14,683.216 1125.7,683.216 1126.26,683.216 1126.82,683.216 1127.38,683.216 1127.94,683.216 1128.5,683.216 1129.06,683.216 1129.62,683.216 1130.18,683.216 1130.74,683.216 1131.3,683.216 1131.86,683.216 1132.41,683.216 1132.97,683.216 1133.53,683.216 1134.09,683.216 1134.65,683.216 1135.21,683.216 1135.77,683.216 1136.33,683.216 1136.89,683.216 1137.45,683.216 1138.01,683.216 1138.57,683.216 1139.13,683.216 1139.68,683.216 1140.24,683.216 1140.8,683.216 1141.36,683.216 1141.92,683.216 1142.48,683.216 1143.04,683.216 1143.6,683.216 1144.16,683.216 1144.72,683.216 1145.28,683.216 1145.84,683.216 1146.4,683.216 1146.96,683.216 1147.51,683.216 1148.07,683.216 1148.63,683.216 1149.19,683.216 1149.75,683.216 1150.31,683.216 1150.87,683.216 1151.43,683.216 1151.99,683.216 1152.55,683.216 1153.11,683.216 1153.67,683.216 1154.23,683.216 1154.78,683.216 1155.34,683.216 1155.9,683.216 1156.46,683.216 1157.02,683.216 1157.58,683.216 1158.14,683.216 1158.7,683.216 1159.26,683.216 1159.82,683.216 1160.38,683.216 1160.94,683.216 1161.5,683.216 1162.05,683.216 1162.61,683.216 1163.17,683.216 1163.73,683.216 1164.29,683.216 1164.85,683.216 1165.41,683.216 1165.97,683.216 1166.53,683.216 1167.09,683.216 1167.65,683.216 1168.21,683.216 1168.77,683.216 1169.33,683.216 1169.88,683.216 1170.44,683.216 1171,683.216 1171.56,683.216 1172.12,683.216 1172.68,683.216 1173.24,683.216 1173.8,683.216 1174.36,683.216 1174.92,683.216 1175.48,683.216 1176.04,683.216 1176.6,683.216 1177.15,683.216 1177.71,683.216 1178.27,683.216 1178.83,683.216 1179.39,683.216 1179.95,683.216 1180.51,683.216 1181.07,683.216 1181.63,683.216 1182.19,683.216 1182.75,683.216 1183.31,683.216 1183.87,683.216 1184.43,683.216 1184.98,683.216 1185.54,683.216 1186.1,683.216 1186.66,683.216 1187.22,683.216 1187.78,683.216 1188.34,683.216 1188.9,683.216 1189.46,683.216 1190.02,683.216 1190.58,683.216 1191.14,683.216 1191.7,683.216 1192.25,683.216 1192.81,683.216 1193.37,683.216 1193.93,683.216 1194.49,683.216 1195.05,683.216 1195.61,683.216 1196.17,683.216 1196.73,683.216 1197.29,683.216 1197.85,683.216 1198.41,683.216 1198.97,683.216 1199.52,683.216 1200.08,683.216 1200.64,683.216 1201.2,683.216 1201.76,683.216 1202.32,683.216 1202.88,683.216 1203.44,683.216 1204,683.216 1204.56,683.216 1205.12,683.216 1205.68,683.216 1206.24,683.216 1206.8,683.216 1207.35,683.216 1207.91,683.216 1208.47,683.216 1209.03,683.216 1209.59,683.216 1210.15,683.216 1210.71,683.216 1211.27,683.216 1211.83,683.216 1212.39,683.216 1212.95,683.216 1213.51,683.216 1214.07,683.216 1214.62,683.216 1215.18,683.216 1215.74,683.216 1216.3,683.216 1216.86,683.216 1217.42,683.216 1217.98,683.216 1218.54,683.216 1219.1,683.216 1219.66,683.216 1220.22,683.216 1220.78,683.216 1221.34,683.216 1221.89,683.216 1222.45,683.216 1223.01,683.216 1223.57,683.216 1224.13,683.216 1224.69,683.216 1225.25,683.216 1225.81,683.216 1226.37,683.216 1226.93,683.216 1227.49,683.216 1228.05,683.216 1228.61,683.216 1229.17,683.216 1229.72,683.216 1230.28,683.216 1230.84,683.216 1231.4,683.216 1231.96,683.216 1232.52,683.216 1233.08,683.216 1233.64,683.216 1234.2,683.216 1234.76,683.216 1235.32,683.216 1235.88,683.216 1236.44,683.216 1236.99,683.216 1237.55,683.216 1238.11,683.216 1238.67,683.216 1239.23,683.216 1239.79,683.216 1240.35,683.216 1240.91,683.216 1241.47,683.216 1242.03,683.216 1242.59,683.216 1243.15,683.216 1243.71,683.216 1244.26,683.216 1244.82,683.216 1245.38,683.216 1245.94,683.216 1246.5,683.216 1247.06,683.216 1247.62,683.216 1248.18,683.216 1248.74,683.216 1249.3,683.216 1249.86,683.216 1250.42,683.216 1250.98,683.216 1251.54,683.216 1252.09,683.216 1252.65,683.216 1253.21,683.216 1253.77,683.216 1254.33,683.216 1254.89,683.216 1255.45,683.216 1256.01,683.216 1256.57,683.216 1257.13,683.216 1257.69,683.216 1258.25,683.216 1258.81,683.216 1259.36,683.216 1259.92,683.216 1260.48,683.216 1261.04,683.216 1261.6,683.216 1262.16,683.216 1262.72,683.216 1263.28,683.216 1263.84,683.216 1264.4,683.216 1264.96,683.216 1265.52,683.216 1266.08,683.216 1266.63,683.216 1267.19,683.216 1267.75,683.216 1268.31,683.216 1268.87,683.216 1269.43,683.216 1269.99,683.216 1270.55,683.216 1271.11,683.216 1271.67,683.216 1272.23,683.216 1272.79,683.216 1273.35,683.216 1273.91,683.216 1274.46,683.216 1275.02,683.216 1275.58,683.216 1276.14,683.216 1276.7,683.216 1277.26,683.216 1277.82,683.216 1278.38,683.216 1278.94,683.216 1279.5,683.216 1280.06,683.216 1280.62,683.216 1281.18,683.216 1281.73,683.216 1282.29,683.216 1282.85,683.216 1283.41,683.216 1283.97,683.216 1284.53,683.216 1285.09,683.216 1285.65,683.216 1286.21,683.216 1286.77,683.216 1287.33,683.216 1287.89,683.216 1288.45,683.216 1289,683.216 1289.56,683.216 1290.12,683.216 1290.68,683.216 1291.24,683.216 1291.8,683.216 1292.36,683.216 1292.92,683.216 1293.48,683.216 1294.04,683.216 1294.6,683.216 1295.16,683.216 1295.72,683.216 1296.28,683.216 1296.83,683.216 1297.39,683.216 1297.95,683.216 1298.51,683.216 1299.07,683.216 1299.63,683.216 1300.19,683.216 1300.75,683.216 1301.31,683.216 1301.87,683.216 1302.43,683.216 1302.99,683.216 1303.55,683.216 1304.1,683.216 1304.66,683.216 1305.22,683.216 1305.78,683.216 1306.34,683.216 1306.9,683.216 1307.46,683.216 1308.02,683.216 1308.58,683.216 1309.14,683.216 1309.7,683.216 1310.26,683.216 1310.82,683.216 1311.38,683.216 1311.93,683.216 1312.49,683.216 1313.05,683.216 1313.61,683.216 1314.17,683.216 1314.73,683.216 1315.29,683.216 1315.85,683.216 1316.41,683.216 1316.97,683.216 1317.53,683.216 1318.09,683.216 1318.65,683.216 1319.2,683.216 1319.76,683.216 1320.32,683.216 1320.88,683.216 1321.44,683.216 1322,683.216 1322.56,683.216 1323.12,683.216 1323.68,683.216 1324.24,683.216 1324.8,683.216 1325.36,683.216 1325.92,683.216 1326.47,683.216 1327.03,683.216 1327.59,683.216 1328.15,683.216 1328.71,683.216 1329.27,683.216 1329.83,683.216 1330.39,683.216 1330.95,683.216 1331.51,683.216 1332.07,683.216 1332.63,683.216 1333.19,683.216 1333.75,683.216 1334.3,683.216 1334.86,683.216 1335.42,683.216 1335.98,683.216 1336.54,683.216 1337.1,683.216 1337.66,683.216 1338.22,683.216 1338.78,683.216 1339.34,683.216 1339.9,683.216 1340.46,683.216 1341.02,683.216 1341.57,683.216 1342.13,683.216 1342.69,683.216 1343.25,683.216 1343.81,683.216 1344.37,683.216 1344.93,683.216 1345.49,683.216 1346.05,683.216 1346.61,683.216 1347.17,683.216 1347.73,683.216 1348.29,683.216 1348.84,683.216 1349.4,683.216 1349.96,683.216 1350.52,683.216 1351.08,683.216 1351.64,683.216 1352.2,683.216 1352.76,683.216 1353.32,683.216 1353.88,683.216 1354.44,683.216 1355,683.216 1355.56,683.216 1356.12,683.216 1356.67,683.216 1357.23,683.216 1357.79,683.216 1358.35,683.216 1358.91,683.216 1359.47,683.216 1360.03,683.216 1360.59,683.216 1361.15,683.216 1361.71,683.216 1362.27,683.216 1362.83,683.216 1363.39,683.216 1363.94,683.216 1364.5,683.216 1365.06,683.216 1365.62,683.216 1366.18,683.216 1366.74,683.216 1367.3,683.216 1367.86,683.216 1368.42,683.216 1368.98,683.216 1369.54,683.216 1370.1,683.216 1370.66,683.216 1371.21,683.216 1371.77,683.216 1372.33,683.216 1372.89,683.216 1373.45,683.216 1374.01,683.216 1374.57,683.216 1375.13,683.216 1375.69,683.216 1376.25,683.216 1376.81,683.216 1377.37,683.216 1377.93,683.216 1378.49,683.216 1379.04,683.216 1379.6,683.216 1380.16,683.216 1380.72,683.216 1381.28,683.216 1381.84,683.216 1382.4,683.216 1382.96,683.216 1383.52,683.216 1384.08,683.216 1384.64,683.216 1385.2,683.216 1385.76,683.216 1386.31,683.216 1386.87,683.216 1387.43,683.216 1387.99,683.216 1388.55,683.216 1389.11,683.216 1389.67,683.216 1390.23,683.216 1390.79,683.216 1391.35,683.216 1391.91,683.216 1392.47,683.216 1393.03,683.216 1393.58,683.216 1394.14,683.216 1394.7,683.216 1395.26,683.216 1395.82,683.216 1396.38,683.216 1396.94,683.216 1397.5,683.216 1398.06,683.216 1398.62,683.216 1399.18,683.216 1399.74,683.216 1400.3,683.216 1400.86,683.216 1401.41,683.216 1401.97,683.216 1402.53,683.216 1403.09,683.216 1403.65,683.216 1404.21,683.216 1404.77,683.216 1405.33,683.216 1405.89,683.216 1406.45,683.216 1407.01,683.216 1407.57,683.216 1408.13,683.216 1408.68,683.216 1409.24,683.216 1409.8,683.216 1410.36,683.216 1410.92,683.216 1411.48,683.216 1412.04,683.216 1412.6,683.216 1413.16,683.216 1413.72,683.216 1414.28,683.216 1414.84,683.216 1415.4,683.216 1415.95,683.216 1416.51,683.216 1417.07,683.216 1417.63,683.216 1418.19,683.216 1418.75,683.216 1419.31,683.216 1419.87,683.216 1420.43,683.216 1420.99,683.216 1421.55,683.216 1422.11,683.216 1422.67,683.216 1423.23,683.216 1423.78,683.216 1424.34,683.216 1424.9,683.216 1425.46,683.216 1426.02,683.216 1426.58,683.216 1427.14,683.216 1427.7,683.216 1428.26,683.216 1428.82,683.216 1429.38,683.216 1429.94,683.216 1430.5,683.216 1431.05,683.216 1431.61,683.216 1432.17,683.216 1432.73,683.216 1433.29,683.216 1433.85,683.216 1434.41,683.216 1434.97,683.216 1435.53,683.216 1436.09,683.216 1436.65,683.216 1437.21,683.216 1437.77,683.216 1438.33,683.216 1438.88,683.216 1439.44,683.216 1440,683.216 1440.56,683.216 1441.12,683.216 1441.68,683.216 1442.24,683.216 1442.8,683.216 1443.36,683.216 1443.92,683.216 1444.48,683.216 1445.04,683.216 1445.6,683.216 1446.15,683.216 1446.71,683.216 1447.27,683.216 1447.83,683.216 1448.39,683.216 1448.95,683.216 1449.51,683.216 1450.07,683.216 1450.63,683.216 1451.19,683.216 1451.75,683.216 1452.31,683.216 1452.87,683.216 1453.42,683.216 1453.98,683.216 1454.54,683.216 1455.1,683.216 1455.66,683.216 1456.22,683.216 1456.78,683.216 1457.34,683.216 1457.9,683.216 1458.46,683.216 1459.02,683.216 1459.58,683.216 1460.14,683.216 1460.7,683.216 1461.25,683.216 1461.81,683.216 1462.37,683.216 1462.93,683.216 1463.49,683.216 1464.05,683.216 1464.61,683.216 1465.17,683.216 1465.73,683.216 1466.29,683.216 1466.85,683.216 1467.41,683.216 1467.97,683.216 1468.52,683.216 1469.08,683.216 1469.64,683.216 1470.2,683.216 1470.76,683.216 1471.32,683.216 1471.88,683.216 1472.44,683.216 1473,683.216 1473.56,683.216 1474.12,683.216 1474.68,683.216 1475.24,683.216 1475.79,683.216 1476.35,683.216 1476.91,683.216 1477.47,683.216 1478.03,683.216 1478.59,683.216 1479.15,683.216 1479.71,683.216 1480.27,683.216 1480.83,683.216 1481.39,683.216 1481.95,683.216 1482.51,683.216 1483.07,683.216 1483.62,683.216 1484.18,683.216 1484.74,683.216 1485.3,683.216 1485.86,683.216 1486.42,683.216 1486.98,683.216 1487.54,683.216 1488.1,683.216 1488.66,683.216 1489.22,683.216 1489.78,683.216 1490.34,683.216 1490.89,683.216 1491.45,683.216 1492.01,683.216 1492.57,683.216 1493.13,683.216 1493.69,683.216 1494.25,683.216 1494.81,683.216 1495.37,683.216 1495.93,683.216 1496.49,683.216 1497.05,683.216 1497.61,683.216 1498.16,683.216 1498.72,683.216 1499.28,683.216 1499.84,683.216 1500.4,683.216 1500.96,683.216 1501.52,683.216 1502.08,683.216 1502.64,683.216 1503.2,683.216 1503.76,683.216 1504.32,683.216 1504.88,683.216 1505.44,683.216 1505.99,683.216 1506.55,683.216 1507.11,683.216 1507.67,683.216 1508.23,683.216 1508.79,683.216 1509.35,683.216 1509.91,683.216 1510.47,683.216 1511.03,683.216 1511.59,683.216 1512.15,683.216 1512.71,683.216 1513.26,683.216 1513.82,683.216 1514.38,683.216 1514.94,683.216 1515.5,683.216 1516.06,683.216 1516.62,683.216 1517.18,683.216 1517.74,683.216 1518.3,683.216 1518.86,683.216 1519.42,683.216 1519.98,683.216 1520.53,683.216 1521.09,683.216 1521.65,683.216 1522.21,683.216 1522.77,683.216 1523.33,683.216 1523.89,683.216 1524.45,683.216 1525.01,683.216 1525.57,683.216 1526.13,683.216 1526.69,683.216 1527.25,683.216 1527.81,683.216 1528.36,683.216 1528.92,683.216 1529.48,683.216 1530.04,683.216 1530.6,683.216 1531.16,683.216 1531.72,683.216 1532.28,683.216 1532.84,683.216 1533.4,683.216 1533.96,683.216 1534.52,683.216 1535.08,683.216 1535.63,683.216 1536.19,683.216 1536.75,683.216 1537.31,683.216 1537.87,683.216 1538.43,683.216 1538.99,683.216 1539.55,683.216 1540.11,683.216 1540.67,683.216 1541.23,683.216 1541.79,683.216 1542.35,683.216 1542.9,683.216 1543.46,683.216 1544.02,683.216 1544.58,683.216 1545.14,683.216 1545.7,683.216 1546.26,683.216 1546.82,683.216 1547.38,683.216 1547.94,683.216 1548.5,683.216 1549.06,683.216 1549.62,683.216 1550.18,683.216 1550.73,683.216 1551.29,683.216 1551.85,683.216 1552.41,683.216 1552.97,683.216 1553.53,683.216 1554.09,683.216 1554.65,683.216 1555.21,683.216 1555.77,683.216 1556.33,683.216 1556.89,683.216 1557.45,683.216 1558,683.216 1558.56,683.216 1559.12,683.216 1559.68,683.216 1560.24,683.216 1560.8,683.216 1561.36,683.216 1561.92,683.216 1562.48,683.216 1563.04,683.216 1563.6,683.216 1564.16,683.216 1564.72,683.216 1565.28,683.216 1565.83,683.216 1566.39,683.216 1566.95,683.216 1567.51,683.216 1568.07,683.216 1568.63,683.216 1569.19,683.216 1569.75,683.216 1570.31,683.216 1570.87,683.216 1571.43,683.216 1571.99,683.216 1572.55,683.216 1573.1,683.216 1573.66,683.216 1574.22,683.216 1574.78,683.216 1575.34,683.216 1575.9,683.216 1576.46,683.216 1577.02,683.216 1577.58,683.216 1578.14,683.216 1578.7,683.216 1579.26,683.216 1579.82,683.216 1580.37,683.216 1580.93,683.216 1581.49,683.216 1582.05,683.216 1582.61,683.216 1583.17,683.216 1583.73,683.216 1584.29,683.216 1584.85,683.216 1585.41,683.216 1585.97,683.216 1586.53,683.216 1587.09,683.216 1587.65,683.216 1588.2,683.216 1588.76,683.216 1589.32,683.216 1589.88,683.216 1590.44,683.216 1591,683.216 1591.56,683.216 1592.12,683.216 1592.68,683.216 1593.24,683.216 1593.8,683.216 1594.36,683.216 1594.92,683.216 1595.47,683.216 1596.03,683.216 1596.59,683.216 1597.15,683.216 1597.71,683.216 1598.27,683.216 1598.83,683.216 1599.39,683.216 1599.95,683.216 1600.51,683.216 1601.07,683.216 1601.63,683.216 1602.19,683.216 1602.74,683.216 1603.3,683.216 1603.86,683.216 1604.42,683.216 1604.98,683.216 1605.54,683.216 1606.1,683.216 1606.66,683.216 1607.22,683.216 1607.78,683.216 1608.34,683.216 1608.9,683.216 1609.46,683.216 1610.02,683.216 1610.57,683.216 1611.13,683.216 1611.69,683.216 1612.25,683.216 1612.81,683.216 1613.37,683.216 1613.93,683.216 1614.49,683.216 1615.05,683.216 1615.61,683.216 1616.17,683.216 1616.73,683.216 1617.29,683.216 1617.84,683.216 1618.4,683.216 1618.96,683.216 1619.52,683.216 1620.08,683.216 1620.64,683.216 1621.2,683.216 1621.76,683.216 1622.32,683.216 1622.88,683.216 1623.44,683.216 1624,683.216 1624.56,683.216 1625.11,683.216 1625.67,683.216 1626.23,683.216 1626.79,683.216 1627.35,683.216 1627.91,683.216 1628.47,683.216 1629.03,683.216 1629.59,683.216 1630.15,683.216 1630.71,683.216 1631.27,683.216 1631.83,683.216 1632.39,683.216 1632.94,683.216 1633.5,683.216 1634.06,683.216 1634.62,683.216 1635.18,683.216 1635.74,683.216 1636.3,683.216 1636.86,683.216 1637.42,683.216 1637.98,683.216 1638.54,683.216 1639.1,683.216 1639.66,683.216 1640.21,683.216 1640.77,683.216 1641.33,683.216 1641.89,683.216 1642.45,683.216 1643.01,683.216 1643.57,683.216 1644.13,683.216 1644.69,683.216 1645.25,683.216 1645.81,683.216 1646.37,683.216 1646.93,683.216 1647.48,683.216 1648.04,683.216 1648.6,683.216 1649.16,683.216 1649.72,683.216 1650.28,683.216 1650.84,683.216 1651.4,683.216 1651.96,683.216 1652.52,683.216 1653.08,683.216 1653.64,683.216 1654.2,683.216 1654.76,683.216 1655.31,683.216 1655.87,683.216 1656.43,683.216 1656.99,683.216 1657.55,683.216 1658.11,683.216 1658.67,683.216 1659.23,683.216 1659.79,683.216 1660.35,683.216 1660.91,683.216 1661.47,683.216 1662.03,683.216 1662.58,683.216 1663.14,683.216 1663.7,683.216 1664.26,683.216 1664.82,683.216 1665.38,683.216 1665.94,683.216 1666.5,683.216 1667.06,683.216 1667.62,683.216 1668.18,683.216 1668.74,683.216 1669.3,683.216 1669.85,683.216 1670.41,683.216 1670.97,683.216 1671.53,683.216 1672.09,683.216 1672.65,683.216 1673.21,683.216 1673.77,683.216 1674.33,683.216 1674.89,683.216 1675.45,683.216 1676.01,683.216 1676.57,683.216 1677.13,683.216 1677.68,683.216 1678.24,683.216 1678.8,683.216 1679.36,683.216 1679.92,683.216 1680.48,683.216 1681.04,683.216 1681.6,683.216 1682.16,683.216 1682.72,683.216 1683.28,683.216 1683.84,683.216 1684.4,683.216 1684.95,683.216 1685.51,683.216 1686.07,683.216 1686.63,683.216 1687.19,683.216 1687.75,683.216 1688.31,683.216 1688.87,683.216 1689.43,683.216 1689.99,683.216 1690.55,683.216 1691.11,683.216 1691.67,683.216 1692.23,683.216 1692.78,683.216 1693.34,683.216 1693.9,683.216 1694.46,683.216 1695.02,683.216 1695.58,683.216 1696.14,683.216 1696.7,683.216 1697.26,683.216 1697.82,683.216 1698.38,683.216 1698.94,683.216 1699.5,683.216 1700.05,683.216 1700.61,683.216 1701.17,683.216 1701.73,683.216 1702.29,683.216 1702.85,683.216 1703.41,683.216 1703.97,683.216 1704.53,683.216 1705.09,683.216 1705.65,683.216 1706.21,683.216 1706.77,683.216 1707.32,683.216 1707.88,683.216 1708.44,683.216 1709,683.216 1709.56,683.216 1710.12,683.216 1710.68,683.216 1711.24,683.216 1711.8,683.216 1712.36,683.216 1712.92,683.216 1713.48,683.216 1714.04,683.216 1714.6,683.216 1715.15,683.216 1715.71,683.216 1716.27,683.216 1716.83,683.216 1717.39,683.216 1717.95,683.216 1718.51,683.216 1719.07,683.216 1719.63,683.216 1720.19,683.216 1720.75,683.216 1721.31,683.216 1721.87,683.216 1722.42,683.216 1722.98,683.216 1723.54,683.216 1724.1,683.216 1724.66,683.216 1725.22,683.216 1725.78,683.216 1726.34,683.216 1726.9,683.216 1727.46,683.216 1728.02,683.216 1728.58,683.216 1729.14,683.216 1729.69,683.216 1730.25,683.216 1730.81,683.216 1731.37,683.216 1731.93,683.216 1732.49,683.216 1733.05,683.216 1733.61,683.216 1734.17,683.216 1734.73,683.216 1735.29,683.216 1735.85,683.216 1736.41,683.216 1736.97,683.216 1737.52,683.216 1738.08,683.216 1738.64,683.216 1739.2,683.216 1739.76,683.216 1740.32,683.216 1740.88,683.216 1741.44,683.216 1742,683.216 1742.56,683.216 1743.12,683.216 1743.68,683.216 1744.24,683.216 1744.79,683.216 1745.35,683.216 1745.91,683.216 1746.47,683.216 1747.03,683.216 1747.59,683.216 1748.15,683.216 1748.71,683.216 1749.27,683.216 1749.83,683.216 1750.39,683.216 1750.95,683.216 1751.51,683.216 1752.06,683.216 1752.62,683.216 1753.18,683.216 1753.74,683.216 1754.3,683.216 1754.86,683.216 1755.42,683.216 1755.98,683.216 1756.54,683.216 1757.1,683.216 1757.66,683.216 1758.22,683.216 1758.78,683.216 1759.34,683.216 1759.89,683.216 1760.45,683.216 1761.01,683.216 1761.57,683.216 1762.13,683.216 1762.69,683.216 1763.25,683.216 1763.81,683.216 1764.37,683.216 1764.93,683.216 1765.49,683.216 1766.05,683.216 1766.61,683.216 1767.16,683.216 1767.72,683.216 1768.28,683.216 1768.84,683.216 1769.4,683.216 1769.96,683.216 1770.52,683.216 1771.08,683.216 1771.64,683.216 1772.2,683.216 1772.76,683.216 1773.32,683.216 1773.88,683.216 1774.43,683.216 1774.99,683.216 1775.55,683.216 1776.11,683.216 1776.67,683.216 1777.23,683.216 1777.79,683.216 1778.35,683.216 1778.91,683.216 1779.47,683.216 1780.03,683.216 1780.59,683.216 1781.15,683.216 1781.71,683.216 1782.26,683.216 1782.82,683.216 1783.38,683.216 1783.94,683.216 1784.5,683.216 1785.06,683.216 1785.62,683.216 1786.18,683.216 1786.74,683.216 1787.3,683.216 1787.86,683.216 1788.42,683.216 1788.98,683.216 1789.53,683.216 1790.09,683.216 1790.65,683.216 1791.21,683.216 1791.77,683.216 1792.33,683.216 1792.89,683.216 1793.45,683.216 1794.01,683.216 1794.57,683.216 1795.13,683.216 1795.69,683.216 1796.25,683.216 1796.8,683.216 1797.36,683.216 1797.92,683.216 1798.48,683.216 1799.04,683.216 1799.6,683.216 1800.16,683.216 1800.72,683.216 1801.28,683.216 1801.84,683.216 1802.4,683.216 1802.96,683.216 1803.52,683.216 1804.08,683.216 1804.63,683.216 1805.19,683.216 1805.75,683.216 1806.31,683.216 1806.87,683.216 1807.43,683.216 1807.99,683.216 1808.55,683.216 1809.11,683.216 1809.67,683.216 1810.23,683.216 1810.79,683.216 1811.35,683.216 1811.9,683.216 1812.46,683.216 1813.02,683.216 1813.58,683.216 1814.14,683.216 1814.7,683.216 1815.26,683.216 1815.82,683.216 1816.38,683.216 1816.94,683.216 1817.5,683.216 1818.06,683.216 1818.62,683.216 1819.18,683.216 1819.73,683.216 1820.29,683.216 1820.85,683.216 1821.41,683.216 1821.97,683.216 1822.53,683.216 1823.09,683.216 1823.65,683.216 1824.21,683.216 1824.77,683.216 1825.33,683.216 1825.89,683.216 1826.45,683.216 1827,683.216 1827.56,683.216 1828.12,683.216 1828.68,683.216 1829.24,683.216 1829.8,683.216 1830.36,683.216 1830.92,683.216 1831.48,683.216 1832.04,683.216 1832.6,683.216 1833.16,683.216 1833.72,683.216 1834.27,683.216 1834.83,683.216 1835.39,683.216 1835.95,683.216 1836.51,683.216 1837.07,683.216 1837.63,683.216 1838.19,683.216 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.037028212169975 ± 0.022730235334584105\nProjected Energy: -4.013227539694002 ± (0.004956098869638659, 0.004829856555776502)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=df.dτ[end],\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.441193</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4237e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.167e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.057e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.432e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.906e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.345e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition : applied boundray condition \n\nBoundary conditions\n\nFor π-twisted -> :twisted\nFor hard wall -> :hard_wall\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{HARDWALL}, Tuple{PITWISTED}, Tuple{SingleComponentFockAddress, Any, Val{PITWISTED}, Val{HARDWALL}}} where {PITWISTED, HARDWALL}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen, Val(pitwisted), Val(hard-wall))\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic, pi-twisted and hard-wall.\nShow pi-twisted when pitwested=true and hard-wall=false and vice-versa for hard-wall else periodic\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, Val(true),Val(false))\n(BoseFS{2,4}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, Val(false),Val(true))\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
