var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip530\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip530)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip531\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip530)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip532\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.86 2211.02,1260.86 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1002.62 2211.02,1002.62 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,744.383 2211.02,744.383 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,486.145 2211.02,486.145 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,227.908 2211.02,227.908 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.86 423.181,1260.86 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1002.62 423.181,1002.62 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,744.383 423.181,744.383 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,486.145 423.181,486.145 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,227.908 423.181,227.908 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M356.339 1246.66 Q352.728 1246.66 350.899 1250.22 Q349.094 1253.76 349.094 1260.89 Q349.094 1268 350.899 1271.56 Q352.728 1275.11 356.339 1275.11 Q359.973 1275.11 361.779 1271.56 Q363.608 1268 363.608 1260.89 Q363.608 1253.76 361.779 1250.22 Q359.973 1246.66 356.339 1246.66 M356.339 1242.95 Q362.149 1242.95 365.205 1247.56 Q368.284 1252.14 368.284 1260.89 Q368.284 1269.62 365.205 1274.23 Q362.149 1278.81 356.339 1278.81 Q350.529 1278.81 347.45 1274.23 Q344.395 1269.62 344.395 1260.89 Q344.395 1252.14 347.45 1247.56 Q350.529 1242.95 356.339 1242.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M290.043 1015.97 L306.363 1015.97 L306.363 1019.9 L284.418 1019.9 L284.418 1015.97 Q287.08 1013.21 291.664 1008.58 Q296.27 1003.93 297.451 1002.59 Q299.696 1000.06 300.576 998.327 Q301.478 996.567 301.478 994.877 Q301.478 992.123 299.534 990.387 Q297.613 988.651 294.511 988.651 Q292.312 988.651 289.858 989.415 Q287.427 990.178 284.65 991.729 L284.65 987.007 Q287.474 985.873 289.927 985.294 Q292.381 984.716 294.418 984.716 Q299.789 984.716 302.983 987.401 Q306.177 990.086 306.177 994.577 Q306.177 996.706 305.367 998.627 Q304.58 1000.53 302.474 1003.12 Q301.895 1003.79 298.793 1007.01 Q295.691 1010.2 290.043 1015.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M316.224 985.341 L334.58 985.341 L334.58 989.276 L320.506 989.276 L320.506 997.748 Q321.524 997.401 322.543 997.239 Q323.562 997.053 324.58 997.053 Q330.367 997.053 333.747 1000.22 Q337.126 1003.4 337.126 1008.81 Q337.126 1014.39 333.654 1017.49 Q330.182 1020.57 323.862 1020.57 Q321.687 1020.57 319.418 1020.2 Q317.173 1019.83 314.765 1019.09 L314.765 1014.39 Q316.849 1015.53 319.071 1016.08 Q321.293 1016.64 323.77 1016.64 Q327.774 1016.64 330.112 1014.53 Q332.45 1012.42 332.45 1008.81 Q332.45 1005.2 330.112 1003.1 Q327.774 1000.99 323.77 1000.99 Q321.895 1000.99 320.02 1001.41 Q318.168 1001.82 316.224 1002.7 L316.224 985.341 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M356.339 988.419 Q352.728 988.419 350.899 991.984 Q349.094 995.526 349.094 1002.66 Q349.094 1009.76 350.899 1013.33 Q352.728 1016.87 356.339 1016.87 Q359.973 1016.87 361.779 1013.33 Q363.608 1009.76 363.608 1002.66 Q363.608 995.526 361.779 991.984 Q359.973 988.419 356.339 988.419 M356.339 984.716 Q362.149 984.716 365.205 989.322 Q368.284 993.905 368.284 1002.66 Q368.284 1011.38 365.205 1015.99 Q362.149 1020.57 356.339 1020.57 Q350.529 1020.57 347.45 1015.99 Q344.395 1011.38 344.395 1002.66 Q344.395 993.905 347.45 989.322 Q350.529 984.716 356.339 984.716 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M286.062 727.103 L304.418 727.103 L304.418 731.038 L290.344 731.038 L290.344 739.51 Q291.363 739.163 292.381 739.001 Q293.4 738.816 294.418 738.816 Q300.205 738.816 303.585 741.987 Q306.964 745.158 306.964 750.575 Q306.964 756.154 303.492 759.256 Q300.02 762.334 293.701 762.334 Q291.525 762.334 289.256 761.964 Q287.011 761.594 284.603 760.853 L284.603 756.154 Q286.687 757.288 288.909 757.844 Q291.131 758.399 293.608 758.399 Q297.613 758.399 299.951 756.293 Q302.288 754.186 302.288 750.575 Q302.288 746.964 299.951 744.857 Q297.613 742.751 293.608 742.751 Q291.733 742.751 289.858 743.168 Q288.006 743.584 286.062 744.464 L286.062 727.103 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M326.177 730.182 Q322.566 730.182 320.737 733.746 Q318.932 737.288 318.932 744.418 Q318.932 751.524 320.737 755.089 Q322.566 758.631 326.177 758.631 Q329.811 758.631 331.617 755.089 Q333.446 751.524 333.446 744.418 Q333.446 737.288 331.617 733.746 Q329.811 730.182 326.177 730.182 M326.177 726.478 Q331.987 726.478 335.043 731.084 Q338.122 735.668 338.122 744.418 Q338.122 753.144 335.043 757.751 Q331.987 762.334 326.177 762.334 Q320.367 762.334 317.288 757.751 Q314.233 753.144 314.233 744.418 Q314.233 735.668 317.288 731.084 Q320.367 726.478 326.177 726.478 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M356.339 730.182 Q352.728 730.182 350.899 733.746 Q349.094 737.288 349.094 744.418 Q349.094 751.524 350.899 755.089 Q352.728 758.631 356.339 758.631 Q359.973 758.631 361.779 755.089 Q363.608 751.524 363.608 744.418 Q363.608 737.288 361.779 733.746 Q359.973 730.182 356.339 730.182 M356.339 726.478 Q362.149 726.478 365.205 731.084 Q368.284 735.668 368.284 744.418 Q368.284 753.144 365.205 757.751 Q362.149 762.334 356.339 762.334 Q350.529 762.334 347.45 757.751 Q344.395 753.144 344.395 744.418 Q344.395 735.668 347.45 731.084 Q350.529 726.478 356.339 726.478 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M284.835 468.865 L307.057 468.865 L307.057 470.856 L294.511 503.425 L289.627 503.425 L301.432 472.801 L284.835 472.801 L284.835 468.865 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M316.224 468.865 L334.58 468.865 L334.58 472.801 L320.506 472.801 L320.506 481.273 Q321.524 480.926 322.543 480.763 Q323.562 480.578 324.58 480.578 Q330.367 480.578 333.747 483.75 Q337.126 486.921 337.126 492.337 Q337.126 497.916 333.654 501.018 Q330.182 504.097 323.862 504.097 Q321.687 504.097 319.418 503.726 Q317.173 503.356 314.765 502.615 L314.765 497.916 Q316.849 499.05 319.071 499.606 Q321.293 500.162 323.77 500.162 Q327.774 500.162 330.112 498.055 Q332.45 495.949 332.45 492.337 Q332.45 488.726 330.112 486.62 Q327.774 484.513 323.77 484.513 Q321.895 484.513 320.02 484.93 Q318.168 485.347 316.224 486.226 L316.224 468.865 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M356.339 471.944 Q352.728 471.944 350.899 475.509 Q349.094 479.051 349.094 486.18 Q349.094 493.287 350.899 496.851 Q352.728 500.393 356.339 500.393 Q359.973 500.393 361.779 496.851 Q363.608 493.287 363.608 486.18 Q363.608 479.051 361.779 475.509 Q359.973 471.944 356.339 471.944 M356.339 468.24 Q362.149 468.24 365.205 472.847 Q368.284 477.43 368.284 486.18 Q368.284 494.907 365.205 499.513 Q362.149 504.097 356.339 504.097 Q350.529 504.097 347.45 499.513 Q344.395 494.907 344.395 486.18 Q344.395 477.43 347.45 472.847 Q350.529 468.24 356.339 468.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M256.664 241.253 L264.303 241.253 L264.303 214.887 L255.992 216.554 L255.992 212.294 L264.256 210.628 L268.932 210.628 L268.932 241.253 L276.571 241.253 L276.571 245.188 L256.664 245.188 L256.664 241.253 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M296.015 213.707 Q292.404 213.707 290.576 217.271 Q288.77 220.813 288.77 227.943 Q288.77 235.049 290.576 238.614 Q292.404 242.155 296.015 242.155 Q299.65 242.155 301.455 238.614 Q303.284 235.049 303.284 227.943 Q303.284 220.813 301.455 217.271 Q299.65 213.707 296.015 213.707 M296.015 210.003 Q301.826 210.003 304.881 214.609 Q307.96 219.193 307.96 227.943 Q307.96 236.669 304.881 241.276 Q301.826 245.859 296.015 245.859 Q290.205 245.859 287.127 241.276 Q284.071 236.669 284.071 227.943 Q284.071 219.193 287.127 214.609 Q290.205 210.003 296.015 210.003 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M326.177 213.707 Q322.566 213.707 320.737 217.271 Q318.932 220.813 318.932 227.943 Q318.932 235.049 320.737 238.614 Q322.566 242.155 326.177 242.155 Q329.811 242.155 331.617 238.614 Q333.446 235.049 333.446 227.943 Q333.446 220.813 331.617 217.271 Q329.811 213.707 326.177 213.707 M326.177 210.003 Q331.987 210.003 335.043 214.609 Q338.122 219.193 338.122 227.943 Q338.122 236.669 335.043 241.276 Q331.987 245.859 326.177 245.859 Q320.367 245.859 317.288 241.276 Q314.233 236.669 314.233 227.943 Q314.233 219.193 317.288 214.609 Q320.367 210.003 326.177 210.003 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M356.339 213.707 Q352.728 213.707 350.899 217.271 Q349.094 220.813 349.094 227.943 Q349.094 235.049 350.899 238.614 Q352.728 242.155 356.339 242.155 Q359.973 242.155 361.779 238.614 Q363.608 235.049 363.608 227.943 Q363.608 220.813 361.779 217.271 Q359.973 213.707 356.339 213.707 M356.339 210.003 Q362.149 210.003 365.205 214.609 Q368.284 219.193 368.284 227.943 Q368.284 236.669 365.205 241.276 Q362.149 245.859 356.339 245.859 Q350.529 245.859 347.45 241.276 Q344.395 236.669 344.395 227.943 Q344.395 219.193 347.45 214.609 Q350.529 210.003 356.339 210.003 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip532)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,227.908 4017.76,227.908 \"/>\n<polyline clip-path=\"url(#clip532)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.27 457.123,1249.11 457.691,1248.88 458.259,1248.6 458.828,1248.24 459.396,1247.8 459.964,1247.28 460.533,1246.68 461.101,1246 461.669,1244.23 462.238,1243.43 462.806,1242.53 463.375,1241.55 463.943,1240.46 464.511,1239.29 465.08,1238.02 465.648,1235.61 466.216,1234.08 466.785,1231.42 467.353,1229.66 467.921,1226.75 468.49,1224.71 469.058,1221.51 469.626,1219.17 470.195,1216.69 470.763,1214.01 471.331,1211.17 471.9,1208.16 472.468,1204.97 473.036,1201.58 473.605,1198 474.173,1194.22 474.741,1190.23 475.31,1186.06 475.878,1181.67 476.446,1177.05 477.015,1171.16 477.583,1165 478.152,1158.49 478.72,1151.83 479.288,1145.84 479.857,1139.7 480.425,1132.29 480.993,1123.51 481.562,1115.62 482.13,1108.64 482.698,1100.32 483.267,1091.82 483.835,1081.17 484.403,1073.47 484.972,1064.45 485.54,1053.27 486.108,1041.83 486.677,1033.41 487.245,1022.9 487.813,1014.24 488.382,1004.31 488.95,994.439 489.518,982.408 490.087,972.155 490.655,962.845 491.224,953.439 491.792,942.944 492.36,931.357 492.929,921.774 493.497,912.07 494.065,901.211 494.634,891.249 495.202,878.267 495.77,867.483 496.339,856.661 496.907,846.75 497.475,836.954 498.044,824.086 498.612,814.293 499.18,804.476 499.749,792.639 500.317,781.949 500.885,772.434 501.454,759.718 502.022,748.407 502.59,737.136 503.159,727.093 503.727,718.052 504.295,708.048 504.864,698.149 505.432,687.155 506.001,678.406 506.569,669.819 507.137,660.364 507.706,649.882 508.274,637.48 508.842,626.432 509.411,617.673 509.979,608.997 510.547,600.379 511.116,592.873 511.684,583.492 512.252,575.392 512.821,566.339 513.389,558.571 513.957,551.92 514.526,543.2 515.094,536.661 515.662,530.316 516.231,523.924 516.799,514.734 517.367,505.759 517.936,499.035 518.504,493.564 519.072,485.003 519.641,477.966 520.209,472.782 520.778,466.796 521.346,459.975 521.914,451.329 522.483,444.014 523.051,436.838 523.619,431.925 524.188,426.204 524.756,422.703 525.324,419.058 525.893,415.569 526.461,411.055 527.029,405.534 527.598,401.214 528.166,400.022 528.734,395.58 529.303,390.297 529.871,385.275 530.439,382.489 531.008,378.542 531.576,372.739 532.144,370.399 532.713,366.759 533.281,365.42 533.85,358.741 534.418,356.542 534.986,352.347 535.555,348.222 536.123,345.345 536.691,343.627 537.26,340.593 537.828,337.957 538.396,334.142 538.965,330.585 539.533,328.14 540.101,324.68 540.67,323.276 541.238,320.878 541.806,319.676 542.375,318.446 542.943,317.146 543.511,314.882 544.08,313.724 544.648,312.532 545.216,309.397 545.785,308.491 546.353,307.561 546.921,305.533 547.49,304.315 548.058,301.253 548.627,299.215 549.195,297.611 549.763,295.934 550.332,293.303 550.9,290.791 551.468,289.258 552.037,288.748 552.605,289.532 553.173,288.693 553.742,288.143 554.31,286.49 554.878,284.878 555.447,285.324 556.015,284.576 556.583,283.043 557.152,280.258 557.72,279.842 558.288,277.186 558.857,276.898 559.425,277.58 559.993,275.082 560.562,272.671 561.13,270.374 561.698,271.326 562.267,269.71 562.835,265.333 563.404,264.464 563.972,262.417 564.54,262.793 565.109,264.059 565.677,261.772 566.245,261.866 566.814,264.064 567.382,261.984 567.95,263.279 568.519,264.014 569.087,262.945 569.655,264.856 570.224,263.416 570.792,264.122 571.36,265.881 571.929,265.329 572.497,264.95 573.065,264.507 573.634,262.876 574.202,261.313 574.77,262.034 575.339,262.636 575.907,261.122 576.476,260.606 577.044,261.969 577.612,263.45 578.181,261.427 578.749,260.911 579.317,261.23 579.886,259.669 580.454,258.096 581.022,256.599 581.591,257.093 582.159,256.718 582.727,254.237 583.296,252.877 583.864,252.452 584.432,250.086 585.001,251.023 585.569,248.517 586.137,248.562 586.706,250.667 587.274,249.423 587.842,247.261 588.411,246.174 588.979,244.153 589.547,244.166 590.116,241.143 590.684,241.561 591.253,242.015 591.821,242.247 592.389,243.389 592.958,240.395 593.526,240.743 594.094,241.997 594.663,242.236 595.231,242.308 595.799,241.463 596.368,241.722 596.936,240.916 597.504,240.976 598.073,240.269 598.641,240.452 599.209,239.643 599.778,238.992 600.346,239.233 600.914,239.818 601.483,237.016 602.051,236.635 602.619,237.195 603.188,236.65 603.756,236.049 604.325,235.378 604.893,237.05 605.461,235.471 606.03,237.225 606.598,238.619 607.166,238.769 607.735,237.081 608.303,237.607 608.871,237.867 609.44,238.373 610.008,239.474 610.576,238.857 611.145,241.092 611.713,241.025 612.281,238.208 612.85,239.628 613.418,239.788 613.986,239.951 614.555,239.989 615.123,239.078 615.691,239.259 616.26,239.253 616.828,239.173 617.396,239.345 617.965,237.535 618.533,238.905 619.102,239.214 619.67,237.086 620.238,236.077 620.807,236.418 621.375,235.613 621.943,235.806 622.512,237.153 623.08,237.339 623.648,235.51 624.217,236.677 624.785,236.73 625.353,237.961 625.922,235.147 626.49,236.455 627.058,236.842 627.627,237.207 628.195,236.261 628.763,235.497 629.332,235.567 629.9,232.9 630.468,233.228 631.037,236.964 631.605,236.726 632.173,236.915 632.742,238.335 633.31,240.506 633.879,243.393 634.447,242.919 635.015,244.666 635.584,244.937 636.152,244.393 636.72,243.733 637.289,242.322 637.857,240.908 638.425,239.586 638.994,238.256 639.562,240.195 640.13,238.751 640.699,238.825 641.267,239.711 641.835,239.44 642.404,237.248 642.972,236.264 643.54,236.514 644.109,236.368 644.677,236.331 645.245,235.209 645.814,236.108 646.382,233.697 646.951,231.664 647.519,228.897 648.087,230.331 648.656,229.583 649.224,231.14 649.792,231.536 650.361,232.966 650.929,231.957 651.497,230.95 652.066,231.296 652.634,230.64 653.202,231.001 653.771,229.105 654.339,227.598 654.907,229.313 655.476,227.49 656.044,227.012 656.612,226.586 657.181,226.107 657.749,225.786 658.317,225.567 658.886,225.609 659.454,227.289 660.022,227.638 660.591,228.258 661.159,230.014 661.728,230.575 662.296,231.906 662.864,232.158 663.433,232.624 664.001,229.751 664.569,228.989 665.138,226.479 665.706,228.13 666.274,226.674 666.843,227.341 667.411,227.021 667.979,227.787 668.548,230.146 669.116,231.747 669.684,227.822 670.253,227.465 670.821,225.959 671.389,227.702 671.958,229.357 672.526,230.048 673.094,231.42 673.663,234.151 674.231,236.054 674.799,235.878 675.368,238.923 675.936,239.606 676.505,239.315 677.073,235.947 677.641,231.751 678.21,230.079 678.778,230.556 679.346,231.022 679.915,234.354 680.483,233.127 681.051,234.309 681.62,234.457 682.188,235.804 682.756,235.48 683.325,235.692 683.893,235.847 684.461,236.79 685.03,238.733 685.598,237.467 686.166,237.296 686.735,237.035 687.303,235.797 687.871,234.892 688.44,235.864 689.008,233.711 689.577,233.869 690.145,236.088 690.713,236.99 691.282,237.897 691.85,235.623 692.418,235.412 692.987,236.196 693.555,235.074 694.123,232.876 694.692,231.878 695.26,232.975 695.828,231.898 696.397,227.875 696.965,227.151 697.533,231.585 698.102,231.528 698.67,229.721 699.238,227.013 699.807,225.39 700.375,226.968 700.943,228.487 701.512,228.973 702.08,230.43 702.648,231.46 703.217,231.545 703.785,232.74 704.354,232.809 704.922,232.769 705.49,233.849 706.059,233.725 706.627,233.547 707.195,235.783 707.764,234.324 708.332,235.121 708.9,234.777 709.469,234.47 710.037,232.316 710.605,231.581 711.174,233.572 711.742,234.261 712.31,233.959 712.879,233.81 713.447,233.403 714.015,233.182 714.584,233.313 715.152,233.165 715.72,235.032 716.289,233.674 716.857,231.579 717.425,232.545 717.994,230.267 718.562,230.436 719.131,230.49 719.699,230.428 720.267,231.311 720.836,231.116 721.404,229.144 721.972,229.247 722.541,225.341 723.109,226.757 723.677,225.126 724.246,227.493 724.814,226.875 725.382,226.277 725.951,225.49 726.519,223.919 727.087,224.366 727.656,226.862 728.224,227.16 728.792,227.468 729.361,227.702 729.929,228.012 730.497,228.402 731.066,229.619 731.634,231.716 732.203,231.651 732.771,230.513 733.339,231.53 733.908,230.625 734.476,231.537 735.044,232.534 735.613,231.534 736.181,232.713 736.749,232.536 737.318,231.546 737.886,230.38 738.454,229.249 739.023,229.306 739.591,228.276 740.159,228.571 740.728,227.56 741.296,229.821 741.864,230.95 742.433,229.995 743.001,229.106 743.569,230.212 744.138,228.155 744.706,228.282 745.274,229.65 745.843,228.607 746.411,231.907 746.98,231.896 747.548,231.721 748.116,232.679 748.685,230.37 749.253,227.434 749.821,225.491 750.39,225.894 750.958,224.963 751.526,227.678 752.095,229.019 752.663,230.315 753.231,229.309 753.8,229.347 754.368,228.56 754.936,228.732 755.505,229.929 756.073,227.654 756.641,226.731 757.21,229.107 757.778,228.25 758.346,228.7 758.915,229.031 759.483,229.157 760.052,230.305 760.62,230.308 761.188,231.273 761.757,232.357 762.325,231.389 762.893,230.268 763.462,230.216 764.03,230.381 764.598,232.489 765.167,231.286 765.735,230.246 766.303,226.287 766.872,226.472 767.44,229.843 768.008,230.841 768.577,229.85 769.145,231.074 769.713,229.958 770.282,232.237 770.85,232.299 771.418,233.233 771.987,233.075 772.555,232.681 773.123,233.815 773.692,233.65 774.26,232.386 774.829,235.138 775.397,235.857 775.965,235.334 776.534,234.945 777.102,232.529 777.67,232.668 778.239,231.349 778.807,233.449 779.375,233.037 779.944,232.819 780.512,230.73 781.08,232.579 781.649,233.37 782.217,231.028 782.785,230.983 783.354,227.704 783.922,227.87 784.49,229.044 785.059,227.898 785.627,227.934 786.195,227.87 786.764,227.785 787.332,226.892 787.9,226.945 788.469,227.235 789.037,228.359 789.606,227.274 790.174,226.475 790.742,228.785 791.311,231.018 791.879,231.984 792.447,231.837 793.016,231.69 793.584,231.595 794.152,233.555 794.721,234.177 795.289,229.735 795.857,229.491 796.426,229.35 796.994,230.338 797.562,231.335 798.131,231.979 798.699,231.858 799.267,230.605 799.836,231.227 800.404,230.039 800.972,228.989 801.541,229.059 802.109,229.184 802.678,229.37 803.246,228.243 803.814,228.272 804.383,228.367 804.951,229.674 805.519,229.691 806.088,229.593 806.656,229.37 807.224,229.143 807.793,227.384 808.361,227.441 808.929,226.386 809.498,224.338 810.066,224.864 810.634,224.166 811.203,224.556 811.771,224.793 812.339,224.139 812.908,224.542 813.476,224.238 814.044,224.728 814.613,225.894 815.181,228.121 815.749,227.329 816.318,228.702 816.886,227.811 817.455,227.756 818.023,228.787 818.591,228.991 819.16,228.072 819.728,227.125 820.296,227.275 820.865,227.437 821.433,228.547 822.001,227.616 822.57,227.864 823.138,226.947 823.706,228.133 824.275,230.067 824.843,233.167 825.411,230.894 825.98,228.513 826.548,230.36 827.116,231.143 827.685,230.001 828.253,230.865 828.821,231.912 829.39,232.759 829.958,232.298 830.526,231.031 831.095,231.8 831.663,231.503 832.232,233.416 832.8,233.142 833.368,232.031 833.937,230.769 834.505,229.706 835.073,231.702 835.642,232.532 836.21,230.191 836.778,230.019 837.347,230.01 837.915,228.963 838.483,229.899 839.052,230.753 839.62,229.591 840.188,228.355 840.757,227.354 841.325,225.461 841.893,223.707 842.462,224.018 843.03,223.408 843.598,221.725 844.167,224.2 844.735,224.63 845.304,223.856 845.872,221.903 846.44,220.517 847.009,221.18 847.577,220.447 848.145,220.041 848.714,221.85 849.282,224.381 849.85,223.931 850.419,226.224 850.987,227.465 851.555,228.927 852.124,230.167 852.692,231.142 853.26,230.083 853.829,228.082 854.397,229.44 854.965,227.444 855.534,226.743 856.102,229.013 856.67,229.855 857.239,227.846 857.807,228.966 858.375,227.995 858.944,229.122 859.512,229.234 860.081,229.275 860.649,227.225 861.217,228.253 861.786,230.397 862.354,230.22 862.922,229.232 863.491,230.22 864.059,232.145 864.627,230.081 865.196,231.894 865.764,229.866 866.332,229.398 866.901,228.355 867.469,227.585 868.037,227.703 868.606,228.925 869.174,229.922 869.742,231.83 870.311,235.006 870.879,233.411 871.447,233.056 872.016,233.022 872.584,232.782 873.152,232.197 873.721,230.816 874.289,228.559 874.858,228.593 875.426,228.512 875.994,228.362 876.563,229.274 877.131,229.208 877.699,229.218 878.268,227.025 878.836,228.978 879.404,228.837 879.973,227.915 880.541,225.763 881.109,225.796 881.678,225.905 882.246,225.022 882.814,224.157 883.383,224.606 883.951,224.9 884.519,222.994 885.088,225.518 885.656,226.813 886.224,227.107 886.793,227.394 887.361,224.432 887.93,224.762 888.498,225.964 889.066,225.243 889.635,225.366 890.203,224.59 890.771,224.752 891.34,224.109 891.908,226.419 892.476,226.646 893.045,227.831 893.613,229.941 894.181,227.917 894.75,228.122 895.318,229.298 895.886,227.346 896.455,230.342 897.023,229.266 897.591,227.26 898.16,227.68 898.728,226.855 899.296,225.952 899.865,225.229 900.433,224.474 901.001,225.855 901.57,226.079 902.138,225.524 902.707,224.968 903.275,226.428 903.843,228.608 904.412,229.746 904.98,230.778 905.548,228.666 906.117,227.739 906.685,227.599 907.253,225.874 907.822,226.084 908.39,227.238 908.958,227.429 909.527,227.645 910.095,226.656 910.663,228.04 911.232,227.127 911.8,225.201 912.368,226.536 912.937,224.704 913.505,223.961 914.073,224.585 914.642,227.075 915.21,231.29 915.779,232.318 916.347,233.298 916.915,234.314 917.484,235.228 918.052,235.046 918.62,233.441 919.189,234.022 919.757,235.638 920.325,237.244 920.894,236.909 921.462,235.536 922.03,235.321 922.599,233.782 923.167,233.286 923.735,232.802 924.304,231.613 924.872,230.451 925.44,231.432 926.009,232.296 926.577,232.189 927.145,232.86 927.714,230.317 928.282,227.964 928.85,228.978 929.419,229.72 929.987,229.624 930.556,229.566 931.124,228.633 931.692,227.541 932.261,226.524 932.829,226.627 933.397,226.917 933.966,226.087 934.534,225.507 935.102,223.78 935.671,226.212 936.239,226.418 936.807,226.502 937.376,226.734 937.944,225.732 938.512,227.81 939.081,226.989 939.649,226.069 940.217,226.356 940.786,226.666 941.354,227.999 941.922,227.114 942.491,230.435 943.059,228.241 943.627,228.431 944.196,227.252 944.764,228.514 945.333,227.49 945.901,230.693 946.469,229.703 947.038,229.467 947.606,231.524 948.174,231.326 948.743,232.088 949.311,231.776 949.879,233.689 950.448,234.148 951.016,232.769 951.584,233.749 952.153,232.349 952.721,232.24 953.289,231.761 953.858,232.528 954.426,230.198 954.994,228.855 955.563,228.587 956.131,228.415 956.699,229.333 957.268,230.112 957.836,228.692 958.405,227.606 958.973,227.526 959.541,227.477 960.11,229.454 960.678,231.328 961.246,232.166 961.815,232.78 962.383,232.322 962.951,231.911 963.52,232.472 964.088,231.041 964.656,229.786 965.225,227.445 965.793,227.463 966.361,226.463 966.93,228.274 967.498,227.218 968.066,228.166 968.635,230.136 969.203,230.903 969.771,230.515 970.34,229.051 970.908,226.766 971.476,227.913 972.045,227 972.613,229.954 973.182,230.544 973.75,229.356 974.318,228.925 974.887,226.528 975.455,226.696 976.023,225.689 976.592,226.761 977.16,230.9 977.728,230.344 978.297,229.008 978.865,229.14 979.433,229.137 980.002,229.144 980.57,228.704 981.138,228.742 981.707,226.559 982.275,227.815 982.843,227.7 983.412,226.492 983.98,226.572 984.548,224.487 985.117,227.976 985.685,225.679 986.253,227.904 986.822,225.809 987.39,224.739 987.959,225.955 988.527,225.283 989.095,224.205 989.664,225.654 990.232,226.64 990.8,226.854 991.369,223.982 991.937,224.305 992.505,222.414 993.074,223.77 993.642,225.077 994.21,228.569 994.779,228.603 995.347,229.581 995.915,231.601 996.484,230.256 997.052,230.11 997.62,228.956 998.189,229.019 998.757,229.875 999.325,229.727 999.894,228.509 1000.46,225.306 1001.03,225.423 1001.6,224.671 1002.17,224.737 1002.74,225.842 1003.3,225.012 1003.87,223.985 1004.44,224.204 1005.01,226.216 1005.58,228.378 1006.15,229.347 1006.71,229.148 1007.28,232.028 1007.85,230.602 1008.42,229.474 1008.99,227.15 1009.56,226.046 1010.12,226.327 1010.69,225.269 1011.26,225.49 1011.83,225.576 1012.4,224.651 1012.97,225.9 1013.53,227.454 1014.1,226.45 1014.67,226.579 1015.24,229.791 1015.81,230.751 1016.38,230.423 1016.94,229.17 1017.51,229.104 1018.08,230.2 1018.65,229.917 1019.22,230.865 1019.79,228.563 1020.35,228.39 1020.92,228.353 1021.49,229.39 1022.06,230.229 1022.63,230.95 1023.2,230.678 1023.76,229.176 1024.33,227.028 1024.9,224.961 1025.47,223.992 1026.04,222.081 1026.61,221.444 1027.17,221.79 1027.74,223.362 1028.31,223.771 1028.88,224.06 1029.45,224.283 1030.02,223.662 1030.58,224.131 1031.15,224.707 1031.72,227.196 1032.29,226.192 1032.86,227.272 1033.43,227.463 1033.99,227.543 1034.56,226.633 1035.13,225.579 1035.7,229.031 1036.27,230.048 1036.84,230.028 1037.4,231.813 1037.97,233.636 1038.54,233.273 1039.11,232.973 1039.68,233.837 1040.25,233.334 1040.81,231.867 1041.38,232.654 1041.95,232.388 1042.52,232.044 1043.09,231.922 1043.66,232.862 1044.22,233.462 1044.79,233.282 1045.36,231.876 1045.93,229.714 1046.5,228.408 1047.07,226.176 1047.63,226.491 1048.2,227.765 1048.77,226.69 1049.34,227.714 1049.91,226.792 1050.48,226.81 1051.05,227.672 1051.61,227.49 1052.18,227.49 1052.75,227.49 1053.32,227.453 1053.89,227.801 1054.46,227.824 1055.02,227.771 1055.59,228.745 1056.16,228.609 1056.73,228.445 1057.3,225.131 1057.87,224.312 1058.43,224.465 1059,227.897 1059.57,229.004 1060.14,229.042 1060.71,228.974 1061.28,230 1061.84,228.714 1062.41,227.653 1062.98,227.748 1063.55,227.818 1064.12,227.006 1064.69,229.221 1065.25,229.073 1065.82,228.914 1066.39,228.034 1066.96,228.117 1067.53,227.999 1068.1,228.121 1068.66,230.033 1069.23,229.89 1069.8,228.827 1070.37,228.646 1070.94,227.579 1071.51,227.663 1072.07,226.799 1072.64,226.019 1073.21,227.269 1073.78,225.323 1074.35,226.687 1074.92,227.625 1075.48,227.782 1076.05,225.635 1076.62,227.783 1077.19,226.767 1077.76,228.098 1078.33,229.004 1078.89,226.881 1079.46,226.823 1080.03,226.686 1080.6,225.628 1081.17,225.926 1081.74,227.043 1082.3,227.127 1082.87,228.108 1083.44,230.137 1084.01,228.033 1084.58,228.81 1085.15,227.828 1085.71,228.693 1086.28,227.682 1086.85,227.817 1087.42,227.89 1087.99,227.803 1088.56,226.637 1089.12,225.833 1089.69,224.095 1090.26,225.605 1090.83,225.779 1091.4,227.924 1091.97,230.002 1092.53,228.814 1093.1,230.051 1093.67,230.996 1094.24,230.747 1094.81,229.501 1095.38,231.519 1095.94,227.343 1096.51,228.339 1097.08,227.339 1097.65,227.335 1098.22,226.163 1098.79,227.65 1099.35,228.686 1099.92,229.611 1100.49,231.417 1101.06,232.13 1101.63,233.976 1102.2,231.449 1102.76,230.161 1103.33,227.75 1103.9,226.504 1104.47,224.464 1105.04,226.66 1105.61,226.68 1106.17,227.901 1106.74,228.999 1107.31,231.044 1107.88,231.685 1108.45,231.224 1109.02,230.955 1109.58,230.746 1110.15,232.578 1110.72,233.315 1111.29,234.018 1111.86,233.417 1112.43,233.057 1112.99,232.854 1113.56,230.439 1114.13,228.103 1114.7,229.118 1115.27,229.955 1115.84,228.58 1116.4,228.491 1116.97,230.355 1117.54,228.083 1118.11,229.184 1118.68,226.941 1119.25,225.98 1119.81,225.983 1120.38,228.051 1120.95,229.062 1121.52,227.898 1122.09,226.814 1122.66,226.189 1123.23,226.171 1123.79,227.223 1124.36,227.308 1124.93,225.456 1125.5,227.712 1126.07,223.758 1126.64,224.022 1127.2,225.414 1127.77,226.673 1128.34,227.595 1128.91,226.565 1129.48,226.868 1130.05,227.771 1130.61,228.889 1131.18,228.853 1131.75,227.567 1132.32,226.713 1132.89,226.569 1133.46,225.736 1134.02,225.988 1134.59,225.981 1135.16,226.14 1135.73,227.459 1136.3,226.552 1136.87,225.204 1137.43,225.383 1138,225.525 1138.57,225.477 1139.14,225.957 1139.71,227.197 1140.28,229.474 1140.84,229.222 1141.41,230.148 1141.98,229.878 1142.55,228.687 1143.12,227.487 1143.69,228.519 1144.25,228.451 1144.82,226.302 1145.39,226.316 1145.96,226.422 1146.53,227.539 1147.1,227.356 1147.66,227.336 1148.23,228.418 1148.8,228.363 1149.37,227.16 1149.94,227.301 1150.51,228.618 1151.07,229.663 1151.64,231.67 1152.21,229.309 1152.78,230.088 1153.35,226.652 1153.92,226.814 1154.48,225.714 1155.05,225.943 1155.62,225.01 1156.19,223.95 1156.76,224.104 1157.33,224.102 1157.89,224.132 1158.46,225.246 1159.03,225.546 1159.6,225.027 1160.17,225.34 1160.74,223.622 1161.3,223.757 1161.87,223.742 1162.44,223.991 1163.01,224.235 1163.58,224.562 1164.15,226.826 1164.71,227.967 1165.28,225.846 1165.85,226.282 1166.42,226.64 1166.99,226.696 1167.56,227.76 1168.12,226.756 1168.69,229.936 1169.26,229.718 1169.83,229.399 1170.4,231.371 1170.97,231.332 1171.53,230.163 1172.1,227.94 1172.67,227.897 1173.24,226.767 1173.81,226.807 1174.38,226.118 1174.94,226.197 1175.51,227.43 1176.08,225.472 1176.65,226.696 1177.22,224.787 1177.79,223.92 1178.35,224.284 1178.92,224.659 1179.49,224.837 1180.06,224.193 1180.63,224.778 1181.2,225.15 1181.76,226.495 1182.33,226.64 1182.9,226.002 1183.47,227.126 1184.04,229.318 1184.61,228.402 1185.17,229.484 1185.74,229.384 1186.31,229.307 1186.88,229.282 1187.45,229.137 1188.02,230.919 1188.58,229.895 1189.15,228.854 1189.72,226.818 1190.29,226.041 1190.86,227.294 1191.43,228.43 1192,227.673 1192.56,227.961 1193.13,228.911 1193.7,230.925 1194.27,229.678 1194.84,227.719 1195.41,225.695 1195.97,223.829 1196.54,226.204 1197.11,226.363 1197.68,225.49 1198.25,224.667 1198.82,227.157 1199.38,225.396 1199.95,228.772 1200.52,229.784 1201.09,229.762 1201.66,227.347 1202.23,228.545 1202.79,228.586 1203.36,229.698 1203.93,228.782 1204.5,229.635 1205.07,228.574 1205.64,229.534 1206.2,229.407 1206.77,228.437 1207.34,227.486 1207.91,227.64 1208.48,229.631 1209.05,229.43 1209.61,229.009 1210.18,226.137 1210.75,222.319 1211.32,223.846 1211.89,226.118 1212.46,228.362 1213.02,229.599 1213.59,229.639 1214.16,230.301 1214.73,231.249 1215.3,232.084 1215.87,231.725 1216.43,232.572 1217,231.081 1217.57,229.84 1218.14,230.951 1218.71,228.811 1219.28,229.756 1219.84,228.697 1220.41,227.795 1220.98,227.683 1221.55,226.756 1222.12,227.832 1222.69,228.512 1223.25,230.423 1223.82,230.267 1224.39,232.186 1224.96,229.731 1225.53,229.508 1226.1,228.595 1226.66,229.517 1227.23,229.451 1227.8,228.345 1228.37,226.251 1228.94,224.524 1229.51,223.821 1230.07,224.208 1230.64,223.719 1231.21,223.978 1231.78,224.414 1232.35,224.876 1232.92,225.12 1233.48,224.47 1234.05,224.867 1234.62,225.162 1235.19,225.518 1235.76,227.878 1236.33,228.964 1236.89,228.099 1237.46,230.433 1238.03,230.242 1238.6,228.337 1239.17,227.322 1239.74,226.518 1240.3,225.367 1240.87,225.803 1241.44,222.987 1242.01,220.382 1242.58,221.139 1243.15,222.793 1243.71,223.283 1244.28,224.013 1244.85,227.531 1245.42,227.715 1245.99,227.831 1246.56,227.858 1247.12,229.003 1247.69,229.913 1248.26,229.907 1248.83,229.787 1249.4,227.764 1249.97,231.902 1250.53,231.598 1251.1,233.515 1251.67,234.241 1252.24,233.978 1252.81,234.586 1253.38,234.918 1253.94,231.435 1254.51,230.198 1255.08,229.285 1255.65,228.157 1256.22,231.23 1256.79,229.953 1257.35,229.75 1257.92,231.562 1258.49,232.488 1259.06,229.24 1259.63,228.144 1260.2,229.262 1260.76,232.471 1261.33,232.239 1261.9,231.798 1262.47,231.402 1263.04,231.113 1263.61,231.684 1264.18,231.333 1264.74,232.202 1265.31,231.827 1265.88,232.663 1266.45,232.265 1267.02,231.727 1267.59,230.394 1268.15,230.026 1268.72,229.988 1269.29,230.787 1269.86,231.416 1270.43,231.986 1271,231.502 1271.56,232.383 1272.13,230.123 1272.7,228.984 1273.27,231.831 1273.84,231.695 1274.41,231.147 1274.97,229.811 1275.54,229.449 1276.11,227.409 1276.68,226.255 1277.25,225.167 1277.82,225.305 1278.38,226.434 1278.95,227.476 1279.52,227.568 1280.09,229.392 1280.66,226.849 1281.23,224.91 1281.79,228.138 1282.36,226.888 1282.93,225.806 1283.5,225.961 1284.07,224.86 1284.64,222.947 1285.2,224.096 1285.77,225.278 1286.34,225.323 1286.91,225.578 1287.48,225.635 1288.05,226.774 1288.61,225.709 1289.18,226.836 1289.75,225.828 1290.32,225.096 1290.89,225.227 1291.46,225.508 1292.02,227.679 1292.59,227.904 1293.16,225.83 1293.73,225.928 1294.3,225.142 1294.87,224.436 1295.43,225.651 1296,225.8 1296.57,226.003 1297.14,226.243 1297.71,227.379 1298.28,228.376 1298.84,226.124 1299.41,227.455 1299.98,227.642 1300.55,228.68 1301.12,229.494 1301.69,229.38 1302.25,231.429 1302.82,233.233 1303.39,232.886 1303.96,233.506 1304.53,236.232 1305.1,235.818 1305.66,234.024 1306.23,234.543 1306.8,236.013 1307.37,234.408 1307.94,235.865 1308.51,236.366 1309.07,234.468 1309.64,232.754 1310.21,231.224 1310.78,231.965 1311.35,229.608 1311.92,231.388 1312.48,233.051 1313.05,231.53 1313.62,229.984 1314.19,229.806 1314.76,228.723 1315.33,229.362 1315.89,232.085 1316.46,230.515 1317.03,227.944 1317.6,226.64 1318.17,226.668 1318.74,228.691 1319.3,228.308 1319.87,229.047 1320.44,228.844 1321.01,226.429 1321.58,226.281 1322.15,227.412 1322.71,227.539 1323.28,227.581 1323.85,229.702 1324.42,230.627 1324.99,230.213 1325.56,228.97 1326.12,227.682 1326.69,226.585 1327.26,224.557 1327.83,226.668 1328.4,225.559 1328.97,225.507 1329.53,225.409 1330.1,225.692 1330.67,225.696 1331.24,223.698 1331.81,222.789 1332.38,223.122 1332.94,225.563 1333.51,225.85 1334.08,226.162 1334.65,224.111 1335.22,223.181 1335.79,224.482 1336.36,225.722 1336.92,226.119 1337.49,225.249 1338.06,226.404 1338.63,225.53 1339.2,225.615 1339.77,225.729 1340.33,223.685 1340.9,224.773 1341.47,224.92 1342.04,227.131 1342.61,226.887 1343.18,224.94 1343.74,224.976 1344.31,225.265 1344.88,226.419 1345.45,226.534 1346.02,223.185 1346.59,224.583 1347.15,223.529 1347.72,224.779 1348.29,226.036 1348.86,225.088 1349.43,224.099 1350,224.339 1350.56,224.536 1351.13,225.6 1351.7,225.952 1352.27,223.042 1352.84,225.368 1353.41,225.567 1353.97,226.781 1354.54,229.138 1355.11,229.987 1355.68,230.793 1356.25,230.25 1356.82,230.135 1357.38,232.804 1357.95,231.588 1358.52,230.424 1359.09,231.253 1359.66,231.172 1360.23,226.636 1360.79,224.697 1361.36,222.816 1361.93,223.136 1362.5,222.57 1363.07,223.065 1363.64,224.29 1364.2,222.394 1364.77,224.821 1365.34,225.206 1365.91,225.492 1366.48,225.719 1367.05,225.943 1367.61,225.197 1368.18,223.481 1368.75,222.717 1369.32,221.131 1369.89,222.813 1370.46,221.424 1371.02,222.925 1371.59,222.233 1372.16,223.658 1372.73,222.005 1373.3,221.452 1373.87,222.065 1374.43,220.493 1375,219.895 1375.57,220.714 1376.14,222.333 1376.71,224.114 1377.28,225.852 1377.84,224.909 1378.41,227.283 1378.98,227.442 1379.55,226.624 1380.12,226.943 1380.69,227.434 1381.25,226.667 1381.82,227.818 1382.39,228.832 1382.96,228.949 1383.53,231.096 1384.1,232.099 1384.66,232.042 1385.23,235.09 1385.8,235.859 1386.37,235.403 1386.94,236.183 1387.51,235.774 1388.07,237.527 1388.64,235.072 1389.21,233.454 1389.78,237.322 1390.35,237.68 1390.92,233.997 1391.48,233.634 1392.05,233.368 1392.62,232.914 1393.19,232.613 1393.76,231.303 1394.33,230.02 1394.89,230.968 1395.46,231.647 1396.03,229.438 1396.6,232.318 1397.17,230.819 1397.74,230.553 1398.3,229.61 1398.87,228.481 1399.44,229.433 1400.01,229.031 1400.58,227.913 1401.15,227.86 1401.71,226.624 1402.28,223.574 1402.85,223.866 1403.42,224.194 1403.99,224.509 1404.56,224.962 1405.13,225.193 1405.69,227.667 1406.26,224.814 1406.83,225.143 1407.4,226.367 1407.97,225.493 1408.54,225.626 1409.1,227.776 1409.67,227.813 1410.24,231 1410.81,231.593 1411.38,230.409 1411.95,229.289 1412.51,225.298 1413.08,224.48 1413.65,222.645 1414.22,223.149 1414.79,224.641 1415.36,227.024 1415.92,226.958 1416.49,229.073 1417.06,229.191 1417.63,230.051 1418.2,230.899 1418.77,228.647 1419.33,228.945 1419.9,230.691 1420.47,230.514 1421.04,229.407 1421.61,228.357 1422.18,229.409 1422.74,228.422 1423.31,226.271 1423.88,225.359 1424.45,225.686 1425.02,225.011 1425.59,227.222 1426.15,228.172 1426.72,227.243 1427.29,230.477 1427.86,230.284 1428.43,229.228 1429,227.138 1429.56,227.326 1430.13,226.367 1430.7,225.39 1431.27,223.585 1431.84,223.013 1432.41,223.248 1432.97,225.755 1433.54,224.78 1434.11,226.115 1434.68,228.511 1435.25,228.661 1435.82,230.826 1436.38,229.804 1436.95,228.716 1437.52,228.896 1438.09,228.973 1438.66,227.898 1439.23,228.836 1439.79,227.928 1440.36,227.786 1440.93,227.88 1441.5,227.93 1442.07,231.015 1442.64,232.049 1443.2,232.824 1443.77,231.661 1444.34,229.465 1444.91,228.379 1445.48,227.163 1446.05,228.38 1446.61,229.335 1447.18,226.226 1447.75,230.487 1448.32,229.264 1448.89,226.976 1449.46,229.07 1450.02,229.911 1450.59,229.622 1451.16,230.686 1451.73,229.608 1452.3,231.562 1452.87,232.355 1453.43,232.029 1454,231.626 1454.57,231.175 1455.14,230.914 1455.71,231.637 1456.28,231.133 1456.84,231.986 1457.41,231.479 1457.98,231.224 1458.55,231.08 1459.12,232.932 1459.69,231.387 1460.25,233.309 1460.82,230.838 1461.39,229.573 1461.96,227.491 1462.53,227.342 1463.1,228.309 1463.66,228.048 1464.23,227.82 1464.8,226.738 1465.37,228.615 1465.94,227.444 1466.51,228.524 1467.07,227.376 1467.64,229.23 1468.21,232.077 1468.78,231.725 1469.35,232.262 1469.92,232.009 1470.48,231.891 1471.05,231.68 1471.62,231.17 1472.19,230.632 1472.76,231.394 1473.33,228.773 1473.89,228.848 1474.46,226.846 1475.03,228.025 1475.6,224.635 1476.17,224.578 1476.74,224.703 1477.31,224.805 1477.87,223.692 1478.44,223.775 1479.01,224.004 1479.58,223.168 1480.15,224.23 1480.72,223.186 1481.28,224.745 1481.85,223.826 1482.42,222.939 1482.99,224.462 1483.56,225.747 1484.13,226.744 1484.69,226.998 1485.26,224.959 1485.83,226.057 1486.4,229.124 1486.97,226.955 1487.54,227.006 1488.1,226.898 1488.67,225.98 1489.24,228.225 1489.81,228.211 1490.38,227.131 1490.95,227.045 1491.51,228.969 1492.08,228.731 1492.65,227.463 1493.22,227.357 1493.79,229.429 1494.36,228.181 1494.92,227.106 1495.49,228.066 1496.06,227.225 1496.63,227.273 1497.2,226.384 1497.77,226.687 1498.33,226.686 1498.9,227.781 1499.47,227.072 1500.04,228.08 1500.61,228.13 1501.18,228.144 1501.74,229.217 1502.31,229.317 1502.88,230.174 1503.45,230.122 1504.02,233.102 1504.59,233.776 1505.15,230.367 1505.72,231.347 1506.29,229.954 1506.86,229.659 1507.43,229.598 1508,230.408 1508.56,230.222 1509.13,230.029 1509.7,229.912 1510.27,229.621 1510.84,229.651 1511.41,229.303 1511.97,229.121 1512.54,228.047 1513.11,229.265 1513.68,228.172 1514.25,228.289 1514.82,229.259 1515.38,230.123 1515.95,229.925 1516.52,229.723 1517.09,229.626 1517.66,226.325 1518.23,228.337 1518.79,229.248 1519.36,230.067 1519.93,227.853 1520.5,227.839 1521.07,227.653 1521.64,227.505 1522.2,228.197 1522.77,228.111 1523.34,232.133 1523.91,230.744 1524.48,231.498 1525.05,229.948 1525.61,224.59 1526.18,224.762 1526.75,226.901 1527.32,227.843 1527.89,227.909 1528.46,226.837 1529.02,228.038 1529.59,225.859 1530.16,225.91 1530.73,226.065 1531.3,225.045 1531.87,226.051 1532.43,228.059 1533,226.959 1533.57,226.916 1534.14,225.526 1534.71,227.643 1535.28,226.658 1535.84,225.534 1536.41,225.388 1536.98,227.446 1537.55,227.595 1538.12,226.583 1538.69,226.697 1539.25,226.609 1539.82,226.484 1540.39,227.341 1540.96,222.974 1541.53,222.086 1542.1,221.482 1542.66,221.919 1543.23,222.582 1543.8,224.095 1544.37,222.213 1544.94,225.78 1545.51,226.753 1546.08,226.667 1546.64,224.767 1547.21,224.875 1547.78,223.987 1548.35,225.393 1548.92,225.419 1549.49,225.534 1550.05,226.784 1550.62,227.123 1551.19,227.022 1551.76,229.177 1552.33,228.009 1552.9,230.132 1553.46,229.811 1554.03,230.679 1554.6,231.423 1555.17,229.081 1555.74,229.012 1556.31,228.785 1556.87,228.658 1557.44,228.736 1558.01,230.731 1558.58,231.449 1559.15,230.132 1559.72,229.868 1560.28,230.538 1560.85,230.441 1561.42,229.153 1561.99,228.142 1562.56,229.209 1563.13,229.814 1563.69,232.774 1564.26,231.46 1564.83,228.189 1565.4,228.099 1565.97,228.343 1566.54,229.144 1567.1,230.003 1567.67,227.826 1568.24,228.68 1568.81,228.83 1569.38,228.727 1569.95,230.687 1570.51,231.343 1571.08,231.221 1571.65,231.89 1572.22,231.478 1572.79,232.159 1573.36,231.878 1573.92,229.565 1574.49,227.483 1575.06,228.28 1575.63,227.092 1576.2,228.088 1576.77,225.808 1577.33,225.821 1577.9,225.947 1578.47,224.047 1579.04,224.246 1579.61,225.445 1580.18,224.538 1580.74,224.731 1581.31,224.917 1581.88,222.886 1582.45,224.271 1583.02,222.435 1583.59,221.823 1584.15,222.352 1584.72,222.391 1585.29,223.813 1585.86,224.052 1586.43,222.051 1587,222.572 1587.56,223.008 1588.13,223.531 1588.7,222.745 1589.27,224.269 1589.84,224.546 1590.41,228.107 1590.97,228.057 1591.54,227.182 1592.11,226.179 1592.68,225.179 1593.25,225.451 1593.82,224.666 1594.38,225.796 1594.95,226.293 1595.52,226.486 1596.09,226.405 1596.66,226.546 1597.23,226.881 1597.79,225.903 1598.36,225.974 1598.93,224.271 1599.5,222.625 1600.07,223.098 1600.64,222.589 1601.2,221.967 1601.77,222.73 1602.34,223.025 1602.91,223.577 1603.48,228.008 1604.05,227.016 1604.61,227.263 1605.18,227.586 1605.75,225.643 1606.32,225.842 1606.89,226.106 1607.46,226.382 1608.02,223.569 1608.59,224.243 1609.16,223.831 1609.73,223.083 1610.3,223.592 1610.87,225.016 1611.43,227.451 1612,227.593 1612.57,227.891 1613.14,227.099 1613.71,226.388 1614.28,226.59 1614.84,225.811 1615.41,224.076 1615.98,225.589 1616.55,228.073 1617.12,227.253 1617.69,225.264 1618.26,225.463 1618.82,222.955 1619.39,221.347 1619.96,223.129 1620.53,225.83 1621.1,227.169 1621.67,226.477 1622.23,227.635 1622.8,230.09 1623.37,230.222 1623.94,232.357 1624.51,235.428 1625.08,232.084 1625.64,230.769 1626.21,229.702 1626.78,228.596 1627.35,227.892 1627.92,226.91 1628.49,227.128 1629.05,227.442 1629.62,228.387 1630.19,229.711 1630.76,229.571 1631.33,230.703 1631.9,227.654 1632.46,228.862 1633.03,229.062 1633.6,230.272 1634.17,230.291 1634.74,231.434 1635.31,232.369 1635.87,231.134 1636.44,233.237 1637.01,232.965 1637.58,231.854 1638.15,232.754 1638.72,232.622 1639.28,233.268 1639.85,234.052 1640.42,233.418 1640.99,232.903 1641.56,228.584 1642.13,230.916 1642.69,229.944 1643.26,230.669 1643.83,233.575 1644.4,233.021 1644.97,233.723 1645.54,233.484 1646.1,234.2 1646.67,235.964 1647.24,235.514 1647.81,232.921 1648.38,234.776 1648.95,232.54 1649.51,232.198 1650.08,230.922 1650.65,230.622 1651.22,232.423 1651.79,232.058 1652.36,230.593 1652.92,230.605 1653.49,231.466 1654.06,231.089 1654.63,230.673 1655.2,230.398 1655.77,229.111 1656.33,230.029 1656.9,228.888 1657.47,227.703 1658.04,226.546 1658.61,226.423 1659.18,225.58 1659.74,226.426 1660.31,225.661 1660.88,226.731 1661.45,227.822 1662.02,228.706 1662.59,228.258 1663.15,229.138 1663.72,229.136 1664.29,228.983 1664.86,228.887 1665.43,228.671 1666,229.504 1666.56,229.341 1667.13,229.033 1667.7,227.944 1668.27,229.699 1668.84,228.49 1669.41,227.523 1669.97,228.452 1670.54,227.09 1671.11,226.117 1671.68,225.129 1672.25,227.09 1672.82,227.056 1673.38,227.139 1673.95,227.257 1674.52,226.153 1675.09,227.29 1675.66,229.217 1676.23,228.056 1676.79,226.878 1677.36,225.949 1677.93,224.849 1678.5,229.229 1679.07,227.027 1679.64,226.159 1680.2,226.169 1680.77,225.217 1681.34,225.426 1681.91,223.418 1682.48,223.243 1683.05,224.68 1683.61,224.959 1684.18,225.247 1684.75,224.46 1685.32,222.586 1685.89,223.091 1686.46,223.269 1687.02,222.48 1687.59,224.823 1688.16,222.797 1688.73,223.045 1689.3,222.36 1689.87,223.967 1690.44,227.483 1691,226.582 1691.57,224.679 1692.14,223.791 1692.71,224.115 1693.28,225.352 1693.85,227.632 1694.41,227.979 1694.98,225.876 1695.55,225.001 1696.12,226.161 1696.69,228.232 1697.26,229.201 1697.82,232.362 1698.39,231.107 1698.96,231.152 1699.53,232.036 1700.1,231.651 1700.67,229.293 1701.23,231.415 1701.8,233.194 1702.37,233.049 1702.94,232.619 1703.51,233.629 1704.08,234.29 1704.64,235.079 1705.21,234.571 1705.78,234.078 1706.35,232.549 1706.92,232.5 1707.49,229.127 1708.05,227.958 1708.62,227.102 1709.19,225.212 1709.76,224.402 1710.33,224.747 1710.9,225.116 1711.46,224.259 1712.03,224.765 1712.6,227.148 1713.17,225.884 1713.74,226.026 1714.31,226.163 1714.87,228.396 1715.44,226.148 1716.01,224.23 1716.58,227.288 1717.15,227.177 1717.72,228.353 1718.28,228.193 1718.85,227.063 1719.42,226.301 1719.99,227.366 1720.56,227.314 1721.13,228.34 1721.69,227.384 1722.26,224.295 1722.83,226.64 1723.4,227.899 1723.97,231.089 1724.54,230.778 1725.1,231.722 1725.67,231.512 1726.24,231.077 1726.81,230.662 1727.38,229.362 1727.95,230.454 1728.51,230.33 1729.08,230.167 1729.65,230.032 1730.22,229.824 1730.79,228.637 1731.36,229.772 1731.92,228.64 1732.49,229.709 1733.06,231.707 1733.63,231.225 1734.2,232.949 1734.77,232.372 1735.33,231.812 1735.9,231.55 1736.47,230.35 1737.04,230.141 1737.61,230.021 1738.18,230.983 1738.74,231.881 1739.31,231.379 1739.88,230.066 1740.45,228.824 1741.02,229.945 1741.59,228.612 1742.15,227.458 1742.72,227.032 1743.29,224.932 1743.86,225.052 1744.43,225.092 1745,224.155 1745.56,224.319 1746.13,224.161 1746.7,226.6 1747.27,227.659 1747.84,227.711 1748.41,227.827 1748.97,227.679 1749.54,228.305 1750.11,231.301 1750.68,230.804 1751.25,230.456 1751.82,228.127 1752.38,226.75 1752.95,227.648 1753.52,228.551 1754.09,228.171 1754.66,228.835 1755.23,228.871 1755.79,229.821 1756.36,230.475 1756.93,230.254 1757.5,228.945 1758.07,227.686 1758.64,227.552 1759.21,229.708 1759.77,228.378 1760.34,228.509 1760.91,228.549 1761.48,229.623 1762.05,228.264 1762.62,227.323 1763.18,227.307 1763.75,226.229 1764.32,226.275 1764.89,226.327 1765.46,224.228 1766.03,224.311 1766.59,224.462 1767.16,226.793 1767.73,226.978 1768.3,225.922 1768.87,223.007 1769.44,223.015 1770,223.529 1770.57,224.841 1771.14,224.794 1771.71,226.846 1772.28,224.715 1772.85,224.863 1773.41,222.917 1773.98,224.255 1774.55,223.163 1775.12,220.53 1775.69,222.36 1776.26,224.775 1776.82,223.917 1777.39,223.376 1777.96,221.711 1778.53,221.264 1779.1,220.874 1779.67,220.388 1780.23,221.093 1780.8,221.658 1781.37,222.034 1781.94,222.653 1782.51,222.937 1783.08,222.25 1783.64,220.744 1784.21,221.574 1784.78,222.036 1785.35,221.791 1785.92,222.367 1786.49,224.014 1787.05,224.315 1787.62,224.756 1788.19,225.99 1788.76,228.526 1789.33,227.663 1789.9,227.601 1790.46,228.871 1791.03,229.955 1791.6,232.086 1792.17,231.938 1792.74,231.599 1793.31,233.457 1793.87,233.277 1794.44,233.315 1795.01,234.215 1795.58,234.068 1796.15,231.574 1796.72,230.609 1797.28,228.691 1797.85,228.865 1798.42,230.962 1798.99,229.629 1799.56,229.61 1800.13,229.493 1800.69,229.531 1801.26,231.356 1801.83,232.141 1802.4,230.939 1802.97,230.792 1803.54,229.338 1804.1,228.068 1804.67,227.972 1805.24,225.825 1805.81,225.022 1806.38,226.448 1806.95,228.466 1807.51,227.705 1808.08,226.922 1808.65,229.098 1809.22,228.187 1809.79,228.289 1810.36,227.087 1810.92,226.195 1811.49,227.551 1812.06,225.675 1812.63,226.01 1813.2,226.261 1813.77,226.502 1814.33,227.804 1814.9,228.733 1815.47,226.532 1816.04,226.559 1816.61,227.69 1817.18,225.771 1817.74,224.718 1818.31,227.128 1818.88,230.433 1819.45,231.323 1820.02,235.312 1820.59,234.849 1821.15,236.662 1821.72,236.951 1822.29,235.344 1822.86,235.026 1823.43,233.785 1824,232.604 1824.56,230.487 1825.13,231.268 1825.7,228.999 1826.27,228.986 1826.84,225.732 1827.41,230.068 1827.97,228.592 1828.54,231.634 1829.11,231.235 1829.68,228.821 1830.25,228.751 1830.82,230.832 1831.39,229.619 1831.95,227.553 1832.52,226.469 1833.09,229.447 1833.66,230.159 1834.23,229.179 1834.8,230.09 1835.36,229.94 1835.93,228.475 1836.5,228.183 1837.07,230.11 1837.64,228.959 1838.21,227.855 1838.77,227.792 1839.34,225.685 1839.91,227.856 1840.48,227.718 1841.05,226.802 1841.62,228.605 1842.18,228.291 1842.75,227.357 1843.32,226.511 1843.89,227.638 1844.46,229.65 1845.03,229.352 1845.59,229.104 1846.16,227.025 1846.73,226.764 1847.3,228.004 1847.87,228.042 1848.44,228.969 1849,226.886 1849.57,227.815 1850.14,226.773 1850.71,228.761 1851.28,225.647 1851.85,226.771 1852.41,227.998 1852.98,229.966 1853.55,228.695 1854.12,227.495 1854.69,227.479 1855.26,229.357 1855.82,229.196 1856.39,228.067 1856.96,227.06 1857.53,227.937 1858.1,226.756 1858.67,228.029 1859.23,224.782 1859.8,224.989 1860.37,226.246 1860.94,225.414 1861.51,227.756 1862.08,225.777 1862.64,225.822 1863.21,225.013 1863.78,225.068 1864.35,224.25 1864.92,224.683 1865.49,227 1866.05,225.865 1866.62,223.673 1867.19,224.957 1867.76,224.238 1868.33,224.639 1868.9,224.09 1869.46,227.607 1870.03,226.633 1870.6,224.705 1871.17,226.891 1871.74,226.628 1872.31,227.68 1872.87,227.692 1873.44,228.76 1874.01,228.711 1874.58,229.65 1875.15,228.592 1875.72,229.89 1876.28,227.782 1876.85,229.069 1877.42,228.994 1877.99,229.044 1878.56,229.97 1879.13,231.952 1879.69,229.637 1880.26,229.553 1880.83,227.381 1881.4,226.279 1881.97,228.567 1882.54,228.398 1883.1,227.256 1883.67,227.504 1884.24,227.85 1884.81,226.719 1885.38,227.779 1885.95,225.865 1886.51,225.92 1887.08,224.043 1887.65,227.512 1888.22,227.56 1888.79,229.569 1889.36,228.102 1889.92,228.087 1890.49,229.076 1891.06,230.167 1891.63,231.01 1892.2,230.66 1892.77,229.761 1893.33,229.661 1893.9,229.587 1894.47,228.445 1895.04,230.508 1895.61,230.438 1896.18,230.37 1896.74,228.15 1897.31,229.17 1897.88,229.989 1898.45,232.006 1899.02,232.886 1899.59,232.464 1900.16,233.207 1900.72,231.755 1901.29,230.143 1901.86,227.964 1902.43,229.014 1903,228.926 1903.57,225.732 1904.13,227.627 1904.7,227.901 1905.27,227.676 1905.84,224.432 1906.41,225.648 1906.98,223.931 1907.54,224.199 1908.11,223.527 1908.68,222.837 1909.25,224.229 1909.82,224.708 1910.39,225.045 1910.95,224.199 1911.52,224.427 1912.09,226.909 1912.66,227.957 1913.23,227.871 1913.8,226.782 1914.36,230.256 1914.93,228.326 1915.5,227.418 1916.07,228.696 1916.64,228.854 1917.21,229.723 1917.77,229.605 1918.34,230.376 1918.91,229.379 1919.48,229.36 1920.05,229.079 1920.62,229.058 1921.18,229.023 1921.75,227.949 1922.32,229.199 1922.89,230.224 1923.46,230.025 1924.03,229.814 1924.59,231.052 1925.16,230.744 1925.73,231.715 1926.3,231.52 1926.87,230.27 1927.44,230.089 1928,229.984 1928.57,230.998 1929.14,230.891 1929.71,230.753 1930.28,229.234 1930.85,228.314 1931.41,228.195 1931.98,227.195 1932.55,226.09 1933.12,226.254 1933.69,226.341 1934.26,225.47 1934.82,227.849 1935.39,225.694 1935.96,229.801 1936.53,229.838 1937.1,229.872 1937.67,228.641 1938.23,230.338 1938.8,230.122 1939.37,228.897 1939.94,235.154 1940.51,234.496 1941.08,233.937 1941.64,233.437 1942.21,231.952 1942.78,230.833 1943.35,231.464 1943.92,230.967 1944.49,231.646 1945.05,232.095 1945.62,230.551 1946.19,229.064 1946.76,227.652 1947.33,227.387 1947.9,229.184 1948.46,228.999 1949.03,227.913 1949.6,228.728 1950.17,227.424 1950.74,226.466 1951.31,227.551 1951.87,225.524 1952.44,227.652 1953.01,227.471 1953.58,230.457 1954.15,230.049 1954.72,227.795 1955.28,229.735 1955.85,229.631 1956.42,229.235 1956.99,230.231 1957.56,229.949 1958.13,229.903 1958.69,230.564 1959.26,229.157 1959.83,226.978 1960.4,227.856 1960.97,227.744 1961.54,228.749 1962.1,230.73 1962.67,229.214 1963.24,227.991 1963.81,227.915 1964.38,227.831 1964.95,227.774 1965.51,228.558 1966.08,228.297 1966.65,227.931 1967.22,226.801 1967.79,228.586 1968.36,225.002 1968.92,224.985 1969.49,223.089 1970.06,223.146 1970.63,223.321 1971.2,221.736 1971.77,220.909 1972.34,222.264 1972.9,221.395 1973.47,220.756 1974.04,222.311 1974.61,221.543 1975.18,223.08 1975.75,224.504 1976.31,221.819 1976.88,223.388 1977.45,221.667 1978.02,222.086 1978.59,225.477 1979.16,227.806 1979.72,226.558 1980.29,226.433 1980.86,227.671 1981.43,226.711 1982,230.067 1982.57,233.059 1983.13,233.539 1983.7,230.985 1984.27,230.88 1984.84,229.726 1985.41,228.606 1985.98,228.547 1986.54,227.324 1987.11,228.284 1987.68,227.353 1988.25,227.324 1988.82,227.355 1989.39,226.509 1989.95,227.648 1990.52,227.649 1991.09,226.861 1991.66,226.96 1992.23,226 1992.8,225.96 1993.36,226.307 1993.93,227.518 1994.5,227.618 1995.07,226.827 1995.64,224.98 1996.21,224.12 1996.77,224.405 1997.34,225.435 1997.91,227.589 1998.48,228.829 1999.05,229.982 1999.62,229.836 2000.18,228.819 2000.75,230.033 2001.32,231.981 2001.89,231.615 2002.46,228.601 2003.03,228.58 2003.59,225.528 2004.16,225.889 2004.73,227.173 2005.3,228.541 2005.87,231.74 2006.44,231.73 2007,232.257 2007.57,232.024 2008.14,230.636 2008.71,230.344 2009.28,229.397 2009.85,228.286 2010.41,227.299 2010.98,227.499 2011.55,227.628 2012.12,223.225 2012.69,224.552 2013.26,224.645 2013.82,222.856 2014.39,223.28 2014.96,223.527 2015.53,223.697 2016.1,221.958 2016.67,222.24 2017.23,223.625 2017.8,222.936 2018.37,224.443 2018.94,225.807 2019.51,227.142 2020.08,227.264 2020.64,225.346 2021.21,224.509 2021.78,224.973 2022.35,223.334 2022.92,224.743 2023.49,224.989 2024.05,225.395 2024.62,226.703 2025.19,224.751 2025.76,223.102 2026.33,224.359 2026.9,222.61 2027.46,222.335 2028.03,223.782 2028.6,225.166 2029.17,224.438 2029.74,225.684 2030.31,228.244 2030.87,229.338 2031.44,229.438 2032.01,229.423 2032.58,228.263 2033.15,229.363 2033.72,231.585 2034.28,232.572 2034.85,232.563 2035.42,232.304 2035.99,233.083 2036.56,233.845 2037.13,232.431 2037.69,231.91 2038.26,232.718 2038.83,233.348 2039.4,232.158 2039.97,230.661 2040.54,229.515 2041.11,231.344 2041.67,232.36 2042.24,231.864 2042.81,231.553 2043.38,231.323 2043.95,231.943 2044.52,231.728 2045.08,231.411 2045.65,232.055 2046.22,232.874 2046.79,232.565 2047.36,230.212 2047.93,232.234 2048.49,231.888 2049.06,230.536 2049.63,230.425 2050.2,231.232 2050.77,231.052 2051.34,230.754 2051.9,226.355 2052.47,227.636 2053.04,228.694 2053.61,229.43 2054.18,230.447 2054.75,231.21 2055.31,232.982 2055.88,232.717 2056.45,230.135 2057.02,229.945 2057.59,231.739 2058.16,231.149 2058.72,230.769 2059.29,230.326 2059.86,231.049 2060.43,228.596 2061,227.545 2061.57,226.321 2062.13,228.423 2062.7,227.233 2063.27,225.184 2063.84,226.282 2064.41,225.336 2064.98,226.515 2065.54,227.685 2066.11,228.563 2066.68,228.212 2067.25,230.147 2067.82,231.037 2068.39,228.636 2068.95,228.33 2069.52,227.155 2070.09,226.043 2070.66,223.166 2071.23,224.393 2071.8,225.376 2072.36,226.517 2072.93,226.543 2073.5,227.605 2074.07,226.538 2074.64,227.188 2075.21,226.971 2075.77,226.904 2076.34,226.918 2076.91,226.05 2077.48,226.039 2078.05,225.99 2078.62,225.239 2079.18,225.484 2079.75,224.657 2080.32,225.575 2080.89,225.35 2081.46,225.479 2082.03,226.638 2082.59,227.41 2083.16,226.282 2083.73,224.233 2084.3,223.406 2084.87,224.999 2085.44,225.037 2086,227.161 2086.57,226.328 2087.14,226.501 2087.71,227.417 2088.28,227.379 2088.85,227.633 2089.41,227.699 2089.98,226.768 2090.55,226.737 2091.12,227.7 2091.69,226.544 2092.26,226.848 2092.82,226.021 2093.39,225.084 2093.96,225.381 2094.53,225.627 2095.1,226.835 2095.67,228.162 2096.23,230.115 2096.8,229.887 2097.37,228.542 2097.94,229.632 2098.51,228.198 2099.08,228.233 2099.64,227.342 2100.21,226.151 2100.78,225.381 2101.35,225.616 2101.92,225.632 2102.49,225.48 2103.05,223.679 2103.62,222.843 2104.19,224.037 2104.76,225.179 2105.33,223.164 2105.9,223.514 2106.46,224.879 2107.03,226.39 2107.6,224.362 2108.17,225.856 2108.74,226.251 2109.31,227.518 2109.87,227.58 2110.44,227.52 2111.01,226.771 2111.58,226.744 2112.15,227.823 2112.72,226.735 2113.29,227.898 2113.85,229.034 2114.42,226.798 2114.99,229.233 2115.56,228.14 2116.13,226.996 2116.7,227.109 2117.26,227.068 2117.83,225.228 2118.4,228.707 2118.97,227.732 2119.54,228.92 2120.11,227.951 2120.67,228.011 2121.24,228.946 2121.81,228.7 2122.38,229.49 2122.95,231.618 2123.52,234.495 2124.08,234.975 2124.65,233.469 2125.22,232.948 2125.79,231.466 2126.36,230.126 2126.93,232.225 2127.49,231.918 2128.06,231.9 2128.63,231.376 2129.2,230.915 2129.77,231.728 2130.34,231.441 2130.9,231.162 2131.47,230.9 2132.04,230.964 2132.61,226.623 2133.18,228.868 2133.75,227.763 2134.31,229.627 2134.88,229.41 2135.45,227.465 2136.02,226.679 2136.59,226.631 2137.16,226.651 2137.72,226.465 2138.29,225.724 2138.86,224.877 2139.43,226.283 2140,224.307 2140.57,224.412 2141.13,224.546 2141.7,224.912 2142.27,226.368 2142.84,226.703 2143.41,223.932 2143.98,224.289 2144.54,223.793 2145.11,226.012 2145.68,227.245 2146.25,228.397 2146.82,229.269 2147.39,231.082 2147.95,230.004 2148.52,229.793 2149.09,228.575 2149.66,227.616 2150.23,226.625 2150.8,225.893 2151.36,222.865 2151.93,225.199 2152.5,225.189 2153.07,227.506 2153.64,225.614 2154.21,226.899 2154.77,227.885 2155.34,228.817 2155.91,226.655 2156.48,229.879 2157.05,230.863 2157.62,230.912 2158.18,231.846 2158.75,232.682 2159.32,232.546 2159.89,234.244 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip530)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip530)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip530)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip530)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.027 ± 0.02\n  with uncertainty of ± 0.0018380780369520572\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01572 ± (0.0027913, 0.00276591) (MC)\n  95% confidence interval: [-4.02098, -4.01042]) (MC)\n  linear error propagation: -4.01579 ± 0.00270019\n  |δ_y| = |0.00229559| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015723761000712, val_l = 0.005253514950938509, val_u = 0.005305092786536569)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip560\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip560)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip561\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip560)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip562\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip562)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip562)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip562)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip562)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip560)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip562)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1145.24 2211.02,1145.24 \"/>\n<polyline clip-path=\"url(#clip562)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,988.34 2211.02,988.34 \"/>\n<polyline clip-path=\"url(#clip562)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,831.444 2211.02,831.444 \"/>\n<polyline clip-path=\"url(#clip562)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,674.548 2211.02,674.548 \"/>\n<polyline clip-path=\"url(#clip562)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,517.653 2211.02,517.653 \"/>\n<polyline clip-path=\"url(#clip562)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,360.757 2211.02,360.757 \"/>\n<polyline clip-path=\"url(#clip562)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,203.861 2211.02,203.861 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1145.24 365.751,1145.24 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,988.34 365.751,988.34 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,831.444 365.751,831.444 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,674.548 365.751,674.548 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,517.653 365.751,517.653 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,360.757 365.751,360.757 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,203.861 365.751,203.861 \"/>\n<path clip-path=\"url(#clip560)\" d=\"M298.909 1131.03 Q295.298 1131.03 293.469 1134.6 Q291.664 1138.14 291.664 1145.27 Q291.664 1152.38 293.469 1155.94 Q295.298 1159.48 298.909 1159.48 Q302.543 1159.48 304.349 1155.94 Q306.177 1152.38 306.177 1145.27 Q306.177 1138.14 304.349 1134.6 Q302.543 1131.03 298.909 1131.03 M298.909 1127.33 Q304.719 1127.33 307.775 1131.94 Q310.853 1136.52 310.853 1145.27 Q310.853 1154 307.775 1158.6 Q304.719 1163.19 298.909 1163.19 Q293.099 1163.19 290.02 1158.6 Q286.964 1154 286.964 1145.27 Q286.964 1136.52 290.02 1131.94 Q293.099 1127.33 298.909 1127.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M259.557 1001.68 L267.196 1001.68 L267.196 975.319 L258.886 976.986 L258.886 972.727 L267.15 971.06 L271.826 971.06 L271.826 1001.68 L279.465 1001.68 L279.465 1005.62 L259.557 1005.62 L259.557 1001.68 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M298.909 974.139 Q295.298 974.139 293.469 977.703 Q291.664 981.245 291.664 988.375 Q291.664 995.481 293.469 999.046 Q295.298 1002.59 298.909 1002.59 Q302.543 1002.59 304.349 999.046 Q306.177 995.481 306.177 988.375 Q306.177 981.245 304.349 977.703 Q302.543 974.139 298.909 974.139 M298.909 970.435 Q304.719 970.435 307.775 975.041 Q310.853 979.625 310.853 988.375 Q310.853 997.101 307.775 1001.71 Q304.719 1006.29 298.909 1006.29 Q293.099 1006.29 290.02 1001.71 Q286.964 997.101 286.964 988.375 Q286.964 979.625 290.02 975.041 Q293.099 970.435 298.909 970.435 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M262.775 844.789 L279.094 844.789 L279.094 848.724 L257.15 848.724 L257.15 844.789 Q259.812 842.034 264.395 837.405 Q269.002 832.752 270.182 831.409 Q272.428 828.886 273.307 827.15 Q274.21 825.391 274.21 823.701 Q274.21 820.946 272.266 819.21 Q270.344 817.474 267.242 817.474 Q265.043 817.474 262.59 818.238 Q260.159 819.002 257.381 820.553 L257.381 815.831 Q260.205 814.697 262.659 814.118 Q265.113 813.539 267.15 813.539 Q272.52 813.539 275.715 816.224 Q278.909 818.909 278.909 823.4 Q278.909 825.53 278.099 827.451 Q277.312 829.349 275.205 831.942 Q274.627 832.613 271.525 835.831 Q268.423 839.025 262.775 844.789 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M298.909 817.243 Q295.298 817.243 293.469 820.808 Q291.664 824.349 291.664 831.479 Q291.664 838.585 293.469 842.15 Q295.298 845.692 298.909 845.692 Q302.543 845.692 304.349 842.15 Q306.177 838.585 306.177 831.479 Q306.177 824.349 304.349 820.808 Q302.543 817.243 298.909 817.243 M298.909 813.539 Q304.719 813.539 307.775 818.146 Q310.853 822.729 310.853 831.479 Q310.853 840.206 307.775 844.812 Q304.719 849.395 298.909 849.395 Q293.099 849.395 290.02 844.812 Q286.964 840.206 286.964 831.479 Q286.964 822.729 290.02 818.146 Q293.099 813.539 298.909 813.539 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M272.914 673.194 Q276.27 673.912 278.145 676.18 Q280.043 678.449 280.043 681.782 Q280.043 686.898 276.525 689.699 Q273.006 692.5 266.525 692.5 Q264.349 692.5 262.034 692.06 Q259.742 691.643 257.289 690.787 L257.289 686.273 Q259.233 687.407 261.548 687.986 Q263.863 688.565 266.386 688.565 Q270.784 688.565 273.076 686.828 Q275.39 685.092 275.39 681.782 Q275.39 678.727 273.238 677.014 Q271.108 675.278 267.289 675.278 L263.261 675.278 L263.261 671.435 L267.474 671.435 Q270.923 671.435 272.752 670.069 Q274.58 668.68 274.58 666.088 Q274.58 663.426 272.682 662.014 Q270.807 660.579 267.289 660.579 Q265.367 660.579 263.168 660.995 Q260.969 661.412 258.33 662.292 L258.33 658.125 Q260.992 657.384 263.307 657.014 Q265.645 656.643 267.705 656.643 Q273.029 656.643 276.131 659.074 Q279.233 661.481 279.233 665.602 Q279.233 668.472 277.59 670.463 Q275.946 672.43 272.914 673.194 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M298.909 660.347 Q295.298 660.347 293.469 663.912 Q291.664 667.454 291.664 674.583 Q291.664 681.69 293.469 685.254 Q295.298 688.796 298.909 688.796 Q302.543 688.796 304.349 685.254 Q306.177 681.69 306.177 674.583 Q306.177 667.454 304.349 663.912 Q302.543 660.347 298.909 660.347 M298.909 656.643 Q304.719 656.643 307.775 661.25 Q310.853 665.833 310.853 674.583 Q310.853 683.31 307.775 687.916 Q304.719 692.5 298.909 692.5 Q293.099 692.5 290.02 687.916 Q286.964 683.31 286.964 674.583 Q286.964 665.833 290.02 661.25 Q293.099 656.643 298.909 656.643 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M271.594 504.447 L259.789 522.896 L271.594 522.896 L271.594 504.447 M270.367 500.373 L276.247 500.373 L276.247 522.896 L281.177 522.896 L281.177 526.785 L276.247 526.785 L276.247 534.933 L271.594 534.933 L271.594 526.785 L255.992 526.785 L255.992 522.271 L270.367 500.373 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M298.909 503.451 Q295.298 503.451 293.469 507.016 Q291.664 510.558 291.664 517.687 Q291.664 524.794 293.469 528.359 Q295.298 531.9 298.909 531.9 Q302.543 531.9 304.349 528.359 Q306.177 524.794 306.177 517.687 Q306.177 510.558 304.349 507.016 Q302.543 503.451 298.909 503.451 M298.909 499.748 Q304.719 499.748 307.775 504.354 Q310.853 508.937 310.853 517.687 Q310.853 526.414 307.775 531.021 Q304.719 535.604 298.909 535.604 Q293.099 535.604 290.02 531.021 Q286.964 526.414 286.964 517.687 Q286.964 508.937 290.02 504.354 Q293.099 499.748 298.909 499.748 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M258.793 343.477 L277.15 343.477 L277.15 347.412 L263.076 347.412 L263.076 355.884 Q264.094 355.537 265.113 355.375 Q266.131 355.19 267.15 355.19 Q272.937 355.19 276.316 358.361 Q279.696 361.532 279.696 366.949 Q279.696 372.528 276.224 375.63 Q272.752 378.708 266.432 378.708 Q264.256 378.708 261.988 378.338 Q259.742 377.968 257.335 377.227 L257.335 372.528 Q259.418 373.662 261.641 374.218 Q263.863 374.773 266.34 374.773 Q270.344 374.773 272.682 372.667 Q275.02 370.56 275.02 366.949 Q275.02 363.338 272.682 361.231 Q270.344 359.125 266.34 359.125 Q264.465 359.125 262.59 359.542 Q260.738 359.958 258.793 360.838 L258.793 343.477 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M298.909 346.556 Q295.298 346.556 293.469 350.12 Q291.664 353.662 291.664 360.792 Q291.664 367.898 293.469 371.463 Q295.298 375.005 298.909 375.005 Q302.543 375.005 304.349 371.463 Q306.177 367.898 306.177 360.792 Q306.177 353.662 304.349 350.12 Q302.543 346.556 298.909 346.556 M298.909 342.852 Q304.719 342.852 307.775 347.458 Q310.853 352.042 310.853 360.792 Q310.853 369.518 307.775 374.125 Q304.719 378.708 298.909 378.708 Q293.099 378.708 290.02 374.125 Q286.964 369.518 286.964 360.792 Q286.964 352.042 290.02 347.458 Q293.099 342.852 298.909 342.852 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M269.326 201.998 Q266.178 201.998 264.326 204.151 Q262.497 206.303 262.497 210.053 Q262.497 213.78 264.326 215.956 Q266.178 218.109 269.326 218.109 Q272.474 218.109 274.303 215.956 Q276.154 213.78 276.154 210.053 Q276.154 206.303 274.303 204.151 Q272.474 201.998 269.326 201.998 M278.608 187.345 L278.608 191.604 Q276.849 190.771 275.043 190.331 Q273.261 189.891 271.502 189.891 Q266.872 189.891 264.418 193.016 Q261.988 196.141 261.641 202.461 Q263.006 200.447 265.066 199.382 Q267.127 198.294 269.603 198.294 Q274.812 198.294 277.821 201.465 Q280.853 204.614 280.853 210.053 Q280.853 215.377 277.705 218.595 Q274.557 221.813 269.326 221.813 Q263.33 221.813 260.159 217.229 Q256.988 212.623 256.988 203.896 Q256.988 195.702 260.877 190.84 Q264.766 185.956 271.316 185.956 Q273.076 185.956 274.858 186.303 Q276.664 186.651 278.608 187.345 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M298.909 189.66 Q295.298 189.66 293.469 193.225 Q291.664 196.766 291.664 203.896 Q291.664 211.002 293.469 214.567 Q295.298 218.109 298.909 218.109 Q302.543 218.109 304.349 214.567 Q306.177 211.002 306.177 203.896 Q306.177 196.766 304.349 193.225 Q302.543 189.66 298.909 189.66 M298.909 185.956 Q304.719 185.956 307.775 190.563 Q310.853 195.146 310.853 203.896 Q310.853 212.623 307.775 217.229 Q304.719 221.813 298.909 221.813 Q293.099 221.813 290.02 217.229 Q286.964 212.623 286.964 203.896 Q286.964 195.146 290.02 190.563 Q293.099 185.956 298.909 185.956 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip562)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1029.63 400.199,923.424 400.786,945.535 401.372,850.281 401.958,763.005 402.545,681.25 403.131,606.588 403.718,540.131 404.304,479.934 404.891,427.14 405.477,379.276 406.063,416.813 406.65,373.106 407.236,335.476 407.823,300.509 408.409,271.061 408.995,243.732 409.582,219.895 410.168,252.799 410.755,235.003 411.341,264.714 411.927,249.606 412.514,275.858 413.1,264.573 413.687,288.936 414.273,280.898 414.86,274.357 415.446,270.653 416.032,268.29 416.619,267.47 417.205,267.996 417.792,270.266 418.378,273.438 418.964,277.976 419.551,283.631 420.137,289.681 420.724,296.896 421.31,304.972 421.896,328.895 422.483,352.571 423.069,377.015 423.656,399.656 424.242,411.704 424.829,423.254 425.415,445.435 426.001,477.665 426.588,498.577 427.174,509.404 427.761,529.483 428.347,548.748 428.933,581.556 429.52,591.368 430.106,608.694 430.693,637.94 431.279,666.289 431.865,675.65 432.452,695.5 433.038,704.446 433.625,719.012 434.211,732.38 434.798,754.907 435.384,768.292 435.97,776.925 436.557,785.506 437.143,798.059 437.73,814.308 438.316,822.33 438.902,830.489 439.489,842.488 440.075,850.984 440.662,869.381 441.248,880.034 441.835,890.543 442.421,898.003 443.007,904.992 443.594,920.918 444.18,927.697 444.767,934.487 445.353,946.763 445.939,955.803 446.526,961.694 447.112,975.796 447.699,986.215 448.285,996.471 448.871,1003.74 449.458,1008.67 450.044,1015.9 450.631,1022.93 451.217,1032.45 451.804,1037.07 452.39,1041.42 452.976,1047.72 453.563,1056.26 454.149,1068.81 454.736,1078.62 455.322,1083.94 455.908,1089.2 456.495,1094.46 457.081,1097.7 457.668,1104.61 458.254,1109.24 458.84,1115.74 459.427,1120.02 460.013,1122.4 460.6,1128.6 461.186,1131.07 461.773,1133.33 462.359,1135.78 462.945,1143.17 463.532,1150.32 464.118,1153.8 464.705,1155.32 465.291,1162.06 465.877,1166.44 466.464,1167.93 467.05,1170.82 467.637,1175.17 468.223,1182.53 468.809,1187.93 469.396,1193.24 469.982,1195.17 470.569,1198.45 471.155,1198.46 471.742,1198.77 472.328,1198.93 472.914,1200.72 473.501,1204.11 474.087,1205.82 474.674,1202.98 475.26,1205 475.846,1208.34 476.433,1211.42 477.019,1211.33 477.606,1213 478.192,1217.44 478.778,1217.02 479.365,1218.51 479.951,1216.81 480.538,1222.73 481.124,1222.45 481.711,1225.04 482.297,1227.61 482.883,1228.54 483.47,1227.91 484.056,1229.15 484.643,1229.91 485.229,1232.37 485.815,1234.55 486.402,1235.28 486.988,1237.46 487.575,1236.91 488.161,1237.74 488.748,1237.01 489.334,1236.35 489.92,1235.81 490.507,1236.61 491.093,1235.97 491.68,1235.4 492.266,1237.48 492.852,1236.64 493.439,1235.85 494.025,1236.55 494.612,1236.22 495.198,1238.39 495.784,1239.25 496.371,1239.59 496.957,1240.07 497.544,1241.84 498.13,1243.52 498.717,1243.96 499.303,1243.1 499.889,1240.54 500.476,1240.1 501.062,1239.31 501.649,1239.97 502.235,1240.62 502.821,1238.61 503.408,1238.16 503.994,1238.75 504.581,1241.01 505.167,1240.25 505.753,1242.42 506.34,1241.57 506.926,1239.46 507.513,1241.47 508.099,1243.42 508.686,1245.28 509.272,1243 509.858,1244.01 510.445,1248.61 511.031,1248.81 511.618,1250.53 512.204,1249.19 512.79,1246.71 513.377,1248.74 513.963,1247.79 514.55,1244.13 515.136,1245.9 515.722,1243.4 516.309,1241.58 516.895,1242.06 517.482,1238.74 518.068,1239.68 518.655,1237.89 519.241,1234.73 519.827,1234.5 520.414,1234.06 521,1233.72 521.587,1234.91 522.173,1236.04 522.759,1234.3 523.346,1232.68 523.932,1233.76 524.519,1233.6 525.105,1231.05 525.691,1228.31 526.278,1230.02 526.864,1229.86 527.451,1228.63 528.037,1229.81 528.624,1231.03 529.21,1232.2 529.796,1230.86 530.383,1230.62 530.969,1233.07 531.556,1234.15 532.142,1234.07 532.728,1236.47 533.315,1234.74 533.901,1237.34 534.488,1236.78 535.074,1233.61 535.661,1234.63 536.247,1236.83 536.833,1237.73 537.42,1239.83 538.006,1239.41 538.593,1242.82 539.179,1241.97 539.765,1241.06 540.352,1240.43 540.938,1238.64 541.525,1242.02 542.111,1241.28 542.697,1239.39 543.284,1238.75 543.87,1238.3 544.457,1239.01 545.043,1238.36 545.63,1239.03 546.216,1238.64 546.802,1239.21 547.389,1238.67 547.975,1239.38 548.562,1239.91 549.148,1239.34 549.734,1238.33 550.321,1241.54 550.907,1241.8 551.494,1240.89 552.08,1241.34 552.666,1241.88 553.253,1242.52 553.839,1240.25 554.426,1242 555.012,1239.62 555.599,1237.65 556.185,1237.2 556.771,1239.05 557.358,1238.16 557.944,1237.6 558.531,1236.73 559.117,1235.09 559.703,1235.58 560.29,1232.51 560.876,1232.27 561.463,1235.48 562.049,1233.45 562.635,1232.96 563.222,1232.47 563.808,1232.13 564.395,1232.98 564.981,1232.47 565.568,1232.2 566.154,1232.03 566.74,1231.54 567.327,1233.52 567.913,1231.57 568.5,1230.92 569.086,1233.31 569.672,1234.34 570.259,1233.72 570.845,1234.52 571.432,1234.09 572.018,1232.21 572.605,1231.75 573.191,1233.81 573.777,1232.16 574.364,1231.88 574.95,1230.13 575.537,1233.4 576.123,1231.59 576.709,1230.9 577.296,1230.22 577.882,1231.18 578.469,1231.93 579.055,1231.66 579.641,1234.8 580.228,1234.27 580.814,1229.47 581.401,1229.55 581.987,1229.1 582.574,1227.1 583.16,1224.13 583.746,1220.19 584.333,1220.41 584.919,1217.84 585.506,1217.09 586.092,1217.36 586.678,1217.78 587.265,1219.17 587.851,1220.59 588.438,1221.93 589.024,1223.32 589.61,1220.63 590.197,1222.14 590.783,1221.79 591.37,1220.41 591.956,1220.46 592.543,1222.92 593.129,1223.92 593.715,1223.41 594.302,1223.38 594.888,1223.22 595.475,1224.42 596.061,1223.12 596.647,1225.92 597.234,1228.31 597.82,1231.66 598.407,1229.86 598.993,1230.73 599.579,1228.75 600.166,1228.18 600.752,1226.31 601.339,1227.44 601.925,1228.6 602.512,1228.09 603.098,1228.83 603.684,1228.31 604.271,1230.59 604.857,1232.43 605.444,1230.31 606.03,1232.54 606.616,1233.14 607.203,1233.69 607.789,1234.31 608.376,1234.75 608.962,1235.08 609.548,1235.08 610.135,1233.06 610.721,1232.64 611.308,1231.88 611.894,1229.69 612.481,1228.94 613.067,1227.22 613.653,1226.81 614.24,1226.13 614.826,1229.59 615.413,1230.49 615.999,1233.57 616.585,1231.56 617.172,1233.36 617.758,1232.56 618.345,1232.97 618.931,1232.05 619.518,1229.12 620.104,1227.08 620.69,1231.86 621.277,1232.3 621.863,1234.18 622.45,1232.07 623.036,1230.02 623.622,1229.13 624.209,1227.37 624.795,1223.88 625.382,1221.36 625.968,1221.38 626.554,1217.37 627.141,1216.25 627.727,1216.33 628.314,1220.26 628.9,1225.3 629.487,1227.28 630.073,1226.64 630.659,1225.99 631.246,1221.77 631.832,1223.14 632.419,1221.54 633.005,1221.2 633.591,1219.36 634.178,1219.57 634.764,1219.12 635.351,1218.74 635.937,1217.36 636.523,1214.72 637.11,1216.04 637.696,1216.02 638.283,1216.11 638.869,1217.44 639.456,1218.38 640.042,1216.99 640.628,1219.48 641.215,1219.15 641.801,1216.23 642.388,1214.9 642.974,1213.55 643.56,1216.15 644.147,1216.22 644.733,1215.06 645.32,1216.26 645.906,1218.82 646.492,1219.95 647.079,1218.48 647.665,1219.7 648.252,1224.6 648.838,1225.5 649.425,1220.01 650.011,1219.99 650.597,1222.15 651.184,1225.46 651.77,1227.49 652.357,1225.6 652.943,1223.74 653.529,1223.13 654.116,1221.29 654.702,1219.95 655.289,1219.76 655.875,1218.18 656.462,1217.98 657.048,1217.91 657.634,1216.45 658.221,1216.45 658.807,1216.54 659.394,1213.61 659.98,1215.24 660.566,1214.09 661.153,1214.34 661.739,1214.55 662.326,1217.08 662.912,1217.89 663.498,1215.32 664.085,1214.32 664.671,1214.54 665.258,1214.58 665.844,1214.94 666.431,1215.09 667.017,1214.79 667.603,1214.85 668.19,1212.39 668.776,1213.91 669.363,1216.38 669.949,1215.09 670.535,1217.81 671.122,1217.54 671.708,1217.41 672.295,1217.43 672.881,1216.27 673.467,1216.43 674.054,1218.8 674.64,1218.64 675.227,1223.45 675.813,1221.76 676.4,1223.8 676.986,1220.94 677.572,1221.71 678.159,1222.48 678.745,1223.49 679.332,1225.49 679.918,1225.04 680.504,1222.04 681.091,1221.69 681.677,1221.33 682.264,1221.05 682.85,1220.67 683.436,1220.19 684.023,1218.66 684.609,1216.02 685.196,1216 685.782,1217.33 686.369,1216 686.955,1217.04 687.541,1215.84 688.128,1214.51 688.714,1215.64 689.301,1214.08 689.887,1214.19 690.473,1215.31 691.06,1216.67 691.646,1218.01 692.233,1217.91 692.819,1219.15 693.405,1218.78 693.992,1220.01 694.578,1217.22 695.165,1215.77 695.751,1216.88 696.338,1217.94 696.924,1216.53 697.51,1219.03 698.097,1218.87 698.683,1217.16 699.27,1218.41 699.856,1214.29 700.442,1214.21 701.029,1214.33 701.615,1213.05 702.202,1215.8 702.788,1219.38 703.375,1221.8 703.961,1221.36 704.547,1222.56 705.134,1219.27 705.72,1217.62 706.307,1215.98 706.893,1217.17 707.479,1217.09 708.066,1218.03 708.652,1217.8 709.239,1216.3 709.825,1219.07 710.411,1220.22 710.998,1217.3 711.584,1218.33 712.171,1217.77 712.757,1217.34 713.344,1217.16 713.93,1215.7 714.516,1215.64 715.103,1214.38 715.689,1212.95 716.276,1214.04 716.862,1215.35 717.448,1215.36 718.035,1215.1 718.621,1212.42 719.208,1213.8 719.794,1215.01 720.38,1219.87 720.967,1219.68 721.553,1215.53 722.14,1214.24 722.726,1215.4 723.313,1213.84 723.899,1215.15 724.485,1212.26 725.072,1212.08 725.658,1210.81 726.245,1210.88 726.831,1211.24 727.417,1209.71 728.004,1209.77 728.59,1211.21 729.177,1207.67 729.763,1206.6 730.349,1207.05 730.936,1207.36 731.522,1210.2 732.109,1209.91 732.695,1211.44 733.282,1208.74 733.868,1209.12 734.454,1209.27 735.041,1211.74 735.627,1209.38 736.214,1208.28 736.8,1211.06 737.386,1211.04 737.973,1215.03 738.559,1214.83 739.146,1213.38 739.732,1214.77 740.318,1214.73 740.905,1214.81 741.491,1214.91 742.078,1216.02 742.664,1215.98 743.251,1215.65 743.837,1214.27 744.423,1215.6 745.01,1216.61 745.596,1213.78 746.183,1210.98 746.769,1209.71 747.355,1209.79 747.942,1209.88 748.528,1209.9 749.115,1207.37 749.701,1206.46 750.288,1211.84 750.874,1212.09 751.46,1212.23 752.047,1210.97 752.633,1209.67 753.22,1208.79 753.806,1208.84 754.392,1210.3 754.979,1209.46 755.565,1210.86 756.152,1212.11 756.738,1211.99 757.324,1211.81 757.911,1211.55 758.497,1212.91 759.084,1212.87 759.67,1212.74 760.257,1211.11 760.843,1211.04 761.429,1211.12 762.016,1211.36 762.602,1211.6 763.189,1213.76 763.775,1213.7 764.361,1215.02 764.948,1217.58 765.534,1217.02 766.121,1217.96 766.707,1217.57 767.293,1217.35 767.88,1218.24 768.466,1217.83 769.053,1218.29 769.639,1217.77 770.226,1216.41 770.812,1213.7 771.398,1214.68 771.985,1212.99 772.571,1214.07 773.158,1214.14 773.744,1212.87 774.33,1212.59 774.917,1213.71 775.503,1214.88 776.09,1214.71 776.676,1214.52 777.262,1213.16 777.849,1214.3 778.435,1214 779.022,1215.14 779.608,1213.69 780.195,1211.28 780.781,1207.38 781.367,1210.08 781.954,1212.96 782.54,1210.65 783.127,1209.62 783.713,1210.96 784.299,1209.84 784.886,1208.46 785.472,1207.31 786.059,1207.77 786.645,1209.23 787.232,1208.2 787.818,1208.48 788.404,1206.01 788.991,1206.22 789.577,1207.47 790.164,1208.94 790.75,1210.19 791.336,1207.67 791.923,1206.54 792.509,1209.34 793.096,1209.5 793.682,1209.46 794.268,1210.71 794.855,1209.52 795.441,1208.41 796.028,1209.78 796.614,1211.28 797.201,1212.51 797.787,1214.86 798.373,1217.09 798.96,1216.81 799.546,1217.65 800.133,1219.84 800.719,1216.93 801.305,1216.49 801.892,1217.53 802.478,1220.04 803.065,1221.89 803.651,1221.25 804.237,1222.32 804.824,1223 805.41,1220.96 805.997,1217.99 806.583,1218.63 807.17,1215.89 807.756,1214.39 808.342,1212.59 808.929,1211.03 809.515,1209.76 810.102,1211 810.688,1213.43 811.274,1211.74 811.861,1214.18 812.447,1215.06 813.034,1212.27 813.62,1211.2 814.206,1213.64 814.793,1212.26 815.379,1213.43 815.966,1212.04 816.552,1211.87 817.139,1211.78 817.725,1214.29 818.311,1213.03 818.898,1210.37 819.484,1210.52 820.071,1211.69 820.657,1210.44 821.243,1207.99 821.83,1210.45 822.416,1208.14 823.003,1210.57 823.589,1211.1 824.175,1212.36 824.762,1213.3 825.348,1213.16 825.935,1211.65 826.521,1210.39 827.108,1207.97 827.694,1203.92 828.28,1205.73 828.867,1206.04 829.453,1205.96 830.04,1206.13 830.626,1206.74 831.212,1208.35 831.799,1211.09 832.385,1211.03 832.972,1211.11 833.558,1211.28 834.145,1210.14 834.731,1210.19 835.317,1210.15 835.904,1212.83 836.49,1210.43 837.077,1210.58 837.663,1211.7 838.249,1214.37 838.836,1214.38 839.422,1214.29 840.009,1215.43 840.595,1216.57 841.181,1216.11 841.768,1215.83 842.354,1218.25 842.941,1215.25 843.527,1213.71 844.114,1213.37 844.7,1213.04 845.286,1216.71 845.873,1216.39 846.459,1214.98 847.046,1215.92 847.632,1215.83 848.218,1216.85 848.805,1216.73 849.391,1217.6 849.978,1214.84 850.564,1214.6 851.15,1213.16 851.737,1210.54 852.323,1213 852.91,1212.75 853.496,1211.29 854.083,1213.67 854.669,1209.97 855.255,1211.25 855.842,1213.7 856.428,1213.2 857.015,1214.22 857.601,1215.37 858.187,1216.31 858.774,1217.31 859.36,1215.68 859.947,1215.45 860.533,1216.19 861.119,1216.93 861.706,1215.2 862.292,1212.53 862.879,1211.1 863.465,1209.78 864.052,1212.33 864.638,1213.46 865.224,1213.64 865.811,1215.78 866.397,1215.57 866.984,1214.18 867.57,1213.97 868.156,1213.71 868.743,1214.94 869.329,1213.26 869.916,1214.38 870.502,1216.79 871.089,1215.2 871.675,1217.5 872.261,1218.49 872.848,1217.82 873.434,1214.82 874.021,1209.61 874.607,1208.25 875.193,1206.92 875.78,1205.52 876.366,1204.23 876.953,1204.28 877.539,1206.1 878.125,1205.24 878.712,1203.08 879.298,1200.88 879.885,1201.07 880.471,1202.57 881.058,1202.65 881.644,1204.39 882.23,1204.87 882.817,1205.34 883.403,1206.7 883.99,1208.05 884.576,1206.77 885.162,1205.61 885.749,1205.64 886.335,1204.7 886.922,1207.74 887.508,1210.6 888.094,1209.34 888.681,1208.4 889.267,1208.47 889.854,1208.5 890.44,1209.62 891.027,1210.95 891.613,1212.22 892.199,1212.13 892.786,1211.8 893.372,1212.85 893.959,1213.61 894.545,1215.81 895.131,1212.9 895.718,1212.69 896.304,1212.62 896.891,1212.36 897.477,1213.63 898.063,1211.11 898.65,1212.13 899.236,1213.29 899.823,1212.98 900.409,1212.64 900.996,1211.02 901.582,1212.11 902.168,1208.01 902.755,1210.67 903.341,1210.43 903.928,1211.88 904.514,1210.33 905.1,1211.58 905.687,1207.62 906.273,1208.78 906.86,1209.03 907.446,1206.44 908.032,1206.59 908.619,1205.56 909.205,1205.85 909.792,1203.37 910.378,1202.66 910.965,1204.23 911.551,1202.89 912.137,1204.49 912.724,1204.52 913.31,1205.01 913.897,1203.96 914.483,1206.74 915.069,1208.35 915.656,1208.66 916.242,1208.86 916.829,1207.71 917.415,1206.71 918.002,1208.42 918.588,1209.74 919.174,1209.85 919.761,1209.92 920.347,1207.48 920.934,1205.11 921.52,1203.99 922.106,1203.12 922.693,1203.57 923.279,1203.98 923.866,1203.18 924.452,1204.85 925.038,1206.33 925.625,1209.19 926.211,1209.18 926.798,1210.43 927.384,1208.22 927.971,1209.52 928.557,1208.36 929.143,1205.91 929.73,1204.9 930.316,1205.31 930.903,1207.07 931.489,1209.87 932.075,1208.48 932.662,1209.61 933.248,1205.97 933.835,1205.18 934.421,1206.6 935.007,1207.1 935.594,1210.04 936.18,1209.87 936.767,1211.14 937.353,1209.87 937.94,1204.76 938.526,1205.38 939.112,1206.98 939.699,1206.79 940.285,1206.76 940.872,1206.73 941.458,1207.24 942.044,1207.17 942.631,1209.86 943.217,1208.34 943.804,1208.48 944.39,1209.98 944.976,1209.92 945.563,1212.53 946.149,1208.29 946.736,1211.14 947.322,1208.44 947.909,1211.03 948.495,1212.4 949.081,1210.98 949.668,1211.85 950.254,1213.25 950.841,1211.55 951.427,1210.38 952.013,1210.15 952.6,1213.73 953.186,1213.42 953.773,1215.84 954.359,1214.3 954.945,1212.79 955.532,1208.54 956.118,1208.48 956.705,1207.25 957.291,1204.7 957.878,1206.28 958.464,1206.4 959.05,1207.78 959.637,1207.68 960.223,1206.59 960.81,1206.72 961.396,1208.19 961.982,1212.14 962.569,1212.06 963.155,1213.05 963.742,1213.05 964.328,1211.76 964.915,1212.84 965.501,1214.17 966.087,1214 966.674,1211.6 967.26,1208.96 967.847,1207.75 968.433,1207.96 969.019,1204.35 969.606,1206.03 970.192,1207.36 970.779,1210.21 971.365,1211.59 971.951,1211.29 972.538,1212.63 973.124,1212.43 973.711,1212.38 974.297,1213.58 974.884,1212.11 975.47,1210.24 976.056,1211.49 976.643,1211.37 977.229,1207.42 977.816,1206.18 978.402,1206.52 978.988,1208.01 979.575,1208.06 980.161,1206.68 980.748,1206.97 981.334,1205.74 981.92,1208.53 982.507,1208.73 983.093,1208.76 983.68,1207.47 984.266,1206.39 984.853,1205.44 985.439,1205.7 986.025,1207.5 986.612,1210.13 987.198,1212.71 987.785,1213.98 988.371,1216.43 988.957,1217.35 989.544,1217.08 990.13,1215.29 990.717,1214.9 991.303,1214.64 991.889,1214.46 992.476,1215.32 993.062,1214.84 993.649,1214.22 994.235,1211.22 994.822,1212.48 995.408,1211.18 995.994,1210.96 996.581,1210.87 997.167,1212.01 997.754,1213.35 998.34,1209.13 998.926,1207.84 999.513,1207.81 1000.1,1205.54 1000.69,1203.17 1001.27,1203.49 1001.86,1203.73 1002.44,1202.53 1003.03,1203.01 1003.62,1204.71 1004.2,1203.63 1004.79,1203.84 1005.38,1204.16 1005.96,1204.21 1006.55,1202.95 1007.14,1202.08 1007.72,1202.17 1008.31,1203.79 1008.9,1206.38 1009.48,1207.96 1010.07,1210.71 1010.65,1210.36 1011.24,1208.82 1011.83,1210.15 1012.41,1208.91 1013,1210.06 1013.59,1210.06 1014.17,1209.02 1014.76,1209.25 1015.35,1209.26 1015.93,1209.27 1016.52,1209.33 1017.11,1208.91 1017.69,1208.88 1018.28,1208.95 1018.86,1207.75 1019.45,1207.9 1020.04,1208.08 1020.62,1212.17 1021.21,1213.25 1021.8,1213.15 1022.38,1208.99 1022.97,1207.61 1023.56,1207.54 1024.14,1207.6 1024.73,1206.3 1025.32,1207.84 1025.9,1209.14 1026.49,1209.03 1027.07,1208.94 1027.66,1209.95 1028.25,1207.23 1028.83,1207.38 1029.42,1207.55 1030.01,1208.62 1030.59,1208.51 1031.18,1208.65 1031.77,1208.5 1032.35,1206.12 1032.94,1206.25 1033.52,1207.52 1034.11,1207.72 1034.7,1209.02 1035.28,1208.93 1035.87,1210 1036.46,1211 1037.04,1209.5 1037.63,1211.92 1038.22,1210.29 1038.8,1209.16 1039.39,1208.97 1039.98,1211.63 1040.56,1209.03 1041.15,1210.29 1041.73,1208.67 1042.32,1207.54 1042.91,1210.15 1043.49,1210.24 1044.08,1210.44 1044.67,1211.78 1045.25,1211.47 1045.84,1210.13 1046.43,1210.05 1047.01,1208.85 1047.6,1206.33 1048.19,1208.89 1048.77,1207.92 1049.36,1209.12 1049.94,1208.04 1050.53,1209.28 1051.12,1209.12 1051.7,1209.03 1052.29,1209.14 1052.88,1210.58 1053.46,1211.61 1054.05,1213.81 1054.64,1212.03 1055.22,1211.88 1055.81,1209.27 1056.39,1206.69 1056.98,1208.12 1057.57,1206.56 1058.15,1205.33 1058.74,1205.57 1059.33,1207.05 1059.91,1204.5 1060.5,1209.6 1061.09,1208.37 1061.67,1209.6 1062.26,1209.62 1062.85,1211.09 1063.43,1209.29 1064.02,1208.01 1064.6,1206.84 1065.19,1204.56 1065.78,1203.58 1066.36,1201.18 1066.95,1204.18 1067.54,1205.7 1068.12,1208.63 1068.71,1210.18 1069.3,1212.74 1069.88,1210.1 1070.47,1210.11 1071.06,1208.63 1071.64,1207.27 1072.23,1204.7 1072.81,1203.83 1073.4,1204.31 1073.99,1204.56 1074.57,1204.75 1075.16,1202.4 1075.75,1201.37 1076.33,1200.36 1076.92,1200.96 1077.51,1201.27 1078.09,1201.4 1078.68,1204.28 1079.26,1207.12 1079.85,1205.86 1080.44,1204.79 1081.02,1206.45 1081.61,1206.54 1082.2,1204.21 1082.78,1206.97 1083.37,1205.6 1083.96,1208.35 1084.54,1209.56 1085.13,1209.61 1085.72,1207.09 1086.3,1205.84 1086.89,1207.25 1087.47,1208.6 1088.06,1209.4 1088.65,1209.46 1089.23,1208.2 1089.82,1208.11 1090.41,1210.42 1090.99,1207.68 1091.58,1212.58 1092.17,1212.35 1092.75,1210.73 1093.34,1209.23 1093.93,1208.12 1094.51,1209.4 1095.1,1209.06 1095.68,1207.97 1096.27,1206.58 1096.86,1206.6 1097.44,1208.18 1098.03,1209.24 1098.62,1209.45 1099.2,1210.51 1099.79,1210.25 1100.38,1210.31 1100.96,1210.16 1101.55,1208.57 1102.14,1209.7 1102.72,1211.4 1103.31,1211.25 1103.89,1211.13 1104.48,1211.25 1105.07,1210.72 1105.65,1209.23 1106.24,1206.42 1106.83,1206.7 1107.41,1205.51 1108,1205.8 1108.59,1207.23 1109.17,1208.7 1109.76,1207.43 1110.34,1207.5 1110.93,1210.14 1111.52,1210.17 1112.1,1210.07 1112.69,1208.73 1113.28,1208.96 1113.86,1209 1114.45,1207.67 1115.04,1207.73 1115.62,1209.21 1116.21,1209.05 1116.8,1207.43 1117.38,1206.12 1117.97,1203.58 1118.55,1206.43 1119.14,1205.42 1119.73,1209.63 1120.31,1209.46 1120.9,1210.85 1121.49,1210.62 1122.07,1211.82 1122.66,1213.2 1123.25,1213.11 1123.83,1213.2 1124.42,1213.26 1125.01,1211.97 1125.59,1211.67 1126.18,1212.36 1126.76,1212.05 1127.35,1214.23 1127.94,1214.17 1128.52,1214.29 1129.11,1214.08 1129.7,1213.88 1130.28,1213.56 1130.87,1210.84 1131.46,1209.45 1132.04,1212.08 1132.63,1211.59 1133.21,1211.19 1133.8,1211.15 1134.39,1209.86 1134.97,1211.11 1135.56,1207.19 1136.15,1207.41 1136.73,1207.77 1137.32,1205.28 1137.91,1205.24 1138.49,1206.61 1139.08,1209.32 1139.67,1209.37 1140.25,1210.77 1140.84,1210.75 1141.42,1211.63 1142.01,1211.57 1142.6,1210.09 1143.18,1212.52 1143.77,1211.07 1144.36,1213.46 1144.94,1214.6 1145.53,1214.25 1146.12,1213.88 1146.7,1213.74 1147.29,1214.6 1147.88,1213.97 1148.46,1213.59 1149.05,1211.99 1149.63,1211.85 1150.22,1212.67 1150.81,1211.32 1151.39,1208.62 1151.98,1209.72 1152.57,1208.37 1153.15,1208.46 1153.74,1208.52 1154.33,1208.51 1154.91,1208.66 1155.5,1206.42 1156.09,1207.61 1156.67,1208.86 1157.26,1211.36 1157.84,1212.35 1158.43,1210.84 1159.02,1209.45 1159.6,1210.37 1160.19,1210.02 1160.78,1208.84 1161.36,1206.32 1161.95,1207.79 1162.54,1210.18 1163.12,1212.69 1163.71,1215.05 1164.29,1212.21 1164.88,1212.06 1165.47,1213.18 1166.05,1214.25 1166.64,1211.25 1167.23,1213.45 1167.81,1209.33 1168.4,1208.05 1168.99,1208.03 1169.57,1210.98 1170.16,1209.51 1170.75,1209.45 1171.33,1208.05 1171.92,1209.14 1172.5,1208.06 1173.09,1209.34 1173.68,1208.13 1174.26,1208.25 1174.85,1209.41 1175.44,1210.58 1176.02,1210.4 1176.61,1207.94 1177.2,1208.14 1177.78,1208.63 1178.37,1212.16 1178.96,1216.92 1179.54,1215.17 1180.13,1212.46 1180.71,1209.73 1181.3,1208.18 1181.89,1208.09 1182.47,1207.23 1183.06,1205.99 1183.65,1204.87 1184.23,1205.21 1184.82,1204.07 1185.41,1205.81 1185.99,1207.27 1186.58,1205.85 1187.16,1208.43 1187.75,1207.23 1188.34,1208.5 1188.92,1209.6 1189.51,1209.74 1190.1,1210.9 1190.68,1209.59 1191.27,1208.75 1191.86,1206.36 1192.44,1206.5 1193.03,1204.05 1193.62,1207 1194.2,1207.23 1194.79,1208.33 1195.37,1207.17 1195.96,1207.21 1196.55,1208.54 1197.13,1211.13 1197.72,1213.3 1198.31,1214.25 1198.89,1213.87 1199.48,1214.57 1200.07,1214.35 1200.65,1213.91 1201.24,1213.42 1201.83,1213.19 1202.41,1214.06 1203,1213.66 1203.58,1213.37 1204.17,1212.99 1204.76,1210.13 1205.34,1208.78 1205.93,1209.83 1206.52,1206.93 1207.1,1207.11 1207.69,1209.41 1208.28,1210.66 1208.86,1211.67 1209.45,1213.13 1210.03,1212.65 1210.62,1216.18 1211.21,1219.51 1211.79,1218.76 1212.38,1216.88 1212.97,1216.4 1213.55,1215.61 1214.14,1211.36 1214.73,1211.14 1215.31,1211 1215.9,1210.97 1216.49,1209.55 1217.07,1208.39 1217.66,1208.35 1218.24,1208.45 1218.83,1210.92 1219.42,1205.78 1220,1206.06 1220.59,1203.58 1221.18,1202.54 1221.76,1202.72 1222.35,1201.81 1222.94,1201.23 1223.52,1205.4 1224.11,1206.85 1224.7,1207.93 1225.28,1209.3 1225.87,1205.48 1226.45,1206.98 1227.04,1207.18 1227.63,1204.89 1228.21,1203.65 1228.8,1207.57 1229.39,1208.9 1229.97,1207.51 1230.56,1203.48 1231.15,1203.66 1231.73,1204.11 1232.32,1204.5 1232.91,1204.78 1233.49,1203.99 1234.08,1204.33 1234.66,1203.17 1235.25,1203.53 1235.84,1202.4 1236.42,1202.78 1237.01,1203.34 1237.6,1204.9 1238.18,1205.3 1238.77,1205.3 1239.36,1204.25 1239.94,1203.4 1240.53,1202.61 1241.11,1203.11 1241.7,1201.92 1242.29,1204.63 1242.87,1205.99 1243.46,1202.42 1244.05,1202.5 1244.63,1203.09 1245.22,1204.67 1245.81,1205.07 1246.39,1207.56 1246.98,1209 1247.57,1210.39 1248.15,1210.28 1248.74,1208.95 1249.32,1207.7 1249.91,1207.59 1250.5,1205.34 1251.08,1208.46 1251.67,1210.88 1252.26,1206.96 1252.84,1208.5 1253.43,1209.86 1254.02,1209.72 1254.6,1211.13 1255.19,1213.57 1255.78,1212.27 1256.36,1210.9 1256.95,1210.91 1257.53,1210.66 1258.12,1210.64 1258.71,1209.29 1259.29,1210.64 1259.88,1209.29 1260.47,1210.57 1261.05,1211.52 1261.64,1211.43 1262.23,1211.15 1262.81,1208.52 1263.4,1208.24 1263.98,1210.81 1264.57,1210.74 1265.16,1211.76 1265.74,1212.7 1266.33,1211.28 1266.92,1211.15 1267.5,1210.95 1268.09,1210.7 1268.68,1209.34 1269.26,1208.12 1269.85,1210.89 1270.44,1209.29 1271.02,1209.07 1271.61,1207.79 1272.19,1206.76 1272.78,1206.86 1273.37,1204.28 1273.95,1201.95 1274.54,1202.25 1275.13,1201.36 1275.71,1197.82 1276.3,1198.13 1276.89,1200.18 1277.47,1199.38 1278.06,1197.39 1278.65,1199.19 1279.23,1197.22 1279.82,1196.39 1280.4,1198.56 1280.99,1200.53 1281.58,1202.32 1282.16,1201.32 1282.75,1204.15 1283.34,1201.9 1283.92,1199.74 1284.51,1201.51 1285.1,1203.34 1285.68,1203.51 1286.27,1204.81 1286.86,1204 1287.44,1200.58 1288.03,1202.43 1288.61,1205.56 1289.2,1207.17 1289.79,1207.17 1290.37,1204.69 1290.96,1205.15 1291.55,1204.22 1292.13,1204.44 1292.72,1207.41 1293.31,1207.63 1293.89,1206.27 1294.48,1206.13 1295.06,1206.08 1295.65,1203.46 1296.24,1202.27 1296.82,1202.72 1297.41,1204.2 1298,1205.77 1298.58,1207.14 1299.17,1209.68 1299.76,1207.15 1300.34,1208.55 1300.93,1208.67 1301.52,1208.85 1302.1,1208.56 1302.69,1208.61 1303.27,1211.13 1303.86,1212.36 1304.45,1212.07 1305.03,1209.17 1305.62,1208.87 1306.21,1208.54 1306.79,1211.12 1307.38,1212.36 1307.97,1210.86 1308.55,1209.41 1309.14,1208.98 1309.73,1210.1 1310.31,1208.73 1310.9,1209.85 1311.48,1209.8 1312.07,1209.72 1312.66,1212.3 1313.24,1211.05 1313.83,1210.95 1314.42,1208.29 1315,1208.61 1315.59,1211.04 1316.18,1211.07 1316.76,1210.78 1317.35,1209.42 1317.93,1209.31 1318.52,1213.48 1319.11,1211.87 1319.69,1213.25 1320.28,1211.82 1320.87,1210.34 1321.45,1211.56 1322.04,1212.85 1322.63,1212.64 1323.21,1212.49 1323.8,1211.25 1324.39,1210.87 1324.97,1214.52 1325.56,1211.76 1326.14,1211.58 1326.73,1210.13 1327.32,1207.24 1327.9,1206.15 1328.49,1205.1 1329.08,1205.71 1329.66,1205.79 1330.25,1202.42 1330.84,1203.81 1331.42,1205.17 1332.01,1204.08 1332.6,1204.1 1333.18,1209.65 1333.77,1212.07 1334.35,1214.47 1334.94,1214.2 1335.53,1215.02 1336.11,1214.54 1336.7,1213.14 1337.29,1215.57 1337.87,1212.71 1338.46,1212.31 1339.05,1212.02 1339.63,1211.79 1340.22,1211.57 1340.8,1212.54 1341.39,1214.73 1341.98,1215.78 1342.56,1217.86 1343.15,1215.95 1343.74,1217.78 1344.32,1216.09 1344.91,1217.07 1345.5,1215.44 1346.08,1217.59 1346.67,1218.41 1347.26,1217.81 1347.84,1219.89 1348.43,1220.8 1349.01,1219.99 1349.6,1218.17 1350.19,1216.11 1350.77,1214.05 1351.36,1215.27 1351.95,1212.4 1352.53,1212.22 1353.12,1213.25 1353.71,1212.88 1354.29,1212.3 1354.88,1213.26 1355.47,1211.86 1356.05,1210.61 1356.64,1210.44 1357.22,1207.75 1357.81,1206.42 1358.4,1206.39 1358.98,1202.49 1359.57,1201.36 1360.16,1201.73 1360.74,1200.58 1361.33,1200.89 1361.92,1198.5 1362.5,1201.34 1363.09,1203.18 1363.68,1198.21 1364.26,1197.54 1364.85,1201.9 1365.43,1202.2 1366.02,1202.39 1366.61,1202.83 1367.19,1203.08 1367.78,1204.59 1368.37,1206.11 1368.95,1204.88 1369.54,1203.96 1370.13,1206.61 1370.71,1203 1371.3,1204.75 1371.88,1205.01 1372.47,1206.12 1373.06,1207.48 1373.64,1206.28 1374.23,1206.75 1374.82,1208.1 1375.4,1208.17 1375.99,1209.7 1376.58,1213.5 1377.16,1213.25 1377.75,1212.94 1378.34,1212.64 1378.92,1212.17 1379.51,1211.95 1380.09,1208.95 1380.68,1212.49 1381.27,1212.16 1381.85,1210.71 1382.44,1211.83 1383.03,1211.72 1383.61,1209.12 1384.2,1209.08 1384.79,1205.12 1385.37,1204.31 1385.96,1205.69 1386.55,1207.02 1387.13,1211.93 1387.72,1213.01 1388.3,1215.35 1388.89,1214.86 1389.48,1213.13 1390.06,1210.27 1390.65,1210.37 1391.24,1207.77 1391.82,1207.59 1392.41,1206.5 1393,1205.39 1393.58,1208.11 1394.17,1207.73 1394.75,1205.53 1395.34,1205.69 1395.93,1207 1396.51,1208.26 1397.1,1206.95 1397.69,1208.14 1398.27,1210.79 1398.86,1211.96 1399.45,1211.61 1400.03,1212.5 1400.62,1209.84 1401.21,1208.67 1401.79,1209.82 1402.38,1205.82 1402.96,1206 1403.55,1207.25 1404.14,1209.81 1404.72,1209.6 1405.31,1210.8 1405.9,1212.05 1406.48,1214.34 1407.07,1215.15 1407.66,1214.98 1408.24,1211.99 1408.83,1213.25 1409.42,1211.68 1410,1208.75 1410.59,1208.55 1411.17,1205.84 1411.76,1207.04 1412.35,1208.35 1412.93,1208.1 1413.52,1207.98 1414.11,1209.29 1414.69,1208.13 1415.28,1209.23 1415.87,1209.41 1416.45,1209.29 1417.04,1209.23 1417.63,1205.4 1418.21,1204.04 1418.8,1202.98 1419.38,1204.3 1419.97,1206.94 1420.56,1208.25 1421.14,1209.75 1421.73,1208.26 1422.32,1207.06 1422.9,1210.88 1423.49,1205.64 1424.08,1207.09 1424.66,1209.89 1425.25,1207.32 1425.83,1206.25 1426.42,1206.56 1427.01,1205.2 1427.59,1206.47 1428.18,1204 1428.77,1202.92 1429.35,1203.22 1429.94,1203.62 1430.53,1204.09 1431.11,1204.34 1431.7,1203.36 1432.29,1203.9 1432.87,1202.76 1433.46,1203.29 1434.04,1203.52 1434.63,1203.62 1435.22,1201.24 1435.8,1203.04 1436.39,1200.56 1436.98,1203.51 1437.56,1205.01 1438.15,1207.55 1438.74,1207.74 1439.32,1206.56 1439.91,1206.87 1440.5,1207.15 1441.08,1208.49 1441.67,1206.19 1442.25,1207.63 1442.84,1206.3 1443.43,1207.71 1444.01,1205.42 1444.6,1201.85 1445.19,1202.19 1445.77,1201.43 1446.36,1201.64 1446.95,1201.68 1447.53,1201.85 1448.12,1202.39 1448.7,1202.98 1449.29,1201.97 1449.88,1205.14 1450.46,1205.02 1451.05,1207.48 1451.64,1206.05 1452.22,1210.24 1452.81,1210.39 1453.4,1210.32 1453.98,1210.27 1454.57,1211.72 1455.16,1211.72 1455.74,1211.54 1456.33,1212.66 1456.91,1211.47 1457.5,1212.84 1458.09,1211.03 1458.67,1212.25 1459.26,1213.44 1459.85,1211.68 1460.43,1210.17 1461.02,1208.99 1461.61,1208.71 1462.19,1211.25 1462.78,1209.97 1463.37,1206.21 1463.95,1208.87 1464.54,1208.83 1465.12,1208.99 1465.71,1210.15 1466.3,1207.41 1466.88,1207.42 1467.47,1208.75 1468.06,1208.88 1468.64,1206.51 1469.23,1206.78 1469.82,1208.34 1470.4,1208.48 1470.99,1205.92 1471.57,1207.43 1472.16,1208.76 1472.75,1207.59 1473.33,1208.63 1473.92,1208.58 1474.51,1209.7 1475.09,1209.36 1475.68,1209.39 1476.27,1208.07 1476.85,1208.95 1477.44,1207.72 1478.03,1207.65 1478.61,1207.63 1479.2,1206.29 1479.78,1206.14 1480.37,1205.04 1480.96,1205.05 1481.54,1201.29 1482.13,1200.32 1482.72,1204.42 1483.3,1203.14 1483.89,1204.79 1484.48,1205.11 1485.06,1205.14 1485.65,1204.09 1486.24,1204.26 1486.82,1204.45 1487.41,1204.54 1487.99,1204.85 1488.58,1204.77 1489.17,1205.16 1489.75,1205.36 1490.34,1206.66 1490.93,1205.14 1491.51,1206.47 1492.1,1206.31 1492.69,1205.1 1493.27,1204 1493.86,1204.19 1494.45,1204.39 1495.03,1204.47 1495.62,1208.52 1496.2,1206.06 1496.79,1204.92 1497.38,1203.87 1497.96,1206.57 1498.55,1206.59 1499.14,1206.82 1499.72,1207.01 1500.31,1206.16 1500.9,1206.26 1501.48,1201.26 1502.07,1202.88 1502.65,1201.88 1503.24,1203.72 1503.83,1210.3 1504.41,1210.17 1505,1207.6 1505.59,1206.46 1506.17,1206.38 1506.76,1207.71 1507.35,1206.24 1507.93,1208.94 1508.52,1208.93 1509.11,1208.78 1509.69,1210.09 1510.28,1208.91 1510.86,1206.47 1511.45,1207.83 1512.04,1207.91 1512.62,1209.65 1513.21,1207.09 1513.8,1208.32 1514.38,1209.74 1514.97,1209.98 1515.56,1207.49 1516.14,1207.32 1516.73,1208.58 1517.32,1208.47 1517.9,1208.61 1518.49,1208.79 1519.07,1207.77 1519.66,1213.18 1520.25,1214.39 1520.83,1215.28 1521.42,1214.9 1522.01,1214.22 1522.59,1212.49 1523.18,1214.9 1523.77,1210.63 1524.35,1209.48 1524.94,1209.62 1525.52,1212 1526.11,1211.94 1526.7,1213.11 1527.28,1211.47 1527.87,1211.5 1528.46,1211.41 1529.04,1209.93 1529.63,1209.53 1530.22,1209.68 1530.8,1207.03 1531.39,1208.44 1531.98,1205.81 1532.56,1206.15 1533.15,1205.03 1533.73,1204.04 1534.32,1206.86 1534.91,1206.92 1535.49,1207.17 1536.08,1207.31 1536.67,1207.19 1537.25,1204.69 1537.84,1203.73 1538.43,1205.28 1539.01,1205.56 1539.6,1204.68 1540.19,1204.74 1540.77,1206.27 1541.36,1207.5 1541.94,1206.17 1542.53,1205.38 1543.12,1201.66 1543.7,1203.17 1544.29,1207.15 1544.88,1207.25 1545.46,1206.95 1546.05,1205.94 1546.64,1204.85 1547.22,1207.5 1547.81,1206.44 1548.4,1206.23 1548.98,1206.34 1549.57,1203.89 1550.15,1203 1550.74,1203.07 1551.33,1202.16 1551.91,1202.57 1552.5,1201.64 1553.09,1201.89 1553.67,1204.66 1554.26,1207.21 1554.85,1206.23 1555.43,1207.69 1556.02,1206.48 1556.6,1209.3 1557.19,1209.33 1557.78,1209.23 1558.36,1211.62 1558.95,1211.47 1559.54,1210.08 1560.12,1211.26 1560.71,1211.1 1561.3,1210.95 1561.88,1213.53 1562.47,1211.94 1563.06,1214.29 1563.64,1215.18 1564.23,1214.68 1564.81,1214.76 1565.4,1213.14 1565.99,1212.95 1566.57,1215.51 1567.16,1215.01 1567.75,1214.6 1568.33,1214.07 1568.92,1215.15 1569.51,1213.39 1570.09,1213.14 1570.68,1208.81 1571.27,1208.87 1571.85,1209.95 1572.44,1211.21 1573.02,1212.49 1573.61,1212.22 1574.2,1213.25 1574.78,1211.93 1575.37,1211.37 1575.96,1211.17 1576.54,1211.3 1577.13,1211.17 1577.72,1210.78 1578.3,1212.02 1578.89,1211.98 1579.47,1214.13 1580.06,1216.25 1580.65,1215.8 1581.23,1216.54 1581.82,1217.44 1582.41,1216.64 1582.99,1216.4 1583.58,1215.84 1584.17,1210.46 1584.75,1211.69 1585.34,1211.4 1585.93,1211.02 1586.51,1213.43 1587.1,1213.24 1587.68,1212.97 1588.27,1212.67 1588.86,1216.18 1589.44,1215.45 1590.03,1216.05 1590.62,1217.07 1591.2,1216.56 1591.79,1214.91 1592.38,1211.97 1592.96,1211.8 1593.55,1211.44 1594.14,1212.42 1594.72,1213.32 1595.31,1213.11 1595.89,1214.1 1596.48,1216.3 1597.07,1214.52 1597.65,1211.5 1598.24,1212.51 1598.83,1214.99 1599.41,1214.81 1600,1217.97 1600.59,1220.07 1601.17,1218.03 1601.76,1214.81 1602.34,1213.2 1602.93,1214.08 1603.52,1212.68 1604.1,1209.64 1604.69,1209.42 1605.28,1206.71 1605.86,1202.78 1606.45,1206.76 1607.04,1208.29 1607.62,1209.55 1608.21,1210.88 1608.8,1211.73 1609.38,1212.95 1609.97,1212.71 1610.55,1212.34 1611.14,1211.18 1611.73,1209.52 1612.31,1209.65 1612.9,1208.21 1613.49,1211.92 1614.07,1210.43 1614.66,1210.16 1615.25,1208.63 1615.83,1208.55 1616.42,1207.07 1617.01,1205.82 1617.59,1207.25 1618.18,1204.55 1618.76,1204.76 1619.35,1206.02 1619.94,1204.8 1620.52,1204.85 1621.11,1203.93 1621.7,1202.82 1622.28,1203.46 1622.87,1203.97 1623.46,1209.22 1624.04,1206.3 1624.63,1207.44 1625.22,1206.49 1625.8,1202.8 1626.39,1203.36 1626.97,1202.36 1627.56,1202.51 1628.15,1201.49 1628.73,1199.13 1629.32,1199.5 1629.91,1202.54 1630.49,1200.11 1631.08,1202.73 1631.67,1203.04 1632.25,1204.52 1632.84,1204.82 1633.42,1202.52 1634.01,1202.86 1634.6,1204.58 1635.18,1204.5 1635.77,1203.37 1636.36,1203.75 1636.94,1204.19 1637.53,1204.46 1638.12,1206 1638.7,1204.83 1639.29,1206.2 1639.88,1207.64 1640.46,1209.08 1641.05,1209.26 1641.63,1210.34 1642.22,1209.35 1642.81,1210.34 1643.39,1209.07 1643.98,1207.74 1644.57,1206.65 1645.15,1207.19 1645.74,1206.09 1646.33,1206.06 1646.91,1206.22 1647.5,1206.31 1648.09,1206.56 1648.67,1205.5 1649.26,1205.67 1649.84,1206.01 1650.43,1207.34 1651.02,1205.16 1651.6,1206.62 1652.19,1207.8 1652.78,1206.66 1653.36,1208.33 1653.95,1209.56 1654.54,1210.82 1655.12,1208.46 1655.71,1208.52 1656.29,1208.44 1656.88,1208.32 1657.47,1209.7 1658.05,1208.33 1658.64,1205.96 1659.23,1207.37 1659.81,1208.82 1660.4,1210 1660.99,1211.41 1661.57,1206.06 1662.16,1208.75 1662.75,1209.85 1663.33,1209.88 1663.92,1211.1 1664.5,1210.91 1665.09,1213.45 1665.68,1213.77 1666.26,1212.11 1666.85,1211.84 1667.44,1211.56 1668.02,1212.6 1668.61,1214.99 1669.2,1214.5 1669.78,1214.4 1670.37,1215.48 1670.96,1212.72 1671.54,1215.3 1672.13,1215.12 1672.71,1216.08 1673.3,1214.23 1673.89,1209.98 1674.47,1211.1 1675.06,1213.49 1675.65,1214.66 1676.23,1214.36 1676.82,1212.93 1677.41,1210.17 1677.99,1209.74 1678.58,1212.35 1679.17,1213.48 1679.75,1212.11 1680.34,1209.59 1680.92,1208.38 1681.51,1204.42 1682.1,1205.87 1682.68,1205.74 1683.27,1204.56 1683.86,1204.94 1684.44,1207.78 1685.03,1205.11 1685.62,1202.81 1686.2,1202.86 1686.79,1203.27 1687.37,1201.9 1687.96,1200.93 1688.55,1199.79 1689.13,1200.25 1689.72,1200.7 1690.31,1202.46 1690.89,1202.41 1691.48,1206.49 1692.07,1207.91 1692.65,1208.97 1693.24,1211.33 1693.83,1212.39 1694.41,1212.05 1695,1211.67 1695.58,1212.8 1696.17,1212.26 1696.76,1209.39 1697.34,1210.97 1697.93,1210.85 1698.52,1210.72 1699.1,1208 1699.69,1210.77 1700.28,1213.19 1700.86,1209.49 1701.45,1209.65 1702.04,1208.21 1702.62,1208.39 1703.21,1209.79 1703.79,1210.75 1704.38,1209.47 1704.97,1209.55 1705.55,1208.29 1706.14,1209.46 1706.73,1213.3 1707.31,1210.49 1707.9,1208.96 1708.49,1205 1709.07,1205.31 1709.66,1204.06 1710.24,1204.23 1710.83,1204.69 1711.42,1205.12 1712,1206.67 1712.59,1205.28 1713.18,1205.37 1713.76,1205.52 1714.35,1205.63 1714.94,1205.84 1715.52,1207.26 1716.11,1205.84 1716.7,1207.2 1717.28,1205.85 1717.87,1203.32 1718.45,1203.83 1719.04,1201.61 1719.63,1202.2 1720.21,1202.79 1720.8,1203.02 1721.39,1204.42 1721.97,1204.62 1722.56,1204.72 1723.15,1203.47 1723.73,1202.28 1724.32,1202.81 1724.91,1204.35 1725.49,1205.84 1726.08,1204.43 1726.66,1206.03 1727.25,1207.45 1727.84,1207.99 1728.42,1210.61 1729.01,1210.53 1729.6,1210.55 1730.18,1211.78 1730.77,1211.66 1731.36,1211.95 1731.94,1209.02 1732.53,1207.74 1733.11,1207.68 1733.7,1207.54 1734.29,1207.73 1734.87,1206.96 1735.46,1203.23 1736.05,1203.76 1736.63,1204.13 1737.22,1206.95 1737.81,1208.66 1738.39,1207.57 1738.98,1206.46 1739.57,1206.91 1740.15,1206.08 1740.74,1206.02 1741.32,1204.81 1741.91,1203.96 1742.5,1204.17 1743.08,1205.74 1743.67,1207.27 1744.26,1207.44 1744.84,1204.78 1745.43,1206.38 1746.02,1206.21 1746.6,1206.15 1747.19,1204.8 1747.78,1206.44 1748.36,1207.6 1748.95,1207.63 1749.53,1208.98 1750.12,1208.97 1750.71,1208.94 1751.29,1211.58 1751.88,1211.56 1752.47,1211.46 1753.05,1208.66 1753.64,1208.46 1754.23,1209.79 1754.81,1213.44 1755.4,1213.55 1755.99,1213.03 1756.57,1211.52 1757.16,1211.65 1757.74,1209.19 1758.33,1211.85 1758.92,1211.75 1759.5,1214.22 1760.09,1212.69 1760.68,1214.13 1761.26,1217.49 1761.85,1215.41 1762.44,1212.57 1763.02,1213.7 1763.61,1214.47 1764.19,1216.63 1764.78,1217.33 1765.37,1217.97 1765.95,1218.74 1766.54,1218.05 1767.13,1217.52 1767.71,1217.21 1768.3,1216.59 1768.89,1216.37 1769.47,1217.34 1770.06,1219.33 1770.65,1218.48 1771.23,1218.06 1771.82,1218.51 1772.4,1217.95 1772.99,1216.05 1773.58,1215.77 1774.16,1215.31 1774.75,1213.86 1775.34,1210.77 1775.92,1211.82 1776.51,1211.91 1777.1,1210.34 1777.68,1208.97 1778.27,1206.27 1778.86,1206.35 1779.44,1206.68 1780.03,1204.27 1780.61,1204.36 1781.2,1204.18 1781.79,1202.93 1782.37,1202.96 1782.96,1205.92 1783.55,1207.03 1784.13,1209.34 1784.72,1209.11 1785.31,1206.48 1785.89,1208.06 1786.48,1208.04 1787.06,1208.15 1787.65,1208.06 1788.24,1205.76 1788.82,1204.69 1789.41,1206.09 1790,1206.2 1790.58,1207.93 1791.17,1209.47 1791.76,1209.59 1792.34,1212.24 1792.93,1213.29 1793.52,1211.59 1794.1,1209.13 1794.69,1210.06 1795.27,1211.03 1795.86,1208.36 1796.45,1209.46 1797.03,1209.33 1797.62,1210.81 1798.21,1211.93 1798.79,1210.29 1799.38,1212.63 1799.97,1212.27 1800.55,1212 1801.14,1211.74 1801.73,1210.16 1802.31,1209.02 1802.9,1211.72 1803.48,1211.72 1804.07,1210.35 1804.66,1212.74 1805.24,1214.09 1805.83,1211.19 1806.42,1207.1 1807,1205.94 1807.59,1200.88 1808.18,1201.28 1808.76,1198.85 1809.35,1198.27 1809.94,1200.06 1810.52,1200.27 1811.11,1201.65 1811.69,1202.98 1812.28,1205.5 1812.87,1204.46 1813.45,1207.2 1814.04,1207.19 1814.63,1211.19 1815.21,1205.87 1815.8,1207.65 1816.39,1203.86 1816.97,1204.26 1817.56,1207.18 1818.14,1207.24 1818.73,1204.64 1819.32,1206.08 1819.9,1208.6 1820.49,1209.95 1821.08,1206.29 1821.66,1205.37 1822.25,1206.53 1822.84,1205.37 1823.42,1205.5 1824.01,1207.27 1824.6,1207.62 1825.18,1205.22 1825.77,1206.6 1826.35,1207.94 1826.94,1208.02 1827.53,1210.63 1828.11,1208 1828.7,1208.17 1829.29,1209.31 1829.87,1207.1 1830.46,1207.47 1831.05,1208.62 1831.63,1209.68 1832.22,1208.32 1832.81,1205.83 1833.39,1206.16 1833.98,1206.43 1834.56,1208.98 1835.15,1209.32 1835.74,1207.82 1836.32,1207.77 1836.91,1206.61 1837.5,1209.17 1838.08,1208.04 1838.67,1209.34 1839.26,1206.9 1839.84,1210.74 1840.43,1209.4 1841.01,1207.91 1841.6,1205.46 1842.19,1206.99 1842.77,1208.46 1843.36,1208.49 1843.95,1206.17 1844.53,1206.34 1845.12,1207.7 1845.71,1208.95 1846.29,1207.88 1846.88,1209.35 1847.47,1207.8 1848.05,1211.81 1848.64,1211.63 1849.22,1210.15 1849.81,1211.22 1850.4,1208.38 1850.98,1210.83 1851.57,1210.83 1852.16,1211.88 1852.74,1211.88 1853.33,1212.96 1853.92,1212.52 1854.5,1209.73 1855.09,1211.16 1855.68,1213.91 1856.26,1212.43 1856.85,1213.39 1857.43,1212.98 1858.02,1213.74 1858.61,1209.48 1859.19,1210.7 1859.78,1213.11 1860.37,1210.49 1860.95,1210.84 1861.54,1209.56 1862.13,1209.56 1862.71,1208.24 1863.3,1208.28 1863.88,1207.09 1864.47,1208.36 1865.06,1206.74 1865.64,1209.3 1866.23,1207.71 1866.82,1207.77 1867.4,1207.69 1867.99,1206.51 1868.58,1203.99 1869.16,1206.77 1869.75,1206.83 1870.34,1209.49 1870.92,1210.87 1871.51,1208.07 1872.09,1208.26 1872.68,1209.67 1873.27,1209.38 1873.85,1208.96 1874.44,1210.36 1875.03,1209.08 1875.61,1211.45 1876.2,1211.43 1876.79,1213.8 1877.37,1209.6 1877.96,1209.55 1878.55,1207.07 1879.13,1208.85 1879.72,1208.86 1880.3,1207.63 1880.89,1206.25 1881.48,1205.15 1882.06,1205.5 1882.65,1206.56 1883.24,1206.63 1883.82,1206.68 1884.41,1208.06 1885,1205.49 1885.58,1205.51 1886.17,1205.53 1886.76,1208.23 1887.34,1206.96 1887.93,1205.91 1888.51,1203.35 1889.1,1202.16 1889.69,1202.56 1890.27,1201.52 1890.86,1203.2 1891.45,1205.11 1892.03,1207.76 1892.62,1206.46 1893.21,1206.54 1893.79,1210.47 1894.38,1208.18 1894.96,1207.85 1895.55,1208.12 1896.14,1212.14 1896.72,1210.73 1897.31,1212.9 1897.9,1212.67 1898.48,1213.59 1899.07,1214.54 1899.66,1212.95 1900.24,1212.45 1900.83,1212.11 1901.42,1213.22 1902,1213.03 1902.59,1210.05 1903.17,1208.77 1903.76,1208.88 1904.35,1210.23 1904.93,1205.95 1905.52,1208.28 1906.11,1209.4 1906.69,1207.83 1907.28,1207.61 1907.87,1206.51 1908.45,1206.61 1909.04,1205.61 1909.63,1206.79 1910.21,1206.78 1910.8,1207.09 1911.38,1207.09 1911.97,1207.11 1912.56,1208.41 1913.14,1206.86 1913.73,1205.56 1914.32,1205.75 1914.9,1205.96 1915.49,1204.37 1916.08,1204.68 1916.66,1203.4 1917.25,1203.55 1917.83,1205.02 1918.42,1205.19 1919.01,1205.26 1919.59,1203.95 1920.18,1204.01 1920.77,1204.11 1921.35,1205.93 1921.94,1207.04 1922.53,1207.17 1923.11,1208.41 1923.7,1209.79 1924.29,1209.63 1924.87,1209.57 1925.46,1210.68 1926.04,1207.79 1926.63,1210.46 1927.22,1205.43 1927.8,1205.34 1928.39,1205.25 1928.98,1206.73 1929.56,1204.6 1930.15,1204.81 1930.74,1206.28 1931.32,1198.47 1931.91,1199.11 1932.5,1199.65 1933.08,1200.12 1933.67,1201.84 1934.25,1203.13 1934.84,1202.28 1935.43,1202.81 1936.01,1201.89 1936.6,1201.24 1937.19,1203.06 1937.77,1204.84 1938.36,1206.56 1938.95,1206.9 1939.53,1204.68 1940.12,1204.88 1940.71,1206.2 1941.29,1205.19 1941.88,1206.79 1942.46,1207.98 1943.05,1206.68 1943.64,1209.19 1944.22,1206.62 1944.81,1206.85 1945.4,1203.15 1945.98,1203.6 1946.57,1206.34 1947.16,1203.94 1947.74,1204.02 1948.33,1204.47 1948.91,1203.2 1949.5,1203.5 1950.09,1203.51 1950.67,1202.64 1951.26,1204.32 1951.85,1206.99 1952.43,1205.92 1953.02,1206.06 1953.61,1204.82 1954.19,1202.34 1954.78,1204.16 1955.37,1205.64 1955.95,1205.73 1956.54,1205.84 1957.12,1205.91 1957.71,1204.94 1958.3,1205.25 1958.88,1205.69 1959.47,1207.09 1960.06,1204.91 1960.64,1209.33 1961.23,1209.42 1961.82,1211.83 1962.4,1211.88 1962.99,1211.78 1963.58,1213.84 1964.16,1215.01 1964.75,1213.51 1965.33,1214.72 1965.92,1215.66 1966.51,1213.92 1967.09,1215 1967.68,1213.26 1968.27,1211.62 1968.85,1215.02 1969.44,1213.23 1970.03,1215.46 1970.61,1215.1 1971.2,1211.05 1971.78,1208.23 1972.37,1209.78 1972.96,1209.96 1973.54,1208.47 1974.13,1209.66 1974.72,1205.53 1975.3,1201.75 1975.89,1201.03 1976.48,1204.07 1977.06,1204.13 1977.65,1205.49 1978.24,1206.83 1978.82,1206.89 1979.41,1208.39 1979.99,1207.22 1980.58,1208.36 1981.17,1208.41 1981.75,1208.39 1982.34,1209.45 1982.93,1208.07 1983.51,1208.08 1984.1,1209.06 1984.69,1208.96 1985.27,1210.17 1985.86,1210.27 1986.45,1209.89 1987.03,1208.43 1987.62,1208.31 1988.2,1209.3 1988.79,1211.61 1989.38,1212.74 1989.96,1212.48 1990.55,1211.29 1991.14,1208.69 1991.72,1207.16 1992.31,1205.71 1992.9,1205.84 1993.48,1207.05 1994.07,1205.52 1994.65,1203.05 1995.24,1203.4 1995.83,1207.06 1996.41,1207.07 1997,1210.83 1997.59,1210.44 1998.17,1208.9 1998.76,1207.22 1999.35,1203.23 1999.93,1203.15 2000.52,1202.4 2001.11,1202.59 2001.69,1204.21 2002.28,1204.51 2002.86,1205.63 2003.45,1206.97 2004.04,1208.18 2004.62,1207.95 2005.21,1207.8 2005.8,1213.25 2006.38,1211.73 2006.97,1211.69 2007.56,1213.98 2008.14,1213.58 2008.73,1213.39 2009.32,1213.29 2009.9,1215.53 2010.49,1215.33 2011.07,1213.76 2011.66,1214.71 2012.25,1212.97 2012.83,1211.37 2013.42,1209.77 2014.01,1209.64 2014.59,1212.03 2015.18,1213.12 2015.77,1212.63 2016.35,1214.73 2016.94,1213.1 2017.53,1212.87 2018.11,1212.44 2018.7,1210.88 2019.28,1213.33 2019.87,1215.44 2020.46,1214 2021.04,1216.25 2021.63,1216.71 2022.22,1215.06 2022.8,1213.45 2023.39,1214.42 2023.98,1212.97 2024.56,1209.85 2025.15,1208.48 2025.73,1208.33 2026.32,1208.31 2026.91,1209.71 2027.49,1208.33 2028.08,1205.54 2028.67,1204.22 2029.25,1204.12 2029.84,1204.33 2030.43,1203.25 2031.01,1202.17 2031.6,1203.79 2032.19,1204.33 2032.77,1203.23 2033.36,1202.33 2033.94,1203.67 2034.53,1205.43 2035.12,1206.79 2035.7,1204.48 2036.29,1203.13 2036.88,1203.64 2037.46,1203.93 2038.05,1204.13 2038.64,1203.27 2039.22,1203.44 2039.81,1203.74 2040.4,1202.86 2040.98,1201.74 2041.57,1202 2042.15,1204.81 2042.74,1202.24 2043.33,1202.57 2043.91,1204.15 2044.5,1204.22 2045.09,1203.16 2045.67,1203.3 2046.26,1203.6 2046.85,1208.98 2047.43,1207.44 2048.02,1206.13 2048.6,1205.2 2049.19,1203.9 2049.78,1202.89 2050.36,1200.6 2050.95,1200.81 2051.54,1203.9 2052.12,1204.09 2052.71,1201.8 2053.3,1202.45 2053.88,1202.84 2054.47,1203.32 2055.06,1202.36 2055.64,1205.33 2056.23,1206.62 2056.81,1208.14 2057.4,1205.58 2057.99,1207.04 2058.57,1209.59 2059.16,1208.3 2059.75,1209.51 2060.33,1208.11 2060.92,1206.7 2061.51,1205.62 2062.09,1206.03 2062.68,1203.63 2063.27,1202.47 2063.85,1205.37 2064.44,1205.73 2065.02,1207.18 2065.61,1208.57 2066.2,1212.17 2066.78,1210.77 2067.37,1209.64 2067.96,1208.29 2068.54,1208.3 2069.13,1207.01 2069.72,1208.34 2070.3,1207.57 2070.89,1207.86 2071.48,1207.96 2072.06,1207.97 2072.65,1209.07 2073.23,1209.13 2073.82,1209.23 2074.41,1210.21 2074.99,1209.97 2075.58,1211.05 2076.17,1209.99 2076.75,1210.33 2077.34,1210.23 2077.93,1208.86 2078.51,1207.93 2079.1,1209.34 2079.68,1211.91 2080.27,1213.02 2080.86,1211.17 2081.44,1211.19 2082.03,1208.63 2082.62,1209.68 2083.2,1209.5 2083.79,1208.4 2084.38,1208.46 2084.96,1208.16 2085.55,1208.09 2086.14,1209.24 2086.72,1209.31 2087.31,1208.15 2087.89,1209.58 2088.48,1209.24 2089.07,1210.29 2089.65,1211.49 2090.24,1211.19 2090.83,1210.95 2091.41,1209.51 2092,1207.89 2092.59,1205.46 2093.17,1205.69 2093.76,1207.31 2094.35,1205.95 2094.93,1207.68 2095.52,1207.63 2096.1,1208.73 2096.69,1210.22 2097.28,1211.21 2097.86,1210.98 2098.45,1211.02 2099.04,1211.26 2099.62,1213.55 2100.21,1214.68 2100.8,1213.33 2101.38,1212.01 2101.97,1214.57 2102.55,1214.25 2103.14,1212.67 2103.73,1210.88 2104.31,1213.42 2104.9,1211.66 2105.49,1211.22 2106.07,1209.69 2106.66,1209.63 2107.25,1209.71 2107.83,1210.65 2108.42,1210.71 2109.01,1209.4 2109.59,1210.75 2110.18,1209.34 2110.76,1207.93 2111.35,1210.67 2111.94,1207.68 2112.52,1209 2113.11,1210.42 2113.7,1210.3 2114.28,1210.37 2114.87,1212.66 2115.46,1208.42 2116.04,1209.61 2116.63,1208.14 2117.22,1209.32 2117.8,1209.24 2118.39,1208.08 2118.97,1208.36 2119.56,1207.36 2120.15,1204.68 2120.73,1201.01 2121.32,1200.25 2121.91,1201.95 2122.49,1202.46 2123.08,1204.19 2123.67,1205.77 2124.25,1203.1 2124.84,1203.38 2125.42,1203.3 2126.01,1203.86 2126.6,1204.35 2127.18,1203.26 2127.77,1203.53 2128.36,1203.79 2128.94,1204.03 2129.53,1203.88 2130.12,1209.19 2130.7,1206.44 2131.29,1207.79 2131.88,1205.48 2132.46,1205.71 2133.05,1208.08 2133.63,1209.07 2134.22,1209.16 2134.81,1209.16 2135.39,1209.42 2135.98,1210.37 2136.57,1211.48 2137.15,1209.81 2137.74,1212.29 2138.33,1212.25 2138.91,1212.17 2139.5,1211.8 2140.09,1210.07 2140.67,1209.69 2141.26,1213.15 2141.84,1212.8 2142.43,1213.5 2143.02,1210.86 2143.6,1209.38 2144.19,1207.97 2144.78,1206.88 2145.36,1204.59 2145.95,1205.85 2146.54,1206.06 2147.12,1207.53 2147.71,1208.7 2148.3,1209.94 2148.88,1210.87 2149.47,1214.66 2150.05,1211.9 2150.64,1211.98 2151.23,1209.18 2151.81,1211.53 2152.4,1210 2152.99,1208.8 2153.57,1207.64 2154.16,1210.3 2154.75,1206.34 2155.33,1205.07 2155.92,1204.93 2156.5,1203.7 2157.09,1202.56 2157.68,1202.61 2158.26,1200.39 \"/>\n<path clip-path=\"url(#clip562)\" d=\"M986.025 1208.74 L986.612 1208.74 L987.198 1208.74 L987.785 1208.74 L988.371 1208.74 L988.957 1208.74 L989.544 1208.74 L990.13 1208.74 L990.717 1208.74 L991.303 1208.74 L991.889 1208.74 L992.476 1208.74 L993.062 1208.74 L993.649 1208.74 L994.235 1208.74 L994.822 1208.74 L995.408 1208.74 L995.994 1208.74 L996.581 1208.74 L997.167 1208.74 L997.754 1208.74 L998.34 1208.74 L998.926 1208.74 L999.513 1208.74 L1000.1 1208.74 L1000.69 1208.74 L1001.27 1208.74 L1001.86 1208.74 L1002.44 1208.74 L1003.03 1208.74 L1003.62 1208.74 L1004.2 1208.74 L1004.79 1208.74 L1005.38 1208.74 L1005.96 1208.74 L1006.55 1208.74 L1007.14 1208.74 L1007.72 1208.74 L1008.31 1208.74 L1008.9 1208.74 L1009.48 1208.74 L1010.07 1208.74 L1010.65 1208.74 L1011.24 1208.74 L1011.83 1208.74 L1012.41 1208.74 L1013 1208.74 L1013.59 1208.74 L1014.17 1208.74 L1014.76 1208.74 L1015.35 1208.74 L1015.93 1208.74 L1016.52 1208.74 L1017.11 1208.74 L1017.69 1208.74 L1018.28 1208.74 L1018.86 1208.74 L1019.45 1208.74 L1020.04 1208.74 L1020.62 1208.74 L1021.21 1208.74 L1021.8 1208.74 L1022.38 1208.74 L1022.97 1208.74 L1023.56 1208.74 L1024.14 1208.74 L1024.73 1208.74 L1025.32 1208.74 L1025.9 1208.74 L1026.49 1208.74 L1027.07 1208.74 L1027.66 1208.74 L1028.25 1208.74 L1028.83 1208.74 L1029.42 1208.74 L1030.01 1208.74 L1030.59 1208.74 L1031.18 1208.74 L1031.77 1208.74 L1032.35 1208.74 L1032.94 1208.74 L1033.52 1208.74 L1034.11 1208.74 L1034.7 1208.74 L1035.28 1208.74 L1035.87 1208.74 L1036.46 1208.74 L1037.04 1208.74 L1037.63 1208.74 L1038.22 1208.74 L1038.8 1208.74 L1039.39 1208.74 L1039.98 1208.74 L1040.56 1208.74 L1041.15 1208.74 L1041.73 1208.74 L1042.32 1208.74 L1042.91 1208.74 L1043.49 1208.74 L1044.08 1208.74 L1044.67 1208.74 L1045.25 1208.74 L1045.84 1208.74 L1046.43 1208.74 L1047.01 1208.74 L1047.6 1208.74 L1048.19 1208.74 L1048.77 1208.74 L1049.36 1208.74 L1049.94 1208.74 L1050.53 1208.74 L1051.12 1208.74 L1051.7 1208.74 L1052.29 1208.74 L1052.88 1208.74 L1053.46 1208.74 L1054.05 1208.74 L1054.64 1208.74 L1055.22 1208.74 L1055.81 1208.74 L1056.39 1208.74 L1056.98 1208.74 L1057.57 1208.74 L1058.15 1208.74 L1058.74 1208.74 L1059.33 1208.74 L1059.91 1208.74 L1060.5 1208.74 L1061.09 1208.74 L1061.67 1208.74 L1062.26 1208.74 L1062.85 1208.74 L1063.43 1208.74 L1064.02 1208.74 L1064.6 1208.74 L1065.19 1208.74 L1065.78 1208.74 L1066.36 1208.74 L1066.95 1208.74 L1067.54 1208.74 L1068.12 1208.74 L1068.71 1208.74 L1069.3 1208.74 L1069.88 1208.74 L1070.47 1208.74 L1071.06 1208.74 L1071.64 1208.74 L1072.23 1208.74 L1072.81 1208.74 L1073.4 1208.74 L1073.99 1208.74 L1074.57 1208.74 L1075.16 1208.74 L1075.75 1208.74 L1076.33 1208.74 L1076.92 1208.74 L1077.51 1208.74 L1078.09 1208.74 L1078.68 1208.74 L1079.26 1208.74 L1079.85 1208.74 L1080.44 1208.74 L1081.02 1208.74 L1081.61 1208.74 L1082.2 1208.74 L1082.78 1208.74 L1083.37 1208.74 L1083.96 1208.74 L1084.54 1208.74 L1085.13 1208.74 L1085.72 1208.74 L1086.3 1208.74 L1086.89 1208.74 L1087.47 1208.74 L1088.06 1208.74 L1088.65 1208.74 L1089.23 1208.74 L1089.82 1208.74 L1090.41 1208.74 L1090.99 1208.74 L1091.58 1208.74 L1092.17 1208.74 L1092.75 1208.74 L1093.34 1208.74 L1093.93 1208.74 L1094.51 1208.74 L1095.1 1208.74 L1095.68 1208.74 L1096.27 1208.74 L1096.86 1208.74 L1097.44 1208.74 L1098.03 1208.74 L1098.62 1208.74 L1099.2 1208.74 L1099.79 1208.74 L1100.38 1208.74 L1100.96 1208.74 L1101.55 1208.74 L1102.14 1208.74 L1102.72 1208.74 L1103.31 1208.74 L1103.89 1208.74 L1104.48 1208.74 L1105.07 1208.74 L1105.65 1208.74 L1106.24 1208.74 L1106.83 1208.74 L1107.41 1208.74 L1108 1208.74 L1108.59 1208.74 L1109.17 1208.74 L1109.76 1208.74 L1110.34 1208.74 L1110.93 1208.74 L1111.52 1208.74 L1112.1 1208.74 L1112.69 1208.74 L1113.28 1208.74 L1113.86 1208.74 L1114.45 1208.74 L1115.04 1208.74 L1115.62 1208.74 L1116.21 1208.74 L1116.8 1208.74 L1117.38 1208.74 L1117.97 1208.74 L1118.55 1208.74 L1119.14 1208.74 L1119.73 1208.74 L1120.31 1208.74 L1120.9 1208.74 L1121.49 1208.74 L1122.07 1208.74 L1122.66 1208.74 L1123.25 1208.74 L1123.83 1208.74 L1124.42 1208.74 L1125.01 1208.74 L1125.59 1208.74 L1126.18 1208.74 L1126.76 1208.74 L1127.35 1208.74 L1127.94 1208.74 L1128.52 1208.74 L1129.11 1208.74 L1129.7 1208.74 L1130.28 1208.74 L1130.87 1208.74 L1131.46 1208.74 L1132.04 1208.74 L1132.63 1208.74 L1133.21 1208.74 L1133.8 1208.74 L1134.39 1208.74 L1134.97 1208.74 L1135.56 1208.74 L1136.15 1208.74 L1136.73 1208.74 L1137.32 1208.74 L1137.91 1208.74 L1138.49 1208.74 L1139.08 1208.74 L1139.67 1208.74 L1140.25 1208.74 L1140.84 1208.74 L1141.42 1208.74 L1142.01 1208.74 L1142.6 1208.74 L1143.18 1208.74 L1143.77 1208.74 L1144.36 1208.74 L1144.94 1208.74 L1145.53 1208.74 L1146.12 1208.74 L1146.7 1208.74 L1147.29 1208.74 L1147.88 1208.74 L1148.46 1208.74 L1149.05 1208.74 L1149.63 1208.74 L1150.22 1208.74 L1150.81 1208.74 L1151.39 1208.74 L1151.98 1208.74 L1152.57 1208.74 L1153.15 1208.74 L1153.74 1208.74 L1154.33 1208.74 L1154.91 1208.74 L1155.5 1208.74 L1156.09 1208.74 L1156.67 1208.74 L1157.26 1208.74 L1157.84 1208.74 L1158.43 1208.74 L1159.02 1208.74 L1159.6 1208.74 L1160.19 1208.74 L1160.78 1208.74 L1161.36 1208.74 L1161.95 1208.74 L1162.54 1208.74 L1163.12 1208.74 L1163.71 1208.74 L1164.29 1208.74 L1164.88 1208.74 L1165.47 1208.74 L1166.05 1208.74 L1166.64 1208.74 L1167.23 1208.74 L1167.81 1208.74 L1168.4 1208.74 L1168.99 1208.74 L1169.57 1208.74 L1170.16 1208.74 L1170.75 1208.74 L1171.33 1208.74 L1171.92 1208.74 L1172.5 1208.74 L1173.09 1208.74 L1173.68 1208.74 L1174.26 1208.74 L1174.85 1208.74 L1175.44 1208.74 L1176.02 1208.74 L1176.61 1208.74 L1177.2 1208.74 L1177.78 1208.74 L1178.37 1208.74 L1178.96 1208.74 L1179.54 1208.74 L1180.13 1208.74 L1180.71 1208.74 L1181.3 1208.74 L1181.89 1208.74 L1182.47 1208.74 L1183.06 1208.74 L1183.65 1208.74 L1184.23 1208.74 L1184.82 1208.74 L1185.41 1208.74 L1185.99 1208.74 L1186.58 1208.74 L1187.16 1208.74 L1187.75 1208.74 L1188.34 1208.74 L1188.92 1208.74 L1189.51 1208.74 L1190.1 1208.74 L1190.68 1208.74 L1191.27 1208.74 L1191.86 1208.74 L1192.44 1208.74 L1193.03 1208.74 L1193.62 1208.74 L1194.2 1208.74 L1194.79 1208.74 L1195.37 1208.74 L1195.96 1208.74 L1196.55 1208.74 L1197.13 1208.74 L1197.72 1208.74 L1198.31 1208.74 L1198.89 1208.74 L1199.48 1208.74 L1200.07 1208.74 L1200.65 1208.74 L1201.24 1208.74 L1201.83 1208.74 L1202.41 1208.74 L1203 1208.74 L1203.58 1208.74 L1204.17 1208.74 L1204.76 1208.74 L1205.34 1208.74 L1205.93 1208.74 L1206.52 1208.74 L1207.1 1208.74 L1207.69 1208.74 L1208.28 1208.74 L1208.86 1208.74 L1209.45 1208.74 L1210.03 1208.74 L1210.62 1208.74 L1211.21 1208.74 L1211.79 1208.74 L1212.38 1208.74 L1212.97 1208.74 L1213.55 1208.74 L1214.14 1208.74 L1214.73 1208.74 L1215.31 1208.74 L1215.9 1208.74 L1216.49 1208.74 L1217.07 1208.74 L1217.66 1208.74 L1218.24 1208.74 L1218.83 1208.74 L1219.42 1208.74 L1220 1208.74 L1220.59 1208.74 L1221.18 1208.74 L1221.76 1208.74 L1222.35 1208.74 L1222.94 1208.74 L1223.52 1208.74 L1224.11 1208.74 L1224.7 1208.74 L1225.28 1208.74 L1225.87 1208.74 L1226.45 1208.74 L1227.04 1208.74 L1227.63 1208.74 L1228.21 1208.74 L1228.8 1208.74 L1229.39 1208.74 L1229.97 1208.74 L1230.56 1208.74 L1231.15 1208.74 L1231.73 1208.74 L1232.32 1208.74 L1232.91 1208.74 L1233.49 1208.74 L1234.08 1208.74 L1234.66 1208.74 L1235.25 1208.74 L1235.84 1208.74 L1236.42 1208.74 L1237.01 1208.74 L1237.6 1208.74 L1238.18 1208.74 L1238.77 1208.74 L1239.36 1208.74 L1239.94 1208.74 L1240.53 1208.74 L1241.11 1208.74 L1241.7 1208.74 L1242.29 1208.74 L1242.87 1208.74 L1243.46 1208.74 L1244.05 1208.74 L1244.63 1208.74 L1245.22 1208.74 L1245.81 1208.74 L1246.39 1208.74 L1246.98 1208.74 L1247.57 1208.74 L1248.15 1208.74 L1248.74 1208.74 L1249.32 1208.74 L1249.91 1208.74 L1250.5 1208.74 L1251.08 1208.74 L1251.67 1208.74 L1252.26 1208.74 L1252.84 1208.74 L1253.43 1208.74 L1254.02 1208.74 L1254.6 1208.74 L1255.19 1208.74 L1255.78 1208.74 L1256.36 1208.74 L1256.95 1208.74 L1257.53 1208.74 L1258.12 1208.74 L1258.71 1208.74 L1259.29 1208.74 L1259.88 1208.74 L1260.47 1208.74 L1261.05 1208.74 L1261.64 1208.74 L1262.23 1208.74 L1262.81 1208.74 L1263.4 1208.74 L1263.98 1208.74 L1264.57 1208.74 L1265.16 1208.74 L1265.74 1208.74 L1266.33 1208.74 L1266.92 1208.74 L1267.5 1208.74 L1268.09 1208.74 L1268.68 1208.74 L1269.26 1208.74 L1269.85 1208.74 L1270.44 1208.74 L1271.02 1208.74 L1271.61 1208.74 L1272.19 1208.74 L1272.78 1208.74 L1273.37 1208.74 L1273.95 1208.74 L1274.54 1208.74 L1275.13 1208.74 L1275.71 1208.74 L1276.3 1208.74 L1276.89 1208.74 L1277.47 1208.74 L1278.06 1208.74 L1278.65 1208.74 L1279.23 1208.74 L1279.82 1208.74 L1280.4 1208.74 L1280.99 1208.74 L1281.58 1208.74 L1282.16 1208.74 L1282.75 1208.74 L1283.34 1208.74 L1283.92 1208.74 L1284.51 1208.74 L1285.1 1208.74 L1285.68 1208.74 L1286.27 1208.74 L1286.86 1208.74 L1287.44 1208.74 L1288.03 1208.74 L1288.61 1208.74 L1289.2 1208.74 L1289.79 1208.74 L1290.37 1208.74 L1290.96 1208.74 L1291.55 1208.74 L1292.13 1208.74 L1292.72 1208.74 L1293.31 1208.74 L1293.89 1208.74 L1294.48 1208.74 L1295.06 1208.74 L1295.65 1208.74 L1296.24 1208.74 L1296.82 1208.74 L1297.41 1208.74 L1298 1208.74 L1298.58 1208.74 L1299.17 1208.74 L1299.76 1208.74 L1300.34 1208.74 L1300.93 1208.74 L1301.52 1208.74 L1302.1 1208.74 L1302.69 1208.74 L1303.27 1208.74 L1303.86 1208.74 L1304.45 1208.74 L1305.03 1208.74 L1305.62 1208.74 L1306.21 1208.74 L1306.79 1208.74 L1307.38 1208.74 L1307.97 1208.74 L1308.55 1208.74 L1309.14 1208.74 L1309.73 1208.74 L1310.31 1208.74 L1310.9 1208.74 L1311.48 1208.74 L1312.07 1208.74 L1312.66 1208.74 L1313.24 1208.74 L1313.83 1208.74 L1314.42 1208.74 L1315 1208.74 L1315.59 1208.74 L1316.18 1208.74 L1316.76 1208.74 L1317.35 1208.74 L1317.93 1208.74 L1318.52 1208.74 L1319.11 1208.74 L1319.69 1208.74 L1320.28 1208.74 L1320.87 1208.74 L1321.45 1208.74 L1322.04 1208.74 L1322.63 1208.74 L1323.21 1208.74 L1323.8 1208.74 L1324.39 1208.74 L1324.97 1208.74 L1325.56 1208.74 L1326.14 1208.74 L1326.73 1208.74 L1327.32 1208.74 L1327.9 1208.74 L1328.49 1208.74 L1329.08 1208.74 L1329.66 1208.74 L1330.25 1208.74 L1330.84 1208.74 L1331.42 1208.74 L1332.01 1208.74 L1332.6 1208.74 L1333.18 1208.74 L1333.77 1208.74 L1334.35 1208.74 L1334.94 1208.74 L1335.53 1208.74 L1336.11 1208.74 L1336.7 1208.74 L1337.29 1208.74 L1337.87 1208.74 L1338.46 1208.74 L1339.05 1208.74 L1339.63 1208.74 L1340.22 1208.74 L1340.8 1208.74 L1341.39 1208.74 L1341.98 1208.74 L1342.56 1208.74 L1343.15 1208.74 L1343.74 1208.74 L1344.32 1208.74 L1344.91 1208.74 L1345.5 1208.74 L1346.08 1208.74 L1346.67 1208.74 L1347.26 1208.74 L1347.84 1208.74 L1348.43 1208.74 L1349.01 1208.74 L1349.6 1208.74 L1350.19 1208.74 L1350.77 1208.74 L1351.36 1208.74 L1351.95 1208.74 L1352.53 1208.74 L1353.12 1208.74 L1353.71 1208.74 L1354.29 1208.74 L1354.88 1208.74 L1355.47 1208.74 L1356.05 1208.74 L1356.64 1208.74 L1357.22 1208.74 L1357.81 1208.74 L1358.4 1208.74 L1358.98 1208.74 L1359.57 1208.74 L1360.16 1208.74 L1360.74 1208.74 L1361.33 1208.74 L1361.92 1208.74 L1362.5 1208.74 L1363.09 1208.74 L1363.68 1208.74 L1364.26 1208.74 L1364.85 1208.74 L1365.43 1208.74 L1366.02 1208.74 L1366.61 1208.74 L1367.19 1208.74 L1367.78 1208.74 L1368.37 1208.74 L1368.95 1208.74 L1369.54 1208.74 L1370.13 1208.74 L1370.71 1208.74 L1371.3 1208.74 L1371.88 1208.74 L1372.47 1208.74 L1373.06 1208.74 L1373.64 1208.74 L1374.23 1208.74 L1374.82 1208.74 L1375.4 1208.74 L1375.99 1208.74 L1376.58 1208.74 L1377.16 1208.74 L1377.75 1208.74 L1378.34 1208.74 L1378.92 1208.74 L1379.51 1208.74 L1380.09 1208.74 L1380.68 1208.74 L1381.27 1208.74 L1381.85 1208.74 L1382.44 1208.74 L1383.03 1208.74 L1383.61 1208.74 L1384.2 1208.74 L1384.79 1208.74 L1385.37 1208.74 L1385.96 1208.74 L1386.55 1208.74 L1387.13 1208.74 L1387.72 1208.74 L1388.3 1208.74 L1388.89 1208.74 L1389.48 1208.74 L1390.06 1208.74 L1390.65 1208.74 L1391.24 1208.74 L1391.82 1208.74 L1392.41 1208.74 L1393 1208.74 L1393.58 1208.74 L1394.17 1208.74 L1394.75 1208.74 L1395.34 1208.74 L1395.93 1208.74 L1396.51 1208.74 L1397.1 1208.74 L1397.69 1208.74 L1398.27 1208.74 L1398.86 1208.74 L1399.45 1208.74 L1400.03 1208.74 L1400.62 1208.74 L1401.21 1208.74 L1401.79 1208.74 L1402.38 1208.74 L1402.96 1208.74 L1403.55 1208.74 L1404.14 1208.74 L1404.72 1208.74 L1405.31 1208.74 L1405.9 1208.74 L1406.48 1208.74 L1407.07 1208.74 L1407.66 1208.74 L1408.24 1208.74 L1408.83 1208.74 L1409.42 1208.74 L1410 1208.74 L1410.59 1208.74 L1411.17 1208.74 L1411.76 1208.74 L1412.35 1208.74 L1412.93 1208.74 L1413.52 1208.74 L1414.11 1208.74 L1414.69 1208.74 L1415.28 1208.74 L1415.87 1208.74 L1416.45 1208.74 L1417.04 1208.74 L1417.63 1208.74 L1418.21 1208.74 L1418.8 1208.74 L1419.38 1208.74 L1419.97 1208.74 L1420.56 1208.74 L1421.14 1208.74 L1421.73 1208.74 L1422.32 1208.74 L1422.9 1208.74 L1423.49 1208.74 L1424.08 1208.74 L1424.66 1208.74 L1425.25 1208.74 L1425.83 1208.74 L1426.42 1208.74 L1427.01 1208.74 L1427.59 1208.74 L1428.18 1208.74 L1428.77 1208.74 L1429.35 1208.74 L1429.94 1208.74 L1430.53 1208.74 L1431.11 1208.74 L1431.7 1208.74 L1432.29 1208.74 L1432.87 1208.74 L1433.46 1208.74 L1434.04 1208.74 L1434.63 1208.74 L1435.22 1208.74 L1435.8 1208.74 L1436.39 1208.74 L1436.98 1208.74 L1437.56 1208.74 L1438.15 1208.74 L1438.74 1208.74 L1439.32 1208.74 L1439.91 1208.74 L1440.5 1208.74 L1441.08 1208.74 L1441.67 1208.74 L1442.25 1208.74 L1442.84 1208.74 L1443.43 1208.74 L1444.01 1208.74 L1444.6 1208.74 L1445.19 1208.74 L1445.77 1208.74 L1446.36 1208.74 L1446.95 1208.74 L1447.53 1208.74 L1448.12 1208.74 L1448.7 1208.74 L1449.29 1208.74 L1449.88 1208.74 L1450.46 1208.74 L1451.05 1208.74 L1451.64 1208.74 L1452.22 1208.74 L1452.81 1208.74 L1453.4 1208.74 L1453.98 1208.74 L1454.57 1208.74 L1455.16 1208.74 L1455.74 1208.74 L1456.33 1208.74 L1456.91 1208.74 L1457.5 1208.74 L1458.09 1208.74 L1458.67 1208.74 L1459.26 1208.74 L1459.85 1208.74 L1460.43 1208.74 L1461.02 1208.74 L1461.61 1208.74 L1462.19 1208.74 L1462.78 1208.74 L1463.37 1208.74 L1463.95 1208.74 L1464.54 1208.74 L1465.12 1208.74 L1465.71 1208.74 L1466.3 1208.74 L1466.88 1208.74 L1467.47 1208.74 L1468.06 1208.74 L1468.64 1208.74 L1469.23 1208.74 L1469.82 1208.74 L1470.4 1208.74 L1470.99 1208.74 L1471.57 1208.74 L1472.16 1208.74 L1472.75 1208.74 L1473.33 1208.74 L1473.92 1208.74 L1474.51 1208.74 L1475.09 1208.74 L1475.68 1208.74 L1476.27 1208.74 L1476.85 1208.74 L1477.44 1208.74 L1478.03 1208.74 L1478.61 1208.74 L1479.2 1208.74 L1479.78 1208.74 L1480.37 1208.74 L1480.96 1208.74 L1481.54 1208.74 L1482.13 1208.74 L1482.72 1208.74 L1483.3 1208.74 L1483.89 1208.74 L1484.48 1208.74 L1485.06 1208.74 L1485.65 1208.74 L1486.24 1208.74 L1486.82 1208.74 L1487.41 1208.74 L1487.99 1208.74 L1488.58 1208.74 L1489.17 1208.74 L1489.75 1208.74 L1490.34 1208.74 L1490.93 1208.74 L1491.51 1208.74 L1492.1 1208.74 L1492.69 1208.74 L1493.27 1208.74 L1493.86 1208.74 L1494.45 1208.74 L1495.03 1208.74 L1495.62 1208.74 L1496.2 1208.74 L1496.79 1208.74 L1497.38 1208.74 L1497.96 1208.74 L1498.55 1208.74 L1499.14 1208.74 L1499.72 1208.74 L1500.31 1208.74 L1500.9 1208.74 L1501.48 1208.74 L1502.07 1208.74 L1502.65 1208.74 L1503.24 1208.74 L1503.83 1208.74 L1504.41 1208.74 L1505 1208.74 L1505.59 1208.74 L1506.17 1208.74 L1506.76 1208.74 L1507.35 1208.74 L1507.93 1208.74 L1508.52 1208.74 L1509.11 1208.74 L1509.69 1208.74 L1510.28 1208.74 L1510.86 1208.74 L1511.45 1208.74 L1512.04 1208.74 L1512.62 1208.74 L1513.21 1208.74 L1513.8 1208.74 L1514.38 1208.74 L1514.97 1208.74 L1515.56 1208.74 L1516.14 1208.74 L1516.73 1208.74 L1517.32 1208.74 L1517.9 1208.74 L1518.49 1208.74 L1519.07 1208.74 L1519.66 1208.74 L1520.25 1208.74 L1520.83 1208.74 L1521.42 1208.74 L1522.01 1208.74 L1522.59 1208.74 L1523.18 1208.74 L1523.77 1208.74 L1524.35 1208.74 L1524.94 1208.74 L1525.52 1208.74 L1526.11 1208.74 L1526.7 1208.74 L1527.28 1208.74 L1527.87 1208.74 L1528.46 1208.74 L1529.04 1208.74 L1529.63 1208.74 L1530.22 1208.74 L1530.8 1208.74 L1531.39 1208.74 L1531.98 1208.74 L1532.56 1208.74 L1533.15 1208.74 L1533.73 1208.74 L1534.32 1208.74 L1534.91 1208.74 L1535.49 1208.74 L1536.08 1208.74 L1536.67 1208.74 L1537.25 1208.74 L1537.84 1208.74 L1538.43 1208.74 L1539.01 1208.74 L1539.6 1208.74 L1540.19 1208.74 L1540.77 1208.74 L1541.36 1208.74 L1541.94 1208.74 L1542.53 1208.74 L1543.12 1208.74 L1543.7 1208.74 L1544.29 1208.74 L1544.88 1208.74 L1545.46 1208.74 L1546.05 1208.74 L1546.64 1208.74 L1547.22 1208.74 L1547.81 1208.74 L1548.4 1208.74 L1548.98 1208.74 L1549.57 1208.74 L1550.15 1208.74 L1550.74 1208.74 L1551.33 1208.74 L1551.91 1208.74 L1552.5 1208.74 L1553.09 1208.74 L1553.67 1208.74 L1554.26 1208.74 L1554.85 1208.74 L1555.43 1208.74 L1556.02 1208.74 L1556.6 1208.74 L1557.19 1208.74 L1557.78 1208.74 L1558.36 1208.74 L1558.95 1208.74 L1559.54 1208.74 L1560.12 1208.74 L1560.71 1208.74 L1561.3 1208.74 L1561.88 1208.74 L1562.47 1208.74 L1563.06 1208.74 L1563.64 1208.74 L1564.23 1208.74 L1564.81 1208.74 L1565.4 1208.74 L1565.99 1208.74 L1566.57 1208.74 L1567.16 1208.74 L1567.75 1208.74 L1568.33 1208.74 L1568.92 1208.74 L1569.51 1208.74 L1570.09 1208.74 L1570.68 1208.74 L1571.27 1208.74 L1571.85 1208.74 L1572.44 1208.74 L1573.02 1208.74 L1573.61 1208.74 L1574.2 1208.74 L1574.78 1208.74 L1575.37 1208.74 L1575.96 1208.74 L1576.54 1208.74 L1577.13 1208.74 L1577.72 1208.74 L1578.3 1208.74 L1578.89 1208.74 L1579.47 1208.74 L1580.06 1208.74 L1580.65 1208.74 L1581.23 1208.74 L1581.82 1208.74 L1582.41 1208.74 L1582.99 1208.74 L1583.58 1208.74 L1584.17 1208.74 L1584.75 1208.74 L1585.34 1208.74 L1585.93 1208.74 L1586.51 1208.74 L1587.1 1208.74 L1587.68 1208.74 L1588.27 1208.74 L1588.86 1208.74 L1589.44 1208.74 L1590.03 1208.74 L1590.62 1208.74 L1591.2 1208.74 L1591.79 1208.74 L1592.38 1208.74 L1592.96 1208.74 L1593.55 1208.74 L1594.14 1208.74 L1594.72 1208.74 L1595.31 1208.74 L1595.89 1208.74 L1596.48 1208.74 L1597.07 1208.74 L1597.65 1208.74 L1598.24 1208.74 L1598.83 1208.74 L1599.41 1208.74 L1600 1208.74 L1600.59 1208.74 L1601.17 1208.74 L1601.76 1208.74 L1602.34 1208.74 L1602.93 1208.74 L1603.52 1208.74 L1604.1 1208.74 L1604.69 1208.74 L1605.28 1208.74 L1605.86 1208.74 L1606.45 1208.74 L1607.04 1208.74 L1607.62 1208.74 L1608.21 1208.74 L1608.8 1208.74 L1609.38 1208.74 L1609.97 1208.74 L1610.55 1208.74 L1611.14 1208.74 L1611.73 1208.74 L1612.31 1208.74 L1612.9 1208.74 L1613.49 1208.74 L1614.07 1208.74 L1614.66 1208.74 L1615.25 1208.74 L1615.83 1208.74 L1616.42 1208.74 L1617.01 1208.74 L1617.59 1208.74 L1618.18 1208.74 L1618.76 1208.74 L1619.35 1208.74 L1619.94 1208.74 L1620.52 1208.74 L1621.11 1208.74 L1621.7 1208.74 L1622.28 1208.74 L1622.87 1208.74 L1623.46 1208.74 L1624.04 1208.74 L1624.63 1208.74 L1625.22 1208.74 L1625.8 1208.74 L1626.39 1208.74 L1626.97 1208.74 L1627.56 1208.74 L1628.15 1208.74 L1628.73 1208.74 L1629.32 1208.74 L1629.91 1208.74 L1630.49 1208.74 L1631.08 1208.74 L1631.67 1208.74 L1632.25 1208.74 L1632.84 1208.74 L1633.42 1208.74 L1634.01 1208.74 L1634.6 1208.74 L1635.18 1208.74 L1635.77 1208.74 L1636.36 1208.74 L1636.94 1208.74 L1637.53 1208.74 L1638.12 1208.74 L1638.7 1208.74 L1639.29 1208.74 L1639.88 1208.74 L1640.46 1208.74 L1641.05 1208.74 L1641.63 1208.74 L1642.22 1208.74 L1642.81 1208.74 L1643.39 1208.74 L1643.98 1208.74 L1644.57 1208.74 L1645.15 1208.74 L1645.74 1208.74 L1646.33 1208.74 L1646.91 1208.74 L1647.5 1208.74 L1648.09 1208.74 L1648.67 1208.74 L1649.26 1208.74 L1649.84 1208.74 L1650.43 1208.74 L1651.02 1208.74 L1651.6 1208.74 L1652.19 1208.74 L1652.78 1208.74 L1653.36 1208.74 L1653.95 1208.74 L1654.54 1208.74 L1655.12 1208.74 L1655.71 1208.74 L1656.29 1208.74 L1656.88 1208.74 L1657.47 1208.74 L1658.05 1208.74 L1658.64 1208.74 L1659.23 1208.74 L1659.81 1208.74 L1660.4 1208.74 L1660.99 1208.74 L1661.57 1208.74 L1662.16 1208.74 L1662.75 1208.74 L1663.33 1208.74 L1663.92 1208.74 L1664.5 1208.74 L1665.09 1208.74 L1665.68 1208.74 L1666.26 1208.74 L1666.85 1208.74 L1667.44 1208.74 L1668.02 1208.74 L1668.61 1208.74 L1669.2 1208.74 L1669.78 1208.74 L1670.37 1208.74 L1670.96 1208.74 L1671.54 1208.74 L1672.13 1208.74 L1672.71 1208.74 L1673.3 1208.74 L1673.89 1208.74 L1674.47 1208.74 L1675.06 1208.74 L1675.65 1208.74 L1676.23 1208.74 L1676.82 1208.74 L1677.41 1208.74 L1677.99 1208.74 L1678.58 1208.74 L1679.17 1208.74 L1679.75 1208.74 L1680.34 1208.74 L1680.92 1208.74 L1681.51 1208.74 L1682.1 1208.74 L1682.68 1208.74 L1683.27 1208.74 L1683.86 1208.74 L1684.44 1208.74 L1685.03 1208.74 L1685.62 1208.74 L1686.2 1208.74 L1686.79 1208.74 L1687.37 1208.74 L1687.96 1208.74 L1688.55 1208.74 L1689.13 1208.74 L1689.72 1208.74 L1690.31 1208.74 L1690.89 1208.74 L1691.48 1208.74 L1692.07 1208.74 L1692.65 1208.74 L1693.24 1208.74 L1693.83 1208.74 L1694.41 1208.74 L1695 1208.74 L1695.58 1208.74 L1696.17 1208.74 L1696.76 1208.74 L1697.34 1208.74 L1697.93 1208.74 L1698.52 1208.74 L1699.1 1208.74 L1699.69 1208.74 L1700.28 1208.74 L1700.86 1208.74 L1701.45 1208.74 L1702.04 1208.74 L1702.62 1208.74 L1703.21 1208.74 L1703.79 1208.74 L1704.38 1208.74 L1704.97 1208.74 L1705.55 1208.74 L1706.14 1208.74 L1706.73 1208.74 L1707.31 1208.74 L1707.9 1208.74 L1708.49 1208.74 L1709.07 1208.74 L1709.66 1208.74 L1710.24 1208.74 L1710.83 1208.74 L1711.42 1208.74 L1712 1208.74 L1712.59 1208.74 L1713.18 1208.74 L1713.76 1208.74 L1714.35 1208.74 L1714.94 1208.74 L1715.52 1208.74 L1716.11 1208.74 L1716.7 1208.74 L1717.28 1208.74 L1717.87 1208.74 L1718.45 1208.74 L1719.04 1208.74 L1719.63 1208.74 L1720.21 1208.74 L1720.8 1208.74 L1721.39 1208.74 L1721.97 1208.74 L1722.56 1208.74 L1723.15 1208.74 L1723.73 1208.74 L1724.32 1208.74 L1724.91 1208.74 L1725.49 1208.74 L1726.08 1208.74 L1726.66 1208.74 L1727.25 1208.74 L1727.84 1208.74 L1728.42 1208.74 L1729.01 1208.74 L1729.6 1208.74 L1730.18 1208.74 L1730.77 1208.74 L1731.36 1208.74 L1731.94 1208.74 L1732.53 1208.74 L1733.11 1208.74 L1733.7 1208.74 L1734.29 1208.74 L1734.87 1208.74 L1735.46 1208.74 L1736.05 1208.74 L1736.63 1208.74 L1737.22 1208.74 L1737.81 1208.74 L1738.39 1208.74 L1738.98 1208.74 L1739.57 1208.74 L1740.15 1208.74 L1740.74 1208.74 L1741.32 1208.74 L1741.91 1208.74 L1742.5 1208.74 L1743.08 1208.74 L1743.67 1208.74 L1744.26 1208.74 L1744.84 1208.74 L1745.43 1208.74 L1746.02 1208.74 L1746.6 1208.74 L1747.19 1208.74 L1747.78 1208.74 L1748.36 1208.74 L1748.95 1208.74 L1749.53 1208.74 L1750.12 1208.74 L1750.71 1208.74 L1751.29 1208.74 L1751.88 1208.74 L1752.47 1208.74 L1753.05 1208.74 L1753.64 1208.74 L1754.23 1208.74 L1754.81 1208.74 L1755.4 1208.74 L1755.99 1208.74 L1756.57 1208.74 L1757.16 1208.74 L1757.74 1208.74 L1758.33 1208.74 L1758.92 1208.74 L1759.5 1208.74 L1760.09 1208.74 L1760.68 1208.74 L1761.26 1208.74 L1761.85 1208.74 L1762.44 1208.74 L1763.02 1208.74 L1763.61 1208.74 L1764.19 1208.74 L1764.78 1208.74 L1765.37 1208.74 L1765.95 1208.74 L1766.54 1208.74 L1767.13 1208.74 L1767.71 1208.74 L1768.3 1208.74 L1768.89 1208.74 L1769.47 1208.74 L1770.06 1208.74 L1770.65 1208.74 L1771.23 1208.74 L1771.82 1208.74 L1772.4 1208.74 L1772.99 1208.74 L1773.58 1208.74 L1774.16 1208.74 L1774.75 1208.74 L1775.34 1208.74 L1775.92 1208.74 L1776.51 1208.74 L1777.1 1208.74 L1777.68 1208.74 L1778.27 1208.74 L1778.86 1208.74 L1779.44 1208.74 L1780.03 1208.74 L1780.61 1208.74 L1781.2 1208.74 L1781.79 1208.74 L1782.37 1208.74 L1782.96 1208.74 L1783.55 1208.74 L1784.13 1208.74 L1784.72 1208.74 L1785.31 1208.74 L1785.89 1208.74 L1786.48 1208.74 L1787.06 1208.74 L1787.65 1208.74 L1788.24 1208.74 L1788.82 1208.74 L1789.41 1208.74 L1790 1208.74 L1790.58 1208.74 L1791.17 1208.74 L1791.76 1208.74 L1792.34 1208.74 L1792.93 1208.74 L1793.52 1208.74 L1794.1 1208.74 L1794.69 1208.74 L1795.27 1208.74 L1795.86 1208.74 L1796.45 1208.74 L1797.03 1208.74 L1797.62 1208.74 L1798.21 1208.74 L1798.79 1208.74 L1799.38 1208.74 L1799.97 1208.74 L1800.55 1208.74 L1801.14 1208.74 L1801.73 1208.74 L1802.31 1208.74 L1802.9 1208.74 L1803.48 1208.74 L1804.07 1208.74 L1804.66 1208.74 L1805.24 1208.74 L1805.83 1208.74 L1806.42 1208.74 L1807 1208.74 L1807.59 1208.74 L1808.18 1208.74 L1808.76 1208.74 L1809.35 1208.74 L1809.94 1208.74 L1810.52 1208.74 L1811.11 1208.74 L1811.69 1208.74 L1812.28 1208.74 L1812.87 1208.74 L1813.45 1208.74 L1814.04 1208.74 L1814.63 1208.74 L1815.21 1208.74 L1815.8 1208.74 L1816.39 1208.74 L1816.97 1208.74 L1817.56 1208.74 L1818.14 1208.74 L1818.73 1208.74 L1819.32 1208.74 L1819.9 1208.74 L1820.49 1208.74 L1821.08 1208.74 L1821.66 1208.74 L1822.25 1208.74 L1822.84 1208.74 L1823.42 1208.74 L1824.01 1208.74 L1824.6 1208.74 L1825.18 1208.74 L1825.77 1208.74 L1826.35 1208.74 L1826.94 1208.74 L1827.53 1208.74 L1828.11 1208.74 L1828.7 1208.74 L1829.29 1208.74 L1829.87 1208.74 L1830.46 1208.74 L1831.05 1208.74 L1831.63 1208.74 L1832.22 1208.74 L1832.81 1208.74 L1833.39 1208.74 L1833.98 1208.74 L1834.56 1208.74 L1835.15 1208.74 L1835.74 1208.74 L1836.32 1208.74 L1836.91 1208.74 L1837.5 1208.74 L1838.08 1208.74 L1838.67 1208.74 L1839.26 1208.74 L1839.84 1208.74 L1840.43 1208.74 L1841.01 1208.74 L1841.6 1208.74 L1842.19 1208.74 L1842.77 1208.74 L1843.36 1208.74 L1843.95 1208.74 L1844.53 1208.74 L1845.12 1208.74 L1845.71 1208.74 L1846.29 1208.74 L1846.88 1208.74 L1847.47 1208.74 L1848.05 1208.74 L1848.64 1208.74 L1849.22 1208.74 L1849.81 1208.74 L1850.4 1208.74 L1850.98 1208.74 L1851.57 1208.74 L1852.16 1208.74 L1852.74 1208.74 L1853.33 1208.74 L1853.92 1208.74 L1854.5 1208.74 L1855.09 1208.74 L1855.68 1208.74 L1856.26 1208.74 L1856.85 1208.74 L1857.43 1208.74 L1858.02 1208.74 L1858.61 1208.74 L1859.19 1208.74 L1859.78 1208.74 L1860.37 1208.74 L1860.95 1208.74 L1861.54 1208.74 L1862.13 1208.74 L1862.71 1208.74 L1863.3 1208.74 L1863.88 1208.74 L1864.47 1208.74 L1865.06 1208.74 L1865.64 1208.74 L1866.23 1208.74 L1866.82 1208.74 L1867.4 1208.74 L1867.99 1208.74 L1868.58 1208.74 L1869.16 1208.74 L1869.75 1208.74 L1870.34 1208.74 L1870.92 1208.74 L1871.51 1208.74 L1872.09 1208.74 L1872.68 1208.74 L1873.27 1208.74 L1873.85 1208.74 L1874.44 1208.74 L1875.03 1208.74 L1875.61 1208.74 L1876.2 1208.74 L1876.79 1208.74 L1877.37 1208.74 L1877.96 1208.74 L1878.55 1208.74 L1879.13 1208.74 L1879.72 1208.74 L1880.3 1208.74 L1880.89 1208.74 L1881.48 1208.74 L1882.06 1208.74 L1882.65 1208.74 L1883.24 1208.74 L1883.82 1208.74 L1884.41 1208.74 L1885 1208.74 L1885.58 1208.74 L1886.17 1208.74 L1886.76 1208.74 L1887.34 1208.74 L1887.93 1208.74 L1888.51 1208.74 L1889.1 1208.74 L1889.69 1208.74 L1890.27 1208.74 L1890.86 1208.74 L1891.45 1208.74 L1892.03 1208.74 L1892.62 1208.74 L1893.21 1208.74 L1893.79 1208.74 L1894.38 1208.74 L1894.96 1208.74 L1895.55 1208.74 L1896.14 1208.74 L1896.72 1208.74 L1897.31 1208.74 L1897.9 1208.74 L1898.48 1208.74 L1899.07 1208.74 L1899.66 1208.74 L1900.24 1208.74 L1900.83 1208.74 L1901.42 1208.74 L1902 1208.74 L1902.59 1208.74 L1903.17 1208.74 L1903.76 1208.74 L1904.35 1208.74 L1904.93 1208.74 L1905.52 1208.74 L1906.11 1208.74 L1906.69 1208.74 L1907.28 1208.74 L1907.87 1208.74 L1908.45 1208.74 L1909.04 1208.74 L1909.63 1208.74 L1910.21 1208.74 L1910.8 1208.74 L1911.38 1208.74 L1911.97 1208.74 L1912.56 1208.74 L1913.14 1208.74 L1913.73 1208.74 L1914.32 1208.74 L1914.9 1208.74 L1915.49 1208.74 L1916.08 1208.74 L1916.66 1208.74 L1917.25 1208.74 L1917.83 1208.74 L1918.42 1208.74 L1919.01 1208.74 L1919.59 1208.74 L1920.18 1208.74 L1920.77 1208.74 L1921.35 1208.74 L1921.94 1208.74 L1922.53 1208.74 L1923.11 1208.74 L1923.7 1208.74 L1924.29 1208.74 L1924.87 1208.74 L1925.46 1208.74 L1926.04 1208.74 L1926.63 1208.74 L1927.22 1208.74 L1927.8 1208.74 L1928.39 1208.74 L1928.98 1208.74 L1929.56 1208.74 L1930.15 1208.74 L1930.74 1208.74 L1931.32 1208.74 L1931.91 1208.74 L1932.5 1208.74 L1933.08 1208.74 L1933.67 1208.74 L1934.25 1208.74 L1934.84 1208.74 L1935.43 1208.74 L1936.01 1208.74 L1936.6 1208.74 L1937.19 1208.74 L1937.77 1208.74 L1938.36 1208.74 L1938.95 1208.74 L1939.53 1208.74 L1940.12 1208.74 L1940.71 1208.74 L1941.29 1208.74 L1941.88 1208.74 L1942.46 1208.74 L1943.05 1208.74 L1943.64 1208.74 L1944.22 1208.74 L1944.81 1208.74 L1945.4 1208.74 L1945.98 1208.74 L1946.57 1208.74 L1947.16 1208.74 L1947.74 1208.74 L1948.33 1208.74 L1948.91 1208.74 L1949.5 1208.74 L1950.09 1208.74 L1950.67 1208.74 L1951.26 1208.74 L1951.85 1208.74 L1952.43 1208.74 L1953.02 1208.74 L1953.61 1208.74 L1954.19 1208.74 L1954.78 1208.74 L1955.37 1208.74 L1955.95 1208.74 L1956.54 1208.74 L1957.12 1208.74 L1957.71 1208.74 L1958.3 1208.74 L1958.88 1208.74 L1959.47 1208.74 L1960.06 1208.74 L1960.64 1208.74 L1961.23 1208.74 L1961.82 1208.74 L1962.4 1208.74 L1962.99 1208.74 L1963.58 1208.74 L1964.16 1208.74 L1964.75 1208.74 L1965.33 1208.74 L1965.92 1208.74 L1966.51 1208.74 L1967.09 1208.74 L1967.68 1208.74 L1968.27 1208.74 L1968.85 1208.74 L1969.44 1208.74 L1970.03 1208.74 L1970.61 1208.74 L1971.2 1208.74 L1971.78 1208.74 L1972.37 1208.74 L1972.96 1208.74 L1973.54 1208.74 L1974.13 1208.74 L1974.72 1208.74 L1975.3 1208.74 L1975.89 1208.74 L1976.48 1208.74 L1977.06 1208.74 L1977.65 1208.74 L1978.24 1208.74 L1978.82 1208.74 L1979.41 1208.74 L1979.99 1208.74 L1980.58 1208.74 L1981.17 1208.74 L1981.75 1208.74 L1982.34 1208.74 L1982.93 1208.74 L1983.51 1208.74 L1984.1 1208.74 L1984.69 1208.74 L1985.27 1208.74 L1985.86 1208.74 L1986.45 1208.74 L1987.03 1208.74 L1987.62 1208.74 L1988.2 1208.74 L1988.79 1208.74 L1989.38 1208.74 L1989.96 1208.74 L1990.55 1208.74 L1991.14 1208.74 L1991.72 1208.74 L1992.31 1208.74 L1992.9 1208.74 L1993.48 1208.74 L1994.07 1208.74 L1994.65 1208.74 L1995.24 1208.74 L1995.83 1208.74 L1996.41 1208.74 L1997 1208.74 L1997.59 1208.74 L1998.17 1208.74 L1998.76 1208.74 L1999.35 1208.74 L1999.93 1208.74 L2000.52 1208.74 L2001.11 1208.74 L2001.69 1208.74 L2002.28 1208.74 L2002.86 1208.74 L2003.45 1208.74 L2004.04 1208.74 L2004.62 1208.74 L2005.21 1208.74 L2005.8 1208.74 L2006.38 1208.74 L2006.97 1208.74 L2007.56 1208.74 L2008.14 1208.74 L2008.73 1208.74 L2009.32 1208.74 L2009.9 1208.74 L2010.49 1208.74 L2011.07 1208.74 L2011.66 1208.74 L2012.25 1208.74 L2012.83 1208.74 L2013.42 1208.74 L2014.01 1208.74 L2014.59 1208.74 L2015.18 1208.74 L2015.77 1208.74 L2016.35 1208.74 L2016.94 1208.74 L2017.53 1208.74 L2018.11 1208.74 L2018.7 1208.74 L2019.28 1208.74 L2019.87 1208.74 L2020.46 1208.74 L2021.04 1208.74 L2021.63 1208.74 L2022.22 1208.74 L2022.8 1208.74 L2023.39 1208.74 L2023.98 1208.74 L2024.56 1208.74 L2025.15 1208.74 L2025.73 1208.74 L2026.32 1208.74 L2026.91 1208.74 L2027.49 1208.74 L2028.08 1208.74 L2028.67 1208.74 L2029.25 1208.74 L2029.84 1208.74 L2030.43 1208.74 L2031.01 1208.74 L2031.6 1208.74 L2032.19 1208.74 L2032.77 1208.74 L2033.36 1208.74 L2033.94 1208.74 L2034.53 1208.74 L2035.12 1208.74 L2035.7 1208.74 L2036.29 1208.74 L2036.88 1208.74 L2037.46 1208.74 L2038.05 1208.74 L2038.64 1208.74 L2039.22 1208.74 L2039.81 1208.74 L2040.4 1208.74 L2040.98 1208.74 L2041.57 1208.74 L2042.15 1208.74 L2042.74 1208.74 L2043.33 1208.74 L2043.91 1208.74 L2044.5 1208.74 L2045.09 1208.74 L2045.67 1208.74 L2046.26 1208.74 L2046.85 1208.74 L2047.43 1208.74 L2048.02 1208.74 L2048.6 1208.74 L2049.19 1208.74 L2049.78 1208.74 L2050.36 1208.74 L2050.95 1208.74 L2051.54 1208.74 L2052.12 1208.74 L2052.71 1208.74 L2053.3 1208.74 L2053.88 1208.74 L2054.47 1208.74 L2055.06 1208.74 L2055.64 1208.74 L2056.23 1208.74 L2056.81 1208.74 L2057.4 1208.74 L2057.99 1208.74 L2058.57 1208.74 L2059.16 1208.74 L2059.75 1208.74 L2060.33 1208.74 L2060.92 1208.74 L2061.51 1208.74 L2062.09 1208.74 L2062.68 1208.74 L2063.27 1208.74 L2063.85 1208.74 L2064.44 1208.74 L2065.02 1208.74 L2065.61 1208.74 L2066.2 1208.74 L2066.78 1208.74 L2067.37 1208.74 L2067.96 1208.74 L2068.54 1208.74 L2069.13 1208.74 L2069.72 1208.74 L2070.3 1208.74 L2070.89 1208.74 L2071.48 1208.74 L2072.06 1208.74 L2072.65 1208.74 L2073.23 1208.74 L2073.82 1208.74 L2074.41 1208.74 L2074.99 1208.74 L2075.58 1208.74 L2076.17 1208.74 L2076.75 1208.74 L2077.34 1208.74 L2077.93 1208.74 L2078.51 1208.74 L2079.1 1208.74 L2079.68 1208.74 L2080.27 1208.74 L2080.86 1208.74 L2081.44 1208.74 L2082.03 1208.74 L2082.62 1208.74 L2083.2 1208.74 L2083.79 1208.74 L2084.38 1208.74 L2084.96 1208.74 L2085.55 1208.74 L2086.14 1208.74 L2086.72 1208.74 L2087.31 1208.74 L2087.89 1208.74 L2088.48 1208.74 L2089.07 1208.74 L2089.65 1208.74 L2090.24 1208.74 L2090.83 1208.74 L2091.41 1208.74 L2092 1208.74 L2092.59 1208.74 L2093.17 1208.74 L2093.76 1208.74 L2094.35 1208.74 L2094.93 1208.74 L2095.52 1208.74 L2096.1 1208.74 L2096.69 1208.74 L2097.28 1208.74 L2097.86 1208.74 L2098.45 1208.74 L2099.04 1208.74 L2099.62 1208.74 L2100.21 1208.74 L2100.8 1208.74 L2101.38 1208.74 L2101.97 1208.74 L2102.55 1208.74 L2103.14 1208.74 L2103.73 1208.74 L2104.31 1208.74 L2104.9 1208.74 L2105.49 1208.74 L2106.07 1208.74 L2106.66 1208.74 L2107.25 1208.74 L2107.83 1208.74 L2108.42 1208.74 L2109.01 1208.74 L2109.59 1208.74 L2110.18 1208.74 L2110.76 1208.74 L2111.35 1208.74 L2111.94 1208.74 L2112.52 1208.74 L2113.11 1208.74 L2113.7 1208.74 L2114.28 1208.74 L2114.87 1208.74 L2115.46 1208.74 L2116.04 1208.74 L2116.63 1208.74 L2117.22 1208.74 L2117.8 1208.74 L2118.39 1208.74 L2118.97 1208.74 L2119.56 1208.74 L2120.15 1208.74 L2120.73 1208.74 L2121.32 1208.74 L2121.91 1208.74 L2122.49 1208.74 L2123.08 1208.74 L2123.67 1208.74 L2124.25 1208.74 L2124.84 1208.74 L2125.42 1208.74 L2126.01 1208.74 L2126.6 1208.74 L2127.18 1208.74 L2127.77 1208.74 L2128.36 1208.74 L2128.94 1208.74 L2129.53 1208.74 L2130.12 1208.74 L2130.7 1208.74 L2131.29 1208.74 L2131.88 1208.74 L2132.46 1208.74 L2133.05 1208.74 L2133.63 1208.74 L2134.22 1208.74 L2134.81 1208.74 L2135.39 1208.74 L2135.98 1208.74 L2136.57 1208.74 L2137.15 1208.74 L2137.74 1208.74 L2138.33 1208.74 L2138.91 1208.74 L2139.5 1208.74 L2140.09 1208.74 L2140.67 1208.74 L2141.26 1208.74 L2141.84 1208.74 L2142.43 1208.74 L2143.02 1208.74 L2143.6 1208.74 L2144.19 1208.74 L2144.78 1208.74 L2145.36 1208.74 L2145.95 1208.74 L2146.54 1208.74 L2147.12 1208.74 L2147.71 1208.74 L2148.3 1208.74 L2148.88 1208.74 L2149.47 1208.74 L2150.05 1208.74 L2150.64 1208.74 L2151.23 1208.74 L2151.81 1208.74 L2152.4 1208.74 L2152.99 1208.74 L2153.57 1208.74 L2154.16 1208.74 L2154.75 1208.74 L2155.33 1208.74 L2155.92 1208.74 L2156.5 1208.74 L2157.09 1208.74 L2157.68 1208.74 L2158.26 1208.74 L2158.26 1208.1 L2157.68 1208.1 L2157.09 1208.1 L2156.5 1208.1 L2155.92 1208.1 L2155.33 1208.1 L2154.75 1208.1 L2154.16 1208.1 L2153.57 1208.1 L2152.99 1208.1 L2152.4 1208.1 L2151.81 1208.1 L2151.23 1208.1 L2150.64 1208.1 L2150.05 1208.1 L2149.47 1208.1 L2148.88 1208.1 L2148.3 1208.1 L2147.71 1208.1 L2147.12 1208.1 L2146.54 1208.1 L2145.95 1208.1 L2145.36 1208.1 L2144.78 1208.1 L2144.19 1208.1 L2143.6 1208.1 L2143.02 1208.1 L2142.43 1208.1 L2141.84 1208.1 L2141.26 1208.1 L2140.67 1208.1 L2140.09 1208.1 L2139.5 1208.1 L2138.91 1208.1 L2138.33 1208.1 L2137.74 1208.1 L2137.15 1208.1 L2136.57 1208.1 L2135.98 1208.1 L2135.39 1208.1 L2134.81 1208.1 L2134.22 1208.1 L2133.63 1208.1 L2133.05 1208.1 L2132.46 1208.1 L2131.88 1208.1 L2131.29 1208.1 L2130.7 1208.1 L2130.12 1208.1 L2129.53 1208.1 L2128.94 1208.1 L2128.36 1208.1 L2127.77 1208.1 L2127.18 1208.1 L2126.6 1208.1 L2126.01 1208.1 L2125.42 1208.1 L2124.84 1208.1 L2124.25 1208.1 L2123.67 1208.1 L2123.08 1208.1 L2122.49 1208.1 L2121.91 1208.1 L2121.32 1208.1 L2120.73 1208.1 L2120.15 1208.1 L2119.56 1208.1 L2118.97 1208.1 L2118.39 1208.1 L2117.8 1208.1 L2117.22 1208.1 L2116.63 1208.1 L2116.04 1208.1 L2115.46 1208.1 L2114.87 1208.1 L2114.28 1208.1 L2113.7 1208.1 L2113.11 1208.1 L2112.52 1208.1 L2111.94 1208.1 L2111.35 1208.1 L2110.76 1208.1 L2110.18 1208.1 L2109.59 1208.1 L2109.01 1208.1 L2108.42 1208.1 L2107.83 1208.1 L2107.25 1208.1 L2106.66 1208.1 L2106.07 1208.1 L2105.49 1208.1 L2104.9 1208.1 L2104.31 1208.1 L2103.73 1208.1 L2103.14 1208.1 L2102.55 1208.1 L2101.97 1208.1 L2101.38 1208.1 L2100.8 1208.1 L2100.21 1208.1 L2099.62 1208.1 L2099.04 1208.1 L2098.45 1208.1 L2097.86 1208.1 L2097.28 1208.1 L2096.69 1208.1 L2096.1 1208.1 L2095.52 1208.1 L2094.93 1208.1 L2094.35 1208.1 L2093.76 1208.1 L2093.17 1208.1 L2092.59 1208.1 L2092 1208.1 L2091.41 1208.1 L2090.83 1208.1 L2090.24 1208.1 L2089.65 1208.1 L2089.07 1208.1 L2088.48 1208.1 L2087.89 1208.1 L2087.31 1208.1 L2086.72 1208.1 L2086.14 1208.1 L2085.55 1208.1 L2084.96 1208.1 L2084.38 1208.1 L2083.79 1208.1 L2083.2 1208.1 L2082.62 1208.1 L2082.03 1208.1 L2081.44 1208.1 L2080.86 1208.1 L2080.27 1208.1 L2079.68 1208.1 L2079.1 1208.1 L2078.51 1208.1 L2077.93 1208.1 L2077.34 1208.1 L2076.75 1208.1 L2076.17 1208.1 L2075.58 1208.1 L2074.99 1208.1 L2074.41 1208.1 L2073.82 1208.1 L2073.23 1208.1 L2072.65 1208.1 L2072.06 1208.1 L2071.48 1208.1 L2070.89 1208.1 L2070.3 1208.1 L2069.72 1208.1 L2069.13 1208.1 L2068.54 1208.1 L2067.96 1208.1 L2067.37 1208.1 L2066.78 1208.1 L2066.2 1208.1 L2065.61 1208.1 L2065.02 1208.1 L2064.44 1208.1 L2063.85 1208.1 L2063.27 1208.1 L2062.68 1208.1 L2062.09 1208.1 L2061.51 1208.1 L2060.92 1208.1 L2060.33 1208.1 L2059.75 1208.1 L2059.16 1208.1 L2058.57 1208.1 L2057.99 1208.1 L2057.4 1208.1 L2056.81 1208.1 L2056.23 1208.1 L2055.64 1208.1 L2055.06 1208.1 L2054.47 1208.1 L2053.88 1208.1 L2053.3 1208.1 L2052.71 1208.1 L2052.12 1208.1 L2051.54 1208.1 L2050.95 1208.1 L2050.36 1208.1 L2049.78 1208.1 L2049.19 1208.1 L2048.6 1208.1 L2048.02 1208.1 L2047.43 1208.1 L2046.85 1208.1 L2046.26 1208.1 L2045.67 1208.1 L2045.09 1208.1 L2044.5 1208.1 L2043.91 1208.1 L2043.33 1208.1 L2042.74 1208.1 L2042.15 1208.1 L2041.57 1208.1 L2040.98 1208.1 L2040.4 1208.1 L2039.81 1208.1 L2039.22 1208.1 L2038.64 1208.1 L2038.05 1208.1 L2037.46 1208.1 L2036.88 1208.1 L2036.29 1208.1 L2035.7 1208.1 L2035.12 1208.1 L2034.53 1208.1 L2033.94 1208.1 L2033.36 1208.1 L2032.77 1208.1 L2032.19 1208.1 L2031.6 1208.1 L2031.01 1208.1 L2030.43 1208.1 L2029.84 1208.1 L2029.25 1208.1 L2028.67 1208.1 L2028.08 1208.1 L2027.49 1208.1 L2026.91 1208.1 L2026.32 1208.1 L2025.73 1208.1 L2025.15 1208.1 L2024.56 1208.1 L2023.98 1208.1 L2023.39 1208.1 L2022.8 1208.1 L2022.22 1208.1 L2021.63 1208.1 L2021.04 1208.1 L2020.46 1208.1 L2019.87 1208.1 L2019.28 1208.1 L2018.7 1208.1 L2018.11 1208.1 L2017.53 1208.1 L2016.94 1208.1 L2016.35 1208.1 L2015.77 1208.1 L2015.18 1208.1 L2014.59 1208.1 L2014.01 1208.1 L2013.42 1208.1 L2012.83 1208.1 L2012.25 1208.1 L2011.66 1208.1 L2011.07 1208.1 L2010.49 1208.1 L2009.9 1208.1 L2009.32 1208.1 L2008.73 1208.1 L2008.14 1208.1 L2007.56 1208.1 L2006.97 1208.1 L2006.38 1208.1 L2005.8 1208.1 L2005.21 1208.1 L2004.62 1208.1 L2004.04 1208.1 L2003.45 1208.1 L2002.86 1208.1 L2002.28 1208.1 L2001.69 1208.1 L2001.11 1208.1 L2000.52 1208.1 L1999.93 1208.1 L1999.35 1208.1 L1998.76 1208.1 L1998.17 1208.1 L1997.59 1208.1 L1997 1208.1 L1996.41 1208.1 L1995.83 1208.1 L1995.24 1208.1 L1994.65 1208.1 L1994.07 1208.1 L1993.48 1208.1 L1992.9 1208.1 L1992.31 1208.1 L1991.72 1208.1 L1991.14 1208.1 L1990.55 1208.1 L1989.96 1208.1 L1989.38 1208.1 L1988.79 1208.1 L1988.2 1208.1 L1987.62 1208.1 L1987.03 1208.1 L1986.45 1208.1 L1985.86 1208.1 L1985.27 1208.1 L1984.69 1208.1 L1984.1 1208.1 L1983.51 1208.1 L1982.93 1208.1 L1982.34 1208.1 L1981.75 1208.1 L1981.17 1208.1 L1980.58 1208.1 L1979.99 1208.1 L1979.41 1208.1 L1978.82 1208.1 L1978.24 1208.1 L1977.65 1208.1 L1977.06 1208.1 L1976.48 1208.1 L1975.89 1208.1 L1975.3 1208.1 L1974.72 1208.1 L1974.13 1208.1 L1973.54 1208.1 L1972.96 1208.1 L1972.37 1208.1 L1971.78 1208.1 L1971.2 1208.1 L1970.61 1208.1 L1970.03 1208.1 L1969.44 1208.1 L1968.85 1208.1 L1968.27 1208.1 L1967.68 1208.1 L1967.09 1208.1 L1966.51 1208.1 L1965.92 1208.1 L1965.33 1208.1 L1964.75 1208.1 L1964.16 1208.1 L1963.58 1208.1 L1962.99 1208.1 L1962.4 1208.1 L1961.82 1208.1 L1961.23 1208.1 L1960.64 1208.1 L1960.06 1208.1 L1959.47 1208.1 L1958.88 1208.1 L1958.3 1208.1 L1957.71 1208.1 L1957.12 1208.1 L1956.54 1208.1 L1955.95 1208.1 L1955.37 1208.1 L1954.78 1208.1 L1954.19 1208.1 L1953.61 1208.1 L1953.02 1208.1 L1952.43 1208.1 L1951.85 1208.1 L1951.26 1208.1 L1950.67 1208.1 L1950.09 1208.1 L1949.5 1208.1 L1948.91 1208.1 L1948.33 1208.1 L1947.74 1208.1 L1947.16 1208.1 L1946.57 1208.1 L1945.98 1208.1 L1945.4 1208.1 L1944.81 1208.1 L1944.22 1208.1 L1943.64 1208.1 L1943.05 1208.1 L1942.46 1208.1 L1941.88 1208.1 L1941.29 1208.1 L1940.71 1208.1 L1940.12 1208.1 L1939.53 1208.1 L1938.95 1208.1 L1938.36 1208.1 L1937.77 1208.1 L1937.19 1208.1 L1936.6 1208.1 L1936.01 1208.1 L1935.43 1208.1 L1934.84 1208.1 L1934.25 1208.1 L1933.67 1208.1 L1933.08 1208.1 L1932.5 1208.1 L1931.91 1208.1 L1931.32 1208.1 L1930.74 1208.1 L1930.15 1208.1 L1929.56 1208.1 L1928.98 1208.1 L1928.39 1208.1 L1927.8 1208.1 L1927.22 1208.1 L1926.63 1208.1 L1926.04 1208.1 L1925.46 1208.1 L1924.87 1208.1 L1924.29 1208.1 L1923.7 1208.1 L1923.11 1208.1 L1922.53 1208.1 L1921.94 1208.1 L1921.35 1208.1 L1920.77 1208.1 L1920.18 1208.1 L1919.59 1208.1 L1919.01 1208.1 L1918.42 1208.1 L1917.83 1208.1 L1917.25 1208.1 L1916.66 1208.1 L1916.08 1208.1 L1915.49 1208.1 L1914.9 1208.1 L1914.32 1208.1 L1913.73 1208.1 L1913.14 1208.1 L1912.56 1208.1 L1911.97 1208.1 L1911.38 1208.1 L1910.8 1208.1 L1910.21 1208.1 L1909.63 1208.1 L1909.04 1208.1 L1908.45 1208.1 L1907.87 1208.1 L1907.28 1208.1 L1906.69 1208.1 L1906.11 1208.1 L1905.52 1208.1 L1904.93 1208.1 L1904.35 1208.1 L1903.76 1208.1 L1903.17 1208.1 L1902.59 1208.1 L1902 1208.1 L1901.42 1208.1 L1900.83 1208.1 L1900.24 1208.1 L1899.66 1208.1 L1899.07 1208.1 L1898.48 1208.1 L1897.9 1208.1 L1897.31 1208.1 L1896.72 1208.1 L1896.14 1208.1 L1895.55 1208.1 L1894.96 1208.1 L1894.38 1208.1 L1893.79 1208.1 L1893.21 1208.1 L1892.62 1208.1 L1892.03 1208.1 L1891.45 1208.1 L1890.86 1208.1 L1890.27 1208.1 L1889.69 1208.1 L1889.1 1208.1 L1888.51 1208.1 L1887.93 1208.1 L1887.34 1208.1 L1886.76 1208.1 L1886.17 1208.1 L1885.58 1208.1 L1885 1208.1 L1884.41 1208.1 L1883.82 1208.1 L1883.24 1208.1 L1882.65 1208.1 L1882.06 1208.1 L1881.48 1208.1 L1880.89 1208.1 L1880.3 1208.1 L1879.72 1208.1 L1879.13 1208.1 L1878.55 1208.1 L1877.96 1208.1 L1877.37 1208.1 L1876.79 1208.1 L1876.2 1208.1 L1875.61 1208.1 L1875.03 1208.1 L1874.44 1208.1 L1873.85 1208.1 L1873.27 1208.1 L1872.68 1208.1 L1872.09 1208.1 L1871.51 1208.1 L1870.92 1208.1 L1870.34 1208.1 L1869.75 1208.1 L1869.16 1208.1 L1868.58 1208.1 L1867.99 1208.1 L1867.4 1208.1 L1866.82 1208.1 L1866.23 1208.1 L1865.64 1208.1 L1865.06 1208.1 L1864.47 1208.1 L1863.88 1208.1 L1863.3 1208.1 L1862.71 1208.1 L1862.13 1208.1 L1861.54 1208.1 L1860.95 1208.1 L1860.37 1208.1 L1859.78 1208.1 L1859.19 1208.1 L1858.61 1208.1 L1858.02 1208.1 L1857.43 1208.1 L1856.85 1208.1 L1856.26 1208.1 L1855.68 1208.1 L1855.09 1208.1 L1854.5 1208.1 L1853.92 1208.1 L1853.33 1208.1 L1852.74 1208.1 L1852.16 1208.1 L1851.57 1208.1 L1850.98 1208.1 L1850.4 1208.1 L1849.81 1208.1 L1849.22 1208.1 L1848.64 1208.1 L1848.05 1208.1 L1847.47 1208.1 L1846.88 1208.1 L1846.29 1208.1 L1845.71 1208.1 L1845.12 1208.1 L1844.53 1208.1 L1843.95 1208.1 L1843.36 1208.1 L1842.77 1208.1 L1842.19 1208.1 L1841.6 1208.1 L1841.01 1208.1 L1840.43 1208.1 L1839.84 1208.1 L1839.26 1208.1 L1838.67 1208.1 L1838.08 1208.1 L1837.5 1208.1 L1836.91 1208.1 L1836.32 1208.1 L1835.74 1208.1 L1835.15 1208.1 L1834.56 1208.1 L1833.98 1208.1 L1833.39 1208.1 L1832.81 1208.1 L1832.22 1208.1 L1831.63 1208.1 L1831.05 1208.1 L1830.46 1208.1 L1829.87 1208.1 L1829.29 1208.1 L1828.7 1208.1 L1828.11 1208.1 L1827.53 1208.1 L1826.94 1208.1 L1826.35 1208.1 L1825.77 1208.1 L1825.18 1208.1 L1824.6 1208.1 L1824.01 1208.1 L1823.42 1208.1 L1822.84 1208.1 L1822.25 1208.1 L1821.66 1208.1 L1821.08 1208.1 L1820.49 1208.1 L1819.9 1208.1 L1819.32 1208.1 L1818.73 1208.1 L1818.14 1208.1 L1817.56 1208.1 L1816.97 1208.1 L1816.39 1208.1 L1815.8 1208.1 L1815.21 1208.1 L1814.63 1208.1 L1814.04 1208.1 L1813.45 1208.1 L1812.87 1208.1 L1812.28 1208.1 L1811.69 1208.1 L1811.11 1208.1 L1810.52 1208.1 L1809.94 1208.1 L1809.35 1208.1 L1808.76 1208.1 L1808.18 1208.1 L1807.59 1208.1 L1807 1208.1 L1806.42 1208.1 L1805.83 1208.1 L1805.24 1208.1 L1804.66 1208.1 L1804.07 1208.1 L1803.48 1208.1 L1802.9 1208.1 L1802.31 1208.1 L1801.73 1208.1 L1801.14 1208.1 L1800.55 1208.1 L1799.97 1208.1 L1799.38 1208.1 L1798.79 1208.1 L1798.21 1208.1 L1797.62 1208.1 L1797.03 1208.1 L1796.45 1208.1 L1795.86 1208.1 L1795.27 1208.1 L1794.69 1208.1 L1794.1 1208.1 L1793.52 1208.1 L1792.93 1208.1 L1792.34 1208.1 L1791.76 1208.1 L1791.17 1208.1 L1790.58 1208.1 L1790 1208.1 L1789.41 1208.1 L1788.82 1208.1 L1788.24 1208.1 L1787.65 1208.1 L1787.06 1208.1 L1786.48 1208.1 L1785.89 1208.1 L1785.31 1208.1 L1784.72 1208.1 L1784.13 1208.1 L1783.55 1208.1 L1782.96 1208.1 L1782.37 1208.1 L1781.79 1208.1 L1781.2 1208.1 L1780.61 1208.1 L1780.03 1208.1 L1779.44 1208.1 L1778.86 1208.1 L1778.27 1208.1 L1777.68 1208.1 L1777.1 1208.1 L1776.51 1208.1 L1775.92 1208.1 L1775.34 1208.1 L1774.75 1208.1 L1774.16 1208.1 L1773.58 1208.1 L1772.99 1208.1 L1772.4 1208.1 L1771.82 1208.1 L1771.23 1208.1 L1770.65 1208.1 L1770.06 1208.1 L1769.47 1208.1 L1768.89 1208.1 L1768.3 1208.1 L1767.71 1208.1 L1767.13 1208.1 L1766.54 1208.1 L1765.95 1208.1 L1765.37 1208.1 L1764.78 1208.1 L1764.19 1208.1 L1763.61 1208.1 L1763.02 1208.1 L1762.44 1208.1 L1761.85 1208.1 L1761.26 1208.1 L1760.68 1208.1 L1760.09 1208.1 L1759.5 1208.1 L1758.92 1208.1 L1758.33 1208.1 L1757.74 1208.1 L1757.16 1208.1 L1756.57 1208.1 L1755.99 1208.1 L1755.4 1208.1 L1754.81 1208.1 L1754.23 1208.1 L1753.64 1208.1 L1753.05 1208.1 L1752.47 1208.1 L1751.88 1208.1 L1751.29 1208.1 L1750.71 1208.1 L1750.12 1208.1 L1749.53 1208.1 L1748.95 1208.1 L1748.36 1208.1 L1747.78 1208.1 L1747.19 1208.1 L1746.6 1208.1 L1746.02 1208.1 L1745.43 1208.1 L1744.84 1208.1 L1744.26 1208.1 L1743.67 1208.1 L1743.08 1208.1 L1742.5 1208.1 L1741.91 1208.1 L1741.32 1208.1 L1740.74 1208.1 L1740.15 1208.1 L1739.57 1208.1 L1738.98 1208.1 L1738.39 1208.1 L1737.81 1208.1 L1737.22 1208.1 L1736.63 1208.1 L1736.05 1208.1 L1735.46 1208.1 L1734.87 1208.1 L1734.29 1208.1 L1733.7 1208.1 L1733.11 1208.1 L1732.53 1208.1 L1731.94 1208.1 L1731.36 1208.1 L1730.77 1208.1 L1730.18 1208.1 L1729.6 1208.1 L1729.01 1208.1 L1728.42 1208.1 L1727.84 1208.1 L1727.25 1208.1 L1726.66 1208.1 L1726.08 1208.1 L1725.49 1208.1 L1724.91 1208.1 L1724.32 1208.1 L1723.73 1208.1 L1723.15 1208.1 L1722.56 1208.1 L1721.97 1208.1 L1721.39 1208.1 L1720.8 1208.1 L1720.21 1208.1 L1719.63 1208.1 L1719.04 1208.1 L1718.45 1208.1 L1717.87 1208.1 L1717.28 1208.1 L1716.7 1208.1 L1716.11 1208.1 L1715.52 1208.1 L1714.94 1208.1 L1714.35 1208.1 L1713.76 1208.1 L1713.18 1208.1 L1712.59 1208.1 L1712 1208.1 L1711.42 1208.1 L1710.83 1208.1 L1710.24 1208.1 L1709.66 1208.1 L1709.07 1208.1 L1708.49 1208.1 L1707.9 1208.1 L1707.31 1208.1 L1706.73 1208.1 L1706.14 1208.1 L1705.55 1208.1 L1704.97 1208.1 L1704.38 1208.1 L1703.79 1208.1 L1703.21 1208.1 L1702.62 1208.1 L1702.04 1208.1 L1701.45 1208.1 L1700.86 1208.1 L1700.28 1208.1 L1699.69 1208.1 L1699.1 1208.1 L1698.52 1208.1 L1697.93 1208.1 L1697.34 1208.1 L1696.76 1208.1 L1696.17 1208.1 L1695.58 1208.1 L1695 1208.1 L1694.41 1208.1 L1693.83 1208.1 L1693.24 1208.1 L1692.65 1208.1 L1692.07 1208.1 L1691.48 1208.1 L1690.89 1208.1 L1690.31 1208.1 L1689.72 1208.1 L1689.13 1208.1 L1688.55 1208.1 L1687.96 1208.1 L1687.37 1208.1 L1686.79 1208.1 L1686.2 1208.1 L1685.62 1208.1 L1685.03 1208.1 L1684.44 1208.1 L1683.86 1208.1 L1683.27 1208.1 L1682.68 1208.1 L1682.1 1208.1 L1681.51 1208.1 L1680.92 1208.1 L1680.34 1208.1 L1679.75 1208.1 L1679.17 1208.1 L1678.58 1208.1 L1677.99 1208.1 L1677.41 1208.1 L1676.82 1208.1 L1676.23 1208.1 L1675.65 1208.1 L1675.06 1208.1 L1674.47 1208.1 L1673.89 1208.1 L1673.3 1208.1 L1672.71 1208.1 L1672.13 1208.1 L1671.54 1208.1 L1670.96 1208.1 L1670.37 1208.1 L1669.78 1208.1 L1669.2 1208.1 L1668.61 1208.1 L1668.02 1208.1 L1667.44 1208.1 L1666.85 1208.1 L1666.26 1208.1 L1665.68 1208.1 L1665.09 1208.1 L1664.5 1208.1 L1663.92 1208.1 L1663.33 1208.1 L1662.75 1208.1 L1662.16 1208.1 L1661.57 1208.1 L1660.99 1208.1 L1660.4 1208.1 L1659.81 1208.1 L1659.23 1208.1 L1658.64 1208.1 L1658.05 1208.1 L1657.47 1208.1 L1656.88 1208.1 L1656.29 1208.1 L1655.71 1208.1 L1655.12 1208.1 L1654.54 1208.1 L1653.95 1208.1 L1653.36 1208.1 L1652.78 1208.1 L1652.19 1208.1 L1651.6 1208.1 L1651.02 1208.1 L1650.43 1208.1 L1649.84 1208.1 L1649.26 1208.1 L1648.67 1208.1 L1648.09 1208.1 L1647.5 1208.1 L1646.91 1208.1 L1646.33 1208.1 L1645.74 1208.1 L1645.15 1208.1 L1644.57 1208.1 L1643.98 1208.1 L1643.39 1208.1 L1642.81 1208.1 L1642.22 1208.1 L1641.63 1208.1 L1641.05 1208.1 L1640.46 1208.1 L1639.88 1208.1 L1639.29 1208.1 L1638.7 1208.1 L1638.12 1208.1 L1637.53 1208.1 L1636.94 1208.1 L1636.36 1208.1 L1635.77 1208.1 L1635.18 1208.1 L1634.6 1208.1 L1634.01 1208.1 L1633.42 1208.1 L1632.84 1208.1 L1632.25 1208.1 L1631.67 1208.1 L1631.08 1208.1 L1630.49 1208.1 L1629.91 1208.1 L1629.32 1208.1 L1628.73 1208.1 L1628.15 1208.1 L1627.56 1208.1 L1626.97 1208.1 L1626.39 1208.1 L1625.8 1208.1 L1625.22 1208.1 L1624.63 1208.1 L1624.04 1208.1 L1623.46 1208.1 L1622.87 1208.1 L1622.28 1208.1 L1621.7 1208.1 L1621.11 1208.1 L1620.52 1208.1 L1619.94 1208.1 L1619.35 1208.1 L1618.76 1208.1 L1618.18 1208.1 L1617.59 1208.1 L1617.01 1208.1 L1616.42 1208.1 L1615.83 1208.1 L1615.25 1208.1 L1614.66 1208.1 L1614.07 1208.1 L1613.49 1208.1 L1612.9 1208.1 L1612.31 1208.1 L1611.73 1208.1 L1611.14 1208.1 L1610.55 1208.1 L1609.97 1208.1 L1609.38 1208.1 L1608.8 1208.1 L1608.21 1208.1 L1607.62 1208.1 L1607.04 1208.1 L1606.45 1208.1 L1605.86 1208.1 L1605.28 1208.1 L1604.69 1208.1 L1604.1 1208.1 L1603.52 1208.1 L1602.93 1208.1 L1602.34 1208.1 L1601.76 1208.1 L1601.17 1208.1 L1600.59 1208.1 L1600 1208.1 L1599.41 1208.1 L1598.83 1208.1 L1598.24 1208.1 L1597.65 1208.1 L1597.07 1208.1 L1596.48 1208.1 L1595.89 1208.1 L1595.31 1208.1 L1594.72 1208.1 L1594.14 1208.1 L1593.55 1208.1 L1592.96 1208.1 L1592.38 1208.1 L1591.79 1208.1 L1591.2 1208.1 L1590.62 1208.1 L1590.03 1208.1 L1589.44 1208.1 L1588.86 1208.1 L1588.27 1208.1 L1587.68 1208.1 L1587.1 1208.1 L1586.51 1208.1 L1585.93 1208.1 L1585.34 1208.1 L1584.75 1208.1 L1584.17 1208.1 L1583.58 1208.1 L1582.99 1208.1 L1582.41 1208.1 L1581.82 1208.1 L1581.23 1208.1 L1580.65 1208.1 L1580.06 1208.1 L1579.47 1208.1 L1578.89 1208.1 L1578.3 1208.1 L1577.72 1208.1 L1577.13 1208.1 L1576.54 1208.1 L1575.96 1208.1 L1575.37 1208.1 L1574.78 1208.1 L1574.2 1208.1 L1573.61 1208.1 L1573.02 1208.1 L1572.44 1208.1 L1571.85 1208.1 L1571.27 1208.1 L1570.68 1208.1 L1570.09 1208.1 L1569.51 1208.1 L1568.92 1208.1 L1568.33 1208.1 L1567.75 1208.1 L1567.16 1208.1 L1566.57 1208.1 L1565.99 1208.1 L1565.4 1208.1 L1564.81 1208.1 L1564.23 1208.1 L1563.64 1208.1 L1563.06 1208.1 L1562.47 1208.1 L1561.88 1208.1 L1561.3 1208.1 L1560.71 1208.1 L1560.12 1208.1 L1559.54 1208.1 L1558.95 1208.1 L1558.36 1208.1 L1557.78 1208.1 L1557.19 1208.1 L1556.6 1208.1 L1556.02 1208.1 L1555.43 1208.1 L1554.85 1208.1 L1554.26 1208.1 L1553.67 1208.1 L1553.09 1208.1 L1552.5 1208.1 L1551.91 1208.1 L1551.33 1208.1 L1550.74 1208.1 L1550.15 1208.1 L1549.57 1208.1 L1548.98 1208.1 L1548.4 1208.1 L1547.81 1208.1 L1547.22 1208.1 L1546.64 1208.1 L1546.05 1208.1 L1545.46 1208.1 L1544.88 1208.1 L1544.29 1208.1 L1543.7 1208.1 L1543.12 1208.1 L1542.53 1208.1 L1541.94 1208.1 L1541.36 1208.1 L1540.77 1208.1 L1540.19 1208.1 L1539.6 1208.1 L1539.01 1208.1 L1538.43 1208.1 L1537.84 1208.1 L1537.25 1208.1 L1536.67 1208.1 L1536.08 1208.1 L1535.49 1208.1 L1534.91 1208.1 L1534.32 1208.1 L1533.73 1208.1 L1533.15 1208.1 L1532.56 1208.1 L1531.98 1208.1 L1531.39 1208.1 L1530.8 1208.1 L1530.22 1208.1 L1529.63 1208.1 L1529.04 1208.1 L1528.46 1208.1 L1527.87 1208.1 L1527.28 1208.1 L1526.7 1208.1 L1526.11 1208.1 L1525.52 1208.1 L1524.94 1208.1 L1524.35 1208.1 L1523.77 1208.1 L1523.18 1208.1 L1522.59 1208.1 L1522.01 1208.1 L1521.42 1208.1 L1520.83 1208.1 L1520.25 1208.1 L1519.66 1208.1 L1519.07 1208.1 L1518.49 1208.1 L1517.9 1208.1 L1517.32 1208.1 L1516.73 1208.1 L1516.14 1208.1 L1515.56 1208.1 L1514.97 1208.1 L1514.38 1208.1 L1513.8 1208.1 L1513.21 1208.1 L1512.62 1208.1 L1512.04 1208.1 L1511.45 1208.1 L1510.86 1208.1 L1510.28 1208.1 L1509.69 1208.1 L1509.11 1208.1 L1508.52 1208.1 L1507.93 1208.1 L1507.35 1208.1 L1506.76 1208.1 L1506.17 1208.1 L1505.59 1208.1 L1505 1208.1 L1504.41 1208.1 L1503.83 1208.1 L1503.24 1208.1 L1502.65 1208.1 L1502.07 1208.1 L1501.48 1208.1 L1500.9 1208.1 L1500.31 1208.1 L1499.72 1208.1 L1499.14 1208.1 L1498.55 1208.1 L1497.96 1208.1 L1497.38 1208.1 L1496.79 1208.1 L1496.2 1208.1 L1495.62 1208.1 L1495.03 1208.1 L1494.45 1208.1 L1493.86 1208.1 L1493.27 1208.1 L1492.69 1208.1 L1492.1 1208.1 L1491.51 1208.1 L1490.93 1208.1 L1490.34 1208.1 L1489.75 1208.1 L1489.17 1208.1 L1488.58 1208.1 L1487.99 1208.1 L1487.41 1208.1 L1486.82 1208.1 L1486.24 1208.1 L1485.65 1208.1 L1485.06 1208.1 L1484.48 1208.1 L1483.89 1208.1 L1483.3 1208.1 L1482.72 1208.1 L1482.13 1208.1 L1481.54 1208.1 L1480.96 1208.1 L1480.37 1208.1 L1479.78 1208.1 L1479.2 1208.1 L1478.61 1208.1 L1478.03 1208.1 L1477.44 1208.1 L1476.85 1208.1 L1476.27 1208.1 L1475.68 1208.1 L1475.09 1208.1 L1474.51 1208.1 L1473.92 1208.1 L1473.33 1208.1 L1472.75 1208.1 L1472.16 1208.1 L1471.57 1208.1 L1470.99 1208.1 L1470.4 1208.1 L1469.82 1208.1 L1469.23 1208.1 L1468.64 1208.1 L1468.06 1208.1 L1467.47 1208.1 L1466.88 1208.1 L1466.3 1208.1 L1465.71 1208.1 L1465.12 1208.1 L1464.54 1208.1 L1463.95 1208.1 L1463.37 1208.1 L1462.78 1208.1 L1462.19 1208.1 L1461.61 1208.1 L1461.02 1208.1 L1460.43 1208.1 L1459.85 1208.1 L1459.26 1208.1 L1458.67 1208.1 L1458.09 1208.1 L1457.5 1208.1 L1456.91 1208.1 L1456.33 1208.1 L1455.74 1208.1 L1455.16 1208.1 L1454.57 1208.1 L1453.98 1208.1 L1453.4 1208.1 L1452.81 1208.1 L1452.22 1208.1 L1451.64 1208.1 L1451.05 1208.1 L1450.46 1208.1 L1449.88 1208.1 L1449.29 1208.1 L1448.7 1208.1 L1448.12 1208.1 L1447.53 1208.1 L1446.95 1208.1 L1446.36 1208.1 L1445.77 1208.1 L1445.19 1208.1 L1444.6 1208.1 L1444.01 1208.1 L1443.43 1208.1 L1442.84 1208.1 L1442.25 1208.1 L1441.67 1208.1 L1441.08 1208.1 L1440.5 1208.1 L1439.91 1208.1 L1439.32 1208.1 L1438.74 1208.1 L1438.15 1208.1 L1437.56 1208.1 L1436.98 1208.1 L1436.39 1208.1 L1435.8 1208.1 L1435.22 1208.1 L1434.63 1208.1 L1434.04 1208.1 L1433.46 1208.1 L1432.87 1208.1 L1432.29 1208.1 L1431.7 1208.1 L1431.11 1208.1 L1430.53 1208.1 L1429.94 1208.1 L1429.35 1208.1 L1428.77 1208.1 L1428.18 1208.1 L1427.59 1208.1 L1427.01 1208.1 L1426.42 1208.1 L1425.83 1208.1 L1425.25 1208.1 L1424.66 1208.1 L1424.08 1208.1 L1423.49 1208.1 L1422.9 1208.1 L1422.32 1208.1 L1421.73 1208.1 L1421.14 1208.1 L1420.56 1208.1 L1419.97 1208.1 L1419.38 1208.1 L1418.8 1208.1 L1418.21 1208.1 L1417.63 1208.1 L1417.04 1208.1 L1416.45 1208.1 L1415.87 1208.1 L1415.28 1208.1 L1414.69 1208.1 L1414.11 1208.1 L1413.52 1208.1 L1412.93 1208.1 L1412.35 1208.1 L1411.76 1208.1 L1411.17 1208.1 L1410.59 1208.1 L1410 1208.1 L1409.42 1208.1 L1408.83 1208.1 L1408.24 1208.1 L1407.66 1208.1 L1407.07 1208.1 L1406.48 1208.1 L1405.9 1208.1 L1405.31 1208.1 L1404.72 1208.1 L1404.14 1208.1 L1403.55 1208.1 L1402.96 1208.1 L1402.38 1208.1 L1401.79 1208.1 L1401.21 1208.1 L1400.62 1208.1 L1400.03 1208.1 L1399.45 1208.1 L1398.86 1208.1 L1398.27 1208.1 L1397.69 1208.1 L1397.1 1208.1 L1396.51 1208.1 L1395.93 1208.1 L1395.34 1208.1 L1394.75 1208.1 L1394.17 1208.1 L1393.58 1208.1 L1393 1208.1 L1392.41 1208.1 L1391.82 1208.1 L1391.24 1208.1 L1390.65 1208.1 L1390.06 1208.1 L1389.48 1208.1 L1388.89 1208.1 L1388.3 1208.1 L1387.72 1208.1 L1387.13 1208.1 L1386.55 1208.1 L1385.96 1208.1 L1385.37 1208.1 L1384.79 1208.1 L1384.2 1208.1 L1383.61 1208.1 L1383.03 1208.1 L1382.44 1208.1 L1381.85 1208.1 L1381.27 1208.1 L1380.68 1208.1 L1380.09 1208.1 L1379.51 1208.1 L1378.92 1208.1 L1378.34 1208.1 L1377.75 1208.1 L1377.16 1208.1 L1376.58 1208.1 L1375.99 1208.1 L1375.4 1208.1 L1374.82 1208.1 L1374.23 1208.1 L1373.64 1208.1 L1373.06 1208.1 L1372.47 1208.1 L1371.88 1208.1 L1371.3 1208.1 L1370.71 1208.1 L1370.13 1208.1 L1369.54 1208.1 L1368.95 1208.1 L1368.37 1208.1 L1367.78 1208.1 L1367.19 1208.1 L1366.61 1208.1 L1366.02 1208.1 L1365.43 1208.1 L1364.85 1208.1 L1364.26 1208.1 L1363.68 1208.1 L1363.09 1208.1 L1362.5 1208.1 L1361.92 1208.1 L1361.33 1208.1 L1360.74 1208.1 L1360.16 1208.1 L1359.57 1208.1 L1358.98 1208.1 L1358.4 1208.1 L1357.81 1208.1 L1357.22 1208.1 L1356.64 1208.1 L1356.05 1208.1 L1355.47 1208.1 L1354.88 1208.1 L1354.29 1208.1 L1353.71 1208.1 L1353.12 1208.1 L1352.53 1208.1 L1351.95 1208.1 L1351.36 1208.1 L1350.77 1208.1 L1350.19 1208.1 L1349.6 1208.1 L1349.01 1208.1 L1348.43 1208.1 L1347.84 1208.1 L1347.26 1208.1 L1346.67 1208.1 L1346.08 1208.1 L1345.5 1208.1 L1344.91 1208.1 L1344.32 1208.1 L1343.74 1208.1 L1343.15 1208.1 L1342.56 1208.1 L1341.98 1208.1 L1341.39 1208.1 L1340.8 1208.1 L1340.22 1208.1 L1339.63 1208.1 L1339.05 1208.1 L1338.46 1208.1 L1337.87 1208.1 L1337.29 1208.1 L1336.7 1208.1 L1336.11 1208.1 L1335.53 1208.1 L1334.94 1208.1 L1334.35 1208.1 L1333.77 1208.1 L1333.18 1208.1 L1332.6 1208.1 L1332.01 1208.1 L1331.42 1208.1 L1330.84 1208.1 L1330.25 1208.1 L1329.66 1208.1 L1329.08 1208.1 L1328.49 1208.1 L1327.9 1208.1 L1327.32 1208.1 L1326.73 1208.1 L1326.14 1208.1 L1325.56 1208.1 L1324.97 1208.1 L1324.39 1208.1 L1323.8 1208.1 L1323.21 1208.1 L1322.63 1208.1 L1322.04 1208.1 L1321.45 1208.1 L1320.87 1208.1 L1320.28 1208.1 L1319.69 1208.1 L1319.11 1208.1 L1318.52 1208.1 L1317.93 1208.1 L1317.35 1208.1 L1316.76 1208.1 L1316.18 1208.1 L1315.59 1208.1 L1315 1208.1 L1314.42 1208.1 L1313.83 1208.1 L1313.24 1208.1 L1312.66 1208.1 L1312.07 1208.1 L1311.48 1208.1 L1310.9 1208.1 L1310.31 1208.1 L1309.73 1208.1 L1309.14 1208.1 L1308.55 1208.1 L1307.97 1208.1 L1307.38 1208.1 L1306.79 1208.1 L1306.21 1208.1 L1305.62 1208.1 L1305.03 1208.1 L1304.45 1208.1 L1303.86 1208.1 L1303.27 1208.1 L1302.69 1208.1 L1302.1 1208.1 L1301.52 1208.1 L1300.93 1208.1 L1300.34 1208.1 L1299.76 1208.1 L1299.17 1208.1 L1298.58 1208.1 L1298 1208.1 L1297.41 1208.1 L1296.82 1208.1 L1296.24 1208.1 L1295.65 1208.1 L1295.06 1208.1 L1294.48 1208.1 L1293.89 1208.1 L1293.31 1208.1 L1292.72 1208.1 L1292.13 1208.1 L1291.55 1208.1 L1290.96 1208.1 L1290.37 1208.1 L1289.79 1208.1 L1289.2 1208.1 L1288.61 1208.1 L1288.03 1208.1 L1287.44 1208.1 L1286.86 1208.1 L1286.27 1208.1 L1285.68 1208.1 L1285.1 1208.1 L1284.51 1208.1 L1283.92 1208.1 L1283.34 1208.1 L1282.75 1208.1 L1282.16 1208.1 L1281.58 1208.1 L1280.99 1208.1 L1280.4 1208.1 L1279.82 1208.1 L1279.23 1208.1 L1278.65 1208.1 L1278.06 1208.1 L1277.47 1208.1 L1276.89 1208.1 L1276.3 1208.1 L1275.71 1208.1 L1275.13 1208.1 L1274.54 1208.1 L1273.95 1208.1 L1273.37 1208.1 L1272.78 1208.1 L1272.19 1208.1 L1271.61 1208.1 L1271.02 1208.1 L1270.44 1208.1 L1269.85 1208.1 L1269.26 1208.1 L1268.68 1208.1 L1268.09 1208.1 L1267.5 1208.1 L1266.92 1208.1 L1266.33 1208.1 L1265.74 1208.1 L1265.16 1208.1 L1264.57 1208.1 L1263.98 1208.1 L1263.4 1208.1 L1262.81 1208.1 L1262.23 1208.1 L1261.64 1208.1 L1261.05 1208.1 L1260.47 1208.1 L1259.88 1208.1 L1259.29 1208.1 L1258.71 1208.1 L1258.12 1208.1 L1257.53 1208.1 L1256.95 1208.1 L1256.36 1208.1 L1255.78 1208.1 L1255.19 1208.1 L1254.6 1208.1 L1254.02 1208.1 L1253.43 1208.1 L1252.84 1208.1 L1252.26 1208.1 L1251.67 1208.1 L1251.08 1208.1 L1250.5 1208.1 L1249.91 1208.1 L1249.32 1208.1 L1248.74 1208.1 L1248.15 1208.1 L1247.57 1208.1 L1246.98 1208.1 L1246.39 1208.1 L1245.81 1208.1 L1245.22 1208.1 L1244.63 1208.1 L1244.05 1208.1 L1243.46 1208.1 L1242.87 1208.1 L1242.29 1208.1 L1241.7 1208.1 L1241.11 1208.1 L1240.53 1208.1 L1239.94 1208.1 L1239.36 1208.1 L1238.77 1208.1 L1238.18 1208.1 L1237.6 1208.1 L1237.01 1208.1 L1236.42 1208.1 L1235.84 1208.1 L1235.25 1208.1 L1234.66 1208.1 L1234.08 1208.1 L1233.49 1208.1 L1232.91 1208.1 L1232.32 1208.1 L1231.73 1208.1 L1231.15 1208.1 L1230.56 1208.1 L1229.97 1208.1 L1229.39 1208.1 L1228.8 1208.1 L1228.21 1208.1 L1227.63 1208.1 L1227.04 1208.1 L1226.45 1208.1 L1225.87 1208.1 L1225.28 1208.1 L1224.7 1208.1 L1224.11 1208.1 L1223.52 1208.1 L1222.94 1208.1 L1222.35 1208.1 L1221.76 1208.1 L1221.18 1208.1 L1220.59 1208.1 L1220 1208.1 L1219.42 1208.1 L1218.83 1208.1 L1218.24 1208.1 L1217.66 1208.1 L1217.07 1208.1 L1216.49 1208.1 L1215.9 1208.1 L1215.31 1208.1 L1214.73 1208.1 L1214.14 1208.1 L1213.55 1208.1 L1212.97 1208.1 L1212.38 1208.1 L1211.79 1208.1 L1211.21 1208.1 L1210.62 1208.1 L1210.03 1208.1 L1209.45 1208.1 L1208.86 1208.1 L1208.28 1208.1 L1207.69 1208.1 L1207.1 1208.1 L1206.52 1208.1 L1205.93 1208.1 L1205.34 1208.1 L1204.76 1208.1 L1204.17 1208.1 L1203.58 1208.1 L1203 1208.1 L1202.41 1208.1 L1201.83 1208.1 L1201.24 1208.1 L1200.65 1208.1 L1200.07 1208.1 L1199.48 1208.1 L1198.89 1208.1 L1198.31 1208.1 L1197.72 1208.1 L1197.13 1208.1 L1196.55 1208.1 L1195.96 1208.1 L1195.37 1208.1 L1194.79 1208.1 L1194.2 1208.1 L1193.62 1208.1 L1193.03 1208.1 L1192.44 1208.1 L1191.86 1208.1 L1191.27 1208.1 L1190.68 1208.1 L1190.1 1208.1 L1189.51 1208.1 L1188.92 1208.1 L1188.34 1208.1 L1187.75 1208.1 L1187.16 1208.1 L1186.58 1208.1 L1185.99 1208.1 L1185.41 1208.1 L1184.82 1208.1 L1184.23 1208.1 L1183.65 1208.1 L1183.06 1208.1 L1182.47 1208.1 L1181.89 1208.1 L1181.3 1208.1 L1180.71 1208.1 L1180.13 1208.1 L1179.54 1208.1 L1178.96 1208.1 L1178.37 1208.1 L1177.78 1208.1 L1177.2 1208.1 L1176.61 1208.1 L1176.02 1208.1 L1175.44 1208.1 L1174.85 1208.1 L1174.26 1208.1 L1173.68 1208.1 L1173.09 1208.1 L1172.5 1208.1 L1171.92 1208.1 L1171.33 1208.1 L1170.75 1208.1 L1170.16 1208.1 L1169.57 1208.1 L1168.99 1208.1 L1168.4 1208.1 L1167.81 1208.1 L1167.23 1208.1 L1166.64 1208.1 L1166.05 1208.1 L1165.47 1208.1 L1164.88 1208.1 L1164.29 1208.1 L1163.71 1208.1 L1163.12 1208.1 L1162.54 1208.1 L1161.95 1208.1 L1161.36 1208.1 L1160.78 1208.1 L1160.19 1208.1 L1159.6 1208.1 L1159.02 1208.1 L1158.43 1208.1 L1157.84 1208.1 L1157.26 1208.1 L1156.67 1208.1 L1156.09 1208.1 L1155.5 1208.1 L1154.91 1208.1 L1154.33 1208.1 L1153.74 1208.1 L1153.15 1208.1 L1152.57 1208.1 L1151.98 1208.1 L1151.39 1208.1 L1150.81 1208.1 L1150.22 1208.1 L1149.63 1208.1 L1149.05 1208.1 L1148.46 1208.1 L1147.88 1208.1 L1147.29 1208.1 L1146.7 1208.1 L1146.12 1208.1 L1145.53 1208.1 L1144.94 1208.1 L1144.36 1208.1 L1143.77 1208.1 L1143.18 1208.1 L1142.6 1208.1 L1142.01 1208.1 L1141.42 1208.1 L1140.84 1208.1 L1140.25 1208.1 L1139.67 1208.1 L1139.08 1208.1 L1138.49 1208.1 L1137.91 1208.1 L1137.32 1208.1 L1136.73 1208.1 L1136.15 1208.1 L1135.56 1208.1 L1134.97 1208.1 L1134.39 1208.1 L1133.8 1208.1 L1133.21 1208.1 L1132.63 1208.1 L1132.04 1208.1 L1131.46 1208.1 L1130.87 1208.1 L1130.28 1208.1 L1129.7 1208.1 L1129.11 1208.1 L1128.52 1208.1 L1127.94 1208.1 L1127.35 1208.1 L1126.76 1208.1 L1126.18 1208.1 L1125.59 1208.1 L1125.01 1208.1 L1124.42 1208.1 L1123.83 1208.1 L1123.25 1208.1 L1122.66 1208.1 L1122.07 1208.1 L1121.49 1208.1 L1120.9 1208.1 L1120.31 1208.1 L1119.73 1208.1 L1119.14 1208.1 L1118.55 1208.1 L1117.97 1208.1 L1117.38 1208.1 L1116.8 1208.1 L1116.21 1208.1 L1115.62 1208.1 L1115.04 1208.1 L1114.45 1208.1 L1113.86 1208.1 L1113.28 1208.1 L1112.69 1208.1 L1112.1 1208.1 L1111.52 1208.1 L1110.93 1208.1 L1110.34 1208.1 L1109.76 1208.1 L1109.17 1208.1 L1108.59 1208.1 L1108 1208.1 L1107.41 1208.1 L1106.83 1208.1 L1106.24 1208.1 L1105.65 1208.1 L1105.07 1208.1 L1104.48 1208.1 L1103.89 1208.1 L1103.31 1208.1 L1102.72 1208.1 L1102.14 1208.1 L1101.55 1208.1 L1100.96 1208.1 L1100.38 1208.1 L1099.79 1208.1 L1099.2 1208.1 L1098.62 1208.1 L1098.03 1208.1 L1097.44 1208.1 L1096.86 1208.1 L1096.27 1208.1 L1095.68 1208.1 L1095.1 1208.1 L1094.51 1208.1 L1093.93 1208.1 L1093.34 1208.1 L1092.75 1208.1 L1092.17 1208.1 L1091.58 1208.1 L1090.99 1208.1 L1090.41 1208.1 L1089.82 1208.1 L1089.23 1208.1 L1088.65 1208.1 L1088.06 1208.1 L1087.47 1208.1 L1086.89 1208.1 L1086.3 1208.1 L1085.72 1208.1 L1085.13 1208.1 L1084.54 1208.1 L1083.96 1208.1 L1083.37 1208.1 L1082.78 1208.1 L1082.2 1208.1 L1081.61 1208.1 L1081.02 1208.1 L1080.44 1208.1 L1079.85 1208.1 L1079.26 1208.1 L1078.68 1208.1 L1078.09 1208.1 L1077.51 1208.1 L1076.92 1208.1 L1076.33 1208.1 L1075.75 1208.1 L1075.16 1208.1 L1074.57 1208.1 L1073.99 1208.1 L1073.4 1208.1 L1072.81 1208.1 L1072.23 1208.1 L1071.64 1208.1 L1071.06 1208.1 L1070.47 1208.1 L1069.88 1208.1 L1069.3 1208.1 L1068.71 1208.1 L1068.12 1208.1 L1067.54 1208.1 L1066.95 1208.1 L1066.36 1208.1 L1065.78 1208.1 L1065.19 1208.1 L1064.6 1208.1 L1064.02 1208.1 L1063.43 1208.1 L1062.85 1208.1 L1062.26 1208.1 L1061.67 1208.1 L1061.09 1208.1 L1060.5 1208.1 L1059.91 1208.1 L1059.33 1208.1 L1058.74 1208.1 L1058.15 1208.1 L1057.57 1208.1 L1056.98 1208.1 L1056.39 1208.1 L1055.81 1208.1 L1055.22 1208.1 L1054.64 1208.1 L1054.05 1208.1 L1053.46 1208.1 L1052.88 1208.1 L1052.29 1208.1 L1051.7 1208.1 L1051.12 1208.1 L1050.53 1208.1 L1049.94 1208.1 L1049.36 1208.1 L1048.77 1208.1 L1048.19 1208.1 L1047.6 1208.1 L1047.01 1208.1 L1046.43 1208.1 L1045.84 1208.1 L1045.25 1208.1 L1044.67 1208.1 L1044.08 1208.1 L1043.49 1208.1 L1042.91 1208.1 L1042.32 1208.1 L1041.73 1208.1 L1041.15 1208.1 L1040.56 1208.1 L1039.98 1208.1 L1039.39 1208.1 L1038.8 1208.1 L1038.22 1208.1 L1037.63 1208.1 L1037.04 1208.1 L1036.46 1208.1 L1035.87 1208.1 L1035.28 1208.1 L1034.7 1208.1 L1034.11 1208.1 L1033.52 1208.1 L1032.94 1208.1 L1032.35 1208.1 L1031.77 1208.1 L1031.18 1208.1 L1030.59 1208.1 L1030.01 1208.1 L1029.42 1208.1 L1028.83 1208.1 L1028.25 1208.1 L1027.66 1208.1 L1027.07 1208.1 L1026.49 1208.1 L1025.9 1208.1 L1025.32 1208.1 L1024.73 1208.1 L1024.14 1208.1 L1023.56 1208.1 L1022.97 1208.1 L1022.38 1208.1 L1021.8 1208.1 L1021.21 1208.1 L1020.62 1208.1 L1020.04 1208.1 L1019.45 1208.1 L1018.86 1208.1 L1018.28 1208.1 L1017.69 1208.1 L1017.11 1208.1 L1016.52 1208.1 L1015.93 1208.1 L1015.35 1208.1 L1014.76 1208.1 L1014.17 1208.1 L1013.59 1208.1 L1013 1208.1 L1012.41 1208.1 L1011.83 1208.1 L1011.24 1208.1 L1010.65 1208.1 L1010.07 1208.1 L1009.48 1208.1 L1008.9 1208.1 L1008.31 1208.1 L1007.72 1208.1 L1007.14 1208.1 L1006.55 1208.1 L1005.96 1208.1 L1005.38 1208.1 L1004.79 1208.1 L1004.2 1208.1 L1003.62 1208.1 L1003.03 1208.1 L1002.44 1208.1 L1001.86 1208.1 L1001.27 1208.1 L1000.69 1208.1 L1000.1 1208.1 L999.513 1208.1 L998.926 1208.1 L998.34 1208.1 L997.754 1208.1 L997.167 1208.1 L996.581 1208.1 L995.994 1208.1 L995.408 1208.1 L994.822 1208.1 L994.235 1208.1 L993.649 1208.1 L993.062 1208.1 L992.476 1208.1 L991.889 1208.1 L991.303 1208.1 L990.717 1208.1 L990.13 1208.1 L989.544 1208.1 L988.957 1208.1 L988.371 1208.1 L987.785 1208.1 L987.198 1208.1 L986.612 1208.1 L986.025 1208.1  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip562)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1208.42 986.612,1208.42 987.198,1208.42 987.785,1208.42 988.371,1208.42 988.957,1208.42 989.544,1208.42 990.13,1208.42 990.717,1208.42 991.303,1208.42 991.889,1208.42 992.476,1208.42 993.062,1208.42 993.649,1208.42 994.235,1208.42 994.822,1208.42 995.408,1208.42 995.994,1208.42 996.581,1208.42 997.167,1208.42 997.754,1208.42 998.34,1208.42 998.926,1208.42 999.513,1208.42 1000.1,1208.42 1000.69,1208.42 1001.27,1208.42 1001.86,1208.42 1002.44,1208.42 1003.03,1208.42 1003.62,1208.42 1004.2,1208.42 1004.79,1208.42 1005.38,1208.42 1005.96,1208.42 1006.55,1208.42 1007.14,1208.42 1007.72,1208.42 1008.31,1208.42 1008.9,1208.42 1009.48,1208.42 1010.07,1208.42 1010.65,1208.42 1011.24,1208.42 1011.83,1208.42 1012.41,1208.42 1013,1208.42 1013.59,1208.42 1014.17,1208.42 1014.76,1208.42 1015.35,1208.42 1015.93,1208.42 1016.52,1208.42 1017.11,1208.42 1017.69,1208.42 1018.28,1208.42 1018.86,1208.42 1019.45,1208.42 1020.04,1208.42 1020.62,1208.42 1021.21,1208.42 1021.8,1208.42 1022.38,1208.42 1022.97,1208.42 1023.56,1208.42 1024.14,1208.42 1024.73,1208.42 1025.32,1208.42 1025.9,1208.42 1026.49,1208.42 1027.07,1208.42 1027.66,1208.42 1028.25,1208.42 1028.83,1208.42 1029.42,1208.42 1030.01,1208.42 1030.59,1208.42 1031.18,1208.42 1031.77,1208.42 1032.35,1208.42 1032.94,1208.42 1033.52,1208.42 1034.11,1208.42 1034.7,1208.42 1035.28,1208.42 1035.87,1208.42 1036.46,1208.42 1037.04,1208.42 1037.63,1208.42 1038.22,1208.42 1038.8,1208.42 1039.39,1208.42 1039.98,1208.42 1040.56,1208.42 1041.15,1208.42 1041.73,1208.42 1042.32,1208.42 1042.91,1208.42 1043.49,1208.42 1044.08,1208.42 1044.67,1208.42 1045.25,1208.42 1045.84,1208.42 1046.43,1208.42 1047.01,1208.42 1047.6,1208.42 1048.19,1208.42 1048.77,1208.42 1049.36,1208.42 1049.94,1208.42 1050.53,1208.42 1051.12,1208.42 1051.7,1208.42 1052.29,1208.42 1052.88,1208.42 1053.46,1208.42 1054.05,1208.42 1054.64,1208.42 1055.22,1208.42 1055.81,1208.42 1056.39,1208.42 1056.98,1208.42 1057.57,1208.42 1058.15,1208.42 1058.74,1208.42 1059.33,1208.42 1059.91,1208.42 1060.5,1208.42 1061.09,1208.42 1061.67,1208.42 1062.26,1208.42 1062.85,1208.42 1063.43,1208.42 1064.02,1208.42 1064.6,1208.42 1065.19,1208.42 1065.78,1208.42 1066.36,1208.42 1066.95,1208.42 1067.54,1208.42 1068.12,1208.42 1068.71,1208.42 1069.3,1208.42 1069.88,1208.42 1070.47,1208.42 1071.06,1208.42 1071.64,1208.42 1072.23,1208.42 1072.81,1208.42 1073.4,1208.42 1073.99,1208.42 1074.57,1208.42 1075.16,1208.42 1075.75,1208.42 1076.33,1208.42 1076.92,1208.42 1077.51,1208.42 1078.09,1208.42 1078.68,1208.42 1079.26,1208.42 1079.85,1208.42 1080.44,1208.42 1081.02,1208.42 1081.61,1208.42 1082.2,1208.42 1082.78,1208.42 1083.37,1208.42 1083.96,1208.42 1084.54,1208.42 1085.13,1208.42 1085.72,1208.42 1086.3,1208.42 1086.89,1208.42 1087.47,1208.42 1088.06,1208.42 1088.65,1208.42 1089.23,1208.42 1089.82,1208.42 1090.41,1208.42 1090.99,1208.42 1091.58,1208.42 1092.17,1208.42 1092.75,1208.42 1093.34,1208.42 1093.93,1208.42 1094.51,1208.42 1095.1,1208.42 1095.68,1208.42 1096.27,1208.42 1096.86,1208.42 1097.44,1208.42 1098.03,1208.42 1098.62,1208.42 1099.2,1208.42 1099.79,1208.42 1100.38,1208.42 1100.96,1208.42 1101.55,1208.42 1102.14,1208.42 1102.72,1208.42 1103.31,1208.42 1103.89,1208.42 1104.48,1208.42 1105.07,1208.42 1105.65,1208.42 1106.24,1208.42 1106.83,1208.42 1107.41,1208.42 1108,1208.42 1108.59,1208.42 1109.17,1208.42 1109.76,1208.42 1110.34,1208.42 1110.93,1208.42 1111.52,1208.42 1112.1,1208.42 1112.69,1208.42 1113.28,1208.42 1113.86,1208.42 1114.45,1208.42 1115.04,1208.42 1115.62,1208.42 1116.21,1208.42 1116.8,1208.42 1117.38,1208.42 1117.97,1208.42 1118.55,1208.42 1119.14,1208.42 1119.73,1208.42 1120.31,1208.42 1120.9,1208.42 1121.49,1208.42 1122.07,1208.42 1122.66,1208.42 1123.25,1208.42 1123.83,1208.42 1124.42,1208.42 1125.01,1208.42 1125.59,1208.42 1126.18,1208.42 1126.76,1208.42 1127.35,1208.42 1127.94,1208.42 1128.52,1208.42 1129.11,1208.42 1129.7,1208.42 1130.28,1208.42 1130.87,1208.42 1131.46,1208.42 1132.04,1208.42 1132.63,1208.42 1133.21,1208.42 1133.8,1208.42 1134.39,1208.42 1134.97,1208.42 1135.56,1208.42 1136.15,1208.42 1136.73,1208.42 1137.32,1208.42 1137.91,1208.42 1138.49,1208.42 1139.08,1208.42 1139.67,1208.42 1140.25,1208.42 1140.84,1208.42 1141.42,1208.42 1142.01,1208.42 1142.6,1208.42 1143.18,1208.42 1143.77,1208.42 1144.36,1208.42 1144.94,1208.42 1145.53,1208.42 1146.12,1208.42 1146.7,1208.42 1147.29,1208.42 1147.88,1208.42 1148.46,1208.42 1149.05,1208.42 1149.63,1208.42 1150.22,1208.42 1150.81,1208.42 1151.39,1208.42 1151.98,1208.42 1152.57,1208.42 1153.15,1208.42 1153.74,1208.42 1154.33,1208.42 1154.91,1208.42 1155.5,1208.42 1156.09,1208.42 1156.67,1208.42 1157.26,1208.42 1157.84,1208.42 1158.43,1208.42 1159.02,1208.42 1159.6,1208.42 1160.19,1208.42 1160.78,1208.42 1161.36,1208.42 1161.95,1208.42 1162.54,1208.42 1163.12,1208.42 1163.71,1208.42 1164.29,1208.42 1164.88,1208.42 1165.47,1208.42 1166.05,1208.42 1166.64,1208.42 1167.23,1208.42 1167.81,1208.42 1168.4,1208.42 1168.99,1208.42 1169.57,1208.42 1170.16,1208.42 1170.75,1208.42 1171.33,1208.42 1171.92,1208.42 1172.5,1208.42 1173.09,1208.42 1173.68,1208.42 1174.26,1208.42 1174.85,1208.42 1175.44,1208.42 1176.02,1208.42 1176.61,1208.42 1177.2,1208.42 1177.78,1208.42 1178.37,1208.42 1178.96,1208.42 1179.54,1208.42 1180.13,1208.42 1180.71,1208.42 1181.3,1208.42 1181.89,1208.42 1182.47,1208.42 1183.06,1208.42 1183.65,1208.42 1184.23,1208.42 1184.82,1208.42 1185.41,1208.42 1185.99,1208.42 1186.58,1208.42 1187.16,1208.42 1187.75,1208.42 1188.34,1208.42 1188.92,1208.42 1189.51,1208.42 1190.1,1208.42 1190.68,1208.42 1191.27,1208.42 1191.86,1208.42 1192.44,1208.42 1193.03,1208.42 1193.62,1208.42 1194.2,1208.42 1194.79,1208.42 1195.37,1208.42 1195.96,1208.42 1196.55,1208.42 1197.13,1208.42 1197.72,1208.42 1198.31,1208.42 1198.89,1208.42 1199.48,1208.42 1200.07,1208.42 1200.65,1208.42 1201.24,1208.42 1201.83,1208.42 1202.41,1208.42 1203,1208.42 1203.58,1208.42 1204.17,1208.42 1204.76,1208.42 1205.34,1208.42 1205.93,1208.42 1206.52,1208.42 1207.1,1208.42 1207.69,1208.42 1208.28,1208.42 1208.86,1208.42 1209.45,1208.42 1210.03,1208.42 1210.62,1208.42 1211.21,1208.42 1211.79,1208.42 1212.38,1208.42 1212.97,1208.42 1213.55,1208.42 1214.14,1208.42 1214.73,1208.42 1215.31,1208.42 1215.9,1208.42 1216.49,1208.42 1217.07,1208.42 1217.66,1208.42 1218.24,1208.42 1218.83,1208.42 1219.42,1208.42 1220,1208.42 1220.59,1208.42 1221.18,1208.42 1221.76,1208.42 1222.35,1208.42 1222.94,1208.42 1223.52,1208.42 1224.11,1208.42 1224.7,1208.42 1225.28,1208.42 1225.87,1208.42 1226.45,1208.42 1227.04,1208.42 1227.63,1208.42 1228.21,1208.42 1228.8,1208.42 1229.39,1208.42 1229.97,1208.42 1230.56,1208.42 1231.15,1208.42 1231.73,1208.42 1232.32,1208.42 1232.91,1208.42 1233.49,1208.42 1234.08,1208.42 1234.66,1208.42 1235.25,1208.42 1235.84,1208.42 1236.42,1208.42 1237.01,1208.42 1237.6,1208.42 1238.18,1208.42 1238.77,1208.42 1239.36,1208.42 1239.94,1208.42 1240.53,1208.42 1241.11,1208.42 1241.7,1208.42 1242.29,1208.42 1242.87,1208.42 1243.46,1208.42 1244.05,1208.42 1244.63,1208.42 1245.22,1208.42 1245.81,1208.42 1246.39,1208.42 1246.98,1208.42 1247.57,1208.42 1248.15,1208.42 1248.74,1208.42 1249.32,1208.42 1249.91,1208.42 1250.5,1208.42 1251.08,1208.42 1251.67,1208.42 1252.26,1208.42 1252.84,1208.42 1253.43,1208.42 1254.02,1208.42 1254.6,1208.42 1255.19,1208.42 1255.78,1208.42 1256.36,1208.42 1256.95,1208.42 1257.53,1208.42 1258.12,1208.42 1258.71,1208.42 1259.29,1208.42 1259.88,1208.42 1260.47,1208.42 1261.05,1208.42 1261.64,1208.42 1262.23,1208.42 1262.81,1208.42 1263.4,1208.42 1263.98,1208.42 1264.57,1208.42 1265.16,1208.42 1265.74,1208.42 1266.33,1208.42 1266.92,1208.42 1267.5,1208.42 1268.09,1208.42 1268.68,1208.42 1269.26,1208.42 1269.85,1208.42 1270.44,1208.42 1271.02,1208.42 1271.61,1208.42 1272.19,1208.42 1272.78,1208.42 1273.37,1208.42 1273.95,1208.42 1274.54,1208.42 1275.13,1208.42 1275.71,1208.42 1276.3,1208.42 1276.89,1208.42 1277.47,1208.42 1278.06,1208.42 1278.65,1208.42 1279.23,1208.42 1279.82,1208.42 1280.4,1208.42 1280.99,1208.42 1281.58,1208.42 1282.16,1208.42 1282.75,1208.42 1283.34,1208.42 1283.92,1208.42 1284.51,1208.42 1285.1,1208.42 1285.68,1208.42 1286.27,1208.42 1286.86,1208.42 1287.44,1208.42 1288.03,1208.42 1288.61,1208.42 1289.2,1208.42 1289.79,1208.42 1290.37,1208.42 1290.96,1208.42 1291.55,1208.42 1292.13,1208.42 1292.72,1208.42 1293.31,1208.42 1293.89,1208.42 1294.48,1208.42 1295.06,1208.42 1295.65,1208.42 1296.24,1208.42 1296.82,1208.42 1297.41,1208.42 1298,1208.42 1298.58,1208.42 1299.17,1208.42 1299.76,1208.42 1300.34,1208.42 1300.93,1208.42 1301.52,1208.42 1302.1,1208.42 1302.69,1208.42 1303.27,1208.42 1303.86,1208.42 1304.45,1208.42 1305.03,1208.42 1305.62,1208.42 1306.21,1208.42 1306.79,1208.42 1307.38,1208.42 1307.97,1208.42 1308.55,1208.42 1309.14,1208.42 1309.73,1208.42 1310.31,1208.42 1310.9,1208.42 1311.48,1208.42 1312.07,1208.42 1312.66,1208.42 1313.24,1208.42 1313.83,1208.42 1314.42,1208.42 1315,1208.42 1315.59,1208.42 1316.18,1208.42 1316.76,1208.42 1317.35,1208.42 1317.93,1208.42 1318.52,1208.42 1319.11,1208.42 1319.69,1208.42 1320.28,1208.42 1320.87,1208.42 1321.45,1208.42 1322.04,1208.42 1322.63,1208.42 1323.21,1208.42 1323.8,1208.42 1324.39,1208.42 1324.97,1208.42 1325.56,1208.42 1326.14,1208.42 1326.73,1208.42 1327.32,1208.42 1327.9,1208.42 1328.49,1208.42 1329.08,1208.42 1329.66,1208.42 1330.25,1208.42 1330.84,1208.42 1331.42,1208.42 1332.01,1208.42 1332.6,1208.42 1333.18,1208.42 1333.77,1208.42 1334.35,1208.42 1334.94,1208.42 1335.53,1208.42 1336.11,1208.42 1336.7,1208.42 1337.29,1208.42 1337.87,1208.42 1338.46,1208.42 1339.05,1208.42 1339.63,1208.42 1340.22,1208.42 1340.8,1208.42 1341.39,1208.42 1341.98,1208.42 1342.56,1208.42 1343.15,1208.42 1343.74,1208.42 1344.32,1208.42 1344.91,1208.42 1345.5,1208.42 1346.08,1208.42 1346.67,1208.42 1347.26,1208.42 1347.84,1208.42 1348.43,1208.42 1349.01,1208.42 1349.6,1208.42 1350.19,1208.42 1350.77,1208.42 1351.36,1208.42 1351.95,1208.42 1352.53,1208.42 1353.12,1208.42 1353.71,1208.42 1354.29,1208.42 1354.88,1208.42 1355.47,1208.42 1356.05,1208.42 1356.64,1208.42 1357.22,1208.42 1357.81,1208.42 1358.4,1208.42 1358.98,1208.42 1359.57,1208.42 1360.16,1208.42 1360.74,1208.42 1361.33,1208.42 1361.92,1208.42 1362.5,1208.42 1363.09,1208.42 1363.68,1208.42 1364.26,1208.42 1364.85,1208.42 1365.43,1208.42 1366.02,1208.42 1366.61,1208.42 1367.19,1208.42 1367.78,1208.42 1368.37,1208.42 1368.95,1208.42 1369.54,1208.42 1370.13,1208.42 1370.71,1208.42 1371.3,1208.42 1371.88,1208.42 1372.47,1208.42 1373.06,1208.42 1373.64,1208.42 1374.23,1208.42 1374.82,1208.42 1375.4,1208.42 1375.99,1208.42 1376.58,1208.42 1377.16,1208.42 1377.75,1208.42 1378.34,1208.42 1378.92,1208.42 1379.51,1208.42 1380.09,1208.42 1380.68,1208.42 1381.27,1208.42 1381.85,1208.42 1382.44,1208.42 1383.03,1208.42 1383.61,1208.42 1384.2,1208.42 1384.79,1208.42 1385.37,1208.42 1385.96,1208.42 1386.55,1208.42 1387.13,1208.42 1387.72,1208.42 1388.3,1208.42 1388.89,1208.42 1389.48,1208.42 1390.06,1208.42 1390.65,1208.42 1391.24,1208.42 1391.82,1208.42 1392.41,1208.42 1393,1208.42 1393.58,1208.42 1394.17,1208.42 1394.75,1208.42 1395.34,1208.42 1395.93,1208.42 1396.51,1208.42 1397.1,1208.42 1397.69,1208.42 1398.27,1208.42 1398.86,1208.42 1399.45,1208.42 1400.03,1208.42 1400.62,1208.42 1401.21,1208.42 1401.79,1208.42 1402.38,1208.42 1402.96,1208.42 1403.55,1208.42 1404.14,1208.42 1404.72,1208.42 1405.31,1208.42 1405.9,1208.42 1406.48,1208.42 1407.07,1208.42 1407.66,1208.42 1408.24,1208.42 1408.83,1208.42 1409.42,1208.42 1410,1208.42 1410.59,1208.42 1411.17,1208.42 1411.76,1208.42 1412.35,1208.42 1412.93,1208.42 1413.52,1208.42 1414.11,1208.42 1414.69,1208.42 1415.28,1208.42 1415.87,1208.42 1416.45,1208.42 1417.04,1208.42 1417.63,1208.42 1418.21,1208.42 1418.8,1208.42 1419.38,1208.42 1419.97,1208.42 1420.56,1208.42 1421.14,1208.42 1421.73,1208.42 1422.32,1208.42 1422.9,1208.42 1423.49,1208.42 1424.08,1208.42 1424.66,1208.42 1425.25,1208.42 1425.83,1208.42 1426.42,1208.42 1427.01,1208.42 1427.59,1208.42 1428.18,1208.42 1428.77,1208.42 1429.35,1208.42 1429.94,1208.42 1430.53,1208.42 1431.11,1208.42 1431.7,1208.42 1432.29,1208.42 1432.87,1208.42 1433.46,1208.42 1434.04,1208.42 1434.63,1208.42 1435.22,1208.42 1435.8,1208.42 1436.39,1208.42 1436.98,1208.42 1437.56,1208.42 1438.15,1208.42 1438.74,1208.42 1439.32,1208.42 1439.91,1208.42 1440.5,1208.42 1441.08,1208.42 1441.67,1208.42 1442.25,1208.42 1442.84,1208.42 1443.43,1208.42 1444.01,1208.42 1444.6,1208.42 1445.19,1208.42 1445.77,1208.42 1446.36,1208.42 1446.95,1208.42 1447.53,1208.42 1448.12,1208.42 1448.7,1208.42 1449.29,1208.42 1449.88,1208.42 1450.46,1208.42 1451.05,1208.42 1451.64,1208.42 1452.22,1208.42 1452.81,1208.42 1453.4,1208.42 1453.98,1208.42 1454.57,1208.42 1455.16,1208.42 1455.74,1208.42 1456.33,1208.42 1456.91,1208.42 1457.5,1208.42 1458.09,1208.42 1458.67,1208.42 1459.26,1208.42 1459.85,1208.42 1460.43,1208.42 1461.02,1208.42 1461.61,1208.42 1462.19,1208.42 1462.78,1208.42 1463.37,1208.42 1463.95,1208.42 1464.54,1208.42 1465.12,1208.42 1465.71,1208.42 1466.3,1208.42 1466.88,1208.42 1467.47,1208.42 1468.06,1208.42 1468.64,1208.42 1469.23,1208.42 1469.82,1208.42 1470.4,1208.42 1470.99,1208.42 1471.57,1208.42 1472.16,1208.42 1472.75,1208.42 1473.33,1208.42 1473.92,1208.42 1474.51,1208.42 1475.09,1208.42 1475.68,1208.42 1476.27,1208.42 1476.85,1208.42 1477.44,1208.42 1478.03,1208.42 1478.61,1208.42 1479.2,1208.42 1479.78,1208.42 1480.37,1208.42 1480.96,1208.42 1481.54,1208.42 1482.13,1208.42 1482.72,1208.42 1483.3,1208.42 1483.89,1208.42 1484.48,1208.42 1485.06,1208.42 1485.65,1208.42 1486.24,1208.42 1486.82,1208.42 1487.41,1208.42 1487.99,1208.42 1488.58,1208.42 1489.17,1208.42 1489.75,1208.42 1490.34,1208.42 1490.93,1208.42 1491.51,1208.42 1492.1,1208.42 1492.69,1208.42 1493.27,1208.42 1493.86,1208.42 1494.45,1208.42 1495.03,1208.42 1495.62,1208.42 1496.2,1208.42 1496.79,1208.42 1497.38,1208.42 1497.96,1208.42 1498.55,1208.42 1499.14,1208.42 1499.72,1208.42 1500.31,1208.42 1500.9,1208.42 1501.48,1208.42 1502.07,1208.42 1502.65,1208.42 1503.24,1208.42 1503.83,1208.42 1504.41,1208.42 1505,1208.42 1505.59,1208.42 1506.17,1208.42 1506.76,1208.42 1507.35,1208.42 1507.93,1208.42 1508.52,1208.42 1509.11,1208.42 1509.69,1208.42 1510.28,1208.42 1510.86,1208.42 1511.45,1208.42 1512.04,1208.42 1512.62,1208.42 1513.21,1208.42 1513.8,1208.42 1514.38,1208.42 1514.97,1208.42 1515.56,1208.42 1516.14,1208.42 1516.73,1208.42 1517.32,1208.42 1517.9,1208.42 1518.49,1208.42 1519.07,1208.42 1519.66,1208.42 1520.25,1208.42 1520.83,1208.42 1521.42,1208.42 1522.01,1208.42 1522.59,1208.42 1523.18,1208.42 1523.77,1208.42 1524.35,1208.42 1524.94,1208.42 1525.52,1208.42 1526.11,1208.42 1526.7,1208.42 1527.28,1208.42 1527.87,1208.42 1528.46,1208.42 1529.04,1208.42 1529.63,1208.42 1530.22,1208.42 1530.8,1208.42 1531.39,1208.42 1531.98,1208.42 1532.56,1208.42 1533.15,1208.42 1533.73,1208.42 1534.32,1208.42 1534.91,1208.42 1535.49,1208.42 1536.08,1208.42 1536.67,1208.42 1537.25,1208.42 1537.84,1208.42 1538.43,1208.42 1539.01,1208.42 1539.6,1208.42 1540.19,1208.42 1540.77,1208.42 1541.36,1208.42 1541.94,1208.42 1542.53,1208.42 1543.12,1208.42 1543.7,1208.42 1544.29,1208.42 1544.88,1208.42 1545.46,1208.42 1546.05,1208.42 1546.64,1208.42 1547.22,1208.42 1547.81,1208.42 1548.4,1208.42 1548.98,1208.42 1549.57,1208.42 1550.15,1208.42 1550.74,1208.42 1551.33,1208.42 1551.91,1208.42 1552.5,1208.42 1553.09,1208.42 1553.67,1208.42 1554.26,1208.42 1554.85,1208.42 1555.43,1208.42 1556.02,1208.42 1556.6,1208.42 1557.19,1208.42 1557.78,1208.42 1558.36,1208.42 1558.95,1208.42 1559.54,1208.42 1560.12,1208.42 1560.71,1208.42 1561.3,1208.42 1561.88,1208.42 1562.47,1208.42 1563.06,1208.42 1563.64,1208.42 1564.23,1208.42 1564.81,1208.42 1565.4,1208.42 1565.99,1208.42 1566.57,1208.42 1567.16,1208.42 1567.75,1208.42 1568.33,1208.42 1568.92,1208.42 1569.51,1208.42 1570.09,1208.42 1570.68,1208.42 1571.27,1208.42 1571.85,1208.42 1572.44,1208.42 1573.02,1208.42 1573.61,1208.42 1574.2,1208.42 1574.78,1208.42 1575.37,1208.42 1575.96,1208.42 1576.54,1208.42 1577.13,1208.42 1577.72,1208.42 1578.3,1208.42 1578.89,1208.42 1579.47,1208.42 1580.06,1208.42 1580.65,1208.42 1581.23,1208.42 1581.82,1208.42 1582.41,1208.42 1582.99,1208.42 1583.58,1208.42 1584.17,1208.42 1584.75,1208.42 1585.34,1208.42 1585.93,1208.42 1586.51,1208.42 1587.1,1208.42 1587.68,1208.42 1588.27,1208.42 1588.86,1208.42 1589.44,1208.42 1590.03,1208.42 1590.62,1208.42 1591.2,1208.42 1591.79,1208.42 1592.38,1208.42 1592.96,1208.42 1593.55,1208.42 1594.14,1208.42 1594.72,1208.42 1595.31,1208.42 1595.89,1208.42 1596.48,1208.42 1597.07,1208.42 1597.65,1208.42 1598.24,1208.42 1598.83,1208.42 1599.41,1208.42 1600,1208.42 1600.59,1208.42 1601.17,1208.42 1601.76,1208.42 1602.34,1208.42 1602.93,1208.42 1603.52,1208.42 1604.1,1208.42 1604.69,1208.42 1605.28,1208.42 1605.86,1208.42 1606.45,1208.42 1607.04,1208.42 1607.62,1208.42 1608.21,1208.42 1608.8,1208.42 1609.38,1208.42 1609.97,1208.42 1610.55,1208.42 1611.14,1208.42 1611.73,1208.42 1612.31,1208.42 1612.9,1208.42 1613.49,1208.42 1614.07,1208.42 1614.66,1208.42 1615.25,1208.42 1615.83,1208.42 1616.42,1208.42 1617.01,1208.42 1617.59,1208.42 1618.18,1208.42 1618.76,1208.42 1619.35,1208.42 1619.94,1208.42 1620.52,1208.42 1621.11,1208.42 1621.7,1208.42 1622.28,1208.42 1622.87,1208.42 1623.46,1208.42 1624.04,1208.42 1624.63,1208.42 1625.22,1208.42 1625.8,1208.42 1626.39,1208.42 1626.97,1208.42 1627.56,1208.42 1628.15,1208.42 1628.73,1208.42 1629.32,1208.42 1629.91,1208.42 1630.49,1208.42 1631.08,1208.42 1631.67,1208.42 1632.25,1208.42 1632.84,1208.42 1633.42,1208.42 1634.01,1208.42 1634.6,1208.42 1635.18,1208.42 1635.77,1208.42 1636.36,1208.42 1636.94,1208.42 1637.53,1208.42 1638.12,1208.42 1638.7,1208.42 1639.29,1208.42 1639.88,1208.42 1640.46,1208.42 1641.05,1208.42 1641.63,1208.42 1642.22,1208.42 1642.81,1208.42 1643.39,1208.42 1643.98,1208.42 1644.57,1208.42 1645.15,1208.42 1645.74,1208.42 1646.33,1208.42 1646.91,1208.42 1647.5,1208.42 1648.09,1208.42 1648.67,1208.42 1649.26,1208.42 1649.84,1208.42 1650.43,1208.42 1651.02,1208.42 1651.6,1208.42 1652.19,1208.42 1652.78,1208.42 1653.36,1208.42 1653.95,1208.42 1654.54,1208.42 1655.12,1208.42 1655.71,1208.42 1656.29,1208.42 1656.88,1208.42 1657.47,1208.42 1658.05,1208.42 1658.64,1208.42 1659.23,1208.42 1659.81,1208.42 1660.4,1208.42 1660.99,1208.42 1661.57,1208.42 1662.16,1208.42 1662.75,1208.42 1663.33,1208.42 1663.92,1208.42 1664.5,1208.42 1665.09,1208.42 1665.68,1208.42 1666.26,1208.42 1666.85,1208.42 1667.44,1208.42 1668.02,1208.42 1668.61,1208.42 1669.2,1208.42 1669.78,1208.42 1670.37,1208.42 1670.96,1208.42 1671.54,1208.42 1672.13,1208.42 1672.71,1208.42 1673.3,1208.42 1673.89,1208.42 1674.47,1208.42 1675.06,1208.42 1675.65,1208.42 1676.23,1208.42 1676.82,1208.42 1677.41,1208.42 1677.99,1208.42 1678.58,1208.42 1679.17,1208.42 1679.75,1208.42 1680.34,1208.42 1680.92,1208.42 1681.51,1208.42 1682.1,1208.42 1682.68,1208.42 1683.27,1208.42 1683.86,1208.42 1684.44,1208.42 1685.03,1208.42 1685.62,1208.42 1686.2,1208.42 1686.79,1208.42 1687.37,1208.42 1687.96,1208.42 1688.55,1208.42 1689.13,1208.42 1689.72,1208.42 1690.31,1208.42 1690.89,1208.42 1691.48,1208.42 1692.07,1208.42 1692.65,1208.42 1693.24,1208.42 1693.83,1208.42 1694.41,1208.42 1695,1208.42 1695.58,1208.42 1696.17,1208.42 1696.76,1208.42 1697.34,1208.42 1697.93,1208.42 1698.52,1208.42 1699.1,1208.42 1699.69,1208.42 1700.28,1208.42 1700.86,1208.42 1701.45,1208.42 1702.04,1208.42 1702.62,1208.42 1703.21,1208.42 1703.79,1208.42 1704.38,1208.42 1704.97,1208.42 1705.55,1208.42 1706.14,1208.42 1706.73,1208.42 1707.31,1208.42 1707.9,1208.42 1708.49,1208.42 1709.07,1208.42 1709.66,1208.42 1710.24,1208.42 1710.83,1208.42 1711.42,1208.42 1712,1208.42 1712.59,1208.42 1713.18,1208.42 1713.76,1208.42 1714.35,1208.42 1714.94,1208.42 1715.52,1208.42 1716.11,1208.42 1716.7,1208.42 1717.28,1208.42 1717.87,1208.42 1718.45,1208.42 1719.04,1208.42 1719.63,1208.42 1720.21,1208.42 1720.8,1208.42 1721.39,1208.42 1721.97,1208.42 1722.56,1208.42 1723.15,1208.42 1723.73,1208.42 1724.32,1208.42 1724.91,1208.42 1725.49,1208.42 1726.08,1208.42 1726.66,1208.42 1727.25,1208.42 1727.84,1208.42 1728.42,1208.42 1729.01,1208.42 1729.6,1208.42 1730.18,1208.42 1730.77,1208.42 1731.36,1208.42 1731.94,1208.42 1732.53,1208.42 1733.11,1208.42 1733.7,1208.42 1734.29,1208.42 1734.87,1208.42 1735.46,1208.42 1736.05,1208.42 1736.63,1208.42 1737.22,1208.42 1737.81,1208.42 1738.39,1208.42 1738.98,1208.42 1739.57,1208.42 1740.15,1208.42 1740.74,1208.42 1741.32,1208.42 1741.91,1208.42 1742.5,1208.42 1743.08,1208.42 1743.67,1208.42 1744.26,1208.42 1744.84,1208.42 1745.43,1208.42 1746.02,1208.42 1746.6,1208.42 1747.19,1208.42 1747.78,1208.42 1748.36,1208.42 1748.95,1208.42 1749.53,1208.42 1750.12,1208.42 1750.71,1208.42 1751.29,1208.42 1751.88,1208.42 1752.47,1208.42 1753.05,1208.42 1753.64,1208.42 1754.23,1208.42 1754.81,1208.42 1755.4,1208.42 1755.99,1208.42 1756.57,1208.42 1757.16,1208.42 1757.74,1208.42 1758.33,1208.42 1758.92,1208.42 1759.5,1208.42 1760.09,1208.42 1760.68,1208.42 1761.26,1208.42 1761.85,1208.42 1762.44,1208.42 1763.02,1208.42 1763.61,1208.42 1764.19,1208.42 1764.78,1208.42 1765.37,1208.42 1765.95,1208.42 1766.54,1208.42 1767.13,1208.42 1767.71,1208.42 1768.3,1208.42 1768.89,1208.42 1769.47,1208.42 1770.06,1208.42 1770.65,1208.42 1771.23,1208.42 1771.82,1208.42 1772.4,1208.42 1772.99,1208.42 1773.58,1208.42 1774.16,1208.42 1774.75,1208.42 1775.34,1208.42 1775.92,1208.42 1776.51,1208.42 1777.1,1208.42 1777.68,1208.42 1778.27,1208.42 1778.86,1208.42 1779.44,1208.42 1780.03,1208.42 1780.61,1208.42 1781.2,1208.42 1781.79,1208.42 1782.37,1208.42 1782.96,1208.42 1783.55,1208.42 1784.13,1208.42 1784.72,1208.42 1785.31,1208.42 1785.89,1208.42 1786.48,1208.42 1787.06,1208.42 1787.65,1208.42 1788.24,1208.42 1788.82,1208.42 1789.41,1208.42 1790,1208.42 1790.58,1208.42 1791.17,1208.42 1791.76,1208.42 1792.34,1208.42 1792.93,1208.42 1793.52,1208.42 1794.1,1208.42 1794.69,1208.42 1795.27,1208.42 1795.86,1208.42 1796.45,1208.42 1797.03,1208.42 1797.62,1208.42 1798.21,1208.42 1798.79,1208.42 1799.38,1208.42 1799.97,1208.42 1800.55,1208.42 1801.14,1208.42 1801.73,1208.42 1802.31,1208.42 1802.9,1208.42 1803.48,1208.42 1804.07,1208.42 1804.66,1208.42 1805.24,1208.42 1805.83,1208.42 1806.42,1208.42 1807,1208.42 1807.59,1208.42 1808.18,1208.42 1808.76,1208.42 1809.35,1208.42 1809.94,1208.42 1810.52,1208.42 1811.11,1208.42 1811.69,1208.42 1812.28,1208.42 1812.87,1208.42 1813.45,1208.42 1814.04,1208.42 1814.63,1208.42 1815.21,1208.42 1815.8,1208.42 1816.39,1208.42 1816.97,1208.42 1817.56,1208.42 1818.14,1208.42 1818.73,1208.42 1819.32,1208.42 1819.9,1208.42 1820.49,1208.42 1821.08,1208.42 1821.66,1208.42 1822.25,1208.42 1822.84,1208.42 1823.42,1208.42 1824.01,1208.42 1824.6,1208.42 1825.18,1208.42 1825.77,1208.42 1826.35,1208.42 1826.94,1208.42 1827.53,1208.42 1828.11,1208.42 1828.7,1208.42 1829.29,1208.42 1829.87,1208.42 1830.46,1208.42 1831.05,1208.42 1831.63,1208.42 1832.22,1208.42 1832.81,1208.42 1833.39,1208.42 1833.98,1208.42 1834.56,1208.42 1835.15,1208.42 1835.74,1208.42 1836.32,1208.42 1836.91,1208.42 1837.5,1208.42 1838.08,1208.42 1838.67,1208.42 1839.26,1208.42 1839.84,1208.42 1840.43,1208.42 1841.01,1208.42 1841.6,1208.42 1842.19,1208.42 1842.77,1208.42 1843.36,1208.42 1843.95,1208.42 1844.53,1208.42 1845.12,1208.42 1845.71,1208.42 1846.29,1208.42 1846.88,1208.42 1847.47,1208.42 1848.05,1208.42 1848.64,1208.42 1849.22,1208.42 1849.81,1208.42 1850.4,1208.42 1850.98,1208.42 1851.57,1208.42 1852.16,1208.42 1852.74,1208.42 1853.33,1208.42 1853.92,1208.42 1854.5,1208.42 1855.09,1208.42 1855.68,1208.42 1856.26,1208.42 1856.85,1208.42 1857.43,1208.42 1858.02,1208.42 1858.61,1208.42 1859.19,1208.42 1859.78,1208.42 1860.37,1208.42 1860.95,1208.42 1861.54,1208.42 1862.13,1208.42 1862.71,1208.42 1863.3,1208.42 1863.88,1208.42 1864.47,1208.42 1865.06,1208.42 1865.64,1208.42 1866.23,1208.42 1866.82,1208.42 1867.4,1208.42 1867.99,1208.42 1868.58,1208.42 1869.16,1208.42 1869.75,1208.42 1870.34,1208.42 1870.92,1208.42 1871.51,1208.42 1872.09,1208.42 1872.68,1208.42 1873.27,1208.42 1873.85,1208.42 1874.44,1208.42 1875.03,1208.42 1875.61,1208.42 1876.2,1208.42 1876.79,1208.42 1877.37,1208.42 1877.96,1208.42 1878.55,1208.42 1879.13,1208.42 1879.72,1208.42 1880.3,1208.42 1880.89,1208.42 1881.48,1208.42 1882.06,1208.42 1882.65,1208.42 1883.24,1208.42 1883.82,1208.42 1884.41,1208.42 1885,1208.42 1885.58,1208.42 1886.17,1208.42 1886.76,1208.42 1887.34,1208.42 1887.93,1208.42 1888.51,1208.42 1889.1,1208.42 1889.69,1208.42 1890.27,1208.42 1890.86,1208.42 1891.45,1208.42 1892.03,1208.42 1892.62,1208.42 1893.21,1208.42 1893.79,1208.42 1894.38,1208.42 1894.96,1208.42 1895.55,1208.42 1896.14,1208.42 1896.72,1208.42 1897.31,1208.42 1897.9,1208.42 1898.48,1208.42 1899.07,1208.42 1899.66,1208.42 1900.24,1208.42 1900.83,1208.42 1901.42,1208.42 1902,1208.42 1902.59,1208.42 1903.17,1208.42 1903.76,1208.42 1904.35,1208.42 1904.93,1208.42 1905.52,1208.42 1906.11,1208.42 1906.69,1208.42 1907.28,1208.42 1907.87,1208.42 1908.45,1208.42 1909.04,1208.42 1909.63,1208.42 1910.21,1208.42 1910.8,1208.42 1911.38,1208.42 1911.97,1208.42 1912.56,1208.42 1913.14,1208.42 1913.73,1208.42 1914.32,1208.42 1914.9,1208.42 1915.49,1208.42 1916.08,1208.42 1916.66,1208.42 1917.25,1208.42 1917.83,1208.42 1918.42,1208.42 1919.01,1208.42 1919.59,1208.42 1920.18,1208.42 1920.77,1208.42 1921.35,1208.42 1921.94,1208.42 1922.53,1208.42 1923.11,1208.42 1923.7,1208.42 1924.29,1208.42 1924.87,1208.42 1925.46,1208.42 1926.04,1208.42 1926.63,1208.42 1927.22,1208.42 1927.8,1208.42 1928.39,1208.42 1928.98,1208.42 1929.56,1208.42 1930.15,1208.42 1930.74,1208.42 1931.32,1208.42 1931.91,1208.42 1932.5,1208.42 1933.08,1208.42 1933.67,1208.42 1934.25,1208.42 1934.84,1208.42 1935.43,1208.42 1936.01,1208.42 1936.6,1208.42 1937.19,1208.42 1937.77,1208.42 1938.36,1208.42 1938.95,1208.42 1939.53,1208.42 1940.12,1208.42 1940.71,1208.42 1941.29,1208.42 1941.88,1208.42 1942.46,1208.42 1943.05,1208.42 1943.64,1208.42 1944.22,1208.42 1944.81,1208.42 1945.4,1208.42 1945.98,1208.42 1946.57,1208.42 1947.16,1208.42 1947.74,1208.42 1948.33,1208.42 1948.91,1208.42 1949.5,1208.42 1950.09,1208.42 1950.67,1208.42 1951.26,1208.42 1951.85,1208.42 1952.43,1208.42 1953.02,1208.42 1953.61,1208.42 1954.19,1208.42 1954.78,1208.42 1955.37,1208.42 1955.95,1208.42 1956.54,1208.42 1957.12,1208.42 1957.71,1208.42 1958.3,1208.42 1958.88,1208.42 1959.47,1208.42 1960.06,1208.42 1960.64,1208.42 1961.23,1208.42 1961.82,1208.42 1962.4,1208.42 1962.99,1208.42 1963.58,1208.42 1964.16,1208.42 1964.75,1208.42 1965.33,1208.42 1965.92,1208.42 1966.51,1208.42 1967.09,1208.42 1967.68,1208.42 1968.27,1208.42 1968.85,1208.42 1969.44,1208.42 1970.03,1208.42 1970.61,1208.42 1971.2,1208.42 1971.78,1208.42 1972.37,1208.42 1972.96,1208.42 1973.54,1208.42 1974.13,1208.42 1974.72,1208.42 1975.3,1208.42 1975.89,1208.42 1976.48,1208.42 1977.06,1208.42 1977.65,1208.42 1978.24,1208.42 1978.82,1208.42 1979.41,1208.42 1979.99,1208.42 1980.58,1208.42 1981.17,1208.42 1981.75,1208.42 1982.34,1208.42 1982.93,1208.42 1983.51,1208.42 1984.1,1208.42 1984.69,1208.42 1985.27,1208.42 1985.86,1208.42 1986.45,1208.42 1987.03,1208.42 1987.62,1208.42 1988.2,1208.42 1988.79,1208.42 1989.38,1208.42 1989.96,1208.42 1990.55,1208.42 1991.14,1208.42 1991.72,1208.42 1992.31,1208.42 1992.9,1208.42 1993.48,1208.42 1994.07,1208.42 1994.65,1208.42 1995.24,1208.42 1995.83,1208.42 1996.41,1208.42 1997,1208.42 1997.59,1208.42 1998.17,1208.42 1998.76,1208.42 1999.35,1208.42 1999.93,1208.42 2000.52,1208.42 2001.11,1208.42 2001.69,1208.42 2002.28,1208.42 2002.86,1208.42 2003.45,1208.42 2004.04,1208.42 2004.62,1208.42 2005.21,1208.42 2005.8,1208.42 2006.38,1208.42 2006.97,1208.42 2007.56,1208.42 2008.14,1208.42 2008.73,1208.42 2009.32,1208.42 2009.9,1208.42 2010.49,1208.42 2011.07,1208.42 2011.66,1208.42 2012.25,1208.42 2012.83,1208.42 2013.42,1208.42 2014.01,1208.42 2014.59,1208.42 2015.18,1208.42 2015.77,1208.42 2016.35,1208.42 2016.94,1208.42 2017.53,1208.42 2018.11,1208.42 2018.7,1208.42 2019.28,1208.42 2019.87,1208.42 2020.46,1208.42 2021.04,1208.42 2021.63,1208.42 2022.22,1208.42 2022.8,1208.42 2023.39,1208.42 2023.98,1208.42 2024.56,1208.42 2025.15,1208.42 2025.73,1208.42 2026.32,1208.42 2026.91,1208.42 2027.49,1208.42 2028.08,1208.42 2028.67,1208.42 2029.25,1208.42 2029.84,1208.42 2030.43,1208.42 2031.01,1208.42 2031.6,1208.42 2032.19,1208.42 2032.77,1208.42 2033.36,1208.42 2033.94,1208.42 2034.53,1208.42 2035.12,1208.42 2035.7,1208.42 2036.29,1208.42 2036.88,1208.42 2037.46,1208.42 2038.05,1208.42 2038.64,1208.42 2039.22,1208.42 2039.81,1208.42 2040.4,1208.42 2040.98,1208.42 2041.57,1208.42 2042.15,1208.42 2042.74,1208.42 2043.33,1208.42 2043.91,1208.42 2044.5,1208.42 2045.09,1208.42 2045.67,1208.42 2046.26,1208.42 2046.85,1208.42 2047.43,1208.42 2048.02,1208.42 2048.6,1208.42 2049.19,1208.42 2049.78,1208.42 2050.36,1208.42 2050.95,1208.42 2051.54,1208.42 2052.12,1208.42 2052.71,1208.42 2053.3,1208.42 2053.88,1208.42 2054.47,1208.42 2055.06,1208.42 2055.64,1208.42 2056.23,1208.42 2056.81,1208.42 2057.4,1208.42 2057.99,1208.42 2058.57,1208.42 2059.16,1208.42 2059.75,1208.42 2060.33,1208.42 2060.92,1208.42 2061.51,1208.42 2062.09,1208.42 2062.68,1208.42 2063.27,1208.42 2063.85,1208.42 2064.44,1208.42 2065.02,1208.42 2065.61,1208.42 2066.2,1208.42 2066.78,1208.42 2067.37,1208.42 2067.96,1208.42 2068.54,1208.42 2069.13,1208.42 2069.72,1208.42 2070.3,1208.42 2070.89,1208.42 2071.48,1208.42 2072.06,1208.42 2072.65,1208.42 2073.23,1208.42 2073.82,1208.42 2074.41,1208.42 2074.99,1208.42 2075.58,1208.42 2076.17,1208.42 2076.75,1208.42 2077.34,1208.42 2077.93,1208.42 2078.51,1208.42 2079.1,1208.42 2079.68,1208.42 2080.27,1208.42 2080.86,1208.42 2081.44,1208.42 2082.03,1208.42 2082.62,1208.42 2083.2,1208.42 2083.79,1208.42 2084.38,1208.42 2084.96,1208.42 2085.55,1208.42 2086.14,1208.42 2086.72,1208.42 2087.31,1208.42 2087.89,1208.42 2088.48,1208.42 2089.07,1208.42 2089.65,1208.42 2090.24,1208.42 2090.83,1208.42 2091.41,1208.42 2092,1208.42 2092.59,1208.42 2093.17,1208.42 2093.76,1208.42 2094.35,1208.42 2094.93,1208.42 2095.52,1208.42 2096.1,1208.42 2096.69,1208.42 2097.28,1208.42 2097.86,1208.42 2098.45,1208.42 2099.04,1208.42 2099.62,1208.42 2100.21,1208.42 2100.8,1208.42 2101.38,1208.42 2101.97,1208.42 2102.55,1208.42 2103.14,1208.42 2103.73,1208.42 2104.31,1208.42 2104.9,1208.42 2105.49,1208.42 2106.07,1208.42 2106.66,1208.42 2107.25,1208.42 2107.83,1208.42 2108.42,1208.42 2109.01,1208.42 2109.59,1208.42 2110.18,1208.42 2110.76,1208.42 2111.35,1208.42 2111.94,1208.42 2112.52,1208.42 2113.11,1208.42 2113.7,1208.42 2114.28,1208.42 2114.87,1208.42 2115.46,1208.42 2116.04,1208.42 2116.63,1208.42 2117.22,1208.42 2117.8,1208.42 2118.39,1208.42 2118.97,1208.42 2119.56,1208.42 2120.15,1208.42 2120.73,1208.42 2121.32,1208.42 2121.91,1208.42 2122.49,1208.42 2123.08,1208.42 2123.67,1208.42 2124.25,1208.42 2124.84,1208.42 2125.42,1208.42 2126.01,1208.42 2126.6,1208.42 2127.18,1208.42 2127.77,1208.42 2128.36,1208.42 2128.94,1208.42 2129.53,1208.42 2130.12,1208.42 2130.7,1208.42 2131.29,1208.42 2131.88,1208.42 2132.46,1208.42 2133.05,1208.42 2133.63,1208.42 2134.22,1208.42 2134.81,1208.42 2135.39,1208.42 2135.98,1208.42 2136.57,1208.42 2137.15,1208.42 2137.74,1208.42 2138.33,1208.42 2138.91,1208.42 2139.5,1208.42 2140.09,1208.42 2140.67,1208.42 2141.26,1208.42 2141.84,1208.42 2142.43,1208.42 2143.02,1208.42 2143.6,1208.42 2144.19,1208.42 2144.78,1208.42 2145.36,1208.42 2145.95,1208.42 2146.54,1208.42 2147.12,1208.42 2147.71,1208.42 2148.3,1208.42 2148.88,1208.42 2149.47,1208.42 2150.05,1208.42 2150.64,1208.42 2151.23,1208.42 2151.81,1208.42 2152.4,1208.42 2152.99,1208.42 2153.57,1208.42 2154.16,1208.42 2154.75,1208.42 2155.33,1208.42 2155.92,1208.42 2156.5,1208.42 2157.09,1208.42 2157.68,1208.42 2158.26,1208.42 \"/>\n<path clip-path=\"url(#clip562)\" d=\"M986.025 1208.32 L986.612 1208.32 L987.198 1208.32 L987.785 1208.32 L988.371 1208.32 L988.957 1208.32 L989.544 1208.32 L990.13 1208.32 L990.717 1208.32 L991.303 1208.32 L991.889 1208.32 L992.476 1208.32 L993.062 1208.32 L993.649 1208.32 L994.235 1208.32 L994.822 1208.32 L995.408 1208.32 L995.994 1208.32 L996.581 1208.32 L997.167 1208.32 L997.754 1208.32 L998.34 1208.32 L998.926 1208.32 L999.513 1208.32 L1000.1 1208.32 L1000.69 1208.32 L1001.27 1208.32 L1001.86 1208.32 L1002.44 1208.32 L1003.03 1208.32 L1003.62 1208.32 L1004.2 1208.32 L1004.79 1208.32 L1005.38 1208.32 L1005.96 1208.32 L1006.55 1208.32 L1007.14 1208.32 L1007.72 1208.32 L1008.31 1208.32 L1008.9 1208.32 L1009.48 1208.32 L1010.07 1208.32 L1010.65 1208.32 L1011.24 1208.32 L1011.83 1208.32 L1012.41 1208.32 L1013 1208.32 L1013.59 1208.32 L1014.17 1208.32 L1014.76 1208.32 L1015.35 1208.32 L1015.93 1208.32 L1016.52 1208.32 L1017.11 1208.32 L1017.69 1208.32 L1018.28 1208.32 L1018.86 1208.32 L1019.45 1208.32 L1020.04 1208.32 L1020.62 1208.32 L1021.21 1208.32 L1021.8 1208.32 L1022.38 1208.32 L1022.97 1208.32 L1023.56 1208.32 L1024.14 1208.32 L1024.73 1208.32 L1025.32 1208.32 L1025.9 1208.32 L1026.49 1208.32 L1027.07 1208.32 L1027.66 1208.32 L1028.25 1208.32 L1028.83 1208.32 L1029.42 1208.32 L1030.01 1208.32 L1030.59 1208.32 L1031.18 1208.32 L1031.77 1208.32 L1032.35 1208.32 L1032.94 1208.32 L1033.52 1208.32 L1034.11 1208.32 L1034.7 1208.32 L1035.28 1208.32 L1035.87 1208.32 L1036.46 1208.32 L1037.04 1208.32 L1037.63 1208.32 L1038.22 1208.32 L1038.8 1208.32 L1039.39 1208.32 L1039.98 1208.32 L1040.56 1208.32 L1041.15 1208.32 L1041.73 1208.32 L1042.32 1208.32 L1042.91 1208.32 L1043.49 1208.32 L1044.08 1208.32 L1044.67 1208.32 L1045.25 1208.32 L1045.84 1208.32 L1046.43 1208.32 L1047.01 1208.32 L1047.6 1208.32 L1048.19 1208.32 L1048.77 1208.32 L1049.36 1208.32 L1049.94 1208.32 L1050.53 1208.32 L1051.12 1208.32 L1051.7 1208.32 L1052.29 1208.32 L1052.88 1208.32 L1053.46 1208.32 L1054.05 1208.32 L1054.64 1208.32 L1055.22 1208.32 L1055.81 1208.32 L1056.39 1208.32 L1056.98 1208.32 L1057.57 1208.32 L1058.15 1208.32 L1058.74 1208.32 L1059.33 1208.32 L1059.91 1208.32 L1060.5 1208.32 L1061.09 1208.32 L1061.67 1208.32 L1062.26 1208.32 L1062.85 1208.32 L1063.43 1208.32 L1064.02 1208.32 L1064.6 1208.32 L1065.19 1208.32 L1065.78 1208.32 L1066.36 1208.32 L1066.95 1208.32 L1067.54 1208.32 L1068.12 1208.32 L1068.71 1208.32 L1069.3 1208.32 L1069.88 1208.32 L1070.47 1208.32 L1071.06 1208.32 L1071.64 1208.32 L1072.23 1208.32 L1072.81 1208.32 L1073.4 1208.32 L1073.99 1208.32 L1074.57 1208.32 L1075.16 1208.32 L1075.75 1208.32 L1076.33 1208.32 L1076.92 1208.32 L1077.51 1208.32 L1078.09 1208.32 L1078.68 1208.32 L1079.26 1208.32 L1079.85 1208.32 L1080.44 1208.32 L1081.02 1208.32 L1081.61 1208.32 L1082.2 1208.32 L1082.78 1208.32 L1083.37 1208.32 L1083.96 1208.32 L1084.54 1208.32 L1085.13 1208.32 L1085.72 1208.32 L1086.3 1208.32 L1086.89 1208.32 L1087.47 1208.32 L1088.06 1208.32 L1088.65 1208.32 L1089.23 1208.32 L1089.82 1208.32 L1090.41 1208.32 L1090.99 1208.32 L1091.58 1208.32 L1092.17 1208.32 L1092.75 1208.32 L1093.34 1208.32 L1093.93 1208.32 L1094.51 1208.32 L1095.1 1208.32 L1095.68 1208.32 L1096.27 1208.32 L1096.86 1208.32 L1097.44 1208.32 L1098.03 1208.32 L1098.62 1208.32 L1099.2 1208.32 L1099.79 1208.32 L1100.38 1208.32 L1100.96 1208.32 L1101.55 1208.32 L1102.14 1208.32 L1102.72 1208.32 L1103.31 1208.32 L1103.89 1208.32 L1104.48 1208.32 L1105.07 1208.32 L1105.65 1208.32 L1106.24 1208.32 L1106.83 1208.32 L1107.41 1208.32 L1108 1208.32 L1108.59 1208.32 L1109.17 1208.32 L1109.76 1208.32 L1110.34 1208.32 L1110.93 1208.32 L1111.52 1208.32 L1112.1 1208.32 L1112.69 1208.32 L1113.28 1208.32 L1113.86 1208.32 L1114.45 1208.32 L1115.04 1208.32 L1115.62 1208.32 L1116.21 1208.32 L1116.8 1208.32 L1117.38 1208.32 L1117.97 1208.32 L1118.55 1208.32 L1119.14 1208.32 L1119.73 1208.32 L1120.31 1208.32 L1120.9 1208.32 L1121.49 1208.32 L1122.07 1208.32 L1122.66 1208.32 L1123.25 1208.32 L1123.83 1208.32 L1124.42 1208.32 L1125.01 1208.32 L1125.59 1208.32 L1126.18 1208.32 L1126.76 1208.32 L1127.35 1208.32 L1127.94 1208.32 L1128.52 1208.32 L1129.11 1208.32 L1129.7 1208.32 L1130.28 1208.32 L1130.87 1208.32 L1131.46 1208.32 L1132.04 1208.32 L1132.63 1208.32 L1133.21 1208.32 L1133.8 1208.32 L1134.39 1208.32 L1134.97 1208.32 L1135.56 1208.32 L1136.15 1208.32 L1136.73 1208.32 L1137.32 1208.32 L1137.91 1208.32 L1138.49 1208.32 L1139.08 1208.32 L1139.67 1208.32 L1140.25 1208.32 L1140.84 1208.32 L1141.42 1208.32 L1142.01 1208.32 L1142.6 1208.32 L1143.18 1208.32 L1143.77 1208.32 L1144.36 1208.32 L1144.94 1208.32 L1145.53 1208.32 L1146.12 1208.32 L1146.7 1208.32 L1147.29 1208.32 L1147.88 1208.32 L1148.46 1208.32 L1149.05 1208.32 L1149.63 1208.32 L1150.22 1208.32 L1150.81 1208.32 L1151.39 1208.32 L1151.98 1208.32 L1152.57 1208.32 L1153.15 1208.32 L1153.74 1208.32 L1154.33 1208.32 L1154.91 1208.32 L1155.5 1208.32 L1156.09 1208.32 L1156.67 1208.32 L1157.26 1208.32 L1157.84 1208.32 L1158.43 1208.32 L1159.02 1208.32 L1159.6 1208.32 L1160.19 1208.32 L1160.78 1208.32 L1161.36 1208.32 L1161.95 1208.32 L1162.54 1208.32 L1163.12 1208.32 L1163.71 1208.32 L1164.29 1208.32 L1164.88 1208.32 L1165.47 1208.32 L1166.05 1208.32 L1166.64 1208.32 L1167.23 1208.32 L1167.81 1208.32 L1168.4 1208.32 L1168.99 1208.32 L1169.57 1208.32 L1170.16 1208.32 L1170.75 1208.32 L1171.33 1208.32 L1171.92 1208.32 L1172.5 1208.32 L1173.09 1208.32 L1173.68 1208.32 L1174.26 1208.32 L1174.85 1208.32 L1175.44 1208.32 L1176.02 1208.32 L1176.61 1208.32 L1177.2 1208.32 L1177.78 1208.32 L1178.37 1208.32 L1178.96 1208.32 L1179.54 1208.32 L1180.13 1208.32 L1180.71 1208.32 L1181.3 1208.32 L1181.89 1208.32 L1182.47 1208.32 L1183.06 1208.32 L1183.65 1208.32 L1184.23 1208.32 L1184.82 1208.32 L1185.41 1208.32 L1185.99 1208.32 L1186.58 1208.32 L1187.16 1208.32 L1187.75 1208.32 L1188.34 1208.32 L1188.92 1208.32 L1189.51 1208.32 L1190.1 1208.32 L1190.68 1208.32 L1191.27 1208.32 L1191.86 1208.32 L1192.44 1208.32 L1193.03 1208.32 L1193.62 1208.32 L1194.2 1208.32 L1194.79 1208.32 L1195.37 1208.32 L1195.96 1208.32 L1196.55 1208.32 L1197.13 1208.32 L1197.72 1208.32 L1198.31 1208.32 L1198.89 1208.32 L1199.48 1208.32 L1200.07 1208.32 L1200.65 1208.32 L1201.24 1208.32 L1201.83 1208.32 L1202.41 1208.32 L1203 1208.32 L1203.58 1208.32 L1204.17 1208.32 L1204.76 1208.32 L1205.34 1208.32 L1205.93 1208.32 L1206.52 1208.32 L1207.1 1208.32 L1207.69 1208.32 L1208.28 1208.32 L1208.86 1208.32 L1209.45 1208.32 L1210.03 1208.32 L1210.62 1208.32 L1211.21 1208.32 L1211.79 1208.32 L1212.38 1208.32 L1212.97 1208.32 L1213.55 1208.32 L1214.14 1208.32 L1214.73 1208.32 L1215.31 1208.32 L1215.9 1208.32 L1216.49 1208.32 L1217.07 1208.32 L1217.66 1208.32 L1218.24 1208.32 L1218.83 1208.32 L1219.42 1208.32 L1220 1208.32 L1220.59 1208.32 L1221.18 1208.32 L1221.76 1208.32 L1222.35 1208.32 L1222.94 1208.32 L1223.52 1208.32 L1224.11 1208.32 L1224.7 1208.32 L1225.28 1208.32 L1225.87 1208.32 L1226.45 1208.32 L1227.04 1208.32 L1227.63 1208.32 L1228.21 1208.32 L1228.8 1208.32 L1229.39 1208.32 L1229.97 1208.32 L1230.56 1208.32 L1231.15 1208.32 L1231.73 1208.32 L1232.32 1208.32 L1232.91 1208.32 L1233.49 1208.32 L1234.08 1208.32 L1234.66 1208.32 L1235.25 1208.32 L1235.84 1208.32 L1236.42 1208.32 L1237.01 1208.32 L1237.6 1208.32 L1238.18 1208.32 L1238.77 1208.32 L1239.36 1208.32 L1239.94 1208.32 L1240.53 1208.32 L1241.11 1208.32 L1241.7 1208.32 L1242.29 1208.32 L1242.87 1208.32 L1243.46 1208.32 L1244.05 1208.32 L1244.63 1208.32 L1245.22 1208.32 L1245.81 1208.32 L1246.39 1208.32 L1246.98 1208.32 L1247.57 1208.32 L1248.15 1208.32 L1248.74 1208.32 L1249.32 1208.32 L1249.91 1208.32 L1250.5 1208.32 L1251.08 1208.32 L1251.67 1208.32 L1252.26 1208.32 L1252.84 1208.32 L1253.43 1208.32 L1254.02 1208.32 L1254.6 1208.32 L1255.19 1208.32 L1255.78 1208.32 L1256.36 1208.32 L1256.95 1208.32 L1257.53 1208.32 L1258.12 1208.32 L1258.71 1208.32 L1259.29 1208.32 L1259.88 1208.32 L1260.47 1208.32 L1261.05 1208.32 L1261.64 1208.32 L1262.23 1208.32 L1262.81 1208.32 L1263.4 1208.32 L1263.98 1208.32 L1264.57 1208.32 L1265.16 1208.32 L1265.74 1208.32 L1266.33 1208.32 L1266.92 1208.32 L1267.5 1208.32 L1268.09 1208.32 L1268.68 1208.32 L1269.26 1208.32 L1269.85 1208.32 L1270.44 1208.32 L1271.02 1208.32 L1271.61 1208.32 L1272.19 1208.32 L1272.78 1208.32 L1273.37 1208.32 L1273.95 1208.32 L1274.54 1208.32 L1275.13 1208.32 L1275.71 1208.32 L1276.3 1208.32 L1276.89 1208.32 L1277.47 1208.32 L1278.06 1208.32 L1278.65 1208.32 L1279.23 1208.32 L1279.82 1208.32 L1280.4 1208.32 L1280.99 1208.32 L1281.58 1208.32 L1282.16 1208.32 L1282.75 1208.32 L1283.34 1208.32 L1283.92 1208.32 L1284.51 1208.32 L1285.1 1208.32 L1285.68 1208.32 L1286.27 1208.32 L1286.86 1208.32 L1287.44 1208.32 L1288.03 1208.32 L1288.61 1208.32 L1289.2 1208.32 L1289.79 1208.32 L1290.37 1208.32 L1290.96 1208.32 L1291.55 1208.32 L1292.13 1208.32 L1292.72 1208.32 L1293.31 1208.32 L1293.89 1208.32 L1294.48 1208.32 L1295.06 1208.32 L1295.65 1208.32 L1296.24 1208.32 L1296.82 1208.32 L1297.41 1208.32 L1298 1208.32 L1298.58 1208.32 L1299.17 1208.32 L1299.76 1208.32 L1300.34 1208.32 L1300.93 1208.32 L1301.52 1208.32 L1302.1 1208.32 L1302.69 1208.32 L1303.27 1208.32 L1303.86 1208.32 L1304.45 1208.32 L1305.03 1208.32 L1305.62 1208.32 L1306.21 1208.32 L1306.79 1208.32 L1307.38 1208.32 L1307.97 1208.32 L1308.55 1208.32 L1309.14 1208.32 L1309.73 1208.32 L1310.31 1208.32 L1310.9 1208.32 L1311.48 1208.32 L1312.07 1208.32 L1312.66 1208.32 L1313.24 1208.32 L1313.83 1208.32 L1314.42 1208.32 L1315 1208.32 L1315.59 1208.32 L1316.18 1208.32 L1316.76 1208.32 L1317.35 1208.32 L1317.93 1208.32 L1318.52 1208.32 L1319.11 1208.32 L1319.69 1208.32 L1320.28 1208.32 L1320.87 1208.32 L1321.45 1208.32 L1322.04 1208.32 L1322.63 1208.32 L1323.21 1208.32 L1323.8 1208.32 L1324.39 1208.32 L1324.97 1208.32 L1325.56 1208.32 L1326.14 1208.32 L1326.73 1208.32 L1327.32 1208.32 L1327.9 1208.32 L1328.49 1208.32 L1329.08 1208.32 L1329.66 1208.32 L1330.25 1208.32 L1330.84 1208.32 L1331.42 1208.32 L1332.01 1208.32 L1332.6 1208.32 L1333.18 1208.32 L1333.77 1208.32 L1334.35 1208.32 L1334.94 1208.32 L1335.53 1208.32 L1336.11 1208.32 L1336.7 1208.32 L1337.29 1208.32 L1337.87 1208.32 L1338.46 1208.32 L1339.05 1208.32 L1339.63 1208.32 L1340.22 1208.32 L1340.8 1208.32 L1341.39 1208.32 L1341.98 1208.32 L1342.56 1208.32 L1343.15 1208.32 L1343.74 1208.32 L1344.32 1208.32 L1344.91 1208.32 L1345.5 1208.32 L1346.08 1208.32 L1346.67 1208.32 L1347.26 1208.32 L1347.84 1208.32 L1348.43 1208.32 L1349.01 1208.32 L1349.6 1208.32 L1350.19 1208.32 L1350.77 1208.32 L1351.36 1208.32 L1351.95 1208.32 L1352.53 1208.32 L1353.12 1208.32 L1353.71 1208.32 L1354.29 1208.32 L1354.88 1208.32 L1355.47 1208.32 L1356.05 1208.32 L1356.64 1208.32 L1357.22 1208.32 L1357.81 1208.32 L1358.4 1208.32 L1358.98 1208.32 L1359.57 1208.32 L1360.16 1208.32 L1360.74 1208.32 L1361.33 1208.32 L1361.92 1208.32 L1362.5 1208.32 L1363.09 1208.32 L1363.68 1208.32 L1364.26 1208.32 L1364.85 1208.32 L1365.43 1208.32 L1366.02 1208.32 L1366.61 1208.32 L1367.19 1208.32 L1367.78 1208.32 L1368.37 1208.32 L1368.95 1208.32 L1369.54 1208.32 L1370.13 1208.32 L1370.71 1208.32 L1371.3 1208.32 L1371.88 1208.32 L1372.47 1208.32 L1373.06 1208.32 L1373.64 1208.32 L1374.23 1208.32 L1374.82 1208.32 L1375.4 1208.32 L1375.99 1208.32 L1376.58 1208.32 L1377.16 1208.32 L1377.75 1208.32 L1378.34 1208.32 L1378.92 1208.32 L1379.51 1208.32 L1380.09 1208.32 L1380.68 1208.32 L1381.27 1208.32 L1381.85 1208.32 L1382.44 1208.32 L1383.03 1208.32 L1383.61 1208.32 L1384.2 1208.32 L1384.79 1208.32 L1385.37 1208.32 L1385.96 1208.32 L1386.55 1208.32 L1387.13 1208.32 L1387.72 1208.32 L1388.3 1208.32 L1388.89 1208.32 L1389.48 1208.32 L1390.06 1208.32 L1390.65 1208.32 L1391.24 1208.32 L1391.82 1208.32 L1392.41 1208.32 L1393 1208.32 L1393.58 1208.32 L1394.17 1208.32 L1394.75 1208.32 L1395.34 1208.32 L1395.93 1208.32 L1396.51 1208.32 L1397.1 1208.32 L1397.69 1208.32 L1398.27 1208.32 L1398.86 1208.32 L1399.45 1208.32 L1400.03 1208.32 L1400.62 1208.32 L1401.21 1208.32 L1401.79 1208.32 L1402.38 1208.32 L1402.96 1208.32 L1403.55 1208.32 L1404.14 1208.32 L1404.72 1208.32 L1405.31 1208.32 L1405.9 1208.32 L1406.48 1208.32 L1407.07 1208.32 L1407.66 1208.32 L1408.24 1208.32 L1408.83 1208.32 L1409.42 1208.32 L1410 1208.32 L1410.59 1208.32 L1411.17 1208.32 L1411.76 1208.32 L1412.35 1208.32 L1412.93 1208.32 L1413.52 1208.32 L1414.11 1208.32 L1414.69 1208.32 L1415.28 1208.32 L1415.87 1208.32 L1416.45 1208.32 L1417.04 1208.32 L1417.63 1208.32 L1418.21 1208.32 L1418.8 1208.32 L1419.38 1208.32 L1419.97 1208.32 L1420.56 1208.32 L1421.14 1208.32 L1421.73 1208.32 L1422.32 1208.32 L1422.9 1208.32 L1423.49 1208.32 L1424.08 1208.32 L1424.66 1208.32 L1425.25 1208.32 L1425.83 1208.32 L1426.42 1208.32 L1427.01 1208.32 L1427.59 1208.32 L1428.18 1208.32 L1428.77 1208.32 L1429.35 1208.32 L1429.94 1208.32 L1430.53 1208.32 L1431.11 1208.32 L1431.7 1208.32 L1432.29 1208.32 L1432.87 1208.32 L1433.46 1208.32 L1434.04 1208.32 L1434.63 1208.32 L1435.22 1208.32 L1435.8 1208.32 L1436.39 1208.32 L1436.98 1208.32 L1437.56 1208.32 L1438.15 1208.32 L1438.74 1208.32 L1439.32 1208.32 L1439.91 1208.32 L1440.5 1208.32 L1441.08 1208.32 L1441.67 1208.32 L1442.25 1208.32 L1442.84 1208.32 L1443.43 1208.32 L1444.01 1208.32 L1444.6 1208.32 L1445.19 1208.32 L1445.77 1208.32 L1446.36 1208.32 L1446.95 1208.32 L1447.53 1208.32 L1448.12 1208.32 L1448.7 1208.32 L1449.29 1208.32 L1449.88 1208.32 L1450.46 1208.32 L1451.05 1208.32 L1451.64 1208.32 L1452.22 1208.32 L1452.81 1208.32 L1453.4 1208.32 L1453.98 1208.32 L1454.57 1208.32 L1455.16 1208.32 L1455.74 1208.32 L1456.33 1208.32 L1456.91 1208.32 L1457.5 1208.32 L1458.09 1208.32 L1458.67 1208.32 L1459.26 1208.32 L1459.85 1208.32 L1460.43 1208.32 L1461.02 1208.32 L1461.61 1208.32 L1462.19 1208.32 L1462.78 1208.32 L1463.37 1208.32 L1463.95 1208.32 L1464.54 1208.32 L1465.12 1208.32 L1465.71 1208.32 L1466.3 1208.32 L1466.88 1208.32 L1467.47 1208.32 L1468.06 1208.32 L1468.64 1208.32 L1469.23 1208.32 L1469.82 1208.32 L1470.4 1208.32 L1470.99 1208.32 L1471.57 1208.32 L1472.16 1208.32 L1472.75 1208.32 L1473.33 1208.32 L1473.92 1208.32 L1474.51 1208.32 L1475.09 1208.32 L1475.68 1208.32 L1476.27 1208.32 L1476.85 1208.32 L1477.44 1208.32 L1478.03 1208.32 L1478.61 1208.32 L1479.2 1208.32 L1479.78 1208.32 L1480.37 1208.32 L1480.96 1208.32 L1481.54 1208.32 L1482.13 1208.32 L1482.72 1208.32 L1483.3 1208.32 L1483.89 1208.32 L1484.48 1208.32 L1485.06 1208.32 L1485.65 1208.32 L1486.24 1208.32 L1486.82 1208.32 L1487.41 1208.32 L1487.99 1208.32 L1488.58 1208.32 L1489.17 1208.32 L1489.75 1208.32 L1490.34 1208.32 L1490.93 1208.32 L1491.51 1208.32 L1492.1 1208.32 L1492.69 1208.32 L1493.27 1208.32 L1493.86 1208.32 L1494.45 1208.32 L1495.03 1208.32 L1495.62 1208.32 L1496.2 1208.32 L1496.79 1208.32 L1497.38 1208.32 L1497.96 1208.32 L1498.55 1208.32 L1499.14 1208.32 L1499.72 1208.32 L1500.31 1208.32 L1500.9 1208.32 L1501.48 1208.32 L1502.07 1208.32 L1502.65 1208.32 L1503.24 1208.32 L1503.83 1208.32 L1504.41 1208.32 L1505 1208.32 L1505.59 1208.32 L1506.17 1208.32 L1506.76 1208.32 L1507.35 1208.32 L1507.93 1208.32 L1508.52 1208.32 L1509.11 1208.32 L1509.69 1208.32 L1510.28 1208.32 L1510.86 1208.32 L1511.45 1208.32 L1512.04 1208.32 L1512.62 1208.32 L1513.21 1208.32 L1513.8 1208.32 L1514.38 1208.32 L1514.97 1208.32 L1515.56 1208.32 L1516.14 1208.32 L1516.73 1208.32 L1517.32 1208.32 L1517.9 1208.32 L1518.49 1208.32 L1519.07 1208.32 L1519.66 1208.32 L1520.25 1208.32 L1520.83 1208.32 L1521.42 1208.32 L1522.01 1208.32 L1522.59 1208.32 L1523.18 1208.32 L1523.77 1208.32 L1524.35 1208.32 L1524.94 1208.32 L1525.52 1208.32 L1526.11 1208.32 L1526.7 1208.32 L1527.28 1208.32 L1527.87 1208.32 L1528.46 1208.32 L1529.04 1208.32 L1529.63 1208.32 L1530.22 1208.32 L1530.8 1208.32 L1531.39 1208.32 L1531.98 1208.32 L1532.56 1208.32 L1533.15 1208.32 L1533.73 1208.32 L1534.32 1208.32 L1534.91 1208.32 L1535.49 1208.32 L1536.08 1208.32 L1536.67 1208.32 L1537.25 1208.32 L1537.84 1208.32 L1538.43 1208.32 L1539.01 1208.32 L1539.6 1208.32 L1540.19 1208.32 L1540.77 1208.32 L1541.36 1208.32 L1541.94 1208.32 L1542.53 1208.32 L1543.12 1208.32 L1543.7 1208.32 L1544.29 1208.32 L1544.88 1208.32 L1545.46 1208.32 L1546.05 1208.32 L1546.64 1208.32 L1547.22 1208.32 L1547.81 1208.32 L1548.4 1208.32 L1548.98 1208.32 L1549.57 1208.32 L1550.15 1208.32 L1550.74 1208.32 L1551.33 1208.32 L1551.91 1208.32 L1552.5 1208.32 L1553.09 1208.32 L1553.67 1208.32 L1554.26 1208.32 L1554.85 1208.32 L1555.43 1208.32 L1556.02 1208.32 L1556.6 1208.32 L1557.19 1208.32 L1557.78 1208.32 L1558.36 1208.32 L1558.95 1208.32 L1559.54 1208.32 L1560.12 1208.32 L1560.71 1208.32 L1561.3 1208.32 L1561.88 1208.32 L1562.47 1208.32 L1563.06 1208.32 L1563.64 1208.32 L1564.23 1208.32 L1564.81 1208.32 L1565.4 1208.32 L1565.99 1208.32 L1566.57 1208.32 L1567.16 1208.32 L1567.75 1208.32 L1568.33 1208.32 L1568.92 1208.32 L1569.51 1208.32 L1570.09 1208.32 L1570.68 1208.32 L1571.27 1208.32 L1571.85 1208.32 L1572.44 1208.32 L1573.02 1208.32 L1573.61 1208.32 L1574.2 1208.32 L1574.78 1208.32 L1575.37 1208.32 L1575.96 1208.32 L1576.54 1208.32 L1577.13 1208.32 L1577.72 1208.32 L1578.3 1208.32 L1578.89 1208.32 L1579.47 1208.32 L1580.06 1208.32 L1580.65 1208.32 L1581.23 1208.32 L1581.82 1208.32 L1582.41 1208.32 L1582.99 1208.32 L1583.58 1208.32 L1584.17 1208.32 L1584.75 1208.32 L1585.34 1208.32 L1585.93 1208.32 L1586.51 1208.32 L1587.1 1208.32 L1587.68 1208.32 L1588.27 1208.32 L1588.86 1208.32 L1589.44 1208.32 L1590.03 1208.32 L1590.62 1208.32 L1591.2 1208.32 L1591.79 1208.32 L1592.38 1208.32 L1592.96 1208.32 L1593.55 1208.32 L1594.14 1208.32 L1594.72 1208.32 L1595.31 1208.32 L1595.89 1208.32 L1596.48 1208.32 L1597.07 1208.32 L1597.65 1208.32 L1598.24 1208.32 L1598.83 1208.32 L1599.41 1208.32 L1600 1208.32 L1600.59 1208.32 L1601.17 1208.32 L1601.76 1208.32 L1602.34 1208.32 L1602.93 1208.32 L1603.52 1208.32 L1604.1 1208.32 L1604.69 1208.32 L1605.28 1208.32 L1605.86 1208.32 L1606.45 1208.32 L1607.04 1208.32 L1607.62 1208.32 L1608.21 1208.32 L1608.8 1208.32 L1609.38 1208.32 L1609.97 1208.32 L1610.55 1208.32 L1611.14 1208.32 L1611.73 1208.32 L1612.31 1208.32 L1612.9 1208.32 L1613.49 1208.32 L1614.07 1208.32 L1614.66 1208.32 L1615.25 1208.32 L1615.83 1208.32 L1616.42 1208.32 L1617.01 1208.32 L1617.59 1208.32 L1618.18 1208.32 L1618.76 1208.32 L1619.35 1208.32 L1619.94 1208.32 L1620.52 1208.32 L1621.11 1208.32 L1621.7 1208.32 L1622.28 1208.32 L1622.87 1208.32 L1623.46 1208.32 L1624.04 1208.32 L1624.63 1208.32 L1625.22 1208.32 L1625.8 1208.32 L1626.39 1208.32 L1626.97 1208.32 L1627.56 1208.32 L1628.15 1208.32 L1628.73 1208.32 L1629.32 1208.32 L1629.91 1208.32 L1630.49 1208.32 L1631.08 1208.32 L1631.67 1208.32 L1632.25 1208.32 L1632.84 1208.32 L1633.42 1208.32 L1634.01 1208.32 L1634.6 1208.32 L1635.18 1208.32 L1635.77 1208.32 L1636.36 1208.32 L1636.94 1208.32 L1637.53 1208.32 L1638.12 1208.32 L1638.7 1208.32 L1639.29 1208.32 L1639.88 1208.32 L1640.46 1208.32 L1641.05 1208.32 L1641.63 1208.32 L1642.22 1208.32 L1642.81 1208.32 L1643.39 1208.32 L1643.98 1208.32 L1644.57 1208.32 L1645.15 1208.32 L1645.74 1208.32 L1646.33 1208.32 L1646.91 1208.32 L1647.5 1208.32 L1648.09 1208.32 L1648.67 1208.32 L1649.26 1208.32 L1649.84 1208.32 L1650.43 1208.32 L1651.02 1208.32 L1651.6 1208.32 L1652.19 1208.32 L1652.78 1208.32 L1653.36 1208.32 L1653.95 1208.32 L1654.54 1208.32 L1655.12 1208.32 L1655.71 1208.32 L1656.29 1208.32 L1656.88 1208.32 L1657.47 1208.32 L1658.05 1208.32 L1658.64 1208.32 L1659.23 1208.32 L1659.81 1208.32 L1660.4 1208.32 L1660.99 1208.32 L1661.57 1208.32 L1662.16 1208.32 L1662.75 1208.32 L1663.33 1208.32 L1663.92 1208.32 L1664.5 1208.32 L1665.09 1208.32 L1665.68 1208.32 L1666.26 1208.32 L1666.85 1208.32 L1667.44 1208.32 L1668.02 1208.32 L1668.61 1208.32 L1669.2 1208.32 L1669.78 1208.32 L1670.37 1208.32 L1670.96 1208.32 L1671.54 1208.32 L1672.13 1208.32 L1672.71 1208.32 L1673.3 1208.32 L1673.89 1208.32 L1674.47 1208.32 L1675.06 1208.32 L1675.65 1208.32 L1676.23 1208.32 L1676.82 1208.32 L1677.41 1208.32 L1677.99 1208.32 L1678.58 1208.32 L1679.17 1208.32 L1679.75 1208.32 L1680.34 1208.32 L1680.92 1208.32 L1681.51 1208.32 L1682.1 1208.32 L1682.68 1208.32 L1683.27 1208.32 L1683.86 1208.32 L1684.44 1208.32 L1685.03 1208.32 L1685.62 1208.32 L1686.2 1208.32 L1686.79 1208.32 L1687.37 1208.32 L1687.96 1208.32 L1688.55 1208.32 L1689.13 1208.32 L1689.72 1208.32 L1690.31 1208.32 L1690.89 1208.32 L1691.48 1208.32 L1692.07 1208.32 L1692.65 1208.32 L1693.24 1208.32 L1693.83 1208.32 L1694.41 1208.32 L1695 1208.32 L1695.58 1208.32 L1696.17 1208.32 L1696.76 1208.32 L1697.34 1208.32 L1697.93 1208.32 L1698.52 1208.32 L1699.1 1208.32 L1699.69 1208.32 L1700.28 1208.32 L1700.86 1208.32 L1701.45 1208.32 L1702.04 1208.32 L1702.62 1208.32 L1703.21 1208.32 L1703.79 1208.32 L1704.38 1208.32 L1704.97 1208.32 L1705.55 1208.32 L1706.14 1208.32 L1706.73 1208.32 L1707.31 1208.32 L1707.9 1208.32 L1708.49 1208.32 L1709.07 1208.32 L1709.66 1208.32 L1710.24 1208.32 L1710.83 1208.32 L1711.42 1208.32 L1712 1208.32 L1712.59 1208.32 L1713.18 1208.32 L1713.76 1208.32 L1714.35 1208.32 L1714.94 1208.32 L1715.52 1208.32 L1716.11 1208.32 L1716.7 1208.32 L1717.28 1208.32 L1717.87 1208.32 L1718.45 1208.32 L1719.04 1208.32 L1719.63 1208.32 L1720.21 1208.32 L1720.8 1208.32 L1721.39 1208.32 L1721.97 1208.32 L1722.56 1208.32 L1723.15 1208.32 L1723.73 1208.32 L1724.32 1208.32 L1724.91 1208.32 L1725.49 1208.32 L1726.08 1208.32 L1726.66 1208.32 L1727.25 1208.32 L1727.84 1208.32 L1728.42 1208.32 L1729.01 1208.32 L1729.6 1208.32 L1730.18 1208.32 L1730.77 1208.32 L1731.36 1208.32 L1731.94 1208.32 L1732.53 1208.32 L1733.11 1208.32 L1733.7 1208.32 L1734.29 1208.32 L1734.87 1208.32 L1735.46 1208.32 L1736.05 1208.32 L1736.63 1208.32 L1737.22 1208.32 L1737.81 1208.32 L1738.39 1208.32 L1738.98 1208.32 L1739.57 1208.32 L1740.15 1208.32 L1740.74 1208.32 L1741.32 1208.32 L1741.91 1208.32 L1742.5 1208.32 L1743.08 1208.32 L1743.67 1208.32 L1744.26 1208.32 L1744.84 1208.32 L1745.43 1208.32 L1746.02 1208.32 L1746.6 1208.32 L1747.19 1208.32 L1747.78 1208.32 L1748.36 1208.32 L1748.95 1208.32 L1749.53 1208.32 L1750.12 1208.32 L1750.71 1208.32 L1751.29 1208.32 L1751.88 1208.32 L1752.47 1208.32 L1753.05 1208.32 L1753.64 1208.32 L1754.23 1208.32 L1754.81 1208.32 L1755.4 1208.32 L1755.99 1208.32 L1756.57 1208.32 L1757.16 1208.32 L1757.74 1208.32 L1758.33 1208.32 L1758.92 1208.32 L1759.5 1208.32 L1760.09 1208.32 L1760.68 1208.32 L1761.26 1208.32 L1761.85 1208.32 L1762.44 1208.32 L1763.02 1208.32 L1763.61 1208.32 L1764.19 1208.32 L1764.78 1208.32 L1765.37 1208.32 L1765.95 1208.32 L1766.54 1208.32 L1767.13 1208.32 L1767.71 1208.32 L1768.3 1208.32 L1768.89 1208.32 L1769.47 1208.32 L1770.06 1208.32 L1770.65 1208.32 L1771.23 1208.32 L1771.82 1208.32 L1772.4 1208.32 L1772.99 1208.32 L1773.58 1208.32 L1774.16 1208.32 L1774.75 1208.32 L1775.34 1208.32 L1775.92 1208.32 L1776.51 1208.32 L1777.1 1208.32 L1777.68 1208.32 L1778.27 1208.32 L1778.86 1208.32 L1779.44 1208.32 L1780.03 1208.32 L1780.61 1208.32 L1781.2 1208.32 L1781.79 1208.32 L1782.37 1208.32 L1782.96 1208.32 L1783.55 1208.32 L1784.13 1208.32 L1784.72 1208.32 L1785.31 1208.32 L1785.89 1208.32 L1786.48 1208.32 L1787.06 1208.32 L1787.65 1208.32 L1788.24 1208.32 L1788.82 1208.32 L1789.41 1208.32 L1790 1208.32 L1790.58 1208.32 L1791.17 1208.32 L1791.76 1208.32 L1792.34 1208.32 L1792.93 1208.32 L1793.52 1208.32 L1794.1 1208.32 L1794.69 1208.32 L1795.27 1208.32 L1795.86 1208.32 L1796.45 1208.32 L1797.03 1208.32 L1797.62 1208.32 L1798.21 1208.32 L1798.79 1208.32 L1799.38 1208.32 L1799.97 1208.32 L1800.55 1208.32 L1801.14 1208.32 L1801.73 1208.32 L1802.31 1208.32 L1802.9 1208.32 L1803.48 1208.32 L1804.07 1208.32 L1804.66 1208.32 L1805.24 1208.32 L1805.83 1208.32 L1806.42 1208.32 L1807 1208.32 L1807.59 1208.32 L1808.18 1208.32 L1808.76 1208.32 L1809.35 1208.32 L1809.94 1208.32 L1810.52 1208.32 L1811.11 1208.32 L1811.69 1208.32 L1812.28 1208.32 L1812.87 1208.32 L1813.45 1208.32 L1814.04 1208.32 L1814.63 1208.32 L1815.21 1208.32 L1815.8 1208.32 L1816.39 1208.32 L1816.97 1208.32 L1817.56 1208.32 L1818.14 1208.32 L1818.73 1208.32 L1819.32 1208.32 L1819.9 1208.32 L1820.49 1208.32 L1821.08 1208.32 L1821.66 1208.32 L1822.25 1208.32 L1822.84 1208.32 L1823.42 1208.32 L1824.01 1208.32 L1824.6 1208.32 L1825.18 1208.32 L1825.77 1208.32 L1826.35 1208.32 L1826.94 1208.32 L1827.53 1208.32 L1828.11 1208.32 L1828.7 1208.32 L1829.29 1208.32 L1829.87 1208.32 L1830.46 1208.32 L1831.05 1208.32 L1831.63 1208.32 L1832.22 1208.32 L1832.81 1208.32 L1833.39 1208.32 L1833.98 1208.32 L1834.56 1208.32 L1835.15 1208.32 L1835.74 1208.32 L1836.32 1208.32 L1836.91 1208.32 L1837.5 1208.32 L1838.08 1208.32 L1838.67 1208.32 L1839.26 1208.32 L1839.84 1208.32 L1840.43 1208.32 L1841.01 1208.32 L1841.6 1208.32 L1842.19 1208.32 L1842.77 1208.32 L1843.36 1208.32 L1843.95 1208.32 L1844.53 1208.32 L1845.12 1208.32 L1845.71 1208.32 L1846.29 1208.32 L1846.88 1208.32 L1847.47 1208.32 L1848.05 1208.32 L1848.64 1208.32 L1849.22 1208.32 L1849.81 1208.32 L1850.4 1208.32 L1850.98 1208.32 L1851.57 1208.32 L1852.16 1208.32 L1852.74 1208.32 L1853.33 1208.32 L1853.92 1208.32 L1854.5 1208.32 L1855.09 1208.32 L1855.68 1208.32 L1856.26 1208.32 L1856.85 1208.32 L1857.43 1208.32 L1858.02 1208.32 L1858.61 1208.32 L1859.19 1208.32 L1859.78 1208.32 L1860.37 1208.32 L1860.95 1208.32 L1861.54 1208.32 L1862.13 1208.32 L1862.71 1208.32 L1863.3 1208.32 L1863.88 1208.32 L1864.47 1208.32 L1865.06 1208.32 L1865.64 1208.32 L1866.23 1208.32 L1866.82 1208.32 L1867.4 1208.32 L1867.99 1208.32 L1868.58 1208.32 L1869.16 1208.32 L1869.75 1208.32 L1870.34 1208.32 L1870.92 1208.32 L1871.51 1208.32 L1872.09 1208.32 L1872.68 1208.32 L1873.27 1208.32 L1873.85 1208.32 L1874.44 1208.32 L1875.03 1208.32 L1875.61 1208.32 L1876.2 1208.32 L1876.79 1208.32 L1877.37 1208.32 L1877.96 1208.32 L1878.55 1208.32 L1879.13 1208.32 L1879.72 1208.32 L1880.3 1208.32 L1880.89 1208.32 L1881.48 1208.32 L1882.06 1208.32 L1882.65 1208.32 L1883.24 1208.32 L1883.82 1208.32 L1884.41 1208.32 L1885 1208.32 L1885.58 1208.32 L1886.17 1208.32 L1886.76 1208.32 L1887.34 1208.32 L1887.93 1208.32 L1888.51 1208.32 L1889.1 1208.32 L1889.69 1208.32 L1890.27 1208.32 L1890.86 1208.32 L1891.45 1208.32 L1892.03 1208.32 L1892.62 1208.32 L1893.21 1208.32 L1893.79 1208.32 L1894.38 1208.32 L1894.96 1208.32 L1895.55 1208.32 L1896.14 1208.32 L1896.72 1208.32 L1897.31 1208.32 L1897.9 1208.32 L1898.48 1208.32 L1899.07 1208.32 L1899.66 1208.32 L1900.24 1208.32 L1900.83 1208.32 L1901.42 1208.32 L1902 1208.32 L1902.59 1208.32 L1903.17 1208.32 L1903.76 1208.32 L1904.35 1208.32 L1904.93 1208.32 L1905.52 1208.32 L1906.11 1208.32 L1906.69 1208.32 L1907.28 1208.32 L1907.87 1208.32 L1908.45 1208.32 L1909.04 1208.32 L1909.63 1208.32 L1910.21 1208.32 L1910.8 1208.32 L1911.38 1208.32 L1911.97 1208.32 L1912.56 1208.32 L1913.14 1208.32 L1913.73 1208.32 L1914.32 1208.32 L1914.9 1208.32 L1915.49 1208.32 L1916.08 1208.32 L1916.66 1208.32 L1917.25 1208.32 L1917.83 1208.32 L1918.42 1208.32 L1919.01 1208.32 L1919.59 1208.32 L1920.18 1208.32 L1920.77 1208.32 L1921.35 1208.32 L1921.94 1208.32 L1922.53 1208.32 L1923.11 1208.32 L1923.7 1208.32 L1924.29 1208.32 L1924.87 1208.32 L1925.46 1208.32 L1926.04 1208.32 L1926.63 1208.32 L1927.22 1208.32 L1927.8 1208.32 L1928.39 1208.32 L1928.98 1208.32 L1929.56 1208.32 L1930.15 1208.32 L1930.74 1208.32 L1931.32 1208.32 L1931.91 1208.32 L1932.5 1208.32 L1933.08 1208.32 L1933.67 1208.32 L1934.25 1208.32 L1934.84 1208.32 L1935.43 1208.32 L1936.01 1208.32 L1936.6 1208.32 L1937.19 1208.32 L1937.77 1208.32 L1938.36 1208.32 L1938.95 1208.32 L1939.53 1208.32 L1940.12 1208.32 L1940.71 1208.32 L1941.29 1208.32 L1941.88 1208.32 L1942.46 1208.32 L1943.05 1208.32 L1943.64 1208.32 L1944.22 1208.32 L1944.81 1208.32 L1945.4 1208.32 L1945.98 1208.32 L1946.57 1208.32 L1947.16 1208.32 L1947.74 1208.32 L1948.33 1208.32 L1948.91 1208.32 L1949.5 1208.32 L1950.09 1208.32 L1950.67 1208.32 L1951.26 1208.32 L1951.85 1208.32 L1952.43 1208.32 L1953.02 1208.32 L1953.61 1208.32 L1954.19 1208.32 L1954.78 1208.32 L1955.37 1208.32 L1955.95 1208.32 L1956.54 1208.32 L1957.12 1208.32 L1957.71 1208.32 L1958.3 1208.32 L1958.88 1208.32 L1959.47 1208.32 L1960.06 1208.32 L1960.64 1208.32 L1961.23 1208.32 L1961.82 1208.32 L1962.4 1208.32 L1962.99 1208.32 L1963.58 1208.32 L1964.16 1208.32 L1964.75 1208.32 L1965.33 1208.32 L1965.92 1208.32 L1966.51 1208.32 L1967.09 1208.32 L1967.68 1208.32 L1968.27 1208.32 L1968.85 1208.32 L1969.44 1208.32 L1970.03 1208.32 L1970.61 1208.32 L1971.2 1208.32 L1971.78 1208.32 L1972.37 1208.32 L1972.96 1208.32 L1973.54 1208.32 L1974.13 1208.32 L1974.72 1208.32 L1975.3 1208.32 L1975.89 1208.32 L1976.48 1208.32 L1977.06 1208.32 L1977.65 1208.32 L1978.24 1208.32 L1978.82 1208.32 L1979.41 1208.32 L1979.99 1208.32 L1980.58 1208.32 L1981.17 1208.32 L1981.75 1208.32 L1982.34 1208.32 L1982.93 1208.32 L1983.51 1208.32 L1984.1 1208.32 L1984.69 1208.32 L1985.27 1208.32 L1985.86 1208.32 L1986.45 1208.32 L1987.03 1208.32 L1987.62 1208.32 L1988.2 1208.32 L1988.79 1208.32 L1989.38 1208.32 L1989.96 1208.32 L1990.55 1208.32 L1991.14 1208.32 L1991.72 1208.32 L1992.31 1208.32 L1992.9 1208.32 L1993.48 1208.32 L1994.07 1208.32 L1994.65 1208.32 L1995.24 1208.32 L1995.83 1208.32 L1996.41 1208.32 L1997 1208.32 L1997.59 1208.32 L1998.17 1208.32 L1998.76 1208.32 L1999.35 1208.32 L1999.93 1208.32 L2000.52 1208.32 L2001.11 1208.32 L2001.69 1208.32 L2002.28 1208.32 L2002.86 1208.32 L2003.45 1208.32 L2004.04 1208.32 L2004.62 1208.32 L2005.21 1208.32 L2005.8 1208.32 L2006.38 1208.32 L2006.97 1208.32 L2007.56 1208.32 L2008.14 1208.32 L2008.73 1208.32 L2009.32 1208.32 L2009.9 1208.32 L2010.49 1208.32 L2011.07 1208.32 L2011.66 1208.32 L2012.25 1208.32 L2012.83 1208.32 L2013.42 1208.32 L2014.01 1208.32 L2014.59 1208.32 L2015.18 1208.32 L2015.77 1208.32 L2016.35 1208.32 L2016.94 1208.32 L2017.53 1208.32 L2018.11 1208.32 L2018.7 1208.32 L2019.28 1208.32 L2019.87 1208.32 L2020.46 1208.32 L2021.04 1208.32 L2021.63 1208.32 L2022.22 1208.32 L2022.8 1208.32 L2023.39 1208.32 L2023.98 1208.32 L2024.56 1208.32 L2025.15 1208.32 L2025.73 1208.32 L2026.32 1208.32 L2026.91 1208.32 L2027.49 1208.32 L2028.08 1208.32 L2028.67 1208.32 L2029.25 1208.32 L2029.84 1208.32 L2030.43 1208.32 L2031.01 1208.32 L2031.6 1208.32 L2032.19 1208.32 L2032.77 1208.32 L2033.36 1208.32 L2033.94 1208.32 L2034.53 1208.32 L2035.12 1208.32 L2035.7 1208.32 L2036.29 1208.32 L2036.88 1208.32 L2037.46 1208.32 L2038.05 1208.32 L2038.64 1208.32 L2039.22 1208.32 L2039.81 1208.32 L2040.4 1208.32 L2040.98 1208.32 L2041.57 1208.32 L2042.15 1208.32 L2042.74 1208.32 L2043.33 1208.32 L2043.91 1208.32 L2044.5 1208.32 L2045.09 1208.32 L2045.67 1208.32 L2046.26 1208.32 L2046.85 1208.32 L2047.43 1208.32 L2048.02 1208.32 L2048.6 1208.32 L2049.19 1208.32 L2049.78 1208.32 L2050.36 1208.32 L2050.95 1208.32 L2051.54 1208.32 L2052.12 1208.32 L2052.71 1208.32 L2053.3 1208.32 L2053.88 1208.32 L2054.47 1208.32 L2055.06 1208.32 L2055.64 1208.32 L2056.23 1208.32 L2056.81 1208.32 L2057.4 1208.32 L2057.99 1208.32 L2058.57 1208.32 L2059.16 1208.32 L2059.75 1208.32 L2060.33 1208.32 L2060.92 1208.32 L2061.51 1208.32 L2062.09 1208.32 L2062.68 1208.32 L2063.27 1208.32 L2063.85 1208.32 L2064.44 1208.32 L2065.02 1208.32 L2065.61 1208.32 L2066.2 1208.32 L2066.78 1208.32 L2067.37 1208.32 L2067.96 1208.32 L2068.54 1208.32 L2069.13 1208.32 L2069.72 1208.32 L2070.3 1208.32 L2070.89 1208.32 L2071.48 1208.32 L2072.06 1208.32 L2072.65 1208.32 L2073.23 1208.32 L2073.82 1208.32 L2074.41 1208.32 L2074.99 1208.32 L2075.58 1208.32 L2076.17 1208.32 L2076.75 1208.32 L2077.34 1208.32 L2077.93 1208.32 L2078.51 1208.32 L2079.1 1208.32 L2079.68 1208.32 L2080.27 1208.32 L2080.86 1208.32 L2081.44 1208.32 L2082.03 1208.32 L2082.62 1208.32 L2083.2 1208.32 L2083.79 1208.32 L2084.38 1208.32 L2084.96 1208.32 L2085.55 1208.32 L2086.14 1208.32 L2086.72 1208.32 L2087.31 1208.32 L2087.89 1208.32 L2088.48 1208.32 L2089.07 1208.32 L2089.65 1208.32 L2090.24 1208.32 L2090.83 1208.32 L2091.41 1208.32 L2092 1208.32 L2092.59 1208.32 L2093.17 1208.32 L2093.76 1208.32 L2094.35 1208.32 L2094.93 1208.32 L2095.52 1208.32 L2096.1 1208.32 L2096.69 1208.32 L2097.28 1208.32 L2097.86 1208.32 L2098.45 1208.32 L2099.04 1208.32 L2099.62 1208.32 L2100.21 1208.32 L2100.8 1208.32 L2101.38 1208.32 L2101.97 1208.32 L2102.55 1208.32 L2103.14 1208.32 L2103.73 1208.32 L2104.31 1208.32 L2104.9 1208.32 L2105.49 1208.32 L2106.07 1208.32 L2106.66 1208.32 L2107.25 1208.32 L2107.83 1208.32 L2108.42 1208.32 L2109.01 1208.32 L2109.59 1208.32 L2110.18 1208.32 L2110.76 1208.32 L2111.35 1208.32 L2111.94 1208.32 L2112.52 1208.32 L2113.11 1208.32 L2113.7 1208.32 L2114.28 1208.32 L2114.87 1208.32 L2115.46 1208.32 L2116.04 1208.32 L2116.63 1208.32 L2117.22 1208.32 L2117.8 1208.32 L2118.39 1208.32 L2118.97 1208.32 L2119.56 1208.32 L2120.15 1208.32 L2120.73 1208.32 L2121.32 1208.32 L2121.91 1208.32 L2122.49 1208.32 L2123.08 1208.32 L2123.67 1208.32 L2124.25 1208.32 L2124.84 1208.32 L2125.42 1208.32 L2126.01 1208.32 L2126.6 1208.32 L2127.18 1208.32 L2127.77 1208.32 L2128.36 1208.32 L2128.94 1208.32 L2129.53 1208.32 L2130.12 1208.32 L2130.7 1208.32 L2131.29 1208.32 L2131.88 1208.32 L2132.46 1208.32 L2133.05 1208.32 L2133.63 1208.32 L2134.22 1208.32 L2134.81 1208.32 L2135.39 1208.32 L2135.98 1208.32 L2136.57 1208.32 L2137.15 1208.32 L2137.74 1208.32 L2138.33 1208.32 L2138.91 1208.32 L2139.5 1208.32 L2140.09 1208.32 L2140.67 1208.32 L2141.26 1208.32 L2141.84 1208.32 L2142.43 1208.32 L2143.02 1208.32 L2143.6 1208.32 L2144.19 1208.32 L2144.78 1208.32 L2145.36 1208.32 L2145.95 1208.32 L2146.54 1208.32 L2147.12 1208.32 L2147.71 1208.32 L2148.3 1208.32 L2148.88 1208.32 L2149.47 1208.32 L2150.05 1208.32 L2150.64 1208.32 L2151.23 1208.32 L2151.81 1208.32 L2152.4 1208.32 L2152.99 1208.32 L2153.57 1208.32 L2154.16 1208.32 L2154.75 1208.32 L2155.33 1208.32 L2155.92 1208.32 L2156.5 1208.32 L2157.09 1208.32 L2157.68 1208.32 L2158.26 1208.32 L2158.26 1208.16 L2157.68 1208.16 L2157.09 1208.16 L2156.5 1208.16 L2155.92 1208.16 L2155.33 1208.16 L2154.75 1208.16 L2154.16 1208.16 L2153.57 1208.16 L2152.99 1208.16 L2152.4 1208.16 L2151.81 1208.16 L2151.23 1208.16 L2150.64 1208.16 L2150.05 1208.16 L2149.47 1208.16 L2148.88 1208.16 L2148.3 1208.16 L2147.71 1208.16 L2147.12 1208.16 L2146.54 1208.16 L2145.95 1208.16 L2145.36 1208.16 L2144.78 1208.16 L2144.19 1208.16 L2143.6 1208.16 L2143.02 1208.16 L2142.43 1208.16 L2141.84 1208.16 L2141.26 1208.16 L2140.67 1208.16 L2140.09 1208.16 L2139.5 1208.16 L2138.91 1208.16 L2138.33 1208.16 L2137.74 1208.16 L2137.15 1208.16 L2136.57 1208.16 L2135.98 1208.16 L2135.39 1208.16 L2134.81 1208.16 L2134.22 1208.16 L2133.63 1208.16 L2133.05 1208.16 L2132.46 1208.16 L2131.88 1208.16 L2131.29 1208.16 L2130.7 1208.16 L2130.12 1208.16 L2129.53 1208.16 L2128.94 1208.16 L2128.36 1208.16 L2127.77 1208.16 L2127.18 1208.16 L2126.6 1208.16 L2126.01 1208.16 L2125.42 1208.16 L2124.84 1208.16 L2124.25 1208.16 L2123.67 1208.16 L2123.08 1208.16 L2122.49 1208.16 L2121.91 1208.16 L2121.32 1208.16 L2120.73 1208.16 L2120.15 1208.16 L2119.56 1208.16 L2118.97 1208.16 L2118.39 1208.16 L2117.8 1208.16 L2117.22 1208.16 L2116.63 1208.16 L2116.04 1208.16 L2115.46 1208.16 L2114.87 1208.16 L2114.28 1208.16 L2113.7 1208.16 L2113.11 1208.16 L2112.52 1208.16 L2111.94 1208.16 L2111.35 1208.16 L2110.76 1208.16 L2110.18 1208.16 L2109.59 1208.16 L2109.01 1208.16 L2108.42 1208.16 L2107.83 1208.16 L2107.25 1208.16 L2106.66 1208.16 L2106.07 1208.16 L2105.49 1208.16 L2104.9 1208.16 L2104.31 1208.16 L2103.73 1208.16 L2103.14 1208.16 L2102.55 1208.16 L2101.97 1208.16 L2101.38 1208.16 L2100.8 1208.16 L2100.21 1208.16 L2099.62 1208.16 L2099.04 1208.16 L2098.45 1208.16 L2097.86 1208.16 L2097.28 1208.16 L2096.69 1208.16 L2096.1 1208.16 L2095.52 1208.16 L2094.93 1208.16 L2094.35 1208.16 L2093.76 1208.16 L2093.17 1208.16 L2092.59 1208.16 L2092 1208.16 L2091.41 1208.16 L2090.83 1208.16 L2090.24 1208.16 L2089.65 1208.16 L2089.07 1208.16 L2088.48 1208.16 L2087.89 1208.16 L2087.31 1208.16 L2086.72 1208.16 L2086.14 1208.16 L2085.55 1208.16 L2084.96 1208.16 L2084.38 1208.16 L2083.79 1208.16 L2083.2 1208.16 L2082.62 1208.16 L2082.03 1208.16 L2081.44 1208.16 L2080.86 1208.16 L2080.27 1208.16 L2079.68 1208.16 L2079.1 1208.16 L2078.51 1208.16 L2077.93 1208.16 L2077.34 1208.16 L2076.75 1208.16 L2076.17 1208.16 L2075.58 1208.16 L2074.99 1208.16 L2074.41 1208.16 L2073.82 1208.16 L2073.23 1208.16 L2072.65 1208.16 L2072.06 1208.16 L2071.48 1208.16 L2070.89 1208.16 L2070.3 1208.16 L2069.72 1208.16 L2069.13 1208.16 L2068.54 1208.16 L2067.96 1208.16 L2067.37 1208.16 L2066.78 1208.16 L2066.2 1208.16 L2065.61 1208.16 L2065.02 1208.16 L2064.44 1208.16 L2063.85 1208.16 L2063.27 1208.16 L2062.68 1208.16 L2062.09 1208.16 L2061.51 1208.16 L2060.92 1208.16 L2060.33 1208.16 L2059.75 1208.16 L2059.16 1208.16 L2058.57 1208.16 L2057.99 1208.16 L2057.4 1208.16 L2056.81 1208.16 L2056.23 1208.16 L2055.64 1208.16 L2055.06 1208.16 L2054.47 1208.16 L2053.88 1208.16 L2053.3 1208.16 L2052.71 1208.16 L2052.12 1208.16 L2051.54 1208.16 L2050.95 1208.16 L2050.36 1208.16 L2049.78 1208.16 L2049.19 1208.16 L2048.6 1208.16 L2048.02 1208.16 L2047.43 1208.16 L2046.85 1208.16 L2046.26 1208.16 L2045.67 1208.16 L2045.09 1208.16 L2044.5 1208.16 L2043.91 1208.16 L2043.33 1208.16 L2042.74 1208.16 L2042.15 1208.16 L2041.57 1208.16 L2040.98 1208.16 L2040.4 1208.16 L2039.81 1208.16 L2039.22 1208.16 L2038.64 1208.16 L2038.05 1208.16 L2037.46 1208.16 L2036.88 1208.16 L2036.29 1208.16 L2035.7 1208.16 L2035.12 1208.16 L2034.53 1208.16 L2033.94 1208.16 L2033.36 1208.16 L2032.77 1208.16 L2032.19 1208.16 L2031.6 1208.16 L2031.01 1208.16 L2030.43 1208.16 L2029.84 1208.16 L2029.25 1208.16 L2028.67 1208.16 L2028.08 1208.16 L2027.49 1208.16 L2026.91 1208.16 L2026.32 1208.16 L2025.73 1208.16 L2025.15 1208.16 L2024.56 1208.16 L2023.98 1208.16 L2023.39 1208.16 L2022.8 1208.16 L2022.22 1208.16 L2021.63 1208.16 L2021.04 1208.16 L2020.46 1208.16 L2019.87 1208.16 L2019.28 1208.16 L2018.7 1208.16 L2018.11 1208.16 L2017.53 1208.16 L2016.94 1208.16 L2016.35 1208.16 L2015.77 1208.16 L2015.18 1208.16 L2014.59 1208.16 L2014.01 1208.16 L2013.42 1208.16 L2012.83 1208.16 L2012.25 1208.16 L2011.66 1208.16 L2011.07 1208.16 L2010.49 1208.16 L2009.9 1208.16 L2009.32 1208.16 L2008.73 1208.16 L2008.14 1208.16 L2007.56 1208.16 L2006.97 1208.16 L2006.38 1208.16 L2005.8 1208.16 L2005.21 1208.16 L2004.62 1208.16 L2004.04 1208.16 L2003.45 1208.16 L2002.86 1208.16 L2002.28 1208.16 L2001.69 1208.16 L2001.11 1208.16 L2000.52 1208.16 L1999.93 1208.16 L1999.35 1208.16 L1998.76 1208.16 L1998.17 1208.16 L1997.59 1208.16 L1997 1208.16 L1996.41 1208.16 L1995.83 1208.16 L1995.24 1208.16 L1994.65 1208.16 L1994.07 1208.16 L1993.48 1208.16 L1992.9 1208.16 L1992.31 1208.16 L1991.72 1208.16 L1991.14 1208.16 L1990.55 1208.16 L1989.96 1208.16 L1989.38 1208.16 L1988.79 1208.16 L1988.2 1208.16 L1987.62 1208.16 L1987.03 1208.16 L1986.45 1208.16 L1985.86 1208.16 L1985.27 1208.16 L1984.69 1208.16 L1984.1 1208.16 L1983.51 1208.16 L1982.93 1208.16 L1982.34 1208.16 L1981.75 1208.16 L1981.17 1208.16 L1980.58 1208.16 L1979.99 1208.16 L1979.41 1208.16 L1978.82 1208.16 L1978.24 1208.16 L1977.65 1208.16 L1977.06 1208.16 L1976.48 1208.16 L1975.89 1208.16 L1975.3 1208.16 L1974.72 1208.16 L1974.13 1208.16 L1973.54 1208.16 L1972.96 1208.16 L1972.37 1208.16 L1971.78 1208.16 L1971.2 1208.16 L1970.61 1208.16 L1970.03 1208.16 L1969.44 1208.16 L1968.85 1208.16 L1968.27 1208.16 L1967.68 1208.16 L1967.09 1208.16 L1966.51 1208.16 L1965.92 1208.16 L1965.33 1208.16 L1964.75 1208.16 L1964.16 1208.16 L1963.58 1208.16 L1962.99 1208.16 L1962.4 1208.16 L1961.82 1208.16 L1961.23 1208.16 L1960.64 1208.16 L1960.06 1208.16 L1959.47 1208.16 L1958.88 1208.16 L1958.3 1208.16 L1957.71 1208.16 L1957.12 1208.16 L1956.54 1208.16 L1955.95 1208.16 L1955.37 1208.16 L1954.78 1208.16 L1954.19 1208.16 L1953.61 1208.16 L1953.02 1208.16 L1952.43 1208.16 L1951.85 1208.16 L1951.26 1208.16 L1950.67 1208.16 L1950.09 1208.16 L1949.5 1208.16 L1948.91 1208.16 L1948.33 1208.16 L1947.74 1208.16 L1947.16 1208.16 L1946.57 1208.16 L1945.98 1208.16 L1945.4 1208.16 L1944.81 1208.16 L1944.22 1208.16 L1943.64 1208.16 L1943.05 1208.16 L1942.46 1208.16 L1941.88 1208.16 L1941.29 1208.16 L1940.71 1208.16 L1940.12 1208.16 L1939.53 1208.16 L1938.95 1208.16 L1938.36 1208.16 L1937.77 1208.16 L1937.19 1208.16 L1936.6 1208.16 L1936.01 1208.16 L1935.43 1208.16 L1934.84 1208.16 L1934.25 1208.16 L1933.67 1208.16 L1933.08 1208.16 L1932.5 1208.16 L1931.91 1208.16 L1931.32 1208.16 L1930.74 1208.16 L1930.15 1208.16 L1929.56 1208.16 L1928.98 1208.16 L1928.39 1208.16 L1927.8 1208.16 L1927.22 1208.16 L1926.63 1208.16 L1926.04 1208.16 L1925.46 1208.16 L1924.87 1208.16 L1924.29 1208.16 L1923.7 1208.16 L1923.11 1208.16 L1922.53 1208.16 L1921.94 1208.16 L1921.35 1208.16 L1920.77 1208.16 L1920.18 1208.16 L1919.59 1208.16 L1919.01 1208.16 L1918.42 1208.16 L1917.83 1208.16 L1917.25 1208.16 L1916.66 1208.16 L1916.08 1208.16 L1915.49 1208.16 L1914.9 1208.16 L1914.32 1208.16 L1913.73 1208.16 L1913.14 1208.16 L1912.56 1208.16 L1911.97 1208.16 L1911.38 1208.16 L1910.8 1208.16 L1910.21 1208.16 L1909.63 1208.16 L1909.04 1208.16 L1908.45 1208.16 L1907.87 1208.16 L1907.28 1208.16 L1906.69 1208.16 L1906.11 1208.16 L1905.52 1208.16 L1904.93 1208.16 L1904.35 1208.16 L1903.76 1208.16 L1903.17 1208.16 L1902.59 1208.16 L1902 1208.16 L1901.42 1208.16 L1900.83 1208.16 L1900.24 1208.16 L1899.66 1208.16 L1899.07 1208.16 L1898.48 1208.16 L1897.9 1208.16 L1897.31 1208.16 L1896.72 1208.16 L1896.14 1208.16 L1895.55 1208.16 L1894.96 1208.16 L1894.38 1208.16 L1893.79 1208.16 L1893.21 1208.16 L1892.62 1208.16 L1892.03 1208.16 L1891.45 1208.16 L1890.86 1208.16 L1890.27 1208.16 L1889.69 1208.16 L1889.1 1208.16 L1888.51 1208.16 L1887.93 1208.16 L1887.34 1208.16 L1886.76 1208.16 L1886.17 1208.16 L1885.58 1208.16 L1885 1208.16 L1884.41 1208.16 L1883.82 1208.16 L1883.24 1208.16 L1882.65 1208.16 L1882.06 1208.16 L1881.48 1208.16 L1880.89 1208.16 L1880.3 1208.16 L1879.72 1208.16 L1879.13 1208.16 L1878.55 1208.16 L1877.96 1208.16 L1877.37 1208.16 L1876.79 1208.16 L1876.2 1208.16 L1875.61 1208.16 L1875.03 1208.16 L1874.44 1208.16 L1873.85 1208.16 L1873.27 1208.16 L1872.68 1208.16 L1872.09 1208.16 L1871.51 1208.16 L1870.92 1208.16 L1870.34 1208.16 L1869.75 1208.16 L1869.16 1208.16 L1868.58 1208.16 L1867.99 1208.16 L1867.4 1208.16 L1866.82 1208.16 L1866.23 1208.16 L1865.64 1208.16 L1865.06 1208.16 L1864.47 1208.16 L1863.88 1208.16 L1863.3 1208.16 L1862.71 1208.16 L1862.13 1208.16 L1861.54 1208.16 L1860.95 1208.16 L1860.37 1208.16 L1859.78 1208.16 L1859.19 1208.16 L1858.61 1208.16 L1858.02 1208.16 L1857.43 1208.16 L1856.85 1208.16 L1856.26 1208.16 L1855.68 1208.16 L1855.09 1208.16 L1854.5 1208.16 L1853.92 1208.16 L1853.33 1208.16 L1852.74 1208.16 L1852.16 1208.16 L1851.57 1208.16 L1850.98 1208.16 L1850.4 1208.16 L1849.81 1208.16 L1849.22 1208.16 L1848.64 1208.16 L1848.05 1208.16 L1847.47 1208.16 L1846.88 1208.16 L1846.29 1208.16 L1845.71 1208.16 L1845.12 1208.16 L1844.53 1208.16 L1843.95 1208.16 L1843.36 1208.16 L1842.77 1208.16 L1842.19 1208.16 L1841.6 1208.16 L1841.01 1208.16 L1840.43 1208.16 L1839.84 1208.16 L1839.26 1208.16 L1838.67 1208.16 L1838.08 1208.16 L1837.5 1208.16 L1836.91 1208.16 L1836.32 1208.16 L1835.74 1208.16 L1835.15 1208.16 L1834.56 1208.16 L1833.98 1208.16 L1833.39 1208.16 L1832.81 1208.16 L1832.22 1208.16 L1831.63 1208.16 L1831.05 1208.16 L1830.46 1208.16 L1829.87 1208.16 L1829.29 1208.16 L1828.7 1208.16 L1828.11 1208.16 L1827.53 1208.16 L1826.94 1208.16 L1826.35 1208.16 L1825.77 1208.16 L1825.18 1208.16 L1824.6 1208.16 L1824.01 1208.16 L1823.42 1208.16 L1822.84 1208.16 L1822.25 1208.16 L1821.66 1208.16 L1821.08 1208.16 L1820.49 1208.16 L1819.9 1208.16 L1819.32 1208.16 L1818.73 1208.16 L1818.14 1208.16 L1817.56 1208.16 L1816.97 1208.16 L1816.39 1208.16 L1815.8 1208.16 L1815.21 1208.16 L1814.63 1208.16 L1814.04 1208.16 L1813.45 1208.16 L1812.87 1208.16 L1812.28 1208.16 L1811.69 1208.16 L1811.11 1208.16 L1810.52 1208.16 L1809.94 1208.16 L1809.35 1208.16 L1808.76 1208.16 L1808.18 1208.16 L1807.59 1208.16 L1807 1208.16 L1806.42 1208.16 L1805.83 1208.16 L1805.24 1208.16 L1804.66 1208.16 L1804.07 1208.16 L1803.48 1208.16 L1802.9 1208.16 L1802.31 1208.16 L1801.73 1208.16 L1801.14 1208.16 L1800.55 1208.16 L1799.97 1208.16 L1799.38 1208.16 L1798.79 1208.16 L1798.21 1208.16 L1797.62 1208.16 L1797.03 1208.16 L1796.45 1208.16 L1795.86 1208.16 L1795.27 1208.16 L1794.69 1208.16 L1794.1 1208.16 L1793.52 1208.16 L1792.93 1208.16 L1792.34 1208.16 L1791.76 1208.16 L1791.17 1208.16 L1790.58 1208.16 L1790 1208.16 L1789.41 1208.16 L1788.82 1208.16 L1788.24 1208.16 L1787.65 1208.16 L1787.06 1208.16 L1786.48 1208.16 L1785.89 1208.16 L1785.31 1208.16 L1784.72 1208.16 L1784.13 1208.16 L1783.55 1208.16 L1782.96 1208.16 L1782.37 1208.16 L1781.79 1208.16 L1781.2 1208.16 L1780.61 1208.16 L1780.03 1208.16 L1779.44 1208.16 L1778.86 1208.16 L1778.27 1208.16 L1777.68 1208.16 L1777.1 1208.16 L1776.51 1208.16 L1775.92 1208.16 L1775.34 1208.16 L1774.75 1208.16 L1774.16 1208.16 L1773.58 1208.16 L1772.99 1208.16 L1772.4 1208.16 L1771.82 1208.16 L1771.23 1208.16 L1770.65 1208.16 L1770.06 1208.16 L1769.47 1208.16 L1768.89 1208.16 L1768.3 1208.16 L1767.71 1208.16 L1767.13 1208.16 L1766.54 1208.16 L1765.95 1208.16 L1765.37 1208.16 L1764.78 1208.16 L1764.19 1208.16 L1763.61 1208.16 L1763.02 1208.16 L1762.44 1208.16 L1761.85 1208.16 L1761.26 1208.16 L1760.68 1208.16 L1760.09 1208.16 L1759.5 1208.16 L1758.92 1208.16 L1758.33 1208.16 L1757.74 1208.16 L1757.16 1208.16 L1756.57 1208.16 L1755.99 1208.16 L1755.4 1208.16 L1754.81 1208.16 L1754.23 1208.16 L1753.64 1208.16 L1753.05 1208.16 L1752.47 1208.16 L1751.88 1208.16 L1751.29 1208.16 L1750.71 1208.16 L1750.12 1208.16 L1749.53 1208.16 L1748.95 1208.16 L1748.36 1208.16 L1747.78 1208.16 L1747.19 1208.16 L1746.6 1208.16 L1746.02 1208.16 L1745.43 1208.16 L1744.84 1208.16 L1744.26 1208.16 L1743.67 1208.16 L1743.08 1208.16 L1742.5 1208.16 L1741.91 1208.16 L1741.32 1208.16 L1740.74 1208.16 L1740.15 1208.16 L1739.57 1208.16 L1738.98 1208.16 L1738.39 1208.16 L1737.81 1208.16 L1737.22 1208.16 L1736.63 1208.16 L1736.05 1208.16 L1735.46 1208.16 L1734.87 1208.16 L1734.29 1208.16 L1733.7 1208.16 L1733.11 1208.16 L1732.53 1208.16 L1731.94 1208.16 L1731.36 1208.16 L1730.77 1208.16 L1730.18 1208.16 L1729.6 1208.16 L1729.01 1208.16 L1728.42 1208.16 L1727.84 1208.16 L1727.25 1208.16 L1726.66 1208.16 L1726.08 1208.16 L1725.49 1208.16 L1724.91 1208.16 L1724.32 1208.16 L1723.73 1208.16 L1723.15 1208.16 L1722.56 1208.16 L1721.97 1208.16 L1721.39 1208.16 L1720.8 1208.16 L1720.21 1208.16 L1719.63 1208.16 L1719.04 1208.16 L1718.45 1208.16 L1717.87 1208.16 L1717.28 1208.16 L1716.7 1208.16 L1716.11 1208.16 L1715.52 1208.16 L1714.94 1208.16 L1714.35 1208.16 L1713.76 1208.16 L1713.18 1208.16 L1712.59 1208.16 L1712 1208.16 L1711.42 1208.16 L1710.83 1208.16 L1710.24 1208.16 L1709.66 1208.16 L1709.07 1208.16 L1708.49 1208.16 L1707.9 1208.16 L1707.31 1208.16 L1706.73 1208.16 L1706.14 1208.16 L1705.55 1208.16 L1704.97 1208.16 L1704.38 1208.16 L1703.79 1208.16 L1703.21 1208.16 L1702.62 1208.16 L1702.04 1208.16 L1701.45 1208.16 L1700.86 1208.16 L1700.28 1208.16 L1699.69 1208.16 L1699.1 1208.16 L1698.52 1208.16 L1697.93 1208.16 L1697.34 1208.16 L1696.76 1208.16 L1696.17 1208.16 L1695.58 1208.16 L1695 1208.16 L1694.41 1208.16 L1693.83 1208.16 L1693.24 1208.16 L1692.65 1208.16 L1692.07 1208.16 L1691.48 1208.16 L1690.89 1208.16 L1690.31 1208.16 L1689.72 1208.16 L1689.13 1208.16 L1688.55 1208.16 L1687.96 1208.16 L1687.37 1208.16 L1686.79 1208.16 L1686.2 1208.16 L1685.62 1208.16 L1685.03 1208.16 L1684.44 1208.16 L1683.86 1208.16 L1683.27 1208.16 L1682.68 1208.16 L1682.1 1208.16 L1681.51 1208.16 L1680.92 1208.16 L1680.34 1208.16 L1679.75 1208.16 L1679.17 1208.16 L1678.58 1208.16 L1677.99 1208.16 L1677.41 1208.16 L1676.82 1208.16 L1676.23 1208.16 L1675.65 1208.16 L1675.06 1208.16 L1674.47 1208.16 L1673.89 1208.16 L1673.3 1208.16 L1672.71 1208.16 L1672.13 1208.16 L1671.54 1208.16 L1670.96 1208.16 L1670.37 1208.16 L1669.78 1208.16 L1669.2 1208.16 L1668.61 1208.16 L1668.02 1208.16 L1667.44 1208.16 L1666.85 1208.16 L1666.26 1208.16 L1665.68 1208.16 L1665.09 1208.16 L1664.5 1208.16 L1663.92 1208.16 L1663.33 1208.16 L1662.75 1208.16 L1662.16 1208.16 L1661.57 1208.16 L1660.99 1208.16 L1660.4 1208.16 L1659.81 1208.16 L1659.23 1208.16 L1658.64 1208.16 L1658.05 1208.16 L1657.47 1208.16 L1656.88 1208.16 L1656.29 1208.16 L1655.71 1208.16 L1655.12 1208.16 L1654.54 1208.16 L1653.95 1208.16 L1653.36 1208.16 L1652.78 1208.16 L1652.19 1208.16 L1651.6 1208.16 L1651.02 1208.16 L1650.43 1208.16 L1649.84 1208.16 L1649.26 1208.16 L1648.67 1208.16 L1648.09 1208.16 L1647.5 1208.16 L1646.91 1208.16 L1646.33 1208.16 L1645.74 1208.16 L1645.15 1208.16 L1644.57 1208.16 L1643.98 1208.16 L1643.39 1208.16 L1642.81 1208.16 L1642.22 1208.16 L1641.63 1208.16 L1641.05 1208.16 L1640.46 1208.16 L1639.88 1208.16 L1639.29 1208.16 L1638.7 1208.16 L1638.12 1208.16 L1637.53 1208.16 L1636.94 1208.16 L1636.36 1208.16 L1635.77 1208.16 L1635.18 1208.16 L1634.6 1208.16 L1634.01 1208.16 L1633.42 1208.16 L1632.84 1208.16 L1632.25 1208.16 L1631.67 1208.16 L1631.08 1208.16 L1630.49 1208.16 L1629.91 1208.16 L1629.32 1208.16 L1628.73 1208.16 L1628.15 1208.16 L1627.56 1208.16 L1626.97 1208.16 L1626.39 1208.16 L1625.8 1208.16 L1625.22 1208.16 L1624.63 1208.16 L1624.04 1208.16 L1623.46 1208.16 L1622.87 1208.16 L1622.28 1208.16 L1621.7 1208.16 L1621.11 1208.16 L1620.52 1208.16 L1619.94 1208.16 L1619.35 1208.16 L1618.76 1208.16 L1618.18 1208.16 L1617.59 1208.16 L1617.01 1208.16 L1616.42 1208.16 L1615.83 1208.16 L1615.25 1208.16 L1614.66 1208.16 L1614.07 1208.16 L1613.49 1208.16 L1612.9 1208.16 L1612.31 1208.16 L1611.73 1208.16 L1611.14 1208.16 L1610.55 1208.16 L1609.97 1208.16 L1609.38 1208.16 L1608.8 1208.16 L1608.21 1208.16 L1607.62 1208.16 L1607.04 1208.16 L1606.45 1208.16 L1605.86 1208.16 L1605.28 1208.16 L1604.69 1208.16 L1604.1 1208.16 L1603.52 1208.16 L1602.93 1208.16 L1602.34 1208.16 L1601.76 1208.16 L1601.17 1208.16 L1600.59 1208.16 L1600 1208.16 L1599.41 1208.16 L1598.83 1208.16 L1598.24 1208.16 L1597.65 1208.16 L1597.07 1208.16 L1596.48 1208.16 L1595.89 1208.16 L1595.31 1208.16 L1594.72 1208.16 L1594.14 1208.16 L1593.55 1208.16 L1592.96 1208.16 L1592.38 1208.16 L1591.79 1208.16 L1591.2 1208.16 L1590.62 1208.16 L1590.03 1208.16 L1589.44 1208.16 L1588.86 1208.16 L1588.27 1208.16 L1587.68 1208.16 L1587.1 1208.16 L1586.51 1208.16 L1585.93 1208.16 L1585.34 1208.16 L1584.75 1208.16 L1584.17 1208.16 L1583.58 1208.16 L1582.99 1208.16 L1582.41 1208.16 L1581.82 1208.16 L1581.23 1208.16 L1580.65 1208.16 L1580.06 1208.16 L1579.47 1208.16 L1578.89 1208.16 L1578.3 1208.16 L1577.72 1208.16 L1577.13 1208.16 L1576.54 1208.16 L1575.96 1208.16 L1575.37 1208.16 L1574.78 1208.16 L1574.2 1208.16 L1573.61 1208.16 L1573.02 1208.16 L1572.44 1208.16 L1571.85 1208.16 L1571.27 1208.16 L1570.68 1208.16 L1570.09 1208.16 L1569.51 1208.16 L1568.92 1208.16 L1568.33 1208.16 L1567.75 1208.16 L1567.16 1208.16 L1566.57 1208.16 L1565.99 1208.16 L1565.4 1208.16 L1564.81 1208.16 L1564.23 1208.16 L1563.64 1208.16 L1563.06 1208.16 L1562.47 1208.16 L1561.88 1208.16 L1561.3 1208.16 L1560.71 1208.16 L1560.12 1208.16 L1559.54 1208.16 L1558.95 1208.16 L1558.36 1208.16 L1557.78 1208.16 L1557.19 1208.16 L1556.6 1208.16 L1556.02 1208.16 L1555.43 1208.16 L1554.85 1208.16 L1554.26 1208.16 L1553.67 1208.16 L1553.09 1208.16 L1552.5 1208.16 L1551.91 1208.16 L1551.33 1208.16 L1550.74 1208.16 L1550.15 1208.16 L1549.57 1208.16 L1548.98 1208.16 L1548.4 1208.16 L1547.81 1208.16 L1547.22 1208.16 L1546.64 1208.16 L1546.05 1208.16 L1545.46 1208.16 L1544.88 1208.16 L1544.29 1208.16 L1543.7 1208.16 L1543.12 1208.16 L1542.53 1208.16 L1541.94 1208.16 L1541.36 1208.16 L1540.77 1208.16 L1540.19 1208.16 L1539.6 1208.16 L1539.01 1208.16 L1538.43 1208.16 L1537.84 1208.16 L1537.25 1208.16 L1536.67 1208.16 L1536.08 1208.16 L1535.49 1208.16 L1534.91 1208.16 L1534.32 1208.16 L1533.73 1208.16 L1533.15 1208.16 L1532.56 1208.16 L1531.98 1208.16 L1531.39 1208.16 L1530.8 1208.16 L1530.22 1208.16 L1529.63 1208.16 L1529.04 1208.16 L1528.46 1208.16 L1527.87 1208.16 L1527.28 1208.16 L1526.7 1208.16 L1526.11 1208.16 L1525.52 1208.16 L1524.94 1208.16 L1524.35 1208.16 L1523.77 1208.16 L1523.18 1208.16 L1522.59 1208.16 L1522.01 1208.16 L1521.42 1208.16 L1520.83 1208.16 L1520.25 1208.16 L1519.66 1208.16 L1519.07 1208.16 L1518.49 1208.16 L1517.9 1208.16 L1517.32 1208.16 L1516.73 1208.16 L1516.14 1208.16 L1515.56 1208.16 L1514.97 1208.16 L1514.38 1208.16 L1513.8 1208.16 L1513.21 1208.16 L1512.62 1208.16 L1512.04 1208.16 L1511.45 1208.16 L1510.86 1208.16 L1510.28 1208.16 L1509.69 1208.16 L1509.11 1208.16 L1508.52 1208.16 L1507.93 1208.16 L1507.35 1208.16 L1506.76 1208.16 L1506.17 1208.16 L1505.59 1208.16 L1505 1208.16 L1504.41 1208.16 L1503.83 1208.16 L1503.24 1208.16 L1502.65 1208.16 L1502.07 1208.16 L1501.48 1208.16 L1500.9 1208.16 L1500.31 1208.16 L1499.72 1208.16 L1499.14 1208.16 L1498.55 1208.16 L1497.96 1208.16 L1497.38 1208.16 L1496.79 1208.16 L1496.2 1208.16 L1495.62 1208.16 L1495.03 1208.16 L1494.45 1208.16 L1493.86 1208.16 L1493.27 1208.16 L1492.69 1208.16 L1492.1 1208.16 L1491.51 1208.16 L1490.93 1208.16 L1490.34 1208.16 L1489.75 1208.16 L1489.17 1208.16 L1488.58 1208.16 L1487.99 1208.16 L1487.41 1208.16 L1486.82 1208.16 L1486.24 1208.16 L1485.65 1208.16 L1485.06 1208.16 L1484.48 1208.16 L1483.89 1208.16 L1483.3 1208.16 L1482.72 1208.16 L1482.13 1208.16 L1481.54 1208.16 L1480.96 1208.16 L1480.37 1208.16 L1479.78 1208.16 L1479.2 1208.16 L1478.61 1208.16 L1478.03 1208.16 L1477.44 1208.16 L1476.85 1208.16 L1476.27 1208.16 L1475.68 1208.16 L1475.09 1208.16 L1474.51 1208.16 L1473.92 1208.16 L1473.33 1208.16 L1472.75 1208.16 L1472.16 1208.16 L1471.57 1208.16 L1470.99 1208.16 L1470.4 1208.16 L1469.82 1208.16 L1469.23 1208.16 L1468.64 1208.16 L1468.06 1208.16 L1467.47 1208.16 L1466.88 1208.16 L1466.3 1208.16 L1465.71 1208.16 L1465.12 1208.16 L1464.54 1208.16 L1463.95 1208.16 L1463.37 1208.16 L1462.78 1208.16 L1462.19 1208.16 L1461.61 1208.16 L1461.02 1208.16 L1460.43 1208.16 L1459.85 1208.16 L1459.26 1208.16 L1458.67 1208.16 L1458.09 1208.16 L1457.5 1208.16 L1456.91 1208.16 L1456.33 1208.16 L1455.74 1208.16 L1455.16 1208.16 L1454.57 1208.16 L1453.98 1208.16 L1453.4 1208.16 L1452.81 1208.16 L1452.22 1208.16 L1451.64 1208.16 L1451.05 1208.16 L1450.46 1208.16 L1449.88 1208.16 L1449.29 1208.16 L1448.7 1208.16 L1448.12 1208.16 L1447.53 1208.16 L1446.95 1208.16 L1446.36 1208.16 L1445.77 1208.16 L1445.19 1208.16 L1444.6 1208.16 L1444.01 1208.16 L1443.43 1208.16 L1442.84 1208.16 L1442.25 1208.16 L1441.67 1208.16 L1441.08 1208.16 L1440.5 1208.16 L1439.91 1208.16 L1439.32 1208.16 L1438.74 1208.16 L1438.15 1208.16 L1437.56 1208.16 L1436.98 1208.16 L1436.39 1208.16 L1435.8 1208.16 L1435.22 1208.16 L1434.63 1208.16 L1434.04 1208.16 L1433.46 1208.16 L1432.87 1208.16 L1432.29 1208.16 L1431.7 1208.16 L1431.11 1208.16 L1430.53 1208.16 L1429.94 1208.16 L1429.35 1208.16 L1428.77 1208.16 L1428.18 1208.16 L1427.59 1208.16 L1427.01 1208.16 L1426.42 1208.16 L1425.83 1208.16 L1425.25 1208.16 L1424.66 1208.16 L1424.08 1208.16 L1423.49 1208.16 L1422.9 1208.16 L1422.32 1208.16 L1421.73 1208.16 L1421.14 1208.16 L1420.56 1208.16 L1419.97 1208.16 L1419.38 1208.16 L1418.8 1208.16 L1418.21 1208.16 L1417.63 1208.16 L1417.04 1208.16 L1416.45 1208.16 L1415.87 1208.16 L1415.28 1208.16 L1414.69 1208.16 L1414.11 1208.16 L1413.52 1208.16 L1412.93 1208.16 L1412.35 1208.16 L1411.76 1208.16 L1411.17 1208.16 L1410.59 1208.16 L1410 1208.16 L1409.42 1208.16 L1408.83 1208.16 L1408.24 1208.16 L1407.66 1208.16 L1407.07 1208.16 L1406.48 1208.16 L1405.9 1208.16 L1405.31 1208.16 L1404.72 1208.16 L1404.14 1208.16 L1403.55 1208.16 L1402.96 1208.16 L1402.38 1208.16 L1401.79 1208.16 L1401.21 1208.16 L1400.62 1208.16 L1400.03 1208.16 L1399.45 1208.16 L1398.86 1208.16 L1398.27 1208.16 L1397.69 1208.16 L1397.1 1208.16 L1396.51 1208.16 L1395.93 1208.16 L1395.34 1208.16 L1394.75 1208.16 L1394.17 1208.16 L1393.58 1208.16 L1393 1208.16 L1392.41 1208.16 L1391.82 1208.16 L1391.24 1208.16 L1390.65 1208.16 L1390.06 1208.16 L1389.48 1208.16 L1388.89 1208.16 L1388.3 1208.16 L1387.72 1208.16 L1387.13 1208.16 L1386.55 1208.16 L1385.96 1208.16 L1385.37 1208.16 L1384.79 1208.16 L1384.2 1208.16 L1383.61 1208.16 L1383.03 1208.16 L1382.44 1208.16 L1381.85 1208.16 L1381.27 1208.16 L1380.68 1208.16 L1380.09 1208.16 L1379.51 1208.16 L1378.92 1208.16 L1378.34 1208.16 L1377.75 1208.16 L1377.16 1208.16 L1376.58 1208.16 L1375.99 1208.16 L1375.4 1208.16 L1374.82 1208.16 L1374.23 1208.16 L1373.64 1208.16 L1373.06 1208.16 L1372.47 1208.16 L1371.88 1208.16 L1371.3 1208.16 L1370.71 1208.16 L1370.13 1208.16 L1369.54 1208.16 L1368.95 1208.16 L1368.37 1208.16 L1367.78 1208.16 L1367.19 1208.16 L1366.61 1208.16 L1366.02 1208.16 L1365.43 1208.16 L1364.85 1208.16 L1364.26 1208.16 L1363.68 1208.16 L1363.09 1208.16 L1362.5 1208.16 L1361.92 1208.16 L1361.33 1208.16 L1360.74 1208.16 L1360.16 1208.16 L1359.57 1208.16 L1358.98 1208.16 L1358.4 1208.16 L1357.81 1208.16 L1357.22 1208.16 L1356.64 1208.16 L1356.05 1208.16 L1355.47 1208.16 L1354.88 1208.16 L1354.29 1208.16 L1353.71 1208.16 L1353.12 1208.16 L1352.53 1208.16 L1351.95 1208.16 L1351.36 1208.16 L1350.77 1208.16 L1350.19 1208.16 L1349.6 1208.16 L1349.01 1208.16 L1348.43 1208.16 L1347.84 1208.16 L1347.26 1208.16 L1346.67 1208.16 L1346.08 1208.16 L1345.5 1208.16 L1344.91 1208.16 L1344.32 1208.16 L1343.74 1208.16 L1343.15 1208.16 L1342.56 1208.16 L1341.98 1208.16 L1341.39 1208.16 L1340.8 1208.16 L1340.22 1208.16 L1339.63 1208.16 L1339.05 1208.16 L1338.46 1208.16 L1337.87 1208.16 L1337.29 1208.16 L1336.7 1208.16 L1336.11 1208.16 L1335.53 1208.16 L1334.94 1208.16 L1334.35 1208.16 L1333.77 1208.16 L1333.18 1208.16 L1332.6 1208.16 L1332.01 1208.16 L1331.42 1208.16 L1330.84 1208.16 L1330.25 1208.16 L1329.66 1208.16 L1329.08 1208.16 L1328.49 1208.16 L1327.9 1208.16 L1327.32 1208.16 L1326.73 1208.16 L1326.14 1208.16 L1325.56 1208.16 L1324.97 1208.16 L1324.39 1208.16 L1323.8 1208.16 L1323.21 1208.16 L1322.63 1208.16 L1322.04 1208.16 L1321.45 1208.16 L1320.87 1208.16 L1320.28 1208.16 L1319.69 1208.16 L1319.11 1208.16 L1318.52 1208.16 L1317.93 1208.16 L1317.35 1208.16 L1316.76 1208.16 L1316.18 1208.16 L1315.59 1208.16 L1315 1208.16 L1314.42 1208.16 L1313.83 1208.16 L1313.24 1208.16 L1312.66 1208.16 L1312.07 1208.16 L1311.48 1208.16 L1310.9 1208.16 L1310.31 1208.16 L1309.73 1208.16 L1309.14 1208.16 L1308.55 1208.16 L1307.97 1208.16 L1307.38 1208.16 L1306.79 1208.16 L1306.21 1208.16 L1305.62 1208.16 L1305.03 1208.16 L1304.45 1208.16 L1303.86 1208.16 L1303.27 1208.16 L1302.69 1208.16 L1302.1 1208.16 L1301.52 1208.16 L1300.93 1208.16 L1300.34 1208.16 L1299.76 1208.16 L1299.17 1208.16 L1298.58 1208.16 L1298 1208.16 L1297.41 1208.16 L1296.82 1208.16 L1296.24 1208.16 L1295.65 1208.16 L1295.06 1208.16 L1294.48 1208.16 L1293.89 1208.16 L1293.31 1208.16 L1292.72 1208.16 L1292.13 1208.16 L1291.55 1208.16 L1290.96 1208.16 L1290.37 1208.16 L1289.79 1208.16 L1289.2 1208.16 L1288.61 1208.16 L1288.03 1208.16 L1287.44 1208.16 L1286.86 1208.16 L1286.27 1208.16 L1285.68 1208.16 L1285.1 1208.16 L1284.51 1208.16 L1283.92 1208.16 L1283.34 1208.16 L1282.75 1208.16 L1282.16 1208.16 L1281.58 1208.16 L1280.99 1208.16 L1280.4 1208.16 L1279.82 1208.16 L1279.23 1208.16 L1278.65 1208.16 L1278.06 1208.16 L1277.47 1208.16 L1276.89 1208.16 L1276.3 1208.16 L1275.71 1208.16 L1275.13 1208.16 L1274.54 1208.16 L1273.95 1208.16 L1273.37 1208.16 L1272.78 1208.16 L1272.19 1208.16 L1271.61 1208.16 L1271.02 1208.16 L1270.44 1208.16 L1269.85 1208.16 L1269.26 1208.16 L1268.68 1208.16 L1268.09 1208.16 L1267.5 1208.16 L1266.92 1208.16 L1266.33 1208.16 L1265.74 1208.16 L1265.16 1208.16 L1264.57 1208.16 L1263.98 1208.16 L1263.4 1208.16 L1262.81 1208.16 L1262.23 1208.16 L1261.64 1208.16 L1261.05 1208.16 L1260.47 1208.16 L1259.88 1208.16 L1259.29 1208.16 L1258.71 1208.16 L1258.12 1208.16 L1257.53 1208.16 L1256.95 1208.16 L1256.36 1208.16 L1255.78 1208.16 L1255.19 1208.16 L1254.6 1208.16 L1254.02 1208.16 L1253.43 1208.16 L1252.84 1208.16 L1252.26 1208.16 L1251.67 1208.16 L1251.08 1208.16 L1250.5 1208.16 L1249.91 1208.16 L1249.32 1208.16 L1248.74 1208.16 L1248.15 1208.16 L1247.57 1208.16 L1246.98 1208.16 L1246.39 1208.16 L1245.81 1208.16 L1245.22 1208.16 L1244.63 1208.16 L1244.05 1208.16 L1243.46 1208.16 L1242.87 1208.16 L1242.29 1208.16 L1241.7 1208.16 L1241.11 1208.16 L1240.53 1208.16 L1239.94 1208.16 L1239.36 1208.16 L1238.77 1208.16 L1238.18 1208.16 L1237.6 1208.16 L1237.01 1208.16 L1236.42 1208.16 L1235.84 1208.16 L1235.25 1208.16 L1234.66 1208.16 L1234.08 1208.16 L1233.49 1208.16 L1232.91 1208.16 L1232.32 1208.16 L1231.73 1208.16 L1231.15 1208.16 L1230.56 1208.16 L1229.97 1208.16 L1229.39 1208.16 L1228.8 1208.16 L1228.21 1208.16 L1227.63 1208.16 L1227.04 1208.16 L1226.45 1208.16 L1225.87 1208.16 L1225.28 1208.16 L1224.7 1208.16 L1224.11 1208.16 L1223.52 1208.16 L1222.94 1208.16 L1222.35 1208.16 L1221.76 1208.16 L1221.18 1208.16 L1220.59 1208.16 L1220 1208.16 L1219.42 1208.16 L1218.83 1208.16 L1218.24 1208.16 L1217.66 1208.16 L1217.07 1208.16 L1216.49 1208.16 L1215.9 1208.16 L1215.31 1208.16 L1214.73 1208.16 L1214.14 1208.16 L1213.55 1208.16 L1212.97 1208.16 L1212.38 1208.16 L1211.79 1208.16 L1211.21 1208.16 L1210.62 1208.16 L1210.03 1208.16 L1209.45 1208.16 L1208.86 1208.16 L1208.28 1208.16 L1207.69 1208.16 L1207.1 1208.16 L1206.52 1208.16 L1205.93 1208.16 L1205.34 1208.16 L1204.76 1208.16 L1204.17 1208.16 L1203.58 1208.16 L1203 1208.16 L1202.41 1208.16 L1201.83 1208.16 L1201.24 1208.16 L1200.65 1208.16 L1200.07 1208.16 L1199.48 1208.16 L1198.89 1208.16 L1198.31 1208.16 L1197.72 1208.16 L1197.13 1208.16 L1196.55 1208.16 L1195.96 1208.16 L1195.37 1208.16 L1194.79 1208.16 L1194.2 1208.16 L1193.62 1208.16 L1193.03 1208.16 L1192.44 1208.16 L1191.86 1208.16 L1191.27 1208.16 L1190.68 1208.16 L1190.1 1208.16 L1189.51 1208.16 L1188.92 1208.16 L1188.34 1208.16 L1187.75 1208.16 L1187.16 1208.16 L1186.58 1208.16 L1185.99 1208.16 L1185.41 1208.16 L1184.82 1208.16 L1184.23 1208.16 L1183.65 1208.16 L1183.06 1208.16 L1182.47 1208.16 L1181.89 1208.16 L1181.3 1208.16 L1180.71 1208.16 L1180.13 1208.16 L1179.54 1208.16 L1178.96 1208.16 L1178.37 1208.16 L1177.78 1208.16 L1177.2 1208.16 L1176.61 1208.16 L1176.02 1208.16 L1175.44 1208.16 L1174.85 1208.16 L1174.26 1208.16 L1173.68 1208.16 L1173.09 1208.16 L1172.5 1208.16 L1171.92 1208.16 L1171.33 1208.16 L1170.75 1208.16 L1170.16 1208.16 L1169.57 1208.16 L1168.99 1208.16 L1168.4 1208.16 L1167.81 1208.16 L1167.23 1208.16 L1166.64 1208.16 L1166.05 1208.16 L1165.47 1208.16 L1164.88 1208.16 L1164.29 1208.16 L1163.71 1208.16 L1163.12 1208.16 L1162.54 1208.16 L1161.95 1208.16 L1161.36 1208.16 L1160.78 1208.16 L1160.19 1208.16 L1159.6 1208.16 L1159.02 1208.16 L1158.43 1208.16 L1157.84 1208.16 L1157.26 1208.16 L1156.67 1208.16 L1156.09 1208.16 L1155.5 1208.16 L1154.91 1208.16 L1154.33 1208.16 L1153.74 1208.16 L1153.15 1208.16 L1152.57 1208.16 L1151.98 1208.16 L1151.39 1208.16 L1150.81 1208.16 L1150.22 1208.16 L1149.63 1208.16 L1149.05 1208.16 L1148.46 1208.16 L1147.88 1208.16 L1147.29 1208.16 L1146.7 1208.16 L1146.12 1208.16 L1145.53 1208.16 L1144.94 1208.16 L1144.36 1208.16 L1143.77 1208.16 L1143.18 1208.16 L1142.6 1208.16 L1142.01 1208.16 L1141.42 1208.16 L1140.84 1208.16 L1140.25 1208.16 L1139.67 1208.16 L1139.08 1208.16 L1138.49 1208.16 L1137.91 1208.16 L1137.32 1208.16 L1136.73 1208.16 L1136.15 1208.16 L1135.56 1208.16 L1134.97 1208.16 L1134.39 1208.16 L1133.8 1208.16 L1133.21 1208.16 L1132.63 1208.16 L1132.04 1208.16 L1131.46 1208.16 L1130.87 1208.16 L1130.28 1208.16 L1129.7 1208.16 L1129.11 1208.16 L1128.52 1208.16 L1127.94 1208.16 L1127.35 1208.16 L1126.76 1208.16 L1126.18 1208.16 L1125.59 1208.16 L1125.01 1208.16 L1124.42 1208.16 L1123.83 1208.16 L1123.25 1208.16 L1122.66 1208.16 L1122.07 1208.16 L1121.49 1208.16 L1120.9 1208.16 L1120.31 1208.16 L1119.73 1208.16 L1119.14 1208.16 L1118.55 1208.16 L1117.97 1208.16 L1117.38 1208.16 L1116.8 1208.16 L1116.21 1208.16 L1115.62 1208.16 L1115.04 1208.16 L1114.45 1208.16 L1113.86 1208.16 L1113.28 1208.16 L1112.69 1208.16 L1112.1 1208.16 L1111.52 1208.16 L1110.93 1208.16 L1110.34 1208.16 L1109.76 1208.16 L1109.17 1208.16 L1108.59 1208.16 L1108 1208.16 L1107.41 1208.16 L1106.83 1208.16 L1106.24 1208.16 L1105.65 1208.16 L1105.07 1208.16 L1104.48 1208.16 L1103.89 1208.16 L1103.31 1208.16 L1102.72 1208.16 L1102.14 1208.16 L1101.55 1208.16 L1100.96 1208.16 L1100.38 1208.16 L1099.79 1208.16 L1099.2 1208.16 L1098.62 1208.16 L1098.03 1208.16 L1097.44 1208.16 L1096.86 1208.16 L1096.27 1208.16 L1095.68 1208.16 L1095.1 1208.16 L1094.51 1208.16 L1093.93 1208.16 L1093.34 1208.16 L1092.75 1208.16 L1092.17 1208.16 L1091.58 1208.16 L1090.99 1208.16 L1090.41 1208.16 L1089.82 1208.16 L1089.23 1208.16 L1088.65 1208.16 L1088.06 1208.16 L1087.47 1208.16 L1086.89 1208.16 L1086.3 1208.16 L1085.72 1208.16 L1085.13 1208.16 L1084.54 1208.16 L1083.96 1208.16 L1083.37 1208.16 L1082.78 1208.16 L1082.2 1208.16 L1081.61 1208.16 L1081.02 1208.16 L1080.44 1208.16 L1079.85 1208.16 L1079.26 1208.16 L1078.68 1208.16 L1078.09 1208.16 L1077.51 1208.16 L1076.92 1208.16 L1076.33 1208.16 L1075.75 1208.16 L1075.16 1208.16 L1074.57 1208.16 L1073.99 1208.16 L1073.4 1208.16 L1072.81 1208.16 L1072.23 1208.16 L1071.64 1208.16 L1071.06 1208.16 L1070.47 1208.16 L1069.88 1208.16 L1069.3 1208.16 L1068.71 1208.16 L1068.12 1208.16 L1067.54 1208.16 L1066.95 1208.16 L1066.36 1208.16 L1065.78 1208.16 L1065.19 1208.16 L1064.6 1208.16 L1064.02 1208.16 L1063.43 1208.16 L1062.85 1208.16 L1062.26 1208.16 L1061.67 1208.16 L1061.09 1208.16 L1060.5 1208.16 L1059.91 1208.16 L1059.33 1208.16 L1058.74 1208.16 L1058.15 1208.16 L1057.57 1208.16 L1056.98 1208.16 L1056.39 1208.16 L1055.81 1208.16 L1055.22 1208.16 L1054.64 1208.16 L1054.05 1208.16 L1053.46 1208.16 L1052.88 1208.16 L1052.29 1208.16 L1051.7 1208.16 L1051.12 1208.16 L1050.53 1208.16 L1049.94 1208.16 L1049.36 1208.16 L1048.77 1208.16 L1048.19 1208.16 L1047.6 1208.16 L1047.01 1208.16 L1046.43 1208.16 L1045.84 1208.16 L1045.25 1208.16 L1044.67 1208.16 L1044.08 1208.16 L1043.49 1208.16 L1042.91 1208.16 L1042.32 1208.16 L1041.73 1208.16 L1041.15 1208.16 L1040.56 1208.16 L1039.98 1208.16 L1039.39 1208.16 L1038.8 1208.16 L1038.22 1208.16 L1037.63 1208.16 L1037.04 1208.16 L1036.46 1208.16 L1035.87 1208.16 L1035.28 1208.16 L1034.7 1208.16 L1034.11 1208.16 L1033.52 1208.16 L1032.94 1208.16 L1032.35 1208.16 L1031.77 1208.16 L1031.18 1208.16 L1030.59 1208.16 L1030.01 1208.16 L1029.42 1208.16 L1028.83 1208.16 L1028.25 1208.16 L1027.66 1208.16 L1027.07 1208.16 L1026.49 1208.16 L1025.9 1208.16 L1025.32 1208.16 L1024.73 1208.16 L1024.14 1208.16 L1023.56 1208.16 L1022.97 1208.16 L1022.38 1208.16 L1021.8 1208.16 L1021.21 1208.16 L1020.62 1208.16 L1020.04 1208.16 L1019.45 1208.16 L1018.86 1208.16 L1018.28 1208.16 L1017.69 1208.16 L1017.11 1208.16 L1016.52 1208.16 L1015.93 1208.16 L1015.35 1208.16 L1014.76 1208.16 L1014.17 1208.16 L1013.59 1208.16 L1013 1208.16 L1012.41 1208.16 L1011.83 1208.16 L1011.24 1208.16 L1010.65 1208.16 L1010.07 1208.16 L1009.48 1208.16 L1008.9 1208.16 L1008.31 1208.16 L1007.72 1208.16 L1007.14 1208.16 L1006.55 1208.16 L1005.96 1208.16 L1005.38 1208.16 L1004.79 1208.16 L1004.2 1208.16 L1003.62 1208.16 L1003.03 1208.16 L1002.44 1208.16 L1001.86 1208.16 L1001.27 1208.16 L1000.69 1208.16 L1000.1 1208.16 L999.513 1208.16 L998.926 1208.16 L998.34 1208.16 L997.754 1208.16 L997.167 1208.16 L996.581 1208.16 L995.994 1208.16 L995.408 1208.16 L994.822 1208.16 L994.235 1208.16 L993.649 1208.16 L993.062 1208.16 L992.476 1208.16 L991.889 1208.16 L991.303 1208.16 L990.717 1208.16 L990.13 1208.16 L989.544 1208.16 L988.957 1208.16 L988.371 1208.16 L987.785 1208.16 L987.198 1208.16 L986.612 1208.16 L986.025 1208.16  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip562)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1208.24 986.612,1208.24 987.198,1208.24 987.785,1208.24 988.371,1208.24 988.957,1208.24 989.544,1208.24 990.13,1208.24 990.717,1208.24 991.303,1208.24 991.889,1208.24 992.476,1208.24 993.062,1208.24 993.649,1208.24 994.235,1208.24 994.822,1208.24 995.408,1208.24 995.994,1208.24 996.581,1208.24 997.167,1208.24 997.754,1208.24 998.34,1208.24 998.926,1208.24 999.513,1208.24 1000.1,1208.24 1000.69,1208.24 1001.27,1208.24 1001.86,1208.24 1002.44,1208.24 1003.03,1208.24 1003.62,1208.24 1004.2,1208.24 1004.79,1208.24 1005.38,1208.24 1005.96,1208.24 1006.55,1208.24 1007.14,1208.24 1007.72,1208.24 1008.31,1208.24 1008.9,1208.24 1009.48,1208.24 1010.07,1208.24 1010.65,1208.24 1011.24,1208.24 1011.83,1208.24 1012.41,1208.24 1013,1208.24 1013.59,1208.24 1014.17,1208.24 1014.76,1208.24 1015.35,1208.24 1015.93,1208.24 1016.52,1208.24 1017.11,1208.24 1017.69,1208.24 1018.28,1208.24 1018.86,1208.24 1019.45,1208.24 1020.04,1208.24 1020.62,1208.24 1021.21,1208.24 1021.8,1208.24 1022.38,1208.24 1022.97,1208.24 1023.56,1208.24 1024.14,1208.24 1024.73,1208.24 1025.32,1208.24 1025.9,1208.24 1026.49,1208.24 1027.07,1208.24 1027.66,1208.24 1028.25,1208.24 1028.83,1208.24 1029.42,1208.24 1030.01,1208.24 1030.59,1208.24 1031.18,1208.24 1031.77,1208.24 1032.35,1208.24 1032.94,1208.24 1033.52,1208.24 1034.11,1208.24 1034.7,1208.24 1035.28,1208.24 1035.87,1208.24 1036.46,1208.24 1037.04,1208.24 1037.63,1208.24 1038.22,1208.24 1038.8,1208.24 1039.39,1208.24 1039.98,1208.24 1040.56,1208.24 1041.15,1208.24 1041.73,1208.24 1042.32,1208.24 1042.91,1208.24 1043.49,1208.24 1044.08,1208.24 1044.67,1208.24 1045.25,1208.24 1045.84,1208.24 1046.43,1208.24 1047.01,1208.24 1047.6,1208.24 1048.19,1208.24 1048.77,1208.24 1049.36,1208.24 1049.94,1208.24 1050.53,1208.24 1051.12,1208.24 1051.7,1208.24 1052.29,1208.24 1052.88,1208.24 1053.46,1208.24 1054.05,1208.24 1054.64,1208.24 1055.22,1208.24 1055.81,1208.24 1056.39,1208.24 1056.98,1208.24 1057.57,1208.24 1058.15,1208.24 1058.74,1208.24 1059.33,1208.24 1059.91,1208.24 1060.5,1208.24 1061.09,1208.24 1061.67,1208.24 1062.26,1208.24 1062.85,1208.24 1063.43,1208.24 1064.02,1208.24 1064.6,1208.24 1065.19,1208.24 1065.78,1208.24 1066.36,1208.24 1066.95,1208.24 1067.54,1208.24 1068.12,1208.24 1068.71,1208.24 1069.3,1208.24 1069.88,1208.24 1070.47,1208.24 1071.06,1208.24 1071.64,1208.24 1072.23,1208.24 1072.81,1208.24 1073.4,1208.24 1073.99,1208.24 1074.57,1208.24 1075.16,1208.24 1075.75,1208.24 1076.33,1208.24 1076.92,1208.24 1077.51,1208.24 1078.09,1208.24 1078.68,1208.24 1079.26,1208.24 1079.85,1208.24 1080.44,1208.24 1081.02,1208.24 1081.61,1208.24 1082.2,1208.24 1082.78,1208.24 1083.37,1208.24 1083.96,1208.24 1084.54,1208.24 1085.13,1208.24 1085.72,1208.24 1086.3,1208.24 1086.89,1208.24 1087.47,1208.24 1088.06,1208.24 1088.65,1208.24 1089.23,1208.24 1089.82,1208.24 1090.41,1208.24 1090.99,1208.24 1091.58,1208.24 1092.17,1208.24 1092.75,1208.24 1093.34,1208.24 1093.93,1208.24 1094.51,1208.24 1095.1,1208.24 1095.68,1208.24 1096.27,1208.24 1096.86,1208.24 1097.44,1208.24 1098.03,1208.24 1098.62,1208.24 1099.2,1208.24 1099.79,1208.24 1100.38,1208.24 1100.96,1208.24 1101.55,1208.24 1102.14,1208.24 1102.72,1208.24 1103.31,1208.24 1103.89,1208.24 1104.48,1208.24 1105.07,1208.24 1105.65,1208.24 1106.24,1208.24 1106.83,1208.24 1107.41,1208.24 1108,1208.24 1108.59,1208.24 1109.17,1208.24 1109.76,1208.24 1110.34,1208.24 1110.93,1208.24 1111.52,1208.24 1112.1,1208.24 1112.69,1208.24 1113.28,1208.24 1113.86,1208.24 1114.45,1208.24 1115.04,1208.24 1115.62,1208.24 1116.21,1208.24 1116.8,1208.24 1117.38,1208.24 1117.97,1208.24 1118.55,1208.24 1119.14,1208.24 1119.73,1208.24 1120.31,1208.24 1120.9,1208.24 1121.49,1208.24 1122.07,1208.24 1122.66,1208.24 1123.25,1208.24 1123.83,1208.24 1124.42,1208.24 1125.01,1208.24 1125.59,1208.24 1126.18,1208.24 1126.76,1208.24 1127.35,1208.24 1127.94,1208.24 1128.52,1208.24 1129.11,1208.24 1129.7,1208.24 1130.28,1208.24 1130.87,1208.24 1131.46,1208.24 1132.04,1208.24 1132.63,1208.24 1133.21,1208.24 1133.8,1208.24 1134.39,1208.24 1134.97,1208.24 1135.56,1208.24 1136.15,1208.24 1136.73,1208.24 1137.32,1208.24 1137.91,1208.24 1138.49,1208.24 1139.08,1208.24 1139.67,1208.24 1140.25,1208.24 1140.84,1208.24 1141.42,1208.24 1142.01,1208.24 1142.6,1208.24 1143.18,1208.24 1143.77,1208.24 1144.36,1208.24 1144.94,1208.24 1145.53,1208.24 1146.12,1208.24 1146.7,1208.24 1147.29,1208.24 1147.88,1208.24 1148.46,1208.24 1149.05,1208.24 1149.63,1208.24 1150.22,1208.24 1150.81,1208.24 1151.39,1208.24 1151.98,1208.24 1152.57,1208.24 1153.15,1208.24 1153.74,1208.24 1154.33,1208.24 1154.91,1208.24 1155.5,1208.24 1156.09,1208.24 1156.67,1208.24 1157.26,1208.24 1157.84,1208.24 1158.43,1208.24 1159.02,1208.24 1159.6,1208.24 1160.19,1208.24 1160.78,1208.24 1161.36,1208.24 1161.95,1208.24 1162.54,1208.24 1163.12,1208.24 1163.71,1208.24 1164.29,1208.24 1164.88,1208.24 1165.47,1208.24 1166.05,1208.24 1166.64,1208.24 1167.23,1208.24 1167.81,1208.24 1168.4,1208.24 1168.99,1208.24 1169.57,1208.24 1170.16,1208.24 1170.75,1208.24 1171.33,1208.24 1171.92,1208.24 1172.5,1208.24 1173.09,1208.24 1173.68,1208.24 1174.26,1208.24 1174.85,1208.24 1175.44,1208.24 1176.02,1208.24 1176.61,1208.24 1177.2,1208.24 1177.78,1208.24 1178.37,1208.24 1178.96,1208.24 1179.54,1208.24 1180.13,1208.24 1180.71,1208.24 1181.3,1208.24 1181.89,1208.24 1182.47,1208.24 1183.06,1208.24 1183.65,1208.24 1184.23,1208.24 1184.82,1208.24 1185.41,1208.24 1185.99,1208.24 1186.58,1208.24 1187.16,1208.24 1187.75,1208.24 1188.34,1208.24 1188.92,1208.24 1189.51,1208.24 1190.1,1208.24 1190.68,1208.24 1191.27,1208.24 1191.86,1208.24 1192.44,1208.24 1193.03,1208.24 1193.62,1208.24 1194.2,1208.24 1194.79,1208.24 1195.37,1208.24 1195.96,1208.24 1196.55,1208.24 1197.13,1208.24 1197.72,1208.24 1198.31,1208.24 1198.89,1208.24 1199.48,1208.24 1200.07,1208.24 1200.65,1208.24 1201.24,1208.24 1201.83,1208.24 1202.41,1208.24 1203,1208.24 1203.58,1208.24 1204.17,1208.24 1204.76,1208.24 1205.34,1208.24 1205.93,1208.24 1206.52,1208.24 1207.1,1208.24 1207.69,1208.24 1208.28,1208.24 1208.86,1208.24 1209.45,1208.24 1210.03,1208.24 1210.62,1208.24 1211.21,1208.24 1211.79,1208.24 1212.38,1208.24 1212.97,1208.24 1213.55,1208.24 1214.14,1208.24 1214.73,1208.24 1215.31,1208.24 1215.9,1208.24 1216.49,1208.24 1217.07,1208.24 1217.66,1208.24 1218.24,1208.24 1218.83,1208.24 1219.42,1208.24 1220,1208.24 1220.59,1208.24 1221.18,1208.24 1221.76,1208.24 1222.35,1208.24 1222.94,1208.24 1223.52,1208.24 1224.11,1208.24 1224.7,1208.24 1225.28,1208.24 1225.87,1208.24 1226.45,1208.24 1227.04,1208.24 1227.63,1208.24 1228.21,1208.24 1228.8,1208.24 1229.39,1208.24 1229.97,1208.24 1230.56,1208.24 1231.15,1208.24 1231.73,1208.24 1232.32,1208.24 1232.91,1208.24 1233.49,1208.24 1234.08,1208.24 1234.66,1208.24 1235.25,1208.24 1235.84,1208.24 1236.42,1208.24 1237.01,1208.24 1237.6,1208.24 1238.18,1208.24 1238.77,1208.24 1239.36,1208.24 1239.94,1208.24 1240.53,1208.24 1241.11,1208.24 1241.7,1208.24 1242.29,1208.24 1242.87,1208.24 1243.46,1208.24 1244.05,1208.24 1244.63,1208.24 1245.22,1208.24 1245.81,1208.24 1246.39,1208.24 1246.98,1208.24 1247.57,1208.24 1248.15,1208.24 1248.74,1208.24 1249.32,1208.24 1249.91,1208.24 1250.5,1208.24 1251.08,1208.24 1251.67,1208.24 1252.26,1208.24 1252.84,1208.24 1253.43,1208.24 1254.02,1208.24 1254.6,1208.24 1255.19,1208.24 1255.78,1208.24 1256.36,1208.24 1256.95,1208.24 1257.53,1208.24 1258.12,1208.24 1258.71,1208.24 1259.29,1208.24 1259.88,1208.24 1260.47,1208.24 1261.05,1208.24 1261.64,1208.24 1262.23,1208.24 1262.81,1208.24 1263.4,1208.24 1263.98,1208.24 1264.57,1208.24 1265.16,1208.24 1265.74,1208.24 1266.33,1208.24 1266.92,1208.24 1267.5,1208.24 1268.09,1208.24 1268.68,1208.24 1269.26,1208.24 1269.85,1208.24 1270.44,1208.24 1271.02,1208.24 1271.61,1208.24 1272.19,1208.24 1272.78,1208.24 1273.37,1208.24 1273.95,1208.24 1274.54,1208.24 1275.13,1208.24 1275.71,1208.24 1276.3,1208.24 1276.89,1208.24 1277.47,1208.24 1278.06,1208.24 1278.65,1208.24 1279.23,1208.24 1279.82,1208.24 1280.4,1208.24 1280.99,1208.24 1281.58,1208.24 1282.16,1208.24 1282.75,1208.24 1283.34,1208.24 1283.92,1208.24 1284.51,1208.24 1285.1,1208.24 1285.68,1208.24 1286.27,1208.24 1286.86,1208.24 1287.44,1208.24 1288.03,1208.24 1288.61,1208.24 1289.2,1208.24 1289.79,1208.24 1290.37,1208.24 1290.96,1208.24 1291.55,1208.24 1292.13,1208.24 1292.72,1208.24 1293.31,1208.24 1293.89,1208.24 1294.48,1208.24 1295.06,1208.24 1295.65,1208.24 1296.24,1208.24 1296.82,1208.24 1297.41,1208.24 1298,1208.24 1298.58,1208.24 1299.17,1208.24 1299.76,1208.24 1300.34,1208.24 1300.93,1208.24 1301.52,1208.24 1302.1,1208.24 1302.69,1208.24 1303.27,1208.24 1303.86,1208.24 1304.45,1208.24 1305.03,1208.24 1305.62,1208.24 1306.21,1208.24 1306.79,1208.24 1307.38,1208.24 1307.97,1208.24 1308.55,1208.24 1309.14,1208.24 1309.73,1208.24 1310.31,1208.24 1310.9,1208.24 1311.48,1208.24 1312.07,1208.24 1312.66,1208.24 1313.24,1208.24 1313.83,1208.24 1314.42,1208.24 1315,1208.24 1315.59,1208.24 1316.18,1208.24 1316.76,1208.24 1317.35,1208.24 1317.93,1208.24 1318.52,1208.24 1319.11,1208.24 1319.69,1208.24 1320.28,1208.24 1320.87,1208.24 1321.45,1208.24 1322.04,1208.24 1322.63,1208.24 1323.21,1208.24 1323.8,1208.24 1324.39,1208.24 1324.97,1208.24 1325.56,1208.24 1326.14,1208.24 1326.73,1208.24 1327.32,1208.24 1327.9,1208.24 1328.49,1208.24 1329.08,1208.24 1329.66,1208.24 1330.25,1208.24 1330.84,1208.24 1331.42,1208.24 1332.01,1208.24 1332.6,1208.24 1333.18,1208.24 1333.77,1208.24 1334.35,1208.24 1334.94,1208.24 1335.53,1208.24 1336.11,1208.24 1336.7,1208.24 1337.29,1208.24 1337.87,1208.24 1338.46,1208.24 1339.05,1208.24 1339.63,1208.24 1340.22,1208.24 1340.8,1208.24 1341.39,1208.24 1341.98,1208.24 1342.56,1208.24 1343.15,1208.24 1343.74,1208.24 1344.32,1208.24 1344.91,1208.24 1345.5,1208.24 1346.08,1208.24 1346.67,1208.24 1347.26,1208.24 1347.84,1208.24 1348.43,1208.24 1349.01,1208.24 1349.6,1208.24 1350.19,1208.24 1350.77,1208.24 1351.36,1208.24 1351.95,1208.24 1352.53,1208.24 1353.12,1208.24 1353.71,1208.24 1354.29,1208.24 1354.88,1208.24 1355.47,1208.24 1356.05,1208.24 1356.64,1208.24 1357.22,1208.24 1357.81,1208.24 1358.4,1208.24 1358.98,1208.24 1359.57,1208.24 1360.16,1208.24 1360.74,1208.24 1361.33,1208.24 1361.92,1208.24 1362.5,1208.24 1363.09,1208.24 1363.68,1208.24 1364.26,1208.24 1364.85,1208.24 1365.43,1208.24 1366.02,1208.24 1366.61,1208.24 1367.19,1208.24 1367.78,1208.24 1368.37,1208.24 1368.95,1208.24 1369.54,1208.24 1370.13,1208.24 1370.71,1208.24 1371.3,1208.24 1371.88,1208.24 1372.47,1208.24 1373.06,1208.24 1373.64,1208.24 1374.23,1208.24 1374.82,1208.24 1375.4,1208.24 1375.99,1208.24 1376.58,1208.24 1377.16,1208.24 1377.75,1208.24 1378.34,1208.24 1378.92,1208.24 1379.51,1208.24 1380.09,1208.24 1380.68,1208.24 1381.27,1208.24 1381.85,1208.24 1382.44,1208.24 1383.03,1208.24 1383.61,1208.24 1384.2,1208.24 1384.79,1208.24 1385.37,1208.24 1385.96,1208.24 1386.55,1208.24 1387.13,1208.24 1387.72,1208.24 1388.3,1208.24 1388.89,1208.24 1389.48,1208.24 1390.06,1208.24 1390.65,1208.24 1391.24,1208.24 1391.82,1208.24 1392.41,1208.24 1393,1208.24 1393.58,1208.24 1394.17,1208.24 1394.75,1208.24 1395.34,1208.24 1395.93,1208.24 1396.51,1208.24 1397.1,1208.24 1397.69,1208.24 1398.27,1208.24 1398.86,1208.24 1399.45,1208.24 1400.03,1208.24 1400.62,1208.24 1401.21,1208.24 1401.79,1208.24 1402.38,1208.24 1402.96,1208.24 1403.55,1208.24 1404.14,1208.24 1404.72,1208.24 1405.31,1208.24 1405.9,1208.24 1406.48,1208.24 1407.07,1208.24 1407.66,1208.24 1408.24,1208.24 1408.83,1208.24 1409.42,1208.24 1410,1208.24 1410.59,1208.24 1411.17,1208.24 1411.76,1208.24 1412.35,1208.24 1412.93,1208.24 1413.52,1208.24 1414.11,1208.24 1414.69,1208.24 1415.28,1208.24 1415.87,1208.24 1416.45,1208.24 1417.04,1208.24 1417.63,1208.24 1418.21,1208.24 1418.8,1208.24 1419.38,1208.24 1419.97,1208.24 1420.56,1208.24 1421.14,1208.24 1421.73,1208.24 1422.32,1208.24 1422.9,1208.24 1423.49,1208.24 1424.08,1208.24 1424.66,1208.24 1425.25,1208.24 1425.83,1208.24 1426.42,1208.24 1427.01,1208.24 1427.59,1208.24 1428.18,1208.24 1428.77,1208.24 1429.35,1208.24 1429.94,1208.24 1430.53,1208.24 1431.11,1208.24 1431.7,1208.24 1432.29,1208.24 1432.87,1208.24 1433.46,1208.24 1434.04,1208.24 1434.63,1208.24 1435.22,1208.24 1435.8,1208.24 1436.39,1208.24 1436.98,1208.24 1437.56,1208.24 1438.15,1208.24 1438.74,1208.24 1439.32,1208.24 1439.91,1208.24 1440.5,1208.24 1441.08,1208.24 1441.67,1208.24 1442.25,1208.24 1442.84,1208.24 1443.43,1208.24 1444.01,1208.24 1444.6,1208.24 1445.19,1208.24 1445.77,1208.24 1446.36,1208.24 1446.95,1208.24 1447.53,1208.24 1448.12,1208.24 1448.7,1208.24 1449.29,1208.24 1449.88,1208.24 1450.46,1208.24 1451.05,1208.24 1451.64,1208.24 1452.22,1208.24 1452.81,1208.24 1453.4,1208.24 1453.98,1208.24 1454.57,1208.24 1455.16,1208.24 1455.74,1208.24 1456.33,1208.24 1456.91,1208.24 1457.5,1208.24 1458.09,1208.24 1458.67,1208.24 1459.26,1208.24 1459.85,1208.24 1460.43,1208.24 1461.02,1208.24 1461.61,1208.24 1462.19,1208.24 1462.78,1208.24 1463.37,1208.24 1463.95,1208.24 1464.54,1208.24 1465.12,1208.24 1465.71,1208.24 1466.3,1208.24 1466.88,1208.24 1467.47,1208.24 1468.06,1208.24 1468.64,1208.24 1469.23,1208.24 1469.82,1208.24 1470.4,1208.24 1470.99,1208.24 1471.57,1208.24 1472.16,1208.24 1472.75,1208.24 1473.33,1208.24 1473.92,1208.24 1474.51,1208.24 1475.09,1208.24 1475.68,1208.24 1476.27,1208.24 1476.85,1208.24 1477.44,1208.24 1478.03,1208.24 1478.61,1208.24 1479.2,1208.24 1479.78,1208.24 1480.37,1208.24 1480.96,1208.24 1481.54,1208.24 1482.13,1208.24 1482.72,1208.24 1483.3,1208.24 1483.89,1208.24 1484.48,1208.24 1485.06,1208.24 1485.65,1208.24 1486.24,1208.24 1486.82,1208.24 1487.41,1208.24 1487.99,1208.24 1488.58,1208.24 1489.17,1208.24 1489.75,1208.24 1490.34,1208.24 1490.93,1208.24 1491.51,1208.24 1492.1,1208.24 1492.69,1208.24 1493.27,1208.24 1493.86,1208.24 1494.45,1208.24 1495.03,1208.24 1495.62,1208.24 1496.2,1208.24 1496.79,1208.24 1497.38,1208.24 1497.96,1208.24 1498.55,1208.24 1499.14,1208.24 1499.72,1208.24 1500.31,1208.24 1500.9,1208.24 1501.48,1208.24 1502.07,1208.24 1502.65,1208.24 1503.24,1208.24 1503.83,1208.24 1504.41,1208.24 1505,1208.24 1505.59,1208.24 1506.17,1208.24 1506.76,1208.24 1507.35,1208.24 1507.93,1208.24 1508.52,1208.24 1509.11,1208.24 1509.69,1208.24 1510.28,1208.24 1510.86,1208.24 1511.45,1208.24 1512.04,1208.24 1512.62,1208.24 1513.21,1208.24 1513.8,1208.24 1514.38,1208.24 1514.97,1208.24 1515.56,1208.24 1516.14,1208.24 1516.73,1208.24 1517.32,1208.24 1517.9,1208.24 1518.49,1208.24 1519.07,1208.24 1519.66,1208.24 1520.25,1208.24 1520.83,1208.24 1521.42,1208.24 1522.01,1208.24 1522.59,1208.24 1523.18,1208.24 1523.77,1208.24 1524.35,1208.24 1524.94,1208.24 1525.52,1208.24 1526.11,1208.24 1526.7,1208.24 1527.28,1208.24 1527.87,1208.24 1528.46,1208.24 1529.04,1208.24 1529.63,1208.24 1530.22,1208.24 1530.8,1208.24 1531.39,1208.24 1531.98,1208.24 1532.56,1208.24 1533.15,1208.24 1533.73,1208.24 1534.32,1208.24 1534.91,1208.24 1535.49,1208.24 1536.08,1208.24 1536.67,1208.24 1537.25,1208.24 1537.84,1208.24 1538.43,1208.24 1539.01,1208.24 1539.6,1208.24 1540.19,1208.24 1540.77,1208.24 1541.36,1208.24 1541.94,1208.24 1542.53,1208.24 1543.12,1208.24 1543.7,1208.24 1544.29,1208.24 1544.88,1208.24 1545.46,1208.24 1546.05,1208.24 1546.64,1208.24 1547.22,1208.24 1547.81,1208.24 1548.4,1208.24 1548.98,1208.24 1549.57,1208.24 1550.15,1208.24 1550.74,1208.24 1551.33,1208.24 1551.91,1208.24 1552.5,1208.24 1553.09,1208.24 1553.67,1208.24 1554.26,1208.24 1554.85,1208.24 1555.43,1208.24 1556.02,1208.24 1556.6,1208.24 1557.19,1208.24 1557.78,1208.24 1558.36,1208.24 1558.95,1208.24 1559.54,1208.24 1560.12,1208.24 1560.71,1208.24 1561.3,1208.24 1561.88,1208.24 1562.47,1208.24 1563.06,1208.24 1563.64,1208.24 1564.23,1208.24 1564.81,1208.24 1565.4,1208.24 1565.99,1208.24 1566.57,1208.24 1567.16,1208.24 1567.75,1208.24 1568.33,1208.24 1568.92,1208.24 1569.51,1208.24 1570.09,1208.24 1570.68,1208.24 1571.27,1208.24 1571.85,1208.24 1572.44,1208.24 1573.02,1208.24 1573.61,1208.24 1574.2,1208.24 1574.78,1208.24 1575.37,1208.24 1575.96,1208.24 1576.54,1208.24 1577.13,1208.24 1577.72,1208.24 1578.3,1208.24 1578.89,1208.24 1579.47,1208.24 1580.06,1208.24 1580.65,1208.24 1581.23,1208.24 1581.82,1208.24 1582.41,1208.24 1582.99,1208.24 1583.58,1208.24 1584.17,1208.24 1584.75,1208.24 1585.34,1208.24 1585.93,1208.24 1586.51,1208.24 1587.1,1208.24 1587.68,1208.24 1588.27,1208.24 1588.86,1208.24 1589.44,1208.24 1590.03,1208.24 1590.62,1208.24 1591.2,1208.24 1591.79,1208.24 1592.38,1208.24 1592.96,1208.24 1593.55,1208.24 1594.14,1208.24 1594.72,1208.24 1595.31,1208.24 1595.89,1208.24 1596.48,1208.24 1597.07,1208.24 1597.65,1208.24 1598.24,1208.24 1598.83,1208.24 1599.41,1208.24 1600,1208.24 1600.59,1208.24 1601.17,1208.24 1601.76,1208.24 1602.34,1208.24 1602.93,1208.24 1603.52,1208.24 1604.1,1208.24 1604.69,1208.24 1605.28,1208.24 1605.86,1208.24 1606.45,1208.24 1607.04,1208.24 1607.62,1208.24 1608.21,1208.24 1608.8,1208.24 1609.38,1208.24 1609.97,1208.24 1610.55,1208.24 1611.14,1208.24 1611.73,1208.24 1612.31,1208.24 1612.9,1208.24 1613.49,1208.24 1614.07,1208.24 1614.66,1208.24 1615.25,1208.24 1615.83,1208.24 1616.42,1208.24 1617.01,1208.24 1617.59,1208.24 1618.18,1208.24 1618.76,1208.24 1619.35,1208.24 1619.94,1208.24 1620.52,1208.24 1621.11,1208.24 1621.7,1208.24 1622.28,1208.24 1622.87,1208.24 1623.46,1208.24 1624.04,1208.24 1624.63,1208.24 1625.22,1208.24 1625.8,1208.24 1626.39,1208.24 1626.97,1208.24 1627.56,1208.24 1628.15,1208.24 1628.73,1208.24 1629.32,1208.24 1629.91,1208.24 1630.49,1208.24 1631.08,1208.24 1631.67,1208.24 1632.25,1208.24 1632.84,1208.24 1633.42,1208.24 1634.01,1208.24 1634.6,1208.24 1635.18,1208.24 1635.77,1208.24 1636.36,1208.24 1636.94,1208.24 1637.53,1208.24 1638.12,1208.24 1638.7,1208.24 1639.29,1208.24 1639.88,1208.24 1640.46,1208.24 1641.05,1208.24 1641.63,1208.24 1642.22,1208.24 1642.81,1208.24 1643.39,1208.24 1643.98,1208.24 1644.57,1208.24 1645.15,1208.24 1645.74,1208.24 1646.33,1208.24 1646.91,1208.24 1647.5,1208.24 1648.09,1208.24 1648.67,1208.24 1649.26,1208.24 1649.84,1208.24 1650.43,1208.24 1651.02,1208.24 1651.6,1208.24 1652.19,1208.24 1652.78,1208.24 1653.36,1208.24 1653.95,1208.24 1654.54,1208.24 1655.12,1208.24 1655.71,1208.24 1656.29,1208.24 1656.88,1208.24 1657.47,1208.24 1658.05,1208.24 1658.64,1208.24 1659.23,1208.24 1659.81,1208.24 1660.4,1208.24 1660.99,1208.24 1661.57,1208.24 1662.16,1208.24 1662.75,1208.24 1663.33,1208.24 1663.92,1208.24 1664.5,1208.24 1665.09,1208.24 1665.68,1208.24 1666.26,1208.24 1666.85,1208.24 1667.44,1208.24 1668.02,1208.24 1668.61,1208.24 1669.2,1208.24 1669.78,1208.24 1670.37,1208.24 1670.96,1208.24 1671.54,1208.24 1672.13,1208.24 1672.71,1208.24 1673.3,1208.24 1673.89,1208.24 1674.47,1208.24 1675.06,1208.24 1675.65,1208.24 1676.23,1208.24 1676.82,1208.24 1677.41,1208.24 1677.99,1208.24 1678.58,1208.24 1679.17,1208.24 1679.75,1208.24 1680.34,1208.24 1680.92,1208.24 1681.51,1208.24 1682.1,1208.24 1682.68,1208.24 1683.27,1208.24 1683.86,1208.24 1684.44,1208.24 1685.03,1208.24 1685.62,1208.24 1686.2,1208.24 1686.79,1208.24 1687.37,1208.24 1687.96,1208.24 1688.55,1208.24 1689.13,1208.24 1689.72,1208.24 1690.31,1208.24 1690.89,1208.24 1691.48,1208.24 1692.07,1208.24 1692.65,1208.24 1693.24,1208.24 1693.83,1208.24 1694.41,1208.24 1695,1208.24 1695.58,1208.24 1696.17,1208.24 1696.76,1208.24 1697.34,1208.24 1697.93,1208.24 1698.52,1208.24 1699.1,1208.24 1699.69,1208.24 1700.28,1208.24 1700.86,1208.24 1701.45,1208.24 1702.04,1208.24 1702.62,1208.24 1703.21,1208.24 1703.79,1208.24 1704.38,1208.24 1704.97,1208.24 1705.55,1208.24 1706.14,1208.24 1706.73,1208.24 1707.31,1208.24 1707.9,1208.24 1708.49,1208.24 1709.07,1208.24 1709.66,1208.24 1710.24,1208.24 1710.83,1208.24 1711.42,1208.24 1712,1208.24 1712.59,1208.24 1713.18,1208.24 1713.76,1208.24 1714.35,1208.24 1714.94,1208.24 1715.52,1208.24 1716.11,1208.24 1716.7,1208.24 1717.28,1208.24 1717.87,1208.24 1718.45,1208.24 1719.04,1208.24 1719.63,1208.24 1720.21,1208.24 1720.8,1208.24 1721.39,1208.24 1721.97,1208.24 1722.56,1208.24 1723.15,1208.24 1723.73,1208.24 1724.32,1208.24 1724.91,1208.24 1725.49,1208.24 1726.08,1208.24 1726.66,1208.24 1727.25,1208.24 1727.84,1208.24 1728.42,1208.24 1729.01,1208.24 1729.6,1208.24 1730.18,1208.24 1730.77,1208.24 1731.36,1208.24 1731.94,1208.24 1732.53,1208.24 1733.11,1208.24 1733.7,1208.24 1734.29,1208.24 1734.87,1208.24 1735.46,1208.24 1736.05,1208.24 1736.63,1208.24 1737.22,1208.24 1737.81,1208.24 1738.39,1208.24 1738.98,1208.24 1739.57,1208.24 1740.15,1208.24 1740.74,1208.24 1741.32,1208.24 1741.91,1208.24 1742.5,1208.24 1743.08,1208.24 1743.67,1208.24 1744.26,1208.24 1744.84,1208.24 1745.43,1208.24 1746.02,1208.24 1746.6,1208.24 1747.19,1208.24 1747.78,1208.24 1748.36,1208.24 1748.95,1208.24 1749.53,1208.24 1750.12,1208.24 1750.71,1208.24 1751.29,1208.24 1751.88,1208.24 1752.47,1208.24 1753.05,1208.24 1753.64,1208.24 1754.23,1208.24 1754.81,1208.24 1755.4,1208.24 1755.99,1208.24 1756.57,1208.24 1757.16,1208.24 1757.74,1208.24 1758.33,1208.24 1758.92,1208.24 1759.5,1208.24 1760.09,1208.24 1760.68,1208.24 1761.26,1208.24 1761.85,1208.24 1762.44,1208.24 1763.02,1208.24 1763.61,1208.24 1764.19,1208.24 1764.78,1208.24 1765.37,1208.24 1765.95,1208.24 1766.54,1208.24 1767.13,1208.24 1767.71,1208.24 1768.3,1208.24 1768.89,1208.24 1769.47,1208.24 1770.06,1208.24 1770.65,1208.24 1771.23,1208.24 1771.82,1208.24 1772.4,1208.24 1772.99,1208.24 1773.58,1208.24 1774.16,1208.24 1774.75,1208.24 1775.34,1208.24 1775.92,1208.24 1776.51,1208.24 1777.1,1208.24 1777.68,1208.24 1778.27,1208.24 1778.86,1208.24 1779.44,1208.24 1780.03,1208.24 1780.61,1208.24 1781.2,1208.24 1781.79,1208.24 1782.37,1208.24 1782.96,1208.24 1783.55,1208.24 1784.13,1208.24 1784.72,1208.24 1785.31,1208.24 1785.89,1208.24 1786.48,1208.24 1787.06,1208.24 1787.65,1208.24 1788.24,1208.24 1788.82,1208.24 1789.41,1208.24 1790,1208.24 1790.58,1208.24 1791.17,1208.24 1791.76,1208.24 1792.34,1208.24 1792.93,1208.24 1793.52,1208.24 1794.1,1208.24 1794.69,1208.24 1795.27,1208.24 1795.86,1208.24 1796.45,1208.24 1797.03,1208.24 1797.62,1208.24 1798.21,1208.24 1798.79,1208.24 1799.38,1208.24 1799.97,1208.24 1800.55,1208.24 1801.14,1208.24 1801.73,1208.24 1802.31,1208.24 1802.9,1208.24 1803.48,1208.24 1804.07,1208.24 1804.66,1208.24 1805.24,1208.24 1805.83,1208.24 1806.42,1208.24 1807,1208.24 1807.59,1208.24 1808.18,1208.24 1808.76,1208.24 1809.35,1208.24 1809.94,1208.24 1810.52,1208.24 1811.11,1208.24 1811.69,1208.24 1812.28,1208.24 1812.87,1208.24 1813.45,1208.24 1814.04,1208.24 1814.63,1208.24 1815.21,1208.24 1815.8,1208.24 1816.39,1208.24 1816.97,1208.24 1817.56,1208.24 1818.14,1208.24 1818.73,1208.24 1819.32,1208.24 1819.9,1208.24 1820.49,1208.24 1821.08,1208.24 1821.66,1208.24 1822.25,1208.24 1822.84,1208.24 1823.42,1208.24 1824.01,1208.24 1824.6,1208.24 1825.18,1208.24 1825.77,1208.24 1826.35,1208.24 1826.94,1208.24 1827.53,1208.24 1828.11,1208.24 1828.7,1208.24 1829.29,1208.24 1829.87,1208.24 1830.46,1208.24 1831.05,1208.24 1831.63,1208.24 1832.22,1208.24 1832.81,1208.24 1833.39,1208.24 1833.98,1208.24 1834.56,1208.24 1835.15,1208.24 1835.74,1208.24 1836.32,1208.24 1836.91,1208.24 1837.5,1208.24 1838.08,1208.24 1838.67,1208.24 1839.26,1208.24 1839.84,1208.24 1840.43,1208.24 1841.01,1208.24 1841.6,1208.24 1842.19,1208.24 1842.77,1208.24 1843.36,1208.24 1843.95,1208.24 1844.53,1208.24 1845.12,1208.24 1845.71,1208.24 1846.29,1208.24 1846.88,1208.24 1847.47,1208.24 1848.05,1208.24 1848.64,1208.24 1849.22,1208.24 1849.81,1208.24 1850.4,1208.24 1850.98,1208.24 1851.57,1208.24 1852.16,1208.24 1852.74,1208.24 1853.33,1208.24 1853.92,1208.24 1854.5,1208.24 1855.09,1208.24 1855.68,1208.24 1856.26,1208.24 1856.85,1208.24 1857.43,1208.24 1858.02,1208.24 1858.61,1208.24 1859.19,1208.24 1859.78,1208.24 1860.37,1208.24 1860.95,1208.24 1861.54,1208.24 1862.13,1208.24 1862.71,1208.24 1863.3,1208.24 1863.88,1208.24 1864.47,1208.24 1865.06,1208.24 1865.64,1208.24 1866.23,1208.24 1866.82,1208.24 1867.4,1208.24 1867.99,1208.24 1868.58,1208.24 1869.16,1208.24 1869.75,1208.24 1870.34,1208.24 1870.92,1208.24 1871.51,1208.24 1872.09,1208.24 1872.68,1208.24 1873.27,1208.24 1873.85,1208.24 1874.44,1208.24 1875.03,1208.24 1875.61,1208.24 1876.2,1208.24 1876.79,1208.24 1877.37,1208.24 1877.96,1208.24 1878.55,1208.24 1879.13,1208.24 1879.72,1208.24 1880.3,1208.24 1880.89,1208.24 1881.48,1208.24 1882.06,1208.24 1882.65,1208.24 1883.24,1208.24 1883.82,1208.24 1884.41,1208.24 1885,1208.24 1885.58,1208.24 1886.17,1208.24 1886.76,1208.24 1887.34,1208.24 1887.93,1208.24 1888.51,1208.24 1889.1,1208.24 1889.69,1208.24 1890.27,1208.24 1890.86,1208.24 1891.45,1208.24 1892.03,1208.24 1892.62,1208.24 1893.21,1208.24 1893.79,1208.24 1894.38,1208.24 1894.96,1208.24 1895.55,1208.24 1896.14,1208.24 1896.72,1208.24 1897.31,1208.24 1897.9,1208.24 1898.48,1208.24 1899.07,1208.24 1899.66,1208.24 1900.24,1208.24 1900.83,1208.24 1901.42,1208.24 1902,1208.24 1902.59,1208.24 1903.17,1208.24 1903.76,1208.24 1904.35,1208.24 1904.93,1208.24 1905.52,1208.24 1906.11,1208.24 1906.69,1208.24 1907.28,1208.24 1907.87,1208.24 1908.45,1208.24 1909.04,1208.24 1909.63,1208.24 1910.21,1208.24 1910.8,1208.24 1911.38,1208.24 1911.97,1208.24 1912.56,1208.24 1913.14,1208.24 1913.73,1208.24 1914.32,1208.24 1914.9,1208.24 1915.49,1208.24 1916.08,1208.24 1916.66,1208.24 1917.25,1208.24 1917.83,1208.24 1918.42,1208.24 1919.01,1208.24 1919.59,1208.24 1920.18,1208.24 1920.77,1208.24 1921.35,1208.24 1921.94,1208.24 1922.53,1208.24 1923.11,1208.24 1923.7,1208.24 1924.29,1208.24 1924.87,1208.24 1925.46,1208.24 1926.04,1208.24 1926.63,1208.24 1927.22,1208.24 1927.8,1208.24 1928.39,1208.24 1928.98,1208.24 1929.56,1208.24 1930.15,1208.24 1930.74,1208.24 1931.32,1208.24 1931.91,1208.24 1932.5,1208.24 1933.08,1208.24 1933.67,1208.24 1934.25,1208.24 1934.84,1208.24 1935.43,1208.24 1936.01,1208.24 1936.6,1208.24 1937.19,1208.24 1937.77,1208.24 1938.36,1208.24 1938.95,1208.24 1939.53,1208.24 1940.12,1208.24 1940.71,1208.24 1941.29,1208.24 1941.88,1208.24 1942.46,1208.24 1943.05,1208.24 1943.64,1208.24 1944.22,1208.24 1944.81,1208.24 1945.4,1208.24 1945.98,1208.24 1946.57,1208.24 1947.16,1208.24 1947.74,1208.24 1948.33,1208.24 1948.91,1208.24 1949.5,1208.24 1950.09,1208.24 1950.67,1208.24 1951.26,1208.24 1951.85,1208.24 1952.43,1208.24 1953.02,1208.24 1953.61,1208.24 1954.19,1208.24 1954.78,1208.24 1955.37,1208.24 1955.95,1208.24 1956.54,1208.24 1957.12,1208.24 1957.71,1208.24 1958.3,1208.24 1958.88,1208.24 1959.47,1208.24 1960.06,1208.24 1960.64,1208.24 1961.23,1208.24 1961.82,1208.24 1962.4,1208.24 1962.99,1208.24 1963.58,1208.24 1964.16,1208.24 1964.75,1208.24 1965.33,1208.24 1965.92,1208.24 1966.51,1208.24 1967.09,1208.24 1967.68,1208.24 1968.27,1208.24 1968.85,1208.24 1969.44,1208.24 1970.03,1208.24 1970.61,1208.24 1971.2,1208.24 1971.78,1208.24 1972.37,1208.24 1972.96,1208.24 1973.54,1208.24 1974.13,1208.24 1974.72,1208.24 1975.3,1208.24 1975.89,1208.24 1976.48,1208.24 1977.06,1208.24 1977.65,1208.24 1978.24,1208.24 1978.82,1208.24 1979.41,1208.24 1979.99,1208.24 1980.58,1208.24 1981.17,1208.24 1981.75,1208.24 1982.34,1208.24 1982.93,1208.24 1983.51,1208.24 1984.1,1208.24 1984.69,1208.24 1985.27,1208.24 1985.86,1208.24 1986.45,1208.24 1987.03,1208.24 1987.62,1208.24 1988.2,1208.24 1988.79,1208.24 1989.38,1208.24 1989.96,1208.24 1990.55,1208.24 1991.14,1208.24 1991.72,1208.24 1992.31,1208.24 1992.9,1208.24 1993.48,1208.24 1994.07,1208.24 1994.65,1208.24 1995.24,1208.24 1995.83,1208.24 1996.41,1208.24 1997,1208.24 1997.59,1208.24 1998.17,1208.24 1998.76,1208.24 1999.35,1208.24 1999.93,1208.24 2000.52,1208.24 2001.11,1208.24 2001.69,1208.24 2002.28,1208.24 2002.86,1208.24 2003.45,1208.24 2004.04,1208.24 2004.62,1208.24 2005.21,1208.24 2005.8,1208.24 2006.38,1208.24 2006.97,1208.24 2007.56,1208.24 2008.14,1208.24 2008.73,1208.24 2009.32,1208.24 2009.9,1208.24 2010.49,1208.24 2011.07,1208.24 2011.66,1208.24 2012.25,1208.24 2012.83,1208.24 2013.42,1208.24 2014.01,1208.24 2014.59,1208.24 2015.18,1208.24 2015.77,1208.24 2016.35,1208.24 2016.94,1208.24 2017.53,1208.24 2018.11,1208.24 2018.7,1208.24 2019.28,1208.24 2019.87,1208.24 2020.46,1208.24 2021.04,1208.24 2021.63,1208.24 2022.22,1208.24 2022.8,1208.24 2023.39,1208.24 2023.98,1208.24 2024.56,1208.24 2025.15,1208.24 2025.73,1208.24 2026.32,1208.24 2026.91,1208.24 2027.49,1208.24 2028.08,1208.24 2028.67,1208.24 2029.25,1208.24 2029.84,1208.24 2030.43,1208.24 2031.01,1208.24 2031.6,1208.24 2032.19,1208.24 2032.77,1208.24 2033.36,1208.24 2033.94,1208.24 2034.53,1208.24 2035.12,1208.24 2035.7,1208.24 2036.29,1208.24 2036.88,1208.24 2037.46,1208.24 2038.05,1208.24 2038.64,1208.24 2039.22,1208.24 2039.81,1208.24 2040.4,1208.24 2040.98,1208.24 2041.57,1208.24 2042.15,1208.24 2042.74,1208.24 2043.33,1208.24 2043.91,1208.24 2044.5,1208.24 2045.09,1208.24 2045.67,1208.24 2046.26,1208.24 2046.85,1208.24 2047.43,1208.24 2048.02,1208.24 2048.6,1208.24 2049.19,1208.24 2049.78,1208.24 2050.36,1208.24 2050.95,1208.24 2051.54,1208.24 2052.12,1208.24 2052.71,1208.24 2053.3,1208.24 2053.88,1208.24 2054.47,1208.24 2055.06,1208.24 2055.64,1208.24 2056.23,1208.24 2056.81,1208.24 2057.4,1208.24 2057.99,1208.24 2058.57,1208.24 2059.16,1208.24 2059.75,1208.24 2060.33,1208.24 2060.92,1208.24 2061.51,1208.24 2062.09,1208.24 2062.68,1208.24 2063.27,1208.24 2063.85,1208.24 2064.44,1208.24 2065.02,1208.24 2065.61,1208.24 2066.2,1208.24 2066.78,1208.24 2067.37,1208.24 2067.96,1208.24 2068.54,1208.24 2069.13,1208.24 2069.72,1208.24 2070.3,1208.24 2070.89,1208.24 2071.48,1208.24 2072.06,1208.24 2072.65,1208.24 2073.23,1208.24 2073.82,1208.24 2074.41,1208.24 2074.99,1208.24 2075.58,1208.24 2076.17,1208.24 2076.75,1208.24 2077.34,1208.24 2077.93,1208.24 2078.51,1208.24 2079.1,1208.24 2079.68,1208.24 2080.27,1208.24 2080.86,1208.24 2081.44,1208.24 2082.03,1208.24 2082.62,1208.24 2083.2,1208.24 2083.79,1208.24 2084.38,1208.24 2084.96,1208.24 2085.55,1208.24 2086.14,1208.24 2086.72,1208.24 2087.31,1208.24 2087.89,1208.24 2088.48,1208.24 2089.07,1208.24 2089.65,1208.24 2090.24,1208.24 2090.83,1208.24 2091.41,1208.24 2092,1208.24 2092.59,1208.24 2093.17,1208.24 2093.76,1208.24 2094.35,1208.24 2094.93,1208.24 2095.52,1208.24 2096.1,1208.24 2096.69,1208.24 2097.28,1208.24 2097.86,1208.24 2098.45,1208.24 2099.04,1208.24 2099.62,1208.24 2100.21,1208.24 2100.8,1208.24 2101.38,1208.24 2101.97,1208.24 2102.55,1208.24 2103.14,1208.24 2103.73,1208.24 2104.31,1208.24 2104.9,1208.24 2105.49,1208.24 2106.07,1208.24 2106.66,1208.24 2107.25,1208.24 2107.83,1208.24 2108.42,1208.24 2109.01,1208.24 2109.59,1208.24 2110.18,1208.24 2110.76,1208.24 2111.35,1208.24 2111.94,1208.24 2112.52,1208.24 2113.11,1208.24 2113.7,1208.24 2114.28,1208.24 2114.87,1208.24 2115.46,1208.24 2116.04,1208.24 2116.63,1208.24 2117.22,1208.24 2117.8,1208.24 2118.39,1208.24 2118.97,1208.24 2119.56,1208.24 2120.15,1208.24 2120.73,1208.24 2121.32,1208.24 2121.91,1208.24 2122.49,1208.24 2123.08,1208.24 2123.67,1208.24 2124.25,1208.24 2124.84,1208.24 2125.42,1208.24 2126.01,1208.24 2126.6,1208.24 2127.18,1208.24 2127.77,1208.24 2128.36,1208.24 2128.94,1208.24 2129.53,1208.24 2130.12,1208.24 2130.7,1208.24 2131.29,1208.24 2131.88,1208.24 2132.46,1208.24 2133.05,1208.24 2133.63,1208.24 2134.22,1208.24 2134.81,1208.24 2135.39,1208.24 2135.98,1208.24 2136.57,1208.24 2137.15,1208.24 2137.74,1208.24 2138.33,1208.24 2138.91,1208.24 2139.5,1208.24 2140.09,1208.24 2140.67,1208.24 2141.26,1208.24 2141.84,1208.24 2142.43,1208.24 2143.02,1208.24 2143.6,1208.24 2144.19,1208.24 2144.78,1208.24 2145.36,1208.24 2145.95,1208.24 2146.54,1208.24 2147.12,1208.24 2147.71,1208.24 2148.3,1208.24 2148.88,1208.24 2149.47,1208.24 2150.05,1208.24 2150.64,1208.24 2151.23,1208.24 2151.81,1208.24 2152.4,1208.24 2152.99,1208.24 2153.57,1208.24 2154.16,1208.24 2154.75,1208.24 2155.33,1208.24 2155.92,1208.24 2156.5,1208.24 2157.09,1208.24 2157.68,1208.24 2158.26,1208.24 \"/>\n<polyline clip-path=\"url(#clip562)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.27,1190.74 1400.29,899.083 \"/>\n<polyline clip-path=\"url(#clip562)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1225.25 985.439,1190.74 2158.26,1190.74 2158.26,1225.25 985.439,1225.25 \"/>\n<path clip-path=\"url(#clip560)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip560)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip560)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip560)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip560)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip560)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip563\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip563)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip563)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip563)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip563)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip563)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip560)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip563)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip563)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip563)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip563)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip563)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip560)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip560)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip560)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip563)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-3848.08 163.232,-4953 163.792,-5988.03 164.351,-6933.25 164.91,-7774.61 165.469,-8536.7 166.029,-9205.08 166.588,-9811.04 167.147,-9335.82 167.706,-9889.15 168.266,-10365.6 168.825,-10808.2 169.384,-11181.1 169.943,-11527 170.503,-11828.8 171.062,-11412.2 171.621,-11637.5 172.18,-11261.4 172.74,-11452.7 173.299,-11120.3 173.858,-11263.2 174.417,-10954.8 174.977,-11056.5 175.536,-11139.3 176.095,-11186.2 176.655,-11216.1 177.214,-11226.5 177.773,-11219.9 178.332,-11191.1 178.892,-11151 179.451,-11093.5 180.01,-11021.9 180.569,-10945.3 181.129,-10854 181.688,-10751.7 182.247,-10448.9 182.806,-10149.1 183.366,-9839.67 183.925,-9553.02 184.484,-9400.5 185.043,-9254.28 185.603,-8973.46 186.162,-8565.43 186.721,-8300.68 187.28,-8163.6 187.84,-7909.41 188.399,-7665.52 188.958,-7250.16 189.517,-7125.94 190.077,-6906.6 190.636,-6536.33 191.195,-6177.43 191.754,-6058.93 192.314,-5807.63 192.873,-5694.37 193.432,-5509.96 193.991,-5340.72 194.551,-5055.53 195.11,-4886.07 195.669,-4776.78 196.228,-4668.14 196.788,-4509.22 197.347,-4303.51 197.906,-4201.94 198.465,-4098.64 199.025,-3946.74 199.584,-3839.18 200.143,-3606.28 200.702,-3471.4 201.262,-3338.36 201.821,-3243.92 202.38,-3155.44 202.939,-2953.82 203.499,-2867.98 204.058,-2782.03 204.617,-2626.61 205.176,-2512.16 205.736,-2437.58 206.295,-2259.05 206.854,-2127.15 207.413,-1997.31 207.973,-1905.3 208.532,-1842.87 209.091,-1751.37 209.65,-1662.37 210.21,-1541.8 210.769,-1483.38 211.328,-1428.24 211.887,-1348.43 212.447,-1240.34 213.006,-1081.5 213.565,-957.287 214.124,-889.949 214.684,-823.332 215.243,-756.768 215.802,-715.729 216.361,-628.215 216.921,-569.644 217.48,-487.327 218.039,-433.192 218.598,-403.029 219.158,-324.504 219.717,-293.248 220.276,-264.719 220.835,-233.603 221.395,-140.044 221.954,-49.606 222.513,-5.49534 223.072,13.7371 223.632,99.0755 224.191,154.468 224.75,173.355 225.309,210.013 225.869,265.045 226.428,358.216 226.987,426.561 227.546,493.749 228.106,518.277 228.665,559.819 229.224,559.927 229.783,563.838 230.343,565.843 230.902,588.453 231.461,631.395 232.02,653.077 232.58,617.166 233.139,642.669 233.698,685.029 234.257,723.914 234.817,722.862 235.376,744.014 235.935,800.186 236.494,794.812 237.054,813.756 237.613,792.148 238.172,867.185 238.731,863.6 239.291,896.35 239.85,928.985 240.409,940.645 240.968,932.665 241.528,948.443 242.087,958.076 242.646,989.15 243.205,1016.75 243.765,1026.01 244.324,1053.59 244.883,1046.62 245.442,1057.24 246.002,1047.98 246.561,1039.57 247.12,1032.76 247.679,1042.89 248.239,1034.76 248.798,1027.59 249.357,1053.91 249.916,1043.22 250.476,1033.23 251.035,1042.16 251.594,1037.99 252.153,1065.37 252.713,1076.36 253.272,1080.63 253.831,1086.61 254.39,1109.1 254.95,1130.35 255.509,1135.98 256.068,1125.03 256.627,1092.65 257.187,1087.09 257.746,1076.99 258.305,1085.41 258.864,1093.64 259.424,1068.22 259.983,1062.45 260.542,1069.96 261.101,1098.63 261.661,1088.97 262.22,1116.4 262.779,1105.61 263.338,1078.93 263.898,1104.39 264.457,1129.13 265.016,1152.68 265.575,1123.76 266.135,1136.56 266.694,1194.85 267.253,1197.26 267.812,1219.08 268.372,1202.17 268.931,1170.68 269.49,1196.5 270.049,1184.39 270.609,1138.06 271.168,1160.52 271.727,1128.83 272.286,1105.81 272.846,1111.87 273.405,1069.84 273.964,1081.68 274.523,1059.09 275.083,1019.12 275.642,1016.21 276.201,1010.64 276.76,1006.24 277.32,1021.29 277.879,1035.71 278.438,1013.57 278.997,993.12 279.557,1006.82 280.116,1004.8 280.675,972.474 281.234,937.771 281.794,959.471 282.353,957.364 282.912,941.871 283.471,956.733 284.031,972.254 284.59,987.013 285.149,970.082 285.708,967.023 286.268,998.042 286.827,1011.71 287.386,1010.76 287.945,1041.11 288.505,1019.18 289.064,1052.16 289.623,1045.03 290.182,1004.88 290.742,1017.75 291.301,1045.67 291.86,1057.03 292.419,1083.6 292.979,1078.36 293.538,1121.44 294.097,1110.7 294.656,1099.25 295.216,1091.19 295.775,1068.56 296.334,1111.39 296.893,1102 297.453,1078.09 298.012,1069.92 298.571,1064.32 299.13,1073.3 299.69,1064.99 300.249,1073.53 300.808,1068.54 301.368,1075.73 301.927,1069.01 302.486,1077.96 303.045,1084.66 303.605,1077.41 304.164,1064.62 304.723,1105.35 305.282,1108.56 305.842,1097.01 306.401,1102.77 306.96,1109.58 307.519,1117.67 308.079,1088.91 308.638,1111.06 309.197,1080.97 309.756,1056.02 310.316,1050.32 310.875,1073.71 311.434,1062.54 311.993,1055.42 312.553,1044.33 313.112,1023.62 313.671,1029.84 314.23,990.971 314.79,987.957 315.349,1028.59 315.908,1002.9 316.467,996.724 317.027,990.456 317.586,986.127 318.145,996.854 318.704,990.516 319.264,987.102 319.823,984.858 320.382,978.649 320.941,1003.8 321.501,979.114 322.06,970.819 322.619,1001.05 323.178,1014.17 323.738,1006.26 324.297,1016.35 324.856,1010.92 325.415,987.166 325.975,981.369 326.534,1007.4 327.093,986.592 327.652,983.037 328.212,960.81 328.771,1002.24 329.33,979.324 329.889,970.558 330.449,962.015 331.008,974.117 331.567,983.614 332.126,980.161 332.686,1019.9 333.245,1013.19 333.804,952.525 334.363,953.493 334.923,947.763 335.482,922.489 336.041,884.814 336.6,834.997 337.16,837.74 337.719,805.249 338.278,795.73 338.837,799.122 339.397,804.532 339.956,822.088 340.515,840.111 341.074,857.079 341.634,874.557 342.193,840.607 342.752,859.72 343.311,855.191 343.871,837.755 344.43,838.404 344.989,869.573 345.548,882.269 346.108,875.724 346.667,875.373 347.226,873.345 347.785,888.488 348.345,872.026 348.904,907.579 349.463,937.834 350.022,980.202 350.582,957.353 351.141,968.378 351.7,943.366 352.259,936.133 352.819,912.49 353.378,926.819 353.937,941.439 354.496,935.057 355.056,944.328 355.615,937.815 356.174,966.666 356.733,989.959 357.293,963.12 357.852,991.319 358.411,998.938 358.97,1005.89 359.53,1013.8 360.089,1019.38 360.648,1023.46 361.207,1023.53 361.767,997.902 362.326,992.621 362.885,982.983 363.444,955.289 364.004,945.815 364.563,924.045 365.122,918.834 365.681,910.175 366.241,953.948 366.8,965.357 367.359,1004.4 367.918,978.948 368.478,1001.73 369.037,991.64 369.596,996.832 370.155,985.095 370.715,948.074 371.274,922.183 371.833,982.714 372.392,988.328 372.952,1012.08 373.511,985.352 374.07,959.426 374.629,948.129 375.189,925.873 375.748,881.736 376.307,849.745 376.866,850.002 377.426,799.322 377.985,785.076 378.544,786.08 379.103,835.9 379.663,899.643 380.222,924.764 380.781,916.592 381.34,908.449 381.9,854.953 382.459,872.33 383.018,852.068 383.577,847.758 384.137,824.453 384.696,827.141 385.255,821.451 385.814,816.597 386.374,799.215 386.933,765.693 387.492,782.405 388.051,782.155 388.611,783.397 389.17,800.163 389.729,812.029 390.288,794.504 390.848,826.064 391.407,821.778 391.966,784.873 392.525,768.073 393.085,750.909 393.644,783.815 394.203,784.764 394.762,770.052 395.322,785.224 395.881,817.699 396.44,831.903 396.999,813.385 397.559,828.806 398.118,890.809 398.677,902.177 399.236,832.746 399.796,832.51 400.355,859.825 400.914,901.769 401.473,927.47 402.033,903.53 402.592,879.986 403.151,872.17 403.71,848.95 404.27,831.965 404.829,829.522 405.388,809.577 405.947,807.001 406.507,806.123 407.066,787.585 407.625,787.698 408.184,788.722 408.744,751.663 409.303,772.289 409.862,757.719 410.421,760.915 410.981,763.651 411.54,795.602 412.099,805.821 412.658,773.307 413.218,760.679 413.777,763.499 414.336,763.975 414.895,768.584 415.455,770.374 416.014,766.671 416.573,767.348 417.132,736.254 417.692,755.494 418.251,786.743 418.81,770.386 419.369,804.816 419.929,801.433 420.488,799.802 421.047,799.989 421.606,785.317 422.166,787.332 422.725,817.367 423.284,815.36 423.843,876.204 424.403,854.81 424.962,880.712 425.521,844.484 426.08,854.299 426.64,863.982 427.199,876.811 427.758,902.132 428.318,896.362 428.877,858.377 429.436,854.027 429.995,849.43 430.555,845.898 431.114,841.09 431.673,834.943 432.232,815.668 432.792,782.147 433.351,781.993 433.91,798.75 434.469,781.947 435.029,795.07 435.588,779.877 436.147,763.064 436.706,777.384 437.266,757.695 437.825,758.996 438.384,773.17 438.943,790.399 439.503,807.416 440.062,806.104 440.621,821.851 441.18,817.102 441.74,832.77 442.299,797.381 442.858,779.031 443.417,793.105 443.977,806.447 444.536,788.695 445.095,820.293 445.654,818.229 446.214,796.622 446.773,812.478 447.332,760.353 447.891,759.302 448.451,760.832 449.01,744.547 449.569,779.437 450.128,824.799 450.688,855.386 451.247,849.815 451.806,865.006 452.365,823.375 452.925,802.397 453.484,781.692 454.043,796.767 454.602,795.732 455.162,807.65 455.721,804.748 456.28,785.683 456.839,820.787 457.399,835.343 457.958,798.42 458.517,811.507 459.076,804.34 459.636,798.897 460.195,796.571 460.754,778.148 461.313,777.358 461.873,761.437 462.432,743.326 462.991,757.192 463.55,773.763 464.11,773.853 464.669,770.554 465.228,736.602 465.787,754.14 466.347,769.455 466.906,830.886 467.465,828.48 468.024,776.012 468.584,759.724 469.143,774.409 469.702,754.561 470.261,771.138 470.821,734.629 471.38,732.317 471.939,716.24 472.498,717.087 473.058,721.716 473.617,702.348 474.176,703.137 474.735,721.288 475.295,676.478 475.854,662.889 476.413,668.697 476.972,672.549 477.532,708.503 478.091,704.88 478.65,724.204 479.209,690.043 479.769,694.826 480.328,696.684 480.887,728.072 481.446,698.09 482.006,684.174 482.565,719.388 483.124,719.143 483.683,769.709 484.243,767.167 484.802,748.758 485.361,766.387 485.92,765.825 486.48,766.835 487.039,768.18 487.598,782.221 488.157,781.693 488.717,777.454 489.276,760.021 489.835,776.902 490.394,789.616 490.954,753.819 491.513,718.442 492.072,702.286 492.631,703.347 493.191,704.444 493.75,704.769 494.309,672.746 494.868,661.178 495.428,729.231 495.987,732.495 496.546,734.221 497.105,718.25 497.665,701.811 498.224,690.611 498.783,691.26 499.342,709.775 499.902,699.151 500.461,716.813 501.02,732.666 501.579,731.232 502.139,728.913 502.698,725.593 503.257,742.843 503.816,742.284 504.376,740.694 504.935,720.019 505.494,719.208 506.053,720.196 506.613,723.181 507.172,726.296 507.731,753.533 508.29,752.799 508.85,769.483 509.409,802.006 509.968,794.865 510.527,806.727 511.087,801.767 511.646,799.098 512.205,810.274 512.764,805.13 513.324,810.93 513.883,804.389 514.442,787.119 515.001,752.816 515.561,765.186 516.12,743.809 516.679,757.545 517.238,758.447 517.798,742.314 518.357,738.828 518.916,752.928 519.475,767.739 520.035,765.622 520.594,763.272 521.153,746.006 521.712,760.42 522.272,756.612 522.831,771.016 523.39,752.701 523.949,722.244 524.509,672.767 525.068,706.957 525.627,743.468 526.186,714.25 526.746,701.171 527.305,718.146 527.864,703.901 528.423,686.514 528.983,671.929 529.542,677.702 530.101,696.3 530.66,683.237 531.22,686.716 531.779,655.45 532.338,658.07 532.897,673.97 533.457,692.567 534.016,708.403 534.575,676.449 535.134,662.202 535.694,697.635 536.253,699.637 536.812,699.127 537.371,714.931 537.931,699.9 538.49,685.851 539.049,703.245 539.608,722.143 540.168,737.708 540.727,767.541 541.286,795.734 541.845,792.162 542.405,802.884 542.964,830.54 543.523,793.779 544.082,788.204 544.642,801.317 545.201,833.052 545.76,856.496 546.319,848.44 546.879,861.92 547.438,870.537 547.997,844.75 548.556,807.081 549.116,815.188 549.675,780.536 550.234,761.602 550.793,738.781 551.353,718.983 551.912,702.953 552.471,718.612 553.031,749.383 553.59,727.993 554.149,758.868 554.708,769.998 555.268,734.741 555.827,721.166 556.386,752.118 556.945,734.553 557.505,749.467 558.064,731.751 558.623,729.618 559.182,728.567 559.742,760.322 560.301,744.401 560.86,710.61 561.419,712.619 561.979,727.438 562.538,711.511 563.097,680.484 563.656,711.675 564.216,682.467 564.775,713.16 565.334,719.902 565.893,735.828 566.453,747.778 567.012,746.025 567.571,726.899 568.13,710.92 568.69,680.277 569.249,628.969 569.808,651.957 570.367,655.859 570.927,654.808 571.486,657.006 572.045,664.737 572.604,685.147 573.164,719.733 573.723,719.004 574.282,720.065 574.841,722.224 575.401,707.769 575.96,708.386 576.519,707.827 577.078,741.839 577.638,711.464 578.197,713.346 578.756,727.54 579.315,761.268 579.875,761.408 580.434,760.349 580.993,774.786 581.552,789.21 582.112,783.336 582.671,779.753 583.23,810.464 583.789,772.505 584.349,752.966 584.908,748.693 585.467,744.439 586.026,790.981 586.586,786.886 587.145,769.031 587.704,780.931 588.263,779.811 588.823,792.744 589.382,791.227 589.941,802.246 590.5,767.26 591.06,764.167 591.619,745.977 592.178,712.852 592.737,744.02 593.297,740.794 593.856,722.272 594.415,752.474 594.974,705.603 595.534,721.765 596.093,752.834 596.652,746.449 597.211,759.449 597.771,773.929 598.33,785.84 598.889,798.478 599.448,777.923 600.008,775.045 600.567,784.294 601.126,793.725 601.685,771.777 602.245,738.043 602.804,719.942 603.363,703.143 603.922,735.457 604.482,749.772 605.041,752.018 605.6,779.154 606.159,776.495 606.719,758.959 607.278,756.184 607.837,752.932 608.396,768.517 608.956,747.202 609.515,761.493 610.074,791.894 610.633,771.819 611.193,800.922 611.752,813.527 612.311,804.989 612.87,767.01 613.43,701.041 613.989,683.806 614.548,667.002 615.107,649.31 615.667,632.886 616.226,633.512 616.785,656.647 617.344,645.766 617.904,618.348 618.463,590.558 619.022,592.979 619.581,611.915 620.141,612.96 620.7,634.975 621.259,640.986 621.818,646.953 622.378,664.176 622.937,681.328 623.496,665.103 624.055,650.412 624.615,650.742 625.174,638.847 625.733,677.362 626.292,713.597 626.852,697.654 627.411,685.667 627.97,686.61 628.529,686.991 629.089,701.141 629.648,718.06 630.207,734.111 630.766,732.924 631.326,728.771 631.885,742.081 632.444,751.732 633.003,779.487 633.563,742.69 634.122,739.982 634.681,739.128 635.24,735.921 635.8,751.98 636.359,720.079 636.918,732.993 637.477,747.682 638.037,743.762 638.596,739.369 639.155,718.86 639.714,732.704 640.274,680.795 640.833,714.486 641.392,711.411 641.951,729.747 642.511,710.142 643.07,726.021 643.629,675.847 644.188,690.545 644.748,693.699 645.307,660.864 645.866,662.87 646.425,649.821 646.985,653.443 647.544,622.091 648.103,613.058 648.662,632.897 649.222,615.938 649.781,636.217 650.34,636.568 650.899,642.774 651.459,629.493 652.018,664.752 652.577,685.151 653.136,689.073 653.696,691.561 654.255,676.989 654.814,664.302 655.373,685.943 655.933,702.743 656.492,704.099 657.051,704.973 657.61,674.081 658.17,644.129 658.729,629.869 659.288,618.877 659.847,624.595 660.407,629.713 660.966,619.633 661.525,640.769 662.084,659.548 662.644,695.73 663.203,695.586 663.762,711.396 664.321,683.446 664.881,699.9 665.44,685.234 665.999,654.199 666.558,641.447 667.118,646.639 667.677,668.852 668.236,704.352 668.795,686.711 669.355,701.024 669.914,654.939 670.473,645.016 671.032,662.89 671.592,669.214 672.151,706.51 672.71,704.295 673.269,720.438 673.829,704.326 674.388,639.688 674.947,647.51 675.506,667.763 676.066,665.344 676.625,665.016 677.184,664.525 677.743,671.049 678.303,670.213 678.862,704.208 679.421,684.921 679.981,686.761 680.54,705.761 681.099,704.937 681.658,737.995 682.218,684.382 682.777,720.374 683.336,686.175 683.895,719.02 684.455,736.405 685.014,718.352 685.573,729.467 686.132,747.142 686.692,725.608 687.251,710.853 687.81,707.885 688.369,753.167 688.929,749.336 689.488,779.977 690.047,760.486 690.606,741.316 691.166,687.442 691.725,686.716 692.284,671.129 692.843,638.834 693.403,658.862 693.962,660.436 694.521,677.897 695.08,676.59 695.64,662.794 696.199,664.517 696.758,683.095 697.317,733.114 697.877,732.086 698.436,744.614 698.995,744.579 699.554,728.255 700.114,741.885 700.673,758.838 701.232,756.606 701.791,726.257 702.351,692.876 702.91,677.518 703.469,680.19 704.028,634.511 704.588,655.68 705.147,672.595 705.706,708.589 706.265,726.125 706.825,722.29 707.384,739.342 707.943,736.695 708.502,736.091 709.062,751.297 709.621,732.735 710.18,709.01 710.739,724.889 711.299,723.312 711.858,673.312 712.417,657.634 712.976,661.915 713.536,680.826 714.095,681.486 714.654,663.893 715.213,667.624 715.773,652.101 716.332,687.369 716.891,689.888 717.45,690.326 718.01,673.894 718.569,660.253 719.128,648.193 719.687,651.539 720.247,674.299 720.806,707.611 721.365,740.258 721.924,756.315 722.484,787.372 723.043,799.099 723.602,795.679 724.161,773.013 724.721,768.022 725.28,764.769 725.839,762.464 726.398,773.291 726.958,767.258 727.517,759.414 728.076,721.411 728.635,737.374 729.195,720.969 729.754,718.174 730.313,717.056 730.872,731.429 731.432,748.341 731.991,694.911 732.55,678.588 733.109,678.238 733.669,649.506 734.228,619.56 734.787,623.518 735.346,626.583 735.906,611.398 736.465,617.508 737.024,638.956 737.583,625.335 738.143,628.056 738.702,632.105 739.261,632.742 739.82,616.699 740.38,605.71 740.939,606.832 741.498,627.335 742.057,660.141 742.617,680.1 743.176,714.943 743.735,710.536 744.294,690.998 744.854,707.904 745.413,692.21 745.972,706.736 746.531,706.797 747.091,693.623 747.65,696.542 748.209,696.671 748.768,696.803 749.328,697.515 749.887,692.191 750.446,691.861 751.005,692.712 751.565,677.469 752.124,679.356 752.683,681.705 753.242,733.485 753.802,747.16 754.361,745.874 754.92,693.166 755.479,675.788 756.039,674.858 756.598,675.567 757.157,659.118 757.716,678.679 758.276,695.083 758.835,693.668 759.394,692.628 759.953,705.386 760.513,670.896 761.072,672.821 761.631,674.968 762.19,688.474 762.75,687.123 763.309,688.908 763.868,686.974 764.427,656.867 764.987,658.464 765.546,674.554 766.105,677.114 766.664,693.632 767.224,692.418 767.783,706.043 768.342,718.606 768.901,699.595 769.461,730.281 770.02,709.707 770.579,695.373 771.138,693.005 771.698,726.684 772.257,693.719 772.816,709.69 773.375,689.167 773.935,674.885 774.494,707.869 775.053,709.085 775.612,711.561 776.172,728.51 776.731,724.544 777.29,707.656 777.849,706.604 778.409,691.454 778.968,659.515 779.527,691.879 780.086,679.642 780.646,694.79 781.205,681.225 781.764,696.861 782.323,694.812 782.883,693.687 783.442,695.064 784.001,713.385 784.56,726.363 785.12,754.197 785.679,731.747 786.238,729.734 786.797,696.754 787.357,664.111 787.916,682.136 788.475,662.414 789.034,646.893 789.594,649.858 790.153,668.584 790.712,636.35 791.271,700.862 791.831,685.401 792.39,700.959 792.949,701.198 793.508,719.742 794.068,696.964 794.627,680.782 795.186,666.013 795.745,637.086 796.305,624.772 796.864,594.35 797.423,632.326 797.982,651.491 798.542,688.675 799.101,708.266 799.66,740.625 800.219,707.301 800.779,707.369 801.338,688.601 801.897,671.363 802.456,638.88 803.016,627.811 803.575,633.914 804.134,637.122 804.693,639.476 805.253,609.748 805.812,596.682 806.371,583.927 806.931,591.519 807.49,595.51 808.049,597.11 808.608,633.63 809.168,669.539 809.727,653.542 810.286,640.023 810.845,660.991 811.405,662.19 811.964,632.709 812.523,667.657 813.082,650.319 813.642,685.12 814.201,700.475 814.76,701.026 815.319,669.192 815.879,653.271 816.438,671.197 816.997,688.205 817.556,698.33 818.116,699.143 818.675,683.184 819.234,682.066 819.793,711.27 820.353,676.666 820.912,738.632 821.471,735.791 822.03,715.208 822.59,696.249 823.149,682.175 823.708,698.422 824.267,694.09 824.827,680.243 825.386,662.738 825.945,662.998 826.504,682.884 827.064,696.384 827.623,699.005 828.182,712.476 828.741,709.187 829.301,709.899 829.86,707.998 830.419,687.863 830.978,702.223 831.538,723.751 832.097,721.771 832.656,720.328 833.215,721.816 833.775,715.051 834.334,696.211 834.893,660.685 835.452,664.165 836.012,649.205 836.571,652.76 837.13,670.862 837.689,689.467 838.249,673.395 838.808,674.276 839.367,707.815 839.926,708.084 840.486,706.916 841.045,689.861 841.604,692.849 842.163,693.323 842.723,676.53 843.282,677.226 843.841,695.964 844.4,693.979 844.96,673.507 845.519,656.871 846.078,624.753 846.637,660.731 847.197,648.048 847.756,701.328 848.315,699.164 848.874,716.741 849.434,713.83 849.993,729.041 850.552,746.499 851.111,745.317 851.671,746.517 852.23,747.213 852.789,730.951 853.348,727.072 853.908,735.91 854.467,731.905 855.026,759.561 855.585,758.77 856.145,760.276 856.704,757.667 857.263,755.051 857.822,751.07 858.382,716.651 858.941,699.079 859.5,732.316 860.059,726.12 860.619,721.005 861.178,720.515 861.737,704.21 862.296,720.003 862.856,670.433 863.415,673.233 863.974,677.697 864.533,646.219 865.093,645.76 865.652,663.1 866.211,697.326 866.77,697.987 867.33,715.716 867.889,715.446 868.448,726.578 869.007,725.889 869.567,707.09 870.126,737.912 870.685,719.486 871.244,749.751 871.804,764.266 872.363,759.803 872.922,755.056 873.481,753.273 874.041,764.285 874.6,756.273 875.159,751.412 875.718,731.202 876.278,729.361 876.837,739.754 877.396,722.719 877.955,688.557 878.515,702.5 879.074,685.352 879.633,686.443 880.192,687.2 880.752,687.164 881.311,689.012 881.87,660.619 882.429,675.791 882.989,691.538 883.548,723.201 884.107,735.705 884.666,716.651 885.226,699.01 885.785,710.722 886.344,706.28 886.903,691.349 887.463,659.384 888.022,678.059 888.581,708.274 889.14,740.065 889.7,769.934 890.259,734.018 890.818,732.049 891.377,746.196 891.937,759.822 892.496,721.821 893.055,749.634 893.614,697.478 894.174,681.32 894.733,681.075 895.292,718.436 895.851,699.804 896.411,698.969 896.97,681.286 897.529,695.123 898.088,681.457 898.648,697.594 899.207,682.299 899.766,683.805 900.325,698.57 900.885,713.337 901.444,711.046 902.003,679.873 902.562,682.498 903.122,688.643 903.681,733.353 904.24,793.599 904.799,771.457 905.359,737.165 905.918,702.521 906.477,682.947 907.036,681.808 907.596,670.864 908.155,655.21 908.714,641.03 909.273,645.39 909.833,630.865 910.392,652.915 910.951,671.461 911.51,653.398 912.07,686.094 912.629,670.967 913.188,687.035 913.747,700.948 914.307,702.752 914.866,717.355 915.425,700.835 915.984,690.185 916.544,659.961 917.103,661.645 917.662,630.715 918.221,668.026 918.781,670.965 919.34,684.821 919.899,670.117 920.458,670.664 921.018,687.558 921.577,720.261 922.136,747.813 922.695,759.846 923.255,755.037 923.814,763.816 924.373,761.058 924.932,755.453 925.492,749.297 926.051,746.411 926.61,757.439 927.169,752.276 927.729,748.599 928.288,743.878 928.847,707.615 929.406,690.582 929.966,703.833 930.525,667.104 931.084,669.337 931.644,698.542 932.203,714.338 932.762,727.121 933.321,745.578 933.881,739.529 934.44,784.208 934.999,826.355 935.558,816.859 936.118,793.134 936.677,787.058 937.236,777.07 937.795,723.168 938.355,720.398 938.914,718.635 939.473,718.243 940.032,700.281 940.592,685.64 941.151,685.126 941.71,686.397 942.269,717.59 942.829,652.581 943.388,656.138 943.947,624.772 944.506,611.591 945.066,613.796 945.625,602.318 946.184,595.007 946.743,647.775 947.303,666.152 947.862,679.81 948.421,697.1 948.98,648.706 949.54,667.778 950.099,670.34 950.658,641.268 951.217,625.558 951.777,675.247 952.336,692.056 952.895,674.422 953.454,623.501 954.014,625.76 954.573,631.371 955.132,636.399 955.691,639.872 956.251,629.892 956.81,634.258 957.369,619.513 957.928,624.097 958.488,609.718 959.047,614.529 959.606,621.665 960.165,641.47 960.725,646.489 961.284,646.437 961.843,633.216 962.402,622.431 962.962,612.371 963.521,618.739 964.08,603.749 964.639,637.959 965.199,655.172 965.758,610.062 966.317,610.994 966.876,618.46 967.436,638.47 967.995,643.576 968.554,675.119 969.113,693.369 969.673,710.916 970.232,709.593 970.791,692.707 971.35,676.832 971.91,675.515 972.469,646.995 973.028,686.44 973.587,717.135 974.147,667.472 974.706,687.008 975.265,704.267 975.824,702.495 976.384,720.322 976.943,751.168 977.502,734.726 978.061,717.417 978.621,717.52 979.18,714.327 979.739,714.14 980.298,696.997 980.858,714.033 981.417,697.048 981.976,713.173 982.535,725.271 983.095,724.093 983.654,720.506 984.213,687.221 984.772,683.761 985.332,716.281 985.891,715.375 986.45,728.292 987.009,740.184 987.569,722.239 988.128,720.605 988.687,718.076 989.246,714.904 989.806,697.602 990.365,682.124 990.924,717.291 991.483,696.986 992.043,694.193 992.602,677.972 993.161,664.946 993.72,666.248 994.28,633.565 994.839,604.065 995.398,607.881 995.957,596.571 996.517,551.783 997.076,555.757 997.635,581.655 998.194,571.571 998.754,546.29 999.313,569.152 999.872,544.128 1000.43,533.739 1000.99,561.131 1001.55,586.144 1002.11,608.764 1002.67,596.071 1003.23,631.912 1003.79,603.383 1004.35,576.101 1004.91,598.492 1005.46,621.693 1006.02,623.861 1006.58,640.291 1007.14,629.992 1007.7,586.703 1008.26,610.138 1008.82,649.724 1009.38,670.164 1009.94,670.12 1010.5,638.766 1011.06,644.534 1011.62,632.811 1012.18,635.635 1012.73,673.232 1013.29,676.004 1013.85,658.789 1014.41,656.948 1014.97,656.391 1015.53,623.197 1016.09,608.092 1016.65,613.769 1017.21,632.599 1017.77,652.485 1018.33,669.753 1018.89,701.92 1019.45,669.887 1020.01,687.646 1020.56,689.174 1021.12,691.452 1021.68,687.782 1022.24,688.406 1022.8,720.347 1023.36,735.835 1023.92,732.209 1024.48,695.507 1025.04,691.728 1025.6,687.482 1026.16,720.106 1026.72,735.802 1027.28,716.919 1027.83,698.568 1028.39,693.027 1028.95,707.193 1029.51,689.933 1030.07,704.073 1030.63,703.474 1031.19,702.405 1031.75,735.044 1032.31,719.334 1032.87,717.999 1033.43,684.283 1033.99,688.345 1034.55,719.153 1035.1,719.495 1035.66,715.884 1036.22,698.619 1036.78,697.273 1037.34,750.096 1037.9,729.688 1038.46,747.189 1039.02,728.99 1039.58,710.275 1040.14,725.687 1040.7,742.022 1041.26,739.436 1041.82,737.451 1042.38,721.843 1042.93,717.042 1043.49,763.147 1044.05,728.286 1044.61,725.941 1045.17,707.646 1045.73,671.004 1046.29,657.287 1046.85,643.966 1047.41,651.617 1047.97,652.713 1048.53,609.997 1049.09,627.642 1049.65,644.825 1050.2,631.008 1050.76,631.258 1051.32,701.502 1051.88,732.245 1052.44,762.635 1053,759.191 1053.56,769.494 1054.12,763.41 1054.68,745.746 1055.24,776.478 1055.8,740.254 1056.36,735.177 1056.92,731.531 1057.48,728.711 1058.03,725.874 1058.59,738.168 1059.15,765.828 1059.71,779.127 1060.27,805.461 1060.83,781.291 1061.39,804.528 1061.95,783.095 1062.51,795.432 1063.07,774.912 1063.63,802.029 1064.19,812.461 1064.75,804.89 1065.3,831.192 1065.86,842.77 1066.42,832.469 1066.98,809.424 1067.54,783.322 1068.1,757.285 1068.66,772.687 1069.22,736.418 1069.78,734.121 1070.34,747.081 1070.9,742.486 1071.46,735.078 1072.02,747.243 1072.57,729.586 1073.13,713.69 1073.69,711.578 1074.25,677.496 1074.81,660.714 1075.37,660.326 1075.93,610.953 1076.49,596.581 1077.05,601.343 1077.61,586.696 1078.17,590.596 1078.73,560.427 1079.29,596.3 1079.85,619.632 1080.4,556.772 1080.96,548.192 1081.52,603.416 1082.08,607.263 1082.64,609.702 1083.2,615.173 1083.76,618.372 1084.32,637.552 1084.88,656.7 1085.44,641.132 1086,629.497 1086.56,663.094 1087.12,617.303 1087.67,639.549 1088.23,642.836 1088.79,656.856 1089.35,674.061 1089.91,658.937 1090.47,664.786 1091.03,681.983 1091.59,682.82 1092.15,702.21 1092.71,750.34 1093.27,747.101 1093.83,743.218 1094.39,739.44 1094.94,733.4 1095.5,730.687 1096.06,692.755 1096.62,737.525 1097.18,733.33 1097.74,715.01 1098.3,729.168 1098.86,727.823 1099.42,694.839 1099.98,694.286 1100.54,644.24 1101.1,633.959 1101.66,651.449 1102.22,668.291 1102.77,730.447 1103.33,744.057 1103.89,773.772 1104.45,767.52 1105.01,745.653 1105.57,709.343 1106.13,710.651 1106.69,677.754 1107.25,675.538 1107.81,661.629 1108.37,647.634 1108.93,682.102 1109.49,677.196 1110.04,649.429 1110.6,651.368 1111.16,667.962 1111.72,684.001 1112.28,667.338 1112.84,682.377 1113.4,715.952 1113.96,730.74 1114.52,726.393 1115.08,737.643 1115.64,703.897 1116.2,689.204 1116.76,703.7 1117.31,653.115 1117.87,655.356 1118.43,671.234 1118.99,703.628 1119.55,700.91 1120.11,716.12 1120.67,731.906 1121.23,760.895 1121.79,771.158 1122.35,768.994 1122.91,731.216 1123.47,747.134 1124.03,727.208 1124.59,690.181 1125.14,687.64 1125.7,653.37 1126.26,668.552 1126.82,685.055 1127.38,681.989 1127.94,680.47 1128.5,697.017 1129.06,682.29 1129.62,696.263 1130.18,698.486 1130.74,697.048 1131.3,696.273 1131.86,647.786 1132.41,630.554 1132.97,617.052 1133.53,633.869 1134.09,667.262 1134.65,683.831 1135.21,702.76 1135.77,683.902 1136.33,668.764 1136.89,717.096 1137.45,650.729 1138.01,669.163 1138.57,704.653 1139.13,672.08 1139.68,658.496 1140.24,662.431 1140.8,645.169 1141.36,661.268 1141.92,629.997 1142.48,616.381 1143.04,620.14 1143.6,625.229 1144.16,631.184 1144.72,634.285 1145.28,621.967 1145.84,628.752 1146.4,614.326 1146.96,621.054 1147.51,623.968 1148.07,625.224 1148.63,595.056 1149.19,617.863 1149.75,586.49 1150.31,623.759 1150.87,642.752 1151.43,674.929 1151.99,677.399 1152.55,662.395 1153.11,666.372 1153.67,669.899 1154.23,686.888 1154.78,657.804 1155.34,675.972 1155.9,659.16 1156.46,676.993 1157.02,648.048 1157.58,602.844 1158.14,607.11 1158.7,597.468 1159.26,600.122 1159.82,600.707 1160.38,602.803 1160.94,609.669 1161.5,617.13 1162.05,604.302 1162.61,644.443 1163.17,642.995 1163.73,674.115 1164.29,655.956 1164.85,709.03 1165.41,710.935 1165.97,709.989 1166.53,709.388 1167.09,727.745 1167.65,727.732 1168.21,725.422 1168.77,739.695 1169.33,724.553 1169.88,741.995 1170.44,719.067 1171,734.409 1171.56,749.518 1172.12,727.248 1172.68,708.192 1173.24,693.246 1173.8,689.626 1174.36,721.834 1174.92,705.553 1175.48,658.009 1176.04,691.677 1176.6,691.164 1177.15,693.143 1177.71,707.832 1178.27,673.22 1178.83,673.341 1179.39,690.201 1179.95,691.791 1180.51,661.854 1181.07,665.267 1181.63,684.914 1182.19,686.707 1182.75,654.355 1183.31,673.486 1183.87,690.264 1184.43,675.46 1184.98,688.604 1185.54,688.065 1186.1,702.19 1186.66,697.911 1187.22,698.306 1187.78,681.504 1188.34,692.662 1188.9,677.106 1189.46,676.267 1190.02,675.988 1190.58,659.061 1191.14,657.086 1191.7,643.184 1192.25,643.3 1192.81,595.693 1193.37,583.448 1193.93,635.36 1194.49,619.173 1195.05,640.031 1195.61,644.035 1196.17,644.45 1196.73,631.204 1197.29,633.35 1197.85,635.685 1198.41,636.867 1198.97,640.824 1199.52,639.828 1200.08,644.759 1200.64,647.192 1201.2,663.669 1201.76,644.499 1202.32,661.255 1202.88,659.329 1203.44,643.983 1204,629.983 1204.56,632.419 1205.12,634.969 1205.68,635.936 1206.24,687.204 1206.8,656.142 1207.35,641.707 1207.91,628.416 1208.47,662.525 1209.03,662.762 1209.59,665.697 1210.15,668.112 1210.71,657.373 1211.27,658.633 1211.83,595.329 1212.39,615.89 1212.95,603.15 1213.51,626.437 1214.07,709.829 1214.62,708.148 1215.18,675.62 1215.74,661.157 1216.3,660.137 1216.86,676.957 1217.42,658.447 1217.98,692.568 1218.54,692.399 1219.1,690.586 1219.66,707.122 1220.22,692.243 1220.78,661.343 1221.34,678.545 1221.89,679.514 1222.45,701.599 1223.01,669.154 1223.57,684.68 1224.13,702.662 1224.69,705.684 1225.25,674.215 1225.81,672.01 1226.37,687.972 1226.93,686.601 1227.49,688.349 1228.05,690.704 1228.61,677.708 1229.17,746.221 1229.72,761.606 1230.28,772.817 1230.84,767.964 1231.4,759.449 1231.96,737.457 1232.52,768.016 1233.08,714.011 1233.64,699.414 1234.2,701.129 1234.76,731.255 1235.32,730.531 1235.88,745.35 1236.44,724.553 1236.99,724.919 1237.55,723.89 1238.11,705.039 1238.67,700.064 1239.23,701.89 1239.79,668.346 1240.35,686.295 1240.91,652.919 1241.47,657.272 1242.03,643.03 1242.59,630.475 1243.15,666.229 1243.71,666.947 1244.26,670.166 1244.82,671.902 1245.38,670.444 1245.94,638.82 1246.5,626.654 1247.06,646.289 1247.62,649.75 1248.18,638.616 1248.74,639.333 1249.3,658.788 1249.86,674.288 1250.42,657.459 1250.98,647.55 1251.54,600.362 1252.09,619.561 1252.65,669.895 1253.21,671.214 1253.77,667.327 1254.33,654.62 1254.89,640.737 1255.45,674.289 1256.01,660.908 1256.57,658.311 1257.13,659.644 1257.69,628.578 1258.25,617.41 1258.81,618.258 1259.36,606.706 1259.92,611.972 1260.48,600.137 1261.04,603.262 1261.6,638.433 1262.16,670.604 1262.72,658.23 1263.28,676.751 1263.84,661.386 1264.4,697.069 1264.96,697.519 1265.52,696.178 1266.08,726.512 1266.63,724.586 1267.19,706.95 1267.75,721.908 1268.31,719.925 1268.87,717.987 1269.43,750.657 1269.99,730.546 1270.55,760.351 1271.11,771.579 1271.67,765.184 1272.23,766.294 1272.79,745.767 1273.35,743.287 1273.91,775.73 1274.46,769.385 1275.02,764.226 1275.58,757.554 1276.14,771.182 1276.7,748.946 1277.26,745.73 1277.82,690.972 1278.38,691.697 1278.94,705.375 1279.5,721.318 1280.06,737.507 1280.62,734.094 1281.18,747.129 1281.73,730.437 1282.29,723.313 1282.85,720.778 1283.41,722.488 1283.97,720.74 1284.53,715.912 1285.09,731.542 1285.65,731.045 1286.21,758.296 1286.77,785.132 1287.33,779.363 1287.89,788.785 1288.45,800.124 1289,790.041 1289.56,787.03 1290.12,779.896 1290.68,711.837 1291.24,727.379 1291.8,723.768 1292.36,718.911 1292.92,749.463 1293.48,747.031 1294.04,743.543 1294.6,739.764 1295.16,784.245 1295.72,775.04 1296.28,782.62 1296.83,795.546 1297.39,789.083 1297.95,768.135 1298.51,730.883 1299.07,728.789 1299.63,724.219 1300.19,736.637 1300.75,748.04 1301.31,745.332 1301.87,757.953 1302.43,785.742 1302.99,763.249 1303.55,725.02 1304.1,737.826 1304.66,769.199 1305.22,766.895 1305.78,806.857 1306.34,833.467 1306.9,807.672 1307.46,766.899 1308.02,746.557 1308.58,757.621 1309.14,739.913 1309.7,701.446 1310.26,698.686 1310.82,664.361 1311.38,614.522 1311.93,664.971 1312.49,684.391 1313.05,700.287 1313.61,717.121 1314.17,727.946 1314.73,743.357 1315.29,740.246 1315.85,735.564 1316.41,720.871 1316.97,699.934 1317.53,701.575 1318.09,683.265 1318.65,730.306 1319.2,711.42 1319.76,707.989 1320.32,688.618 1320.88,687.582 1321.44,668.857 1322,653.045 1322.56,671.116 1323.12,636.989 1323.68,639.641 1324.24,655.593 1324.8,640.191 1325.36,640.769 1325.92,629.142 1326.47,615.106 1327.03,623.215 1327.59,629.65 1328.15,696.056 1328.71,659.195 1329.27,673.553 1329.83,661.523 1330.39,614.886 1330.95,621.883 1331.51,609.233 1332.07,611.203 1332.63,598.191 1333.19,568.376 1333.75,573.003 1334.3,611.585 1334.86,580.765 1335.42,613.922 1335.98,617.893 1336.54,636.657 1337.1,640.454 1337.66,611.25 1338.22,615.621 1338.78,637.4 1339.34,636.378 1339.9,621.996 1340.46,626.836 1341.02,632.411 1341.57,635.873 1342.13,655.34 1342.69,640.55 1343.25,657.83 1343.81,676.12 1344.37,694.327 1344.93,696.679 1345.49,710.336 1346.05,697.802 1346.61,710.235 1347.17,694.17 1347.73,677.423 1348.29,663.568 1348.84,670.348 1349.4,656.435 1349.96,656.081 1350.52,658.104 1351.08,659.278 1351.64,662.376 1352.2,649.046 1352.76,651.127 1353.32,655.524 1353.88,672.275 1354.44,644.705 1355,663.145 1355.56,678.136 1356.12,663.68 1356.67,684.883 1357.23,700.382 1357.79,716.399 1358.35,686.537 1358.91,687.31 1359.47,686.284 1360.03,684.668 1360.59,702.172 1361.15,684.882 1361.71,654.822 1362.27,672.655 1362.83,691.081 1363.39,705.953 1363.94,723.776 1364.5,656.048 1365.06,690.205 1365.62,704.084 1366.18,704.456 1366.74,719.897 1367.3,717.455 1367.86,749.623 1368.42,753.734 1368.98,732.702 1369.54,729.322 1370.1,725.725 1370.66,738.851 1371.21,769.192 1371.77,762.943 1372.33,761.649 1372.89,775.382 1373.45,740.438 1374.01,773.045 1374.57,770.743 1375.13,782.93 1375.69,759.538 1376.25,705.69 1376.81,719.945 1377.37,750.147 1377.93,765.019 1378.49,761.232 1379.04,743.037 1379.6,708.103 1380.16,702.744 1380.72,735.686 1381.28,750.003 1381.84,732.734 1382.4,700.809 1382.96,685.487 1383.52,635.344 1384.08,653.733 1384.64,652.044 1385.2,637.125 1385.76,641.92 1386.31,677.855 1386.87,644.054 1387.43,614.941 1387.99,615.591 1388.55,620.784 1389.11,603.407 1389.67,591.215 1390.23,576.771 1390.79,582.591 1391.35,588.308 1391.91,610.523 1392.47,609.867 1393.03,661.535 1393.58,679.507 1394.14,692.925 1394.7,722.773 1395.26,736.28 1395.82,731.952 1396.38,727.153 1396.94,741.412 1397.5,734.62 1398.06,698.268 1398.62,718.309 1399.18,716.7 1399.74,715.144 1400.3,680.655 1400.86,715.755 1401.41,746.318 1401.97,699.569 1402.53,701.492 1403.09,683.269 1403.65,685.648 1404.21,703.288 1404.77,715.483 1405.33,699.29 1405.89,700.275 1406.45,684.357 1407.01,699.212 1407.57,747.755 1408.13,712.159 1408.68,692.795 1409.24,642.666 1409.8,646.588 1410.36,630.834 1410.92,632.969 1411.48,638.712 1412.04,644.258 1412.6,663.862 1413.16,646.24 1413.72,647.401 1414.28,649.229 1414.84,650.644 1415.4,653.27 1415.95,671.321 1416.51,653.275 1417.07,670.483 1417.63,653.466 1418.19,621.469 1418.75,627.882 1419.31,599.709 1419.87,607.236 1420.43,614.695 1420.99,617.619 1421.55,635.371 1422.11,637.912 1422.67,639.104 1423.23,623.318 1423.78,608.232 1424.34,614.919 1424.9,634.506 1425.46,653.357 1426.02,635.463 1426.58,655.787 1427.14,673.677 1427.7,680.499 1428.26,713.659 1428.82,712.686 1429.38,712.946 1429.94,728.47 1430.5,727.048 1431.05,730.623 1431.61,693.602 1432.17,677.4 1432.73,676.661 1433.29,674.9 1433.85,677.235 1434.41,667.483 1434.97,620.274 1435.53,627.048 1436.09,631.627 1436.65,667.436 1437.21,688.967 1437.77,675.235 1438.33,661.151 1438.88,666.916 1439.44,656.407 1440,655.565 1440.56,640.331 1441.12,629.461 1441.68,632.144 1442.24,652.003 1442.8,671.443 1443.36,673.616 1443.92,639.864 1444.48,660.21 1445.04,658.013 1445.6,657.193 1446.15,640.119 1446.71,660.939 1447.27,675.589 1447.83,676.025 1448.39,693.102 1448.95,692.897 1449.51,692.592 1450.07,725.928 1450.63,725.761 1451.19,724.502 1451.75,689.061 1452.31,686.503 1452.87,703.347 1453.42,749.543 1453.98,750.922 1454.54,744.392 1455.1,725.224 1455.66,726.904 1456.22,695.726 1456.78,729.424 1457.34,728.091 1457.9,759.436 1458.46,740.057 1459.02,758.243 1459.58,800.779 1460.14,774.505 1460.7,738.472 1461.25,752.849 1461.81,762.527 1462.37,789.906 1462.93,798.783 1463.49,806.907 1464.05,816.624 1464.61,807.944 1465.17,801.223 1465.73,797.283 1466.29,789.423 1466.85,786.6 1467.41,798.851 1467.97,824.077 1468.52,813.323 1469.08,808.072 1469.64,813.689 1470.2,806.584 1470.76,782.557 1471.32,779.04 1471.88,773.249 1472.44,754.9 1473,715.721 1473.56,729.071 1474.12,730.122 1474.68,710.287 1475.24,692.957 1475.79,658.788 1476.35,659.832 1476.91,663.918 1477.47,633.498 1478.03,634.63 1478.59,632.368 1479.15,616.502 1479.71,616.88 1480.27,654.295 1480.83,668.362 1481.39,697.664 1481.95,694.695 1482.51,661.426 1483.07,681.458 1483.62,681.228 1484.18,682.534 1484.74,681.454 1485.3,652.253 1485.86,638.816 1486.42,656.452 1486.98,657.819 1487.54,679.795 1488.1,699.309 1488.66,700.76 1489.22,734.391 1489.78,747.606 1490.34,726.163 1490.89,694.954 1491.45,706.738 1492.01,719.073 1492.57,685.222 1493.13,699.173 1493.69,697.474 1494.25,716.22 1494.81,730.458 1495.37,709.718 1495.93,739.233 1496.49,734.665 1497.05,731.319 1497.61,728.056 1498.16,708.065 1498.72,693.517 1499.28,727.798 1499.84,727.799 1500.4,710.477 1500.96,740.619 1501.52,757.763 1502.08,720.99 1502.64,669.333 1503.2,654.551 1503.76,590.574 1504.32,595.598 1504.88,564.79 1505.44,557.521 1505.99,580.142 1506.55,582.862 1507.11,600.272 1507.67,617.083 1508.23,648.963 1508.79,635.884 1509.35,670.524 1509.91,670.396 1510.47,721.098 1511.03,653.734 1511.59,676.248 1512.15,628.201 1512.71,633.335 1513.26,670.281 1513.82,671.096 1514.38,638.122 1514.94,656.301 1515.5,688.205 1516.06,705.31 1516.62,659.022 1517.18,647.352 1517.74,662.063 1518.3,647.349 1518.86,649.048 1519.42,671.43 1519.98,675.85 1520.53,645.477 1521.09,662.89 1521.65,679.896 1522.21,680.901 1522.77,713.962 1523.33,680.625 1523.89,682.803 1524.45,697.233 1525.01,669.281 1525.57,674.001 1526.13,688.536 1526.69,701.963 1527.25,684.717 1527.81,653.218 1528.36,657.357 1528.92,660.817 1529.48,693.069 1530.04,697.426 1530.6,678.34 1531.16,677.705 1531.72,663.116 1532.28,695.482 1532.84,681.214 1533.4,697.593 1533.96,666.751 1534.52,715.308 1535.08,698.402 1535.63,679.514 1536.19,648.566 1536.75,667.904 1537.31,686.502 1537.87,686.88 1538.43,657.52 1538.99,659.604 1539.55,676.93 1540.11,692.682 1540.67,679.193 1541.23,697.697 1541.79,678.092 1542.35,728.929 1542.9,726.645 1543.46,707.872 1544.02,721.413 1544.58,685.478 1545.14,716.545 1545.7,716.483 1546.26,729.798 1546.82,729.825 1547.38,743.493 1547.94,737.834 1548.5,702.547 1549.06,720.615 1549.62,755.53 1550.18,736.754 1550.73,748.902 1551.29,743.76 1551.85,753.347 1552.41,699.442 1552.97,714.815 1553.53,745.384 1554.09,712.147 1554.65,716.583 1555.21,700.479 1555.77,700.36 1556.33,683.656 1556.89,684.161 1557.45,669.174 1558,685.251 1558.56,664.654 1559.12,697.15 1559.68,676.979 1560.24,677.806 1560.8,676.683 1561.36,661.77 1561.92,629.943 1562.48,665.126 1563.04,665.91 1563.6,699.518 1564.16,716.954 1564.72,681.571 1565.28,684.019 1565.83,701.777 1566.39,698.095 1566.95,692.793 1567.51,710.543 1568.07,694.29 1568.63,724.332 1569.19,724.094 1569.75,754.081 1570.31,700.935 1570.87,700.303 1571.43,668.87 1571.99,691.405 1572.55,691.583 1573.1,675.995 1573.66,658.483 1574.22,644.528 1574.78,649.076 1575.34,662.373 1575.9,663.368 1576.46,663.99 1577.02,681.407 1577.58,648.829 1578.14,649.128 1578.7,649.412 1579.26,683.544 1579.82,667.455 1580.37,654.184 1580.93,621.806 1581.49,606.669 1582.05,611.786 1582.61,598.668 1583.17,619.922 1583.73,644.102 1584.29,677.65 1584.85,661.134 1585.41,662.18 1585.97,711.967 1586.53,682.921 1587.09,678.71 1587.65,682.247 1588.2,733.129 1588.76,715.174 1589.32,742.727 1589.88,739.752 1590.44,751.397 1591,763.52 1591.56,743.333 1592.12,736.967 1592.68,732.674 1593.24,746.788 1593.8,744.368 1594.36,706.573 1594.92,690.446 1595.47,691.772 1596.03,708.871 1596.59,654.664 1597.15,684.262 1597.71,698.389 1598.27,678.478 1598.83,675.76 1599.39,661.819 1599.95,663.108 1600.51,650.461 1601.07,665.372 1601.63,665.225 1602.19,669.185 1602.74,669.157 1603.3,669.351 1603.86,685.87 1604.42,666.228 1604.98,649.718 1605.54,652.147 1606.1,654.808 1606.66,634.745 1607.22,638.631 1607.78,622.466 1608.34,624.37 1608.9,642.925 1609.46,645.034 1610.02,646.012 1610.57,629.424 1611.13,630.154 1611.69,631.41 1612.25,654.416 1612.81,668.465 1613.37,670.207 1613.93,685.807 1614.49,703.339 1615.05,701.323 1615.61,700.48 1616.17,714.588 1616.73,678.057 1617.29,711.858 1617.84,648.107 1618.4,646.943 1618.96,645.801 1619.52,664.547 1620.08,637.65 1620.64,640.296 1621.2,658.866 1621.76,559.987 1622.32,568.153 1622.88,574.945 1623.44,580.962 1624,602.68 1624.56,619.038 1625.11,608.214 1625.67,614.94 1626.23,603.303 1626.79,595.081 1627.35,618.105 1627.91,640.668 1628.47,662.472 1629.03,666.707 1629.59,638.664 1630.15,641.172 1630.71,657.891 1631.27,645.085 1631.83,665.308 1632.39,680.473 1632.94,663.909 1633.5,695.772 1634.06,663.162 1634.62,666.072 1635.18,619.312 1635.74,624.94 1636.3,659.692 1636.86,629.254 1637.42,630.328 1637.98,636.025 1638.54,619.961 1639.1,623.677 1639.66,623.763 1640.21,612.761 1640.77,634.053 1641.33,667.878 1641.89,654.382 1642.45,656.166 1643.01,640.432 1643.57,609.04 1644.13,632.001 1644.69,650.812 1645.25,651.971 1645.81,653.291 1646.37,654.211 1646.93,641.942 1647.48,645.843 1648.04,651.462 1648.6,669.182 1649.16,641.509 1649.72,697.484 1650.28,698.636 1650.84,729.177 1651.4,729.772 1651.96,728.499 1652.52,754.651 1653.08,769.435 1653.64,750.449 1654.2,765.732 1654.76,777.693 1655.31,755.639 1655.87,769.338 1656.43,747.296 1656.99,726.533 1657.55,769.511 1658.11,746.888 1658.67,775.137 1659.23,770.521 1659.79,719.311 1660.35,683.547 1660.91,703.152 1661.47,705.531 1662.03,686.565 1662.58,701.694 1663.14,649.381 1663.7,601.599 1664.26,592.436 1664.82,630.951 1665.38,631.647 1665.94,648.876 1666.5,665.915 1667.06,666.632 1667.62,685.619 1668.18,670.737 1668.74,685.238 1669.3,685.866 1669.85,685.554 1670.41,698.991 1670.97,681.553 1671.53,681.62 1672.09,694.051 1672.65,692.822 1673.21,708.166 1673.77,709.382 1674.33,704.542 1674.89,686.054 1675.45,684.595 1676.01,697.092 1676.57,726.355 1677.13,740.705 1677.68,737.413 1678.24,722.364 1678.8,689.375 1679.36,670.007 1679.92,651.612 1680.48,653.268 1681.04,668.653 1681.6,649.296 1682.16,617.985 1682.72,622.482 1683.28,668.735 1683.84,668.853 1684.4,716.498 1684.95,711.586 1685.51,692.081 1686.07,670.845 1686.63,620.337 1687.19,619.315 1687.75,609.83 1688.31,612.163 1688.87,632.745 1689.43,636.503 1689.99,650.64 1690.55,667.632 1691.11,683.002 1691.67,680.047 1692.23,678.15 1692.78,747.158 1693.34,727.864 1693.9,727.439 1694.46,756.389 1695.02,751.33 1695.58,748.881 1696.14,747.575 1696.7,776.016 1697.26,773.438 1697.82,753.562 1698.38,765.628 1698.94,743.606 1699.5,723.334 1700.05,703.057 1700.61,701.378 1701.17,731.625 1701.73,745.505 1702.29,739.295 1702.85,765.817 1703.41,745.19 1703.97,742.317 1704.53,736.871 1705.09,717.155 1705.65,748.086 1706.21,774.83 1706.77,756.656 1707.32,785.07 1707.88,790.993 1708.44,770.109 1709,749.723 1709.56,761.957 1710.12,743.524 1710.68,704.072 1711.24,686.792 1711.8,684.781 1712.36,684.549 1712.92,702.296 1713.48,684.907 1714.04,649.512 1714.6,632.825 1715.15,631.528 1715.71,634.18 1716.27,620.541 1716.83,606.921 1717.39,627.394 1717.95,634.216 1718.51,620.249 1719.07,608.822 1719.63,625.9 1720.19,648.165 1720.75,665.34 1721.31,636.068 1721.87,619.009 1722.42,625.448 1722.98,629.133 1723.54,631.633 1724.1,620.806 1724.66,622.953 1725.22,626.768 1725.78,615.549 1726.34,601.36 1726.9,604.707 1727.46,640.305 1728.02,607.765 1728.58,611.891 1729.14,631.937 1729.69,632.873 1730.25,619.406 1730.81,621.211 1731.37,624.93 1731.93,693.124 1732.49,673.515 1733.05,657.002 1733.61,645.192 1734.17,628.731 1734.73,615.951 1735.29,587.019 1735.85,589.631 1736.41,628.796 1736.97,631.105 1737.52,602.235 1738.08,610.356 1738.64,615.336 1739.2,621.424 1739.76,609.294 1740.32,646.894 1740.88,663.178 1741.44,682.468 1742,649.991 1742.56,668.504 1743.12,700.821 1743.68,684.459 1744.24,699.772 1744.79,682.091 1745.35,664.179 1745.91,650.477 1746.47,655.784 1747.03,625.283 1747.59,610.6 1748.15,647.382 1748.71,651.964 1749.27,670.264 1749.83,687.922 1750.39,733.487 1750.95,715.766 1751.51,701.471 1752.06,684.371 1752.62,684.402 1753.18,668.171 1753.74,684.997 1754.3,675.227 1754.86,678.842 1755.42,680.185 1755.98,680.267 1756.54,694.181 1757.1,694.922 1757.66,696.273 1758.22,708.613 1758.78,705.597 1759.34,719.281 1759.89,705.918 1760.45,710.164 1761.01,708.92 1761.57,691.511 1762.13,679.799 1762.69,697.631 1763.25,730.21 1763.81,744.262 1764.37,720.738 1764.93,721.031 1765.49,688.639 1766.05,701.93 1766.61,699.708 1767.16,685.78 1767.72,686.527 1768.28,682.708 1768.84,681.761 1769.4,696.417 1769.96,697.255 1770.52,682.51 1771.08,700.707 1771.64,696.351 1772.2,709.643 1772.76,724.897 1773.32,721.108 1773.88,718.035 1774.43,699.809 1774.99,679.325 1775.55,648.568 1776.11,651.48 1776.67,671.994 1777.23,654.674 1777.79,676.668 1778.35,676.023 1778.91,689.915 1779.47,708.756 1780.03,721.354 1780.59,718.439 1781.15,718.905 1781.71,721.978 1782.26,750.895 1782.82,765.257 1783.38,748.146 1783.94,731.484 1784.5,763.824 1785.06,759.814 1785.62,739.82 1786.18,717.084 1786.74,749.302 1787.3,727.015 1787.86,721.45 1788.42,702.098 1788.98,701.255 1789.53,702.296 1790.09,714.159 1790.65,714.936 1791.21,698.368 1791.77,715.448 1792.33,697.575 1792.89,679.743 1793.45,714.48 1794.01,676.607 1794.57,693.371 1795.13,711.247 1795.69,709.745 1796.25,710.636 1796.8,739.718 1797.36,686 1797.92,701.066 1798.48,682.459 1799.04,697.359 1799.6,696.412 1800.16,681.694 1800.72,685.24 1801.28,672.591 1801.84,638.632 1802.4,592.114 1802.96,582.49 1803.52,604.086 1804.08,610.586 1804.63,632.395 1805.19,652.385 1805.75,618.657 1806.31,622.167 1806.87,621.215 1807.43,628.224 1807.99,634.422 1808.55,620.69 1809.11,624.036 1809.67,627.344 1810.23,630.451 1810.79,628.528 1811.35,695.763 1811.9,660.941 1812.46,677.987 1813.02,648.763 1813.58,651.64 1814.14,681.715 1814.7,694.172 1815.26,695.307 1815.82,695.379 1816.38,698.677 1816.94,710.733 1817.5,724.663 1818.06,703.577 1818.62,735.004 1819.18,734.475 1819.73,733.442 1820.29,728.749 1820.85,706.876 1821.41,702.098 1821.97,745.847 1822.53,741.481 1823.09,750.344 1823.65,716.904 1824.21,698.156 1824.77,680.279 1825.33,666.436 1825.89,637.508 1826.45,653.482 1827,656.155 1827.56,674.716 1828.12,689.558 1828.68,705.187 1829.24,717.051 1829.8,765.026 1830.36,730.081 1830.92,731.073 1831.48,695.599 1832.04,725.38 1832.6,705.953 1833.16,690.801 1833.72,676.171 1834.27,709.812 1834.83,659.591 1835.39,643.515 1835.95,641.824 1836.51,626.192 1837.07,611.816 1837.63,612.476 1838.19,584.265 \"/>\n<path clip-path=\"url(#clip563)\" d=\"M720.247 690.047 L720.806 690.047 L721.365 690.047 L721.924 690.047 L722.484 690.047 L723.043 690.047 L723.602 690.047 L724.161 690.047 L724.721 690.047 L725.28 690.047 L725.839 690.047 L726.398 690.047 L726.958 690.047 L727.517 690.047 L728.076 690.047 L728.635 690.047 L729.195 690.047 L729.754 690.047 L730.313 690.047 L730.872 690.047 L731.432 690.047 L731.991 690.047 L732.55 690.047 L733.109 690.047 L733.669 690.047 L734.228 690.047 L734.787 690.047 L735.346 690.047 L735.906 690.047 L736.465 690.047 L737.024 690.047 L737.583 690.047 L738.143 690.047 L738.702 690.047 L739.261 690.047 L739.82 690.047 L740.38 690.047 L740.939 690.047 L741.498 690.047 L742.057 690.047 L742.617 690.047 L743.176 690.047 L743.735 690.047 L744.294 690.047 L744.854 690.047 L745.413 690.047 L745.972 690.047 L746.531 690.047 L747.091 690.047 L747.65 690.047 L748.209 690.047 L748.768 690.047 L749.328 690.047 L749.887 690.047 L750.446 690.047 L751.005 690.047 L751.565 690.047 L752.124 690.047 L752.683 690.047 L753.242 690.047 L753.802 690.047 L754.361 690.047 L754.92 690.047 L755.479 690.047 L756.039 690.047 L756.598 690.047 L757.157 690.047 L757.716 690.047 L758.276 690.047 L758.835 690.047 L759.394 690.047 L759.953 690.047 L760.513 690.047 L761.072 690.047 L761.631 690.047 L762.19 690.047 L762.75 690.047 L763.309 690.047 L763.868 690.047 L764.427 690.047 L764.987 690.047 L765.546 690.047 L766.105 690.047 L766.664 690.047 L767.224 690.047 L767.783 690.047 L768.342 690.047 L768.901 690.047 L769.461 690.047 L770.02 690.047 L770.579 690.047 L771.138 690.047 L771.698 690.047 L772.257 690.047 L772.816 690.047 L773.375 690.047 L773.935 690.047 L774.494 690.047 L775.053 690.047 L775.612 690.047 L776.172 690.047 L776.731 690.047 L777.29 690.047 L777.849 690.047 L778.409 690.047 L778.968 690.047 L779.527 690.047 L780.086 690.047 L780.646 690.047 L781.205 690.047 L781.764 690.047 L782.323 690.047 L782.883 690.047 L783.442 690.047 L784.001 690.047 L784.56 690.047 L785.12 690.047 L785.679 690.047 L786.238 690.047 L786.797 690.047 L787.357 690.047 L787.916 690.047 L788.475 690.047 L789.034 690.047 L789.594 690.047 L790.153 690.047 L790.712 690.047 L791.271 690.047 L791.831 690.047 L792.39 690.047 L792.949 690.047 L793.508 690.047 L794.068 690.047 L794.627 690.047 L795.186 690.047 L795.745 690.047 L796.305 690.047 L796.864 690.047 L797.423 690.047 L797.982 690.047 L798.542 690.047 L799.101 690.047 L799.66 690.047 L800.219 690.047 L800.779 690.047 L801.338 690.047 L801.897 690.047 L802.456 690.047 L803.016 690.047 L803.575 690.047 L804.134 690.047 L804.693 690.047 L805.253 690.047 L805.812 690.047 L806.371 690.047 L806.931 690.047 L807.49 690.047 L808.049 690.047 L808.608 690.047 L809.168 690.047 L809.727 690.047 L810.286 690.047 L810.845 690.047 L811.405 690.047 L811.964 690.047 L812.523 690.047 L813.082 690.047 L813.642 690.047 L814.201 690.047 L814.76 690.047 L815.319 690.047 L815.879 690.047 L816.438 690.047 L816.997 690.047 L817.556 690.047 L818.116 690.047 L818.675 690.047 L819.234 690.047 L819.793 690.047 L820.353 690.047 L820.912 690.047 L821.471 690.047 L822.03 690.047 L822.59 690.047 L823.149 690.047 L823.708 690.047 L824.267 690.047 L824.827 690.047 L825.386 690.047 L825.945 690.047 L826.504 690.047 L827.064 690.047 L827.623 690.047 L828.182 690.047 L828.741 690.047 L829.301 690.047 L829.86 690.047 L830.419 690.047 L830.978 690.047 L831.538 690.047 L832.097 690.047 L832.656 690.047 L833.215 690.047 L833.775 690.047 L834.334 690.047 L834.893 690.047 L835.452 690.047 L836.012 690.047 L836.571 690.047 L837.13 690.047 L837.689 690.047 L838.249 690.047 L838.808 690.047 L839.367 690.047 L839.926 690.047 L840.486 690.047 L841.045 690.047 L841.604 690.047 L842.163 690.047 L842.723 690.047 L843.282 690.047 L843.841 690.047 L844.4 690.047 L844.96 690.047 L845.519 690.047 L846.078 690.047 L846.637 690.047 L847.197 690.047 L847.756 690.047 L848.315 690.047 L848.874 690.047 L849.434 690.047 L849.993 690.047 L850.552 690.047 L851.111 690.047 L851.671 690.047 L852.23 690.047 L852.789 690.047 L853.348 690.047 L853.908 690.047 L854.467 690.047 L855.026 690.047 L855.585 690.047 L856.145 690.047 L856.704 690.047 L857.263 690.047 L857.822 690.047 L858.382 690.047 L858.941 690.047 L859.5 690.047 L860.059 690.047 L860.619 690.047 L861.178 690.047 L861.737 690.047 L862.296 690.047 L862.856 690.047 L863.415 690.047 L863.974 690.047 L864.533 690.047 L865.093 690.047 L865.652 690.047 L866.211 690.047 L866.77 690.047 L867.33 690.047 L867.889 690.047 L868.448 690.047 L869.007 690.047 L869.567 690.047 L870.126 690.047 L870.685 690.047 L871.244 690.047 L871.804 690.047 L872.363 690.047 L872.922 690.047 L873.481 690.047 L874.041 690.047 L874.6 690.047 L875.159 690.047 L875.718 690.047 L876.278 690.047 L876.837 690.047 L877.396 690.047 L877.955 690.047 L878.515 690.047 L879.074 690.047 L879.633 690.047 L880.192 690.047 L880.752 690.047 L881.311 690.047 L881.87 690.047 L882.429 690.047 L882.989 690.047 L883.548 690.047 L884.107 690.047 L884.666 690.047 L885.226 690.047 L885.785 690.047 L886.344 690.047 L886.903 690.047 L887.463 690.047 L888.022 690.047 L888.581 690.047 L889.14 690.047 L889.7 690.047 L890.259 690.047 L890.818 690.047 L891.377 690.047 L891.937 690.047 L892.496 690.047 L893.055 690.047 L893.614 690.047 L894.174 690.047 L894.733 690.047 L895.292 690.047 L895.851 690.047 L896.411 690.047 L896.97 690.047 L897.529 690.047 L898.088 690.047 L898.648 690.047 L899.207 690.047 L899.766 690.047 L900.325 690.047 L900.885 690.047 L901.444 690.047 L902.003 690.047 L902.562 690.047 L903.122 690.047 L903.681 690.047 L904.24 690.047 L904.799 690.047 L905.359 690.047 L905.918 690.047 L906.477 690.047 L907.036 690.047 L907.596 690.047 L908.155 690.047 L908.714 690.047 L909.273 690.047 L909.833 690.047 L910.392 690.047 L910.951 690.047 L911.51 690.047 L912.07 690.047 L912.629 690.047 L913.188 690.047 L913.747 690.047 L914.307 690.047 L914.866 690.047 L915.425 690.047 L915.984 690.047 L916.544 690.047 L917.103 690.047 L917.662 690.047 L918.221 690.047 L918.781 690.047 L919.34 690.047 L919.899 690.047 L920.458 690.047 L921.018 690.047 L921.577 690.047 L922.136 690.047 L922.695 690.047 L923.255 690.047 L923.814 690.047 L924.373 690.047 L924.932 690.047 L925.492 690.047 L926.051 690.047 L926.61 690.047 L927.169 690.047 L927.729 690.047 L928.288 690.047 L928.847 690.047 L929.406 690.047 L929.966 690.047 L930.525 690.047 L931.084 690.047 L931.644 690.047 L932.203 690.047 L932.762 690.047 L933.321 690.047 L933.881 690.047 L934.44 690.047 L934.999 690.047 L935.558 690.047 L936.118 690.047 L936.677 690.047 L937.236 690.047 L937.795 690.047 L938.355 690.047 L938.914 690.047 L939.473 690.047 L940.032 690.047 L940.592 690.047 L941.151 690.047 L941.71 690.047 L942.269 690.047 L942.829 690.047 L943.388 690.047 L943.947 690.047 L944.506 690.047 L945.066 690.047 L945.625 690.047 L946.184 690.047 L946.743 690.047 L947.303 690.047 L947.862 690.047 L948.421 690.047 L948.98 690.047 L949.54 690.047 L950.099 690.047 L950.658 690.047 L951.217 690.047 L951.777 690.047 L952.336 690.047 L952.895 690.047 L953.454 690.047 L954.014 690.047 L954.573 690.047 L955.132 690.047 L955.691 690.047 L956.251 690.047 L956.81 690.047 L957.369 690.047 L957.928 690.047 L958.488 690.047 L959.047 690.047 L959.606 690.047 L960.165 690.047 L960.725 690.047 L961.284 690.047 L961.843 690.047 L962.402 690.047 L962.962 690.047 L963.521 690.047 L964.08 690.047 L964.639 690.047 L965.199 690.047 L965.758 690.047 L966.317 690.047 L966.876 690.047 L967.436 690.047 L967.995 690.047 L968.554 690.047 L969.113 690.047 L969.673 690.047 L970.232 690.047 L970.791 690.047 L971.35 690.047 L971.91 690.047 L972.469 690.047 L973.028 690.047 L973.587 690.047 L974.147 690.047 L974.706 690.047 L975.265 690.047 L975.824 690.047 L976.384 690.047 L976.943 690.047 L977.502 690.047 L978.061 690.047 L978.621 690.047 L979.18 690.047 L979.739 690.047 L980.298 690.047 L980.858 690.047 L981.417 690.047 L981.976 690.047 L982.535 690.047 L983.095 690.047 L983.654 690.047 L984.213 690.047 L984.772 690.047 L985.332 690.047 L985.891 690.047 L986.45 690.047 L987.009 690.047 L987.569 690.047 L988.128 690.047 L988.687 690.047 L989.246 690.047 L989.806 690.047 L990.365 690.047 L990.924 690.047 L991.483 690.047 L992.043 690.047 L992.602 690.047 L993.161 690.047 L993.72 690.047 L994.28 690.047 L994.839 690.047 L995.398 690.047 L995.957 690.047 L996.517 690.047 L997.076 690.047 L997.635 690.047 L998.194 690.047 L998.754 690.047 L999.313 690.047 L999.872 690.047 L1000.43 690.047 L1000.99 690.047 L1001.55 690.047 L1002.11 690.047 L1002.67 690.047 L1003.23 690.047 L1003.79 690.047 L1004.35 690.047 L1004.91 690.047 L1005.46 690.047 L1006.02 690.047 L1006.58 690.047 L1007.14 690.047 L1007.7 690.047 L1008.26 690.047 L1008.82 690.047 L1009.38 690.047 L1009.94 690.047 L1010.5 690.047 L1011.06 690.047 L1011.62 690.047 L1012.18 690.047 L1012.73 690.047 L1013.29 690.047 L1013.85 690.047 L1014.41 690.047 L1014.97 690.047 L1015.53 690.047 L1016.09 690.047 L1016.65 690.047 L1017.21 690.047 L1017.77 690.047 L1018.33 690.047 L1018.89 690.047 L1019.45 690.047 L1020.01 690.047 L1020.56 690.047 L1021.12 690.047 L1021.68 690.047 L1022.24 690.047 L1022.8 690.047 L1023.36 690.047 L1023.92 690.047 L1024.48 690.047 L1025.04 690.047 L1025.6 690.047 L1026.16 690.047 L1026.72 690.047 L1027.28 690.047 L1027.83 690.047 L1028.39 690.047 L1028.95 690.047 L1029.51 690.047 L1030.07 690.047 L1030.63 690.047 L1031.19 690.047 L1031.75 690.047 L1032.31 690.047 L1032.87 690.047 L1033.43 690.047 L1033.99 690.047 L1034.55 690.047 L1035.1 690.047 L1035.66 690.047 L1036.22 690.047 L1036.78 690.047 L1037.34 690.047 L1037.9 690.047 L1038.46 690.047 L1039.02 690.047 L1039.58 690.047 L1040.14 690.047 L1040.7 690.047 L1041.26 690.047 L1041.82 690.047 L1042.38 690.047 L1042.93 690.047 L1043.49 690.047 L1044.05 690.047 L1044.61 690.047 L1045.17 690.047 L1045.73 690.047 L1046.29 690.047 L1046.85 690.047 L1047.41 690.047 L1047.97 690.047 L1048.53 690.047 L1049.09 690.047 L1049.65 690.047 L1050.2 690.047 L1050.76 690.047 L1051.32 690.047 L1051.88 690.047 L1052.44 690.047 L1053 690.047 L1053.56 690.047 L1054.12 690.047 L1054.68 690.047 L1055.24 690.047 L1055.8 690.047 L1056.36 690.047 L1056.92 690.047 L1057.48 690.047 L1058.03 690.047 L1058.59 690.047 L1059.15 690.047 L1059.71 690.047 L1060.27 690.047 L1060.83 690.047 L1061.39 690.047 L1061.95 690.047 L1062.51 690.047 L1063.07 690.047 L1063.63 690.047 L1064.19 690.047 L1064.75 690.047 L1065.3 690.047 L1065.86 690.047 L1066.42 690.047 L1066.98 690.047 L1067.54 690.047 L1068.1 690.047 L1068.66 690.047 L1069.22 690.047 L1069.78 690.047 L1070.34 690.047 L1070.9 690.047 L1071.46 690.047 L1072.02 690.047 L1072.57 690.047 L1073.13 690.047 L1073.69 690.047 L1074.25 690.047 L1074.81 690.047 L1075.37 690.047 L1075.93 690.047 L1076.49 690.047 L1077.05 690.047 L1077.61 690.047 L1078.17 690.047 L1078.73 690.047 L1079.29 690.047 L1079.85 690.047 L1080.4 690.047 L1080.96 690.047 L1081.52 690.047 L1082.08 690.047 L1082.64 690.047 L1083.2 690.047 L1083.76 690.047 L1084.32 690.047 L1084.88 690.047 L1085.44 690.047 L1086 690.047 L1086.56 690.047 L1087.12 690.047 L1087.67 690.047 L1088.23 690.047 L1088.79 690.047 L1089.35 690.047 L1089.91 690.047 L1090.47 690.047 L1091.03 690.047 L1091.59 690.047 L1092.15 690.047 L1092.71 690.047 L1093.27 690.047 L1093.83 690.047 L1094.39 690.047 L1094.94 690.047 L1095.5 690.047 L1096.06 690.047 L1096.62 690.047 L1097.18 690.047 L1097.74 690.047 L1098.3 690.047 L1098.86 690.047 L1099.42 690.047 L1099.98 690.047 L1100.54 690.047 L1101.1 690.047 L1101.66 690.047 L1102.22 690.047 L1102.77 690.047 L1103.33 690.047 L1103.89 690.047 L1104.45 690.047 L1105.01 690.047 L1105.57 690.047 L1106.13 690.047 L1106.69 690.047 L1107.25 690.047 L1107.81 690.047 L1108.37 690.047 L1108.93 690.047 L1109.49 690.047 L1110.04 690.047 L1110.6 690.047 L1111.16 690.047 L1111.72 690.047 L1112.28 690.047 L1112.84 690.047 L1113.4 690.047 L1113.96 690.047 L1114.52 690.047 L1115.08 690.047 L1115.64 690.047 L1116.2 690.047 L1116.76 690.047 L1117.31 690.047 L1117.87 690.047 L1118.43 690.047 L1118.99 690.047 L1119.55 690.047 L1120.11 690.047 L1120.67 690.047 L1121.23 690.047 L1121.79 690.047 L1122.35 690.047 L1122.91 690.047 L1123.47 690.047 L1124.03 690.047 L1124.59 690.047 L1125.14 690.047 L1125.7 690.047 L1126.26 690.047 L1126.82 690.047 L1127.38 690.047 L1127.94 690.047 L1128.5 690.047 L1129.06 690.047 L1129.62 690.047 L1130.18 690.047 L1130.74 690.047 L1131.3 690.047 L1131.86 690.047 L1132.41 690.047 L1132.97 690.047 L1133.53 690.047 L1134.09 690.047 L1134.65 690.047 L1135.21 690.047 L1135.77 690.047 L1136.33 690.047 L1136.89 690.047 L1137.45 690.047 L1138.01 690.047 L1138.57 690.047 L1139.13 690.047 L1139.68 690.047 L1140.24 690.047 L1140.8 690.047 L1141.36 690.047 L1141.92 690.047 L1142.48 690.047 L1143.04 690.047 L1143.6 690.047 L1144.16 690.047 L1144.72 690.047 L1145.28 690.047 L1145.84 690.047 L1146.4 690.047 L1146.96 690.047 L1147.51 690.047 L1148.07 690.047 L1148.63 690.047 L1149.19 690.047 L1149.75 690.047 L1150.31 690.047 L1150.87 690.047 L1151.43 690.047 L1151.99 690.047 L1152.55 690.047 L1153.11 690.047 L1153.67 690.047 L1154.23 690.047 L1154.78 690.047 L1155.34 690.047 L1155.9 690.047 L1156.46 690.047 L1157.02 690.047 L1157.58 690.047 L1158.14 690.047 L1158.7 690.047 L1159.26 690.047 L1159.82 690.047 L1160.38 690.047 L1160.94 690.047 L1161.5 690.047 L1162.05 690.047 L1162.61 690.047 L1163.17 690.047 L1163.73 690.047 L1164.29 690.047 L1164.85 690.047 L1165.41 690.047 L1165.97 690.047 L1166.53 690.047 L1167.09 690.047 L1167.65 690.047 L1168.21 690.047 L1168.77 690.047 L1169.33 690.047 L1169.88 690.047 L1170.44 690.047 L1171 690.047 L1171.56 690.047 L1172.12 690.047 L1172.68 690.047 L1173.24 690.047 L1173.8 690.047 L1174.36 690.047 L1174.92 690.047 L1175.48 690.047 L1176.04 690.047 L1176.6 690.047 L1177.15 690.047 L1177.71 690.047 L1178.27 690.047 L1178.83 690.047 L1179.39 690.047 L1179.95 690.047 L1180.51 690.047 L1181.07 690.047 L1181.63 690.047 L1182.19 690.047 L1182.75 690.047 L1183.31 690.047 L1183.87 690.047 L1184.43 690.047 L1184.98 690.047 L1185.54 690.047 L1186.1 690.047 L1186.66 690.047 L1187.22 690.047 L1187.78 690.047 L1188.34 690.047 L1188.9 690.047 L1189.46 690.047 L1190.02 690.047 L1190.58 690.047 L1191.14 690.047 L1191.7 690.047 L1192.25 690.047 L1192.81 690.047 L1193.37 690.047 L1193.93 690.047 L1194.49 690.047 L1195.05 690.047 L1195.61 690.047 L1196.17 690.047 L1196.73 690.047 L1197.29 690.047 L1197.85 690.047 L1198.41 690.047 L1198.97 690.047 L1199.52 690.047 L1200.08 690.047 L1200.64 690.047 L1201.2 690.047 L1201.76 690.047 L1202.32 690.047 L1202.88 690.047 L1203.44 690.047 L1204 690.047 L1204.56 690.047 L1205.12 690.047 L1205.68 690.047 L1206.24 690.047 L1206.8 690.047 L1207.35 690.047 L1207.91 690.047 L1208.47 690.047 L1209.03 690.047 L1209.59 690.047 L1210.15 690.047 L1210.71 690.047 L1211.27 690.047 L1211.83 690.047 L1212.39 690.047 L1212.95 690.047 L1213.51 690.047 L1214.07 690.047 L1214.62 690.047 L1215.18 690.047 L1215.74 690.047 L1216.3 690.047 L1216.86 690.047 L1217.42 690.047 L1217.98 690.047 L1218.54 690.047 L1219.1 690.047 L1219.66 690.047 L1220.22 690.047 L1220.78 690.047 L1221.34 690.047 L1221.89 690.047 L1222.45 690.047 L1223.01 690.047 L1223.57 690.047 L1224.13 690.047 L1224.69 690.047 L1225.25 690.047 L1225.81 690.047 L1226.37 690.047 L1226.93 690.047 L1227.49 690.047 L1228.05 690.047 L1228.61 690.047 L1229.17 690.047 L1229.72 690.047 L1230.28 690.047 L1230.84 690.047 L1231.4 690.047 L1231.96 690.047 L1232.52 690.047 L1233.08 690.047 L1233.64 690.047 L1234.2 690.047 L1234.76 690.047 L1235.32 690.047 L1235.88 690.047 L1236.44 690.047 L1236.99 690.047 L1237.55 690.047 L1238.11 690.047 L1238.67 690.047 L1239.23 690.047 L1239.79 690.047 L1240.35 690.047 L1240.91 690.047 L1241.47 690.047 L1242.03 690.047 L1242.59 690.047 L1243.15 690.047 L1243.71 690.047 L1244.26 690.047 L1244.82 690.047 L1245.38 690.047 L1245.94 690.047 L1246.5 690.047 L1247.06 690.047 L1247.62 690.047 L1248.18 690.047 L1248.74 690.047 L1249.3 690.047 L1249.86 690.047 L1250.42 690.047 L1250.98 690.047 L1251.54 690.047 L1252.09 690.047 L1252.65 690.047 L1253.21 690.047 L1253.77 690.047 L1254.33 690.047 L1254.89 690.047 L1255.45 690.047 L1256.01 690.047 L1256.57 690.047 L1257.13 690.047 L1257.69 690.047 L1258.25 690.047 L1258.81 690.047 L1259.36 690.047 L1259.92 690.047 L1260.48 690.047 L1261.04 690.047 L1261.6 690.047 L1262.16 690.047 L1262.72 690.047 L1263.28 690.047 L1263.84 690.047 L1264.4 690.047 L1264.96 690.047 L1265.52 690.047 L1266.08 690.047 L1266.63 690.047 L1267.19 690.047 L1267.75 690.047 L1268.31 690.047 L1268.87 690.047 L1269.43 690.047 L1269.99 690.047 L1270.55 690.047 L1271.11 690.047 L1271.67 690.047 L1272.23 690.047 L1272.79 690.047 L1273.35 690.047 L1273.91 690.047 L1274.46 690.047 L1275.02 690.047 L1275.58 690.047 L1276.14 690.047 L1276.7 690.047 L1277.26 690.047 L1277.82 690.047 L1278.38 690.047 L1278.94 690.047 L1279.5 690.047 L1280.06 690.047 L1280.62 690.047 L1281.18 690.047 L1281.73 690.047 L1282.29 690.047 L1282.85 690.047 L1283.41 690.047 L1283.97 690.047 L1284.53 690.047 L1285.09 690.047 L1285.65 690.047 L1286.21 690.047 L1286.77 690.047 L1287.33 690.047 L1287.89 690.047 L1288.45 690.047 L1289 690.047 L1289.56 690.047 L1290.12 690.047 L1290.68 690.047 L1291.24 690.047 L1291.8 690.047 L1292.36 690.047 L1292.92 690.047 L1293.48 690.047 L1294.04 690.047 L1294.6 690.047 L1295.16 690.047 L1295.72 690.047 L1296.28 690.047 L1296.83 690.047 L1297.39 690.047 L1297.95 690.047 L1298.51 690.047 L1299.07 690.047 L1299.63 690.047 L1300.19 690.047 L1300.75 690.047 L1301.31 690.047 L1301.87 690.047 L1302.43 690.047 L1302.99 690.047 L1303.55 690.047 L1304.1 690.047 L1304.66 690.047 L1305.22 690.047 L1305.78 690.047 L1306.34 690.047 L1306.9 690.047 L1307.46 690.047 L1308.02 690.047 L1308.58 690.047 L1309.14 690.047 L1309.7 690.047 L1310.26 690.047 L1310.82 690.047 L1311.38 690.047 L1311.93 690.047 L1312.49 690.047 L1313.05 690.047 L1313.61 690.047 L1314.17 690.047 L1314.73 690.047 L1315.29 690.047 L1315.85 690.047 L1316.41 690.047 L1316.97 690.047 L1317.53 690.047 L1318.09 690.047 L1318.65 690.047 L1319.2 690.047 L1319.76 690.047 L1320.32 690.047 L1320.88 690.047 L1321.44 690.047 L1322 690.047 L1322.56 690.047 L1323.12 690.047 L1323.68 690.047 L1324.24 690.047 L1324.8 690.047 L1325.36 690.047 L1325.92 690.047 L1326.47 690.047 L1327.03 690.047 L1327.59 690.047 L1328.15 690.047 L1328.71 690.047 L1329.27 690.047 L1329.83 690.047 L1330.39 690.047 L1330.95 690.047 L1331.51 690.047 L1332.07 690.047 L1332.63 690.047 L1333.19 690.047 L1333.75 690.047 L1334.3 690.047 L1334.86 690.047 L1335.42 690.047 L1335.98 690.047 L1336.54 690.047 L1337.1 690.047 L1337.66 690.047 L1338.22 690.047 L1338.78 690.047 L1339.34 690.047 L1339.9 690.047 L1340.46 690.047 L1341.02 690.047 L1341.57 690.047 L1342.13 690.047 L1342.69 690.047 L1343.25 690.047 L1343.81 690.047 L1344.37 690.047 L1344.93 690.047 L1345.49 690.047 L1346.05 690.047 L1346.61 690.047 L1347.17 690.047 L1347.73 690.047 L1348.29 690.047 L1348.84 690.047 L1349.4 690.047 L1349.96 690.047 L1350.52 690.047 L1351.08 690.047 L1351.64 690.047 L1352.2 690.047 L1352.76 690.047 L1353.32 690.047 L1353.88 690.047 L1354.44 690.047 L1355 690.047 L1355.56 690.047 L1356.12 690.047 L1356.67 690.047 L1357.23 690.047 L1357.79 690.047 L1358.35 690.047 L1358.91 690.047 L1359.47 690.047 L1360.03 690.047 L1360.59 690.047 L1361.15 690.047 L1361.71 690.047 L1362.27 690.047 L1362.83 690.047 L1363.39 690.047 L1363.94 690.047 L1364.5 690.047 L1365.06 690.047 L1365.62 690.047 L1366.18 690.047 L1366.74 690.047 L1367.3 690.047 L1367.86 690.047 L1368.42 690.047 L1368.98 690.047 L1369.54 690.047 L1370.1 690.047 L1370.66 690.047 L1371.21 690.047 L1371.77 690.047 L1372.33 690.047 L1372.89 690.047 L1373.45 690.047 L1374.01 690.047 L1374.57 690.047 L1375.13 690.047 L1375.69 690.047 L1376.25 690.047 L1376.81 690.047 L1377.37 690.047 L1377.93 690.047 L1378.49 690.047 L1379.04 690.047 L1379.6 690.047 L1380.16 690.047 L1380.72 690.047 L1381.28 690.047 L1381.84 690.047 L1382.4 690.047 L1382.96 690.047 L1383.52 690.047 L1384.08 690.047 L1384.64 690.047 L1385.2 690.047 L1385.76 690.047 L1386.31 690.047 L1386.87 690.047 L1387.43 690.047 L1387.99 690.047 L1388.55 690.047 L1389.11 690.047 L1389.67 690.047 L1390.23 690.047 L1390.79 690.047 L1391.35 690.047 L1391.91 690.047 L1392.47 690.047 L1393.03 690.047 L1393.58 690.047 L1394.14 690.047 L1394.7 690.047 L1395.26 690.047 L1395.82 690.047 L1396.38 690.047 L1396.94 690.047 L1397.5 690.047 L1398.06 690.047 L1398.62 690.047 L1399.18 690.047 L1399.74 690.047 L1400.3 690.047 L1400.86 690.047 L1401.41 690.047 L1401.97 690.047 L1402.53 690.047 L1403.09 690.047 L1403.65 690.047 L1404.21 690.047 L1404.77 690.047 L1405.33 690.047 L1405.89 690.047 L1406.45 690.047 L1407.01 690.047 L1407.57 690.047 L1408.13 690.047 L1408.68 690.047 L1409.24 690.047 L1409.8 690.047 L1410.36 690.047 L1410.92 690.047 L1411.48 690.047 L1412.04 690.047 L1412.6 690.047 L1413.16 690.047 L1413.72 690.047 L1414.28 690.047 L1414.84 690.047 L1415.4 690.047 L1415.95 690.047 L1416.51 690.047 L1417.07 690.047 L1417.63 690.047 L1418.19 690.047 L1418.75 690.047 L1419.31 690.047 L1419.87 690.047 L1420.43 690.047 L1420.99 690.047 L1421.55 690.047 L1422.11 690.047 L1422.67 690.047 L1423.23 690.047 L1423.78 690.047 L1424.34 690.047 L1424.9 690.047 L1425.46 690.047 L1426.02 690.047 L1426.58 690.047 L1427.14 690.047 L1427.7 690.047 L1428.26 690.047 L1428.82 690.047 L1429.38 690.047 L1429.94 690.047 L1430.5 690.047 L1431.05 690.047 L1431.61 690.047 L1432.17 690.047 L1432.73 690.047 L1433.29 690.047 L1433.85 690.047 L1434.41 690.047 L1434.97 690.047 L1435.53 690.047 L1436.09 690.047 L1436.65 690.047 L1437.21 690.047 L1437.77 690.047 L1438.33 690.047 L1438.88 690.047 L1439.44 690.047 L1440 690.047 L1440.56 690.047 L1441.12 690.047 L1441.68 690.047 L1442.24 690.047 L1442.8 690.047 L1443.36 690.047 L1443.92 690.047 L1444.48 690.047 L1445.04 690.047 L1445.6 690.047 L1446.15 690.047 L1446.71 690.047 L1447.27 690.047 L1447.83 690.047 L1448.39 690.047 L1448.95 690.047 L1449.51 690.047 L1450.07 690.047 L1450.63 690.047 L1451.19 690.047 L1451.75 690.047 L1452.31 690.047 L1452.87 690.047 L1453.42 690.047 L1453.98 690.047 L1454.54 690.047 L1455.1 690.047 L1455.66 690.047 L1456.22 690.047 L1456.78 690.047 L1457.34 690.047 L1457.9 690.047 L1458.46 690.047 L1459.02 690.047 L1459.58 690.047 L1460.14 690.047 L1460.7 690.047 L1461.25 690.047 L1461.81 690.047 L1462.37 690.047 L1462.93 690.047 L1463.49 690.047 L1464.05 690.047 L1464.61 690.047 L1465.17 690.047 L1465.73 690.047 L1466.29 690.047 L1466.85 690.047 L1467.41 690.047 L1467.97 690.047 L1468.52 690.047 L1469.08 690.047 L1469.64 690.047 L1470.2 690.047 L1470.76 690.047 L1471.32 690.047 L1471.88 690.047 L1472.44 690.047 L1473 690.047 L1473.56 690.047 L1474.12 690.047 L1474.68 690.047 L1475.24 690.047 L1475.79 690.047 L1476.35 690.047 L1476.91 690.047 L1477.47 690.047 L1478.03 690.047 L1478.59 690.047 L1479.15 690.047 L1479.71 690.047 L1480.27 690.047 L1480.83 690.047 L1481.39 690.047 L1481.95 690.047 L1482.51 690.047 L1483.07 690.047 L1483.62 690.047 L1484.18 690.047 L1484.74 690.047 L1485.3 690.047 L1485.86 690.047 L1486.42 690.047 L1486.98 690.047 L1487.54 690.047 L1488.1 690.047 L1488.66 690.047 L1489.22 690.047 L1489.78 690.047 L1490.34 690.047 L1490.89 690.047 L1491.45 690.047 L1492.01 690.047 L1492.57 690.047 L1493.13 690.047 L1493.69 690.047 L1494.25 690.047 L1494.81 690.047 L1495.37 690.047 L1495.93 690.047 L1496.49 690.047 L1497.05 690.047 L1497.61 690.047 L1498.16 690.047 L1498.72 690.047 L1499.28 690.047 L1499.84 690.047 L1500.4 690.047 L1500.96 690.047 L1501.52 690.047 L1502.08 690.047 L1502.64 690.047 L1503.2 690.047 L1503.76 690.047 L1504.32 690.047 L1504.88 690.047 L1505.44 690.047 L1505.99 690.047 L1506.55 690.047 L1507.11 690.047 L1507.67 690.047 L1508.23 690.047 L1508.79 690.047 L1509.35 690.047 L1509.91 690.047 L1510.47 690.047 L1511.03 690.047 L1511.59 690.047 L1512.15 690.047 L1512.71 690.047 L1513.26 690.047 L1513.82 690.047 L1514.38 690.047 L1514.94 690.047 L1515.5 690.047 L1516.06 690.047 L1516.62 690.047 L1517.18 690.047 L1517.74 690.047 L1518.3 690.047 L1518.86 690.047 L1519.42 690.047 L1519.98 690.047 L1520.53 690.047 L1521.09 690.047 L1521.65 690.047 L1522.21 690.047 L1522.77 690.047 L1523.33 690.047 L1523.89 690.047 L1524.45 690.047 L1525.01 690.047 L1525.57 690.047 L1526.13 690.047 L1526.69 690.047 L1527.25 690.047 L1527.81 690.047 L1528.36 690.047 L1528.92 690.047 L1529.48 690.047 L1530.04 690.047 L1530.6 690.047 L1531.16 690.047 L1531.72 690.047 L1532.28 690.047 L1532.84 690.047 L1533.4 690.047 L1533.96 690.047 L1534.52 690.047 L1535.08 690.047 L1535.63 690.047 L1536.19 690.047 L1536.75 690.047 L1537.31 690.047 L1537.87 690.047 L1538.43 690.047 L1538.99 690.047 L1539.55 690.047 L1540.11 690.047 L1540.67 690.047 L1541.23 690.047 L1541.79 690.047 L1542.35 690.047 L1542.9 690.047 L1543.46 690.047 L1544.02 690.047 L1544.58 690.047 L1545.14 690.047 L1545.7 690.047 L1546.26 690.047 L1546.82 690.047 L1547.38 690.047 L1547.94 690.047 L1548.5 690.047 L1549.06 690.047 L1549.62 690.047 L1550.18 690.047 L1550.73 690.047 L1551.29 690.047 L1551.85 690.047 L1552.41 690.047 L1552.97 690.047 L1553.53 690.047 L1554.09 690.047 L1554.65 690.047 L1555.21 690.047 L1555.77 690.047 L1556.33 690.047 L1556.89 690.047 L1557.45 690.047 L1558 690.047 L1558.56 690.047 L1559.12 690.047 L1559.68 690.047 L1560.24 690.047 L1560.8 690.047 L1561.36 690.047 L1561.92 690.047 L1562.48 690.047 L1563.04 690.047 L1563.6 690.047 L1564.16 690.047 L1564.72 690.047 L1565.28 690.047 L1565.83 690.047 L1566.39 690.047 L1566.95 690.047 L1567.51 690.047 L1568.07 690.047 L1568.63 690.047 L1569.19 690.047 L1569.75 690.047 L1570.31 690.047 L1570.87 690.047 L1571.43 690.047 L1571.99 690.047 L1572.55 690.047 L1573.1 690.047 L1573.66 690.047 L1574.22 690.047 L1574.78 690.047 L1575.34 690.047 L1575.9 690.047 L1576.46 690.047 L1577.02 690.047 L1577.58 690.047 L1578.14 690.047 L1578.7 690.047 L1579.26 690.047 L1579.82 690.047 L1580.37 690.047 L1580.93 690.047 L1581.49 690.047 L1582.05 690.047 L1582.61 690.047 L1583.17 690.047 L1583.73 690.047 L1584.29 690.047 L1584.85 690.047 L1585.41 690.047 L1585.97 690.047 L1586.53 690.047 L1587.09 690.047 L1587.65 690.047 L1588.2 690.047 L1588.76 690.047 L1589.32 690.047 L1589.88 690.047 L1590.44 690.047 L1591 690.047 L1591.56 690.047 L1592.12 690.047 L1592.68 690.047 L1593.24 690.047 L1593.8 690.047 L1594.36 690.047 L1594.92 690.047 L1595.47 690.047 L1596.03 690.047 L1596.59 690.047 L1597.15 690.047 L1597.71 690.047 L1598.27 690.047 L1598.83 690.047 L1599.39 690.047 L1599.95 690.047 L1600.51 690.047 L1601.07 690.047 L1601.63 690.047 L1602.19 690.047 L1602.74 690.047 L1603.3 690.047 L1603.86 690.047 L1604.42 690.047 L1604.98 690.047 L1605.54 690.047 L1606.1 690.047 L1606.66 690.047 L1607.22 690.047 L1607.78 690.047 L1608.34 690.047 L1608.9 690.047 L1609.46 690.047 L1610.02 690.047 L1610.57 690.047 L1611.13 690.047 L1611.69 690.047 L1612.25 690.047 L1612.81 690.047 L1613.37 690.047 L1613.93 690.047 L1614.49 690.047 L1615.05 690.047 L1615.61 690.047 L1616.17 690.047 L1616.73 690.047 L1617.29 690.047 L1617.84 690.047 L1618.4 690.047 L1618.96 690.047 L1619.52 690.047 L1620.08 690.047 L1620.64 690.047 L1621.2 690.047 L1621.76 690.047 L1622.32 690.047 L1622.88 690.047 L1623.44 690.047 L1624 690.047 L1624.56 690.047 L1625.11 690.047 L1625.67 690.047 L1626.23 690.047 L1626.79 690.047 L1627.35 690.047 L1627.91 690.047 L1628.47 690.047 L1629.03 690.047 L1629.59 690.047 L1630.15 690.047 L1630.71 690.047 L1631.27 690.047 L1631.83 690.047 L1632.39 690.047 L1632.94 690.047 L1633.5 690.047 L1634.06 690.047 L1634.62 690.047 L1635.18 690.047 L1635.74 690.047 L1636.3 690.047 L1636.86 690.047 L1637.42 690.047 L1637.98 690.047 L1638.54 690.047 L1639.1 690.047 L1639.66 690.047 L1640.21 690.047 L1640.77 690.047 L1641.33 690.047 L1641.89 690.047 L1642.45 690.047 L1643.01 690.047 L1643.57 690.047 L1644.13 690.047 L1644.69 690.047 L1645.25 690.047 L1645.81 690.047 L1646.37 690.047 L1646.93 690.047 L1647.48 690.047 L1648.04 690.047 L1648.6 690.047 L1649.16 690.047 L1649.72 690.047 L1650.28 690.047 L1650.84 690.047 L1651.4 690.047 L1651.96 690.047 L1652.52 690.047 L1653.08 690.047 L1653.64 690.047 L1654.2 690.047 L1654.76 690.047 L1655.31 690.047 L1655.87 690.047 L1656.43 690.047 L1656.99 690.047 L1657.55 690.047 L1658.11 690.047 L1658.67 690.047 L1659.23 690.047 L1659.79 690.047 L1660.35 690.047 L1660.91 690.047 L1661.47 690.047 L1662.03 690.047 L1662.58 690.047 L1663.14 690.047 L1663.7 690.047 L1664.26 690.047 L1664.82 690.047 L1665.38 690.047 L1665.94 690.047 L1666.5 690.047 L1667.06 690.047 L1667.62 690.047 L1668.18 690.047 L1668.74 690.047 L1669.3 690.047 L1669.85 690.047 L1670.41 690.047 L1670.97 690.047 L1671.53 690.047 L1672.09 690.047 L1672.65 690.047 L1673.21 690.047 L1673.77 690.047 L1674.33 690.047 L1674.89 690.047 L1675.45 690.047 L1676.01 690.047 L1676.57 690.047 L1677.13 690.047 L1677.68 690.047 L1678.24 690.047 L1678.8 690.047 L1679.36 690.047 L1679.92 690.047 L1680.48 690.047 L1681.04 690.047 L1681.6 690.047 L1682.16 690.047 L1682.72 690.047 L1683.28 690.047 L1683.84 690.047 L1684.4 690.047 L1684.95 690.047 L1685.51 690.047 L1686.07 690.047 L1686.63 690.047 L1687.19 690.047 L1687.75 690.047 L1688.31 690.047 L1688.87 690.047 L1689.43 690.047 L1689.99 690.047 L1690.55 690.047 L1691.11 690.047 L1691.67 690.047 L1692.23 690.047 L1692.78 690.047 L1693.34 690.047 L1693.9 690.047 L1694.46 690.047 L1695.02 690.047 L1695.58 690.047 L1696.14 690.047 L1696.7 690.047 L1697.26 690.047 L1697.82 690.047 L1698.38 690.047 L1698.94 690.047 L1699.5 690.047 L1700.05 690.047 L1700.61 690.047 L1701.17 690.047 L1701.73 690.047 L1702.29 690.047 L1702.85 690.047 L1703.41 690.047 L1703.97 690.047 L1704.53 690.047 L1705.09 690.047 L1705.65 690.047 L1706.21 690.047 L1706.77 690.047 L1707.32 690.047 L1707.88 690.047 L1708.44 690.047 L1709 690.047 L1709.56 690.047 L1710.12 690.047 L1710.68 690.047 L1711.24 690.047 L1711.8 690.047 L1712.36 690.047 L1712.92 690.047 L1713.48 690.047 L1714.04 690.047 L1714.6 690.047 L1715.15 690.047 L1715.71 690.047 L1716.27 690.047 L1716.83 690.047 L1717.39 690.047 L1717.95 690.047 L1718.51 690.047 L1719.07 690.047 L1719.63 690.047 L1720.19 690.047 L1720.75 690.047 L1721.31 690.047 L1721.87 690.047 L1722.42 690.047 L1722.98 690.047 L1723.54 690.047 L1724.1 690.047 L1724.66 690.047 L1725.22 690.047 L1725.78 690.047 L1726.34 690.047 L1726.9 690.047 L1727.46 690.047 L1728.02 690.047 L1728.58 690.047 L1729.14 690.047 L1729.69 690.047 L1730.25 690.047 L1730.81 690.047 L1731.37 690.047 L1731.93 690.047 L1732.49 690.047 L1733.05 690.047 L1733.61 690.047 L1734.17 690.047 L1734.73 690.047 L1735.29 690.047 L1735.85 690.047 L1736.41 690.047 L1736.97 690.047 L1737.52 690.047 L1738.08 690.047 L1738.64 690.047 L1739.2 690.047 L1739.76 690.047 L1740.32 690.047 L1740.88 690.047 L1741.44 690.047 L1742 690.047 L1742.56 690.047 L1743.12 690.047 L1743.68 690.047 L1744.24 690.047 L1744.79 690.047 L1745.35 690.047 L1745.91 690.047 L1746.47 690.047 L1747.03 690.047 L1747.59 690.047 L1748.15 690.047 L1748.71 690.047 L1749.27 690.047 L1749.83 690.047 L1750.39 690.047 L1750.95 690.047 L1751.51 690.047 L1752.06 690.047 L1752.62 690.047 L1753.18 690.047 L1753.74 690.047 L1754.3 690.047 L1754.86 690.047 L1755.42 690.047 L1755.98 690.047 L1756.54 690.047 L1757.1 690.047 L1757.66 690.047 L1758.22 690.047 L1758.78 690.047 L1759.34 690.047 L1759.89 690.047 L1760.45 690.047 L1761.01 690.047 L1761.57 690.047 L1762.13 690.047 L1762.69 690.047 L1763.25 690.047 L1763.81 690.047 L1764.37 690.047 L1764.93 690.047 L1765.49 690.047 L1766.05 690.047 L1766.61 690.047 L1767.16 690.047 L1767.72 690.047 L1768.28 690.047 L1768.84 690.047 L1769.4 690.047 L1769.96 690.047 L1770.52 690.047 L1771.08 690.047 L1771.64 690.047 L1772.2 690.047 L1772.76 690.047 L1773.32 690.047 L1773.88 690.047 L1774.43 690.047 L1774.99 690.047 L1775.55 690.047 L1776.11 690.047 L1776.67 690.047 L1777.23 690.047 L1777.79 690.047 L1778.35 690.047 L1778.91 690.047 L1779.47 690.047 L1780.03 690.047 L1780.59 690.047 L1781.15 690.047 L1781.71 690.047 L1782.26 690.047 L1782.82 690.047 L1783.38 690.047 L1783.94 690.047 L1784.5 690.047 L1785.06 690.047 L1785.62 690.047 L1786.18 690.047 L1786.74 690.047 L1787.3 690.047 L1787.86 690.047 L1788.42 690.047 L1788.98 690.047 L1789.53 690.047 L1790.09 690.047 L1790.65 690.047 L1791.21 690.047 L1791.77 690.047 L1792.33 690.047 L1792.89 690.047 L1793.45 690.047 L1794.01 690.047 L1794.57 690.047 L1795.13 690.047 L1795.69 690.047 L1796.25 690.047 L1796.8 690.047 L1797.36 690.047 L1797.92 690.047 L1798.48 690.047 L1799.04 690.047 L1799.6 690.047 L1800.16 690.047 L1800.72 690.047 L1801.28 690.047 L1801.84 690.047 L1802.4 690.047 L1802.96 690.047 L1803.52 690.047 L1804.08 690.047 L1804.63 690.047 L1805.19 690.047 L1805.75 690.047 L1806.31 690.047 L1806.87 690.047 L1807.43 690.047 L1807.99 690.047 L1808.55 690.047 L1809.11 690.047 L1809.67 690.047 L1810.23 690.047 L1810.79 690.047 L1811.35 690.047 L1811.9 690.047 L1812.46 690.047 L1813.02 690.047 L1813.58 690.047 L1814.14 690.047 L1814.7 690.047 L1815.26 690.047 L1815.82 690.047 L1816.38 690.047 L1816.94 690.047 L1817.5 690.047 L1818.06 690.047 L1818.62 690.047 L1819.18 690.047 L1819.73 690.047 L1820.29 690.047 L1820.85 690.047 L1821.41 690.047 L1821.97 690.047 L1822.53 690.047 L1823.09 690.047 L1823.65 690.047 L1824.21 690.047 L1824.77 690.047 L1825.33 690.047 L1825.89 690.047 L1826.45 690.047 L1827 690.047 L1827.56 690.047 L1828.12 690.047 L1828.68 690.047 L1829.24 690.047 L1829.8 690.047 L1830.36 690.047 L1830.92 690.047 L1831.48 690.047 L1832.04 690.047 L1832.6 690.047 L1833.16 690.047 L1833.72 690.047 L1834.27 690.047 L1834.83 690.047 L1835.39 690.047 L1835.95 690.047 L1836.51 690.047 L1837.07 690.047 L1837.63 690.047 L1838.19 690.047 L1838.19 681.982 L1837.63 681.982 L1837.07 681.982 L1836.51 681.982 L1835.95 681.982 L1835.39 681.982 L1834.83 681.982 L1834.27 681.982 L1833.72 681.982 L1833.16 681.982 L1832.6 681.982 L1832.04 681.982 L1831.48 681.982 L1830.92 681.982 L1830.36 681.982 L1829.8 681.982 L1829.24 681.982 L1828.68 681.982 L1828.12 681.982 L1827.56 681.982 L1827 681.982 L1826.45 681.982 L1825.89 681.982 L1825.33 681.982 L1824.77 681.982 L1824.21 681.982 L1823.65 681.982 L1823.09 681.982 L1822.53 681.982 L1821.97 681.982 L1821.41 681.982 L1820.85 681.982 L1820.29 681.982 L1819.73 681.982 L1819.18 681.982 L1818.62 681.982 L1818.06 681.982 L1817.5 681.982 L1816.94 681.982 L1816.38 681.982 L1815.82 681.982 L1815.26 681.982 L1814.7 681.982 L1814.14 681.982 L1813.58 681.982 L1813.02 681.982 L1812.46 681.982 L1811.9 681.982 L1811.35 681.982 L1810.79 681.982 L1810.23 681.982 L1809.67 681.982 L1809.11 681.982 L1808.55 681.982 L1807.99 681.982 L1807.43 681.982 L1806.87 681.982 L1806.31 681.982 L1805.75 681.982 L1805.19 681.982 L1804.63 681.982 L1804.08 681.982 L1803.52 681.982 L1802.96 681.982 L1802.4 681.982 L1801.84 681.982 L1801.28 681.982 L1800.72 681.982 L1800.16 681.982 L1799.6 681.982 L1799.04 681.982 L1798.48 681.982 L1797.92 681.982 L1797.36 681.982 L1796.8 681.982 L1796.25 681.982 L1795.69 681.982 L1795.13 681.982 L1794.57 681.982 L1794.01 681.982 L1793.45 681.982 L1792.89 681.982 L1792.33 681.982 L1791.77 681.982 L1791.21 681.982 L1790.65 681.982 L1790.09 681.982 L1789.53 681.982 L1788.98 681.982 L1788.42 681.982 L1787.86 681.982 L1787.3 681.982 L1786.74 681.982 L1786.18 681.982 L1785.62 681.982 L1785.06 681.982 L1784.5 681.982 L1783.94 681.982 L1783.38 681.982 L1782.82 681.982 L1782.26 681.982 L1781.71 681.982 L1781.15 681.982 L1780.59 681.982 L1780.03 681.982 L1779.47 681.982 L1778.91 681.982 L1778.35 681.982 L1777.79 681.982 L1777.23 681.982 L1776.67 681.982 L1776.11 681.982 L1775.55 681.982 L1774.99 681.982 L1774.43 681.982 L1773.88 681.982 L1773.32 681.982 L1772.76 681.982 L1772.2 681.982 L1771.64 681.982 L1771.08 681.982 L1770.52 681.982 L1769.96 681.982 L1769.4 681.982 L1768.84 681.982 L1768.28 681.982 L1767.72 681.982 L1767.16 681.982 L1766.61 681.982 L1766.05 681.982 L1765.49 681.982 L1764.93 681.982 L1764.37 681.982 L1763.81 681.982 L1763.25 681.982 L1762.69 681.982 L1762.13 681.982 L1761.57 681.982 L1761.01 681.982 L1760.45 681.982 L1759.89 681.982 L1759.34 681.982 L1758.78 681.982 L1758.22 681.982 L1757.66 681.982 L1757.1 681.982 L1756.54 681.982 L1755.98 681.982 L1755.42 681.982 L1754.86 681.982 L1754.3 681.982 L1753.74 681.982 L1753.18 681.982 L1752.62 681.982 L1752.06 681.982 L1751.51 681.982 L1750.95 681.982 L1750.39 681.982 L1749.83 681.982 L1749.27 681.982 L1748.71 681.982 L1748.15 681.982 L1747.59 681.982 L1747.03 681.982 L1746.47 681.982 L1745.91 681.982 L1745.35 681.982 L1744.79 681.982 L1744.24 681.982 L1743.68 681.982 L1743.12 681.982 L1742.56 681.982 L1742 681.982 L1741.44 681.982 L1740.88 681.982 L1740.32 681.982 L1739.76 681.982 L1739.2 681.982 L1738.64 681.982 L1738.08 681.982 L1737.52 681.982 L1736.97 681.982 L1736.41 681.982 L1735.85 681.982 L1735.29 681.982 L1734.73 681.982 L1734.17 681.982 L1733.61 681.982 L1733.05 681.982 L1732.49 681.982 L1731.93 681.982 L1731.37 681.982 L1730.81 681.982 L1730.25 681.982 L1729.69 681.982 L1729.14 681.982 L1728.58 681.982 L1728.02 681.982 L1727.46 681.982 L1726.9 681.982 L1726.34 681.982 L1725.78 681.982 L1725.22 681.982 L1724.66 681.982 L1724.1 681.982 L1723.54 681.982 L1722.98 681.982 L1722.42 681.982 L1721.87 681.982 L1721.31 681.982 L1720.75 681.982 L1720.19 681.982 L1719.63 681.982 L1719.07 681.982 L1718.51 681.982 L1717.95 681.982 L1717.39 681.982 L1716.83 681.982 L1716.27 681.982 L1715.71 681.982 L1715.15 681.982 L1714.6 681.982 L1714.04 681.982 L1713.48 681.982 L1712.92 681.982 L1712.36 681.982 L1711.8 681.982 L1711.24 681.982 L1710.68 681.982 L1710.12 681.982 L1709.56 681.982 L1709 681.982 L1708.44 681.982 L1707.88 681.982 L1707.32 681.982 L1706.77 681.982 L1706.21 681.982 L1705.65 681.982 L1705.09 681.982 L1704.53 681.982 L1703.97 681.982 L1703.41 681.982 L1702.85 681.982 L1702.29 681.982 L1701.73 681.982 L1701.17 681.982 L1700.61 681.982 L1700.05 681.982 L1699.5 681.982 L1698.94 681.982 L1698.38 681.982 L1697.82 681.982 L1697.26 681.982 L1696.7 681.982 L1696.14 681.982 L1695.58 681.982 L1695.02 681.982 L1694.46 681.982 L1693.9 681.982 L1693.34 681.982 L1692.78 681.982 L1692.23 681.982 L1691.67 681.982 L1691.11 681.982 L1690.55 681.982 L1689.99 681.982 L1689.43 681.982 L1688.87 681.982 L1688.31 681.982 L1687.75 681.982 L1687.19 681.982 L1686.63 681.982 L1686.07 681.982 L1685.51 681.982 L1684.95 681.982 L1684.4 681.982 L1683.84 681.982 L1683.28 681.982 L1682.72 681.982 L1682.16 681.982 L1681.6 681.982 L1681.04 681.982 L1680.48 681.982 L1679.92 681.982 L1679.36 681.982 L1678.8 681.982 L1678.24 681.982 L1677.68 681.982 L1677.13 681.982 L1676.57 681.982 L1676.01 681.982 L1675.45 681.982 L1674.89 681.982 L1674.33 681.982 L1673.77 681.982 L1673.21 681.982 L1672.65 681.982 L1672.09 681.982 L1671.53 681.982 L1670.97 681.982 L1670.41 681.982 L1669.85 681.982 L1669.3 681.982 L1668.74 681.982 L1668.18 681.982 L1667.62 681.982 L1667.06 681.982 L1666.5 681.982 L1665.94 681.982 L1665.38 681.982 L1664.82 681.982 L1664.26 681.982 L1663.7 681.982 L1663.14 681.982 L1662.58 681.982 L1662.03 681.982 L1661.47 681.982 L1660.91 681.982 L1660.35 681.982 L1659.79 681.982 L1659.23 681.982 L1658.67 681.982 L1658.11 681.982 L1657.55 681.982 L1656.99 681.982 L1656.43 681.982 L1655.87 681.982 L1655.31 681.982 L1654.76 681.982 L1654.2 681.982 L1653.64 681.982 L1653.08 681.982 L1652.52 681.982 L1651.96 681.982 L1651.4 681.982 L1650.84 681.982 L1650.28 681.982 L1649.72 681.982 L1649.16 681.982 L1648.6 681.982 L1648.04 681.982 L1647.48 681.982 L1646.93 681.982 L1646.37 681.982 L1645.81 681.982 L1645.25 681.982 L1644.69 681.982 L1644.13 681.982 L1643.57 681.982 L1643.01 681.982 L1642.45 681.982 L1641.89 681.982 L1641.33 681.982 L1640.77 681.982 L1640.21 681.982 L1639.66 681.982 L1639.1 681.982 L1638.54 681.982 L1637.98 681.982 L1637.42 681.982 L1636.86 681.982 L1636.3 681.982 L1635.74 681.982 L1635.18 681.982 L1634.62 681.982 L1634.06 681.982 L1633.5 681.982 L1632.94 681.982 L1632.39 681.982 L1631.83 681.982 L1631.27 681.982 L1630.71 681.982 L1630.15 681.982 L1629.59 681.982 L1629.03 681.982 L1628.47 681.982 L1627.91 681.982 L1627.35 681.982 L1626.79 681.982 L1626.23 681.982 L1625.67 681.982 L1625.11 681.982 L1624.56 681.982 L1624 681.982 L1623.44 681.982 L1622.88 681.982 L1622.32 681.982 L1621.76 681.982 L1621.2 681.982 L1620.64 681.982 L1620.08 681.982 L1619.52 681.982 L1618.96 681.982 L1618.4 681.982 L1617.84 681.982 L1617.29 681.982 L1616.73 681.982 L1616.17 681.982 L1615.61 681.982 L1615.05 681.982 L1614.49 681.982 L1613.93 681.982 L1613.37 681.982 L1612.81 681.982 L1612.25 681.982 L1611.69 681.982 L1611.13 681.982 L1610.57 681.982 L1610.02 681.982 L1609.46 681.982 L1608.9 681.982 L1608.34 681.982 L1607.78 681.982 L1607.22 681.982 L1606.66 681.982 L1606.1 681.982 L1605.54 681.982 L1604.98 681.982 L1604.42 681.982 L1603.86 681.982 L1603.3 681.982 L1602.74 681.982 L1602.19 681.982 L1601.63 681.982 L1601.07 681.982 L1600.51 681.982 L1599.95 681.982 L1599.39 681.982 L1598.83 681.982 L1598.27 681.982 L1597.71 681.982 L1597.15 681.982 L1596.59 681.982 L1596.03 681.982 L1595.47 681.982 L1594.92 681.982 L1594.36 681.982 L1593.8 681.982 L1593.24 681.982 L1592.68 681.982 L1592.12 681.982 L1591.56 681.982 L1591 681.982 L1590.44 681.982 L1589.88 681.982 L1589.32 681.982 L1588.76 681.982 L1588.2 681.982 L1587.65 681.982 L1587.09 681.982 L1586.53 681.982 L1585.97 681.982 L1585.41 681.982 L1584.85 681.982 L1584.29 681.982 L1583.73 681.982 L1583.17 681.982 L1582.61 681.982 L1582.05 681.982 L1581.49 681.982 L1580.93 681.982 L1580.37 681.982 L1579.82 681.982 L1579.26 681.982 L1578.7 681.982 L1578.14 681.982 L1577.58 681.982 L1577.02 681.982 L1576.46 681.982 L1575.9 681.982 L1575.34 681.982 L1574.78 681.982 L1574.22 681.982 L1573.66 681.982 L1573.1 681.982 L1572.55 681.982 L1571.99 681.982 L1571.43 681.982 L1570.87 681.982 L1570.31 681.982 L1569.75 681.982 L1569.19 681.982 L1568.63 681.982 L1568.07 681.982 L1567.51 681.982 L1566.95 681.982 L1566.39 681.982 L1565.83 681.982 L1565.28 681.982 L1564.72 681.982 L1564.16 681.982 L1563.6 681.982 L1563.04 681.982 L1562.48 681.982 L1561.92 681.982 L1561.36 681.982 L1560.8 681.982 L1560.24 681.982 L1559.68 681.982 L1559.12 681.982 L1558.56 681.982 L1558 681.982 L1557.45 681.982 L1556.89 681.982 L1556.33 681.982 L1555.77 681.982 L1555.21 681.982 L1554.65 681.982 L1554.09 681.982 L1553.53 681.982 L1552.97 681.982 L1552.41 681.982 L1551.85 681.982 L1551.29 681.982 L1550.73 681.982 L1550.18 681.982 L1549.62 681.982 L1549.06 681.982 L1548.5 681.982 L1547.94 681.982 L1547.38 681.982 L1546.82 681.982 L1546.26 681.982 L1545.7 681.982 L1545.14 681.982 L1544.58 681.982 L1544.02 681.982 L1543.46 681.982 L1542.9 681.982 L1542.35 681.982 L1541.79 681.982 L1541.23 681.982 L1540.67 681.982 L1540.11 681.982 L1539.55 681.982 L1538.99 681.982 L1538.43 681.982 L1537.87 681.982 L1537.31 681.982 L1536.75 681.982 L1536.19 681.982 L1535.63 681.982 L1535.08 681.982 L1534.52 681.982 L1533.96 681.982 L1533.4 681.982 L1532.84 681.982 L1532.28 681.982 L1531.72 681.982 L1531.16 681.982 L1530.6 681.982 L1530.04 681.982 L1529.48 681.982 L1528.92 681.982 L1528.36 681.982 L1527.81 681.982 L1527.25 681.982 L1526.69 681.982 L1526.13 681.982 L1525.57 681.982 L1525.01 681.982 L1524.45 681.982 L1523.89 681.982 L1523.33 681.982 L1522.77 681.982 L1522.21 681.982 L1521.65 681.982 L1521.09 681.982 L1520.53 681.982 L1519.98 681.982 L1519.42 681.982 L1518.86 681.982 L1518.3 681.982 L1517.74 681.982 L1517.18 681.982 L1516.62 681.982 L1516.06 681.982 L1515.5 681.982 L1514.94 681.982 L1514.38 681.982 L1513.82 681.982 L1513.26 681.982 L1512.71 681.982 L1512.15 681.982 L1511.59 681.982 L1511.03 681.982 L1510.47 681.982 L1509.91 681.982 L1509.35 681.982 L1508.79 681.982 L1508.23 681.982 L1507.67 681.982 L1507.11 681.982 L1506.55 681.982 L1505.99 681.982 L1505.44 681.982 L1504.88 681.982 L1504.32 681.982 L1503.76 681.982 L1503.2 681.982 L1502.64 681.982 L1502.08 681.982 L1501.52 681.982 L1500.96 681.982 L1500.4 681.982 L1499.84 681.982 L1499.28 681.982 L1498.72 681.982 L1498.16 681.982 L1497.61 681.982 L1497.05 681.982 L1496.49 681.982 L1495.93 681.982 L1495.37 681.982 L1494.81 681.982 L1494.25 681.982 L1493.69 681.982 L1493.13 681.982 L1492.57 681.982 L1492.01 681.982 L1491.45 681.982 L1490.89 681.982 L1490.34 681.982 L1489.78 681.982 L1489.22 681.982 L1488.66 681.982 L1488.1 681.982 L1487.54 681.982 L1486.98 681.982 L1486.42 681.982 L1485.86 681.982 L1485.3 681.982 L1484.74 681.982 L1484.18 681.982 L1483.62 681.982 L1483.07 681.982 L1482.51 681.982 L1481.95 681.982 L1481.39 681.982 L1480.83 681.982 L1480.27 681.982 L1479.71 681.982 L1479.15 681.982 L1478.59 681.982 L1478.03 681.982 L1477.47 681.982 L1476.91 681.982 L1476.35 681.982 L1475.79 681.982 L1475.24 681.982 L1474.68 681.982 L1474.12 681.982 L1473.56 681.982 L1473 681.982 L1472.44 681.982 L1471.88 681.982 L1471.32 681.982 L1470.76 681.982 L1470.2 681.982 L1469.64 681.982 L1469.08 681.982 L1468.52 681.982 L1467.97 681.982 L1467.41 681.982 L1466.85 681.982 L1466.29 681.982 L1465.73 681.982 L1465.17 681.982 L1464.61 681.982 L1464.05 681.982 L1463.49 681.982 L1462.93 681.982 L1462.37 681.982 L1461.81 681.982 L1461.25 681.982 L1460.7 681.982 L1460.14 681.982 L1459.58 681.982 L1459.02 681.982 L1458.46 681.982 L1457.9 681.982 L1457.34 681.982 L1456.78 681.982 L1456.22 681.982 L1455.66 681.982 L1455.1 681.982 L1454.54 681.982 L1453.98 681.982 L1453.42 681.982 L1452.87 681.982 L1452.31 681.982 L1451.75 681.982 L1451.19 681.982 L1450.63 681.982 L1450.07 681.982 L1449.51 681.982 L1448.95 681.982 L1448.39 681.982 L1447.83 681.982 L1447.27 681.982 L1446.71 681.982 L1446.15 681.982 L1445.6 681.982 L1445.04 681.982 L1444.48 681.982 L1443.92 681.982 L1443.36 681.982 L1442.8 681.982 L1442.24 681.982 L1441.68 681.982 L1441.12 681.982 L1440.56 681.982 L1440 681.982 L1439.44 681.982 L1438.88 681.982 L1438.33 681.982 L1437.77 681.982 L1437.21 681.982 L1436.65 681.982 L1436.09 681.982 L1435.53 681.982 L1434.97 681.982 L1434.41 681.982 L1433.85 681.982 L1433.29 681.982 L1432.73 681.982 L1432.17 681.982 L1431.61 681.982 L1431.05 681.982 L1430.5 681.982 L1429.94 681.982 L1429.38 681.982 L1428.82 681.982 L1428.26 681.982 L1427.7 681.982 L1427.14 681.982 L1426.58 681.982 L1426.02 681.982 L1425.46 681.982 L1424.9 681.982 L1424.34 681.982 L1423.78 681.982 L1423.23 681.982 L1422.67 681.982 L1422.11 681.982 L1421.55 681.982 L1420.99 681.982 L1420.43 681.982 L1419.87 681.982 L1419.31 681.982 L1418.75 681.982 L1418.19 681.982 L1417.63 681.982 L1417.07 681.982 L1416.51 681.982 L1415.95 681.982 L1415.4 681.982 L1414.84 681.982 L1414.28 681.982 L1413.72 681.982 L1413.16 681.982 L1412.6 681.982 L1412.04 681.982 L1411.48 681.982 L1410.92 681.982 L1410.36 681.982 L1409.8 681.982 L1409.24 681.982 L1408.68 681.982 L1408.13 681.982 L1407.57 681.982 L1407.01 681.982 L1406.45 681.982 L1405.89 681.982 L1405.33 681.982 L1404.77 681.982 L1404.21 681.982 L1403.65 681.982 L1403.09 681.982 L1402.53 681.982 L1401.97 681.982 L1401.41 681.982 L1400.86 681.982 L1400.3 681.982 L1399.74 681.982 L1399.18 681.982 L1398.62 681.982 L1398.06 681.982 L1397.5 681.982 L1396.94 681.982 L1396.38 681.982 L1395.82 681.982 L1395.26 681.982 L1394.7 681.982 L1394.14 681.982 L1393.58 681.982 L1393.03 681.982 L1392.47 681.982 L1391.91 681.982 L1391.35 681.982 L1390.79 681.982 L1390.23 681.982 L1389.67 681.982 L1389.11 681.982 L1388.55 681.982 L1387.99 681.982 L1387.43 681.982 L1386.87 681.982 L1386.31 681.982 L1385.76 681.982 L1385.2 681.982 L1384.64 681.982 L1384.08 681.982 L1383.52 681.982 L1382.96 681.982 L1382.4 681.982 L1381.84 681.982 L1381.28 681.982 L1380.72 681.982 L1380.16 681.982 L1379.6 681.982 L1379.04 681.982 L1378.49 681.982 L1377.93 681.982 L1377.37 681.982 L1376.81 681.982 L1376.25 681.982 L1375.69 681.982 L1375.13 681.982 L1374.57 681.982 L1374.01 681.982 L1373.45 681.982 L1372.89 681.982 L1372.33 681.982 L1371.77 681.982 L1371.21 681.982 L1370.66 681.982 L1370.1 681.982 L1369.54 681.982 L1368.98 681.982 L1368.42 681.982 L1367.86 681.982 L1367.3 681.982 L1366.74 681.982 L1366.18 681.982 L1365.62 681.982 L1365.06 681.982 L1364.5 681.982 L1363.94 681.982 L1363.39 681.982 L1362.83 681.982 L1362.27 681.982 L1361.71 681.982 L1361.15 681.982 L1360.59 681.982 L1360.03 681.982 L1359.47 681.982 L1358.91 681.982 L1358.35 681.982 L1357.79 681.982 L1357.23 681.982 L1356.67 681.982 L1356.12 681.982 L1355.56 681.982 L1355 681.982 L1354.44 681.982 L1353.88 681.982 L1353.32 681.982 L1352.76 681.982 L1352.2 681.982 L1351.64 681.982 L1351.08 681.982 L1350.52 681.982 L1349.96 681.982 L1349.4 681.982 L1348.84 681.982 L1348.29 681.982 L1347.73 681.982 L1347.17 681.982 L1346.61 681.982 L1346.05 681.982 L1345.49 681.982 L1344.93 681.982 L1344.37 681.982 L1343.81 681.982 L1343.25 681.982 L1342.69 681.982 L1342.13 681.982 L1341.57 681.982 L1341.02 681.982 L1340.46 681.982 L1339.9 681.982 L1339.34 681.982 L1338.78 681.982 L1338.22 681.982 L1337.66 681.982 L1337.1 681.982 L1336.54 681.982 L1335.98 681.982 L1335.42 681.982 L1334.86 681.982 L1334.3 681.982 L1333.75 681.982 L1333.19 681.982 L1332.63 681.982 L1332.07 681.982 L1331.51 681.982 L1330.95 681.982 L1330.39 681.982 L1329.83 681.982 L1329.27 681.982 L1328.71 681.982 L1328.15 681.982 L1327.59 681.982 L1327.03 681.982 L1326.47 681.982 L1325.92 681.982 L1325.36 681.982 L1324.8 681.982 L1324.24 681.982 L1323.68 681.982 L1323.12 681.982 L1322.56 681.982 L1322 681.982 L1321.44 681.982 L1320.88 681.982 L1320.32 681.982 L1319.76 681.982 L1319.2 681.982 L1318.65 681.982 L1318.09 681.982 L1317.53 681.982 L1316.97 681.982 L1316.41 681.982 L1315.85 681.982 L1315.29 681.982 L1314.73 681.982 L1314.17 681.982 L1313.61 681.982 L1313.05 681.982 L1312.49 681.982 L1311.93 681.982 L1311.38 681.982 L1310.82 681.982 L1310.26 681.982 L1309.7 681.982 L1309.14 681.982 L1308.58 681.982 L1308.02 681.982 L1307.46 681.982 L1306.9 681.982 L1306.34 681.982 L1305.78 681.982 L1305.22 681.982 L1304.66 681.982 L1304.1 681.982 L1303.55 681.982 L1302.99 681.982 L1302.43 681.982 L1301.87 681.982 L1301.31 681.982 L1300.75 681.982 L1300.19 681.982 L1299.63 681.982 L1299.07 681.982 L1298.51 681.982 L1297.95 681.982 L1297.39 681.982 L1296.83 681.982 L1296.28 681.982 L1295.72 681.982 L1295.16 681.982 L1294.6 681.982 L1294.04 681.982 L1293.48 681.982 L1292.92 681.982 L1292.36 681.982 L1291.8 681.982 L1291.24 681.982 L1290.68 681.982 L1290.12 681.982 L1289.56 681.982 L1289 681.982 L1288.45 681.982 L1287.89 681.982 L1287.33 681.982 L1286.77 681.982 L1286.21 681.982 L1285.65 681.982 L1285.09 681.982 L1284.53 681.982 L1283.97 681.982 L1283.41 681.982 L1282.85 681.982 L1282.29 681.982 L1281.73 681.982 L1281.18 681.982 L1280.62 681.982 L1280.06 681.982 L1279.5 681.982 L1278.94 681.982 L1278.38 681.982 L1277.82 681.982 L1277.26 681.982 L1276.7 681.982 L1276.14 681.982 L1275.58 681.982 L1275.02 681.982 L1274.46 681.982 L1273.91 681.982 L1273.35 681.982 L1272.79 681.982 L1272.23 681.982 L1271.67 681.982 L1271.11 681.982 L1270.55 681.982 L1269.99 681.982 L1269.43 681.982 L1268.87 681.982 L1268.31 681.982 L1267.75 681.982 L1267.19 681.982 L1266.63 681.982 L1266.08 681.982 L1265.52 681.982 L1264.96 681.982 L1264.4 681.982 L1263.84 681.982 L1263.28 681.982 L1262.72 681.982 L1262.16 681.982 L1261.6 681.982 L1261.04 681.982 L1260.48 681.982 L1259.92 681.982 L1259.36 681.982 L1258.81 681.982 L1258.25 681.982 L1257.69 681.982 L1257.13 681.982 L1256.57 681.982 L1256.01 681.982 L1255.45 681.982 L1254.89 681.982 L1254.33 681.982 L1253.77 681.982 L1253.21 681.982 L1252.65 681.982 L1252.09 681.982 L1251.54 681.982 L1250.98 681.982 L1250.42 681.982 L1249.86 681.982 L1249.3 681.982 L1248.74 681.982 L1248.18 681.982 L1247.62 681.982 L1247.06 681.982 L1246.5 681.982 L1245.94 681.982 L1245.38 681.982 L1244.82 681.982 L1244.26 681.982 L1243.71 681.982 L1243.15 681.982 L1242.59 681.982 L1242.03 681.982 L1241.47 681.982 L1240.91 681.982 L1240.35 681.982 L1239.79 681.982 L1239.23 681.982 L1238.67 681.982 L1238.11 681.982 L1237.55 681.982 L1236.99 681.982 L1236.44 681.982 L1235.88 681.982 L1235.32 681.982 L1234.76 681.982 L1234.2 681.982 L1233.64 681.982 L1233.08 681.982 L1232.52 681.982 L1231.96 681.982 L1231.4 681.982 L1230.84 681.982 L1230.28 681.982 L1229.72 681.982 L1229.17 681.982 L1228.61 681.982 L1228.05 681.982 L1227.49 681.982 L1226.93 681.982 L1226.37 681.982 L1225.81 681.982 L1225.25 681.982 L1224.69 681.982 L1224.13 681.982 L1223.57 681.982 L1223.01 681.982 L1222.45 681.982 L1221.89 681.982 L1221.34 681.982 L1220.78 681.982 L1220.22 681.982 L1219.66 681.982 L1219.1 681.982 L1218.54 681.982 L1217.98 681.982 L1217.42 681.982 L1216.86 681.982 L1216.3 681.982 L1215.74 681.982 L1215.18 681.982 L1214.62 681.982 L1214.07 681.982 L1213.51 681.982 L1212.95 681.982 L1212.39 681.982 L1211.83 681.982 L1211.27 681.982 L1210.71 681.982 L1210.15 681.982 L1209.59 681.982 L1209.03 681.982 L1208.47 681.982 L1207.91 681.982 L1207.35 681.982 L1206.8 681.982 L1206.24 681.982 L1205.68 681.982 L1205.12 681.982 L1204.56 681.982 L1204 681.982 L1203.44 681.982 L1202.88 681.982 L1202.32 681.982 L1201.76 681.982 L1201.2 681.982 L1200.64 681.982 L1200.08 681.982 L1199.52 681.982 L1198.97 681.982 L1198.41 681.982 L1197.85 681.982 L1197.29 681.982 L1196.73 681.982 L1196.17 681.982 L1195.61 681.982 L1195.05 681.982 L1194.49 681.982 L1193.93 681.982 L1193.37 681.982 L1192.81 681.982 L1192.25 681.982 L1191.7 681.982 L1191.14 681.982 L1190.58 681.982 L1190.02 681.982 L1189.46 681.982 L1188.9 681.982 L1188.34 681.982 L1187.78 681.982 L1187.22 681.982 L1186.66 681.982 L1186.1 681.982 L1185.54 681.982 L1184.98 681.982 L1184.43 681.982 L1183.87 681.982 L1183.31 681.982 L1182.75 681.982 L1182.19 681.982 L1181.63 681.982 L1181.07 681.982 L1180.51 681.982 L1179.95 681.982 L1179.39 681.982 L1178.83 681.982 L1178.27 681.982 L1177.71 681.982 L1177.15 681.982 L1176.6 681.982 L1176.04 681.982 L1175.48 681.982 L1174.92 681.982 L1174.36 681.982 L1173.8 681.982 L1173.24 681.982 L1172.68 681.982 L1172.12 681.982 L1171.56 681.982 L1171 681.982 L1170.44 681.982 L1169.88 681.982 L1169.33 681.982 L1168.77 681.982 L1168.21 681.982 L1167.65 681.982 L1167.09 681.982 L1166.53 681.982 L1165.97 681.982 L1165.41 681.982 L1164.85 681.982 L1164.29 681.982 L1163.73 681.982 L1163.17 681.982 L1162.61 681.982 L1162.05 681.982 L1161.5 681.982 L1160.94 681.982 L1160.38 681.982 L1159.82 681.982 L1159.26 681.982 L1158.7 681.982 L1158.14 681.982 L1157.58 681.982 L1157.02 681.982 L1156.46 681.982 L1155.9 681.982 L1155.34 681.982 L1154.78 681.982 L1154.23 681.982 L1153.67 681.982 L1153.11 681.982 L1152.55 681.982 L1151.99 681.982 L1151.43 681.982 L1150.87 681.982 L1150.31 681.982 L1149.75 681.982 L1149.19 681.982 L1148.63 681.982 L1148.07 681.982 L1147.51 681.982 L1146.96 681.982 L1146.4 681.982 L1145.84 681.982 L1145.28 681.982 L1144.72 681.982 L1144.16 681.982 L1143.6 681.982 L1143.04 681.982 L1142.48 681.982 L1141.92 681.982 L1141.36 681.982 L1140.8 681.982 L1140.24 681.982 L1139.68 681.982 L1139.13 681.982 L1138.57 681.982 L1138.01 681.982 L1137.45 681.982 L1136.89 681.982 L1136.33 681.982 L1135.77 681.982 L1135.21 681.982 L1134.65 681.982 L1134.09 681.982 L1133.53 681.982 L1132.97 681.982 L1132.41 681.982 L1131.86 681.982 L1131.3 681.982 L1130.74 681.982 L1130.18 681.982 L1129.62 681.982 L1129.06 681.982 L1128.5 681.982 L1127.94 681.982 L1127.38 681.982 L1126.82 681.982 L1126.26 681.982 L1125.7 681.982 L1125.14 681.982 L1124.59 681.982 L1124.03 681.982 L1123.47 681.982 L1122.91 681.982 L1122.35 681.982 L1121.79 681.982 L1121.23 681.982 L1120.67 681.982 L1120.11 681.982 L1119.55 681.982 L1118.99 681.982 L1118.43 681.982 L1117.87 681.982 L1117.31 681.982 L1116.76 681.982 L1116.2 681.982 L1115.64 681.982 L1115.08 681.982 L1114.52 681.982 L1113.96 681.982 L1113.4 681.982 L1112.84 681.982 L1112.28 681.982 L1111.72 681.982 L1111.16 681.982 L1110.6 681.982 L1110.04 681.982 L1109.49 681.982 L1108.93 681.982 L1108.37 681.982 L1107.81 681.982 L1107.25 681.982 L1106.69 681.982 L1106.13 681.982 L1105.57 681.982 L1105.01 681.982 L1104.45 681.982 L1103.89 681.982 L1103.33 681.982 L1102.77 681.982 L1102.22 681.982 L1101.66 681.982 L1101.1 681.982 L1100.54 681.982 L1099.98 681.982 L1099.42 681.982 L1098.86 681.982 L1098.3 681.982 L1097.74 681.982 L1097.18 681.982 L1096.62 681.982 L1096.06 681.982 L1095.5 681.982 L1094.94 681.982 L1094.39 681.982 L1093.83 681.982 L1093.27 681.982 L1092.71 681.982 L1092.15 681.982 L1091.59 681.982 L1091.03 681.982 L1090.47 681.982 L1089.91 681.982 L1089.35 681.982 L1088.79 681.982 L1088.23 681.982 L1087.67 681.982 L1087.12 681.982 L1086.56 681.982 L1086 681.982 L1085.44 681.982 L1084.88 681.982 L1084.32 681.982 L1083.76 681.982 L1083.2 681.982 L1082.64 681.982 L1082.08 681.982 L1081.52 681.982 L1080.96 681.982 L1080.4 681.982 L1079.85 681.982 L1079.29 681.982 L1078.73 681.982 L1078.17 681.982 L1077.61 681.982 L1077.05 681.982 L1076.49 681.982 L1075.93 681.982 L1075.37 681.982 L1074.81 681.982 L1074.25 681.982 L1073.69 681.982 L1073.13 681.982 L1072.57 681.982 L1072.02 681.982 L1071.46 681.982 L1070.9 681.982 L1070.34 681.982 L1069.78 681.982 L1069.22 681.982 L1068.66 681.982 L1068.1 681.982 L1067.54 681.982 L1066.98 681.982 L1066.42 681.982 L1065.86 681.982 L1065.3 681.982 L1064.75 681.982 L1064.19 681.982 L1063.63 681.982 L1063.07 681.982 L1062.51 681.982 L1061.95 681.982 L1061.39 681.982 L1060.83 681.982 L1060.27 681.982 L1059.71 681.982 L1059.15 681.982 L1058.59 681.982 L1058.03 681.982 L1057.48 681.982 L1056.92 681.982 L1056.36 681.982 L1055.8 681.982 L1055.24 681.982 L1054.68 681.982 L1054.12 681.982 L1053.56 681.982 L1053 681.982 L1052.44 681.982 L1051.88 681.982 L1051.32 681.982 L1050.76 681.982 L1050.2 681.982 L1049.65 681.982 L1049.09 681.982 L1048.53 681.982 L1047.97 681.982 L1047.41 681.982 L1046.85 681.982 L1046.29 681.982 L1045.73 681.982 L1045.17 681.982 L1044.61 681.982 L1044.05 681.982 L1043.49 681.982 L1042.93 681.982 L1042.38 681.982 L1041.82 681.982 L1041.26 681.982 L1040.7 681.982 L1040.14 681.982 L1039.58 681.982 L1039.02 681.982 L1038.46 681.982 L1037.9 681.982 L1037.34 681.982 L1036.78 681.982 L1036.22 681.982 L1035.66 681.982 L1035.1 681.982 L1034.55 681.982 L1033.99 681.982 L1033.43 681.982 L1032.87 681.982 L1032.31 681.982 L1031.75 681.982 L1031.19 681.982 L1030.63 681.982 L1030.07 681.982 L1029.51 681.982 L1028.95 681.982 L1028.39 681.982 L1027.83 681.982 L1027.28 681.982 L1026.72 681.982 L1026.16 681.982 L1025.6 681.982 L1025.04 681.982 L1024.48 681.982 L1023.92 681.982 L1023.36 681.982 L1022.8 681.982 L1022.24 681.982 L1021.68 681.982 L1021.12 681.982 L1020.56 681.982 L1020.01 681.982 L1019.45 681.982 L1018.89 681.982 L1018.33 681.982 L1017.77 681.982 L1017.21 681.982 L1016.65 681.982 L1016.09 681.982 L1015.53 681.982 L1014.97 681.982 L1014.41 681.982 L1013.85 681.982 L1013.29 681.982 L1012.73 681.982 L1012.18 681.982 L1011.62 681.982 L1011.06 681.982 L1010.5 681.982 L1009.94 681.982 L1009.38 681.982 L1008.82 681.982 L1008.26 681.982 L1007.7 681.982 L1007.14 681.982 L1006.58 681.982 L1006.02 681.982 L1005.46 681.982 L1004.91 681.982 L1004.35 681.982 L1003.79 681.982 L1003.23 681.982 L1002.67 681.982 L1002.11 681.982 L1001.55 681.982 L1000.99 681.982 L1000.43 681.982 L999.872 681.982 L999.313 681.982 L998.754 681.982 L998.194 681.982 L997.635 681.982 L997.076 681.982 L996.517 681.982 L995.957 681.982 L995.398 681.982 L994.839 681.982 L994.28 681.982 L993.72 681.982 L993.161 681.982 L992.602 681.982 L992.043 681.982 L991.483 681.982 L990.924 681.982 L990.365 681.982 L989.806 681.982 L989.246 681.982 L988.687 681.982 L988.128 681.982 L987.569 681.982 L987.009 681.982 L986.45 681.982 L985.891 681.982 L985.332 681.982 L984.772 681.982 L984.213 681.982 L983.654 681.982 L983.095 681.982 L982.535 681.982 L981.976 681.982 L981.417 681.982 L980.858 681.982 L980.298 681.982 L979.739 681.982 L979.18 681.982 L978.621 681.982 L978.061 681.982 L977.502 681.982 L976.943 681.982 L976.384 681.982 L975.824 681.982 L975.265 681.982 L974.706 681.982 L974.147 681.982 L973.587 681.982 L973.028 681.982 L972.469 681.982 L971.91 681.982 L971.35 681.982 L970.791 681.982 L970.232 681.982 L969.673 681.982 L969.113 681.982 L968.554 681.982 L967.995 681.982 L967.436 681.982 L966.876 681.982 L966.317 681.982 L965.758 681.982 L965.199 681.982 L964.639 681.982 L964.08 681.982 L963.521 681.982 L962.962 681.982 L962.402 681.982 L961.843 681.982 L961.284 681.982 L960.725 681.982 L960.165 681.982 L959.606 681.982 L959.047 681.982 L958.488 681.982 L957.928 681.982 L957.369 681.982 L956.81 681.982 L956.251 681.982 L955.691 681.982 L955.132 681.982 L954.573 681.982 L954.014 681.982 L953.454 681.982 L952.895 681.982 L952.336 681.982 L951.777 681.982 L951.217 681.982 L950.658 681.982 L950.099 681.982 L949.54 681.982 L948.98 681.982 L948.421 681.982 L947.862 681.982 L947.303 681.982 L946.743 681.982 L946.184 681.982 L945.625 681.982 L945.066 681.982 L944.506 681.982 L943.947 681.982 L943.388 681.982 L942.829 681.982 L942.269 681.982 L941.71 681.982 L941.151 681.982 L940.592 681.982 L940.032 681.982 L939.473 681.982 L938.914 681.982 L938.355 681.982 L937.795 681.982 L937.236 681.982 L936.677 681.982 L936.118 681.982 L935.558 681.982 L934.999 681.982 L934.44 681.982 L933.881 681.982 L933.321 681.982 L932.762 681.982 L932.203 681.982 L931.644 681.982 L931.084 681.982 L930.525 681.982 L929.966 681.982 L929.406 681.982 L928.847 681.982 L928.288 681.982 L927.729 681.982 L927.169 681.982 L926.61 681.982 L926.051 681.982 L925.492 681.982 L924.932 681.982 L924.373 681.982 L923.814 681.982 L923.255 681.982 L922.695 681.982 L922.136 681.982 L921.577 681.982 L921.018 681.982 L920.458 681.982 L919.899 681.982 L919.34 681.982 L918.781 681.982 L918.221 681.982 L917.662 681.982 L917.103 681.982 L916.544 681.982 L915.984 681.982 L915.425 681.982 L914.866 681.982 L914.307 681.982 L913.747 681.982 L913.188 681.982 L912.629 681.982 L912.07 681.982 L911.51 681.982 L910.951 681.982 L910.392 681.982 L909.833 681.982 L909.273 681.982 L908.714 681.982 L908.155 681.982 L907.596 681.982 L907.036 681.982 L906.477 681.982 L905.918 681.982 L905.359 681.982 L904.799 681.982 L904.24 681.982 L903.681 681.982 L903.122 681.982 L902.562 681.982 L902.003 681.982 L901.444 681.982 L900.885 681.982 L900.325 681.982 L899.766 681.982 L899.207 681.982 L898.648 681.982 L898.088 681.982 L897.529 681.982 L896.97 681.982 L896.411 681.982 L895.851 681.982 L895.292 681.982 L894.733 681.982 L894.174 681.982 L893.614 681.982 L893.055 681.982 L892.496 681.982 L891.937 681.982 L891.377 681.982 L890.818 681.982 L890.259 681.982 L889.7 681.982 L889.14 681.982 L888.581 681.982 L888.022 681.982 L887.463 681.982 L886.903 681.982 L886.344 681.982 L885.785 681.982 L885.226 681.982 L884.666 681.982 L884.107 681.982 L883.548 681.982 L882.989 681.982 L882.429 681.982 L881.87 681.982 L881.311 681.982 L880.752 681.982 L880.192 681.982 L879.633 681.982 L879.074 681.982 L878.515 681.982 L877.955 681.982 L877.396 681.982 L876.837 681.982 L876.278 681.982 L875.718 681.982 L875.159 681.982 L874.6 681.982 L874.041 681.982 L873.481 681.982 L872.922 681.982 L872.363 681.982 L871.804 681.982 L871.244 681.982 L870.685 681.982 L870.126 681.982 L869.567 681.982 L869.007 681.982 L868.448 681.982 L867.889 681.982 L867.33 681.982 L866.77 681.982 L866.211 681.982 L865.652 681.982 L865.093 681.982 L864.533 681.982 L863.974 681.982 L863.415 681.982 L862.856 681.982 L862.296 681.982 L861.737 681.982 L861.178 681.982 L860.619 681.982 L860.059 681.982 L859.5 681.982 L858.941 681.982 L858.382 681.982 L857.822 681.982 L857.263 681.982 L856.704 681.982 L856.145 681.982 L855.585 681.982 L855.026 681.982 L854.467 681.982 L853.908 681.982 L853.348 681.982 L852.789 681.982 L852.23 681.982 L851.671 681.982 L851.111 681.982 L850.552 681.982 L849.993 681.982 L849.434 681.982 L848.874 681.982 L848.315 681.982 L847.756 681.982 L847.197 681.982 L846.637 681.982 L846.078 681.982 L845.519 681.982 L844.96 681.982 L844.4 681.982 L843.841 681.982 L843.282 681.982 L842.723 681.982 L842.163 681.982 L841.604 681.982 L841.045 681.982 L840.486 681.982 L839.926 681.982 L839.367 681.982 L838.808 681.982 L838.249 681.982 L837.689 681.982 L837.13 681.982 L836.571 681.982 L836.012 681.982 L835.452 681.982 L834.893 681.982 L834.334 681.982 L833.775 681.982 L833.215 681.982 L832.656 681.982 L832.097 681.982 L831.538 681.982 L830.978 681.982 L830.419 681.982 L829.86 681.982 L829.301 681.982 L828.741 681.982 L828.182 681.982 L827.623 681.982 L827.064 681.982 L826.504 681.982 L825.945 681.982 L825.386 681.982 L824.827 681.982 L824.267 681.982 L823.708 681.982 L823.149 681.982 L822.59 681.982 L822.03 681.982 L821.471 681.982 L820.912 681.982 L820.353 681.982 L819.793 681.982 L819.234 681.982 L818.675 681.982 L818.116 681.982 L817.556 681.982 L816.997 681.982 L816.438 681.982 L815.879 681.982 L815.319 681.982 L814.76 681.982 L814.201 681.982 L813.642 681.982 L813.082 681.982 L812.523 681.982 L811.964 681.982 L811.405 681.982 L810.845 681.982 L810.286 681.982 L809.727 681.982 L809.168 681.982 L808.608 681.982 L808.049 681.982 L807.49 681.982 L806.931 681.982 L806.371 681.982 L805.812 681.982 L805.253 681.982 L804.693 681.982 L804.134 681.982 L803.575 681.982 L803.016 681.982 L802.456 681.982 L801.897 681.982 L801.338 681.982 L800.779 681.982 L800.219 681.982 L799.66 681.982 L799.101 681.982 L798.542 681.982 L797.982 681.982 L797.423 681.982 L796.864 681.982 L796.305 681.982 L795.745 681.982 L795.186 681.982 L794.627 681.982 L794.068 681.982 L793.508 681.982 L792.949 681.982 L792.39 681.982 L791.831 681.982 L791.271 681.982 L790.712 681.982 L790.153 681.982 L789.594 681.982 L789.034 681.982 L788.475 681.982 L787.916 681.982 L787.357 681.982 L786.797 681.982 L786.238 681.982 L785.679 681.982 L785.12 681.982 L784.56 681.982 L784.001 681.982 L783.442 681.982 L782.883 681.982 L782.323 681.982 L781.764 681.982 L781.205 681.982 L780.646 681.982 L780.086 681.982 L779.527 681.982 L778.968 681.982 L778.409 681.982 L777.849 681.982 L777.29 681.982 L776.731 681.982 L776.172 681.982 L775.612 681.982 L775.053 681.982 L774.494 681.982 L773.935 681.982 L773.375 681.982 L772.816 681.982 L772.257 681.982 L771.698 681.982 L771.138 681.982 L770.579 681.982 L770.02 681.982 L769.461 681.982 L768.901 681.982 L768.342 681.982 L767.783 681.982 L767.224 681.982 L766.664 681.982 L766.105 681.982 L765.546 681.982 L764.987 681.982 L764.427 681.982 L763.868 681.982 L763.309 681.982 L762.75 681.982 L762.19 681.982 L761.631 681.982 L761.072 681.982 L760.513 681.982 L759.953 681.982 L759.394 681.982 L758.835 681.982 L758.276 681.982 L757.716 681.982 L757.157 681.982 L756.598 681.982 L756.039 681.982 L755.479 681.982 L754.92 681.982 L754.361 681.982 L753.802 681.982 L753.242 681.982 L752.683 681.982 L752.124 681.982 L751.565 681.982 L751.005 681.982 L750.446 681.982 L749.887 681.982 L749.328 681.982 L748.768 681.982 L748.209 681.982 L747.65 681.982 L747.091 681.982 L746.531 681.982 L745.972 681.982 L745.413 681.982 L744.854 681.982 L744.294 681.982 L743.735 681.982 L743.176 681.982 L742.617 681.982 L742.057 681.982 L741.498 681.982 L740.939 681.982 L740.38 681.982 L739.82 681.982 L739.261 681.982 L738.702 681.982 L738.143 681.982 L737.583 681.982 L737.024 681.982 L736.465 681.982 L735.906 681.982 L735.346 681.982 L734.787 681.982 L734.228 681.982 L733.669 681.982 L733.109 681.982 L732.55 681.982 L731.991 681.982 L731.432 681.982 L730.872 681.982 L730.313 681.982 L729.754 681.982 L729.195 681.982 L728.635 681.982 L728.076 681.982 L727.517 681.982 L726.958 681.982 L726.398 681.982 L725.839 681.982 L725.28 681.982 L724.721 681.982 L724.161 681.982 L723.602 681.982 L723.043 681.982 L722.484 681.982 L721.924 681.982 L721.365 681.982 L720.806 681.982 L720.247 681.982  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip563)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.015 720.806,686.015 721.365,686.015 721.924,686.015 722.484,686.015 723.043,686.015 723.602,686.015 724.161,686.015 724.721,686.015 725.28,686.015 725.839,686.015 726.398,686.015 726.958,686.015 727.517,686.015 728.076,686.015 728.635,686.015 729.195,686.015 729.754,686.015 730.313,686.015 730.872,686.015 731.432,686.015 731.991,686.015 732.55,686.015 733.109,686.015 733.669,686.015 734.228,686.015 734.787,686.015 735.346,686.015 735.906,686.015 736.465,686.015 737.024,686.015 737.583,686.015 738.143,686.015 738.702,686.015 739.261,686.015 739.82,686.015 740.38,686.015 740.939,686.015 741.498,686.015 742.057,686.015 742.617,686.015 743.176,686.015 743.735,686.015 744.294,686.015 744.854,686.015 745.413,686.015 745.972,686.015 746.531,686.015 747.091,686.015 747.65,686.015 748.209,686.015 748.768,686.015 749.328,686.015 749.887,686.015 750.446,686.015 751.005,686.015 751.565,686.015 752.124,686.015 752.683,686.015 753.242,686.015 753.802,686.015 754.361,686.015 754.92,686.015 755.479,686.015 756.039,686.015 756.598,686.015 757.157,686.015 757.716,686.015 758.276,686.015 758.835,686.015 759.394,686.015 759.953,686.015 760.513,686.015 761.072,686.015 761.631,686.015 762.19,686.015 762.75,686.015 763.309,686.015 763.868,686.015 764.427,686.015 764.987,686.015 765.546,686.015 766.105,686.015 766.664,686.015 767.224,686.015 767.783,686.015 768.342,686.015 768.901,686.015 769.461,686.015 770.02,686.015 770.579,686.015 771.138,686.015 771.698,686.015 772.257,686.015 772.816,686.015 773.375,686.015 773.935,686.015 774.494,686.015 775.053,686.015 775.612,686.015 776.172,686.015 776.731,686.015 777.29,686.015 777.849,686.015 778.409,686.015 778.968,686.015 779.527,686.015 780.086,686.015 780.646,686.015 781.205,686.015 781.764,686.015 782.323,686.015 782.883,686.015 783.442,686.015 784.001,686.015 784.56,686.015 785.12,686.015 785.679,686.015 786.238,686.015 786.797,686.015 787.357,686.015 787.916,686.015 788.475,686.015 789.034,686.015 789.594,686.015 790.153,686.015 790.712,686.015 791.271,686.015 791.831,686.015 792.39,686.015 792.949,686.015 793.508,686.015 794.068,686.015 794.627,686.015 795.186,686.015 795.745,686.015 796.305,686.015 796.864,686.015 797.423,686.015 797.982,686.015 798.542,686.015 799.101,686.015 799.66,686.015 800.219,686.015 800.779,686.015 801.338,686.015 801.897,686.015 802.456,686.015 803.016,686.015 803.575,686.015 804.134,686.015 804.693,686.015 805.253,686.015 805.812,686.015 806.371,686.015 806.931,686.015 807.49,686.015 808.049,686.015 808.608,686.015 809.168,686.015 809.727,686.015 810.286,686.015 810.845,686.015 811.405,686.015 811.964,686.015 812.523,686.015 813.082,686.015 813.642,686.015 814.201,686.015 814.76,686.015 815.319,686.015 815.879,686.015 816.438,686.015 816.997,686.015 817.556,686.015 818.116,686.015 818.675,686.015 819.234,686.015 819.793,686.015 820.353,686.015 820.912,686.015 821.471,686.015 822.03,686.015 822.59,686.015 823.149,686.015 823.708,686.015 824.267,686.015 824.827,686.015 825.386,686.015 825.945,686.015 826.504,686.015 827.064,686.015 827.623,686.015 828.182,686.015 828.741,686.015 829.301,686.015 829.86,686.015 830.419,686.015 830.978,686.015 831.538,686.015 832.097,686.015 832.656,686.015 833.215,686.015 833.775,686.015 834.334,686.015 834.893,686.015 835.452,686.015 836.012,686.015 836.571,686.015 837.13,686.015 837.689,686.015 838.249,686.015 838.808,686.015 839.367,686.015 839.926,686.015 840.486,686.015 841.045,686.015 841.604,686.015 842.163,686.015 842.723,686.015 843.282,686.015 843.841,686.015 844.4,686.015 844.96,686.015 845.519,686.015 846.078,686.015 846.637,686.015 847.197,686.015 847.756,686.015 848.315,686.015 848.874,686.015 849.434,686.015 849.993,686.015 850.552,686.015 851.111,686.015 851.671,686.015 852.23,686.015 852.789,686.015 853.348,686.015 853.908,686.015 854.467,686.015 855.026,686.015 855.585,686.015 856.145,686.015 856.704,686.015 857.263,686.015 857.822,686.015 858.382,686.015 858.941,686.015 859.5,686.015 860.059,686.015 860.619,686.015 861.178,686.015 861.737,686.015 862.296,686.015 862.856,686.015 863.415,686.015 863.974,686.015 864.533,686.015 865.093,686.015 865.652,686.015 866.211,686.015 866.77,686.015 867.33,686.015 867.889,686.015 868.448,686.015 869.007,686.015 869.567,686.015 870.126,686.015 870.685,686.015 871.244,686.015 871.804,686.015 872.363,686.015 872.922,686.015 873.481,686.015 874.041,686.015 874.6,686.015 875.159,686.015 875.718,686.015 876.278,686.015 876.837,686.015 877.396,686.015 877.955,686.015 878.515,686.015 879.074,686.015 879.633,686.015 880.192,686.015 880.752,686.015 881.311,686.015 881.87,686.015 882.429,686.015 882.989,686.015 883.548,686.015 884.107,686.015 884.666,686.015 885.226,686.015 885.785,686.015 886.344,686.015 886.903,686.015 887.463,686.015 888.022,686.015 888.581,686.015 889.14,686.015 889.7,686.015 890.259,686.015 890.818,686.015 891.377,686.015 891.937,686.015 892.496,686.015 893.055,686.015 893.614,686.015 894.174,686.015 894.733,686.015 895.292,686.015 895.851,686.015 896.411,686.015 896.97,686.015 897.529,686.015 898.088,686.015 898.648,686.015 899.207,686.015 899.766,686.015 900.325,686.015 900.885,686.015 901.444,686.015 902.003,686.015 902.562,686.015 903.122,686.015 903.681,686.015 904.24,686.015 904.799,686.015 905.359,686.015 905.918,686.015 906.477,686.015 907.036,686.015 907.596,686.015 908.155,686.015 908.714,686.015 909.273,686.015 909.833,686.015 910.392,686.015 910.951,686.015 911.51,686.015 912.07,686.015 912.629,686.015 913.188,686.015 913.747,686.015 914.307,686.015 914.866,686.015 915.425,686.015 915.984,686.015 916.544,686.015 917.103,686.015 917.662,686.015 918.221,686.015 918.781,686.015 919.34,686.015 919.899,686.015 920.458,686.015 921.018,686.015 921.577,686.015 922.136,686.015 922.695,686.015 923.255,686.015 923.814,686.015 924.373,686.015 924.932,686.015 925.492,686.015 926.051,686.015 926.61,686.015 927.169,686.015 927.729,686.015 928.288,686.015 928.847,686.015 929.406,686.015 929.966,686.015 930.525,686.015 931.084,686.015 931.644,686.015 932.203,686.015 932.762,686.015 933.321,686.015 933.881,686.015 934.44,686.015 934.999,686.015 935.558,686.015 936.118,686.015 936.677,686.015 937.236,686.015 937.795,686.015 938.355,686.015 938.914,686.015 939.473,686.015 940.032,686.015 940.592,686.015 941.151,686.015 941.71,686.015 942.269,686.015 942.829,686.015 943.388,686.015 943.947,686.015 944.506,686.015 945.066,686.015 945.625,686.015 946.184,686.015 946.743,686.015 947.303,686.015 947.862,686.015 948.421,686.015 948.98,686.015 949.54,686.015 950.099,686.015 950.658,686.015 951.217,686.015 951.777,686.015 952.336,686.015 952.895,686.015 953.454,686.015 954.014,686.015 954.573,686.015 955.132,686.015 955.691,686.015 956.251,686.015 956.81,686.015 957.369,686.015 957.928,686.015 958.488,686.015 959.047,686.015 959.606,686.015 960.165,686.015 960.725,686.015 961.284,686.015 961.843,686.015 962.402,686.015 962.962,686.015 963.521,686.015 964.08,686.015 964.639,686.015 965.199,686.015 965.758,686.015 966.317,686.015 966.876,686.015 967.436,686.015 967.995,686.015 968.554,686.015 969.113,686.015 969.673,686.015 970.232,686.015 970.791,686.015 971.35,686.015 971.91,686.015 972.469,686.015 973.028,686.015 973.587,686.015 974.147,686.015 974.706,686.015 975.265,686.015 975.824,686.015 976.384,686.015 976.943,686.015 977.502,686.015 978.061,686.015 978.621,686.015 979.18,686.015 979.739,686.015 980.298,686.015 980.858,686.015 981.417,686.015 981.976,686.015 982.535,686.015 983.095,686.015 983.654,686.015 984.213,686.015 984.772,686.015 985.332,686.015 985.891,686.015 986.45,686.015 987.009,686.015 987.569,686.015 988.128,686.015 988.687,686.015 989.246,686.015 989.806,686.015 990.365,686.015 990.924,686.015 991.483,686.015 992.043,686.015 992.602,686.015 993.161,686.015 993.72,686.015 994.28,686.015 994.839,686.015 995.398,686.015 995.957,686.015 996.517,686.015 997.076,686.015 997.635,686.015 998.194,686.015 998.754,686.015 999.313,686.015 999.872,686.015 1000.43,686.015 1000.99,686.015 1001.55,686.015 1002.11,686.015 1002.67,686.015 1003.23,686.015 1003.79,686.015 1004.35,686.015 1004.91,686.015 1005.46,686.015 1006.02,686.015 1006.58,686.015 1007.14,686.015 1007.7,686.015 1008.26,686.015 1008.82,686.015 1009.38,686.015 1009.94,686.015 1010.5,686.015 1011.06,686.015 1011.62,686.015 1012.18,686.015 1012.73,686.015 1013.29,686.015 1013.85,686.015 1014.41,686.015 1014.97,686.015 1015.53,686.015 1016.09,686.015 1016.65,686.015 1017.21,686.015 1017.77,686.015 1018.33,686.015 1018.89,686.015 1019.45,686.015 1020.01,686.015 1020.56,686.015 1021.12,686.015 1021.68,686.015 1022.24,686.015 1022.8,686.015 1023.36,686.015 1023.92,686.015 1024.48,686.015 1025.04,686.015 1025.6,686.015 1026.16,686.015 1026.72,686.015 1027.28,686.015 1027.83,686.015 1028.39,686.015 1028.95,686.015 1029.51,686.015 1030.07,686.015 1030.63,686.015 1031.19,686.015 1031.75,686.015 1032.31,686.015 1032.87,686.015 1033.43,686.015 1033.99,686.015 1034.55,686.015 1035.1,686.015 1035.66,686.015 1036.22,686.015 1036.78,686.015 1037.34,686.015 1037.9,686.015 1038.46,686.015 1039.02,686.015 1039.58,686.015 1040.14,686.015 1040.7,686.015 1041.26,686.015 1041.82,686.015 1042.38,686.015 1042.93,686.015 1043.49,686.015 1044.05,686.015 1044.61,686.015 1045.17,686.015 1045.73,686.015 1046.29,686.015 1046.85,686.015 1047.41,686.015 1047.97,686.015 1048.53,686.015 1049.09,686.015 1049.65,686.015 1050.2,686.015 1050.76,686.015 1051.32,686.015 1051.88,686.015 1052.44,686.015 1053,686.015 1053.56,686.015 1054.12,686.015 1054.68,686.015 1055.24,686.015 1055.8,686.015 1056.36,686.015 1056.92,686.015 1057.48,686.015 1058.03,686.015 1058.59,686.015 1059.15,686.015 1059.71,686.015 1060.27,686.015 1060.83,686.015 1061.39,686.015 1061.95,686.015 1062.51,686.015 1063.07,686.015 1063.63,686.015 1064.19,686.015 1064.75,686.015 1065.3,686.015 1065.86,686.015 1066.42,686.015 1066.98,686.015 1067.54,686.015 1068.1,686.015 1068.66,686.015 1069.22,686.015 1069.78,686.015 1070.34,686.015 1070.9,686.015 1071.46,686.015 1072.02,686.015 1072.57,686.015 1073.13,686.015 1073.69,686.015 1074.25,686.015 1074.81,686.015 1075.37,686.015 1075.93,686.015 1076.49,686.015 1077.05,686.015 1077.61,686.015 1078.17,686.015 1078.73,686.015 1079.29,686.015 1079.85,686.015 1080.4,686.015 1080.96,686.015 1081.52,686.015 1082.08,686.015 1082.64,686.015 1083.2,686.015 1083.76,686.015 1084.32,686.015 1084.88,686.015 1085.44,686.015 1086,686.015 1086.56,686.015 1087.12,686.015 1087.67,686.015 1088.23,686.015 1088.79,686.015 1089.35,686.015 1089.91,686.015 1090.47,686.015 1091.03,686.015 1091.59,686.015 1092.15,686.015 1092.71,686.015 1093.27,686.015 1093.83,686.015 1094.39,686.015 1094.94,686.015 1095.5,686.015 1096.06,686.015 1096.62,686.015 1097.18,686.015 1097.74,686.015 1098.3,686.015 1098.86,686.015 1099.42,686.015 1099.98,686.015 1100.54,686.015 1101.1,686.015 1101.66,686.015 1102.22,686.015 1102.77,686.015 1103.33,686.015 1103.89,686.015 1104.45,686.015 1105.01,686.015 1105.57,686.015 1106.13,686.015 1106.69,686.015 1107.25,686.015 1107.81,686.015 1108.37,686.015 1108.93,686.015 1109.49,686.015 1110.04,686.015 1110.6,686.015 1111.16,686.015 1111.72,686.015 1112.28,686.015 1112.84,686.015 1113.4,686.015 1113.96,686.015 1114.52,686.015 1115.08,686.015 1115.64,686.015 1116.2,686.015 1116.76,686.015 1117.31,686.015 1117.87,686.015 1118.43,686.015 1118.99,686.015 1119.55,686.015 1120.11,686.015 1120.67,686.015 1121.23,686.015 1121.79,686.015 1122.35,686.015 1122.91,686.015 1123.47,686.015 1124.03,686.015 1124.59,686.015 1125.14,686.015 1125.7,686.015 1126.26,686.015 1126.82,686.015 1127.38,686.015 1127.94,686.015 1128.5,686.015 1129.06,686.015 1129.62,686.015 1130.18,686.015 1130.74,686.015 1131.3,686.015 1131.86,686.015 1132.41,686.015 1132.97,686.015 1133.53,686.015 1134.09,686.015 1134.65,686.015 1135.21,686.015 1135.77,686.015 1136.33,686.015 1136.89,686.015 1137.45,686.015 1138.01,686.015 1138.57,686.015 1139.13,686.015 1139.68,686.015 1140.24,686.015 1140.8,686.015 1141.36,686.015 1141.92,686.015 1142.48,686.015 1143.04,686.015 1143.6,686.015 1144.16,686.015 1144.72,686.015 1145.28,686.015 1145.84,686.015 1146.4,686.015 1146.96,686.015 1147.51,686.015 1148.07,686.015 1148.63,686.015 1149.19,686.015 1149.75,686.015 1150.31,686.015 1150.87,686.015 1151.43,686.015 1151.99,686.015 1152.55,686.015 1153.11,686.015 1153.67,686.015 1154.23,686.015 1154.78,686.015 1155.34,686.015 1155.9,686.015 1156.46,686.015 1157.02,686.015 1157.58,686.015 1158.14,686.015 1158.7,686.015 1159.26,686.015 1159.82,686.015 1160.38,686.015 1160.94,686.015 1161.5,686.015 1162.05,686.015 1162.61,686.015 1163.17,686.015 1163.73,686.015 1164.29,686.015 1164.85,686.015 1165.41,686.015 1165.97,686.015 1166.53,686.015 1167.09,686.015 1167.65,686.015 1168.21,686.015 1168.77,686.015 1169.33,686.015 1169.88,686.015 1170.44,686.015 1171,686.015 1171.56,686.015 1172.12,686.015 1172.68,686.015 1173.24,686.015 1173.8,686.015 1174.36,686.015 1174.92,686.015 1175.48,686.015 1176.04,686.015 1176.6,686.015 1177.15,686.015 1177.71,686.015 1178.27,686.015 1178.83,686.015 1179.39,686.015 1179.95,686.015 1180.51,686.015 1181.07,686.015 1181.63,686.015 1182.19,686.015 1182.75,686.015 1183.31,686.015 1183.87,686.015 1184.43,686.015 1184.98,686.015 1185.54,686.015 1186.1,686.015 1186.66,686.015 1187.22,686.015 1187.78,686.015 1188.34,686.015 1188.9,686.015 1189.46,686.015 1190.02,686.015 1190.58,686.015 1191.14,686.015 1191.7,686.015 1192.25,686.015 1192.81,686.015 1193.37,686.015 1193.93,686.015 1194.49,686.015 1195.05,686.015 1195.61,686.015 1196.17,686.015 1196.73,686.015 1197.29,686.015 1197.85,686.015 1198.41,686.015 1198.97,686.015 1199.52,686.015 1200.08,686.015 1200.64,686.015 1201.2,686.015 1201.76,686.015 1202.32,686.015 1202.88,686.015 1203.44,686.015 1204,686.015 1204.56,686.015 1205.12,686.015 1205.68,686.015 1206.24,686.015 1206.8,686.015 1207.35,686.015 1207.91,686.015 1208.47,686.015 1209.03,686.015 1209.59,686.015 1210.15,686.015 1210.71,686.015 1211.27,686.015 1211.83,686.015 1212.39,686.015 1212.95,686.015 1213.51,686.015 1214.07,686.015 1214.62,686.015 1215.18,686.015 1215.74,686.015 1216.3,686.015 1216.86,686.015 1217.42,686.015 1217.98,686.015 1218.54,686.015 1219.1,686.015 1219.66,686.015 1220.22,686.015 1220.78,686.015 1221.34,686.015 1221.89,686.015 1222.45,686.015 1223.01,686.015 1223.57,686.015 1224.13,686.015 1224.69,686.015 1225.25,686.015 1225.81,686.015 1226.37,686.015 1226.93,686.015 1227.49,686.015 1228.05,686.015 1228.61,686.015 1229.17,686.015 1229.72,686.015 1230.28,686.015 1230.84,686.015 1231.4,686.015 1231.96,686.015 1232.52,686.015 1233.08,686.015 1233.64,686.015 1234.2,686.015 1234.76,686.015 1235.32,686.015 1235.88,686.015 1236.44,686.015 1236.99,686.015 1237.55,686.015 1238.11,686.015 1238.67,686.015 1239.23,686.015 1239.79,686.015 1240.35,686.015 1240.91,686.015 1241.47,686.015 1242.03,686.015 1242.59,686.015 1243.15,686.015 1243.71,686.015 1244.26,686.015 1244.82,686.015 1245.38,686.015 1245.94,686.015 1246.5,686.015 1247.06,686.015 1247.62,686.015 1248.18,686.015 1248.74,686.015 1249.3,686.015 1249.86,686.015 1250.42,686.015 1250.98,686.015 1251.54,686.015 1252.09,686.015 1252.65,686.015 1253.21,686.015 1253.77,686.015 1254.33,686.015 1254.89,686.015 1255.45,686.015 1256.01,686.015 1256.57,686.015 1257.13,686.015 1257.69,686.015 1258.25,686.015 1258.81,686.015 1259.36,686.015 1259.92,686.015 1260.48,686.015 1261.04,686.015 1261.6,686.015 1262.16,686.015 1262.72,686.015 1263.28,686.015 1263.84,686.015 1264.4,686.015 1264.96,686.015 1265.52,686.015 1266.08,686.015 1266.63,686.015 1267.19,686.015 1267.75,686.015 1268.31,686.015 1268.87,686.015 1269.43,686.015 1269.99,686.015 1270.55,686.015 1271.11,686.015 1271.67,686.015 1272.23,686.015 1272.79,686.015 1273.35,686.015 1273.91,686.015 1274.46,686.015 1275.02,686.015 1275.58,686.015 1276.14,686.015 1276.7,686.015 1277.26,686.015 1277.82,686.015 1278.38,686.015 1278.94,686.015 1279.5,686.015 1280.06,686.015 1280.62,686.015 1281.18,686.015 1281.73,686.015 1282.29,686.015 1282.85,686.015 1283.41,686.015 1283.97,686.015 1284.53,686.015 1285.09,686.015 1285.65,686.015 1286.21,686.015 1286.77,686.015 1287.33,686.015 1287.89,686.015 1288.45,686.015 1289,686.015 1289.56,686.015 1290.12,686.015 1290.68,686.015 1291.24,686.015 1291.8,686.015 1292.36,686.015 1292.92,686.015 1293.48,686.015 1294.04,686.015 1294.6,686.015 1295.16,686.015 1295.72,686.015 1296.28,686.015 1296.83,686.015 1297.39,686.015 1297.95,686.015 1298.51,686.015 1299.07,686.015 1299.63,686.015 1300.19,686.015 1300.75,686.015 1301.31,686.015 1301.87,686.015 1302.43,686.015 1302.99,686.015 1303.55,686.015 1304.1,686.015 1304.66,686.015 1305.22,686.015 1305.78,686.015 1306.34,686.015 1306.9,686.015 1307.46,686.015 1308.02,686.015 1308.58,686.015 1309.14,686.015 1309.7,686.015 1310.26,686.015 1310.82,686.015 1311.38,686.015 1311.93,686.015 1312.49,686.015 1313.05,686.015 1313.61,686.015 1314.17,686.015 1314.73,686.015 1315.29,686.015 1315.85,686.015 1316.41,686.015 1316.97,686.015 1317.53,686.015 1318.09,686.015 1318.65,686.015 1319.2,686.015 1319.76,686.015 1320.32,686.015 1320.88,686.015 1321.44,686.015 1322,686.015 1322.56,686.015 1323.12,686.015 1323.68,686.015 1324.24,686.015 1324.8,686.015 1325.36,686.015 1325.92,686.015 1326.47,686.015 1327.03,686.015 1327.59,686.015 1328.15,686.015 1328.71,686.015 1329.27,686.015 1329.83,686.015 1330.39,686.015 1330.95,686.015 1331.51,686.015 1332.07,686.015 1332.63,686.015 1333.19,686.015 1333.75,686.015 1334.3,686.015 1334.86,686.015 1335.42,686.015 1335.98,686.015 1336.54,686.015 1337.1,686.015 1337.66,686.015 1338.22,686.015 1338.78,686.015 1339.34,686.015 1339.9,686.015 1340.46,686.015 1341.02,686.015 1341.57,686.015 1342.13,686.015 1342.69,686.015 1343.25,686.015 1343.81,686.015 1344.37,686.015 1344.93,686.015 1345.49,686.015 1346.05,686.015 1346.61,686.015 1347.17,686.015 1347.73,686.015 1348.29,686.015 1348.84,686.015 1349.4,686.015 1349.96,686.015 1350.52,686.015 1351.08,686.015 1351.64,686.015 1352.2,686.015 1352.76,686.015 1353.32,686.015 1353.88,686.015 1354.44,686.015 1355,686.015 1355.56,686.015 1356.12,686.015 1356.67,686.015 1357.23,686.015 1357.79,686.015 1358.35,686.015 1358.91,686.015 1359.47,686.015 1360.03,686.015 1360.59,686.015 1361.15,686.015 1361.71,686.015 1362.27,686.015 1362.83,686.015 1363.39,686.015 1363.94,686.015 1364.5,686.015 1365.06,686.015 1365.62,686.015 1366.18,686.015 1366.74,686.015 1367.3,686.015 1367.86,686.015 1368.42,686.015 1368.98,686.015 1369.54,686.015 1370.1,686.015 1370.66,686.015 1371.21,686.015 1371.77,686.015 1372.33,686.015 1372.89,686.015 1373.45,686.015 1374.01,686.015 1374.57,686.015 1375.13,686.015 1375.69,686.015 1376.25,686.015 1376.81,686.015 1377.37,686.015 1377.93,686.015 1378.49,686.015 1379.04,686.015 1379.6,686.015 1380.16,686.015 1380.72,686.015 1381.28,686.015 1381.84,686.015 1382.4,686.015 1382.96,686.015 1383.52,686.015 1384.08,686.015 1384.64,686.015 1385.2,686.015 1385.76,686.015 1386.31,686.015 1386.87,686.015 1387.43,686.015 1387.99,686.015 1388.55,686.015 1389.11,686.015 1389.67,686.015 1390.23,686.015 1390.79,686.015 1391.35,686.015 1391.91,686.015 1392.47,686.015 1393.03,686.015 1393.58,686.015 1394.14,686.015 1394.7,686.015 1395.26,686.015 1395.82,686.015 1396.38,686.015 1396.94,686.015 1397.5,686.015 1398.06,686.015 1398.62,686.015 1399.18,686.015 1399.74,686.015 1400.3,686.015 1400.86,686.015 1401.41,686.015 1401.97,686.015 1402.53,686.015 1403.09,686.015 1403.65,686.015 1404.21,686.015 1404.77,686.015 1405.33,686.015 1405.89,686.015 1406.45,686.015 1407.01,686.015 1407.57,686.015 1408.13,686.015 1408.68,686.015 1409.24,686.015 1409.8,686.015 1410.36,686.015 1410.92,686.015 1411.48,686.015 1412.04,686.015 1412.6,686.015 1413.16,686.015 1413.72,686.015 1414.28,686.015 1414.84,686.015 1415.4,686.015 1415.95,686.015 1416.51,686.015 1417.07,686.015 1417.63,686.015 1418.19,686.015 1418.75,686.015 1419.31,686.015 1419.87,686.015 1420.43,686.015 1420.99,686.015 1421.55,686.015 1422.11,686.015 1422.67,686.015 1423.23,686.015 1423.78,686.015 1424.34,686.015 1424.9,686.015 1425.46,686.015 1426.02,686.015 1426.58,686.015 1427.14,686.015 1427.7,686.015 1428.26,686.015 1428.82,686.015 1429.38,686.015 1429.94,686.015 1430.5,686.015 1431.05,686.015 1431.61,686.015 1432.17,686.015 1432.73,686.015 1433.29,686.015 1433.85,686.015 1434.41,686.015 1434.97,686.015 1435.53,686.015 1436.09,686.015 1436.65,686.015 1437.21,686.015 1437.77,686.015 1438.33,686.015 1438.88,686.015 1439.44,686.015 1440,686.015 1440.56,686.015 1441.12,686.015 1441.68,686.015 1442.24,686.015 1442.8,686.015 1443.36,686.015 1443.92,686.015 1444.48,686.015 1445.04,686.015 1445.6,686.015 1446.15,686.015 1446.71,686.015 1447.27,686.015 1447.83,686.015 1448.39,686.015 1448.95,686.015 1449.51,686.015 1450.07,686.015 1450.63,686.015 1451.19,686.015 1451.75,686.015 1452.31,686.015 1452.87,686.015 1453.42,686.015 1453.98,686.015 1454.54,686.015 1455.1,686.015 1455.66,686.015 1456.22,686.015 1456.78,686.015 1457.34,686.015 1457.9,686.015 1458.46,686.015 1459.02,686.015 1459.58,686.015 1460.14,686.015 1460.7,686.015 1461.25,686.015 1461.81,686.015 1462.37,686.015 1462.93,686.015 1463.49,686.015 1464.05,686.015 1464.61,686.015 1465.17,686.015 1465.73,686.015 1466.29,686.015 1466.85,686.015 1467.41,686.015 1467.97,686.015 1468.52,686.015 1469.08,686.015 1469.64,686.015 1470.2,686.015 1470.76,686.015 1471.32,686.015 1471.88,686.015 1472.44,686.015 1473,686.015 1473.56,686.015 1474.12,686.015 1474.68,686.015 1475.24,686.015 1475.79,686.015 1476.35,686.015 1476.91,686.015 1477.47,686.015 1478.03,686.015 1478.59,686.015 1479.15,686.015 1479.71,686.015 1480.27,686.015 1480.83,686.015 1481.39,686.015 1481.95,686.015 1482.51,686.015 1483.07,686.015 1483.62,686.015 1484.18,686.015 1484.74,686.015 1485.3,686.015 1485.86,686.015 1486.42,686.015 1486.98,686.015 1487.54,686.015 1488.1,686.015 1488.66,686.015 1489.22,686.015 1489.78,686.015 1490.34,686.015 1490.89,686.015 1491.45,686.015 1492.01,686.015 1492.57,686.015 1493.13,686.015 1493.69,686.015 1494.25,686.015 1494.81,686.015 1495.37,686.015 1495.93,686.015 1496.49,686.015 1497.05,686.015 1497.61,686.015 1498.16,686.015 1498.72,686.015 1499.28,686.015 1499.84,686.015 1500.4,686.015 1500.96,686.015 1501.52,686.015 1502.08,686.015 1502.64,686.015 1503.2,686.015 1503.76,686.015 1504.32,686.015 1504.88,686.015 1505.44,686.015 1505.99,686.015 1506.55,686.015 1507.11,686.015 1507.67,686.015 1508.23,686.015 1508.79,686.015 1509.35,686.015 1509.91,686.015 1510.47,686.015 1511.03,686.015 1511.59,686.015 1512.15,686.015 1512.71,686.015 1513.26,686.015 1513.82,686.015 1514.38,686.015 1514.94,686.015 1515.5,686.015 1516.06,686.015 1516.62,686.015 1517.18,686.015 1517.74,686.015 1518.3,686.015 1518.86,686.015 1519.42,686.015 1519.98,686.015 1520.53,686.015 1521.09,686.015 1521.65,686.015 1522.21,686.015 1522.77,686.015 1523.33,686.015 1523.89,686.015 1524.45,686.015 1525.01,686.015 1525.57,686.015 1526.13,686.015 1526.69,686.015 1527.25,686.015 1527.81,686.015 1528.36,686.015 1528.92,686.015 1529.48,686.015 1530.04,686.015 1530.6,686.015 1531.16,686.015 1531.72,686.015 1532.28,686.015 1532.84,686.015 1533.4,686.015 1533.96,686.015 1534.52,686.015 1535.08,686.015 1535.63,686.015 1536.19,686.015 1536.75,686.015 1537.31,686.015 1537.87,686.015 1538.43,686.015 1538.99,686.015 1539.55,686.015 1540.11,686.015 1540.67,686.015 1541.23,686.015 1541.79,686.015 1542.35,686.015 1542.9,686.015 1543.46,686.015 1544.02,686.015 1544.58,686.015 1545.14,686.015 1545.7,686.015 1546.26,686.015 1546.82,686.015 1547.38,686.015 1547.94,686.015 1548.5,686.015 1549.06,686.015 1549.62,686.015 1550.18,686.015 1550.73,686.015 1551.29,686.015 1551.85,686.015 1552.41,686.015 1552.97,686.015 1553.53,686.015 1554.09,686.015 1554.65,686.015 1555.21,686.015 1555.77,686.015 1556.33,686.015 1556.89,686.015 1557.45,686.015 1558,686.015 1558.56,686.015 1559.12,686.015 1559.68,686.015 1560.24,686.015 1560.8,686.015 1561.36,686.015 1561.92,686.015 1562.48,686.015 1563.04,686.015 1563.6,686.015 1564.16,686.015 1564.72,686.015 1565.28,686.015 1565.83,686.015 1566.39,686.015 1566.95,686.015 1567.51,686.015 1568.07,686.015 1568.63,686.015 1569.19,686.015 1569.75,686.015 1570.31,686.015 1570.87,686.015 1571.43,686.015 1571.99,686.015 1572.55,686.015 1573.1,686.015 1573.66,686.015 1574.22,686.015 1574.78,686.015 1575.34,686.015 1575.9,686.015 1576.46,686.015 1577.02,686.015 1577.58,686.015 1578.14,686.015 1578.7,686.015 1579.26,686.015 1579.82,686.015 1580.37,686.015 1580.93,686.015 1581.49,686.015 1582.05,686.015 1582.61,686.015 1583.17,686.015 1583.73,686.015 1584.29,686.015 1584.85,686.015 1585.41,686.015 1585.97,686.015 1586.53,686.015 1587.09,686.015 1587.65,686.015 1588.2,686.015 1588.76,686.015 1589.32,686.015 1589.88,686.015 1590.44,686.015 1591,686.015 1591.56,686.015 1592.12,686.015 1592.68,686.015 1593.24,686.015 1593.8,686.015 1594.36,686.015 1594.92,686.015 1595.47,686.015 1596.03,686.015 1596.59,686.015 1597.15,686.015 1597.71,686.015 1598.27,686.015 1598.83,686.015 1599.39,686.015 1599.95,686.015 1600.51,686.015 1601.07,686.015 1601.63,686.015 1602.19,686.015 1602.74,686.015 1603.3,686.015 1603.86,686.015 1604.42,686.015 1604.98,686.015 1605.54,686.015 1606.1,686.015 1606.66,686.015 1607.22,686.015 1607.78,686.015 1608.34,686.015 1608.9,686.015 1609.46,686.015 1610.02,686.015 1610.57,686.015 1611.13,686.015 1611.69,686.015 1612.25,686.015 1612.81,686.015 1613.37,686.015 1613.93,686.015 1614.49,686.015 1615.05,686.015 1615.61,686.015 1616.17,686.015 1616.73,686.015 1617.29,686.015 1617.84,686.015 1618.4,686.015 1618.96,686.015 1619.52,686.015 1620.08,686.015 1620.64,686.015 1621.2,686.015 1621.76,686.015 1622.32,686.015 1622.88,686.015 1623.44,686.015 1624,686.015 1624.56,686.015 1625.11,686.015 1625.67,686.015 1626.23,686.015 1626.79,686.015 1627.35,686.015 1627.91,686.015 1628.47,686.015 1629.03,686.015 1629.59,686.015 1630.15,686.015 1630.71,686.015 1631.27,686.015 1631.83,686.015 1632.39,686.015 1632.94,686.015 1633.5,686.015 1634.06,686.015 1634.62,686.015 1635.18,686.015 1635.74,686.015 1636.3,686.015 1636.86,686.015 1637.42,686.015 1637.98,686.015 1638.54,686.015 1639.1,686.015 1639.66,686.015 1640.21,686.015 1640.77,686.015 1641.33,686.015 1641.89,686.015 1642.45,686.015 1643.01,686.015 1643.57,686.015 1644.13,686.015 1644.69,686.015 1645.25,686.015 1645.81,686.015 1646.37,686.015 1646.93,686.015 1647.48,686.015 1648.04,686.015 1648.6,686.015 1649.16,686.015 1649.72,686.015 1650.28,686.015 1650.84,686.015 1651.4,686.015 1651.96,686.015 1652.52,686.015 1653.08,686.015 1653.64,686.015 1654.2,686.015 1654.76,686.015 1655.31,686.015 1655.87,686.015 1656.43,686.015 1656.99,686.015 1657.55,686.015 1658.11,686.015 1658.67,686.015 1659.23,686.015 1659.79,686.015 1660.35,686.015 1660.91,686.015 1661.47,686.015 1662.03,686.015 1662.58,686.015 1663.14,686.015 1663.7,686.015 1664.26,686.015 1664.82,686.015 1665.38,686.015 1665.94,686.015 1666.5,686.015 1667.06,686.015 1667.62,686.015 1668.18,686.015 1668.74,686.015 1669.3,686.015 1669.85,686.015 1670.41,686.015 1670.97,686.015 1671.53,686.015 1672.09,686.015 1672.65,686.015 1673.21,686.015 1673.77,686.015 1674.33,686.015 1674.89,686.015 1675.45,686.015 1676.01,686.015 1676.57,686.015 1677.13,686.015 1677.68,686.015 1678.24,686.015 1678.8,686.015 1679.36,686.015 1679.92,686.015 1680.48,686.015 1681.04,686.015 1681.6,686.015 1682.16,686.015 1682.72,686.015 1683.28,686.015 1683.84,686.015 1684.4,686.015 1684.95,686.015 1685.51,686.015 1686.07,686.015 1686.63,686.015 1687.19,686.015 1687.75,686.015 1688.31,686.015 1688.87,686.015 1689.43,686.015 1689.99,686.015 1690.55,686.015 1691.11,686.015 1691.67,686.015 1692.23,686.015 1692.78,686.015 1693.34,686.015 1693.9,686.015 1694.46,686.015 1695.02,686.015 1695.58,686.015 1696.14,686.015 1696.7,686.015 1697.26,686.015 1697.82,686.015 1698.38,686.015 1698.94,686.015 1699.5,686.015 1700.05,686.015 1700.61,686.015 1701.17,686.015 1701.73,686.015 1702.29,686.015 1702.85,686.015 1703.41,686.015 1703.97,686.015 1704.53,686.015 1705.09,686.015 1705.65,686.015 1706.21,686.015 1706.77,686.015 1707.32,686.015 1707.88,686.015 1708.44,686.015 1709,686.015 1709.56,686.015 1710.12,686.015 1710.68,686.015 1711.24,686.015 1711.8,686.015 1712.36,686.015 1712.92,686.015 1713.48,686.015 1714.04,686.015 1714.6,686.015 1715.15,686.015 1715.71,686.015 1716.27,686.015 1716.83,686.015 1717.39,686.015 1717.95,686.015 1718.51,686.015 1719.07,686.015 1719.63,686.015 1720.19,686.015 1720.75,686.015 1721.31,686.015 1721.87,686.015 1722.42,686.015 1722.98,686.015 1723.54,686.015 1724.1,686.015 1724.66,686.015 1725.22,686.015 1725.78,686.015 1726.34,686.015 1726.9,686.015 1727.46,686.015 1728.02,686.015 1728.58,686.015 1729.14,686.015 1729.69,686.015 1730.25,686.015 1730.81,686.015 1731.37,686.015 1731.93,686.015 1732.49,686.015 1733.05,686.015 1733.61,686.015 1734.17,686.015 1734.73,686.015 1735.29,686.015 1735.85,686.015 1736.41,686.015 1736.97,686.015 1737.52,686.015 1738.08,686.015 1738.64,686.015 1739.2,686.015 1739.76,686.015 1740.32,686.015 1740.88,686.015 1741.44,686.015 1742,686.015 1742.56,686.015 1743.12,686.015 1743.68,686.015 1744.24,686.015 1744.79,686.015 1745.35,686.015 1745.91,686.015 1746.47,686.015 1747.03,686.015 1747.59,686.015 1748.15,686.015 1748.71,686.015 1749.27,686.015 1749.83,686.015 1750.39,686.015 1750.95,686.015 1751.51,686.015 1752.06,686.015 1752.62,686.015 1753.18,686.015 1753.74,686.015 1754.3,686.015 1754.86,686.015 1755.42,686.015 1755.98,686.015 1756.54,686.015 1757.1,686.015 1757.66,686.015 1758.22,686.015 1758.78,686.015 1759.34,686.015 1759.89,686.015 1760.45,686.015 1761.01,686.015 1761.57,686.015 1762.13,686.015 1762.69,686.015 1763.25,686.015 1763.81,686.015 1764.37,686.015 1764.93,686.015 1765.49,686.015 1766.05,686.015 1766.61,686.015 1767.16,686.015 1767.72,686.015 1768.28,686.015 1768.84,686.015 1769.4,686.015 1769.96,686.015 1770.52,686.015 1771.08,686.015 1771.64,686.015 1772.2,686.015 1772.76,686.015 1773.32,686.015 1773.88,686.015 1774.43,686.015 1774.99,686.015 1775.55,686.015 1776.11,686.015 1776.67,686.015 1777.23,686.015 1777.79,686.015 1778.35,686.015 1778.91,686.015 1779.47,686.015 1780.03,686.015 1780.59,686.015 1781.15,686.015 1781.71,686.015 1782.26,686.015 1782.82,686.015 1783.38,686.015 1783.94,686.015 1784.5,686.015 1785.06,686.015 1785.62,686.015 1786.18,686.015 1786.74,686.015 1787.3,686.015 1787.86,686.015 1788.42,686.015 1788.98,686.015 1789.53,686.015 1790.09,686.015 1790.65,686.015 1791.21,686.015 1791.77,686.015 1792.33,686.015 1792.89,686.015 1793.45,686.015 1794.01,686.015 1794.57,686.015 1795.13,686.015 1795.69,686.015 1796.25,686.015 1796.8,686.015 1797.36,686.015 1797.92,686.015 1798.48,686.015 1799.04,686.015 1799.6,686.015 1800.16,686.015 1800.72,686.015 1801.28,686.015 1801.84,686.015 1802.4,686.015 1802.96,686.015 1803.52,686.015 1804.08,686.015 1804.63,686.015 1805.19,686.015 1805.75,686.015 1806.31,686.015 1806.87,686.015 1807.43,686.015 1807.99,686.015 1808.55,686.015 1809.11,686.015 1809.67,686.015 1810.23,686.015 1810.79,686.015 1811.35,686.015 1811.9,686.015 1812.46,686.015 1813.02,686.015 1813.58,686.015 1814.14,686.015 1814.7,686.015 1815.26,686.015 1815.82,686.015 1816.38,686.015 1816.94,686.015 1817.5,686.015 1818.06,686.015 1818.62,686.015 1819.18,686.015 1819.73,686.015 1820.29,686.015 1820.85,686.015 1821.41,686.015 1821.97,686.015 1822.53,686.015 1823.09,686.015 1823.65,686.015 1824.21,686.015 1824.77,686.015 1825.33,686.015 1825.89,686.015 1826.45,686.015 1827,686.015 1827.56,686.015 1828.12,686.015 1828.68,686.015 1829.24,686.015 1829.8,686.015 1830.36,686.015 1830.92,686.015 1831.48,686.015 1832.04,686.015 1832.6,686.015 1833.16,686.015 1833.72,686.015 1834.27,686.015 1834.83,686.015 1835.39,686.015 1835.95,686.015 1836.51,686.015 1837.07,686.015 1837.63,686.015 1838.19,686.015 \"/>\n<path clip-path=\"url(#clip563)\" d=\"M720.247 684.755 L720.806 684.755 L721.365 684.755 L721.924 684.755 L722.484 684.755 L723.043 684.755 L723.602 684.755 L724.161 684.755 L724.721 684.755 L725.28 684.755 L725.839 684.755 L726.398 684.755 L726.958 684.755 L727.517 684.755 L728.076 684.755 L728.635 684.755 L729.195 684.755 L729.754 684.755 L730.313 684.755 L730.872 684.755 L731.432 684.755 L731.991 684.755 L732.55 684.755 L733.109 684.755 L733.669 684.755 L734.228 684.755 L734.787 684.755 L735.346 684.755 L735.906 684.755 L736.465 684.755 L737.024 684.755 L737.583 684.755 L738.143 684.755 L738.702 684.755 L739.261 684.755 L739.82 684.755 L740.38 684.755 L740.939 684.755 L741.498 684.755 L742.057 684.755 L742.617 684.755 L743.176 684.755 L743.735 684.755 L744.294 684.755 L744.854 684.755 L745.413 684.755 L745.972 684.755 L746.531 684.755 L747.091 684.755 L747.65 684.755 L748.209 684.755 L748.768 684.755 L749.328 684.755 L749.887 684.755 L750.446 684.755 L751.005 684.755 L751.565 684.755 L752.124 684.755 L752.683 684.755 L753.242 684.755 L753.802 684.755 L754.361 684.755 L754.92 684.755 L755.479 684.755 L756.039 684.755 L756.598 684.755 L757.157 684.755 L757.716 684.755 L758.276 684.755 L758.835 684.755 L759.394 684.755 L759.953 684.755 L760.513 684.755 L761.072 684.755 L761.631 684.755 L762.19 684.755 L762.75 684.755 L763.309 684.755 L763.868 684.755 L764.427 684.755 L764.987 684.755 L765.546 684.755 L766.105 684.755 L766.664 684.755 L767.224 684.755 L767.783 684.755 L768.342 684.755 L768.901 684.755 L769.461 684.755 L770.02 684.755 L770.579 684.755 L771.138 684.755 L771.698 684.755 L772.257 684.755 L772.816 684.755 L773.375 684.755 L773.935 684.755 L774.494 684.755 L775.053 684.755 L775.612 684.755 L776.172 684.755 L776.731 684.755 L777.29 684.755 L777.849 684.755 L778.409 684.755 L778.968 684.755 L779.527 684.755 L780.086 684.755 L780.646 684.755 L781.205 684.755 L781.764 684.755 L782.323 684.755 L782.883 684.755 L783.442 684.755 L784.001 684.755 L784.56 684.755 L785.12 684.755 L785.679 684.755 L786.238 684.755 L786.797 684.755 L787.357 684.755 L787.916 684.755 L788.475 684.755 L789.034 684.755 L789.594 684.755 L790.153 684.755 L790.712 684.755 L791.271 684.755 L791.831 684.755 L792.39 684.755 L792.949 684.755 L793.508 684.755 L794.068 684.755 L794.627 684.755 L795.186 684.755 L795.745 684.755 L796.305 684.755 L796.864 684.755 L797.423 684.755 L797.982 684.755 L798.542 684.755 L799.101 684.755 L799.66 684.755 L800.219 684.755 L800.779 684.755 L801.338 684.755 L801.897 684.755 L802.456 684.755 L803.016 684.755 L803.575 684.755 L804.134 684.755 L804.693 684.755 L805.253 684.755 L805.812 684.755 L806.371 684.755 L806.931 684.755 L807.49 684.755 L808.049 684.755 L808.608 684.755 L809.168 684.755 L809.727 684.755 L810.286 684.755 L810.845 684.755 L811.405 684.755 L811.964 684.755 L812.523 684.755 L813.082 684.755 L813.642 684.755 L814.201 684.755 L814.76 684.755 L815.319 684.755 L815.879 684.755 L816.438 684.755 L816.997 684.755 L817.556 684.755 L818.116 684.755 L818.675 684.755 L819.234 684.755 L819.793 684.755 L820.353 684.755 L820.912 684.755 L821.471 684.755 L822.03 684.755 L822.59 684.755 L823.149 684.755 L823.708 684.755 L824.267 684.755 L824.827 684.755 L825.386 684.755 L825.945 684.755 L826.504 684.755 L827.064 684.755 L827.623 684.755 L828.182 684.755 L828.741 684.755 L829.301 684.755 L829.86 684.755 L830.419 684.755 L830.978 684.755 L831.538 684.755 L832.097 684.755 L832.656 684.755 L833.215 684.755 L833.775 684.755 L834.334 684.755 L834.893 684.755 L835.452 684.755 L836.012 684.755 L836.571 684.755 L837.13 684.755 L837.689 684.755 L838.249 684.755 L838.808 684.755 L839.367 684.755 L839.926 684.755 L840.486 684.755 L841.045 684.755 L841.604 684.755 L842.163 684.755 L842.723 684.755 L843.282 684.755 L843.841 684.755 L844.4 684.755 L844.96 684.755 L845.519 684.755 L846.078 684.755 L846.637 684.755 L847.197 684.755 L847.756 684.755 L848.315 684.755 L848.874 684.755 L849.434 684.755 L849.993 684.755 L850.552 684.755 L851.111 684.755 L851.671 684.755 L852.23 684.755 L852.789 684.755 L853.348 684.755 L853.908 684.755 L854.467 684.755 L855.026 684.755 L855.585 684.755 L856.145 684.755 L856.704 684.755 L857.263 684.755 L857.822 684.755 L858.382 684.755 L858.941 684.755 L859.5 684.755 L860.059 684.755 L860.619 684.755 L861.178 684.755 L861.737 684.755 L862.296 684.755 L862.856 684.755 L863.415 684.755 L863.974 684.755 L864.533 684.755 L865.093 684.755 L865.652 684.755 L866.211 684.755 L866.77 684.755 L867.33 684.755 L867.889 684.755 L868.448 684.755 L869.007 684.755 L869.567 684.755 L870.126 684.755 L870.685 684.755 L871.244 684.755 L871.804 684.755 L872.363 684.755 L872.922 684.755 L873.481 684.755 L874.041 684.755 L874.6 684.755 L875.159 684.755 L875.718 684.755 L876.278 684.755 L876.837 684.755 L877.396 684.755 L877.955 684.755 L878.515 684.755 L879.074 684.755 L879.633 684.755 L880.192 684.755 L880.752 684.755 L881.311 684.755 L881.87 684.755 L882.429 684.755 L882.989 684.755 L883.548 684.755 L884.107 684.755 L884.666 684.755 L885.226 684.755 L885.785 684.755 L886.344 684.755 L886.903 684.755 L887.463 684.755 L888.022 684.755 L888.581 684.755 L889.14 684.755 L889.7 684.755 L890.259 684.755 L890.818 684.755 L891.377 684.755 L891.937 684.755 L892.496 684.755 L893.055 684.755 L893.614 684.755 L894.174 684.755 L894.733 684.755 L895.292 684.755 L895.851 684.755 L896.411 684.755 L896.97 684.755 L897.529 684.755 L898.088 684.755 L898.648 684.755 L899.207 684.755 L899.766 684.755 L900.325 684.755 L900.885 684.755 L901.444 684.755 L902.003 684.755 L902.562 684.755 L903.122 684.755 L903.681 684.755 L904.24 684.755 L904.799 684.755 L905.359 684.755 L905.918 684.755 L906.477 684.755 L907.036 684.755 L907.596 684.755 L908.155 684.755 L908.714 684.755 L909.273 684.755 L909.833 684.755 L910.392 684.755 L910.951 684.755 L911.51 684.755 L912.07 684.755 L912.629 684.755 L913.188 684.755 L913.747 684.755 L914.307 684.755 L914.866 684.755 L915.425 684.755 L915.984 684.755 L916.544 684.755 L917.103 684.755 L917.662 684.755 L918.221 684.755 L918.781 684.755 L919.34 684.755 L919.899 684.755 L920.458 684.755 L921.018 684.755 L921.577 684.755 L922.136 684.755 L922.695 684.755 L923.255 684.755 L923.814 684.755 L924.373 684.755 L924.932 684.755 L925.492 684.755 L926.051 684.755 L926.61 684.755 L927.169 684.755 L927.729 684.755 L928.288 684.755 L928.847 684.755 L929.406 684.755 L929.966 684.755 L930.525 684.755 L931.084 684.755 L931.644 684.755 L932.203 684.755 L932.762 684.755 L933.321 684.755 L933.881 684.755 L934.44 684.755 L934.999 684.755 L935.558 684.755 L936.118 684.755 L936.677 684.755 L937.236 684.755 L937.795 684.755 L938.355 684.755 L938.914 684.755 L939.473 684.755 L940.032 684.755 L940.592 684.755 L941.151 684.755 L941.71 684.755 L942.269 684.755 L942.829 684.755 L943.388 684.755 L943.947 684.755 L944.506 684.755 L945.066 684.755 L945.625 684.755 L946.184 684.755 L946.743 684.755 L947.303 684.755 L947.862 684.755 L948.421 684.755 L948.98 684.755 L949.54 684.755 L950.099 684.755 L950.658 684.755 L951.217 684.755 L951.777 684.755 L952.336 684.755 L952.895 684.755 L953.454 684.755 L954.014 684.755 L954.573 684.755 L955.132 684.755 L955.691 684.755 L956.251 684.755 L956.81 684.755 L957.369 684.755 L957.928 684.755 L958.488 684.755 L959.047 684.755 L959.606 684.755 L960.165 684.755 L960.725 684.755 L961.284 684.755 L961.843 684.755 L962.402 684.755 L962.962 684.755 L963.521 684.755 L964.08 684.755 L964.639 684.755 L965.199 684.755 L965.758 684.755 L966.317 684.755 L966.876 684.755 L967.436 684.755 L967.995 684.755 L968.554 684.755 L969.113 684.755 L969.673 684.755 L970.232 684.755 L970.791 684.755 L971.35 684.755 L971.91 684.755 L972.469 684.755 L973.028 684.755 L973.587 684.755 L974.147 684.755 L974.706 684.755 L975.265 684.755 L975.824 684.755 L976.384 684.755 L976.943 684.755 L977.502 684.755 L978.061 684.755 L978.621 684.755 L979.18 684.755 L979.739 684.755 L980.298 684.755 L980.858 684.755 L981.417 684.755 L981.976 684.755 L982.535 684.755 L983.095 684.755 L983.654 684.755 L984.213 684.755 L984.772 684.755 L985.332 684.755 L985.891 684.755 L986.45 684.755 L987.009 684.755 L987.569 684.755 L988.128 684.755 L988.687 684.755 L989.246 684.755 L989.806 684.755 L990.365 684.755 L990.924 684.755 L991.483 684.755 L992.043 684.755 L992.602 684.755 L993.161 684.755 L993.72 684.755 L994.28 684.755 L994.839 684.755 L995.398 684.755 L995.957 684.755 L996.517 684.755 L997.076 684.755 L997.635 684.755 L998.194 684.755 L998.754 684.755 L999.313 684.755 L999.872 684.755 L1000.43 684.755 L1000.99 684.755 L1001.55 684.755 L1002.11 684.755 L1002.67 684.755 L1003.23 684.755 L1003.79 684.755 L1004.35 684.755 L1004.91 684.755 L1005.46 684.755 L1006.02 684.755 L1006.58 684.755 L1007.14 684.755 L1007.7 684.755 L1008.26 684.755 L1008.82 684.755 L1009.38 684.755 L1009.94 684.755 L1010.5 684.755 L1011.06 684.755 L1011.62 684.755 L1012.18 684.755 L1012.73 684.755 L1013.29 684.755 L1013.85 684.755 L1014.41 684.755 L1014.97 684.755 L1015.53 684.755 L1016.09 684.755 L1016.65 684.755 L1017.21 684.755 L1017.77 684.755 L1018.33 684.755 L1018.89 684.755 L1019.45 684.755 L1020.01 684.755 L1020.56 684.755 L1021.12 684.755 L1021.68 684.755 L1022.24 684.755 L1022.8 684.755 L1023.36 684.755 L1023.92 684.755 L1024.48 684.755 L1025.04 684.755 L1025.6 684.755 L1026.16 684.755 L1026.72 684.755 L1027.28 684.755 L1027.83 684.755 L1028.39 684.755 L1028.95 684.755 L1029.51 684.755 L1030.07 684.755 L1030.63 684.755 L1031.19 684.755 L1031.75 684.755 L1032.31 684.755 L1032.87 684.755 L1033.43 684.755 L1033.99 684.755 L1034.55 684.755 L1035.1 684.755 L1035.66 684.755 L1036.22 684.755 L1036.78 684.755 L1037.34 684.755 L1037.9 684.755 L1038.46 684.755 L1039.02 684.755 L1039.58 684.755 L1040.14 684.755 L1040.7 684.755 L1041.26 684.755 L1041.82 684.755 L1042.38 684.755 L1042.93 684.755 L1043.49 684.755 L1044.05 684.755 L1044.61 684.755 L1045.17 684.755 L1045.73 684.755 L1046.29 684.755 L1046.85 684.755 L1047.41 684.755 L1047.97 684.755 L1048.53 684.755 L1049.09 684.755 L1049.65 684.755 L1050.2 684.755 L1050.76 684.755 L1051.32 684.755 L1051.88 684.755 L1052.44 684.755 L1053 684.755 L1053.56 684.755 L1054.12 684.755 L1054.68 684.755 L1055.24 684.755 L1055.8 684.755 L1056.36 684.755 L1056.92 684.755 L1057.48 684.755 L1058.03 684.755 L1058.59 684.755 L1059.15 684.755 L1059.71 684.755 L1060.27 684.755 L1060.83 684.755 L1061.39 684.755 L1061.95 684.755 L1062.51 684.755 L1063.07 684.755 L1063.63 684.755 L1064.19 684.755 L1064.75 684.755 L1065.3 684.755 L1065.86 684.755 L1066.42 684.755 L1066.98 684.755 L1067.54 684.755 L1068.1 684.755 L1068.66 684.755 L1069.22 684.755 L1069.78 684.755 L1070.34 684.755 L1070.9 684.755 L1071.46 684.755 L1072.02 684.755 L1072.57 684.755 L1073.13 684.755 L1073.69 684.755 L1074.25 684.755 L1074.81 684.755 L1075.37 684.755 L1075.93 684.755 L1076.49 684.755 L1077.05 684.755 L1077.61 684.755 L1078.17 684.755 L1078.73 684.755 L1079.29 684.755 L1079.85 684.755 L1080.4 684.755 L1080.96 684.755 L1081.52 684.755 L1082.08 684.755 L1082.64 684.755 L1083.2 684.755 L1083.76 684.755 L1084.32 684.755 L1084.88 684.755 L1085.44 684.755 L1086 684.755 L1086.56 684.755 L1087.12 684.755 L1087.67 684.755 L1088.23 684.755 L1088.79 684.755 L1089.35 684.755 L1089.91 684.755 L1090.47 684.755 L1091.03 684.755 L1091.59 684.755 L1092.15 684.755 L1092.71 684.755 L1093.27 684.755 L1093.83 684.755 L1094.39 684.755 L1094.94 684.755 L1095.5 684.755 L1096.06 684.755 L1096.62 684.755 L1097.18 684.755 L1097.74 684.755 L1098.3 684.755 L1098.86 684.755 L1099.42 684.755 L1099.98 684.755 L1100.54 684.755 L1101.1 684.755 L1101.66 684.755 L1102.22 684.755 L1102.77 684.755 L1103.33 684.755 L1103.89 684.755 L1104.45 684.755 L1105.01 684.755 L1105.57 684.755 L1106.13 684.755 L1106.69 684.755 L1107.25 684.755 L1107.81 684.755 L1108.37 684.755 L1108.93 684.755 L1109.49 684.755 L1110.04 684.755 L1110.6 684.755 L1111.16 684.755 L1111.72 684.755 L1112.28 684.755 L1112.84 684.755 L1113.4 684.755 L1113.96 684.755 L1114.52 684.755 L1115.08 684.755 L1115.64 684.755 L1116.2 684.755 L1116.76 684.755 L1117.31 684.755 L1117.87 684.755 L1118.43 684.755 L1118.99 684.755 L1119.55 684.755 L1120.11 684.755 L1120.67 684.755 L1121.23 684.755 L1121.79 684.755 L1122.35 684.755 L1122.91 684.755 L1123.47 684.755 L1124.03 684.755 L1124.59 684.755 L1125.14 684.755 L1125.7 684.755 L1126.26 684.755 L1126.82 684.755 L1127.38 684.755 L1127.94 684.755 L1128.5 684.755 L1129.06 684.755 L1129.62 684.755 L1130.18 684.755 L1130.74 684.755 L1131.3 684.755 L1131.86 684.755 L1132.41 684.755 L1132.97 684.755 L1133.53 684.755 L1134.09 684.755 L1134.65 684.755 L1135.21 684.755 L1135.77 684.755 L1136.33 684.755 L1136.89 684.755 L1137.45 684.755 L1138.01 684.755 L1138.57 684.755 L1139.13 684.755 L1139.68 684.755 L1140.24 684.755 L1140.8 684.755 L1141.36 684.755 L1141.92 684.755 L1142.48 684.755 L1143.04 684.755 L1143.6 684.755 L1144.16 684.755 L1144.72 684.755 L1145.28 684.755 L1145.84 684.755 L1146.4 684.755 L1146.96 684.755 L1147.51 684.755 L1148.07 684.755 L1148.63 684.755 L1149.19 684.755 L1149.75 684.755 L1150.31 684.755 L1150.87 684.755 L1151.43 684.755 L1151.99 684.755 L1152.55 684.755 L1153.11 684.755 L1153.67 684.755 L1154.23 684.755 L1154.78 684.755 L1155.34 684.755 L1155.9 684.755 L1156.46 684.755 L1157.02 684.755 L1157.58 684.755 L1158.14 684.755 L1158.7 684.755 L1159.26 684.755 L1159.82 684.755 L1160.38 684.755 L1160.94 684.755 L1161.5 684.755 L1162.05 684.755 L1162.61 684.755 L1163.17 684.755 L1163.73 684.755 L1164.29 684.755 L1164.85 684.755 L1165.41 684.755 L1165.97 684.755 L1166.53 684.755 L1167.09 684.755 L1167.65 684.755 L1168.21 684.755 L1168.77 684.755 L1169.33 684.755 L1169.88 684.755 L1170.44 684.755 L1171 684.755 L1171.56 684.755 L1172.12 684.755 L1172.68 684.755 L1173.24 684.755 L1173.8 684.755 L1174.36 684.755 L1174.92 684.755 L1175.48 684.755 L1176.04 684.755 L1176.6 684.755 L1177.15 684.755 L1177.71 684.755 L1178.27 684.755 L1178.83 684.755 L1179.39 684.755 L1179.95 684.755 L1180.51 684.755 L1181.07 684.755 L1181.63 684.755 L1182.19 684.755 L1182.75 684.755 L1183.31 684.755 L1183.87 684.755 L1184.43 684.755 L1184.98 684.755 L1185.54 684.755 L1186.1 684.755 L1186.66 684.755 L1187.22 684.755 L1187.78 684.755 L1188.34 684.755 L1188.9 684.755 L1189.46 684.755 L1190.02 684.755 L1190.58 684.755 L1191.14 684.755 L1191.7 684.755 L1192.25 684.755 L1192.81 684.755 L1193.37 684.755 L1193.93 684.755 L1194.49 684.755 L1195.05 684.755 L1195.61 684.755 L1196.17 684.755 L1196.73 684.755 L1197.29 684.755 L1197.85 684.755 L1198.41 684.755 L1198.97 684.755 L1199.52 684.755 L1200.08 684.755 L1200.64 684.755 L1201.2 684.755 L1201.76 684.755 L1202.32 684.755 L1202.88 684.755 L1203.44 684.755 L1204 684.755 L1204.56 684.755 L1205.12 684.755 L1205.68 684.755 L1206.24 684.755 L1206.8 684.755 L1207.35 684.755 L1207.91 684.755 L1208.47 684.755 L1209.03 684.755 L1209.59 684.755 L1210.15 684.755 L1210.71 684.755 L1211.27 684.755 L1211.83 684.755 L1212.39 684.755 L1212.95 684.755 L1213.51 684.755 L1214.07 684.755 L1214.62 684.755 L1215.18 684.755 L1215.74 684.755 L1216.3 684.755 L1216.86 684.755 L1217.42 684.755 L1217.98 684.755 L1218.54 684.755 L1219.1 684.755 L1219.66 684.755 L1220.22 684.755 L1220.78 684.755 L1221.34 684.755 L1221.89 684.755 L1222.45 684.755 L1223.01 684.755 L1223.57 684.755 L1224.13 684.755 L1224.69 684.755 L1225.25 684.755 L1225.81 684.755 L1226.37 684.755 L1226.93 684.755 L1227.49 684.755 L1228.05 684.755 L1228.61 684.755 L1229.17 684.755 L1229.72 684.755 L1230.28 684.755 L1230.84 684.755 L1231.4 684.755 L1231.96 684.755 L1232.52 684.755 L1233.08 684.755 L1233.64 684.755 L1234.2 684.755 L1234.76 684.755 L1235.32 684.755 L1235.88 684.755 L1236.44 684.755 L1236.99 684.755 L1237.55 684.755 L1238.11 684.755 L1238.67 684.755 L1239.23 684.755 L1239.79 684.755 L1240.35 684.755 L1240.91 684.755 L1241.47 684.755 L1242.03 684.755 L1242.59 684.755 L1243.15 684.755 L1243.71 684.755 L1244.26 684.755 L1244.82 684.755 L1245.38 684.755 L1245.94 684.755 L1246.5 684.755 L1247.06 684.755 L1247.62 684.755 L1248.18 684.755 L1248.74 684.755 L1249.3 684.755 L1249.86 684.755 L1250.42 684.755 L1250.98 684.755 L1251.54 684.755 L1252.09 684.755 L1252.65 684.755 L1253.21 684.755 L1253.77 684.755 L1254.33 684.755 L1254.89 684.755 L1255.45 684.755 L1256.01 684.755 L1256.57 684.755 L1257.13 684.755 L1257.69 684.755 L1258.25 684.755 L1258.81 684.755 L1259.36 684.755 L1259.92 684.755 L1260.48 684.755 L1261.04 684.755 L1261.6 684.755 L1262.16 684.755 L1262.72 684.755 L1263.28 684.755 L1263.84 684.755 L1264.4 684.755 L1264.96 684.755 L1265.52 684.755 L1266.08 684.755 L1266.63 684.755 L1267.19 684.755 L1267.75 684.755 L1268.31 684.755 L1268.87 684.755 L1269.43 684.755 L1269.99 684.755 L1270.55 684.755 L1271.11 684.755 L1271.67 684.755 L1272.23 684.755 L1272.79 684.755 L1273.35 684.755 L1273.91 684.755 L1274.46 684.755 L1275.02 684.755 L1275.58 684.755 L1276.14 684.755 L1276.7 684.755 L1277.26 684.755 L1277.82 684.755 L1278.38 684.755 L1278.94 684.755 L1279.5 684.755 L1280.06 684.755 L1280.62 684.755 L1281.18 684.755 L1281.73 684.755 L1282.29 684.755 L1282.85 684.755 L1283.41 684.755 L1283.97 684.755 L1284.53 684.755 L1285.09 684.755 L1285.65 684.755 L1286.21 684.755 L1286.77 684.755 L1287.33 684.755 L1287.89 684.755 L1288.45 684.755 L1289 684.755 L1289.56 684.755 L1290.12 684.755 L1290.68 684.755 L1291.24 684.755 L1291.8 684.755 L1292.36 684.755 L1292.92 684.755 L1293.48 684.755 L1294.04 684.755 L1294.6 684.755 L1295.16 684.755 L1295.72 684.755 L1296.28 684.755 L1296.83 684.755 L1297.39 684.755 L1297.95 684.755 L1298.51 684.755 L1299.07 684.755 L1299.63 684.755 L1300.19 684.755 L1300.75 684.755 L1301.31 684.755 L1301.87 684.755 L1302.43 684.755 L1302.99 684.755 L1303.55 684.755 L1304.1 684.755 L1304.66 684.755 L1305.22 684.755 L1305.78 684.755 L1306.34 684.755 L1306.9 684.755 L1307.46 684.755 L1308.02 684.755 L1308.58 684.755 L1309.14 684.755 L1309.7 684.755 L1310.26 684.755 L1310.82 684.755 L1311.38 684.755 L1311.93 684.755 L1312.49 684.755 L1313.05 684.755 L1313.61 684.755 L1314.17 684.755 L1314.73 684.755 L1315.29 684.755 L1315.85 684.755 L1316.41 684.755 L1316.97 684.755 L1317.53 684.755 L1318.09 684.755 L1318.65 684.755 L1319.2 684.755 L1319.76 684.755 L1320.32 684.755 L1320.88 684.755 L1321.44 684.755 L1322 684.755 L1322.56 684.755 L1323.12 684.755 L1323.68 684.755 L1324.24 684.755 L1324.8 684.755 L1325.36 684.755 L1325.92 684.755 L1326.47 684.755 L1327.03 684.755 L1327.59 684.755 L1328.15 684.755 L1328.71 684.755 L1329.27 684.755 L1329.83 684.755 L1330.39 684.755 L1330.95 684.755 L1331.51 684.755 L1332.07 684.755 L1332.63 684.755 L1333.19 684.755 L1333.75 684.755 L1334.3 684.755 L1334.86 684.755 L1335.42 684.755 L1335.98 684.755 L1336.54 684.755 L1337.1 684.755 L1337.66 684.755 L1338.22 684.755 L1338.78 684.755 L1339.34 684.755 L1339.9 684.755 L1340.46 684.755 L1341.02 684.755 L1341.57 684.755 L1342.13 684.755 L1342.69 684.755 L1343.25 684.755 L1343.81 684.755 L1344.37 684.755 L1344.93 684.755 L1345.49 684.755 L1346.05 684.755 L1346.61 684.755 L1347.17 684.755 L1347.73 684.755 L1348.29 684.755 L1348.84 684.755 L1349.4 684.755 L1349.96 684.755 L1350.52 684.755 L1351.08 684.755 L1351.64 684.755 L1352.2 684.755 L1352.76 684.755 L1353.32 684.755 L1353.88 684.755 L1354.44 684.755 L1355 684.755 L1355.56 684.755 L1356.12 684.755 L1356.67 684.755 L1357.23 684.755 L1357.79 684.755 L1358.35 684.755 L1358.91 684.755 L1359.47 684.755 L1360.03 684.755 L1360.59 684.755 L1361.15 684.755 L1361.71 684.755 L1362.27 684.755 L1362.83 684.755 L1363.39 684.755 L1363.94 684.755 L1364.5 684.755 L1365.06 684.755 L1365.62 684.755 L1366.18 684.755 L1366.74 684.755 L1367.3 684.755 L1367.86 684.755 L1368.42 684.755 L1368.98 684.755 L1369.54 684.755 L1370.1 684.755 L1370.66 684.755 L1371.21 684.755 L1371.77 684.755 L1372.33 684.755 L1372.89 684.755 L1373.45 684.755 L1374.01 684.755 L1374.57 684.755 L1375.13 684.755 L1375.69 684.755 L1376.25 684.755 L1376.81 684.755 L1377.37 684.755 L1377.93 684.755 L1378.49 684.755 L1379.04 684.755 L1379.6 684.755 L1380.16 684.755 L1380.72 684.755 L1381.28 684.755 L1381.84 684.755 L1382.4 684.755 L1382.96 684.755 L1383.52 684.755 L1384.08 684.755 L1384.64 684.755 L1385.2 684.755 L1385.76 684.755 L1386.31 684.755 L1386.87 684.755 L1387.43 684.755 L1387.99 684.755 L1388.55 684.755 L1389.11 684.755 L1389.67 684.755 L1390.23 684.755 L1390.79 684.755 L1391.35 684.755 L1391.91 684.755 L1392.47 684.755 L1393.03 684.755 L1393.58 684.755 L1394.14 684.755 L1394.7 684.755 L1395.26 684.755 L1395.82 684.755 L1396.38 684.755 L1396.94 684.755 L1397.5 684.755 L1398.06 684.755 L1398.62 684.755 L1399.18 684.755 L1399.74 684.755 L1400.3 684.755 L1400.86 684.755 L1401.41 684.755 L1401.97 684.755 L1402.53 684.755 L1403.09 684.755 L1403.65 684.755 L1404.21 684.755 L1404.77 684.755 L1405.33 684.755 L1405.89 684.755 L1406.45 684.755 L1407.01 684.755 L1407.57 684.755 L1408.13 684.755 L1408.68 684.755 L1409.24 684.755 L1409.8 684.755 L1410.36 684.755 L1410.92 684.755 L1411.48 684.755 L1412.04 684.755 L1412.6 684.755 L1413.16 684.755 L1413.72 684.755 L1414.28 684.755 L1414.84 684.755 L1415.4 684.755 L1415.95 684.755 L1416.51 684.755 L1417.07 684.755 L1417.63 684.755 L1418.19 684.755 L1418.75 684.755 L1419.31 684.755 L1419.87 684.755 L1420.43 684.755 L1420.99 684.755 L1421.55 684.755 L1422.11 684.755 L1422.67 684.755 L1423.23 684.755 L1423.78 684.755 L1424.34 684.755 L1424.9 684.755 L1425.46 684.755 L1426.02 684.755 L1426.58 684.755 L1427.14 684.755 L1427.7 684.755 L1428.26 684.755 L1428.82 684.755 L1429.38 684.755 L1429.94 684.755 L1430.5 684.755 L1431.05 684.755 L1431.61 684.755 L1432.17 684.755 L1432.73 684.755 L1433.29 684.755 L1433.85 684.755 L1434.41 684.755 L1434.97 684.755 L1435.53 684.755 L1436.09 684.755 L1436.65 684.755 L1437.21 684.755 L1437.77 684.755 L1438.33 684.755 L1438.88 684.755 L1439.44 684.755 L1440 684.755 L1440.56 684.755 L1441.12 684.755 L1441.68 684.755 L1442.24 684.755 L1442.8 684.755 L1443.36 684.755 L1443.92 684.755 L1444.48 684.755 L1445.04 684.755 L1445.6 684.755 L1446.15 684.755 L1446.71 684.755 L1447.27 684.755 L1447.83 684.755 L1448.39 684.755 L1448.95 684.755 L1449.51 684.755 L1450.07 684.755 L1450.63 684.755 L1451.19 684.755 L1451.75 684.755 L1452.31 684.755 L1452.87 684.755 L1453.42 684.755 L1453.98 684.755 L1454.54 684.755 L1455.1 684.755 L1455.66 684.755 L1456.22 684.755 L1456.78 684.755 L1457.34 684.755 L1457.9 684.755 L1458.46 684.755 L1459.02 684.755 L1459.58 684.755 L1460.14 684.755 L1460.7 684.755 L1461.25 684.755 L1461.81 684.755 L1462.37 684.755 L1462.93 684.755 L1463.49 684.755 L1464.05 684.755 L1464.61 684.755 L1465.17 684.755 L1465.73 684.755 L1466.29 684.755 L1466.85 684.755 L1467.41 684.755 L1467.97 684.755 L1468.52 684.755 L1469.08 684.755 L1469.64 684.755 L1470.2 684.755 L1470.76 684.755 L1471.32 684.755 L1471.88 684.755 L1472.44 684.755 L1473 684.755 L1473.56 684.755 L1474.12 684.755 L1474.68 684.755 L1475.24 684.755 L1475.79 684.755 L1476.35 684.755 L1476.91 684.755 L1477.47 684.755 L1478.03 684.755 L1478.59 684.755 L1479.15 684.755 L1479.71 684.755 L1480.27 684.755 L1480.83 684.755 L1481.39 684.755 L1481.95 684.755 L1482.51 684.755 L1483.07 684.755 L1483.62 684.755 L1484.18 684.755 L1484.74 684.755 L1485.3 684.755 L1485.86 684.755 L1486.42 684.755 L1486.98 684.755 L1487.54 684.755 L1488.1 684.755 L1488.66 684.755 L1489.22 684.755 L1489.78 684.755 L1490.34 684.755 L1490.89 684.755 L1491.45 684.755 L1492.01 684.755 L1492.57 684.755 L1493.13 684.755 L1493.69 684.755 L1494.25 684.755 L1494.81 684.755 L1495.37 684.755 L1495.93 684.755 L1496.49 684.755 L1497.05 684.755 L1497.61 684.755 L1498.16 684.755 L1498.72 684.755 L1499.28 684.755 L1499.84 684.755 L1500.4 684.755 L1500.96 684.755 L1501.52 684.755 L1502.08 684.755 L1502.64 684.755 L1503.2 684.755 L1503.76 684.755 L1504.32 684.755 L1504.88 684.755 L1505.44 684.755 L1505.99 684.755 L1506.55 684.755 L1507.11 684.755 L1507.67 684.755 L1508.23 684.755 L1508.79 684.755 L1509.35 684.755 L1509.91 684.755 L1510.47 684.755 L1511.03 684.755 L1511.59 684.755 L1512.15 684.755 L1512.71 684.755 L1513.26 684.755 L1513.82 684.755 L1514.38 684.755 L1514.94 684.755 L1515.5 684.755 L1516.06 684.755 L1516.62 684.755 L1517.18 684.755 L1517.74 684.755 L1518.3 684.755 L1518.86 684.755 L1519.42 684.755 L1519.98 684.755 L1520.53 684.755 L1521.09 684.755 L1521.65 684.755 L1522.21 684.755 L1522.77 684.755 L1523.33 684.755 L1523.89 684.755 L1524.45 684.755 L1525.01 684.755 L1525.57 684.755 L1526.13 684.755 L1526.69 684.755 L1527.25 684.755 L1527.81 684.755 L1528.36 684.755 L1528.92 684.755 L1529.48 684.755 L1530.04 684.755 L1530.6 684.755 L1531.16 684.755 L1531.72 684.755 L1532.28 684.755 L1532.84 684.755 L1533.4 684.755 L1533.96 684.755 L1534.52 684.755 L1535.08 684.755 L1535.63 684.755 L1536.19 684.755 L1536.75 684.755 L1537.31 684.755 L1537.87 684.755 L1538.43 684.755 L1538.99 684.755 L1539.55 684.755 L1540.11 684.755 L1540.67 684.755 L1541.23 684.755 L1541.79 684.755 L1542.35 684.755 L1542.9 684.755 L1543.46 684.755 L1544.02 684.755 L1544.58 684.755 L1545.14 684.755 L1545.7 684.755 L1546.26 684.755 L1546.82 684.755 L1547.38 684.755 L1547.94 684.755 L1548.5 684.755 L1549.06 684.755 L1549.62 684.755 L1550.18 684.755 L1550.73 684.755 L1551.29 684.755 L1551.85 684.755 L1552.41 684.755 L1552.97 684.755 L1553.53 684.755 L1554.09 684.755 L1554.65 684.755 L1555.21 684.755 L1555.77 684.755 L1556.33 684.755 L1556.89 684.755 L1557.45 684.755 L1558 684.755 L1558.56 684.755 L1559.12 684.755 L1559.68 684.755 L1560.24 684.755 L1560.8 684.755 L1561.36 684.755 L1561.92 684.755 L1562.48 684.755 L1563.04 684.755 L1563.6 684.755 L1564.16 684.755 L1564.72 684.755 L1565.28 684.755 L1565.83 684.755 L1566.39 684.755 L1566.95 684.755 L1567.51 684.755 L1568.07 684.755 L1568.63 684.755 L1569.19 684.755 L1569.75 684.755 L1570.31 684.755 L1570.87 684.755 L1571.43 684.755 L1571.99 684.755 L1572.55 684.755 L1573.1 684.755 L1573.66 684.755 L1574.22 684.755 L1574.78 684.755 L1575.34 684.755 L1575.9 684.755 L1576.46 684.755 L1577.02 684.755 L1577.58 684.755 L1578.14 684.755 L1578.7 684.755 L1579.26 684.755 L1579.82 684.755 L1580.37 684.755 L1580.93 684.755 L1581.49 684.755 L1582.05 684.755 L1582.61 684.755 L1583.17 684.755 L1583.73 684.755 L1584.29 684.755 L1584.85 684.755 L1585.41 684.755 L1585.97 684.755 L1586.53 684.755 L1587.09 684.755 L1587.65 684.755 L1588.2 684.755 L1588.76 684.755 L1589.32 684.755 L1589.88 684.755 L1590.44 684.755 L1591 684.755 L1591.56 684.755 L1592.12 684.755 L1592.68 684.755 L1593.24 684.755 L1593.8 684.755 L1594.36 684.755 L1594.92 684.755 L1595.47 684.755 L1596.03 684.755 L1596.59 684.755 L1597.15 684.755 L1597.71 684.755 L1598.27 684.755 L1598.83 684.755 L1599.39 684.755 L1599.95 684.755 L1600.51 684.755 L1601.07 684.755 L1601.63 684.755 L1602.19 684.755 L1602.74 684.755 L1603.3 684.755 L1603.86 684.755 L1604.42 684.755 L1604.98 684.755 L1605.54 684.755 L1606.1 684.755 L1606.66 684.755 L1607.22 684.755 L1607.78 684.755 L1608.34 684.755 L1608.9 684.755 L1609.46 684.755 L1610.02 684.755 L1610.57 684.755 L1611.13 684.755 L1611.69 684.755 L1612.25 684.755 L1612.81 684.755 L1613.37 684.755 L1613.93 684.755 L1614.49 684.755 L1615.05 684.755 L1615.61 684.755 L1616.17 684.755 L1616.73 684.755 L1617.29 684.755 L1617.84 684.755 L1618.4 684.755 L1618.96 684.755 L1619.52 684.755 L1620.08 684.755 L1620.64 684.755 L1621.2 684.755 L1621.76 684.755 L1622.32 684.755 L1622.88 684.755 L1623.44 684.755 L1624 684.755 L1624.56 684.755 L1625.11 684.755 L1625.67 684.755 L1626.23 684.755 L1626.79 684.755 L1627.35 684.755 L1627.91 684.755 L1628.47 684.755 L1629.03 684.755 L1629.59 684.755 L1630.15 684.755 L1630.71 684.755 L1631.27 684.755 L1631.83 684.755 L1632.39 684.755 L1632.94 684.755 L1633.5 684.755 L1634.06 684.755 L1634.62 684.755 L1635.18 684.755 L1635.74 684.755 L1636.3 684.755 L1636.86 684.755 L1637.42 684.755 L1637.98 684.755 L1638.54 684.755 L1639.1 684.755 L1639.66 684.755 L1640.21 684.755 L1640.77 684.755 L1641.33 684.755 L1641.89 684.755 L1642.45 684.755 L1643.01 684.755 L1643.57 684.755 L1644.13 684.755 L1644.69 684.755 L1645.25 684.755 L1645.81 684.755 L1646.37 684.755 L1646.93 684.755 L1647.48 684.755 L1648.04 684.755 L1648.6 684.755 L1649.16 684.755 L1649.72 684.755 L1650.28 684.755 L1650.84 684.755 L1651.4 684.755 L1651.96 684.755 L1652.52 684.755 L1653.08 684.755 L1653.64 684.755 L1654.2 684.755 L1654.76 684.755 L1655.31 684.755 L1655.87 684.755 L1656.43 684.755 L1656.99 684.755 L1657.55 684.755 L1658.11 684.755 L1658.67 684.755 L1659.23 684.755 L1659.79 684.755 L1660.35 684.755 L1660.91 684.755 L1661.47 684.755 L1662.03 684.755 L1662.58 684.755 L1663.14 684.755 L1663.7 684.755 L1664.26 684.755 L1664.82 684.755 L1665.38 684.755 L1665.94 684.755 L1666.5 684.755 L1667.06 684.755 L1667.62 684.755 L1668.18 684.755 L1668.74 684.755 L1669.3 684.755 L1669.85 684.755 L1670.41 684.755 L1670.97 684.755 L1671.53 684.755 L1672.09 684.755 L1672.65 684.755 L1673.21 684.755 L1673.77 684.755 L1674.33 684.755 L1674.89 684.755 L1675.45 684.755 L1676.01 684.755 L1676.57 684.755 L1677.13 684.755 L1677.68 684.755 L1678.24 684.755 L1678.8 684.755 L1679.36 684.755 L1679.92 684.755 L1680.48 684.755 L1681.04 684.755 L1681.6 684.755 L1682.16 684.755 L1682.72 684.755 L1683.28 684.755 L1683.84 684.755 L1684.4 684.755 L1684.95 684.755 L1685.51 684.755 L1686.07 684.755 L1686.63 684.755 L1687.19 684.755 L1687.75 684.755 L1688.31 684.755 L1688.87 684.755 L1689.43 684.755 L1689.99 684.755 L1690.55 684.755 L1691.11 684.755 L1691.67 684.755 L1692.23 684.755 L1692.78 684.755 L1693.34 684.755 L1693.9 684.755 L1694.46 684.755 L1695.02 684.755 L1695.58 684.755 L1696.14 684.755 L1696.7 684.755 L1697.26 684.755 L1697.82 684.755 L1698.38 684.755 L1698.94 684.755 L1699.5 684.755 L1700.05 684.755 L1700.61 684.755 L1701.17 684.755 L1701.73 684.755 L1702.29 684.755 L1702.85 684.755 L1703.41 684.755 L1703.97 684.755 L1704.53 684.755 L1705.09 684.755 L1705.65 684.755 L1706.21 684.755 L1706.77 684.755 L1707.32 684.755 L1707.88 684.755 L1708.44 684.755 L1709 684.755 L1709.56 684.755 L1710.12 684.755 L1710.68 684.755 L1711.24 684.755 L1711.8 684.755 L1712.36 684.755 L1712.92 684.755 L1713.48 684.755 L1714.04 684.755 L1714.6 684.755 L1715.15 684.755 L1715.71 684.755 L1716.27 684.755 L1716.83 684.755 L1717.39 684.755 L1717.95 684.755 L1718.51 684.755 L1719.07 684.755 L1719.63 684.755 L1720.19 684.755 L1720.75 684.755 L1721.31 684.755 L1721.87 684.755 L1722.42 684.755 L1722.98 684.755 L1723.54 684.755 L1724.1 684.755 L1724.66 684.755 L1725.22 684.755 L1725.78 684.755 L1726.34 684.755 L1726.9 684.755 L1727.46 684.755 L1728.02 684.755 L1728.58 684.755 L1729.14 684.755 L1729.69 684.755 L1730.25 684.755 L1730.81 684.755 L1731.37 684.755 L1731.93 684.755 L1732.49 684.755 L1733.05 684.755 L1733.61 684.755 L1734.17 684.755 L1734.73 684.755 L1735.29 684.755 L1735.85 684.755 L1736.41 684.755 L1736.97 684.755 L1737.52 684.755 L1738.08 684.755 L1738.64 684.755 L1739.2 684.755 L1739.76 684.755 L1740.32 684.755 L1740.88 684.755 L1741.44 684.755 L1742 684.755 L1742.56 684.755 L1743.12 684.755 L1743.68 684.755 L1744.24 684.755 L1744.79 684.755 L1745.35 684.755 L1745.91 684.755 L1746.47 684.755 L1747.03 684.755 L1747.59 684.755 L1748.15 684.755 L1748.71 684.755 L1749.27 684.755 L1749.83 684.755 L1750.39 684.755 L1750.95 684.755 L1751.51 684.755 L1752.06 684.755 L1752.62 684.755 L1753.18 684.755 L1753.74 684.755 L1754.3 684.755 L1754.86 684.755 L1755.42 684.755 L1755.98 684.755 L1756.54 684.755 L1757.1 684.755 L1757.66 684.755 L1758.22 684.755 L1758.78 684.755 L1759.34 684.755 L1759.89 684.755 L1760.45 684.755 L1761.01 684.755 L1761.57 684.755 L1762.13 684.755 L1762.69 684.755 L1763.25 684.755 L1763.81 684.755 L1764.37 684.755 L1764.93 684.755 L1765.49 684.755 L1766.05 684.755 L1766.61 684.755 L1767.16 684.755 L1767.72 684.755 L1768.28 684.755 L1768.84 684.755 L1769.4 684.755 L1769.96 684.755 L1770.52 684.755 L1771.08 684.755 L1771.64 684.755 L1772.2 684.755 L1772.76 684.755 L1773.32 684.755 L1773.88 684.755 L1774.43 684.755 L1774.99 684.755 L1775.55 684.755 L1776.11 684.755 L1776.67 684.755 L1777.23 684.755 L1777.79 684.755 L1778.35 684.755 L1778.91 684.755 L1779.47 684.755 L1780.03 684.755 L1780.59 684.755 L1781.15 684.755 L1781.71 684.755 L1782.26 684.755 L1782.82 684.755 L1783.38 684.755 L1783.94 684.755 L1784.5 684.755 L1785.06 684.755 L1785.62 684.755 L1786.18 684.755 L1786.74 684.755 L1787.3 684.755 L1787.86 684.755 L1788.42 684.755 L1788.98 684.755 L1789.53 684.755 L1790.09 684.755 L1790.65 684.755 L1791.21 684.755 L1791.77 684.755 L1792.33 684.755 L1792.89 684.755 L1793.45 684.755 L1794.01 684.755 L1794.57 684.755 L1795.13 684.755 L1795.69 684.755 L1796.25 684.755 L1796.8 684.755 L1797.36 684.755 L1797.92 684.755 L1798.48 684.755 L1799.04 684.755 L1799.6 684.755 L1800.16 684.755 L1800.72 684.755 L1801.28 684.755 L1801.84 684.755 L1802.4 684.755 L1802.96 684.755 L1803.52 684.755 L1804.08 684.755 L1804.63 684.755 L1805.19 684.755 L1805.75 684.755 L1806.31 684.755 L1806.87 684.755 L1807.43 684.755 L1807.99 684.755 L1808.55 684.755 L1809.11 684.755 L1809.67 684.755 L1810.23 684.755 L1810.79 684.755 L1811.35 684.755 L1811.9 684.755 L1812.46 684.755 L1813.02 684.755 L1813.58 684.755 L1814.14 684.755 L1814.7 684.755 L1815.26 684.755 L1815.82 684.755 L1816.38 684.755 L1816.94 684.755 L1817.5 684.755 L1818.06 684.755 L1818.62 684.755 L1819.18 684.755 L1819.73 684.755 L1820.29 684.755 L1820.85 684.755 L1821.41 684.755 L1821.97 684.755 L1822.53 684.755 L1823.09 684.755 L1823.65 684.755 L1824.21 684.755 L1824.77 684.755 L1825.33 684.755 L1825.89 684.755 L1826.45 684.755 L1827 684.755 L1827.56 684.755 L1828.12 684.755 L1828.68 684.755 L1829.24 684.755 L1829.8 684.755 L1830.36 684.755 L1830.92 684.755 L1831.48 684.755 L1832.04 684.755 L1832.6 684.755 L1833.16 684.755 L1833.72 684.755 L1834.27 684.755 L1834.83 684.755 L1835.39 684.755 L1835.95 684.755 L1836.51 684.755 L1837.07 684.755 L1837.63 684.755 L1838.19 684.755 L1838.19 682.658 L1837.63 682.658 L1837.07 682.658 L1836.51 682.658 L1835.95 682.658 L1835.39 682.658 L1834.83 682.658 L1834.27 682.658 L1833.72 682.658 L1833.16 682.658 L1832.6 682.658 L1832.04 682.658 L1831.48 682.658 L1830.92 682.658 L1830.36 682.658 L1829.8 682.658 L1829.24 682.658 L1828.68 682.658 L1828.12 682.658 L1827.56 682.658 L1827 682.658 L1826.45 682.658 L1825.89 682.658 L1825.33 682.658 L1824.77 682.658 L1824.21 682.658 L1823.65 682.658 L1823.09 682.658 L1822.53 682.658 L1821.97 682.658 L1821.41 682.658 L1820.85 682.658 L1820.29 682.658 L1819.73 682.658 L1819.18 682.658 L1818.62 682.658 L1818.06 682.658 L1817.5 682.658 L1816.94 682.658 L1816.38 682.658 L1815.82 682.658 L1815.26 682.658 L1814.7 682.658 L1814.14 682.658 L1813.58 682.658 L1813.02 682.658 L1812.46 682.658 L1811.9 682.658 L1811.35 682.658 L1810.79 682.658 L1810.23 682.658 L1809.67 682.658 L1809.11 682.658 L1808.55 682.658 L1807.99 682.658 L1807.43 682.658 L1806.87 682.658 L1806.31 682.658 L1805.75 682.658 L1805.19 682.658 L1804.63 682.658 L1804.08 682.658 L1803.52 682.658 L1802.96 682.658 L1802.4 682.658 L1801.84 682.658 L1801.28 682.658 L1800.72 682.658 L1800.16 682.658 L1799.6 682.658 L1799.04 682.658 L1798.48 682.658 L1797.92 682.658 L1797.36 682.658 L1796.8 682.658 L1796.25 682.658 L1795.69 682.658 L1795.13 682.658 L1794.57 682.658 L1794.01 682.658 L1793.45 682.658 L1792.89 682.658 L1792.33 682.658 L1791.77 682.658 L1791.21 682.658 L1790.65 682.658 L1790.09 682.658 L1789.53 682.658 L1788.98 682.658 L1788.42 682.658 L1787.86 682.658 L1787.3 682.658 L1786.74 682.658 L1786.18 682.658 L1785.62 682.658 L1785.06 682.658 L1784.5 682.658 L1783.94 682.658 L1783.38 682.658 L1782.82 682.658 L1782.26 682.658 L1781.71 682.658 L1781.15 682.658 L1780.59 682.658 L1780.03 682.658 L1779.47 682.658 L1778.91 682.658 L1778.35 682.658 L1777.79 682.658 L1777.23 682.658 L1776.67 682.658 L1776.11 682.658 L1775.55 682.658 L1774.99 682.658 L1774.43 682.658 L1773.88 682.658 L1773.32 682.658 L1772.76 682.658 L1772.2 682.658 L1771.64 682.658 L1771.08 682.658 L1770.52 682.658 L1769.96 682.658 L1769.4 682.658 L1768.84 682.658 L1768.28 682.658 L1767.72 682.658 L1767.16 682.658 L1766.61 682.658 L1766.05 682.658 L1765.49 682.658 L1764.93 682.658 L1764.37 682.658 L1763.81 682.658 L1763.25 682.658 L1762.69 682.658 L1762.13 682.658 L1761.57 682.658 L1761.01 682.658 L1760.45 682.658 L1759.89 682.658 L1759.34 682.658 L1758.78 682.658 L1758.22 682.658 L1757.66 682.658 L1757.1 682.658 L1756.54 682.658 L1755.98 682.658 L1755.42 682.658 L1754.86 682.658 L1754.3 682.658 L1753.74 682.658 L1753.18 682.658 L1752.62 682.658 L1752.06 682.658 L1751.51 682.658 L1750.95 682.658 L1750.39 682.658 L1749.83 682.658 L1749.27 682.658 L1748.71 682.658 L1748.15 682.658 L1747.59 682.658 L1747.03 682.658 L1746.47 682.658 L1745.91 682.658 L1745.35 682.658 L1744.79 682.658 L1744.24 682.658 L1743.68 682.658 L1743.12 682.658 L1742.56 682.658 L1742 682.658 L1741.44 682.658 L1740.88 682.658 L1740.32 682.658 L1739.76 682.658 L1739.2 682.658 L1738.64 682.658 L1738.08 682.658 L1737.52 682.658 L1736.97 682.658 L1736.41 682.658 L1735.85 682.658 L1735.29 682.658 L1734.73 682.658 L1734.17 682.658 L1733.61 682.658 L1733.05 682.658 L1732.49 682.658 L1731.93 682.658 L1731.37 682.658 L1730.81 682.658 L1730.25 682.658 L1729.69 682.658 L1729.14 682.658 L1728.58 682.658 L1728.02 682.658 L1727.46 682.658 L1726.9 682.658 L1726.34 682.658 L1725.78 682.658 L1725.22 682.658 L1724.66 682.658 L1724.1 682.658 L1723.54 682.658 L1722.98 682.658 L1722.42 682.658 L1721.87 682.658 L1721.31 682.658 L1720.75 682.658 L1720.19 682.658 L1719.63 682.658 L1719.07 682.658 L1718.51 682.658 L1717.95 682.658 L1717.39 682.658 L1716.83 682.658 L1716.27 682.658 L1715.71 682.658 L1715.15 682.658 L1714.6 682.658 L1714.04 682.658 L1713.48 682.658 L1712.92 682.658 L1712.36 682.658 L1711.8 682.658 L1711.24 682.658 L1710.68 682.658 L1710.12 682.658 L1709.56 682.658 L1709 682.658 L1708.44 682.658 L1707.88 682.658 L1707.32 682.658 L1706.77 682.658 L1706.21 682.658 L1705.65 682.658 L1705.09 682.658 L1704.53 682.658 L1703.97 682.658 L1703.41 682.658 L1702.85 682.658 L1702.29 682.658 L1701.73 682.658 L1701.17 682.658 L1700.61 682.658 L1700.05 682.658 L1699.5 682.658 L1698.94 682.658 L1698.38 682.658 L1697.82 682.658 L1697.26 682.658 L1696.7 682.658 L1696.14 682.658 L1695.58 682.658 L1695.02 682.658 L1694.46 682.658 L1693.9 682.658 L1693.34 682.658 L1692.78 682.658 L1692.23 682.658 L1691.67 682.658 L1691.11 682.658 L1690.55 682.658 L1689.99 682.658 L1689.43 682.658 L1688.87 682.658 L1688.31 682.658 L1687.75 682.658 L1687.19 682.658 L1686.63 682.658 L1686.07 682.658 L1685.51 682.658 L1684.95 682.658 L1684.4 682.658 L1683.84 682.658 L1683.28 682.658 L1682.72 682.658 L1682.16 682.658 L1681.6 682.658 L1681.04 682.658 L1680.48 682.658 L1679.92 682.658 L1679.36 682.658 L1678.8 682.658 L1678.24 682.658 L1677.68 682.658 L1677.13 682.658 L1676.57 682.658 L1676.01 682.658 L1675.45 682.658 L1674.89 682.658 L1674.33 682.658 L1673.77 682.658 L1673.21 682.658 L1672.65 682.658 L1672.09 682.658 L1671.53 682.658 L1670.97 682.658 L1670.41 682.658 L1669.85 682.658 L1669.3 682.658 L1668.74 682.658 L1668.18 682.658 L1667.62 682.658 L1667.06 682.658 L1666.5 682.658 L1665.94 682.658 L1665.38 682.658 L1664.82 682.658 L1664.26 682.658 L1663.7 682.658 L1663.14 682.658 L1662.58 682.658 L1662.03 682.658 L1661.47 682.658 L1660.91 682.658 L1660.35 682.658 L1659.79 682.658 L1659.23 682.658 L1658.67 682.658 L1658.11 682.658 L1657.55 682.658 L1656.99 682.658 L1656.43 682.658 L1655.87 682.658 L1655.31 682.658 L1654.76 682.658 L1654.2 682.658 L1653.64 682.658 L1653.08 682.658 L1652.52 682.658 L1651.96 682.658 L1651.4 682.658 L1650.84 682.658 L1650.28 682.658 L1649.72 682.658 L1649.16 682.658 L1648.6 682.658 L1648.04 682.658 L1647.48 682.658 L1646.93 682.658 L1646.37 682.658 L1645.81 682.658 L1645.25 682.658 L1644.69 682.658 L1644.13 682.658 L1643.57 682.658 L1643.01 682.658 L1642.45 682.658 L1641.89 682.658 L1641.33 682.658 L1640.77 682.658 L1640.21 682.658 L1639.66 682.658 L1639.1 682.658 L1638.54 682.658 L1637.98 682.658 L1637.42 682.658 L1636.86 682.658 L1636.3 682.658 L1635.74 682.658 L1635.18 682.658 L1634.62 682.658 L1634.06 682.658 L1633.5 682.658 L1632.94 682.658 L1632.39 682.658 L1631.83 682.658 L1631.27 682.658 L1630.71 682.658 L1630.15 682.658 L1629.59 682.658 L1629.03 682.658 L1628.47 682.658 L1627.91 682.658 L1627.35 682.658 L1626.79 682.658 L1626.23 682.658 L1625.67 682.658 L1625.11 682.658 L1624.56 682.658 L1624 682.658 L1623.44 682.658 L1622.88 682.658 L1622.32 682.658 L1621.76 682.658 L1621.2 682.658 L1620.64 682.658 L1620.08 682.658 L1619.52 682.658 L1618.96 682.658 L1618.4 682.658 L1617.84 682.658 L1617.29 682.658 L1616.73 682.658 L1616.17 682.658 L1615.61 682.658 L1615.05 682.658 L1614.49 682.658 L1613.93 682.658 L1613.37 682.658 L1612.81 682.658 L1612.25 682.658 L1611.69 682.658 L1611.13 682.658 L1610.57 682.658 L1610.02 682.658 L1609.46 682.658 L1608.9 682.658 L1608.34 682.658 L1607.78 682.658 L1607.22 682.658 L1606.66 682.658 L1606.1 682.658 L1605.54 682.658 L1604.98 682.658 L1604.42 682.658 L1603.86 682.658 L1603.3 682.658 L1602.74 682.658 L1602.19 682.658 L1601.63 682.658 L1601.07 682.658 L1600.51 682.658 L1599.95 682.658 L1599.39 682.658 L1598.83 682.658 L1598.27 682.658 L1597.71 682.658 L1597.15 682.658 L1596.59 682.658 L1596.03 682.658 L1595.47 682.658 L1594.92 682.658 L1594.36 682.658 L1593.8 682.658 L1593.24 682.658 L1592.68 682.658 L1592.12 682.658 L1591.56 682.658 L1591 682.658 L1590.44 682.658 L1589.88 682.658 L1589.32 682.658 L1588.76 682.658 L1588.2 682.658 L1587.65 682.658 L1587.09 682.658 L1586.53 682.658 L1585.97 682.658 L1585.41 682.658 L1584.85 682.658 L1584.29 682.658 L1583.73 682.658 L1583.17 682.658 L1582.61 682.658 L1582.05 682.658 L1581.49 682.658 L1580.93 682.658 L1580.37 682.658 L1579.82 682.658 L1579.26 682.658 L1578.7 682.658 L1578.14 682.658 L1577.58 682.658 L1577.02 682.658 L1576.46 682.658 L1575.9 682.658 L1575.34 682.658 L1574.78 682.658 L1574.22 682.658 L1573.66 682.658 L1573.1 682.658 L1572.55 682.658 L1571.99 682.658 L1571.43 682.658 L1570.87 682.658 L1570.31 682.658 L1569.75 682.658 L1569.19 682.658 L1568.63 682.658 L1568.07 682.658 L1567.51 682.658 L1566.95 682.658 L1566.39 682.658 L1565.83 682.658 L1565.28 682.658 L1564.72 682.658 L1564.16 682.658 L1563.6 682.658 L1563.04 682.658 L1562.48 682.658 L1561.92 682.658 L1561.36 682.658 L1560.8 682.658 L1560.24 682.658 L1559.68 682.658 L1559.12 682.658 L1558.56 682.658 L1558 682.658 L1557.45 682.658 L1556.89 682.658 L1556.33 682.658 L1555.77 682.658 L1555.21 682.658 L1554.65 682.658 L1554.09 682.658 L1553.53 682.658 L1552.97 682.658 L1552.41 682.658 L1551.85 682.658 L1551.29 682.658 L1550.73 682.658 L1550.18 682.658 L1549.62 682.658 L1549.06 682.658 L1548.5 682.658 L1547.94 682.658 L1547.38 682.658 L1546.82 682.658 L1546.26 682.658 L1545.7 682.658 L1545.14 682.658 L1544.58 682.658 L1544.02 682.658 L1543.46 682.658 L1542.9 682.658 L1542.35 682.658 L1541.79 682.658 L1541.23 682.658 L1540.67 682.658 L1540.11 682.658 L1539.55 682.658 L1538.99 682.658 L1538.43 682.658 L1537.87 682.658 L1537.31 682.658 L1536.75 682.658 L1536.19 682.658 L1535.63 682.658 L1535.08 682.658 L1534.52 682.658 L1533.96 682.658 L1533.4 682.658 L1532.84 682.658 L1532.28 682.658 L1531.72 682.658 L1531.16 682.658 L1530.6 682.658 L1530.04 682.658 L1529.48 682.658 L1528.92 682.658 L1528.36 682.658 L1527.81 682.658 L1527.25 682.658 L1526.69 682.658 L1526.13 682.658 L1525.57 682.658 L1525.01 682.658 L1524.45 682.658 L1523.89 682.658 L1523.33 682.658 L1522.77 682.658 L1522.21 682.658 L1521.65 682.658 L1521.09 682.658 L1520.53 682.658 L1519.98 682.658 L1519.42 682.658 L1518.86 682.658 L1518.3 682.658 L1517.74 682.658 L1517.18 682.658 L1516.62 682.658 L1516.06 682.658 L1515.5 682.658 L1514.94 682.658 L1514.38 682.658 L1513.82 682.658 L1513.26 682.658 L1512.71 682.658 L1512.15 682.658 L1511.59 682.658 L1511.03 682.658 L1510.47 682.658 L1509.91 682.658 L1509.35 682.658 L1508.79 682.658 L1508.23 682.658 L1507.67 682.658 L1507.11 682.658 L1506.55 682.658 L1505.99 682.658 L1505.44 682.658 L1504.88 682.658 L1504.32 682.658 L1503.76 682.658 L1503.2 682.658 L1502.64 682.658 L1502.08 682.658 L1501.52 682.658 L1500.96 682.658 L1500.4 682.658 L1499.84 682.658 L1499.28 682.658 L1498.72 682.658 L1498.16 682.658 L1497.61 682.658 L1497.05 682.658 L1496.49 682.658 L1495.93 682.658 L1495.37 682.658 L1494.81 682.658 L1494.25 682.658 L1493.69 682.658 L1493.13 682.658 L1492.57 682.658 L1492.01 682.658 L1491.45 682.658 L1490.89 682.658 L1490.34 682.658 L1489.78 682.658 L1489.22 682.658 L1488.66 682.658 L1488.1 682.658 L1487.54 682.658 L1486.98 682.658 L1486.42 682.658 L1485.86 682.658 L1485.3 682.658 L1484.74 682.658 L1484.18 682.658 L1483.62 682.658 L1483.07 682.658 L1482.51 682.658 L1481.95 682.658 L1481.39 682.658 L1480.83 682.658 L1480.27 682.658 L1479.71 682.658 L1479.15 682.658 L1478.59 682.658 L1478.03 682.658 L1477.47 682.658 L1476.91 682.658 L1476.35 682.658 L1475.79 682.658 L1475.24 682.658 L1474.68 682.658 L1474.12 682.658 L1473.56 682.658 L1473 682.658 L1472.44 682.658 L1471.88 682.658 L1471.32 682.658 L1470.76 682.658 L1470.2 682.658 L1469.64 682.658 L1469.08 682.658 L1468.52 682.658 L1467.97 682.658 L1467.41 682.658 L1466.85 682.658 L1466.29 682.658 L1465.73 682.658 L1465.17 682.658 L1464.61 682.658 L1464.05 682.658 L1463.49 682.658 L1462.93 682.658 L1462.37 682.658 L1461.81 682.658 L1461.25 682.658 L1460.7 682.658 L1460.14 682.658 L1459.58 682.658 L1459.02 682.658 L1458.46 682.658 L1457.9 682.658 L1457.34 682.658 L1456.78 682.658 L1456.22 682.658 L1455.66 682.658 L1455.1 682.658 L1454.54 682.658 L1453.98 682.658 L1453.42 682.658 L1452.87 682.658 L1452.31 682.658 L1451.75 682.658 L1451.19 682.658 L1450.63 682.658 L1450.07 682.658 L1449.51 682.658 L1448.95 682.658 L1448.39 682.658 L1447.83 682.658 L1447.27 682.658 L1446.71 682.658 L1446.15 682.658 L1445.6 682.658 L1445.04 682.658 L1444.48 682.658 L1443.92 682.658 L1443.36 682.658 L1442.8 682.658 L1442.24 682.658 L1441.68 682.658 L1441.12 682.658 L1440.56 682.658 L1440 682.658 L1439.44 682.658 L1438.88 682.658 L1438.33 682.658 L1437.77 682.658 L1437.21 682.658 L1436.65 682.658 L1436.09 682.658 L1435.53 682.658 L1434.97 682.658 L1434.41 682.658 L1433.85 682.658 L1433.29 682.658 L1432.73 682.658 L1432.17 682.658 L1431.61 682.658 L1431.05 682.658 L1430.5 682.658 L1429.94 682.658 L1429.38 682.658 L1428.82 682.658 L1428.26 682.658 L1427.7 682.658 L1427.14 682.658 L1426.58 682.658 L1426.02 682.658 L1425.46 682.658 L1424.9 682.658 L1424.34 682.658 L1423.78 682.658 L1423.23 682.658 L1422.67 682.658 L1422.11 682.658 L1421.55 682.658 L1420.99 682.658 L1420.43 682.658 L1419.87 682.658 L1419.31 682.658 L1418.75 682.658 L1418.19 682.658 L1417.63 682.658 L1417.07 682.658 L1416.51 682.658 L1415.95 682.658 L1415.4 682.658 L1414.84 682.658 L1414.28 682.658 L1413.72 682.658 L1413.16 682.658 L1412.6 682.658 L1412.04 682.658 L1411.48 682.658 L1410.92 682.658 L1410.36 682.658 L1409.8 682.658 L1409.24 682.658 L1408.68 682.658 L1408.13 682.658 L1407.57 682.658 L1407.01 682.658 L1406.45 682.658 L1405.89 682.658 L1405.33 682.658 L1404.77 682.658 L1404.21 682.658 L1403.65 682.658 L1403.09 682.658 L1402.53 682.658 L1401.97 682.658 L1401.41 682.658 L1400.86 682.658 L1400.3 682.658 L1399.74 682.658 L1399.18 682.658 L1398.62 682.658 L1398.06 682.658 L1397.5 682.658 L1396.94 682.658 L1396.38 682.658 L1395.82 682.658 L1395.26 682.658 L1394.7 682.658 L1394.14 682.658 L1393.58 682.658 L1393.03 682.658 L1392.47 682.658 L1391.91 682.658 L1391.35 682.658 L1390.79 682.658 L1390.23 682.658 L1389.67 682.658 L1389.11 682.658 L1388.55 682.658 L1387.99 682.658 L1387.43 682.658 L1386.87 682.658 L1386.31 682.658 L1385.76 682.658 L1385.2 682.658 L1384.64 682.658 L1384.08 682.658 L1383.52 682.658 L1382.96 682.658 L1382.4 682.658 L1381.84 682.658 L1381.28 682.658 L1380.72 682.658 L1380.16 682.658 L1379.6 682.658 L1379.04 682.658 L1378.49 682.658 L1377.93 682.658 L1377.37 682.658 L1376.81 682.658 L1376.25 682.658 L1375.69 682.658 L1375.13 682.658 L1374.57 682.658 L1374.01 682.658 L1373.45 682.658 L1372.89 682.658 L1372.33 682.658 L1371.77 682.658 L1371.21 682.658 L1370.66 682.658 L1370.1 682.658 L1369.54 682.658 L1368.98 682.658 L1368.42 682.658 L1367.86 682.658 L1367.3 682.658 L1366.74 682.658 L1366.18 682.658 L1365.62 682.658 L1365.06 682.658 L1364.5 682.658 L1363.94 682.658 L1363.39 682.658 L1362.83 682.658 L1362.27 682.658 L1361.71 682.658 L1361.15 682.658 L1360.59 682.658 L1360.03 682.658 L1359.47 682.658 L1358.91 682.658 L1358.35 682.658 L1357.79 682.658 L1357.23 682.658 L1356.67 682.658 L1356.12 682.658 L1355.56 682.658 L1355 682.658 L1354.44 682.658 L1353.88 682.658 L1353.32 682.658 L1352.76 682.658 L1352.2 682.658 L1351.64 682.658 L1351.08 682.658 L1350.52 682.658 L1349.96 682.658 L1349.4 682.658 L1348.84 682.658 L1348.29 682.658 L1347.73 682.658 L1347.17 682.658 L1346.61 682.658 L1346.05 682.658 L1345.49 682.658 L1344.93 682.658 L1344.37 682.658 L1343.81 682.658 L1343.25 682.658 L1342.69 682.658 L1342.13 682.658 L1341.57 682.658 L1341.02 682.658 L1340.46 682.658 L1339.9 682.658 L1339.34 682.658 L1338.78 682.658 L1338.22 682.658 L1337.66 682.658 L1337.1 682.658 L1336.54 682.658 L1335.98 682.658 L1335.42 682.658 L1334.86 682.658 L1334.3 682.658 L1333.75 682.658 L1333.19 682.658 L1332.63 682.658 L1332.07 682.658 L1331.51 682.658 L1330.95 682.658 L1330.39 682.658 L1329.83 682.658 L1329.27 682.658 L1328.71 682.658 L1328.15 682.658 L1327.59 682.658 L1327.03 682.658 L1326.47 682.658 L1325.92 682.658 L1325.36 682.658 L1324.8 682.658 L1324.24 682.658 L1323.68 682.658 L1323.12 682.658 L1322.56 682.658 L1322 682.658 L1321.44 682.658 L1320.88 682.658 L1320.32 682.658 L1319.76 682.658 L1319.2 682.658 L1318.65 682.658 L1318.09 682.658 L1317.53 682.658 L1316.97 682.658 L1316.41 682.658 L1315.85 682.658 L1315.29 682.658 L1314.73 682.658 L1314.17 682.658 L1313.61 682.658 L1313.05 682.658 L1312.49 682.658 L1311.93 682.658 L1311.38 682.658 L1310.82 682.658 L1310.26 682.658 L1309.7 682.658 L1309.14 682.658 L1308.58 682.658 L1308.02 682.658 L1307.46 682.658 L1306.9 682.658 L1306.34 682.658 L1305.78 682.658 L1305.22 682.658 L1304.66 682.658 L1304.1 682.658 L1303.55 682.658 L1302.99 682.658 L1302.43 682.658 L1301.87 682.658 L1301.31 682.658 L1300.75 682.658 L1300.19 682.658 L1299.63 682.658 L1299.07 682.658 L1298.51 682.658 L1297.95 682.658 L1297.39 682.658 L1296.83 682.658 L1296.28 682.658 L1295.72 682.658 L1295.16 682.658 L1294.6 682.658 L1294.04 682.658 L1293.48 682.658 L1292.92 682.658 L1292.36 682.658 L1291.8 682.658 L1291.24 682.658 L1290.68 682.658 L1290.12 682.658 L1289.56 682.658 L1289 682.658 L1288.45 682.658 L1287.89 682.658 L1287.33 682.658 L1286.77 682.658 L1286.21 682.658 L1285.65 682.658 L1285.09 682.658 L1284.53 682.658 L1283.97 682.658 L1283.41 682.658 L1282.85 682.658 L1282.29 682.658 L1281.73 682.658 L1281.18 682.658 L1280.62 682.658 L1280.06 682.658 L1279.5 682.658 L1278.94 682.658 L1278.38 682.658 L1277.82 682.658 L1277.26 682.658 L1276.7 682.658 L1276.14 682.658 L1275.58 682.658 L1275.02 682.658 L1274.46 682.658 L1273.91 682.658 L1273.35 682.658 L1272.79 682.658 L1272.23 682.658 L1271.67 682.658 L1271.11 682.658 L1270.55 682.658 L1269.99 682.658 L1269.43 682.658 L1268.87 682.658 L1268.31 682.658 L1267.75 682.658 L1267.19 682.658 L1266.63 682.658 L1266.08 682.658 L1265.52 682.658 L1264.96 682.658 L1264.4 682.658 L1263.84 682.658 L1263.28 682.658 L1262.72 682.658 L1262.16 682.658 L1261.6 682.658 L1261.04 682.658 L1260.48 682.658 L1259.92 682.658 L1259.36 682.658 L1258.81 682.658 L1258.25 682.658 L1257.69 682.658 L1257.13 682.658 L1256.57 682.658 L1256.01 682.658 L1255.45 682.658 L1254.89 682.658 L1254.33 682.658 L1253.77 682.658 L1253.21 682.658 L1252.65 682.658 L1252.09 682.658 L1251.54 682.658 L1250.98 682.658 L1250.42 682.658 L1249.86 682.658 L1249.3 682.658 L1248.74 682.658 L1248.18 682.658 L1247.62 682.658 L1247.06 682.658 L1246.5 682.658 L1245.94 682.658 L1245.38 682.658 L1244.82 682.658 L1244.26 682.658 L1243.71 682.658 L1243.15 682.658 L1242.59 682.658 L1242.03 682.658 L1241.47 682.658 L1240.91 682.658 L1240.35 682.658 L1239.79 682.658 L1239.23 682.658 L1238.67 682.658 L1238.11 682.658 L1237.55 682.658 L1236.99 682.658 L1236.44 682.658 L1235.88 682.658 L1235.32 682.658 L1234.76 682.658 L1234.2 682.658 L1233.64 682.658 L1233.08 682.658 L1232.52 682.658 L1231.96 682.658 L1231.4 682.658 L1230.84 682.658 L1230.28 682.658 L1229.72 682.658 L1229.17 682.658 L1228.61 682.658 L1228.05 682.658 L1227.49 682.658 L1226.93 682.658 L1226.37 682.658 L1225.81 682.658 L1225.25 682.658 L1224.69 682.658 L1224.13 682.658 L1223.57 682.658 L1223.01 682.658 L1222.45 682.658 L1221.89 682.658 L1221.34 682.658 L1220.78 682.658 L1220.22 682.658 L1219.66 682.658 L1219.1 682.658 L1218.54 682.658 L1217.98 682.658 L1217.42 682.658 L1216.86 682.658 L1216.3 682.658 L1215.74 682.658 L1215.18 682.658 L1214.62 682.658 L1214.07 682.658 L1213.51 682.658 L1212.95 682.658 L1212.39 682.658 L1211.83 682.658 L1211.27 682.658 L1210.71 682.658 L1210.15 682.658 L1209.59 682.658 L1209.03 682.658 L1208.47 682.658 L1207.91 682.658 L1207.35 682.658 L1206.8 682.658 L1206.24 682.658 L1205.68 682.658 L1205.12 682.658 L1204.56 682.658 L1204 682.658 L1203.44 682.658 L1202.88 682.658 L1202.32 682.658 L1201.76 682.658 L1201.2 682.658 L1200.64 682.658 L1200.08 682.658 L1199.52 682.658 L1198.97 682.658 L1198.41 682.658 L1197.85 682.658 L1197.29 682.658 L1196.73 682.658 L1196.17 682.658 L1195.61 682.658 L1195.05 682.658 L1194.49 682.658 L1193.93 682.658 L1193.37 682.658 L1192.81 682.658 L1192.25 682.658 L1191.7 682.658 L1191.14 682.658 L1190.58 682.658 L1190.02 682.658 L1189.46 682.658 L1188.9 682.658 L1188.34 682.658 L1187.78 682.658 L1187.22 682.658 L1186.66 682.658 L1186.1 682.658 L1185.54 682.658 L1184.98 682.658 L1184.43 682.658 L1183.87 682.658 L1183.31 682.658 L1182.75 682.658 L1182.19 682.658 L1181.63 682.658 L1181.07 682.658 L1180.51 682.658 L1179.95 682.658 L1179.39 682.658 L1178.83 682.658 L1178.27 682.658 L1177.71 682.658 L1177.15 682.658 L1176.6 682.658 L1176.04 682.658 L1175.48 682.658 L1174.92 682.658 L1174.36 682.658 L1173.8 682.658 L1173.24 682.658 L1172.68 682.658 L1172.12 682.658 L1171.56 682.658 L1171 682.658 L1170.44 682.658 L1169.88 682.658 L1169.33 682.658 L1168.77 682.658 L1168.21 682.658 L1167.65 682.658 L1167.09 682.658 L1166.53 682.658 L1165.97 682.658 L1165.41 682.658 L1164.85 682.658 L1164.29 682.658 L1163.73 682.658 L1163.17 682.658 L1162.61 682.658 L1162.05 682.658 L1161.5 682.658 L1160.94 682.658 L1160.38 682.658 L1159.82 682.658 L1159.26 682.658 L1158.7 682.658 L1158.14 682.658 L1157.58 682.658 L1157.02 682.658 L1156.46 682.658 L1155.9 682.658 L1155.34 682.658 L1154.78 682.658 L1154.23 682.658 L1153.67 682.658 L1153.11 682.658 L1152.55 682.658 L1151.99 682.658 L1151.43 682.658 L1150.87 682.658 L1150.31 682.658 L1149.75 682.658 L1149.19 682.658 L1148.63 682.658 L1148.07 682.658 L1147.51 682.658 L1146.96 682.658 L1146.4 682.658 L1145.84 682.658 L1145.28 682.658 L1144.72 682.658 L1144.16 682.658 L1143.6 682.658 L1143.04 682.658 L1142.48 682.658 L1141.92 682.658 L1141.36 682.658 L1140.8 682.658 L1140.24 682.658 L1139.68 682.658 L1139.13 682.658 L1138.57 682.658 L1138.01 682.658 L1137.45 682.658 L1136.89 682.658 L1136.33 682.658 L1135.77 682.658 L1135.21 682.658 L1134.65 682.658 L1134.09 682.658 L1133.53 682.658 L1132.97 682.658 L1132.41 682.658 L1131.86 682.658 L1131.3 682.658 L1130.74 682.658 L1130.18 682.658 L1129.62 682.658 L1129.06 682.658 L1128.5 682.658 L1127.94 682.658 L1127.38 682.658 L1126.82 682.658 L1126.26 682.658 L1125.7 682.658 L1125.14 682.658 L1124.59 682.658 L1124.03 682.658 L1123.47 682.658 L1122.91 682.658 L1122.35 682.658 L1121.79 682.658 L1121.23 682.658 L1120.67 682.658 L1120.11 682.658 L1119.55 682.658 L1118.99 682.658 L1118.43 682.658 L1117.87 682.658 L1117.31 682.658 L1116.76 682.658 L1116.2 682.658 L1115.64 682.658 L1115.08 682.658 L1114.52 682.658 L1113.96 682.658 L1113.4 682.658 L1112.84 682.658 L1112.28 682.658 L1111.72 682.658 L1111.16 682.658 L1110.6 682.658 L1110.04 682.658 L1109.49 682.658 L1108.93 682.658 L1108.37 682.658 L1107.81 682.658 L1107.25 682.658 L1106.69 682.658 L1106.13 682.658 L1105.57 682.658 L1105.01 682.658 L1104.45 682.658 L1103.89 682.658 L1103.33 682.658 L1102.77 682.658 L1102.22 682.658 L1101.66 682.658 L1101.1 682.658 L1100.54 682.658 L1099.98 682.658 L1099.42 682.658 L1098.86 682.658 L1098.3 682.658 L1097.74 682.658 L1097.18 682.658 L1096.62 682.658 L1096.06 682.658 L1095.5 682.658 L1094.94 682.658 L1094.39 682.658 L1093.83 682.658 L1093.27 682.658 L1092.71 682.658 L1092.15 682.658 L1091.59 682.658 L1091.03 682.658 L1090.47 682.658 L1089.91 682.658 L1089.35 682.658 L1088.79 682.658 L1088.23 682.658 L1087.67 682.658 L1087.12 682.658 L1086.56 682.658 L1086 682.658 L1085.44 682.658 L1084.88 682.658 L1084.32 682.658 L1083.76 682.658 L1083.2 682.658 L1082.64 682.658 L1082.08 682.658 L1081.52 682.658 L1080.96 682.658 L1080.4 682.658 L1079.85 682.658 L1079.29 682.658 L1078.73 682.658 L1078.17 682.658 L1077.61 682.658 L1077.05 682.658 L1076.49 682.658 L1075.93 682.658 L1075.37 682.658 L1074.81 682.658 L1074.25 682.658 L1073.69 682.658 L1073.13 682.658 L1072.57 682.658 L1072.02 682.658 L1071.46 682.658 L1070.9 682.658 L1070.34 682.658 L1069.78 682.658 L1069.22 682.658 L1068.66 682.658 L1068.1 682.658 L1067.54 682.658 L1066.98 682.658 L1066.42 682.658 L1065.86 682.658 L1065.3 682.658 L1064.75 682.658 L1064.19 682.658 L1063.63 682.658 L1063.07 682.658 L1062.51 682.658 L1061.95 682.658 L1061.39 682.658 L1060.83 682.658 L1060.27 682.658 L1059.71 682.658 L1059.15 682.658 L1058.59 682.658 L1058.03 682.658 L1057.48 682.658 L1056.92 682.658 L1056.36 682.658 L1055.8 682.658 L1055.24 682.658 L1054.68 682.658 L1054.12 682.658 L1053.56 682.658 L1053 682.658 L1052.44 682.658 L1051.88 682.658 L1051.32 682.658 L1050.76 682.658 L1050.2 682.658 L1049.65 682.658 L1049.09 682.658 L1048.53 682.658 L1047.97 682.658 L1047.41 682.658 L1046.85 682.658 L1046.29 682.658 L1045.73 682.658 L1045.17 682.658 L1044.61 682.658 L1044.05 682.658 L1043.49 682.658 L1042.93 682.658 L1042.38 682.658 L1041.82 682.658 L1041.26 682.658 L1040.7 682.658 L1040.14 682.658 L1039.58 682.658 L1039.02 682.658 L1038.46 682.658 L1037.9 682.658 L1037.34 682.658 L1036.78 682.658 L1036.22 682.658 L1035.66 682.658 L1035.1 682.658 L1034.55 682.658 L1033.99 682.658 L1033.43 682.658 L1032.87 682.658 L1032.31 682.658 L1031.75 682.658 L1031.19 682.658 L1030.63 682.658 L1030.07 682.658 L1029.51 682.658 L1028.95 682.658 L1028.39 682.658 L1027.83 682.658 L1027.28 682.658 L1026.72 682.658 L1026.16 682.658 L1025.6 682.658 L1025.04 682.658 L1024.48 682.658 L1023.92 682.658 L1023.36 682.658 L1022.8 682.658 L1022.24 682.658 L1021.68 682.658 L1021.12 682.658 L1020.56 682.658 L1020.01 682.658 L1019.45 682.658 L1018.89 682.658 L1018.33 682.658 L1017.77 682.658 L1017.21 682.658 L1016.65 682.658 L1016.09 682.658 L1015.53 682.658 L1014.97 682.658 L1014.41 682.658 L1013.85 682.658 L1013.29 682.658 L1012.73 682.658 L1012.18 682.658 L1011.62 682.658 L1011.06 682.658 L1010.5 682.658 L1009.94 682.658 L1009.38 682.658 L1008.82 682.658 L1008.26 682.658 L1007.7 682.658 L1007.14 682.658 L1006.58 682.658 L1006.02 682.658 L1005.46 682.658 L1004.91 682.658 L1004.35 682.658 L1003.79 682.658 L1003.23 682.658 L1002.67 682.658 L1002.11 682.658 L1001.55 682.658 L1000.99 682.658 L1000.43 682.658 L999.872 682.658 L999.313 682.658 L998.754 682.658 L998.194 682.658 L997.635 682.658 L997.076 682.658 L996.517 682.658 L995.957 682.658 L995.398 682.658 L994.839 682.658 L994.28 682.658 L993.72 682.658 L993.161 682.658 L992.602 682.658 L992.043 682.658 L991.483 682.658 L990.924 682.658 L990.365 682.658 L989.806 682.658 L989.246 682.658 L988.687 682.658 L988.128 682.658 L987.569 682.658 L987.009 682.658 L986.45 682.658 L985.891 682.658 L985.332 682.658 L984.772 682.658 L984.213 682.658 L983.654 682.658 L983.095 682.658 L982.535 682.658 L981.976 682.658 L981.417 682.658 L980.858 682.658 L980.298 682.658 L979.739 682.658 L979.18 682.658 L978.621 682.658 L978.061 682.658 L977.502 682.658 L976.943 682.658 L976.384 682.658 L975.824 682.658 L975.265 682.658 L974.706 682.658 L974.147 682.658 L973.587 682.658 L973.028 682.658 L972.469 682.658 L971.91 682.658 L971.35 682.658 L970.791 682.658 L970.232 682.658 L969.673 682.658 L969.113 682.658 L968.554 682.658 L967.995 682.658 L967.436 682.658 L966.876 682.658 L966.317 682.658 L965.758 682.658 L965.199 682.658 L964.639 682.658 L964.08 682.658 L963.521 682.658 L962.962 682.658 L962.402 682.658 L961.843 682.658 L961.284 682.658 L960.725 682.658 L960.165 682.658 L959.606 682.658 L959.047 682.658 L958.488 682.658 L957.928 682.658 L957.369 682.658 L956.81 682.658 L956.251 682.658 L955.691 682.658 L955.132 682.658 L954.573 682.658 L954.014 682.658 L953.454 682.658 L952.895 682.658 L952.336 682.658 L951.777 682.658 L951.217 682.658 L950.658 682.658 L950.099 682.658 L949.54 682.658 L948.98 682.658 L948.421 682.658 L947.862 682.658 L947.303 682.658 L946.743 682.658 L946.184 682.658 L945.625 682.658 L945.066 682.658 L944.506 682.658 L943.947 682.658 L943.388 682.658 L942.829 682.658 L942.269 682.658 L941.71 682.658 L941.151 682.658 L940.592 682.658 L940.032 682.658 L939.473 682.658 L938.914 682.658 L938.355 682.658 L937.795 682.658 L937.236 682.658 L936.677 682.658 L936.118 682.658 L935.558 682.658 L934.999 682.658 L934.44 682.658 L933.881 682.658 L933.321 682.658 L932.762 682.658 L932.203 682.658 L931.644 682.658 L931.084 682.658 L930.525 682.658 L929.966 682.658 L929.406 682.658 L928.847 682.658 L928.288 682.658 L927.729 682.658 L927.169 682.658 L926.61 682.658 L926.051 682.658 L925.492 682.658 L924.932 682.658 L924.373 682.658 L923.814 682.658 L923.255 682.658 L922.695 682.658 L922.136 682.658 L921.577 682.658 L921.018 682.658 L920.458 682.658 L919.899 682.658 L919.34 682.658 L918.781 682.658 L918.221 682.658 L917.662 682.658 L917.103 682.658 L916.544 682.658 L915.984 682.658 L915.425 682.658 L914.866 682.658 L914.307 682.658 L913.747 682.658 L913.188 682.658 L912.629 682.658 L912.07 682.658 L911.51 682.658 L910.951 682.658 L910.392 682.658 L909.833 682.658 L909.273 682.658 L908.714 682.658 L908.155 682.658 L907.596 682.658 L907.036 682.658 L906.477 682.658 L905.918 682.658 L905.359 682.658 L904.799 682.658 L904.24 682.658 L903.681 682.658 L903.122 682.658 L902.562 682.658 L902.003 682.658 L901.444 682.658 L900.885 682.658 L900.325 682.658 L899.766 682.658 L899.207 682.658 L898.648 682.658 L898.088 682.658 L897.529 682.658 L896.97 682.658 L896.411 682.658 L895.851 682.658 L895.292 682.658 L894.733 682.658 L894.174 682.658 L893.614 682.658 L893.055 682.658 L892.496 682.658 L891.937 682.658 L891.377 682.658 L890.818 682.658 L890.259 682.658 L889.7 682.658 L889.14 682.658 L888.581 682.658 L888.022 682.658 L887.463 682.658 L886.903 682.658 L886.344 682.658 L885.785 682.658 L885.226 682.658 L884.666 682.658 L884.107 682.658 L883.548 682.658 L882.989 682.658 L882.429 682.658 L881.87 682.658 L881.311 682.658 L880.752 682.658 L880.192 682.658 L879.633 682.658 L879.074 682.658 L878.515 682.658 L877.955 682.658 L877.396 682.658 L876.837 682.658 L876.278 682.658 L875.718 682.658 L875.159 682.658 L874.6 682.658 L874.041 682.658 L873.481 682.658 L872.922 682.658 L872.363 682.658 L871.804 682.658 L871.244 682.658 L870.685 682.658 L870.126 682.658 L869.567 682.658 L869.007 682.658 L868.448 682.658 L867.889 682.658 L867.33 682.658 L866.77 682.658 L866.211 682.658 L865.652 682.658 L865.093 682.658 L864.533 682.658 L863.974 682.658 L863.415 682.658 L862.856 682.658 L862.296 682.658 L861.737 682.658 L861.178 682.658 L860.619 682.658 L860.059 682.658 L859.5 682.658 L858.941 682.658 L858.382 682.658 L857.822 682.658 L857.263 682.658 L856.704 682.658 L856.145 682.658 L855.585 682.658 L855.026 682.658 L854.467 682.658 L853.908 682.658 L853.348 682.658 L852.789 682.658 L852.23 682.658 L851.671 682.658 L851.111 682.658 L850.552 682.658 L849.993 682.658 L849.434 682.658 L848.874 682.658 L848.315 682.658 L847.756 682.658 L847.197 682.658 L846.637 682.658 L846.078 682.658 L845.519 682.658 L844.96 682.658 L844.4 682.658 L843.841 682.658 L843.282 682.658 L842.723 682.658 L842.163 682.658 L841.604 682.658 L841.045 682.658 L840.486 682.658 L839.926 682.658 L839.367 682.658 L838.808 682.658 L838.249 682.658 L837.689 682.658 L837.13 682.658 L836.571 682.658 L836.012 682.658 L835.452 682.658 L834.893 682.658 L834.334 682.658 L833.775 682.658 L833.215 682.658 L832.656 682.658 L832.097 682.658 L831.538 682.658 L830.978 682.658 L830.419 682.658 L829.86 682.658 L829.301 682.658 L828.741 682.658 L828.182 682.658 L827.623 682.658 L827.064 682.658 L826.504 682.658 L825.945 682.658 L825.386 682.658 L824.827 682.658 L824.267 682.658 L823.708 682.658 L823.149 682.658 L822.59 682.658 L822.03 682.658 L821.471 682.658 L820.912 682.658 L820.353 682.658 L819.793 682.658 L819.234 682.658 L818.675 682.658 L818.116 682.658 L817.556 682.658 L816.997 682.658 L816.438 682.658 L815.879 682.658 L815.319 682.658 L814.76 682.658 L814.201 682.658 L813.642 682.658 L813.082 682.658 L812.523 682.658 L811.964 682.658 L811.405 682.658 L810.845 682.658 L810.286 682.658 L809.727 682.658 L809.168 682.658 L808.608 682.658 L808.049 682.658 L807.49 682.658 L806.931 682.658 L806.371 682.658 L805.812 682.658 L805.253 682.658 L804.693 682.658 L804.134 682.658 L803.575 682.658 L803.016 682.658 L802.456 682.658 L801.897 682.658 L801.338 682.658 L800.779 682.658 L800.219 682.658 L799.66 682.658 L799.101 682.658 L798.542 682.658 L797.982 682.658 L797.423 682.658 L796.864 682.658 L796.305 682.658 L795.745 682.658 L795.186 682.658 L794.627 682.658 L794.068 682.658 L793.508 682.658 L792.949 682.658 L792.39 682.658 L791.831 682.658 L791.271 682.658 L790.712 682.658 L790.153 682.658 L789.594 682.658 L789.034 682.658 L788.475 682.658 L787.916 682.658 L787.357 682.658 L786.797 682.658 L786.238 682.658 L785.679 682.658 L785.12 682.658 L784.56 682.658 L784.001 682.658 L783.442 682.658 L782.883 682.658 L782.323 682.658 L781.764 682.658 L781.205 682.658 L780.646 682.658 L780.086 682.658 L779.527 682.658 L778.968 682.658 L778.409 682.658 L777.849 682.658 L777.29 682.658 L776.731 682.658 L776.172 682.658 L775.612 682.658 L775.053 682.658 L774.494 682.658 L773.935 682.658 L773.375 682.658 L772.816 682.658 L772.257 682.658 L771.698 682.658 L771.138 682.658 L770.579 682.658 L770.02 682.658 L769.461 682.658 L768.901 682.658 L768.342 682.658 L767.783 682.658 L767.224 682.658 L766.664 682.658 L766.105 682.658 L765.546 682.658 L764.987 682.658 L764.427 682.658 L763.868 682.658 L763.309 682.658 L762.75 682.658 L762.19 682.658 L761.631 682.658 L761.072 682.658 L760.513 682.658 L759.953 682.658 L759.394 682.658 L758.835 682.658 L758.276 682.658 L757.716 682.658 L757.157 682.658 L756.598 682.658 L756.039 682.658 L755.479 682.658 L754.92 682.658 L754.361 682.658 L753.802 682.658 L753.242 682.658 L752.683 682.658 L752.124 682.658 L751.565 682.658 L751.005 682.658 L750.446 682.658 L749.887 682.658 L749.328 682.658 L748.768 682.658 L748.209 682.658 L747.65 682.658 L747.091 682.658 L746.531 682.658 L745.972 682.658 L745.413 682.658 L744.854 682.658 L744.294 682.658 L743.735 682.658 L743.176 682.658 L742.617 682.658 L742.057 682.658 L741.498 682.658 L740.939 682.658 L740.38 682.658 L739.82 682.658 L739.261 682.658 L738.702 682.658 L738.143 682.658 L737.583 682.658 L737.024 682.658 L736.465 682.658 L735.906 682.658 L735.346 682.658 L734.787 682.658 L734.228 682.658 L733.669 682.658 L733.109 682.658 L732.55 682.658 L731.991 682.658 L731.432 682.658 L730.872 682.658 L730.313 682.658 L729.754 682.658 L729.195 682.658 L728.635 682.658 L728.076 682.658 L727.517 682.658 L726.958 682.658 L726.398 682.658 L725.839 682.658 L725.28 682.658 L724.721 682.658 L724.161 682.658 L723.602 682.658 L723.043 682.658 L722.484 682.658 L721.924 682.658 L721.365 682.658 L720.806 682.658 L720.247 682.658  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip563)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.712 720.806,683.712 721.365,683.712 721.924,683.712 722.484,683.712 723.043,683.712 723.602,683.712 724.161,683.712 724.721,683.712 725.28,683.712 725.839,683.712 726.398,683.712 726.958,683.712 727.517,683.712 728.076,683.712 728.635,683.712 729.195,683.712 729.754,683.712 730.313,683.712 730.872,683.712 731.432,683.712 731.991,683.712 732.55,683.712 733.109,683.712 733.669,683.712 734.228,683.712 734.787,683.712 735.346,683.712 735.906,683.712 736.465,683.712 737.024,683.712 737.583,683.712 738.143,683.712 738.702,683.712 739.261,683.712 739.82,683.712 740.38,683.712 740.939,683.712 741.498,683.712 742.057,683.712 742.617,683.712 743.176,683.712 743.735,683.712 744.294,683.712 744.854,683.712 745.413,683.712 745.972,683.712 746.531,683.712 747.091,683.712 747.65,683.712 748.209,683.712 748.768,683.712 749.328,683.712 749.887,683.712 750.446,683.712 751.005,683.712 751.565,683.712 752.124,683.712 752.683,683.712 753.242,683.712 753.802,683.712 754.361,683.712 754.92,683.712 755.479,683.712 756.039,683.712 756.598,683.712 757.157,683.712 757.716,683.712 758.276,683.712 758.835,683.712 759.394,683.712 759.953,683.712 760.513,683.712 761.072,683.712 761.631,683.712 762.19,683.712 762.75,683.712 763.309,683.712 763.868,683.712 764.427,683.712 764.987,683.712 765.546,683.712 766.105,683.712 766.664,683.712 767.224,683.712 767.783,683.712 768.342,683.712 768.901,683.712 769.461,683.712 770.02,683.712 770.579,683.712 771.138,683.712 771.698,683.712 772.257,683.712 772.816,683.712 773.375,683.712 773.935,683.712 774.494,683.712 775.053,683.712 775.612,683.712 776.172,683.712 776.731,683.712 777.29,683.712 777.849,683.712 778.409,683.712 778.968,683.712 779.527,683.712 780.086,683.712 780.646,683.712 781.205,683.712 781.764,683.712 782.323,683.712 782.883,683.712 783.442,683.712 784.001,683.712 784.56,683.712 785.12,683.712 785.679,683.712 786.238,683.712 786.797,683.712 787.357,683.712 787.916,683.712 788.475,683.712 789.034,683.712 789.594,683.712 790.153,683.712 790.712,683.712 791.271,683.712 791.831,683.712 792.39,683.712 792.949,683.712 793.508,683.712 794.068,683.712 794.627,683.712 795.186,683.712 795.745,683.712 796.305,683.712 796.864,683.712 797.423,683.712 797.982,683.712 798.542,683.712 799.101,683.712 799.66,683.712 800.219,683.712 800.779,683.712 801.338,683.712 801.897,683.712 802.456,683.712 803.016,683.712 803.575,683.712 804.134,683.712 804.693,683.712 805.253,683.712 805.812,683.712 806.371,683.712 806.931,683.712 807.49,683.712 808.049,683.712 808.608,683.712 809.168,683.712 809.727,683.712 810.286,683.712 810.845,683.712 811.405,683.712 811.964,683.712 812.523,683.712 813.082,683.712 813.642,683.712 814.201,683.712 814.76,683.712 815.319,683.712 815.879,683.712 816.438,683.712 816.997,683.712 817.556,683.712 818.116,683.712 818.675,683.712 819.234,683.712 819.793,683.712 820.353,683.712 820.912,683.712 821.471,683.712 822.03,683.712 822.59,683.712 823.149,683.712 823.708,683.712 824.267,683.712 824.827,683.712 825.386,683.712 825.945,683.712 826.504,683.712 827.064,683.712 827.623,683.712 828.182,683.712 828.741,683.712 829.301,683.712 829.86,683.712 830.419,683.712 830.978,683.712 831.538,683.712 832.097,683.712 832.656,683.712 833.215,683.712 833.775,683.712 834.334,683.712 834.893,683.712 835.452,683.712 836.012,683.712 836.571,683.712 837.13,683.712 837.689,683.712 838.249,683.712 838.808,683.712 839.367,683.712 839.926,683.712 840.486,683.712 841.045,683.712 841.604,683.712 842.163,683.712 842.723,683.712 843.282,683.712 843.841,683.712 844.4,683.712 844.96,683.712 845.519,683.712 846.078,683.712 846.637,683.712 847.197,683.712 847.756,683.712 848.315,683.712 848.874,683.712 849.434,683.712 849.993,683.712 850.552,683.712 851.111,683.712 851.671,683.712 852.23,683.712 852.789,683.712 853.348,683.712 853.908,683.712 854.467,683.712 855.026,683.712 855.585,683.712 856.145,683.712 856.704,683.712 857.263,683.712 857.822,683.712 858.382,683.712 858.941,683.712 859.5,683.712 860.059,683.712 860.619,683.712 861.178,683.712 861.737,683.712 862.296,683.712 862.856,683.712 863.415,683.712 863.974,683.712 864.533,683.712 865.093,683.712 865.652,683.712 866.211,683.712 866.77,683.712 867.33,683.712 867.889,683.712 868.448,683.712 869.007,683.712 869.567,683.712 870.126,683.712 870.685,683.712 871.244,683.712 871.804,683.712 872.363,683.712 872.922,683.712 873.481,683.712 874.041,683.712 874.6,683.712 875.159,683.712 875.718,683.712 876.278,683.712 876.837,683.712 877.396,683.712 877.955,683.712 878.515,683.712 879.074,683.712 879.633,683.712 880.192,683.712 880.752,683.712 881.311,683.712 881.87,683.712 882.429,683.712 882.989,683.712 883.548,683.712 884.107,683.712 884.666,683.712 885.226,683.712 885.785,683.712 886.344,683.712 886.903,683.712 887.463,683.712 888.022,683.712 888.581,683.712 889.14,683.712 889.7,683.712 890.259,683.712 890.818,683.712 891.377,683.712 891.937,683.712 892.496,683.712 893.055,683.712 893.614,683.712 894.174,683.712 894.733,683.712 895.292,683.712 895.851,683.712 896.411,683.712 896.97,683.712 897.529,683.712 898.088,683.712 898.648,683.712 899.207,683.712 899.766,683.712 900.325,683.712 900.885,683.712 901.444,683.712 902.003,683.712 902.562,683.712 903.122,683.712 903.681,683.712 904.24,683.712 904.799,683.712 905.359,683.712 905.918,683.712 906.477,683.712 907.036,683.712 907.596,683.712 908.155,683.712 908.714,683.712 909.273,683.712 909.833,683.712 910.392,683.712 910.951,683.712 911.51,683.712 912.07,683.712 912.629,683.712 913.188,683.712 913.747,683.712 914.307,683.712 914.866,683.712 915.425,683.712 915.984,683.712 916.544,683.712 917.103,683.712 917.662,683.712 918.221,683.712 918.781,683.712 919.34,683.712 919.899,683.712 920.458,683.712 921.018,683.712 921.577,683.712 922.136,683.712 922.695,683.712 923.255,683.712 923.814,683.712 924.373,683.712 924.932,683.712 925.492,683.712 926.051,683.712 926.61,683.712 927.169,683.712 927.729,683.712 928.288,683.712 928.847,683.712 929.406,683.712 929.966,683.712 930.525,683.712 931.084,683.712 931.644,683.712 932.203,683.712 932.762,683.712 933.321,683.712 933.881,683.712 934.44,683.712 934.999,683.712 935.558,683.712 936.118,683.712 936.677,683.712 937.236,683.712 937.795,683.712 938.355,683.712 938.914,683.712 939.473,683.712 940.032,683.712 940.592,683.712 941.151,683.712 941.71,683.712 942.269,683.712 942.829,683.712 943.388,683.712 943.947,683.712 944.506,683.712 945.066,683.712 945.625,683.712 946.184,683.712 946.743,683.712 947.303,683.712 947.862,683.712 948.421,683.712 948.98,683.712 949.54,683.712 950.099,683.712 950.658,683.712 951.217,683.712 951.777,683.712 952.336,683.712 952.895,683.712 953.454,683.712 954.014,683.712 954.573,683.712 955.132,683.712 955.691,683.712 956.251,683.712 956.81,683.712 957.369,683.712 957.928,683.712 958.488,683.712 959.047,683.712 959.606,683.712 960.165,683.712 960.725,683.712 961.284,683.712 961.843,683.712 962.402,683.712 962.962,683.712 963.521,683.712 964.08,683.712 964.639,683.712 965.199,683.712 965.758,683.712 966.317,683.712 966.876,683.712 967.436,683.712 967.995,683.712 968.554,683.712 969.113,683.712 969.673,683.712 970.232,683.712 970.791,683.712 971.35,683.712 971.91,683.712 972.469,683.712 973.028,683.712 973.587,683.712 974.147,683.712 974.706,683.712 975.265,683.712 975.824,683.712 976.384,683.712 976.943,683.712 977.502,683.712 978.061,683.712 978.621,683.712 979.18,683.712 979.739,683.712 980.298,683.712 980.858,683.712 981.417,683.712 981.976,683.712 982.535,683.712 983.095,683.712 983.654,683.712 984.213,683.712 984.772,683.712 985.332,683.712 985.891,683.712 986.45,683.712 987.009,683.712 987.569,683.712 988.128,683.712 988.687,683.712 989.246,683.712 989.806,683.712 990.365,683.712 990.924,683.712 991.483,683.712 992.043,683.712 992.602,683.712 993.161,683.712 993.72,683.712 994.28,683.712 994.839,683.712 995.398,683.712 995.957,683.712 996.517,683.712 997.076,683.712 997.635,683.712 998.194,683.712 998.754,683.712 999.313,683.712 999.872,683.712 1000.43,683.712 1000.99,683.712 1001.55,683.712 1002.11,683.712 1002.67,683.712 1003.23,683.712 1003.79,683.712 1004.35,683.712 1004.91,683.712 1005.46,683.712 1006.02,683.712 1006.58,683.712 1007.14,683.712 1007.7,683.712 1008.26,683.712 1008.82,683.712 1009.38,683.712 1009.94,683.712 1010.5,683.712 1011.06,683.712 1011.62,683.712 1012.18,683.712 1012.73,683.712 1013.29,683.712 1013.85,683.712 1014.41,683.712 1014.97,683.712 1015.53,683.712 1016.09,683.712 1016.65,683.712 1017.21,683.712 1017.77,683.712 1018.33,683.712 1018.89,683.712 1019.45,683.712 1020.01,683.712 1020.56,683.712 1021.12,683.712 1021.68,683.712 1022.24,683.712 1022.8,683.712 1023.36,683.712 1023.92,683.712 1024.48,683.712 1025.04,683.712 1025.6,683.712 1026.16,683.712 1026.72,683.712 1027.28,683.712 1027.83,683.712 1028.39,683.712 1028.95,683.712 1029.51,683.712 1030.07,683.712 1030.63,683.712 1031.19,683.712 1031.75,683.712 1032.31,683.712 1032.87,683.712 1033.43,683.712 1033.99,683.712 1034.55,683.712 1035.1,683.712 1035.66,683.712 1036.22,683.712 1036.78,683.712 1037.34,683.712 1037.9,683.712 1038.46,683.712 1039.02,683.712 1039.58,683.712 1040.14,683.712 1040.7,683.712 1041.26,683.712 1041.82,683.712 1042.38,683.712 1042.93,683.712 1043.49,683.712 1044.05,683.712 1044.61,683.712 1045.17,683.712 1045.73,683.712 1046.29,683.712 1046.85,683.712 1047.41,683.712 1047.97,683.712 1048.53,683.712 1049.09,683.712 1049.65,683.712 1050.2,683.712 1050.76,683.712 1051.32,683.712 1051.88,683.712 1052.44,683.712 1053,683.712 1053.56,683.712 1054.12,683.712 1054.68,683.712 1055.24,683.712 1055.8,683.712 1056.36,683.712 1056.92,683.712 1057.48,683.712 1058.03,683.712 1058.59,683.712 1059.15,683.712 1059.71,683.712 1060.27,683.712 1060.83,683.712 1061.39,683.712 1061.95,683.712 1062.51,683.712 1063.07,683.712 1063.63,683.712 1064.19,683.712 1064.75,683.712 1065.3,683.712 1065.86,683.712 1066.42,683.712 1066.98,683.712 1067.54,683.712 1068.1,683.712 1068.66,683.712 1069.22,683.712 1069.78,683.712 1070.34,683.712 1070.9,683.712 1071.46,683.712 1072.02,683.712 1072.57,683.712 1073.13,683.712 1073.69,683.712 1074.25,683.712 1074.81,683.712 1075.37,683.712 1075.93,683.712 1076.49,683.712 1077.05,683.712 1077.61,683.712 1078.17,683.712 1078.73,683.712 1079.29,683.712 1079.85,683.712 1080.4,683.712 1080.96,683.712 1081.52,683.712 1082.08,683.712 1082.64,683.712 1083.2,683.712 1083.76,683.712 1084.32,683.712 1084.88,683.712 1085.44,683.712 1086,683.712 1086.56,683.712 1087.12,683.712 1087.67,683.712 1088.23,683.712 1088.79,683.712 1089.35,683.712 1089.91,683.712 1090.47,683.712 1091.03,683.712 1091.59,683.712 1092.15,683.712 1092.71,683.712 1093.27,683.712 1093.83,683.712 1094.39,683.712 1094.94,683.712 1095.5,683.712 1096.06,683.712 1096.62,683.712 1097.18,683.712 1097.74,683.712 1098.3,683.712 1098.86,683.712 1099.42,683.712 1099.98,683.712 1100.54,683.712 1101.1,683.712 1101.66,683.712 1102.22,683.712 1102.77,683.712 1103.33,683.712 1103.89,683.712 1104.45,683.712 1105.01,683.712 1105.57,683.712 1106.13,683.712 1106.69,683.712 1107.25,683.712 1107.81,683.712 1108.37,683.712 1108.93,683.712 1109.49,683.712 1110.04,683.712 1110.6,683.712 1111.16,683.712 1111.72,683.712 1112.28,683.712 1112.84,683.712 1113.4,683.712 1113.96,683.712 1114.52,683.712 1115.08,683.712 1115.64,683.712 1116.2,683.712 1116.76,683.712 1117.31,683.712 1117.87,683.712 1118.43,683.712 1118.99,683.712 1119.55,683.712 1120.11,683.712 1120.67,683.712 1121.23,683.712 1121.79,683.712 1122.35,683.712 1122.91,683.712 1123.47,683.712 1124.03,683.712 1124.59,683.712 1125.14,683.712 1125.7,683.712 1126.26,683.712 1126.82,683.712 1127.38,683.712 1127.94,683.712 1128.5,683.712 1129.06,683.712 1129.62,683.712 1130.18,683.712 1130.74,683.712 1131.3,683.712 1131.86,683.712 1132.41,683.712 1132.97,683.712 1133.53,683.712 1134.09,683.712 1134.65,683.712 1135.21,683.712 1135.77,683.712 1136.33,683.712 1136.89,683.712 1137.45,683.712 1138.01,683.712 1138.57,683.712 1139.13,683.712 1139.68,683.712 1140.24,683.712 1140.8,683.712 1141.36,683.712 1141.92,683.712 1142.48,683.712 1143.04,683.712 1143.6,683.712 1144.16,683.712 1144.72,683.712 1145.28,683.712 1145.84,683.712 1146.4,683.712 1146.96,683.712 1147.51,683.712 1148.07,683.712 1148.63,683.712 1149.19,683.712 1149.75,683.712 1150.31,683.712 1150.87,683.712 1151.43,683.712 1151.99,683.712 1152.55,683.712 1153.11,683.712 1153.67,683.712 1154.23,683.712 1154.78,683.712 1155.34,683.712 1155.9,683.712 1156.46,683.712 1157.02,683.712 1157.58,683.712 1158.14,683.712 1158.7,683.712 1159.26,683.712 1159.82,683.712 1160.38,683.712 1160.94,683.712 1161.5,683.712 1162.05,683.712 1162.61,683.712 1163.17,683.712 1163.73,683.712 1164.29,683.712 1164.85,683.712 1165.41,683.712 1165.97,683.712 1166.53,683.712 1167.09,683.712 1167.65,683.712 1168.21,683.712 1168.77,683.712 1169.33,683.712 1169.88,683.712 1170.44,683.712 1171,683.712 1171.56,683.712 1172.12,683.712 1172.68,683.712 1173.24,683.712 1173.8,683.712 1174.36,683.712 1174.92,683.712 1175.48,683.712 1176.04,683.712 1176.6,683.712 1177.15,683.712 1177.71,683.712 1178.27,683.712 1178.83,683.712 1179.39,683.712 1179.95,683.712 1180.51,683.712 1181.07,683.712 1181.63,683.712 1182.19,683.712 1182.75,683.712 1183.31,683.712 1183.87,683.712 1184.43,683.712 1184.98,683.712 1185.54,683.712 1186.1,683.712 1186.66,683.712 1187.22,683.712 1187.78,683.712 1188.34,683.712 1188.9,683.712 1189.46,683.712 1190.02,683.712 1190.58,683.712 1191.14,683.712 1191.7,683.712 1192.25,683.712 1192.81,683.712 1193.37,683.712 1193.93,683.712 1194.49,683.712 1195.05,683.712 1195.61,683.712 1196.17,683.712 1196.73,683.712 1197.29,683.712 1197.85,683.712 1198.41,683.712 1198.97,683.712 1199.52,683.712 1200.08,683.712 1200.64,683.712 1201.2,683.712 1201.76,683.712 1202.32,683.712 1202.88,683.712 1203.44,683.712 1204,683.712 1204.56,683.712 1205.12,683.712 1205.68,683.712 1206.24,683.712 1206.8,683.712 1207.35,683.712 1207.91,683.712 1208.47,683.712 1209.03,683.712 1209.59,683.712 1210.15,683.712 1210.71,683.712 1211.27,683.712 1211.83,683.712 1212.39,683.712 1212.95,683.712 1213.51,683.712 1214.07,683.712 1214.62,683.712 1215.18,683.712 1215.74,683.712 1216.3,683.712 1216.86,683.712 1217.42,683.712 1217.98,683.712 1218.54,683.712 1219.1,683.712 1219.66,683.712 1220.22,683.712 1220.78,683.712 1221.34,683.712 1221.89,683.712 1222.45,683.712 1223.01,683.712 1223.57,683.712 1224.13,683.712 1224.69,683.712 1225.25,683.712 1225.81,683.712 1226.37,683.712 1226.93,683.712 1227.49,683.712 1228.05,683.712 1228.61,683.712 1229.17,683.712 1229.72,683.712 1230.28,683.712 1230.84,683.712 1231.4,683.712 1231.96,683.712 1232.52,683.712 1233.08,683.712 1233.64,683.712 1234.2,683.712 1234.76,683.712 1235.32,683.712 1235.88,683.712 1236.44,683.712 1236.99,683.712 1237.55,683.712 1238.11,683.712 1238.67,683.712 1239.23,683.712 1239.79,683.712 1240.35,683.712 1240.91,683.712 1241.47,683.712 1242.03,683.712 1242.59,683.712 1243.15,683.712 1243.71,683.712 1244.26,683.712 1244.82,683.712 1245.38,683.712 1245.94,683.712 1246.5,683.712 1247.06,683.712 1247.62,683.712 1248.18,683.712 1248.74,683.712 1249.3,683.712 1249.86,683.712 1250.42,683.712 1250.98,683.712 1251.54,683.712 1252.09,683.712 1252.65,683.712 1253.21,683.712 1253.77,683.712 1254.33,683.712 1254.89,683.712 1255.45,683.712 1256.01,683.712 1256.57,683.712 1257.13,683.712 1257.69,683.712 1258.25,683.712 1258.81,683.712 1259.36,683.712 1259.92,683.712 1260.48,683.712 1261.04,683.712 1261.6,683.712 1262.16,683.712 1262.72,683.712 1263.28,683.712 1263.84,683.712 1264.4,683.712 1264.96,683.712 1265.52,683.712 1266.08,683.712 1266.63,683.712 1267.19,683.712 1267.75,683.712 1268.31,683.712 1268.87,683.712 1269.43,683.712 1269.99,683.712 1270.55,683.712 1271.11,683.712 1271.67,683.712 1272.23,683.712 1272.79,683.712 1273.35,683.712 1273.91,683.712 1274.46,683.712 1275.02,683.712 1275.58,683.712 1276.14,683.712 1276.7,683.712 1277.26,683.712 1277.82,683.712 1278.38,683.712 1278.94,683.712 1279.5,683.712 1280.06,683.712 1280.62,683.712 1281.18,683.712 1281.73,683.712 1282.29,683.712 1282.85,683.712 1283.41,683.712 1283.97,683.712 1284.53,683.712 1285.09,683.712 1285.65,683.712 1286.21,683.712 1286.77,683.712 1287.33,683.712 1287.89,683.712 1288.45,683.712 1289,683.712 1289.56,683.712 1290.12,683.712 1290.68,683.712 1291.24,683.712 1291.8,683.712 1292.36,683.712 1292.92,683.712 1293.48,683.712 1294.04,683.712 1294.6,683.712 1295.16,683.712 1295.72,683.712 1296.28,683.712 1296.83,683.712 1297.39,683.712 1297.95,683.712 1298.51,683.712 1299.07,683.712 1299.63,683.712 1300.19,683.712 1300.75,683.712 1301.31,683.712 1301.87,683.712 1302.43,683.712 1302.99,683.712 1303.55,683.712 1304.1,683.712 1304.66,683.712 1305.22,683.712 1305.78,683.712 1306.34,683.712 1306.9,683.712 1307.46,683.712 1308.02,683.712 1308.58,683.712 1309.14,683.712 1309.7,683.712 1310.26,683.712 1310.82,683.712 1311.38,683.712 1311.93,683.712 1312.49,683.712 1313.05,683.712 1313.61,683.712 1314.17,683.712 1314.73,683.712 1315.29,683.712 1315.85,683.712 1316.41,683.712 1316.97,683.712 1317.53,683.712 1318.09,683.712 1318.65,683.712 1319.2,683.712 1319.76,683.712 1320.32,683.712 1320.88,683.712 1321.44,683.712 1322,683.712 1322.56,683.712 1323.12,683.712 1323.68,683.712 1324.24,683.712 1324.8,683.712 1325.36,683.712 1325.92,683.712 1326.47,683.712 1327.03,683.712 1327.59,683.712 1328.15,683.712 1328.71,683.712 1329.27,683.712 1329.83,683.712 1330.39,683.712 1330.95,683.712 1331.51,683.712 1332.07,683.712 1332.63,683.712 1333.19,683.712 1333.75,683.712 1334.3,683.712 1334.86,683.712 1335.42,683.712 1335.98,683.712 1336.54,683.712 1337.1,683.712 1337.66,683.712 1338.22,683.712 1338.78,683.712 1339.34,683.712 1339.9,683.712 1340.46,683.712 1341.02,683.712 1341.57,683.712 1342.13,683.712 1342.69,683.712 1343.25,683.712 1343.81,683.712 1344.37,683.712 1344.93,683.712 1345.49,683.712 1346.05,683.712 1346.61,683.712 1347.17,683.712 1347.73,683.712 1348.29,683.712 1348.84,683.712 1349.4,683.712 1349.96,683.712 1350.52,683.712 1351.08,683.712 1351.64,683.712 1352.2,683.712 1352.76,683.712 1353.32,683.712 1353.88,683.712 1354.44,683.712 1355,683.712 1355.56,683.712 1356.12,683.712 1356.67,683.712 1357.23,683.712 1357.79,683.712 1358.35,683.712 1358.91,683.712 1359.47,683.712 1360.03,683.712 1360.59,683.712 1361.15,683.712 1361.71,683.712 1362.27,683.712 1362.83,683.712 1363.39,683.712 1363.94,683.712 1364.5,683.712 1365.06,683.712 1365.62,683.712 1366.18,683.712 1366.74,683.712 1367.3,683.712 1367.86,683.712 1368.42,683.712 1368.98,683.712 1369.54,683.712 1370.1,683.712 1370.66,683.712 1371.21,683.712 1371.77,683.712 1372.33,683.712 1372.89,683.712 1373.45,683.712 1374.01,683.712 1374.57,683.712 1375.13,683.712 1375.69,683.712 1376.25,683.712 1376.81,683.712 1377.37,683.712 1377.93,683.712 1378.49,683.712 1379.04,683.712 1379.6,683.712 1380.16,683.712 1380.72,683.712 1381.28,683.712 1381.84,683.712 1382.4,683.712 1382.96,683.712 1383.52,683.712 1384.08,683.712 1384.64,683.712 1385.2,683.712 1385.76,683.712 1386.31,683.712 1386.87,683.712 1387.43,683.712 1387.99,683.712 1388.55,683.712 1389.11,683.712 1389.67,683.712 1390.23,683.712 1390.79,683.712 1391.35,683.712 1391.91,683.712 1392.47,683.712 1393.03,683.712 1393.58,683.712 1394.14,683.712 1394.7,683.712 1395.26,683.712 1395.82,683.712 1396.38,683.712 1396.94,683.712 1397.5,683.712 1398.06,683.712 1398.62,683.712 1399.18,683.712 1399.74,683.712 1400.3,683.712 1400.86,683.712 1401.41,683.712 1401.97,683.712 1402.53,683.712 1403.09,683.712 1403.65,683.712 1404.21,683.712 1404.77,683.712 1405.33,683.712 1405.89,683.712 1406.45,683.712 1407.01,683.712 1407.57,683.712 1408.13,683.712 1408.68,683.712 1409.24,683.712 1409.8,683.712 1410.36,683.712 1410.92,683.712 1411.48,683.712 1412.04,683.712 1412.6,683.712 1413.16,683.712 1413.72,683.712 1414.28,683.712 1414.84,683.712 1415.4,683.712 1415.95,683.712 1416.51,683.712 1417.07,683.712 1417.63,683.712 1418.19,683.712 1418.75,683.712 1419.31,683.712 1419.87,683.712 1420.43,683.712 1420.99,683.712 1421.55,683.712 1422.11,683.712 1422.67,683.712 1423.23,683.712 1423.78,683.712 1424.34,683.712 1424.9,683.712 1425.46,683.712 1426.02,683.712 1426.58,683.712 1427.14,683.712 1427.7,683.712 1428.26,683.712 1428.82,683.712 1429.38,683.712 1429.94,683.712 1430.5,683.712 1431.05,683.712 1431.61,683.712 1432.17,683.712 1432.73,683.712 1433.29,683.712 1433.85,683.712 1434.41,683.712 1434.97,683.712 1435.53,683.712 1436.09,683.712 1436.65,683.712 1437.21,683.712 1437.77,683.712 1438.33,683.712 1438.88,683.712 1439.44,683.712 1440,683.712 1440.56,683.712 1441.12,683.712 1441.68,683.712 1442.24,683.712 1442.8,683.712 1443.36,683.712 1443.92,683.712 1444.48,683.712 1445.04,683.712 1445.6,683.712 1446.15,683.712 1446.71,683.712 1447.27,683.712 1447.83,683.712 1448.39,683.712 1448.95,683.712 1449.51,683.712 1450.07,683.712 1450.63,683.712 1451.19,683.712 1451.75,683.712 1452.31,683.712 1452.87,683.712 1453.42,683.712 1453.98,683.712 1454.54,683.712 1455.1,683.712 1455.66,683.712 1456.22,683.712 1456.78,683.712 1457.34,683.712 1457.9,683.712 1458.46,683.712 1459.02,683.712 1459.58,683.712 1460.14,683.712 1460.7,683.712 1461.25,683.712 1461.81,683.712 1462.37,683.712 1462.93,683.712 1463.49,683.712 1464.05,683.712 1464.61,683.712 1465.17,683.712 1465.73,683.712 1466.29,683.712 1466.85,683.712 1467.41,683.712 1467.97,683.712 1468.52,683.712 1469.08,683.712 1469.64,683.712 1470.2,683.712 1470.76,683.712 1471.32,683.712 1471.88,683.712 1472.44,683.712 1473,683.712 1473.56,683.712 1474.12,683.712 1474.68,683.712 1475.24,683.712 1475.79,683.712 1476.35,683.712 1476.91,683.712 1477.47,683.712 1478.03,683.712 1478.59,683.712 1479.15,683.712 1479.71,683.712 1480.27,683.712 1480.83,683.712 1481.39,683.712 1481.95,683.712 1482.51,683.712 1483.07,683.712 1483.62,683.712 1484.18,683.712 1484.74,683.712 1485.3,683.712 1485.86,683.712 1486.42,683.712 1486.98,683.712 1487.54,683.712 1488.1,683.712 1488.66,683.712 1489.22,683.712 1489.78,683.712 1490.34,683.712 1490.89,683.712 1491.45,683.712 1492.01,683.712 1492.57,683.712 1493.13,683.712 1493.69,683.712 1494.25,683.712 1494.81,683.712 1495.37,683.712 1495.93,683.712 1496.49,683.712 1497.05,683.712 1497.61,683.712 1498.16,683.712 1498.72,683.712 1499.28,683.712 1499.84,683.712 1500.4,683.712 1500.96,683.712 1501.52,683.712 1502.08,683.712 1502.64,683.712 1503.2,683.712 1503.76,683.712 1504.32,683.712 1504.88,683.712 1505.44,683.712 1505.99,683.712 1506.55,683.712 1507.11,683.712 1507.67,683.712 1508.23,683.712 1508.79,683.712 1509.35,683.712 1509.91,683.712 1510.47,683.712 1511.03,683.712 1511.59,683.712 1512.15,683.712 1512.71,683.712 1513.26,683.712 1513.82,683.712 1514.38,683.712 1514.94,683.712 1515.5,683.712 1516.06,683.712 1516.62,683.712 1517.18,683.712 1517.74,683.712 1518.3,683.712 1518.86,683.712 1519.42,683.712 1519.98,683.712 1520.53,683.712 1521.09,683.712 1521.65,683.712 1522.21,683.712 1522.77,683.712 1523.33,683.712 1523.89,683.712 1524.45,683.712 1525.01,683.712 1525.57,683.712 1526.13,683.712 1526.69,683.712 1527.25,683.712 1527.81,683.712 1528.36,683.712 1528.92,683.712 1529.48,683.712 1530.04,683.712 1530.6,683.712 1531.16,683.712 1531.72,683.712 1532.28,683.712 1532.84,683.712 1533.4,683.712 1533.96,683.712 1534.52,683.712 1535.08,683.712 1535.63,683.712 1536.19,683.712 1536.75,683.712 1537.31,683.712 1537.87,683.712 1538.43,683.712 1538.99,683.712 1539.55,683.712 1540.11,683.712 1540.67,683.712 1541.23,683.712 1541.79,683.712 1542.35,683.712 1542.9,683.712 1543.46,683.712 1544.02,683.712 1544.58,683.712 1545.14,683.712 1545.7,683.712 1546.26,683.712 1546.82,683.712 1547.38,683.712 1547.94,683.712 1548.5,683.712 1549.06,683.712 1549.62,683.712 1550.18,683.712 1550.73,683.712 1551.29,683.712 1551.85,683.712 1552.41,683.712 1552.97,683.712 1553.53,683.712 1554.09,683.712 1554.65,683.712 1555.21,683.712 1555.77,683.712 1556.33,683.712 1556.89,683.712 1557.45,683.712 1558,683.712 1558.56,683.712 1559.12,683.712 1559.68,683.712 1560.24,683.712 1560.8,683.712 1561.36,683.712 1561.92,683.712 1562.48,683.712 1563.04,683.712 1563.6,683.712 1564.16,683.712 1564.72,683.712 1565.28,683.712 1565.83,683.712 1566.39,683.712 1566.95,683.712 1567.51,683.712 1568.07,683.712 1568.63,683.712 1569.19,683.712 1569.75,683.712 1570.31,683.712 1570.87,683.712 1571.43,683.712 1571.99,683.712 1572.55,683.712 1573.1,683.712 1573.66,683.712 1574.22,683.712 1574.78,683.712 1575.34,683.712 1575.9,683.712 1576.46,683.712 1577.02,683.712 1577.58,683.712 1578.14,683.712 1578.7,683.712 1579.26,683.712 1579.82,683.712 1580.37,683.712 1580.93,683.712 1581.49,683.712 1582.05,683.712 1582.61,683.712 1583.17,683.712 1583.73,683.712 1584.29,683.712 1584.85,683.712 1585.41,683.712 1585.97,683.712 1586.53,683.712 1587.09,683.712 1587.65,683.712 1588.2,683.712 1588.76,683.712 1589.32,683.712 1589.88,683.712 1590.44,683.712 1591,683.712 1591.56,683.712 1592.12,683.712 1592.68,683.712 1593.24,683.712 1593.8,683.712 1594.36,683.712 1594.92,683.712 1595.47,683.712 1596.03,683.712 1596.59,683.712 1597.15,683.712 1597.71,683.712 1598.27,683.712 1598.83,683.712 1599.39,683.712 1599.95,683.712 1600.51,683.712 1601.07,683.712 1601.63,683.712 1602.19,683.712 1602.74,683.712 1603.3,683.712 1603.86,683.712 1604.42,683.712 1604.98,683.712 1605.54,683.712 1606.1,683.712 1606.66,683.712 1607.22,683.712 1607.78,683.712 1608.34,683.712 1608.9,683.712 1609.46,683.712 1610.02,683.712 1610.57,683.712 1611.13,683.712 1611.69,683.712 1612.25,683.712 1612.81,683.712 1613.37,683.712 1613.93,683.712 1614.49,683.712 1615.05,683.712 1615.61,683.712 1616.17,683.712 1616.73,683.712 1617.29,683.712 1617.84,683.712 1618.4,683.712 1618.96,683.712 1619.52,683.712 1620.08,683.712 1620.64,683.712 1621.2,683.712 1621.76,683.712 1622.32,683.712 1622.88,683.712 1623.44,683.712 1624,683.712 1624.56,683.712 1625.11,683.712 1625.67,683.712 1626.23,683.712 1626.79,683.712 1627.35,683.712 1627.91,683.712 1628.47,683.712 1629.03,683.712 1629.59,683.712 1630.15,683.712 1630.71,683.712 1631.27,683.712 1631.83,683.712 1632.39,683.712 1632.94,683.712 1633.5,683.712 1634.06,683.712 1634.62,683.712 1635.18,683.712 1635.74,683.712 1636.3,683.712 1636.86,683.712 1637.42,683.712 1637.98,683.712 1638.54,683.712 1639.1,683.712 1639.66,683.712 1640.21,683.712 1640.77,683.712 1641.33,683.712 1641.89,683.712 1642.45,683.712 1643.01,683.712 1643.57,683.712 1644.13,683.712 1644.69,683.712 1645.25,683.712 1645.81,683.712 1646.37,683.712 1646.93,683.712 1647.48,683.712 1648.04,683.712 1648.6,683.712 1649.16,683.712 1649.72,683.712 1650.28,683.712 1650.84,683.712 1651.4,683.712 1651.96,683.712 1652.52,683.712 1653.08,683.712 1653.64,683.712 1654.2,683.712 1654.76,683.712 1655.31,683.712 1655.87,683.712 1656.43,683.712 1656.99,683.712 1657.55,683.712 1658.11,683.712 1658.67,683.712 1659.23,683.712 1659.79,683.712 1660.35,683.712 1660.91,683.712 1661.47,683.712 1662.03,683.712 1662.58,683.712 1663.14,683.712 1663.7,683.712 1664.26,683.712 1664.82,683.712 1665.38,683.712 1665.94,683.712 1666.5,683.712 1667.06,683.712 1667.62,683.712 1668.18,683.712 1668.74,683.712 1669.3,683.712 1669.85,683.712 1670.41,683.712 1670.97,683.712 1671.53,683.712 1672.09,683.712 1672.65,683.712 1673.21,683.712 1673.77,683.712 1674.33,683.712 1674.89,683.712 1675.45,683.712 1676.01,683.712 1676.57,683.712 1677.13,683.712 1677.68,683.712 1678.24,683.712 1678.8,683.712 1679.36,683.712 1679.92,683.712 1680.48,683.712 1681.04,683.712 1681.6,683.712 1682.16,683.712 1682.72,683.712 1683.28,683.712 1683.84,683.712 1684.4,683.712 1684.95,683.712 1685.51,683.712 1686.07,683.712 1686.63,683.712 1687.19,683.712 1687.75,683.712 1688.31,683.712 1688.87,683.712 1689.43,683.712 1689.99,683.712 1690.55,683.712 1691.11,683.712 1691.67,683.712 1692.23,683.712 1692.78,683.712 1693.34,683.712 1693.9,683.712 1694.46,683.712 1695.02,683.712 1695.58,683.712 1696.14,683.712 1696.7,683.712 1697.26,683.712 1697.82,683.712 1698.38,683.712 1698.94,683.712 1699.5,683.712 1700.05,683.712 1700.61,683.712 1701.17,683.712 1701.73,683.712 1702.29,683.712 1702.85,683.712 1703.41,683.712 1703.97,683.712 1704.53,683.712 1705.09,683.712 1705.65,683.712 1706.21,683.712 1706.77,683.712 1707.32,683.712 1707.88,683.712 1708.44,683.712 1709,683.712 1709.56,683.712 1710.12,683.712 1710.68,683.712 1711.24,683.712 1711.8,683.712 1712.36,683.712 1712.92,683.712 1713.48,683.712 1714.04,683.712 1714.6,683.712 1715.15,683.712 1715.71,683.712 1716.27,683.712 1716.83,683.712 1717.39,683.712 1717.95,683.712 1718.51,683.712 1719.07,683.712 1719.63,683.712 1720.19,683.712 1720.75,683.712 1721.31,683.712 1721.87,683.712 1722.42,683.712 1722.98,683.712 1723.54,683.712 1724.1,683.712 1724.66,683.712 1725.22,683.712 1725.78,683.712 1726.34,683.712 1726.9,683.712 1727.46,683.712 1728.02,683.712 1728.58,683.712 1729.14,683.712 1729.69,683.712 1730.25,683.712 1730.81,683.712 1731.37,683.712 1731.93,683.712 1732.49,683.712 1733.05,683.712 1733.61,683.712 1734.17,683.712 1734.73,683.712 1735.29,683.712 1735.85,683.712 1736.41,683.712 1736.97,683.712 1737.52,683.712 1738.08,683.712 1738.64,683.712 1739.2,683.712 1739.76,683.712 1740.32,683.712 1740.88,683.712 1741.44,683.712 1742,683.712 1742.56,683.712 1743.12,683.712 1743.68,683.712 1744.24,683.712 1744.79,683.712 1745.35,683.712 1745.91,683.712 1746.47,683.712 1747.03,683.712 1747.59,683.712 1748.15,683.712 1748.71,683.712 1749.27,683.712 1749.83,683.712 1750.39,683.712 1750.95,683.712 1751.51,683.712 1752.06,683.712 1752.62,683.712 1753.18,683.712 1753.74,683.712 1754.3,683.712 1754.86,683.712 1755.42,683.712 1755.98,683.712 1756.54,683.712 1757.1,683.712 1757.66,683.712 1758.22,683.712 1758.78,683.712 1759.34,683.712 1759.89,683.712 1760.45,683.712 1761.01,683.712 1761.57,683.712 1762.13,683.712 1762.69,683.712 1763.25,683.712 1763.81,683.712 1764.37,683.712 1764.93,683.712 1765.49,683.712 1766.05,683.712 1766.61,683.712 1767.16,683.712 1767.72,683.712 1768.28,683.712 1768.84,683.712 1769.4,683.712 1769.96,683.712 1770.52,683.712 1771.08,683.712 1771.64,683.712 1772.2,683.712 1772.76,683.712 1773.32,683.712 1773.88,683.712 1774.43,683.712 1774.99,683.712 1775.55,683.712 1776.11,683.712 1776.67,683.712 1777.23,683.712 1777.79,683.712 1778.35,683.712 1778.91,683.712 1779.47,683.712 1780.03,683.712 1780.59,683.712 1781.15,683.712 1781.71,683.712 1782.26,683.712 1782.82,683.712 1783.38,683.712 1783.94,683.712 1784.5,683.712 1785.06,683.712 1785.62,683.712 1786.18,683.712 1786.74,683.712 1787.3,683.712 1787.86,683.712 1788.42,683.712 1788.98,683.712 1789.53,683.712 1790.09,683.712 1790.65,683.712 1791.21,683.712 1791.77,683.712 1792.33,683.712 1792.89,683.712 1793.45,683.712 1794.01,683.712 1794.57,683.712 1795.13,683.712 1795.69,683.712 1796.25,683.712 1796.8,683.712 1797.36,683.712 1797.92,683.712 1798.48,683.712 1799.04,683.712 1799.6,683.712 1800.16,683.712 1800.72,683.712 1801.28,683.712 1801.84,683.712 1802.4,683.712 1802.96,683.712 1803.52,683.712 1804.08,683.712 1804.63,683.712 1805.19,683.712 1805.75,683.712 1806.31,683.712 1806.87,683.712 1807.43,683.712 1807.99,683.712 1808.55,683.712 1809.11,683.712 1809.67,683.712 1810.23,683.712 1810.79,683.712 1811.35,683.712 1811.9,683.712 1812.46,683.712 1813.02,683.712 1813.58,683.712 1814.14,683.712 1814.7,683.712 1815.26,683.712 1815.82,683.712 1816.38,683.712 1816.94,683.712 1817.5,683.712 1818.06,683.712 1818.62,683.712 1819.18,683.712 1819.73,683.712 1820.29,683.712 1820.85,683.712 1821.41,683.712 1821.97,683.712 1822.53,683.712 1823.09,683.712 1823.65,683.712 1824.21,683.712 1824.77,683.712 1825.33,683.712 1825.89,683.712 1826.45,683.712 1827,683.712 1827.56,683.712 1828.12,683.712 1828.68,683.712 1829.24,683.712 1829.8,683.712 1830.36,683.712 1830.92,683.712 1831.48,683.712 1832.04,683.712 1832.6,683.712 1833.16,683.712 1833.72,683.712 1834.27,683.712 1834.83,683.712 1835.39,683.712 1835.95,683.712 1836.51,683.712 1837.07,683.712 1837.63,683.712 1838.19,683.712 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.027319106165312 ± 0.020302235495898338\nProjected Energy: -4.015723761000712 ± (0.005253514950938509, 0.005305092786536569)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=df.dτ[end],\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.463119</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5158e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.5188e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.588e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.272e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.015e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.896e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition : applied boundray condition \n\nBoundary conditions\n\nFor π-twisted -> :twisted\nFor hard wall -> :hard_wall\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{HARDWALL}, Tuple{PITWISTED}, Tuple{SingleComponentFockAddress, Any, Val{PITWISTED}, Val{HARDWALL}}} where {PITWISTED, HARDWALL}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen, Val(pitwisted), Val(hard-wall))\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic, pi-twisted and hard-wall.\nShow pi-twisted when pitwested=true and hard-wall=false and vice-versa for hard-wall else periodic\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, Val(true),Val(false))\n(BoseFS{2,4}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, Val(false),Val(true))\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
