var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21247018325691455 ± 0.0022396194657310687\n   G2(1) = 0.9165902933428013 ± 0.0008071314946313222\n   G2(2) = 0.9826722656329522 ± 0.0006507514127179503\n   G2(3) = 0.9890046987915777 ± 0.001205311215551462\n   G2(4) = 0.9826722656329522 ± 0.0006507514127179503\n   G2(5) = 0.9165902933428013 ± 0.0008071314946313222\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.948562635686802 ± 0.13223218373699044\n   Replica 2: -4.024910374298621 ± 0.13359596290961587\n   Replica 3: -4.049262128832799 ± 0.13356606873994264\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip730\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip730)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip731\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip730)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip732\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.88 2211.02,1261.88 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.81 2211.02,1003.81 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.746 2211.02,745.746 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.678 2211.02,487.678 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.609 2211.02,229.609 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.88 423.181,1261.88 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.81 423.181,1003.81 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.746 423.181,745.746 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.678 423.181,487.678 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.609 423.181,229.609 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M356.339 1247.68 Q352.728 1247.68 350.899 1251.25 Q349.094 1254.79 349.094 1261.92 Q349.094 1269.02 350.899 1272.59 Q352.728 1276.13 356.339 1276.13 Q359.973 1276.13 361.779 1272.59 Q363.608 1269.02 363.608 1261.92 Q363.608 1254.79 361.779 1251.25 Q359.973 1247.68 356.339 1247.68 M356.339 1243.98 Q362.149 1243.98 365.205 1248.59 Q368.284 1253.17 368.284 1261.92 Q368.284 1270.65 365.205 1275.25 Q362.149 1279.83 356.339 1279.83 Q350.529 1279.83 347.45 1275.25 Q344.395 1270.65 344.395 1261.92 Q344.395 1253.17 347.45 1248.59 Q350.529 1243.98 356.339 1243.98 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M290.043 1017.16 L306.363 1017.16 L306.363 1021.09 L284.418 1021.09 L284.418 1017.16 Q287.08 1014.41 291.664 1009.78 Q296.27 1005.12 297.451 1003.78 Q299.696 1001.26 300.576 999.521 Q301.478 997.762 301.478 996.072 Q301.478 993.317 299.534 991.581 Q297.613 989.845 294.511 989.845 Q292.312 989.845 289.858 990.609 Q287.427 991.373 284.65 992.924 L284.65 988.202 Q287.474 987.067 289.927 986.489 Q292.381 985.91 294.418 985.91 Q299.789 985.91 302.983 988.595 Q306.177 991.28 306.177 995.771 Q306.177 997.901 305.367 999.822 Q304.58 1001.72 302.474 1004.31 Q301.895 1004.98 298.793 1008.2 Q295.691 1011.4 290.043 1017.16 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M316.224 986.535 L334.58 986.535 L334.58 990.47 L320.506 990.47 L320.506 998.942 Q321.524 998.595 322.543 998.433 Q323.562 998.248 324.58 998.248 Q330.367 998.248 333.747 1001.42 Q337.126 1004.59 337.126 1010.01 Q337.126 1015.59 333.654 1018.69 Q330.182 1021.77 323.862 1021.77 Q321.687 1021.77 319.418 1021.4 Q317.173 1021.03 314.765 1020.28 L314.765 1015.59 Q316.849 1016.72 319.071 1017.28 Q321.293 1017.83 323.77 1017.83 Q327.774 1017.83 330.112 1015.72 Q332.45 1013.62 332.45 1010.01 Q332.45 1006.4 330.112 1004.29 Q327.774 1002.18 323.77 1002.18 Q321.895 1002.18 320.02 1002.6 Q318.168 1003.02 316.224 1003.9 L316.224 986.535 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M356.339 989.614 Q352.728 989.614 350.899 993.178 Q349.094 996.72 349.094 1003.85 Q349.094 1010.96 350.899 1014.52 Q352.728 1018.06 356.339 1018.06 Q359.973 1018.06 361.779 1014.52 Q363.608 1010.96 363.608 1003.85 Q363.608 996.72 361.779 993.178 Q359.973 989.614 356.339 989.614 M356.339 985.91 Q362.149 985.91 365.205 990.516 Q368.284 995.1 368.284 1003.85 Q368.284 1012.58 365.205 1017.18 Q362.149 1021.77 356.339 1021.77 Q350.529 1021.77 347.45 1017.18 Q344.395 1012.58 344.395 1003.85 Q344.395 995.1 347.45 990.516 Q350.529 985.91 356.339 985.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M286.062 728.466 L304.418 728.466 L304.418 732.401 L290.344 732.401 L290.344 740.874 Q291.363 740.526 292.381 740.364 Q293.4 740.179 294.418 740.179 Q300.205 740.179 303.585 743.35 Q306.964 746.522 306.964 751.938 Q306.964 757.517 303.492 760.619 Q300.02 763.698 293.701 763.698 Q291.525 763.698 289.256 763.327 Q287.011 762.957 284.603 762.216 L284.603 757.517 Q286.687 758.651 288.909 759.207 Q291.131 759.762 293.608 759.762 Q297.613 759.762 299.951 757.656 Q302.288 755.549 302.288 751.938 Q302.288 748.327 299.951 746.221 Q297.613 744.114 293.608 744.114 Q291.733 744.114 289.858 744.531 Q288.006 744.948 286.062 745.827 L286.062 728.466 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M326.177 731.545 Q322.566 731.545 320.737 735.11 Q318.932 738.651 318.932 745.781 Q318.932 752.887 320.737 756.452 Q322.566 759.994 326.177 759.994 Q329.811 759.994 331.617 756.452 Q333.446 752.887 333.446 745.781 Q333.446 738.651 331.617 735.11 Q329.811 731.545 326.177 731.545 M326.177 727.841 Q331.987 727.841 335.043 732.448 Q338.122 737.031 338.122 745.781 Q338.122 754.508 335.043 759.114 Q331.987 763.698 326.177 763.698 Q320.367 763.698 317.288 759.114 Q314.233 754.508 314.233 745.781 Q314.233 737.031 317.288 732.448 Q320.367 727.841 326.177 727.841 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M356.339 731.545 Q352.728 731.545 350.899 735.11 Q349.094 738.651 349.094 745.781 Q349.094 752.887 350.899 756.452 Q352.728 759.994 356.339 759.994 Q359.973 759.994 361.779 756.452 Q363.608 752.887 363.608 745.781 Q363.608 738.651 361.779 735.11 Q359.973 731.545 356.339 731.545 M356.339 727.841 Q362.149 727.841 365.205 732.448 Q368.284 737.031 368.284 745.781 Q368.284 754.508 365.205 759.114 Q362.149 763.698 356.339 763.698 Q350.529 763.698 347.45 759.114 Q344.395 754.508 344.395 745.781 Q344.395 737.031 347.45 732.448 Q350.529 727.841 356.339 727.841 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M284.835 470.398 L307.057 470.398 L307.057 472.388 L294.511 504.958 L289.627 504.958 L301.432 474.333 L284.835 474.333 L284.835 470.398 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M316.224 470.398 L334.58 470.398 L334.58 474.333 L320.506 474.333 L320.506 482.805 Q321.524 482.458 322.543 482.296 Q323.562 482.11 324.58 482.11 Q330.367 482.11 333.747 485.282 Q337.126 488.453 337.126 493.87 Q337.126 499.448 333.654 502.55 Q330.182 505.629 323.862 505.629 Q321.687 505.629 319.418 505.258 Q317.173 504.888 314.765 504.147 L314.765 499.448 Q316.849 500.583 319.071 501.138 Q321.293 501.694 323.77 501.694 Q327.774 501.694 330.112 499.587 Q332.45 497.481 332.45 493.87 Q332.45 490.259 330.112 488.152 Q327.774 486.046 323.77 486.046 Q321.895 486.046 320.02 486.462 Q318.168 486.879 316.224 487.759 L316.224 470.398 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M356.339 473.476 Q352.728 473.476 350.899 477.041 Q349.094 480.583 349.094 487.712 Q349.094 494.819 350.899 498.384 Q352.728 501.925 356.339 501.925 Q359.973 501.925 361.779 498.384 Q363.608 494.819 363.608 487.712 Q363.608 480.583 361.779 477.041 Q359.973 473.476 356.339 473.476 M356.339 469.773 Q362.149 469.773 365.205 474.379 Q368.284 478.962 368.284 487.712 Q368.284 496.439 365.205 501.046 Q362.149 505.629 356.339 505.629 Q350.529 505.629 347.45 501.046 Q344.395 496.439 344.395 487.712 Q344.395 478.962 347.45 474.379 Q350.529 469.773 356.339 469.773 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M256.664 242.954 L264.303 242.954 L264.303 216.588 L255.992 218.255 L255.992 213.996 L264.256 212.329 L268.932 212.329 L268.932 242.954 L276.571 242.954 L276.571 246.889 L256.664 246.889 L256.664 242.954 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M296.015 215.408 Q292.404 215.408 290.576 218.972 Q288.77 222.514 288.77 229.644 Q288.77 236.75 290.576 240.315 Q292.404 243.856 296.015 243.856 Q299.65 243.856 301.455 240.315 Q303.284 236.75 303.284 229.644 Q303.284 222.514 301.455 218.972 Q299.65 215.408 296.015 215.408 M296.015 211.704 Q301.826 211.704 304.881 216.31 Q307.96 220.894 307.96 229.644 Q307.96 238.37 304.881 242.977 Q301.826 247.56 296.015 247.56 Q290.205 247.56 287.127 242.977 Q284.071 238.37 284.071 229.644 Q284.071 220.894 287.127 216.31 Q290.205 211.704 296.015 211.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M326.177 215.408 Q322.566 215.408 320.737 218.972 Q318.932 222.514 318.932 229.644 Q318.932 236.75 320.737 240.315 Q322.566 243.856 326.177 243.856 Q329.811 243.856 331.617 240.315 Q333.446 236.75 333.446 229.644 Q333.446 222.514 331.617 218.972 Q329.811 215.408 326.177 215.408 M326.177 211.704 Q331.987 211.704 335.043 216.31 Q338.122 220.894 338.122 229.644 Q338.122 238.37 335.043 242.977 Q331.987 247.56 326.177 247.56 Q320.367 247.56 317.288 242.977 Q314.233 238.37 314.233 229.644 Q314.233 220.894 317.288 216.31 Q320.367 211.704 326.177 211.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M356.339 215.408 Q352.728 215.408 350.899 218.972 Q349.094 222.514 349.094 229.644 Q349.094 236.75 350.899 240.315 Q352.728 243.856 356.339 243.856 Q359.973 243.856 361.779 240.315 Q363.608 236.75 363.608 229.644 Q363.608 222.514 361.779 218.972 Q359.973 215.408 356.339 215.408 M356.339 211.704 Q362.149 211.704 365.205 216.31 Q368.284 220.894 368.284 229.644 Q368.284 238.37 365.205 242.977 Q362.149 247.56 356.339 247.56 Q350.529 247.56 347.45 242.977 Q344.395 238.37 344.395 229.644 Q344.395 220.894 347.45 216.31 Q350.529 211.704 356.339 211.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip732)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.609 4017.76,229.609 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.52 456.554,1250.41 457.123,1250.27 457.691,1250.05 458.259,1249.72 458.828,1249.35 459.396,1248.92 459.964,1248.39 460.533,1247.8 461.101,1247.14 461.669,1244.32 462.238,1243.53 462.806,1242.67 463.375,1241.72 463.943,1240.67 464.511,1239.53 465.08,1237.22 465.648,1235.86 466.216,1234.37 466.785,1231.73 467.353,1230.06 467.921,1228.23 468.49,1226.29 469.058,1224.2 469.626,1220.9 470.195,1217.45 470.763,1214.88 471.331,1212.07 471.9,1209.13 472.468,1206.01 473.036,1201.65 473.605,1198.1 474.173,1194.38 474.741,1190.44 475.31,1186.31 475.878,1179.91 476.446,1175.34 477.015,1169.56 477.583,1164.53 478.152,1159.25 478.72,1152.68 479.288,1145.94 479.857,1138.96 480.425,1132.81 480.993,1125.38 481.562,1118.78 482.13,1110.94 482.698,1099.82 483.267,1091.62 483.835,1082.14 484.403,1073.68 484.972,1063.99 485.54,1055.12 486.108,1044.15 486.677,1035.14 487.245,1026.99 487.813,1018.78 488.382,1007.19 488.95,998.664 489.518,987.975 490.087,978.23 490.655,967.369 491.224,957.416 491.792,948.318 492.36,937.009 492.929,922.525 493.497,910.287 494.065,901.191 494.634,890.894 495.202,879.525 495.77,869.096 496.339,859.738 496.907,849.538 497.475,840.358 498.044,829.943 498.612,819.755 499.18,808.41 499.749,797.105 500.317,787.949 500.885,773.669 501.454,764.876 502.022,754.843 502.59,746.131 503.159,735.231 503.727,726.347 504.295,715.563 504.864,706.052 505.432,697.556 506.001,686.921 506.569,676.388 507.137,667.194 507.706,656.962 508.274,647.042 508.842,638.262 509.411,629.562 509.979,619.013 510.547,609.75 511.116,600.432 511.684,592.346 512.252,582.28 512.821,574.516 513.389,567.754 513.957,561.393 514.526,555.052 515.094,546.543 515.662,540.21 516.231,534.065 516.799,526.765 517.367,518.833 517.936,511.797 518.504,505.163 519.072,497.49 519.641,490.993 520.209,482.551 520.778,476.607 521.346,471.798 521.914,464.835 522.483,458.081 523.051,454.613 523.619,449.135 524.188,443.749 524.756,435.357 525.324,431.534 525.893,427.795 526.461,418.707 527.029,415.181 527.598,410.933 528.166,405.522 528.734,400.309 529.303,397.252 529.871,393.975 530.439,389.874 531.008,384.136 531.576,380.338 532.144,376.655 532.713,374.159 533.281,370.58 533.85,369.079 534.418,366.525 534.986,360.773 535.555,358.582 536.123,355.958 536.691,354.465 537.26,351.205 537.828,349.11 538.396,344.707 538.965,342.672 539.533,338.507 540.101,336.509 540.67,333.49 541.238,333.492 541.806,329.424 542.375,327.713 542.943,325.928 543.511,320.153 544.08,315.399 544.648,311.916 545.216,309.646 545.785,311.736 546.353,310.542 546.921,309.21 547.49,306.99 548.058,304.757 548.627,301.557 549.195,300.601 549.763,297.693 550.332,296.922 550.9,296.053 551.468,293.034 552.037,292.276 552.605,290.484 553.173,288.553 553.742,286.643 554.31,283.001 554.878,280.397 555.447,281.15 556.015,279.572 556.583,279.202 557.152,279.778 557.72,279.122 558.288,277.283 558.857,276.824 559.425,276.699 559.993,275.13 560.562,274.818 561.13,275.312 561.698,271.805 562.267,268.402 562.835,269.141 563.404,267.836 563.972,269.787 564.54,268.327 565.109,264.945 565.677,265.807 566.245,265.732 566.814,267.659 567.382,268.039 567.95,267.365 568.519,267.726 569.087,267.236 569.655,266.58 570.224,263.784 570.792,263.506 571.36,261.909 571.929,262.709 572.497,263.2 573.065,264.802 573.634,264.371 574.202,261.573 574.77,258.904 575.339,256.425 575.907,257.238 576.476,256.853 577.044,256.715 577.612,255.339 578.181,255.086 578.749,252.554 579.317,251.554 579.886,249.661 580.454,249.838 581.022,250.004 581.591,250.103 582.159,247.17 582.727,247.49 583.296,249.59 583.864,249.397 584.432,250.475 585.001,251.44 585.569,251.377 586.137,250.421 586.706,247.309 587.274,246.521 587.842,244.394 588.411,244.564 588.979,244.704 589.547,241.89 590.116,240.557 590.684,244.112 591.253,243.099 591.821,243.508 592.389,243.806 592.958,242.135 593.526,242.505 594.094,242.612 594.663,240.905 595.231,241.37 595.799,241.599 596.368,241.962 596.936,242.28 597.504,242.595 598.073,242.692 598.641,242.815 599.209,242.217 599.778,242.46 600.346,242.55 600.914,241.769 601.483,242.843 602.051,239.655 602.619,238.127 603.188,235.598 603.756,237.288 604.325,235.593 604.893,235.175 605.461,235.65 606.03,235.223 606.598,236.894 607.166,238.489 607.735,239.899 608.303,242.242 608.871,240.304 609.44,240.516 610.008,239.691 610.576,239.984 611.145,242.072 611.713,241.204 612.281,242.42 612.85,245.593 613.418,243.532 613.986,242.47 614.555,240.186 615.123,239.188 615.691,241.531 616.26,241.554 616.828,242.481 617.396,242.269 617.965,242.333 618.533,242.357 619.102,242.554 619.67,243.713 620.238,242.487 620.807,242.482 621.375,241.284 621.943,242.493 622.512,240.327 623.08,240.266 623.648,241.171 624.217,243.311 624.785,243.068 625.353,242.694 625.922,242.712 626.49,243.373 627.058,242.057 627.627,241.799 628.195,239.537 628.763,240.426 629.332,242.362 629.9,242.127 630.468,241.828 631.037,241.533 631.605,241.336 632.173,240.058 632.742,239.993 633.31,240.217 633.879,240.038 634.447,237.57 635.015,236.477 635.584,236.577 636.152,238.839 636.72,239.904 637.289,238.668 637.857,238.603 638.425,241.578 638.994,239.1 639.562,236.037 640.13,235.01 640.699,232.109 641.267,231.425 641.835,230.711 642.404,232.125 642.972,231.487 643.54,233.912 644.109,235.288 644.677,234.532 645.245,233.534 645.814,231.713 646.382,234.11 646.951,234.314 647.519,234.351 648.087,233.497 648.656,234.666 649.224,233.826 649.792,234.056 650.361,235.069 650.929,232.165 651.497,231.35 652.066,232.758 652.634,232.141 653.202,232.647 653.771,234.999 654.339,236.286 654.907,237.22 655.476,237.234 656.044,237.272 656.612,238.228 657.181,238.101 657.749,236.813 658.317,237.851 658.886,237.634 659.454,237.497 660.022,239.397 660.591,239.28 661.159,239.027 661.728,239.666 662.296,239.518 662.864,239.083 663.433,238.77 664.001,239.557 664.569,239.915 665.138,237.242 665.706,237.143 666.274,234.811 666.843,235.735 667.411,234.48 667.979,234.652 668.548,234.666 669.116,234.418 669.684,234.575 670.253,232.411 670.821,231.32 671.389,232.537 671.958,232.73 672.526,232.859 673.094,233.013 673.663,233.123 674.231,231.888 674.799,232.006 675.368,233.066 675.936,236.242 676.505,234.996 677.073,235.902 677.641,235.728 678.21,234.612 678.778,233.593 679.346,235.443 679.915,235.168 680.483,233.8 681.051,232.598 681.62,231.721 682.188,233.047 682.756,233.116 683.325,233.283 683.893,233.323 684.461,232.232 685.03,232.134 685.598,230.252 686.166,231.662 686.735,231.537 687.303,231.618 687.871,232.886 688.44,233.031 689.008,231.245 689.577,231.44 690.145,231.539 690.713,230.555 691.282,229.837 691.85,227.942 692.418,226.219 692.987,225.865 693.555,227.346 694.123,226.537 694.692,226.953 695.26,226.33 695.828,225.8 696.397,224.17 696.965,225.919 697.533,226.644 698.102,228.351 698.67,228.873 699.238,229.373 699.807,228.643 700.375,229.947 700.943,230.325 701.512,228.577 702.08,229.1 702.648,230.569 703.217,230.669 703.785,230.685 704.354,233.113 704.922,234.35 705.49,236.203 706.059,235.082 706.627,235.173 707.195,234.165 707.764,233.818 708.332,232.704 708.9,233.702 709.469,234.567 710.037,232.259 710.605,231.396 711.174,230.484 711.742,230.672 712.31,231.062 712.879,232.325 713.447,232.469 714.015,232.587 714.584,233.763 715.152,233.612 715.72,236.781 716.289,236.68 716.857,235.416 717.425,235.454 717.994,236.143 718.562,236 719.131,236.912 719.699,236.658 720.267,236.387 720.836,237.134 721.404,235.928 721.972,235.57 722.541,234.382 723.109,234.24 723.677,235.208 724.246,234.849 724.814,233.472 725.382,231.211 725.951,229.194 726.519,228.431 727.087,228.763 727.656,227.901 728.224,227.065 728.792,224.251 729.361,224.919 729.929,226.399 730.497,224.678 731.066,223.274 731.634,223.894 732.203,224.179 732.771,225.022 733.339,226.767 733.908,227.26 734.476,227.584 735.044,227.994 735.613,229.45 736.181,230.757 736.749,230.046 737.318,230.172 737.886,229.292 738.454,229.733 739.023,229.154 739.591,229.502 740.159,233.77 740.728,233.714 741.296,232.761 741.864,234.052 742.433,234.232 743.001,234.061 743.569,234.037 744.138,233.131 744.706,234.138 745.274,234.048 745.843,233.905 746.411,234.655 746.98,234.444 747.548,235.414 748.116,233.107 748.685,232.288 749.253,231.027 749.821,230.204 750.39,230.199 750.958,230.522 751.526,232.685 752.095,231.726 752.663,232.967 753.231,233.842 753.8,231.559 754.368,231.723 754.936,233.837 755.505,230.723 756.073,230.929 756.641,229.968 757.21,229.188 757.778,229.343 758.346,227.595 758.915,228.105 759.483,226.482 760.052,226.853 760.62,226.014 761.188,228.506 761.757,228.853 762.325,228.163 762.893,229.452 763.462,229.54 764.03,230.738 764.598,231.033 765.167,230.389 765.735,230.696 766.303,231.994 766.872,229.106 767.44,230.617 768.008,230.852 768.577,232.118 769.145,232.327 769.713,233.46 770.282,232.298 770.85,235.444 771.418,236.243 771.987,239.107 772.555,238.676 773.123,239.075 773.692,237.435 774.26,234.838 774.829,235.455 775.397,235.193 775.965,234.946 776.534,231.594 777.102,231.483 777.67,231.184 778.239,230.236 778.807,228.388 779.375,228.565 779.944,227.84 780.512,228.123 781.08,228.401 781.649,229.723 782.217,228.918 782.785,229.546 783.354,230.842 783.922,228.782 784.49,226.958 785.059,226.98 785.627,227.342 786.195,226.705 786.764,227.068 787.332,226.236 787.9,227.954 788.469,228.237 789.037,227.456 789.606,228.816 790.174,231.106 790.742,230.185 791.311,229.438 791.879,229.437 792.447,229.779 793.016,230.835 793.584,229.969 794.152,231.318 794.721,231.363 795.289,229.417 795.857,229.634 796.426,230.79 796.994,232.197 797.562,232.233 798.131,232.386 798.699,233.244 799.267,235.337 799.836,234.112 800.404,233.113 800.972,233.19 801.541,233.144 802.109,232.111 802.678,233.072 803.246,231.751 803.814,230.735 804.383,230.657 804.951,230.822 805.519,230.88 806.088,230.786 806.656,228.771 807.224,227.783 807.793,228.216 808.361,229.43 808.929,232.798 809.498,232.611 810.066,233.362 810.634,232.189 811.203,231.311 811.771,232.298 812.339,234.424 812.908,235.411 813.476,236.051 814.044,236.598 814.613,237.249 815.181,239.729 815.749,241.314 816.318,240.556 816.886,239.906 817.455,240.454 818.023,239.821 818.591,237.266 819.16,235.765 819.728,234.319 820.296,232.14 820.865,229.815 821.433,229.714 822.001,227.613 822.57,226.653 823.138,225.796 823.706,222.944 824.275,223.425 824.843,226.042 825.411,226.435 825.98,226.65 826.548,228.925 827.116,229.107 827.685,229.175 828.253,228.121 828.821,229.463 829.39,231.655 829.958,230.724 830.526,229.832 831.095,228.99 831.663,228.131 832.232,228.341 832.8,226.322 833.368,225.616 833.937,226.767 834.505,228.253 835.073,229.342 835.642,228.436 836.21,227.552 836.778,227.726 837.347,227.997 837.915,228.256 838.483,228.209 839.052,228.45 839.62,227.539 840.188,226.764 840.757,229.218 841.325,229.579 841.893,226.811 842.462,228.106 843.03,231.455 843.598,230.367 844.167,231.377 844.735,230.279 845.304,229.223 845.872,229.242 846.44,232.351 847.009,232.465 847.577,231.485 848.145,231.621 848.714,229.476 849.282,228.538 849.85,229.786 850.419,226.805 850.987,229.354 851.555,230.516 852.124,230.686 852.692,229.683 853.26,228.869 853.829,230.942 854.397,229.944 854.965,229.132 855.534,229.085 856.102,228.266 856.67,229.334 857.239,230.326 857.807,230.363 858.375,231.258 858.944,230.437 859.512,231.695 860.081,231.378 860.649,231.361 861.217,229.173 861.786,230.3 862.354,230.414 862.922,231.35 863.491,232.35 864.059,233.304 864.627,234.211 865.196,233.177 865.764,228.868 866.332,230.097 866.901,230.051 867.469,228.244 868.037,226.337 868.606,228.703 869.174,227.958 869.742,232.31 870.311,235.351 870.879,235.223 871.447,233.885 872.016,235.874 872.584,230.453 873.152,227.477 873.721,225.733 874.289,224.199 874.858,224.697 875.426,224.077 875.994,224.386 876.563,225.98 877.131,226.417 877.699,227.699 878.268,229.059 878.836,229.336 879.404,226.685 879.973,227.853 880.541,228.009 881.109,226.051 881.678,227.552 882.246,227.681 882.814,229.296 883.383,228.464 883.951,227.479 884.519,227.675 885.088,228.935 885.656,230.015 886.224,231.088 886.793,231.396 887.361,231.362 887.93,231.391 888.498,232.626 889.066,232.668 889.635,229.435 890.203,229.52 890.771,230.747 891.34,231 891.908,231.051 892.476,232.022 893.045,230.905 893.613,232.134 894.181,233.145 894.75,228.997 895.318,230.403 895.886,232.331 896.455,232.16 897.023,233.188 897.591,231.887 898.16,232.732 898.728,233.583 899.296,232.394 899.865,233.294 900.433,232.997 901.001,230.989 901.57,227.856 902.138,228.916 902.707,231.037 903.275,231.031 903.843,233.188 904.412,232.114 904.98,232.996 905.548,232.901 906.117,232.783 906.685,234.676 907.253,233.477 907.822,231.271 908.39,231.482 908.958,232.28 909.527,232.197 910.095,230.024 910.663,228.014 911.232,227.154 911.8,228.602 912.368,226.402 912.937,226.588 913.505,227.906 914.073,229.102 914.642,230.189 915.21,231.322 915.779,231.134 916.347,232.725 916.915,231.482 917.484,228.433 918.052,232.577 918.62,232.565 919.189,232.265 919.757,234.3 920.325,234.887 920.894,235.369 921.462,235.236 922.03,237.019 922.599,237.585 923.167,236.97 923.735,234.32 924.304,232.853 924.872,231.695 925.44,230.594 926.009,231.563 926.577,231.534 927.145,235.474 927.714,231.974 928.282,230.778 928.85,232.958 929.419,231.637 929.987,229.438 930.556,229.369 931.124,228.241 931.692,229.505 932.261,230.461 932.829,231.312 933.397,231.366 933.966,230.378 934.534,227.423 935.102,228.762 935.671,229.833 936.239,227.89 936.807,225.855 937.376,227.456 937.944,228.63 938.512,225.533 939.081,225.633 939.649,224.879 940.217,227.261 940.786,228.542 941.354,229.658 941.922,229.821 942.491,230.928 943.059,231.005 943.627,230.884 944.196,230.944 944.764,230.81 945.333,228.695 945.901,232.243 946.469,229.996 947.038,229.087 947.606,230.202 948.174,227.099 948.743,228.255 949.311,228.346 949.879,228.644 950.448,228.603 951.016,229.693 951.584,229.78 952.153,231.761 952.721,232.574 953.289,231.04 953.858,228.048 954.426,228.251 954.994,229.345 955.563,228.249 956.131,224.542 956.699,223.067 957.268,222.436 957.836,224.068 958.405,225.48 958.973,226.766 959.541,223.961 960.11,224.245 960.678,226.667 961.246,225.852 961.815,226.112 962.383,227.621 962.951,227.783 963.52,227.005 964.088,231.336 964.656,231.364 965.225,230.409 965.793,231.329 966.361,229.348 966.93,229.719 967.498,226.695 968.066,229.983 968.635,229.035 969.203,226.897 969.771,227.336 970.34,228.665 970.908,228.797 971.476,229.114 972.045,229.152 972.613,230.15 973.182,228.931 973.75,228.912 974.318,229.057 974.887,229.073 975.455,229.286 976.023,228.354 976.592,229.607 977.16,231.746 977.728,230.884 978.297,231.955 978.865,232.88 979.433,231.854 980.002,230.837 980.57,229.729 981.138,230.884 981.707,231.048 982.275,231.862 982.843,232.933 983.412,232.89 983.98,233.988 984.548,234.869 985.117,234.571 985.685,235.456 986.253,235.198 986.822,233.077 987.39,235.051 987.959,235.592 988.527,235.196 989.095,235.073 989.664,235.714 990.232,239.297 990.8,234.575 991.369,233.409 991.937,232.225 992.505,233.188 993.074,231.928 993.642,230.782 994.21,233.676 994.779,234.493 995.347,233.1 995.915,232.768 996.484,234.484 997.052,232.894 997.62,233.585 998.189,233.314 998.757,232.897 999.325,232.662 999.894,234.261 1000.46,232.871 1001.03,231.462 1001.6,232.359 1002.17,231.064 1002.74,230.844 1003.3,230.923 1003.87,230.671 1004.44,231.439 1005.01,229.179 1005.58,228.152 1006.15,228.298 1006.71,228.225 1007.28,228.239 1007.85,227.167 1008.42,226.077 1008.99,226.337 1009.56,228.534 1010.12,227.609 1010.69,227.62 1011.26,226.71 1011.83,227.028 1012.4,228.395 1012.97,226.298 1013.53,227.408 1014.1,231.547 1014.67,235.489 1015.24,233.057 1015.81,235.045 1016.38,234.585 1016.94,235.113 1017.51,234.846 1018.08,234.229 1018.65,231.85 1019.22,230.653 1019.79,233.655 1020.35,232.239 1020.92,232.723 1021.49,232.449 1022.06,233.127 1022.63,231.755 1023.2,231.663 1023.76,233.388 1024.33,232.902 1024.9,233.56 1025.47,232.352 1026.04,230.74 1026.61,229.336 1027.17,229.484 1027.74,227.379 1028.31,229.551 1028.88,230.313 1029.45,231.409 1030.02,231.35 1030.58,231.053 1031.15,231.928 1031.72,230.441 1032.29,227.243 1032.86,228.31 1033.43,228.344 1033.99,229.483 1034.56,229.382 1035.13,232.158 1035.7,234.017 1036.27,233.49 1036.84,233.149 1037.4,233.811 1037.97,233.567 1038.54,231.044 1039.11,230.821 1039.68,232.583 1040.25,231.509 1040.81,231.226 1041.38,229.052 1041.95,228.979 1042.52,229.931 1043.09,231.918 1043.66,233.683 1044.22,232.066 1044.79,231.788 1045.36,231.261 1045.93,227.966 1046.5,227.878 1047.07,226.744 1047.63,228.079 1048.2,227.978 1048.77,226.863 1049.34,226.812 1049.91,226.832 1050.48,225.757 1051.05,223.892 1051.61,222.19 1052.18,220.441 1052.75,222.122 1053.32,222.711 1053.89,222.298 1054.46,222.456 1055.02,224.944 1055.59,226.444 1056.16,226.571 1056.73,224.635 1057.3,223.978 1057.87,224.172 1058.43,223.284 1059,224.634 1059.57,223.959 1060.14,224.433 1060.71,224.683 1061.28,221.984 1061.84,220.485 1062.41,223.358 1062.98,224.947 1063.55,225.366 1064.12,226.888 1064.69,228.275 1065.25,232.612 1065.82,234.675 1066.39,233.272 1066.96,231.872 1067.53,231.81 1068.1,230.645 1068.66,229.617 1069.23,231.596 1069.8,231.534 1070.37,231.502 1070.94,232.45 1071.51,231.181 1072.07,231.042 1072.64,232.972 1073.21,232.773 1073.78,233.478 1074.35,233.275 1074.92,232.915 1075.48,232.613 1076.05,231.414 1076.62,230.293 1077.19,230.206 1077.76,229.214 1078.33,228.879 1078.89,229.967 1079.46,230.871 1080.03,228.822 1080.6,229.076 1081.17,228.118 1081.74,228.456 1082.3,228.514 1082.87,227.325 1083.44,224.459 1084.01,224.86 1084.58,226.246 1085.15,225.407 1085.71,225.697 1086.28,225.124 1086.85,226.597 1087.42,225.927 1087.99,228.099 1088.56,226.199 1089.12,226.485 1089.69,226.671 1090.26,226.848 1090.83,224.835 1091.4,226.088 1091.97,227.244 1092.53,228.594 1093.1,227.927 1093.67,227.044 1094.24,227.274 1094.81,226.377 1095.38,226.594 1095.94,226.006 1096.51,225.378 1097.08,225.745 1097.65,226.186 1098.22,223.601 1098.79,227.466 1099.35,229.559 1099.92,229.618 1100.49,229.551 1101.06,228.578 1101.63,226.502 1102.2,225.844 1102.76,227.161 1103.33,228.508 1103.9,229.989 1104.47,231.017 1105.04,229.858 1105.61,229.923 1106.17,229.986 1106.74,229.976 1107.31,228.068 1107.88,228.396 1108.45,229.624 1109.02,228.726 1109.58,228.931 1110.15,230.317 1110.72,229.373 1111.29,230.501 1111.86,230.58 1112.43,230.612 1112.99,231.741 1113.56,229.895 1114.13,230.219 1114.7,230.279 1115.27,229.182 1115.84,227.327 1116.4,228.703 1116.97,228.837 1117.54,231.072 1118.11,230.086 1118.68,230.066 1119.25,230.147 1119.81,228.301 1120.38,228.355 1120.95,227.485 1121.52,226.926 1122.09,227.143 1122.66,225.698 1123.23,226.19 1123.79,225.498 1124.36,225.582 1124.93,224.827 1125.5,224.397 1126.07,223.936 1126.64,226.372 1127.2,224.031 1127.77,228.769 1128.34,228.177 1128.91,229.226 1129.48,230.448 1130.05,232.696 1130.61,232.78 1131.18,230.64 1131.75,230.655 1132.32,229.641 1132.89,228.855 1133.46,229.318 1134.02,226.665 1134.59,226.099 1135.16,227.455 1135.73,228.629 1136.3,229.069 1136.87,231.246 1137.43,231.444 1138,234.726 1138.57,233.571 1139.14,233.578 1139.71,237.459 1140.28,237.168 1140.84,236.86 1141.41,235.565 1141.98,235.21 1142.55,235.047 1143.12,235.722 1143.69,236.425 1144.25,238.277 1144.82,237.743 1145.39,237.014 1145.96,236.723 1146.53,237.306 1147.1,237.832 1147.66,239.233 1148.23,238.619 1148.8,238.035 1149.37,237.538 1149.94,237.244 1150.51,236.767 1151.07,238.287 1151.64,239.678 1152.21,239.104 1152.78,238.141 1153.35,238.327 1153.92,238.517 1154.48,238.675 1155.05,237.868 1155.62,237.365 1156.19,236.547 1156.76,234.508 1157.33,233.644 1157.89,232.25 1158.46,230.627 1159.03,229.282 1159.6,227.977 1160.17,226.635 1160.74,227.868 1161.3,227.981 1161.87,228.998 1162.44,229.903 1163.01,231.702 1163.58,232.387 1164.15,232.902 1164.71,233.554 1165.28,234.213 1165.85,232.593 1166.42,233.095 1166.99,232.528 1167.56,235.199 1168.12,232.585 1168.69,234.104 1169.26,230.557 1169.83,229.229 1170.4,230.122 1170.97,229.54 1171.53,230.432 1172.1,230.111 1172.67,230.816 1173.24,231.676 1173.81,230.281 1174.38,230.127 1174.94,230.803 1175.51,230.304 1176.08,233.005 1176.65,230.513 1177.22,227.03 1177.79,228.964 1178.35,228.796 1178.92,226.509 1179.49,226.504 1180.06,227.604 1180.63,228.647 1181.2,227.56 1181.76,226.497 1182.33,225.579 1182.9,225.656 1183.47,225.905 1184.04,225.952 1184.61,225.954 1185.17,221.933 1185.74,221.43 1186.31,222.925 1186.88,224.261 1187.45,223.475 1188.02,222.708 1188.58,223.151 1189.15,223.711 1189.72,223.118 1190.29,224.664 1190.86,226.092 1191.43,225.15 1192,225.335 1192.56,225.57 1193.13,226.773 1193.7,224.702 1194.27,226.061 1194.84,229.398 1195.41,231.385 1195.97,231.297 1196.54,232.166 1197.11,229.858 1197.68,229.855 1198.25,227.661 1198.82,226.87 1199.38,227.026 1199.95,228.336 1200.52,228.649 1201.09,228.622 1201.66,228.482 1202.23,229.614 1202.79,229.383 1203.36,226.364 1203.93,227.679 1204.5,230.015 1205.07,229.048 1205.64,230.295 1206.2,231.212 1206.77,232.269 1207.34,231.084 1207.91,229.846 1208.48,227.788 1209.05,224.804 1209.61,226.024 1210.18,225.337 1210.75,226.794 1211.32,225.007 1211.89,224.523 1212.46,223.665 1213.02,223.002 1213.59,224.613 1214.16,222.812 1214.73,222.445 1215.3,223.079 1215.87,222.464 1216.43,223.907 1217,222.297 1217.57,222.131 1218.14,226.94 1218.71,225.31 1219.28,225.8 1219.84,226.318 1220.41,226.718 1220.98,223.871 1221.55,225.243 1222.12,227.643 1222.69,233.139 1223.25,233.104 1223.82,232.934 1224.39,233.937 1224.96,234.833 1225.53,235.604 1226.1,234.176 1226.66,235.693 1227.23,235.294 1227.8,233.985 1228.37,232.965 1228.94,233.661 1229.51,231.454 1230.07,232.755 1230.64,230.506 1231.21,230.479 1231.78,232.53 1232.35,231.485 1232.92,232.407 1233.48,233.272 1234.05,232.967 1234.62,235.967 1235.19,234.43 1235.76,234.138 1236.33,232.894 1236.89,233.543 1237.46,234.49 1238.03,233.204 1238.6,232.152 1239.17,232.017 1239.74,230.789 1240.3,231.835 1240.87,231.446 1241.44,233.411 1242.01,231.263 1242.58,231.174 1243.15,231.051 1243.71,229.783 1244.28,228.777 1244.85,228.057 1245.42,228.067 1245.99,229.095 1246.56,229.09 1247.12,228.074 1247.69,227.939 1248.26,227.981 1248.83,226.976 1249.4,226.396 1249.97,227.714 1250.53,227.838 1251.1,227.768 1251.67,226.904 1252.24,229.034 1252.81,228.18 1253.38,227.1 1253.94,226.404 1254.51,227.56 1255.08,229.867 1255.65,229.928 1256.22,230.028 1256.79,232.136 1257.35,231.845 1257.92,230.66 1258.49,230.645 1259.06,231.306 1259.63,231.198 1260.2,229.968 1260.76,228.908 1261.33,230.932 1261.9,231.091 1262.47,228.961 1263.04,229.037 1263.61,231.337 1264.18,232.374 1264.74,233.491 1265.31,233.138 1265.88,233.796 1266.45,233.328 1267.02,231.742 1267.59,229.081 1268.15,228.296 1268.72,229.498 1269.29,231.678 1269.86,232.395 1270.43,233.108 1271,228.734 1271.56,228.642 1272.13,228.58 1272.7,227.589 1273.27,226.655 1273.84,226.716 1274.41,227.009 1274.97,228.158 1275.54,226.285 1276.11,226.537 1276.68,224.791 1277.25,226.243 1277.82,226.549 1278.38,226.78 1278.95,227.951 1279.52,227.917 1280.09,229.06 1280.66,230.081 1281.23,229.99 1281.79,229.939 1282.36,230.989 1282.93,227.997 1283.5,229.14 1284.07,230.118 1284.64,227.027 1285.2,227.028 1285.77,228.25 1286.34,229.387 1286.91,231.398 1287.48,230.314 1288.05,230.383 1288.61,231.301 1289.18,231.006 1289.75,232.073 1290.32,231.061 1290.89,231.907 1291.46,227.559 1292.02,227.664 1292.59,228.707 1293.16,227.669 1293.73,228.607 1294.3,228.98 1294.87,230.037 1295.43,230.156 1296,232.344 1296.57,232.29 1297.14,232.103 1297.71,233.867 1298.28,231.427 1298.84,226.83 1299.41,230.082 1299.98,229.902 1300.55,230.895 1301.12,233.08 1301.69,232.884 1302.25,230.503 1302.82,230.246 1303.39,229.264 1303.96,227.015 1304.53,226.296 1305.1,227.631 1305.66,228.934 1306.23,229.789 1306.8,227.692 1307.37,228.51 1307.94,226.54 1308.51,226.757 1309.07,225.002 1309.64,226.556 1310.21,224.729 1310.78,230.38 1311.35,234.409 1311.92,236.127 1312.48,235.766 1313.05,239.498 1313.62,238.669 1314.19,237.957 1314.76,237.404 1315.33,237.638 1315.89,238.769 1316.46,237.956 1317.03,237.128 1317.6,233.36 1318.17,233.011 1318.74,230.652 1319.3,230.254 1319.87,229.225 1320.44,227.144 1321.01,226.347 1321.58,226.508 1322.15,227.623 1322.71,227.606 1323.28,228.827 1323.85,230.972 1324.42,231.908 1324.99,231.634 1325.56,231.474 1326.12,229.218 1326.69,231.134 1327.26,230.946 1327.83,231.832 1328.4,230.598 1328.97,229.32 1329.53,229.502 1330.1,227.286 1330.67,231.396 1331.24,229.103 1331.81,228.005 1332.38,225.97 1332.94,224.957 1333.51,226.146 1334.08,226.272 1334.65,228.483 1335.22,228.458 1335.79,229.492 1336.36,229.537 1336.92,232.314 1337.49,231.78 1338.06,232.53 1338.63,231.183 1339.2,230.887 1339.77,229.834 1340.33,228.642 1340.9,229.735 1341.47,230.742 1342.04,229.586 1342.61,226.56 1343.18,226.688 1343.74,223.92 1344.31,225.123 1344.88,226.585 1345.45,228.9 1346.02,230.96 1346.59,232.972 1347.15,232.754 1347.72,232.487 1348.29,232.22 1348.86,230.005 1349.43,231.027 1350,231.124 1350.56,233.276 1351.13,233.299 1351.7,235.111 1352.27,232.853 1352.84,233.688 1353.41,235.552 1353.97,236.175 1354.54,235.54 1355.11,230.772 1355.68,231.472 1356.25,229.538 1356.82,228.299 1357.38,227.364 1357.95,229.29 1358.52,228.384 1359.09,229.403 1359.66,229.475 1360.23,230.509 1360.79,228.431 1361.36,227.48 1361.93,229.551 1362.5,225.398 1363.07,226.56 1363.64,225.916 1364.2,225.088 1364.77,225.222 1365.34,223.566 1365.91,222.866 1366.48,226.207 1367.05,226.272 1367.61,226.474 1368.18,224.714 1368.75,227.112 1369.32,226.354 1369.89,225.687 1370.46,227.02 1371.02,226.068 1371.59,227.168 1372.16,228.272 1372.73,228.364 1373.3,229.544 1373.87,229.497 1374.43,230.599 1375,228.365 1375.57,229.498 1376.14,230.334 1376.71,229.253 1377.28,228.476 1377.84,228.337 1378.41,227.244 1378.98,226.449 1379.55,226.479 1380.12,226.745 1380.69,227 1381.25,229.078 1381.82,227.94 1382.39,229.034 1382.96,229.001 1383.53,227.939 1384.1,223.025 1384.66,224.472 1385.23,226.677 1385.8,226.727 1386.37,228.89 1386.94,229.849 1387.51,230.734 1388.07,229.549 1388.64,228.608 1389.21,227.735 1389.78,227.882 1390.35,227.615 1390.92,228.884 1391.48,228.041 1392.05,228.261 1392.62,226.46 1393.19,229.954 1393.76,229.867 1394.33,229.866 1394.89,230.738 1395.46,228.947 1396.03,228.254 1396.6,228.238 1397.17,226.465 1397.74,227.815 1398.3,227.957 1398.87,227.253 1399.44,227.298 1400.01,228.439 1400.58,226.606 1401.15,227.024 1401.71,228.521 1402.28,228.693 1402.85,224.573 1403.42,228.214 1403.99,228.308 1404.56,228.568 1405.13,228.627 1405.69,228.596 1406.26,230.808 1406.83,230.877 1407.4,229.714 1407.97,229.005 1408.54,227.051 1409.1,231.526 1409.67,231.483 1410.24,230.657 1410.81,229.781 1411.38,229.842 1411.95,229.994 1412.51,228.913 1413.08,228.018 1413.65,231.322 1414.22,232.408 1414.79,233.126 1415.36,232.74 1415.92,232.701 1416.49,231.423 1417.06,231.333 1417.63,230.088 1418.2,228.998 1418.77,231.132 1419.33,232.065 1419.9,231.742 1420.47,233.785 1421.04,230.345 1421.61,230.406 1422.18,232.602 1422.74,231.405 1423.31,230.335 1423.88,232.331 1424.45,234.399 1425.02,236.316 1425.59,234.806 1426.15,233.499 1426.72,233.223 1427.29,231.945 1427.86,230.693 1428.43,230.429 1429,228.307 1429.56,228.426 1430.13,229.384 1430.7,228.275 1431.27,227.397 1431.84,228.475 1432.41,228.755 1432.97,228.92 1433.54,227.984 1434.11,229.185 1434.68,230.305 1435.25,230.266 1435.82,229.318 1436.38,231.424 1436.95,230.319 1437.52,231.269 1438.09,233.356 1438.66,233.142 1439.23,232.048 1439.79,231.897 1440.36,231.672 1440.93,232.652 1441.5,231.342 1442.07,229.251 1442.64,229.38 1443.2,225.51 1443.77,225.804 1444.34,227.059 1444.91,227.087 1445.48,227.176 1446.05,227.495 1446.61,228.637 1447.18,228.541 1447.75,228.699 1448.32,227.605 1448.89,225.686 1449.46,224.915 1450.02,225.535 1450.59,224.918 1451.16,225.28 1451.73,224.664 1452.3,226.066 1452.87,224.428 1453.43,225.043 1454,224.353 1454.57,225.001 1455.14,224.29 1455.71,225.703 1456.28,227.064 1456.84,229.365 1457.41,230.575 1457.98,231.653 1458.55,231.664 1459.12,228.905 1459.69,228.908 1460.25,229.044 1460.82,230.223 1461.39,230.36 1461.96,228.585 1462.53,229.747 1463.1,230.848 1463.66,232.006 1464.23,233.076 1464.8,230.941 1465.37,229.893 1465.94,229.095 1466.51,230.148 1467.07,229.299 1467.64,229.406 1468.21,229.705 1468.78,228.796 1469.35,227.819 1469.92,228.986 1470.48,229.107 1471.05,227.166 1471.62,230.488 1472.19,229.359 1472.76,230.72 1473.33,231.554 1473.89,232.654 1474.46,231.25 1475.03,230.289 1475.6,228.142 1476.17,228.376 1476.74,229.596 1477.31,229.487 1477.87,230.463 1478.44,229.504 1479.01,230.57 1479.58,228.48 1480.15,227.7 1480.72,227.929 1481.28,226.214 1481.85,226.696 1482.42,227.074 1482.99,227.303 1483.56,228.595 1484.13,229.781 1484.69,229.619 1485.26,229.625 1485.83,231.737 1486.4,229.709 1486.97,231.709 1487.54,229.455 1488.1,230.38 1488.67,230.4 1489.24,233.521 1489.81,235.382 1490.38,232.924 1490.95,234.737 1491.51,233.479 1492.08,234.231 1492.65,231.795 1493.22,232.404 1493.79,231.005 1494.36,230.613 1494.92,230.526 1495.49,230.401 1496.06,229.274 1496.63,228.254 1497.2,230.375 1497.77,229.148 1498.33,229.221 1498.9,232.427 1499.47,232.477 1500.04,232.295 1500.61,232.242 1501.18,232.263 1501.74,232.296 1502.31,232.329 1502.88,234.436 1503.45,234.995 1504.02,235.651 1504.59,236.156 1505.15,236.703 1505.72,236.017 1506.29,234.311 1506.86,234.904 1507.43,235.567 1508,234.129 1508.56,235.649 1509.13,232.093 1509.7,231.814 1510.27,230.668 1510.84,230.682 1511.41,231.282 1511.97,230.117 1512.54,230.061 1513.11,229.885 1513.68,232.683 1514.25,232.377 1514.82,230.251 1515.38,229.081 1515.95,230.937 1516.52,229.646 1517.09,229.357 1517.66,229.304 1518.23,229.222 1518.79,229.366 1519.36,227.325 1519.93,226.355 1520.5,224.318 1521.07,220.658 1521.64,221.297 1522.2,221.731 1522.77,222.333 1523.34,221.868 1523.91,226.491 1524.48,224.552 1525.05,224.941 1525.61,225.491 1526.18,226.748 1526.75,226.91 1527.32,228.143 1527.89,226.05 1528.46,225.156 1529.02,225.495 1529.59,226.954 1530.16,226.045 1530.73,228.398 1531.3,228.28 1531.87,227.438 1532.43,228.601 1533,229.767 1533.57,230.762 1534.14,231.581 1534.71,229.274 1535.28,228.402 1535.84,229.539 1536.41,231.343 1536.98,230.312 1537.55,229.119 1538.12,228.29 1538.69,227.307 1539.25,229.558 1539.82,229.597 1540.39,230.591 1540.96,233.412 1541.53,233.05 1542.1,230.85 1542.66,232.892 1543.23,231.694 1543.8,232.685 1544.37,231.567 1544.94,229.565 1545.51,229.526 1546.08,230.569 1546.64,232.187 1547.21,233.017 1547.78,231.808 1548.35,230.657 1548.92,229.754 1549.49,231.99 1550.05,231.724 1550.62,229.545 1551.19,229.711 1551.76,227.823 1552.33,225.97 1552.9,224.152 1553.46,225.371 1554.03,223.4 1554.6,225.776 1555.17,226.035 1555.74,224.461 1556.31,224.806 1556.87,224.17 1557.44,226.688 1558.01,229.95 1558.58,231.828 1559.15,230.603 1559.72,228.401 1560.28,225.393 1560.85,224.6 1561.42,225.81 1561.99,226.002 1562.56,228.541 1563.13,228.727 1563.69,229.795 1564.26,228.865 1564.83,226.869 1565.4,227.126 1565.97,227.272 1566.54,229.715 1567.1,230.681 1567.67,231.833 1568.24,231.926 1568.81,233.997 1569.38,232.752 1569.95,234.812 1570.51,236.444 1571.08,235.196 1571.65,234.762 1572.22,234.419 1572.79,233.101 1573.36,231.834 1573.92,231.524 1574.49,231.582 1575.06,229.592 1575.63,230.63 1576.2,231.716 1576.77,232.668 1577.33,231.567 1577.9,231.439 1578.47,231.433 1579.04,231.169 1579.61,229.195 1580.18,229.201 1580.74,230.362 1581.31,229.228 1581.88,228.307 1582.45,226.398 1583.02,226.753 1583.59,225.998 1584.15,227.272 1584.72,226.502 1585.29,227.866 1585.86,229.033 1586.43,227.898 1587,226.901 1587.56,227.042 1588.13,229.212 1588.7,230.376 1589.27,231.326 1589.84,230.012 1590.41,229.974 1590.97,226.963 1591.54,226.22 1592.11,226.6 1592.68,226.893 1593.25,228.097 1593.82,229.332 1594.38,227.081 1594.95,227.382 1595.52,226.704 1596.09,226.118 1596.66,227.462 1597.23,227.87 1597.79,228.184 1598.36,227.222 1598.93,228.649 1599.5,228.856 1600.07,227.972 1600.64,225.049 1601.2,223.236 1601.77,222.732 1602.34,223.389 1602.91,223.133 1603.48,223.768 1604.05,224.396 1604.61,224.964 1605.18,226.368 1605.75,224.796 1606.32,228.299 1606.89,226.24 1607.46,228.717 1608.02,226.956 1608.59,228.531 1609.16,225.489 1609.73,224.557 1610.3,226.001 1610.87,225.511 1611.43,229.215 1612,230.335 1612.57,231.219 1613.14,230.027 1613.71,229.231 1614.28,229.271 1614.84,229.38 1615.41,229.677 1615.98,231.038 1616.55,230.253 1617.12,232.368 1617.69,232.422 1618.26,233.483 1618.82,234.255 1619.39,234.205 1619.96,234.976 1620.53,234.744 1621.1,234.433 1621.67,235.43 1622.23,237.263 1622.8,236.739 1623.37,236.195 1623.94,239.089 1624.51,238.588 1625.08,236.99 1625.64,237.63 1626.21,237.158 1626.78,235.462 1627.35,236.004 1627.92,234.489 1628.49,231.222 1629.05,232.158 1629.62,232.953 1630.19,232.596 1630.76,231.287 1631.33,233.265 1631.9,234.088 1632.46,233.74 1633.03,233.23 1633.6,233.974 1634.17,230.759 1634.74,227.465 1635.31,230.592 1635.87,229.473 1636.44,229.576 1637.01,230.777 1637.58,232.702 1638.15,231.402 1638.72,231.299 1639.28,231.343 1639.85,231.067 1640.42,231.131 1640.99,231.128 1641.56,228.815 1642.13,231.661 1642.69,231.324 1643.26,231.295 1643.83,230.208 1644.4,229.106 1644.97,228.907 1645.54,231.154 1646.1,231.946 1646.67,231.628 1647.24,231.607 1647.81,232.683 1648.38,230.338 1648.95,228.057 1649.51,225.843 1650.08,226.837 1650.65,226.137 1651.22,225.444 1651.79,224.526 1652.36,225.851 1652.92,227.195 1653.49,228.351 1654.06,228.373 1654.63,226.432 1655.2,228.708 1655.77,228.511 1656.33,227.569 1656.9,227.688 1657.47,229.927 1658.04,232.021 1658.61,231.823 1659.18,230.612 1659.74,229.507 1660.31,228.51 1660.88,230.674 1661.45,229.478 1662.02,230.611 1662.59,228.564 1663.15,228.779 1663.72,228.572 1664.29,229.642 1664.86,229.493 1665.43,232.541 1666,232.351 1666.56,231.07 1667.13,228.792 1667.7,230.153 1668.27,233.298 1668.84,233.685 1669.41,233.314 1669.97,232.805 1670.54,233.484 1671.11,233.132 1671.68,230.694 1672.25,228.235 1672.82,227.162 1673.38,229.144 1673.95,229.183 1674.52,227.978 1675.09,229.056 1675.66,228.068 1676.23,228.033 1676.79,228.048 1677.36,228.034 1677.93,228.311 1678.5,229.579 1679.07,230.53 1679.64,230.451 1680.2,230.343 1680.77,229.302 1681.34,231.476 1681.91,229.334 1682.48,230.342 1683.05,230.337 1683.61,229.275 1684.18,228.392 1684.75,230.494 1685.32,229.087 1685.89,229.095 1686.46,227.784 1687.02,226.655 1687.59,228.095 1688.16,229.489 1688.73,228.385 1689.3,228.532 1689.87,230.702 1690.44,231.653 1691,230.505 1691.57,230.316 1692.14,230.204 1692.71,230.089 1693.28,230.119 1693.85,231.071 1694.41,229.908 1694.98,229.039 1695.55,229.036 1696.12,230.07 1696.69,229.896 1697.26,229.693 1697.82,228.563 1698.39,229.613 1698.96,229.321 1699.53,230.5 1700.1,228.436 1700.67,225.244 1701.23,223.311 1701.8,226.63 1702.37,226.951 1702.94,228.008 1703.51,226.065 1704.08,225.438 1704.64,226.933 1705.21,226.425 1705.78,225.638 1706.35,226.026 1706.92,227.142 1707.49,226.135 1708.05,224.489 1708.62,225.691 1709.19,226.921 1709.76,226.015 1710.33,230.489 1710.9,232.47 1711.46,232.144 1712.03,231.788 1712.6,232.706 1713.17,232.613 1713.74,235.467 1714.31,235.204 1714.87,235.768 1715.44,233.324 1716.01,231.3 1716.58,231.307 1717.15,231.247 1717.72,230.967 1718.28,231.774 1718.85,231.568 1719.42,232.527 1719.99,231.238 1720.56,231.361 1721.13,229.316 1721.69,228.386 1722.26,227.609 1722.83,228.705 1723.4,231.847 1723.97,235.118 1724.54,235.658 1725.1,230.059 1725.67,230.082 1726.24,231.922 1726.81,232.725 1727.38,233.417 1727.95,234.095 1728.51,234.746 1729.08,237.398 1729.65,236.549 1730.22,236.136 1730.79,232.409 1731.36,232.127 1731.92,228.881 1732.49,229.916 1733.06,228.194 1733.63,229.201 1734.2,232.074 1734.77,232.758 1735.33,230.381 1735.9,229.341 1736.47,230.355 1737.04,229.29 1737.61,228.178 1738.18,228.164 1738.74,230.478 1739.31,230.234 1739.88,228.334 1740.45,228.065 1741.02,228.91 1741.59,228.877 1742.15,232.21 1742.72,231.912 1743.29,230.601 1743.86,229.45 1744.43,229.471 1745,231.414 1745.56,230.134 1746.13,231.291 1746.7,230.159 1747.27,230.995 1747.84,231.81 1748.41,230.736 1748.97,227.442 1749.54,227.439 1750.11,229.413 1750.68,229.419 1751.25,229.543 1751.82,229.408 1752.38,230.481 1752.95,229.351 1753.52,229.273 1754.09,229.169 1754.66,228.983 1755.23,231.083 1755.79,231.962 1756.36,231.766 1756.93,231.325 1757.5,232.261 1758.07,229.919 1758.64,230.974 1759.21,230.939 1759.77,228.536 1760.34,228.634 1760.91,227.469 1761.48,228.521 1762.05,226.377 1762.62,227.197 1763.18,226.126 1763.75,226.253 1764.32,226.554 1764.89,227.761 1765.46,223.794 1766.03,225.115 1766.59,225.382 1767.16,226.791 1767.73,227.975 1768.3,227.969 1768.87,229.086 1769.44,227.908 1770,226.079 1770.57,228.294 1771.14,226.254 1771.71,225.382 1772.28,225.422 1772.85,226.546 1773.41,226.995 1773.98,227.173 1774.55,229.47 1775.12,229.383 1775.69,229.345 1776.26,229.526 1776.82,229.588 1777.39,229.439 1777.96,227.359 1778.53,227.159 1779.1,229.185 1779.67,234.564 1780.23,235.22 1780.8,234.639 1781.37,234.352 1781.94,233.977 1782.51,233.404 1783.08,231.908 1783.64,231.689 1784.21,232.595 1784.78,231.358 1785.35,230.934 1785.92,228.52 1786.49,227.494 1787.05,227.556 1787.62,225.637 1788.19,227.939 1788.76,230.04 1789.33,229.911 1789.9,230.942 1790.46,231.749 1791.03,228.447 1791.6,230.26 1792.17,232.029 1792.74,231.801 1793.31,232.539 1793.87,232.291 1794.44,232.802 1795.01,232.556 1795.58,233.423 1796.15,232.949 1796.72,231.589 1797.28,230.409 1797.85,230.273 1798.42,232.247 1798.99,231.956 1799.56,231.683 1800.13,231.447 1800.69,231.09 1801.26,230.838 1801.83,230.518 1802.4,229.255 1802.97,229.135 1803.54,229.164 1804.1,228.197 1804.67,228.278 1805.24,228.243 1805.81,229.2 1806.38,230.128 1806.95,229.613 1807.51,229.55 1808.08,230.408 1808.65,230.337 1809.22,230.987 1809.79,230.557 1810.36,229.601 1810.92,229.751 1811.49,227.729 1812.06,227.873 1812.63,227.851 1813.2,226.579 1813.77,227.724 1814.33,224.624 1814.9,222.878 1815.47,224.154 1816.04,223.513 1816.61,223.895 1817.18,224.484 1817.74,224.794 1818.31,225.099 1818.88,223.416 1819.45,224.902 1820.02,222.916 1820.59,223.232 1821.15,223.928 1821.72,224.123 1822.29,225.495 1822.86,228.928 1823.43,228.105 1824,227.136 1824.56,228.279 1825.13,227.309 1825.7,227.531 1826.27,226.502 1826.84,226.586 1827.41,225.833 1827.97,228.001 1828.54,229.323 1829.11,229.193 1829.68,230.298 1830.25,230.172 1830.82,231.212 1831.39,230.175 1831.95,229.233 1832.52,226.233 1833.09,226.652 1833.66,227.089 1834.23,226.589 1834.8,225.719 1835.36,225.795 1835.93,226.931 1836.5,226.284 1837.07,225.493 1837.64,224.774 1838.21,223.122 1838.77,223.605 1839.34,224.246 1839.91,224.735 1840.48,225.097 1841.05,222.384 1841.62,223.974 1842.18,222.297 1842.75,225.251 1843.32,227.807 1843.89,227.051 1844.46,225.363 1845.03,225.798 1845.59,227.279 1846.16,228.507 1846.73,228.785 1847.3,230.067 1847.87,227.915 1848.44,228.116 1849,230.761 1849.57,229.843 1850.14,231.041 1850.71,232.095 1851.28,232.168 1851.85,232.188 1852.41,233.169 1852.98,230.107 1853.55,231.445 1854.12,231.422 1854.69,233.364 1855.26,237.04 1855.82,234.497 1856.39,234.228 1856.96,235.094 1857.53,234.767 1858.1,235.515 1858.67,236.201 1859.23,234.791 1859.8,233.326 1860.37,232.247 1860.94,232.019 1861.51,232.902 1862.08,231.833 1862.64,232.989 1863.21,229.848 1863.78,228.963 1864.35,228.157 1864.92,227.071 1865.49,227.325 1866.05,225.396 1866.62,224.59 1867.19,225 1867.76,226.6 1868.33,226.98 1868.9,225.086 1869.46,227.609 1870.03,228.979 1870.6,229.206 1871.17,229.423 1871.74,229.731 1872.31,229.794 1872.87,228.044 1873.44,229.495 1874.01,227.586 1874.58,227.861 1875.15,228.176 1875.72,228.257 1876.28,230.686 1876.85,232.648 1877.42,234.798 1877.99,235.848 1878.56,234.473 1879.13,233.056 1879.69,231.941 1880.26,229.603 1880.83,230.913 1881.4,229.998 1881.97,232.266 1882.54,232.925 1883.1,232.641 1883.67,233.234 1884.24,231.993 1884.81,230.581 1885.38,233.943 1885.95,230.49 1886.51,230.509 1887.08,228.476 1887.65,228.568 1888.22,229.738 1888.79,228.966 1889.36,228.972 1889.92,227.866 1890.49,226.871 1891.06,229.215 1891.63,232.28 1892.2,231.903 1892.77,230.817 1893.33,231.026 1893.9,231.172 1894.47,229.908 1895.04,229.969 1895.61,230.952 1896.18,230.834 1896.74,232.736 1897.31,230.206 1897.88,231.013 1898.45,229.077 1899.02,228.264 1899.59,227.35 1900.16,227.422 1900.72,228.713 1901.29,228.698 1901.86,228.852 1902.43,229.93 1903,229.78 1903.57,232.739 1904.13,233.61 1904.7,233.436 1905.27,234.15 1905.84,234.548 1906.41,233.064 1906.98,231.796 1907.54,233.505 1908.11,234.078 1908.68,233.768 1909.25,232.614 1909.82,232.442 1910.39,232.289 1910.95,232.987 1911.52,232.797 1912.09,232.599 1912.66,232.628 1913.23,232.334 1913.8,230.896 1914.36,232.829 1914.93,232.66 1915.5,231.298 1916.07,232.123 1916.64,232.959 1917.21,233.75 1917.77,232.367 1918.34,231.899 1918.91,230.443 1919.48,229.201 1920.05,227.087 1920.62,228.107 1921.18,226.084 1921.75,226.011 1922.32,224.481 1922.89,226.874 1923.46,226.02 1924.03,226.118 1924.59,226.37 1925.16,225.53 1925.73,226.871 1926.3,226.077 1926.87,228.221 1927.44,227.299 1928,227.592 1928.57,226.806 1929.14,231.05 1929.71,231.974 1930.28,232.846 1930.85,233.534 1931.41,233.217 1931.98,231.872 1932.55,231.395 1933.12,234.393 1933.69,233.859 1934.26,234.725 1934.82,234.432 1935.39,234.138 1935.96,233.653 1936.53,228.177 1937.1,227.287 1937.67,229.435 1938.23,230.459 1938.8,230.289 1939.37,227.985 1939.94,227.182 1940.51,228.539 1941.08,228.397 1941.64,227.573 1942.21,225.528 1942.78,227.73 1943.35,228.843 1943.92,228.82 1944.49,229.73 1945.05,229.86 1945.62,228.629 1946.19,229.735 1946.76,226.311 1947.33,226.754 1947.9,226.907 1948.46,229.017 1949.03,228.173 1949.6,227.292 1950.17,227.286 1950.74,227.498 1951.31,227.787 1951.87,229.259 1952.44,227.488 1953.01,227.659 1953.58,228.655 1954.15,228.636 1954.72,229.783 1955.28,229.59 1955.85,227.49 1956.42,226.665 1956.99,226.822 1957.56,226.084 1958.13,226.242 1958.69,227.29 1959.26,225.494 1959.83,225.757 1960.4,223.894 1960.97,224.302 1961.54,223.584 1962.1,223.98 1962.67,226.079 1963.24,224.291 1963.81,223.474 1964.38,224.8 1964.95,228.512 1965.51,230.679 1966.08,234.66 1966.65,232.251 1967.22,231.107 1967.79,232.211 1968.36,237.398 1968.92,237.701 1969.49,238.378 1970.06,236.571 1970.63,233.829 1971.2,234.652 1971.77,234.373 1972.34,233.928 1972.9,235.808 1973.47,238.344 1974.04,235.579 1974.61,235.04 1975.18,235.525 1975.75,233.896 1976.31,233.463 1976.88,235.019 1977.45,234.315 1978.02,231.779 1978.59,230.178 1979.16,230.08 1979.72,231.103 1980.29,231.067 1980.86,230.89 1981.43,230.705 1982,233.726 1982.57,233.11 1983.13,234.796 1983.7,233.295 1984.27,234.989 1984.84,232.561 1985.41,232.299 1985.98,231.753 1986.54,231.657 1987.11,228.242 1987.68,230.198 1988.25,230.98 1988.82,229.727 1989.39,229.634 1989.95,231.811 1990.52,229.508 1991.09,230.323 1991.66,228.985 1992.23,229.029 1992.8,228.104 1993.36,226.02 1993.93,225.051 1994.5,225.58 1995.07,225.841 1995.64,223.895 1996.21,224.2 1996.77,222.534 1997.34,220.849 1997.91,221.343 1998.48,223.047 1999.05,223.415 1999.62,222.7 2000.18,222.025 2000.75,223.44 2001.32,225.047 2001.89,224.488 2002.46,224.683 2003.03,225.103 2003.59,226.534 2004.16,226.951 2004.73,228.049 2005.3,227.17 2005.87,227.284 2006.44,228.154 2007,227.104 2007.57,228.13 2008.14,229.18 2008.71,228.12 2009.28,227.156 2009.85,227.274 2010.41,227.501 2010.98,227.704 2011.55,223.843 2012.12,224.319 2012.69,223.708 2013.26,224.338 2013.82,225.895 2014.39,228.236 2014.96,229.555 2015.53,229.706 2016.1,229.64 2016.67,229.864 2017.23,231.923 2017.8,231.957 2018.37,231.932 2018.94,231.761 2019.51,230.44 2020.08,230.383 2020.64,232.326 2021.21,232.329 2021.78,229.24 2022.35,229.409 2022.92,230.483 2023.49,233.673 2024.05,235.541 2024.62,234.984 2025.19,235.888 2025.76,235.524 2026.33,235.179 2026.9,234.7 2027.46,232.468 2028.03,233.296 2028.6,232.237 2029.17,229.987 2029.74,229.943 2030.31,229.834 2030.87,227.772 2031.44,229.012 2032.01,229.945 2032.58,228.913 2033.15,224.923 2033.72,226.321 2034.28,227.818 2034.85,228.9 2035.42,229.07 2035.99,229.175 2036.56,229.181 2037.13,230.121 2037.69,230.14 2038.26,231.225 2038.83,232.064 2039.4,232.871 2039.97,233.515 2040.54,231.939 2041.11,229.723 2041.67,228.503 2042.24,228.874 2042.81,228.898 2043.38,228.958 2043.95,229.04 2044.52,228.862 2045.08,228.882 2045.65,228.714 2046.22,228.796 2046.79,230.873 2047.36,229.709 2047.93,227.841 2048.49,227.001 2049.06,226.307 2049.63,225.469 2050.2,224.545 2050.77,225.838 2051.34,228.337 2051.9,226.42 2052.47,229.816 2053.04,230.045 2053.61,229.943 2054.18,228.819 2054.75,230.702 2055.31,232.784 2055.88,233.853 2056.45,232.502 2057.02,232.272 2057.59,231.824 2058.16,230.582 2058.72,227.318 2059.29,226.382 2059.86,226.417 2060.43,226.746 2061,227.057 2061.57,227.357 2062.13,227.32 2062.7,227.537 2063.27,230.922 2063.84,230.838 2064.41,229.472 2064.98,228.476 2065.54,228.798 2066.11,227.695 2066.68,229.852 2067.25,228.722 2067.82,228.834 2068.39,227.674 2068.95,227.781 2069.52,227.935 2070.09,226.99 2070.66,228.293 2071.23,228.45 2071.8,229.789 2072.36,231.035 2072.93,233.825 2073.5,231.683 2074.07,234.679 2074.64,232.098 2075.21,230.896 2075.77,231.046 2076.34,232.213 2076.91,233.126 2077.48,232.925 2078.05,232.751 2078.62,230.509 2079.18,232.285 2079.75,230.931 2080.32,232.857 2080.89,232.771 2081.46,232.644 2082.03,233.651 2082.59,231.463 2083.16,231.299 2083.73,229.256 2084.3,229.305 2084.87,228.18 2085.44,229.218 2086,229.207 2086.57,231.486 2087.14,231.442 2087.71,230.466 2088.28,232.508 2088.85,231.173 2089.41,230.068 2089.98,229.118 2090.55,228.237 2091.12,226.199 2091.69,227.477 2092.26,225.4 2092.82,227.614 2093.39,227.816 2093.96,227.965 2094.53,229.939 2095.1,230.022 2095.67,230.105 2096.23,230.016 2096.8,229.17 2097.37,230.062 2097.94,231.209 2098.51,230.818 2099.08,228.633 2099.64,226.503 2100.21,225.567 2100.78,224.622 2101.35,225.101 2101.92,225.39 2102.49,225.881 2103.05,224.252 2103.62,225.789 2104.19,226.08 2104.76,227.552 2105.33,228.548 2105.9,229.7 2106.46,226.688 2107.03,225.976 2107.6,226.184 2108.17,226.324 2108.74,226.573 2109.31,228.026 2109.87,229.117 2110.44,230.185 2111.01,235.486 2111.58,234.142 2112.15,232.834 2112.72,231.778 2113.29,231.703 2113.85,232.565 2114.42,231.236 2114.99,231.131 2115.56,231.975 2116.13,231.717 2116.7,231.572 2117.26,233.339 2117.83,233.185 2118.4,234.94 2118.97,235.342 2119.54,235.006 2120.11,235.924 2120.67,234.47 2121.24,234.899 2121.81,234.566 2122.38,234.165 2122.95,232.723 2123.52,230.504 2124.08,231.323 2124.65,231.253 2125.22,230.125 2125.79,231.038 2126.36,229.79 2126.93,227.48 2127.49,226.48 2128.06,225.695 2128.63,225.99 2129.2,223.924 2129.77,225.974 2130.34,225.227 2130.9,223.452 2131.47,223.576 2132.04,219.895 2132.61,220.709 2133.18,222.541 2133.75,220.888 2134.31,221.468 2134.88,221.927 2135.45,221.631 2136.02,224.174 2136.59,223.66 2137.16,224.206 2137.72,223.855 2138.29,223.312 2138.86,224.67 2139.43,226.111 2140,228.606 2140.57,227.898 2141.13,229.228 2141.7,229.421 2142.27,230.538 2142.84,230.918 2143.41,232.049 2143.98,230.91 2144.54,231.041 2145.11,229.852 2145.68,228.779 2146.25,230.924 2146.82,232.077 2147.39,232.169 2147.95,234.135 2148.52,235.075 2149.09,234.718 2149.66,234.634 2150.23,234.165 2150.8,231.965 2151.36,229.668 2151.93,231.023 2152.5,232.192 2153.07,232.163 2153.64,233.268 2154.21,233.235 2154.77,233.213 2155.34,233.891 2155.91,232.46 2156.48,233.358 2157.05,232.251 2157.62,230.002 2158.18,231.116 2158.75,232.134 2159.32,231.923 2159.89,232.809 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip730)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.03 ± 0.022\n  with uncertainty of ± 0.001968983794176443\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01052 ± (0.00277384, 0.00288221) (MC)\n  95% confidence interval: [-4.01592, -4.00525]) (MC)\n  linear error propagation: -4.01053 ± 0.00272136\n  |δ_y| = |0.00169537| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.010519457801343, val_l = 0.005402772400882938, val_u = 0.0052741093952493046)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip760\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip760)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip761\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip760)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip762\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1148.74 2211.02,1148.74 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,986.296 2211.02,986.296 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,823.849 2211.02,823.849 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,661.402 2211.02,661.402 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,498.954 2211.02,498.954 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,336.507 2211.02,336.507 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1148.74 365.751,1148.74 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,986.296 365.751,986.296 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,823.849 365.751,823.849 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,661.402 365.751,661.402 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,498.954 365.751,498.954 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,336.507 365.751,336.507 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M298.909 1134.54 Q295.298 1134.54 293.469 1138.11 Q291.664 1141.65 291.664 1148.78 Q291.664 1155.88 293.469 1159.45 Q295.298 1162.99 298.909 1162.99 Q302.543 1162.99 304.349 1159.45 Q306.177 1155.88 306.177 1148.78 Q306.177 1141.65 304.349 1138.11 Q302.543 1134.54 298.909 1134.54 M298.909 1130.84 Q304.719 1130.84 307.775 1135.44 Q310.853 1140.03 310.853 1148.78 Q310.853 1157.5 307.775 1162.11 Q304.719 1166.69 298.909 1166.69 Q293.099 1166.69 290.02 1162.11 Q286.964 1157.5 286.964 1148.78 Q286.964 1140.03 290.02 1135.44 Q293.099 1130.84 298.909 1130.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M259.557 999.641 L267.196 999.641 L267.196 973.275 L258.886 974.942 L258.886 970.683 L267.15 969.016 L271.826 969.016 L271.826 999.641 L279.465 999.641 L279.465 1003.58 L259.557 1003.58 L259.557 999.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 972.095 Q295.298 972.095 293.469 975.659 Q291.664 979.201 291.664 986.331 Q291.664 993.437 293.469 997.002 Q295.298 1000.54 298.909 1000.54 Q302.543 1000.54 304.349 997.002 Q306.177 993.437 306.177 986.331 Q306.177 979.201 304.349 975.659 Q302.543 972.095 298.909 972.095 M298.909 968.391 Q304.719 968.391 307.775 972.997 Q310.853 977.581 310.853 986.331 Q310.853 995.057 307.775 999.664 Q304.719 1004.25 298.909 1004.25 Q293.099 1004.25 290.02 999.664 Q286.964 995.057 286.964 986.331 Q286.964 977.581 290.02 972.997 Q293.099 968.391 298.909 968.391 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M262.775 837.194 L279.094 837.194 L279.094 841.129 L257.15 841.129 L257.15 837.194 Q259.812 834.439 264.395 829.809 Q269.002 825.157 270.182 823.814 Q272.428 821.291 273.307 819.555 Q274.21 817.796 274.21 816.106 Q274.21 813.351 272.266 811.615 Q270.344 809.879 267.242 809.879 Q265.043 809.879 262.59 810.643 Q260.159 811.407 257.381 812.958 L257.381 808.235 Q260.205 807.101 262.659 806.522 Q265.113 805.944 267.15 805.944 Q272.52 805.944 275.715 808.629 Q278.909 811.314 278.909 815.805 Q278.909 817.934 278.099 819.856 Q277.312 821.754 275.205 824.346 Q274.627 825.018 271.525 828.235 Q268.423 831.43 262.775 837.194 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 809.647 Q295.298 809.647 293.469 813.212 Q291.664 816.754 291.664 823.883 Q291.664 830.99 293.469 834.555 Q295.298 838.096 298.909 838.096 Q302.543 838.096 304.349 834.555 Q306.177 830.99 306.177 823.883 Q306.177 816.754 304.349 813.212 Q302.543 809.647 298.909 809.647 M298.909 805.944 Q304.719 805.944 307.775 810.55 Q310.853 815.133 310.853 823.883 Q310.853 832.61 307.775 837.217 Q304.719 841.8 298.909 841.8 Q293.099 841.8 290.02 837.217 Q286.964 832.61 286.964 823.883 Q286.964 815.133 290.02 810.55 Q293.099 805.944 298.909 805.944 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M272.914 660.047 Q276.27 660.765 278.145 663.034 Q280.043 665.302 280.043 668.635 Q280.043 673.751 276.525 676.552 Q273.006 679.353 266.525 679.353 Q264.349 679.353 262.034 678.913 Q259.742 678.496 257.289 677.64 L257.289 673.126 Q259.233 674.26 261.548 674.839 Q263.863 675.418 266.386 675.418 Q270.784 675.418 273.076 673.682 Q275.39 671.946 275.39 668.635 Q275.39 665.58 273.238 663.867 Q271.108 662.131 267.289 662.131 L263.261 662.131 L263.261 658.288 L267.474 658.288 Q270.923 658.288 272.752 656.922 Q274.58 655.534 274.58 652.941 Q274.58 650.279 272.682 648.867 Q270.807 647.432 267.289 647.432 Q265.367 647.432 263.168 647.848 Q260.969 648.265 258.33 649.145 L258.33 644.978 Q260.992 644.237 263.307 643.867 Q265.645 643.497 267.705 643.497 Q273.029 643.497 276.131 645.927 Q279.233 648.335 279.233 652.455 Q279.233 655.325 277.59 657.316 Q275.946 659.284 272.914 660.047 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 647.2 Q295.298 647.2 293.469 650.765 Q291.664 654.307 291.664 661.436 Q291.664 668.543 293.469 672.108 Q295.298 675.649 298.909 675.649 Q302.543 675.649 304.349 672.108 Q306.177 668.543 306.177 661.436 Q306.177 654.307 304.349 650.765 Q302.543 647.2 298.909 647.2 M298.909 643.497 Q304.719 643.497 307.775 648.103 Q310.853 652.686 310.853 661.436 Q310.853 670.163 307.775 674.77 Q304.719 679.353 298.909 679.353 Q293.099 679.353 290.02 674.77 Q286.964 670.163 286.964 661.436 Q286.964 652.686 290.02 648.103 Q293.099 643.497 298.909 643.497 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M271.594 485.749 L259.789 504.197 L271.594 504.197 L271.594 485.749 M270.367 481.674 L276.247 481.674 L276.247 504.197 L281.177 504.197 L281.177 508.086 L276.247 508.086 L276.247 516.234 L271.594 516.234 L271.594 508.086 L255.992 508.086 L255.992 503.573 L270.367 481.674 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 484.753 Q295.298 484.753 293.469 488.318 Q291.664 491.86 291.664 498.989 Q291.664 506.096 293.469 509.66 Q295.298 513.202 298.909 513.202 Q302.543 513.202 304.349 509.66 Q306.177 506.096 306.177 498.989 Q306.177 491.86 304.349 488.318 Q302.543 484.753 298.909 484.753 M298.909 481.049 Q304.719 481.049 307.775 485.656 Q310.853 490.239 310.853 498.989 Q310.853 507.716 307.775 512.322 Q304.719 516.906 298.909 516.906 Q293.099 516.906 290.02 512.322 Q286.964 507.716 286.964 498.989 Q286.964 490.239 290.02 485.656 Q293.099 481.049 298.909 481.049 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M258.793 319.227 L277.15 319.227 L277.15 323.163 L263.076 323.163 L263.076 331.635 Q264.094 331.287 265.113 331.125 Q266.131 330.94 267.15 330.94 Q272.937 330.94 276.316 334.112 Q279.696 337.283 279.696 342.699 Q279.696 348.278 276.224 351.38 Q272.752 354.459 266.432 354.459 Q264.256 354.459 261.988 354.088 Q259.742 353.718 257.335 352.977 L257.335 348.278 Q259.418 349.412 261.641 349.968 Q263.863 350.523 266.34 350.523 Q270.344 350.523 272.682 348.417 Q275.02 346.311 275.02 342.699 Q275.02 339.088 272.682 336.982 Q270.344 334.875 266.34 334.875 Q264.465 334.875 262.59 335.292 Q260.738 335.709 258.793 336.588 L258.793 319.227 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 322.306 Q295.298 322.306 293.469 325.871 Q291.664 329.412 291.664 336.542 Q291.664 343.649 293.469 347.213 Q295.298 350.755 298.909 350.755 Q302.543 350.755 304.349 347.213 Q306.177 343.649 306.177 336.542 Q306.177 329.412 304.349 325.871 Q302.543 322.306 298.909 322.306 M298.909 318.602 Q304.719 318.602 307.775 323.209 Q310.853 327.792 310.853 336.542 Q310.853 345.269 307.775 349.875 Q304.719 354.459 298.909 354.459 Q293.099 354.459 290.02 349.875 Q286.964 345.269 286.964 336.542 Q286.964 327.792 290.02 323.209 Q293.099 318.602 298.909 318.602 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip762)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1155.39 400.199,1038.95 400.786,934.454 401.372,834.131 401.958,742.197 402.545,662.07 403.131,586.764 403.718,516.465 404.304,456.138 404.891,399.748 405.477,348.763 406.063,470.451 406.65,423.071 407.236,378.985 407.823,339.498 408.409,304.314 408.995,273.151 409.582,303.962 410.168,277.633 410.755,255.765 411.341,283.186 411.927,262.968 412.514,246.458 413.1,231.895 413.687,219.895 414.273,245.176 414.86,268.442 415.446,261.245 416.032,257.989 416.619,255.028 417.205,253.926 417.792,277.772 418.378,279.739 418.964,282.659 419.551,286.917 420.137,292.031 420.724,331.761 421.31,337.81 421.896,359.201 422.483,366.714 423.069,375.404 423.656,397.648 424.242,418.57 424.829,439.273 425.415,448.706 426.001,468.876 426.588,478.833 427.174,498.169 427.761,542.413 428.347,559.78 428.933,584.766 429.52,600.298 430.106,622.598 430.693,637.739 431.279,664.527 431.865,677.816 432.452,685.201 433.038,692.281 433.625,716.432 434.211,723.703 434.798,740.948 435.384,752.805 435.97,769.04 436.557,780.501 437.143,787.795 437.73,803.791 438.316,831.559 438.902,849.609 439.489,855.47 440.075,865.453 440.662,878.867 441.248,888.725 441.835,894.819 442.421,903.521 443.007,908.856 443.594,917.93 444.18,926.188 444.767,937.737 445.353,948.996 445.939,954.117 446.526,973.233 447.112,977.432 447.699,984.927 448.285,989.031 448.871,998.719 449.458,1003.4 450.044,1012.77 450.631,1019.11 451.217,1023.13 451.804,1032.18 452.39,1041.04 452.976,1046.95 453.563,1055.23 454.149,1062.9 454.736,1068.23 455.322,1073.5 455.908,1082.69 456.495,1089.34 457.081,1096.21 457.668,1100.75 458.254,1109.28 458.84,1113.47 459.427,1115.88 460.013,1117.65 460.6,1119.52 461.186,1125.54 461.773,1127.69 462.359,1129.63 462.945,1133.77 463.532,1139.18 464.118,1143.12 464.705,1146.5 465.291,1151.8 465.877,1155.21 466.464,1162.06 467.05,1164.82 467.637,1165.81 468.223,1170.49 468.809,1174.95 469.396,1174.16 469.982,1176.73 470.569,1179.27 471.155,1186.76 471.742,1187.1 472.328,1187.4 472.914,1196.22 473.501,1196.49 474.087,1197.98 474.674,1201.36 475.26,1204.55 475.846,1204.54 476.433,1204.95 477.019,1206.69 477.606,1211 478.192,1212.51 478.778,1213.93 479.365,1213.67 479.951,1215.08 480.538,1213.5 481.124,1213.51 481.711,1218.3 482.297,1217.99 482.883,1218.36 483.47,1217.15 484.056,1218.56 484.643,1218.35 485.229,1221.53 485.815,1221.39 486.402,1224.37 486.988,1224.34 487.575,1225.81 488.161,1223.05 488.748,1226.09 489.334,1225.88 489.92,1225.81 490.507,1231.42 491.093,1235.71 491.68,1238.33 492.266,1239.33 492.852,1234.32 493.439,1233.83 494.025,1233.56 494.612,1234.56 495.198,1235.63 495.784,1238.09 496.371,1237.53 496.957,1239.68 497.544,1238.97 498.13,1238.41 498.717,1240.82 499.303,1240.21 499.889,1241.03 500.476,1242.08 501.062,1243.15 501.649,1246.61 502.235,1248.76 502.821,1246.43 503.408,1247.23 503.994,1246.44 504.581,1244.38 505.167,1243.97 505.753,1245.17 506.34,1244.56 506.926,1243.51 507.513,1244.41 508.099,1243.65 508.686,1241.83 509.272,1245.35 509.858,1248.82 510.445,1246.83 511.031,1247.56 511.618,1243.98 512.204,1244.89 512.79,1248.4 513.377,1246.35 513.963,1245.52 514.55,1242.03 515.136,1240.55 515.722,1240.46 516.309,1239.01 516.895,1238.69 517.482,1238.59 518.068,1241.37 518.655,1240.86 519.241,1242.11 519.827,1240.22 520.414,1238.72 521,1235.74 521.587,1235.41 522.173,1238.23 522.759,1240.95 523.346,1243.47 523.932,1241.71 524.519,1241.52 525.105,1241 525.691,1242.12 526.278,1241.8 526.864,1244.48 527.451,1245.21 528.037,1247.13 528.624,1246.39 529.21,1245.66 529.796,1245.01 530.383,1248.33 530.969,1247.46 531.556,1244.26 532.142,1244.01 532.728,1242.09 533.315,1240.29 533.901,1239.82 534.488,1240.52 535.074,1244.06 535.661,1244.64 536.247,1246.99 536.833,1246.39 537.42,1245.83 538.006,1249.11 538.593,1250.53 539.179,1245.63 539.765,1246.58 540.352,1245.71 540.938,1244.97 541.525,1246.78 542.111,1245.98 542.697,1245.52 543.284,1247.4 543.87,1246.51 544.457,1245.92 545.043,1245.14 545.63,1244.42 546.216,1243.69 546.802,1243.23 547.389,1242.74 547.975,1243.18 548.562,1242.55 549.148,1242.1 549.734,1242.79 550.321,1241.09 550.907,1244.89 551.494,1246.62 552.08,1249.67 552.666,1247.34 553.253,1249.34 553.839,1249.72 554.426,1248.97 555.012,1249.37 555.599,1247.07 556.185,1244.82 556.771,1242.77 557.358,1239.46 557.944,1241.66 558.531,1241.12 559.117,1241.91 559.703,1241.28 560.29,1238.3 560.876,1239.11 561.463,1237.24 562.049,1232.78 562.635,1235.06 563.222,1236.09 563.808,1238.73 564.395,1239.76 564.981,1236.48 565.568,1236.14 566.154,1234.64 566.74,1234.59 567.327,1234.18 567.913,1233.83 568.5,1233.25 569.086,1231.41 569.672,1232.65 570.259,1232.33 570.845,1233.56 571.432,1231.7 572.018,1234.18 572.605,1233.99 573.191,1232.54 573.777,1229.47 574.364,1229.44 574.95,1229.59 575.537,1229.23 576.123,1228.04 576.709,1229.4 577.296,1229.42 577.882,1232.05 578.469,1230.64 579.055,1227.86 579.641,1227.84 580.228,1227.91 580.814,1227.98 581.401,1227.94 581.987,1229.3 582.574,1229.12 583.16,1228.57 583.746,1228.53 584.333,1231.46 584.919,1232.68 585.506,1232.37 586.092,1229.27 586.678,1227.65 587.265,1229 587.851,1228.85 588.438,1224.76 589.024,1227.68 589.61,1231.4 590.197,1232.56 590.783,1236.17 591.37,1236.99 591.956,1237.86 592.543,1236.01 593.129,1236.77 593.715,1233.6 594.302,1231.71 594.888,1232.55 595.475,1233.71 596.061,1235.96 596.647,1232.81 597.234,1232.44 597.82,1232.27 598.407,1233.25 598.993,1231.65 599.579,1232.6 600.166,1232.2 600.752,1230.78 601.339,1234.39 601.925,1235.37 602.512,1233.51 603.098,1234.23 603.684,1233.51 604.271,1230.4 604.857,1228.61 605.444,1227.23 606.03,1227.02 606.616,1226.78 607.203,1225.35 607.789,1225.29 608.376,1226.74 608.962,1225.22 609.548,1225.29 610.135,1225.27 610.721,1222.61 611.308,1222.51 611.894,1222.59 612.481,1221.53 613.067,1221.46 613.653,1221.78 614.24,1221.94 614.826,1220.69 615.413,1219.98 615.999,1223.18 616.585,1223.11 617.172,1225.94 617.758,1224.61 618.345,1226.08 618.931,1225.73 619.518,1225.59 620.104,1225.78 620.69,1225.45 621.277,1228.12 621.863,1229.45 622.45,1227.84 623.036,1227.52 623.622,1227.28 624.209,1226.99 624.795,1226.77 625.382,1228.27 625.968,1228.06 626.554,1226.63 627.141,1222.45 627.727,1223.89 628.314,1222.58 628.9,1222.65 629.487,1223.94 630.073,1225.13 630.659,1222.64 631.246,1222.85 631.832,1224.47 632.419,1225.91 633.005,1226.97 633.591,1225.21 634.178,1225.03 634.764,1224.73 635.351,1224.58 635.937,1225.89 636.523,1225.95 637.11,1228.31 637.696,1226.48 638.283,1226.59 638.869,1226.44 639.456,1224.76 640.042,1224.49 640.628,1226.7 641.215,1226.41 641.801,1226.23 642.388,1227.45 642.974,1228.35 643.56,1230.77 644.147,1233.02 644.733,1233.56 645.32,1231.76 645.906,1232.85 646.492,1232.4 647.079,1233.26 647.665,1234.02 648.252,1236.2 648.838,1234.1 649.425,1233.27 650.011,1231.15 650.597,1230.52 651.184,1229.89 651.77,1230.84 652.357,1229.19 652.943,1228.69 653.529,1230.92 654.116,1230.27 654.702,1228.4 655.289,1228.25 655.875,1228.2 656.462,1225.05 657.048,1223.36 657.634,1220.85 658.221,1222.13 658.807,1221.88 659.394,1223.04 659.98,1223.37 660.566,1224.7 661.153,1223.34 661.739,1222.12 662.326,1224.97 662.912,1226.01 663.498,1227.14 664.085,1226.87 664.671,1226.35 665.258,1224.68 665.844,1224.43 666.431,1224.21 667.017,1222.62 667.603,1222.71 668.19,1218.51 668.776,1218.46 669.363,1219.92 669.949,1219.72 670.535,1218.68 671.122,1218.7 671.708,1217.36 672.295,1217.51 672.881,1217.68 673.467,1216.54 674.054,1217.91 674.64,1218.21 675.227,1219.6 675.813,1219.66 676.4,1218.29 676.986,1218.61 677.572,1220.26 678.159,1223.07 678.745,1225.62 679.332,1226.61 679.918,1226.22 680.504,1227.34 681.091,1228.46 681.677,1232.12 682.264,1231.4 682.85,1229.63 683.436,1231.91 684.023,1233.83 684.609,1233.19 685.196,1232.97 685.782,1232.03 686.369,1229.92 686.955,1229.36 687.541,1229 688.128,1228.52 688.714,1226.7 689.301,1225.02 689.887,1225.91 690.473,1225.73 691.06,1226.85 691.646,1226.29 692.233,1227.03 692.819,1226.6 693.405,1221.11 693.992,1221.07 694.578,1222.2 695.165,1220.46 695.751,1220.11 696.338,1220.21 696.924,1220.13 697.51,1221.19 698.097,1219.8 698.683,1219.8 699.27,1219.88 699.856,1218.8 700.442,1218.95 701.029,1217.57 701.615,1220.4 702.202,1221.37 702.788,1222.92 703.375,1223.94 703.961,1223.94 704.547,1223.51 705.134,1220.7 705.72,1221.86 706.307,1220.21 706.893,1218.99 707.479,1221.83 708.066,1221.57 708.652,1218.79 709.239,1222.69 709.825,1222.4 710.411,1223.6 710.998,1224.59 711.584,1224.41 712.171,1226.66 712.757,1226.05 713.344,1228.17 713.93,1227.77 714.516,1228.92 715.103,1225.81 715.689,1225.4 716.276,1226.3 716.862,1224.68 717.448,1224.57 718.035,1223.04 718.621,1222.63 719.208,1223.42 719.794,1223.01 720.38,1221.31 720.967,1224.96 721.553,1223.03 722.14,1222.71 722.726,1221.05 723.313,1220.71 723.899,1219.19 724.485,1220.59 725.072,1216.46 725.658,1215.28 726.245,1211.41 726.831,1211.73 727.417,1210.98 728.004,1212.86 728.59,1216.02 729.177,1215.09 729.763,1215.28 730.349,1215.46 730.936,1219.65 731.522,1219.74 732.109,1220.08 732.695,1221.26 733.282,1223.61 733.868,1223.42 734.454,1224.37 735.041,1224.05 735.627,1223.73 736.214,1222.07 736.8,1223.1 737.386,1222.31 737.973,1220.65 738.559,1223.26 739.146,1225.62 739.732,1225.66 740.318,1225.26 740.905,1226.13 741.491,1225.74 742.078,1226.87 742.664,1224.76 743.251,1224.43 743.837,1225.47 744.423,1223.78 745.01,1220.86 745.596,1222.01 746.183,1222.95 746.769,1222.95 747.355,1222.52 747.942,1221.16 748.528,1222.24 749.115,1220.5 749.701,1220.4 750.288,1222.85 750.874,1222.58 751.46,1221.09 752.047,1219.25 752.633,1219.14 753.22,1218.88 753.806,1217.7 754.392,1214.91 754.979,1216.35 755.565,1217.52 756.152,1217.34 756.738,1217.3 757.324,1218.55 757.911,1217.25 758.497,1218.86 759.084,1220.11 759.67,1220.18 760.257,1219.94 760.843,1219.84 761.429,1219.93 762.016,1222.49 762.602,1223.77 763.189,1223.27 763.775,1221.74 764.361,1217.42 764.948,1217.58 765.534,1216.53 766.121,1217.95 766.707,1219.01 767.293,1217.7 767.88,1214.89 768.466,1213.5 769.053,1212.52 769.639,1211.65 770.226,1210.64 770.812,1207.23 771.398,1204.92 771.985,1205.61 772.571,1206.17 773.158,1205.2 773.744,1205.75 774.33,1208.8 774.917,1210.55 775.503,1212.26 776.09,1214.95 776.676,1217.87 777.262,1218 777.849,1220.69 778.435,1221.97 779.022,1223.14 779.608,1226.88 780.195,1226.43 780.781,1223.24 781.367,1222.83 781.954,1222.63 782.54,1219.79 783.127,1219.58 783.713,1219.5 784.299,1220.86 784.886,1219.18 785.472,1216.37 786.059,1217.51 786.645,1218.63 787.232,1219.71 787.818,1220.82 788.404,1220.59 788.991,1223.21 789.577,1224.2 790.164,1222.82 790.75,1220.99 791.336,1219.63 791.923,1220.8 792.509,1221.96 793.096,1221.79 793.682,1221.49 794.268,1221.2 794.855,1221.29 795.441,1221.02 796.028,1222.21 796.614,1223.26 797.201,1220.18 797.787,1219.73 798.373,1223.28 798.96,1221.69 799.546,1217.43 800.133,1218.78 800.719,1217.46 801.305,1218.83 801.892,1220.17 802.478,1220.16 803.065,1216.17 803.651,1215.95 804.237,1217.14 804.824,1216.92 805.41,1219.62 805.997,1220.83 806.583,1219.26 807.17,1223.08 807.756,1219.88 808.342,1218.39 808.929,1218.15 809.515,1219.41 810.102,1220.45 810.688,1217.81 811.274,1219.06 811.861,1220.09 812.447,1220.17 813.034,1221.23 813.62,1219.89 814.206,1218.63 814.793,1218.56 815.379,1217.39 815.966,1218.41 816.552,1216.77 817.139,1217.12 817.725,1217.1 818.311,1219.87 818.898,1218.43 819.484,1218.27 820.071,1217.04 820.657,1215.71 821.243,1214.41 821.83,1213.15 822.416,1214.37 823.003,1219.82 823.589,1218.26 824.175,1218.31 824.762,1220.61 825.348,1223.09 825.935,1220.14 826.521,1221.12 827.108,1215.57 827.694,1211.58 828.28,1211.6 828.867,1213.19 829.453,1210.51 830.04,1217.34 830.626,1221.14 831.212,1223.42 831.799,1225.48 832.385,1224.98 832.972,1225.9 833.558,1225.64 834.145,1223.73 834.731,1223.27 835.317,1221.7 835.904,1220.01 836.49,1219.67 837.077,1223.07 837.663,1221.65 838.249,1221.49 838.836,1224.04 839.422,1222.21 840.009,1222.09 840.595,1220.07 841.181,1221.15 841.768,1222.44 842.354,1222.24 842.941,1220.67 843.527,1219.3 844.114,1217.91 844.7,1217.48 845.286,1217.48 845.873,1217.4 846.459,1215.76 847.046,1215.63 847.632,1219.71 848.218,1219.61 848.805,1218.04 849.391,1217.68 849.978,1217.58 850.564,1216.3 851.15,1217.67 851.737,1216.06 852.323,1214.69 852.91,1219.94 853.496,1218.15 854.083,1215.65 854.669,1215.8 855.255,1214.41 855.842,1215.99 856.428,1214.85 857.015,1213.67 857.601,1215.11 858.187,1213.88 858.774,1214.17 859.36,1216.67 859.947,1220.65 860.533,1219.34 861.119,1216.63 861.706,1216.6 862.292,1213.79 862.879,1215.08 863.465,1213.88 864.052,1213.92 864.638,1213.99 865.224,1211.47 865.811,1212.89 866.397,1215.63 866.984,1215.32 867.57,1214.24 868.156,1214.28 868.743,1217.01 869.329,1219.58 869.916,1220.72 870.502,1218.93 871.089,1221.77 871.675,1221.61 872.261,1220 872.848,1218.51 873.434,1217.13 874.021,1215.66 874.607,1215.86 875.193,1213.77 875.78,1215.29 876.366,1219.16 876.953,1213.86 877.539,1213.8 878.125,1214.12 878.712,1211.43 879.298,1210.55 879.885,1209.8 880.471,1209.82 881.058,1207.38 881.644,1206.46 882.23,1207.05 882.817,1210.29 883.403,1212.06 883.99,1213.47 884.576,1214.83 885.162,1213.56 885.749,1213.55 886.335,1208.42 886.922,1212.79 887.508,1214.26 888.094,1211.43 888.681,1213.05 889.267,1215.82 889.854,1215.91 890.44,1217.37 891.027,1215.78 891.613,1214.55 892.199,1213.44 892.786,1213.33 893.372,1214.55 893.959,1218.33 894.545,1216.66 895.131,1215.31 895.718,1217.8 896.304,1220.45 896.891,1218.49 897.477,1217.04 898.063,1221.03 898.65,1221.01 899.236,1222.07 899.823,1219.14 900.409,1217.56 900.996,1216.15 901.582,1215.94 902.168,1214.51 902.755,1214.38 903.341,1214.5 903.928,1214.39 904.514,1214.53 905.1,1217.22 905.687,1212.68 906.273,1215.5 906.86,1216.66 907.446,1215.24 908.032,1219.21 908.619,1217.79 909.205,1217.71 909.792,1217.36 910.378,1217.43 910.965,1216.06 911.551,1215.95 912.137,1213.39 912.724,1212.29 913.31,1214.19 913.897,1218 914.483,1217.78 915.069,1216.41 915.656,1217.82 916.242,1222.6 916.829,1224.61 917.415,1225.58 918.002,1223.68 918.588,1222.01 919.174,1220.47 919.761,1224.13 920.347,1223.91 920.934,1220.95 921.52,1222.06 922.106,1221.82 922.693,1219.98 923.279,1219.82 923.866,1220.86 924.452,1215.37 925.038,1215.29 925.625,1216.48 926.211,1215.27 926.798,1217.77 927.384,1217.3 927.971,1221.18 928.557,1217.04 929.143,1218.24 929.73,1221 930.316,1220.51 930.903,1218.86 931.489,1218.71 932.075,1218.33 932.662,1218.29 933.248,1217.02 933.835,1218.57 934.421,1218.61 935.007,1218.44 935.594,1218.44 936.18,1218.18 936.767,1219.38 937.353,1217.81 937.94,1215.06 938.526,1216.11 939.112,1214.7 939.699,1213.45 940.285,1214.69 940.872,1215.94 941.458,1217.33 942.044,1215.85 942.631,1215.6 943.217,1214.52 943.804,1213.08 944.39,1213.06 944.976,1211.56 945.563,1210.31 946.149,1210.56 946.736,1209.3 947.322,1209.48 947.909,1212.08 948.495,1209.44 949.081,1208.61 949.668,1208.97 950.254,1208.98 950.841,1208.02 951.427,1203.23 952.013,1209.09 952.6,1210.47 953.186,1211.9 953.773,1210.59 954.359,1212.12 954.945,1213.54 955.532,1209.78 956.118,1208.63 956.705,1210.3 957.291,1210.64 957.878,1208.35 958.464,1210.27 959.05,1209.3 959.637,1209.55 960.223,1209.99 960.81,1210.21 961.396,1208.08 961.982,1209.75 962.569,1211.48 963.155,1210.28 963.742,1211.88 964.328,1212.12 964.915,1211.99 965.501,1212.28 966.087,1211.27 966.674,1214.13 967.26,1215.45 967.847,1215.3 968.433,1215.43 969.019,1215.45 969.606,1216.86 970.192,1218.31 970.779,1218.07 971.365,1215.34 971.951,1216.55 972.538,1216.59 973.124,1217.8 973.711,1217.47 974.297,1215.78 974.884,1218.5 975.47,1217.16 976.056,1211.9 976.643,1206.77 977.229,1209.76 977.816,1207.11 978.402,1207.56 978.988,1206.76 979.575,1206.96 980.161,1207.63 980.748,1210.57 981.334,1212.06 981.92,1208.17 982.507,1209.89 983.093,1209.2 983.68,1209.47 984.266,1208.53 984.853,1210.21 985.439,1210.27 986.025,1208 986.612,1208.53 987.198,1207.6 987.785,1209.05 988.371,1211.06 988.957,1212.83 989.544,1212.65 990.13,1215.35 990.717,1212.62 991.303,1211.65 991.889,1210.22 992.476,1210.25 993.062,1210.59 993.649,1209.43 994.235,1211.28 994.822,1215.36 995.408,1214.06 995.994,1214.04 996.581,1212.61 997.167,1212.75 997.754,1209.18 998.34,1206.72 998.926,1207.29 999.513,1207.63 1000.1,1206.69 1000.69,1206.9 1001.27,1210.05 1001.86,1210.3 1002.44,1208 1003.03,1209.31 1003.62,1209.63 1004.2,1212.38 1004.79,1212.49 1005.38,1211.28 1005.96,1208.72 1006.55,1206.38 1007.14,1208.36 1007.72,1208.66 1008.31,1209.28 1008.9,1213.47 1009.48,1213.63 1010.07,1215.12 1010.65,1213.48 1011.24,1213.65 1011.83,1215.12 1012.41,1215.26 1013,1215.3 1013.59,1216.75 1014.17,1219.23 1014.76,1221.54 1015.35,1223.96 1015.93,1222.05 1016.52,1221.48 1017.11,1222.18 1017.69,1222.16 1018.28,1219.17 1018.86,1217.37 1019.45,1217.28 1020.04,1219.84 1020.62,1220.8 1021.21,1220.69 1021.8,1221.96 1022.38,1220.4 1022.97,1221.39 1023.56,1220.92 1024.14,1220.73 1024.73,1224.3 1025.32,1226.4 1025.9,1222.97 1026.49,1221.1 1027.07,1220.68 1027.66,1218.84 1028.25,1217.13 1028.83,1211.59 1029.42,1208.85 1030.01,1210.53 1030.59,1212.24 1031.18,1212.27 1031.77,1213.71 1032.35,1215 1032.94,1212.46 1033.52,1212.49 1034.11,1212.48 1034.7,1211.21 1035.28,1212.78 1035.87,1212.91 1036.46,1210.39 1037.04,1210.57 1037.63,1209.58 1038.22,1209.74 1038.8,1210.11 1039.39,1210.42 1039.98,1211.89 1040.56,1213.28 1041.15,1213.38 1041.73,1214.64 1042.32,1215.08 1042.91,1213.7 1043.49,1212.53 1044.08,1215.13 1044.67,1214.82 1045.25,1216.06 1045.84,1215.67 1046.43,1215.62 1047.01,1217.17 1047.6,1220.9 1048.19,1220.51 1048.77,1218.86 1049.36,1220.02 1049.94,1219.75 1050.53,1220.58 1051.12,1218.81 1051.7,1219.75 1052.29,1217.06 1052.88,1219.53 1053.46,1219.25 1054.05,1219.09 1054.64,1218.94 1055.22,1221.58 1055.81,1220.1 1056.39,1218.71 1056.98,1217.03 1057.57,1217.92 1058.15,1219.09 1058.74,1218.86 1059.33,1220.07 1059.91,1219.87 1060.5,1220.7 1061.09,1221.59 1061.67,1221.23 1062.26,1220.76 1062.85,1224.15 1063.43,1219.36 1064.02,1216.73 1064.6,1216.65 1065.19,1216.74 1065.78,1217.99 1066.36,1220.68 1066.95,1221.6 1067.54,1220.01 1068.12,1218.34 1068.71,1216.47 1069.3,1215.14 1069.88,1216.59 1070.47,1216.5 1071.06,1216.41 1071.64,1216.41 1072.23,1218.85 1072.81,1218.47 1073.4,1216.93 1073.99,1218.08 1074.57,1217.84 1075.16,1216.08 1075.75,1217.27 1076.33,1215.83 1076.92,1215.7 1077.51,1215.64 1078.09,1214.16 1078.68,1216.48 1079.26,1216.06 1079.85,1215.96 1080.44,1217.36 1081.02,1219.75 1081.61,1218.04 1082.2,1217.89 1082.78,1215.04 1083.37,1216.27 1083.96,1216.28 1084.54,1216.17 1085.13,1218.52 1085.72,1218.49 1086.3,1219.63 1086.89,1220.4 1087.47,1220.19 1088.06,1222.1 1088.65,1221.57 1089.23,1222.54 1089.82,1222.54 1090.41,1223.61 1090.99,1224.28 1091.58,1225 1092.17,1222.02 1092.75,1225.1 1093.34,1219.17 1093.93,1219.95 1094.51,1218.64 1095.1,1217.08 1095.68,1214.17 1096.27,1213.99 1096.86,1216.66 1097.44,1216.61 1098.03,1217.89 1098.62,1218.9 1099.2,1218.32 1099.79,1221.73 1100.38,1222.53 1100.96,1220.88 1101.55,1219.43 1102.14,1218.89 1102.72,1216.11 1103.31,1215.81 1103.89,1211.54 1104.48,1212.9 1105.07,1212.79 1105.65,1207.68 1106.24,1207.85 1106.83,1208.06 1107.41,1209.55 1108,1209.86 1108.59,1209.93 1109.17,1208.92 1109.76,1207.86 1110.34,1205.29 1110.93,1205.76 1111.52,1206.5 1112.1,1206.69 1112.69,1205.75 1113.28,1204.88 1113.86,1202.86 1114.45,1203.41 1115.04,1203.94 1115.62,1204.37 1116.21,1204.55 1116.8,1204.97 1117.38,1202.82 1117.97,1200.8 1118.55,1201.29 1119.14,1202.3 1119.73,1201.84 1120.31,1201.37 1120.9,1200.94 1121.49,1201.76 1122.07,1202.2 1122.66,1203.06 1123.25,1205.52 1123.83,1206.51 1124.42,1208.21 1125.01,1210.23 1125.59,1211.93 1126.18,1213.61 1126.76,1215.37 1127.35,1213.87 1127.94,1213.77 1128.52,1212.5 1129.11,1211.36 1129.7,1209.04 1130.28,1208.1 1130.87,1207.37 1131.46,1206.45 1132.04,1205.5 1132.63,1207.47 1133.21,1206.75 1133.8,1207.39 1134.39,1203.87 1134.97,1207.1 1135.56,1205.07 1136.15,1209.52 1136.73,1211.2 1137.32,1210.07 1137.91,1210.8 1138.49,1209.66 1139.08,1210.05 1139.67,1209.13 1140.25,1207.99 1140.84,1209.73 1141.42,1209.92 1142.01,1209.03 1142.6,1209.65 1143.18,1206.15 1143.77,1209.27 1144.36,1213.72 1144.94,1211.31 1145.53,1211.54 1146.12,1214.49 1146.7,1214.57 1147.29,1213.24 1147.88,1211.95 1148.46,1213.37 1149.05,1214.79 1149.63,1216.04 1150.22,1216.04 1150.81,1215.82 1151.39,1215.86 1151.98,1215.94 1152.57,1221.17 1153.15,1222.01 1153.74,1220.31 1154.33,1218.77 1154.91,1219.9 1155.5,1221.04 1156.09,1220.64 1156.67,1220.09 1157.26,1221 1157.84,1219.19 1158.43,1217.48 1159.02,1218.78 1159.6,1218.65 1160.19,1218.46 1160.78,1217.02 1161.36,1219.74 1161.95,1218.13 1162.54,1213.94 1163.12,1211.39 1163.71,1211.46 1164.29,1210.3 1164.88,1213.2 1165.47,1213.2 1166.05,1216.01 1166.64,1217.07 1167.23,1216.94 1167.81,1215.33 1168.4,1214.96 1168.99,1215.02 1169.57,1215.22 1170.16,1213.8 1170.75,1214.09 1171.33,1217.97 1171.92,1216.37 1172.5,1213.42 1173.09,1214.65 1173.68,1213.06 1174.26,1211.86 1174.85,1210.46 1175.44,1211.92 1176.02,1213.47 1176.61,1216.11 1177.2,1219.97 1177.78,1218.54 1178.37,1219.5 1178.96,1217.75 1179.54,1220.11 1180.13,1220.84 1180.71,1222.06 1181.3,1223.06 1181.89,1221.17 1182.47,1223.59 1183.06,1224.23 1183.65,1223.6 1184.23,1224.55 1184.82,1222.89 1185.41,1225.09 1185.99,1225.48 1186.58,1219.52 1187.16,1221.68 1187.75,1221.16 1188.34,1220.59 1188.92,1220.16 1189.51,1223.87 1190.1,1222.26 1190.68,1219.3 1191.27,1212.29 1191.86,1212.25 1192.44,1212.38 1193.03,1211 1193.62,1209.73 1194.2,1208.61 1194.79,1210.3 1195.37,1208.22 1195.96,1208.59 1196.55,1210.13 1197.13,1211.34 1197.72,1210.36 1198.31,1213.1 1198.89,1211.37 1199.48,1214.19 1200.07,1214.2 1200.65,1211.54 1201.24,1212.81 1201.83,1211.58 1202.41,1210.39 1203,1210.69 1203.58,1206.74 1204.17,1208.56 1204.76,1208.82 1205.34,1210.31 1205.93,1209.39 1206.52,1208.07 1207.1,1209.6 1207.69,1210.87 1208.28,1210.97 1208.86,1212.49 1209.45,1211.12 1210.03,1211.56 1210.62,1208.99 1211.21,1211.66 1211.79,1211.73 1212.38,1211.85 1212.97,1213.44 1213.55,1214.73 1214.14,1215.67 1214.73,1215.7 1215.31,1214.42 1215.9,1214.44 1216.49,1215.76 1217.07,1215.97 1217.66,1215.95 1218.24,1217.28 1218.83,1218.09 1219.42,1216.48 1220,1216.37 1220.59,1216.51 1221.18,1217.66 1221.76,1215 1222.35,1216.11 1222.94,1217.53 1223.52,1218.48 1224.11,1217.08 1224.7,1214.17 1225.28,1214.09 1225.87,1213.95 1226.45,1211.23 1227.04,1211.54 1227.63,1213.01 1228.21,1213 1228.8,1212.13 1229.39,1212.22 1229.97,1213.76 1230.56,1215.12 1231.15,1212.53 1231.73,1212.3 1232.32,1214.99 1232.91,1214.91 1233.49,1211.97 1234.08,1210.59 1234.66,1209.09 1235.25,1209.44 1235.84,1208.51 1236.42,1209 1237.01,1210.95 1237.6,1214.32 1238.18,1215.34 1238.77,1213.83 1239.36,1211.03 1239.94,1210.05 1240.53,1209.07 1241.11,1214.6 1241.7,1214.74 1242.29,1214.85 1242.87,1216.14 1243.46,1217.39 1244.05,1217.39 1244.63,1217.08 1245.22,1215.68 1245.81,1218.11 1246.39,1217.87 1246.98,1220.18 1247.57,1218.45 1248.15,1218.14 1248.74,1217.92 1249.32,1216.49 1249.91,1216.58 1250.5,1215.15 1251.08,1213.86 1251.67,1213.96 1252.26,1214.02 1252.84,1212.66 1253.43,1216.47 1254.02,1215.04 1254.6,1213.8 1255.19,1217.75 1255.78,1217.81 1256.36,1216.31 1256.95,1214.89 1257.53,1212.31 1258.12,1213.66 1258.71,1213.55 1259.29,1212.35 1259.88,1212.69 1260.47,1211.28 1261.05,1212.52 1261.64,1211.4 1262.23,1216.92 1262.81,1216.84 1263.4,1215.55 1263.98,1216.9 1264.57,1215.75 1265.16,1215.3 1265.74,1213.95 1266.33,1213.79 1266.92,1210.96 1267.5,1210.96 1268.09,1211.14 1268.68,1208.8 1269.26,1211.84 1269.85,1217.69 1270.44,1213.59 1271.02,1213.81 1271.61,1212.53 1272.19,1209.68 1272.78,1209.84 1273.37,1212.83 1273.95,1213.13 1274.54,1214.38 1275.13,1217.27 1275.71,1218.26 1276.3,1216.63 1276.89,1215.01 1277.47,1213.93 1278.06,1216.62 1278.65,1215.61 1279.23,1218.17 1279.82,1217.97 1280.4,1220.28 1280.99,1218.41 1281.58,1220.82 1282.16,1213.7 1282.75,1208.5 1283.34,1206.16 1283.92,1206.46 1284.51,1201.48 1285.1,1202.3 1285.68,1202.99 1286.27,1203.5 1286.86,1203 1287.44,1201.33 1288.03,1202.15 1288.61,1203.01 1289.2,1207.69 1289.79,1208.04 1290.37,1210.99 1290.96,1211.48 1291.55,1212.78 1292.13,1215.46 1292.72,1216.54 1293.31,1216.42 1293.89,1215.07 1294.48,1215.14 1295.06,1213.62 1295.65,1210.89 1296.24,1209.65 1296.82,1209.94 1297.41,1210.1 1298,1212.95 1298.58,1210.5 1299.17,1210.7 1299.76,1209.53 1300.34,1211.06 1300.93,1212.68 1301.52,1212.45 1302.1,1215.3 1302.69,1210.08 1303.27,1212.98 1303.86,1214.4 1304.45,1217.05 1305.03,1218.44 1305.62,1217.03 1306.21,1216.96 1306.79,1214.21 1307.38,1214.27 1307.97,1212.97 1308.55,1212.92 1309.14,1209.35 1309.73,1209.97 1310.31,1208.95 1310.9,1210.61 1311.48,1210.95 1312.07,1212.27 1312.66,1213.79 1313.24,1212.41 1313.83,1211.12 1314.42,1212.57 1315,1216.45 1315.59,1216.37 1316.18,1219.98 1316.76,1218.58 1317.35,1216.83 1317.93,1213.94 1318.52,1211.31 1319.11,1208.68 1319.69,1208.88 1320.28,1209.14 1320.87,1209.42 1321.45,1212.2 1322.04,1210.87 1322.63,1210.71 1323.21,1207.91 1323.8,1207.78 1324.39,1205.35 1324.97,1208.13 1325.56,1206.97 1326.14,1204.46 1326.73,1203.5 1327.32,1204.16 1327.9,1210.15 1328.49,1209.22 1329.08,1211.66 1329.66,1213.25 1330.25,1214.49 1330.84,1212.07 1331.42,1213.24 1332.01,1211.97 1332.6,1211.88 1333.18,1210.55 1333.77,1213.2 1334.35,1214.45 1334.94,1211.85 1335.53,1217.17 1336.11,1215.79 1336.7,1216.69 1337.29,1217.84 1337.87,1217.78 1338.46,1220.01 1339.05,1221.05 1339.63,1216.95 1340.22,1216.96 1340.8,1216.78 1341.39,1219.11 1341.98,1216.17 1342.56,1217.2 1343.15,1218.13 1343.74,1216.53 1344.32,1217.81 1344.91,1216.49 1345.5,1215.14 1346.08,1215.05 1346.67,1213.57 1347.26,1213.63 1347.84,1212.22 1348.43,1215.06 1349.01,1213.64 1349.6,1212.57 1350.19,1213.94 1350.77,1214.95 1351.36,1215.15 1351.95,1216.58 1352.53,1217.66 1353.12,1217.7 1353.71,1217.44 1354.29,1217.19 1354.88,1214.59 1355.47,1216.06 1356.05,1214.7 1356.64,1214.76 1357.22,1216.13 1357.81,1222.46 1358.4,1220.78 1358.98,1218.09 1359.57,1218.1 1360.16,1215.4 1360.74,1214.18 1361.33,1213.04 1361.92,1214.53 1362.5,1215.74 1363.09,1216.89 1363.68,1216.75 1364.26,1217.13 1364.85,1215.56 1365.43,1216.66 1366.02,1216.41 1366.61,1218.76 1367.19,1214.35 1367.78,1214.46 1368.37,1214.45 1368.95,1213.32 1369.54,1215.6 1370.13,1216.5 1370.71,1216.56 1371.3,1218.86 1371.88,1217.21 1372.47,1217.07 1373.06,1218.02 1373.64,1218.02 1374.23,1216.62 1374.82,1218.99 1375.4,1218.53 1375.99,1216.68 1376.58,1216.49 1377.16,1221.79 1377.75,1217.25 1378.34,1217.17 1378.92,1216.87 1379.51,1216.82 1380.09,1216.88 1380.68,1214.07 1381.27,1213.95 1381.85,1215.41 1382.44,1216.32 1383.03,1218.84 1383.61,1213.16 1384.2,1213.16 1384.79,1214.18 1385.37,1215.28 1385.96,1215.2 1386.55,1214.99 1387.13,1216.37 1387.72,1217.54 1388.3,1213.33 1388.89,1211.89 1389.48,1210.9 1390.06,1211.31 1390.65,1211.28 1391.24,1212.85 1391.82,1212.92 1392.41,1214.47 1393,1215.86 1393.58,1213.13 1394.17,1211.9 1394.75,1212.25 1395.34,1209.56 1395.93,1213.89 1396.51,1213.79 1397.1,1210.94 1397.69,1212.41 1398.27,1213.74 1398.86,1211.15 1399.45,1208.42 1400.03,1205.82 1400.62,1207.6 1401.21,1209.16 1401.79,1209.42 1402.38,1210.97 1402.96,1212.52 1403.55,1212.83 1404.14,1215.54 1404.72,1215.42 1405.31,1214.22 1405.9,1215.65 1406.48,1216.81 1407.07,1215.48 1407.66,1215.15 1408.24,1214.96 1408.83,1216.18 1409.42,1214.68 1410,1213.25 1410.59,1213.28 1411.17,1214.48 1411.76,1211.78 1412.35,1213.16 1412.93,1211.92 1413.52,1209.19 1414.11,1209.37 1414.69,1210.69 1415.28,1210.82 1415.87,1211.06 1416.45,1209.74 1417.04,1211.35 1417.63,1214 1418.21,1213.84 1418.8,1218.81 1419.38,1218.53 1419.97,1217.02 1420.56,1217.05 1421.14,1217 1421.73,1216.65 1422.32,1215.24 1422.9,1215.39 1423.49,1215.21 1424.08,1216.64 1424.66,1219.14 1425.25,1220.23 1425.83,1219.55 1426.42,1220.45 1427.01,1220.1 1427.59,1221 1428.18,1219.33 1428.77,1221.51 1429.35,1220.86 1429.94,1221.85 1430.53,1221.16 1431.11,1222.18 1431.7,1220.51 1432.29,1218.86 1432.87,1215.98 1433.46,1214.43 1434.04,1213.02 1434.63,1212.95 1435.22,1216.45 1435.8,1216.46 1436.39,1216.3 1436.98,1214.8 1437.56,1214.61 1438.15,1216.87 1438.74,1215.41 1439.32,1213.99 1439.91,1212.47 1440.5,1211.03 1441.08,1213.69 1441.67,1215 1442.25,1216.02 1442.84,1214.68 1443.43,1215.76 1444.01,1215.63 1444.6,1215.25 1445.19,1216.41 1445.77,1217.69 1446.36,1216.23 1446.95,1216.09 1447.53,1218.6 1448.12,1214.4 1448.7,1215.82 1449.29,1214.08 1449.88,1212.98 1450.46,1211.52 1451.05,1213.25 1451.64,1214.44 1452.22,1217.18 1452.81,1216.92 1453.4,1215.38 1453.98,1215.52 1454.57,1214.27 1455.16,1215.48 1455.74,1214.11 1456.33,1216.77 1456.91,1217.8 1457.5,1217.56 1458.09,1219.8 1458.67,1219.26 1459.26,1218.85 1459.85,1218.62 1460.43,1217.03 1461.02,1215.53 1461.61,1215.73 1462.19,1215.72 1462.78,1213.01 1463.37,1215.56 1463.95,1212.99 1464.54,1215.83 1465.12,1214.65 1465.71,1214.6 1466.3,1210.57 1466.88,1208.07 1467.47,1211.09 1468.06,1208.67 1468.64,1210.16 1469.23,1209.1 1469.82,1212.12 1470.4,1211.28 1470.99,1213.01 1471.57,1213.48 1472.16,1213.56 1472.75,1213.7 1473.33,1215.13 1473.92,1216.45 1474.51,1213.76 1475.09,1215.31 1475.68,1215.23 1476.27,1211.12 1476.85,1210.98 1477.44,1211.15 1478.03,1211.15 1478.61,1211.05 1479.2,1210.94 1479.78,1210.83 1480.37,1208.05 1480.96,1207.21 1481.54,1206.22 1482.13,1205.42 1482.72,1204.55 1483.3,1205.25 1483.89,1207.29 1484.48,1206.41 1485.06,1205.42 1485.65,1207.13 1486.24,1205.05 1486.82,1209.48 1487.41,1209.78 1487.99,1211.2 1488.58,1211.15 1489.17,1210.35 1489.75,1211.81 1490.34,1211.87 1490.93,1212.08 1491.51,1208.48 1492.1,1208.8 1492.69,1211.46 1493.27,1212.95 1493.86,1210.57 1494.45,1212.2 1495.03,1212.57 1495.62,1212.64 1496.2,1212.76 1496.79,1212.58 1497.38,1215.21 1497.96,1216.51 1498.55,1219.19 1499.14,1223.99 1499.72,1223.4 1500.31,1223.06 1500.9,1222.49 1501.48,1223.26 1502.07,1217.55 1502.65,1220.11 1503.24,1219.74 1503.83,1219.16 1504.41,1217.65 1505,1217.52 1505.59,1216 1506.17,1218.72 1506.76,1219.95 1507.35,1219.63 1507.93,1217.87 1508.52,1219.1 1509.11,1216.17 1509.69,1216.36 1510.28,1217.47 1510.86,1216.03 1511.45,1214.56 1512.04,1213.28 1512.62,1212.2 1513.21,1215.11 1513.8,1216.24 1514.38,1214.81 1514.97,1212.49 1515.56,1213.77 1516.14,1215.29 1516.73,1216.37 1517.32,1217.66 1517.9,1214.83 1518.49,1214.78 1519.07,1213.5 1519.66,1209.85 1520.25,1210.22 1520.83,1212.96 1521.42,1210.3 1522.01,1211.76 1522.59,1210.44 1523.18,1211.8 1523.77,1214.32 1524.35,1214.37 1524.94,1213.03 1525.52,1210.93 1526.11,1209.79 1526.7,1211.27 1527.28,1212.69 1527.87,1213.82 1528.46,1210.95 1529.04,1211.23 1529.63,1213.97 1530.22,1213.76 1530.8,1216.18 1531.39,1218.6 1531.98,1221.02 1532.56,1219.6 1533.15,1222.22 1533.73,1219.34 1534.32,1219.11 1534.91,1221.21 1535.49,1220.9 1536.08,1221.83 1536.67,1218.75 1537.25,1214.64 1537.84,1212.21 1538.43,1213.73 1539.01,1216.54 1539.6,1220.42 1540.19,1221.54 1540.77,1220.12 1541.36,1219.97 1541.94,1216.8 1542.53,1216.59 1543.12,1215.24 1543.7,1216.43 1544.29,1219.01 1544.88,1218.75 1545.46,1218.62 1546.05,1215.55 1546.64,1214.31 1547.22,1212.8 1547.81,1212.62 1548.4,1209.9 1548.98,1211.39 1549.57,1208.65 1550.15,1206.41 1550.74,1207.85 1551.33,1208.27 1551.91,1208.59 1552.5,1210.16 1553.09,1211.71 1553.67,1212.05 1554.26,1211.93 1554.85,1214.43 1555.43,1213.1 1556.02,1211.68 1556.6,1210.4 1557.19,1211.74 1557.78,1211.86 1558.36,1211.82 1558.95,1212.11 1559.54,1214.61 1560.12,1214.61 1560.71,1213.13 1561.3,1214.57 1561.88,1215.76 1562.47,1218.24 1563.06,1217.86 1563.64,1218.9 1564.23,1217.36 1564.81,1218.41 1565.4,1216.74 1565.99,1215.28 1566.57,1216.75 1567.16,1218.07 1567.75,1217.96 1568.33,1215.24 1568.92,1213.76 1569.51,1212.52 1570.09,1214.17 1570.68,1214.2 1571.27,1218.06 1571.85,1219.07 1572.44,1218.67 1573.02,1218.37 1573.61,1216.9 1574.2,1215.35 1574.78,1218.25 1575.37,1217.92 1575.96,1218.85 1576.54,1219.67 1577.13,1218.04 1577.72,1217.57 1578.3,1217.21 1578.89,1218.48 1579.47,1216.71 1580.06,1216.47 1580.65,1217.62 1581.23,1221.4 1581.82,1223.84 1582.41,1224.64 1582.99,1223.97 1583.58,1224.46 1584.17,1223.81 1584.75,1223.15 1585.34,1222.56 1585.93,1220.88 1586.51,1222.97 1587.1,1218.61 1587.68,1221.28 1588.27,1218.19 1588.86,1220.47 1589.44,1218.52 1590.03,1222.44 1590.62,1223.73 1591.2,1222.01 1591.79,1222.73 1592.38,1218.09 1592.96,1216.66 1593.55,1215.51 1594.14,1217 1594.72,1218.01 1595.31,1217.97 1595.89,1217.83 1596.48,1217.46 1597.07,1215.71 1597.65,1216.68 1598.24,1213.95 1598.83,1213.81 1599.41,1212.37 1600,1211.28 1600.59,1211.22 1601.17,1210.11 1601.76,1210.28 1602.34,1210.55 1602.93,1209.14 1603.52,1206.62 1604.1,1207.11 1604.69,1207.63 1605.28,1203.72 1605.86,1204.13 1606.45,1205.97 1607.04,1204.95 1607.62,1205.36 1608.21,1207.36 1608.8,1206.52 1609.38,1208.31 1609.97,1212.4 1610.55,1211.15 1611.14,1210.06 1611.73,1210.44 1612.31,1212.05 1612.9,1209.46 1613.49,1208.31 1614.07,1208.64 1614.66,1209.19 1615.25,1208.14 1615.83,1212.17 1616.42,1216.37 1617.01,1212.41 1617.59,1213.82 1618.18,1213.7 1618.76,1212.15 1619.35,1209.65 1619.94,1211.24 1620.52,1211.33 1621.11,1211.23 1621.7,1211.54 1622.28,1211.42 1622.87,1211.39 1623.46,1214.32 1624.04,1210.69 1624.63,1211.07 1625.22,1211.06 1625.8,1212.42 1626.39,1213.82 1626.97,1214.08 1627.56,1211.21 1628.15,1210.16 1628.73,1210.51 1629.32,1210.48 1629.91,1209.05 1630.49,1211.99 1631.08,1214.9 1631.67,1217.77 1632.25,1216.59 1632.84,1217.56 1633.42,1218.53 1634.01,1219.81 1634.6,1218.25 1635.18,1216.62 1635.77,1215.2 1636.36,1215.2 1636.94,1217.72 1637.53,1214.88 1638.12,1215.16 1638.7,1216.39 1639.29,1216.29 1639.88,1213.47 1640.46,1210.77 1641.05,1210.96 1641.63,1212.46 1642.22,1213.86 1642.81,1215.14 1643.39,1212.39 1643.98,1213.9 1644.57,1212.45 1645.15,1215.05 1645.74,1214.8 1646.33,1215.09 1646.91,1213.74 1647.5,1213.93 1648.09,1210.01 1648.67,1210.18 1649.26,1211.76 1649.84,1214.65 1650.43,1212.93 1651.02,1208.86 1651.6,1208.27 1652.19,1208.65 1652.78,1209.21 1653.36,1208.25 1653.95,1208.61 1654.54,1211.66 1655.12,1214.79 1655.71,1216.2 1656.29,1213.72 1656.88,1213.68 1657.47,1215.24 1658.05,1213.9 1658.64,1215.18 1659.23,1215.26 1659.81,1215.28 1660.4,1215.34 1660.99,1215.02 1661.57,1213.43 1662.16,1212.21 1662.75,1212.29 1663.33,1212.4 1663.92,1213.72 1664.5,1210.94 1665.09,1213.64 1665.68,1212.35 1666.26,1212.34 1666.85,1213.69 1667.44,1214.83 1668.02,1212.16 1668.61,1213.95 1669.2,1213.95 1669.78,1215.64 1670.37,1217.13 1670.96,1215.36 1671.54,1213.61 1672.13,1215.03 1672.71,1214.88 1673.3,1212.12 1673.89,1210.86 1674.47,1212.29 1675.06,1212.51 1675.65,1212.64 1676.23,1212.77 1676.82,1212.72 1677.41,1211.48 1677.99,1212.94 1678.58,1214.05 1679.17,1214.07 1679.75,1212.75 1680.34,1212.97 1680.92,1213.22 1681.51,1214.67 1682.1,1213.35 1682.68,1213.72 1683.27,1212.21 1683.86,1214.84 1684.44,1218.96 1685.03,1221.54 1685.62,1217.45 1686.2,1217.12 1686.79,1215.83 1687.37,1218.36 1687.96,1219.25 1688.55,1217.44 1689.13,1218.16 1689.72,1219.25 1690.31,1218.85 1690.89,1217.51 1691.48,1218.86 1692.07,1221.05 1692.65,1219.65 1693.24,1218.17 1693.83,1219.4 1694.41,1213.75 1695,1211.18 1695.58,1211.53 1696.17,1211.92 1696.76,1210.68 1697.34,1210.73 1697.93,1206.97 1698.52,1207.16 1699.1,1206.29 1699.69,1209.29 1700.28,1211.8 1700.86,1211.75 1701.45,1211.78 1702.04,1212.1 1702.62,1211.03 1703.21,1211.24 1703.79,1209.96 1704.38,1211.54 1704.97,1211.34 1705.55,1213.93 1706.14,1215.13 1706.73,1216.15 1707.31,1214.8 1707.9,1210.79 1708.49,1206.51 1709.07,1205.68 1709.66,1212.74 1710.24,1212.7 1710.83,1210.32 1711.42,1209.22 1712,1208.26 1712.59,1207.28 1713.18,1206.33 1713.76,1202.78 1714.35,1203.68 1714.94,1204.03 1715.52,1208.68 1716.11,1208.97 1716.7,1213.08 1717.28,1211.77 1717.87,1213.97 1718.45,1212.71 1719.04,1209.03 1719.63,1208.09 1720.21,1211.07 1720.8,1212.38 1721.39,1211.09 1721.97,1212.44 1722.56,1213.87 1723.15,1213.93 1723.73,1210.99 1724.32,1211.28 1724.91,1213.71 1725.49,1214.08 1726.08,1213.04 1726.66,1213.1 1727.25,1208.83 1727.84,1209.15 1728.42,1210.78 1729.01,1212.23 1729.6,1212.21 1730.18,1209.72 1730.77,1211.32 1731.36,1209.82 1731.94,1211.23 1732.53,1210.14 1733.11,1209.06 1733.7,1210.38 1734.29,1214.58 1734.87,1214.64 1735.46,1212.16 1736.05,1212.16 1736.63,1212.01 1737.22,1212.18 1737.81,1210.81 1738.39,1212.24 1738.98,1212.34 1739.57,1212.49 1740.15,1212.74 1740.74,1210.05 1741.32,1208.88 1741.91,1209.08 1742.5,1209.59 1743.08,1208.34 1743.67,1211.29 1744.26,1209.92 1744.84,1209.93 1745.43,1212.99 1746.02,1212.89 1746.6,1214.41 1747.19,1213.11 1747.78,1215.89 1748.36,1214.92 1748.95,1216.35 1749.53,1216.28 1750.12,1215.97 1750.71,1214.51 1751.29,1219.63 1751.88,1218.08 1752.47,1217.86 1753.05,1216.16 1753.64,1214.71 1754.23,1214.76 1754.81,1213.37 1755.4,1214.89 1755.99,1217.28 1756.57,1214.53 1757.16,1217.18 1757.74,1218.38 1758.33,1218.43 1758.92,1217.1 1759.5,1216.6 1760.09,1216.44 1760.68,1213.55 1761.26,1213.67 1761.85,1213.72 1762.44,1213.5 1763.02,1213.42 1763.61,1213.61 1764.19,1216.29 1764.78,1216.6 1765.37,1214.06 1765.95,1207.15 1766.54,1206.18 1767.13,1206.79 1767.71,1207.03 1768.3,1207.39 1768.89,1208.02 1769.47,1209.85 1770.06,1210.08 1770.65,1208.86 1771.23,1210.37 1771.82,1210.88 1772.4,1213.94 1772.99,1215.29 1773.58,1215.26 1774.16,1217.77 1774.75,1214.92 1775.34,1212.27 1775.92,1212.42 1776.51,1211.09 1777.1,1210.02 1777.68,1214.2 1778.27,1211.91 1778.86,1209.62 1779.44,1209.85 1780.03,1208.84 1780.61,1209.09 1781.2,1208.36 1781.79,1208.6 1782.37,1207.41 1782.96,1207.92 1783.55,1209.59 1784.13,1211.06 1784.72,1211.21 1785.31,1208.65 1785.89,1208.96 1786.48,1209.25 1787.06,1209.51 1787.65,1209.92 1788.24,1210.21 1788.82,1210.59 1789.41,1212.18 1790,1212.35 1790.58,1212.32 1791.17,1213.57 1791.76,1213.51 1792.34,1213.59 1792.93,1212.39 1793.52,1211.21 1794.1,1211.86 1794.69,1211.94 1795.27,1210.84 1795.86,1210.91 1796.45,1210.06 1797.03,1210.57 1797.62,1211.78 1798.21,1211.59 1798.79,1214.18 1799.38,1214.04 1799.97,1214.11 1800.55,1215.78 1801.14,1214.39 1801.73,1218.41 1802.31,1220.76 1802.9,1219.3 1803.48,1220.26 1804.07,1219.92 1804.66,1219.32 1805.24,1219.05 1805.83,1218.78 1806.42,1221.04 1807,1219.3 1807.59,1221.95 1808.18,1221.72 1808.76,1220.99 1809.35,1220.88 1809.94,1219.27 1810.52,1214.97 1811.11,1216.05 1811.69,1217.33 1812.28,1215.92 1812.87,1217.2 1813.45,1216.97 1814.04,1218.34 1814.63,1218.31 1815.21,1219.35 1815.8,1216.67 1816.39,1215.02 1816.97,1215.19 1817.56,1213.78 1818.14,1213.93 1818.73,1212.58 1819.32,1213.87 1819.9,1215.06 1820.49,1218.92 1821.08,1218.47 1821.66,1217.98 1822.25,1218.69 1822.84,1219.88 1823.42,1219.88 1824.01,1218.52 1824.6,1219.41 1825.18,1220.51 1825.77,1221.53 1826.35,1223.76 1826.94,1223.31 1827.53,1222.64 1828.11,1222.15 1828.7,1221.81 1829.29,1225.39 1829.87,1223.54 1830.46,1225.82 1831.05,1222.23 1831.63,1219.07 1832.22,1220.08 1832.81,1222.31 1833.39,1221.86 1833.98,1220.06 1834.56,1218.54 1835.15,1218.21 1835.74,1216.59 1836.32,1219.34 1836.91,1219.12 1837.5,1215.77 1838.08,1216.92 1838.67,1215.37 1839.26,1213.98 1839.84,1213.82 1840.43,1213.73 1841.01,1212.4 1841.6,1216.25 1842.19,1214.52 1842.77,1214.5 1843.36,1211.96 1843.95,1207.12 1844.53,1210.21 1845.12,1210.44 1845.71,1209.2 1846.29,1209.49 1846.88,1208.39 1847.47,1207.36 1848.05,1209.01 1848.64,1210.77 1849.22,1212.06 1849.81,1212.29 1850.4,1211.09 1850.98,1212.39 1851.57,1210.84 1852.16,1214.8 1852.74,1215.93 1853.33,1216.98 1853.92,1218.41 1854.5,1218.15 1855.09,1220.67 1855.68,1221.81 1856.26,1221.41 1856.85,1219.48 1857.43,1219.07 1858.02,1221.56 1858.61,1218.44 1859.19,1216.74 1859.78,1216.46 1860.37,1216.19 1860.95,1215.8 1861.54,1215.72 1862.13,1217.96 1862.71,1216.14 1863.3,1218.59 1863.88,1218.28 1864.47,1217.93 1865.06,1217.86 1865.64,1214.77 1866.23,1212.22 1866.82,1209.37 1867.4,1207.89 1867.99,1209.5 1868.58,1211.21 1869.16,1212.56 1869.75,1215.5 1870.34,1213.82 1870.92,1214.96 1871.51,1212.04 1872.09,1211.12 1872.68,1211.4 1873.27,1210.56 1873.85,1212.07 1874.44,1213.83 1875.03,1209.47 1875.61,1213.81 1876.2,1213.76 1876.79,1216.35 1877.37,1216.26 1877.96,1214.79 1878.55,1215.77 1879.13,1215.78 1879.72,1217.22 1880.3,1218.53 1880.89,1215.6 1881.48,1211.67 1882.06,1212.09 1882.65,1213.42 1883.24,1213.13 1883.82,1212.9 1884.41,1214.49 1885,1214.4 1885.58,1213.13 1886.17,1213.25 1886.76,1210.77 1887.34,1213.94 1887.93,1212.89 1888.51,1215.34 1889.1,1216.4 1889.69,1217.61 1890.27,1217.57 1890.86,1215.97 1891.45,1216.01 1892.03,1215.84 1892.62,1214.47 1893.21,1214.66 1893.79,1210.85 1894.38,1209.65 1894.96,1209.77 1895.55,1208.75 1896.14,1208.12 1896.72,1209.91 1897.31,1211.46 1897.9,1209.2 1898.48,1208.36 1899.07,1208.65 1899.66,1210.03 1900.24,1210.18 1900.83,1210.31 1901.42,1209.34 1902,1209.5 1902.59,1209.67 1903.17,1209.56 1903.76,1209.86 1904.35,1211.64 1904.93,1209.12 1905.52,1209.26 1906.11,1210.94 1906.69,1209.83 1907.28,1208.69 1907.87,1207.59 1908.45,1209.27 1909.04,1209.8 1909.63,1211.61 1910.21,1213.19 1910.8,1215.91 1911.38,1214.66 1911.97,1217.29 1912.56,1217.48 1913.14,1219.52 1913.73,1216.59 1914.32,1217.75 1914.9,1217.72 1915.49,1217.48 1916.08,1218.64 1916.66,1217.03 1917.25,1218.11 1917.83,1215.45 1918.42,1216.67 1919.01,1216.35 1919.59,1217.41 1920.18,1212.03 1920.77,1210.81 1921.35,1209.63 1921.94,1208.66 1922.53,1208.97 1923.11,1210.61 1923.7,1211.17 1924.29,1207.26 1924.87,1207.83 1925.46,1206.6 1926.04,1206.85 1926.63,1207.11 1927.22,1207.62 1927.8,1214.56 1928.39,1215.74 1928.98,1213.04 1929.56,1211.73 1930.15,1211.92 1930.74,1214.87 1931.32,1215.94 1931.91,1214.26 1932.5,1214.47 1933.08,1215.55 1933.67,1218.22 1934.25,1215.5 1934.84,1214.13 1935.43,1214.17 1936.01,1213.03 1936.6,1212.86 1937.19,1214.43 1937.77,1213.03 1938.36,1217.42 1938.95,1216.94 1939.53,1216.81 1940.12,1214.18 1940.71,1215.27 1941.29,1216.44 1941.88,1216.5 1942.46,1216.29 1943.05,1215.97 1943.64,1214.13 1944.22,1216.41 1944.81,1216.25 1945.4,1215.02 1945.98,1215.07 1946.57,1213.62 1947.16,1213.86 1947.74,1216.56 1948.33,1217.67 1948.91,1217.54 1949.5,1218.55 1950.09,1218.44 1950.67,1217.18 1951.26,1219.54 1951.85,1219.31 1952.43,1221.79 1953.02,1221.41 1953.61,1222.46 1954.19,1222.1 1954.78,1219.56 1955.37,1221.94 1955.95,1223.11 1956.54,1221.57 1957.12,1216.94 1957.71,1214.19 1958.3,1209.03 1958.88,1212.01 1959.47,1213.41 1960.06,1211.96 1960.64,1205.2 1961.23,1204.61 1961.82,1203.53 1962.4,1205.64 1962.99,1209.01 1963.58,1207.84 1964.16,1208.07 1964.75,1208.53 1965.33,1205.99 1965.92,1202.55 1966.51,1205.91 1967.09,1206.45 1967.68,1205.69 1968.27,1207.64 1968.85,1208.09 1969.44,1205.99 1970.03,1206.76 1970.61,1209.91 1971.2,1211.91 1971.78,1212.03 1972.37,1210.7 1972.96,1210.71 1973.54,1210.9 1974.13,1211.1 1974.72,1207.19 1975.3,1207.88 1975.89,1205.61 1976.48,1207.42 1977.06,1205.14 1977.65,1208.14 1978.24,1208.4 1978.82,1209.03 1979.41,1209.1 1979.99,1213.44 1980.58,1210.96 1981.17,1209.94 1981.75,1211.52 1982.34,1211.63 1982.93,1208.83 1983.51,1211.74 1984.1,1210.69 1984.69,1212.4 1985.27,1212.36 1985.86,1213.56 1986.45,1216.26 1987.03,1217.59 1987.62,1217.03 1988.2,1216.8 1988.79,1219.38 1989.38,1219.13 1989.96,1221.4 1990.55,1223.72 1991.14,1223.31 1991.72,1221.35 1992.31,1221.04 1992.9,1222.11 1993.48,1223.14 1994.07,1221.53 1994.65,1219.63 1995.24,1220.46 1995.83,1220.34 1996.41,1219.93 1997,1218.21 1997.59,1217.75 1998.17,1216.41 1998.76,1217.58 1999.35,1217.49 1999.93,1216.44 2000.52,1217.82 2001.11,1216.57 2001.69,1215.26 2002.28,1216.63 2002.86,1217.9 2003.45,1217.81 2004.04,1217.58 2004.62,1217.37 2005.21,1222.36 2005.8,1221.9 2006.38,1222.81 2006.97,1222.15 2007.56,1220.29 2008.14,1217.39 2008.73,1215.73 2009.32,1215.54 2009.9,1215.62 2010.49,1215.33 2011.07,1212.68 2011.66,1212.58 2012.25,1212.55 2012.83,1212.71 2013.42,1214.36 2014.01,1214.41 2014.59,1211.89 2015.18,1211.82 2015.77,1215.72 2016.35,1215.51 2016.94,1214.14 2017.53,1210.01 2018.11,1207.5 2018.7,1208.07 2019.28,1206.76 2019.87,1207.07 2020.46,1207.37 2021.04,1207.85 2021.63,1210.6 2022.22,1209.46 2022.8,1210.73 2023.39,1213.56 2023.98,1213.6 2024.56,1213.73 2025.15,1216.37 2025.73,1214.83 2026.32,1213.65 2026.91,1214.96 2027.49,1220.09 2028.08,1218.42 2028.67,1216.59 2029.25,1215.24 2029.84,1215.04 2030.43,1214.92 2031.01,1214.92 2031.6,1213.73 2032.19,1213.69 2032.77,1212.28 2033.36,1211.16 2033.94,1210.06 2034.53,1209.15 2035.12,1211.08 2035.7,1213.87 2036.29,1215.43 2036.88,1214.99 2037.46,1214.98 2038.05,1214.91 2038.64,1214.83 2039.22,1215.07 2039.81,1215.06 2040.4,1215.3 2040.98,1215.21 2041.57,1212.57 2042.15,1214.03 2042.74,1216.42 2043.33,1217.54 2043.91,1218.5 2044.5,1219.66 2045.09,1220.94 2045.67,1219.41 2046.26,1216.31 2046.85,1218.8 2047.43,1214.52 2048.02,1214.22 2048.6,1214.34 2049.19,1215.78 2049.78,1213.38 2050.36,1210.67 2050.95,1209.21 2051.54,1210.85 2052.12,1211.07 2052.71,1211.58 2053.3,1213.12 2053.88,1217.29 2054.47,1218.54 2055.06,1218.58 2055.64,1218.24 2056.23,1217.91 2056.81,1217.59 2057.4,1217.7 2057.99,1217.47 2058.57,1213.18 2059.16,1213.26 2059.75,1214.98 2060.33,1216.26 2060.92,1215.88 2061.51,1217.31 2062.09,1214.59 2062.68,1216.04 2063.27,1215.92 2063.85,1217.42 2064.44,1217.33 2065.02,1217.18 2065.61,1218.44 2066.2,1216.83 2066.78,1216.66 2067.37,1214.97 2067.96,1213.37 2068.54,1209.74 2069.13,1212.39 2069.72,1208.48 2070.3,1211.68 2070.89,1213.16 2071.48,1212.94 2072.06,1211.4 2072.65,1210.16 2073.23,1210.33 2073.82,1210.47 2074.41,1213.27 2074.99,1210.97 2075.58,1212.64 2076.17,1210.13 2076.75,1210.16 2077.34,1210.24 2077.93,1208.87 2078.51,1211.58 2079.1,1211.75 2079.68,1214.33 2080.27,1214.28 2080.86,1215.73 2081.44,1214.43 2082.03,1214.46 2082.62,1211.54 2083.2,1211.55 2083.79,1212.75 2084.38,1210.11 2084.96,1211.75 2085.55,1213.13 2086.14,1214.34 2086.72,1215.48 2087.31,1218.13 2087.89,1216.58 2088.48,1219.29 2089.07,1216.56 2089.65,1216.35 2090.24,1216.21 2090.83,1213.72 2091.41,1213.6 2092,1213.48 2092.59,1213.58 2093.17,1214.66 2093.76,1213.53 2094.35,1212.04 2094.93,1212.5 2095.52,1215.28 2096.1,1218.03 2096.69,1219.31 2097.28,1220.62 2097.86,1220.13 2098.45,1219.88 2099.04,1219.35 2099.62,1221.53 2100.21,1219.7 2100.8,1219.42 2101.38,1217.63 2101.97,1216.4 2102.55,1214.95 2103.14,1218.81 2103.73,1219.79 2104.31,1219.62 2104.9,1219.53 2105.49,1219.29 2106.07,1217.51 2106.66,1216.15 2107.25,1214.79 2107.83,1207.94 2108.42,1209.53 2109.01,1211.1 2109.59,1212.38 2110.18,1212.42 2110.76,1211.26 2111.35,1212.89 2111.94,1212.99 2112.52,1211.86 2113.11,1212.14 2113.7,1212.27 2114.28,1209.95 2114.87,1210.05 2115.46,1207.7 2116.04,1207.04 2116.63,1207.33 2117.22,1206.01 2117.8,1207.73 2118.39,1207.05 2118.97,1207.35 2119.56,1207.74 2120.15,1209.48 2120.73,1212.26 2121.32,1211.18 2121.91,1211.23 2122.49,1212.64 2123.08,1211.45 2123.67,1213.02 2124.25,1215.98 2124.84,1217.31 2125.42,1218.4 2126.01,1218.12 2126.6,1220.85 2127.18,1218.37 2127.77,1219.42 2128.36,1221.8 2128.94,1221.79 2129.53,1226.64 2130.12,1225.84 2130.7,1223.73 2131.29,1226.02 2131.88,1225.5 2132.46,1225.12 2133.05,1225.69 2133.63,1222.64 2134.22,1223.43 2134.81,1222.89 2135.39,1223.47 2135.98,1224.31 2136.57,1222.73 2137.15,1221.01 2137.74,1217.9 2138.33,1218.84 2138.91,1217.17 2139.5,1216.94 2140.09,1215.51 2140.67,1214.99 2141.26,1213.51 2141.84,1214.91 2142.43,1214.71 2143.02,1216.2 2143.6,1217.57 2144.19,1214.84 2144.78,1213.32 2145.36,1213.14 2145.95,1210.54 2146.54,1209.22 2147.12,1209.54 2147.71,1209.52 2148.3,1210 2148.88,1212.71 2149.47,1215.61 2150.05,1213.87 2150.64,1212.33 2151.23,1212.3 2151.81,1210.81 2152.4,1210.76 2152.99,1210.7 2153.57,1209.73 2154.16,1211.47 2154.75,1210.24 2155.33,1211.57 2155.92,1214.4 2156.5,1212.96 2157.09,1211.61 2157.68,1211.82 2158.26,1210.62 \"/>\n<path clip-path=\"url(#clip762)\" d=\"M986.025 1214.56 L986.612 1214.56 L987.198 1214.56 L987.785 1214.56 L988.371 1214.56 L988.957 1214.56 L989.544 1214.56 L990.13 1214.56 L990.717 1214.56 L991.303 1214.56 L991.889 1214.56 L992.476 1214.56 L993.062 1214.56 L993.649 1214.56 L994.235 1214.56 L994.822 1214.56 L995.408 1214.56 L995.994 1214.56 L996.581 1214.56 L997.167 1214.56 L997.754 1214.56 L998.34 1214.56 L998.926 1214.56 L999.513 1214.56 L1000.1 1214.56 L1000.69 1214.56 L1001.27 1214.56 L1001.86 1214.56 L1002.44 1214.56 L1003.03 1214.56 L1003.62 1214.56 L1004.2 1214.56 L1004.79 1214.56 L1005.38 1214.56 L1005.96 1214.56 L1006.55 1214.56 L1007.14 1214.56 L1007.72 1214.56 L1008.31 1214.56 L1008.9 1214.56 L1009.48 1214.56 L1010.07 1214.56 L1010.65 1214.56 L1011.24 1214.56 L1011.83 1214.56 L1012.41 1214.56 L1013 1214.56 L1013.59 1214.56 L1014.17 1214.56 L1014.76 1214.56 L1015.35 1214.56 L1015.93 1214.56 L1016.52 1214.56 L1017.11 1214.56 L1017.69 1214.56 L1018.28 1214.56 L1018.86 1214.56 L1019.45 1214.56 L1020.04 1214.56 L1020.62 1214.56 L1021.21 1214.56 L1021.8 1214.56 L1022.38 1214.56 L1022.97 1214.56 L1023.56 1214.56 L1024.14 1214.56 L1024.73 1214.56 L1025.32 1214.56 L1025.9 1214.56 L1026.49 1214.56 L1027.07 1214.56 L1027.66 1214.56 L1028.25 1214.56 L1028.83 1214.56 L1029.42 1214.56 L1030.01 1214.56 L1030.59 1214.56 L1031.18 1214.56 L1031.77 1214.56 L1032.35 1214.56 L1032.94 1214.56 L1033.52 1214.56 L1034.11 1214.56 L1034.7 1214.56 L1035.28 1214.56 L1035.87 1214.56 L1036.46 1214.56 L1037.04 1214.56 L1037.63 1214.56 L1038.22 1214.56 L1038.8 1214.56 L1039.39 1214.56 L1039.98 1214.56 L1040.56 1214.56 L1041.15 1214.56 L1041.73 1214.56 L1042.32 1214.56 L1042.91 1214.56 L1043.49 1214.56 L1044.08 1214.56 L1044.67 1214.56 L1045.25 1214.56 L1045.84 1214.56 L1046.43 1214.56 L1047.01 1214.56 L1047.6 1214.56 L1048.19 1214.56 L1048.77 1214.56 L1049.36 1214.56 L1049.94 1214.56 L1050.53 1214.56 L1051.12 1214.56 L1051.7 1214.56 L1052.29 1214.56 L1052.88 1214.56 L1053.46 1214.56 L1054.05 1214.56 L1054.64 1214.56 L1055.22 1214.56 L1055.81 1214.56 L1056.39 1214.56 L1056.98 1214.56 L1057.57 1214.56 L1058.15 1214.56 L1058.74 1214.56 L1059.33 1214.56 L1059.91 1214.56 L1060.5 1214.56 L1061.09 1214.56 L1061.67 1214.56 L1062.26 1214.56 L1062.85 1214.56 L1063.43 1214.56 L1064.02 1214.56 L1064.6 1214.56 L1065.19 1214.56 L1065.78 1214.56 L1066.36 1214.56 L1066.95 1214.56 L1067.54 1214.56 L1068.12 1214.56 L1068.71 1214.56 L1069.3 1214.56 L1069.88 1214.56 L1070.47 1214.56 L1071.06 1214.56 L1071.64 1214.56 L1072.23 1214.56 L1072.81 1214.56 L1073.4 1214.56 L1073.99 1214.56 L1074.57 1214.56 L1075.16 1214.56 L1075.75 1214.56 L1076.33 1214.56 L1076.92 1214.56 L1077.51 1214.56 L1078.09 1214.56 L1078.68 1214.56 L1079.26 1214.56 L1079.85 1214.56 L1080.44 1214.56 L1081.02 1214.56 L1081.61 1214.56 L1082.2 1214.56 L1082.78 1214.56 L1083.37 1214.56 L1083.96 1214.56 L1084.54 1214.56 L1085.13 1214.56 L1085.72 1214.56 L1086.3 1214.56 L1086.89 1214.56 L1087.47 1214.56 L1088.06 1214.56 L1088.65 1214.56 L1089.23 1214.56 L1089.82 1214.56 L1090.41 1214.56 L1090.99 1214.56 L1091.58 1214.56 L1092.17 1214.56 L1092.75 1214.56 L1093.34 1214.56 L1093.93 1214.56 L1094.51 1214.56 L1095.1 1214.56 L1095.68 1214.56 L1096.27 1214.56 L1096.86 1214.56 L1097.44 1214.56 L1098.03 1214.56 L1098.62 1214.56 L1099.2 1214.56 L1099.79 1214.56 L1100.38 1214.56 L1100.96 1214.56 L1101.55 1214.56 L1102.14 1214.56 L1102.72 1214.56 L1103.31 1214.56 L1103.89 1214.56 L1104.48 1214.56 L1105.07 1214.56 L1105.65 1214.56 L1106.24 1214.56 L1106.83 1214.56 L1107.41 1214.56 L1108 1214.56 L1108.59 1214.56 L1109.17 1214.56 L1109.76 1214.56 L1110.34 1214.56 L1110.93 1214.56 L1111.52 1214.56 L1112.1 1214.56 L1112.69 1214.56 L1113.28 1214.56 L1113.86 1214.56 L1114.45 1214.56 L1115.04 1214.56 L1115.62 1214.56 L1116.21 1214.56 L1116.8 1214.56 L1117.38 1214.56 L1117.97 1214.56 L1118.55 1214.56 L1119.14 1214.56 L1119.73 1214.56 L1120.31 1214.56 L1120.9 1214.56 L1121.49 1214.56 L1122.07 1214.56 L1122.66 1214.56 L1123.25 1214.56 L1123.83 1214.56 L1124.42 1214.56 L1125.01 1214.56 L1125.59 1214.56 L1126.18 1214.56 L1126.76 1214.56 L1127.35 1214.56 L1127.94 1214.56 L1128.52 1214.56 L1129.11 1214.56 L1129.7 1214.56 L1130.28 1214.56 L1130.87 1214.56 L1131.46 1214.56 L1132.04 1214.56 L1132.63 1214.56 L1133.21 1214.56 L1133.8 1214.56 L1134.39 1214.56 L1134.97 1214.56 L1135.56 1214.56 L1136.15 1214.56 L1136.73 1214.56 L1137.32 1214.56 L1137.91 1214.56 L1138.49 1214.56 L1139.08 1214.56 L1139.67 1214.56 L1140.25 1214.56 L1140.84 1214.56 L1141.42 1214.56 L1142.01 1214.56 L1142.6 1214.56 L1143.18 1214.56 L1143.77 1214.56 L1144.36 1214.56 L1144.94 1214.56 L1145.53 1214.56 L1146.12 1214.56 L1146.7 1214.56 L1147.29 1214.56 L1147.88 1214.56 L1148.46 1214.56 L1149.05 1214.56 L1149.63 1214.56 L1150.22 1214.56 L1150.81 1214.56 L1151.39 1214.56 L1151.98 1214.56 L1152.57 1214.56 L1153.15 1214.56 L1153.74 1214.56 L1154.33 1214.56 L1154.91 1214.56 L1155.5 1214.56 L1156.09 1214.56 L1156.67 1214.56 L1157.26 1214.56 L1157.84 1214.56 L1158.43 1214.56 L1159.02 1214.56 L1159.6 1214.56 L1160.19 1214.56 L1160.78 1214.56 L1161.36 1214.56 L1161.95 1214.56 L1162.54 1214.56 L1163.12 1214.56 L1163.71 1214.56 L1164.29 1214.56 L1164.88 1214.56 L1165.47 1214.56 L1166.05 1214.56 L1166.64 1214.56 L1167.23 1214.56 L1167.81 1214.56 L1168.4 1214.56 L1168.99 1214.56 L1169.57 1214.56 L1170.16 1214.56 L1170.75 1214.56 L1171.33 1214.56 L1171.92 1214.56 L1172.5 1214.56 L1173.09 1214.56 L1173.68 1214.56 L1174.26 1214.56 L1174.85 1214.56 L1175.44 1214.56 L1176.02 1214.56 L1176.61 1214.56 L1177.2 1214.56 L1177.78 1214.56 L1178.37 1214.56 L1178.96 1214.56 L1179.54 1214.56 L1180.13 1214.56 L1180.71 1214.56 L1181.3 1214.56 L1181.89 1214.56 L1182.47 1214.56 L1183.06 1214.56 L1183.65 1214.56 L1184.23 1214.56 L1184.82 1214.56 L1185.41 1214.56 L1185.99 1214.56 L1186.58 1214.56 L1187.16 1214.56 L1187.75 1214.56 L1188.34 1214.56 L1188.92 1214.56 L1189.51 1214.56 L1190.1 1214.56 L1190.68 1214.56 L1191.27 1214.56 L1191.86 1214.56 L1192.44 1214.56 L1193.03 1214.56 L1193.62 1214.56 L1194.2 1214.56 L1194.79 1214.56 L1195.37 1214.56 L1195.96 1214.56 L1196.55 1214.56 L1197.13 1214.56 L1197.72 1214.56 L1198.31 1214.56 L1198.89 1214.56 L1199.48 1214.56 L1200.07 1214.56 L1200.65 1214.56 L1201.24 1214.56 L1201.83 1214.56 L1202.41 1214.56 L1203 1214.56 L1203.58 1214.56 L1204.17 1214.56 L1204.76 1214.56 L1205.34 1214.56 L1205.93 1214.56 L1206.52 1214.56 L1207.1 1214.56 L1207.69 1214.56 L1208.28 1214.56 L1208.86 1214.56 L1209.45 1214.56 L1210.03 1214.56 L1210.62 1214.56 L1211.21 1214.56 L1211.79 1214.56 L1212.38 1214.56 L1212.97 1214.56 L1213.55 1214.56 L1214.14 1214.56 L1214.73 1214.56 L1215.31 1214.56 L1215.9 1214.56 L1216.49 1214.56 L1217.07 1214.56 L1217.66 1214.56 L1218.24 1214.56 L1218.83 1214.56 L1219.42 1214.56 L1220 1214.56 L1220.59 1214.56 L1221.18 1214.56 L1221.76 1214.56 L1222.35 1214.56 L1222.94 1214.56 L1223.52 1214.56 L1224.11 1214.56 L1224.7 1214.56 L1225.28 1214.56 L1225.87 1214.56 L1226.45 1214.56 L1227.04 1214.56 L1227.63 1214.56 L1228.21 1214.56 L1228.8 1214.56 L1229.39 1214.56 L1229.97 1214.56 L1230.56 1214.56 L1231.15 1214.56 L1231.73 1214.56 L1232.32 1214.56 L1232.91 1214.56 L1233.49 1214.56 L1234.08 1214.56 L1234.66 1214.56 L1235.25 1214.56 L1235.84 1214.56 L1236.42 1214.56 L1237.01 1214.56 L1237.6 1214.56 L1238.18 1214.56 L1238.77 1214.56 L1239.36 1214.56 L1239.94 1214.56 L1240.53 1214.56 L1241.11 1214.56 L1241.7 1214.56 L1242.29 1214.56 L1242.87 1214.56 L1243.46 1214.56 L1244.05 1214.56 L1244.63 1214.56 L1245.22 1214.56 L1245.81 1214.56 L1246.39 1214.56 L1246.98 1214.56 L1247.57 1214.56 L1248.15 1214.56 L1248.74 1214.56 L1249.32 1214.56 L1249.91 1214.56 L1250.5 1214.56 L1251.08 1214.56 L1251.67 1214.56 L1252.26 1214.56 L1252.84 1214.56 L1253.43 1214.56 L1254.02 1214.56 L1254.6 1214.56 L1255.19 1214.56 L1255.78 1214.56 L1256.36 1214.56 L1256.95 1214.56 L1257.53 1214.56 L1258.12 1214.56 L1258.71 1214.56 L1259.29 1214.56 L1259.88 1214.56 L1260.47 1214.56 L1261.05 1214.56 L1261.64 1214.56 L1262.23 1214.56 L1262.81 1214.56 L1263.4 1214.56 L1263.98 1214.56 L1264.57 1214.56 L1265.16 1214.56 L1265.74 1214.56 L1266.33 1214.56 L1266.92 1214.56 L1267.5 1214.56 L1268.09 1214.56 L1268.68 1214.56 L1269.26 1214.56 L1269.85 1214.56 L1270.44 1214.56 L1271.02 1214.56 L1271.61 1214.56 L1272.19 1214.56 L1272.78 1214.56 L1273.37 1214.56 L1273.95 1214.56 L1274.54 1214.56 L1275.13 1214.56 L1275.71 1214.56 L1276.3 1214.56 L1276.89 1214.56 L1277.47 1214.56 L1278.06 1214.56 L1278.65 1214.56 L1279.23 1214.56 L1279.82 1214.56 L1280.4 1214.56 L1280.99 1214.56 L1281.58 1214.56 L1282.16 1214.56 L1282.75 1214.56 L1283.34 1214.56 L1283.92 1214.56 L1284.51 1214.56 L1285.1 1214.56 L1285.68 1214.56 L1286.27 1214.56 L1286.86 1214.56 L1287.44 1214.56 L1288.03 1214.56 L1288.61 1214.56 L1289.2 1214.56 L1289.79 1214.56 L1290.37 1214.56 L1290.96 1214.56 L1291.55 1214.56 L1292.13 1214.56 L1292.72 1214.56 L1293.31 1214.56 L1293.89 1214.56 L1294.48 1214.56 L1295.06 1214.56 L1295.65 1214.56 L1296.24 1214.56 L1296.82 1214.56 L1297.41 1214.56 L1298 1214.56 L1298.58 1214.56 L1299.17 1214.56 L1299.76 1214.56 L1300.34 1214.56 L1300.93 1214.56 L1301.52 1214.56 L1302.1 1214.56 L1302.69 1214.56 L1303.27 1214.56 L1303.86 1214.56 L1304.45 1214.56 L1305.03 1214.56 L1305.62 1214.56 L1306.21 1214.56 L1306.79 1214.56 L1307.38 1214.56 L1307.97 1214.56 L1308.55 1214.56 L1309.14 1214.56 L1309.73 1214.56 L1310.31 1214.56 L1310.9 1214.56 L1311.48 1214.56 L1312.07 1214.56 L1312.66 1214.56 L1313.24 1214.56 L1313.83 1214.56 L1314.42 1214.56 L1315 1214.56 L1315.59 1214.56 L1316.18 1214.56 L1316.76 1214.56 L1317.35 1214.56 L1317.93 1214.56 L1318.52 1214.56 L1319.11 1214.56 L1319.69 1214.56 L1320.28 1214.56 L1320.87 1214.56 L1321.45 1214.56 L1322.04 1214.56 L1322.63 1214.56 L1323.21 1214.56 L1323.8 1214.56 L1324.39 1214.56 L1324.97 1214.56 L1325.56 1214.56 L1326.14 1214.56 L1326.73 1214.56 L1327.32 1214.56 L1327.9 1214.56 L1328.49 1214.56 L1329.08 1214.56 L1329.66 1214.56 L1330.25 1214.56 L1330.84 1214.56 L1331.42 1214.56 L1332.01 1214.56 L1332.6 1214.56 L1333.18 1214.56 L1333.77 1214.56 L1334.35 1214.56 L1334.94 1214.56 L1335.53 1214.56 L1336.11 1214.56 L1336.7 1214.56 L1337.29 1214.56 L1337.87 1214.56 L1338.46 1214.56 L1339.05 1214.56 L1339.63 1214.56 L1340.22 1214.56 L1340.8 1214.56 L1341.39 1214.56 L1341.98 1214.56 L1342.56 1214.56 L1343.15 1214.56 L1343.74 1214.56 L1344.32 1214.56 L1344.91 1214.56 L1345.5 1214.56 L1346.08 1214.56 L1346.67 1214.56 L1347.26 1214.56 L1347.84 1214.56 L1348.43 1214.56 L1349.01 1214.56 L1349.6 1214.56 L1350.19 1214.56 L1350.77 1214.56 L1351.36 1214.56 L1351.95 1214.56 L1352.53 1214.56 L1353.12 1214.56 L1353.71 1214.56 L1354.29 1214.56 L1354.88 1214.56 L1355.47 1214.56 L1356.05 1214.56 L1356.64 1214.56 L1357.22 1214.56 L1357.81 1214.56 L1358.4 1214.56 L1358.98 1214.56 L1359.57 1214.56 L1360.16 1214.56 L1360.74 1214.56 L1361.33 1214.56 L1361.92 1214.56 L1362.5 1214.56 L1363.09 1214.56 L1363.68 1214.56 L1364.26 1214.56 L1364.85 1214.56 L1365.43 1214.56 L1366.02 1214.56 L1366.61 1214.56 L1367.19 1214.56 L1367.78 1214.56 L1368.37 1214.56 L1368.95 1214.56 L1369.54 1214.56 L1370.13 1214.56 L1370.71 1214.56 L1371.3 1214.56 L1371.88 1214.56 L1372.47 1214.56 L1373.06 1214.56 L1373.64 1214.56 L1374.23 1214.56 L1374.82 1214.56 L1375.4 1214.56 L1375.99 1214.56 L1376.58 1214.56 L1377.16 1214.56 L1377.75 1214.56 L1378.34 1214.56 L1378.92 1214.56 L1379.51 1214.56 L1380.09 1214.56 L1380.68 1214.56 L1381.27 1214.56 L1381.85 1214.56 L1382.44 1214.56 L1383.03 1214.56 L1383.61 1214.56 L1384.2 1214.56 L1384.79 1214.56 L1385.37 1214.56 L1385.96 1214.56 L1386.55 1214.56 L1387.13 1214.56 L1387.72 1214.56 L1388.3 1214.56 L1388.89 1214.56 L1389.48 1214.56 L1390.06 1214.56 L1390.65 1214.56 L1391.24 1214.56 L1391.82 1214.56 L1392.41 1214.56 L1393 1214.56 L1393.58 1214.56 L1394.17 1214.56 L1394.75 1214.56 L1395.34 1214.56 L1395.93 1214.56 L1396.51 1214.56 L1397.1 1214.56 L1397.69 1214.56 L1398.27 1214.56 L1398.86 1214.56 L1399.45 1214.56 L1400.03 1214.56 L1400.62 1214.56 L1401.21 1214.56 L1401.79 1214.56 L1402.38 1214.56 L1402.96 1214.56 L1403.55 1214.56 L1404.14 1214.56 L1404.72 1214.56 L1405.31 1214.56 L1405.9 1214.56 L1406.48 1214.56 L1407.07 1214.56 L1407.66 1214.56 L1408.24 1214.56 L1408.83 1214.56 L1409.42 1214.56 L1410 1214.56 L1410.59 1214.56 L1411.17 1214.56 L1411.76 1214.56 L1412.35 1214.56 L1412.93 1214.56 L1413.52 1214.56 L1414.11 1214.56 L1414.69 1214.56 L1415.28 1214.56 L1415.87 1214.56 L1416.45 1214.56 L1417.04 1214.56 L1417.63 1214.56 L1418.21 1214.56 L1418.8 1214.56 L1419.38 1214.56 L1419.97 1214.56 L1420.56 1214.56 L1421.14 1214.56 L1421.73 1214.56 L1422.32 1214.56 L1422.9 1214.56 L1423.49 1214.56 L1424.08 1214.56 L1424.66 1214.56 L1425.25 1214.56 L1425.83 1214.56 L1426.42 1214.56 L1427.01 1214.56 L1427.59 1214.56 L1428.18 1214.56 L1428.77 1214.56 L1429.35 1214.56 L1429.94 1214.56 L1430.53 1214.56 L1431.11 1214.56 L1431.7 1214.56 L1432.29 1214.56 L1432.87 1214.56 L1433.46 1214.56 L1434.04 1214.56 L1434.63 1214.56 L1435.22 1214.56 L1435.8 1214.56 L1436.39 1214.56 L1436.98 1214.56 L1437.56 1214.56 L1438.15 1214.56 L1438.74 1214.56 L1439.32 1214.56 L1439.91 1214.56 L1440.5 1214.56 L1441.08 1214.56 L1441.67 1214.56 L1442.25 1214.56 L1442.84 1214.56 L1443.43 1214.56 L1444.01 1214.56 L1444.6 1214.56 L1445.19 1214.56 L1445.77 1214.56 L1446.36 1214.56 L1446.95 1214.56 L1447.53 1214.56 L1448.12 1214.56 L1448.7 1214.56 L1449.29 1214.56 L1449.88 1214.56 L1450.46 1214.56 L1451.05 1214.56 L1451.64 1214.56 L1452.22 1214.56 L1452.81 1214.56 L1453.4 1214.56 L1453.98 1214.56 L1454.57 1214.56 L1455.16 1214.56 L1455.74 1214.56 L1456.33 1214.56 L1456.91 1214.56 L1457.5 1214.56 L1458.09 1214.56 L1458.67 1214.56 L1459.26 1214.56 L1459.85 1214.56 L1460.43 1214.56 L1461.02 1214.56 L1461.61 1214.56 L1462.19 1214.56 L1462.78 1214.56 L1463.37 1214.56 L1463.95 1214.56 L1464.54 1214.56 L1465.12 1214.56 L1465.71 1214.56 L1466.3 1214.56 L1466.88 1214.56 L1467.47 1214.56 L1468.06 1214.56 L1468.64 1214.56 L1469.23 1214.56 L1469.82 1214.56 L1470.4 1214.56 L1470.99 1214.56 L1471.57 1214.56 L1472.16 1214.56 L1472.75 1214.56 L1473.33 1214.56 L1473.92 1214.56 L1474.51 1214.56 L1475.09 1214.56 L1475.68 1214.56 L1476.27 1214.56 L1476.85 1214.56 L1477.44 1214.56 L1478.03 1214.56 L1478.61 1214.56 L1479.2 1214.56 L1479.78 1214.56 L1480.37 1214.56 L1480.96 1214.56 L1481.54 1214.56 L1482.13 1214.56 L1482.72 1214.56 L1483.3 1214.56 L1483.89 1214.56 L1484.48 1214.56 L1485.06 1214.56 L1485.65 1214.56 L1486.24 1214.56 L1486.82 1214.56 L1487.41 1214.56 L1487.99 1214.56 L1488.58 1214.56 L1489.17 1214.56 L1489.75 1214.56 L1490.34 1214.56 L1490.93 1214.56 L1491.51 1214.56 L1492.1 1214.56 L1492.69 1214.56 L1493.27 1214.56 L1493.86 1214.56 L1494.45 1214.56 L1495.03 1214.56 L1495.62 1214.56 L1496.2 1214.56 L1496.79 1214.56 L1497.38 1214.56 L1497.96 1214.56 L1498.55 1214.56 L1499.14 1214.56 L1499.72 1214.56 L1500.31 1214.56 L1500.9 1214.56 L1501.48 1214.56 L1502.07 1214.56 L1502.65 1214.56 L1503.24 1214.56 L1503.83 1214.56 L1504.41 1214.56 L1505 1214.56 L1505.59 1214.56 L1506.17 1214.56 L1506.76 1214.56 L1507.35 1214.56 L1507.93 1214.56 L1508.52 1214.56 L1509.11 1214.56 L1509.69 1214.56 L1510.28 1214.56 L1510.86 1214.56 L1511.45 1214.56 L1512.04 1214.56 L1512.62 1214.56 L1513.21 1214.56 L1513.8 1214.56 L1514.38 1214.56 L1514.97 1214.56 L1515.56 1214.56 L1516.14 1214.56 L1516.73 1214.56 L1517.32 1214.56 L1517.9 1214.56 L1518.49 1214.56 L1519.07 1214.56 L1519.66 1214.56 L1520.25 1214.56 L1520.83 1214.56 L1521.42 1214.56 L1522.01 1214.56 L1522.59 1214.56 L1523.18 1214.56 L1523.77 1214.56 L1524.35 1214.56 L1524.94 1214.56 L1525.52 1214.56 L1526.11 1214.56 L1526.7 1214.56 L1527.28 1214.56 L1527.87 1214.56 L1528.46 1214.56 L1529.04 1214.56 L1529.63 1214.56 L1530.22 1214.56 L1530.8 1214.56 L1531.39 1214.56 L1531.98 1214.56 L1532.56 1214.56 L1533.15 1214.56 L1533.73 1214.56 L1534.32 1214.56 L1534.91 1214.56 L1535.49 1214.56 L1536.08 1214.56 L1536.67 1214.56 L1537.25 1214.56 L1537.84 1214.56 L1538.43 1214.56 L1539.01 1214.56 L1539.6 1214.56 L1540.19 1214.56 L1540.77 1214.56 L1541.36 1214.56 L1541.94 1214.56 L1542.53 1214.56 L1543.12 1214.56 L1543.7 1214.56 L1544.29 1214.56 L1544.88 1214.56 L1545.46 1214.56 L1546.05 1214.56 L1546.64 1214.56 L1547.22 1214.56 L1547.81 1214.56 L1548.4 1214.56 L1548.98 1214.56 L1549.57 1214.56 L1550.15 1214.56 L1550.74 1214.56 L1551.33 1214.56 L1551.91 1214.56 L1552.5 1214.56 L1553.09 1214.56 L1553.67 1214.56 L1554.26 1214.56 L1554.85 1214.56 L1555.43 1214.56 L1556.02 1214.56 L1556.6 1214.56 L1557.19 1214.56 L1557.78 1214.56 L1558.36 1214.56 L1558.95 1214.56 L1559.54 1214.56 L1560.12 1214.56 L1560.71 1214.56 L1561.3 1214.56 L1561.88 1214.56 L1562.47 1214.56 L1563.06 1214.56 L1563.64 1214.56 L1564.23 1214.56 L1564.81 1214.56 L1565.4 1214.56 L1565.99 1214.56 L1566.57 1214.56 L1567.16 1214.56 L1567.75 1214.56 L1568.33 1214.56 L1568.92 1214.56 L1569.51 1214.56 L1570.09 1214.56 L1570.68 1214.56 L1571.27 1214.56 L1571.85 1214.56 L1572.44 1214.56 L1573.02 1214.56 L1573.61 1214.56 L1574.2 1214.56 L1574.78 1214.56 L1575.37 1214.56 L1575.96 1214.56 L1576.54 1214.56 L1577.13 1214.56 L1577.72 1214.56 L1578.3 1214.56 L1578.89 1214.56 L1579.47 1214.56 L1580.06 1214.56 L1580.65 1214.56 L1581.23 1214.56 L1581.82 1214.56 L1582.41 1214.56 L1582.99 1214.56 L1583.58 1214.56 L1584.17 1214.56 L1584.75 1214.56 L1585.34 1214.56 L1585.93 1214.56 L1586.51 1214.56 L1587.1 1214.56 L1587.68 1214.56 L1588.27 1214.56 L1588.86 1214.56 L1589.44 1214.56 L1590.03 1214.56 L1590.62 1214.56 L1591.2 1214.56 L1591.79 1214.56 L1592.38 1214.56 L1592.96 1214.56 L1593.55 1214.56 L1594.14 1214.56 L1594.72 1214.56 L1595.31 1214.56 L1595.89 1214.56 L1596.48 1214.56 L1597.07 1214.56 L1597.65 1214.56 L1598.24 1214.56 L1598.83 1214.56 L1599.41 1214.56 L1600 1214.56 L1600.59 1214.56 L1601.17 1214.56 L1601.76 1214.56 L1602.34 1214.56 L1602.93 1214.56 L1603.52 1214.56 L1604.1 1214.56 L1604.69 1214.56 L1605.28 1214.56 L1605.86 1214.56 L1606.45 1214.56 L1607.04 1214.56 L1607.62 1214.56 L1608.21 1214.56 L1608.8 1214.56 L1609.38 1214.56 L1609.97 1214.56 L1610.55 1214.56 L1611.14 1214.56 L1611.73 1214.56 L1612.31 1214.56 L1612.9 1214.56 L1613.49 1214.56 L1614.07 1214.56 L1614.66 1214.56 L1615.25 1214.56 L1615.83 1214.56 L1616.42 1214.56 L1617.01 1214.56 L1617.59 1214.56 L1618.18 1214.56 L1618.76 1214.56 L1619.35 1214.56 L1619.94 1214.56 L1620.52 1214.56 L1621.11 1214.56 L1621.7 1214.56 L1622.28 1214.56 L1622.87 1214.56 L1623.46 1214.56 L1624.04 1214.56 L1624.63 1214.56 L1625.22 1214.56 L1625.8 1214.56 L1626.39 1214.56 L1626.97 1214.56 L1627.56 1214.56 L1628.15 1214.56 L1628.73 1214.56 L1629.32 1214.56 L1629.91 1214.56 L1630.49 1214.56 L1631.08 1214.56 L1631.67 1214.56 L1632.25 1214.56 L1632.84 1214.56 L1633.42 1214.56 L1634.01 1214.56 L1634.6 1214.56 L1635.18 1214.56 L1635.77 1214.56 L1636.36 1214.56 L1636.94 1214.56 L1637.53 1214.56 L1638.12 1214.56 L1638.7 1214.56 L1639.29 1214.56 L1639.88 1214.56 L1640.46 1214.56 L1641.05 1214.56 L1641.63 1214.56 L1642.22 1214.56 L1642.81 1214.56 L1643.39 1214.56 L1643.98 1214.56 L1644.57 1214.56 L1645.15 1214.56 L1645.74 1214.56 L1646.33 1214.56 L1646.91 1214.56 L1647.5 1214.56 L1648.09 1214.56 L1648.67 1214.56 L1649.26 1214.56 L1649.84 1214.56 L1650.43 1214.56 L1651.02 1214.56 L1651.6 1214.56 L1652.19 1214.56 L1652.78 1214.56 L1653.36 1214.56 L1653.95 1214.56 L1654.54 1214.56 L1655.12 1214.56 L1655.71 1214.56 L1656.29 1214.56 L1656.88 1214.56 L1657.47 1214.56 L1658.05 1214.56 L1658.64 1214.56 L1659.23 1214.56 L1659.81 1214.56 L1660.4 1214.56 L1660.99 1214.56 L1661.57 1214.56 L1662.16 1214.56 L1662.75 1214.56 L1663.33 1214.56 L1663.92 1214.56 L1664.5 1214.56 L1665.09 1214.56 L1665.68 1214.56 L1666.26 1214.56 L1666.85 1214.56 L1667.44 1214.56 L1668.02 1214.56 L1668.61 1214.56 L1669.2 1214.56 L1669.78 1214.56 L1670.37 1214.56 L1670.96 1214.56 L1671.54 1214.56 L1672.13 1214.56 L1672.71 1214.56 L1673.3 1214.56 L1673.89 1214.56 L1674.47 1214.56 L1675.06 1214.56 L1675.65 1214.56 L1676.23 1214.56 L1676.82 1214.56 L1677.41 1214.56 L1677.99 1214.56 L1678.58 1214.56 L1679.17 1214.56 L1679.75 1214.56 L1680.34 1214.56 L1680.92 1214.56 L1681.51 1214.56 L1682.1 1214.56 L1682.68 1214.56 L1683.27 1214.56 L1683.86 1214.56 L1684.44 1214.56 L1685.03 1214.56 L1685.62 1214.56 L1686.2 1214.56 L1686.79 1214.56 L1687.37 1214.56 L1687.96 1214.56 L1688.55 1214.56 L1689.13 1214.56 L1689.72 1214.56 L1690.31 1214.56 L1690.89 1214.56 L1691.48 1214.56 L1692.07 1214.56 L1692.65 1214.56 L1693.24 1214.56 L1693.83 1214.56 L1694.41 1214.56 L1695 1214.56 L1695.58 1214.56 L1696.17 1214.56 L1696.76 1214.56 L1697.34 1214.56 L1697.93 1214.56 L1698.52 1214.56 L1699.1 1214.56 L1699.69 1214.56 L1700.28 1214.56 L1700.86 1214.56 L1701.45 1214.56 L1702.04 1214.56 L1702.62 1214.56 L1703.21 1214.56 L1703.79 1214.56 L1704.38 1214.56 L1704.97 1214.56 L1705.55 1214.56 L1706.14 1214.56 L1706.73 1214.56 L1707.31 1214.56 L1707.9 1214.56 L1708.49 1214.56 L1709.07 1214.56 L1709.66 1214.56 L1710.24 1214.56 L1710.83 1214.56 L1711.42 1214.56 L1712 1214.56 L1712.59 1214.56 L1713.18 1214.56 L1713.76 1214.56 L1714.35 1214.56 L1714.94 1214.56 L1715.52 1214.56 L1716.11 1214.56 L1716.7 1214.56 L1717.28 1214.56 L1717.87 1214.56 L1718.45 1214.56 L1719.04 1214.56 L1719.63 1214.56 L1720.21 1214.56 L1720.8 1214.56 L1721.39 1214.56 L1721.97 1214.56 L1722.56 1214.56 L1723.15 1214.56 L1723.73 1214.56 L1724.32 1214.56 L1724.91 1214.56 L1725.49 1214.56 L1726.08 1214.56 L1726.66 1214.56 L1727.25 1214.56 L1727.84 1214.56 L1728.42 1214.56 L1729.01 1214.56 L1729.6 1214.56 L1730.18 1214.56 L1730.77 1214.56 L1731.36 1214.56 L1731.94 1214.56 L1732.53 1214.56 L1733.11 1214.56 L1733.7 1214.56 L1734.29 1214.56 L1734.87 1214.56 L1735.46 1214.56 L1736.05 1214.56 L1736.63 1214.56 L1737.22 1214.56 L1737.81 1214.56 L1738.39 1214.56 L1738.98 1214.56 L1739.57 1214.56 L1740.15 1214.56 L1740.74 1214.56 L1741.32 1214.56 L1741.91 1214.56 L1742.5 1214.56 L1743.08 1214.56 L1743.67 1214.56 L1744.26 1214.56 L1744.84 1214.56 L1745.43 1214.56 L1746.02 1214.56 L1746.6 1214.56 L1747.19 1214.56 L1747.78 1214.56 L1748.36 1214.56 L1748.95 1214.56 L1749.53 1214.56 L1750.12 1214.56 L1750.71 1214.56 L1751.29 1214.56 L1751.88 1214.56 L1752.47 1214.56 L1753.05 1214.56 L1753.64 1214.56 L1754.23 1214.56 L1754.81 1214.56 L1755.4 1214.56 L1755.99 1214.56 L1756.57 1214.56 L1757.16 1214.56 L1757.74 1214.56 L1758.33 1214.56 L1758.92 1214.56 L1759.5 1214.56 L1760.09 1214.56 L1760.68 1214.56 L1761.26 1214.56 L1761.85 1214.56 L1762.44 1214.56 L1763.02 1214.56 L1763.61 1214.56 L1764.19 1214.56 L1764.78 1214.56 L1765.37 1214.56 L1765.95 1214.56 L1766.54 1214.56 L1767.13 1214.56 L1767.71 1214.56 L1768.3 1214.56 L1768.89 1214.56 L1769.47 1214.56 L1770.06 1214.56 L1770.65 1214.56 L1771.23 1214.56 L1771.82 1214.56 L1772.4 1214.56 L1772.99 1214.56 L1773.58 1214.56 L1774.16 1214.56 L1774.75 1214.56 L1775.34 1214.56 L1775.92 1214.56 L1776.51 1214.56 L1777.1 1214.56 L1777.68 1214.56 L1778.27 1214.56 L1778.86 1214.56 L1779.44 1214.56 L1780.03 1214.56 L1780.61 1214.56 L1781.2 1214.56 L1781.79 1214.56 L1782.37 1214.56 L1782.96 1214.56 L1783.55 1214.56 L1784.13 1214.56 L1784.72 1214.56 L1785.31 1214.56 L1785.89 1214.56 L1786.48 1214.56 L1787.06 1214.56 L1787.65 1214.56 L1788.24 1214.56 L1788.82 1214.56 L1789.41 1214.56 L1790 1214.56 L1790.58 1214.56 L1791.17 1214.56 L1791.76 1214.56 L1792.34 1214.56 L1792.93 1214.56 L1793.52 1214.56 L1794.1 1214.56 L1794.69 1214.56 L1795.27 1214.56 L1795.86 1214.56 L1796.45 1214.56 L1797.03 1214.56 L1797.62 1214.56 L1798.21 1214.56 L1798.79 1214.56 L1799.38 1214.56 L1799.97 1214.56 L1800.55 1214.56 L1801.14 1214.56 L1801.73 1214.56 L1802.31 1214.56 L1802.9 1214.56 L1803.48 1214.56 L1804.07 1214.56 L1804.66 1214.56 L1805.24 1214.56 L1805.83 1214.56 L1806.42 1214.56 L1807 1214.56 L1807.59 1214.56 L1808.18 1214.56 L1808.76 1214.56 L1809.35 1214.56 L1809.94 1214.56 L1810.52 1214.56 L1811.11 1214.56 L1811.69 1214.56 L1812.28 1214.56 L1812.87 1214.56 L1813.45 1214.56 L1814.04 1214.56 L1814.63 1214.56 L1815.21 1214.56 L1815.8 1214.56 L1816.39 1214.56 L1816.97 1214.56 L1817.56 1214.56 L1818.14 1214.56 L1818.73 1214.56 L1819.32 1214.56 L1819.9 1214.56 L1820.49 1214.56 L1821.08 1214.56 L1821.66 1214.56 L1822.25 1214.56 L1822.84 1214.56 L1823.42 1214.56 L1824.01 1214.56 L1824.6 1214.56 L1825.18 1214.56 L1825.77 1214.56 L1826.35 1214.56 L1826.94 1214.56 L1827.53 1214.56 L1828.11 1214.56 L1828.7 1214.56 L1829.29 1214.56 L1829.87 1214.56 L1830.46 1214.56 L1831.05 1214.56 L1831.63 1214.56 L1832.22 1214.56 L1832.81 1214.56 L1833.39 1214.56 L1833.98 1214.56 L1834.56 1214.56 L1835.15 1214.56 L1835.74 1214.56 L1836.32 1214.56 L1836.91 1214.56 L1837.5 1214.56 L1838.08 1214.56 L1838.67 1214.56 L1839.26 1214.56 L1839.84 1214.56 L1840.43 1214.56 L1841.01 1214.56 L1841.6 1214.56 L1842.19 1214.56 L1842.77 1214.56 L1843.36 1214.56 L1843.95 1214.56 L1844.53 1214.56 L1845.12 1214.56 L1845.71 1214.56 L1846.29 1214.56 L1846.88 1214.56 L1847.47 1214.56 L1848.05 1214.56 L1848.64 1214.56 L1849.22 1214.56 L1849.81 1214.56 L1850.4 1214.56 L1850.98 1214.56 L1851.57 1214.56 L1852.16 1214.56 L1852.74 1214.56 L1853.33 1214.56 L1853.92 1214.56 L1854.5 1214.56 L1855.09 1214.56 L1855.68 1214.56 L1856.26 1214.56 L1856.85 1214.56 L1857.43 1214.56 L1858.02 1214.56 L1858.61 1214.56 L1859.19 1214.56 L1859.78 1214.56 L1860.37 1214.56 L1860.95 1214.56 L1861.54 1214.56 L1862.13 1214.56 L1862.71 1214.56 L1863.3 1214.56 L1863.88 1214.56 L1864.47 1214.56 L1865.06 1214.56 L1865.64 1214.56 L1866.23 1214.56 L1866.82 1214.56 L1867.4 1214.56 L1867.99 1214.56 L1868.58 1214.56 L1869.16 1214.56 L1869.75 1214.56 L1870.34 1214.56 L1870.92 1214.56 L1871.51 1214.56 L1872.09 1214.56 L1872.68 1214.56 L1873.27 1214.56 L1873.85 1214.56 L1874.44 1214.56 L1875.03 1214.56 L1875.61 1214.56 L1876.2 1214.56 L1876.79 1214.56 L1877.37 1214.56 L1877.96 1214.56 L1878.55 1214.56 L1879.13 1214.56 L1879.72 1214.56 L1880.3 1214.56 L1880.89 1214.56 L1881.48 1214.56 L1882.06 1214.56 L1882.65 1214.56 L1883.24 1214.56 L1883.82 1214.56 L1884.41 1214.56 L1885 1214.56 L1885.58 1214.56 L1886.17 1214.56 L1886.76 1214.56 L1887.34 1214.56 L1887.93 1214.56 L1888.51 1214.56 L1889.1 1214.56 L1889.69 1214.56 L1890.27 1214.56 L1890.86 1214.56 L1891.45 1214.56 L1892.03 1214.56 L1892.62 1214.56 L1893.21 1214.56 L1893.79 1214.56 L1894.38 1214.56 L1894.96 1214.56 L1895.55 1214.56 L1896.14 1214.56 L1896.72 1214.56 L1897.31 1214.56 L1897.9 1214.56 L1898.48 1214.56 L1899.07 1214.56 L1899.66 1214.56 L1900.24 1214.56 L1900.83 1214.56 L1901.42 1214.56 L1902 1214.56 L1902.59 1214.56 L1903.17 1214.56 L1903.76 1214.56 L1904.35 1214.56 L1904.93 1214.56 L1905.52 1214.56 L1906.11 1214.56 L1906.69 1214.56 L1907.28 1214.56 L1907.87 1214.56 L1908.45 1214.56 L1909.04 1214.56 L1909.63 1214.56 L1910.21 1214.56 L1910.8 1214.56 L1911.38 1214.56 L1911.97 1214.56 L1912.56 1214.56 L1913.14 1214.56 L1913.73 1214.56 L1914.32 1214.56 L1914.9 1214.56 L1915.49 1214.56 L1916.08 1214.56 L1916.66 1214.56 L1917.25 1214.56 L1917.83 1214.56 L1918.42 1214.56 L1919.01 1214.56 L1919.59 1214.56 L1920.18 1214.56 L1920.77 1214.56 L1921.35 1214.56 L1921.94 1214.56 L1922.53 1214.56 L1923.11 1214.56 L1923.7 1214.56 L1924.29 1214.56 L1924.87 1214.56 L1925.46 1214.56 L1926.04 1214.56 L1926.63 1214.56 L1927.22 1214.56 L1927.8 1214.56 L1928.39 1214.56 L1928.98 1214.56 L1929.56 1214.56 L1930.15 1214.56 L1930.74 1214.56 L1931.32 1214.56 L1931.91 1214.56 L1932.5 1214.56 L1933.08 1214.56 L1933.67 1214.56 L1934.25 1214.56 L1934.84 1214.56 L1935.43 1214.56 L1936.01 1214.56 L1936.6 1214.56 L1937.19 1214.56 L1937.77 1214.56 L1938.36 1214.56 L1938.95 1214.56 L1939.53 1214.56 L1940.12 1214.56 L1940.71 1214.56 L1941.29 1214.56 L1941.88 1214.56 L1942.46 1214.56 L1943.05 1214.56 L1943.64 1214.56 L1944.22 1214.56 L1944.81 1214.56 L1945.4 1214.56 L1945.98 1214.56 L1946.57 1214.56 L1947.16 1214.56 L1947.74 1214.56 L1948.33 1214.56 L1948.91 1214.56 L1949.5 1214.56 L1950.09 1214.56 L1950.67 1214.56 L1951.26 1214.56 L1951.85 1214.56 L1952.43 1214.56 L1953.02 1214.56 L1953.61 1214.56 L1954.19 1214.56 L1954.78 1214.56 L1955.37 1214.56 L1955.95 1214.56 L1956.54 1214.56 L1957.12 1214.56 L1957.71 1214.56 L1958.3 1214.56 L1958.88 1214.56 L1959.47 1214.56 L1960.06 1214.56 L1960.64 1214.56 L1961.23 1214.56 L1961.82 1214.56 L1962.4 1214.56 L1962.99 1214.56 L1963.58 1214.56 L1964.16 1214.56 L1964.75 1214.56 L1965.33 1214.56 L1965.92 1214.56 L1966.51 1214.56 L1967.09 1214.56 L1967.68 1214.56 L1968.27 1214.56 L1968.85 1214.56 L1969.44 1214.56 L1970.03 1214.56 L1970.61 1214.56 L1971.2 1214.56 L1971.78 1214.56 L1972.37 1214.56 L1972.96 1214.56 L1973.54 1214.56 L1974.13 1214.56 L1974.72 1214.56 L1975.3 1214.56 L1975.89 1214.56 L1976.48 1214.56 L1977.06 1214.56 L1977.65 1214.56 L1978.24 1214.56 L1978.82 1214.56 L1979.41 1214.56 L1979.99 1214.56 L1980.58 1214.56 L1981.17 1214.56 L1981.75 1214.56 L1982.34 1214.56 L1982.93 1214.56 L1983.51 1214.56 L1984.1 1214.56 L1984.69 1214.56 L1985.27 1214.56 L1985.86 1214.56 L1986.45 1214.56 L1987.03 1214.56 L1987.62 1214.56 L1988.2 1214.56 L1988.79 1214.56 L1989.38 1214.56 L1989.96 1214.56 L1990.55 1214.56 L1991.14 1214.56 L1991.72 1214.56 L1992.31 1214.56 L1992.9 1214.56 L1993.48 1214.56 L1994.07 1214.56 L1994.65 1214.56 L1995.24 1214.56 L1995.83 1214.56 L1996.41 1214.56 L1997 1214.56 L1997.59 1214.56 L1998.17 1214.56 L1998.76 1214.56 L1999.35 1214.56 L1999.93 1214.56 L2000.52 1214.56 L2001.11 1214.56 L2001.69 1214.56 L2002.28 1214.56 L2002.86 1214.56 L2003.45 1214.56 L2004.04 1214.56 L2004.62 1214.56 L2005.21 1214.56 L2005.8 1214.56 L2006.38 1214.56 L2006.97 1214.56 L2007.56 1214.56 L2008.14 1214.56 L2008.73 1214.56 L2009.32 1214.56 L2009.9 1214.56 L2010.49 1214.56 L2011.07 1214.56 L2011.66 1214.56 L2012.25 1214.56 L2012.83 1214.56 L2013.42 1214.56 L2014.01 1214.56 L2014.59 1214.56 L2015.18 1214.56 L2015.77 1214.56 L2016.35 1214.56 L2016.94 1214.56 L2017.53 1214.56 L2018.11 1214.56 L2018.7 1214.56 L2019.28 1214.56 L2019.87 1214.56 L2020.46 1214.56 L2021.04 1214.56 L2021.63 1214.56 L2022.22 1214.56 L2022.8 1214.56 L2023.39 1214.56 L2023.98 1214.56 L2024.56 1214.56 L2025.15 1214.56 L2025.73 1214.56 L2026.32 1214.56 L2026.91 1214.56 L2027.49 1214.56 L2028.08 1214.56 L2028.67 1214.56 L2029.25 1214.56 L2029.84 1214.56 L2030.43 1214.56 L2031.01 1214.56 L2031.6 1214.56 L2032.19 1214.56 L2032.77 1214.56 L2033.36 1214.56 L2033.94 1214.56 L2034.53 1214.56 L2035.12 1214.56 L2035.7 1214.56 L2036.29 1214.56 L2036.88 1214.56 L2037.46 1214.56 L2038.05 1214.56 L2038.64 1214.56 L2039.22 1214.56 L2039.81 1214.56 L2040.4 1214.56 L2040.98 1214.56 L2041.57 1214.56 L2042.15 1214.56 L2042.74 1214.56 L2043.33 1214.56 L2043.91 1214.56 L2044.5 1214.56 L2045.09 1214.56 L2045.67 1214.56 L2046.26 1214.56 L2046.85 1214.56 L2047.43 1214.56 L2048.02 1214.56 L2048.6 1214.56 L2049.19 1214.56 L2049.78 1214.56 L2050.36 1214.56 L2050.95 1214.56 L2051.54 1214.56 L2052.12 1214.56 L2052.71 1214.56 L2053.3 1214.56 L2053.88 1214.56 L2054.47 1214.56 L2055.06 1214.56 L2055.64 1214.56 L2056.23 1214.56 L2056.81 1214.56 L2057.4 1214.56 L2057.99 1214.56 L2058.57 1214.56 L2059.16 1214.56 L2059.75 1214.56 L2060.33 1214.56 L2060.92 1214.56 L2061.51 1214.56 L2062.09 1214.56 L2062.68 1214.56 L2063.27 1214.56 L2063.85 1214.56 L2064.44 1214.56 L2065.02 1214.56 L2065.61 1214.56 L2066.2 1214.56 L2066.78 1214.56 L2067.37 1214.56 L2067.96 1214.56 L2068.54 1214.56 L2069.13 1214.56 L2069.72 1214.56 L2070.3 1214.56 L2070.89 1214.56 L2071.48 1214.56 L2072.06 1214.56 L2072.65 1214.56 L2073.23 1214.56 L2073.82 1214.56 L2074.41 1214.56 L2074.99 1214.56 L2075.58 1214.56 L2076.17 1214.56 L2076.75 1214.56 L2077.34 1214.56 L2077.93 1214.56 L2078.51 1214.56 L2079.1 1214.56 L2079.68 1214.56 L2080.27 1214.56 L2080.86 1214.56 L2081.44 1214.56 L2082.03 1214.56 L2082.62 1214.56 L2083.2 1214.56 L2083.79 1214.56 L2084.38 1214.56 L2084.96 1214.56 L2085.55 1214.56 L2086.14 1214.56 L2086.72 1214.56 L2087.31 1214.56 L2087.89 1214.56 L2088.48 1214.56 L2089.07 1214.56 L2089.65 1214.56 L2090.24 1214.56 L2090.83 1214.56 L2091.41 1214.56 L2092 1214.56 L2092.59 1214.56 L2093.17 1214.56 L2093.76 1214.56 L2094.35 1214.56 L2094.93 1214.56 L2095.52 1214.56 L2096.1 1214.56 L2096.69 1214.56 L2097.28 1214.56 L2097.86 1214.56 L2098.45 1214.56 L2099.04 1214.56 L2099.62 1214.56 L2100.21 1214.56 L2100.8 1214.56 L2101.38 1214.56 L2101.97 1214.56 L2102.55 1214.56 L2103.14 1214.56 L2103.73 1214.56 L2104.31 1214.56 L2104.9 1214.56 L2105.49 1214.56 L2106.07 1214.56 L2106.66 1214.56 L2107.25 1214.56 L2107.83 1214.56 L2108.42 1214.56 L2109.01 1214.56 L2109.59 1214.56 L2110.18 1214.56 L2110.76 1214.56 L2111.35 1214.56 L2111.94 1214.56 L2112.52 1214.56 L2113.11 1214.56 L2113.7 1214.56 L2114.28 1214.56 L2114.87 1214.56 L2115.46 1214.56 L2116.04 1214.56 L2116.63 1214.56 L2117.22 1214.56 L2117.8 1214.56 L2118.39 1214.56 L2118.97 1214.56 L2119.56 1214.56 L2120.15 1214.56 L2120.73 1214.56 L2121.32 1214.56 L2121.91 1214.56 L2122.49 1214.56 L2123.08 1214.56 L2123.67 1214.56 L2124.25 1214.56 L2124.84 1214.56 L2125.42 1214.56 L2126.01 1214.56 L2126.6 1214.56 L2127.18 1214.56 L2127.77 1214.56 L2128.36 1214.56 L2128.94 1214.56 L2129.53 1214.56 L2130.12 1214.56 L2130.7 1214.56 L2131.29 1214.56 L2131.88 1214.56 L2132.46 1214.56 L2133.05 1214.56 L2133.63 1214.56 L2134.22 1214.56 L2134.81 1214.56 L2135.39 1214.56 L2135.98 1214.56 L2136.57 1214.56 L2137.15 1214.56 L2137.74 1214.56 L2138.33 1214.56 L2138.91 1214.56 L2139.5 1214.56 L2140.09 1214.56 L2140.67 1214.56 L2141.26 1214.56 L2141.84 1214.56 L2142.43 1214.56 L2143.02 1214.56 L2143.6 1214.56 L2144.19 1214.56 L2144.78 1214.56 L2145.36 1214.56 L2145.95 1214.56 L2146.54 1214.56 L2147.12 1214.56 L2147.71 1214.56 L2148.3 1214.56 L2148.88 1214.56 L2149.47 1214.56 L2150.05 1214.56 L2150.64 1214.56 L2151.23 1214.56 L2151.81 1214.56 L2152.4 1214.56 L2152.99 1214.56 L2153.57 1214.56 L2154.16 1214.56 L2154.75 1214.56 L2155.33 1214.56 L2155.92 1214.56 L2156.5 1214.56 L2157.09 1214.56 L2157.68 1214.56 L2158.26 1214.56 L2158.26 1213.85 L2157.68 1213.85 L2157.09 1213.85 L2156.5 1213.85 L2155.92 1213.85 L2155.33 1213.85 L2154.75 1213.85 L2154.16 1213.85 L2153.57 1213.85 L2152.99 1213.85 L2152.4 1213.85 L2151.81 1213.85 L2151.23 1213.85 L2150.64 1213.85 L2150.05 1213.85 L2149.47 1213.85 L2148.88 1213.85 L2148.3 1213.85 L2147.71 1213.85 L2147.12 1213.85 L2146.54 1213.85 L2145.95 1213.85 L2145.36 1213.85 L2144.78 1213.85 L2144.19 1213.85 L2143.6 1213.85 L2143.02 1213.85 L2142.43 1213.85 L2141.84 1213.85 L2141.26 1213.85 L2140.67 1213.85 L2140.09 1213.85 L2139.5 1213.85 L2138.91 1213.85 L2138.33 1213.85 L2137.74 1213.85 L2137.15 1213.85 L2136.57 1213.85 L2135.98 1213.85 L2135.39 1213.85 L2134.81 1213.85 L2134.22 1213.85 L2133.63 1213.85 L2133.05 1213.85 L2132.46 1213.85 L2131.88 1213.85 L2131.29 1213.85 L2130.7 1213.85 L2130.12 1213.85 L2129.53 1213.85 L2128.94 1213.85 L2128.36 1213.85 L2127.77 1213.85 L2127.18 1213.85 L2126.6 1213.85 L2126.01 1213.85 L2125.42 1213.85 L2124.84 1213.85 L2124.25 1213.85 L2123.67 1213.85 L2123.08 1213.85 L2122.49 1213.85 L2121.91 1213.85 L2121.32 1213.85 L2120.73 1213.85 L2120.15 1213.85 L2119.56 1213.85 L2118.97 1213.85 L2118.39 1213.85 L2117.8 1213.85 L2117.22 1213.85 L2116.63 1213.85 L2116.04 1213.85 L2115.46 1213.85 L2114.87 1213.85 L2114.28 1213.85 L2113.7 1213.85 L2113.11 1213.85 L2112.52 1213.85 L2111.94 1213.85 L2111.35 1213.85 L2110.76 1213.85 L2110.18 1213.85 L2109.59 1213.85 L2109.01 1213.85 L2108.42 1213.85 L2107.83 1213.85 L2107.25 1213.85 L2106.66 1213.85 L2106.07 1213.85 L2105.49 1213.85 L2104.9 1213.85 L2104.31 1213.85 L2103.73 1213.85 L2103.14 1213.85 L2102.55 1213.85 L2101.97 1213.85 L2101.38 1213.85 L2100.8 1213.85 L2100.21 1213.85 L2099.62 1213.85 L2099.04 1213.85 L2098.45 1213.85 L2097.86 1213.85 L2097.28 1213.85 L2096.69 1213.85 L2096.1 1213.85 L2095.52 1213.85 L2094.93 1213.85 L2094.35 1213.85 L2093.76 1213.85 L2093.17 1213.85 L2092.59 1213.85 L2092 1213.85 L2091.41 1213.85 L2090.83 1213.85 L2090.24 1213.85 L2089.65 1213.85 L2089.07 1213.85 L2088.48 1213.85 L2087.89 1213.85 L2087.31 1213.85 L2086.72 1213.85 L2086.14 1213.85 L2085.55 1213.85 L2084.96 1213.85 L2084.38 1213.85 L2083.79 1213.85 L2083.2 1213.85 L2082.62 1213.85 L2082.03 1213.85 L2081.44 1213.85 L2080.86 1213.85 L2080.27 1213.85 L2079.68 1213.85 L2079.1 1213.85 L2078.51 1213.85 L2077.93 1213.85 L2077.34 1213.85 L2076.75 1213.85 L2076.17 1213.85 L2075.58 1213.85 L2074.99 1213.85 L2074.41 1213.85 L2073.82 1213.85 L2073.23 1213.85 L2072.65 1213.85 L2072.06 1213.85 L2071.48 1213.85 L2070.89 1213.85 L2070.3 1213.85 L2069.72 1213.85 L2069.13 1213.85 L2068.54 1213.85 L2067.96 1213.85 L2067.37 1213.85 L2066.78 1213.85 L2066.2 1213.85 L2065.61 1213.85 L2065.02 1213.85 L2064.44 1213.85 L2063.85 1213.85 L2063.27 1213.85 L2062.68 1213.85 L2062.09 1213.85 L2061.51 1213.85 L2060.92 1213.85 L2060.33 1213.85 L2059.75 1213.85 L2059.16 1213.85 L2058.57 1213.85 L2057.99 1213.85 L2057.4 1213.85 L2056.81 1213.85 L2056.23 1213.85 L2055.64 1213.85 L2055.06 1213.85 L2054.47 1213.85 L2053.88 1213.85 L2053.3 1213.85 L2052.71 1213.85 L2052.12 1213.85 L2051.54 1213.85 L2050.95 1213.85 L2050.36 1213.85 L2049.78 1213.85 L2049.19 1213.85 L2048.6 1213.85 L2048.02 1213.85 L2047.43 1213.85 L2046.85 1213.85 L2046.26 1213.85 L2045.67 1213.85 L2045.09 1213.85 L2044.5 1213.85 L2043.91 1213.85 L2043.33 1213.85 L2042.74 1213.85 L2042.15 1213.85 L2041.57 1213.85 L2040.98 1213.85 L2040.4 1213.85 L2039.81 1213.85 L2039.22 1213.85 L2038.64 1213.85 L2038.05 1213.85 L2037.46 1213.85 L2036.88 1213.85 L2036.29 1213.85 L2035.7 1213.85 L2035.12 1213.85 L2034.53 1213.85 L2033.94 1213.85 L2033.36 1213.85 L2032.77 1213.85 L2032.19 1213.85 L2031.6 1213.85 L2031.01 1213.85 L2030.43 1213.85 L2029.84 1213.85 L2029.25 1213.85 L2028.67 1213.85 L2028.08 1213.85 L2027.49 1213.85 L2026.91 1213.85 L2026.32 1213.85 L2025.73 1213.85 L2025.15 1213.85 L2024.56 1213.85 L2023.98 1213.85 L2023.39 1213.85 L2022.8 1213.85 L2022.22 1213.85 L2021.63 1213.85 L2021.04 1213.85 L2020.46 1213.85 L2019.87 1213.85 L2019.28 1213.85 L2018.7 1213.85 L2018.11 1213.85 L2017.53 1213.85 L2016.94 1213.85 L2016.35 1213.85 L2015.77 1213.85 L2015.18 1213.85 L2014.59 1213.85 L2014.01 1213.85 L2013.42 1213.85 L2012.83 1213.85 L2012.25 1213.85 L2011.66 1213.85 L2011.07 1213.85 L2010.49 1213.85 L2009.9 1213.85 L2009.32 1213.85 L2008.73 1213.85 L2008.14 1213.85 L2007.56 1213.85 L2006.97 1213.85 L2006.38 1213.85 L2005.8 1213.85 L2005.21 1213.85 L2004.62 1213.85 L2004.04 1213.85 L2003.45 1213.85 L2002.86 1213.85 L2002.28 1213.85 L2001.69 1213.85 L2001.11 1213.85 L2000.52 1213.85 L1999.93 1213.85 L1999.35 1213.85 L1998.76 1213.85 L1998.17 1213.85 L1997.59 1213.85 L1997 1213.85 L1996.41 1213.85 L1995.83 1213.85 L1995.24 1213.85 L1994.65 1213.85 L1994.07 1213.85 L1993.48 1213.85 L1992.9 1213.85 L1992.31 1213.85 L1991.72 1213.85 L1991.14 1213.85 L1990.55 1213.85 L1989.96 1213.85 L1989.38 1213.85 L1988.79 1213.85 L1988.2 1213.85 L1987.62 1213.85 L1987.03 1213.85 L1986.45 1213.85 L1985.86 1213.85 L1985.27 1213.85 L1984.69 1213.85 L1984.1 1213.85 L1983.51 1213.85 L1982.93 1213.85 L1982.34 1213.85 L1981.75 1213.85 L1981.17 1213.85 L1980.58 1213.85 L1979.99 1213.85 L1979.41 1213.85 L1978.82 1213.85 L1978.24 1213.85 L1977.65 1213.85 L1977.06 1213.85 L1976.48 1213.85 L1975.89 1213.85 L1975.3 1213.85 L1974.72 1213.85 L1974.13 1213.85 L1973.54 1213.85 L1972.96 1213.85 L1972.37 1213.85 L1971.78 1213.85 L1971.2 1213.85 L1970.61 1213.85 L1970.03 1213.85 L1969.44 1213.85 L1968.85 1213.85 L1968.27 1213.85 L1967.68 1213.85 L1967.09 1213.85 L1966.51 1213.85 L1965.92 1213.85 L1965.33 1213.85 L1964.75 1213.85 L1964.16 1213.85 L1963.58 1213.85 L1962.99 1213.85 L1962.4 1213.85 L1961.82 1213.85 L1961.23 1213.85 L1960.64 1213.85 L1960.06 1213.85 L1959.47 1213.85 L1958.88 1213.85 L1958.3 1213.85 L1957.71 1213.85 L1957.12 1213.85 L1956.54 1213.85 L1955.95 1213.85 L1955.37 1213.85 L1954.78 1213.85 L1954.19 1213.85 L1953.61 1213.85 L1953.02 1213.85 L1952.43 1213.85 L1951.85 1213.85 L1951.26 1213.85 L1950.67 1213.85 L1950.09 1213.85 L1949.5 1213.85 L1948.91 1213.85 L1948.33 1213.85 L1947.74 1213.85 L1947.16 1213.85 L1946.57 1213.85 L1945.98 1213.85 L1945.4 1213.85 L1944.81 1213.85 L1944.22 1213.85 L1943.64 1213.85 L1943.05 1213.85 L1942.46 1213.85 L1941.88 1213.85 L1941.29 1213.85 L1940.71 1213.85 L1940.12 1213.85 L1939.53 1213.85 L1938.95 1213.85 L1938.36 1213.85 L1937.77 1213.85 L1937.19 1213.85 L1936.6 1213.85 L1936.01 1213.85 L1935.43 1213.85 L1934.84 1213.85 L1934.25 1213.85 L1933.67 1213.85 L1933.08 1213.85 L1932.5 1213.85 L1931.91 1213.85 L1931.32 1213.85 L1930.74 1213.85 L1930.15 1213.85 L1929.56 1213.85 L1928.98 1213.85 L1928.39 1213.85 L1927.8 1213.85 L1927.22 1213.85 L1926.63 1213.85 L1926.04 1213.85 L1925.46 1213.85 L1924.87 1213.85 L1924.29 1213.85 L1923.7 1213.85 L1923.11 1213.85 L1922.53 1213.85 L1921.94 1213.85 L1921.35 1213.85 L1920.77 1213.85 L1920.18 1213.85 L1919.59 1213.85 L1919.01 1213.85 L1918.42 1213.85 L1917.83 1213.85 L1917.25 1213.85 L1916.66 1213.85 L1916.08 1213.85 L1915.49 1213.85 L1914.9 1213.85 L1914.32 1213.85 L1913.73 1213.85 L1913.14 1213.85 L1912.56 1213.85 L1911.97 1213.85 L1911.38 1213.85 L1910.8 1213.85 L1910.21 1213.85 L1909.63 1213.85 L1909.04 1213.85 L1908.45 1213.85 L1907.87 1213.85 L1907.28 1213.85 L1906.69 1213.85 L1906.11 1213.85 L1905.52 1213.85 L1904.93 1213.85 L1904.35 1213.85 L1903.76 1213.85 L1903.17 1213.85 L1902.59 1213.85 L1902 1213.85 L1901.42 1213.85 L1900.83 1213.85 L1900.24 1213.85 L1899.66 1213.85 L1899.07 1213.85 L1898.48 1213.85 L1897.9 1213.85 L1897.31 1213.85 L1896.72 1213.85 L1896.14 1213.85 L1895.55 1213.85 L1894.96 1213.85 L1894.38 1213.85 L1893.79 1213.85 L1893.21 1213.85 L1892.62 1213.85 L1892.03 1213.85 L1891.45 1213.85 L1890.86 1213.85 L1890.27 1213.85 L1889.69 1213.85 L1889.1 1213.85 L1888.51 1213.85 L1887.93 1213.85 L1887.34 1213.85 L1886.76 1213.85 L1886.17 1213.85 L1885.58 1213.85 L1885 1213.85 L1884.41 1213.85 L1883.82 1213.85 L1883.24 1213.85 L1882.65 1213.85 L1882.06 1213.85 L1881.48 1213.85 L1880.89 1213.85 L1880.3 1213.85 L1879.72 1213.85 L1879.13 1213.85 L1878.55 1213.85 L1877.96 1213.85 L1877.37 1213.85 L1876.79 1213.85 L1876.2 1213.85 L1875.61 1213.85 L1875.03 1213.85 L1874.44 1213.85 L1873.85 1213.85 L1873.27 1213.85 L1872.68 1213.85 L1872.09 1213.85 L1871.51 1213.85 L1870.92 1213.85 L1870.34 1213.85 L1869.75 1213.85 L1869.16 1213.85 L1868.58 1213.85 L1867.99 1213.85 L1867.4 1213.85 L1866.82 1213.85 L1866.23 1213.85 L1865.64 1213.85 L1865.06 1213.85 L1864.47 1213.85 L1863.88 1213.85 L1863.3 1213.85 L1862.71 1213.85 L1862.13 1213.85 L1861.54 1213.85 L1860.95 1213.85 L1860.37 1213.85 L1859.78 1213.85 L1859.19 1213.85 L1858.61 1213.85 L1858.02 1213.85 L1857.43 1213.85 L1856.85 1213.85 L1856.26 1213.85 L1855.68 1213.85 L1855.09 1213.85 L1854.5 1213.85 L1853.92 1213.85 L1853.33 1213.85 L1852.74 1213.85 L1852.16 1213.85 L1851.57 1213.85 L1850.98 1213.85 L1850.4 1213.85 L1849.81 1213.85 L1849.22 1213.85 L1848.64 1213.85 L1848.05 1213.85 L1847.47 1213.85 L1846.88 1213.85 L1846.29 1213.85 L1845.71 1213.85 L1845.12 1213.85 L1844.53 1213.85 L1843.95 1213.85 L1843.36 1213.85 L1842.77 1213.85 L1842.19 1213.85 L1841.6 1213.85 L1841.01 1213.85 L1840.43 1213.85 L1839.84 1213.85 L1839.26 1213.85 L1838.67 1213.85 L1838.08 1213.85 L1837.5 1213.85 L1836.91 1213.85 L1836.32 1213.85 L1835.74 1213.85 L1835.15 1213.85 L1834.56 1213.85 L1833.98 1213.85 L1833.39 1213.85 L1832.81 1213.85 L1832.22 1213.85 L1831.63 1213.85 L1831.05 1213.85 L1830.46 1213.85 L1829.87 1213.85 L1829.29 1213.85 L1828.7 1213.85 L1828.11 1213.85 L1827.53 1213.85 L1826.94 1213.85 L1826.35 1213.85 L1825.77 1213.85 L1825.18 1213.85 L1824.6 1213.85 L1824.01 1213.85 L1823.42 1213.85 L1822.84 1213.85 L1822.25 1213.85 L1821.66 1213.85 L1821.08 1213.85 L1820.49 1213.85 L1819.9 1213.85 L1819.32 1213.85 L1818.73 1213.85 L1818.14 1213.85 L1817.56 1213.85 L1816.97 1213.85 L1816.39 1213.85 L1815.8 1213.85 L1815.21 1213.85 L1814.63 1213.85 L1814.04 1213.85 L1813.45 1213.85 L1812.87 1213.85 L1812.28 1213.85 L1811.69 1213.85 L1811.11 1213.85 L1810.52 1213.85 L1809.94 1213.85 L1809.35 1213.85 L1808.76 1213.85 L1808.18 1213.85 L1807.59 1213.85 L1807 1213.85 L1806.42 1213.85 L1805.83 1213.85 L1805.24 1213.85 L1804.66 1213.85 L1804.07 1213.85 L1803.48 1213.85 L1802.9 1213.85 L1802.31 1213.85 L1801.73 1213.85 L1801.14 1213.85 L1800.55 1213.85 L1799.97 1213.85 L1799.38 1213.85 L1798.79 1213.85 L1798.21 1213.85 L1797.62 1213.85 L1797.03 1213.85 L1796.45 1213.85 L1795.86 1213.85 L1795.27 1213.85 L1794.69 1213.85 L1794.1 1213.85 L1793.52 1213.85 L1792.93 1213.85 L1792.34 1213.85 L1791.76 1213.85 L1791.17 1213.85 L1790.58 1213.85 L1790 1213.85 L1789.41 1213.85 L1788.82 1213.85 L1788.24 1213.85 L1787.65 1213.85 L1787.06 1213.85 L1786.48 1213.85 L1785.89 1213.85 L1785.31 1213.85 L1784.72 1213.85 L1784.13 1213.85 L1783.55 1213.85 L1782.96 1213.85 L1782.37 1213.85 L1781.79 1213.85 L1781.2 1213.85 L1780.61 1213.85 L1780.03 1213.85 L1779.44 1213.85 L1778.86 1213.85 L1778.27 1213.85 L1777.68 1213.85 L1777.1 1213.85 L1776.51 1213.85 L1775.92 1213.85 L1775.34 1213.85 L1774.75 1213.85 L1774.16 1213.85 L1773.58 1213.85 L1772.99 1213.85 L1772.4 1213.85 L1771.82 1213.85 L1771.23 1213.85 L1770.65 1213.85 L1770.06 1213.85 L1769.47 1213.85 L1768.89 1213.85 L1768.3 1213.85 L1767.71 1213.85 L1767.13 1213.85 L1766.54 1213.85 L1765.95 1213.85 L1765.37 1213.85 L1764.78 1213.85 L1764.19 1213.85 L1763.61 1213.85 L1763.02 1213.85 L1762.44 1213.85 L1761.85 1213.85 L1761.26 1213.85 L1760.68 1213.85 L1760.09 1213.85 L1759.5 1213.85 L1758.92 1213.85 L1758.33 1213.85 L1757.74 1213.85 L1757.16 1213.85 L1756.57 1213.85 L1755.99 1213.85 L1755.4 1213.85 L1754.81 1213.85 L1754.23 1213.85 L1753.64 1213.85 L1753.05 1213.85 L1752.47 1213.85 L1751.88 1213.85 L1751.29 1213.85 L1750.71 1213.85 L1750.12 1213.85 L1749.53 1213.85 L1748.95 1213.85 L1748.36 1213.85 L1747.78 1213.85 L1747.19 1213.85 L1746.6 1213.85 L1746.02 1213.85 L1745.43 1213.85 L1744.84 1213.85 L1744.26 1213.85 L1743.67 1213.85 L1743.08 1213.85 L1742.5 1213.85 L1741.91 1213.85 L1741.32 1213.85 L1740.74 1213.85 L1740.15 1213.85 L1739.57 1213.85 L1738.98 1213.85 L1738.39 1213.85 L1737.81 1213.85 L1737.22 1213.85 L1736.63 1213.85 L1736.05 1213.85 L1735.46 1213.85 L1734.87 1213.85 L1734.29 1213.85 L1733.7 1213.85 L1733.11 1213.85 L1732.53 1213.85 L1731.94 1213.85 L1731.36 1213.85 L1730.77 1213.85 L1730.18 1213.85 L1729.6 1213.85 L1729.01 1213.85 L1728.42 1213.85 L1727.84 1213.85 L1727.25 1213.85 L1726.66 1213.85 L1726.08 1213.85 L1725.49 1213.85 L1724.91 1213.85 L1724.32 1213.85 L1723.73 1213.85 L1723.15 1213.85 L1722.56 1213.85 L1721.97 1213.85 L1721.39 1213.85 L1720.8 1213.85 L1720.21 1213.85 L1719.63 1213.85 L1719.04 1213.85 L1718.45 1213.85 L1717.87 1213.85 L1717.28 1213.85 L1716.7 1213.85 L1716.11 1213.85 L1715.52 1213.85 L1714.94 1213.85 L1714.35 1213.85 L1713.76 1213.85 L1713.18 1213.85 L1712.59 1213.85 L1712 1213.85 L1711.42 1213.85 L1710.83 1213.85 L1710.24 1213.85 L1709.66 1213.85 L1709.07 1213.85 L1708.49 1213.85 L1707.9 1213.85 L1707.31 1213.85 L1706.73 1213.85 L1706.14 1213.85 L1705.55 1213.85 L1704.97 1213.85 L1704.38 1213.85 L1703.79 1213.85 L1703.21 1213.85 L1702.62 1213.85 L1702.04 1213.85 L1701.45 1213.85 L1700.86 1213.85 L1700.28 1213.85 L1699.69 1213.85 L1699.1 1213.85 L1698.52 1213.85 L1697.93 1213.85 L1697.34 1213.85 L1696.76 1213.85 L1696.17 1213.85 L1695.58 1213.85 L1695 1213.85 L1694.41 1213.85 L1693.83 1213.85 L1693.24 1213.85 L1692.65 1213.85 L1692.07 1213.85 L1691.48 1213.85 L1690.89 1213.85 L1690.31 1213.85 L1689.72 1213.85 L1689.13 1213.85 L1688.55 1213.85 L1687.96 1213.85 L1687.37 1213.85 L1686.79 1213.85 L1686.2 1213.85 L1685.62 1213.85 L1685.03 1213.85 L1684.44 1213.85 L1683.86 1213.85 L1683.27 1213.85 L1682.68 1213.85 L1682.1 1213.85 L1681.51 1213.85 L1680.92 1213.85 L1680.34 1213.85 L1679.75 1213.85 L1679.17 1213.85 L1678.58 1213.85 L1677.99 1213.85 L1677.41 1213.85 L1676.82 1213.85 L1676.23 1213.85 L1675.65 1213.85 L1675.06 1213.85 L1674.47 1213.85 L1673.89 1213.85 L1673.3 1213.85 L1672.71 1213.85 L1672.13 1213.85 L1671.54 1213.85 L1670.96 1213.85 L1670.37 1213.85 L1669.78 1213.85 L1669.2 1213.85 L1668.61 1213.85 L1668.02 1213.85 L1667.44 1213.85 L1666.85 1213.85 L1666.26 1213.85 L1665.68 1213.85 L1665.09 1213.85 L1664.5 1213.85 L1663.92 1213.85 L1663.33 1213.85 L1662.75 1213.85 L1662.16 1213.85 L1661.57 1213.85 L1660.99 1213.85 L1660.4 1213.85 L1659.81 1213.85 L1659.23 1213.85 L1658.64 1213.85 L1658.05 1213.85 L1657.47 1213.85 L1656.88 1213.85 L1656.29 1213.85 L1655.71 1213.85 L1655.12 1213.85 L1654.54 1213.85 L1653.95 1213.85 L1653.36 1213.85 L1652.78 1213.85 L1652.19 1213.85 L1651.6 1213.85 L1651.02 1213.85 L1650.43 1213.85 L1649.84 1213.85 L1649.26 1213.85 L1648.67 1213.85 L1648.09 1213.85 L1647.5 1213.85 L1646.91 1213.85 L1646.33 1213.85 L1645.74 1213.85 L1645.15 1213.85 L1644.57 1213.85 L1643.98 1213.85 L1643.39 1213.85 L1642.81 1213.85 L1642.22 1213.85 L1641.63 1213.85 L1641.05 1213.85 L1640.46 1213.85 L1639.88 1213.85 L1639.29 1213.85 L1638.7 1213.85 L1638.12 1213.85 L1637.53 1213.85 L1636.94 1213.85 L1636.36 1213.85 L1635.77 1213.85 L1635.18 1213.85 L1634.6 1213.85 L1634.01 1213.85 L1633.42 1213.85 L1632.84 1213.85 L1632.25 1213.85 L1631.67 1213.85 L1631.08 1213.85 L1630.49 1213.85 L1629.91 1213.85 L1629.32 1213.85 L1628.73 1213.85 L1628.15 1213.85 L1627.56 1213.85 L1626.97 1213.85 L1626.39 1213.85 L1625.8 1213.85 L1625.22 1213.85 L1624.63 1213.85 L1624.04 1213.85 L1623.46 1213.85 L1622.87 1213.85 L1622.28 1213.85 L1621.7 1213.85 L1621.11 1213.85 L1620.52 1213.85 L1619.94 1213.85 L1619.35 1213.85 L1618.76 1213.85 L1618.18 1213.85 L1617.59 1213.85 L1617.01 1213.85 L1616.42 1213.85 L1615.83 1213.85 L1615.25 1213.85 L1614.66 1213.85 L1614.07 1213.85 L1613.49 1213.85 L1612.9 1213.85 L1612.31 1213.85 L1611.73 1213.85 L1611.14 1213.85 L1610.55 1213.85 L1609.97 1213.85 L1609.38 1213.85 L1608.8 1213.85 L1608.21 1213.85 L1607.62 1213.85 L1607.04 1213.85 L1606.45 1213.85 L1605.86 1213.85 L1605.28 1213.85 L1604.69 1213.85 L1604.1 1213.85 L1603.52 1213.85 L1602.93 1213.85 L1602.34 1213.85 L1601.76 1213.85 L1601.17 1213.85 L1600.59 1213.85 L1600 1213.85 L1599.41 1213.85 L1598.83 1213.85 L1598.24 1213.85 L1597.65 1213.85 L1597.07 1213.85 L1596.48 1213.85 L1595.89 1213.85 L1595.31 1213.85 L1594.72 1213.85 L1594.14 1213.85 L1593.55 1213.85 L1592.96 1213.85 L1592.38 1213.85 L1591.79 1213.85 L1591.2 1213.85 L1590.62 1213.85 L1590.03 1213.85 L1589.44 1213.85 L1588.86 1213.85 L1588.27 1213.85 L1587.68 1213.85 L1587.1 1213.85 L1586.51 1213.85 L1585.93 1213.85 L1585.34 1213.85 L1584.75 1213.85 L1584.17 1213.85 L1583.58 1213.85 L1582.99 1213.85 L1582.41 1213.85 L1581.82 1213.85 L1581.23 1213.85 L1580.65 1213.85 L1580.06 1213.85 L1579.47 1213.85 L1578.89 1213.85 L1578.3 1213.85 L1577.72 1213.85 L1577.13 1213.85 L1576.54 1213.85 L1575.96 1213.85 L1575.37 1213.85 L1574.78 1213.85 L1574.2 1213.85 L1573.61 1213.85 L1573.02 1213.85 L1572.44 1213.85 L1571.85 1213.85 L1571.27 1213.85 L1570.68 1213.85 L1570.09 1213.85 L1569.51 1213.85 L1568.92 1213.85 L1568.33 1213.85 L1567.75 1213.85 L1567.16 1213.85 L1566.57 1213.85 L1565.99 1213.85 L1565.4 1213.85 L1564.81 1213.85 L1564.23 1213.85 L1563.64 1213.85 L1563.06 1213.85 L1562.47 1213.85 L1561.88 1213.85 L1561.3 1213.85 L1560.71 1213.85 L1560.12 1213.85 L1559.54 1213.85 L1558.95 1213.85 L1558.36 1213.85 L1557.78 1213.85 L1557.19 1213.85 L1556.6 1213.85 L1556.02 1213.85 L1555.43 1213.85 L1554.85 1213.85 L1554.26 1213.85 L1553.67 1213.85 L1553.09 1213.85 L1552.5 1213.85 L1551.91 1213.85 L1551.33 1213.85 L1550.74 1213.85 L1550.15 1213.85 L1549.57 1213.85 L1548.98 1213.85 L1548.4 1213.85 L1547.81 1213.85 L1547.22 1213.85 L1546.64 1213.85 L1546.05 1213.85 L1545.46 1213.85 L1544.88 1213.85 L1544.29 1213.85 L1543.7 1213.85 L1543.12 1213.85 L1542.53 1213.85 L1541.94 1213.85 L1541.36 1213.85 L1540.77 1213.85 L1540.19 1213.85 L1539.6 1213.85 L1539.01 1213.85 L1538.43 1213.85 L1537.84 1213.85 L1537.25 1213.85 L1536.67 1213.85 L1536.08 1213.85 L1535.49 1213.85 L1534.91 1213.85 L1534.32 1213.85 L1533.73 1213.85 L1533.15 1213.85 L1532.56 1213.85 L1531.98 1213.85 L1531.39 1213.85 L1530.8 1213.85 L1530.22 1213.85 L1529.63 1213.85 L1529.04 1213.85 L1528.46 1213.85 L1527.87 1213.85 L1527.28 1213.85 L1526.7 1213.85 L1526.11 1213.85 L1525.52 1213.85 L1524.94 1213.85 L1524.35 1213.85 L1523.77 1213.85 L1523.18 1213.85 L1522.59 1213.85 L1522.01 1213.85 L1521.42 1213.85 L1520.83 1213.85 L1520.25 1213.85 L1519.66 1213.85 L1519.07 1213.85 L1518.49 1213.85 L1517.9 1213.85 L1517.32 1213.85 L1516.73 1213.85 L1516.14 1213.85 L1515.56 1213.85 L1514.97 1213.85 L1514.38 1213.85 L1513.8 1213.85 L1513.21 1213.85 L1512.62 1213.85 L1512.04 1213.85 L1511.45 1213.85 L1510.86 1213.85 L1510.28 1213.85 L1509.69 1213.85 L1509.11 1213.85 L1508.52 1213.85 L1507.93 1213.85 L1507.35 1213.85 L1506.76 1213.85 L1506.17 1213.85 L1505.59 1213.85 L1505 1213.85 L1504.41 1213.85 L1503.83 1213.85 L1503.24 1213.85 L1502.65 1213.85 L1502.07 1213.85 L1501.48 1213.85 L1500.9 1213.85 L1500.31 1213.85 L1499.72 1213.85 L1499.14 1213.85 L1498.55 1213.85 L1497.96 1213.85 L1497.38 1213.85 L1496.79 1213.85 L1496.2 1213.85 L1495.62 1213.85 L1495.03 1213.85 L1494.45 1213.85 L1493.86 1213.85 L1493.27 1213.85 L1492.69 1213.85 L1492.1 1213.85 L1491.51 1213.85 L1490.93 1213.85 L1490.34 1213.85 L1489.75 1213.85 L1489.17 1213.85 L1488.58 1213.85 L1487.99 1213.85 L1487.41 1213.85 L1486.82 1213.85 L1486.24 1213.85 L1485.65 1213.85 L1485.06 1213.85 L1484.48 1213.85 L1483.89 1213.85 L1483.3 1213.85 L1482.72 1213.85 L1482.13 1213.85 L1481.54 1213.85 L1480.96 1213.85 L1480.37 1213.85 L1479.78 1213.85 L1479.2 1213.85 L1478.61 1213.85 L1478.03 1213.85 L1477.44 1213.85 L1476.85 1213.85 L1476.27 1213.85 L1475.68 1213.85 L1475.09 1213.85 L1474.51 1213.85 L1473.92 1213.85 L1473.33 1213.85 L1472.75 1213.85 L1472.16 1213.85 L1471.57 1213.85 L1470.99 1213.85 L1470.4 1213.85 L1469.82 1213.85 L1469.23 1213.85 L1468.64 1213.85 L1468.06 1213.85 L1467.47 1213.85 L1466.88 1213.85 L1466.3 1213.85 L1465.71 1213.85 L1465.12 1213.85 L1464.54 1213.85 L1463.95 1213.85 L1463.37 1213.85 L1462.78 1213.85 L1462.19 1213.85 L1461.61 1213.85 L1461.02 1213.85 L1460.43 1213.85 L1459.85 1213.85 L1459.26 1213.85 L1458.67 1213.85 L1458.09 1213.85 L1457.5 1213.85 L1456.91 1213.85 L1456.33 1213.85 L1455.74 1213.85 L1455.16 1213.85 L1454.57 1213.85 L1453.98 1213.85 L1453.4 1213.85 L1452.81 1213.85 L1452.22 1213.85 L1451.64 1213.85 L1451.05 1213.85 L1450.46 1213.85 L1449.88 1213.85 L1449.29 1213.85 L1448.7 1213.85 L1448.12 1213.85 L1447.53 1213.85 L1446.95 1213.85 L1446.36 1213.85 L1445.77 1213.85 L1445.19 1213.85 L1444.6 1213.85 L1444.01 1213.85 L1443.43 1213.85 L1442.84 1213.85 L1442.25 1213.85 L1441.67 1213.85 L1441.08 1213.85 L1440.5 1213.85 L1439.91 1213.85 L1439.32 1213.85 L1438.74 1213.85 L1438.15 1213.85 L1437.56 1213.85 L1436.98 1213.85 L1436.39 1213.85 L1435.8 1213.85 L1435.22 1213.85 L1434.63 1213.85 L1434.04 1213.85 L1433.46 1213.85 L1432.87 1213.85 L1432.29 1213.85 L1431.7 1213.85 L1431.11 1213.85 L1430.53 1213.85 L1429.94 1213.85 L1429.35 1213.85 L1428.77 1213.85 L1428.18 1213.85 L1427.59 1213.85 L1427.01 1213.85 L1426.42 1213.85 L1425.83 1213.85 L1425.25 1213.85 L1424.66 1213.85 L1424.08 1213.85 L1423.49 1213.85 L1422.9 1213.85 L1422.32 1213.85 L1421.73 1213.85 L1421.14 1213.85 L1420.56 1213.85 L1419.97 1213.85 L1419.38 1213.85 L1418.8 1213.85 L1418.21 1213.85 L1417.63 1213.85 L1417.04 1213.85 L1416.45 1213.85 L1415.87 1213.85 L1415.28 1213.85 L1414.69 1213.85 L1414.11 1213.85 L1413.52 1213.85 L1412.93 1213.85 L1412.35 1213.85 L1411.76 1213.85 L1411.17 1213.85 L1410.59 1213.85 L1410 1213.85 L1409.42 1213.85 L1408.83 1213.85 L1408.24 1213.85 L1407.66 1213.85 L1407.07 1213.85 L1406.48 1213.85 L1405.9 1213.85 L1405.31 1213.85 L1404.72 1213.85 L1404.14 1213.85 L1403.55 1213.85 L1402.96 1213.85 L1402.38 1213.85 L1401.79 1213.85 L1401.21 1213.85 L1400.62 1213.85 L1400.03 1213.85 L1399.45 1213.85 L1398.86 1213.85 L1398.27 1213.85 L1397.69 1213.85 L1397.1 1213.85 L1396.51 1213.85 L1395.93 1213.85 L1395.34 1213.85 L1394.75 1213.85 L1394.17 1213.85 L1393.58 1213.85 L1393 1213.85 L1392.41 1213.85 L1391.82 1213.85 L1391.24 1213.85 L1390.65 1213.85 L1390.06 1213.85 L1389.48 1213.85 L1388.89 1213.85 L1388.3 1213.85 L1387.72 1213.85 L1387.13 1213.85 L1386.55 1213.85 L1385.96 1213.85 L1385.37 1213.85 L1384.79 1213.85 L1384.2 1213.85 L1383.61 1213.85 L1383.03 1213.85 L1382.44 1213.85 L1381.85 1213.85 L1381.27 1213.85 L1380.68 1213.85 L1380.09 1213.85 L1379.51 1213.85 L1378.92 1213.85 L1378.34 1213.85 L1377.75 1213.85 L1377.16 1213.85 L1376.58 1213.85 L1375.99 1213.85 L1375.4 1213.85 L1374.82 1213.85 L1374.23 1213.85 L1373.64 1213.85 L1373.06 1213.85 L1372.47 1213.85 L1371.88 1213.85 L1371.3 1213.85 L1370.71 1213.85 L1370.13 1213.85 L1369.54 1213.85 L1368.95 1213.85 L1368.37 1213.85 L1367.78 1213.85 L1367.19 1213.85 L1366.61 1213.85 L1366.02 1213.85 L1365.43 1213.85 L1364.85 1213.85 L1364.26 1213.85 L1363.68 1213.85 L1363.09 1213.85 L1362.5 1213.85 L1361.92 1213.85 L1361.33 1213.85 L1360.74 1213.85 L1360.16 1213.85 L1359.57 1213.85 L1358.98 1213.85 L1358.4 1213.85 L1357.81 1213.85 L1357.22 1213.85 L1356.64 1213.85 L1356.05 1213.85 L1355.47 1213.85 L1354.88 1213.85 L1354.29 1213.85 L1353.71 1213.85 L1353.12 1213.85 L1352.53 1213.85 L1351.95 1213.85 L1351.36 1213.85 L1350.77 1213.85 L1350.19 1213.85 L1349.6 1213.85 L1349.01 1213.85 L1348.43 1213.85 L1347.84 1213.85 L1347.26 1213.85 L1346.67 1213.85 L1346.08 1213.85 L1345.5 1213.85 L1344.91 1213.85 L1344.32 1213.85 L1343.74 1213.85 L1343.15 1213.85 L1342.56 1213.85 L1341.98 1213.85 L1341.39 1213.85 L1340.8 1213.85 L1340.22 1213.85 L1339.63 1213.85 L1339.05 1213.85 L1338.46 1213.85 L1337.87 1213.85 L1337.29 1213.85 L1336.7 1213.85 L1336.11 1213.85 L1335.53 1213.85 L1334.94 1213.85 L1334.35 1213.85 L1333.77 1213.85 L1333.18 1213.85 L1332.6 1213.85 L1332.01 1213.85 L1331.42 1213.85 L1330.84 1213.85 L1330.25 1213.85 L1329.66 1213.85 L1329.08 1213.85 L1328.49 1213.85 L1327.9 1213.85 L1327.32 1213.85 L1326.73 1213.85 L1326.14 1213.85 L1325.56 1213.85 L1324.97 1213.85 L1324.39 1213.85 L1323.8 1213.85 L1323.21 1213.85 L1322.63 1213.85 L1322.04 1213.85 L1321.45 1213.85 L1320.87 1213.85 L1320.28 1213.85 L1319.69 1213.85 L1319.11 1213.85 L1318.52 1213.85 L1317.93 1213.85 L1317.35 1213.85 L1316.76 1213.85 L1316.18 1213.85 L1315.59 1213.85 L1315 1213.85 L1314.42 1213.85 L1313.83 1213.85 L1313.24 1213.85 L1312.66 1213.85 L1312.07 1213.85 L1311.48 1213.85 L1310.9 1213.85 L1310.31 1213.85 L1309.73 1213.85 L1309.14 1213.85 L1308.55 1213.85 L1307.97 1213.85 L1307.38 1213.85 L1306.79 1213.85 L1306.21 1213.85 L1305.62 1213.85 L1305.03 1213.85 L1304.45 1213.85 L1303.86 1213.85 L1303.27 1213.85 L1302.69 1213.85 L1302.1 1213.85 L1301.52 1213.85 L1300.93 1213.85 L1300.34 1213.85 L1299.76 1213.85 L1299.17 1213.85 L1298.58 1213.85 L1298 1213.85 L1297.41 1213.85 L1296.82 1213.85 L1296.24 1213.85 L1295.65 1213.85 L1295.06 1213.85 L1294.48 1213.85 L1293.89 1213.85 L1293.31 1213.85 L1292.72 1213.85 L1292.13 1213.85 L1291.55 1213.85 L1290.96 1213.85 L1290.37 1213.85 L1289.79 1213.85 L1289.2 1213.85 L1288.61 1213.85 L1288.03 1213.85 L1287.44 1213.85 L1286.86 1213.85 L1286.27 1213.85 L1285.68 1213.85 L1285.1 1213.85 L1284.51 1213.85 L1283.92 1213.85 L1283.34 1213.85 L1282.75 1213.85 L1282.16 1213.85 L1281.58 1213.85 L1280.99 1213.85 L1280.4 1213.85 L1279.82 1213.85 L1279.23 1213.85 L1278.65 1213.85 L1278.06 1213.85 L1277.47 1213.85 L1276.89 1213.85 L1276.3 1213.85 L1275.71 1213.85 L1275.13 1213.85 L1274.54 1213.85 L1273.95 1213.85 L1273.37 1213.85 L1272.78 1213.85 L1272.19 1213.85 L1271.61 1213.85 L1271.02 1213.85 L1270.44 1213.85 L1269.85 1213.85 L1269.26 1213.85 L1268.68 1213.85 L1268.09 1213.85 L1267.5 1213.85 L1266.92 1213.85 L1266.33 1213.85 L1265.74 1213.85 L1265.16 1213.85 L1264.57 1213.85 L1263.98 1213.85 L1263.4 1213.85 L1262.81 1213.85 L1262.23 1213.85 L1261.64 1213.85 L1261.05 1213.85 L1260.47 1213.85 L1259.88 1213.85 L1259.29 1213.85 L1258.71 1213.85 L1258.12 1213.85 L1257.53 1213.85 L1256.95 1213.85 L1256.36 1213.85 L1255.78 1213.85 L1255.19 1213.85 L1254.6 1213.85 L1254.02 1213.85 L1253.43 1213.85 L1252.84 1213.85 L1252.26 1213.85 L1251.67 1213.85 L1251.08 1213.85 L1250.5 1213.85 L1249.91 1213.85 L1249.32 1213.85 L1248.74 1213.85 L1248.15 1213.85 L1247.57 1213.85 L1246.98 1213.85 L1246.39 1213.85 L1245.81 1213.85 L1245.22 1213.85 L1244.63 1213.85 L1244.05 1213.85 L1243.46 1213.85 L1242.87 1213.85 L1242.29 1213.85 L1241.7 1213.85 L1241.11 1213.85 L1240.53 1213.85 L1239.94 1213.85 L1239.36 1213.85 L1238.77 1213.85 L1238.18 1213.85 L1237.6 1213.85 L1237.01 1213.85 L1236.42 1213.85 L1235.84 1213.85 L1235.25 1213.85 L1234.66 1213.85 L1234.08 1213.85 L1233.49 1213.85 L1232.91 1213.85 L1232.32 1213.85 L1231.73 1213.85 L1231.15 1213.85 L1230.56 1213.85 L1229.97 1213.85 L1229.39 1213.85 L1228.8 1213.85 L1228.21 1213.85 L1227.63 1213.85 L1227.04 1213.85 L1226.45 1213.85 L1225.87 1213.85 L1225.28 1213.85 L1224.7 1213.85 L1224.11 1213.85 L1223.52 1213.85 L1222.94 1213.85 L1222.35 1213.85 L1221.76 1213.85 L1221.18 1213.85 L1220.59 1213.85 L1220 1213.85 L1219.42 1213.85 L1218.83 1213.85 L1218.24 1213.85 L1217.66 1213.85 L1217.07 1213.85 L1216.49 1213.85 L1215.9 1213.85 L1215.31 1213.85 L1214.73 1213.85 L1214.14 1213.85 L1213.55 1213.85 L1212.97 1213.85 L1212.38 1213.85 L1211.79 1213.85 L1211.21 1213.85 L1210.62 1213.85 L1210.03 1213.85 L1209.45 1213.85 L1208.86 1213.85 L1208.28 1213.85 L1207.69 1213.85 L1207.1 1213.85 L1206.52 1213.85 L1205.93 1213.85 L1205.34 1213.85 L1204.76 1213.85 L1204.17 1213.85 L1203.58 1213.85 L1203 1213.85 L1202.41 1213.85 L1201.83 1213.85 L1201.24 1213.85 L1200.65 1213.85 L1200.07 1213.85 L1199.48 1213.85 L1198.89 1213.85 L1198.31 1213.85 L1197.72 1213.85 L1197.13 1213.85 L1196.55 1213.85 L1195.96 1213.85 L1195.37 1213.85 L1194.79 1213.85 L1194.2 1213.85 L1193.62 1213.85 L1193.03 1213.85 L1192.44 1213.85 L1191.86 1213.85 L1191.27 1213.85 L1190.68 1213.85 L1190.1 1213.85 L1189.51 1213.85 L1188.92 1213.85 L1188.34 1213.85 L1187.75 1213.85 L1187.16 1213.85 L1186.58 1213.85 L1185.99 1213.85 L1185.41 1213.85 L1184.82 1213.85 L1184.23 1213.85 L1183.65 1213.85 L1183.06 1213.85 L1182.47 1213.85 L1181.89 1213.85 L1181.3 1213.85 L1180.71 1213.85 L1180.13 1213.85 L1179.54 1213.85 L1178.96 1213.85 L1178.37 1213.85 L1177.78 1213.85 L1177.2 1213.85 L1176.61 1213.85 L1176.02 1213.85 L1175.44 1213.85 L1174.85 1213.85 L1174.26 1213.85 L1173.68 1213.85 L1173.09 1213.85 L1172.5 1213.85 L1171.92 1213.85 L1171.33 1213.85 L1170.75 1213.85 L1170.16 1213.85 L1169.57 1213.85 L1168.99 1213.85 L1168.4 1213.85 L1167.81 1213.85 L1167.23 1213.85 L1166.64 1213.85 L1166.05 1213.85 L1165.47 1213.85 L1164.88 1213.85 L1164.29 1213.85 L1163.71 1213.85 L1163.12 1213.85 L1162.54 1213.85 L1161.95 1213.85 L1161.36 1213.85 L1160.78 1213.85 L1160.19 1213.85 L1159.6 1213.85 L1159.02 1213.85 L1158.43 1213.85 L1157.84 1213.85 L1157.26 1213.85 L1156.67 1213.85 L1156.09 1213.85 L1155.5 1213.85 L1154.91 1213.85 L1154.33 1213.85 L1153.74 1213.85 L1153.15 1213.85 L1152.57 1213.85 L1151.98 1213.85 L1151.39 1213.85 L1150.81 1213.85 L1150.22 1213.85 L1149.63 1213.85 L1149.05 1213.85 L1148.46 1213.85 L1147.88 1213.85 L1147.29 1213.85 L1146.7 1213.85 L1146.12 1213.85 L1145.53 1213.85 L1144.94 1213.85 L1144.36 1213.85 L1143.77 1213.85 L1143.18 1213.85 L1142.6 1213.85 L1142.01 1213.85 L1141.42 1213.85 L1140.84 1213.85 L1140.25 1213.85 L1139.67 1213.85 L1139.08 1213.85 L1138.49 1213.85 L1137.91 1213.85 L1137.32 1213.85 L1136.73 1213.85 L1136.15 1213.85 L1135.56 1213.85 L1134.97 1213.85 L1134.39 1213.85 L1133.8 1213.85 L1133.21 1213.85 L1132.63 1213.85 L1132.04 1213.85 L1131.46 1213.85 L1130.87 1213.85 L1130.28 1213.85 L1129.7 1213.85 L1129.11 1213.85 L1128.52 1213.85 L1127.94 1213.85 L1127.35 1213.85 L1126.76 1213.85 L1126.18 1213.85 L1125.59 1213.85 L1125.01 1213.85 L1124.42 1213.85 L1123.83 1213.85 L1123.25 1213.85 L1122.66 1213.85 L1122.07 1213.85 L1121.49 1213.85 L1120.9 1213.85 L1120.31 1213.85 L1119.73 1213.85 L1119.14 1213.85 L1118.55 1213.85 L1117.97 1213.85 L1117.38 1213.85 L1116.8 1213.85 L1116.21 1213.85 L1115.62 1213.85 L1115.04 1213.85 L1114.45 1213.85 L1113.86 1213.85 L1113.28 1213.85 L1112.69 1213.85 L1112.1 1213.85 L1111.52 1213.85 L1110.93 1213.85 L1110.34 1213.85 L1109.76 1213.85 L1109.17 1213.85 L1108.59 1213.85 L1108 1213.85 L1107.41 1213.85 L1106.83 1213.85 L1106.24 1213.85 L1105.65 1213.85 L1105.07 1213.85 L1104.48 1213.85 L1103.89 1213.85 L1103.31 1213.85 L1102.72 1213.85 L1102.14 1213.85 L1101.55 1213.85 L1100.96 1213.85 L1100.38 1213.85 L1099.79 1213.85 L1099.2 1213.85 L1098.62 1213.85 L1098.03 1213.85 L1097.44 1213.85 L1096.86 1213.85 L1096.27 1213.85 L1095.68 1213.85 L1095.1 1213.85 L1094.51 1213.85 L1093.93 1213.85 L1093.34 1213.85 L1092.75 1213.85 L1092.17 1213.85 L1091.58 1213.85 L1090.99 1213.85 L1090.41 1213.85 L1089.82 1213.85 L1089.23 1213.85 L1088.65 1213.85 L1088.06 1213.85 L1087.47 1213.85 L1086.89 1213.85 L1086.3 1213.85 L1085.72 1213.85 L1085.13 1213.85 L1084.54 1213.85 L1083.96 1213.85 L1083.37 1213.85 L1082.78 1213.85 L1082.2 1213.85 L1081.61 1213.85 L1081.02 1213.85 L1080.44 1213.85 L1079.85 1213.85 L1079.26 1213.85 L1078.68 1213.85 L1078.09 1213.85 L1077.51 1213.85 L1076.92 1213.85 L1076.33 1213.85 L1075.75 1213.85 L1075.16 1213.85 L1074.57 1213.85 L1073.99 1213.85 L1073.4 1213.85 L1072.81 1213.85 L1072.23 1213.85 L1071.64 1213.85 L1071.06 1213.85 L1070.47 1213.85 L1069.88 1213.85 L1069.3 1213.85 L1068.71 1213.85 L1068.12 1213.85 L1067.54 1213.85 L1066.95 1213.85 L1066.36 1213.85 L1065.78 1213.85 L1065.19 1213.85 L1064.6 1213.85 L1064.02 1213.85 L1063.43 1213.85 L1062.85 1213.85 L1062.26 1213.85 L1061.67 1213.85 L1061.09 1213.85 L1060.5 1213.85 L1059.91 1213.85 L1059.33 1213.85 L1058.74 1213.85 L1058.15 1213.85 L1057.57 1213.85 L1056.98 1213.85 L1056.39 1213.85 L1055.81 1213.85 L1055.22 1213.85 L1054.64 1213.85 L1054.05 1213.85 L1053.46 1213.85 L1052.88 1213.85 L1052.29 1213.85 L1051.7 1213.85 L1051.12 1213.85 L1050.53 1213.85 L1049.94 1213.85 L1049.36 1213.85 L1048.77 1213.85 L1048.19 1213.85 L1047.6 1213.85 L1047.01 1213.85 L1046.43 1213.85 L1045.84 1213.85 L1045.25 1213.85 L1044.67 1213.85 L1044.08 1213.85 L1043.49 1213.85 L1042.91 1213.85 L1042.32 1213.85 L1041.73 1213.85 L1041.15 1213.85 L1040.56 1213.85 L1039.98 1213.85 L1039.39 1213.85 L1038.8 1213.85 L1038.22 1213.85 L1037.63 1213.85 L1037.04 1213.85 L1036.46 1213.85 L1035.87 1213.85 L1035.28 1213.85 L1034.7 1213.85 L1034.11 1213.85 L1033.52 1213.85 L1032.94 1213.85 L1032.35 1213.85 L1031.77 1213.85 L1031.18 1213.85 L1030.59 1213.85 L1030.01 1213.85 L1029.42 1213.85 L1028.83 1213.85 L1028.25 1213.85 L1027.66 1213.85 L1027.07 1213.85 L1026.49 1213.85 L1025.9 1213.85 L1025.32 1213.85 L1024.73 1213.85 L1024.14 1213.85 L1023.56 1213.85 L1022.97 1213.85 L1022.38 1213.85 L1021.8 1213.85 L1021.21 1213.85 L1020.62 1213.85 L1020.04 1213.85 L1019.45 1213.85 L1018.86 1213.85 L1018.28 1213.85 L1017.69 1213.85 L1017.11 1213.85 L1016.52 1213.85 L1015.93 1213.85 L1015.35 1213.85 L1014.76 1213.85 L1014.17 1213.85 L1013.59 1213.85 L1013 1213.85 L1012.41 1213.85 L1011.83 1213.85 L1011.24 1213.85 L1010.65 1213.85 L1010.07 1213.85 L1009.48 1213.85 L1008.9 1213.85 L1008.31 1213.85 L1007.72 1213.85 L1007.14 1213.85 L1006.55 1213.85 L1005.96 1213.85 L1005.38 1213.85 L1004.79 1213.85 L1004.2 1213.85 L1003.62 1213.85 L1003.03 1213.85 L1002.44 1213.85 L1001.86 1213.85 L1001.27 1213.85 L1000.69 1213.85 L1000.1 1213.85 L999.513 1213.85 L998.926 1213.85 L998.34 1213.85 L997.754 1213.85 L997.167 1213.85 L996.581 1213.85 L995.994 1213.85 L995.408 1213.85 L994.822 1213.85 L994.235 1213.85 L993.649 1213.85 L993.062 1213.85 L992.476 1213.85 L991.889 1213.85 L991.303 1213.85 L990.717 1213.85 L990.13 1213.85 L989.544 1213.85 L988.957 1213.85 L988.371 1213.85 L987.785 1213.85 L987.198 1213.85 L986.612 1213.85 L986.025 1213.85  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.2 986.612,1214.2 987.198,1214.2 987.785,1214.2 988.371,1214.2 988.957,1214.2 989.544,1214.2 990.13,1214.2 990.717,1214.2 991.303,1214.2 991.889,1214.2 992.476,1214.2 993.062,1214.2 993.649,1214.2 994.235,1214.2 994.822,1214.2 995.408,1214.2 995.994,1214.2 996.581,1214.2 997.167,1214.2 997.754,1214.2 998.34,1214.2 998.926,1214.2 999.513,1214.2 1000.1,1214.2 1000.69,1214.2 1001.27,1214.2 1001.86,1214.2 1002.44,1214.2 1003.03,1214.2 1003.62,1214.2 1004.2,1214.2 1004.79,1214.2 1005.38,1214.2 1005.96,1214.2 1006.55,1214.2 1007.14,1214.2 1007.72,1214.2 1008.31,1214.2 1008.9,1214.2 1009.48,1214.2 1010.07,1214.2 1010.65,1214.2 1011.24,1214.2 1011.83,1214.2 1012.41,1214.2 1013,1214.2 1013.59,1214.2 1014.17,1214.2 1014.76,1214.2 1015.35,1214.2 1015.93,1214.2 1016.52,1214.2 1017.11,1214.2 1017.69,1214.2 1018.28,1214.2 1018.86,1214.2 1019.45,1214.2 1020.04,1214.2 1020.62,1214.2 1021.21,1214.2 1021.8,1214.2 1022.38,1214.2 1022.97,1214.2 1023.56,1214.2 1024.14,1214.2 1024.73,1214.2 1025.32,1214.2 1025.9,1214.2 1026.49,1214.2 1027.07,1214.2 1027.66,1214.2 1028.25,1214.2 1028.83,1214.2 1029.42,1214.2 1030.01,1214.2 1030.59,1214.2 1031.18,1214.2 1031.77,1214.2 1032.35,1214.2 1032.94,1214.2 1033.52,1214.2 1034.11,1214.2 1034.7,1214.2 1035.28,1214.2 1035.87,1214.2 1036.46,1214.2 1037.04,1214.2 1037.63,1214.2 1038.22,1214.2 1038.8,1214.2 1039.39,1214.2 1039.98,1214.2 1040.56,1214.2 1041.15,1214.2 1041.73,1214.2 1042.32,1214.2 1042.91,1214.2 1043.49,1214.2 1044.08,1214.2 1044.67,1214.2 1045.25,1214.2 1045.84,1214.2 1046.43,1214.2 1047.01,1214.2 1047.6,1214.2 1048.19,1214.2 1048.77,1214.2 1049.36,1214.2 1049.94,1214.2 1050.53,1214.2 1051.12,1214.2 1051.7,1214.2 1052.29,1214.2 1052.88,1214.2 1053.46,1214.2 1054.05,1214.2 1054.64,1214.2 1055.22,1214.2 1055.81,1214.2 1056.39,1214.2 1056.98,1214.2 1057.57,1214.2 1058.15,1214.2 1058.74,1214.2 1059.33,1214.2 1059.91,1214.2 1060.5,1214.2 1061.09,1214.2 1061.67,1214.2 1062.26,1214.2 1062.85,1214.2 1063.43,1214.2 1064.02,1214.2 1064.6,1214.2 1065.19,1214.2 1065.78,1214.2 1066.36,1214.2 1066.95,1214.2 1067.54,1214.2 1068.12,1214.2 1068.71,1214.2 1069.3,1214.2 1069.88,1214.2 1070.47,1214.2 1071.06,1214.2 1071.64,1214.2 1072.23,1214.2 1072.81,1214.2 1073.4,1214.2 1073.99,1214.2 1074.57,1214.2 1075.16,1214.2 1075.75,1214.2 1076.33,1214.2 1076.92,1214.2 1077.51,1214.2 1078.09,1214.2 1078.68,1214.2 1079.26,1214.2 1079.85,1214.2 1080.44,1214.2 1081.02,1214.2 1081.61,1214.2 1082.2,1214.2 1082.78,1214.2 1083.37,1214.2 1083.96,1214.2 1084.54,1214.2 1085.13,1214.2 1085.72,1214.2 1086.3,1214.2 1086.89,1214.2 1087.47,1214.2 1088.06,1214.2 1088.65,1214.2 1089.23,1214.2 1089.82,1214.2 1090.41,1214.2 1090.99,1214.2 1091.58,1214.2 1092.17,1214.2 1092.75,1214.2 1093.34,1214.2 1093.93,1214.2 1094.51,1214.2 1095.1,1214.2 1095.68,1214.2 1096.27,1214.2 1096.86,1214.2 1097.44,1214.2 1098.03,1214.2 1098.62,1214.2 1099.2,1214.2 1099.79,1214.2 1100.38,1214.2 1100.96,1214.2 1101.55,1214.2 1102.14,1214.2 1102.72,1214.2 1103.31,1214.2 1103.89,1214.2 1104.48,1214.2 1105.07,1214.2 1105.65,1214.2 1106.24,1214.2 1106.83,1214.2 1107.41,1214.2 1108,1214.2 1108.59,1214.2 1109.17,1214.2 1109.76,1214.2 1110.34,1214.2 1110.93,1214.2 1111.52,1214.2 1112.1,1214.2 1112.69,1214.2 1113.28,1214.2 1113.86,1214.2 1114.45,1214.2 1115.04,1214.2 1115.62,1214.2 1116.21,1214.2 1116.8,1214.2 1117.38,1214.2 1117.97,1214.2 1118.55,1214.2 1119.14,1214.2 1119.73,1214.2 1120.31,1214.2 1120.9,1214.2 1121.49,1214.2 1122.07,1214.2 1122.66,1214.2 1123.25,1214.2 1123.83,1214.2 1124.42,1214.2 1125.01,1214.2 1125.59,1214.2 1126.18,1214.2 1126.76,1214.2 1127.35,1214.2 1127.94,1214.2 1128.52,1214.2 1129.11,1214.2 1129.7,1214.2 1130.28,1214.2 1130.87,1214.2 1131.46,1214.2 1132.04,1214.2 1132.63,1214.2 1133.21,1214.2 1133.8,1214.2 1134.39,1214.2 1134.97,1214.2 1135.56,1214.2 1136.15,1214.2 1136.73,1214.2 1137.32,1214.2 1137.91,1214.2 1138.49,1214.2 1139.08,1214.2 1139.67,1214.2 1140.25,1214.2 1140.84,1214.2 1141.42,1214.2 1142.01,1214.2 1142.6,1214.2 1143.18,1214.2 1143.77,1214.2 1144.36,1214.2 1144.94,1214.2 1145.53,1214.2 1146.12,1214.2 1146.7,1214.2 1147.29,1214.2 1147.88,1214.2 1148.46,1214.2 1149.05,1214.2 1149.63,1214.2 1150.22,1214.2 1150.81,1214.2 1151.39,1214.2 1151.98,1214.2 1152.57,1214.2 1153.15,1214.2 1153.74,1214.2 1154.33,1214.2 1154.91,1214.2 1155.5,1214.2 1156.09,1214.2 1156.67,1214.2 1157.26,1214.2 1157.84,1214.2 1158.43,1214.2 1159.02,1214.2 1159.6,1214.2 1160.19,1214.2 1160.78,1214.2 1161.36,1214.2 1161.95,1214.2 1162.54,1214.2 1163.12,1214.2 1163.71,1214.2 1164.29,1214.2 1164.88,1214.2 1165.47,1214.2 1166.05,1214.2 1166.64,1214.2 1167.23,1214.2 1167.81,1214.2 1168.4,1214.2 1168.99,1214.2 1169.57,1214.2 1170.16,1214.2 1170.75,1214.2 1171.33,1214.2 1171.92,1214.2 1172.5,1214.2 1173.09,1214.2 1173.68,1214.2 1174.26,1214.2 1174.85,1214.2 1175.44,1214.2 1176.02,1214.2 1176.61,1214.2 1177.2,1214.2 1177.78,1214.2 1178.37,1214.2 1178.96,1214.2 1179.54,1214.2 1180.13,1214.2 1180.71,1214.2 1181.3,1214.2 1181.89,1214.2 1182.47,1214.2 1183.06,1214.2 1183.65,1214.2 1184.23,1214.2 1184.82,1214.2 1185.41,1214.2 1185.99,1214.2 1186.58,1214.2 1187.16,1214.2 1187.75,1214.2 1188.34,1214.2 1188.92,1214.2 1189.51,1214.2 1190.1,1214.2 1190.68,1214.2 1191.27,1214.2 1191.86,1214.2 1192.44,1214.2 1193.03,1214.2 1193.62,1214.2 1194.2,1214.2 1194.79,1214.2 1195.37,1214.2 1195.96,1214.2 1196.55,1214.2 1197.13,1214.2 1197.72,1214.2 1198.31,1214.2 1198.89,1214.2 1199.48,1214.2 1200.07,1214.2 1200.65,1214.2 1201.24,1214.2 1201.83,1214.2 1202.41,1214.2 1203,1214.2 1203.58,1214.2 1204.17,1214.2 1204.76,1214.2 1205.34,1214.2 1205.93,1214.2 1206.52,1214.2 1207.1,1214.2 1207.69,1214.2 1208.28,1214.2 1208.86,1214.2 1209.45,1214.2 1210.03,1214.2 1210.62,1214.2 1211.21,1214.2 1211.79,1214.2 1212.38,1214.2 1212.97,1214.2 1213.55,1214.2 1214.14,1214.2 1214.73,1214.2 1215.31,1214.2 1215.9,1214.2 1216.49,1214.2 1217.07,1214.2 1217.66,1214.2 1218.24,1214.2 1218.83,1214.2 1219.42,1214.2 1220,1214.2 1220.59,1214.2 1221.18,1214.2 1221.76,1214.2 1222.35,1214.2 1222.94,1214.2 1223.52,1214.2 1224.11,1214.2 1224.7,1214.2 1225.28,1214.2 1225.87,1214.2 1226.45,1214.2 1227.04,1214.2 1227.63,1214.2 1228.21,1214.2 1228.8,1214.2 1229.39,1214.2 1229.97,1214.2 1230.56,1214.2 1231.15,1214.2 1231.73,1214.2 1232.32,1214.2 1232.91,1214.2 1233.49,1214.2 1234.08,1214.2 1234.66,1214.2 1235.25,1214.2 1235.84,1214.2 1236.42,1214.2 1237.01,1214.2 1237.6,1214.2 1238.18,1214.2 1238.77,1214.2 1239.36,1214.2 1239.94,1214.2 1240.53,1214.2 1241.11,1214.2 1241.7,1214.2 1242.29,1214.2 1242.87,1214.2 1243.46,1214.2 1244.05,1214.2 1244.63,1214.2 1245.22,1214.2 1245.81,1214.2 1246.39,1214.2 1246.98,1214.2 1247.57,1214.2 1248.15,1214.2 1248.74,1214.2 1249.32,1214.2 1249.91,1214.2 1250.5,1214.2 1251.08,1214.2 1251.67,1214.2 1252.26,1214.2 1252.84,1214.2 1253.43,1214.2 1254.02,1214.2 1254.6,1214.2 1255.19,1214.2 1255.78,1214.2 1256.36,1214.2 1256.95,1214.2 1257.53,1214.2 1258.12,1214.2 1258.71,1214.2 1259.29,1214.2 1259.88,1214.2 1260.47,1214.2 1261.05,1214.2 1261.64,1214.2 1262.23,1214.2 1262.81,1214.2 1263.4,1214.2 1263.98,1214.2 1264.57,1214.2 1265.16,1214.2 1265.74,1214.2 1266.33,1214.2 1266.92,1214.2 1267.5,1214.2 1268.09,1214.2 1268.68,1214.2 1269.26,1214.2 1269.85,1214.2 1270.44,1214.2 1271.02,1214.2 1271.61,1214.2 1272.19,1214.2 1272.78,1214.2 1273.37,1214.2 1273.95,1214.2 1274.54,1214.2 1275.13,1214.2 1275.71,1214.2 1276.3,1214.2 1276.89,1214.2 1277.47,1214.2 1278.06,1214.2 1278.65,1214.2 1279.23,1214.2 1279.82,1214.2 1280.4,1214.2 1280.99,1214.2 1281.58,1214.2 1282.16,1214.2 1282.75,1214.2 1283.34,1214.2 1283.92,1214.2 1284.51,1214.2 1285.1,1214.2 1285.68,1214.2 1286.27,1214.2 1286.86,1214.2 1287.44,1214.2 1288.03,1214.2 1288.61,1214.2 1289.2,1214.2 1289.79,1214.2 1290.37,1214.2 1290.96,1214.2 1291.55,1214.2 1292.13,1214.2 1292.72,1214.2 1293.31,1214.2 1293.89,1214.2 1294.48,1214.2 1295.06,1214.2 1295.65,1214.2 1296.24,1214.2 1296.82,1214.2 1297.41,1214.2 1298,1214.2 1298.58,1214.2 1299.17,1214.2 1299.76,1214.2 1300.34,1214.2 1300.93,1214.2 1301.52,1214.2 1302.1,1214.2 1302.69,1214.2 1303.27,1214.2 1303.86,1214.2 1304.45,1214.2 1305.03,1214.2 1305.62,1214.2 1306.21,1214.2 1306.79,1214.2 1307.38,1214.2 1307.97,1214.2 1308.55,1214.2 1309.14,1214.2 1309.73,1214.2 1310.31,1214.2 1310.9,1214.2 1311.48,1214.2 1312.07,1214.2 1312.66,1214.2 1313.24,1214.2 1313.83,1214.2 1314.42,1214.2 1315,1214.2 1315.59,1214.2 1316.18,1214.2 1316.76,1214.2 1317.35,1214.2 1317.93,1214.2 1318.52,1214.2 1319.11,1214.2 1319.69,1214.2 1320.28,1214.2 1320.87,1214.2 1321.45,1214.2 1322.04,1214.2 1322.63,1214.2 1323.21,1214.2 1323.8,1214.2 1324.39,1214.2 1324.97,1214.2 1325.56,1214.2 1326.14,1214.2 1326.73,1214.2 1327.32,1214.2 1327.9,1214.2 1328.49,1214.2 1329.08,1214.2 1329.66,1214.2 1330.25,1214.2 1330.84,1214.2 1331.42,1214.2 1332.01,1214.2 1332.6,1214.2 1333.18,1214.2 1333.77,1214.2 1334.35,1214.2 1334.94,1214.2 1335.53,1214.2 1336.11,1214.2 1336.7,1214.2 1337.29,1214.2 1337.87,1214.2 1338.46,1214.2 1339.05,1214.2 1339.63,1214.2 1340.22,1214.2 1340.8,1214.2 1341.39,1214.2 1341.98,1214.2 1342.56,1214.2 1343.15,1214.2 1343.74,1214.2 1344.32,1214.2 1344.91,1214.2 1345.5,1214.2 1346.08,1214.2 1346.67,1214.2 1347.26,1214.2 1347.84,1214.2 1348.43,1214.2 1349.01,1214.2 1349.6,1214.2 1350.19,1214.2 1350.77,1214.2 1351.36,1214.2 1351.95,1214.2 1352.53,1214.2 1353.12,1214.2 1353.71,1214.2 1354.29,1214.2 1354.88,1214.2 1355.47,1214.2 1356.05,1214.2 1356.64,1214.2 1357.22,1214.2 1357.81,1214.2 1358.4,1214.2 1358.98,1214.2 1359.57,1214.2 1360.16,1214.2 1360.74,1214.2 1361.33,1214.2 1361.92,1214.2 1362.5,1214.2 1363.09,1214.2 1363.68,1214.2 1364.26,1214.2 1364.85,1214.2 1365.43,1214.2 1366.02,1214.2 1366.61,1214.2 1367.19,1214.2 1367.78,1214.2 1368.37,1214.2 1368.95,1214.2 1369.54,1214.2 1370.13,1214.2 1370.71,1214.2 1371.3,1214.2 1371.88,1214.2 1372.47,1214.2 1373.06,1214.2 1373.64,1214.2 1374.23,1214.2 1374.82,1214.2 1375.4,1214.2 1375.99,1214.2 1376.58,1214.2 1377.16,1214.2 1377.75,1214.2 1378.34,1214.2 1378.92,1214.2 1379.51,1214.2 1380.09,1214.2 1380.68,1214.2 1381.27,1214.2 1381.85,1214.2 1382.44,1214.2 1383.03,1214.2 1383.61,1214.2 1384.2,1214.2 1384.79,1214.2 1385.37,1214.2 1385.96,1214.2 1386.55,1214.2 1387.13,1214.2 1387.72,1214.2 1388.3,1214.2 1388.89,1214.2 1389.48,1214.2 1390.06,1214.2 1390.65,1214.2 1391.24,1214.2 1391.82,1214.2 1392.41,1214.2 1393,1214.2 1393.58,1214.2 1394.17,1214.2 1394.75,1214.2 1395.34,1214.2 1395.93,1214.2 1396.51,1214.2 1397.1,1214.2 1397.69,1214.2 1398.27,1214.2 1398.86,1214.2 1399.45,1214.2 1400.03,1214.2 1400.62,1214.2 1401.21,1214.2 1401.79,1214.2 1402.38,1214.2 1402.96,1214.2 1403.55,1214.2 1404.14,1214.2 1404.72,1214.2 1405.31,1214.2 1405.9,1214.2 1406.48,1214.2 1407.07,1214.2 1407.66,1214.2 1408.24,1214.2 1408.83,1214.2 1409.42,1214.2 1410,1214.2 1410.59,1214.2 1411.17,1214.2 1411.76,1214.2 1412.35,1214.2 1412.93,1214.2 1413.52,1214.2 1414.11,1214.2 1414.69,1214.2 1415.28,1214.2 1415.87,1214.2 1416.45,1214.2 1417.04,1214.2 1417.63,1214.2 1418.21,1214.2 1418.8,1214.2 1419.38,1214.2 1419.97,1214.2 1420.56,1214.2 1421.14,1214.2 1421.73,1214.2 1422.32,1214.2 1422.9,1214.2 1423.49,1214.2 1424.08,1214.2 1424.66,1214.2 1425.25,1214.2 1425.83,1214.2 1426.42,1214.2 1427.01,1214.2 1427.59,1214.2 1428.18,1214.2 1428.77,1214.2 1429.35,1214.2 1429.94,1214.2 1430.53,1214.2 1431.11,1214.2 1431.7,1214.2 1432.29,1214.2 1432.87,1214.2 1433.46,1214.2 1434.04,1214.2 1434.63,1214.2 1435.22,1214.2 1435.8,1214.2 1436.39,1214.2 1436.98,1214.2 1437.56,1214.2 1438.15,1214.2 1438.74,1214.2 1439.32,1214.2 1439.91,1214.2 1440.5,1214.2 1441.08,1214.2 1441.67,1214.2 1442.25,1214.2 1442.84,1214.2 1443.43,1214.2 1444.01,1214.2 1444.6,1214.2 1445.19,1214.2 1445.77,1214.2 1446.36,1214.2 1446.95,1214.2 1447.53,1214.2 1448.12,1214.2 1448.7,1214.2 1449.29,1214.2 1449.88,1214.2 1450.46,1214.2 1451.05,1214.2 1451.64,1214.2 1452.22,1214.2 1452.81,1214.2 1453.4,1214.2 1453.98,1214.2 1454.57,1214.2 1455.16,1214.2 1455.74,1214.2 1456.33,1214.2 1456.91,1214.2 1457.5,1214.2 1458.09,1214.2 1458.67,1214.2 1459.26,1214.2 1459.85,1214.2 1460.43,1214.2 1461.02,1214.2 1461.61,1214.2 1462.19,1214.2 1462.78,1214.2 1463.37,1214.2 1463.95,1214.2 1464.54,1214.2 1465.12,1214.2 1465.71,1214.2 1466.3,1214.2 1466.88,1214.2 1467.47,1214.2 1468.06,1214.2 1468.64,1214.2 1469.23,1214.2 1469.82,1214.2 1470.4,1214.2 1470.99,1214.2 1471.57,1214.2 1472.16,1214.2 1472.75,1214.2 1473.33,1214.2 1473.92,1214.2 1474.51,1214.2 1475.09,1214.2 1475.68,1214.2 1476.27,1214.2 1476.85,1214.2 1477.44,1214.2 1478.03,1214.2 1478.61,1214.2 1479.2,1214.2 1479.78,1214.2 1480.37,1214.2 1480.96,1214.2 1481.54,1214.2 1482.13,1214.2 1482.72,1214.2 1483.3,1214.2 1483.89,1214.2 1484.48,1214.2 1485.06,1214.2 1485.65,1214.2 1486.24,1214.2 1486.82,1214.2 1487.41,1214.2 1487.99,1214.2 1488.58,1214.2 1489.17,1214.2 1489.75,1214.2 1490.34,1214.2 1490.93,1214.2 1491.51,1214.2 1492.1,1214.2 1492.69,1214.2 1493.27,1214.2 1493.86,1214.2 1494.45,1214.2 1495.03,1214.2 1495.62,1214.2 1496.2,1214.2 1496.79,1214.2 1497.38,1214.2 1497.96,1214.2 1498.55,1214.2 1499.14,1214.2 1499.72,1214.2 1500.31,1214.2 1500.9,1214.2 1501.48,1214.2 1502.07,1214.2 1502.65,1214.2 1503.24,1214.2 1503.83,1214.2 1504.41,1214.2 1505,1214.2 1505.59,1214.2 1506.17,1214.2 1506.76,1214.2 1507.35,1214.2 1507.93,1214.2 1508.52,1214.2 1509.11,1214.2 1509.69,1214.2 1510.28,1214.2 1510.86,1214.2 1511.45,1214.2 1512.04,1214.2 1512.62,1214.2 1513.21,1214.2 1513.8,1214.2 1514.38,1214.2 1514.97,1214.2 1515.56,1214.2 1516.14,1214.2 1516.73,1214.2 1517.32,1214.2 1517.9,1214.2 1518.49,1214.2 1519.07,1214.2 1519.66,1214.2 1520.25,1214.2 1520.83,1214.2 1521.42,1214.2 1522.01,1214.2 1522.59,1214.2 1523.18,1214.2 1523.77,1214.2 1524.35,1214.2 1524.94,1214.2 1525.52,1214.2 1526.11,1214.2 1526.7,1214.2 1527.28,1214.2 1527.87,1214.2 1528.46,1214.2 1529.04,1214.2 1529.63,1214.2 1530.22,1214.2 1530.8,1214.2 1531.39,1214.2 1531.98,1214.2 1532.56,1214.2 1533.15,1214.2 1533.73,1214.2 1534.32,1214.2 1534.91,1214.2 1535.49,1214.2 1536.08,1214.2 1536.67,1214.2 1537.25,1214.2 1537.84,1214.2 1538.43,1214.2 1539.01,1214.2 1539.6,1214.2 1540.19,1214.2 1540.77,1214.2 1541.36,1214.2 1541.94,1214.2 1542.53,1214.2 1543.12,1214.2 1543.7,1214.2 1544.29,1214.2 1544.88,1214.2 1545.46,1214.2 1546.05,1214.2 1546.64,1214.2 1547.22,1214.2 1547.81,1214.2 1548.4,1214.2 1548.98,1214.2 1549.57,1214.2 1550.15,1214.2 1550.74,1214.2 1551.33,1214.2 1551.91,1214.2 1552.5,1214.2 1553.09,1214.2 1553.67,1214.2 1554.26,1214.2 1554.85,1214.2 1555.43,1214.2 1556.02,1214.2 1556.6,1214.2 1557.19,1214.2 1557.78,1214.2 1558.36,1214.2 1558.95,1214.2 1559.54,1214.2 1560.12,1214.2 1560.71,1214.2 1561.3,1214.2 1561.88,1214.2 1562.47,1214.2 1563.06,1214.2 1563.64,1214.2 1564.23,1214.2 1564.81,1214.2 1565.4,1214.2 1565.99,1214.2 1566.57,1214.2 1567.16,1214.2 1567.75,1214.2 1568.33,1214.2 1568.92,1214.2 1569.51,1214.2 1570.09,1214.2 1570.68,1214.2 1571.27,1214.2 1571.85,1214.2 1572.44,1214.2 1573.02,1214.2 1573.61,1214.2 1574.2,1214.2 1574.78,1214.2 1575.37,1214.2 1575.96,1214.2 1576.54,1214.2 1577.13,1214.2 1577.72,1214.2 1578.3,1214.2 1578.89,1214.2 1579.47,1214.2 1580.06,1214.2 1580.65,1214.2 1581.23,1214.2 1581.82,1214.2 1582.41,1214.2 1582.99,1214.2 1583.58,1214.2 1584.17,1214.2 1584.75,1214.2 1585.34,1214.2 1585.93,1214.2 1586.51,1214.2 1587.1,1214.2 1587.68,1214.2 1588.27,1214.2 1588.86,1214.2 1589.44,1214.2 1590.03,1214.2 1590.62,1214.2 1591.2,1214.2 1591.79,1214.2 1592.38,1214.2 1592.96,1214.2 1593.55,1214.2 1594.14,1214.2 1594.72,1214.2 1595.31,1214.2 1595.89,1214.2 1596.48,1214.2 1597.07,1214.2 1597.65,1214.2 1598.24,1214.2 1598.83,1214.2 1599.41,1214.2 1600,1214.2 1600.59,1214.2 1601.17,1214.2 1601.76,1214.2 1602.34,1214.2 1602.93,1214.2 1603.52,1214.2 1604.1,1214.2 1604.69,1214.2 1605.28,1214.2 1605.86,1214.2 1606.45,1214.2 1607.04,1214.2 1607.62,1214.2 1608.21,1214.2 1608.8,1214.2 1609.38,1214.2 1609.97,1214.2 1610.55,1214.2 1611.14,1214.2 1611.73,1214.2 1612.31,1214.2 1612.9,1214.2 1613.49,1214.2 1614.07,1214.2 1614.66,1214.2 1615.25,1214.2 1615.83,1214.2 1616.42,1214.2 1617.01,1214.2 1617.59,1214.2 1618.18,1214.2 1618.76,1214.2 1619.35,1214.2 1619.94,1214.2 1620.52,1214.2 1621.11,1214.2 1621.7,1214.2 1622.28,1214.2 1622.87,1214.2 1623.46,1214.2 1624.04,1214.2 1624.63,1214.2 1625.22,1214.2 1625.8,1214.2 1626.39,1214.2 1626.97,1214.2 1627.56,1214.2 1628.15,1214.2 1628.73,1214.2 1629.32,1214.2 1629.91,1214.2 1630.49,1214.2 1631.08,1214.2 1631.67,1214.2 1632.25,1214.2 1632.84,1214.2 1633.42,1214.2 1634.01,1214.2 1634.6,1214.2 1635.18,1214.2 1635.77,1214.2 1636.36,1214.2 1636.94,1214.2 1637.53,1214.2 1638.12,1214.2 1638.7,1214.2 1639.29,1214.2 1639.88,1214.2 1640.46,1214.2 1641.05,1214.2 1641.63,1214.2 1642.22,1214.2 1642.81,1214.2 1643.39,1214.2 1643.98,1214.2 1644.57,1214.2 1645.15,1214.2 1645.74,1214.2 1646.33,1214.2 1646.91,1214.2 1647.5,1214.2 1648.09,1214.2 1648.67,1214.2 1649.26,1214.2 1649.84,1214.2 1650.43,1214.2 1651.02,1214.2 1651.6,1214.2 1652.19,1214.2 1652.78,1214.2 1653.36,1214.2 1653.95,1214.2 1654.54,1214.2 1655.12,1214.2 1655.71,1214.2 1656.29,1214.2 1656.88,1214.2 1657.47,1214.2 1658.05,1214.2 1658.64,1214.2 1659.23,1214.2 1659.81,1214.2 1660.4,1214.2 1660.99,1214.2 1661.57,1214.2 1662.16,1214.2 1662.75,1214.2 1663.33,1214.2 1663.92,1214.2 1664.5,1214.2 1665.09,1214.2 1665.68,1214.2 1666.26,1214.2 1666.85,1214.2 1667.44,1214.2 1668.02,1214.2 1668.61,1214.2 1669.2,1214.2 1669.78,1214.2 1670.37,1214.2 1670.96,1214.2 1671.54,1214.2 1672.13,1214.2 1672.71,1214.2 1673.3,1214.2 1673.89,1214.2 1674.47,1214.2 1675.06,1214.2 1675.65,1214.2 1676.23,1214.2 1676.82,1214.2 1677.41,1214.2 1677.99,1214.2 1678.58,1214.2 1679.17,1214.2 1679.75,1214.2 1680.34,1214.2 1680.92,1214.2 1681.51,1214.2 1682.1,1214.2 1682.68,1214.2 1683.27,1214.2 1683.86,1214.2 1684.44,1214.2 1685.03,1214.2 1685.62,1214.2 1686.2,1214.2 1686.79,1214.2 1687.37,1214.2 1687.96,1214.2 1688.55,1214.2 1689.13,1214.2 1689.72,1214.2 1690.31,1214.2 1690.89,1214.2 1691.48,1214.2 1692.07,1214.2 1692.65,1214.2 1693.24,1214.2 1693.83,1214.2 1694.41,1214.2 1695,1214.2 1695.58,1214.2 1696.17,1214.2 1696.76,1214.2 1697.34,1214.2 1697.93,1214.2 1698.52,1214.2 1699.1,1214.2 1699.69,1214.2 1700.28,1214.2 1700.86,1214.2 1701.45,1214.2 1702.04,1214.2 1702.62,1214.2 1703.21,1214.2 1703.79,1214.2 1704.38,1214.2 1704.97,1214.2 1705.55,1214.2 1706.14,1214.2 1706.73,1214.2 1707.31,1214.2 1707.9,1214.2 1708.49,1214.2 1709.07,1214.2 1709.66,1214.2 1710.24,1214.2 1710.83,1214.2 1711.42,1214.2 1712,1214.2 1712.59,1214.2 1713.18,1214.2 1713.76,1214.2 1714.35,1214.2 1714.94,1214.2 1715.52,1214.2 1716.11,1214.2 1716.7,1214.2 1717.28,1214.2 1717.87,1214.2 1718.45,1214.2 1719.04,1214.2 1719.63,1214.2 1720.21,1214.2 1720.8,1214.2 1721.39,1214.2 1721.97,1214.2 1722.56,1214.2 1723.15,1214.2 1723.73,1214.2 1724.32,1214.2 1724.91,1214.2 1725.49,1214.2 1726.08,1214.2 1726.66,1214.2 1727.25,1214.2 1727.84,1214.2 1728.42,1214.2 1729.01,1214.2 1729.6,1214.2 1730.18,1214.2 1730.77,1214.2 1731.36,1214.2 1731.94,1214.2 1732.53,1214.2 1733.11,1214.2 1733.7,1214.2 1734.29,1214.2 1734.87,1214.2 1735.46,1214.2 1736.05,1214.2 1736.63,1214.2 1737.22,1214.2 1737.81,1214.2 1738.39,1214.2 1738.98,1214.2 1739.57,1214.2 1740.15,1214.2 1740.74,1214.2 1741.32,1214.2 1741.91,1214.2 1742.5,1214.2 1743.08,1214.2 1743.67,1214.2 1744.26,1214.2 1744.84,1214.2 1745.43,1214.2 1746.02,1214.2 1746.6,1214.2 1747.19,1214.2 1747.78,1214.2 1748.36,1214.2 1748.95,1214.2 1749.53,1214.2 1750.12,1214.2 1750.71,1214.2 1751.29,1214.2 1751.88,1214.2 1752.47,1214.2 1753.05,1214.2 1753.64,1214.2 1754.23,1214.2 1754.81,1214.2 1755.4,1214.2 1755.99,1214.2 1756.57,1214.2 1757.16,1214.2 1757.74,1214.2 1758.33,1214.2 1758.92,1214.2 1759.5,1214.2 1760.09,1214.2 1760.68,1214.2 1761.26,1214.2 1761.85,1214.2 1762.44,1214.2 1763.02,1214.2 1763.61,1214.2 1764.19,1214.2 1764.78,1214.2 1765.37,1214.2 1765.95,1214.2 1766.54,1214.2 1767.13,1214.2 1767.71,1214.2 1768.3,1214.2 1768.89,1214.2 1769.47,1214.2 1770.06,1214.2 1770.65,1214.2 1771.23,1214.2 1771.82,1214.2 1772.4,1214.2 1772.99,1214.2 1773.58,1214.2 1774.16,1214.2 1774.75,1214.2 1775.34,1214.2 1775.92,1214.2 1776.51,1214.2 1777.1,1214.2 1777.68,1214.2 1778.27,1214.2 1778.86,1214.2 1779.44,1214.2 1780.03,1214.2 1780.61,1214.2 1781.2,1214.2 1781.79,1214.2 1782.37,1214.2 1782.96,1214.2 1783.55,1214.2 1784.13,1214.2 1784.72,1214.2 1785.31,1214.2 1785.89,1214.2 1786.48,1214.2 1787.06,1214.2 1787.65,1214.2 1788.24,1214.2 1788.82,1214.2 1789.41,1214.2 1790,1214.2 1790.58,1214.2 1791.17,1214.2 1791.76,1214.2 1792.34,1214.2 1792.93,1214.2 1793.52,1214.2 1794.1,1214.2 1794.69,1214.2 1795.27,1214.2 1795.86,1214.2 1796.45,1214.2 1797.03,1214.2 1797.62,1214.2 1798.21,1214.2 1798.79,1214.2 1799.38,1214.2 1799.97,1214.2 1800.55,1214.2 1801.14,1214.2 1801.73,1214.2 1802.31,1214.2 1802.9,1214.2 1803.48,1214.2 1804.07,1214.2 1804.66,1214.2 1805.24,1214.2 1805.83,1214.2 1806.42,1214.2 1807,1214.2 1807.59,1214.2 1808.18,1214.2 1808.76,1214.2 1809.35,1214.2 1809.94,1214.2 1810.52,1214.2 1811.11,1214.2 1811.69,1214.2 1812.28,1214.2 1812.87,1214.2 1813.45,1214.2 1814.04,1214.2 1814.63,1214.2 1815.21,1214.2 1815.8,1214.2 1816.39,1214.2 1816.97,1214.2 1817.56,1214.2 1818.14,1214.2 1818.73,1214.2 1819.32,1214.2 1819.9,1214.2 1820.49,1214.2 1821.08,1214.2 1821.66,1214.2 1822.25,1214.2 1822.84,1214.2 1823.42,1214.2 1824.01,1214.2 1824.6,1214.2 1825.18,1214.2 1825.77,1214.2 1826.35,1214.2 1826.94,1214.2 1827.53,1214.2 1828.11,1214.2 1828.7,1214.2 1829.29,1214.2 1829.87,1214.2 1830.46,1214.2 1831.05,1214.2 1831.63,1214.2 1832.22,1214.2 1832.81,1214.2 1833.39,1214.2 1833.98,1214.2 1834.56,1214.2 1835.15,1214.2 1835.74,1214.2 1836.32,1214.2 1836.91,1214.2 1837.5,1214.2 1838.08,1214.2 1838.67,1214.2 1839.26,1214.2 1839.84,1214.2 1840.43,1214.2 1841.01,1214.2 1841.6,1214.2 1842.19,1214.2 1842.77,1214.2 1843.36,1214.2 1843.95,1214.2 1844.53,1214.2 1845.12,1214.2 1845.71,1214.2 1846.29,1214.2 1846.88,1214.2 1847.47,1214.2 1848.05,1214.2 1848.64,1214.2 1849.22,1214.2 1849.81,1214.2 1850.4,1214.2 1850.98,1214.2 1851.57,1214.2 1852.16,1214.2 1852.74,1214.2 1853.33,1214.2 1853.92,1214.2 1854.5,1214.2 1855.09,1214.2 1855.68,1214.2 1856.26,1214.2 1856.85,1214.2 1857.43,1214.2 1858.02,1214.2 1858.61,1214.2 1859.19,1214.2 1859.78,1214.2 1860.37,1214.2 1860.95,1214.2 1861.54,1214.2 1862.13,1214.2 1862.71,1214.2 1863.3,1214.2 1863.88,1214.2 1864.47,1214.2 1865.06,1214.2 1865.64,1214.2 1866.23,1214.2 1866.82,1214.2 1867.4,1214.2 1867.99,1214.2 1868.58,1214.2 1869.16,1214.2 1869.75,1214.2 1870.34,1214.2 1870.92,1214.2 1871.51,1214.2 1872.09,1214.2 1872.68,1214.2 1873.27,1214.2 1873.85,1214.2 1874.44,1214.2 1875.03,1214.2 1875.61,1214.2 1876.2,1214.2 1876.79,1214.2 1877.37,1214.2 1877.96,1214.2 1878.55,1214.2 1879.13,1214.2 1879.72,1214.2 1880.3,1214.2 1880.89,1214.2 1881.48,1214.2 1882.06,1214.2 1882.65,1214.2 1883.24,1214.2 1883.82,1214.2 1884.41,1214.2 1885,1214.2 1885.58,1214.2 1886.17,1214.2 1886.76,1214.2 1887.34,1214.2 1887.93,1214.2 1888.51,1214.2 1889.1,1214.2 1889.69,1214.2 1890.27,1214.2 1890.86,1214.2 1891.45,1214.2 1892.03,1214.2 1892.62,1214.2 1893.21,1214.2 1893.79,1214.2 1894.38,1214.2 1894.96,1214.2 1895.55,1214.2 1896.14,1214.2 1896.72,1214.2 1897.31,1214.2 1897.9,1214.2 1898.48,1214.2 1899.07,1214.2 1899.66,1214.2 1900.24,1214.2 1900.83,1214.2 1901.42,1214.2 1902,1214.2 1902.59,1214.2 1903.17,1214.2 1903.76,1214.2 1904.35,1214.2 1904.93,1214.2 1905.52,1214.2 1906.11,1214.2 1906.69,1214.2 1907.28,1214.2 1907.87,1214.2 1908.45,1214.2 1909.04,1214.2 1909.63,1214.2 1910.21,1214.2 1910.8,1214.2 1911.38,1214.2 1911.97,1214.2 1912.56,1214.2 1913.14,1214.2 1913.73,1214.2 1914.32,1214.2 1914.9,1214.2 1915.49,1214.2 1916.08,1214.2 1916.66,1214.2 1917.25,1214.2 1917.83,1214.2 1918.42,1214.2 1919.01,1214.2 1919.59,1214.2 1920.18,1214.2 1920.77,1214.2 1921.35,1214.2 1921.94,1214.2 1922.53,1214.2 1923.11,1214.2 1923.7,1214.2 1924.29,1214.2 1924.87,1214.2 1925.46,1214.2 1926.04,1214.2 1926.63,1214.2 1927.22,1214.2 1927.8,1214.2 1928.39,1214.2 1928.98,1214.2 1929.56,1214.2 1930.15,1214.2 1930.74,1214.2 1931.32,1214.2 1931.91,1214.2 1932.5,1214.2 1933.08,1214.2 1933.67,1214.2 1934.25,1214.2 1934.84,1214.2 1935.43,1214.2 1936.01,1214.2 1936.6,1214.2 1937.19,1214.2 1937.77,1214.2 1938.36,1214.2 1938.95,1214.2 1939.53,1214.2 1940.12,1214.2 1940.71,1214.2 1941.29,1214.2 1941.88,1214.2 1942.46,1214.2 1943.05,1214.2 1943.64,1214.2 1944.22,1214.2 1944.81,1214.2 1945.4,1214.2 1945.98,1214.2 1946.57,1214.2 1947.16,1214.2 1947.74,1214.2 1948.33,1214.2 1948.91,1214.2 1949.5,1214.2 1950.09,1214.2 1950.67,1214.2 1951.26,1214.2 1951.85,1214.2 1952.43,1214.2 1953.02,1214.2 1953.61,1214.2 1954.19,1214.2 1954.78,1214.2 1955.37,1214.2 1955.95,1214.2 1956.54,1214.2 1957.12,1214.2 1957.71,1214.2 1958.3,1214.2 1958.88,1214.2 1959.47,1214.2 1960.06,1214.2 1960.64,1214.2 1961.23,1214.2 1961.82,1214.2 1962.4,1214.2 1962.99,1214.2 1963.58,1214.2 1964.16,1214.2 1964.75,1214.2 1965.33,1214.2 1965.92,1214.2 1966.51,1214.2 1967.09,1214.2 1967.68,1214.2 1968.27,1214.2 1968.85,1214.2 1969.44,1214.2 1970.03,1214.2 1970.61,1214.2 1971.2,1214.2 1971.78,1214.2 1972.37,1214.2 1972.96,1214.2 1973.54,1214.2 1974.13,1214.2 1974.72,1214.2 1975.3,1214.2 1975.89,1214.2 1976.48,1214.2 1977.06,1214.2 1977.65,1214.2 1978.24,1214.2 1978.82,1214.2 1979.41,1214.2 1979.99,1214.2 1980.58,1214.2 1981.17,1214.2 1981.75,1214.2 1982.34,1214.2 1982.93,1214.2 1983.51,1214.2 1984.1,1214.2 1984.69,1214.2 1985.27,1214.2 1985.86,1214.2 1986.45,1214.2 1987.03,1214.2 1987.62,1214.2 1988.2,1214.2 1988.79,1214.2 1989.38,1214.2 1989.96,1214.2 1990.55,1214.2 1991.14,1214.2 1991.72,1214.2 1992.31,1214.2 1992.9,1214.2 1993.48,1214.2 1994.07,1214.2 1994.65,1214.2 1995.24,1214.2 1995.83,1214.2 1996.41,1214.2 1997,1214.2 1997.59,1214.2 1998.17,1214.2 1998.76,1214.2 1999.35,1214.2 1999.93,1214.2 2000.52,1214.2 2001.11,1214.2 2001.69,1214.2 2002.28,1214.2 2002.86,1214.2 2003.45,1214.2 2004.04,1214.2 2004.62,1214.2 2005.21,1214.2 2005.8,1214.2 2006.38,1214.2 2006.97,1214.2 2007.56,1214.2 2008.14,1214.2 2008.73,1214.2 2009.32,1214.2 2009.9,1214.2 2010.49,1214.2 2011.07,1214.2 2011.66,1214.2 2012.25,1214.2 2012.83,1214.2 2013.42,1214.2 2014.01,1214.2 2014.59,1214.2 2015.18,1214.2 2015.77,1214.2 2016.35,1214.2 2016.94,1214.2 2017.53,1214.2 2018.11,1214.2 2018.7,1214.2 2019.28,1214.2 2019.87,1214.2 2020.46,1214.2 2021.04,1214.2 2021.63,1214.2 2022.22,1214.2 2022.8,1214.2 2023.39,1214.2 2023.98,1214.2 2024.56,1214.2 2025.15,1214.2 2025.73,1214.2 2026.32,1214.2 2026.91,1214.2 2027.49,1214.2 2028.08,1214.2 2028.67,1214.2 2029.25,1214.2 2029.84,1214.2 2030.43,1214.2 2031.01,1214.2 2031.6,1214.2 2032.19,1214.2 2032.77,1214.2 2033.36,1214.2 2033.94,1214.2 2034.53,1214.2 2035.12,1214.2 2035.7,1214.2 2036.29,1214.2 2036.88,1214.2 2037.46,1214.2 2038.05,1214.2 2038.64,1214.2 2039.22,1214.2 2039.81,1214.2 2040.4,1214.2 2040.98,1214.2 2041.57,1214.2 2042.15,1214.2 2042.74,1214.2 2043.33,1214.2 2043.91,1214.2 2044.5,1214.2 2045.09,1214.2 2045.67,1214.2 2046.26,1214.2 2046.85,1214.2 2047.43,1214.2 2048.02,1214.2 2048.6,1214.2 2049.19,1214.2 2049.78,1214.2 2050.36,1214.2 2050.95,1214.2 2051.54,1214.2 2052.12,1214.2 2052.71,1214.2 2053.3,1214.2 2053.88,1214.2 2054.47,1214.2 2055.06,1214.2 2055.64,1214.2 2056.23,1214.2 2056.81,1214.2 2057.4,1214.2 2057.99,1214.2 2058.57,1214.2 2059.16,1214.2 2059.75,1214.2 2060.33,1214.2 2060.92,1214.2 2061.51,1214.2 2062.09,1214.2 2062.68,1214.2 2063.27,1214.2 2063.85,1214.2 2064.44,1214.2 2065.02,1214.2 2065.61,1214.2 2066.2,1214.2 2066.78,1214.2 2067.37,1214.2 2067.96,1214.2 2068.54,1214.2 2069.13,1214.2 2069.72,1214.2 2070.3,1214.2 2070.89,1214.2 2071.48,1214.2 2072.06,1214.2 2072.65,1214.2 2073.23,1214.2 2073.82,1214.2 2074.41,1214.2 2074.99,1214.2 2075.58,1214.2 2076.17,1214.2 2076.75,1214.2 2077.34,1214.2 2077.93,1214.2 2078.51,1214.2 2079.1,1214.2 2079.68,1214.2 2080.27,1214.2 2080.86,1214.2 2081.44,1214.2 2082.03,1214.2 2082.62,1214.2 2083.2,1214.2 2083.79,1214.2 2084.38,1214.2 2084.96,1214.2 2085.55,1214.2 2086.14,1214.2 2086.72,1214.2 2087.31,1214.2 2087.89,1214.2 2088.48,1214.2 2089.07,1214.2 2089.65,1214.2 2090.24,1214.2 2090.83,1214.2 2091.41,1214.2 2092,1214.2 2092.59,1214.2 2093.17,1214.2 2093.76,1214.2 2094.35,1214.2 2094.93,1214.2 2095.52,1214.2 2096.1,1214.2 2096.69,1214.2 2097.28,1214.2 2097.86,1214.2 2098.45,1214.2 2099.04,1214.2 2099.62,1214.2 2100.21,1214.2 2100.8,1214.2 2101.38,1214.2 2101.97,1214.2 2102.55,1214.2 2103.14,1214.2 2103.73,1214.2 2104.31,1214.2 2104.9,1214.2 2105.49,1214.2 2106.07,1214.2 2106.66,1214.2 2107.25,1214.2 2107.83,1214.2 2108.42,1214.2 2109.01,1214.2 2109.59,1214.2 2110.18,1214.2 2110.76,1214.2 2111.35,1214.2 2111.94,1214.2 2112.52,1214.2 2113.11,1214.2 2113.7,1214.2 2114.28,1214.2 2114.87,1214.2 2115.46,1214.2 2116.04,1214.2 2116.63,1214.2 2117.22,1214.2 2117.8,1214.2 2118.39,1214.2 2118.97,1214.2 2119.56,1214.2 2120.15,1214.2 2120.73,1214.2 2121.32,1214.2 2121.91,1214.2 2122.49,1214.2 2123.08,1214.2 2123.67,1214.2 2124.25,1214.2 2124.84,1214.2 2125.42,1214.2 2126.01,1214.2 2126.6,1214.2 2127.18,1214.2 2127.77,1214.2 2128.36,1214.2 2128.94,1214.2 2129.53,1214.2 2130.12,1214.2 2130.7,1214.2 2131.29,1214.2 2131.88,1214.2 2132.46,1214.2 2133.05,1214.2 2133.63,1214.2 2134.22,1214.2 2134.81,1214.2 2135.39,1214.2 2135.98,1214.2 2136.57,1214.2 2137.15,1214.2 2137.74,1214.2 2138.33,1214.2 2138.91,1214.2 2139.5,1214.2 2140.09,1214.2 2140.67,1214.2 2141.26,1214.2 2141.84,1214.2 2142.43,1214.2 2143.02,1214.2 2143.6,1214.2 2144.19,1214.2 2144.78,1214.2 2145.36,1214.2 2145.95,1214.2 2146.54,1214.2 2147.12,1214.2 2147.71,1214.2 2148.3,1214.2 2148.88,1214.2 2149.47,1214.2 2150.05,1214.2 2150.64,1214.2 2151.23,1214.2 2151.81,1214.2 2152.4,1214.2 2152.99,1214.2 2153.57,1214.2 2154.16,1214.2 2154.75,1214.2 2155.33,1214.2 2155.92,1214.2 2156.5,1214.2 2157.09,1214.2 2157.68,1214.2 2158.26,1214.2 \"/>\n<path clip-path=\"url(#clip762)\" d=\"M986.025 1213.98 L986.612 1213.98 L987.198 1213.98 L987.785 1213.98 L988.371 1213.98 L988.957 1213.98 L989.544 1213.98 L990.13 1213.98 L990.717 1213.98 L991.303 1213.98 L991.889 1213.98 L992.476 1213.98 L993.062 1213.98 L993.649 1213.98 L994.235 1213.98 L994.822 1213.98 L995.408 1213.98 L995.994 1213.98 L996.581 1213.98 L997.167 1213.98 L997.754 1213.98 L998.34 1213.98 L998.926 1213.98 L999.513 1213.98 L1000.1 1213.98 L1000.69 1213.98 L1001.27 1213.98 L1001.86 1213.98 L1002.44 1213.98 L1003.03 1213.98 L1003.62 1213.98 L1004.2 1213.98 L1004.79 1213.98 L1005.38 1213.98 L1005.96 1213.98 L1006.55 1213.98 L1007.14 1213.98 L1007.72 1213.98 L1008.31 1213.98 L1008.9 1213.98 L1009.48 1213.98 L1010.07 1213.98 L1010.65 1213.98 L1011.24 1213.98 L1011.83 1213.98 L1012.41 1213.98 L1013 1213.98 L1013.59 1213.98 L1014.17 1213.98 L1014.76 1213.98 L1015.35 1213.98 L1015.93 1213.98 L1016.52 1213.98 L1017.11 1213.98 L1017.69 1213.98 L1018.28 1213.98 L1018.86 1213.98 L1019.45 1213.98 L1020.04 1213.98 L1020.62 1213.98 L1021.21 1213.98 L1021.8 1213.98 L1022.38 1213.98 L1022.97 1213.98 L1023.56 1213.98 L1024.14 1213.98 L1024.73 1213.98 L1025.32 1213.98 L1025.9 1213.98 L1026.49 1213.98 L1027.07 1213.98 L1027.66 1213.98 L1028.25 1213.98 L1028.83 1213.98 L1029.42 1213.98 L1030.01 1213.98 L1030.59 1213.98 L1031.18 1213.98 L1031.77 1213.98 L1032.35 1213.98 L1032.94 1213.98 L1033.52 1213.98 L1034.11 1213.98 L1034.7 1213.98 L1035.28 1213.98 L1035.87 1213.98 L1036.46 1213.98 L1037.04 1213.98 L1037.63 1213.98 L1038.22 1213.98 L1038.8 1213.98 L1039.39 1213.98 L1039.98 1213.98 L1040.56 1213.98 L1041.15 1213.98 L1041.73 1213.98 L1042.32 1213.98 L1042.91 1213.98 L1043.49 1213.98 L1044.08 1213.98 L1044.67 1213.98 L1045.25 1213.98 L1045.84 1213.98 L1046.43 1213.98 L1047.01 1213.98 L1047.6 1213.98 L1048.19 1213.98 L1048.77 1213.98 L1049.36 1213.98 L1049.94 1213.98 L1050.53 1213.98 L1051.12 1213.98 L1051.7 1213.98 L1052.29 1213.98 L1052.88 1213.98 L1053.46 1213.98 L1054.05 1213.98 L1054.64 1213.98 L1055.22 1213.98 L1055.81 1213.98 L1056.39 1213.98 L1056.98 1213.98 L1057.57 1213.98 L1058.15 1213.98 L1058.74 1213.98 L1059.33 1213.98 L1059.91 1213.98 L1060.5 1213.98 L1061.09 1213.98 L1061.67 1213.98 L1062.26 1213.98 L1062.85 1213.98 L1063.43 1213.98 L1064.02 1213.98 L1064.6 1213.98 L1065.19 1213.98 L1065.78 1213.98 L1066.36 1213.98 L1066.95 1213.98 L1067.54 1213.98 L1068.12 1213.98 L1068.71 1213.98 L1069.3 1213.98 L1069.88 1213.98 L1070.47 1213.98 L1071.06 1213.98 L1071.64 1213.98 L1072.23 1213.98 L1072.81 1213.98 L1073.4 1213.98 L1073.99 1213.98 L1074.57 1213.98 L1075.16 1213.98 L1075.75 1213.98 L1076.33 1213.98 L1076.92 1213.98 L1077.51 1213.98 L1078.09 1213.98 L1078.68 1213.98 L1079.26 1213.98 L1079.85 1213.98 L1080.44 1213.98 L1081.02 1213.98 L1081.61 1213.98 L1082.2 1213.98 L1082.78 1213.98 L1083.37 1213.98 L1083.96 1213.98 L1084.54 1213.98 L1085.13 1213.98 L1085.72 1213.98 L1086.3 1213.98 L1086.89 1213.98 L1087.47 1213.98 L1088.06 1213.98 L1088.65 1213.98 L1089.23 1213.98 L1089.82 1213.98 L1090.41 1213.98 L1090.99 1213.98 L1091.58 1213.98 L1092.17 1213.98 L1092.75 1213.98 L1093.34 1213.98 L1093.93 1213.98 L1094.51 1213.98 L1095.1 1213.98 L1095.68 1213.98 L1096.27 1213.98 L1096.86 1213.98 L1097.44 1213.98 L1098.03 1213.98 L1098.62 1213.98 L1099.2 1213.98 L1099.79 1213.98 L1100.38 1213.98 L1100.96 1213.98 L1101.55 1213.98 L1102.14 1213.98 L1102.72 1213.98 L1103.31 1213.98 L1103.89 1213.98 L1104.48 1213.98 L1105.07 1213.98 L1105.65 1213.98 L1106.24 1213.98 L1106.83 1213.98 L1107.41 1213.98 L1108 1213.98 L1108.59 1213.98 L1109.17 1213.98 L1109.76 1213.98 L1110.34 1213.98 L1110.93 1213.98 L1111.52 1213.98 L1112.1 1213.98 L1112.69 1213.98 L1113.28 1213.98 L1113.86 1213.98 L1114.45 1213.98 L1115.04 1213.98 L1115.62 1213.98 L1116.21 1213.98 L1116.8 1213.98 L1117.38 1213.98 L1117.97 1213.98 L1118.55 1213.98 L1119.14 1213.98 L1119.73 1213.98 L1120.31 1213.98 L1120.9 1213.98 L1121.49 1213.98 L1122.07 1213.98 L1122.66 1213.98 L1123.25 1213.98 L1123.83 1213.98 L1124.42 1213.98 L1125.01 1213.98 L1125.59 1213.98 L1126.18 1213.98 L1126.76 1213.98 L1127.35 1213.98 L1127.94 1213.98 L1128.52 1213.98 L1129.11 1213.98 L1129.7 1213.98 L1130.28 1213.98 L1130.87 1213.98 L1131.46 1213.98 L1132.04 1213.98 L1132.63 1213.98 L1133.21 1213.98 L1133.8 1213.98 L1134.39 1213.98 L1134.97 1213.98 L1135.56 1213.98 L1136.15 1213.98 L1136.73 1213.98 L1137.32 1213.98 L1137.91 1213.98 L1138.49 1213.98 L1139.08 1213.98 L1139.67 1213.98 L1140.25 1213.98 L1140.84 1213.98 L1141.42 1213.98 L1142.01 1213.98 L1142.6 1213.98 L1143.18 1213.98 L1143.77 1213.98 L1144.36 1213.98 L1144.94 1213.98 L1145.53 1213.98 L1146.12 1213.98 L1146.7 1213.98 L1147.29 1213.98 L1147.88 1213.98 L1148.46 1213.98 L1149.05 1213.98 L1149.63 1213.98 L1150.22 1213.98 L1150.81 1213.98 L1151.39 1213.98 L1151.98 1213.98 L1152.57 1213.98 L1153.15 1213.98 L1153.74 1213.98 L1154.33 1213.98 L1154.91 1213.98 L1155.5 1213.98 L1156.09 1213.98 L1156.67 1213.98 L1157.26 1213.98 L1157.84 1213.98 L1158.43 1213.98 L1159.02 1213.98 L1159.6 1213.98 L1160.19 1213.98 L1160.78 1213.98 L1161.36 1213.98 L1161.95 1213.98 L1162.54 1213.98 L1163.12 1213.98 L1163.71 1213.98 L1164.29 1213.98 L1164.88 1213.98 L1165.47 1213.98 L1166.05 1213.98 L1166.64 1213.98 L1167.23 1213.98 L1167.81 1213.98 L1168.4 1213.98 L1168.99 1213.98 L1169.57 1213.98 L1170.16 1213.98 L1170.75 1213.98 L1171.33 1213.98 L1171.92 1213.98 L1172.5 1213.98 L1173.09 1213.98 L1173.68 1213.98 L1174.26 1213.98 L1174.85 1213.98 L1175.44 1213.98 L1176.02 1213.98 L1176.61 1213.98 L1177.2 1213.98 L1177.78 1213.98 L1178.37 1213.98 L1178.96 1213.98 L1179.54 1213.98 L1180.13 1213.98 L1180.71 1213.98 L1181.3 1213.98 L1181.89 1213.98 L1182.47 1213.98 L1183.06 1213.98 L1183.65 1213.98 L1184.23 1213.98 L1184.82 1213.98 L1185.41 1213.98 L1185.99 1213.98 L1186.58 1213.98 L1187.16 1213.98 L1187.75 1213.98 L1188.34 1213.98 L1188.92 1213.98 L1189.51 1213.98 L1190.1 1213.98 L1190.68 1213.98 L1191.27 1213.98 L1191.86 1213.98 L1192.44 1213.98 L1193.03 1213.98 L1193.62 1213.98 L1194.2 1213.98 L1194.79 1213.98 L1195.37 1213.98 L1195.96 1213.98 L1196.55 1213.98 L1197.13 1213.98 L1197.72 1213.98 L1198.31 1213.98 L1198.89 1213.98 L1199.48 1213.98 L1200.07 1213.98 L1200.65 1213.98 L1201.24 1213.98 L1201.83 1213.98 L1202.41 1213.98 L1203 1213.98 L1203.58 1213.98 L1204.17 1213.98 L1204.76 1213.98 L1205.34 1213.98 L1205.93 1213.98 L1206.52 1213.98 L1207.1 1213.98 L1207.69 1213.98 L1208.28 1213.98 L1208.86 1213.98 L1209.45 1213.98 L1210.03 1213.98 L1210.62 1213.98 L1211.21 1213.98 L1211.79 1213.98 L1212.38 1213.98 L1212.97 1213.98 L1213.55 1213.98 L1214.14 1213.98 L1214.73 1213.98 L1215.31 1213.98 L1215.9 1213.98 L1216.49 1213.98 L1217.07 1213.98 L1217.66 1213.98 L1218.24 1213.98 L1218.83 1213.98 L1219.42 1213.98 L1220 1213.98 L1220.59 1213.98 L1221.18 1213.98 L1221.76 1213.98 L1222.35 1213.98 L1222.94 1213.98 L1223.52 1213.98 L1224.11 1213.98 L1224.7 1213.98 L1225.28 1213.98 L1225.87 1213.98 L1226.45 1213.98 L1227.04 1213.98 L1227.63 1213.98 L1228.21 1213.98 L1228.8 1213.98 L1229.39 1213.98 L1229.97 1213.98 L1230.56 1213.98 L1231.15 1213.98 L1231.73 1213.98 L1232.32 1213.98 L1232.91 1213.98 L1233.49 1213.98 L1234.08 1213.98 L1234.66 1213.98 L1235.25 1213.98 L1235.84 1213.98 L1236.42 1213.98 L1237.01 1213.98 L1237.6 1213.98 L1238.18 1213.98 L1238.77 1213.98 L1239.36 1213.98 L1239.94 1213.98 L1240.53 1213.98 L1241.11 1213.98 L1241.7 1213.98 L1242.29 1213.98 L1242.87 1213.98 L1243.46 1213.98 L1244.05 1213.98 L1244.63 1213.98 L1245.22 1213.98 L1245.81 1213.98 L1246.39 1213.98 L1246.98 1213.98 L1247.57 1213.98 L1248.15 1213.98 L1248.74 1213.98 L1249.32 1213.98 L1249.91 1213.98 L1250.5 1213.98 L1251.08 1213.98 L1251.67 1213.98 L1252.26 1213.98 L1252.84 1213.98 L1253.43 1213.98 L1254.02 1213.98 L1254.6 1213.98 L1255.19 1213.98 L1255.78 1213.98 L1256.36 1213.98 L1256.95 1213.98 L1257.53 1213.98 L1258.12 1213.98 L1258.71 1213.98 L1259.29 1213.98 L1259.88 1213.98 L1260.47 1213.98 L1261.05 1213.98 L1261.64 1213.98 L1262.23 1213.98 L1262.81 1213.98 L1263.4 1213.98 L1263.98 1213.98 L1264.57 1213.98 L1265.16 1213.98 L1265.74 1213.98 L1266.33 1213.98 L1266.92 1213.98 L1267.5 1213.98 L1268.09 1213.98 L1268.68 1213.98 L1269.26 1213.98 L1269.85 1213.98 L1270.44 1213.98 L1271.02 1213.98 L1271.61 1213.98 L1272.19 1213.98 L1272.78 1213.98 L1273.37 1213.98 L1273.95 1213.98 L1274.54 1213.98 L1275.13 1213.98 L1275.71 1213.98 L1276.3 1213.98 L1276.89 1213.98 L1277.47 1213.98 L1278.06 1213.98 L1278.65 1213.98 L1279.23 1213.98 L1279.82 1213.98 L1280.4 1213.98 L1280.99 1213.98 L1281.58 1213.98 L1282.16 1213.98 L1282.75 1213.98 L1283.34 1213.98 L1283.92 1213.98 L1284.51 1213.98 L1285.1 1213.98 L1285.68 1213.98 L1286.27 1213.98 L1286.86 1213.98 L1287.44 1213.98 L1288.03 1213.98 L1288.61 1213.98 L1289.2 1213.98 L1289.79 1213.98 L1290.37 1213.98 L1290.96 1213.98 L1291.55 1213.98 L1292.13 1213.98 L1292.72 1213.98 L1293.31 1213.98 L1293.89 1213.98 L1294.48 1213.98 L1295.06 1213.98 L1295.65 1213.98 L1296.24 1213.98 L1296.82 1213.98 L1297.41 1213.98 L1298 1213.98 L1298.58 1213.98 L1299.17 1213.98 L1299.76 1213.98 L1300.34 1213.98 L1300.93 1213.98 L1301.52 1213.98 L1302.1 1213.98 L1302.69 1213.98 L1303.27 1213.98 L1303.86 1213.98 L1304.45 1213.98 L1305.03 1213.98 L1305.62 1213.98 L1306.21 1213.98 L1306.79 1213.98 L1307.38 1213.98 L1307.97 1213.98 L1308.55 1213.98 L1309.14 1213.98 L1309.73 1213.98 L1310.31 1213.98 L1310.9 1213.98 L1311.48 1213.98 L1312.07 1213.98 L1312.66 1213.98 L1313.24 1213.98 L1313.83 1213.98 L1314.42 1213.98 L1315 1213.98 L1315.59 1213.98 L1316.18 1213.98 L1316.76 1213.98 L1317.35 1213.98 L1317.93 1213.98 L1318.52 1213.98 L1319.11 1213.98 L1319.69 1213.98 L1320.28 1213.98 L1320.87 1213.98 L1321.45 1213.98 L1322.04 1213.98 L1322.63 1213.98 L1323.21 1213.98 L1323.8 1213.98 L1324.39 1213.98 L1324.97 1213.98 L1325.56 1213.98 L1326.14 1213.98 L1326.73 1213.98 L1327.32 1213.98 L1327.9 1213.98 L1328.49 1213.98 L1329.08 1213.98 L1329.66 1213.98 L1330.25 1213.98 L1330.84 1213.98 L1331.42 1213.98 L1332.01 1213.98 L1332.6 1213.98 L1333.18 1213.98 L1333.77 1213.98 L1334.35 1213.98 L1334.94 1213.98 L1335.53 1213.98 L1336.11 1213.98 L1336.7 1213.98 L1337.29 1213.98 L1337.87 1213.98 L1338.46 1213.98 L1339.05 1213.98 L1339.63 1213.98 L1340.22 1213.98 L1340.8 1213.98 L1341.39 1213.98 L1341.98 1213.98 L1342.56 1213.98 L1343.15 1213.98 L1343.74 1213.98 L1344.32 1213.98 L1344.91 1213.98 L1345.5 1213.98 L1346.08 1213.98 L1346.67 1213.98 L1347.26 1213.98 L1347.84 1213.98 L1348.43 1213.98 L1349.01 1213.98 L1349.6 1213.98 L1350.19 1213.98 L1350.77 1213.98 L1351.36 1213.98 L1351.95 1213.98 L1352.53 1213.98 L1353.12 1213.98 L1353.71 1213.98 L1354.29 1213.98 L1354.88 1213.98 L1355.47 1213.98 L1356.05 1213.98 L1356.64 1213.98 L1357.22 1213.98 L1357.81 1213.98 L1358.4 1213.98 L1358.98 1213.98 L1359.57 1213.98 L1360.16 1213.98 L1360.74 1213.98 L1361.33 1213.98 L1361.92 1213.98 L1362.5 1213.98 L1363.09 1213.98 L1363.68 1213.98 L1364.26 1213.98 L1364.85 1213.98 L1365.43 1213.98 L1366.02 1213.98 L1366.61 1213.98 L1367.19 1213.98 L1367.78 1213.98 L1368.37 1213.98 L1368.95 1213.98 L1369.54 1213.98 L1370.13 1213.98 L1370.71 1213.98 L1371.3 1213.98 L1371.88 1213.98 L1372.47 1213.98 L1373.06 1213.98 L1373.64 1213.98 L1374.23 1213.98 L1374.82 1213.98 L1375.4 1213.98 L1375.99 1213.98 L1376.58 1213.98 L1377.16 1213.98 L1377.75 1213.98 L1378.34 1213.98 L1378.92 1213.98 L1379.51 1213.98 L1380.09 1213.98 L1380.68 1213.98 L1381.27 1213.98 L1381.85 1213.98 L1382.44 1213.98 L1383.03 1213.98 L1383.61 1213.98 L1384.2 1213.98 L1384.79 1213.98 L1385.37 1213.98 L1385.96 1213.98 L1386.55 1213.98 L1387.13 1213.98 L1387.72 1213.98 L1388.3 1213.98 L1388.89 1213.98 L1389.48 1213.98 L1390.06 1213.98 L1390.65 1213.98 L1391.24 1213.98 L1391.82 1213.98 L1392.41 1213.98 L1393 1213.98 L1393.58 1213.98 L1394.17 1213.98 L1394.75 1213.98 L1395.34 1213.98 L1395.93 1213.98 L1396.51 1213.98 L1397.1 1213.98 L1397.69 1213.98 L1398.27 1213.98 L1398.86 1213.98 L1399.45 1213.98 L1400.03 1213.98 L1400.62 1213.98 L1401.21 1213.98 L1401.79 1213.98 L1402.38 1213.98 L1402.96 1213.98 L1403.55 1213.98 L1404.14 1213.98 L1404.72 1213.98 L1405.31 1213.98 L1405.9 1213.98 L1406.48 1213.98 L1407.07 1213.98 L1407.66 1213.98 L1408.24 1213.98 L1408.83 1213.98 L1409.42 1213.98 L1410 1213.98 L1410.59 1213.98 L1411.17 1213.98 L1411.76 1213.98 L1412.35 1213.98 L1412.93 1213.98 L1413.52 1213.98 L1414.11 1213.98 L1414.69 1213.98 L1415.28 1213.98 L1415.87 1213.98 L1416.45 1213.98 L1417.04 1213.98 L1417.63 1213.98 L1418.21 1213.98 L1418.8 1213.98 L1419.38 1213.98 L1419.97 1213.98 L1420.56 1213.98 L1421.14 1213.98 L1421.73 1213.98 L1422.32 1213.98 L1422.9 1213.98 L1423.49 1213.98 L1424.08 1213.98 L1424.66 1213.98 L1425.25 1213.98 L1425.83 1213.98 L1426.42 1213.98 L1427.01 1213.98 L1427.59 1213.98 L1428.18 1213.98 L1428.77 1213.98 L1429.35 1213.98 L1429.94 1213.98 L1430.53 1213.98 L1431.11 1213.98 L1431.7 1213.98 L1432.29 1213.98 L1432.87 1213.98 L1433.46 1213.98 L1434.04 1213.98 L1434.63 1213.98 L1435.22 1213.98 L1435.8 1213.98 L1436.39 1213.98 L1436.98 1213.98 L1437.56 1213.98 L1438.15 1213.98 L1438.74 1213.98 L1439.32 1213.98 L1439.91 1213.98 L1440.5 1213.98 L1441.08 1213.98 L1441.67 1213.98 L1442.25 1213.98 L1442.84 1213.98 L1443.43 1213.98 L1444.01 1213.98 L1444.6 1213.98 L1445.19 1213.98 L1445.77 1213.98 L1446.36 1213.98 L1446.95 1213.98 L1447.53 1213.98 L1448.12 1213.98 L1448.7 1213.98 L1449.29 1213.98 L1449.88 1213.98 L1450.46 1213.98 L1451.05 1213.98 L1451.64 1213.98 L1452.22 1213.98 L1452.81 1213.98 L1453.4 1213.98 L1453.98 1213.98 L1454.57 1213.98 L1455.16 1213.98 L1455.74 1213.98 L1456.33 1213.98 L1456.91 1213.98 L1457.5 1213.98 L1458.09 1213.98 L1458.67 1213.98 L1459.26 1213.98 L1459.85 1213.98 L1460.43 1213.98 L1461.02 1213.98 L1461.61 1213.98 L1462.19 1213.98 L1462.78 1213.98 L1463.37 1213.98 L1463.95 1213.98 L1464.54 1213.98 L1465.12 1213.98 L1465.71 1213.98 L1466.3 1213.98 L1466.88 1213.98 L1467.47 1213.98 L1468.06 1213.98 L1468.64 1213.98 L1469.23 1213.98 L1469.82 1213.98 L1470.4 1213.98 L1470.99 1213.98 L1471.57 1213.98 L1472.16 1213.98 L1472.75 1213.98 L1473.33 1213.98 L1473.92 1213.98 L1474.51 1213.98 L1475.09 1213.98 L1475.68 1213.98 L1476.27 1213.98 L1476.85 1213.98 L1477.44 1213.98 L1478.03 1213.98 L1478.61 1213.98 L1479.2 1213.98 L1479.78 1213.98 L1480.37 1213.98 L1480.96 1213.98 L1481.54 1213.98 L1482.13 1213.98 L1482.72 1213.98 L1483.3 1213.98 L1483.89 1213.98 L1484.48 1213.98 L1485.06 1213.98 L1485.65 1213.98 L1486.24 1213.98 L1486.82 1213.98 L1487.41 1213.98 L1487.99 1213.98 L1488.58 1213.98 L1489.17 1213.98 L1489.75 1213.98 L1490.34 1213.98 L1490.93 1213.98 L1491.51 1213.98 L1492.1 1213.98 L1492.69 1213.98 L1493.27 1213.98 L1493.86 1213.98 L1494.45 1213.98 L1495.03 1213.98 L1495.62 1213.98 L1496.2 1213.98 L1496.79 1213.98 L1497.38 1213.98 L1497.96 1213.98 L1498.55 1213.98 L1499.14 1213.98 L1499.72 1213.98 L1500.31 1213.98 L1500.9 1213.98 L1501.48 1213.98 L1502.07 1213.98 L1502.65 1213.98 L1503.24 1213.98 L1503.83 1213.98 L1504.41 1213.98 L1505 1213.98 L1505.59 1213.98 L1506.17 1213.98 L1506.76 1213.98 L1507.35 1213.98 L1507.93 1213.98 L1508.52 1213.98 L1509.11 1213.98 L1509.69 1213.98 L1510.28 1213.98 L1510.86 1213.98 L1511.45 1213.98 L1512.04 1213.98 L1512.62 1213.98 L1513.21 1213.98 L1513.8 1213.98 L1514.38 1213.98 L1514.97 1213.98 L1515.56 1213.98 L1516.14 1213.98 L1516.73 1213.98 L1517.32 1213.98 L1517.9 1213.98 L1518.49 1213.98 L1519.07 1213.98 L1519.66 1213.98 L1520.25 1213.98 L1520.83 1213.98 L1521.42 1213.98 L1522.01 1213.98 L1522.59 1213.98 L1523.18 1213.98 L1523.77 1213.98 L1524.35 1213.98 L1524.94 1213.98 L1525.52 1213.98 L1526.11 1213.98 L1526.7 1213.98 L1527.28 1213.98 L1527.87 1213.98 L1528.46 1213.98 L1529.04 1213.98 L1529.63 1213.98 L1530.22 1213.98 L1530.8 1213.98 L1531.39 1213.98 L1531.98 1213.98 L1532.56 1213.98 L1533.15 1213.98 L1533.73 1213.98 L1534.32 1213.98 L1534.91 1213.98 L1535.49 1213.98 L1536.08 1213.98 L1536.67 1213.98 L1537.25 1213.98 L1537.84 1213.98 L1538.43 1213.98 L1539.01 1213.98 L1539.6 1213.98 L1540.19 1213.98 L1540.77 1213.98 L1541.36 1213.98 L1541.94 1213.98 L1542.53 1213.98 L1543.12 1213.98 L1543.7 1213.98 L1544.29 1213.98 L1544.88 1213.98 L1545.46 1213.98 L1546.05 1213.98 L1546.64 1213.98 L1547.22 1213.98 L1547.81 1213.98 L1548.4 1213.98 L1548.98 1213.98 L1549.57 1213.98 L1550.15 1213.98 L1550.74 1213.98 L1551.33 1213.98 L1551.91 1213.98 L1552.5 1213.98 L1553.09 1213.98 L1553.67 1213.98 L1554.26 1213.98 L1554.85 1213.98 L1555.43 1213.98 L1556.02 1213.98 L1556.6 1213.98 L1557.19 1213.98 L1557.78 1213.98 L1558.36 1213.98 L1558.95 1213.98 L1559.54 1213.98 L1560.12 1213.98 L1560.71 1213.98 L1561.3 1213.98 L1561.88 1213.98 L1562.47 1213.98 L1563.06 1213.98 L1563.64 1213.98 L1564.23 1213.98 L1564.81 1213.98 L1565.4 1213.98 L1565.99 1213.98 L1566.57 1213.98 L1567.16 1213.98 L1567.75 1213.98 L1568.33 1213.98 L1568.92 1213.98 L1569.51 1213.98 L1570.09 1213.98 L1570.68 1213.98 L1571.27 1213.98 L1571.85 1213.98 L1572.44 1213.98 L1573.02 1213.98 L1573.61 1213.98 L1574.2 1213.98 L1574.78 1213.98 L1575.37 1213.98 L1575.96 1213.98 L1576.54 1213.98 L1577.13 1213.98 L1577.72 1213.98 L1578.3 1213.98 L1578.89 1213.98 L1579.47 1213.98 L1580.06 1213.98 L1580.65 1213.98 L1581.23 1213.98 L1581.82 1213.98 L1582.41 1213.98 L1582.99 1213.98 L1583.58 1213.98 L1584.17 1213.98 L1584.75 1213.98 L1585.34 1213.98 L1585.93 1213.98 L1586.51 1213.98 L1587.1 1213.98 L1587.68 1213.98 L1588.27 1213.98 L1588.86 1213.98 L1589.44 1213.98 L1590.03 1213.98 L1590.62 1213.98 L1591.2 1213.98 L1591.79 1213.98 L1592.38 1213.98 L1592.96 1213.98 L1593.55 1213.98 L1594.14 1213.98 L1594.72 1213.98 L1595.31 1213.98 L1595.89 1213.98 L1596.48 1213.98 L1597.07 1213.98 L1597.65 1213.98 L1598.24 1213.98 L1598.83 1213.98 L1599.41 1213.98 L1600 1213.98 L1600.59 1213.98 L1601.17 1213.98 L1601.76 1213.98 L1602.34 1213.98 L1602.93 1213.98 L1603.52 1213.98 L1604.1 1213.98 L1604.69 1213.98 L1605.28 1213.98 L1605.86 1213.98 L1606.45 1213.98 L1607.04 1213.98 L1607.62 1213.98 L1608.21 1213.98 L1608.8 1213.98 L1609.38 1213.98 L1609.97 1213.98 L1610.55 1213.98 L1611.14 1213.98 L1611.73 1213.98 L1612.31 1213.98 L1612.9 1213.98 L1613.49 1213.98 L1614.07 1213.98 L1614.66 1213.98 L1615.25 1213.98 L1615.83 1213.98 L1616.42 1213.98 L1617.01 1213.98 L1617.59 1213.98 L1618.18 1213.98 L1618.76 1213.98 L1619.35 1213.98 L1619.94 1213.98 L1620.52 1213.98 L1621.11 1213.98 L1621.7 1213.98 L1622.28 1213.98 L1622.87 1213.98 L1623.46 1213.98 L1624.04 1213.98 L1624.63 1213.98 L1625.22 1213.98 L1625.8 1213.98 L1626.39 1213.98 L1626.97 1213.98 L1627.56 1213.98 L1628.15 1213.98 L1628.73 1213.98 L1629.32 1213.98 L1629.91 1213.98 L1630.49 1213.98 L1631.08 1213.98 L1631.67 1213.98 L1632.25 1213.98 L1632.84 1213.98 L1633.42 1213.98 L1634.01 1213.98 L1634.6 1213.98 L1635.18 1213.98 L1635.77 1213.98 L1636.36 1213.98 L1636.94 1213.98 L1637.53 1213.98 L1638.12 1213.98 L1638.7 1213.98 L1639.29 1213.98 L1639.88 1213.98 L1640.46 1213.98 L1641.05 1213.98 L1641.63 1213.98 L1642.22 1213.98 L1642.81 1213.98 L1643.39 1213.98 L1643.98 1213.98 L1644.57 1213.98 L1645.15 1213.98 L1645.74 1213.98 L1646.33 1213.98 L1646.91 1213.98 L1647.5 1213.98 L1648.09 1213.98 L1648.67 1213.98 L1649.26 1213.98 L1649.84 1213.98 L1650.43 1213.98 L1651.02 1213.98 L1651.6 1213.98 L1652.19 1213.98 L1652.78 1213.98 L1653.36 1213.98 L1653.95 1213.98 L1654.54 1213.98 L1655.12 1213.98 L1655.71 1213.98 L1656.29 1213.98 L1656.88 1213.98 L1657.47 1213.98 L1658.05 1213.98 L1658.64 1213.98 L1659.23 1213.98 L1659.81 1213.98 L1660.4 1213.98 L1660.99 1213.98 L1661.57 1213.98 L1662.16 1213.98 L1662.75 1213.98 L1663.33 1213.98 L1663.92 1213.98 L1664.5 1213.98 L1665.09 1213.98 L1665.68 1213.98 L1666.26 1213.98 L1666.85 1213.98 L1667.44 1213.98 L1668.02 1213.98 L1668.61 1213.98 L1669.2 1213.98 L1669.78 1213.98 L1670.37 1213.98 L1670.96 1213.98 L1671.54 1213.98 L1672.13 1213.98 L1672.71 1213.98 L1673.3 1213.98 L1673.89 1213.98 L1674.47 1213.98 L1675.06 1213.98 L1675.65 1213.98 L1676.23 1213.98 L1676.82 1213.98 L1677.41 1213.98 L1677.99 1213.98 L1678.58 1213.98 L1679.17 1213.98 L1679.75 1213.98 L1680.34 1213.98 L1680.92 1213.98 L1681.51 1213.98 L1682.1 1213.98 L1682.68 1213.98 L1683.27 1213.98 L1683.86 1213.98 L1684.44 1213.98 L1685.03 1213.98 L1685.62 1213.98 L1686.2 1213.98 L1686.79 1213.98 L1687.37 1213.98 L1687.96 1213.98 L1688.55 1213.98 L1689.13 1213.98 L1689.72 1213.98 L1690.31 1213.98 L1690.89 1213.98 L1691.48 1213.98 L1692.07 1213.98 L1692.65 1213.98 L1693.24 1213.98 L1693.83 1213.98 L1694.41 1213.98 L1695 1213.98 L1695.58 1213.98 L1696.17 1213.98 L1696.76 1213.98 L1697.34 1213.98 L1697.93 1213.98 L1698.52 1213.98 L1699.1 1213.98 L1699.69 1213.98 L1700.28 1213.98 L1700.86 1213.98 L1701.45 1213.98 L1702.04 1213.98 L1702.62 1213.98 L1703.21 1213.98 L1703.79 1213.98 L1704.38 1213.98 L1704.97 1213.98 L1705.55 1213.98 L1706.14 1213.98 L1706.73 1213.98 L1707.31 1213.98 L1707.9 1213.98 L1708.49 1213.98 L1709.07 1213.98 L1709.66 1213.98 L1710.24 1213.98 L1710.83 1213.98 L1711.42 1213.98 L1712 1213.98 L1712.59 1213.98 L1713.18 1213.98 L1713.76 1213.98 L1714.35 1213.98 L1714.94 1213.98 L1715.52 1213.98 L1716.11 1213.98 L1716.7 1213.98 L1717.28 1213.98 L1717.87 1213.98 L1718.45 1213.98 L1719.04 1213.98 L1719.63 1213.98 L1720.21 1213.98 L1720.8 1213.98 L1721.39 1213.98 L1721.97 1213.98 L1722.56 1213.98 L1723.15 1213.98 L1723.73 1213.98 L1724.32 1213.98 L1724.91 1213.98 L1725.49 1213.98 L1726.08 1213.98 L1726.66 1213.98 L1727.25 1213.98 L1727.84 1213.98 L1728.42 1213.98 L1729.01 1213.98 L1729.6 1213.98 L1730.18 1213.98 L1730.77 1213.98 L1731.36 1213.98 L1731.94 1213.98 L1732.53 1213.98 L1733.11 1213.98 L1733.7 1213.98 L1734.29 1213.98 L1734.87 1213.98 L1735.46 1213.98 L1736.05 1213.98 L1736.63 1213.98 L1737.22 1213.98 L1737.81 1213.98 L1738.39 1213.98 L1738.98 1213.98 L1739.57 1213.98 L1740.15 1213.98 L1740.74 1213.98 L1741.32 1213.98 L1741.91 1213.98 L1742.5 1213.98 L1743.08 1213.98 L1743.67 1213.98 L1744.26 1213.98 L1744.84 1213.98 L1745.43 1213.98 L1746.02 1213.98 L1746.6 1213.98 L1747.19 1213.98 L1747.78 1213.98 L1748.36 1213.98 L1748.95 1213.98 L1749.53 1213.98 L1750.12 1213.98 L1750.71 1213.98 L1751.29 1213.98 L1751.88 1213.98 L1752.47 1213.98 L1753.05 1213.98 L1753.64 1213.98 L1754.23 1213.98 L1754.81 1213.98 L1755.4 1213.98 L1755.99 1213.98 L1756.57 1213.98 L1757.16 1213.98 L1757.74 1213.98 L1758.33 1213.98 L1758.92 1213.98 L1759.5 1213.98 L1760.09 1213.98 L1760.68 1213.98 L1761.26 1213.98 L1761.85 1213.98 L1762.44 1213.98 L1763.02 1213.98 L1763.61 1213.98 L1764.19 1213.98 L1764.78 1213.98 L1765.37 1213.98 L1765.95 1213.98 L1766.54 1213.98 L1767.13 1213.98 L1767.71 1213.98 L1768.3 1213.98 L1768.89 1213.98 L1769.47 1213.98 L1770.06 1213.98 L1770.65 1213.98 L1771.23 1213.98 L1771.82 1213.98 L1772.4 1213.98 L1772.99 1213.98 L1773.58 1213.98 L1774.16 1213.98 L1774.75 1213.98 L1775.34 1213.98 L1775.92 1213.98 L1776.51 1213.98 L1777.1 1213.98 L1777.68 1213.98 L1778.27 1213.98 L1778.86 1213.98 L1779.44 1213.98 L1780.03 1213.98 L1780.61 1213.98 L1781.2 1213.98 L1781.79 1213.98 L1782.37 1213.98 L1782.96 1213.98 L1783.55 1213.98 L1784.13 1213.98 L1784.72 1213.98 L1785.31 1213.98 L1785.89 1213.98 L1786.48 1213.98 L1787.06 1213.98 L1787.65 1213.98 L1788.24 1213.98 L1788.82 1213.98 L1789.41 1213.98 L1790 1213.98 L1790.58 1213.98 L1791.17 1213.98 L1791.76 1213.98 L1792.34 1213.98 L1792.93 1213.98 L1793.52 1213.98 L1794.1 1213.98 L1794.69 1213.98 L1795.27 1213.98 L1795.86 1213.98 L1796.45 1213.98 L1797.03 1213.98 L1797.62 1213.98 L1798.21 1213.98 L1798.79 1213.98 L1799.38 1213.98 L1799.97 1213.98 L1800.55 1213.98 L1801.14 1213.98 L1801.73 1213.98 L1802.31 1213.98 L1802.9 1213.98 L1803.48 1213.98 L1804.07 1213.98 L1804.66 1213.98 L1805.24 1213.98 L1805.83 1213.98 L1806.42 1213.98 L1807 1213.98 L1807.59 1213.98 L1808.18 1213.98 L1808.76 1213.98 L1809.35 1213.98 L1809.94 1213.98 L1810.52 1213.98 L1811.11 1213.98 L1811.69 1213.98 L1812.28 1213.98 L1812.87 1213.98 L1813.45 1213.98 L1814.04 1213.98 L1814.63 1213.98 L1815.21 1213.98 L1815.8 1213.98 L1816.39 1213.98 L1816.97 1213.98 L1817.56 1213.98 L1818.14 1213.98 L1818.73 1213.98 L1819.32 1213.98 L1819.9 1213.98 L1820.49 1213.98 L1821.08 1213.98 L1821.66 1213.98 L1822.25 1213.98 L1822.84 1213.98 L1823.42 1213.98 L1824.01 1213.98 L1824.6 1213.98 L1825.18 1213.98 L1825.77 1213.98 L1826.35 1213.98 L1826.94 1213.98 L1827.53 1213.98 L1828.11 1213.98 L1828.7 1213.98 L1829.29 1213.98 L1829.87 1213.98 L1830.46 1213.98 L1831.05 1213.98 L1831.63 1213.98 L1832.22 1213.98 L1832.81 1213.98 L1833.39 1213.98 L1833.98 1213.98 L1834.56 1213.98 L1835.15 1213.98 L1835.74 1213.98 L1836.32 1213.98 L1836.91 1213.98 L1837.5 1213.98 L1838.08 1213.98 L1838.67 1213.98 L1839.26 1213.98 L1839.84 1213.98 L1840.43 1213.98 L1841.01 1213.98 L1841.6 1213.98 L1842.19 1213.98 L1842.77 1213.98 L1843.36 1213.98 L1843.95 1213.98 L1844.53 1213.98 L1845.12 1213.98 L1845.71 1213.98 L1846.29 1213.98 L1846.88 1213.98 L1847.47 1213.98 L1848.05 1213.98 L1848.64 1213.98 L1849.22 1213.98 L1849.81 1213.98 L1850.4 1213.98 L1850.98 1213.98 L1851.57 1213.98 L1852.16 1213.98 L1852.74 1213.98 L1853.33 1213.98 L1853.92 1213.98 L1854.5 1213.98 L1855.09 1213.98 L1855.68 1213.98 L1856.26 1213.98 L1856.85 1213.98 L1857.43 1213.98 L1858.02 1213.98 L1858.61 1213.98 L1859.19 1213.98 L1859.78 1213.98 L1860.37 1213.98 L1860.95 1213.98 L1861.54 1213.98 L1862.13 1213.98 L1862.71 1213.98 L1863.3 1213.98 L1863.88 1213.98 L1864.47 1213.98 L1865.06 1213.98 L1865.64 1213.98 L1866.23 1213.98 L1866.82 1213.98 L1867.4 1213.98 L1867.99 1213.98 L1868.58 1213.98 L1869.16 1213.98 L1869.75 1213.98 L1870.34 1213.98 L1870.92 1213.98 L1871.51 1213.98 L1872.09 1213.98 L1872.68 1213.98 L1873.27 1213.98 L1873.85 1213.98 L1874.44 1213.98 L1875.03 1213.98 L1875.61 1213.98 L1876.2 1213.98 L1876.79 1213.98 L1877.37 1213.98 L1877.96 1213.98 L1878.55 1213.98 L1879.13 1213.98 L1879.72 1213.98 L1880.3 1213.98 L1880.89 1213.98 L1881.48 1213.98 L1882.06 1213.98 L1882.65 1213.98 L1883.24 1213.98 L1883.82 1213.98 L1884.41 1213.98 L1885 1213.98 L1885.58 1213.98 L1886.17 1213.98 L1886.76 1213.98 L1887.34 1213.98 L1887.93 1213.98 L1888.51 1213.98 L1889.1 1213.98 L1889.69 1213.98 L1890.27 1213.98 L1890.86 1213.98 L1891.45 1213.98 L1892.03 1213.98 L1892.62 1213.98 L1893.21 1213.98 L1893.79 1213.98 L1894.38 1213.98 L1894.96 1213.98 L1895.55 1213.98 L1896.14 1213.98 L1896.72 1213.98 L1897.31 1213.98 L1897.9 1213.98 L1898.48 1213.98 L1899.07 1213.98 L1899.66 1213.98 L1900.24 1213.98 L1900.83 1213.98 L1901.42 1213.98 L1902 1213.98 L1902.59 1213.98 L1903.17 1213.98 L1903.76 1213.98 L1904.35 1213.98 L1904.93 1213.98 L1905.52 1213.98 L1906.11 1213.98 L1906.69 1213.98 L1907.28 1213.98 L1907.87 1213.98 L1908.45 1213.98 L1909.04 1213.98 L1909.63 1213.98 L1910.21 1213.98 L1910.8 1213.98 L1911.38 1213.98 L1911.97 1213.98 L1912.56 1213.98 L1913.14 1213.98 L1913.73 1213.98 L1914.32 1213.98 L1914.9 1213.98 L1915.49 1213.98 L1916.08 1213.98 L1916.66 1213.98 L1917.25 1213.98 L1917.83 1213.98 L1918.42 1213.98 L1919.01 1213.98 L1919.59 1213.98 L1920.18 1213.98 L1920.77 1213.98 L1921.35 1213.98 L1921.94 1213.98 L1922.53 1213.98 L1923.11 1213.98 L1923.7 1213.98 L1924.29 1213.98 L1924.87 1213.98 L1925.46 1213.98 L1926.04 1213.98 L1926.63 1213.98 L1927.22 1213.98 L1927.8 1213.98 L1928.39 1213.98 L1928.98 1213.98 L1929.56 1213.98 L1930.15 1213.98 L1930.74 1213.98 L1931.32 1213.98 L1931.91 1213.98 L1932.5 1213.98 L1933.08 1213.98 L1933.67 1213.98 L1934.25 1213.98 L1934.84 1213.98 L1935.43 1213.98 L1936.01 1213.98 L1936.6 1213.98 L1937.19 1213.98 L1937.77 1213.98 L1938.36 1213.98 L1938.95 1213.98 L1939.53 1213.98 L1940.12 1213.98 L1940.71 1213.98 L1941.29 1213.98 L1941.88 1213.98 L1942.46 1213.98 L1943.05 1213.98 L1943.64 1213.98 L1944.22 1213.98 L1944.81 1213.98 L1945.4 1213.98 L1945.98 1213.98 L1946.57 1213.98 L1947.16 1213.98 L1947.74 1213.98 L1948.33 1213.98 L1948.91 1213.98 L1949.5 1213.98 L1950.09 1213.98 L1950.67 1213.98 L1951.26 1213.98 L1951.85 1213.98 L1952.43 1213.98 L1953.02 1213.98 L1953.61 1213.98 L1954.19 1213.98 L1954.78 1213.98 L1955.37 1213.98 L1955.95 1213.98 L1956.54 1213.98 L1957.12 1213.98 L1957.71 1213.98 L1958.3 1213.98 L1958.88 1213.98 L1959.47 1213.98 L1960.06 1213.98 L1960.64 1213.98 L1961.23 1213.98 L1961.82 1213.98 L1962.4 1213.98 L1962.99 1213.98 L1963.58 1213.98 L1964.16 1213.98 L1964.75 1213.98 L1965.33 1213.98 L1965.92 1213.98 L1966.51 1213.98 L1967.09 1213.98 L1967.68 1213.98 L1968.27 1213.98 L1968.85 1213.98 L1969.44 1213.98 L1970.03 1213.98 L1970.61 1213.98 L1971.2 1213.98 L1971.78 1213.98 L1972.37 1213.98 L1972.96 1213.98 L1973.54 1213.98 L1974.13 1213.98 L1974.72 1213.98 L1975.3 1213.98 L1975.89 1213.98 L1976.48 1213.98 L1977.06 1213.98 L1977.65 1213.98 L1978.24 1213.98 L1978.82 1213.98 L1979.41 1213.98 L1979.99 1213.98 L1980.58 1213.98 L1981.17 1213.98 L1981.75 1213.98 L1982.34 1213.98 L1982.93 1213.98 L1983.51 1213.98 L1984.1 1213.98 L1984.69 1213.98 L1985.27 1213.98 L1985.86 1213.98 L1986.45 1213.98 L1987.03 1213.98 L1987.62 1213.98 L1988.2 1213.98 L1988.79 1213.98 L1989.38 1213.98 L1989.96 1213.98 L1990.55 1213.98 L1991.14 1213.98 L1991.72 1213.98 L1992.31 1213.98 L1992.9 1213.98 L1993.48 1213.98 L1994.07 1213.98 L1994.65 1213.98 L1995.24 1213.98 L1995.83 1213.98 L1996.41 1213.98 L1997 1213.98 L1997.59 1213.98 L1998.17 1213.98 L1998.76 1213.98 L1999.35 1213.98 L1999.93 1213.98 L2000.52 1213.98 L2001.11 1213.98 L2001.69 1213.98 L2002.28 1213.98 L2002.86 1213.98 L2003.45 1213.98 L2004.04 1213.98 L2004.62 1213.98 L2005.21 1213.98 L2005.8 1213.98 L2006.38 1213.98 L2006.97 1213.98 L2007.56 1213.98 L2008.14 1213.98 L2008.73 1213.98 L2009.32 1213.98 L2009.9 1213.98 L2010.49 1213.98 L2011.07 1213.98 L2011.66 1213.98 L2012.25 1213.98 L2012.83 1213.98 L2013.42 1213.98 L2014.01 1213.98 L2014.59 1213.98 L2015.18 1213.98 L2015.77 1213.98 L2016.35 1213.98 L2016.94 1213.98 L2017.53 1213.98 L2018.11 1213.98 L2018.7 1213.98 L2019.28 1213.98 L2019.87 1213.98 L2020.46 1213.98 L2021.04 1213.98 L2021.63 1213.98 L2022.22 1213.98 L2022.8 1213.98 L2023.39 1213.98 L2023.98 1213.98 L2024.56 1213.98 L2025.15 1213.98 L2025.73 1213.98 L2026.32 1213.98 L2026.91 1213.98 L2027.49 1213.98 L2028.08 1213.98 L2028.67 1213.98 L2029.25 1213.98 L2029.84 1213.98 L2030.43 1213.98 L2031.01 1213.98 L2031.6 1213.98 L2032.19 1213.98 L2032.77 1213.98 L2033.36 1213.98 L2033.94 1213.98 L2034.53 1213.98 L2035.12 1213.98 L2035.7 1213.98 L2036.29 1213.98 L2036.88 1213.98 L2037.46 1213.98 L2038.05 1213.98 L2038.64 1213.98 L2039.22 1213.98 L2039.81 1213.98 L2040.4 1213.98 L2040.98 1213.98 L2041.57 1213.98 L2042.15 1213.98 L2042.74 1213.98 L2043.33 1213.98 L2043.91 1213.98 L2044.5 1213.98 L2045.09 1213.98 L2045.67 1213.98 L2046.26 1213.98 L2046.85 1213.98 L2047.43 1213.98 L2048.02 1213.98 L2048.6 1213.98 L2049.19 1213.98 L2049.78 1213.98 L2050.36 1213.98 L2050.95 1213.98 L2051.54 1213.98 L2052.12 1213.98 L2052.71 1213.98 L2053.3 1213.98 L2053.88 1213.98 L2054.47 1213.98 L2055.06 1213.98 L2055.64 1213.98 L2056.23 1213.98 L2056.81 1213.98 L2057.4 1213.98 L2057.99 1213.98 L2058.57 1213.98 L2059.16 1213.98 L2059.75 1213.98 L2060.33 1213.98 L2060.92 1213.98 L2061.51 1213.98 L2062.09 1213.98 L2062.68 1213.98 L2063.27 1213.98 L2063.85 1213.98 L2064.44 1213.98 L2065.02 1213.98 L2065.61 1213.98 L2066.2 1213.98 L2066.78 1213.98 L2067.37 1213.98 L2067.96 1213.98 L2068.54 1213.98 L2069.13 1213.98 L2069.72 1213.98 L2070.3 1213.98 L2070.89 1213.98 L2071.48 1213.98 L2072.06 1213.98 L2072.65 1213.98 L2073.23 1213.98 L2073.82 1213.98 L2074.41 1213.98 L2074.99 1213.98 L2075.58 1213.98 L2076.17 1213.98 L2076.75 1213.98 L2077.34 1213.98 L2077.93 1213.98 L2078.51 1213.98 L2079.1 1213.98 L2079.68 1213.98 L2080.27 1213.98 L2080.86 1213.98 L2081.44 1213.98 L2082.03 1213.98 L2082.62 1213.98 L2083.2 1213.98 L2083.79 1213.98 L2084.38 1213.98 L2084.96 1213.98 L2085.55 1213.98 L2086.14 1213.98 L2086.72 1213.98 L2087.31 1213.98 L2087.89 1213.98 L2088.48 1213.98 L2089.07 1213.98 L2089.65 1213.98 L2090.24 1213.98 L2090.83 1213.98 L2091.41 1213.98 L2092 1213.98 L2092.59 1213.98 L2093.17 1213.98 L2093.76 1213.98 L2094.35 1213.98 L2094.93 1213.98 L2095.52 1213.98 L2096.1 1213.98 L2096.69 1213.98 L2097.28 1213.98 L2097.86 1213.98 L2098.45 1213.98 L2099.04 1213.98 L2099.62 1213.98 L2100.21 1213.98 L2100.8 1213.98 L2101.38 1213.98 L2101.97 1213.98 L2102.55 1213.98 L2103.14 1213.98 L2103.73 1213.98 L2104.31 1213.98 L2104.9 1213.98 L2105.49 1213.98 L2106.07 1213.98 L2106.66 1213.98 L2107.25 1213.98 L2107.83 1213.98 L2108.42 1213.98 L2109.01 1213.98 L2109.59 1213.98 L2110.18 1213.98 L2110.76 1213.98 L2111.35 1213.98 L2111.94 1213.98 L2112.52 1213.98 L2113.11 1213.98 L2113.7 1213.98 L2114.28 1213.98 L2114.87 1213.98 L2115.46 1213.98 L2116.04 1213.98 L2116.63 1213.98 L2117.22 1213.98 L2117.8 1213.98 L2118.39 1213.98 L2118.97 1213.98 L2119.56 1213.98 L2120.15 1213.98 L2120.73 1213.98 L2121.32 1213.98 L2121.91 1213.98 L2122.49 1213.98 L2123.08 1213.98 L2123.67 1213.98 L2124.25 1213.98 L2124.84 1213.98 L2125.42 1213.98 L2126.01 1213.98 L2126.6 1213.98 L2127.18 1213.98 L2127.77 1213.98 L2128.36 1213.98 L2128.94 1213.98 L2129.53 1213.98 L2130.12 1213.98 L2130.7 1213.98 L2131.29 1213.98 L2131.88 1213.98 L2132.46 1213.98 L2133.05 1213.98 L2133.63 1213.98 L2134.22 1213.98 L2134.81 1213.98 L2135.39 1213.98 L2135.98 1213.98 L2136.57 1213.98 L2137.15 1213.98 L2137.74 1213.98 L2138.33 1213.98 L2138.91 1213.98 L2139.5 1213.98 L2140.09 1213.98 L2140.67 1213.98 L2141.26 1213.98 L2141.84 1213.98 L2142.43 1213.98 L2143.02 1213.98 L2143.6 1213.98 L2144.19 1213.98 L2144.78 1213.98 L2145.36 1213.98 L2145.95 1213.98 L2146.54 1213.98 L2147.12 1213.98 L2147.71 1213.98 L2148.3 1213.98 L2148.88 1213.98 L2149.47 1213.98 L2150.05 1213.98 L2150.64 1213.98 L2151.23 1213.98 L2151.81 1213.98 L2152.4 1213.98 L2152.99 1213.98 L2153.57 1213.98 L2154.16 1213.98 L2154.75 1213.98 L2155.33 1213.98 L2155.92 1213.98 L2156.5 1213.98 L2157.09 1213.98 L2157.68 1213.98 L2158.26 1213.98 L2158.26 1213.81 L2157.68 1213.81 L2157.09 1213.81 L2156.5 1213.81 L2155.92 1213.81 L2155.33 1213.81 L2154.75 1213.81 L2154.16 1213.81 L2153.57 1213.81 L2152.99 1213.81 L2152.4 1213.81 L2151.81 1213.81 L2151.23 1213.81 L2150.64 1213.81 L2150.05 1213.81 L2149.47 1213.81 L2148.88 1213.81 L2148.3 1213.81 L2147.71 1213.81 L2147.12 1213.81 L2146.54 1213.81 L2145.95 1213.81 L2145.36 1213.81 L2144.78 1213.81 L2144.19 1213.81 L2143.6 1213.81 L2143.02 1213.81 L2142.43 1213.81 L2141.84 1213.81 L2141.26 1213.81 L2140.67 1213.81 L2140.09 1213.81 L2139.5 1213.81 L2138.91 1213.81 L2138.33 1213.81 L2137.74 1213.81 L2137.15 1213.81 L2136.57 1213.81 L2135.98 1213.81 L2135.39 1213.81 L2134.81 1213.81 L2134.22 1213.81 L2133.63 1213.81 L2133.05 1213.81 L2132.46 1213.81 L2131.88 1213.81 L2131.29 1213.81 L2130.7 1213.81 L2130.12 1213.81 L2129.53 1213.81 L2128.94 1213.81 L2128.36 1213.81 L2127.77 1213.81 L2127.18 1213.81 L2126.6 1213.81 L2126.01 1213.81 L2125.42 1213.81 L2124.84 1213.81 L2124.25 1213.81 L2123.67 1213.81 L2123.08 1213.81 L2122.49 1213.81 L2121.91 1213.81 L2121.32 1213.81 L2120.73 1213.81 L2120.15 1213.81 L2119.56 1213.81 L2118.97 1213.81 L2118.39 1213.81 L2117.8 1213.81 L2117.22 1213.81 L2116.63 1213.81 L2116.04 1213.81 L2115.46 1213.81 L2114.87 1213.81 L2114.28 1213.81 L2113.7 1213.81 L2113.11 1213.81 L2112.52 1213.81 L2111.94 1213.81 L2111.35 1213.81 L2110.76 1213.81 L2110.18 1213.81 L2109.59 1213.81 L2109.01 1213.81 L2108.42 1213.81 L2107.83 1213.81 L2107.25 1213.81 L2106.66 1213.81 L2106.07 1213.81 L2105.49 1213.81 L2104.9 1213.81 L2104.31 1213.81 L2103.73 1213.81 L2103.14 1213.81 L2102.55 1213.81 L2101.97 1213.81 L2101.38 1213.81 L2100.8 1213.81 L2100.21 1213.81 L2099.62 1213.81 L2099.04 1213.81 L2098.45 1213.81 L2097.86 1213.81 L2097.28 1213.81 L2096.69 1213.81 L2096.1 1213.81 L2095.52 1213.81 L2094.93 1213.81 L2094.35 1213.81 L2093.76 1213.81 L2093.17 1213.81 L2092.59 1213.81 L2092 1213.81 L2091.41 1213.81 L2090.83 1213.81 L2090.24 1213.81 L2089.65 1213.81 L2089.07 1213.81 L2088.48 1213.81 L2087.89 1213.81 L2087.31 1213.81 L2086.72 1213.81 L2086.14 1213.81 L2085.55 1213.81 L2084.96 1213.81 L2084.38 1213.81 L2083.79 1213.81 L2083.2 1213.81 L2082.62 1213.81 L2082.03 1213.81 L2081.44 1213.81 L2080.86 1213.81 L2080.27 1213.81 L2079.68 1213.81 L2079.1 1213.81 L2078.51 1213.81 L2077.93 1213.81 L2077.34 1213.81 L2076.75 1213.81 L2076.17 1213.81 L2075.58 1213.81 L2074.99 1213.81 L2074.41 1213.81 L2073.82 1213.81 L2073.23 1213.81 L2072.65 1213.81 L2072.06 1213.81 L2071.48 1213.81 L2070.89 1213.81 L2070.3 1213.81 L2069.72 1213.81 L2069.13 1213.81 L2068.54 1213.81 L2067.96 1213.81 L2067.37 1213.81 L2066.78 1213.81 L2066.2 1213.81 L2065.61 1213.81 L2065.02 1213.81 L2064.44 1213.81 L2063.85 1213.81 L2063.27 1213.81 L2062.68 1213.81 L2062.09 1213.81 L2061.51 1213.81 L2060.92 1213.81 L2060.33 1213.81 L2059.75 1213.81 L2059.16 1213.81 L2058.57 1213.81 L2057.99 1213.81 L2057.4 1213.81 L2056.81 1213.81 L2056.23 1213.81 L2055.64 1213.81 L2055.06 1213.81 L2054.47 1213.81 L2053.88 1213.81 L2053.3 1213.81 L2052.71 1213.81 L2052.12 1213.81 L2051.54 1213.81 L2050.95 1213.81 L2050.36 1213.81 L2049.78 1213.81 L2049.19 1213.81 L2048.6 1213.81 L2048.02 1213.81 L2047.43 1213.81 L2046.85 1213.81 L2046.26 1213.81 L2045.67 1213.81 L2045.09 1213.81 L2044.5 1213.81 L2043.91 1213.81 L2043.33 1213.81 L2042.74 1213.81 L2042.15 1213.81 L2041.57 1213.81 L2040.98 1213.81 L2040.4 1213.81 L2039.81 1213.81 L2039.22 1213.81 L2038.64 1213.81 L2038.05 1213.81 L2037.46 1213.81 L2036.88 1213.81 L2036.29 1213.81 L2035.7 1213.81 L2035.12 1213.81 L2034.53 1213.81 L2033.94 1213.81 L2033.36 1213.81 L2032.77 1213.81 L2032.19 1213.81 L2031.6 1213.81 L2031.01 1213.81 L2030.43 1213.81 L2029.84 1213.81 L2029.25 1213.81 L2028.67 1213.81 L2028.08 1213.81 L2027.49 1213.81 L2026.91 1213.81 L2026.32 1213.81 L2025.73 1213.81 L2025.15 1213.81 L2024.56 1213.81 L2023.98 1213.81 L2023.39 1213.81 L2022.8 1213.81 L2022.22 1213.81 L2021.63 1213.81 L2021.04 1213.81 L2020.46 1213.81 L2019.87 1213.81 L2019.28 1213.81 L2018.7 1213.81 L2018.11 1213.81 L2017.53 1213.81 L2016.94 1213.81 L2016.35 1213.81 L2015.77 1213.81 L2015.18 1213.81 L2014.59 1213.81 L2014.01 1213.81 L2013.42 1213.81 L2012.83 1213.81 L2012.25 1213.81 L2011.66 1213.81 L2011.07 1213.81 L2010.49 1213.81 L2009.9 1213.81 L2009.32 1213.81 L2008.73 1213.81 L2008.14 1213.81 L2007.56 1213.81 L2006.97 1213.81 L2006.38 1213.81 L2005.8 1213.81 L2005.21 1213.81 L2004.62 1213.81 L2004.04 1213.81 L2003.45 1213.81 L2002.86 1213.81 L2002.28 1213.81 L2001.69 1213.81 L2001.11 1213.81 L2000.52 1213.81 L1999.93 1213.81 L1999.35 1213.81 L1998.76 1213.81 L1998.17 1213.81 L1997.59 1213.81 L1997 1213.81 L1996.41 1213.81 L1995.83 1213.81 L1995.24 1213.81 L1994.65 1213.81 L1994.07 1213.81 L1993.48 1213.81 L1992.9 1213.81 L1992.31 1213.81 L1991.72 1213.81 L1991.14 1213.81 L1990.55 1213.81 L1989.96 1213.81 L1989.38 1213.81 L1988.79 1213.81 L1988.2 1213.81 L1987.62 1213.81 L1987.03 1213.81 L1986.45 1213.81 L1985.86 1213.81 L1985.27 1213.81 L1984.69 1213.81 L1984.1 1213.81 L1983.51 1213.81 L1982.93 1213.81 L1982.34 1213.81 L1981.75 1213.81 L1981.17 1213.81 L1980.58 1213.81 L1979.99 1213.81 L1979.41 1213.81 L1978.82 1213.81 L1978.24 1213.81 L1977.65 1213.81 L1977.06 1213.81 L1976.48 1213.81 L1975.89 1213.81 L1975.3 1213.81 L1974.72 1213.81 L1974.13 1213.81 L1973.54 1213.81 L1972.96 1213.81 L1972.37 1213.81 L1971.78 1213.81 L1971.2 1213.81 L1970.61 1213.81 L1970.03 1213.81 L1969.44 1213.81 L1968.85 1213.81 L1968.27 1213.81 L1967.68 1213.81 L1967.09 1213.81 L1966.51 1213.81 L1965.92 1213.81 L1965.33 1213.81 L1964.75 1213.81 L1964.16 1213.81 L1963.58 1213.81 L1962.99 1213.81 L1962.4 1213.81 L1961.82 1213.81 L1961.23 1213.81 L1960.64 1213.81 L1960.06 1213.81 L1959.47 1213.81 L1958.88 1213.81 L1958.3 1213.81 L1957.71 1213.81 L1957.12 1213.81 L1956.54 1213.81 L1955.95 1213.81 L1955.37 1213.81 L1954.78 1213.81 L1954.19 1213.81 L1953.61 1213.81 L1953.02 1213.81 L1952.43 1213.81 L1951.85 1213.81 L1951.26 1213.81 L1950.67 1213.81 L1950.09 1213.81 L1949.5 1213.81 L1948.91 1213.81 L1948.33 1213.81 L1947.74 1213.81 L1947.16 1213.81 L1946.57 1213.81 L1945.98 1213.81 L1945.4 1213.81 L1944.81 1213.81 L1944.22 1213.81 L1943.64 1213.81 L1943.05 1213.81 L1942.46 1213.81 L1941.88 1213.81 L1941.29 1213.81 L1940.71 1213.81 L1940.12 1213.81 L1939.53 1213.81 L1938.95 1213.81 L1938.36 1213.81 L1937.77 1213.81 L1937.19 1213.81 L1936.6 1213.81 L1936.01 1213.81 L1935.43 1213.81 L1934.84 1213.81 L1934.25 1213.81 L1933.67 1213.81 L1933.08 1213.81 L1932.5 1213.81 L1931.91 1213.81 L1931.32 1213.81 L1930.74 1213.81 L1930.15 1213.81 L1929.56 1213.81 L1928.98 1213.81 L1928.39 1213.81 L1927.8 1213.81 L1927.22 1213.81 L1926.63 1213.81 L1926.04 1213.81 L1925.46 1213.81 L1924.87 1213.81 L1924.29 1213.81 L1923.7 1213.81 L1923.11 1213.81 L1922.53 1213.81 L1921.94 1213.81 L1921.35 1213.81 L1920.77 1213.81 L1920.18 1213.81 L1919.59 1213.81 L1919.01 1213.81 L1918.42 1213.81 L1917.83 1213.81 L1917.25 1213.81 L1916.66 1213.81 L1916.08 1213.81 L1915.49 1213.81 L1914.9 1213.81 L1914.32 1213.81 L1913.73 1213.81 L1913.14 1213.81 L1912.56 1213.81 L1911.97 1213.81 L1911.38 1213.81 L1910.8 1213.81 L1910.21 1213.81 L1909.63 1213.81 L1909.04 1213.81 L1908.45 1213.81 L1907.87 1213.81 L1907.28 1213.81 L1906.69 1213.81 L1906.11 1213.81 L1905.52 1213.81 L1904.93 1213.81 L1904.35 1213.81 L1903.76 1213.81 L1903.17 1213.81 L1902.59 1213.81 L1902 1213.81 L1901.42 1213.81 L1900.83 1213.81 L1900.24 1213.81 L1899.66 1213.81 L1899.07 1213.81 L1898.48 1213.81 L1897.9 1213.81 L1897.31 1213.81 L1896.72 1213.81 L1896.14 1213.81 L1895.55 1213.81 L1894.96 1213.81 L1894.38 1213.81 L1893.79 1213.81 L1893.21 1213.81 L1892.62 1213.81 L1892.03 1213.81 L1891.45 1213.81 L1890.86 1213.81 L1890.27 1213.81 L1889.69 1213.81 L1889.1 1213.81 L1888.51 1213.81 L1887.93 1213.81 L1887.34 1213.81 L1886.76 1213.81 L1886.17 1213.81 L1885.58 1213.81 L1885 1213.81 L1884.41 1213.81 L1883.82 1213.81 L1883.24 1213.81 L1882.65 1213.81 L1882.06 1213.81 L1881.48 1213.81 L1880.89 1213.81 L1880.3 1213.81 L1879.72 1213.81 L1879.13 1213.81 L1878.55 1213.81 L1877.96 1213.81 L1877.37 1213.81 L1876.79 1213.81 L1876.2 1213.81 L1875.61 1213.81 L1875.03 1213.81 L1874.44 1213.81 L1873.85 1213.81 L1873.27 1213.81 L1872.68 1213.81 L1872.09 1213.81 L1871.51 1213.81 L1870.92 1213.81 L1870.34 1213.81 L1869.75 1213.81 L1869.16 1213.81 L1868.58 1213.81 L1867.99 1213.81 L1867.4 1213.81 L1866.82 1213.81 L1866.23 1213.81 L1865.64 1213.81 L1865.06 1213.81 L1864.47 1213.81 L1863.88 1213.81 L1863.3 1213.81 L1862.71 1213.81 L1862.13 1213.81 L1861.54 1213.81 L1860.95 1213.81 L1860.37 1213.81 L1859.78 1213.81 L1859.19 1213.81 L1858.61 1213.81 L1858.02 1213.81 L1857.43 1213.81 L1856.85 1213.81 L1856.26 1213.81 L1855.68 1213.81 L1855.09 1213.81 L1854.5 1213.81 L1853.92 1213.81 L1853.33 1213.81 L1852.74 1213.81 L1852.16 1213.81 L1851.57 1213.81 L1850.98 1213.81 L1850.4 1213.81 L1849.81 1213.81 L1849.22 1213.81 L1848.64 1213.81 L1848.05 1213.81 L1847.47 1213.81 L1846.88 1213.81 L1846.29 1213.81 L1845.71 1213.81 L1845.12 1213.81 L1844.53 1213.81 L1843.95 1213.81 L1843.36 1213.81 L1842.77 1213.81 L1842.19 1213.81 L1841.6 1213.81 L1841.01 1213.81 L1840.43 1213.81 L1839.84 1213.81 L1839.26 1213.81 L1838.67 1213.81 L1838.08 1213.81 L1837.5 1213.81 L1836.91 1213.81 L1836.32 1213.81 L1835.74 1213.81 L1835.15 1213.81 L1834.56 1213.81 L1833.98 1213.81 L1833.39 1213.81 L1832.81 1213.81 L1832.22 1213.81 L1831.63 1213.81 L1831.05 1213.81 L1830.46 1213.81 L1829.87 1213.81 L1829.29 1213.81 L1828.7 1213.81 L1828.11 1213.81 L1827.53 1213.81 L1826.94 1213.81 L1826.35 1213.81 L1825.77 1213.81 L1825.18 1213.81 L1824.6 1213.81 L1824.01 1213.81 L1823.42 1213.81 L1822.84 1213.81 L1822.25 1213.81 L1821.66 1213.81 L1821.08 1213.81 L1820.49 1213.81 L1819.9 1213.81 L1819.32 1213.81 L1818.73 1213.81 L1818.14 1213.81 L1817.56 1213.81 L1816.97 1213.81 L1816.39 1213.81 L1815.8 1213.81 L1815.21 1213.81 L1814.63 1213.81 L1814.04 1213.81 L1813.45 1213.81 L1812.87 1213.81 L1812.28 1213.81 L1811.69 1213.81 L1811.11 1213.81 L1810.52 1213.81 L1809.94 1213.81 L1809.35 1213.81 L1808.76 1213.81 L1808.18 1213.81 L1807.59 1213.81 L1807 1213.81 L1806.42 1213.81 L1805.83 1213.81 L1805.24 1213.81 L1804.66 1213.81 L1804.07 1213.81 L1803.48 1213.81 L1802.9 1213.81 L1802.31 1213.81 L1801.73 1213.81 L1801.14 1213.81 L1800.55 1213.81 L1799.97 1213.81 L1799.38 1213.81 L1798.79 1213.81 L1798.21 1213.81 L1797.62 1213.81 L1797.03 1213.81 L1796.45 1213.81 L1795.86 1213.81 L1795.27 1213.81 L1794.69 1213.81 L1794.1 1213.81 L1793.52 1213.81 L1792.93 1213.81 L1792.34 1213.81 L1791.76 1213.81 L1791.17 1213.81 L1790.58 1213.81 L1790 1213.81 L1789.41 1213.81 L1788.82 1213.81 L1788.24 1213.81 L1787.65 1213.81 L1787.06 1213.81 L1786.48 1213.81 L1785.89 1213.81 L1785.31 1213.81 L1784.72 1213.81 L1784.13 1213.81 L1783.55 1213.81 L1782.96 1213.81 L1782.37 1213.81 L1781.79 1213.81 L1781.2 1213.81 L1780.61 1213.81 L1780.03 1213.81 L1779.44 1213.81 L1778.86 1213.81 L1778.27 1213.81 L1777.68 1213.81 L1777.1 1213.81 L1776.51 1213.81 L1775.92 1213.81 L1775.34 1213.81 L1774.75 1213.81 L1774.16 1213.81 L1773.58 1213.81 L1772.99 1213.81 L1772.4 1213.81 L1771.82 1213.81 L1771.23 1213.81 L1770.65 1213.81 L1770.06 1213.81 L1769.47 1213.81 L1768.89 1213.81 L1768.3 1213.81 L1767.71 1213.81 L1767.13 1213.81 L1766.54 1213.81 L1765.95 1213.81 L1765.37 1213.81 L1764.78 1213.81 L1764.19 1213.81 L1763.61 1213.81 L1763.02 1213.81 L1762.44 1213.81 L1761.85 1213.81 L1761.26 1213.81 L1760.68 1213.81 L1760.09 1213.81 L1759.5 1213.81 L1758.92 1213.81 L1758.33 1213.81 L1757.74 1213.81 L1757.16 1213.81 L1756.57 1213.81 L1755.99 1213.81 L1755.4 1213.81 L1754.81 1213.81 L1754.23 1213.81 L1753.64 1213.81 L1753.05 1213.81 L1752.47 1213.81 L1751.88 1213.81 L1751.29 1213.81 L1750.71 1213.81 L1750.12 1213.81 L1749.53 1213.81 L1748.95 1213.81 L1748.36 1213.81 L1747.78 1213.81 L1747.19 1213.81 L1746.6 1213.81 L1746.02 1213.81 L1745.43 1213.81 L1744.84 1213.81 L1744.26 1213.81 L1743.67 1213.81 L1743.08 1213.81 L1742.5 1213.81 L1741.91 1213.81 L1741.32 1213.81 L1740.74 1213.81 L1740.15 1213.81 L1739.57 1213.81 L1738.98 1213.81 L1738.39 1213.81 L1737.81 1213.81 L1737.22 1213.81 L1736.63 1213.81 L1736.05 1213.81 L1735.46 1213.81 L1734.87 1213.81 L1734.29 1213.81 L1733.7 1213.81 L1733.11 1213.81 L1732.53 1213.81 L1731.94 1213.81 L1731.36 1213.81 L1730.77 1213.81 L1730.18 1213.81 L1729.6 1213.81 L1729.01 1213.81 L1728.42 1213.81 L1727.84 1213.81 L1727.25 1213.81 L1726.66 1213.81 L1726.08 1213.81 L1725.49 1213.81 L1724.91 1213.81 L1724.32 1213.81 L1723.73 1213.81 L1723.15 1213.81 L1722.56 1213.81 L1721.97 1213.81 L1721.39 1213.81 L1720.8 1213.81 L1720.21 1213.81 L1719.63 1213.81 L1719.04 1213.81 L1718.45 1213.81 L1717.87 1213.81 L1717.28 1213.81 L1716.7 1213.81 L1716.11 1213.81 L1715.52 1213.81 L1714.94 1213.81 L1714.35 1213.81 L1713.76 1213.81 L1713.18 1213.81 L1712.59 1213.81 L1712 1213.81 L1711.42 1213.81 L1710.83 1213.81 L1710.24 1213.81 L1709.66 1213.81 L1709.07 1213.81 L1708.49 1213.81 L1707.9 1213.81 L1707.31 1213.81 L1706.73 1213.81 L1706.14 1213.81 L1705.55 1213.81 L1704.97 1213.81 L1704.38 1213.81 L1703.79 1213.81 L1703.21 1213.81 L1702.62 1213.81 L1702.04 1213.81 L1701.45 1213.81 L1700.86 1213.81 L1700.28 1213.81 L1699.69 1213.81 L1699.1 1213.81 L1698.52 1213.81 L1697.93 1213.81 L1697.34 1213.81 L1696.76 1213.81 L1696.17 1213.81 L1695.58 1213.81 L1695 1213.81 L1694.41 1213.81 L1693.83 1213.81 L1693.24 1213.81 L1692.65 1213.81 L1692.07 1213.81 L1691.48 1213.81 L1690.89 1213.81 L1690.31 1213.81 L1689.72 1213.81 L1689.13 1213.81 L1688.55 1213.81 L1687.96 1213.81 L1687.37 1213.81 L1686.79 1213.81 L1686.2 1213.81 L1685.62 1213.81 L1685.03 1213.81 L1684.44 1213.81 L1683.86 1213.81 L1683.27 1213.81 L1682.68 1213.81 L1682.1 1213.81 L1681.51 1213.81 L1680.92 1213.81 L1680.34 1213.81 L1679.75 1213.81 L1679.17 1213.81 L1678.58 1213.81 L1677.99 1213.81 L1677.41 1213.81 L1676.82 1213.81 L1676.23 1213.81 L1675.65 1213.81 L1675.06 1213.81 L1674.47 1213.81 L1673.89 1213.81 L1673.3 1213.81 L1672.71 1213.81 L1672.13 1213.81 L1671.54 1213.81 L1670.96 1213.81 L1670.37 1213.81 L1669.78 1213.81 L1669.2 1213.81 L1668.61 1213.81 L1668.02 1213.81 L1667.44 1213.81 L1666.85 1213.81 L1666.26 1213.81 L1665.68 1213.81 L1665.09 1213.81 L1664.5 1213.81 L1663.92 1213.81 L1663.33 1213.81 L1662.75 1213.81 L1662.16 1213.81 L1661.57 1213.81 L1660.99 1213.81 L1660.4 1213.81 L1659.81 1213.81 L1659.23 1213.81 L1658.64 1213.81 L1658.05 1213.81 L1657.47 1213.81 L1656.88 1213.81 L1656.29 1213.81 L1655.71 1213.81 L1655.12 1213.81 L1654.54 1213.81 L1653.95 1213.81 L1653.36 1213.81 L1652.78 1213.81 L1652.19 1213.81 L1651.6 1213.81 L1651.02 1213.81 L1650.43 1213.81 L1649.84 1213.81 L1649.26 1213.81 L1648.67 1213.81 L1648.09 1213.81 L1647.5 1213.81 L1646.91 1213.81 L1646.33 1213.81 L1645.74 1213.81 L1645.15 1213.81 L1644.57 1213.81 L1643.98 1213.81 L1643.39 1213.81 L1642.81 1213.81 L1642.22 1213.81 L1641.63 1213.81 L1641.05 1213.81 L1640.46 1213.81 L1639.88 1213.81 L1639.29 1213.81 L1638.7 1213.81 L1638.12 1213.81 L1637.53 1213.81 L1636.94 1213.81 L1636.36 1213.81 L1635.77 1213.81 L1635.18 1213.81 L1634.6 1213.81 L1634.01 1213.81 L1633.42 1213.81 L1632.84 1213.81 L1632.25 1213.81 L1631.67 1213.81 L1631.08 1213.81 L1630.49 1213.81 L1629.91 1213.81 L1629.32 1213.81 L1628.73 1213.81 L1628.15 1213.81 L1627.56 1213.81 L1626.97 1213.81 L1626.39 1213.81 L1625.8 1213.81 L1625.22 1213.81 L1624.63 1213.81 L1624.04 1213.81 L1623.46 1213.81 L1622.87 1213.81 L1622.28 1213.81 L1621.7 1213.81 L1621.11 1213.81 L1620.52 1213.81 L1619.94 1213.81 L1619.35 1213.81 L1618.76 1213.81 L1618.18 1213.81 L1617.59 1213.81 L1617.01 1213.81 L1616.42 1213.81 L1615.83 1213.81 L1615.25 1213.81 L1614.66 1213.81 L1614.07 1213.81 L1613.49 1213.81 L1612.9 1213.81 L1612.31 1213.81 L1611.73 1213.81 L1611.14 1213.81 L1610.55 1213.81 L1609.97 1213.81 L1609.38 1213.81 L1608.8 1213.81 L1608.21 1213.81 L1607.62 1213.81 L1607.04 1213.81 L1606.45 1213.81 L1605.86 1213.81 L1605.28 1213.81 L1604.69 1213.81 L1604.1 1213.81 L1603.52 1213.81 L1602.93 1213.81 L1602.34 1213.81 L1601.76 1213.81 L1601.17 1213.81 L1600.59 1213.81 L1600 1213.81 L1599.41 1213.81 L1598.83 1213.81 L1598.24 1213.81 L1597.65 1213.81 L1597.07 1213.81 L1596.48 1213.81 L1595.89 1213.81 L1595.31 1213.81 L1594.72 1213.81 L1594.14 1213.81 L1593.55 1213.81 L1592.96 1213.81 L1592.38 1213.81 L1591.79 1213.81 L1591.2 1213.81 L1590.62 1213.81 L1590.03 1213.81 L1589.44 1213.81 L1588.86 1213.81 L1588.27 1213.81 L1587.68 1213.81 L1587.1 1213.81 L1586.51 1213.81 L1585.93 1213.81 L1585.34 1213.81 L1584.75 1213.81 L1584.17 1213.81 L1583.58 1213.81 L1582.99 1213.81 L1582.41 1213.81 L1581.82 1213.81 L1581.23 1213.81 L1580.65 1213.81 L1580.06 1213.81 L1579.47 1213.81 L1578.89 1213.81 L1578.3 1213.81 L1577.72 1213.81 L1577.13 1213.81 L1576.54 1213.81 L1575.96 1213.81 L1575.37 1213.81 L1574.78 1213.81 L1574.2 1213.81 L1573.61 1213.81 L1573.02 1213.81 L1572.44 1213.81 L1571.85 1213.81 L1571.27 1213.81 L1570.68 1213.81 L1570.09 1213.81 L1569.51 1213.81 L1568.92 1213.81 L1568.33 1213.81 L1567.75 1213.81 L1567.16 1213.81 L1566.57 1213.81 L1565.99 1213.81 L1565.4 1213.81 L1564.81 1213.81 L1564.23 1213.81 L1563.64 1213.81 L1563.06 1213.81 L1562.47 1213.81 L1561.88 1213.81 L1561.3 1213.81 L1560.71 1213.81 L1560.12 1213.81 L1559.54 1213.81 L1558.95 1213.81 L1558.36 1213.81 L1557.78 1213.81 L1557.19 1213.81 L1556.6 1213.81 L1556.02 1213.81 L1555.43 1213.81 L1554.85 1213.81 L1554.26 1213.81 L1553.67 1213.81 L1553.09 1213.81 L1552.5 1213.81 L1551.91 1213.81 L1551.33 1213.81 L1550.74 1213.81 L1550.15 1213.81 L1549.57 1213.81 L1548.98 1213.81 L1548.4 1213.81 L1547.81 1213.81 L1547.22 1213.81 L1546.64 1213.81 L1546.05 1213.81 L1545.46 1213.81 L1544.88 1213.81 L1544.29 1213.81 L1543.7 1213.81 L1543.12 1213.81 L1542.53 1213.81 L1541.94 1213.81 L1541.36 1213.81 L1540.77 1213.81 L1540.19 1213.81 L1539.6 1213.81 L1539.01 1213.81 L1538.43 1213.81 L1537.84 1213.81 L1537.25 1213.81 L1536.67 1213.81 L1536.08 1213.81 L1535.49 1213.81 L1534.91 1213.81 L1534.32 1213.81 L1533.73 1213.81 L1533.15 1213.81 L1532.56 1213.81 L1531.98 1213.81 L1531.39 1213.81 L1530.8 1213.81 L1530.22 1213.81 L1529.63 1213.81 L1529.04 1213.81 L1528.46 1213.81 L1527.87 1213.81 L1527.28 1213.81 L1526.7 1213.81 L1526.11 1213.81 L1525.52 1213.81 L1524.94 1213.81 L1524.35 1213.81 L1523.77 1213.81 L1523.18 1213.81 L1522.59 1213.81 L1522.01 1213.81 L1521.42 1213.81 L1520.83 1213.81 L1520.25 1213.81 L1519.66 1213.81 L1519.07 1213.81 L1518.49 1213.81 L1517.9 1213.81 L1517.32 1213.81 L1516.73 1213.81 L1516.14 1213.81 L1515.56 1213.81 L1514.97 1213.81 L1514.38 1213.81 L1513.8 1213.81 L1513.21 1213.81 L1512.62 1213.81 L1512.04 1213.81 L1511.45 1213.81 L1510.86 1213.81 L1510.28 1213.81 L1509.69 1213.81 L1509.11 1213.81 L1508.52 1213.81 L1507.93 1213.81 L1507.35 1213.81 L1506.76 1213.81 L1506.17 1213.81 L1505.59 1213.81 L1505 1213.81 L1504.41 1213.81 L1503.83 1213.81 L1503.24 1213.81 L1502.65 1213.81 L1502.07 1213.81 L1501.48 1213.81 L1500.9 1213.81 L1500.31 1213.81 L1499.72 1213.81 L1499.14 1213.81 L1498.55 1213.81 L1497.96 1213.81 L1497.38 1213.81 L1496.79 1213.81 L1496.2 1213.81 L1495.62 1213.81 L1495.03 1213.81 L1494.45 1213.81 L1493.86 1213.81 L1493.27 1213.81 L1492.69 1213.81 L1492.1 1213.81 L1491.51 1213.81 L1490.93 1213.81 L1490.34 1213.81 L1489.75 1213.81 L1489.17 1213.81 L1488.58 1213.81 L1487.99 1213.81 L1487.41 1213.81 L1486.82 1213.81 L1486.24 1213.81 L1485.65 1213.81 L1485.06 1213.81 L1484.48 1213.81 L1483.89 1213.81 L1483.3 1213.81 L1482.72 1213.81 L1482.13 1213.81 L1481.54 1213.81 L1480.96 1213.81 L1480.37 1213.81 L1479.78 1213.81 L1479.2 1213.81 L1478.61 1213.81 L1478.03 1213.81 L1477.44 1213.81 L1476.85 1213.81 L1476.27 1213.81 L1475.68 1213.81 L1475.09 1213.81 L1474.51 1213.81 L1473.92 1213.81 L1473.33 1213.81 L1472.75 1213.81 L1472.16 1213.81 L1471.57 1213.81 L1470.99 1213.81 L1470.4 1213.81 L1469.82 1213.81 L1469.23 1213.81 L1468.64 1213.81 L1468.06 1213.81 L1467.47 1213.81 L1466.88 1213.81 L1466.3 1213.81 L1465.71 1213.81 L1465.12 1213.81 L1464.54 1213.81 L1463.95 1213.81 L1463.37 1213.81 L1462.78 1213.81 L1462.19 1213.81 L1461.61 1213.81 L1461.02 1213.81 L1460.43 1213.81 L1459.85 1213.81 L1459.26 1213.81 L1458.67 1213.81 L1458.09 1213.81 L1457.5 1213.81 L1456.91 1213.81 L1456.33 1213.81 L1455.74 1213.81 L1455.16 1213.81 L1454.57 1213.81 L1453.98 1213.81 L1453.4 1213.81 L1452.81 1213.81 L1452.22 1213.81 L1451.64 1213.81 L1451.05 1213.81 L1450.46 1213.81 L1449.88 1213.81 L1449.29 1213.81 L1448.7 1213.81 L1448.12 1213.81 L1447.53 1213.81 L1446.95 1213.81 L1446.36 1213.81 L1445.77 1213.81 L1445.19 1213.81 L1444.6 1213.81 L1444.01 1213.81 L1443.43 1213.81 L1442.84 1213.81 L1442.25 1213.81 L1441.67 1213.81 L1441.08 1213.81 L1440.5 1213.81 L1439.91 1213.81 L1439.32 1213.81 L1438.74 1213.81 L1438.15 1213.81 L1437.56 1213.81 L1436.98 1213.81 L1436.39 1213.81 L1435.8 1213.81 L1435.22 1213.81 L1434.63 1213.81 L1434.04 1213.81 L1433.46 1213.81 L1432.87 1213.81 L1432.29 1213.81 L1431.7 1213.81 L1431.11 1213.81 L1430.53 1213.81 L1429.94 1213.81 L1429.35 1213.81 L1428.77 1213.81 L1428.18 1213.81 L1427.59 1213.81 L1427.01 1213.81 L1426.42 1213.81 L1425.83 1213.81 L1425.25 1213.81 L1424.66 1213.81 L1424.08 1213.81 L1423.49 1213.81 L1422.9 1213.81 L1422.32 1213.81 L1421.73 1213.81 L1421.14 1213.81 L1420.56 1213.81 L1419.97 1213.81 L1419.38 1213.81 L1418.8 1213.81 L1418.21 1213.81 L1417.63 1213.81 L1417.04 1213.81 L1416.45 1213.81 L1415.87 1213.81 L1415.28 1213.81 L1414.69 1213.81 L1414.11 1213.81 L1413.52 1213.81 L1412.93 1213.81 L1412.35 1213.81 L1411.76 1213.81 L1411.17 1213.81 L1410.59 1213.81 L1410 1213.81 L1409.42 1213.81 L1408.83 1213.81 L1408.24 1213.81 L1407.66 1213.81 L1407.07 1213.81 L1406.48 1213.81 L1405.9 1213.81 L1405.31 1213.81 L1404.72 1213.81 L1404.14 1213.81 L1403.55 1213.81 L1402.96 1213.81 L1402.38 1213.81 L1401.79 1213.81 L1401.21 1213.81 L1400.62 1213.81 L1400.03 1213.81 L1399.45 1213.81 L1398.86 1213.81 L1398.27 1213.81 L1397.69 1213.81 L1397.1 1213.81 L1396.51 1213.81 L1395.93 1213.81 L1395.34 1213.81 L1394.75 1213.81 L1394.17 1213.81 L1393.58 1213.81 L1393 1213.81 L1392.41 1213.81 L1391.82 1213.81 L1391.24 1213.81 L1390.65 1213.81 L1390.06 1213.81 L1389.48 1213.81 L1388.89 1213.81 L1388.3 1213.81 L1387.72 1213.81 L1387.13 1213.81 L1386.55 1213.81 L1385.96 1213.81 L1385.37 1213.81 L1384.79 1213.81 L1384.2 1213.81 L1383.61 1213.81 L1383.03 1213.81 L1382.44 1213.81 L1381.85 1213.81 L1381.27 1213.81 L1380.68 1213.81 L1380.09 1213.81 L1379.51 1213.81 L1378.92 1213.81 L1378.34 1213.81 L1377.75 1213.81 L1377.16 1213.81 L1376.58 1213.81 L1375.99 1213.81 L1375.4 1213.81 L1374.82 1213.81 L1374.23 1213.81 L1373.64 1213.81 L1373.06 1213.81 L1372.47 1213.81 L1371.88 1213.81 L1371.3 1213.81 L1370.71 1213.81 L1370.13 1213.81 L1369.54 1213.81 L1368.95 1213.81 L1368.37 1213.81 L1367.78 1213.81 L1367.19 1213.81 L1366.61 1213.81 L1366.02 1213.81 L1365.43 1213.81 L1364.85 1213.81 L1364.26 1213.81 L1363.68 1213.81 L1363.09 1213.81 L1362.5 1213.81 L1361.92 1213.81 L1361.33 1213.81 L1360.74 1213.81 L1360.16 1213.81 L1359.57 1213.81 L1358.98 1213.81 L1358.4 1213.81 L1357.81 1213.81 L1357.22 1213.81 L1356.64 1213.81 L1356.05 1213.81 L1355.47 1213.81 L1354.88 1213.81 L1354.29 1213.81 L1353.71 1213.81 L1353.12 1213.81 L1352.53 1213.81 L1351.95 1213.81 L1351.36 1213.81 L1350.77 1213.81 L1350.19 1213.81 L1349.6 1213.81 L1349.01 1213.81 L1348.43 1213.81 L1347.84 1213.81 L1347.26 1213.81 L1346.67 1213.81 L1346.08 1213.81 L1345.5 1213.81 L1344.91 1213.81 L1344.32 1213.81 L1343.74 1213.81 L1343.15 1213.81 L1342.56 1213.81 L1341.98 1213.81 L1341.39 1213.81 L1340.8 1213.81 L1340.22 1213.81 L1339.63 1213.81 L1339.05 1213.81 L1338.46 1213.81 L1337.87 1213.81 L1337.29 1213.81 L1336.7 1213.81 L1336.11 1213.81 L1335.53 1213.81 L1334.94 1213.81 L1334.35 1213.81 L1333.77 1213.81 L1333.18 1213.81 L1332.6 1213.81 L1332.01 1213.81 L1331.42 1213.81 L1330.84 1213.81 L1330.25 1213.81 L1329.66 1213.81 L1329.08 1213.81 L1328.49 1213.81 L1327.9 1213.81 L1327.32 1213.81 L1326.73 1213.81 L1326.14 1213.81 L1325.56 1213.81 L1324.97 1213.81 L1324.39 1213.81 L1323.8 1213.81 L1323.21 1213.81 L1322.63 1213.81 L1322.04 1213.81 L1321.45 1213.81 L1320.87 1213.81 L1320.28 1213.81 L1319.69 1213.81 L1319.11 1213.81 L1318.52 1213.81 L1317.93 1213.81 L1317.35 1213.81 L1316.76 1213.81 L1316.18 1213.81 L1315.59 1213.81 L1315 1213.81 L1314.42 1213.81 L1313.83 1213.81 L1313.24 1213.81 L1312.66 1213.81 L1312.07 1213.81 L1311.48 1213.81 L1310.9 1213.81 L1310.31 1213.81 L1309.73 1213.81 L1309.14 1213.81 L1308.55 1213.81 L1307.97 1213.81 L1307.38 1213.81 L1306.79 1213.81 L1306.21 1213.81 L1305.62 1213.81 L1305.03 1213.81 L1304.45 1213.81 L1303.86 1213.81 L1303.27 1213.81 L1302.69 1213.81 L1302.1 1213.81 L1301.52 1213.81 L1300.93 1213.81 L1300.34 1213.81 L1299.76 1213.81 L1299.17 1213.81 L1298.58 1213.81 L1298 1213.81 L1297.41 1213.81 L1296.82 1213.81 L1296.24 1213.81 L1295.65 1213.81 L1295.06 1213.81 L1294.48 1213.81 L1293.89 1213.81 L1293.31 1213.81 L1292.72 1213.81 L1292.13 1213.81 L1291.55 1213.81 L1290.96 1213.81 L1290.37 1213.81 L1289.79 1213.81 L1289.2 1213.81 L1288.61 1213.81 L1288.03 1213.81 L1287.44 1213.81 L1286.86 1213.81 L1286.27 1213.81 L1285.68 1213.81 L1285.1 1213.81 L1284.51 1213.81 L1283.92 1213.81 L1283.34 1213.81 L1282.75 1213.81 L1282.16 1213.81 L1281.58 1213.81 L1280.99 1213.81 L1280.4 1213.81 L1279.82 1213.81 L1279.23 1213.81 L1278.65 1213.81 L1278.06 1213.81 L1277.47 1213.81 L1276.89 1213.81 L1276.3 1213.81 L1275.71 1213.81 L1275.13 1213.81 L1274.54 1213.81 L1273.95 1213.81 L1273.37 1213.81 L1272.78 1213.81 L1272.19 1213.81 L1271.61 1213.81 L1271.02 1213.81 L1270.44 1213.81 L1269.85 1213.81 L1269.26 1213.81 L1268.68 1213.81 L1268.09 1213.81 L1267.5 1213.81 L1266.92 1213.81 L1266.33 1213.81 L1265.74 1213.81 L1265.16 1213.81 L1264.57 1213.81 L1263.98 1213.81 L1263.4 1213.81 L1262.81 1213.81 L1262.23 1213.81 L1261.64 1213.81 L1261.05 1213.81 L1260.47 1213.81 L1259.88 1213.81 L1259.29 1213.81 L1258.71 1213.81 L1258.12 1213.81 L1257.53 1213.81 L1256.95 1213.81 L1256.36 1213.81 L1255.78 1213.81 L1255.19 1213.81 L1254.6 1213.81 L1254.02 1213.81 L1253.43 1213.81 L1252.84 1213.81 L1252.26 1213.81 L1251.67 1213.81 L1251.08 1213.81 L1250.5 1213.81 L1249.91 1213.81 L1249.32 1213.81 L1248.74 1213.81 L1248.15 1213.81 L1247.57 1213.81 L1246.98 1213.81 L1246.39 1213.81 L1245.81 1213.81 L1245.22 1213.81 L1244.63 1213.81 L1244.05 1213.81 L1243.46 1213.81 L1242.87 1213.81 L1242.29 1213.81 L1241.7 1213.81 L1241.11 1213.81 L1240.53 1213.81 L1239.94 1213.81 L1239.36 1213.81 L1238.77 1213.81 L1238.18 1213.81 L1237.6 1213.81 L1237.01 1213.81 L1236.42 1213.81 L1235.84 1213.81 L1235.25 1213.81 L1234.66 1213.81 L1234.08 1213.81 L1233.49 1213.81 L1232.91 1213.81 L1232.32 1213.81 L1231.73 1213.81 L1231.15 1213.81 L1230.56 1213.81 L1229.97 1213.81 L1229.39 1213.81 L1228.8 1213.81 L1228.21 1213.81 L1227.63 1213.81 L1227.04 1213.81 L1226.45 1213.81 L1225.87 1213.81 L1225.28 1213.81 L1224.7 1213.81 L1224.11 1213.81 L1223.52 1213.81 L1222.94 1213.81 L1222.35 1213.81 L1221.76 1213.81 L1221.18 1213.81 L1220.59 1213.81 L1220 1213.81 L1219.42 1213.81 L1218.83 1213.81 L1218.24 1213.81 L1217.66 1213.81 L1217.07 1213.81 L1216.49 1213.81 L1215.9 1213.81 L1215.31 1213.81 L1214.73 1213.81 L1214.14 1213.81 L1213.55 1213.81 L1212.97 1213.81 L1212.38 1213.81 L1211.79 1213.81 L1211.21 1213.81 L1210.62 1213.81 L1210.03 1213.81 L1209.45 1213.81 L1208.86 1213.81 L1208.28 1213.81 L1207.69 1213.81 L1207.1 1213.81 L1206.52 1213.81 L1205.93 1213.81 L1205.34 1213.81 L1204.76 1213.81 L1204.17 1213.81 L1203.58 1213.81 L1203 1213.81 L1202.41 1213.81 L1201.83 1213.81 L1201.24 1213.81 L1200.65 1213.81 L1200.07 1213.81 L1199.48 1213.81 L1198.89 1213.81 L1198.31 1213.81 L1197.72 1213.81 L1197.13 1213.81 L1196.55 1213.81 L1195.96 1213.81 L1195.37 1213.81 L1194.79 1213.81 L1194.2 1213.81 L1193.62 1213.81 L1193.03 1213.81 L1192.44 1213.81 L1191.86 1213.81 L1191.27 1213.81 L1190.68 1213.81 L1190.1 1213.81 L1189.51 1213.81 L1188.92 1213.81 L1188.34 1213.81 L1187.75 1213.81 L1187.16 1213.81 L1186.58 1213.81 L1185.99 1213.81 L1185.41 1213.81 L1184.82 1213.81 L1184.23 1213.81 L1183.65 1213.81 L1183.06 1213.81 L1182.47 1213.81 L1181.89 1213.81 L1181.3 1213.81 L1180.71 1213.81 L1180.13 1213.81 L1179.54 1213.81 L1178.96 1213.81 L1178.37 1213.81 L1177.78 1213.81 L1177.2 1213.81 L1176.61 1213.81 L1176.02 1213.81 L1175.44 1213.81 L1174.85 1213.81 L1174.26 1213.81 L1173.68 1213.81 L1173.09 1213.81 L1172.5 1213.81 L1171.92 1213.81 L1171.33 1213.81 L1170.75 1213.81 L1170.16 1213.81 L1169.57 1213.81 L1168.99 1213.81 L1168.4 1213.81 L1167.81 1213.81 L1167.23 1213.81 L1166.64 1213.81 L1166.05 1213.81 L1165.47 1213.81 L1164.88 1213.81 L1164.29 1213.81 L1163.71 1213.81 L1163.12 1213.81 L1162.54 1213.81 L1161.95 1213.81 L1161.36 1213.81 L1160.78 1213.81 L1160.19 1213.81 L1159.6 1213.81 L1159.02 1213.81 L1158.43 1213.81 L1157.84 1213.81 L1157.26 1213.81 L1156.67 1213.81 L1156.09 1213.81 L1155.5 1213.81 L1154.91 1213.81 L1154.33 1213.81 L1153.74 1213.81 L1153.15 1213.81 L1152.57 1213.81 L1151.98 1213.81 L1151.39 1213.81 L1150.81 1213.81 L1150.22 1213.81 L1149.63 1213.81 L1149.05 1213.81 L1148.46 1213.81 L1147.88 1213.81 L1147.29 1213.81 L1146.7 1213.81 L1146.12 1213.81 L1145.53 1213.81 L1144.94 1213.81 L1144.36 1213.81 L1143.77 1213.81 L1143.18 1213.81 L1142.6 1213.81 L1142.01 1213.81 L1141.42 1213.81 L1140.84 1213.81 L1140.25 1213.81 L1139.67 1213.81 L1139.08 1213.81 L1138.49 1213.81 L1137.91 1213.81 L1137.32 1213.81 L1136.73 1213.81 L1136.15 1213.81 L1135.56 1213.81 L1134.97 1213.81 L1134.39 1213.81 L1133.8 1213.81 L1133.21 1213.81 L1132.63 1213.81 L1132.04 1213.81 L1131.46 1213.81 L1130.87 1213.81 L1130.28 1213.81 L1129.7 1213.81 L1129.11 1213.81 L1128.52 1213.81 L1127.94 1213.81 L1127.35 1213.81 L1126.76 1213.81 L1126.18 1213.81 L1125.59 1213.81 L1125.01 1213.81 L1124.42 1213.81 L1123.83 1213.81 L1123.25 1213.81 L1122.66 1213.81 L1122.07 1213.81 L1121.49 1213.81 L1120.9 1213.81 L1120.31 1213.81 L1119.73 1213.81 L1119.14 1213.81 L1118.55 1213.81 L1117.97 1213.81 L1117.38 1213.81 L1116.8 1213.81 L1116.21 1213.81 L1115.62 1213.81 L1115.04 1213.81 L1114.45 1213.81 L1113.86 1213.81 L1113.28 1213.81 L1112.69 1213.81 L1112.1 1213.81 L1111.52 1213.81 L1110.93 1213.81 L1110.34 1213.81 L1109.76 1213.81 L1109.17 1213.81 L1108.59 1213.81 L1108 1213.81 L1107.41 1213.81 L1106.83 1213.81 L1106.24 1213.81 L1105.65 1213.81 L1105.07 1213.81 L1104.48 1213.81 L1103.89 1213.81 L1103.31 1213.81 L1102.72 1213.81 L1102.14 1213.81 L1101.55 1213.81 L1100.96 1213.81 L1100.38 1213.81 L1099.79 1213.81 L1099.2 1213.81 L1098.62 1213.81 L1098.03 1213.81 L1097.44 1213.81 L1096.86 1213.81 L1096.27 1213.81 L1095.68 1213.81 L1095.1 1213.81 L1094.51 1213.81 L1093.93 1213.81 L1093.34 1213.81 L1092.75 1213.81 L1092.17 1213.81 L1091.58 1213.81 L1090.99 1213.81 L1090.41 1213.81 L1089.82 1213.81 L1089.23 1213.81 L1088.65 1213.81 L1088.06 1213.81 L1087.47 1213.81 L1086.89 1213.81 L1086.3 1213.81 L1085.72 1213.81 L1085.13 1213.81 L1084.54 1213.81 L1083.96 1213.81 L1083.37 1213.81 L1082.78 1213.81 L1082.2 1213.81 L1081.61 1213.81 L1081.02 1213.81 L1080.44 1213.81 L1079.85 1213.81 L1079.26 1213.81 L1078.68 1213.81 L1078.09 1213.81 L1077.51 1213.81 L1076.92 1213.81 L1076.33 1213.81 L1075.75 1213.81 L1075.16 1213.81 L1074.57 1213.81 L1073.99 1213.81 L1073.4 1213.81 L1072.81 1213.81 L1072.23 1213.81 L1071.64 1213.81 L1071.06 1213.81 L1070.47 1213.81 L1069.88 1213.81 L1069.3 1213.81 L1068.71 1213.81 L1068.12 1213.81 L1067.54 1213.81 L1066.95 1213.81 L1066.36 1213.81 L1065.78 1213.81 L1065.19 1213.81 L1064.6 1213.81 L1064.02 1213.81 L1063.43 1213.81 L1062.85 1213.81 L1062.26 1213.81 L1061.67 1213.81 L1061.09 1213.81 L1060.5 1213.81 L1059.91 1213.81 L1059.33 1213.81 L1058.74 1213.81 L1058.15 1213.81 L1057.57 1213.81 L1056.98 1213.81 L1056.39 1213.81 L1055.81 1213.81 L1055.22 1213.81 L1054.64 1213.81 L1054.05 1213.81 L1053.46 1213.81 L1052.88 1213.81 L1052.29 1213.81 L1051.7 1213.81 L1051.12 1213.81 L1050.53 1213.81 L1049.94 1213.81 L1049.36 1213.81 L1048.77 1213.81 L1048.19 1213.81 L1047.6 1213.81 L1047.01 1213.81 L1046.43 1213.81 L1045.84 1213.81 L1045.25 1213.81 L1044.67 1213.81 L1044.08 1213.81 L1043.49 1213.81 L1042.91 1213.81 L1042.32 1213.81 L1041.73 1213.81 L1041.15 1213.81 L1040.56 1213.81 L1039.98 1213.81 L1039.39 1213.81 L1038.8 1213.81 L1038.22 1213.81 L1037.63 1213.81 L1037.04 1213.81 L1036.46 1213.81 L1035.87 1213.81 L1035.28 1213.81 L1034.7 1213.81 L1034.11 1213.81 L1033.52 1213.81 L1032.94 1213.81 L1032.35 1213.81 L1031.77 1213.81 L1031.18 1213.81 L1030.59 1213.81 L1030.01 1213.81 L1029.42 1213.81 L1028.83 1213.81 L1028.25 1213.81 L1027.66 1213.81 L1027.07 1213.81 L1026.49 1213.81 L1025.9 1213.81 L1025.32 1213.81 L1024.73 1213.81 L1024.14 1213.81 L1023.56 1213.81 L1022.97 1213.81 L1022.38 1213.81 L1021.8 1213.81 L1021.21 1213.81 L1020.62 1213.81 L1020.04 1213.81 L1019.45 1213.81 L1018.86 1213.81 L1018.28 1213.81 L1017.69 1213.81 L1017.11 1213.81 L1016.52 1213.81 L1015.93 1213.81 L1015.35 1213.81 L1014.76 1213.81 L1014.17 1213.81 L1013.59 1213.81 L1013 1213.81 L1012.41 1213.81 L1011.83 1213.81 L1011.24 1213.81 L1010.65 1213.81 L1010.07 1213.81 L1009.48 1213.81 L1008.9 1213.81 L1008.31 1213.81 L1007.72 1213.81 L1007.14 1213.81 L1006.55 1213.81 L1005.96 1213.81 L1005.38 1213.81 L1004.79 1213.81 L1004.2 1213.81 L1003.62 1213.81 L1003.03 1213.81 L1002.44 1213.81 L1001.86 1213.81 L1001.27 1213.81 L1000.69 1213.81 L1000.1 1213.81 L999.513 1213.81 L998.926 1213.81 L998.34 1213.81 L997.754 1213.81 L997.167 1213.81 L996.581 1213.81 L995.994 1213.81 L995.408 1213.81 L994.822 1213.81 L994.235 1213.81 L993.649 1213.81 L993.062 1213.81 L992.476 1213.81 L991.889 1213.81 L991.303 1213.81 L990.717 1213.81 L990.13 1213.81 L989.544 1213.81 L988.957 1213.81 L988.371 1213.81 L987.785 1213.81 L987.198 1213.81 L986.612 1213.81 L986.025 1213.81  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.89 986.612,1213.89 987.198,1213.89 987.785,1213.89 988.371,1213.89 988.957,1213.89 989.544,1213.89 990.13,1213.89 990.717,1213.89 991.303,1213.89 991.889,1213.89 992.476,1213.89 993.062,1213.89 993.649,1213.89 994.235,1213.89 994.822,1213.89 995.408,1213.89 995.994,1213.89 996.581,1213.89 997.167,1213.89 997.754,1213.89 998.34,1213.89 998.926,1213.89 999.513,1213.89 1000.1,1213.89 1000.69,1213.89 1001.27,1213.89 1001.86,1213.89 1002.44,1213.89 1003.03,1213.89 1003.62,1213.89 1004.2,1213.89 1004.79,1213.89 1005.38,1213.89 1005.96,1213.89 1006.55,1213.89 1007.14,1213.89 1007.72,1213.89 1008.31,1213.89 1008.9,1213.89 1009.48,1213.89 1010.07,1213.89 1010.65,1213.89 1011.24,1213.89 1011.83,1213.89 1012.41,1213.89 1013,1213.89 1013.59,1213.89 1014.17,1213.89 1014.76,1213.89 1015.35,1213.89 1015.93,1213.89 1016.52,1213.89 1017.11,1213.89 1017.69,1213.89 1018.28,1213.89 1018.86,1213.89 1019.45,1213.89 1020.04,1213.89 1020.62,1213.89 1021.21,1213.89 1021.8,1213.89 1022.38,1213.89 1022.97,1213.89 1023.56,1213.89 1024.14,1213.89 1024.73,1213.89 1025.32,1213.89 1025.9,1213.89 1026.49,1213.89 1027.07,1213.89 1027.66,1213.89 1028.25,1213.89 1028.83,1213.89 1029.42,1213.89 1030.01,1213.89 1030.59,1213.89 1031.18,1213.89 1031.77,1213.89 1032.35,1213.89 1032.94,1213.89 1033.52,1213.89 1034.11,1213.89 1034.7,1213.89 1035.28,1213.89 1035.87,1213.89 1036.46,1213.89 1037.04,1213.89 1037.63,1213.89 1038.22,1213.89 1038.8,1213.89 1039.39,1213.89 1039.98,1213.89 1040.56,1213.89 1041.15,1213.89 1041.73,1213.89 1042.32,1213.89 1042.91,1213.89 1043.49,1213.89 1044.08,1213.89 1044.67,1213.89 1045.25,1213.89 1045.84,1213.89 1046.43,1213.89 1047.01,1213.89 1047.6,1213.89 1048.19,1213.89 1048.77,1213.89 1049.36,1213.89 1049.94,1213.89 1050.53,1213.89 1051.12,1213.89 1051.7,1213.89 1052.29,1213.89 1052.88,1213.89 1053.46,1213.89 1054.05,1213.89 1054.64,1213.89 1055.22,1213.89 1055.81,1213.89 1056.39,1213.89 1056.98,1213.89 1057.57,1213.89 1058.15,1213.89 1058.74,1213.89 1059.33,1213.89 1059.91,1213.89 1060.5,1213.89 1061.09,1213.89 1061.67,1213.89 1062.26,1213.89 1062.85,1213.89 1063.43,1213.89 1064.02,1213.89 1064.6,1213.89 1065.19,1213.89 1065.78,1213.89 1066.36,1213.89 1066.95,1213.89 1067.54,1213.89 1068.12,1213.89 1068.71,1213.89 1069.3,1213.89 1069.88,1213.89 1070.47,1213.89 1071.06,1213.89 1071.64,1213.89 1072.23,1213.89 1072.81,1213.89 1073.4,1213.89 1073.99,1213.89 1074.57,1213.89 1075.16,1213.89 1075.75,1213.89 1076.33,1213.89 1076.92,1213.89 1077.51,1213.89 1078.09,1213.89 1078.68,1213.89 1079.26,1213.89 1079.85,1213.89 1080.44,1213.89 1081.02,1213.89 1081.61,1213.89 1082.2,1213.89 1082.78,1213.89 1083.37,1213.89 1083.96,1213.89 1084.54,1213.89 1085.13,1213.89 1085.72,1213.89 1086.3,1213.89 1086.89,1213.89 1087.47,1213.89 1088.06,1213.89 1088.65,1213.89 1089.23,1213.89 1089.82,1213.89 1090.41,1213.89 1090.99,1213.89 1091.58,1213.89 1092.17,1213.89 1092.75,1213.89 1093.34,1213.89 1093.93,1213.89 1094.51,1213.89 1095.1,1213.89 1095.68,1213.89 1096.27,1213.89 1096.86,1213.89 1097.44,1213.89 1098.03,1213.89 1098.62,1213.89 1099.2,1213.89 1099.79,1213.89 1100.38,1213.89 1100.96,1213.89 1101.55,1213.89 1102.14,1213.89 1102.72,1213.89 1103.31,1213.89 1103.89,1213.89 1104.48,1213.89 1105.07,1213.89 1105.65,1213.89 1106.24,1213.89 1106.83,1213.89 1107.41,1213.89 1108,1213.89 1108.59,1213.89 1109.17,1213.89 1109.76,1213.89 1110.34,1213.89 1110.93,1213.89 1111.52,1213.89 1112.1,1213.89 1112.69,1213.89 1113.28,1213.89 1113.86,1213.89 1114.45,1213.89 1115.04,1213.89 1115.62,1213.89 1116.21,1213.89 1116.8,1213.89 1117.38,1213.89 1117.97,1213.89 1118.55,1213.89 1119.14,1213.89 1119.73,1213.89 1120.31,1213.89 1120.9,1213.89 1121.49,1213.89 1122.07,1213.89 1122.66,1213.89 1123.25,1213.89 1123.83,1213.89 1124.42,1213.89 1125.01,1213.89 1125.59,1213.89 1126.18,1213.89 1126.76,1213.89 1127.35,1213.89 1127.94,1213.89 1128.52,1213.89 1129.11,1213.89 1129.7,1213.89 1130.28,1213.89 1130.87,1213.89 1131.46,1213.89 1132.04,1213.89 1132.63,1213.89 1133.21,1213.89 1133.8,1213.89 1134.39,1213.89 1134.97,1213.89 1135.56,1213.89 1136.15,1213.89 1136.73,1213.89 1137.32,1213.89 1137.91,1213.89 1138.49,1213.89 1139.08,1213.89 1139.67,1213.89 1140.25,1213.89 1140.84,1213.89 1141.42,1213.89 1142.01,1213.89 1142.6,1213.89 1143.18,1213.89 1143.77,1213.89 1144.36,1213.89 1144.94,1213.89 1145.53,1213.89 1146.12,1213.89 1146.7,1213.89 1147.29,1213.89 1147.88,1213.89 1148.46,1213.89 1149.05,1213.89 1149.63,1213.89 1150.22,1213.89 1150.81,1213.89 1151.39,1213.89 1151.98,1213.89 1152.57,1213.89 1153.15,1213.89 1153.74,1213.89 1154.33,1213.89 1154.91,1213.89 1155.5,1213.89 1156.09,1213.89 1156.67,1213.89 1157.26,1213.89 1157.84,1213.89 1158.43,1213.89 1159.02,1213.89 1159.6,1213.89 1160.19,1213.89 1160.78,1213.89 1161.36,1213.89 1161.95,1213.89 1162.54,1213.89 1163.12,1213.89 1163.71,1213.89 1164.29,1213.89 1164.88,1213.89 1165.47,1213.89 1166.05,1213.89 1166.64,1213.89 1167.23,1213.89 1167.81,1213.89 1168.4,1213.89 1168.99,1213.89 1169.57,1213.89 1170.16,1213.89 1170.75,1213.89 1171.33,1213.89 1171.92,1213.89 1172.5,1213.89 1173.09,1213.89 1173.68,1213.89 1174.26,1213.89 1174.85,1213.89 1175.44,1213.89 1176.02,1213.89 1176.61,1213.89 1177.2,1213.89 1177.78,1213.89 1178.37,1213.89 1178.96,1213.89 1179.54,1213.89 1180.13,1213.89 1180.71,1213.89 1181.3,1213.89 1181.89,1213.89 1182.47,1213.89 1183.06,1213.89 1183.65,1213.89 1184.23,1213.89 1184.82,1213.89 1185.41,1213.89 1185.99,1213.89 1186.58,1213.89 1187.16,1213.89 1187.75,1213.89 1188.34,1213.89 1188.92,1213.89 1189.51,1213.89 1190.1,1213.89 1190.68,1213.89 1191.27,1213.89 1191.86,1213.89 1192.44,1213.89 1193.03,1213.89 1193.62,1213.89 1194.2,1213.89 1194.79,1213.89 1195.37,1213.89 1195.96,1213.89 1196.55,1213.89 1197.13,1213.89 1197.72,1213.89 1198.31,1213.89 1198.89,1213.89 1199.48,1213.89 1200.07,1213.89 1200.65,1213.89 1201.24,1213.89 1201.83,1213.89 1202.41,1213.89 1203,1213.89 1203.58,1213.89 1204.17,1213.89 1204.76,1213.89 1205.34,1213.89 1205.93,1213.89 1206.52,1213.89 1207.1,1213.89 1207.69,1213.89 1208.28,1213.89 1208.86,1213.89 1209.45,1213.89 1210.03,1213.89 1210.62,1213.89 1211.21,1213.89 1211.79,1213.89 1212.38,1213.89 1212.97,1213.89 1213.55,1213.89 1214.14,1213.89 1214.73,1213.89 1215.31,1213.89 1215.9,1213.89 1216.49,1213.89 1217.07,1213.89 1217.66,1213.89 1218.24,1213.89 1218.83,1213.89 1219.42,1213.89 1220,1213.89 1220.59,1213.89 1221.18,1213.89 1221.76,1213.89 1222.35,1213.89 1222.94,1213.89 1223.52,1213.89 1224.11,1213.89 1224.7,1213.89 1225.28,1213.89 1225.87,1213.89 1226.45,1213.89 1227.04,1213.89 1227.63,1213.89 1228.21,1213.89 1228.8,1213.89 1229.39,1213.89 1229.97,1213.89 1230.56,1213.89 1231.15,1213.89 1231.73,1213.89 1232.32,1213.89 1232.91,1213.89 1233.49,1213.89 1234.08,1213.89 1234.66,1213.89 1235.25,1213.89 1235.84,1213.89 1236.42,1213.89 1237.01,1213.89 1237.6,1213.89 1238.18,1213.89 1238.77,1213.89 1239.36,1213.89 1239.94,1213.89 1240.53,1213.89 1241.11,1213.89 1241.7,1213.89 1242.29,1213.89 1242.87,1213.89 1243.46,1213.89 1244.05,1213.89 1244.63,1213.89 1245.22,1213.89 1245.81,1213.89 1246.39,1213.89 1246.98,1213.89 1247.57,1213.89 1248.15,1213.89 1248.74,1213.89 1249.32,1213.89 1249.91,1213.89 1250.5,1213.89 1251.08,1213.89 1251.67,1213.89 1252.26,1213.89 1252.84,1213.89 1253.43,1213.89 1254.02,1213.89 1254.6,1213.89 1255.19,1213.89 1255.78,1213.89 1256.36,1213.89 1256.95,1213.89 1257.53,1213.89 1258.12,1213.89 1258.71,1213.89 1259.29,1213.89 1259.88,1213.89 1260.47,1213.89 1261.05,1213.89 1261.64,1213.89 1262.23,1213.89 1262.81,1213.89 1263.4,1213.89 1263.98,1213.89 1264.57,1213.89 1265.16,1213.89 1265.74,1213.89 1266.33,1213.89 1266.92,1213.89 1267.5,1213.89 1268.09,1213.89 1268.68,1213.89 1269.26,1213.89 1269.85,1213.89 1270.44,1213.89 1271.02,1213.89 1271.61,1213.89 1272.19,1213.89 1272.78,1213.89 1273.37,1213.89 1273.95,1213.89 1274.54,1213.89 1275.13,1213.89 1275.71,1213.89 1276.3,1213.89 1276.89,1213.89 1277.47,1213.89 1278.06,1213.89 1278.65,1213.89 1279.23,1213.89 1279.82,1213.89 1280.4,1213.89 1280.99,1213.89 1281.58,1213.89 1282.16,1213.89 1282.75,1213.89 1283.34,1213.89 1283.92,1213.89 1284.51,1213.89 1285.1,1213.89 1285.68,1213.89 1286.27,1213.89 1286.86,1213.89 1287.44,1213.89 1288.03,1213.89 1288.61,1213.89 1289.2,1213.89 1289.79,1213.89 1290.37,1213.89 1290.96,1213.89 1291.55,1213.89 1292.13,1213.89 1292.72,1213.89 1293.31,1213.89 1293.89,1213.89 1294.48,1213.89 1295.06,1213.89 1295.65,1213.89 1296.24,1213.89 1296.82,1213.89 1297.41,1213.89 1298,1213.89 1298.58,1213.89 1299.17,1213.89 1299.76,1213.89 1300.34,1213.89 1300.93,1213.89 1301.52,1213.89 1302.1,1213.89 1302.69,1213.89 1303.27,1213.89 1303.86,1213.89 1304.45,1213.89 1305.03,1213.89 1305.62,1213.89 1306.21,1213.89 1306.79,1213.89 1307.38,1213.89 1307.97,1213.89 1308.55,1213.89 1309.14,1213.89 1309.73,1213.89 1310.31,1213.89 1310.9,1213.89 1311.48,1213.89 1312.07,1213.89 1312.66,1213.89 1313.24,1213.89 1313.83,1213.89 1314.42,1213.89 1315,1213.89 1315.59,1213.89 1316.18,1213.89 1316.76,1213.89 1317.35,1213.89 1317.93,1213.89 1318.52,1213.89 1319.11,1213.89 1319.69,1213.89 1320.28,1213.89 1320.87,1213.89 1321.45,1213.89 1322.04,1213.89 1322.63,1213.89 1323.21,1213.89 1323.8,1213.89 1324.39,1213.89 1324.97,1213.89 1325.56,1213.89 1326.14,1213.89 1326.73,1213.89 1327.32,1213.89 1327.9,1213.89 1328.49,1213.89 1329.08,1213.89 1329.66,1213.89 1330.25,1213.89 1330.84,1213.89 1331.42,1213.89 1332.01,1213.89 1332.6,1213.89 1333.18,1213.89 1333.77,1213.89 1334.35,1213.89 1334.94,1213.89 1335.53,1213.89 1336.11,1213.89 1336.7,1213.89 1337.29,1213.89 1337.87,1213.89 1338.46,1213.89 1339.05,1213.89 1339.63,1213.89 1340.22,1213.89 1340.8,1213.89 1341.39,1213.89 1341.98,1213.89 1342.56,1213.89 1343.15,1213.89 1343.74,1213.89 1344.32,1213.89 1344.91,1213.89 1345.5,1213.89 1346.08,1213.89 1346.67,1213.89 1347.26,1213.89 1347.84,1213.89 1348.43,1213.89 1349.01,1213.89 1349.6,1213.89 1350.19,1213.89 1350.77,1213.89 1351.36,1213.89 1351.95,1213.89 1352.53,1213.89 1353.12,1213.89 1353.71,1213.89 1354.29,1213.89 1354.88,1213.89 1355.47,1213.89 1356.05,1213.89 1356.64,1213.89 1357.22,1213.89 1357.81,1213.89 1358.4,1213.89 1358.98,1213.89 1359.57,1213.89 1360.16,1213.89 1360.74,1213.89 1361.33,1213.89 1361.92,1213.89 1362.5,1213.89 1363.09,1213.89 1363.68,1213.89 1364.26,1213.89 1364.85,1213.89 1365.43,1213.89 1366.02,1213.89 1366.61,1213.89 1367.19,1213.89 1367.78,1213.89 1368.37,1213.89 1368.95,1213.89 1369.54,1213.89 1370.13,1213.89 1370.71,1213.89 1371.3,1213.89 1371.88,1213.89 1372.47,1213.89 1373.06,1213.89 1373.64,1213.89 1374.23,1213.89 1374.82,1213.89 1375.4,1213.89 1375.99,1213.89 1376.58,1213.89 1377.16,1213.89 1377.75,1213.89 1378.34,1213.89 1378.92,1213.89 1379.51,1213.89 1380.09,1213.89 1380.68,1213.89 1381.27,1213.89 1381.85,1213.89 1382.44,1213.89 1383.03,1213.89 1383.61,1213.89 1384.2,1213.89 1384.79,1213.89 1385.37,1213.89 1385.96,1213.89 1386.55,1213.89 1387.13,1213.89 1387.72,1213.89 1388.3,1213.89 1388.89,1213.89 1389.48,1213.89 1390.06,1213.89 1390.65,1213.89 1391.24,1213.89 1391.82,1213.89 1392.41,1213.89 1393,1213.89 1393.58,1213.89 1394.17,1213.89 1394.75,1213.89 1395.34,1213.89 1395.93,1213.89 1396.51,1213.89 1397.1,1213.89 1397.69,1213.89 1398.27,1213.89 1398.86,1213.89 1399.45,1213.89 1400.03,1213.89 1400.62,1213.89 1401.21,1213.89 1401.79,1213.89 1402.38,1213.89 1402.96,1213.89 1403.55,1213.89 1404.14,1213.89 1404.72,1213.89 1405.31,1213.89 1405.9,1213.89 1406.48,1213.89 1407.07,1213.89 1407.66,1213.89 1408.24,1213.89 1408.83,1213.89 1409.42,1213.89 1410,1213.89 1410.59,1213.89 1411.17,1213.89 1411.76,1213.89 1412.35,1213.89 1412.93,1213.89 1413.52,1213.89 1414.11,1213.89 1414.69,1213.89 1415.28,1213.89 1415.87,1213.89 1416.45,1213.89 1417.04,1213.89 1417.63,1213.89 1418.21,1213.89 1418.8,1213.89 1419.38,1213.89 1419.97,1213.89 1420.56,1213.89 1421.14,1213.89 1421.73,1213.89 1422.32,1213.89 1422.9,1213.89 1423.49,1213.89 1424.08,1213.89 1424.66,1213.89 1425.25,1213.89 1425.83,1213.89 1426.42,1213.89 1427.01,1213.89 1427.59,1213.89 1428.18,1213.89 1428.77,1213.89 1429.35,1213.89 1429.94,1213.89 1430.53,1213.89 1431.11,1213.89 1431.7,1213.89 1432.29,1213.89 1432.87,1213.89 1433.46,1213.89 1434.04,1213.89 1434.63,1213.89 1435.22,1213.89 1435.8,1213.89 1436.39,1213.89 1436.98,1213.89 1437.56,1213.89 1438.15,1213.89 1438.74,1213.89 1439.32,1213.89 1439.91,1213.89 1440.5,1213.89 1441.08,1213.89 1441.67,1213.89 1442.25,1213.89 1442.84,1213.89 1443.43,1213.89 1444.01,1213.89 1444.6,1213.89 1445.19,1213.89 1445.77,1213.89 1446.36,1213.89 1446.95,1213.89 1447.53,1213.89 1448.12,1213.89 1448.7,1213.89 1449.29,1213.89 1449.88,1213.89 1450.46,1213.89 1451.05,1213.89 1451.64,1213.89 1452.22,1213.89 1452.81,1213.89 1453.4,1213.89 1453.98,1213.89 1454.57,1213.89 1455.16,1213.89 1455.74,1213.89 1456.33,1213.89 1456.91,1213.89 1457.5,1213.89 1458.09,1213.89 1458.67,1213.89 1459.26,1213.89 1459.85,1213.89 1460.43,1213.89 1461.02,1213.89 1461.61,1213.89 1462.19,1213.89 1462.78,1213.89 1463.37,1213.89 1463.95,1213.89 1464.54,1213.89 1465.12,1213.89 1465.71,1213.89 1466.3,1213.89 1466.88,1213.89 1467.47,1213.89 1468.06,1213.89 1468.64,1213.89 1469.23,1213.89 1469.82,1213.89 1470.4,1213.89 1470.99,1213.89 1471.57,1213.89 1472.16,1213.89 1472.75,1213.89 1473.33,1213.89 1473.92,1213.89 1474.51,1213.89 1475.09,1213.89 1475.68,1213.89 1476.27,1213.89 1476.85,1213.89 1477.44,1213.89 1478.03,1213.89 1478.61,1213.89 1479.2,1213.89 1479.78,1213.89 1480.37,1213.89 1480.96,1213.89 1481.54,1213.89 1482.13,1213.89 1482.72,1213.89 1483.3,1213.89 1483.89,1213.89 1484.48,1213.89 1485.06,1213.89 1485.65,1213.89 1486.24,1213.89 1486.82,1213.89 1487.41,1213.89 1487.99,1213.89 1488.58,1213.89 1489.17,1213.89 1489.75,1213.89 1490.34,1213.89 1490.93,1213.89 1491.51,1213.89 1492.1,1213.89 1492.69,1213.89 1493.27,1213.89 1493.86,1213.89 1494.45,1213.89 1495.03,1213.89 1495.62,1213.89 1496.2,1213.89 1496.79,1213.89 1497.38,1213.89 1497.96,1213.89 1498.55,1213.89 1499.14,1213.89 1499.72,1213.89 1500.31,1213.89 1500.9,1213.89 1501.48,1213.89 1502.07,1213.89 1502.65,1213.89 1503.24,1213.89 1503.83,1213.89 1504.41,1213.89 1505,1213.89 1505.59,1213.89 1506.17,1213.89 1506.76,1213.89 1507.35,1213.89 1507.93,1213.89 1508.52,1213.89 1509.11,1213.89 1509.69,1213.89 1510.28,1213.89 1510.86,1213.89 1511.45,1213.89 1512.04,1213.89 1512.62,1213.89 1513.21,1213.89 1513.8,1213.89 1514.38,1213.89 1514.97,1213.89 1515.56,1213.89 1516.14,1213.89 1516.73,1213.89 1517.32,1213.89 1517.9,1213.89 1518.49,1213.89 1519.07,1213.89 1519.66,1213.89 1520.25,1213.89 1520.83,1213.89 1521.42,1213.89 1522.01,1213.89 1522.59,1213.89 1523.18,1213.89 1523.77,1213.89 1524.35,1213.89 1524.94,1213.89 1525.52,1213.89 1526.11,1213.89 1526.7,1213.89 1527.28,1213.89 1527.87,1213.89 1528.46,1213.89 1529.04,1213.89 1529.63,1213.89 1530.22,1213.89 1530.8,1213.89 1531.39,1213.89 1531.98,1213.89 1532.56,1213.89 1533.15,1213.89 1533.73,1213.89 1534.32,1213.89 1534.91,1213.89 1535.49,1213.89 1536.08,1213.89 1536.67,1213.89 1537.25,1213.89 1537.84,1213.89 1538.43,1213.89 1539.01,1213.89 1539.6,1213.89 1540.19,1213.89 1540.77,1213.89 1541.36,1213.89 1541.94,1213.89 1542.53,1213.89 1543.12,1213.89 1543.7,1213.89 1544.29,1213.89 1544.88,1213.89 1545.46,1213.89 1546.05,1213.89 1546.64,1213.89 1547.22,1213.89 1547.81,1213.89 1548.4,1213.89 1548.98,1213.89 1549.57,1213.89 1550.15,1213.89 1550.74,1213.89 1551.33,1213.89 1551.91,1213.89 1552.5,1213.89 1553.09,1213.89 1553.67,1213.89 1554.26,1213.89 1554.85,1213.89 1555.43,1213.89 1556.02,1213.89 1556.6,1213.89 1557.19,1213.89 1557.78,1213.89 1558.36,1213.89 1558.95,1213.89 1559.54,1213.89 1560.12,1213.89 1560.71,1213.89 1561.3,1213.89 1561.88,1213.89 1562.47,1213.89 1563.06,1213.89 1563.64,1213.89 1564.23,1213.89 1564.81,1213.89 1565.4,1213.89 1565.99,1213.89 1566.57,1213.89 1567.16,1213.89 1567.75,1213.89 1568.33,1213.89 1568.92,1213.89 1569.51,1213.89 1570.09,1213.89 1570.68,1213.89 1571.27,1213.89 1571.85,1213.89 1572.44,1213.89 1573.02,1213.89 1573.61,1213.89 1574.2,1213.89 1574.78,1213.89 1575.37,1213.89 1575.96,1213.89 1576.54,1213.89 1577.13,1213.89 1577.72,1213.89 1578.3,1213.89 1578.89,1213.89 1579.47,1213.89 1580.06,1213.89 1580.65,1213.89 1581.23,1213.89 1581.82,1213.89 1582.41,1213.89 1582.99,1213.89 1583.58,1213.89 1584.17,1213.89 1584.75,1213.89 1585.34,1213.89 1585.93,1213.89 1586.51,1213.89 1587.1,1213.89 1587.68,1213.89 1588.27,1213.89 1588.86,1213.89 1589.44,1213.89 1590.03,1213.89 1590.62,1213.89 1591.2,1213.89 1591.79,1213.89 1592.38,1213.89 1592.96,1213.89 1593.55,1213.89 1594.14,1213.89 1594.72,1213.89 1595.31,1213.89 1595.89,1213.89 1596.48,1213.89 1597.07,1213.89 1597.65,1213.89 1598.24,1213.89 1598.83,1213.89 1599.41,1213.89 1600,1213.89 1600.59,1213.89 1601.17,1213.89 1601.76,1213.89 1602.34,1213.89 1602.93,1213.89 1603.52,1213.89 1604.1,1213.89 1604.69,1213.89 1605.28,1213.89 1605.86,1213.89 1606.45,1213.89 1607.04,1213.89 1607.62,1213.89 1608.21,1213.89 1608.8,1213.89 1609.38,1213.89 1609.97,1213.89 1610.55,1213.89 1611.14,1213.89 1611.73,1213.89 1612.31,1213.89 1612.9,1213.89 1613.49,1213.89 1614.07,1213.89 1614.66,1213.89 1615.25,1213.89 1615.83,1213.89 1616.42,1213.89 1617.01,1213.89 1617.59,1213.89 1618.18,1213.89 1618.76,1213.89 1619.35,1213.89 1619.94,1213.89 1620.52,1213.89 1621.11,1213.89 1621.7,1213.89 1622.28,1213.89 1622.87,1213.89 1623.46,1213.89 1624.04,1213.89 1624.63,1213.89 1625.22,1213.89 1625.8,1213.89 1626.39,1213.89 1626.97,1213.89 1627.56,1213.89 1628.15,1213.89 1628.73,1213.89 1629.32,1213.89 1629.91,1213.89 1630.49,1213.89 1631.08,1213.89 1631.67,1213.89 1632.25,1213.89 1632.84,1213.89 1633.42,1213.89 1634.01,1213.89 1634.6,1213.89 1635.18,1213.89 1635.77,1213.89 1636.36,1213.89 1636.94,1213.89 1637.53,1213.89 1638.12,1213.89 1638.7,1213.89 1639.29,1213.89 1639.88,1213.89 1640.46,1213.89 1641.05,1213.89 1641.63,1213.89 1642.22,1213.89 1642.81,1213.89 1643.39,1213.89 1643.98,1213.89 1644.57,1213.89 1645.15,1213.89 1645.74,1213.89 1646.33,1213.89 1646.91,1213.89 1647.5,1213.89 1648.09,1213.89 1648.67,1213.89 1649.26,1213.89 1649.84,1213.89 1650.43,1213.89 1651.02,1213.89 1651.6,1213.89 1652.19,1213.89 1652.78,1213.89 1653.36,1213.89 1653.95,1213.89 1654.54,1213.89 1655.12,1213.89 1655.71,1213.89 1656.29,1213.89 1656.88,1213.89 1657.47,1213.89 1658.05,1213.89 1658.64,1213.89 1659.23,1213.89 1659.81,1213.89 1660.4,1213.89 1660.99,1213.89 1661.57,1213.89 1662.16,1213.89 1662.75,1213.89 1663.33,1213.89 1663.92,1213.89 1664.5,1213.89 1665.09,1213.89 1665.68,1213.89 1666.26,1213.89 1666.85,1213.89 1667.44,1213.89 1668.02,1213.89 1668.61,1213.89 1669.2,1213.89 1669.78,1213.89 1670.37,1213.89 1670.96,1213.89 1671.54,1213.89 1672.13,1213.89 1672.71,1213.89 1673.3,1213.89 1673.89,1213.89 1674.47,1213.89 1675.06,1213.89 1675.65,1213.89 1676.23,1213.89 1676.82,1213.89 1677.41,1213.89 1677.99,1213.89 1678.58,1213.89 1679.17,1213.89 1679.75,1213.89 1680.34,1213.89 1680.92,1213.89 1681.51,1213.89 1682.1,1213.89 1682.68,1213.89 1683.27,1213.89 1683.86,1213.89 1684.44,1213.89 1685.03,1213.89 1685.62,1213.89 1686.2,1213.89 1686.79,1213.89 1687.37,1213.89 1687.96,1213.89 1688.55,1213.89 1689.13,1213.89 1689.72,1213.89 1690.31,1213.89 1690.89,1213.89 1691.48,1213.89 1692.07,1213.89 1692.65,1213.89 1693.24,1213.89 1693.83,1213.89 1694.41,1213.89 1695,1213.89 1695.58,1213.89 1696.17,1213.89 1696.76,1213.89 1697.34,1213.89 1697.93,1213.89 1698.52,1213.89 1699.1,1213.89 1699.69,1213.89 1700.28,1213.89 1700.86,1213.89 1701.45,1213.89 1702.04,1213.89 1702.62,1213.89 1703.21,1213.89 1703.79,1213.89 1704.38,1213.89 1704.97,1213.89 1705.55,1213.89 1706.14,1213.89 1706.73,1213.89 1707.31,1213.89 1707.9,1213.89 1708.49,1213.89 1709.07,1213.89 1709.66,1213.89 1710.24,1213.89 1710.83,1213.89 1711.42,1213.89 1712,1213.89 1712.59,1213.89 1713.18,1213.89 1713.76,1213.89 1714.35,1213.89 1714.94,1213.89 1715.52,1213.89 1716.11,1213.89 1716.7,1213.89 1717.28,1213.89 1717.87,1213.89 1718.45,1213.89 1719.04,1213.89 1719.63,1213.89 1720.21,1213.89 1720.8,1213.89 1721.39,1213.89 1721.97,1213.89 1722.56,1213.89 1723.15,1213.89 1723.73,1213.89 1724.32,1213.89 1724.91,1213.89 1725.49,1213.89 1726.08,1213.89 1726.66,1213.89 1727.25,1213.89 1727.84,1213.89 1728.42,1213.89 1729.01,1213.89 1729.6,1213.89 1730.18,1213.89 1730.77,1213.89 1731.36,1213.89 1731.94,1213.89 1732.53,1213.89 1733.11,1213.89 1733.7,1213.89 1734.29,1213.89 1734.87,1213.89 1735.46,1213.89 1736.05,1213.89 1736.63,1213.89 1737.22,1213.89 1737.81,1213.89 1738.39,1213.89 1738.98,1213.89 1739.57,1213.89 1740.15,1213.89 1740.74,1213.89 1741.32,1213.89 1741.91,1213.89 1742.5,1213.89 1743.08,1213.89 1743.67,1213.89 1744.26,1213.89 1744.84,1213.89 1745.43,1213.89 1746.02,1213.89 1746.6,1213.89 1747.19,1213.89 1747.78,1213.89 1748.36,1213.89 1748.95,1213.89 1749.53,1213.89 1750.12,1213.89 1750.71,1213.89 1751.29,1213.89 1751.88,1213.89 1752.47,1213.89 1753.05,1213.89 1753.64,1213.89 1754.23,1213.89 1754.81,1213.89 1755.4,1213.89 1755.99,1213.89 1756.57,1213.89 1757.16,1213.89 1757.74,1213.89 1758.33,1213.89 1758.92,1213.89 1759.5,1213.89 1760.09,1213.89 1760.68,1213.89 1761.26,1213.89 1761.85,1213.89 1762.44,1213.89 1763.02,1213.89 1763.61,1213.89 1764.19,1213.89 1764.78,1213.89 1765.37,1213.89 1765.95,1213.89 1766.54,1213.89 1767.13,1213.89 1767.71,1213.89 1768.3,1213.89 1768.89,1213.89 1769.47,1213.89 1770.06,1213.89 1770.65,1213.89 1771.23,1213.89 1771.82,1213.89 1772.4,1213.89 1772.99,1213.89 1773.58,1213.89 1774.16,1213.89 1774.75,1213.89 1775.34,1213.89 1775.92,1213.89 1776.51,1213.89 1777.1,1213.89 1777.68,1213.89 1778.27,1213.89 1778.86,1213.89 1779.44,1213.89 1780.03,1213.89 1780.61,1213.89 1781.2,1213.89 1781.79,1213.89 1782.37,1213.89 1782.96,1213.89 1783.55,1213.89 1784.13,1213.89 1784.72,1213.89 1785.31,1213.89 1785.89,1213.89 1786.48,1213.89 1787.06,1213.89 1787.65,1213.89 1788.24,1213.89 1788.82,1213.89 1789.41,1213.89 1790,1213.89 1790.58,1213.89 1791.17,1213.89 1791.76,1213.89 1792.34,1213.89 1792.93,1213.89 1793.52,1213.89 1794.1,1213.89 1794.69,1213.89 1795.27,1213.89 1795.86,1213.89 1796.45,1213.89 1797.03,1213.89 1797.62,1213.89 1798.21,1213.89 1798.79,1213.89 1799.38,1213.89 1799.97,1213.89 1800.55,1213.89 1801.14,1213.89 1801.73,1213.89 1802.31,1213.89 1802.9,1213.89 1803.48,1213.89 1804.07,1213.89 1804.66,1213.89 1805.24,1213.89 1805.83,1213.89 1806.42,1213.89 1807,1213.89 1807.59,1213.89 1808.18,1213.89 1808.76,1213.89 1809.35,1213.89 1809.94,1213.89 1810.52,1213.89 1811.11,1213.89 1811.69,1213.89 1812.28,1213.89 1812.87,1213.89 1813.45,1213.89 1814.04,1213.89 1814.63,1213.89 1815.21,1213.89 1815.8,1213.89 1816.39,1213.89 1816.97,1213.89 1817.56,1213.89 1818.14,1213.89 1818.73,1213.89 1819.32,1213.89 1819.9,1213.89 1820.49,1213.89 1821.08,1213.89 1821.66,1213.89 1822.25,1213.89 1822.84,1213.89 1823.42,1213.89 1824.01,1213.89 1824.6,1213.89 1825.18,1213.89 1825.77,1213.89 1826.35,1213.89 1826.94,1213.89 1827.53,1213.89 1828.11,1213.89 1828.7,1213.89 1829.29,1213.89 1829.87,1213.89 1830.46,1213.89 1831.05,1213.89 1831.63,1213.89 1832.22,1213.89 1832.81,1213.89 1833.39,1213.89 1833.98,1213.89 1834.56,1213.89 1835.15,1213.89 1835.74,1213.89 1836.32,1213.89 1836.91,1213.89 1837.5,1213.89 1838.08,1213.89 1838.67,1213.89 1839.26,1213.89 1839.84,1213.89 1840.43,1213.89 1841.01,1213.89 1841.6,1213.89 1842.19,1213.89 1842.77,1213.89 1843.36,1213.89 1843.95,1213.89 1844.53,1213.89 1845.12,1213.89 1845.71,1213.89 1846.29,1213.89 1846.88,1213.89 1847.47,1213.89 1848.05,1213.89 1848.64,1213.89 1849.22,1213.89 1849.81,1213.89 1850.4,1213.89 1850.98,1213.89 1851.57,1213.89 1852.16,1213.89 1852.74,1213.89 1853.33,1213.89 1853.92,1213.89 1854.5,1213.89 1855.09,1213.89 1855.68,1213.89 1856.26,1213.89 1856.85,1213.89 1857.43,1213.89 1858.02,1213.89 1858.61,1213.89 1859.19,1213.89 1859.78,1213.89 1860.37,1213.89 1860.95,1213.89 1861.54,1213.89 1862.13,1213.89 1862.71,1213.89 1863.3,1213.89 1863.88,1213.89 1864.47,1213.89 1865.06,1213.89 1865.64,1213.89 1866.23,1213.89 1866.82,1213.89 1867.4,1213.89 1867.99,1213.89 1868.58,1213.89 1869.16,1213.89 1869.75,1213.89 1870.34,1213.89 1870.92,1213.89 1871.51,1213.89 1872.09,1213.89 1872.68,1213.89 1873.27,1213.89 1873.85,1213.89 1874.44,1213.89 1875.03,1213.89 1875.61,1213.89 1876.2,1213.89 1876.79,1213.89 1877.37,1213.89 1877.96,1213.89 1878.55,1213.89 1879.13,1213.89 1879.72,1213.89 1880.3,1213.89 1880.89,1213.89 1881.48,1213.89 1882.06,1213.89 1882.65,1213.89 1883.24,1213.89 1883.82,1213.89 1884.41,1213.89 1885,1213.89 1885.58,1213.89 1886.17,1213.89 1886.76,1213.89 1887.34,1213.89 1887.93,1213.89 1888.51,1213.89 1889.1,1213.89 1889.69,1213.89 1890.27,1213.89 1890.86,1213.89 1891.45,1213.89 1892.03,1213.89 1892.62,1213.89 1893.21,1213.89 1893.79,1213.89 1894.38,1213.89 1894.96,1213.89 1895.55,1213.89 1896.14,1213.89 1896.72,1213.89 1897.31,1213.89 1897.9,1213.89 1898.48,1213.89 1899.07,1213.89 1899.66,1213.89 1900.24,1213.89 1900.83,1213.89 1901.42,1213.89 1902,1213.89 1902.59,1213.89 1903.17,1213.89 1903.76,1213.89 1904.35,1213.89 1904.93,1213.89 1905.52,1213.89 1906.11,1213.89 1906.69,1213.89 1907.28,1213.89 1907.87,1213.89 1908.45,1213.89 1909.04,1213.89 1909.63,1213.89 1910.21,1213.89 1910.8,1213.89 1911.38,1213.89 1911.97,1213.89 1912.56,1213.89 1913.14,1213.89 1913.73,1213.89 1914.32,1213.89 1914.9,1213.89 1915.49,1213.89 1916.08,1213.89 1916.66,1213.89 1917.25,1213.89 1917.83,1213.89 1918.42,1213.89 1919.01,1213.89 1919.59,1213.89 1920.18,1213.89 1920.77,1213.89 1921.35,1213.89 1921.94,1213.89 1922.53,1213.89 1923.11,1213.89 1923.7,1213.89 1924.29,1213.89 1924.87,1213.89 1925.46,1213.89 1926.04,1213.89 1926.63,1213.89 1927.22,1213.89 1927.8,1213.89 1928.39,1213.89 1928.98,1213.89 1929.56,1213.89 1930.15,1213.89 1930.74,1213.89 1931.32,1213.89 1931.91,1213.89 1932.5,1213.89 1933.08,1213.89 1933.67,1213.89 1934.25,1213.89 1934.84,1213.89 1935.43,1213.89 1936.01,1213.89 1936.6,1213.89 1937.19,1213.89 1937.77,1213.89 1938.36,1213.89 1938.95,1213.89 1939.53,1213.89 1940.12,1213.89 1940.71,1213.89 1941.29,1213.89 1941.88,1213.89 1942.46,1213.89 1943.05,1213.89 1943.64,1213.89 1944.22,1213.89 1944.81,1213.89 1945.4,1213.89 1945.98,1213.89 1946.57,1213.89 1947.16,1213.89 1947.74,1213.89 1948.33,1213.89 1948.91,1213.89 1949.5,1213.89 1950.09,1213.89 1950.67,1213.89 1951.26,1213.89 1951.85,1213.89 1952.43,1213.89 1953.02,1213.89 1953.61,1213.89 1954.19,1213.89 1954.78,1213.89 1955.37,1213.89 1955.95,1213.89 1956.54,1213.89 1957.12,1213.89 1957.71,1213.89 1958.3,1213.89 1958.88,1213.89 1959.47,1213.89 1960.06,1213.89 1960.64,1213.89 1961.23,1213.89 1961.82,1213.89 1962.4,1213.89 1962.99,1213.89 1963.58,1213.89 1964.16,1213.89 1964.75,1213.89 1965.33,1213.89 1965.92,1213.89 1966.51,1213.89 1967.09,1213.89 1967.68,1213.89 1968.27,1213.89 1968.85,1213.89 1969.44,1213.89 1970.03,1213.89 1970.61,1213.89 1971.2,1213.89 1971.78,1213.89 1972.37,1213.89 1972.96,1213.89 1973.54,1213.89 1974.13,1213.89 1974.72,1213.89 1975.3,1213.89 1975.89,1213.89 1976.48,1213.89 1977.06,1213.89 1977.65,1213.89 1978.24,1213.89 1978.82,1213.89 1979.41,1213.89 1979.99,1213.89 1980.58,1213.89 1981.17,1213.89 1981.75,1213.89 1982.34,1213.89 1982.93,1213.89 1983.51,1213.89 1984.1,1213.89 1984.69,1213.89 1985.27,1213.89 1985.86,1213.89 1986.45,1213.89 1987.03,1213.89 1987.62,1213.89 1988.2,1213.89 1988.79,1213.89 1989.38,1213.89 1989.96,1213.89 1990.55,1213.89 1991.14,1213.89 1991.72,1213.89 1992.31,1213.89 1992.9,1213.89 1993.48,1213.89 1994.07,1213.89 1994.65,1213.89 1995.24,1213.89 1995.83,1213.89 1996.41,1213.89 1997,1213.89 1997.59,1213.89 1998.17,1213.89 1998.76,1213.89 1999.35,1213.89 1999.93,1213.89 2000.52,1213.89 2001.11,1213.89 2001.69,1213.89 2002.28,1213.89 2002.86,1213.89 2003.45,1213.89 2004.04,1213.89 2004.62,1213.89 2005.21,1213.89 2005.8,1213.89 2006.38,1213.89 2006.97,1213.89 2007.56,1213.89 2008.14,1213.89 2008.73,1213.89 2009.32,1213.89 2009.9,1213.89 2010.49,1213.89 2011.07,1213.89 2011.66,1213.89 2012.25,1213.89 2012.83,1213.89 2013.42,1213.89 2014.01,1213.89 2014.59,1213.89 2015.18,1213.89 2015.77,1213.89 2016.35,1213.89 2016.94,1213.89 2017.53,1213.89 2018.11,1213.89 2018.7,1213.89 2019.28,1213.89 2019.87,1213.89 2020.46,1213.89 2021.04,1213.89 2021.63,1213.89 2022.22,1213.89 2022.8,1213.89 2023.39,1213.89 2023.98,1213.89 2024.56,1213.89 2025.15,1213.89 2025.73,1213.89 2026.32,1213.89 2026.91,1213.89 2027.49,1213.89 2028.08,1213.89 2028.67,1213.89 2029.25,1213.89 2029.84,1213.89 2030.43,1213.89 2031.01,1213.89 2031.6,1213.89 2032.19,1213.89 2032.77,1213.89 2033.36,1213.89 2033.94,1213.89 2034.53,1213.89 2035.12,1213.89 2035.7,1213.89 2036.29,1213.89 2036.88,1213.89 2037.46,1213.89 2038.05,1213.89 2038.64,1213.89 2039.22,1213.89 2039.81,1213.89 2040.4,1213.89 2040.98,1213.89 2041.57,1213.89 2042.15,1213.89 2042.74,1213.89 2043.33,1213.89 2043.91,1213.89 2044.5,1213.89 2045.09,1213.89 2045.67,1213.89 2046.26,1213.89 2046.85,1213.89 2047.43,1213.89 2048.02,1213.89 2048.6,1213.89 2049.19,1213.89 2049.78,1213.89 2050.36,1213.89 2050.95,1213.89 2051.54,1213.89 2052.12,1213.89 2052.71,1213.89 2053.3,1213.89 2053.88,1213.89 2054.47,1213.89 2055.06,1213.89 2055.64,1213.89 2056.23,1213.89 2056.81,1213.89 2057.4,1213.89 2057.99,1213.89 2058.57,1213.89 2059.16,1213.89 2059.75,1213.89 2060.33,1213.89 2060.92,1213.89 2061.51,1213.89 2062.09,1213.89 2062.68,1213.89 2063.27,1213.89 2063.85,1213.89 2064.44,1213.89 2065.02,1213.89 2065.61,1213.89 2066.2,1213.89 2066.78,1213.89 2067.37,1213.89 2067.96,1213.89 2068.54,1213.89 2069.13,1213.89 2069.72,1213.89 2070.3,1213.89 2070.89,1213.89 2071.48,1213.89 2072.06,1213.89 2072.65,1213.89 2073.23,1213.89 2073.82,1213.89 2074.41,1213.89 2074.99,1213.89 2075.58,1213.89 2076.17,1213.89 2076.75,1213.89 2077.34,1213.89 2077.93,1213.89 2078.51,1213.89 2079.1,1213.89 2079.68,1213.89 2080.27,1213.89 2080.86,1213.89 2081.44,1213.89 2082.03,1213.89 2082.62,1213.89 2083.2,1213.89 2083.79,1213.89 2084.38,1213.89 2084.96,1213.89 2085.55,1213.89 2086.14,1213.89 2086.72,1213.89 2087.31,1213.89 2087.89,1213.89 2088.48,1213.89 2089.07,1213.89 2089.65,1213.89 2090.24,1213.89 2090.83,1213.89 2091.41,1213.89 2092,1213.89 2092.59,1213.89 2093.17,1213.89 2093.76,1213.89 2094.35,1213.89 2094.93,1213.89 2095.52,1213.89 2096.1,1213.89 2096.69,1213.89 2097.28,1213.89 2097.86,1213.89 2098.45,1213.89 2099.04,1213.89 2099.62,1213.89 2100.21,1213.89 2100.8,1213.89 2101.38,1213.89 2101.97,1213.89 2102.55,1213.89 2103.14,1213.89 2103.73,1213.89 2104.31,1213.89 2104.9,1213.89 2105.49,1213.89 2106.07,1213.89 2106.66,1213.89 2107.25,1213.89 2107.83,1213.89 2108.42,1213.89 2109.01,1213.89 2109.59,1213.89 2110.18,1213.89 2110.76,1213.89 2111.35,1213.89 2111.94,1213.89 2112.52,1213.89 2113.11,1213.89 2113.7,1213.89 2114.28,1213.89 2114.87,1213.89 2115.46,1213.89 2116.04,1213.89 2116.63,1213.89 2117.22,1213.89 2117.8,1213.89 2118.39,1213.89 2118.97,1213.89 2119.56,1213.89 2120.15,1213.89 2120.73,1213.89 2121.32,1213.89 2121.91,1213.89 2122.49,1213.89 2123.08,1213.89 2123.67,1213.89 2124.25,1213.89 2124.84,1213.89 2125.42,1213.89 2126.01,1213.89 2126.6,1213.89 2127.18,1213.89 2127.77,1213.89 2128.36,1213.89 2128.94,1213.89 2129.53,1213.89 2130.12,1213.89 2130.7,1213.89 2131.29,1213.89 2131.88,1213.89 2132.46,1213.89 2133.05,1213.89 2133.63,1213.89 2134.22,1213.89 2134.81,1213.89 2135.39,1213.89 2135.98,1213.89 2136.57,1213.89 2137.15,1213.89 2137.74,1213.89 2138.33,1213.89 2138.91,1213.89 2139.5,1213.89 2140.09,1213.89 2140.67,1213.89 2141.26,1213.89 2141.84,1213.89 2142.43,1213.89 2143.02,1213.89 2143.6,1213.89 2144.19,1213.89 2144.78,1213.89 2145.36,1213.89 2145.95,1213.89 2146.54,1213.89 2147.12,1213.89 2147.71,1213.89 2148.3,1213.89 2148.88,1213.89 2149.47,1213.89 2150.05,1213.89 2150.64,1213.89 2151.23,1213.89 2151.81,1213.89 2152.4,1213.89 2152.99,1213.89 2153.57,1213.89 2154.16,1213.89 2154.75,1213.89 2155.33,1213.89 2155.92,1213.89 2156.5,1213.89 2157.09,1213.89 2157.68,1213.89 2158.26,1213.89 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.03,1195.85 1398.98,899.083 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1231.59 985.439,1195.85 2158.26,1195.85 2158.26,1231.59 985.439,1231.59 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip763\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip763)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1456.43 162.114,-2734.14 162.673,-3960.84 163.232,-5084.95 163.792,-6064.69 164.351,-6985.5 164.91,-7845.07 165.469,-8582.72 166.029,-9272.22 166.588,-9895.64 167.147,-8407.71 167.706,-8987.04 168.266,-9526.1 168.825,-10008.9 169.384,-10439.1 169.943,-10820.2 170.503,-10443.4 171.062,-10765.4 171.621,-11032.8 172.18,-10697.5 172.74,-10944.7 173.299,-11146.6 173.858,-11324.6 174.417,-11471.4 174.977,-11162.2 175.536,-10877.8 176.095,-10965.8 176.655,-11005.6 177.214,-11041.8 177.773,-11055.2 178.332,-10763.7 178.892,-10739.6 179.451,-10703.9 180.01,-10651.9 180.569,-10589.3 181.129,-10103.5 181.688,-10029.6 182.247,-9768.01 182.806,-9676.14 183.366,-9569.89 183.925,-9297.9 184.484,-9042.08 185.043,-8788.93 185.603,-8673.59 186.162,-8426.96 186.721,-8305.21 187.28,-8068.79 187.84,-7527.8 188.399,-7315.44 188.958,-7009.93 189.517,-6820.01 190.077,-6547.33 190.636,-6362.2 191.195,-6034.66 191.754,-5872.16 192.314,-5781.86 192.873,-5695.29 193.432,-5399.98 193.991,-5311.08 194.551,-5100.22 195.11,-4955.24 195.669,-4756.72 196.228,-4616.6 196.788,-4527.41 197.347,-4331.81 197.906,-3992.28 198.465,-3771.57 199.025,-3699.91 199.584,-3577.85 200.143,-3413.82 200.702,-3293.29 201.262,-3218.77 201.821,-3112.38 202.38,-3047.14 202.939,-2936.19 203.499,-2835.21 204.058,-2694 204.617,-2556.32 205.176,-2493.72 205.736,-2259.98 206.295,-2208.63 206.854,-2116.99 207.413,-2066.8 207.973,-1948.34 208.532,-1891.08 209.091,-1776.5 209.65,-1698.98 210.21,-1649.87 210.769,-1539.17 211.328,-1430.91 211.887,-1358.6 212.447,-1257.36 213.006,-1163.57 213.565,-1098.42 214.124,-1034.01 214.684,-921.631 215.243,-840.252 215.802,-756.258 216.361,-700.764 216.921,-596.496 217.48,-545.215 218.039,-515.801 218.598,-494.069 219.158,-471.234 219.717,-397.636 220.276,-371.329 220.835,-347.664 221.395,-296.966 221.954,-230.908 222.513,-182.633 223.072,-141.394 223.632,-76.5602 224.191,-34.8638 224.75,48.8685 225.309,82.698 225.869,94.7239 226.428,151.975 226.987,206.543 227.546,196.83 228.106,228.301 228.665,259.382 229.224,350.9 229.783,355.046 230.343,358.696 230.902,466.576 231.461,469.907 232.02,488.059 232.58,529.403 233.139,568.398 233.698,568.357 234.257,573.349 234.817,594.634 235.376,647.308 235.935,665.757 236.494,683.163 237.054,679.963 237.613,697.24 238.172,677.839 238.731,678.022 239.291,736.588 239.85,732.759 240.409,737.355 240.968,722.557 241.528,739.718 242.087,737.123 242.646,776.016 243.205,774.367 243.765,810.786 244.324,810.387 244.883,828.437 245.442,794.681 246.002,831.853 246.561,829.245 247.12,828.438 247.679,897.018 248.239,949.451 248.798,981.424 249.357,993.686 249.916,932.431 250.476,926.447 251.035,923.162 251.594,935.394 252.153,948.479 252.713,978.569 253.272,971.722 253.831,998.048 254.39,989.311 254.95,982.466 255.509,1011.91 256.068,1004.43 256.627,1014.47 257.187,1027.34 257.746,1040.41 258.305,1082.77 258.864,1108.96 259.424,1080.48 259.983,1090.27 260.542,1080.59 261.101,1055.45 261.661,1050.43 262.22,1065.11 262.779,1057.64 263.338,1044.83 263.898,1055.78 264.457,1046.56 265.016,1024.22 265.575,1067.34 266.135,1109.69 266.694,1085.46 267.253,1094.33 267.812,1050.51 268.372,1061.72 268.931,1104.65 269.49,1079.56 270.049,1069.44 270.609,1026.73 271.168,1008.6 271.727,1007.54 272.286,989.803 272.846,985.831 273.405,984.716 273.964,1018.6 274.523,1012.41 275.083,1027.71 275.642,1004.63 276.201,986.309 276.76,949.778 277.32,945.75 277.879,980.269 278.438,1013.46 278.997,1044.31 279.557,1022.84 280.116,1020.44 280.675,1014.16 281.234,1027.87 281.794,1023.92 282.353,1056.69 282.912,1065.6 283.471,1089.11 284.031,1080.04 284.59,1071.1 285.149,1063.16 285.708,1103.7 286.268,1093.15 286.827,1054 287.386,1050.89 287.945,1027.46 288.505,1005.5 289.064,999.714 289.623,1008.26 290.182,1051.59 290.742,1058.68 291.301,1087.35 291.86,1080.04 292.419,1073.18 292.979,1113.27 293.538,1130.64 294.097,1070.74 294.656,1082.36 295.216,1071.67 295.775,1062.62 296.334,1084.81 296.893,1075.05 297.453,1069.35 298.012,1092.44 298.571,1081.56 299.13,1074.28 299.69,1064.8 300.249,1055.92 300.808,1046.99 301.368,1041.42 301.927,1035.41 302.486,1040.82 303.045,1033.05 303.605,1027.64 304.164,1036.04 304.723,1015.2 305.282,1061.74 305.842,1082.84 306.401,1120.2 306.96,1091.63 307.519,1116.05 308.079,1120.8 308.638,1111.59 309.197,1116.46 309.756,1088.33 310.316,1060.83 310.875,1035.74 311.434,995.354 311.993,1022.22 312.553,1015.55 313.112,1025.26 313.671,1017.5 314.23,981.129 314.79,991.052 315.349,968.139 315.908,913.654 316.467,941.534 317.027,954.105 317.586,986.398 318.145,998.947 318.704,958.812 319.264,954.758 319.823,936.325 320.382,935.703 320.941,930.772 321.501,926.441 322.06,919.357 322.619,896.916 323.178,912.036 323.738,908.133 324.297,923.182 324.856,900.354 325.415,930.771 325.975,928.412 326.534,910.747 327.093,873.153 327.652,872.777 328.212,874.561 328.771,870.22 329.33,855.644 329.889,872.304 330.449,872.539 331.008,904.673 331.567,887.497 332.126,853.409 332.686,853.193 333.245,854.054 333.804,854.967 334.363,854.397 334.923,871.057 335.482,868.854 336.041,862.083 336.6,861.649 337.16,897.515 337.719,912.338 338.278,908.635 338.837,870.685 339.397,850.955 339.956,867.359 340.515,865.584 341.074,815.611 341.634,851.224 342.193,896.761 342.752,910.99 343.311,955.052 343.871,965.045 344.43,975.699 344.989,953.122 345.548,962.395 346.108,923.615 346.667,900.583 347.226,910.763 347.785,924.976 348.345,952.447 348.904,914.039 349.463,909.429 350.022,907.391 350.582,919.398 351.141,899.77 351.7,911.444 352.259,906.527 352.819,889.172 353.378,933.256 353.937,945.294 354.496,922.594 355.056,931.347 355.615,922.598 356.174,884.581 356.733,862.581 357.293,845.758 357.852,843.175 358.411,840.226 358.97,822.73 359.53,822.071 360.089,839.827 360.648,821.186 361.207,822.066 361.767,821.758 362.326,789.226 362.885,788.052 363.444,789.067 364.004,776.03 364.563,775.258 365.122,779.09 365.681,781.118 366.241,765.819 366.8,757.062 367.359,796.206 367.918,795.421 368.478,829.937 369.037,813.733 369.596,831.664 370.155,827.437 370.715,825.666 371.274,828.008 371.833,824.049 372.392,856.63 372.952,872.926 373.511,853.255 374.07,849.314 374.629,846.324 375.189,842.883 375.748,840.107 376.307,858.467 376.866,855.908 377.426,838.474 377.985,787.298 378.544,804.931 379.103,788.954 379.663,789.762 380.222,805.488 380.781,820.024 381.34,789.604 381.9,792.145 382.459,812.007 383.018,829.655 383.577,842.534 384.137,821.016 384.696,818.858 385.255,815.149 385.814,813.384 386.374,829.425 386.933,830.165 387.492,858.983 388.051,836.615 388.611,837.949 389.17,836.081 389.729,815.503 390.288,812.208 390.848,839.26 391.407,835.685 391.966,833.574 392.525,848.45 393.085,859.438 393.644,889.096 394.203,916.596 394.762,923.18 395.322,901.137 395.881,914.506 396.44,908.936 396.999,919.515 397.559,928.81 398.118,955.463 398.677,929.79 399.236,919.578 399.796,893.736 400.355,885.935 400.914,878.319 401.473,889.843 402.033,869.668 402.592,863.637 403.151,890.859 403.71,882.957 404.27,860.056 404.829,858.187 405.388,857.611 405.947,819.065 406.507,798.483 407.066,767.762 407.625,783.44 408.184,780.307 408.744,794.502 409.303,798.561 409.862,814.815 410.421,798.138 410.981,783.237 411.54,818.076 412.099,830.839 412.658,844.622 413.218,841.396 413.777,834.942 414.336,814.623 414.895,811.525 415.455,808.779 416.014,789.335 416.573,790.439 417.132,739.163 417.692,738.556 418.251,756.335 418.81,753.949 419.369,741.259 419.929,741.497 420.488,725.11 421.047,726.859 421.606,728.972 422.166,715.064 422.725,731.801 423.284,735.514 423.843,752.423 424.403,753.193 424.962,736.489 425.521,740.419 426.08,760.525 426.64,794.932 427.199,826.121 427.758,838.217 428.318,833.378 428.877,847.15 429.436,860.775 429.995,905.582 430.555,896.786 431.114,875.072 431.673,902.979 432.232,926.409 432.792,918.683 433.351,915.978 433.91,904.487 434.469,878.591 435.029,871.743 435.588,867.392 436.147,861.577 436.706,839.241 437.266,818.753 437.825,829.579 438.384,827.457 438.943,841.113 439.503,834.282 440.062,843.332 440.621,838.005 441.18,770.892 441.74,770.492 442.299,784.247 442.858,762.922 443.417,758.711 443.977,759.979 444.536,758.984 445.095,771.899 445.654,754.95 446.214,754.97 446.773,755.85 447.332,742.695 447.891,744.477 448.451,727.67 449.01,762.267 449.569,774.088 450.128,793.099 450.688,805.59 451.247,805.497 451.806,800.227 452.365,765.925 452.925,780.075 453.484,759.875 454.043,745.049 454.602,779.703 455.162,776.524 455.721,742.581 456.28,790.299 456.839,786.708 457.399,801.403 457.958,813.535 458.517,811.241 459.076,838.731 459.636,831.369 460.195,857.244 460.754,852.41 461.313,866.389 461.873,828.445 462.432,823.342 462.991,834.408 463.55,814.618 464.11,813.287 464.669,794.493 465.228,789.508 465.787,799.196 466.347,794.128 466.906,773.381 467.465,818.03 468.024,794.454 468.584,790.44 469.143,770.151 469.702,766.085 470.261,747.395 470.821,764.51 471.38,714.086 471.939,699.667 472.498,652.296 473.058,656.176 473.617,647.05 474.176,670.093 474.735,708.705 475.295,697.353 475.854,699.685 476.413,701.871 476.972,753.03 477.532,754.171 478.091,758.289 478.65,772.715 479.209,801.526 479.769,799.133 480.328,810.809 480.887,806.92 481.446,803.014 482.006,782.646 482.565,795.248 483.124,785.603 483.683,765.256 484.243,797.228 484.802,826.071 485.361,826.546 485.92,821.681 486.48,832.367 487.039,827.576 487.598,841.376 488.157,815.502 488.717,811.569 489.276,824.244 489.835,803.573 490.394,767.849 490.954,781.871 491.513,793.424 492.072,793.486 492.631,788.167 493.191,771.535 493.75,784.754 494.309,763.44 494.868,762.204 495.428,792.247 495.987,788.905 496.546,770.727 497.105,748.231 497.665,746.865 498.224,743.648 498.783,729.275 499.342,695.15 499.902,712.706 500.461,727.073 501.02,724.771 501.579,724.394 502.139,739.568 502.698,723.674 503.257,743.4 503.816,758.713 504.376,759.588 504.935,756.677 505.494,755.39 506.053,756.48 506.613,787.752 507.172,803.509 507.731,797.284 508.29,778.67 508.85,725.761 509.409,727.722 509.968,714.969 510.527,732.289 511.087,745.295 511.646,729.252 512.205,694.909 512.764,677.855 513.324,665.946 513.883,655.314 514.442,642.858 515.001,601.22 515.561,572.947 516.12,581.345 516.679,588.266 517.238,576.4 517.798,583.082 518.357,620.386 518.916,641.747 519.475,662.675 520.035,695.554 520.594,731.33 521.153,732.851 521.712,765.767 522.272,781.425 522.831,795.75 523.39,841.473 523.949,836.007 524.509,797.017 525.068,791.966 525.627,789.566 526.186,754.822 526.746,752.173 527.305,751.259 527.864,767.931 528.423,747.332 528.983,712.932 529.542,726.943 530.101,740.611 530.66,753.754 531.22,767.424 531.779,764.586 532.338,796.611 532.897,808.667 533.457,791.879 534.016,769.463 534.575,752.805 535.134,767.09 535.694,781.312 536.253,779.222 536.812,775.559 537.371,771.988 537.931,773.144 538.49,769.785 539.049,784.428 539.608,797.211 540.168,759.61 540.727,754.07 541.286,797.479 541.845,778.04 542.405,725.912 542.964,742.445 543.523,726.335 544.082,743.06 544.642,759.426 545.201,759.255 545.76,710.489 546.319,707.854 546.879,722.398 547.438,719.669 547.997,752.764 548.556,767.521 549.116,748.27 549.675,794.954 550.234,755.858 550.793,737.679 551.353,734.736 551.912,750.159 552.471,762.914 553.031,730.589 553.59,745.857 554.149,758.497 554.708,759.387 555.268,772.392 555.827,756.047 556.386,740.55 556.945,739.763 557.505,725.452 558.064,737.854 558.623,717.821 559.182,722.163 559.742,721.889 560.301,755.722 560.86,738.15 561.419,736.158 561.979,721.19 562.538,704.915 563.097,689.045 563.656,673.6 564.216,688.48 564.775,755.131 565.334,736.072 565.893,736.646 566.453,764.867 567.012,795.159 567.571,759.1 568.13,771.062 568.69,703.202 569.249,654.412 569.808,654.674 570.367,674.037 570.927,641.336 571.486,724.806 572.045,771.252 572.604,799.212 573.164,824.381 573.723,818.253 574.282,829.45 574.841,826.333 575.401,803.014 575.96,797.289 576.519,778.189 577.078,757.449 577.638,753.265 578.197,794.915 578.756,777.516 579.315,775.605 579.875,806.769 580.434,784.35 580.993,782.965 581.552,758.23 582.112,771.386 582.671,787.179 583.23,784.75 583.789,765.587 584.349,748.847 584.908,731.854 585.467,726.558 586.026,726.549 586.586,725.538 587.145,705.557 587.704,703.971 588.263,753.863 588.823,752.577 589.382,733.33 589.941,728.994 590.5,727.778 591.06,712.053 591.619,728.886 592.178,709.146 592.737,692.45 593.297,756.581 593.856,734.687 594.415,704.123 594.974,705.973 595.534,689.001 596.093,708.372 596.652,694.373 597.211,680.008 597.771,697.507 598.33,682.478 598.889,686.014 599.448,716.58 600.008,765.329 600.567,749.245 601.126,716.144 601.685,715.792 602.245,681.409 602.804,697.215 603.363,682.558 603.922,683.012 604.482,683.859 605.041,653.041 605.6,670.383 606.159,703.923 606.719,700.081 607.278,686.956 607.837,687.441 608.396,720.803 608.956,752.227 609.515,766.181 610.074,744.239 610.633,779.033 611.193,777.095 611.752,757.375 612.311,739.144 612.87,722.234 613.43,704.24 613.989,706.678 614.548,681.165 615.107,699.778 615.667,747.086 616.226,682.326 616.785,681.591 617.344,685.414 617.904,652.522 618.463,641.813 619.022,632.58 619.581,632.896 620.141,602.993 620.7,591.741 621.259,599.002 621.818,638.587 622.378,660.256 622.937,677.48 623.496,694.157 624.055,678.614 624.615,678.462 625.174,615.779 625.733,669.144 626.292,687.221 626.852,652.557 627.411,672.326 627.97,706.256 628.529,707.398 629.089,725.17 629.648,705.747 630.207,690.764 630.766,677.134 631.326,675.756 631.885,690.739 632.444,736.876 633.003,716.551 633.563,699.996 634.122,730.423 634.681,762.822 635.24,738.905 635.8,721.165 636.359,769.963 636.918,769.663 637.477,782.67 638.037,746.842 638.596,727.495 639.155,710.307 639.714,707.731 640.274,690.262 640.833,688.659 641.392,690.131 641.951,688.792 642.511,690.487 643.07,723.334 643.629,667.853 644.188,702.373 644.748,716.523 645.307,699.182 645.866,747.674 646.425,730.333 646.985,729.324 647.544,725.03 648.103,725.973 648.662,709.168 649.222,707.785 649.781,676.585 650.34,663.131 650.899,686.36 651.459,732.896 652.018,730.185 652.577,713.445 653.136,730.716 653.696,789.152 654.255,813.746 654.814,825.596 655.373,802.336 655.933,781.969 656.492,763.114 657.051,807.849 657.61,805.139 658.17,768.918 658.729,782.572 659.288,779.654 659.847,757.106 660.407,755.174 660.966,767.929 661.525,700.76 662.084,699.775 662.644,714.253 663.203,699.544 663.762,730.133 664.321,724.389 664.881,771.774 665.44,721.109 665.999,735.873 666.558,769.572 667.118,763.537 667.677,743.396 668.236,741.614 668.795,736.89 669.355,736.442 669.914,720.908 670.473,739.885 671.032,740.395 671.592,738.332 672.151,738.245 672.71,735.067 673.269,749.797 673.829,730.522 674.388,696.907 674.947,709.806 675.506,692.555 676.066,677.27 676.625,692.418 677.184,707.727 677.743,724.746 678.303,706.57 678.862,703.601 679.421,690.343 679.981,672.797 680.54,672.451 681.099,654.131 681.658,638.875 682.218,641.962 682.777,626.464 683.336,628.724 683.895,660.455 684.455,628.258 685.014,618.031 685.573,622.436 686.132,622.66 686.692,610.84 687.251,552.259 687.81,623.942 688.369,640.792 688.929,658.265 689.488,642.294 690.047,661.04 690.606,678.344 691.166,632.435 691.725,618.287 692.284,638.749 692.843,642.901 693.403,614.876 693.962,638.442 694.521,626.528 695.08,629.58 695.64,635.011 696.199,637.688 696.758,611.544 697.317,632.026 697.877,653.191 698.436,638.503 698.995,658.03 699.554,661.05 700.114,659.423 700.673,662.974 701.232,650.586 701.791,685.527 702.351,701.77 702.91,699.932 703.469,701.47 704.028,701.679 704.588,718.909 705.147,736.723 705.706,733.731 706.265,700.315 706.825,715.147 707.384,715.6 707.943,730.459 708.502,726.366 709.062,705.743 709.621,738.97 710.18,722.604 710.739,658.294 711.299,595.568 711.858,632.115 712.417,599.709 712.976,605.289 713.536,595.417 714.095,597.931 714.654,606.045 715.213,642.097 715.773,660.238 716.332,612.665 716.891,633.718 717.45,625.289 718.01,628.638 718.569,617.088 719.128,637.598 719.687,638.387 720.247,610.589 720.806,617.09 721.365,605.71 721.924,623.515 722.484,648.022 723.043,669.729 723.602,667.49 724.161,700.542 724.721,667.165 725.28,655.221 725.839,637.761 726.398,638.145 726.958,642.268 727.517,628.066 728.076,650.742 728.635,700.66 729.195,684.665 729.754,684.532 730.313,667.046 730.872,668.666 731.432,625.108 731.991,595.032 732.55,601.97 733.109,606.145 733.669,594.62 734.228,597.182 734.787,635.678 735.346,638.737 735.906,610.641 736.465,626.634 737.024,630.497 737.583,664.147 738.143,665.467 738.702,650.709 739.261,619.377 739.82,590.871 740.38,615.078 740.939,618.697 741.498,626.32 742.057,677.544 742.617,679.424 743.176,697.725 743.735,677.692 744.294,679.739 744.854,697.718 745.413,699.354 745.972,699.911 746.531,717.577 747.091,747.912 747.65,776.233 748.209,805.752 748.768,782.371 749.328,775.484 749.887,784.04 750.446,783.819 751.005,747.176 751.565,725.144 752.124,724.124 752.683,755.348 753.242,767.134 753.802,765.828 754.361,781.358 754.92,762.22 755.479,774.298 756.039,768.625 756.598,766.306 757.157,809.943 757.716,835.632 758.276,793.654 758.835,770.744 759.394,765.639 759.953,743.112 760.513,722.214 761.072,654.477 761.631,621.026 762.19,641.589 762.75,662.504 763.309,662.789 763.868,680.43 764.427,696.264 764.987,665.146 765.546,665.508 766.105,665.422 766.664,649.93 767.224,669.012 767.783,670.72 768.342,639.896 768.901,641.989 769.461,629.913 770.02,631.912 770.579,636.466 771.138,640.203 771.698,658.149 772.257,675.204 772.816,676.362 773.375,691.758 773.935,697.137 774.494,680.284 775.053,665.961 775.612,697.75 776.172,694.008 776.731,709.199 777.29,704.358 777.849,703.813 778.409,722.777 778.968,768.32 779.527,763.643 780.086,743.415 780.646,757.584 781.205,754.328 781.764,764.501 782.323,742.834 782.883,754.24 783.442,721.351 784.001,751.582 784.56,748.16 785.12,746.21 785.679,744.338 786.238,776.671 786.797,758.548 787.357,741.53 787.916,721.099 788.475,731.873 789.034,746.215 789.594,743.406 790.153,758.175 790.712,755.766 791.271,765.904 791.831,776.833 792.39,772.394 792.949,766.668 793.508,808.123 794.068,749.532 794.627,717.36 795.186,716.444 795.745,717.497 796.305,732.786 796.864,765.638 797.423,776.89 797.982,757.417 798.542,737.069 799.101,714.158 799.66,697.882 800.219,715.656 800.779,714.562 801.338,713.48 801.897,713.518 802.456,743.35 803.016,738.68 803.575,719.774 804.134,733.879 804.693,730.923 805.253,709.372 805.812,723.988 806.371,706.339 806.931,704.823 807.49,704.014 808.049,685.959 808.608,714.318 809.168,709.143 809.727,708.016 810.286,725.034 810.845,754.253 811.405,733.385 811.964,731.552 812.523,696.682 813.082,711.726 813.642,711.903 814.201,710.481 814.76,739.303 815.319,738.844 815.879,752.871 816.438,762.289 816.997,759.708 817.556,783.091 818.116,776.587 818.675,788.471 819.234,788.415 819.793,801.467 820.353,809.653 820.912,818.453 821.471,782.107 822.03,819.708 822.59,747.251 823.149,756.792 823.708,740.78 824.267,721.701 824.827,686.082 825.386,683.812 825.945,716.506 826.504,715.945 827.064,731.554 827.623,743.885 828.182,736.844 828.741,778.526 829.301,788.293 829.86,768.138 830.419,750.394 830.978,743.793 831.538,709.758 832.097,706.142 832.656,653.866 833.215,670.504 833.775,669.172 834.334,606.66 834.893,608.829 835.452,611.37 836.012,629.595 836.571,633.369 837.13,634.211 837.689,621.874 838.249,608.866 838.808,577.461 839.367,583.248 839.926,592.254 840.486,594.569 841.045,583.162 841.604,572.455 842.163,547.716 842.723,554.481 843.282,560.944 843.841,566.191 844.4,568.4 844.96,573.581 845.519,547.324 846.078,522.59 846.637,528.587 847.197,540.903 847.756,535.317 848.315,529.61 848.874,524.349 849.434,534.328 849.993,539.74 850.552,550.274 851.111,580.325 851.671,592.436 852.23,613.16 852.789,637.875 853.348,658.686 853.908,679.258 854.467,700.783 855.026,682.376 855.585,681.146 856.145,665.689 856.704,651.672 857.263,623.301 857.822,611.88 858.382,602.918 858.941,591.625 859.5,580.016 860.059,604.123 860.619,595.299 861.178,603.154 861.737,560.145 862.296,599.634 862.856,574.769 863.415,629.235 863.974,649.789 864.533,635.886 865.093,644.87 865.652,630.886 866.211,635.667 866.77,624.436 867.33,610.544 867.889,631.837 868.448,634.047 869.007,623.262 869.567,630.748 870.126,588.026 870.685,626.188 871.244,680.557 871.804,651.041 872.363,653.862 872.922,689.963 873.481,690.998 874.041,674.715 874.6,658.984 875.159,676.322 875.718,693.594 876.278,708.916 876.837,708.948 877.396,706.277 877.955,706.682 878.515,707.763 879.074,771.681 879.633,781.871 880.192,761.084 880.752,742.277 881.311,756.191 881.87,770.035 882.429,765.239 882.989,758.487 883.548,769.561 884.107,747.397 884.666,726.586 885.226,742.409 885.785,740.887 886.344,738.516 886.903,720.942 887.463,754.206 888.022,734.462 888.581,683.249 889.14,652.087 889.7,652.923 890.259,638.744 890.818,674.24 891.377,674.207 891.937,708.557 892.496,721.539 893.055,719.947 893.614,700.2 894.174,695.685 894.733,696.41 895.292,698.909 895.851,681.495 896.411,685.122 896.97,732.504 897.529,712.913 898.088,676.856 898.648,691.901 899.207,672.494 899.766,657.872 900.325,640.749 900.885,658.575 901.444,677.566 902.003,709.785 902.562,757.046 903.122,739.444 903.681,751.297 904.24,729.817 904.799,758.641 905.359,767.606 905.918,782.577 906.477,794.753 907.036,771.627 907.596,801.267 908.155,809.078 908.714,801.393 909.273,812.99 909.833,792.659 910.392,819.536 910.951,824.368 911.51,751.522 912.07,777.849 912.629,771.513 913.188,764.578 913.747,759.318 914.307,804.73 914.866,785.045 915.425,748.818 915.984,663.071 916.544,662.536 917.103,664.123 917.662,647.296 918.221,631.828 918.781,618.041 919.34,638.729 919.899,613.374 920.458,617.805 921.018,636.698 921.577,651.422 922.136,639.421 922.695,672.926 923.255,651.871 923.814,686.287 924.373,686.44 924.932,653.903 925.492,669.453 926.051,654.369 926.61,639.873 927.169,643.545 927.729,595.187 928.288,617.487 928.847,620.611 929.406,638.81 929.966,627.583 930.525,611.437 931.084,630.195 931.644,645.659 932.203,646.995 932.762,665.566 933.321,648.766 933.881,654.189 934.44,622.683 934.999,655.336 935.558,656.224 936.118,657.677 936.677,677.159 937.236,692.886 937.795,704.442 938.355,704.767 938.914,689.111 939.473,689.354 940.032,705.45 940.592,708.036 941.151,707.894 941.71,724.142 942.269,734.029 942.829,714.369 943.388,713.005 943.947,714.649 944.506,728.75 945.066,696.199 945.625,709.766 946.184,727.134 946.743,738.806 947.303,721.68 947.862,686.127 948.421,685.078 948.98,683.414 949.54,650.137 950.099,653.942 950.658,671.891 951.217,671.802 951.777,661.081 952.336,662.259 952.895,681.11 953.454,697.632 954.014,666.063 954.573,663.148 955.132,696.148 955.691,695.168 956.251,659.2 956.81,642.35 957.369,623.899 957.928,628.271 958.488,616.815 959.047,622.897 959.606,646.73 960.165,687.886 960.725,700.353 961.284,681.9 961.843,647.668 962.402,635.744 962.962,623.662 963.521,691.343 964.08,693.068 964.639,694.325 965.199,710.183 965.758,725.435 966.317,725.384 966.876,721.697 967.436,704.485 967.995,734.278 968.554,731.354 969.113,759.597 969.673,738.373 970.232,734.623 970.791,731.945 971.35,714.468 971.91,715.507 972.469,698.098 973.028,682.242 973.587,683.52 974.147,684.211 974.706,667.61 975.265,714.151 975.824,696.728 976.384,681.511 976.943,729.837 977.502,730.614 978.061,712.264 978.621,694.846 979.18,663.3 979.739,679.796 980.298,678.495 980.858,663.831 981.417,667.944 981.976,650.734 982.535,665.884 983.095,652.139 983.654,719.703 984.213,718.689 984.772,702.933 985.332,719.493 985.891,705.372 986.45,699.829 987.009,683.438 987.569,681.425 988.128,646.849 988.687,646.863 989.246,648.971 989.806,620.411 990.365,657.537 990.924,729.117 991.483,678.973 992.043,681.643 992.602,665.956 993.161,631.172 993.72,633.182 994.28,669.639 994.839,673.405 995.398,688.625 995.957,723.991 996.517,736.052 997.076,716.167 997.635,696.334 998.194,683.129 998.754,715.968 999.313,703.731 999.872,734.943 1000.43,732.48 1000.99,760.819 1001.55,737.917 1002.11,767.437 1002.67,680.382 1003.23,616.718 1003.79,588.103 1004.35,591.793 1004.91,530.843 1005.46,540.923 1006.02,549.395 1006.58,555.558 1007.14,549.447 1007.7,529.053 1008.26,539.097 1008.82,549.624 1009.38,606.787 1009.94,611.134 1010.5,647.195 1011.06,653.134 1011.62,669.096 1012.18,701.839 1012.73,715.079 1013.29,713.563 1013.85,697.055 1014.41,697.931 1014.97,679.404 1015.53,645.955 1016.09,630.813 1016.65,634.405 1017.21,636.304 1017.77,671.173 1018.33,641.2 1018.89,643.675 1019.45,629.341 1020.01,648.051 1020.56,667.824 1021.12,665.052 1021.68,699.844 1022.24,636.035 1022.8,671.509 1023.36,688.898 1023.92,721.263 1024.48,738.224 1025.04,721.052 1025.6,720.15 1026.16,686.531 1026.72,687.261 1027.28,671.395 1027.83,670.725 1028.39,627.085 1028.95,634.658 1029.51,622.193 1030.07,642.488 1030.63,646.65 1031.19,662.8 1031.75,681.444 1032.31,664.592 1032.87,648.724 1033.43,666.538 1033.99,713.99 1034.55,712.925 1035.1,757.104 1035.66,740.043 1036.22,718.556 1036.78,683.196 1037.34,651.066 1037.9,618.98 1038.46,621.373 1039.02,624.613 1039.58,627.934 1040.14,661.95 1040.7,645.771 1041.26,643.812 1041.82,609.468 1042.38,607.983 1042.93,578.258 1043.49,612.158 1044.05,598.003 1044.61,567.341 1045.17,555.66 1045.73,563.667 1046.29,636.952 1046.85,625.589 1047.41,655.41 1047.97,674.874 1048.53,689.937 1049.09,660.414 1049.65,674.739 1050.2,659.123 1050.76,658.047 1051.32,641.852 1051.88,674.192 1052.44,689.463 1053,657.647 1053.56,722.74 1054.12,705.844 1054.68,716.866 1055.24,730.947 1055.8,730.237 1056.36,757.457 1056.92,770.235 1057.48,720.098 1058.03,720.127 1058.59,717.995 1059.15,746.48 1059.71,710.466 1060.27,723.115 1060.83,734.538 1061.39,714.88 1061.95,730.582 1062.51,714.454 1063.07,697.903 1063.63,696.863 1064.19,678.734 1064.75,679.49 1065.3,662.225 1065.86,696.988 1066.42,679.597 1066.98,666.491 1067.54,683.242 1068.1,695.548 1068.66,698.073 1069.22,715.595 1069.78,728.774 1070.34,729.285 1070.9,726.078 1071.46,722.967 1072.02,691.18 1072.57,709.204 1073.13,692.56 1073.69,693.251 1074.25,710.091 1074.81,787.452 1075.37,766.887 1075.93,733.979 1076.49,734.093 1077.05,701.083 1077.61,686.245 1078.17,672.262 1078.73,690.528 1079.29,705.319 1079.85,719.324 1080.4,717.583 1080.96,722.305 1081.52,703.014 1082.08,716.457 1082.64,713.497 1083.2,742.136 1083.76,688.306 1084.32,689.573 1084.88,689.503 1085.44,675.728 1086,703.51 1086.56,714.578 1087.12,715.246 1087.67,743.445 1088.23,723.265 1088.79,721.586 1089.35,733.132 1089.91,733.148 1090.47,715.974 1091.03,745.062 1091.59,739.437 1092.15,716.778 1092.71,714.414 1093.27,779.19 1093.83,723.756 1094.39,722.698 1094.94,719.023 1095.5,718.419 1096.06,719.205 1096.62,684.787 1097.18,683.332 1097.74,701.22 1098.3,712.31 1098.86,743.128 1099.42,673.668 1099.98,673.768 1100.54,686.177 1101.1,699.607 1101.66,698.603 1102.22,696.145 1102.77,712.989 1103.33,727.242 1103.89,675.848 1104.45,658.24 1105.01,646.063 1105.57,651.056 1106.13,650.705 1106.69,669.877 1107.25,670.729 1107.81,689.763 1108.37,706.738 1108.93,673.397 1109.49,658.252 1110.04,662.583 1110.6,629.742 1111.16,682.602 1111.72,681.403 1112.28,646.614 1112.84,664.537 1113.4,680.798 1113.96,649.191 1114.52,615.755 1115.08,584.016 1115.64,605.79 1116.2,624.791 1116.76,627.95 1117.31,646.961 1117.87,665.933 1118.43,669.74 1118.99,702.801 1119.55,701.336 1120.11,686.671 1120.67,704.138 1121.23,718.304 1121.79,702.084 1122.35,698.044 1122.91,695.728 1123.47,710.621 1124.03,692.266 1124.59,674.815 1125.14,675.22 1125.7,689.907 1126.26,656.905 1126.82,673.709 1127.38,658.562 1127.94,625.187 1128.5,627.414 1129.06,643.553 1129.62,645.167 1130.18,648.003 1130.74,631.942 1131.3,651.616 1131.86,683.94 1132.41,682.024 1132.97,742.743 1133.53,739.39 1134.09,720.912 1134.65,721.262 1135.21,720.641 1135.77,716.398 1136.33,699.143 1136.89,700.953 1137.45,698.791 1138.01,716.237 1138.57,746.885 1139.13,760.158 1139.68,751.9 1140.24,762.798 1140.8,758.587 1141.36,769.536 1141.92,749.139 1142.48,775.834 1143.04,767.811 1143.6,780.001 1144.16,771.492 1144.72,784.017 1145.28,763.554 1145.84,743.464 1146.4,708.161 1146.96,689.23 1147.51,671.983 1148.07,671.172 1148.63,713.895 1149.19,714.061 1149.75,712.148 1150.31,693.809 1150.87,691.471 1151.43,719.096 1151.99,701.182 1152.55,683.841 1153.11,665.233 1153.67,647.66 1154.23,680.191 1154.78,696.238 1155.34,708.678 1155.9,692.301 1156.46,705.467 1157.02,703.894 1157.58,699.249 1158.14,713.5 1158.7,729.064 1159.26,711.307 1159.82,709.604 1160.38,740.189 1160.94,688.829 1161.5,706.279 1162.05,684.988 1162.61,671.522 1163.17,653.611 1163.73,674.776 1164.29,689.367 1164.85,722.864 1165.41,719.645 1165.97,700.875 1166.53,702.586 1167.09,687.3 1167.65,702.103 1168.21,685.386 1168.77,717.898 1169.33,730.483 1169.88,727.486 1170.44,754.861 1171,748.358 1171.56,743.33 1172.12,740.527 1172.68,720.984 1173.24,702.676 1173.8,705.168 1174.36,705.077 1174.92,671.871 1175.48,703.084 1176.04,671.624 1176.6,706.398 1177.15,691.919 1177.71,691.367 1178.27,642.003 1178.83,611.449 1179.39,648.421 1179.95,618.814 1180.51,637.069 1181.07,624.023 1181.63,660.979 1182.19,650.723 1182.75,671.868 1183.31,677.598 1183.87,678.65 1184.43,680.33 1184.98,697.789 1185.54,713.905 1186.1,681.025 1186.66,700.055 1187.22,699.056 1187.78,648.765 1188.34,647.116 1188.9,649.099 1189.46,649.107 1190.02,647.962 1190.58,646.622 1191.14,645.274 1191.7,611.228 1192.25,600.923 1192.81,588.907 1193.37,579.062 1193.93,568.388 1194.49,577.048 1195.05,601.996 1195.61,591.193 1196.17,579.078 1196.73,599.934 1197.29,574.552 1197.85,628.752 1198.41,632.375 1198.97,649.732 1199.52,649.176 1200.08,639.42 1200.64,657.213 1201.2,657.928 1201.76,660.559 1202.32,616.474 1202.88,620.346 1203.44,652.922 1204,671.099 1204.56,642.104 1205.12,661.985 1205.68,666.509 1206.24,667.411 1206.8,668.795 1207.35,666.658 1207.91,698.731 1208.47,714.629 1209.03,747.477 1209.59,806.188 1210.15,798.97 1210.71,794.759 1211.27,787.794 1211.83,797.274 1212.39,727.442 1212.95,758.718 1213.51,754.206 1214.07,747.032 1214.62,728.622 1215.18,726.974 1215.74,708.483 1216.3,741.716 1216.86,756.785 1217.42,752.865 1217.98,731.294 1218.54,746.332 1219.1,710.574 1219.66,712.793 1220.22,726.395 1220.78,708.829 1221.34,690.85 1221.89,675.163 1222.45,661.932 1223.01,697.569 1223.57,711.353 1224.13,693.886 1224.69,665.56 1225.25,681.231 1225.81,699.752 1226.37,712.91 1226.93,728.714 1227.49,694.128 1228.05,693.528 1228.61,677.923 1229.17,633.22 1229.72,637.748 1230.28,671.314 1230.84,638.794 1231.4,656.648 1231.96,640.405 1232.52,657.048 1233.08,687.903 1233.64,688.528 1234.2,672.177 1234.76,646.425 1235.32,632.564 1235.88,650.55 1236.44,667.97 1236.99,681.841 1237.55,646.639 1238.11,650.1 1238.67,683.681 1239.23,681.095 1239.79,710.697 1240.35,740.254 1240.91,769.792 1241.47,752.427 1242.03,784.52 1242.59,749.297 1243.15,746.426 1243.71,772.133 1244.26,768.325 1244.82,779.737 1245.38,742.027 1245.94,691.761 1246.5,662.135 1247.06,680.715 1247.62,714.99 1248.18,762.462 1248.74,776.152 1249.3,758.774 1249.86,756.941 1250.42,718.277 1250.98,715.678 1251.54,699.194 1252.09,713.726 1252.65,745.249 1253.21,742.056 1253.77,740.541 1254.33,702.938 1254.89,687.729 1255.45,669.28 1256.01,667.141 1256.57,633.802 1257.13,652.06 1257.69,618.621 1258.25,591.242 1258.81,608.847 1259.36,613.97 1259.92,617.793 1260.48,637.078 1261.04,655.947 1261.6,660.14 1262.16,658.639 1262.72,689.307 1263.28,673.003 1263.84,655.61 1264.4,639.986 1264.96,656.367 1265.52,657.771 1266.08,657.315 1266.63,660.894 1267.19,691.422 1267.75,691.458 1268.31,673.355 1268.87,690.932 1269.43,705.498 1269.99,735.809 1270.55,731.235 1271.11,743.939 1271.67,725.103 1272.23,737.878 1272.79,717.463 1273.35,699.689 1273.91,717.668 1274.46,733.816 1275.02,732.452 1275.58,699.21 1276.14,681.057 1276.7,665.877 1277.26,686.012 1277.82,686.487 1278.38,733.595 1278.94,746.037 1279.5,741.131 1280.06,737.47 1280.62,719.436 1281.18,700.521 1281.73,735.911 1282.29,731.979 1282.85,743.279 1283.41,753.336 1283.97,733.372 1284.53,727.642 1285.09,723.252 1285.65,738.765 1286.21,717.124 1286.77,714.172 1287.33,728.271 1287.89,774.527 1288.45,804.253 1289,814.077 1289.56,805.925 1290.12,811.828 1290.68,803.912 1291.24,795.889 1291.8,788.618 1292.36,768.084 1292.92,793.672 1293.48,740.311 1294.04,772.968 1294.6,735.191 1295.16,763.073 1295.72,739.202 1296.28,787.169 1296.83,803.01 1297.39,781.981 1297.95,790.757 1298.51,733.984 1299.07,716.508 1299.63,702.403 1300.19,720.636 1300.75,733.008 1301.31,732.491 1301.87,730.881 1302.43,726.298 1302.99,704.881 1303.55,716.777 1304.1,683.321 1304.66,681.62 1305.22,664.035 1305.78,650.679 1306.34,650.023 1306.9,636.445 1307.46,638.444 1308.02,641.769 1308.58,624.551 1309.14,593.778 1309.7,599.697 1310.26,606.096 1310.82,558.274 1311.38,563.28 1311.93,585.785 1312.49,573.384 1313.05,578.365 1313.61,602.842 1314.17,592.479 1314.73,614.417 1315.29,664.376 1315.85,649.144 1316.41,635.846 1316.97,640.439 1317.53,660.121 1318.09,628.453 1318.65,614.36 1319.2,618.468 1319.76,625.228 1320.32,612.385 1320.88,661.645 1321.44,712.989 1322,664.586 1322.56,681.85 1323.12,680.28 1323.68,661.414 1324.24,630.772 1324.8,650.285 1325.36,651.354 1325.92,650.13 1326.47,653.941 1327.03,652.491 1327.59,652.064 1328.15,687.931 1328.71,643.457 1329.27,648.127 1329.83,648.06 1330.39,664.621 1330.95,681.735 1331.51,685.017 1332.07,649.936 1332.63,637.006 1333.19,641.286 1333.75,640.991 1334.3,623.439 1334.86,659.378 1335.42,694.95 1335.98,730.107 1336.54,715.712 1337.1,727.513 1337.66,739.433 1338.22,755.063 1338.78,735.904 1339.34,716.021 1339.9,698.641 1340.46,698.684 1341.02,729.478 1341.57,694.778 1342.13,698.145 1342.69,713.255 1343.25,712.027 1343.81,677.484 1344.37,644.463 1344.93,646.831 1345.49,665.191 1346.05,682.24 1346.61,697.922 1347.17,664.286 1347.73,682.735 1348.29,664.991 1348.84,696.817 1349.4,693.771 1349.96,697.273 1350.52,680.8 1351.08,683.12 1351.64,635.241 1352.2,637.317 1352.76,656.626 1353.32,691.965 1353.88,670.853 1354.44,621.198 1355,613.959 1355.56,618.543 1356.12,625.431 1356.67,613.74 1357.23,618.091 1357.79,655.376 1358.35,693.65 1358.91,710.877 1359.47,680.564 1360.03,680.088 1360.59,699.12 1361.15,682.709 1361.71,698.381 1362.27,699.406 1362.83,699.649 1363.39,700.351 1363.94,696.489 1364.5,676.993 1365.06,662.076 1365.62,663.024 1366.18,664.458 1366.74,680.584 1367.3,646.521 1367.86,679.601 1368.42,663.855 1368.98,663.71 1369.54,680.162 1370.1,694.127 1370.66,661.493 1371.21,683.325 1371.77,683.35 1372.33,704.072 1372.89,722.315 1373.45,700.66 1374.01,679.255 1374.57,696.626 1375.13,694.701 1375.69,660.954 1376.25,645.654 1376.81,663.083 1377.37,665.782 1377.93,667.316 1378.49,668.936 1379.04,668.33 1379.6,653.202 1380.16,671.031 1380.72,684.574 1381.28,684.806 1381.84,668.747 1382.4,671.342 1382.96,674.442 1383.52,692.143 1384.08,675.982 1384.64,680.57 1385.2,662.14 1385.76,694.273 1386.31,744.612 1386.87,776.147 1387.43,726.199 1387.99,722.095 1388.55,706.342 1389.11,737.274 1389.67,748.164 1390.23,726.052 1390.79,734.832 1391.35,748.127 1391.91,743.275 1392.47,726.9 1393.03,743.438 1393.58,770.232 1394.14,753.02 1394.7,734.964 1395.26,749.977 1395.82,680.919 1396.38,649.491 1396.94,653.738 1397.5,658.565 1398.06,643.448 1398.62,643.957 1399.18,598.015 1399.74,600.37 1400.3,589.728 1400.86,626.395 1401.41,657.102 1401.97,656.48 1402.53,656.896 1403.09,660.799 1403.65,647.683 1404.21,650.263 1404.77,634.552 1405.33,653.939 1405.89,651.5 1406.45,683.092 1407.01,697.774 1407.57,710.336 1408.13,693.769 1408.68,644.679 1409.24,592.436 1409.8,582.21 1410.36,668.537 1410.92,668.033 1411.48,638.961 1412.04,625.596 1412.6,613.744 1413.16,601.882 1413.72,590.23 1414.28,546.738 1414.84,557.746 1415.4,562.14 1415.95,618.91 1416.51,622.477 1417.07,672.717 1417.63,656.696 1418.19,683.617 1418.75,668.262 1419.31,623.234 1419.87,611.706 1420.43,648.118 1420.99,664.215 1421.55,648.38 1422.11,664.877 1422.67,682.414 1423.23,683.08 1423.78,647.201 1424.34,650.757 1424.9,680.401 1425.46,685.012 1426.02,672.223 1426.58,672.96 1427.14,620.812 1427.7,624.686 1428.26,644.603 1428.82,662.378 1429.38,662.091 1429.94,631.604 1430.5,651.166 1431.05,632.821 1431.61,650.097 1432.17,636.79 1432.73,623.541 1433.29,639.756 1433.85,691.107 1434.41,691.814 1434.97,661.516 1435.53,661.485 1436.09,659.606 1436.65,661.734 1437.21,644.942 1437.77,662.426 1438.33,663.73 1438.88,665.47 1439.44,668.53 1440,635.727 1440.56,621.439 1441.12,623.81 1441.68,630.078 1442.24,614.823 1442.8,650.836 1443.36,634.161 1443.92,634.279 1444.48,671.605 1445.04,670.408 1445.6,688.964 1446.15,673.13 1446.71,707.058 1447.27,695.212 1447.83,712.719 1448.39,711.808 1448.95,708.127 1449.51,690.167 1450.07,752.789 1450.63,733.932 1451.19,731.145 1451.75,710.386 1452.31,692.708 1452.87,693.299 1453.42,676.293 1453.98,694.929 1454.54,724.089 1455.1,690.477 1455.66,722.843 1456.22,737.518 1456.78,738.183 1457.34,721.884 1457.9,715.802 1458.46,713.81 1459.02,678.547 1459.58,679.953 1460.14,680.625 1460.7,677.858 1461.25,676.914 1461.81,679.261 1462.37,711.932 1462.93,715.755 1463.49,684.744 1464.05,600.234 1464.61,588.341 1465.17,595.774 1465.73,598.751 1466.29,603.202 1466.85,610.895 1467.41,633.284 1467.97,636.024 1468.52,621.111 1469.08,639.659 1469.64,645.79 1470.2,683.285 1470.76,699.712 1471.32,699.394 1471.88,730.067 1472.44,695.232 1473,662.778 1473.56,664.677 1474.12,648.379 1474.68,635.273 1475.24,686.492 1475.79,658.396 1476.35,630.373 1476.91,633.213 1477.47,620.915 1478.03,623.928 1478.59,615.05 1479.15,617.932 1479.71,603.374 1480.27,609.661 1480.83,630.045 1481.39,647.983 1481.95,649.878 1482.51,618.632 1483.07,622.398 1483.62,625.967 1484.18,629.035 1484.74,634.09 1485.3,637.593 1485.86,642.249 1486.42,661.795 1486.98,663.797 1487.54,663.485 1488.1,678.783 1488.66,677.956 1489.22,678.918 1489.78,664.313 1490.34,649.871 1490.89,657.797 1491.45,658.782 1492.01,645.337 1492.57,646.194 1493.13,635.758 1493.69,642.097 1494.25,656.819 1494.81,654.463 1495.37,686.151 1495.93,684.47 1496.49,685.345 1497.05,705.806 1497.61,688.803 1498.16,737.894 1498.72,766.689 1499.28,748.835 1499.84,760.53 1500.4,756.429 1500.96,748.981 1501.52,745.722 1502.08,742.421 1502.64,770.096 1503.2,748.795 1503.76,781.25 1504.32,778.378 1504.88,769.461 1505.44,768.169 1505.99,748.411 1506.55,695.885 1507.11,709.003 1507.67,724.652 1508.23,707.512 1508.79,723.114 1509.35,720.351 1509.91,737.105 1510.47,736.745 1511.03,749.453 1511.59,716.664 1512.15,696.427 1512.71,698.555 1513.26,681.317 1513.82,683.092 1514.38,666.568 1514.94,682.381 1515.5,696.993 1516.06,744.129 1516.62,738.608 1517.18,732.676 1517.74,741.278 1518.3,755.829 1518.86,755.832 1519.42,739.225 1519.98,750.179 1520.53,763.577 1521.09,776.078 1521.65,803.356 1522.21,797.807 1522.77,789.639 1523.33,783.651 1523.89,779.483 1524.45,823.241 1525.01,800.637 1525.57,828.542 1526.13,784.654 1526.69,745.986 1527.25,758.383 1527.81,785.581 1528.36,780.083 1528.92,758.081 1529.48,739.548 1530.04,735.513 1530.6,715.639 1531.16,749.274 1531.72,746.639 1532.28,705.581 1532.84,719.656 1533.4,700.745 1533.96,683.735 1534.52,681.82 1535.08,680.705 1535.63,664.459 1536.19,711.533 1536.75,690.356 1537.31,690.143 1537.87,659.013 1538.43,599.827 1538.99,637.705 1539.55,640.428 1540.11,625.344 1540.67,628.807 1541.23,615.412 1541.79,602.748 1542.35,622.988 1542.9,644.482 1543.46,660.324 1544.02,663.111 1544.58,648.458 1545.14,664.271 1545.7,645.384 1546.26,693.744 1546.82,707.575 1547.38,720.406 1547.94,737.872 1548.5,734.681 1549.06,765.573 1549.62,779.474 1550.18,774.601 1550.73,750.987 1551.29,745.957 1551.85,776.402 1552.41,738.305 1552.97,717.436 1553.53,714.063 1554.09,710.792 1554.65,706.016 1555.21,704.985 1555.77,732.379 1556.33,710.099 1556.89,740.086 1557.45,736.384 1558,731.995 1558.56,731.156 1559.12,693.447 1559.68,662.242 1560.24,627.41 1560.8,609.24 1561.36,629.005 1561.92,649.854 1562.48,666.349 1563.04,702.378 1563.6,681.802 1564.16,695.77 1564.72,659.986 1565.28,648.794 1565.83,652.25 1566.39,641.966 1566.95,660.387 1567.51,681.865 1568.07,628.639 1568.63,681.661 1569.19,681.094 1569.75,712.731 1570.31,711.632 1570.87,693.593 1571.43,705.664 1571.99,705.782 1572.55,723.323 1573.1,739.437 1573.66,703.542 1574.22,655.478 1574.78,660.581 1575.34,676.958 1575.9,673.307 1576.46,670.571 1577.02,689.96 1577.58,688.897 1578.14,673.344 1578.7,674.786 1579.26,644.488 1579.82,683.311 1580.37,670.449 1580.93,700.42 1581.49,713.336 1582.05,728.09 1582.61,727.656 1583.17,708.08 1583.73,708.597 1584.29,706.464 1584.85,689.76 1585.41,692.031 1585.97,645.441 1586.53,630.756 1587.09,632.249 1587.65,619.817 1588.2,612.143 1588.76,634.005 1589.32,652.914 1589.88,625.323 1590.44,615.083 1591,618.602 1591.56,635.499 1592.12,637.277 1592.68,638.812 1593.24,626.995 1593.8,628.945 1594.36,631.087 1594.92,629.701 1595.47,633.397 1596.03,655.18 1596.59,624.369 1597.15,626.031 1597.71,646.527 1598.27,633.027 1598.83,619.097 1599.39,605.598 1599.95,626.099 1600.51,632.629 1601.07,654.808 1601.63,674.056 1602.19,707.33 1602.74,692.115 1603.3,724.272 1603.86,726.491 1604.42,751.52 1604.98,715.67 1605.54,729.878 1606.1,729.443 1606.66,726.575 1607.22,740.718 1607.78,720.979 1608.34,734.256 1608.9,701.755 1609.46,716.633 1610.02,712.751 1610.57,725.684 1611.13,659.95 1611.69,644.974 1612.25,630.518 1612.81,618.672 1613.37,622.459 1613.93,642.521 1614.49,649.327 1615.05,601.567 1615.61,608.503 1616.17,593.534 1616.73,596.578 1617.29,599.728 1617.84,605.977 1618.4,690.825 1618.96,705.205 1619.52,672.231 1620.08,656.204 1620.64,658.612 1621.2,694.573 1621.76,707.658 1622.32,687.132 1622.88,689.687 1623.44,702.966 1624,735.62 1624.56,702.389 1625.11,685.523 1625.67,686.108 1626.23,672.073 1626.79,669.991 1627.35,689.243 1627.91,672.184 1628.47,725.82 1629.03,719.894 1629.59,718.384 1630.15,686.132 1630.71,699.551 1631.27,713.811 1631.83,714.618 1632.39,712.009 1632.94,708.133 1633.5,685.593 1634.06,713.483 1634.62,711.453 1635.18,696.432 1635.74,697.025 1636.3,679.319 1636.86,682.297 1637.42,715.24 1637.98,728.811 1638.54,727.265 1639.1,739.672 1639.66,738.29 1640.21,722.911 1640.77,751.742 1641.33,748.883 1641.89,779.18 1642.45,774.568 1643.01,787.419 1643.57,783.072 1644.13,751.989 1644.69,781.039 1645.25,795.426 1645.81,776.597 1646.37,719.955 1646.93,686.27 1647.48,623.252 1648.04,659.648 1648.6,676.83 1649.16,659.005 1649.72,576.354 1650.28,569.146 1650.84,555.924 1651.4,581.81 1651.96,622.943 1652.52,608.658 1653.08,611.501 1653.64,617.06 1654.2,586.049 1654.76,544.022 1655.31,585.052 1655.87,591.715 1656.43,582.393 1656.99,606.272 1657.55,611.762 1658.11,586.031 1658.67,595.473 1659.23,633.97 1659.79,658.487 1660.35,659.848 1660.91,643.628 1661.47,643.73 1662.03,646.057 1662.58,648.574 1663.14,600.678 1663.7,609.118 1664.26,581.459 1664.82,603.526 1665.38,575.669 1665.94,612.289 1666.5,615.508 1667.06,623.261 1667.62,624.121 1668.18,677.131 1668.74,646.84 1669.3,634.37 1669.85,653.64 1670.41,655.063 1670.97,620.828 1671.53,656.356 1672.09,643.576 1672.65,664.372 1673.21,663.878 1673.77,678.558 1674.33,711.673 1674.89,727.931 1675.45,721.048 1676.01,718.203 1676.57,749.777 1677.13,746.765 1677.68,774.435 1678.24,802.855 1678.8,797.861 1679.36,773.823 1679.92,770.096 1680.48,783.159 1681.04,795.795 1681.6,776.046 1682.16,752.842 1682.72,762.977 1683.28,761.515 1683.84,756.462 1684.4,735.461 1684.95,729.871 1685.51,713.481 1686.07,727.737 1686.63,726.699 1687.19,713.777 1687.75,730.685 1688.31,715.379 1688.87,699.355 1689.43,716.125 1689.99,731.681 1690.55,730.583 1691.11,727.752 1691.67,725.225 1692.23,786.211 1692.78,780.535 1693.34,791.703 1693.9,783.674 1694.46,760.959 1695.02,725.427 1695.58,705.161 1696.14,702.806 1696.7,703.803 1697.26,700.284 1697.82,667.827 1698.38,666.579 1698.94,666.254 1699.5,668.228 1700.05,688.336 1700.61,688.978 1701.17,658.174 1701.73,657.297 1702.29,705.007 1702.85,702.478 1703.41,685.674 1703.97,635.192 1704.53,604.467 1705.09,611.43 1705.65,595.492 1706.21,599.304 1706.77,602.93 1707.32,608.768 1707.88,642.37 1708.44,628.448 1709,643.992 1709.56,678.568 1710.12,679.139 1710.68,680.748 1711.24,713.026 1711.8,694.147 1712.36,679.682 1712.92,695.773 1713.48,758.479 1714.04,738.053 1714.6,715.611 1715.15,699.201 1715.71,696.753 1716.27,695.266 1716.83,695.299 1717.39,680.674 1717.95,680.222 1718.51,663.009 1719.07,649.308 1719.63,635.848 1720.19,624.685 1720.75,648.301 1721.31,682.42 1721.87,701.529 1722.42,696.051 1722.98,695.912 1723.54,695.177 1724.1,694.099 1724.66,697.07 1725.22,696.974 1725.78,699.846 1726.34,698.822 1726.9,666.459 1727.46,684.364 1728.02,713.637 1728.58,727.333 1729.14,739.012 1729.69,753.141 1730.25,768.852 1730.81,750.195 1731.37,712.198 1731.93,742.638 1732.49,690.368 1733.05,686.705 1733.61,688.18 1734.17,705.714 1734.73,676.385 1735.29,643.287 1735.85,625.468 1736.41,645.445 1736.97,648.169 1737.52,654.408 1738.08,673.259 1738.64,724.165 1739.2,739.529 1739.76,739.979 1740.32,735.813 1740.88,731.812 1741.44,727.902 1742,729.18 1742.56,726.472 1743.12,673.989 1743.68,674.9 1744.24,695.976 1744.79,711.65 1745.35,706.944 1745.91,724.497 1746.47,691.238 1747.03,708.911 1747.59,707.425 1748.15,725.852 1748.71,724.763 1749.27,722.92 1749.83,738.239 1750.39,718.628 1750.95,716.567 1751.51,695.911 1752.06,676.27 1752.62,631.905 1753.18,664.338 1753.74,616.505 1754.3,655.611 1754.86,673.75 1755.42,670.997 1755.98,652.185 1756.54,637.012 1757.1,639.09 1757.66,640.814 1758.22,675.109 1758.78,646.897 1759.34,667.373 1759.89,636.667 1760.45,637.007 1761.01,638.041 1761.57,621.233 1762.13,654.451 1762.69,656.446 1763.25,688.038 1763.81,687.364 1764.37,705.12 1764.93,689.27 1765.49,689.562 1766.05,653.874 1766.61,653.996 1767.16,668.766 1767.72,636.382 1768.28,656.493 1768.84,673.386 1769.4,688.153 1769.96,702.126 1770.52,734.483 1771.08,715.517 1771.64,748.674 1772.2,715.312 1772.76,712.764 1773.32,710.972 1773.88,680.508 1774.43,679.098 1774.99,677.673 1775.55,678.914 1776.11,692.071 1776.67,678.202 1777.23,660.043 1777.79,665.694 1778.35,699.627 1778.91,733.306 1779.47,748.916 1780.03,764.922 1780.59,758.973 1781.15,755.844 1781.71,749.451 1782.26,776.065 1782.82,753.688 1783.38,750.299 1783.94,728.339 1784.5,713.349 1785.06,695.607 1785.62,742.808 1786.18,754.845 1786.74,752.71 1787.3,751.567 1787.86,748.674 1788.42,726.852 1788.98,710.23 1789.53,693.6 1790.09,609.93 1790.65,629.334 1791.21,648.539 1791.77,664.176 1792.33,664.691 1792.89,650.474 1793.45,670.47 1794.01,671.629 1794.57,657.882 1795.13,661.203 1795.69,662.848 1796.25,634.421 1796.8,635.685 1797.36,606.912 1797.92,598.918 1798.48,602.456 1799.04,586.29 1799.6,607.293 1800.16,599.033 1800.72,602.654 1801.28,607.451 1801.84,628.764 1802.4,662.71 1802.96,649.556 1803.52,650.133 1804.08,667.355 1804.63,652.853 1805.19,672.017 1805.75,708.203 1806.31,724.522 1806.87,737.77 1807.43,734.344 1807.99,767.755 1808.55,737.463 1809.11,750.268 1809.67,779.342 1810.23,779.282 1810.79,838.496 1811.35,828.819 1811.9,802.994 1812.46,830.924 1813.02,824.56 1813.58,819.901 1814.14,826.88 1814.7,789.646 1815.26,799.34 1815.82,792.639 1816.38,799.779 1816.94,810.029 1817.5,790.749 1818.06,769.735 1818.62,731.721 1819.18,743.13 1819.73,722.791 1820.29,719.893 1820.85,702.393 1821.41,696.138 1821.97,677.942 1822.53,695.109 1823.09,692.654 1823.65,710.894 1824.21,727.66 1824.77,694.225 1825.33,675.69 1825.89,673.484 1826.45,641.712 1827,625.488 1827.56,629.432 1828.12,629.172 1828.68,635.027 1829.24,668.275 1829.8,703.659 1830.36,682.347 1830.92,663.521 1831.48,663.192 1832.04,645.005 1832.6,644.385 1833.16,643.62 1833.72,631.827 1834.27,653.049 1834.83,638.021 1835.39,654.299 1835.95,688.844 1836.51,671.223 1837.07,654.743 1837.63,657.289 1838.19,642.625 \"/>\n<path clip-path=\"url(#clip763)\" d=\"M720.247 690.777 L720.806 690.777 L721.365 690.777 L721.924 690.777 L722.484 690.777 L723.043 690.777 L723.602 690.777 L724.161 690.777 L724.721 690.777 L725.28 690.777 L725.839 690.777 L726.398 690.777 L726.958 690.777 L727.517 690.777 L728.076 690.777 L728.635 690.777 L729.195 690.777 L729.754 690.777 L730.313 690.777 L730.872 690.777 L731.432 690.777 L731.991 690.777 L732.55 690.777 L733.109 690.777 L733.669 690.777 L734.228 690.777 L734.787 690.777 L735.346 690.777 L735.906 690.777 L736.465 690.777 L737.024 690.777 L737.583 690.777 L738.143 690.777 L738.702 690.777 L739.261 690.777 L739.82 690.777 L740.38 690.777 L740.939 690.777 L741.498 690.777 L742.057 690.777 L742.617 690.777 L743.176 690.777 L743.735 690.777 L744.294 690.777 L744.854 690.777 L745.413 690.777 L745.972 690.777 L746.531 690.777 L747.091 690.777 L747.65 690.777 L748.209 690.777 L748.768 690.777 L749.328 690.777 L749.887 690.777 L750.446 690.777 L751.005 690.777 L751.565 690.777 L752.124 690.777 L752.683 690.777 L753.242 690.777 L753.802 690.777 L754.361 690.777 L754.92 690.777 L755.479 690.777 L756.039 690.777 L756.598 690.777 L757.157 690.777 L757.716 690.777 L758.276 690.777 L758.835 690.777 L759.394 690.777 L759.953 690.777 L760.513 690.777 L761.072 690.777 L761.631 690.777 L762.19 690.777 L762.75 690.777 L763.309 690.777 L763.868 690.777 L764.427 690.777 L764.987 690.777 L765.546 690.777 L766.105 690.777 L766.664 690.777 L767.224 690.777 L767.783 690.777 L768.342 690.777 L768.901 690.777 L769.461 690.777 L770.02 690.777 L770.579 690.777 L771.138 690.777 L771.698 690.777 L772.257 690.777 L772.816 690.777 L773.375 690.777 L773.935 690.777 L774.494 690.777 L775.053 690.777 L775.612 690.777 L776.172 690.777 L776.731 690.777 L777.29 690.777 L777.849 690.777 L778.409 690.777 L778.968 690.777 L779.527 690.777 L780.086 690.777 L780.646 690.777 L781.205 690.777 L781.764 690.777 L782.323 690.777 L782.883 690.777 L783.442 690.777 L784.001 690.777 L784.56 690.777 L785.12 690.777 L785.679 690.777 L786.238 690.777 L786.797 690.777 L787.357 690.777 L787.916 690.777 L788.475 690.777 L789.034 690.777 L789.594 690.777 L790.153 690.777 L790.712 690.777 L791.271 690.777 L791.831 690.777 L792.39 690.777 L792.949 690.777 L793.508 690.777 L794.068 690.777 L794.627 690.777 L795.186 690.777 L795.745 690.777 L796.305 690.777 L796.864 690.777 L797.423 690.777 L797.982 690.777 L798.542 690.777 L799.101 690.777 L799.66 690.777 L800.219 690.777 L800.779 690.777 L801.338 690.777 L801.897 690.777 L802.456 690.777 L803.016 690.777 L803.575 690.777 L804.134 690.777 L804.693 690.777 L805.253 690.777 L805.812 690.777 L806.371 690.777 L806.931 690.777 L807.49 690.777 L808.049 690.777 L808.608 690.777 L809.168 690.777 L809.727 690.777 L810.286 690.777 L810.845 690.777 L811.405 690.777 L811.964 690.777 L812.523 690.777 L813.082 690.777 L813.642 690.777 L814.201 690.777 L814.76 690.777 L815.319 690.777 L815.879 690.777 L816.438 690.777 L816.997 690.777 L817.556 690.777 L818.116 690.777 L818.675 690.777 L819.234 690.777 L819.793 690.777 L820.353 690.777 L820.912 690.777 L821.471 690.777 L822.03 690.777 L822.59 690.777 L823.149 690.777 L823.708 690.777 L824.267 690.777 L824.827 690.777 L825.386 690.777 L825.945 690.777 L826.504 690.777 L827.064 690.777 L827.623 690.777 L828.182 690.777 L828.741 690.777 L829.301 690.777 L829.86 690.777 L830.419 690.777 L830.978 690.777 L831.538 690.777 L832.097 690.777 L832.656 690.777 L833.215 690.777 L833.775 690.777 L834.334 690.777 L834.893 690.777 L835.452 690.777 L836.012 690.777 L836.571 690.777 L837.13 690.777 L837.689 690.777 L838.249 690.777 L838.808 690.777 L839.367 690.777 L839.926 690.777 L840.486 690.777 L841.045 690.777 L841.604 690.777 L842.163 690.777 L842.723 690.777 L843.282 690.777 L843.841 690.777 L844.4 690.777 L844.96 690.777 L845.519 690.777 L846.078 690.777 L846.637 690.777 L847.197 690.777 L847.756 690.777 L848.315 690.777 L848.874 690.777 L849.434 690.777 L849.993 690.777 L850.552 690.777 L851.111 690.777 L851.671 690.777 L852.23 690.777 L852.789 690.777 L853.348 690.777 L853.908 690.777 L854.467 690.777 L855.026 690.777 L855.585 690.777 L856.145 690.777 L856.704 690.777 L857.263 690.777 L857.822 690.777 L858.382 690.777 L858.941 690.777 L859.5 690.777 L860.059 690.777 L860.619 690.777 L861.178 690.777 L861.737 690.777 L862.296 690.777 L862.856 690.777 L863.415 690.777 L863.974 690.777 L864.533 690.777 L865.093 690.777 L865.652 690.777 L866.211 690.777 L866.77 690.777 L867.33 690.777 L867.889 690.777 L868.448 690.777 L869.007 690.777 L869.567 690.777 L870.126 690.777 L870.685 690.777 L871.244 690.777 L871.804 690.777 L872.363 690.777 L872.922 690.777 L873.481 690.777 L874.041 690.777 L874.6 690.777 L875.159 690.777 L875.718 690.777 L876.278 690.777 L876.837 690.777 L877.396 690.777 L877.955 690.777 L878.515 690.777 L879.074 690.777 L879.633 690.777 L880.192 690.777 L880.752 690.777 L881.311 690.777 L881.87 690.777 L882.429 690.777 L882.989 690.777 L883.548 690.777 L884.107 690.777 L884.666 690.777 L885.226 690.777 L885.785 690.777 L886.344 690.777 L886.903 690.777 L887.463 690.777 L888.022 690.777 L888.581 690.777 L889.14 690.777 L889.7 690.777 L890.259 690.777 L890.818 690.777 L891.377 690.777 L891.937 690.777 L892.496 690.777 L893.055 690.777 L893.614 690.777 L894.174 690.777 L894.733 690.777 L895.292 690.777 L895.851 690.777 L896.411 690.777 L896.97 690.777 L897.529 690.777 L898.088 690.777 L898.648 690.777 L899.207 690.777 L899.766 690.777 L900.325 690.777 L900.885 690.777 L901.444 690.777 L902.003 690.777 L902.562 690.777 L903.122 690.777 L903.681 690.777 L904.24 690.777 L904.799 690.777 L905.359 690.777 L905.918 690.777 L906.477 690.777 L907.036 690.777 L907.596 690.777 L908.155 690.777 L908.714 690.777 L909.273 690.777 L909.833 690.777 L910.392 690.777 L910.951 690.777 L911.51 690.777 L912.07 690.777 L912.629 690.777 L913.188 690.777 L913.747 690.777 L914.307 690.777 L914.866 690.777 L915.425 690.777 L915.984 690.777 L916.544 690.777 L917.103 690.777 L917.662 690.777 L918.221 690.777 L918.781 690.777 L919.34 690.777 L919.899 690.777 L920.458 690.777 L921.018 690.777 L921.577 690.777 L922.136 690.777 L922.695 690.777 L923.255 690.777 L923.814 690.777 L924.373 690.777 L924.932 690.777 L925.492 690.777 L926.051 690.777 L926.61 690.777 L927.169 690.777 L927.729 690.777 L928.288 690.777 L928.847 690.777 L929.406 690.777 L929.966 690.777 L930.525 690.777 L931.084 690.777 L931.644 690.777 L932.203 690.777 L932.762 690.777 L933.321 690.777 L933.881 690.777 L934.44 690.777 L934.999 690.777 L935.558 690.777 L936.118 690.777 L936.677 690.777 L937.236 690.777 L937.795 690.777 L938.355 690.777 L938.914 690.777 L939.473 690.777 L940.032 690.777 L940.592 690.777 L941.151 690.777 L941.71 690.777 L942.269 690.777 L942.829 690.777 L943.388 690.777 L943.947 690.777 L944.506 690.777 L945.066 690.777 L945.625 690.777 L946.184 690.777 L946.743 690.777 L947.303 690.777 L947.862 690.777 L948.421 690.777 L948.98 690.777 L949.54 690.777 L950.099 690.777 L950.658 690.777 L951.217 690.777 L951.777 690.777 L952.336 690.777 L952.895 690.777 L953.454 690.777 L954.014 690.777 L954.573 690.777 L955.132 690.777 L955.691 690.777 L956.251 690.777 L956.81 690.777 L957.369 690.777 L957.928 690.777 L958.488 690.777 L959.047 690.777 L959.606 690.777 L960.165 690.777 L960.725 690.777 L961.284 690.777 L961.843 690.777 L962.402 690.777 L962.962 690.777 L963.521 690.777 L964.08 690.777 L964.639 690.777 L965.199 690.777 L965.758 690.777 L966.317 690.777 L966.876 690.777 L967.436 690.777 L967.995 690.777 L968.554 690.777 L969.113 690.777 L969.673 690.777 L970.232 690.777 L970.791 690.777 L971.35 690.777 L971.91 690.777 L972.469 690.777 L973.028 690.777 L973.587 690.777 L974.147 690.777 L974.706 690.777 L975.265 690.777 L975.824 690.777 L976.384 690.777 L976.943 690.777 L977.502 690.777 L978.061 690.777 L978.621 690.777 L979.18 690.777 L979.739 690.777 L980.298 690.777 L980.858 690.777 L981.417 690.777 L981.976 690.777 L982.535 690.777 L983.095 690.777 L983.654 690.777 L984.213 690.777 L984.772 690.777 L985.332 690.777 L985.891 690.777 L986.45 690.777 L987.009 690.777 L987.569 690.777 L988.128 690.777 L988.687 690.777 L989.246 690.777 L989.806 690.777 L990.365 690.777 L990.924 690.777 L991.483 690.777 L992.043 690.777 L992.602 690.777 L993.161 690.777 L993.72 690.777 L994.28 690.777 L994.839 690.777 L995.398 690.777 L995.957 690.777 L996.517 690.777 L997.076 690.777 L997.635 690.777 L998.194 690.777 L998.754 690.777 L999.313 690.777 L999.872 690.777 L1000.43 690.777 L1000.99 690.777 L1001.55 690.777 L1002.11 690.777 L1002.67 690.777 L1003.23 690.777 L1003.79 690.777 L1004.35 690.777 L1004.91 690.777 L1005.46 690.777 L1006.02 690.777 L1006.58 690.777 L1007.14 690.777 L1007.7 690.777 L1008.26 690.777 L1008.82 690.777 L1009.38 690.777 L1009.94 690.777 L1010.5 690.777 L1011.06 690.777 L1011.62 690.777 L1012.18 690.777 L1012.73 690.777 L1013.29 690.777 L1013.85 690.777 L1014.41 690.777 L1014.97 690.777 L1015.53 690.777 L1016.09 690.777 L1016.65 690.777 L1017.21 690.777 L1017.77 690.777 L1018.33 690.777 L1018.89 690.777 L1019.45 690.777 L1020.01 690.777 L1020.56 690.777 L1021.12 690.777 L1021.68 690.777 L1022.24 690.777 L1022.8 690.777 L1023.36 690.777 L1023.92 690.777 L1024.48 690.777 L1025.04 690.777 L1025.6 690.777 L1026.16 690.777 L1026.72 690.777 L1027.28 690.777 L1027.83 690.777 L1028.39 690.777 L1028.95 690.777 L1029.51 690.777 L1030.07 690.777 L1030.63 690.777 L1031.19 690.777 L1031.75 690.777 L1032.31 690.777 L1032.87 690.777 L1033.43 690.777 L1033.99 690.777 L1034.55 690.777 L1035.1 690.777 L1035.66 690.777 L1036.22 690.777 L1036.78 690.777 L1037.34 690.777 L1037.9 690.777 L1038.46 690.777 L1039.02 690.777 L1039.58 690.777 L1040.14 690.777 L1040.7 690.777 L1041.26 690.777 L1041.82 690.777 L1042.38 690.777 L1042.93 690.777 L1043.49 690.777 L1044.05 690.777 L1044.61 690.777 L1045.17 690.777 L1045.73 690.777 L1046.29 690.777 L1046.85 690.777 L1047.41 690.777 L1047.97 690.777 L1048.53 690.777 L1049.09 690.777 L1049.65 690.777 L1050.2 690.777 L1050.76 690.777 L1051.32 690.777 L1051.88 690.777 L1052.44 690.777 L1053 690.777 L1053.56 690.777 L1054.12 690.777 L1054.68 690.777 L1055.24 690.777 L1055.8 690.777 L1056.36 690.777 L1056.92 690.777 L1057.48 690.777 L1058.03 690.777 L1058.59 690.777 L1059.15 690.777 L1059.71 690.777 L1060.27 690.777 L1060.83 690.777 L1061.39 690.777 L1061.95 690.777 L1062.51 690.777 L1063.07 690.777 L1063.63 690.777 L1064.19 690.777 L1064.75 690.777 L1065.3 690.777 L1065.86 690.777 L1066.42 690.777 L1066.98 690.777 L1067.54 690.777 L1068.1 690.777 L1068.66 690.777 L1069.22 690.777 L1069.78 690.777 L1070.34 690.777 L1070.9 690.777 L1071.46 690.777 L1072.02 690.777 L1072.57 690.777 L1073.13 690.777 L1073.69 690.777 L1074.25 690.777 L1074.81 690.777 L1075.37 690.777 L1075.93 690.777 L1076.49 690.777 L1077.05 690.777 L1077.61 690.777 L1078.17 690.777 L1078.73 690.777 L1079.29 690.777 L1079.85 690.777 L1080.4 690.777 L1080.96 690.777 L1081.52 690.777 L1082.08 690.777 L1082.64 690.777 L1083.2 690.777 L1083.76 690.777 L1084.32 690.777 L1084.88 690.777 L1085.44 690.777 L1086 690.777 L1086.56 690.777 L1087.12 690.777 L1087.67 690.777 L1088.23 690.777 L1088.79 690.777 L1089.35 690.777 L1089.91 690.777 L1090.47 690.777 L1091.03 690.777 L1091.59 690.777 L1092.15 690.777 L1092.71 690.777 L1093.27 690.777 L1093.83 690.777 L1094.39 690.777 L1094.94 690.777 L1095.5 690.777 L1096.06 690.777 L1096.62 690.777 L1097.18 690.777 L1097.74 690.777 L1098.3 690.777 L1098.86 690.777 L1099.42 690.777 L1099.98 690.777 L1100.54 690.777 L1101.1 690.777 L1101.66 690.777 L1102.22 690.777 L1102.77 690.777 L1103.33 690.777 L1103.89 690.777 L1104.45 690.777 L1105.01 690.777 L1105.57 690.777 L1106.13 690.777 L1106.69 690.777 L1107.25 690.777 L1107.81 690.777 L1108.37 690.777 L1108.93 690.777 L1109.49 690.777 L1110.04 690.777 L1110.6 690.777 L1111.16 690.777 L1111.72 690.777 L1112.28 690.777 L1112.84 690.777 L1113.4 690.777 L1113.96 690.777 L1114.52 690.777 L1115.08 690.777 L1115.64 690.777 L1116.2 690.777 L1116.76 690.777 L1117.31 690.777 L1117.87 690.777 L1118.43 690.777 L1118.99 690.777 L1119.55 690.777 L1120.11 690.777 L1120.67 690.777 L1121.23 690.777 L1121.79 690.777 L1122.35 690.777 L1122.91 690.777 L1123.47 690.777 L1124.03 690.777 L1124.59 690.777 L1125.14 690.777 L1125.7 690.777 L1126.26 690.777 L1126.82 690.777 L1127.38 690.777 L1127.94 690.777 L1128.5 690.777 L1129.06 690.777 L1129.62 690.777 L1130.18 690.777 L1130.74 690.777 L1131.3 690.777 L1131.86 690.777 L1132.41 690.777 L1132.97 690.777 L1133.53 690.777 L1134.09 690.777 L1134.65 690.777 L1135.21 690.777 L1135.77 690.777 L1136.33 690.777 L1136.89 690.777 L1137.45 690.777 L1138.01 690.777 L1138.57 690.777 L1139.13 690.777 L1139.68 690.777 L1140.24 690.777 L1140.8 690.777 L1141.36 690.777 L1141.92 690.777 L1142.48 690.777 L1143.04 690.777 L1143.6 690.777 L1144.16 690.777 L1144.72 690.777 L1145.28 690.777 L1145.84 690.777 L1146.4 690.777 L1146.96 690.777 L1147.51 690.777 L1148.07 690.777 L1148.63 690.777 L1149.19 690.777 L1149.75 690.777 L1150.31 690.777 L1150.87 690.777 L1151.43 690.777 L1151.99 690.777 L1152.55 690.777 L1153.11 690.777 L1153.67 690.777 L1154.23 690.777 L1154.78 690.777 L1155.34 690.777 L1155.9 690.777 L1156.46 690.777 L1157.02 690.777 L1157.58 690.777 L1158.14 690.777 L1158.7 690.777 L1159.26 690.777 L1159.82 690.777 L1160.38 690.777 L1160.94 690.777 L1161.5 690.777 L1162.05 690.777 L1162.61 690.777 L1163.17 690.777 L1163.73 690.777 L1164.29 690.777 L1164.85 690.777 L1165.41 690.777 L1165.97 690.777 L1166.53 690.777 L1167.09 690.777 L1167.65 690.777 L1168.21 690.777 L1168.77 690.777 L1169.33 690.777 L1169.88 690.777 L1170.44 690.777 L1171 690.777 L1171.56 690.777 L1172.12 690.777 L1172.68 690.777 L1173.24 690.777 L1173.8 690.777 L1174.36 690.777 L1174.92 690.777 L1175.48 690.777 L1176.04 690.777 L1176.6 690.777 L1177.15 690.777 L1177.71 690.777 L1178.27 690.777 L1178.83 690.777 L1179.39 690.777 L1179.95 690.777 L1180.51 690.777 L1181.07 690.777 L1181.63 690.777 L1182.19 690.777 L1182.75 690.777 L1183.31 690.777 L1183.87 690.777 L1184.43 690.777 L1184.98 690.777 L1185.54 690.777 L1186.1 690.777 L1186.66 690.777 L1187.22 690.777 L1187.78 690.777 L1188.34 690.777 L1188.9 690.777 L1189.46 690.777 L1190.02 690.777 L1190.58 690.777 L1191.14 690.777 L1191.7 690.777 L1192.25 690.777 L1192.81 690.777 L1193.37 690.777 L1193.93 690.777 L1194.49 690.777 L1195.05 690.777 L1195.61 690.777 L1196.17 690.777 L1196.73 690.777 L1197.29 690.777 L1197.85 690.777 L1198.41 690.777 L1198.97 690.777 L1199.52 690.777 L1200.08 690.777 L1200.64 690.777 L1201.2 690.777 L1201.76 690.777 L1202.32 690.777 L1202.88 690.777 L1203.44 690.777 L1204 690.777 L1204.56 690.777 L1205.12 690.777 L1205.68 690.777 L1206.24 690.777 L1206.8 690.777 L1207.35 690.777 L1207.91 690.777 L1208.47 690.777 L1209.03 690.777 L1209.59 690.777 L1210.15 690.777 L1210.71 690.777 L1211.27 690.777 L1211.83 690.777 L1212.39 690.777 L1212.95 690.777 L1213.51 690.777 L1214.07 690.777 L1214.62 690.777 L1215.18 690.777 L1215.74 690.777 L1216.3 690.777 L1216.86 690.777 L1217.42 690.777 L1217.98 690.777 L1218.54 690.777 L1219.1 690.777 L1219.66 690.777 L1220.22 690.777 L1220.78 690.777 L1221.34 690.777 L1221.89 690.777 L1222.45 690.777 L1223.01 690.777 L1223.57 690.777 L1224.13 690.777 L1224.69 690.777 L1225.25 690.777 L1225.81 690.777 L1226.37 690.777 L1226.93 690.777 L1227.49 690.777 L1228.05 690.777 L1228.61 690.777 L1229.17 690.777 L1229.72 690.777 L1230.28 690.777 L1230.84 690.777 L1231.4 690.777 L1231.96 690.777 L1232.52 690.777 L1233.08 690.777 L1233.64 690.777 L1234.2 690.777 L1234.76 690.777 L1235.32 690.777 L1235.88 690.777 L1236.44 690.777 L1236.99 690.777 L1237.55 690.777 L1238.11 690.777 L1238.67 690.777 L1239.23 690.777 L1239.79 690.777 L1240.35 690.777 L1240.91 690.777 L1241.47 690.777 L1242.03 690.777 L1242.59 690.777 L1243.15 690.777 L1243.71 690.777 L1244.26 690.777 L1244.82 690.777 L1245.38 690.777 L1245.94 690.777 L1246.5 690.777 L1247.06 690.777 L1247.62 690.777 L1248.18 690.777 L1248.74 690.777 L1249.3 690.777 L1249.86 690.777 L1250.42 690.777 L1250.98 690.777 L1251.54 690.777 L1252.09 690.777 L1252.65 690.777 L1253.21 690.777 L1253.77 690.777 L1254.33 690.777 L1254.89 690.777 L1255.45 690.777 L1256.01 690.777 L1256.57 690.777 L1257.13 690.777 L1257.69 690.777 L1258.25 690.777 L1258.81 690.777 L1259.36 690.777 L1259.92 690.777 L1260.48 690.777 L1261.04 690.777 L1261.6 690.777 L1262.16 690.777 L1262.72 690.777 L1263.28 690.777 L1263.84 690.777 L1264.4 690.777 L1264.96 690.777 L1265.52 690.777 L1266.08 690.777 L1266.63 690.777 L1267.19 690.777 L1267.75 690.777 L1268.31 690.777 L1268.87 690.777 L1269.43 690.777 L1269.99 690.777 L1270.55 690.777 L1271.11 690.777 L1271.67 690.777 L1272.23 690.777 L1272.79 690.777 L1273.35 690.777 L1273.91 690.777 L1274.46 690.777 L1275.02 690.777 L1275.58 690.777 L1276.14 690.777 L1276.7 690.777 L1277.26 690.777 L1277.82 690.777 L1278.38 690.777 L1278.94 690.777 L1279.5 690.777 L1280.06 690.777 L1280.62 690.777 L1281.18 690.777 L1281.73 690.777 L1282.29 690.777 L1282.85 690.777 L1283.41 690.777 L1283.97 690.777 L1284.53 690.777 L1285.09 690.777 L1285.65 690.777 L1286.21 690.777 L1286.77 690.777 L1287.33 690.777 L1287.89 690.777 L1288.45 690.777 L1289 690.777 L1289.56 690.777 L1290.12 690.777 L1290.68 690.777 L1291.24 690.777 L1291.8 690.777 L1292.36 690.777 L1292.92 690.777 L1293.48 690.777 L1294.04 690.777 L1294.6 690.777 L1295.16 690.777 L1295.72 690.777 L1296.28 690.777 L1296.83 690.777 L1297.39 690.777 L1297.95 690.777 L1298.51 690.777 L1299.07 690.777 L1299.63 690.777 L1300.19 690.777 L1300.75 690.777 L1301.31 690.777 L1301.87 690.777 L1302.43 690.777 L1302.99 690.777 L1303.55 690.777 L1304.1 690.777 L1304.66 690.777 L1305.22 690.777 L1305.78 690.777 L1306.34 690.777 L1306.9 690.777 L1307.46 690.777 L1308.02 690.777 L1308.58 690.777 L1309.14 690.777 L1309.7 690.777 L1310.26 690.777 L1310.82 690.777 L1311.38 690.777 L1311.93 690.777 L1312.49 690.777 L1313.05 690.777 L1313.61 690.777 L1314.17 690.777 L1314.73 690.777 L1315.29 690.777 L1315.85 690.777 L1316.41 690.777 L1316.97 690.777 L1317.53 690.777 L1318.09 690.777 L1318.65 690.777 L1319.2 690.777 L1319.76 690.777 L1320.32 690.777 L1320.88 690.777 L1321.44 690.777 L1322 690.777 L1322.56 690.777 L1323.12 690.777 L1323.68 690.777 L1324.24 690.777 L1324.8 690.777 L1325.36 690.777 L1325.92 690.777 L1326.47 690.777 L1327.03 690.777 L1327.59 690.777 L1328.15 690.777 L1328.71 690.777 L1329.27 690.777 L1329.83 690.777 L1330.39 690.777 L1330.95 690.777 L1331.51 690.777 L1332.07 690.777 L1332.63 690.777 L1333.19 690.777 L1333.75 690.777 L1334.3 690.777 L1334.86 690.777 L1335.42 690.777 L1335.98 690.777 L1336.54 690.777 L1337.1 690.777 L1337.66 690.777 L1338.22 690.777 L1338.78 690.777 L1339.34 690.777 L1339.9 690.777 L1340.46 690.777 L1341.02 690.777 L1341.57 690.777 L1342.13 690.777 L1342.69 690.777 L1343.25 690.777 L1343.81 690.777 L1344.37 690.777 L1344.93 690.777 L1345.49 690.777 L1346.05 690.777 L1346.61 690.777 L1347.17 690.777 L1347.73 690.777 L1348.29 690.777 L1348.84 690.777 L1349.4 690.777 L1349.96 690.777 L1350.52 690.777 L1351.08 690.777 L1351.64 690.777 L1352.2 690.777 L1352.76 690.777 L1353.32 690.777 L1353.88 690.777 L1354.44 690.777 L1355 690.777 L1355.56 690.777 L1356.12 690.777 L1356.67 690.777 L1357.23 690.777 L1357.79 690.777 L1358.35 690.777 L1358.91 690.777 L1359.47 690.777 L1360.03 690.777 L1360.59 690.777 L1361.15 690.777 L1361.71 690.777 L1362.27 690.777 L1362.83 690.777 L1363.39 690.777 L1363.94 690.777 L1364.5 690.777 L1365.06 690.777 L1365.62 690.777 L1366.18 690.777 L1366.74 690.777 L1367.3 690.777 L1367.86 690.777 L1368.42 690.777 L1368.98 690.777 L1369.54 690.777 L1370.1 690.777 L1370.66 690.777 L1371.21 690.777 L1371.77 690.777 L1372.33 690.777 L1372.89 690.777 L1373.45 690.777 L1374.01 690.777 L1374.57 690.777 L1375.13 690.777 L1375.69 690.777 L1376.25 690.777 L1376.81 690.777 L1377.37 690.777 L1377.93 690.777 L1378.49 690.777 L1379.04 690.777 L1379.6 690.777 L1380.16 690.777 L1380.72 690.777 L1381.28 690.777 L1381.84 690.777 L1382.4 690.777 L1382.96 690.777 L1383.52 690.777 L1384.08 690.777 L1384.64 690.777 L1385.2 690.777 L1385.76 690.777 L1386.31 690.777 L1386.87 690.777 L1387.43 690.777 L1387.99 690.777 L1388.55 690.777 L1389.11 690.777 L1389.67 690.777 L1390.23 690.777 L1390.79 690.777 L1391.35 690.777 L1391.91 690.777 L1392.47 690.777 L1393.03 690.777 L1393.58 690.777 L1394.14 690.777 L1394.7 690.777 L1395.26 690.777 L1395.82 690.777 L1396.38 690.777 L1396.94 690.777 L1397.5 690.777 L1398.06 690.777 L1398.62 690.777 L1399.18 690.777 L1399.74 690.777 L1400.3 690.777 L1400.86 690.777 L1401.41 690.777 L1401.97 690.777 L1402.53 690.777 L1403.09 690.777 L1403.65 690.777 L1404.21 690.777 L1404.77 690.777 L1405.33 690.777 L1405.89 690.777 L1406.45 690.777 L1407.01 690.777 L1407.57 690.777 L1408.13 690.777 L1408.68 690.777 L1409.24 690.777 L1409.8 690.777 L1410.36 690.777 L1410.92 690.777 L1411.48 690.777 L1412.04 690.777 L1412.6 690.777 L1413.16 690.777 L1413.72 690.777 L1414.28 690.777 L1414.84 690.777 L1415.4 690.777 L1415.95 690.777 L1416.51 690.777 L1417.07 690.777 L1417.63 690.777 L1418.19 690.777 L1418.75 690.777 L1419.31 690.777 L1419.87 690.777 L1420.43 690.777 L1420.99 690.777 L1421.55 690.777 L1422.11 690.777 L1422.67 690.777 L1423.23 690.777 L1423.78 690.777 L1424.34 690.777 L1424.9 690.777 L1425.46 690.777 L1426.02 690.777 L1426.58 690.777 L1427.14 690.777 L1427.7 690.777 L1428.26 690.777 L1428.82 690.777 L1429.38 690.777 L1429.94 690.777 L1430.5 690.777 L1431.05 690.777 L1431.61 690.777 L1432.17 690.777 L1432.73 690.777 L1433.29 690.777 L1433.85 690.777 L1434.41 690.777 L1434.97 690.777 L1435.53 690.777 L1436.09 690.777 L1436.65 690.777 L1437.21 690.777 L1437.77 690.777 L1438.33 690.777 L1438.88 690.777 L1439.44 690.777 L1440 690.777 L1440.56 690.777 L1441.12 690.777 L1441.68 690.777 L1442.24 690.777 L1442.8 690.777 L1443.36 690.777 L1443.92 690.777 L1444.48 690.777 L1445.04 690.777 L1445.6 690.777 L1446.15 690.777 L1446.71 690.777 L1447.27 690.777 L1447.83 690.777 L1448.39 690.777 L1448.95 690.777 L1449.51 690.777 L1450.07 690.777 L1450.63 690.777 L1451.19 690.777 L1451.75 690.777 L1452.31 690.777 L1452.87 690.777 L1453.42 690.777 L1453.98 690.777 L1454.54 690.777 L1455.1 690.777 L1455.66 690.777 L1456.22 690.777 L1456.78 690.777 L1457.34 690.777 L1457.9 690.777 L1458.46 690.777 L1459.02 690.777 L1459.58 690.777 L1460.14 690.777 L1460.7 690.777 L1461.25 690.777 L1461.81 690.777 L1462.37 690.777 L1462.93 690.777 L1463.49 690.777 L1464.05 690.777 L1464.61 690.777 L1465.17 690.777 L1465.73 690.777 L1466.29 690.777 L1466.85 690.777 L1467.41 690.777 L1467.97 690.777 L1468.52 690.777 L1469.08 690.777 L1469.64 690.777 L1470.2 690.777 L1470.76 690.777 L1471.32 690.777 L1471.88 690.777 L1472.44 690.777 L1473 690.777 L1473.56 690.777 L1474.12 690.777 L1474.68 690.777 L1475.24 690.777 L1475.79 690.777 L1476.35 690.777 L1476.91 690.777 L1477.47 690.777 L1478.03 690.777 L1478.59 690.777 L1479.15 690.777 L1479.71 690.777 L1480.27 690.777 L1480.83 690.777 L1481.39 690.777 L1481.95 690.777 L1482.51 690.777 L1483.07 690.777 L1483.62 690.777 L1484.18 690.777 L1484.74 690.777 L1485.3 690.777 L1485.86 690.777 L1486.42 690.777 L1486.98 690.777 L1487.54 690.777 L1488.1 690.777 L1488.66 690.777 L1489.22 690.777 L1489.78 690.777 L1490.34 690.777 L1490.89 690.777 L1491.45 690.777 L1492.01 690.777 L1492.57 690.777 L1493.13 690.777 L1493.69 690.777 L1494.25 690.777 L1494.81 690.777 L1495.37 690.777 L1495.93 690.777 L1496.49 690.777 L1497.05 690.777 L1497.61 690.777 L1498.16 690.777 L1498.72 690.777 L1499.28 690.777 L1499.84 690.777 L1500.4 690.777 L1500.96 690.777 L1501.52 690.777 L1502.08 690.777 L1502.64 690.777 L1503.2 690.777 L1503.76 690.777 L1504.32 690.777 L1504.88 690.777 L1505.44 690.777 L1505.99 690.777 L1506.55 690.777 L1507.11 690.777 L1507.67 690.777 L1508.23 690.777 L1508.79 690.777 L1509.35 690.777 L1509.91 690.777 L1510.47 690.777 L1511.03 690.777 L1511.59 690.777 L1512.15 690.777 L1512.71 690.777 L1513.26 690.777 L1513.82 690.777 L1514.38 690.777 L1514.94 690.777 L1515.5 690.777 L1516.06 690.777 L1516.62 690.777 L1517.18 690.777 L1517.74 690.777 L1518.3 690.777 L1518.86 690.777 L1519.42 690.777 L1519.98 690.777 L1520.53 690.777 L1521.09 690.777 L1521.65 690.777 L1522.21 690.777 L1522.77 690.777 L1523.33 690.777 L1523.89 690.777 L1524.45 690.777 L1525.01 690.777 L1525.57 690.777 L1526.13 690.777 L1526.69 690.777 L1527.25 690.777 L1527.81 690.777 L1528.36 690.777 L1528.92 690.777 L1529.48 690.777 L1530.04 690.777 L1530.6 690.777 L1531.16 690.777 L1531.72 690.777 L1532.28 690.777 L1532.84 690.777 L1533.4 690.777 L1533.96 690.777 L1534.52 690.777 L1535.08 690.777 L1535.63 690.777 L1536.19 690.777 L1536.75 690.777 L1537.31 690.777 L1537.87 690.777 L1538.43 690.777 L1538.99 690.777 L1539.55 690.777 L1540.11 690.777 L1540.67 690.777 L1541.23 690.777 L1541.79 690.777 L1542.35 690.777 L1542.9 690.777 L1543.46 690.777 L1544.02 690.777 L1544.58 690.777 L1545.14 690.777 L1545.7 690.777 L1546.26 690.777 L1546.82 690.777 L1547.38 690.777 L1547.94 690.777 L1548.5 690.777 L1549.06 690.777 L1549.62 690.777 L1550.18 690.777 L1550.73 690.777 L1551.29 690.777 L1551.85 690.777 L1552.41 690.777 L1552.97 690.777 L1553.53 690.777 L1554.09 690.777 L1554.65 690.777 L1555.21 690.777 L1555.77 690.777 L1556.33 690.777 L1556.89 690.777 L1557.45 690.777 L1558 690.777 L1558.56 690.777 L1559.12 690.777 L1559.68 690.777 L1560.24 690.777 L1560.8 690.777 L1561.36 690.777 L1561.92 690.777 L1562.48 690.777 L1563.04 690.777 L1563.6 690.777 L1564.16 690.777 L1564.72 690.777 L1565.28 690.777 L1565.83 690.777 L1566.39 690.777 L1566.95 690.777 L1567.51 690.777 L1568.07 690.777 L1568.63 690.777 L1569.19 690.777 L1569.75 690.777 L1570.31 690.777 L1570.87 690.777 L1571.43 690.777 L1571.99 690.777 L1572.55 690.777 L1573.1 690.777 L1573.66 690.777 L1574.22 690.777 L1574.78 690.777 L1575.34 690.777 L1575.9 690.777 L1576.46 690.777 L1577.02 690.777 L1577.58 690.777 L1578.14 690.777 L1578.7 690.777 L1579.26 690.777 L1579.82 690.777 L1580.37 690.777 L1580.93 690.777 L1581.49 690.777 L1582.05 690.777 L1582.61 690.777 L1583.17 690.777 L1583.73 690.777 L1584.29 690.777 L1584.85 690.777 L1585.41 690.777 L1585.97 690.777 L1586.53 690.777 L1587.09 690.777 L1587.65 690.777 L1588.2 690.777 L1588.76 690.777 L1589.32 690.777 L1589.88 690.777 L1590.44 690.777 L1591 690.777 L1591.56 690.777 L1592.12 690.777 L1592.68 690.777 L1593.24 690.777 L1593.8 690.777 L1594.36 690.777 L1594.92 690.777 L1595.47 690.777 L1596.03 690.777 L1596.59 690.777 L1597.15 690.777 L1597.71 690.777 L1598.27 690.777 L1598.83 690.777 L1599.39 690.777 L1599.95 690.777 L1600.51 690.777 L1601.07 690.777 L1601.63 690.777 L1602.19 690.777 L1602.74 690.777 L1603.3 690.777 L1603.86 690.777 L1604.42 690.777 L1604.98 690.777 L1605.54 690.777 L1606.1 690.777 L1606.66 690.777 L1607.22 690.777 L1607.78 690.777 L1608.34 690.777 L1608.9 690.777 L1609.46 690.777 L1610.02 690.777 L1610.57 690.777 L1611.13 690.777 L1611.69 690.777 L1612.25 690.777 L1612.81 690.777 L1613.37 690.777 L1613.93 690.777 L1614.49 690.777 L1615.05 690.777 L1615.61 690.777 L1616.17 690.777 L1616.73 690.777 L1617.29 690.777 L1617.84 690.777 L1618.4 690.777 L1618.96 690.777 L1619.52 690.777 L1620.08 690.777 L1620.64 690.777 L1621.2 690.777 L1621.76 690.777 L1622.32 690.777 L1622.88 690.777 L1623.44 690.777 L1624 690.777 L1624.56 690.777 L1625.11 690.777 L1625.67 690.777 L1626.23 690.777 L1626.79 690.777 L1627.35 690.777 L1627.91 690.777 L1628.47 690.777 L1629.03 690.777 L1629.59 690.777 L1630.15 690.777 L1630.71 690.777 L1631.27 690.777 L1631.83 690.777 L1632.39 690.777 L1632.94 690.777 L1633.5 690.777 L1634.06 690.777 L1634.62 690.777 L1635.18 690.777 L1635.74 690.777 L1636.3 690.777 L1636.86 690.777 L1637.42 690.777 L1637.98 690.777 L1638.54 690.777 L1639.1 690.777 L1639.66 690.777 L1640.21 690.777 L1640.77 690.777 L1641.33 690.777 L1641.89 690.777 L1642.45 690.777 L1643.01 690.777 L1643.57 690.777 L1644.13 690.777 L1644.69 690.777 L1645.25 690.777 L1645.81 690.777 L1646.37 690.777 L1646.93 690.777 L1647.48 690.777 L1648.04 690.777 L1648.6 690.777 L1649.16 690.777 L1649.72 690.777 L1650.28 690.777 L1650.84 690.777 L1651.4 690.777 L1651.96 690.777 L1652.52 690.777 L1653.08 690.777 L1653.64 690.777 L1654.2 690.777 L1654.76 690.777 L1655.31 690.777 L1655.87 690.777 L1656.43 690.777 L1656.99 690.777 L1657.55 690.777 L1658.11 690.777 L1658.67 690.777 L1659.23 690.777 L1659.79 690.777 L1660.35 690.777 L1660.91 690.777 L1661.47 690.777 L1662.03 690.777 L1662.58 690.777 L1663.14 690.777 L1663.7 690.777 L1664.26 690.777 L1664.82 690.777 L1665.38 690.777 L1665.94 690.777 L1666.5 690.777 L1667.06 690.777 L1667.62 690.777 L1668.18 690.777 L1668.74 690.777 L1669.3 690.777 L1669.85 690.777 L1670.41 690.777 L1670.97 690.777 L1671.53 690.777 L1672.09 690.777 L1672.65 690.777 L1673.21 690.777 L1673.77 690.777 L1674.33 690.777 L1674.89 690.777 L1675.45 690.777 L1676.01 690.777 L1676.57 690.777 L1677.13 690.777 L1677.68 690.777 L1678.24 690.777 L1678.8 690.777 L1679.36 690.777 L1679.92 690.777 L1680.48 690.777 L1681.04 690.777 L1681.6 690.777 L1682.16 690.777 L1682.72 690.777 L1683.28 690.777 L1683.84 690.777 L1684.4 690.777 L1684.95 690.777 L1685.51 690.777 L1686.07 690.777 L1686.63 690.777 L1687.19 690.777 L1687.75 690.777 L1688.31 690.777 L1688.87 690.777 L1689.43 690.777 L1689.99 690.777 L1690.55 690.777 L1691.11 690.777 L1691.67 690.777 L1692.23 690.777 L1692.78 690.777 L1693.34 690.777 L1693.9 690.777 L1694.46 690.777 L1695.02 690.777 L1695.58 690.777 L1696.14 690.777 L1696.7 690.777 L1697.26 690.777 L1697.82 690.777 L1698.38 690.777 L1698.94 690.777 L1699.5 690.777 L1700.05 690.777 L1700.61 690.777 L1701.17 690.777 L1701.73 690.777 L1702.29 690.777 L1702.85 690.777 L1703.41 690.777 L1703.97 690.777 L1704.53 690.777 L1705.09 690.777 L1705.65 690.777 L1706.21 690.777 L1706.77 690.777 L1707.32 690.777 L1707.88 690.777 L1708.44 690.777 L1709 690.777 L1709.56 690.777 L1710.12 690.777 L1710.68 690.777 L1711.24 690.777 L1711.8 690.777 L1712.36 690.777 L1712.92 690.777 L1713.48 690.777 L1714.04 690.777 L1714.6 690.777 L1715.15 690.777 L1715.71 690.777 L1716.27 690.777 L1716.83 690.777 L1717.39 690.777 L1717.95 690.777 L1718.51 690.777 L1719.07 690.777 L1719.63 690.777 L1720.19 690.777 L1720.75 690.777 L1721.31 690.777 L1721.87 690.777 L1722.42 690.777 L1722.98 690.777 L1723.54 690.777 L1724.1 690.777 L1724.66 690.777 L1725.22 690.777 L1725.78 690.777 L1726.34 690.777 L1726.9 690.777 L1727.46 690.777 L1728.02 690.777 L1728.58 690.777 L1729.14 690.777 L1729.69 690.777 L1730.25 690.777 L1730.81 690.777 L1731.37 690.777 L1731.93 690.777 L1732.49 690.777 L1733.05 690.777 L1733.61 690.777 L1734.17 690.777 L1734.73 690.777 L1735.29 690.777 L1735.85 690.777 L1736.41 690.777 L1736.97 690.777 L1737.52 690.777 L1738.08 690.777 L1738.64 690.777 L1739.2 690.777 L1739.76 690.777 L1740.32 690.777 L1740.88 690.777 L1741.44 690.777 L1742 690.777 L1742.56 690.777 L1743.12 690.777 L1743.68 690.777 L1744.24 690.777 L1744.79 690.777 L1745.35 690.777 L1745.91 690.777 L1746.47 690.777 L1747.03 690.777 L1747.59 690.777 L1748.15 690.777 L1748.71 690.777 L1749.27 690.777 L1749.83 690.777 L1750.39 690.777 L1750.95 690.777 L1751.51 690.777 L1752.06 690.777 L1752.62 690.777 L1753.18 690.777 L1753.74 690.777 L1754.3 690.777 L1754.86 690.777 L1755.42 690.777 L1755.98 690.777 L1756.54 690.777 L1757.1 690.777 L1757.66 690.777 L1758.22 690.777 L1758.78 690.777 L1759.34 690.777 L1759.89 690.777 L1760.45 690.777 L1761.01 690.777 L1761.57 690.777 L1762.13 690.777 L1762.69 690.777 L1763.25 690.777 L1763.81 690.777 L1764.37 690.777 L1764.93 690.777 L1765.49 690.777 L1766.05 690.777 L1766.61 690.777 L1767.16 690.777 L1767.72 690.777 L1768.28 690.777 L1768.84 690.777 L1769.4 690.777 L1769.96 690.777 L1770.52 690.777 L1771.08 690.777 L1771.64 690.777 L1772.2 690.777 L1772.76 690.777 L1773.32 690.777 L1773.88 690.777 L1774.43 690.777 L1774.99 690.777 L1775.55 690.777 L1776.11 690.777 L1776.67 690.777 L1777.23 690.777 L1777.79 690.777 L1778.35 690.777 L1778.91 690.777 L1779.47 690.777 L1780.03 690.777 L1780.59 690.777 L1781.15 690.777 L1781.71 690.777 L1782.26 690.777 L1782.82 690.777 L1783.38 690.777 L1783.94 690.777 L1784.5 690.777 L1785.06 690.777 L1785.62 690.777 L1786.18 690.777 L1786.74 690.777 L1787.3 690.777 L1787.86 690.777 L1788.42 690.777 L1788.98 690.777 L1789.53 690.777 L1790.09 690.777 L1790.65 690.777 L1791.21 690.777 L1791.77 690.777 L1792.33 690.777 L1792.89 690.777 L1793.45 690.777 L1794.01 690.777 L1794.57 690.777 L1795.13 690.777 L1795.69 690.777 L1796.25 690.777 L1796.8 690.777 L1797.36 690.777 L1797.92 690.777 L1798.48 690.777 L1799.04 690.777 L1799.6 690.777 L1800.16 690.777 L1800.72 690.777 L1801.28 690.777 L1801.84 690.777 L1802.4 690.777 L1802.96 690.777 L1803.52 690.777 L1804.08 690.777 L1804.63 690.777 L1805.19 690.777 L1805.75 690.777 L1806.31 690.777 L1806.87 690.777 L1807.43 690.777 L1807.99 690.777 L1808.55 690.777 L1809.11 690.777 L1809.67 690.777 L1810.23 690.777 L1810.79 690.777 L1811.35 690.777 L1811.9 690.777 L1812.46 690.777 L1813.02 690.777 L1813.58 690.777 L1814.14 690.777 L1814.7 690.777 L1815.26 690.777 L1815.82 690.777 L1816.38 690.777 L1816.94 690.777 L1817.5 690.777 L1818.06 690.777 L1818.62 690.777 L1819.18 690.777 L1819.73 690.777 L1820.29 690.777 L1820.85 690.777 L1821.41 690.777 L1821.97 690.777 L1822.53 690.777 L1823.09 690.777 L1823.65 690.777 L1824.21 690.777 L1824.77 690.777 L1825.33 690.777 L1825.89 690.777 L1826.45 690.777 L1827 690.777 L1827.56 690.777 L1828.12 690.777 L1828.68 690.777 L1829.24 690.777 L1829.8 690.777 L1830.36 690.777 L1830.92 690.777 L1831.48 690.777 L1832.04 690.777 L1832.6 690.777 L1833.16 690.777 L1833.72 690.777 L1834.27 690.777 L1834.83 690.777 L1835.39 690.777 L1835.95 690.777 L1836.51 690.777 L1837.07 690.777 L1837.63 690.777 L1838.19 690.777 L1838.19 682.137 L1837.63 682.137 L1837.07 682.137 L1836.51 682.137 L1835.95 682.137 L1835.39 682.137 L1834.83 682.137 L1834.27 682.137 L1833.72 682.137 L1833.16 682.137 L1832.6 682.137 L1832.04 682.137 L1831.48 682.137 L1830.92 682.137 L1830.36 682.137 L1829.8 682.137 L1829.24 682.137 L1828.68 682.137 L1828.12 682.137 L1827.56 682.137 L1827 682.137 L1826.45 682.137 L1825.89 682.137 L1825.33 682.137 L1824.77 682.137 L1824.21 682.137 L1823.65 682.137 L1823.09 682.137 L1822.53 682.137 L1821.97 682.137 L1821.41 682.137 L1820.85 682.137 L1820.29 682.137 L1819.73 682.137 L1819.18 682.137 L1818.62 682.137 L1818.06 682.137 L1817.5 682.137 L1816.94 682.137 L1816.38 682.137 L1815.82 682.137 L1815.26 682.137 L1814.7 682.137 L1814.14 682.137 L1813.58 682.137 L1813.02 682.137 L1812.46 682.137 L1811.9 682.137 L1811.35 682.137 L1810.79 682.137 L1810.23 682.137 L1809.67 682.137 L1809.11 682.137 L1808.55 682.137 L1807.99 682.137 L1807.43 682.137 L1806.87 682.137 L1806.31 682.137 L1805.75 682.137 L1805.19 682.137 L1804.63 682.137 L1804.08 682.137 L1803.52 682.137 L1802.96 682.137 L1802.4 682.137 L1801.84 682.137 L1801.28 682.137 L1800.72 682.137 L1800.16 682.137 L1799.6 682.137 L1799.04 682.137 L1798.48 682.137 L1797.92 682.137 L1797.36 682.137 L1796.8 682.137 L1796.25 682.137 L1795.69 682.137 L1795.13 682.137 L1794.57 682.137 L1794.01 682.137 L1793.45 682.137 L1792.89 682.137 L1792.33 682.137 L1791.77 682.137 L1791.21 682.137 L1790.65 682.137 L1790.09 682.137 L1789.53 682.137 L1788.98 682.137 L1788.42 682.137 L1787.86 682.137 L1787.3 682.137 L1786.74 682.137 L1786.18 682.137 L1785.62 682.137 L1785.06 682.137 L1784.5 682.137 L1783.94 682.137 L1783.38 682.137 L1782.82 682.137 L1782.26 682.137 L1781.71 682.137 L1781.15 682.137 L1780.59 682.137 L1780.03 682.137 L1779.47 682.137 L1778.91 682.137 L1778.35 682.137 L1777.79 682.137 L1777.23 682.137 L1776.67 682.137 L1776.11 682.137 L1775.55 682.137 L1774.99 682.137 L1774.43 682.137 L1773.88 682.137 L1773.32 682.137 L1772.76 682.137 L1772.2 682.137 L1771.64 682.137 L1771.08 682.137 L1770.52 682.137 L1769.96 682.137 L1769.4 682.137 L1768.84 682.137 L1768.28 682.137 L1767.72 682.137 L1767.16 682.137 L1766.61 682.137 L1766.05 682.137 L1765.49 682.137 L1764.93 682.137 L1764.37 682.137 L1763.81 682.137 L1763.25 682.137 L1762.69 682.137 L1762.13 682.137 L1761.57 682.137 L1761.01 682.137 L1760.45 682.137 L1759.89 682.137 L1759.34 682.137 L1758.78 682.137 L1758.22 682.137 L1757.66 682.137 L1757.1 682.137 L1756.54 682.137 L1755.98 682.137 L1755.42 682.137 L1754.86 682.137 L1754.3 682.137 L1753.74 682.137 L1753.18 682.137 L1752.62 682.137 L1752.06 682.137 L1751.51 682.137 L1750.95 682.137 L1750.39 682.137 L1749.83 682.137 L1749.27 682.137 L1748.71 682.137 L1748.15 682.137 L1747.59 682.137 L1747.03 682.137 L1746.47 682.137 L1745.91 682.137 L1745.35 682.137 L1744.79 682.137 L1744.24 682.137 L1743.68 682.137 L1743.12 682.137 L1742.56 682.137 L1742 682.137 L1741.44 682.137 L1740.88 682.137 L1740.32 682.137 L1739.76 682.137 L1739.2 682.137 L1738.64 682.137 L1738.08 682.137 L1737.52 682.137 L1736.97 682.137 L1736.41 682.137 L1735.85 682.137 L1735.29 682.137 L1734.73 682.137 L1734.17 682.137 L1733.61 682.137 L1733.05 682.137 L1732.49 682.137 L1731.93 682.137 L1731.37 682.137 L1730.81 682.137 L1730.25 682.137 L1729.69 682.137 L1729.14 682.137 L1728.58 682.137 L1728.02 682.137 L1727.46 682.137 L1726.9 682.137 L1726.34 682.137 L1725.78 682.137 L1725.22 682.137 L1724.66 682.137 L1724.1 682.137 L1723.54 682.137 L1722.98 682.137 L1722.42 682.137 L1721.87 682.137 L1721.31 682.137 L1720.75 682.137 L1720.19 682.137 L1719.63 682.137 L1719.07 682.137 L1718.51 682.137 L1717.95 682.137 L1717.39 682.137 L1716.83 682.137 L1716.27 682.137 L1715.71 682.137 L1715.15 682.137 L1714.6 682.137 L1714.04 682.137 L1713.48 682.137 L1712.92 682.137 L1712.36 682.137 L1711.8 682.137 L1711.24 682.137 L1710.68 682.137 L1710.12 682.137 L1709.56 682.137 L1709 682.137 L1708.44 682.137 L1707.88 682.137 L1707.32 682.137 L1706.77 682.137 L1706.21 682.137 L1705.65 682.137 L1705.09 682.137 L1704.53 682.137 L1703.97 682.137 L1703.41 682.137 L1702.85 682.137 L1702.29 682.137 L1701.73 682.137 L1701.17 682.137 L1700.61 682.137 L1700.05 682.137 L1699.5 682.137 L1698.94 682.137 L1698.38 682.137 L1697.82 682.137 L1697.26 682.137 L1696.7 682.137 L1696.14 682.137 L1695.58 682.137 L1695.02 682.137 L1694.46 682.137 L1693.9 682.137 L1693.34 682.137 L1692.78 682.137 L1692.23 682.137 L1691.67 682.137 L1691.11 682.137 L1690.55 682.137 L1689.99 682.137 L1689.43 682.137 L1688.87 682.137 L1688.31 682.137 L1687.75 682.137 L1687.19 682.137 L1686.63 682.137 L1686.07 682.137 L1685.51 682.137 L1684.95 682.137 L1684.4 682.137 L1683.84 682.137 L1683.28 682.137 L1682.72 682.137 L1682.16 682.137 L1681.6 682.137 L1681.04 682.137 L1680.48 682.137 L1679.92 682.137 L1679.36 682.137 L1678.8 682.137 L1678.24 682.137 L1677.68 682.137 L1677.13 682.137 L1676.57 682.137 L1676.01 682.137 L1675.45 682.137 L1674.89 682.137 L1674.33 682.137 L1673.77 682.137 L1673.21 682.137 L1672.65 682.137 L1672.09 682.137 L1671.53 682.137 L1670.97 682.137 L1670.41 682.137 L1669.85 682.137 L1669.3 682.137 L1668.74 682.137 L1668.18 682.137 L1667.62 682.137 L1667.06 682.137 L1666.5 682.137 L1665.94 682.137 L1665.38 682.137 L1664.82 682.137 L1664.26 682.137 L1663.7 682.137 L1663.14 682.137 L1662.58 682.137 L1662.03 682.137 L1661.47 682.137 L1660.91 682.137 L1660.35 682.137 L1659.79 682.137 L1659.23 682.137 L1658.67 682.137 L1658.11 682.137 L1657.55 682.137 L1656.99 682.137 L1656.43 682.137 L1655.87 682.137 L1655.31 682.137 L1654.76 682.137 L1654.2 682.137 L1653.64 682.137 L1653.08 682.137 L1652.52 682.137 L1651.96 682.137 L1651.4 682.137 L1650.84 682.137 L1650.28 682.137 L1649.72 682.137 L1649.16 682.137 L1648.6 682.137 L1648.04 682.137 L1647.48 682.137 L1646.93 682.137 L1646.37 682.137 L1645.81 682.137 L1645.25 682.137 L1644.69 682.137 L1644.13 682.137 L1643.57 682.137 L1643.01 682.137 L1642.45 682.137 L1641.89 682.137 L1641.33 682.137 L1640.77 682.137 L1640.21 682.137 L1639.66 682.137 L1639.1 682.137 L1638.54 682.137 L1637.98 682.137 L1637.42 682.137 L1636.86 682.137 L1636.3 682.137 L1635.74 682.137 L1635.18 682.137 L1634.62 682.137 L1634.06 682.137 L1633.5 682.137 L1632.94 682.137 L1632.39 682.137 L1631.83 682.137 L1631.27 682.137 L1630.71 682.137 L1630.15 682.137 L1629.59 682.137 L1629.03 682.137 L1628.47 682.137 L1627.91 682.137 L1627.35 682.137 L1626.79 682.137 L1626.23 682.137 L1625.67 682.137 L1625.11 682.137 L1624.56 682.137 L1624 682.137 L1623.44 682.137 L1622.88 682.137 L1622.32 682.137 L1621.76 682.137 L1621.2 682.137 L1620.64 682.137 L1620.08 682.137 L1619.52 682.137 L1618.96 682.137 L1618.4 682.137 L1617.84 682.137 L1617.29 682.137 L1616.73 682.137 L1616.17 682.137 L1615.61 682.137 L1615.05 682.137 L1614.49 682.137 L1613.93 682.137 L1613.37 682.137 L1612.81 682.137 L1612.25 682.137 L1611.69 682.137 L1611.13 682.137 L1610.57 682.137 L1610.02 682.137 L1609.46 682.137 L1608.9 682.137 L1608.34 682.137 L1607.78 682.137 L1607.22 682.137 L1606.66 682.137 L1606.1 682.137 L1605.54 682.137 L1604.98 682.137 L1604.42 682.137 L1603.86 682.137 L1603.3 682.137 L1602.74 682.137 L1602.19 682.137 L1601.63 682.137 L1601.07 682.137 L1600.51 682.137 L1599.95 682.137 L1599.39 682.137 L1598.83 682.137 L1598.27 682.137 L1597.71 682.137 L1597.15 682.137 L1596.59 682.137 L1596.03 682.137 L1595.47 682.137 L1594.92 682.137 L1594.36 682.137 L1593.8 682.137 L1593.24 682.137 L1592.68 682.137 L1592.12 682.137 L1591.56 682.137 L1591 682.137 L1590.44 682.137 L1589.88 682.137 L1589.32 682.137 L1588.76 682.137 L1588.2 682.137 L1587.65 682.137 L1587.09 682.137 L1586.53 682.137 L1585.97 682.137 L1585.41 682.137 L1584.85 682.137 L1584.29 682.137 L1583.73 682.137 L1583.17 682.137 L1582.61 682.137 L1582.05 682.137 L1581.49 682.137 L1580.93 682.137 L1580.37 682.137 L1579.82 682.137 L1579.26 682.137 L1578.7 682.137 L1578.14 682.137 L1577.58 682.137 L1577.02 682.137 L1576.46 682.137 L1575.9 682.137 L1575.34 682.137 L1574.78 682.137 L1574.22 682.137 L1573.66 682.137 L1573.1 682.137 L1572.55 682.137 L1571.99 682.137 L1571.43 682.137 L1570.87 682.137 L1570.31 682.137 L1569.75 682.137 L1569.19 682.137 L1568.63 682.137 L1568.07 682.137 L1567.51 682.137 L1566.95 682.137 L1566.39 682.137 L1565.83 682.137 L1565.28 682.137 L1564.72 682.137 L1564.16 682.137 L1563.6 682.137 L1563.04 682.137 L1562.48 682.137 L1561.92 682.137 L1561.36 682.137 L1560.8 682.137 L1560.24 682.137 L1559.68 682.137 L1559.12 682.137 L1558.56 682.137 L1558 682.137 L1557.45 682.137 L1556.89 682.137 L1556.33 682.137 L1555.77 682.137 L1555.21 682.137 L1554.65 682.137 L1554.09 682.137 L1553.53 682.137 L1552.97 682.137 L1552.41 682.137 L1551.85 682.137 L1551.29 682.137 L1550.73 682.137 L1550.18 682.137 L1549.62 682.137 L1549.06 682.137 L1548.5 682.137 L1547.94 682.137 L1547.38 682.137 L1546.82 682.137 L1546.26 682.137 L1545.7 682.137 L1545.14 682.137 L1544.58 682.137 L1544.02 682.137 L1543.46 682.137 L1542.9 682.137 L1542.35 682.137 L1541.79 682.137 L1541.23 682.137 L1540.67 682.137 L1540.11 682.137 L1539.55 682.137 L1538.99 682.137 L1538.43 682.137 L1537.87 682.137 L1537.31 682.137 L1536.75 682.137 L1536.19 682.137 L1535.63 682.137 L1535.08 682.137 L1534.52 682.137 L1533.96 682.137 L1533.4 682.137 L1532.84 682.137 L1532.28 682.137 L1531.72 682.137 L1531.16 682.137 L1530.6 682.137 L1530.04 682.137 L1529.48 682.137 L1528.92 682.137 L1528.36 682.137 L1527.81 682.137 L1527.25 682.137 L1526.69 682.137 L1526.13 682.137 L1525.57 682.137 L1525.01 682.137 L1524.45 682.137 L1523.89 682.137 L1523.33 682.137 L1522.77 682.137 L1522.21 682.137 L1521.65 682.137 L1521.09 682.137 L1520.53 682.137 L1519.98 682.137 L1519.42 682.137 L1518.86 682.137 L1518.3 682.137 L1517.74 682.137 L1517.18 682.137 L1516.62 682.137 L1516.06 682.137 L1515.5 682.137 L1514.94 682.137 L1514.38 682.137 L1513.82 682.137 L1513.26 682.137 L1512.71 682.137 L1512.15 682.137 L1511.59 682.137 L1511.03 682.137 L1510.47 682.137 L1509.91 682.137 L1509.35 682.137 L1508.79 682.137 L1508.23 682.137 L1507.67 682.137 L1507.11 682.137 L1506.55 682.137 L1505.99 682.137 L1505.44 682.137 L1504.88 682.137 L1504.32 682.137 L1503.76 682.137 L1503.2 682.137 L1502.64 682.137 L1502.08 682.137 L1501.52 682.137 L1500.96 682.137 L1500.4 682.137 L1499.84 682.137 L1499.28 682.137 L1498.72 682.137 L1498.16 682.137 L1497.61 682.137 L1497.05 682.137 L1496.49 682.137 L1495.93 682.137 L1495.37 682.137 L1494.81 682.137 L1494.25 682.137 L1493.69 682.137 L1493.13 682.137 L1492.57 682.137 L1492.01 682.137 L1491.45 682.137 L1490.89 682.137 L1490.34 682.137 L1489.78 682.137 L1489.22 682.137 L1488.66 682.137 L1488.1 682.137 L1487.54 682.137 L1486.98 682.137 L1486.42 682.137 L1485.86 682.137 L1485.3 682.137 L1484.74 682.137 L1484.18 682.137 L1483.62 682.137 L1483.07 682.137 L1482.51 682.137 L1481.95 682.137 L1481.39 682.137 L1480.83 682.137 L1480.27 682.137 L1479.71 682.137 L1479.15 682.137 L1478.59 682.137 L1478.03 682.137 L1477.47 682.137 L1476.91 682.137 L1476.35 682.137 L1475.79 682.137 L1475.24 682.137 L1474.68 682.137 L1474.12 682.137 L1473.56 682.137 L1473 682.137 L1472.44 682.137 L1471.88 682.137 L1471.32 682.137 L1470.76 682.137 L1470.2 682.137 L1469.64 682.137 L1469.08 682.137 L1468.52 682.137 L1467.97 682.137 L1467.41 682.137 L1466.85 682.137 L1466.29 682.137 L1465.73 682.137 L1465.17 682.137 L1464.61 682.137 L1464.05 682.137 L1463.49 682.137 L1462.93 682.137 L1462.37 682.137 L1461.81 682.137 L1461.25 682.137 L1460.7 682.137 L1460.14 682.137 L1459.58 682.137 L1459.02 682.137 L1458.46 682.137 L1457.9 682.137 L1457.34 682.137 L1456.78 682.137 L1456.22 682.137 L1455.66 682.137 L1455.1 682.137 L1454.54 682.137 L1453.98 682.137 L1453.42 682.137 L1452.87 682.137 L1452.31 682.137 L1451.75 682.137 L1451.19 682.137 L1450.63 682.137 L1450.07 682.137 L1449.51 682.137 L1448.95 682.137 L1448.39 682.137 L1447.83 682.137 L1447.27 682.137 L1446.71 682.137 L1446.15 682.137 L1445.6 682.137 L1445.04 682.137 L1444.48 682.137 L1443.92 682.137 L1443.36 682.137 L1442.8 682.137 L1442.24 682.137 L1441.68 682.137 L1441.12 682.137 L1440.56 682.137 L1440 682.137 L1439.44 682.137 L1438.88 682.137 L1438.33 682.137 L1437.77 682.137 L1437.21 682.137 L1436.65 682.137 L1436.09 682.137 L1435.53 682.137 L1434.97 682.137 L1434.41 682.137 L1433.85 682.137 L1433.29 682.137 L1432.73 682.137 L1432.17 682.137 L1431.61 682.137 L1431.05 682.137 L1430.5 682.137 L1429.94 682.137 L1429.38 682.137 L1428.82 682.137 L1428.26 682.137 L1427.7 682.137 L1427.14 682.137 L1426.58 682.137 L1426.02 682.137 L1425.46 682.137 L1424.9 682.137 L1424.34 682.137 L1423.78 682.137 L1423.23 682.137 L1422.67 682.137 L1422.11 682.137 L1421.55 682.137 L1420.99 682.137 L1420.43 682.137 L1419.87 682.137 L1419.31 682.137 L1418.75 682.137 L1418.19 682.137 L1417.63 682.137 L1417.07 682.137 L1416.51 682.137 L1415.95 682.137 L1415.4 682.137 L1414.84 682.137 L1414.28 682.137 L1413.72 682.137 L1413.16 682.137 L1412.6 682.137 L1412.04 682.137 L1411.48 682.137 L1410.92 682.137 L1410.36 682.137 L1409.8 682.137 L1409.24 682.137 L1408.68 682.137 L1408.13 682.137 L1407.57 682.137 L1407.01 682.137 L1406.45 682.137 L1405.89 682.137 L1405.33 682.137 L1404.77 682.137 L1404.21 682.137 L1403.65 682.137 L1403.09 682.137 L1402.53 682.137 L1401.97 682.137 L1401.41 682.137 L1400.86 682.137 L1400.3 682.137 L1399.74 682.137 L1399.18 682.137 L1398.62 682.137 L1398.06 682.137 L1397.5 682.137 L1396.94 682.137 L1396.38 682.137 L1395.82 682.137 L1395.26 682.137 L1394.7 682.137 L1394.14 682.137 L1393.58 682.137 L1393.03 682.137 L1392.47 682.137 L1391.91 682.137 L1391.35 682.137 L1390.79 682.137 L1390.23 682.137 L1389.67 682.137 L1389.11 682.137 L1388.55 682.137 L1387.99 682.137 L1387.43 682.137 L1386.87 682.137 L1386.31 682.137 L1385.76 682.137 L1385.2 682.137 L1384.64 682.137 L1384.08 682.137 L1383.52 682.137 L1382.96 682.137 L1382.4 682.137 L1381.84 682.137 L1381.28 682.137 L1380.72 682.137 L1380.16 682.137 L1379.6 682.137 L1379.04 682.137 L1378.49 682.137 L1377.93 682.137 L1377.37 682.137 L1376.81 682.137 L1376.25 682.137 L1375.69 682.137 L1375.13 682.137 L1374.57 682.137 L1374.01 682.137 L1373.45 682.137 L1372.89 682.137 L1372.33 682.137 L1371.77 682.137 L1371.21 682.137 L1370.66 682.137 L1370.1 682.137 L1369.54 682.137 L1368.98 682.137 L1368.42 682.137 L1367.86 682.137 L1367.3 682.137 L1366.74 682.137 L1366.18 682.137 L1365.62 682.137 L1365.06 682.137 L1364.5 682.137 L1363.94 682.137 L1363.39 682.137 L1362.83 682.137 L1362.27 682.137 L1361.71 682.137 L1361.15 682.137 L1360.59 682.137 L1360.03 682.137 L1359.47 682.137 L1358.91 682.137 L1358.35 682.137 L1357.79 682.137 L1357.23 682.137 L1356.67 682.137 L1356.12 682.137 L1355.56 682.137 L1355 682.137 L1354.44 682.137 L1353.88 682.137 L1353.32 682.137 L1352.76 682.137 L1352.2 682.137 L1351.64 682.137 L1351.08 682.137 L1350.52 682.137 L1349.96 682.137 L1349.4 682.137 L1348.84 682.137 L1348.29 682.137 L1347.73 682.137 L1347.17 682.137 L1346.61 682.137 L1346.05 682.137 L1345.49 682.137 L1344.93 682.137 L1344.37 682.137 L1343.81 682.137 L1343.25 682.137 L1342.69 682.137 L1342.13 682.137 L1341.57 682.137 L1341.02 682.137 L1340.46 682.137 L1339.9 682.137 L1339.34 682.137 L1338.78 682.137 L1338.22 682.137 L1337.66 682.137 L1337.1 682.137 L1336.54 682.137 L1335.98 682.137 L1335.42 682.137 L1334.86 682.137 L1334.3 682.137 L1333.75 682.137 L1333.19 682.137 L1332.63 682.137 L1332.07 682.137 L1331.51 682.137 L1330.95 682.137 L1330.39 682.137 L1329.83 682.137 L1329.27 682.137 L1328.71 682.137 L1328.15 682.137 L1327.59 682.137 L1327.03 682.137 L1326.47 682.137 L1325.92 682.137 L1325.36 682.137 L1324.8 682.137 L1324.24 682.137 L1323.68 682.137 L1323.12 682.137 L1322.56 682.137 L1322 682.137 L1321.44 682.137 L1320.88 682.137 L1320.32 682.137 L1319.76 682.137 L1319.2 682.137 L1318.65 682.137 L1318.09 682.137 L1317.53 682.137 L1316.97 682.137 L1316.41 682.137 L1315.85 682.137 L1315.29 682.137 L1314.73 682.137 L1314.17 682.137 L1313.61 682.137 L1313.05 682.137 L1312.49 682.137 L1311.93 682.137 L1311.38 682.137 L1310.82 682.137 L1310.26 682.137 L1309.7 682.137 L1309.14 682.137 L1308.58 682.137 L1308.02 682.137 L1307.46 682.137 L1306.9 682.137 L1306.34 682.137 L1305.78 682.137 L1305.22 682.137 L1304.66 682.137 L1304.1 682.137 L1303.55 682.137 L1302.99 682.137 L1302.43 682.137 L1301.87 682.137 L1301.31 682.137 L1300.75 682.137 L1300.19 682.137 L1299.63 682.137 L1299.07 682.137 L1298.51 682.137 L1297.95 682.137 L1297.39 682.137 L1296.83 682.137 L1296.28 682.137 L1295.72 682.137 L1295.16 682.137 L1294.6 682.137 L1294.04 682.137 L1293.48 682.137 L1292.92 682.137 L1292.36 682.137 L1291.8 682.137 L1291.24 682.137 L1290.68 682.137 L1290.12 682.137 L1289.56 682.137 L1289 682.137 L1288.45 682.137 L1287.89 682.137 L1287.33 682.137 L1286.77 682.137 L1286.21 682.137 L1285.65 682.137 L1285.09 682.137 L1284.53 682.137 L1283.97 682.137 L1283.41 682.137 L1282.85 682.137 L1282.29 682.137 L1281.73 682.137 L1281.18 682.137 L1280.62 682.137 L1280.06 682.137 L1279.5 682.137 L1278.94 682.137 L1278.38 682.137 L1277.82 682.137 L1277.26 682.137 L1276.7 682.137 L1276.14 682.137 L1275.58 682.137 L1275.02 682.137 L1274.46 682.137 L1273.91 682.137 L1273.35 682.137 L1272.79 682.137 L1272.23 682.137 L1271.67 682.137 L1271.11 682.137 L1270.55 682.137 L1269.99 682.137 L1269.43 682.137 L1268.87 682.137 L1268.31 682.137 L1267.75 682.137 L1267.19 682.137 L1266.63 682.137 L1266.08 682.137 L1265.52 682.137 L1264.96 682.137 L1264.4 682.137 L1263.84 682.137 L1263.28 682.137 L1262.72 682.137 L1262.16 682.137 L1261.6 682.137 L1261.04 682.137 L1260.48 682.137 L1259.92 682.137 L1259.36 682.137 L1258.81 682.137 L1258.25 682.137 L1257.69 682.137 L1257.13 682.137 L1256.57 682.137 L1256.01 682.137 L1255.45 682.137 L1254.89 682.137 L1254.33 682.137 L1253.77 682.137 L1253.21 682.137 L1252.65 682.137 L1252.09 682.137 L1251.54 682.137 L1250.98 682.137 L1250.42 682.137 L1249.86 682.137 L1249.3 682.137 L1248.74 682.137 L1248.18 682.137 L1247.62 682.137 L1247.06 682.137 L1246.5 682.137 L1245.94 682.137 L1245.38 682.137 L1244.82 682.137 L1244.26 682.137 L1243.71 682.137 L1243.15 682.137 L1242.59 682.137 L1242.03 682.137 L1241.47 682.137 L1240.91 682.137 L1240.35 682.137 L1239.79 682.137 L1239.23 682.137 L1238.67 682.137 L1238.11 682.137 L1237.55 682.137 L1236.99 682.137 L1236.44 682.137 L1235.88 682.137 L1235.32 682.137 L1234.76 682.137 L1234.2 682.137 L1233.64 682.137 L1233.08 682.137 L1232.52 682.137 L1231.96 682.137 L1231.4 682.137 L1230.84 682.137 L1230.28 682.137 L1229.72 682.137 L1229.17 682.137 L1228.61 682.137 L1228.05 682.137 L1227.49 682.137 L1226.93 682.137 L1226.37 682.137 L1225.81 682.137 L1225.25 682.137 L1224.69 682.137 L1224.13 682.137 L1223.57 682.137 L1223.01 682.137 L1222.45 682.137 L1221.89 682.137 L1221.34 682.137 L1220.78 682.137 L1220.22 682.137 L1219.66 682.137 L1219.1 682.137 L1218.54 682.137 L1217.98 682.137 L1217.42 682.137 L1216.86 682.137 L1216.3 682.137 L1215.74 682.137 L1215.18 682.137 L1214.62 682.137 L1214.07 682.137 L1213.51 682.137 L1212.95 682.137 L1212.39 682.137 L1211.83 682.137 L1211.27 682.137 L1210.71 682.137 L1210.15 682.137 L1209.59 682.137 L1209.03 682.137 L1208.47 682.137 L1207.91 682.137 L1207.35 682.137 L1206.8 682.137 L1206.24 682.137 L1205.68 682.137 L1205.12 682.137 L1204.56 682.137 L1204 682.137 L1203.44 682.137 L1202.88 682.137 L1202.32 682.137 L1201.76 682.137 L1201.2 682.137 L1200.64 682.137 L1200.08 682.137 L1199.52 682.137 L1198.97 682.137 L1198.41 682.137 L1197.85 682.137 L1197.29 682.137 L1196.73 682.137 L1196.17 682.137 L1195.61 682.137 L1195.05 682.137 L1194.49 682.137 L1193.93 682.137 L1193.37 682.137 L1192.81 682.137 L1192.25 682.137 L1191.7 682.137 L1191.14 682.137 L1190.58 682.137 L1190.02 682.137 L1189.46 682.137 L1188.9 682.137 L1188.34 682.137 L1187.78 682.137 L1187.22 682.137 L1186.66 682.137 L1186.1 682.137 L1185.54 682.137 L1184.98 682.137 L1184.43 682.137 L1183.87 682.137 L1183.31 682.137 L1182.75 682.137 L1182.19 682.137 L1181.63 682.137 L1181.07 682.137 L1180.51 682.137 L1179.95 682.137 L1179.39 682.137 L1178.83 682.137 L1178.27 682.137 L1177.71 682.137 L1177.15 682.137 L1176.6 682.137 L1176.04 682.137 L1175.48 682.137 L1174.92 682.137 L1174.36 682.137 L1173.8 682.137 L1173.24 682.137 L1172.68 682.137 L1172.12 682.137 L1171.56 682.137 L1171 682.137 L1170.44 682.137 L1169.88 682.137 L1169.33 682.137 L1168.77 682.137 L1168.21 682.137 L1167.65 682.137 L1167.09 682.137 L1166.53 682.137 L1165.97 682.137 L1165.41 682.137 L1164.85 682.137 L1164.29 682.137 L1163.73 682.137 L1163.17 682.137 L1162.61 682.137 L1162.05 682.137 L1161.5 682.137 L1160.94 682.137 L1160.38 682.137 L1159.82 682.137 L1159.26 682.137 L1158.7 682.137 L1158.14 682.137 L1157.58 682.137 L1157.02 682.137 L1156.46 682.137 L1155.9 682.137 L1155.34 682.137 L1154.78 682.137 L1154.23 682.137 L1153.67 682.137 L1153.11 682.137 L1152.55 682.137 L1151.99 682.137 L1151.43 682.137 L1150.87 682.137 L1150.31 682.137 L1149.75 682.137 L1149.19 682.137 L1148.63 682.137 L1148.07 682.137 L1147.51 682.137 L1146.96 682.137 L1146.4 682.137 L1145.84 682.137 L1145.28 682.137 L1144.72 682.137 L1144.16 682.137 L1143.6 682.137 L1143.04 682.137 L1142.48 682.137 L1141.92 682.137 L1141.36 682.137 L1140.8 682.137 L1140.24 682.137 L1139.68 682.137 L1139.13 682.137 L1138.57 682.137 L1138.01 682.137 L1137.45 682.137 L1136.89 682.137 L1136.33 682.137 L1135.77 682.137 L1135.21 682.137 L1134.65 682.137 L1134.09 682.137 L1133.53 682.137 L1132.97 682.137 L1132.41 682.137 L1131.86 682.137 L1131.3 682.137 L1130.74 682.137 L1130.18 682.137 L1129.62 682.137 L1129.06 682.137 L1128.5 682.137 L1127.94 682.137 L1127.38 682.137 L1126.82 682.137 L1126.26 682.137 L1125.7 682.137 L1125.14 682.137 L1124.59 682.137 L1124.03 682.137 L1123.47 682.137 L1122.91 682.137 L1122.35 682.137 L1121.79 682.137 L1121.23 682.137 L1120.67 682.137 L1120.11 682.137 L1119.55 682.137 L1118.99 682.137 L1118.43 682.137 L1117.87 682.137 L1117.31 682.137 L1116.76 682.137 L1116.2 682.137 L1115.64 682.137 L1115.08 682.137 L1114.52 682.137 L1113.96 682.137 L1113.4 682.137 L1112.84 682.137 L1112.28 682.137 L1111.72 682.137 L1111.16 682.137 L1110.6 682.137 L1110.04 682.137 L1109.49 682.137 L1108.93 682.137 L1108.37 682.137 L1107.81 682.137 L1107.25 682.137 L1106.69 682.137 L1106.13 682.137 L1105.57 682.137 L1105.01 682.137 L1104.45 682.137 L1103.89 682.137 L1103.33 682.137 L1102.77 682.137 L1102.22 682.137 L1101.66 682.137 L1101.1 682.137 L1100.54 682.137 L1099.98 682.137 L1099.42 682.137 L1098.86 682.137 L1098.3 682.137 L1097.74 682.137 L1097.18 682.137 L1096.62 682.137 L1096.06 682.137 L1095.5 682.137 L1094.94 682.137 L1094.39 682.137 L1093.83 682.137 L1093.27 682.137 L1092.71 682.137 L1092.15 682.137 L1091.59 682.137 L1091.03 682.137 L1090.47 682.137 L1089.91 682.137 L1089.35 682.137 L1088.79 682.137 L1088.23 682.137 L1087.67 682.137 L1087.12 682.137 L1086.56 682.137 L1086 682.137 L1085.44 682.137 L1084.88 682.137 L1084.32 682.137 L1083.76 682.137 L1083.2 682.137 L1082.64 682.137 L1082.08 682.137 L1081.52 682.137 L1080.96 682.137 L1080.4 682.137 L1079.85 682.137 L1079.29 682.137 L1078.73 682.137 L1078.17 682.137 L1077.61 682.137 L1077.05 682.137 L1076.49 682.137 L1075.93 682.137 L1075.37 682.137 L1074.81 682.137 L1074.25 682.137 L1073.69 682.137 L1073.13 682.137 L1072.57 682.137 L1072.02 682.137 L1071.46 682.137 L1070.9 682.137 L1070.34 682.137 L1069.78 682.137 L1069.22 682.137 L1068.66 682.137 L1068.1 682.137 L1067.54 682.137 L1066.98 682.137 L1066.42 682.137 L1065.86 682.137 L1065.3 682.137 L1064.75 682.137 L1064.19 682.137 L1063.63 682.137 L1063.07 682.137 L1062.51 682.137 L1061.95 682.137 L1061.39 682.137 L1060.83 682.137 L1060.27 682.137 L1059.71 682.137 L1059.15 682.137 L1058.59 682.137 L1058.03 682.137 L1057.48 682.137 L1056.92 682.137 L1056.36 682.137 L1055.8 682.137 L1055.24 682.137 L1054.68 682.137 L1054.12 682.137 L1053.56 682.137 L1053 682.137 L1052.44 682.137 L1051.88 682.137 L1051.32 682.137 L1050.76 682.137 L1050.2 682.137 L1049.65 682.137 L1049.09 682.137 L1048.53 682.137 L1047.97 682.137 L1047.41 682.137 L1046.85 682.137 L1046.29 682.137 L1045.73 682.137 L1045.17 682.137 L1044.61 682.137 L1044.05 682.137 L1043.49 682.137 L1042.93 682.137 L1042.38 682.137 L1041.82 682.137 L1041.26 682.137 L1040.7 682.137 L1040.14 682.137 L1039.58 682.137 L1039.02 682.137 L1038.46 682.137 L1037.9 682.137 L1037.34 682.137 L1036.78 682.137 L1036.22 682.137 L1035.66 682.137 L1035.1 682.137 L1034.55 682.137 L1033.99 682.137 L1033.43 682.137 L1032.87 682.137 L1032.31 682.137 L1031.75 682.137 L1031.19 682.137 L1030.63 682.137 L1030.07 682.137 L1029.51 682.137 L1028.95 682.137 L1028.39 682.137 L1027.83 682.137 L1027.28 682.137 L1026.72 682.137 L1026.16 682.137 L1025.6 682.137 L1025.04 682.137 L1024.48 682.137 L1023.92 682.137 L1023.36 682.137 L1022.8 682.137 L1022.24 682.137 L1021.68 682.137 L1021.12 682.137 L1020.56 682.137 L1020.01 682.137 L1019.45 682.137 L1018.89 682.137 L1018.33 682.137 L1017.77 682.137 L1017.21 682.137 L1016.65 682.137 L1016.09 682.137 L1015.53 682.137 L1014.97 682.137 L1014.41 682.137 L1013.85 682.137 L1013.29 682.137 L1012.73 682.137 L1012.18 682.137 L1011.62 682.137 L1011.06 682.137 L1010.5 682.137 L1009.94 682.137 L1009.38 682.137 L1008.82 682.137 L1008.26 682.137 L1007.7 682.137 L1007.14 682.137 L1006.58 682.137 L1006.02 682.137 L1005.46 682.137 L1004.91 682.137 L1004.35 682.137 L1003.79 682.137 L1003.23 682.137 L1002.67 682.137 L1002.11 682.137 L1001.55 682.137 L1000.99 682.137 L1000.43 682.137 L999.872 682.137 L999.313 682.137 L998.754 682.137 L998.194 682.137 L997.635 682.137 L997.076 682.137 L996.517 682.137 L995.957 682.137 L995.398 682.137 L994.839 682.137 L994.28 682.137 L993.72 682.137 L993.161 682.137 L992.602 682.137 L992.043 682.137 L991.483 682.137 L990.924 682.137 L990.365 682.137 L989.806 682.137 L989.246 682.137 L988.687 682.137 L988.128 682.137 L987.569 682.137 L987.009 682.137 L986.45 682.137 L985.891 682.137 L985.332 682.137 L984.772 682.137 L984.213 682.137 L983.654 682.137 L983.095 682.137 L982.535 682.137 L981.976 682.137 L981.417 682.137 L980.858 682.137 L980.298 682.137 L979.739 682.137 L979.18 682.137 L978.621 682.137 L978.061 682.137 L977.502 682.137 L976.943 682.137 L976.384 682.137 L975.824 682.137 L975.265 682.137 L974.706 682.137 L974.147 682.137 L973.587 682.137 L973.028 682.137 L972.469 682.137 L971.91 682.137 L971.35 682.137 L970.791 682.137 L970.232 682.137 L969.673 682.137 L969.113 682.137 L968.554 682.137 L967.995 682.137 L967.436 682.137 L966.876 682.137 L966.317 682.137 L965.758 682.137 L965.199 682.137 L964.639 682.137 L964.08 682.137 L963.521 682.137 L962.962 682.137 L962.402 682.137 L961.843 682.137 L961.284 682.137 L960.725 682.137 L960.165 682.137 L959.606 682.137 L959.047 682.137 L958.488 682.137 L957.928 682.137 L957.369 682.137 L956.81 682.137 L956.251 682.137 L955.691 682.137 L955.132 682.137 L954.573 682.137 L954.014 682.137 L953.454 682.137 L952.895 682.137 L952.336 682.137 L951.777 682.137 L951.217 682.137 L950.658 682.137 L950.099 682.137 L949.54 682.137 L948.98 682.137 L948.421 682.137 L947.862 682.137 L947.303 682.137 L946.743 682.137 L946.184 682.137 L945.625 682.137 L945.066 682.137 L944.506 682.137 L943.947 682.137 L943.388 682.137 L942.829 682.137 L942.269 682.137 L941.71 682.137 L941.151 682.137 L940.592 682.137 L940.032 682.137 L939.473 682.137 L938.914 682.137 L938.355 682.137 L937.795 682.137 L937.236 682.137 L936.677 682.137 L936.118 682.137 L935.558 682.137 L934.999 682.137 L934.44 682.137 L933.881 682.137 L933.321 682.137 L932.762 682.137 L932.203 682.137 L931.644 682.137 L931.084 682.137 L930.525 682.137 L929.966 682.137 L929.406 682.137 L928.847 682.137 L928.288 682.137 L927.729 682.137 L927.169 682.137 L926.61 682.137 L926.051 682.137 L925.492 682.137 L924.932 682.137 L924.373 682.137 L923.814 682.137 L923.255 682.137 L922.695 682.137 L922.136 682.137 L921.577 682.137 L921.018 682.137 L920.458 682.137 L919.899 682.137 L919.34 682.137 L918.781 682.137 L918.221 682.137 L917.662 682.137 L917.103 682.137 L916.544 682.137 L915.984 682.137 L915.425 682.137 L914.866 682.137 L914.307 682.137 L913.747 682.137 L913.188 682.137 L912.629 682.137 L912.07 682.137 L911.51 682.137 L910.951 682.137 L910.392 682.137 L909.833 682.137 L909.273 682.137 L908.714 682.137 L908.155 682.137 L907.596 682.137 L907.036 682.137 L906.477 682.137 L905.918 682.137 L905.359 682.137 L904.799 682.137 L904.24 682.137 L903.681 682.137 L903.122 682.137 L902.562 682.137 L902.003 682.137 L901.444 682.137 L900.885 682.137 L900.325 682.137 L899.766 682.137 L899.207 682.137 L898.648 682.137 L898.088 682.137 L897.529 682.137 L896.97 682.137 L896.411 682.137 L895.851 682.137 L895.292 682.137 L894.733 682.137 L894.174 682.137 L893.614 682.137 L893.055 682.137 L892.496 682.137 L891.937 682.137 L891.377 682.137 L890.818 682.137 L890.259 682.137 L889.7 682.137 L889.14 682.137 L888.581 682.137 L888.022 682.137 L887.463 682.137 L886.903 682.137 L886.344 682.137 L885.785 682.137 L885.226 682.137 L884.666 682.137 L884.107 682.137 L883.548 682.137 L882.989 682.137 L882.429 682.137 L881.87 682.137 L881.311 682.137 L880.752 682.137 L880.192 682.137 L879.633 682.137 L879.074 682.137 L878.515 682.137 L877.955 682.137 L877.396 682.137 L876.837 682.137 L876.278 682.137 L875.718 682.137 L875.159 682.137 L874.6 682.137 L874.041 682.137 L873.481 682.137 L872.922 682.137 L872.363 682.137 L871.804 682.137 L871.244 682.137 L870.685 682.137 L870.126 682.137 L869.567 682.137 L869.007 682.137 L868.448 682.137 L867.889 682.137 L867.33 682.137 L866.77 682.137 L866.211 682.137 L865.652 682.137 L865.093 682.137 L864.533 682.137 L863.974 682.137 L863.415 682.137 L862.856 682.137 L862.296 682.137 L861.737 682.137 L861.178 682.137 L860.619 682.137 L860.059 682.137 L859.5 682.137 L858.941 682.137 L858.382 682.137 L857.822 682.137 L857.263 682.137 L856.704 682.137 L856.145 682.137 L855.585 682.137 L855.026 682.137 L854.467 682.137 L853.908 682.137 L853.348 682.137 L852.789 682.137 L852.23 682.137 L851.671 682.137 L851.111 682.137 L850.552 682.137 L849.993 682.137 L849.434 682.137 L848.874 682.137 L848.315 682.137 L847.756 682.137 L847.197 682.137 L846.637 682.137 L846.078 682.137 L845.519 682.137 L844.96 682.137 L844.4 682.137 L843.841 682.137 L843.282 682.137 L842.723 682.137 L842.163 682.137 L841.604 682.137 L841.045 682.137 L840.486 682.137 L839.926 682.137 L839.367 682.137 L838.808 682.137 L838.249 682.137 L837.689 682.137 L837.13 682.137 L836.571 682.137 L836.012 682.137 L835.452 682.137 L834.893 682.137 L834.334 682.137 L833.775 682.137 L833.215 682.137 L832.656 682.137 L832.097 682.137 L831.538 682.137 L830.978 682.137 L830.419 682.137 L829.86 682.137 L829.301 682.137 L828.741 682.137 L828.182 682.137 L827.623 682.137 L827.064 682.137 L826.504 682.137 L825.945 682.137 L825.386 682.137 L824.827 682.137 L824.267 682.137 L823.708 682.137 L823.149 682.137 L822.59 682.137 L822.03 682.137 L821.471 682.137 L820.912 682.137 L820.353 682.137 L819.793 682.137 L819.234 682.137 L818.675 682.137 L818.116 682.137 L817.556 682.137 L816.997 682.137 L816.438 682.137 L815.879 682.137 L815.319 682.137 L814.76 682.137 L814.201 682.137 L813.642 682.137 L813.082 682.137 L812.523 682.137 L811.964 682.137 L811.405 682.137 L810.845 682.137 L810.286 682.137 L809.727 682.137 L809.168 682.137 L808.608 682.137 L808.049 682.137 L807.49 682.137 L806.931 682.137 L806.371 682.137 L805.812 682.137 L805.253 682.137 L804.693 682.137 L804.134 682.137 L803.575 682.137 L803.016 682.137 L802.456 682.137 L801.897 682.137 L801.338 682.137 L800.779 682.137 L800.219 682.137 L799.66 682.137 L799.101 682.137 L798.542 682.137 L797.982 682.137 L797.423 682.137 L796.864 682.137 L796.305 682.137 L795.745 682.137 L795.186 682.137 L794.627 682.137 L794.068 682.137 L793.508 682.137 L792.949 682.137 L792.39 682.137 L791.831 682.137 L791.271 682.137 L790.712 682.137 L790.153 682.137 L789.594 682.137 L789.034 682.137 L788.475 682.137 L787.916 682.137 L787.357 682.137 L786.797 682.137 L786.238 682.137 L785.679 682.137 L785.12 682.137 L784.56 682.137 L784.001 682.137 L783.442 682.137 L782.883 682.137 L782.323 682.137 L781.764 682.137 L781.205 682.137 L780.646 682.137 L780.086 682.137 L779.527 682.137 L778.968 682.137 L778.409 682.137 L777.849 682.137 L777.29 682.137 L776.731 682.137 L776.172 682.137 L775.612 682.137 L775.053 682.137 L774.494 682.137 L773.935 682.137 L773.375 682.137 L772.816 682.137 L772.257 682.137 L771.698 682.137 L771.138 682.137 L770.579 682.137 L770.02 682.137 L769.461 682.137 L768.901 682.137 L768.342 682.137 L767.783 682.137 L767.224 682.137 L766.664 682.137 L766.105 682.137 L765.546 682.137 L764.987 682.137 L764.427 682.137 L763.868 682.137 L763.309 682.137 L762.75 682.137 L762.19 682.137 L761.631 682.137 L761.072 682.137 L760.513 682.137 L759.953 682.137 L759.394 682.137 L758.835 682.137 L758.276 682.137 L757.716 682.137 L757.157 682.137 L756.598 682.137 L756.039 682.137 L755.479 682.137 L754.92 682.137 L754.361 682.137 L753.802 682.137 L753.242 682.137 L752.683 682.137 L752.124 682.137 L751.565 682.137 L751.005 682.137 L750.446 682.137 L749.887 682.137 L749.328 682.137 L748.768 682.137 L748.209 682.137 L747.65 682.137 L747.091 682.137 L746.531 682.137 L745.972 682.137 L745.413 682.137 L744.854 682.137 L744.294 682.137 L743.735 682.137 L743.176 682.137 L742.617 682.137 L742.057 682.137 L741.498 682.137 L740.939 682.137 L740.38 682.137 L739.82 682.137 L739.261 682.137 L738.702 682.137 L738.143 682.137 L737.583 682.137 L737.024 682.137 L736.465 682.137 L735.906 682.137 L735.346 682.137 L734.787 682.137 L734.228 682.137 L733.669 682.137 L733.109 682.137 L732.55 682.137 L731.991 682.137 L731.432 682.137 L730.872 682.137 L730.313 682.137 L729.754 682.137 L729.195 682.137 L728.635 682.137 L728.076 682.137 L727.517 682.137 L726.958 682.137 L726.398 682.137 L725.839 682.137 L725.28 682.137 L724.721 682.137 L724.161 682.137 L723.602 682.137 L723.043 682.137 L722.484 682.137 L721.924 682.137 L721.365 682.137 L720.806 682.137 L720.247 682.137  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.457 720.806,686.457 721.365,686.457 721.924,686.457 722.484,686.457 723.043,686.457 723.602,686.457 724.161,686.457 724.721,686.457 725.28,686.457 725.839,686.457 726.398,686.457 726.958,686.457 727.517,686.457 728.076,686.457 728.635,686.457 729.195,686.457 729.754,686.457 730.313,686.457 730.872,686.457 731.432,686.457 731.991,686.457 732.55,686.457 733.109,686.457 733.669,686.457 734.228,686.457 734.787,686.457 735.346,686.457 735.906,686.457 736.465,686.457 737.024,686.457 737.583,686.457 738.143,686.457 738.702,686.457 739.261,686.457 739.82,686.457 740.38,686.457 740.939,686.457 741.498,686.457 742.057,686.457 742.617,686.457 743.176,686.457 743.735,686.457 744.294,686.457 744.854,686.457 745.413,686.457 745.972,686.457 746.531,686.457 747.091,686.457 747.65,686.457 748.209,686.457 748.768,686.457 749.328,686.457 749.887,686.457 750.446,686.457 751.005,686.457 751.565,686.457 752.124,686.457 752.683,686.457 753.242,686.457 753.802,686.457 754.361,686.457 754.92,686.457 755.479,686.457 756.039,686.457 756.598,686.457 757.157,686.457 757.716,686.457 758.276,686.457 758.835,686.457 759.394,686.457 759.953,686.457 760.513,686.457 761.072,686.457 761.631,686.457 762.19,686.457 762.75,686.457 763.309,686.457 763.868,686.457 764.427,686.457 764.987,686.457 765.546,686.457 766.105,686.457 766.664,686.457 767.224,686.457 767.783,686.457 768.342,686.457 768.901,686.457 769.461,686.457 770.02,686.457 770.579,686.457 771.138,686.457 771.698,686.457 772.257,686.457 772.816,686.457 773.375,686.457 773.935,686.457 774.494,686.457 775.053,686.457 775.612,686.457 776.172,686.457 776.731,686.457 777.29,686.457 777.849,686.457 778.409,686.457 778.968,686.457 779.527,686.457 780.086,686.457 780.646,686.457 781.205,686.457 781.764,686.457 782.323,686.457 782.883,686.457 783.442,686.457 784.001,686.457 784.56,686.457 785.12,686.457 785.679,686.457 786.238,686.457 786.797,686.457 787.357,686.457 787.916,686.457 788.475,686.457 789.034,686.457 789.594,686.457 790.153,686.457 790.712,686.457 791.271,686.457 791.831,686.457 792.39,686.457 792.949,686.457 793.508,686.457 794.068,686.457 794.627,686.457 795.186,686.457 795.745,686.457 796.305,686.457 796.864,686.457 797.423,686.457 797.982,686.457 798.542,686.457 799.101,686.457 799.66,686.457 800.219,686.457 800.779,686.457 801.338,686.457 801.897,686.457 802.456,686.457 803.016,686.457 803.575,686.457 804.134,686.457 804.693,686.457 805.253,686.457 805.812,686.457 806.371,686.457 806.931,686.457 807.49,686.457 808.049,686.457 808.608,686.457 809.168,686.457 809.727,686.457 810.286,686.457 810.845,686.457 811.405,686.457 811.964,686.457 812.523,686.457 813.082,686.457 813.642,686.457 814.201,686.457 814.76,686.457 815.319,686.457 815.879,686.457 816.438,686.457 816.997,686.457 817.556,686.457 818.116,686.457 818.675,686.457 819.234,686.457 819.793,686.457 820.353,686.457 820.912,686.457 821.471,686.457 822.03,686.457 822.59,686.457 823.149,686.457 823.708,686.457 824.267,686.457 824.827,686.457 825.386,686.457 825.945,686.457 826.504,686.457 827.064,686.457 827.623,686.457 828.182,686.457 828.741,686.457 829.301,686.457 829.86,686.457 830.419,686.457 830.978,686.457 831.538,686.457 832.097,686.457 832.656,686.457 833.215,686.457 833.775,686.457 834.334,686.457 834.893,686.457 835.452,686.457 836.012,686.457 836.571,686.457 837.13,686.457 837.689,686.457 838.249,686.457 838.808,686.457 839.367,686.457 839.926,686.457 840.486,686.457 841.045,686.457 841.604,686.457 842.163,686.457 842.723,686.457 843.282,686.457 843.841,686.457 844.4,686.457 844.96,686.457 845.519,686.457 846.078,686.457 846.637,686.457 847.197,686.457 847.756,686.457 848.315,686.457 848.874,686.457 849.434,686.457 849.993,686.457 850.552,686.457 851.111,686.457 851.671,686.457 852.23,686.457 852.789,686.457 853.348,686.457 853.908,686.457 854.467,686.457 855.026,686.457 855.585,686.457 856.145,686.457 856.704,686.457 857.263,686.457 857.822,686.457 858.382,686.457 858.941,686.457 859.5,686.457 860.059,686.457 860.619,686.457 861.178,686.457 861.737,686.457 862.296,686.457 862.856,686.457 863.415,686.457 863.974,686.457 864.533,686.457 865.093,686.457 865.652,686.457 866.211,686.457 866.77,686.457 867.33,686.457 867.889,686.457 868.448,686.457 869.007,686.457 869.567,686.457 870.126,686.457 870.685,686.457 871.244,686.457 871.804,686.457 872.363,686.457 872.922,686.457 873.481,686.457 874.041,686.457 874.6,686.457 875.159,686.457 875.718,686.457 876.278,686.457 876.837,686.457 877.396,686.457 877.955,686.457 878.515,686.457 879.074,686.457 879.633,686.457 880.192,686.457 880.752,686.457 881.311,686.457 881.87,686.457 882.429,686.457 882.989,686.457 883.548,686.457 884.107,686.457 884.666,686.457 885.226,686.457 885.785,686.457 886.344,686.457 886.903,686.457 887.463,686.457 888.022,686.457 888.581,686.457 889.14,686.457 889.7,686.457 890.259,686.457 890.818,686.457 891.377,686.457 891.937,686.457 892.496,686.457 893.055,686.457 893.614,686.457 894.174,686.457 894.733,686.457 895.292,686.457 895.851,686.457 896.411,686.457 896.97,686.457 897.529,686.457 898.088,686.457 898.648,686.457 899.207,686.457 899.766,686.457 900.325,686.457 900.885,686.457 901.444,686.457 902.003,686.457 902.562,686.457 903.122,686.457 903.681,686.457 904.24,686.457 904.799,686.457 905.359,686.457 905.918,686.457 906.477,686.457 907.036,686.457 907.596,686.457 908.155,686.457 908.714,686.457 909.273,686.457 909.833,686.457 910.392,686.457 910.951,686.457 911.51,686.457 912.07,686.457 912.629,686.457 913.188,686.457 913.747,686.457 914.307,686.457 914.866,686.457 915.425,686.457 915.984,686.457 916.544,686.457 917.103,686.457 917.662,686.457 918.221,686.457 918.781,686.457 919.34,686.457 919.899,686.457 920.458,686.457 921.018,686.457 921.577,686.457 922.136,686.457 922.695,686.457 923.255,686.457 923.814,686.457 924.373,686.457 924.932,686.457 925.492,686.457 926.051,686.457 926.61,686.457 927.169,686.457 927.729,686.457 928.288,686.457 928.847,686.457 929.406,686.457 929.966,686.457 930.525,686.457 931.084,686.457 931.644,686.457 932.203,686.457 932.762,686.457 933.321,686.457 933.881,686.457 934.44,686.457 934.999,686.457 935.558,686.457 936.118,686.457 936.677,686.457 937.236,686.457 937.795,686.457 938.355,686.457 938.914,686.457 939.473,686.457 940.032,686.457 940.592,686.457 941.151,686.457 941.71,686.457 942.269,686.457 942.829,686.457 943.388,686.457 943.947,686.457 944.506,686.457 945.066,686.457 945.625,686.457 946.184,686.457 946.743,686.457 947.303,686.457 947.862,686.457 948.421,686.457 948.98,686.457 949.54,686.457 950.099,686.457 950.658,686.457 951.217,686.457 951.777,686.457 952.336,686.457 952.895,686.457 953.454,686.457 954.014,686.457 954.573,686.457 955.132,686.457 955.691,686.457 956.251,686.457 956.81,686.457 957.369,686.457 957.928,686.457 958.488,686.457 959.047,686.457 959.606,686.457 960.165,686.457 960.725,686.457 961.284,686.457 961.843,686.457 962.402,686.457 962.962,686.457 963.521,686.457 964.08,686.457 964.639,686.457 965.199,686.457 965.758,686.457 966.317,686.457 966.876,686.457 967.436,686.457 967.995,686.457 968.554,686.457 969.113,686.457 969.673,686.457 970.232,686.457 970.791,686.457 971.35,686.457 971.91,686.457 972.469,686.457 973.028,686.457 973.587,686.457 974.147,686.457 974.706,686.457 975.265,686.457 975.824,686.457 976.384,686.457 976.943,686.457 977.502,686.457 978.061,686.457 978.621,686.457 979.18,686.457 979.739,686.457 980.298,686.457 980.858,686.457 981.417,686.457 981.976,686.457 982.535,686.457 983.095,686.457 983.654,686.457 984.213,686.457 984.772,686.457 985.332,686.457 985.891,686.457 986.45,686.457 987.009,686.457 987.569,686.457 988.128,686.457 988.687,686.457 989.246,686.457 989.806,686.457 990.365,686.457 990.924,686.457 991.483,686.457 992.043,686.457 992.602,686.457 993.161,686.457 993.72,686.457 994.28,686.457 994.839,686.457 995.398,686.457 995.957,686.457 996.517,686.457 997.076,686.457 997.635,686.457 998.194,686.457 998.754,686.457 999.313,686.457 999.872,686.457 1000.43,686.457 1000.99,686.457 1001.55,686.457 1002.11,686.457 1002.67,686.457 1003.23,686.457 1003.79,686.457 1004.35,686.457 1004.91,686.457 1005.46,686.457 1006.02,686.457 1006.58,686.457 1007.14,686.457 1007.7,686.457 1008.26,686.457 1008.82,686.457 1009.38,686.457 1009.94,686.457 1010.5,686.457 1011.06,686.457 1011.62,686.457 1012.18,686.457 1012.73,686.457 1013.29,686.457 1013.85,686.457 1014.41,686.457 1014.97,686.457 1015.53,686.457 1016.09,686.457 1016.65,686.457 1017.21,686.457 1017.77,686.457 1018.33,686.457 1018.89,686.457 1019.45,686.457 1020.01,686.457 1020.56,686.457 1021.12,686.457 1021.68,686.457 1022.24,686.457 1022.8,686.457 1023.36,686.457 1023.92,686.457 1024.48,686.457 1025.04,686.457 1025.6,686.457 1026.16,686.457 1026.72,686.457 1027.28,686.457 1027.83,686.457 1028.39,686.457 1028.95,686.457 1029.51,686.457 1030.07,686.457 1030.63,686.457 1031.19,686.457 1031.75,686.457 1032.31,686.457 1032.87,686.457 1033.43,686.457 1033.99,686.457 1034.55,686.457 1035.1,686.457 1035.66,686.457 1036.22,686.457 1036.78,686.457 1037.34,686.457 1037.9,686.457 1038.46,686.457 1039.02,686.457 1039.58,686.457 1040.14,686.457 1040.7,686.457 1041.26,686.457 1041.82,686.457 1042.38,686.457 1042.93,686.457 1043.49,686.457 1044.05,686.457 1044.61,686.457 1045.17,686.457 1045.73,686.457 1046.29,686.457 1046.85,686.457 1047.41,686.457 1047.97,686.457 1048.53,686.457 1049.09,686.457 1049.65,686.457 1050.2,686.457 1050.76,686.457 1051.32,686.457 1051.88,686.457 1052.44,686.457 1053,686.457 1053.56,686.457 1054.12,686.457 1054.68,686.457 1055.24,686.457 1055.8,686.457 1056.36,686.457 1056.92,686.457 1057.48,686.457 1058.03,686.457 1058.59,686.457 1059.15,686.457 1059.71,686.457 1060.27,686.457 1060.83,686.457 1061.39,686.457 1061.95,686.457 1062.51,686.457 1063.07,686.457 1063.63,686.457 1064.19,686.457 1064.75,686.457 1065.3,686.457 1065.86,686.457 1066.42,686.457 1066.98,686.457 1067.54,686.457 1068.1,686.457 1068.66,686.457 1069.22,686.457 1069.78,686.457 1070.34,686.457 1070.9,686.457 1071.46,686.457 1072.02,686.457 1072.57,686.457 1073.13,686.457 1073.69,686.457 1074.25,686.457 1074.81,686.457 1075.37,686.457 1075.93,686.457 1076.49,686.457 1077.05,686.457 1077.61,686.457 1078.17,686.457 1078.73,686.457 1079.29,686.457 1079.85,686.457 1080.4,686.457 1080.96,686.457 1081.52,686.457 1082.08,686.457 1082.64,686.457 1083.2,686.457 1083.76,686.457 1084.32,686.457 1084.88,686.457 1085.44,686.457 1086,686.457 1086.56,686.457 1087.12,686.457 1087.67,686.457 1088.23,686.457 1088.79,686.457 1089.35,686.457 1089.91,686.457 1090.47,686.457 1091.03,686.457 1091.59,686.457 1092.15,686.457 1092.71,686.457 1093.27,686.457 1093.83,686.457 1094.39,686.457 1094.94,686.457 1095.5,686.457 1096.06,686.457 1096.62,686.457 1097.18,686.457 1097.74,686.457 1098.3,686.457 1098.86,686.457 1099.42,686.457 1099.98,686.457 1100.54,686.457 1101.1,686.457 1101.66,686.457 1102.22,686.457 1102.77,686.457 1103.33,686.457 1103.89,686.457 1104.45,686.457 1105.01,686.457 1105.57,686.457 1106.13,686.457 1106.69,686.457 1107.25,686.457 1107.81,686.457 1108.37,686.457 1108.93,686.457 1109.49,686.457 1110.04,686.457 1110.6,686.457 1111.16,686.457 1111.72,686.457 1112.28,686.457 1112.84,686.457 1113.4,686.457 1113.96,686.457 1114.52,686.457 1115.08,686.457 1115.64,686.457 1116.2,686.457 1116.76,686.457 1117.31,686.457 1117.87,686.457 1118.43,686.457 1118.99,686.457 1119.55,686.457 1120.11,686.457 1120.67,686.457 1121.23,686.457 1121.79,686.457 1122.35,686.457 1122.91,686.457 1123.47,686.457 1124.03,686.457 1124.59,686.457 1125.14,686.457 1125.7,686.457 1126.26,686.457 1126.82,686.457 1127.38,686.457 1127.94,686.457 1128.5,686.457 1129.06,686.457 1129.62,686.457 1130.18,686.457 1130.74,686.457 1131.3,686.457 1131.86,686.457 1132.41,686.457 1132.97,686.457 1133.53,686.457 1134.09,686.457 1134.65,686.457 1135.21,686.457 1135.77,686.457 1136.33,686.457 1136.89,686.457 1137.45,686.457 1138.01,686.457 1138.57,686.457 1139.13,686.457 1139.68,686.457 1140.24,686.457 1140.8,686.457 1141.36,686.457 1141.92,686.457 1142.48,686.457 1143.04,686.457 1143.6,686.457 1144.16,686.457 1144.72,686.457 1145.28,686.457 1145.84,686.457 1146.4,686.457 1146.96,686.457 1147.51,686.457 1148.07,686.457 1148.63,686.457 1149.19,686.457 1149.75,686.457 1150.31,686.457 1150.87,686.457 1151.43,686.457 1151.99,686.457 1152.55,686.457 1153.11,686.457 1153.67,686.457 1154.23,686.457 1154.78,686.457 1155.34,686.457 1155.9,686.457 1156.46,686.457 1157.02,686.457 1157.58,686.457 1158.14,686.457 1158.7,686.457 1159.26,686.457 1159.82,686.457 1160.38,686.457 1160.94,686.457 1161.5,686.457 1162.05,686.457 1162.61,686.457 1163.17,686.457 1163.73,686.457 1164.29,686.457 1164.85,686.457 1165.41,686.457 1165.97,686.457 1166.53,686.457 1167.09,686.457 1167.65,686.457 1168.21,686.457 1168.77,686.457 1169.33,686.457 1169.88,686.457 1170.44,686.457 1171,686.457 1171.56,686.457 1172.12,686.457 1172.68,686.457 1173.24,686.457 1173.8,686.457 1174.36,686.457 1174.92,686.457 1175.48,686.457 1176.04,686.457 1176.6,686.457 1177.15,686.457 1177.71,686.457 1178.27,686.457 1178.83,686.457 1179.39,686.457 1179.95,686.457 1180.51,686.457 1181.07,686.457 1181.63,686.457 1182.19,686.457 1182.75,686.457 1183.31,686.457 1183.87,686.457 1184.43,686.457 1184.98,686.457 1185.54,686.457 1186.1,686.457 1186.66,686.457 1187.22,686.457 1187.78,686.457 1188.34,686.457 1188.9,686.457 1189.46,686.457 1190.02,686.457 1190.58,686.457 1191.14,686.457 1191.7,686.457 1192.25,686.457 1192.81,686.457 1193.37,686.457 1193.93,686.457 1194.49,686.457 1195.05,686.457 1195.61,686.457 1196.17,686.457 1196.73,686.457 1197.29,686.457 1197.85,686.457 1198.41,686.457 1198.97,686.457 1199.52,686.457 1200.08,686.457 1200.64,686.457 1201.2,686.457 1201.76,686.457 1202.32,686.457 1202.88,686.457 1203.44,686.457 1204,686.457 1204.56,686.457 1205.12,686.457 1205.68,686.457 1206.24,686.457 1206.8,686.457 1207.35,686.457 1207.91,686.457 1208.47,686.457 1209.03,686.457 1209.59,686.457 1210.15,686.457 1210.71,686.457 1211.27,686.457 1211.83,686.457 1212.39,686.457 1212.95,686.457 1213.51,686.457 1214.07,686.457 1214.62,686.457 1215.18,686.457 1215.74,686.457 1216.3,686.457 1216.86,686.457 1217.42,686.457 1217.98,686.457 1218.54,686.457 1219.1,686.457 1219.66,686.457 1220.22,686.457 1220.78,686.457 1221.34,686.457 1221.89,686.457 1222.45,686.457 1223.01,686.457 1223.57,686.457 1224.13,686.457 1224.69,686.457 1225.25,686.457 1225.81,686.457 1226.37,686.457 1226.93,686.457 1227.49,686.457 1228.05,686.457 1228.61,686.457 1229.17,686.457 1229.72,686.457 1230.28,686.457 1230.84,686.457 1231.4,686.457 1231.96,686.457 1232.52,686.457 1233.08,686.457 1233.64,686.457 1234.2,686.457 1234.76,686.457 1235.32,686.457 1235.88,686.457 1236.44,686.457 1236.99,686.457 1237.55,686.457 1238.11,686.457 1238.67,686.457 1239.23,686.457 1239.79,686.457 1240.35,686.457 1240.91,686.457 1241.47,686.457 1242.03,686.457 1242.59,686.457 1243.15,686.457 1243.71,686.457 1244.26,686.457 1244.82,686.457 1245.38,686.457 1245.94,686.457 1246.5,686.457 1247.06,686.457 1247.62,686.457 1248.18,686.457 1248.74,686.457 1249.3,686.457 1249.86,686.457 1250.42,686.457 1250.98,686.457 1251.54,686.457 1252.09,686.457 1252.65,686.457 1253.21,686.457 1253.77,686.457 1254.33,686.457 1254.89,686.457 1255.45,686.457 1256.01,686.457 1256.57,686.457 1257.13,686.457 1257.69,686.457 1258.25,686.457 1258.81,686.457 1259.36,686.457 1259.92,686.457 1260.48,686.457 1261.04,686.457 1261.6,686.457 1262.16,686.457 1262.72,686.457 1263.28,686.457 1263.84,686.457 1264.4,686.457 1264.96,686.457 1265.52,686.457 1266.08,686.457 1266.63,686.457 1267.19,686.457 1267.75,686.457 1268.31,686.457 1268.87,686.457 1269.43,686.457 1269.99,686.457 1270.55,686.457 1271.11,686.457 1271.67,686.457 1272.23,686.457 1272.79,686.457 1273.35,686.457 1273.91,686.457 1274.46,686.457 1275.02,686.457 1275.58,686.457 1276.14,686.457 1276.7,686.457 1277.26,686.457 1277.82,686.457 1278.38,686.457 1278.94,686.457 1279.5,686.457 1280.06,686.457 1280.62,686.457 1281.18,686.457 1281.73,686.457 1282.29,686.457 1282.85,686.457 1283.41,686.457 1283.97,686.457 1284.53,686.457 1285.09,686.457 1285.65,686.457 1286.21,686.457 1286.77,686.457 1287.33,686.457 1287.89,686.457 1288.45,686.457 1289,686.457 1289.56,686.457 1290.12,686.457 1290.68,686.457 1291.24,686.457 1291.8,686.457 1292.36,686.457 1292.92,686.457 1293.48,686.457 1294.04,686.457 1294.6,686.457 1295.16,686.457 1295.72,686.457 1296.28,686.457 1296.83,686.457 1297.39,686.457 1297.95,686.457 1298.51,686.457 1299.07,686.457 1299.63,686.457 1300.19,686.457 1300.75,686.457 1301.31,686.457 1301.87,686.457 1302.43,686.457 1302.99,686.457 1303.55,686.457 1304.1,686.457 1304.66,686.457 1305.22,686.457 1305.78,686.457 1306.34,686.457 1306.9,686.457 1307.46,686.457 1308.02,686.457 1308.58,686.457 1309.14,686.457 1309.7,686.457 1310.26,686.457 1310.82,686.457 1311.38,686.457 1311.93,686.457 1312.49,686.457 1313.05,686.457 1313.61,686.457 1314.17,686.457 1314.73,686.457 1315.29,686.457 1315.85,686.457 1316.41,686.457 1316.97,686.457 1317.53,686.457 1318.09,686.457 1318.65,686.457 1319.2,686.457 1319.76,686.457 1320.32,686.457 1320.88,686.457 1321.44,686.457 1322,686.457 1322.56,686.457 1323.12,686.457 1323.68,686.457 1324.24,686.457 1324.8,686.457 1325.36,686.457 1325.92,686.457 1326.47,686.457 1327.03,686.457 1327.59,686.457 1328.15,686.457 1328.71,686.457 1329.27,686.457 1329.83,686.457 1330.39,686.457 1330.95,686.457 1331.51,686.457 1332.07,686.457 1332.63,686.457 1333.19,686.457 1333.75,686.457 1334.3,686.457 1334.86,686.457 1335.42,686.457 1335.98,686.457 1336.54,686.457 1337.1,686.457 1337.66,686.457 1338.22,686.457 1338.78,686.457 1339.34,686.457 1339.9,686.457 1340.46,686.457 1341.02,686.457 1341.57,686.457 1342.13,686.457 1342.69,686.457 1343.25,686.457 1343.81,686.457 1344.37,686.457 1344.93,686.457 1345.49,686.457 1346.05,686.457 1346.61,686.457 1347.17,686.457 1347.73,686.457 1348.29,686.457 1348.84,686.457 1349.4,686.457 1349.96,686.457 1350.52,686.457 1351.08,686.457 1351.64,686.457 1352.2,686.457 1352.76,686.457 1353.32,686.457 1353.88,686.457 1354.44,686.457 1355,686.457 1355.56,686.457 1356.12,686.457 1356.67,686.457 1357.23,686.457 1357.79,686.457 1358.35,686.457 1358.91,686.457 1359.47,686.457 1360.03,686.457 1360.59,686.457 1361.15,686.457 1361.71,686.457 1362.27,686.457 1362.83,686.457 1363.39,686.457 1363.94,686.457 1364.5,686.457 1365.06,686.457 1365.62,686.457 1366.18,686.457 1366.74,686.457 1367.3,686.457 1367.86,686.457 1368.42,686.457 1368.98,686.457 1369.54,686.457 1370.1,686.457 1370.66,686.457 1371.21,686.457 1371.77,686.457 1372.33,686.457 1372.89,686.457 1373.45,686.457 1374.01,686.457 1374.57,686.457 1375.13,686.457 1375.69,686.457 1376.25,686.457 1376.81,686.457 1377.37,686.457 1377.93,686.457 1378.49,686.457 1379.04,686.457 1379.6,686.457 1380.16,686.457 1380.72,686.457 1381.28,686.457 1381.84,686.457 1382.4,686.457 1382.96,686.457 1383.52,686.457 1384.08,686.457 1384.64,686.457 1385.2,686.457 1385.76,686.457 1386.31,686.457 1386.87,686.457 1387.43,686.457 1387.99,686.457 1388.55,686.457 1389.11,686.457 1389.67,686.457 1390.23,686.457 1390.79,686.457 1391.35,686.457 1391.91,686.457 1392.47,686.457 1393.03,686.457 1393.58,686.457 1394.14,686.457 1394.7,686.457 1395.26,686.457 1395.82,686.457 1396.38,686.457 1396.94,686.457 1397.5,686.457 1398.06,686.457 1398.62,686.457 1399.18,686.457 1399.74,686.457 1400.3,686.457 1400.86,686.457 1401.41,686.457 1401.97,686.457 1402.53,686.457 1403.09,686.457 1403.65,686.457 1404.21,686.457 1404.77,686.457 1405.33,686.457 1405.89,686.457 1406.45,686.457 1407.01,686.457 1407.57,686.457 1408.13,686.457 1408.68,686.457 1409.24,686.457 1409.8,686.457 1410.36,686.457 1410.92,686.457 1411.48,686.457 1412.04,686.457 1412.6,686.457 1413.16,686.457 1413.72,686.457 1414.28,686.457 1414.84,686.457 1415.4,686.457 1415.95,686.457 1416.51,686.457 1417.07,686.457 1417.63,686.457 1418.19,686.457 1418.75,686.457 1419.31,686.457 1419.87,686.457 1420.43,686.457 1420.99,686.457 1421.55,686.457 1422.11,686.457 1422.67,686.457 1423.23,686.457 1423.78,686.457 1424.34,686.457 1424.9,686.457 1425.46,686.457 1426.02,686.457 1426.58,686.457 1427.14,686.457 1427.7,686.457 1428.26,686.457 1428.82,686.457 1429.38,686.457 1429.94,686.457 1430.5,686.457 1431.05,686.457 1431.61,686.457 1432.17,686.457 1432.73,686.457 1433.29,686.457 1433.85,686.457 1434.41,686.457 1434.97,686.457 1435.53,686.457 1436.09,686.457 1436.65,686.457 1437.21,686.457 1437.77,686.457 1438.33,686.457 1438.88,686.457 1439.44,686.457 1440,686.457 1440.56,686.457 1441.12,686.457 1441.68,686.457 1442.24,686.457 1442.8,686.457 1443.36,686.457 1443.92,686.457 1444.48,686.457 1445.04,686.457 1445.6,686.457 1446.15,686.457 1446.71,686.457 1447.27,686.457 1447.83,686.457 1448.39,686.457 1448.95,686.457 1449.51,686.457 1450.07,686.457 1450.63,686.457 1451.19,686.457 1451.75,686.457 1452.31,686.457 1452.87,686.457 1453.42,686.457 1453.98,686.457 1454.54,686.457 1455.1,686.457 1455.66,686.457 1456.22,686.457 1456.78,686.457 1457.34,686.457 1457.9,686.457 1458.46,686.457 1459.02,686.457 1459.58,686.457 1460.14,686.457 1460.7,686.457 1461.25,686.457 1461.81,686.457 1462.37,686.457 1462.93,686.457 1463.49,686.457 1464.05,686.457 1464.61,686.457 1465.17,686.457 1465.73,686.457 1466.29,686.457 1466.85,686.457 1467.41,686.457 1467.97,686.457 1468.52,686.457 1469.08,686.457 1469.64,686.457 1470.2,686.457 1470.76,686.457 1471.32,686.457 1471.88,686.457 1472.44,686.457 1473,686.457 1473.56,686.457 1474.12,686.457 1474.68,686.457 1475.24,686.457 1475.79,686.457 1476.35,686.457 1476.91,686.457 1477.47,686.457 1478.03,686.457 1478.59,686.457 1479.15,686.457 1479.71,686.457 1480.27,686.457 1480.83,686.457 1481.39,686.457 1481.95,686.457 1482.51,686.457 1483.07,686.457 1483.62,686.457 1484.18,686.457 1484.74,686.457 1485.3,686.457 1485.86,686.457 1486.42,686.457 1486.98,686.457 1487.54,686.457 1488.1,686.457 1488.66,686.457 1489.22,686.457 1489.78,686.457 1490.34,686.457 1490.89,686.457 1491.45,686.457 1492.01,686.457 1492.57,686.457 1493.13,686.457 1493.69,686.457 1494.25,686.457 1494.81,686.457 1495.37,686.457 1495.93,686.457 1496.49,686.457 1497.05,686.457 1497.61,686.457 1498.16,686.457 1498.72,686.457 1499.28,686.457 1499.84,686.457 1500.4,686.457 1500.96,686.457 1501.52,686.457 1502.08,686.457 1502.64,686.457 1503.2,686.457 1503.76,686.457 1504.32,686.457 1504.88,686.457 1505.44,686.457 1505.99,686.457 1506.55,686.457 1507.11,686.457 1507.67,686.457 1508.23,686.457 1508.79,686.457 1509.35,686.457 1509.91,686.457 1510.47,686.457 1511.03,686.457 1511.59,686.457 1512.15,686.457 1512.71,686.457 1513.26,686.457 1513.82,686.457 1514.38,686.457 1514.94,686.457 1515.5,686.457 1516.06,686.457 1516.62,686.457 1517.18,686.457 1517.74,686.457 1518.3,686.457 1518.86,686.457 1519.42,686.457 1519.98,686.457 1520.53,686.457 1521.09,686.457 1521.65,686.457 1522.21,686.457 1522.77,686.457 1523.33,686.457 1523.89,686.457 1524.45,686.457 1525.01,686.457 1525.57,686.457 1526.13,686.457 1526.69,686.457 1527.25,686.457 1527.81,686.457 1528.36,686.457 1528.92,686.457 1529.48,686.457 1530.04,686.457 1530.6,686.457 1531.16,686.457 1531.72,686.457 1532.28,686.457 1532.84,686.457 1533.4,686.457 1533.96,686.457 1534.52,686.457 1535.08,686.457 1535.63,686.457 1536.19,686.457 1536.75,686.457 1537.31,686.457 1537.87,686.457 1538.43,686.457 1538.99,686.457 1539.55,686.457 1540.11,686.457 1540.67,686.457 1541.23,686.457 1541.79,686.457 1542.35,686.457 1542.9,686.457 1543.46,686.457 1544.02,686.457 1544.58,686.457 1545.14,686.457 1545.7,686.457 1546.26,686.457 1546.82,686.457 1547.38,686.457 1547.94,686.457 1548.5,686.457 1549.06,686.457 1549.62,686.457 1550.18,686.457 1550.73,686.457 1551.29,686.457 1551.85,686.457 1552.41,686.457 1552.97,686.457 1553.53,686.457 1554.09,686.457 1554.65,686.457 1555.21,686.457 1555.77,686.457 1556.33,686.457 1556.89,686.457 1557.45,686.457 1558,686.457 1558.56,686.457 1559.12,686.457 1559.68,686.457 1560.24,686.457 1560.8,686.457 1561.36,686.457 1561.92,686.457 1562.48,686.457 1563.04,686.457 1563.6,686.457 1564.16,686.457 1564.72,686.457 1565.28,686.457 1565.83,686.457 1566.39,686.457 1566.95,686.457 1567.51,686.457 1568.07,686.457 1568.63,686.457 1569.19,686.457 1569.75,686.457 1570.31,686.457 1570.87,686.457 1571.43,686.457 1571.99,686.457 1572.55,686.457 1573.1,686.457 1573.66,686.457 1574.22,686.457 1574.78,686.457 1575.34,686.457 1575.9,686.457 1576.46,686.457 1577.02,686.457 1577.58,686.457 1578.14,686.457 1578.7,686.457 1579.26,686.457 1579.82,686.457 1580.37,686.457 1580.93,686.457 1581.49,686.457 1582.05,686.457 1582.61,686.457 1583.17,686.457 1583.73,686.457 1584.29,686.457 1584.85,686.457 1585.41,686.457 1585.97,686.457 1586.53,686.457 1587.09,686.457 1587.65,686.457 1588.2,686.457 1588.76,686.457 1589.32,686.457 1589.88,686.457 1590.44,686.457 1591,686.457 1591.56,686.457 1592.12,686.457 1592.68,686.457 1593.24,686.457 1593.8,686.457 1594.36,686.457 1594.92,686.457 1595.47,686.457 1596.03,686.457 1596.59,686.457 1597.15,686.457 1597.71,686.457 1598.27,686.457 1598.83,686.457 1599.39,686.457 1599.95,686.457 1600.51,686.457 1601.07,686.457 1601.63,686.457 1602.19,686.457 1602.74,686.457 1603.3,686.457 1603.86,686.457 1604.42,686.457 1604.98,686.457 1605.54,686.457 1606.1,686.457 1606.66,686.457 1607.22,686.457 1607.78,686.457 1608.34,686.457 1608.9,686.457 1609.46,686.457 1610.02,686.457 1610.57,686.457 1611.13,686.457 1611.69,686.457 1612.25,686.457 1612.81,686.457 1613.37,686.457 1613.93,686.457 1614.49,686.457 1615.05,686.457 1615.61,686.457 1616.17,686.457 1616.73,686.457 1617.29,686.457 1617.84,686.457 1618.4,686.457 1618.96,686.457 1619.52,686.457 1620.08,686.457 1620.64,686.457 1621.2,686.457 1621.76,686.457 1622.32,686.457 1622.88,686.457 1623.44,686.457 1624,686.457 1624.56,686.457 1625.11,686.457 1625.67,686.457 1626.23,686.457 1626.79,686.457 1627.35,686.457 1627.91,686.457 1628.47,686.457 1629.03,686.457 1629.59,686.457 1630.15,686.457 1630.71,686.457 1631.27,686.457 1631.83,686.457 1632.39,686.457 1632.94,686.457 1633.5,686.457 1634.06,686.457 1634.62,686.457 1635.18,686.457 1635.74,686.457 1636.3,686.457 1636.86,686.457 1637.42,686.457 1637.98,686.457 1638.54,686.457 1639.1,686.457 1639.66,686.457 1640.21,686.457 1640.77,686.457 1641.33,686.457 1641.89,686.457 1642.45,686.457 1643.01,686.457 1643.57,686.457 1644.13,686.457 1644.69,686.457 1645.25,686.457 1645.81,686.457 1646.37,686.457 1646.93,686.457 1647.48,686.457 1648.04,686.457 1648.6,686.457 1649.16,686.457 1649.72,686.457 1650.28,686.457 1650.84,686.457 1651.4,686.457 1651.96,686.457 1652.52,686.457 1653.08,686.457 1653.64,686.457 1654.2,686.457 1654.76,686.457 1655.31,686.457 1655.87,686.457 1656.43,686.457 1656.99,686.457 1657.55,686.457 1658.11,686.457 1658.67,686.457 1659.23,686.457 1659.79,686.457 1660.35,686.457 1660.91,686.457 1661.47,686.457 1662.03,686.457 1662.58,686.457 1663.14,686.457 1663.7,686.457 1664.26,686.457 1664.82,686.457 1665.38,686.457 1665.94,686.457 1666.5,686.457 1667.06,686.457 1667.62,686.457 1668.18,686.457 1668.74,686.457 1669.3,686.457 1669.85,686.457 1670.41,686.457 1670.97,686.457 1671.53,686.457 1672.09,686.457 1672.65,686.457 1673.21,686.457 1673.77,686.457 1674.33,686.457 1674.89,686.457 1675.45,686.457 1676.01,686.457 1676.57,686.457 1677.13,686.457 1677.68,686.457 1678.24,686.457 1678.8,686.457 1679.36,686.457 1679.92,686.457 1680.48,686.457 1681.04,686.457 1681.6,686.457 1682.16,686.457 1682.72,686.457 1683.28,686.457 1683.84,686.457 1684.4,686.457 1684.95,686.457 1685.51,686.457 1686.07,686.457 1686.63,686.457 1687.19,686.457 1687.75,686.457 1688.31,686.457 1688.87,686.457 1689.43,686.457 1689.99,686.457 1690.55,686.457 1691.11,686.457 1691.67,686.457 1692.23,686.457 1692.78,686.457 1693.34,686.457 1693.9,686.457 1694.46,686.457 1695.02,686.457 1695.58,686.457 1696.14,686.457 1696.7,686.457 1697.26,686.457 1697.82,686.457 1698.38,686.457 1698.94,686.457 1699.5,686.457 1700.05,686.457 1700.61,686.457 1701.17,686.457 1701.73,686.457 1702.29,686.457 1702.85,686.457 1703.41,686.457 1703.97,686.457 1704.53,686.457 1705.09,686.457 1705.65,686.457 1706.21,686.457 1706.77,686.457 1707.32,686.457 1707.88,686.457 1708.44,686.457 1709,686.457 1709.56,686.457 1710.12,686.457 1710.68,686.457 1711.24,686.457 1711.8,686.457 1712.36,686.457 1712.92,686.457 1713.48,686.457 1714.04,686.457 1714.6,686.457 1715.15,686.457 1715.71,686.457 1716.27,686.457 1716.83,686.457 1717.39,686.457 1717.95,686.457 1718.51,686.457 1719.07,686.457 1719.63,686.457 1720.19,686.457 1720.75,686.457 1721.31,686.457 1721.87,686.457 1722.42,686.457 1722.98,686.457 1723.54,686.457 1724.1,686.457 1724.66,686.457 1725.22,686.457 1725.78,686.457 1726.34,686.457 1726.9,686.457 1727.46,686.457 1728.02,686.457 1728.58,686.457 1729.14,686.457 1729.69,686.457 1730.25,686.457 1730.81,686.457 1731.37,686.457 1731.93,686.457 1732.49,686.457 1733.05,686.457 1733.61,686.457 1734.17,686.457 1734.73,686.457 1735.29,686.457 1735.85,686.457 1736.41,686.457 1736.97,686.457 1737.52,686.457 1738.08,686.457 1738.64,686.457 1739.2,686.457 1739.76,686.457 1740.32,686.457 1740.88,686.457 1741.44,686.457 1742,686.457 1742.56,686.457 1743.12,686.457 1743.68,686.457 1744.24,686.457 1744.79,686.457 1745.35,686.457 1745.91,686.457 1746.47,686.457 1747.03,686.457 1747.59,686.457 1748.15,686.457 1748.71,686.457 1749.27,686.457 1749.83,686.457 1750.39,686.457 1750.95,686.457 1751.51,686.457 1752.06,686.457 1752.62,686.457 1753.18,686.457 1753.74,686.457 1754.3,686.457 1754.86,686.457 1755.42,686.457 1755.98,686.457 1756.54,686.457 1757.1,686.457 1757.66,686.457 1758.22,686.457 1758.78,686.457 1759.34,686.457 1759.89,686.457 1760.45,686.457 1761.01,686.457 1761.57,686.457 1762.13,686.457 1762.69,686.457 1763.25,686.457 1763.81,686.457 1764.37,686.457 1764.93,686.457 1765.49,686.457 1766.05,686.457 1766.61,686.457 1767.16,686.457 1767.72,686.457 1768.28,686.457 1768.84,686.457 1769.4,686.457 1769.96,686.457 1770.52,686.457 1771.08,686.457 1771.64,686.457 1772.2,686.457 1772.76,686.457 1773.32,686.457 1773.88,686.457 1774.43,686.457 1774.99,686.457 1775.55,686.457 1776.11,686.457 1776.67,686.457 1777.23,686.457 1777.79,686.457 1778.35,686.457 1778.91,686.457 1779.47,686.457 1780.03,686.457 1780.59,686.457 1781.15,686.457 1781.71,686.457 1782.26,686.457 1782.82,686.457 1783.38,686.457 1783.94,686.457 1784.5,686.457 1785.06,686.457 1785.62,686.457 1786.18,686.457 1786.74,686.457 1787.3,686.457 1787.86,686.457 1788.42,686.457 1788.98,686.457 1789.53,686.457 1790.09,686.457 1790.65,686.457 1791.21,686.457 1791.77,686.457 1792.33,686.457 1792.89,686.457 1793.45,686.457 1794.01,686.457 1794.57,686.457 1795.13,686.457 1795.69,686.457 1796.25,686.457 1796.8,686.457 1797.36,686.457 1797.92,686.457 1798.48,686.457 1799.04,686.457 1799.6,686.457 1800.16,686.457 1800.72,686.457 1801.28,686.457 1801.84,686.457 1802.4,686.457 1802.96,686.457 1803.52,686.457 1804.08,686.457 1804.63,686.457 1805.19,686.457 1805.75,686.457 1806.31,686.457 1806.87,686.457 1807.43,686.457 1807.99,686.457 1808.55,686.457 1809.11,686.457 1809.67,686.457 1810.23,686.457 1810.79,686.457 1811.35,686.457 1811.9,686.457 1812.46,686.457 1813.02,686.457 1813.58,686.457 1814.14,686.457 1814.7,686.457 1815.26,686.457 1815.82,686.457 1816.38,686.457 1816.94,686.457 1817.5,686.457 1818.06,686.457 1818.62,686.457 1819.18,686.457 1819.73,686.457 1820.29,686.457 1820.85,686.457 1821.41,686.457 1821.97,686.457 1822.53,686.457 1823.09,686.457 1823.65,686.457 1824.21,686.457 1824.77,686.457 1825.33,686.457 1825.89,686.457 1826.45,686.457 1827,686.457 1827.56,686.457 1828.12,686.457 1828.68,686.457 1829.24,686.457 1829.8,686.457 1830.36,686.457 1830.92,686.457 1831.48,686.457 1832.04,686.457 1832.6,686.457 1833.16,686.457 1833.72,686.457 1834.27,686.457 1834.83,686.457 1835.39,686.457 1835.95,686.457 1836.51,686.457 1837.07,686.457 1837.63,686.457 1838.19,686.457 \"/>\n<path clip-path=\"url(#clip763)\" d=\"M720.247 683.751 L720.806 683.751 L721.365 683.751 L721.924 683.751 L722.484 683.751 L723.043 683.751 L723.602 683.751 L724.161 683.751 L724.721 683.751 L725.28 683.751 L725.839 683.751 L726.398 683.751 L726.958 683.751 L727.517 683.751 L728.076 683.751 L728.635 683.751 L729.195 683.751 L729.754 683.751 L730.313 683.751 L730.872 683.751 L731.432 683.751 L731.991 683.751 L732.55 683.751 L733.109 683.751 L733.669 683.751 L734.228 683.751 L734.787 683.751 L735.346 683.751 L735.906 683.751 L736.465 683.751 L737.024 683.751 L737.583 683.751 L738.143 683.751 L738.702 683.751 L739.261 683.751 L739.82 683.751 L740.38 683.751 L740.939 683.751 L741.498 683.751 L742.057 683.751 L742.617 683.751 L743.176 683.751 L743.735 683.751 L744.294 683.751 L744.854 683.751 L745.413 683.751 L745.972 683.751 L746.531 683.751 L747.091 683.751 L747.65 683.751 L748.209 683.751 L748.768 683.751 L749.328 683.751 L749.887 683.751 L750.446 683.751 L751.005 683.751 L751.565 683.751 L752.124 683.751 L752.683 683.751 L753.242 683.751 L753.802 683.751 L754.361 683.751 L754.92 683.751 L755.479 683.751 L756.039 683.751 L756.598 683.751 L757.157 683.751 L757.716 683.751 L758.276 683.751 L758.835 683.751 L759.394 683.751 L759.953 683.751 L760.513 683.751 L761.072 683.751 L761.631 683.751 L762.19 683.751 L762.75 683.751 L763.309 683.751 L763.868 683.751 L764.427 683.751 L764.987 683.751 L765.546 683.751 L766.105 683.751 L766.664 683.751 L767.224 683.751 L767.783 683.751 L768.342 683.751 L768.901 683.751 L769.461 683.751 L770.02 683.751 L770.579 683.751 L771.138 683.751 L771.698 683.751 L772.257 683.751 L772.816 683.751 L773.375 683.751 L773.935 683.751 L774.494 683.751 L775.053 683.751 L775.612 683.751 L776.172 683.751 L776.731 683.751 L777.29 683.751 L777.849 683.751 L778.409 683.751 L778.968 683.751 L779.527 683.751 L780.086 683.751 L780.646 683.751 L781.205 683.751 L781.764 683.751 L782.323 683.751 L782.883 683.751 L783.442 683.751 L784.001 683.751 L784.56 683.751 L785.12 683.751 L785.679 683.751 L786.238 683.751 L786.797 683.751 L787.357 683.751 L787.916 683.751 L788.475 683.751 L789.034 683.751 L789.594 683.751 L790.153 683.751 L790.712 683.751 L791.271 683.751 L791.831 683.751 L792.39 683.751 L792.949 683.751 L793.508 683.751 L794.068 683.751 L794.627 683.751 L795.186 683.751 L795.745 683.751 L796.305 683.751 L796.864 683.751 L797.423 683.751 L797.982 683.751 L798.542 683.751 L799.101 683.751 L799.66 683.751 L800.219 683.751 L800.779 683.751 L801.338 683.751 L801.897 683.751 L802.456 683.751 L803.016 683.751 L803.575 683.751 L804.134 683.751 L804.693 683.751 L805.253 683.751 L805.812 683.751 L806.371 683.751 L806.931 683.751 L807.49 683.751 L808.049 683.751 L808.608 683.751 L809.168 683.751 L809.727 683.751 L810.286 683.751 L810.845 683.751 L811.405 683.751 L811.964 683.751 L812.523 683.751 L813.082 683.751 L813.642 683.751 L814.201 683.751 L814.76 683.751 L815.319 683.751 L815.879 683.751 L816.438 683.751 L816.997 683.751 L817.556 683.751 L818.116 683.751 L818.675 683.751 L819.234 683.751 L819.793 683.751 L820.353 683.751 L820.912 683.751 L821.471 683.751 L822.03 683.751 L822.59 683.751 L823.149 683.751 L823.708 683.751 L824.267 683.751 L824.827 683.751 L825.386 683.751 L825.945 683.751 L826.504 683.751 L827.064 683.751 L827.623 683.751 L828.182 683.751 L828.741 683.751 L829.301 683.751 L829.86 683.751 L830.419 683.751 L830.978 683.751 L831.538 683.751 L832.097 683.751 L832.656 683.751 L833.215 683.751 L833.775 683.751 L834.334 683.751 L834.893 683.751 L835.452 683.751 L836.012 683.751 L836.571 683.751 L837.13 683.751 L837.689 683.751 L838.249 683.751 L838.808 683.751 L839.367 683.751 L839.926 683.751 L840.486 683.751 L841.045 683.751 L841.604 683.751 L842.163 683.751 L842.723 683.751 L843.282 683.751 L843.841 683.751 L844.4 683.751 L844.96 683.751 L845.519 683.751 L846.078 683.751 L846.637 683.751 L847.197 683.751 L847.756 683.751 L848.315 683.751 L848.874 683.751 L849.434 683.751 L849.993 683.751 L850.552 683.751 L851.111 683.751 L851.671 683.751 L852.23 683.751 L852.789 683.751 L853.348 683.751 L853.908 683.751 L854.467 683.751 L855.026 683.751 L855.585 683.751 L856.145 683.751 L856.704 683.751 L857.263 683.751 L857.822 683.751 L858.382 683.751 L858.941 683.751 L859.5 683.751 L860.059 683.751 L860.619 683.751 L861.178 683.751 L861.737 683.751 L862.296 683.751 L862.856 683.751 L863.415 683.751 L863.974 683.751 L864.533 683.751 L865.093 683.751 L865.652 683.751 L866.211 683.751 L866.77 683.751 L867.33 683.751 L867.889 683.751 L868.448 683.751 L869.007 683.751 L869.567 683.751 L870.126 683.751 L870.685 683.751 L871.244 683.751 L871.804 683.751 L872.363 683.751 L872.922 683.751 L873.481 683.751 L874.041 683.751 L874.6 683.751 L875.159 683.751 L875.718 683.751 L876.278 683.751 L876.837 683.751 L877.396 683.751 L877.955 683.751 L878.515 683.751 L879.074 683.751 L879.633 683.751 L880.192 683.751 L880.752 683.751 L881.311 683.751 L881.87 683.751 L882.429 683.751 L882.989 683.751 L883.548 683.751 L884.107 683.751 L884.666 683.751 L885.226 683.751 L885.785 683.751 L886.344 683.751 L886.903 683.751 L887.463 683.751 L888.022 683.751 L888.581 683.751 L889.14 683.751 L889.7 683.751 L890.259 683.751 L890.818 683.751 L891.377 683.751 L891.937 683.751 L892.496 683.751 L893.055 683.751 L893.614 683.751 L894.174 683.751 L894.733 683.751 L895.292 683.751 L895.851 683.751 L896.411 683.751 L896.97 683.751 L897.529 683.751 L898.088 683.751 L898.648 683.751 L899.207 683.751 L899.766 683.751 L900.325 683.751 L900.885 683.751 L901.444 683.751 L902.003 683.751 L902.562 683.751 L903.122 683.751 L903.681 683.751 L904.24 683.751 L904.799 683.751 L905.359 683.751 L905.918 683.751 L906.477 683.751 L907.036 683.751 L907.596 683.751 L908.155 683.751 L908.714 683.751 L909.273 683.751 L909.833 683.751 L910.392 683.751 L910.951 683.751 L911.51 683.751 L912.07 683.751 L912.629 683.751 L913.188 683.751 L913.747 683.751 L914.307 683.751 L914.866 683.751 L915.425 683.751 L915.984 683.751 L916.544 683.751 L917.103 683.751 L917.662 683.751 L918.221 683.751 L918.781 683.751 L919.34 683.751 L919.899 683.751 L920.458 683.751 L921.018 683.751 L921.577 683.751 L922.136 683.751 L922.695 683.751 L923.255 683.751 L923.814 683.751 L924.373 683.751 L924.932 683.751 L925.492 683.751 L926.051 683.751 L926.61 683.751 L927.169 683.751 L927.729 683.751 L928.288 683.751 L928.847 683.751 L929.406 683.751 L929.966 683.751 L930.525 683.751 L931.084 683.751 L931.644 683.751 L932.203 683.751 L932.762 683.751 L933.321 683.751 L933.881 683.751 L934.44 683.751 L934.999 683.751 L935.558 683.751 L936.118 683.751 L936.677 683.751 L937.236 683.751 L937.795 683.751 L938.355 683.751 L938.914 683.751 L939.473 683.751 L940.032 683.751 L940.592 683.751 L941.151 683.751 L941.71 683.751 L942.269 683.751 L942.829 683.751 L943.388 683.751 L943.947 683.751 L944.506 683.751 L945.066 683.751 L945.625 683.751 L946.184 683.751 L946.743 683.751 L947.303 683.751 L947.862 683.751 L948.421 683.751 L948.98 683.751 L949.54 683.751 L950.099 683.751 L950.658 683.751 L951.217 683.751 L951.777 683.751 L952.336 683.751 L952.895 683.751 L953.454 683.751 L954.014 683.751 L954.573 683.751 L955.132 683.751 L955.691 683.751 L956.251 683.751 L956.81 683.751 L957.369 683.751 L957.928 683.751 L958.488 683.751 L959.047 683.751 L959.606 683.751 L960.165 683.751 L960.725 683.751 L961.284 683.751 L961.843 683.751 L962.402 683.751 L962.962 683.751 L963.521 683.751 L964.08 683.751 L964.639 683.751 L965.199 683.751 L965.758 683.751 L966.317 683.751 L966.876 683.751 L967.436 683.751 L967.995 683.751 L968.554 683.751 L969.113 683.751 L969.673 683.751 L970.232 683.751 L970.791 683.751 L971.35 683.751 L971.91 683.751 L972.469 683.751 L973.028 683.751 L973.587 683.751 L974.147 683.751 L974.706 683.751 L975.265 683.751 L975.824 683.751 L976.384 683.751 L976.943 683.751 L977.502 683.751 L978.061 683.751 L978.621 683.751 L979.18 683.751 L979.739 683.751 L980.298 683.751 L980.858 683.751 L981.417 683.751 L981.976 683.751 L982.535 683.751 L983.095 683.751 L983.654 683.751 L984.213 683.751 L984.772 683.751 L985.332 683.751 L985.891 683.751 L986.45 683.751 L987.009 683.751 L987.569 683.751 L988.128 683.751 L988.687 683.751 L989.246 683.751 L989.806 683.751 L990.365 683.751 L990.924 683.751 L991.483 683.751 L992.043 683.751 L992.602 683.751 L993.161 683.751 L993.72 683.751 L994.28 683.751 L994.839 683.751 L995.398 683.751 L995.957 683.751 L996.517 683.751 L997.076 683.751 L997.635 683.751 L998.194 683.751 L998.754 683.751 L999.313 683.751 L999.872 683.751 L1000.43 683.751 L1000.99 683.751 L1001.55 683.751 L1002.11 683.751 L1002.67 683.751 L1003.23 683.751 L1003.79 683.751 L1004.35 683.751 L1004.91 683.751 L1005.46 683.751 L1006.02 683.751 L1006.58 683.751 L1007.14 683.751 L1007.7 683.751 L1008.26 683.751 L1008.82 683.751 L1009.38 683.751 L1009.94 683.751 L1010.5 683.751 L1011.06 683.751 L1011.62 683.751 L1012.18 683.751 L1012.73 683.751 L1013.29 683.751 L1013.85 683.751 L1014.41 683.751 L1014.97 683.751 L1015.53 683.751 L1016.09 683.751 L1016.65 683.751 L1017.21 683.751 L1017.77 683.751 L1018.33 683.751 L1018.89 683.751 L1019.45 683.751 L1020.01 683.751 L1020.56 683.751 L1021.12 683.751 L1021.68 683.751 L1022.24 683.751 L1022.8 683.751 L1023.36 683.751 L1023.92 683.751 L1024.48 683.751 L1025.04 683.751 L1025.6 683.751 L1026.16 683.751 L1026.72 683.751 L1027.28 683.751 L1027.83 683.751 L1028.39 683.751 L1028.95 683.751 L1029.51 683.751 L1030.07 683.751 L1030.63 683.751 L1031.19 683.751 L1031.75 683.751 L1032.31 683.751 L1032.87 683.751 L1033.43 683.751 L1033.99 683.751 L1034.55 683.751 L1035.1 683.751 L1035.66 683.751 L1036.22 683.751 L1036.78 683.751 L1037.34 683.751 L1037.9 683.751 L1038.46 683.751 L1039.02 683.751 L1039.58 683.751 L1040.14 683.751 L1040.7 683.751 L1041.26 683.751 L1041.82 683.751 L1042.38 683.751 L1042.93 683.751 L1043.49 683.751 L1044.05 683.751 L1044.61 683.751 L1045.17 683.751 L1045.73 683.751 L1046.29 683.751 L1046.85 683.751 L1047.41 683.751 L1047.97 683.751 L1048.53 683.751 L1049.09 683.751 L1049.65 683.751 L1050.2 683.751 L1050.76 683.751 L1051.32 683.751 L1051.88 683.751 L1052.44 683.751 L1053 683.751 L1053.56 683.751 L1054.12 683.751 L1054.68 683.751 L1055.24 683.751 L1055.8 683.751 L1056.36 683.751 L1056.92 683.751 L1057.48 683.751 L1058.03 683.751 L1058.59 683.751 L1059.15 683.751 L1059.71 683.751 L1060.27 683.751 L1060.83 683.751 L1061.39 683.751 L1061.95 683.751 L1062.51 683.751 L1063.07 683.751 L1063.63 683.751 L1064.19 683.751 L1064.75 683.751 L1065.3 683.751 L1065.86 683.751 L1066.42 683.751 L1066.98 683.751 L1067.54 683.751 L1068.1 683.751 L1068.66 683.751 L1069.22 683.751 L1069.78 683.751 L1070.34 683.751 L1070.9 683.751 L1071.46 683.751 L1072.02 683.751 L1072.57 683.751 L1073.13 683.751 L1073.69 683.751 L1074.25 683.751 L1074.81 683.751 L1075.37 683.751 L1075.93 683.751 L1076.49 683.751 L1077.05 683.751 L1077.61 683.751 L1078.17 683.751 L1078.73 683.751 L1079.29 683.751 L1079.85 683.751 L1080.4 683.751 L1080.96 683.751 L1081.52 683.751 L1082.08 683.751 L1082.64 683.751 L1083.2 683.751 L1083.76 683.751 L1084.32 683.751 L1084.88 683.751 L1085.44 683.751 L1086 683.751 L1086.56 683.751 L1087.12 683.751 L1087.67 683.751 L1088.23 683.751 L1088.79 683.751 L1089.35 683.751 L1089.91 683.751 L1090.47 683.751 L1091.03 683.751 L1091.59 683.751 L1092.15 683.751 L1092.71 683.751 L1093.27 683.751 L1093.83 683.751 L1094.39 683.751 L1094.94 683.751 L1095.5 683.751 L1096.06 683.751 L1096.62 683.751 L1097.18 683.751 L1097.74 683.751 L1098.3 683.751 L1098.86 683.751 L1099.42 683.751 L1099.98 683.751 L1100.54 683.751 L1101.1 683.751 L1101.66 683.751 L1102.22 683.751 L1102.77 683.751 L1103.33 683.751 L1103.89 683.751 L1104.45 683.751 L1105.01 683.751 L1105.57 683.751 L1106.13 683.751 L1106.69 683.751 L1107.25 683.751 L1107.81 683.751 L1108.37 683.751 L1108.93 683.751 L1109.49 683.751 L1110.04 683.751 L1110.6 683.751 L1111.16 683.751 L1111.72 683.751 L1112.28 683.751 L1112.84 683.751 L1113.4 683.751 L1113.96 683.751 L1114.52 683.751 L1115.08 683.751 L1115.64 683.751 L1116.2 683.751 L1116.76 683.751 L1117.31 683.751 L1117.87 683.751 L1118.43 683.751 L1118.99 683.751 L1119.55 683.751 L1120.11 683.751 L1120.67 683.751 L1121.23 683.751 L1121.79 683.751 L1122.35 683.751 L1122.91 683.751 L1123.47 683.751 L1124.03 683.751 L1124.59 683.751 L1125.14 683.751 L1125.7 683.751 L1126.26 683.751 L1126.82 683.751 L1127.38 683.751 L1127.94 683.751 L1128.5 683.751 L1129.06 683.751 L1129.62 683.751 L1130.18 683.751 L1130.74 683.751 L1131.3 683.751 L1131.86 683.751 L1132.41 683.751 L1132.97 683.751 L1133.53 683.751 L1134.09 683.751 L1134.65 683.751 L1135.21 683.751 L1135.77 683.751 L1136.33 683.751 L1136.89 683.751 L1137.45 683.751 L1138.01 683.751 L1138.57 683.751 L1139.13 683.751 L1139.68 683.751 L1140.24 683.751 L1140.8 683.751 L1141.36 683.751 L1141.92 683.751 L1142.48 683.751 L1143.04 683.751 L1143.6 683.751 L1144.16 683.751 L1144.72 683.751 L1145.28 683.751 L1145.84 683.751 L1146.4 683.751 L1146.96 683.751 L1147.51 683.751 L1148.07 683.751 L1148.63 683.751 L1149.19 683.751 L1149.75 683.751 L1150.31 683.751 L1150.87 683.751 L1151.43 683.751 L1151.99 683.751 L1152.55 683.751 L1153.11 683.751 L1153.67 683.751 L1154.23 683.751 L1154.78 683.751 L1155.34 683.751 L1155.9 683.751 L1156.46 683.751 L1157.02 683.751 L1157.58 683.751 L1158.14 683.751 L1158.7 683.751 L1159.26 683.751 L1159.82 683.751 L1160.38 683.751 L1160.94 683.751 L1161.5 683.751 L1162.05 683.751 L1162.61 683.751 L1163.17 683.751 L1163.73 683.751 L1164.29 683.751 L1164.85 683.751 L1165.41 683.751 L1165.97 683.751 L1166.53 683.751 L1167.09 683.751 L1167.65 683.751 L1168.21 683.751 L1168.77 683.751 L1169.33 683.751 L1169.88 683.751 L1170.44 683.751 L1171 683.751 L1171.56 683.751 L1172.12 683.751 L1172.68 683.751 L1173.24 683.751 L1173.8 683.751 L1174.36 683.751 L1174.92 683.751 L1175.48 683.751 L1176.04 683.751 L1176.6 683.751 L1177.15 683.751 L1177.71 683.751 L1178.27 683.751 L1178.83 683.751 L1179.39 683.751 L1179.95 683.751 L1180.51 683.751 L1181.07 683.751 L1181.63 683.751 L1182.19 683.751 L1182.75 683.751 L1183.31 683.751 L1183.87 683.751 L1184.43 683.751 L1184.98 683.751 L1185.54 683.751 L1186.1 683.751 L1186.66 683.751 L1187.22 683.751 L1187.78 683.751 L1188.34 683.751 L1188.9 683.751 L1189.46 683.751 L1190.02 683.751 L1190.58 683.751 L1191.14 683.751 L1191.7 683.751 L1192.25 683.751 L1192.81 683.751 L1193.37 683.751 L1193.93 683.751 L1194.49 683.751 L1195.05 683.751 L1195.61 683.751 L1196.17 683.751 L1196.73 683.751 L1197.29 683.751 L1197.85 683.751 L1198.41 683.751 L1198.97 683.751 L1199.52 683.751 L1200.08 683.751 L1200.64 683.751 L1201.2 683.751 L1201.76 683.751 L1202.32 683.751 L1202.88 683.751 L1203.44 683.751 L1204 683.751 L1204.56 683.751 L1205.12 683.751 L1205.68 683.751 L1206.24 683.751 L1206.8 683.751 L1207.35 683.751 L1207.91 683.751 L1208.47 683.751 L1209.03 683.751 L1209.59 683.751 L1210.15 683.751 L1210.71 683.751 L1211.27 683.751 L1211.83 683.751 L1212.39 683.751 L1212.95 683.751 L1213.51 683.751 L1214.07 683.751 L1214.62 683.751 L1215.18 683.751 L1215.74 683.751 L1216.3 683.751 L1216.86 683.751 L1217.42 683.751 L1217.98 683.751 L1218.54 683.751 L1219.1 683.751 L1219.66 683.751 L1220.22 683.751 L1220.78 683.751 L1221.34 683.751 L1221.89 683.751 L1222.45 683.751 L1223.01 683.751 L1223.57 683.751 L1224.13 683.751 L1224.69 683.751 L1225.25 683.751 L1225.81 683.751 L1226.37 683.751 L1226.93 683.751 L1227.49 683.751 L1228.05 683.751 L1228.61 683.751 L1229.17 683.751 L1229.72 683.751 L1230.28 683.751 L1230.84 683.751 L1231.4 683.751 L1231.96 683.751 L1232.52 683.751 L1233.08 683.751 L1233.64 683.751 L1234.2 683.751 L1234.76 683.751 L1235.32 683.751 L1235.88 683.751 L1236.44 683.751 L1236.99 683.751 L1237.55 683.751 L1238.11 683.751 L1238.67 683.751 L1239.23 683.751 L1239.79 683.751 L1240.35 683.751 L1240.91 683.751 L1241.47 683.751 L1242.03 683.751 L1242.59 683.751 L1243.15 683.751 L1243.71 683.751 L1244.26 683.751 L1244.82 683.751 L1245.38 683.751 L1245.94 683.751 L1246.5 683.751 L1247.06 683.751 L1247.62 683.751 L1248.18 683.751 L1248.74 683.751 L1249.3 683.751 L1249.86 683.751 L1250.42 683.751 L1250.98 683.751 L1251.54 683.751 L1252.09 683.751 L1252.65 683.751 L1253.21 683.751 L1253.77 683.751 L1254.33 683.751 L1254.89 683.751 L1255.45 683.751 L1256.01 683.751 L1256.57 683.751 L1257.13 683.751 L1257.69 683.751 L1258.25 683.751 L1258.81 683.751 L1259.36 683.751 L1259.92 683.751 L1260.48 683.751 L1261.04 683.751 L1261.6 683.751 L1262.16 683.751 L1262.72 683.751 L1263.28 683.751 L1263.84 683.751 L1264.4 683.751 L1264.96 683.751 L1265.52 683.751 L1266.08 683.751 L1266.63 683.751 L1267.19 683.751 L1267.75 683.751 L1268.31 683.751 L1268.87 683.751 L1269.43 683.751 L1269.99 683.751 L1270.55 683.751 L1271.11 683.751 L1271.67 683.751 L1272.23 683.751 L1272.79 683.751 L1273.35 683.751 L1273.91 683.751 L1274.46 683.751 L1275.02 683.751 L1275.58 683.751 L1276.14 683.751 L1276.7 683.751 L1277.26 683.751 L1277.82 683.751 L1278.38 683.751 L1278.94 683.751 L1279.5 683.751 L1280.06 683.751 L1280.62 683.751 L1281.18 683.751 L1281.73 683.751 L1282.29 683.751 L1282.85 683.751 L1283.41 683.751 L1283.97 683.751 L1284.53 683.751 L1285.09 683.751 L1285.65 683.751 L1286.21 683.751 L1286.77 683.751 L1287.33 683.751 L1287.89 683.751 L1288.45 683.751 L1289 683.751 L1289.56 683.751 L1290.12 683.751 L1290.68 683.751 L1291.24 683.751 L1291.8 683.751 L1292.36 683.751 L1292.92 683.751 L1293.48 683.751 L1294.04 683.751 L1294.6 683.751 L1295.16 683.751 L1295.72 683.751 L1296.28 683.751 L1296.83 683.751 L1297.39 683.751 L1297.95 683.751 L1298.51 683.751 L1299.07 683.751 L1299.63 683.751 L1300.19 683.751 L1300.75 683.751 L1301.31 683.751 L1301.87 683.751 L1302.43 683.751 L1302.99 683.751 L1303.55 683.751 L1304.1 683.751 L1304.66 683.751 L1305.22 683.751 L1305.78 683.751 L1306.34 683.751 L1306.9 683.751 L1307.46 683.751 L1308.02 683.751 L1308.58 683.751 L1309.14 683.751 L1309.7 683.751 L1310.26 683.751 L1310.82 683.751 L1311.38 683.751 L1311.93 683.751 L1312.49 683.751 L1313.05 683.751 L1313.61 683.751 L1314.17 683.751 L1314.73 683.751 L1315.29 683.751 L1315.85 683.751 L1316.41 683.751 L1316.97 683.751 L1317.53 683.751 L1318.09 683.751 L1318.65 683.751 L1319.2 683.751 L1319.76 683.751 L1320.32 683.751 L1320.88 683.751 L1321.44 683.751 L1322 683.751 L1322.56 683.751 L1323.12 683.751 L1323.68 683.751 L1324.24 683.751 L1324.8 683.751 L1325.36 683.751 L1325.92 683.751 L1326.47 683.751 L1327.03 683.751 L1327.59 683.751 L1328.15 683.751 L1328.71 683.751 L1329.27 683.751 L1329.83 683.751 L1330.39 683.751 L1330.95 683.751 L1331.51 683.751 L1332.07 683.751 L1332.63 683.751 L1333.19 683.751 L1333.75 683.751 L1334.3 683.751 L1334.86 683.751 L1335.42 683.751 L1335.98 683.751 L1336.54 683.751 L1337.1 683.751 L1337.66 683.751 L1338.22 683.751 L1338.78 683.751 L1339.34 683.751 L1339.9 683.751 L1340.46 683.751 L1341.02 683.751 L1341.57 683.751 L1342.13 683.751 L1342.69 683.751 L1343.25 683.751 L1343.81 683.751 L1344.37 683.751 L1344.93 683.751 L1345.49 683.751 L1346.05 683.751 L1346.61 683.751 L1347.17 683.751 L1347.73 683.751 L1348.29 683.751 L1348.84 683.751 L1349.4 683.751 L1349.96 683.751 L1350.52 683.751 L1351.08 683.751 L1351.64 683.751 L1352.2 683.751 L1352.76 683.751 L1353.32 683.751 L1353.88 683.751 L1354.44 683.751 L1355 683.751 L1355.56 683.751 L1356.12 683.751 L1356.67 683.751 L1357.23 683.751 L1357.79 683.751 L1358.35 683.751 L1358.91 683.751 L1359.47 683.751 L1360.03 683.751 L1360.59 683.751 L1361.15 683.751 L1361.71 683.751 L1362.27 683.751 L1362.83 683.751 L1363.39 683.751 L1363.94 683.751 L1364.5 683.751 L1365.06 683.751 L1365.62 683.751 L1366.18 683.751 L1366.74 683.751 L1367.3 683.751 L1367.86 683.751 L1368.42 683.751 L1368.98 683.751 L1369.54 683.751 L1370.1 683.751 L1370.66 683.751 L1371.21 683.751 L1371.77 683.751 L1372.33 683.751 L1372.89 683.751 L1373.45 683.751 L1374.01 683.751 L1374.57 683.751 L1375.13 683.751 L1375.69 683.751 L1376.25 683.751 L1376.81 683.751 L1377.37 683.751 L1377.93 683.751 L1378.49 683.751 L1379.04 683.751 L1379.6 683.751 L1380.16 683.751 L1380.72 683.751 L1381.28 683.751 L1381.84 683.751 L1382.4 683.751 L1382.96 683.751 L1383.52 683.751 L1384.08 683.751 L1384.64 683.751 L1385.2 683.751 L1385.76 683.751 L1386.31 683.751 L1386.87 683.751 L1387.43 683.751 L1387.99 683.751 L1388.55 683.751 L1389.11 683.751 L1389.67 683.751 L1390.23 683.751 L1390.79 683.751 L1391.35 683.751 L1391.91 683.751 L1392.47 683.751 L1393.03 683.751 L1393.58 683.751 L1394.14 683.751 L1394.7 683.751 L1395.26 683.751 L1395.82 683.751 L1396.38 683.751 L1396.94 683.751 L1397.5 683.751 L1398.06 683.751 L1398.62 683.751 L1399.18 683.751 L1399.74 683.751 L1400.3 683.751 L1400.86 683.751 L1401.41 683.751 L1401.97 683.751 L1402.53 683.751 L1403.09 683.751 L1403.65 683.751 L1404.21 683.751 L1404.77 683.751 L1405.33 683.751 L1405.89 683.751 L1406.45 683.751 L1407.01 683.751 L1407.57 683.751 L1408.13 683.751 L1408.68 683.751 L1409.24 683.751 L1409.8 683.751 L1410.36 683.751 L1410.92 683.751 L1411.48 683.751 L1412.04 683.751 L1412.6 683.751 L1413.16 683.751 L1413.72 683.751 L1414.28 683.751 L1414.84 683.751 L1415.4 683.751 L1415.95 683.751 L1416.51 683.751 L1417.07 683.751 L1417.63 683.751 L1418.19 683.751 L1418.75 683.751 L1419.31 683.751 L1419.87 683.751 L1420.43 683.751 L1420.99 683.751 L1421.55 683.751 L1422.11 683.751 L1422.67 683.751 L1423.23 683.751 L1423.78 683.751 L1424.34 683.751 L1424.9 683.751 L1425.46 683.751 L1426.02 683.751 L1426.58 683.751 L1427.14 683.751 L1427.7 683.751 L1428.26 683.751 L1428.82 683.751 L1429.38 683.751 L1429.94 683.751 L1430.5 683.751 L1431.05 683.751 L1431.61 683.751 L1432.17 683.751 L1432.73 683.751 L1433.29 683.751 L1433.85 683.751 L1434.41 683.751 L1434.97 683.751 L1435.53 683.751 L1436.09 683.751 L1436.65 683.751 L1437.21 683.751 L1437.77 683.751 L1438.33 683.751 L1438.88 683.751 L1439.44 683.751 L1440 683.751 L1440.56 683.751 L1441.12 683.751 L1441.68 683.751 L1442.24 683.751 L1442.8 683.751 L1443.36 683.751 L1443.92 683.751 L1444.48 683.751 L1445.04 683.751 L1445.6 683.751 L1446.15 683.751 L1446.71 683.751 L1447.27 683.751 L1447.83 683.751 L1448.39 683.751 L1448.95 683.751 L1449.51 683.751 L1450.07 683.751 L1450.63 683.751 L1451.19 683.751 L1451.75 683.751 L1452.31 683.751 L1452.87 683.751 L1453.42 683.751 L1453.98 683.751 L1454.54 683.751 L1455.1 683.751 L1455.66 683.751 L1456.22 683.751 L1456.78 683.751 L1457.34 683.751 L1457.9 683.751 L1458.46 683.751 L1459.02 683.751 L1459.58 683.751 L1460.14 683.751 L1460.7 683.751 L1461.25 683.751 L1461.81 683.751 L1462.37 683.751 L1462.93 683.751 L1463.49 683.751 L1464.05 683.751 L1464.61 683.751 L1465.17 683.751 L1465.73 683.751 L1466.29 683.751 L1466.85 683.751 L1467.41 683.751 L1467.97 683.751 L1468.52 683.751 L1469.08 683.751 L1469.64 683.751 L1470.2 683.751 L1470.76 683.751 L1471.32 683.751 L1471.88 683.751 L1472.44 683.751 L1473 683.751 L1473.56 683.751 L1474.12 683.751 L1474.68 683.751 L1475.24 683.751 L1475.79 683.751 L1476.35 683.751 L1476.91 683.751 L1477.47 683.751 L1478.03 683.751 L1478.59 683.751 L1479.15 683.751 L1479.71 683.751 L1480.27 683.751 L1480.83 683.751 L1481.39 683.751 L1481.95 683.751 L1482.51 683.751 L1483.07 683.751 L1483.62 683.751 L1484.18 683.751 L1484.74 683.751 L1485.3 683.751 L1485.86 683.751 L1486.42 683.751 L1486.98 683.751 L1487.54 683.751 L1488.1 683.751 L1488.66 683.751 L1489.22 683.751 L1489.78 683.751 L1490.34 683.751 L1490.89 683.751 L1491.45 683.751 L1492.01 683.751 L1492.57 683.751 L1493.13 683.751 L1493.69 683.751 L1494.25 683.751 L1494.81 683.751 L1495.37 683.751 L1495.93 683.751 L1496.49 683.751 L1497.05 683.751 L1497.61 683.751 L1498.16 683.751 L1498.72 683.751 L1499.28 683.751 L1499.84 683.751 L1500.4 683.751 L1500.96 683.751 L1501.52 683.751 L1502.08 683.751 L1502.64 683.751 L1503.2 683.751 L1503.76 683.751 L1504.32 683.751 L1504.88 683.751 L1505.44 683.751 L1505.99 683.751 L1506.55 683.751 L1507.11 683.751 L1507.67 683.751 L1508.23 683.751 L1508.79 683.751 L1509.35 683.751 L1509.91 683.751 L1510.47 683.751 L1511.03 683.751 L1511.59 683.751 L1512.15 683.751 L1512.71 683.751 L1513.26 683.751 L1513.82 683.751 L1514.38 683.751 L1514.94 683.751 L1515.5 683.751 L1516.06 683.751 L1516.62 683.751 L1517.18 683.751 L1517.74 683.751 L1518.3 683.751 L1518.86 683.751 L1519.42 683.751 L1519.98 683.751 L1520.53 683.751 L1521.09 683.751 L1521.65 683.751 L1522.21 683.751 L1522.77 683.751 L1523.33 683.751 L1523.89 683.751 L1524.45 683.751 L1525.01 683.751 L1525.57 683.751 L1526.13 683.751 L1526.69 683.751 L1527.25 683.751 L1527.81 683.751 L1528.36 683.751 L1528.92 683.751 L1529.48 683.751 L1530.04 683.751 L1530.6 683.751 L1531.16 683.751 L1531.72 683.751 L1532.28 683.751 L1532.84 683.751 L1533.4 683.751 L1533.96 683.751 L1534.52 683.751 L1535.08 683.751 L1535.63 683.751 L1536.19 683.751 L1536.75 683.751 L1537.31 683.751 L1537.87 683.751 L1538.43 683.751 L1538.99 683.751 L1539.55 683.751 L1540.11 683.751 L1540.67 683.751 L1541.23 683.751 L1541.79 683.751 L1542.35 683.751 L1542.9 683.751 L1543.46 683.751 L1544.02 683.751 L1544.58 683.751 L1545.14 683.751 L1545.7 683.751 L1546.26 683.751 L1546.82 683.751 L1547.38 683.751 L1547.94 683.751 L1548.5 683.751 L1549.06 683.751 L1549.62 683.751 L1550.18 683.751 L1550.73 683.751 L1551.29 683.751 L1551.85 683.751 L1552.41 683.751 L1552.97 683.751 L1553.53 683.751 L1554.09 683.751 L1554.65 683.751 L1555.21 683.751 L1555.77 683.751 L1556.33 683.751 L1556.89 683.751 L1557.45 683.751 L1558 683.751 L1558.56 683.751 L1559.12 683.751 L1559.68 683.751 L1560.24 683.751 L1560.8 683.751 L1561.36 683.751 L1561.92 683.751 L1562.48 683.751 L1563.04 683.751 L1563.6 683.751 L1564.16 683.751 L1564.72 683.751 L1565.28 683.751 L1565.83 683.751 L1566.39 683.751 L1566.95 683.751 L1567.51 683.751 L1568.07 683.751 L1568.63 683.751 L1569.19 683.751 L1569.75 683.751 L1570.31 683.751 L1570.87 683.751 L1571.43 683.751 L1571.99 683.751 L1572.55 683.751 L1573.1 683.751 L1573.66 683.751 L1574.22 683.751 L1574.78 683.751 L1575.34 683.751 L1575.9 683.751 L1576.46 683.751 L1577.02 683.751 L1577.58 683.751 L1578.14 683.751 L1578.7 683.751 L1579.26 683.751 L1579.82 683.751 L1580.37 683.751 L1580.93 683.751 L1581.49 683.751 L1582.05 683.751 L1582.61 683.751 L1583.17 683.751 L1583.73 683.751 L1584.29 683.751 L1584.85 683.751 L1585.41 683.751 L1585.97 683.751 L1586.53 683.751 L1587.09 683.751 L1587.65 683.751 L1588.2 683.751 L1588.76 683.751 L1589.32 683.751 L1589.88 683.751 L1590.44 683.751 L1591 683.751 L1591.56 683.751 L1592.12 683.751 L1592.68 683.751 L1593.24 683.751 L1593.8 683.751 L1594.36 683.751 L1594.92 683.751 L1595.47 683.751 L1596.03 683.751 L1596.59 683.751 L1597.15 683.751 L1597.71 683.751 L1598.27 683.751 L1598.83 683.751 L1599.39 683.751 L1599.95 683.751 L1600.51 683.751 L1601.07 683.751 L1601.63 683.751 L1602.19 683.751 L1602.74 683.751 L1603.3 683.751 L1603.86 683.751 L1604.42 683.751 L1604.98 683.751 L1605.54 683.751 L1606.1 683.751 L1606.66 683.751 L1607.22 683.751 L1607.78 683.751 L1608.34 683.751 L1608.9 683.751 L1609.46 683.751 L1610.02 683.751 L1610.57 683.751 L1611.13 683.751 L1611.69 683.751 L1612.25 683.751 L1612.81 683.751 L1613.37 683.751 L1613.93 683.751 L1614.49 683.751 L1615.05 683.751 L1615.61 683.751 L1616.17 683.751 L1616.73 683.751 L1617.29 683.751 L1617.84 683.751 L1618.4 683.751 L1618.96 683.751 L1619.52 683.751 L1620.08 683.751 L1620.64 683.751 L1621.2 683.751 L1621.76 683.751 L1622.32 683.751 L1622.88 683.751 L1623.44 683.751 L1624 683.751 L1624.56 683.751 L1625.11 683.751 L1625.67 683.751 L1626.23 683.751 L1626.79 683.751 L1627.35 683.751 L1627.91 683.751 L1628.47 683.751 L1629.03 683.751 L1629.59 683.751 L1630.15 683.751 L1630.71 683.751 L1631.27 683.751 L1631.83 683.751 L1632.39 683.751 L1632.94 683.751 L1633.5 683.751 L1634.06 683.751 L1634.62 683.751 L1635.18 683.751 L1635.74 683.751 L1636.3 683.751 L1636.86 683.751 L1637.42 683.751 L1637.98 683.751 L1638.54 683.751 L1639.1 683.751 L1639.66 683.751 L1640.21 683.751 L1640.77 683.751 L1641.33 683.751 L1641.89 683.751 L1642.45 683.751 L1643.01 683.751 L1643.57 683.751 L1644.13 683.751 L1644.69 683.751 L1645.25 683.751 L1645.81 683.751 L1646.37 683.751 L1646.93 683.751 L1647.48 683.751 L1648.04 683.751 L1648.6 683.751 L1649.16 683.751 L1649.72 683.751 L1650.28 683.751 L1650.84 683.751 L1651.4 683.751 L1651.96 683.751 L1652.52 683.751 L1653.08 683.751 L1653.64 683.751 L1654.2 683.751 L1654.76 683.751 L1655.31 683.751 L1655.87 683.751 L1656.43 683.751 L1656.99 683.751 L1657.55 683.751 L1658.11 683.751 L1658.67 683.751 L1659.23 683.751 L1659.79 683.751 L1660.35 683.751 L1660.91 683.751 L1661.47 683.751 L1662.03 683.751 L1662.58 683.751 L1663.14 683.751 L1663.7 683.751 L1664.26 683.751 L1664.82 683.751 L1665.38 683.751 L1665.94 683.751 L1666.5 683.751 L1667.06 683.751 L1667.62 683.751 L1668.18 683.751 L1668.74 683.751 L1669.3 683.751 L1669.85 683.751 L1670.41 683.751 L1670.97 683.751 L1671.53 683.751 L1672.09 683.751 L1672.65 683.751 L1673.21 683.751 L1673.77 683.751 L1674.33 683.751 L1674.89 683.751 L1675.45 683.751 L1676.01 683.751 L1676.57 683.751 L1677.13 683.751 L1677.68 683.751 L1678.24 683.751 L1678.8 683.751 L1679.36 683.751 L1679.92 683.751 L1680.48 683.751 L1681.04 683.751 L1681.6 683.751 L1682.16 683.751 L1682.72 683.751 L1683.28 683.751 L1683.84 683.751 L1684.4 683.751 L1684.95 683.751 L1685.51 683.751 L1686.07 683.751 L1686.63 683.751 L1687.19 683.751 L1687.75 683.751 L1688.31 683.751 L1688.87 683.751 L1689.43 683.751 L1689.99 683.751 L1690.55 683.751 L1691.11 683.751 L1691.67 683.751 L1692.23 683.751 L1692.78 683.751 L1693.34 683.751 L1693.9 683.751 L1694.46 683.751 L1695.02 683.751 L1695.58 683.751 L1696.14 683.751 L1696.7 683.751 L1697.26 683.751 L1697.82 683.751 L1698.38 683.751 L1698.94 683.751 L1699.5 683.751 L1700.05 683.751 L1700.61 683.751 L1701.17 683.751 L1701.73 683.751 L1702.29 683.751 L1702.85 683.751 L1703.41 683.751 L1703.97 683.751 L1704.53 683.751 L1705.09 683.751 L1705.65 683.751 L1706.21 683.751 L1706.77 683.751 L1707.32 683.751 L1707.88 683.751 L1708.44 683.751 L1709 683.751 L1709.56 683.751 L1710.12 683.751 L1710.68 683.751 L1711.24 683.751 L1711.8 683.751 L1712.36 683.751 L1712.92 683.751 L1713.48 683.751 L1714.04 683.751 L1714.6 683.751 L1715.15 683.751 L1715.71 683.751 L1716.27 683.751 L1716.83 683.751 L1717.39 683.751 L1717.95 683.751 L1718.51 683.751 L1719.07 683.751 L1719.63 683.751 L1720.19 683.751 L1720.75 683.751 L1721.31 683.751 L1721.87 683.751 L1722.42 683.751 L1722.98 683.751 L1723.54 683.751 L1724.1 683.751 L1724.66 683.751 L1725.22 683.751 L1725.78 683.751 L1726.34 683.751 L1726.9 683.751 L1727.46 683.751 L1728.02 683.751 L1728.58 683.751 L1729.14 683.751 L1729.69 683.751 L1730.25 683.751 L1730.81 683.751 L1731.37 683.751 L1731.93 683.751 L1732.49 683.751 L1733.05 683.751 L1733.61 683.751 L1734.17 683.751 L1734.73 683.751 L1735.29 683.751 L1735.85 683.751 L1736.41 683.751 L1736.97 683.751 L1737.52 683.751 L1738.08 683.751 L1738.64 683.751 L1739.2 683.751 L1739.76 683.751 L1740.32 683.751 L1740.88 683.751 L1741.44 683.751 L1742 683.751 L1742.56 683.751 L1743.12 683.751 L1743.68 683.751 L1744.24 683.751 L1744.79 683.751 L1745.35 683.751 L1745.91 683.751 L1746.47 683.751 L1747.03 683.751 L1747.59 683.751 L1748.15 683.751 L1748.71 683.751 L1749.27 683.751 L1749.83 683.751 L1750.39 683.751 L1750.95 683.751 L1751.51 683.751 L1752.06 683.751 L1752.62 683.751 L1753.18 683.751 L1753.74 683.751 L1754.3 683.751 L1754.86 683.751 L1755.42 683.751 L1755.98 683.751 L1756.54 683.751 L1757.1 683.751 L1757.66 683.751 L1758.22 683.751 L1758.78 683.751 L1759.34 683.751 L1759.89 683.751 L1760.45 683.751 L1761.01 683.751 L1761.57 683.751 L1762.13 683.751 L1762.69 683.751 L1763.25 683.751 L1763.81 683.751 L1764.37 683.751 L1764.93 683.751 L1765.49 683.751 L1766.05 683.751 L1766.61 683.751 L1767.16 683.751 L1767.72 683.751 L1768.28 683.751 L1768.84 683.751 L1769.4 683.751 L1769.96 683.751 L1770.52 683.751 L1771.08 683.751 L1771.64 683.751 L1772.2 683.751 L1772.76 683.751 L1773.32 683.751 L1773.88 683.751 L1774.43 683.751 L1774.99 683.751 L1775.55 683.751 L1776.11 683.751 L1776.67 683.751 L1777.23 683.751 L1777.79 683.751 L1778.35 683.751 L1778.91 683.751 L1779.47 683.751 L1780.03 683.751 L1780.59 683.751 L1781.15 683.751 L1781.71 683.751 L1782.26 683.751 L1782.82 683.751 L1783.38 683.751 L1783.94 683.751 L1784.5 683.751 L1785.06 683.751 L1785.62 683.751 L1786.18 683.751 L1786.74 683.751 L1787.3 683.751 L1787.86 683.751 L1788.42 683.751 L1788.98 683.751 L1789.53 683.751 L1790.09 683.751 L1790.65 683.751 L1791.21 683.751 L1791.77 683.751 L1792.33 683.751 L1792.89 683.751 L1793.45 683.751 L1794.01 683.751 L1794.57 683.751 L1795.13 683.751 L1795.69 683.751 L1796.25 683.751 L1796.8 683.751 L1797.36 683.751 L1797.92 683.751 L1798.48 683.751 L1799.04 683.751 L1799.6 683.751 L1800.16 683.751 L1800.72 683.751 L1801.28 683.751 L1801.84 683.751 L1802.4 683.751 L1802.96 683.751 L1803.52 683.751 L1804.08 683.751 L1804.63 683.751 L1805.19 683.751 L1805.75 683.751 L1806.31 683.751 L1806.87 683.751 L1807.43 683.751 L1807.99 683.751 L1808.55 683.751 L1809.11 683.751 L1809.67 683.751 L1810.23 683.751 L1810.79 683.751 L1811.35 683.751 L1811.9 683.751 L1812.46 683.751 L1813.02 683.751 L1813.58 683.751 L1814.14 683.751 L1814.7 683.751 L1815.26 683.751 L1815.82 683.751 L1816.38 683.751 L1816.94 683.751 L1817.5 683.751 L1818.06 683.751 L1818.62 683.751 L1819.18 683.751 L1819.73 683.751 L1820.29 683.751 L1820.85 683.751 L1821.41 683.751 L1821.97 683.751 L1822.53 683.751 L1823.09 683.751 L1823.65 683.751 L1824.21 683.751 L1824.77 683.751 L1825.33 683.751 L1825.89 683.751 L1826.45 683.751 L1827 683.751 L1827.56 683.751 L1828.12 683.751 L1828.68 683.751 L1829.24 683.751 L1829.8 683.751 L1830.36 683.751 L1830.92 683.751 L1831.48 683.751 L1832.04 683.751 L1832.6 683.751 L1833.16 683.751 L1833.72 683.751 L1834.27 683.751 L1834.83 683.751 L1835.39 683.751 L1835.95 683.751 L1836.51 683.751 L1837.07 683.751 L1837.63 683.751 L1838.19 683.751 L1838.19 681.63 L1837.63 681.63 L1837.07 681.63 L1836.51 681.63 L1835.95 681.63 L1835.39 681.63 L1834.83 681.63 L1834.27 681.63 L1833.72 681.63 L1833.16 681.63 L1832.6 681.63 L1832.04 681.63 L1831.48 681.63 L1830.92 681.63 L1830.36 681.63 L1829.8 681.63 L1829.24 681.63 L1828.68 681.63 L1828.12 681.63 L1827.56 681.63 L1827 681.63 L1826.45 681.63 L1825.89 681.63 L1825.33 681.63 L1824.77 681.63 L1824.21 681.63 L1823.65 681.63 L1823.09 681.63 L1822.53 681.63 L1821.97 681.63 L1821.41 681.63 L1820.85 681.63 L1820.29 681.63 L1819.73 681.63 L1819.18 681.63 L1818.62 681.63 L1818.06 681.63 L1817.5 681.63 L1816.94 681.63 L1816.38 681.63 L1815.82 681.63 L1815.26 681.63 L1814.7 681.63 L1814.14 681.63 L1813.58 681.63 L1813.02 681.63 L1812.46 681.63 L1811.9 681.63 L1811.35 681.63 L1810.79 681.63 L1810.23 681.63 L1809.67 681.63 L1809.11 681.63 L1808.55 681.63 L1807.99 681.63 L1807.43 681.63 L1806.87 681.63 L1806.31 681.63 L1805.75 681.63 L1805.19 681.63 L1804.63 681.63 L1804.08 681.63 L1803.52 681.63 L1802.96 681.63 L1802.4 681.63 L1801.84 681.63 L1801.28 681.63 L1800.72 681.63 L1800.16 681.63 L1799.6 681.63 L1799.04 681.63 L1798.48 681.63 L1797.92 681.63 L1797.36 681.63 L1796.8 681.63 L1796.25 681.63 L1795.69 681.63 L1795.13 681.63 L1794.57 681.63 L1794.01 681.63 L1793.45 681.63 L1792.89 681.63 L1792.33 681.63 L1791.77 681.63 L1791.21 681.63 L1790.65 681.63 L1790.09 681.63 L1789.53 681.63 L1788.98 681.63 L1788.42 681.63 L1787.86 681.63 L1787.3 681.63 L1786.74 681.63 L1786.18 681.63 L1785.62 681.63 L1785.06 681.63 L1784.5 681.63 L1783.94 681.63 L1783.38 681.63 L1782.82 681.63 L1782.26 681.63 L1781.71 681.63 L1781.15 681.63 L1780.59 681.63 L1780.03 681.63 L1779.47 681.63 L1778.91 681.63 L1778.35 681.63 L1777.79 681.63 L1777.23 681.63 L1776.67 681.63 L1776.11 681.63 L1775.55 681.63 L1774.99 681.63 L1774.43 681.63 L1773.88 681.63 L1773.32 681.63 L1772.76 681.63 L1772.2 681.63 L1771.64 681.63 L1771.08 681.63 L1770.52 681.63 L1769.96 681.63 L1769.4 681.63 L1768.84 681.63 L1768.28 681.63 L1767.72 681.63 L1767.16 681.63 L1766.61 681.63 L1766.05 681.63 L1765.49 681.63 L1764.93 681.63 L1764.37 681.63 L1763.81 681.63 L1763.25 681.63 L1762.69 681.63 L1762.13 681.63 L1761.57 681.63 L1761.01 681.63 L1760.45 681.63 L1759.89 681.63 L1759.34 681.63 L1758.78 681.63 L1758.22 681.63 L1757.66 681.63 L1757.1 681.63 L1756.54 681.63 L1755.98 681.63 L1755.42 681.63 L1754.86 681.63 L1754.3 681.63 L1753.74 681.63 L1753.18 681.63 L1752.62 681.63 L1752.06 681.63 L1751.51 681.63 L1750.95 681.63 L1750.39 681.63 L1749.83 681.63 L1749.27 681.63 L1748.71 681.63 L1748.15 681.63 L1747.59 681.63 L1747.03 681.63 L1746.47 681.63 L1745.91 681.63 L1745.35 681.63 L1744.79 681.63 L1744.24 681.63 L1743.68 681.63 L1743.12 681.63 L1742.56 681.63 L1742 681.63 L1741.44 681.63 L1740.88 681.63 L1740.32 681.63 L1739.76 681.63 L1739.2 681.63 L1738.64 681.63 L1738.08 681.63 L1737.52 681.63 L1736.97 681.63 L1736.41 681.63 L1735.85 681.63 L1735.29 681.63 L1734.73 681.63 L1734.17 681.63 L1733.61 681.63 L1733.05 681.63 L1732.49 681.63 L1731.93 681.63 L1731.37 681.63 L1730.81 681.63 L1730.25 681.63 L1729.69 681.63 L1729.14 681.63 L1728.58 681.63 L1728.02 681.63 L1727.46 681.63 L1726.9 681.63 L1726.34 681.63 L1725.78 681.63 L1725.22 681.63 L1724.66 681.63 L1724.1 681.63 L1723.54 681.63 L1722.98 681.63 L1722.42 681.63 L1721.87 681.63 L1721.31 681.63 L1720.75 681.63 L1720.19 681.63 L1719.63 681.63 L1719.07 681.63 L1718.51 681.63 L1717.95 681.63 L1717.39 681.63 L1716.83 681.63 L1716.27 681.63 L1715.71 681.63 L1715.15 681.63 L1714.6 681.63 L1714.04 681.63 L1713.48 681.63 L1712.92 681.63 L1712.36 681.63 L1711.8 681.63 L1711.24 681.63 L1710.68 681.63 L1710.12 681.63 L1709.56 681.63 L1709 681.63 L1708.44 681.63 L1707.88 681.63 L1707.32 681.63 L1706.77 681.63 L1706.21 681.63 L1705.65 681.63 L1705.09 681.63 L1704.53 681.63 L1703.97 681.63 L1703.41 681.63 L1702.85 681.63 L1702.29 681.63 L1701.73 681.63 L1701.17 681.63 L1700.61 681.63 L1700.05 681.63 L1699.5 681.63 L1698.94 681.63 L1698.38 681.63 L1697.82 681.63 L1697.26 681.63 L1696.7 681.63 L1696.14 681.63 L1695.58 681.63 L1695.02 681.63 L1694.46 681.63 L1693.9 681.63 L1693.34 681.63 L1692.78 681.63 L1692.23 681.63 L1691.67 681.63 L1691.11 681.63 L1690.55 681.63 L1689.99 681.63 L1689.43 681.63 L1688.87 681.63 L1688.31 681.63 L1687.75 681.63 L1687.19 681.63 L1686.63 681.63 L1686.07 681.63 L1685.51 681.63 L1684.95 681.63 L1684.4 681.63 L1683.84 681.63 L1683.28 681.63 L1682.72 681.63 L1682.16 681.63 L1681.6 681.63 L1681.04 681.63 L1680.48 681.63 L1679.92 681.63 L1679.36 681.63 L1678.8 681.63 L1678.24 681.63 L1677.68 681.63 L1677.13 681.63 L1676.57 681.63 L1676.01 681.63 L1675.45 681.63 L1674.89 681.63 L1674.33 681.63 L1673.77 681.63 L1673.21 681.63 L1672.65 681.63 L1672.09 681.63 L1671.53 681.63 L1670.97 681.63 L1670.41 681.63 L1669.85 681.63 L1669.3 681.63 L1668.74 681.63 L1668.18 681.63 L1667.62 681.63 L1667.06 681.63 L1666.5 681.63 L1665.94 681.63 L1665.38 681.63 L1664.82 681.63 L1664.26 681.63 L1663.7 681.63 L1663.14 681.63 L1662.58 681.63 L1662.03 681.63 L1661.47 681.63 L1660.91 681.63 L1660.35 681.63 L1659.79 681.63 L1659.23 681.63 L1658.67 681.63 L1658.11 681.63 L1657.55 681.63 L1656.99 681.63 L1656.43 681.63 L1655.87 681.63 L1655.31 681.63 L1654.76 681.63 L1654.2 681.63 L1653.64 681.63 L1653.08 681.63 L1652.52 681.63 L1651.96 681.63 L1651.4 681.63 L1650.84 681.63 L1650.28 681.63 L1649.72 681.63 L1649.16 681.63 L1648.6 681.63 L1648.04 681.63 L1647.48 681.63 L1646.93 681.63 L1646.37 681.63 L1645.81 681.63 L1645.25 681.63 L1644.69 681.63 L1644.13 681.63 L1643.57 681.63 L1643.01 681.63 L1642.45 681.63 L1641.89 681.63 L1641.33 681.63 L1640.77 681.63 L1640.21 681.63 L1639.66 681.63 L1639.1 681.63 L1638.54 681.63 L1637.98 681.63 L1637.42 681.63 L1636.86 681.63 L1636.3 681.63 L1635.74 681.63 L1635.18 681.63 L1634.62 681.63 L1634.06 681.63 L1633.5 681.63 L1632.94 681.63 L1632.39 681.63 L1631.83 681.63 L1631.27 681.63 L1630.71 681.63 L1630.15 681.63 L1629.59 681.63 L1629.03 681.63 L1628.47 681.63 L1627.91 681.63 L1627.35 681.63 L1626.79 681.63 L1626.23 681.63 L1625.67 681.63 L1625.11 681.63 L1624.56 681.63 L1624 681.63 L1623.44 681.63 L1622.88 681.63 L1622.32 681.63 L1621.76 681.63 L1621.2 681.63 L1620.64 681.63 L1620.08 681.63 L1619.52 681.63 L1618.96 681.63 L1618.4 681.63 L1617.84 681.63 L1617.29 681.63 L1616.73 681.63 L1616.17 681.63 L1615.61 681.63 L1615.05 681.63 L1614.49 681.63 L1613.93 681.63 L1613.37 681.63 L1612.81 681.63 L1612.25 681.63 L1611.69 681.63 L1611.13 681.63 L1610.57 681.63 L1610.02 681.63 L1609.46 681.63 L1608.9 681.63 L1608.34 681.63 L1607.78 681.63 L1607.22 681.63 L1606.66 681.63 L1606.1 681.63 L1605.54 681.63 L1604.98 681.63 L1604.42 681.63 L1603.86 681.63 L1603.3 681.63 L1602.74 681.63 L1602.19 681.63 L1601.63 681.63 L1601.07 681.63 L1600.51 681.63 L1599.95 681.63 L1599.39 681.63 L1598.83 681.63 L1598.27 681.63 L1597.71 681.63 L1597.15 681.63 L1596.59 681.63 L1596.03 681.63 L1595.47 681.63 L1594.92 681.63 L1594.36 681.63 L1593.8 681.63 L1593.24 681.63 L1592.68 681.63 L1592.12 681.63 L1591.56 681.63 L1591 681.63 L1590.44 681.63 L1589.88 681.63 L1589.32 681.63 L1588.76 681.63 L1588.2 681.63 L1587.65 681.63 L1587.09 681.63 L1586.53 681.63 L1585.97 681.63 L1585.41 681.63 L1584.85 681.63 L1584.29 681.63 L1583.73 681.63 L1583.17 681.63 L1582.61 681.63 L1582.05 681.63 L1581.49 681.63 L1580.93 681.63 L1580.37 681.63 L1579.82 681.63 L1579.26 681.63 L1578.7 681.63 L1578.14 681.63 L1577.58 681.63 L1577.02 681.63 L1576.46 681.63 L1575.9 681.63 L1575.34 681.63 L1574.78 681.63 L1574.22 681.63 L1573.66 681.63 L1573.1 681.63 L1572.55 681.63 L1571.99 681.63 L1571.43 681.63 L1570.87 681.63 L1570.31 681.63 L1569.75 681.63 L1569.19 681.63 L1568.63 681.63 L1568.07 681.63 L1567.51 681.63 L1566.95 681.63 L1566.39 681.63 L1565.83 681.63 L1565.28 681.63 L1564.72 681.63 L1564.16 681.63 L1563.6 681.63 L1563.04 681.63 L1562.48 681.63 L1561.92 681.63 L1561.36 681.63 L1560.8 681.63 L1560.24 681.63 L1559.68 681.63 L1559.12 681.63 L1558.56 681.63 L1558 681.63 L1557.45 681.63 L1556.89 681.63 L1556.33 681.63 L1555.77 681.63 L1555.21 681.63 L1554.65 681.63 L1554.09 681.63 L1553.53 681.63 L1552.97 681.63 L1552.41 681.63 L1551.85 681.63 L1551.29 681.63 L1550.73 681.63 L1550.18 681.63 L1549.62 681.63 L1549.06 681.63 L1548.5 681.63 L1547.94 681.63 L1547.38 681.63 L1546.82 681.63 L1546.26 681.63 L1545.7 681.63 L1545.14 681.63 L1544.58 681.63 L1544.02 681.63 L1543.46 681.63 L1542.9 681.63 L1542.35 681.63 L1541.79 681.63 L1541.23 681.63 L1540.67 681.63 L1540.11 681.63 L1539.55 681.63 L1538.99 681.63 L1538.43 681.63 L1537.87 681.63 L1537.31 681.63 L1536.75 681.63 L1536.19 681.63 L1535.63 681.63 L1535.08 681.63 L1534.52 681.63 L1533.96 681.63 L1533.4 681.63 L1532.84 681.63 L1532.28 681.63 L1531.72 681.63 L1531.16 681.63 L1530.6 681.63 L1530.04 681.63 L1529.48 681.63 L1528.92 681.63 L1528.36 681.63 L1527.81 681.63 L1527.25 681.63 L1526.69 681.63 L1526.13 681.63 L1525.57 681.63 L1525.01 681.63 L1524.45 681.63 L1523.89 681.63 L1523.33 681.63 L1522.77 681.63 L1522.21 681.63 L1521.65 681.63 L1521.09 681.63 L1520.53 681.63 L1519.98 681.63 L1519.42 681.63 L1518.86 681.63 L1518.3 681.63 L1517.74 681.63 L1517.18 681.63 L1516.62 681.63 L1516.06 681.63 L1515.5 681.63 L1514.94 681.63 L1514.38 681.63 L1513.82 681.63 L1513.26 681.63 L1512.71 681.63 L1512.15 681.63 L1511.59 681.63 L1511.03 681.63 L1510.47 681.63 L1509.91 681.63 L1509.35 681.63 L1508.79 681.63 L1508.23 681.63 L1507.67 681.63 L1507.11 681.63 L1506.55 681.63 L1505.99 681.63 L1505.44 681.63 L1504.88 681.63 L1504.32 681.63 L1503.76 681.63 L1503.2 681.63 L1502.64 681.63 L1502.08 681.63 L1501.52 681.63 L1500.96 681.63 L1500.4 681.63 L1499.84 681.63 L1499.28 681.63 L1498.72 681.63 L1498.16 681.63 L1497.61 681.63 L1497.05 681.63 L1496.49 681.63 L1495.93 681.63 L1495.37 681.63 L1494.81 681.63 L1494.25 681.63 L1493.69 681.63 L1493.13 681.63 L1492.57 681.63 L1492.01 681.63 L1491.45 681.63 L1490.89 681.63 L1490.34 681.63 L1489.78 681.63 L1489.22 681.63 L1488.66 681.63 L1488.1 681.63 L1487.54 681.63 L1486.98 681.63 L1486.42 681.63 L1485.86 681.63 L1485.3 681.63 L1484.74 681.63 L1484.18 681.63 L1483.62 681.63 L1483.07 681.63 L1482.51 681.63 L1481.95 681.63 L1481.39 681.63 L1480.83 681.63 L1480.27 681.63 L1479.71 681.63 L1479.15 681.63 L1478.59 681.63 L1478.03 681.63 L1477.47 681.63 L1476.91 681.63 L1476.35 681.63 L1475.79 681.63 L1475.24 681.63 L1474.68 681.63 L1474.12 681.63 L1473.56 681.63 L1473 681.63 L1472.44 681.63 L1471.88 681.63 L1471.32 681.63 L1470.76 681.63 L1470.2 681.63 L1469.64 681.63 L1469.08 681.63 L1468.52 681.63 L1467.97 681.63 L1467.41 681.63 L1466.85 681.63 L1466.29 681.63 L1465.73 681.63 L1465.17 681.63 L1464.61 681.63 L1464.05 681.63 L1463.49 681.63 L1462.93 681.63 L1462.37 681.63 L1461.81 681.63 L1461.25 681.63 L1460.7 681.63 L1460.14 681.63 L1459.58 681.63 L1459.02 681.63 L1458.46 681.63 L1457.9 681.63 L1457.34 681.63 L1456.78 681.63 L1456.22 681.63 L1455.66 681.63 L1455.1 681.63 L1454.54 681.63 L1453.98 681.63 L1453.42 681.63 L1452.87 681.63 L1452.31 681.63 L1451.75 681.63 L1451.19 681.63 L1450.63 681.63 L1450.07 681.63 L1449.51 681.63 L1448.95 681.63 L1448.39 681.63 L1447.83 681.63 L1447.27 681.63 L1446.71 681.63 L1446.15 681.63 L1445.6 681.63 L1445.04 681.63 L1444.48 681.63 L1443.92 681.63 L1443.36 681.63 L1442.8 681.63 L1442.24 681.63 L1441.68 681.63 L1441.12 681.63 L1440.56 681.63 L1440 681.63 L1439.44 681.63 L1438.88 681.63 L1438.33 681.63 L1437.77 681.63 L1437.21 681.63 L1436.65 681.63 L1436.09 681.63 L1435.53 681.63 L1434.97 681.63 L1434.41 681.63 L1433.85 681.63 L1433.29 681.63 L1432.73 681.63 L1432.17 681.63 L1431.61 681.63 L1431.05 681.63 L1430.5 681.63 L1429.94 681.63 L1429.38 681.63 L1428.82 681.63 L1428.26 681.63 L1427.7 681.63 L1427.14 681.63 L1426.58 681.63 L1426.02 681.63 L1425.46 681.63 L1424.9 681.63 L1424.34 681.63 L1423.78 681.63 L1423.23 681.63 L1422.67 681.63 L1422.11 681.63 L1421.55 681.63 L1420.99 681.63 L1420.43 681.63 L1419.87 681.63 L1419.31 681.63 L1418.75 681.63 L1418.19 681.63 L1417.63 681.63 L1417.07 681.63 L1416.51 681.63 L1415.95 681.63 L1415.4 681.63 L1414.84 681.63 L1414.28 681.63 L1413.72 681.63 L1413.16 681.63 L1412.6 681.63 L1412.04 681.63 L1411.48 681.63 L1410.92 681.63 L1410.36 681.63 L1409.8 681.63 L1409.24 681.63 L1408.68 681.63 L1408.13 681.63 L1407.57 681.63 L1407.01 681.63 L1406.45 681.63 L1405.89 681.63 L1405.33 681.63 L1404.77 681.63 L1404.21 681.63 L1403.65 681.63 L1403.09 681.63 L1402.53 681.63 L1401.97 681.63 L1401.41 681.63 L1400.86 681.63 L1400.3 681.63 L1399.74 681.63 L1399.18 681.63 L1398.62 681.63 L1398.06 681.63 L1397.5 681.63 L1396.94 681.63 L1396.38 681.63 L1395.82 681.63 L1395.26 681.63 L1394.7 681.63 L1394.14 681.63 L1393.58 681.63 L1393.03 681.63 L1392.47 681.63 L1391.91 681.63 L1391.35 681.63 L1390.79 681.63 L1390.23 681.63 L1389.67 681.63 L1389.11 681.63 L1388.55 681.63 L1387.99 681.63 L1387.43 681.63 L1386.87 681.63 L1386.31 681.63 L1385.76 681.63 L1385.2 681.63 L1384.64 681.63 L1384.08 681.63 L1383.52 681.63 L1382.96 681.63 L1382.4 681.63 L1381.84 681.63 L1381.28 681.63 L1380.72 681.63 L1380.16 681.63 L1379.6 681.63 L1379.04 681.63 L1378.49 681.63 L1377.93 681.63 L1377.37 681.63 L1376.81 681.63 L1376.25 681.63 L1375.69 681.63 L1375.13 681.63 L1374.57 681.63 L1374.01 681.63 L1373.45 681.63 L1372.89 681.63 L1372.33 681.63 L1371.77 681.63 L1371.21 681.63 L1370.66 681.63 L1370.1 681.63 L1369.54 681.63 L1368.98 681.63 L1368.42 681.63 L1367.86 681.63 L1367.3 681.63 L1366.74 681.63 L1366.18 681.63 L1365.62 681.63 L1365.06 681.63 L1364.5 681.63 L1363.94 681.63 L1363.39 681.63 L1362.83 681.63 L1362.27 681.63 L1361.71 681.63 L1361.15 681.63 L1360.59 681.63 L1360.03 681.63 L1359.47 681.63 L1358.91 681.63 L1358.35 681.63 L1357.79 681.63 L1357.23 681.63 L1356.67 681.63 L1356.12 681.63 L1355.56 681.63 L1355 681.63 L1354.44 681.63 L1353.88 681.63 L1353.32 681.63 L1352.76 681.63 L1352.2 681.63 L1351.64 681.63 L1351.08 681.63 L1350.52 681.63 L1349.96 681.63 L1349.4 681.63 L1348.84 681.63 L1348.29 681.63 L1347.73 681.63 L1347.17 681.63 L1346.61 681.63 L1346.05 681.63 L1345.49 681.63 L1344.93 681.63 L1344.37 681.63 L1343.81 681.63 L1343.25 681.63 L1342.69 681.63 L1342.13 681.63 L1341.57 681.63 L1341.02 681.63 L1340.46 681.63 L1339.9 681.63 L1339.34 681.63 L1338.78 681.63 L1338.22 681.63 L1337.66 681.63 L1337.1 681.63 L1336.54 681.63 L1335.98 681.63 L1335.42 681.63 L1334.86 681.63 L1334.3 681.63 L1333.75 681.63 L1333.19 681.63 L1332.63 681.63 L1332.07 681.63 L1331.51 681.63 L1330.95 681.63 L1330.39 681.63 L1329.83 681.63 L1329.27 681.63 L1328.71 681.63 L1328.15 681.63 L1327.59 681.63 L1327.03 681.63 L1326.47 681.63 L1325.92 681.63 L1325.36 681.63 L1324.8 681.63 L1324.24 681.63 L1323.68 681.63 L1323.12 681.63 L1322.56 681.63 L1322 681.63 L1321.44 681.63 L1320.88 681.63 L1320.32 681.63 L1319.76 681.63 L1319.2 681.63 L1318.65 681.63 L1318.09 681.63 L1317.53 681.63 L1316.97 681.63 L1316.41 681.63 L1315.85 681.63 L1315.29 681.63 L1314.73 681.63 L1314.17 681.63 L1313.61 681.63 L1313.05 681.63 L1312.49 681.63 L1311.93 681.63 L1311.38 681.63 L1310.82 681.63 L1310.26 681.63 L1309.7 681.63 L1309.14 681.63 L1308.58 681.63 L1308.02 681.63 L1307.46 681.63 L1306.9 681.63 L1306.34 681.63 L1305.78 681.63 L1305.22 681.63 L1304.66 681.63 L1304.1 681.63 L1303.55 681.63 L1302.99 681.63 L1302.43 681.63 L1301.87 681.63 L1301.31 681.63 L1300.75 681.63 L1300.19 681.63 L1299.63 681.63 L1299.07 681.63 L1298.51 681.63 L1297.95 681.63 L1297.39 681.63 L1296.83 681.63 L1296.28 681.63 L1295.72 681.63 L1295.16 681.63 L1294.6 681.63 L1294.04 681.63 L1293.48 681.63 L1292.92 681.63 L1292.36 681.63 L1291.8 681.63 L1291.24 681.63 L1290.68 681.63 L1290.12 681.63 L1289.56 681.63 L1289 681.63 L1288.45 681.63 L1287.89 681.63 L1287.33 681.63 L1286.77 681.63 L1286.21 681.63 L1285.65 681.63 L1285.09 681.63 L1284.53 681.63 L1283.97 681.63 L1283.41 681.63 L1282.85 681.63 L1282.29 681.63 L1281.73 681.63 L1281.18 681.63 L1280.62 681.63 L1280.06 681.63 L1279.5 681.63 L1278.94 681.63 L1278.38 681.63 L1277.82 681.63 L1277.26 681.63 L1276.7 681.63 L1276.14 681.63 L1275.58 681.63 L1275.02 681.63 L1274.46 681.63 L1273.91 681.63 L1273.35 681.63 L1272.79 681.63 L1272.23 681.63 L1271.67 681.63 L1271.11 681.63 L1270.55 681.63 L1269.99 681.63 L1269.43 681.63 L1268.87 681.63 L1268.31 681.63 L1267.75 681.63 L1267.19 681.63 L1266.63 681.63 L1266.08 681.63 L1265.52 681.63 L1264.96 681.63 L1264.4 681.63 L1263.84 681.63 L1263.28 681.63 L1262.72 681.63 L1262.16 681.63 L1261.6 681.63 L1261.04 681.63 L1260.48 681.63 L1259.92 681.63 L1259.36 681.63 L1258.81 681.63 L1258.25 681.63 L1257.69 681.63 L1257.13 681.63 L1256.57 681.63 L1256.01 681.63 L1255.45 681.63 L1254.89 681.63 L1254.33 681.63 L1253.77 681.63 L1253.21 681.63 L1252.65 681.63 L1252.09 681.63 L1251.54 681.63 L1250.98 681.63 L1250.42 681.63 L1249.86 681.63 L1249.3 681.63 L1248.74 681.63 L1248.18 681.63 L1247.62 681.63 L1247.06 681.63 L1246.5 681.63 L1245.94 681.63 L1245.38 681.63 L1244.82 681.63 L1244.26 681.63 L1243.71 681.63 L1243.15 681.63 L1242.59 681.63 L1242.03 681.63 L1241.47 681.63 L1240.91 681.63 L1240.35 681.63 L1239.79 681.63 L1239.23 681.63 L1238.67 681.63 L1238.11 681.63 L1237.55 681.63 L1236.99 681.63 L1236.44 681.63 L1235.88 681.63 L1235.32 681.63 L1234.76 681.63 L1234.2 681.63 L1233.64 681.63 L1233.08 681.63 L1232.52 681.63 L1231.96 681.63 L1231.4 681.63 L1230.84 681.63 L1230.28 681.63 L1229.72 681.63 L1229.17 681.63 L1228.61 681.63 L1228.05 681.63 L1227.49 681.63 L1226.93 681.63 L1226.37 681.63 L1225.81 681.63 L1225.25 681.63 L1224.69 681.63 L1224.13 681.63 L1223.57 681.63 L1223.01 681.63 L1222.45 681.63 L1221.89 681.63 L1221.34 681.63 L1220.78 681.63 L1220.22 681.63 L1219.66 681.63 L1219.1 681.63 L1218.54 681.63 L1217.98 681.63 L1217.42 681.63 L1216.86 681.63 L1216.3 681.63 L1215.74 681.63 L1215.18 681.63 L1214.62 681.63 L1214.07 681.63 L1213.51 681.63 L1212.95 681.63 L1212.39 681.63 L1211.83 681.63 L1211.27 681.63 L1210.71 681.63 L1210.15 681.63 L1209.59 681.63 L1209.03 681.63 L1208.47 681.63 L1207.91 681.63 L1207.35 681.63 L1206.8 681.63 L1206.24 681.63 L1205.68 681.63 L1205.12 681.63 L1204.56 681.63 L1204 681.63 L1203.44 681.63 L1202.88 681.63 L1202.32 681.63 L1201.76 681.63 L1201.2 681.63 L1200.64 681.63 L1200.08 681.63 L1199.52 681.63 L1198.97 681.63 L1198.41 681.63 L1197.85 681.63 L1197.29 681.63 L1196.73 681.63 L1196.17 681.63 L1195.61 681.63 L1195.05 681.63 L1194.49 681.63 L1193.93 681.63 L1193.37 681.63 L1192.81 681.63 L1192.25 681.63 L1191.7 681.63 L1191.14 681.63 L1190.58 681.63 L1190.02 681.63 L1189.46 681.63 L1188.9 681.63 L1188.34 681.63 L1187.78 681.63 L1187.22 681.63 L1186.66 681.63 L1186.1 681.63 L1185.54 681.63 L1184.98 681.63 L1184.43 681.63 L1183.87 681.63 L1183.31 681.63 L1182.75 681.63 L1182.19 681.63 L1181.63 681.63 L1181.07 681.63 L1180.51 681.63 L1179.95 681.63 L1179.39 681.63 L1178.83 681.63 L1178.27 681.63 L1177.71 681.63 L1177.15 681.63 L1176.6 681.63 L1176.04 681.63 L1175.48 681.63 L1174.92 681.63 L1174.36 681.63 L1173.8 681.63 L1173.24 681.63 L1172.68 681.63 L1172.12 681.63 L1171.56 681.63 L1171 681.63 L1170.44 681.63 L1169.88 681.63 L1169.33 681.63 L1168.77 681.63 L1168.21 681.63 L1167.65 681.63 L1167.09 681.63 L1166.53 681.63 L1165.97 681.63 L1165.41 681.63 L1164.85 681.63 L1164.29 681.63 L1163.73 681.63 L1163.17 681.63 L1162.61 681.63 L1162.05 681.63 L1161.5 681.63 L1160.94 681.63 L1160.38 681.63 L1159.82 681.63 L1159.26 681.63 L1158.7 681.63 L1158.14 681.63 L1157.58 681.63 L1157.02 681.63 L1156.46 681.63 L1155.9 681.63 L1155.34 681.63 L1154.78 681.63 L1154.23 681.63 L1153.67 681.63 L1153.11 681.63 L1152.55 681.63 L1151.99 681.63 L1151.43 681.63 L1150.87 681.63 L1150.31 681.63 L1149.75 681.63 L1149.19 681.63 L1148.63 681.63 L1148.07 681.63 L1147.51 681.63 L1146.96 681.63 L1146.4 681.63 L1145.84 681.63 L1145.28 681.63 L1144.72 681.63 L1144.16 681.63 L1143.6 681.63 L1143.04 681.63 L1142.48 681.63 L1141.92 681.63 L1141.36 681.63 L1140.8 681.63 L1140.24 681.63 L1139.68 681.63 L1139.13 681.63 L1138.57 681.63 L1138.01 681.63 L1137.45 681.63 L1136.89 681.63 L1136.33 681.63 L1135.77 681.63 L1135.21 681.63 L1134.65 681.63 L1134.09 681.63 L1133.53 681.63 L1132.97 681.63 L1132.41 681.63 L1131.86 681.63 L1131.3 681.63 L1130.74 681.63 L1130.18 681.63 L1129.62 681.63 L1129.06 681.63 L1128.5 681.63 L1127.94 681.63 L1127.38 681.63 L1126.82 681.63 L1126.26 681.63 L1125.7 681.63 L1125.14 681.63 L1124.59 681.63 L1124.03 681.63 L1123.47 681.63 L1122.91 681.63 L1122.35 681.63 L1121.79 681.63 L1121.23 681.63 L1120.67 681.63 L1120.11 681.63 L1119.55 681.63 L1118.99 681.63 L1118.43 681.63 L1117.87 681.63 L1117.31 681.63 L1116.76 681.63 L1116.2 681.63 L1115.64 681.63 L1115.08 681.63 L1114.52 681.63 L1113.96 681.63 L1113.4 681.63 L1112.84 681.63 L1112.28 681.63 L1111.72 681.63 L1111.16 681.63 L1110.6 681.63 L1110.04 681.63 L1109.49 681.63 L1108.93 681.63 L1108.37 681.63 L1107.81 681.63 L1107.25 681.63 L1106.69 681.63 L1106.13 681.63 L1105.57 681.63 L1105.01 681.63 L1104.45 681.63 L1103.89 681.63 L1103.33 681.63 L1102.77 681.63 L1102.22 681.63 L1101.66 681.63 L1101.1 681.63 L1100.54 681.63 L1099.98 681.63 L1099.42 681.63 L1098.86 681.63 L1098.3 681.63 L1097.74 681.63 L1097.18 681.63 L1096.62 681.63 L1096.06 681.63 L1095.5 681.63 L1094.94 681.63 L1094.39 681.63 L1093.83 681.63 L1093.27 681.63 L1092.71 681.63 L1092.15 681.63 L1091.59 681.63 L1091.03 681.63 L1090.47 681.63 L1089.91 681.63 L1089.35 681.63 L1088.79 681.63 L1088.23 681.63 L1087.67 681.63 L1087.12 681.63 L1086.56 681.63 L1086 681.63 L1085.44 681.63 L1084.88 681.63 L1084.32 681.63 L1083.76 681.63 L1083.2 681.63 L1082.64 681.63 L1082.08 681.63 L1081.52 681.63 L1080.96 681.63 L1080.4 681.63 L1079.85 681.63 L1079.29 681.63 L1078.73 681.63 L1078.17 681.63 L1077.61 681.63 L1077.05 681.63 L1076.49 681.63 L1075.93 681.63 L1075.37 681.63 L1074.81 681.63 L1074.25 681.63 L1073.69 681.63 L1073.13 681.63 L1072.57 681.63 L1072.02 681.63 L1071.46 681.63 L1070.9 681.63 L1070.34 681.63 L1069.78 681.63 L1069.22 681.63 L1068.66 681.63 L1068.1 681.63 L1067.54 681.63 L1066.98 681.63 L1066.42 681.63 L1065.86 681.63 L1065.3 681.63 L1064.75 681.63 L1064.19 681.63 L1063.63 681.63 L1063.07 681.63 L1062.51 681.63 L1061.95 681.63 L1061.39 681.63 L1060.83 681.63 L1060.27 681.63 L1059.71 681.63 L1059.15 681.63 L1058.59 681.63 L1058.03 681.63 L1057.48 681.63 L1056.92 681.63 L1056.36 681.63 L1055.8 681.63 L1055.24 681.63 L1054.68 681.63 L1054.12 681.63 L1053.56 681.63 L1053 681.63 L1052.44 681.63 L1051.88 681.63 L1051.32 681.63 L1050.76 681.63 L1050.2 681.63 L1049.65 681.63 L1049.09 681.63 L1048.53 681.63 L1047.97 681.63 L1047.41 681.63 L1046.85 681.63 L1046.29 681.63 L1045.73 681.63 L1045.17 681.63 L1044.61 681.63 L1044.05 681.63 L1043.49 681.63 L1042.93 681.63 L1042.38 681.63 L1041.82 681.63 L1041.26 681.63 L1040.7 681.63 L1040.14 681.63 L1039.58 681.63 L1039.02 681.63 L1038.46 681.63 L1037.9 681.63 L1037.34 681.63 L1036.78 681.63 L1036.22 681.63 L1035.66 681.63 L1035.1 681.63 L1034.55 681.63 L1033.99 681.63 L1033.43 681.63 L1032.87 681.63 L1032.31 681.63 L1031.75 681.63 L1031.19 681.63 L1030.63 681.63 L1030.07 681.63 L1029.51 681.63 L1028.95 681.63 L1028.39 681.63 L1027.83 681.63 L1027.28 681.63 L1026.72 681.63 L1026.16 681.63 L1025.6 681.63 L1025.04 681.63 L1024.48 681.63 L1023.92 681.63 L1023.36 681.63 L1022.8 681.63 L1022.24 681.63 L1021.68 681.63 L1021.12 681.63 L1020.56 681.63 L1020.01 681.63 L1019.45 681.63 L1018.89 681.63 L1018.33 681.63 L1017.77 681.63 L1017.21 681.63 L1016.65 681.63 L1016.09 681.63 L1015.53 681.63 L1014.97 681.63 L1014.41 681.63 L1013.85 681.63 L1013.29 681.63 L1012.73 681.63 L1012.18 681.63 L1011.62 681.63 L1011.06 681.63 L1010.5 681.63 L1009.94 681.63 L1009.38 681.63 L1008.82 681.63 L1008.26 681.63 L1007.7 681.63 L1007.14 681.63 L1006.58 681.63 L1006.02 681.63 L1005.46 681.63 L1004.91 681.63 L1004.35 681.63 L1003.79 681.63 L1003.23 681.63 L1002.67 681.63 L1002.11 681.63 L1001.55 681.63 L1000.99 681.63 L1000.43 681.63 L999.872 681.63 L999.313 681.63 L998.754 681.63 L998.194 681.63 L997.635 681.63 L997.076 681.63 L996.517 681.63 L995.957 681.63 L995.398 681.63 L994.839 681.63 L994.28 681.63 L993.72 681.63 L993.161 681.63 L992.602 681.63 L992.043 681.63 L991.483 681.63 L990.924 681.63 L990.365 681.63 L989.806 681.63 L989.246 681.63 L988.687 681.63 L988.128 681.63 L987.569 681.63 L987.009 681.63 L986.45 681.63 L985.891 681.63 L985.332 681.63 L984.772 681.63 L984.213 681.63 L983.654 681.63 L983.095 681.63 L982.535 681.63 L981.976 681.63 L981.417 681.63 L980.858 681.63 L980.298 681.63 L979.739 681.63 L979.18 681.63 L978.621 681.63 L978.061 681.63 L977.502 681.63 L976.943 681.63 L976.384 681.63 L975.824 681.63 L975.265 681.63 L974.706 681.63 L974.147 681.63 L973.587 681.63 L973.028 681.63 L972.469 681.63 L971.91 681.63 L971.35 681.63 L970.791 681.63 L970.232 681.63 L969.673 681.63 L969.113 681.63 L968.554 681.63 L967.995 681.63 L967.436 681.63 L966.876 681.63 L966.317 681.63 L965.758 681.63 L965.199 681.63 L964.639 681.63 L964.08 681.63 L963.521 681.63 L962.962 681.63 L962.402 681.63 L961.843 681.63 L961.284 681.63 L960.725 681.63 L960.165 681.63 L959.606 681.63 L959.047 681.63 L958.488 681.63 L957.928 681.63 L957.369 681.63 L956.81 681.63 L956.251 681.63 L955.691 681.63 L955.132 681.63 L954.573 681.63 L954.014 681.63 L953.454 681.63 L952.895 681.63 L952.336 681.63 L951.777 681.63 L951.217 681.63 L950.658 681.63 L950.099 681.63 L949.54 681.63 L948.98 681.63 L948.421 681.63 L947.862 681.63 L947.303 681.63 L946.743 681.63 L946.184 681.63 L945.625 681.63 L945.066 681.63 L944.506 681.63 L943.947 681.63 L943.388 681.63 L942.829 681.63 L942.269 681.63 L941.71 681.63 L941.151 681.63 L940.592 681.63 L940.032 681.63 L939.473 681.63 L938.914 681.63 L938.355 681.63 L937.795 681.63 L937.236 681.63 L936.677 681.63 L936.118 681.63 L935.558 681.63 L934.999 681.63 L934.44 681.63 L933.881 681.63 L933.321 681.63 L932.762 681.63 L932.203 681.63 L931.644 681.63 L931.084 681.63 L930.525 681.63 L929.966 681.63 L929.406 681.63 L928.847 681.63 L928.288 681.63 L927.729 681.63 L927.169 681.63 L926.61 681.63 L926.051 681.63 L925.492 681.63 L924.932 681.63 L924.373 681.63 L923.814 681.63 L923.255 681.63 L922.695 681.63 L922.136 681.63 L921.577 681.63 L921.018 681.63 L920.458 681.63 L919.899 681.63 L919.34 681.63 L918.781 681.63 L918.221 681.63 L917.662 681.63 L917.103 681.63 L916.544 681.63 L915.984 681.63 L915.425 681.63 L914.866 681.63 L914.307 681.63 L913.747 681.63 L913.188 681.63 L912.629 681.63 L912.07 681.63 L911.51 681.63 L910.951 681.63 L910.392 681.63 L909.833 681.63 L909.273 681.63 L908.714 681.63 L908.155 681.63 L907.596 681.63 L907.036 681.63 L906.477 681.63 L905.918 681.63 L905.359 681.63 L904.799 681.63 L904.24 681.63 L903.681 681.63 L903.122 681.63 L902.562 681.63 L902.003 681.63 L901.444 681.63 L900.885 681.63 L900.325 681.63 L899.766 681.63 L899.207 681.63 L898.648 681.63 L898.088 681.63 L897.529 681.63 L896.97 681.63 L896.411 681.63 L895.851 681.63 L895.292 681.63 L894.733 681.63 L894.174 681.63 L893.614 681.63 L893.055 681.63 L892.496 681.63 L891.937 681.63 L891.377 681.63 L890.818 681.63 L890.259 681.63 L889.7 681.63 L889.14 681.63 L888.581 681.63 L888.022 681.63 L887.463 681.63 L886.903 681.63 L886.344 681.63 L885.785 681.63 L885.226 681.63 L884.666 681.63 L884.107 681.63 L883.548 681.63 L882.989 681.63 L882.429 681.63 L881.87 681.63 L881.311 681.63 L880.752 681.63 L880.192 681.63 L879.633 681.63 L879.074 681.63 L878.515 681.63 L877.955 681.63 L877.396 681.63 L876.837 681.63 L876.278 681.63 L875.718 681.63 L875.159 681.63 L874.6 681.63 L874.041 681.63 L873.481 681.63 L872.922 681.63 L872.363 681.63 L871.804 681.63 L871.244 681.63 L870.685 681.63 L870.126 681.63 L869.567 681.63 L869.007 681.63 L868.448 681.63 L867.889 681.63 L867.33 681.63 L866.77 681.63 L866.211 681.63 L865.652 681.63 L865.093 681.63 L864.533 681.63 L863.974 681.63 L863.415 681.63 L862.856 681.63 L862.296 681.63 L861.737 681.63 L861.178 681.63 L860.619 681.63 L860.059 681.63 L859.5 681.63 L858.941 681.63 L858.382 681.63 L857.822 681.63 L857.263 681.63 L856.704 681.63 L856.145 681.63 L855.585 681.63 L855.026 681.63 L854.467 681.63 L853.908 681.63 L853.348 681.63 L852.789 681.63 L852.23 681.63 L851.671 681.63 L851.111 681.63 L850.552 681.63 L849.993 681.63 L849.434 681.63 L848.874 681.63 L848.315 681.63 L847.756 681.63 L847.197 681.63 L846.637 681.63 L846.078 681.63 L845.519 681.63 L844.96 681.63 L844.4 681.63 L843.841 681.63 L843.282 681.63 L842.723 681.63 L842.163 681.63 L841.604 681.63 L841.045 681.63 L840.486 681.63 L839.926 681.63 L839.367 681.63 L838.808 681.63 L838.249 681.63 L837.689 681.63 L837.13 681.63 L836.571 681.63 L836.012 681.63 L835.452 681.63 L834.893 681.63 L834.334 681.63 L833.775 681.63 L833.215 681.63 L832.656 681.63 L832.097 681.63 L831.538 681.63 L830.978 681.63 L830.419 681.63 L829.86 681.63 L829.301 681.63 L828.741 681.63 L828.182 681.63 L827.623 681.63 L827.064 681.63 L826.504 681.63 L825.945 681.63 L825.386 681.63 L824.827 681.63 L824.267 681.63 L823.708 681.63 L823.149 681.63 L822.59 681.63 L822.03 681.63 L821.471 681.63 L820.912 681.63 L820.353 681.63 L819.793 681.63 L819.234 681.63 L818.675 681.63 L818.116 681.63 L817.556 681.63 L816.997 681.63 L816.438 681.63 L815.879 681.63 L815.319 681.63 L814.76 681.63 L814.201 681.63 L813.642 681.63 L813.082 681.63 L812.523 681.63 L811.964 681.63 L811.405 681.63 L810.845 681.63 L810.286 681.63 L809.727 681.63 L809.168 681.63 L808.608 681.63 L808.049 681.63 L807.49 681.63 L806.931 681.63 L806.371 681.63 L805.812 681.63 L805.253 681.63 L804.693 681.63 L804.134 681.63 L803.575 681.63 L803.016 681.63 L802.456 681.63 L801.897 681.63 L801.338 681.63 L800.779 681.63 L800.219 681.63 L799.66 681.63 L799.101 681.63 L798.542 681.63 L797.982 681.63 L797.423 681.63 L796.864 681.63 L796.305 681.63 L795.745 681.63 L795.186 681.63 L794.627 681.63 L794.068 681.63 L793.508 681.63 L792.949 681.63 L792.39 681.63 L791.831 681.63 L791.271 681.63 L790.712 681.63 L790.153 681.63 L789.594 681.63 L789.034 681.63 L788.475 681.63 L787.916 681.63 L787.357 681.63 L786.797 681.63 L786.238 681.63 L785.679 681.63 L785.12 681.63 L784.56 681.63 L784.001 681.63 L783.442 681.63 L782.883 681.63 L782.323 681.63 L781.764 681.63 L781.205 681.63 L780.646 681.63 L780.086 681.63 L779.527 681.63 L778.968 681.63 L778.409 681.63 L777.849 681.63 L777.29 681.63 L776.731 681.63 L776.172 681.63 L775.612 681.63 L775.053 681.63 L774.494 681.63 L773.935 681.63 L773.375 681.63 L772.816 681.63 L772.257 681.63 L771.698 681.63 L771.138 681.63 L770.579 681.63 L770.02 681.63 L769.461 681.63 L768.901 681.63 L768.342 681.63 L767.783 681.63 L767.224 681.63 L766.664 681.63 L766.105 681.63 L765.546 681.63 L764.987 681.63 L764.427 681.63 L763.868 681.63 L763.309 681.63 L762.75 681.63 L762.19 681.63 L761.631 681.63 L761.072 681.63 L760.513 681.63 L759.953 681.63 L759.394 681.63 L758.835 681.63 L758.276 681.63 L757.716 681.63 L757.157 681.63 L756.598 681.63 L756.039 681.63 L755.479 681.63 L754.92 681.63 L754.361 681.63 L753.802 681.63 L753.242 681.63 L752.683 681.63 L752.124 681.63 L751.565 681.63 L751.005 681.63 L750.446 681.63 L749.887 681.63 L749.328 681.63 L748.768 681.63 L748.209 681.63 L747.65 681.63 L747.091 681.63 L746.531 681.63 L745.972 681.63 L745.413 681.63 L744.854 681.63 L744.294 681.63 L743.735 681.63 L743.176 681.63 L742.617 681.63 L742.057 681.63 L741.498 681.63 L740.939 681.63 L740.38 681.63 L739.82 681.63 L739.261 681.63 L738.702 681.63 L738.143 681.63 L737.583 681.63 L737.024 681.63 L736.465 681.63 L735.906 681.63 L735.346 681.63 L734.787 681.63 L734.228 681.63 L733.669 681.63 L733.109 681.63 L732.55 681.63 L731.991 681.63 L731.432 681.63 L730.872 681.63 L730.313 681.63 L729.754 681.63 L729.195 681.63 L728.635 681.63 L728.076 681.63 L727.517 681.63 L726.958 681.63 L726.398 681.63 L725.839 681.63 L725.28 681.63 L724.721 681.63 L724.161 681.63 L723.602 681.63 L723.043 681.63 L722.484 681.63 L721.924 681.63 L721.365 681.63 L720.806 681.63 L720.247 681.63  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,682.678 720.806,682.678 721.365,682.678 721.924,682.678 722.484,682.678 723.043,682.678 723.602,682.678 724.161,682.678 724.721,682.678 725.28,682.678 725.839,682.678 726.398,682.678 726.958,682.678 727.517,682.678 728.076,682.678 728.635,682.678 729.195,682.678 729.754,682.678 730.313,682.678 730.872,682.678 731.432,682.678 731.991,682.678 732.55,682.678 733.109,682.678 733.669,682.678 734.228,682.678 734.787,682.678 735.346,682.678 735.906,682.678 736.465,682.678 737.024,682.678 737.583,682.678 738.143,682.678 738.702,682.678 739.261,682.678 739.82,682.678 740.38,682.678 740.939,682.678 741.498,682.678 742.057,682.678 742.617,682.678 743.176,682.678 743.735,682.678 744.294,682.678 744.854,682.678 745.413,682.678 745.972,682.678 746.531,682.678 747.091,682.678 747.65,682.678 748.209,682.678 748.768,682.678 749.328,682.678 749.887,682.678 750.446,682.678 751.005,682.678 751.565,682.678 752.124,682.678 752.683,682.678 753.242,682.678 753.802,682.678 754.361,682.678 754.92,682.678 755.479,682.678 756.039,682.678 756.598,682.678 757.157,682.678 757.716,682.678 758.276,682.678 758.835,682.678 759.394,682.678 759.953,682.678 760.513,682.678 761.072,682.678 761.631,682.678 762.19,682.678 762.75,682.678 763.309,682.678 763.868,682.678 764.427,682.678 764.987,682.678 765.546,682.678 766.105,682.678 766.664,682.678 767.224,682.678 767.783,682.678 768.342,682.678 768.901,682.678 769.461,682.678 770.02,682.678 770.579,682.678 771.138,682.678 771.698,682.678 772.257,682.678 772.816,682.678 773.375,682.678 773.935,682.678 774.494,682.678 775.053,682.678 775.612,682.678 776.172,682.678 776.731,682.678 777.29,682.678 777.849,682.678 778.409,682.678 778.968,682.678 779.527,682.678 780.086,682.678 780.646,682.678 781.205,682.678 781.764,682.678 782.323,682.678 782.883,682.678 783.442,682.678 784.001,682.678 784.56,682.678 785.12,682.678 785.679,682.678 786.238,682.678 786.797,682.678 787.357,682.678 787.916,682.678 788.475,682.678 789.034,682.678 789.594,682.678 790.153,682.678 790.712,682.678 791.271,682.678 791.831,682.678 792.39,682.678 792.949,682.678 793.508,682.678 794.068,682.678 794.627,682.678 795.186,682.678 795.745,682.678 796.305,682.678 796.864,682.678 797.423,682.678 797.982,682.678 798.542,682.678 799.101,682.678 799.66,682.678 800.219,682.678 800.779,682.678 801.338,682.678 801.897,682.678 802.456,682.678 803.016,682.678 803.575,682.678 804.134,682.678 804.693,682.678 805.253,682.678 805.812,682.678 806.371,682.678 806.931,682.678 807.49,682.678 808.049,682.678 808.608,682.678 809.168,682.678 809.727,682.678 810.286,682.678 810.845,682.678 811.405,682.678 811.964,682.678 812.523,682.678 813.082,682.678 813.642,682.678 814.201,682.678 814.76,682.678 815.319,682.678 815.879,682.678 816.438,682.678 816.997,682.678 817.556,682.678 818.116,682.678 818.675,682.678 819.234,682.678 819.793,682.678 820.353,682.678 820.912,682.678 821.471,682.678 822.03,682.678 822.59,682.678 823.149,682.678 823.708,682.678 824.267,682.678 824.827,682.678 825.386,682.678 825.945,682.678 826.504,682.678 827.064,682.678 827.623,682.678 828.182,682.678 828.741,682.678 829.301,682.678 829.86,682.678 830.419,682.678 830.978,682.678 831.538,682.678 832.097,682.678 832.656,682.678 833.215,682.678 833.775,682.678 834.334,682.678 834.893,682.678 835.452,682.678 836.012,682.678 836.571,682.678 837.13,682.678 837.689,682.678 838.249,682.678 838.808,682.678 839.367,682.678 839.926,682.678 840.486,682.678 841.045,682.678 841.604,682.678 842.163,682.678 842.723,682.678 843.282,682.678 843.841,682.678 844.4,682.678 844.96,682.678 845.519,682.678 846.078,682.678 846.637,682.678 847.197,682.678 847.756,682.678 848.315,682.678 848.874,682.678 849.434,682.678 849.993,682.678 850.552,682.678 851.111,682.678 851.671,682.678 852.23,682.678 852.789,682.678 853.348,682.678 853.908,682.678 854.467,682.678 855.026,682.678 855.585,682.678 856.145,682.678 856.704,682.678 857.263,682.678 857.822,682.678 858.382,682.678 858.941,682.678 859.5,682.678 860.059,682.678 860.619,682.678 861.178,682.678 861.737,682.678 862.296,682.678 862.856,682.678 863.415,682.678 863.974,682.678 864.533,682.678 865.093,682.678 865.652,682.678 866.211,682.678 866.77,682.678 867.33,682.678 867.889,682.678 868.448,682.678 869.007,682.678 869.567,682.678 870.126,682.678 870.685,682.678 871.244,682.678 871.804,682.678 872.363,682.678 872.922,682.678 873.481,682.678 874.041,682.678 874.6,682.678 875.159,682.678 875.718,682.678 876.278,682.678 876.837,682.678 877.396,682.678 877.955,682.678 878.515,682.678 879.074,682.678 879.633,682.678 880.192,682.678 880.752,682.678 881.311,682.678 881.87,682.678 882.429,682.678 882.989,682.678 883.548,682.678 884.107,682.678 884.666,682.678 885.226,682.678 885.785,682.678 886.344,682.678 886.903,682.678 887.463,682.678 888.022,682.678 888.581,682.678 889.14,682.678 889.7,682.678 890.259,682.678 890.818,682.678 891.377,682.678 891.937,682.678 892.496,682.678 893.055,682.678 893.614,682.678 894.174,682.678 894.733,682.678 895.292,682.678 895.851,682.678 896.411,682.678 896.97,682.678 897.529,682.678 898.088,682.678 898.648,682.678 899.207,682.678 899.766,682.678 900.325,682.678 900.885,682.678 901.444,682.678 902.003,682.678 902.562,682.678 903.122,682.678 903.681,682.678 904.24,682.678 904.799,682.678 905.359,682.678 905.918,682.678 906.477,682.678 907.036,682.678 907.596,682.678 908.155,682.678 908.714,682.678 909.273,682.678 909.833,682.678 910.392,682.678 910.951,682.678 911.51,682.678 912.07,682.678 912.629,682.678 913.188,682.678 913.747,682.678 914.307,682.678 914.866,682.678 915.425,682.678 915.984,682.678 916.544,682.678 917.103,682.678 917.662,682.678 918.221,682.678 918.781,682.678 919.34,682.678 919.899,682.678 920.458,682.678 921.018,682.678 921.577,682.678 922.136,682.678 922.695,682.678 923.255,682.678 923.814,682.678 924.373,682.678 924.932,682.678 925.492,682.678 926.051,682.678 926.61,682.678 927.169,682.678 927.729,682.678 928.288,682.678 928.847,682.678 929.406,682.678 929.966,682.678 930.525,682.678 931.084,682.678 931.644,682.678 932.203,682.678 932.762,682.678 933.321,682.678 933.881,682.678 934.44,682.678 934.999,682.678 935.558,682.678 936.118,682.678 936.677,682.678 937.236,682.678 937.795,682.678 938.355,682.678 938.914,682.678 939.473,682.678 940.032,682.678 940.592,682.678 941.151,682.678 941.71,682.678 942.269,682.678 942.829,682.678 943.388,682.678 943.947,682.678 944.506,682.678 945.066,682.678 945.625,682.678 946.184,682.678 946.743,682.678 947.303,682.678 947.862,682.678 948.421,682.678 948.98,682.678 949.54,682.678 950.099,682.678 950.658,682.678 951.217,682.678 951.777,682.678 952.336,682.678 952.895,682.678 953.454,682.678 954.014,682.678 954.573,682.678 955.132,682.678 955.691,682.678 956.251,682.678 956.81,682.678 957.369,682.678 957.928,682.678 958.488,682.678 959.047,682.678 959.606,682.678 960.165,682.678 960.725,682.678 961.284,682.678 961.843,682.678 962.402,682.678 962.962,682.678 963.521,682.678 964.08,682.678 964.639,682.678 965.199,682.678 965.758,682.678 966.317,682.678 966.876,682.678 967.436,682.678 967.995,682.678 968.554,682.678 969.113,682.678 969.673,682.678 970.232,682.678 970.791,682.678 971.35,682.678 971.91,682.678 972.469,682.678 973.028,682.678 973.587,682.678 974.147,682.678 974.706,682.678 975.265,682.678 975.824,682.678 976.384,682.678 976.943,682.678 977.502,682.678 978.061,682.678 978.621,682.678 979.18,682.678 979.739,682.678 980.298,682.678 980.858,682.678 981.417,682.678 981.976,682.678 982.535,682.678 983.095,682.678 983.654,682.678 984.213,682.678 984.772,682.678 985.332,682.678 985.891,682.678 986.45,682.678 987.009,682.678 987.569,682.678 988.128,682.678 988.687,682.678 989.246,682.678 989.806,682.678 990.365,682.678 990.924,682.678 991.483,682.678 992.043,682.678 992.602,682.678 993.161,682.678 993.72,682.678 994.28,682.678 994.839,682.678 995.398,682.678 995.957,682.678 996.517,682.678 997.076,682.678 997.635,682.678 998.194,682.678 998.754,682.678 999.313,682.678 999.872,682.678 1000.43,682.678 1000.99,682.678 1001.55,682.678 1002.11,682.678 1002.67,682.678 1003.23,682.678 1003.79,682.678 1004.35,682.678 1004.91,682.678 1005.46,682.678 1006.02,682.678 1006.58,682.678 1007.14,682.678 1007.7,682.678 1008.26,682.678 1008.82,682.678 1009.38,682.678 1009.94,682.678 1010.5,682.678 1011.06,682.678 1011.62,682.678 1012.18,682.678 1012.73,682.678 1013.29,682.678 1013.85,682.678 1014.41,682.678 1014.97,682.678 1015.53,682.678 1016.09,682.678 1016.65,682.678 1017.21,682.678 1017.77,682.678 1018.33,682.678 1018.89,682.678 1019.45,682.678 1020.01,682.678 1020.56,682.678 1021.12,682.678 1021.68,682.678 1022.24,682.678 1022.8,682.678 1023.36,682.678 1023.92,682.678 1024.48,682.678 1025.04,682.678 1025.6,682.678 1026.16,682.678 1026.72,682.678 1027.28,682.678 1027.83,682.678 1028.39,682.678 1028.95,682.678 1029.51,682.678 1030.07,682.678 1030.63,682.678 1031.19,682.678 1031.75,682.678 1032.31,682.678 1032.87,682.678 1033.43,682.678 1033.99,682.678 1034.55,682.678 1035.1,682.678 1035.66,682.678 1036.22,682.678 1036.78,682.678 1037.34,682.678 1037.9,682.678 1038.46,682.678 1039.02,682.678 1039.58,682.678 1040.14,682.678 1040.7,682.678 1041.26,682.678 1041.82,682.678 1042.38,682.678 1042.93,682.678 1043.49,682.678 1044.05,682.678 1044.61,682.678 1045.17,682.678 1045.73,682.678 1046.29,682.678 1046.85,682.678 1047.41,682.678 1047.97,682.678 1048.53,682.678 1049.09,682.678 1049.65,682.678 1050.2,682.678 1050.76,682.678 1051.32,682.678 1051.88,682.678 1052.44,682.678 1053,682.678 1053.56,682.678 1054.12,682.678 1054.68,682.678 1055.24,682.678 1055.8,682.678 1056.36,682.678 1056.92,682.678 1057.48,682.678 1058.03,682.678 1058.59,682.678 1059.15,682.678 1059.71,682.678 1060.27,682.678 1060.83,682.678 1061.39,682.678 1061.95,682.678 1062.51,682.678 1063.07,682.678 1063.63,682.678 1064.19,682.678 1064.75,682.678 1065.3,682.678 1065.86,682.678 1066.42,682.678 1066.98,682.678 1067.54,682.678 1068.1,682.678 1068.66,682.678 1069.22,682.678 1069.78,682.678 1070.34,682.678 1070.9,682.678 1071.46,682.678 1072.02,682.678 1072.57,682.678 1073.13,682.678 1073.69,682.678 1074.25,682.678 1074.81,682.678 1075.37,682.678 1075.93,682.678 1076.49,682.678 1077.05,682.678 1077.61,682.678 1078.17,682.678 1078.73,682.678 1079.29,682.678 1079.85,682.678 1080.4,682.678 1080.96,682.678 1081.52,682.678 1082.08,682.678 1082.64,682.678 1083.2,682.678 1083.76,682.678 1084.32,682.678 1084.88,682.678 1085.44,682.678 1086,682.678 1086.56,682.678 1087.12,682.678 1087.67,682.678 1088.23,682.678 1088.79,682.678 1089.35,682.678 1089.91,682.678 1090.47,682.678 1091.03,682.678 1091.59,682.678 1092.15,682.678 1092.71,682.678 1093.27,682.678 1093.83,682.678 1094.39,682.678 1094.94,682.678 1095.5,682.678 1096.06,682.678 1096.62,682.678 1097.18,682.678 1097.74,682.678 1098.3,682.678 1098.86,682.678 1099.42,682.678 1099.98,682.678 1100.54,682.678 1101.1,682.678 1101.66,682.678 1102.22,682.678 1102.77,682.678 1103.33,682.678 1103.89,682.678 1104.45,682.678 1105.01,682.678 1105.57,682.678 1106.13,682.678 1106.69,682.678 1107.25,682.678 1107.81,682.678 1108.37,682.678 1108.93,682.678 1109.49,682.678 1110.04,682.678 1110.6,682.678 1111.16,682.678 1111.72,682.678 1112.28,682.678 1112.84,682.678 1113.4,682.678 1113.96,682.678 1114.52,682.678 1115.08,682.678 1115.64,682.678 1116.2,682.678 1116.76,682.678 1117.31,682.678 1117.87,682.678 1118.43,682.678 1118.99,682.678 1119.55,682.678 1120.11,682.678 1120.67,682.678 1121.23,682.678 1121.79,682.678 1122.35,682.678 1122.91,682.678 1123.47,682.678 1124.03,682.678 1124.59,682.678 1125.14,682.678 1125.7,682.678 1126.26,682.678 1126.82,682.678 1127.38,682.678 1127.94,682.678 1128.5,682.678 1129.06,682.678 1129.62,682.678 1130.18,682.678 1130.74,682.678 1131.3,682.678 1131.86,682.678 1132.41,682.678 1132.97,682.678 1133.53,682.678 1134.09,682.678 1134.65,682.678 1135.21,682.678 1135.77,682.678 1136.33,682.678 1136.89,682.678 1137.45,682.678 1138.01,682.678 1138.57,682.678 1139.13,682.678 1139.68,682.678 1140.24,682.678 1140.8,682.678 1141.36,682.678 1141.92,682.678 1142.48,682.678 1143.04,682.678 1143.6,682.678 1144.16,682.678 1144.72,682.678 1145.28,682.678 1145.84,682.678 1146.4,682.678 1146.96,682.678 1147.51,682.678 1148.07,682.678 1148.63,682.678 1149.19,682.678 1149.75,682.678 1150.31,682.678 1150.87,682.678 1151.43,682.678 1151.99,682.678 1152.55,682.678 1153.11,682.678 1153.67,682.678 1154.23,682.678 1154.78,682.678 1155.34,682.678 1155.9,682.678 1156.46,682.678 1157.02,682.678 1157.58,682.678 1158.14,682.678 1158.7,682.678 1159.26,682.678 1159.82,682.678 1160.38,682.678 1160.94,682.678 1161.5,682.678 1162.05,682.678 1162.61,682.678 1163.17,682.678 1163.73,682.678 1164.29,682.678 1164.85,682.678 1165.41,682.678 1165.97,682.678 1166.53,682.678 1167.09,682.678 1167.65,682.678 1168.21,682.678 1168.77,682.678 1169.33,682.678 1169.88,682.678 1170.44,682.678 1171,682.678 1171.56,682.678 1172.12,682.678 1172.68,682.678 1173.24,682.678 1173.8,682.678 1174.36,682.678 1174.92,682.678 1175.48,682.678 1176.04,682.678 1176.6,682.678 1177.15,682.678 1177.71,682.678 1178.27,682.678 1178.83,682.678 1179.39,682.678 1179.95,682.678 1180.51,682.678 1181.07,682.678 1181.63,682.678 1182.19,682.678 1182.75,682.678 1183.31,682.678 1183.87,682.678 1184.43,682.678 1184.98,682.678 1185.54,682.678 1186.1,682.678 1186.66,682.678 1187.22,682.678 1187.78,682.678 1188.34,682.678 1188.9,682.678 1189.46,682.678 1190.02,682.678 1190.58,682.678 1191.14,682.678 1191.7,682.678 1192.25,682.678 1192.81,682.678 1193.37,682.678 1193.93,682.678 1194.49,682.678 1195.05,682.678 1195.61,682.678 1196.17,682.678 1196.73,682.678 1197.29,682.678 1197.85,682.678 1198.41,682.678 1198.97,682.678 1199.52,682.678 1200.08,682.678 1200.64,682.678 1201.2,682.678 1201.76,682.678 1202.32,682.678 1202.88,682.678 1203.44,682.678 1204,682.678 1204.56,682.678 1205.12,682.678 1205.68,682.678 1206.24,682.678 1206.8,682.678 1207.35,682.678 1207.91,682.678 1208.47,682.678 1209.03,682.678 1209.59,682.678 1210.15,682.678 1210.71,682.678 1211.27,682.678 1211.83,682.678 1212.39,682.678 1212.95,682.678 1213.51,682.678 1214.07,682.678 1214.62,682.678 1215.18,682.678 1215.74,682.678 1216.3,682.678 1216.86,682.678 1217.42,682.678 1217.98,682.678 1218.54,682.678 1219.1,682.678 1219.66,682.678 1220.22,682.678 1220.78,682.678 1221.34,682.678 1221.89,682.678 1222.45,682.678 1223.01,682.678 1223.57,682.678 1224.13,682.678 1224.69,682.678 1225.25,682.678 1225.81,682.678 1226.37,682.678 1226.93,682.678 1227.49,682.678 1228.05,682.678 1228.61,682.678 1229.17,682.678 1229.72,682.678 1230.28,682.678 1230.84,682.678 1231.4,682.678 1231.96,682.678 1232.52,682.678 1233.08,682.678 1233.64,682.678 1234.2,682.678 1234.76,682.678 1235.32,682.678 1235.88,682.678 1236.44,682.678 1236.99,682.678 1237.55,682.678 1238.11,682.678 1238.67,682.678 1239.23,682.678 1239.79,682.678 1240.35,682.678 1240.91,682.678 1241.47,682.678 1242.03,682.678 1242.59,682.678 1243.15,682.678 1243.71,682.678 1244.26,682.678 1244.82,682.678 1245.38,682.678 1245.94,682.678 1246.5,682.678 1247.06,682.678 1247.62,682.678 1248.18,682.678 1248.74,682.678 1249.3,682.678 1249.86,682.678 1250.42,682.678 1250.98,682.678 1251.54,682.678 1252.09,682.678 1252.65,682.678 1253.21,682.678 1253.77,682.678 1254.33,682.678 1254.89,682.678 1255.45,682.678 1256.01,682.678 1256.57,682.678 1257.13,682.678 1257.69,682.678 1258.25,682.678 1258.81,682.678 1259.36,682.678 1259.92,682.678 1260.48,682.678 1261.04,682.678 1261.6,682.678 1262.16,682.678 1262.72,682.678 1263.28,682.678 1263.84,682.678 1264.4,682.678 1264.96,682.678 1265.52,682.678 1266.08,682.678 1266.63,682.678 1267.19,682.678 1267.75,682.678 1268.31,682.678 1268.87,682.678 1269.43,682.678 1269.99,682.678 1270.55,682.678 1271.11,682.678 1271.67,682.678 1272.23,682.678 1272.79,682.678 1273.35,682.678 1273.91,682.678 1274.46,682.678 1275.02,682.678 1275.58,682.678 1276.14,682.678 1276.7,682.678 1277.26,682.678 1277.82,682.678 1278.38,682.678 1278.94,682.678 1279.5,682.678 1280.06,682.678 1280.62,682.678 1281.18,682.678 1281.73,682.678 1282.29,682.678 1282.85,682.678 1283.41,682.678 1283.97,682.678 1284.53,682.678 1285.09,682.678 1285.65,682.678 1286.21,682.678 1286.77,682.678 1287.33,682.678 1287.89,682.678 1288.45,682.678 1289,682.678 1289.56,682.678 1290.12,682.678 1290.68,682.678 1291.24,682.678 1291.8,682.678 1292.36,682.678 1292.92,682.678 1293.48,682.678 1294.04,682.678 1294.6,682.678 1295.16,682.678 1295.72,682.678 1296.28,682.678 1296.83,682.678 1297.39,682.678 1297.95,682.678 1298.51,682.678 1299.07,682.678 1299.63,682.678 1300.19,682.678 1300.75,682.678 1301.31,682.678 1301.87,682.678 1302.43,682.678 1302.99,682.678 1303.55,682.678 1304.1,682.678 1304.66,682.678 1305.22,682.678 1305.78,682.678 1306.34,682.678 1306.9,682.678 1307.46,682.678 1308.02,682.678 1308.58,682.678 1309.14,682.678 1309.7,682.678 1310.26,682.678 1310.82,682.678 1311.38,682.678 1311.93,682.678 1312.49,682.678 1313.05,682.678 1313.61,682.678 1314.17,682.678 1314.73,682.678 1315.29,682.678 1315.85,682.678 1316.41,682.678 1316.97,682.678 1317.53,682.678 1318.09,682.678 1318.65,682.678 1319.2,682.678 1319.76,682.678 1320.32,682.678 1320.88,682.678 1321.44,682.678 1322,682.678 1322.56,682.678 1323.12,682.678 1323.68,682.678 1324.24,682.678 1324.8,682.678 1325.36,682.678 1325.92,682.678 1326.47,682.678 1327.03,682.678 1327.59,682.678 1328.15,682.678 1328.71,682.678 1329.27,682.678 1329.83,682.678 1330.39,682.678 1330.95,682.678 1331.51,682.678 1332.07,682.678 1332.63,682.678 1333.19,682.678 1333.75,682.678 1334.3,682.678 1334.86,682.678 1335.42,682.678 1335.98,682.678 1336.54,682.678 1337.1,682.678 1337.66,682.678 1338.22,682.678 1338.78,682.678 1339.34,682.678 1339.9,682.678 1340.46,682.678 1341.02,682.678 1341.57,682.678 1342.13,682.678 1342.69,682.678 1343.25,682.678 1343.81,682.678 1344.37,682.678 1344.93,682.678 1345.49,682.678 1346.05,682.678 1346.61,682.678 1347.17,682.678 1347.73,682.678 1348.29,682.678 1348.84,682.678 1349.4,682.678 1349.96,682.678 1350.52,682.678 1351.08,682.678 1351.64,682.678 1352.2,682.678 1352.76,682.678 1353.32,682.678 1353.88,682.678 1354.44,682.678 1355,682.678 1355.56,682.678 1356.12,682.678 1356.67,682.678 1357.23,682.678 1357.79,682.678 1358.35,682.678 1358.91,682.678 1359.47,682.678 1360.03,682.678 1360.59,682.678 1361.15,682.678 1361.71,682.678 1362.27,682.678 1362.83,682.678 1363.39,682.678 1363.94,682.678 1364.5,682.678 1365.06,682.678 1365.62,682.678 1366.18,682.678 1366.74,682.678 1367.3,682.678 1367.86,682.678 1368.42,682.678 1368.98,682.678 1369.54,682.678 1370.1,682.678 1370.66,682.678 1371.21,682.678 1371.77,682.678 1372.33,682.678 1372.89,682.678 1373.45,682.678 1374.01,682.678 1374.57,682.678 1375.13,682.678 1375.69,682.678 1376.25,682.678 1376.81,682.678 1377.37,682.678 1377.93,682.678 1378.49,682.678 1379.04,682.678 1379.6,682.678 1380.16,682.678 1380.72,682.678 1381.28,682.678 1381.84,682.678 1382.4,682.678 1382.96,682.678 1383.52,682.678 1384.08,682.678 1384.64,682.678 1385.2,682.678 1385.76,682.678 1386.31,682.678 1386.87,682.678 1387.43,682.678 1387.99,682.678 1388.55,682.678 1389.11,682.678 1389.67,682.678 1390.23,682.678 1390.79,682.678 1391.35,682.678 1391.91,682.678 1392.47,682.678 1393.03,682.678 1393.58,682.678 1394.14,682.678 1394.7,682.678 1395.26,682.678 1395.82,682.678 1396.38,682.678 1396.94,682.678 1397.5,682.678 1398.06,682.678 1398.62,682.678 1399.18,682.678 1399.74,682.678 1400.3,682.678 1400.86,682.678 1401.41,682.678 1401.97,682.678 1402.53,682.678 1403.09,682.678 1403.65,682.678 1404.21,682.678 1404.77,682.678 1405.33,682.678 1405.89,682.678 1406.45,682.678 1407.01,682.678 1407.57,682.678 1408.13,682.678 1408.68,682.678 1409.24,682.678 1409.8,682.678 1410.36,682.678 1410.92,682.678 1411.48,682.678 1412.04,682.678 1412.6,682.678 1413.16,682.678 1413.72,682.678 1414.28,682.678 1414.84,682.678 1415.4,682.678 1415.95,682.678 1416.51,682.678 1417.07,682.678 1417.63,682.678 1418.19,682.678 1418.75,682.678 1419.31,682.678 1419.87,682.678 1420.43,682.678 1420.99,682.678 1421.55,682.678 1422.11,682.678 1422.67,682.678 1423.23,682.678 1423.78,682.678 1424.34,682.678 1424.9,682.678 1425.46,682.678 1426.02,682.678 1426.58,682.678 1427.14,682.678 1427.7,682.678 1428.26,682.678 1428.82,682.678 1429.38,682.678 1429.94,682.678 1430.5,682.678 1431.05,682.678 1431.61,682.678 1432.17,682.678 1432.73,682.678 1433.29,682.678 1433.85,682.678 1434.41,682.678 1434.97,682.678 1435.53,682.678 1436.09,682.678 1436.65,682.678 1437.21,682.678 1437.77,682.678 1438.33,682.678 1438.88,682.678 1439.44,682.678 1440,682.678 1440.56,682.678 1441.12,682.678 1441.68,682.678 1442.24,682.678 1442.8,682.678 1443.36,682.678 1443.92,682.678 1444.48,682.678 1445.04,682.678 1445.6,682.678 1446.15,682.678 1446.71,682.678 1447.27,682.678 1447.83,682.678 1448.39,682.678 1448.95,682.678 1449.51,682.678 1450.07,682.678 1450.63,682.678 1451.19,682.678 1451.75,682.678 1452.31,682.678 1452.87,682.678 1453.42,682.678 1453.98,682.678 1454.54,682.678 1455.1,682.678 1455.66,682.678 1456.22,682.678 1456.78,682.678 1457.34,682.678 1457.9,682.678 1458.46,682.678 1459.02,682.678 1459.58,682.678 1460.14,682.678 1460.7,682.678 1461.25,682.678 1461.81,682.678 1462.37,682.678 1462.93,682.678 1463.49,682.678 1464.05,682.678 1464.61,682.678 1465.17,682.678 1465.73,682.678 1466.29,682.678 1466.85,682.678 1467.41,682.678 1467.97,682.678 1468.52,682.678 1469.08,682.678 1469.64,682.678 1470.2,682.678 1470.76,682.678 1471.32,682.678 1471.88,682.678 1472.44,682.678 1473,682.678 1473.56,682.678 1474.12,682.678 1474.68,682.678 1475.24,682.678 1475.79,682.678 1476.35,682.678 1476.91,682.678 1477.47,682.678 1478.03,682.678 1478.59,682.678 1479.15,682.678 1479.71,682.678 1480.27,682.678 1480.83,682.678 1481.39,682.678 1481.95,682.678 1482.51,682.678 1483.07,682.678 1483.62,682.678 1484.18,682.678 1484.74,682.678 1485.3,682.678 1485.86,682.678 1486.42,682.678 1486.98,682.678 1487.54,682.678 1488.1,682.678 1488.66,682.678 1489.22,682.678 1489.78,682.678 1490.34,682.678 1490.89,682.678 1491.45,682.678 1492.01,682.678 1492.57,682.678 1493.13,682.678 1493.69,682.678 1494.25,682.678 1494.81,682.678 1495.37,682.678 1495.93,682.678 1496.49,682.678 1497.05,682.678 1497.61,682.678 1498.16,682.678 1498.72,682.678 1499.28,682.678 1499.84,682.678 1500.4,682.678 1500.96,682.678 1501.52,682.678 1502.08,682.678 1502.64,682.678 1503.2,682.678 1503.76,682.678 1504.32,682.678 1504.88,682.678 1505.44,682.678 1505.99,682.678 1506.55,682.678 1507.11,682.678 1507.67,682.678 1508.23,682.678 1508.79,682.678 1509.35,682.678 1509.91,682.678 1510.47,682.678 1511.03,682.678 1511.59,682.678 1512.15,682.678 1512.71,682.678 1513.26,682.678 1513.82,682.678 1514.38,682.678 1514.94,682.678 1515.5,682.678 1516.06,682.678 1516.62,682.678 1517.18,682.678 1517.74,682.678 1518.3,682.678 1518.86,682.678 1519.42,682.678 1519.98,682.678 1520.53,682.678 1521.09,682.678 1521.65,682.678 1522.21,682.678 1522.77,682.678 1523.33,682.678 1523.89,682.678 1524.45,682.678 1525.01,682.678 1525.57,682.678 1526.13,682.678 1526.69,682.678 1527.25,682.678 1527.81,682.678 1528.36,682.678 1528.92,682.678 1529.48,682.678 1530.04,682.678 1530.6,682.678 1531.16,682.678 1531.72,682.678 1532.28,682.678 1532.84,682.678 1533.4,682.678 1533.96,682.678 1534.52,682.678 1535.08,682.678 1535.63,682.678 1536.19,682.678 1536.75,682.678 1537.31,682.678 1537.87,682.678 1538.43,682.678 1538.99,682.678 1539.55,682.678 1540.11,682.678 1540.67,682.678 1541.23,682.678 1541.79,682.678 1542.35,682.678 1542.9,682.678 1543.46,682.678 1544.02,682.678 1544.58,682.678 1545.14,682.678 1545.7,682.678 1546.26,682.678 1546.82,682.678 1547.38,682.678 1547.94,682.678 1548.5,682.678 1549.06,682.678 1549.62,682.678 1550.18,682.678 1550.73,682.678 1551.29,682.678 1551.85,682.678 1552.41,682.678 1552.97,682.678 1553.53,682.678 1554.09,682.678 1554.65,682.678 1555.21,682.678 1555.77,682.678 1556.33,682.678 1556.89,682.678 1557.45,682.678 1558,682.678 1558.56,682.678 1559.12,682.678 1559.68,682.678 1560.24,682.678 1560.8,682.678 1561.36,682.678 1561.92,682.678 1562.48,682.678 1563.04,682.678 1563.6,682.678 1564.16,682.678 1564.72,682.678 1565.28,682.678 1565.83,682.678 1566.39,682.678 1566.95,682.678 1567.51,682.678 1568.07,682.678 1568.63,682.678 1569.19,682.678 1569.75,682.678 1570.31,682.678 1570.87,682.678 1571.43,682.678 1571.99,682.678 1572.55,682.678 1573.1,682.678 1573.66,682.678 1574.22,682.678 1574.78,682.678 1575.34,682.678 1575.9,682.678 1576.46,682.678 1577.02,682.678 1577.58,682.678 1578.14,682.678 1578.7,682.678 1579.26,682.678 1579.82,682.678 1580.37,682.678 1580.93,682.678 1581.49,682.678 1582.05,682.678 1582.61,682.678 1583.17,682.678 1583.73,682.678 1584.29,682.678 1584.85,682.678 1585.41,682.678 1585.97,682.678 1586.53,682.678 1587.09,682.678 1587.65,682.678 1588.2,682.678 1588.76,682.678 1589.32,682.678 1589.88,682.678 1590.44,682.678 1591,682.678 1591.56,682.678 1592.12,682.678 1592.68,682.678 1593.24,682.678 1593.8,682.678 1594.36,682.678 1594.92,682.678 1595.47,682.678 1596.03,682.678 1596.59,682.678 1597.15,682.678 1597.71,682.678 1598.27,682.678 1598.83,682.678 1599.39,682.678 1599.95,682.678 1600.51,682.678 1601.07,682.678 1601.63,682.678 1602.19,682.678 1602.74,682.678 1603.3,682.678 1603.86,682.678 1604.42,682.678 1604.98,682.678 1605.54,682.678 1606.1,682.678 1606.66,682.678 1607.22,682.678 1607.78,682.678 1608.34,682.678 1608.9,682.678 1609.46,682.678 1610.02,682.678 1610.57,682.678 1611.13,682.678 1611.69,682.678 1612.25,682.678 1612.81,682.678 1613.37,682.678 1613.93,682.678 1614.49,682.678 1615.05,682.678 1615.61,682.678 1616.17,682.678 1616.73,682.678 1617.29,682.678 1617.84,682.678 1618.4,682.678 1618.96,682.678 1619.52,682.678 1620.08,682.678 1620.64,682.678 1621.2,682.678 1621.76,682.678 1622.32,682.678 1622.88,682.678 1623.44,682.678 1624,682.678 1624.56,682.678 1625.11,682.678 1625.67,682.678 1626.23,682.678 1626.79,682.678 1627.35,682.678 1627.91,682.678 1628.47,682.678 1629.03,682.678 1629.59,682.678 1630.15,682.678 1630.71,682.678 1631.27,682.678 1631.83,682.678 1632.39,682.678 1632.94,682.678 1633.5,682.678 1634.06,682.678 1634.62,682.678 1635.18,682.678 1635.74,682.678 1636.3,682.678 1636.86,682.678 1637.42,682.678 1637.98,682.678 1638.54,682.678 1639.1,682.678 1639.66,682.678 1640.21,682.678 1640.77,682.678 1641.33,682.678 1641.89,682.678 1642.45,682.678 1643.01,682.678 1643.57,682.678 1644.13,682.678 1644.69,682.678 1645.25,682.678 1645.81,682.678 1646.37,682.678 1646.93,682.678 1647.48,682.678 1648.04,682.678 1648.6,682.678 1649.16,682.678 1649.72,682.678 1650.28,682.678 1650.84,682.678 1651.4,682.678 1651.96,682.678 1652.52,682.678 1653.08,682.678 1653.64,682.678 1654.2,682.678 1654.76,682.678 1655.31,682.678 1655.87,682.678 1656.43,682.678 1656.99,682.678 1657.55,682.678 1658.11,682.678 1658.67,682.678 1659.23,682.678 1659.79,682.678 1660.35,682.678 1660.91,682.678 1661.47,682.678 1662.03,682.678 1662.58,682.678 1663.14,682.678 1663.7,682.678 1664.26,682.678 1664.82,682.678 1665.38,682.678 1665.94,682.678 1666.5,682.678 1667.06,682.678 1667.62,682.678 1668.18,682.678 1668.74,682.678 1669.3,682.678 1669.85,682.678 1670.41,682.678 1670.97,682.678 1671.53,682.678 1672.09,682.678 1672.65,682.678 1673.21,682.678 1673.77,682.678 1674.33,682.678 1674.89,682.678 1675.45,682.678 1676.01,682.678 1676.57,682.678 1677.13,682.678 1677.68,682.678 1678.24,682.678 1678.8,682.678 1679.36,682.678 1679.92,682.678 1680.48,682.678 1681.04,682.678 1681.6,682.678 1682.16,682.678 1682.72,682.678 1683.28,682.678 1683.84,682.678 1684.4,682.678 1684.95,682.678 1685.51,682.678 1686.07,682.678 1686.63,682.678 1687.19,682.678 1687.75,682.678 1688.31,682.678 1688.87,682.678 1689.43,682.678 1689.99,682.678 1690.55,682.678 1691.11,682.678 1691.67,682.678 1692.23,682.678 1692.78,682.678 1693.34,682.678 1693.9,682.678 1694.46,682.678 1695.02,682.678 1695.58,682.678 1696.14,682.678 1696.7,682.678 1697.26,682.678 1697.82,682.678 1698.38,682.678 1698.94,682.678 1699.5,682.678 1700.05,682.678 1700.61,682.678 1701.17,682.678 1701.73,682.678 1702.29,682.678 1702.85,682.678 1703.41,682.678 1703.97,682.678 1704.53,682.678 1705.09,682.678 1705.65,682.678 1706.21,682.678 1706.77,682.678 1707.32,682.678 1707.88,682.678 1708.44,682.678 1709,682.678 1709.56,682.678 1710.12,682.678 1710.68,682.678 1711.24,682.678 1711.8,682.678 1712.36,682.678 1712.92,682.678 1713.48,682.678 1714.04,682.678 1714.6,682.678 1715.15,682.678 1715.71,682.678 1716.27,682.678 1716.83,682.678 1717.39,682.678 1717.95,682.678 1718.51,682.678 1719.07,682.678 1719.63,682.678 1720.19,682.678 1720.75,682.678 1721.31,682.678 1721.87,682.678 1722.42,682.678 1722.98,682.678 1723.54,682.678 1724.1,682.678 1724.66,682.678 1725.22,682.678 1725.78,682.678 1726.34,682.678 1726.9,682.678 1727.46,682.678 1728.02,682.678 1728.58,682.678 1729.14,682.678 1729.69,682.678 1730.25,682.678 1730.81,682.678 1731.37,682.678 1731.93,682.678 1732.49,682.678 1733.05,682.678 1733.61,682.678 1734.17,682.678 1734.73,682.678 1735.29,682.678 1735.85,682.678 1736.41,682.678 1736.97,682.678 1737.52,682.678 1738.08,682.678 1738.64,682.678 1739.2,682.678 1739.76,682.678 1740.32,682.678 1740.88,682.678 1741.44,682.678 1742,682.678 1742.56,682.678 1743.12,682.678 1743.68,682.678 1744.24,682.678 1744.79,682.678 1745.35,682.678 1745.91,682.678 1746.47,682.678 1747.03,682.678 1747.59,682.678 1748.15,682.678 1748.71,682.678 1749.27,682.678 1749.83,682.678 1750.39,682.678 1750.95,682.678 1751.51,682.678 1752.06,682.678 1752.62,682.678 1753.18,682.678 1753.74,682.678 1754.3,682.678 1754.86,682.678 1755.42,682.678 1755.98,682.678 1756.54,682.678 1757.1,682.678 1757.66,682.678 1758.22,682.678 1758.78,682.678 1759.34,682.678 1759.89,682.678 1760.45,682.678 1761.01,682.678 1761.57,682.678 1762.13,682.678 1762.69,682.678 1763.25,682.678 1763.81,682.678 1764.37,682.678 1764.93,682.678 1765.49,682.678 1766.05,682.678 1766.61,682.678 1767.16,682.678 1767.72,682.678 1768.28,682.678 1768.84,682.678 1769.4,682.678 1769.96,682.678 1770.52,682.678 1771.08,682.678 1771.64,682.678 1772.2,682.678 1772.76,682.678 1773.32,682.678 1773.88,682.678 1774.43,682.678 1774.99,682.678 1775.55,682.678 1776.11,682.678 1776.67,682.678 1777.23,682.678 1777.79,682.678 1778.35,682.678 1778.91,682.678 1779.47,682.678 1780.03,682.678 1780.59,682.678 1781.15,682.678 1781.71,682.678 1782.26,682.678 1782.82,682.678 1783.38,682.678 1783.94,682.678 1784.5,682.678 1785.06,682.678 1785.62,682.678 1786.18,682.678 1786.74,682.678 1787.3,682.678 1787.86,682.678 1788.42,682.678 1788.98,682.678 1789.53,682.678 1790.09,682.678 1790.65,682.678 1791.21,682.678 1791.77,682.678 1792.33,682.678 1792.89,682.678 1793.45,682.678 1794.01,682.678 1794.57,682.678 1795.13,682.678 1795.69,682.678 1796.25,682.678 1796.8,682.678 1797.36,682.678 1797.92,682.678 1798.48,682.678 1799.04,682.678 1799.6,682.678 1800.16,682.678 1800.72,682.678 1801.28,682.678 1801.84,682.678 1802.4,682.678 1802.96,682.678 1803.52,682.678 1804.08,682.678 1804.63,682.678 1805.19,682.678 1805.75,682.678 1806.31,682.678 1806.87,682.678 1807.43,682.678 1807.99,682.678 1808.55,682.678 1809.11,682.678 1809.67,682.678 1810.23,682.678 1810.79,682.678 1811.35,682.678 1811.9,682.678 1812.46,682.678 1813.02,682.678 1813.58,682.678 1814.14,682.678 1814.7,682.678 1815.26,682.678 1815.82,682.678 1816.38,682.678 1816.94,682.678 1817.5,682.678 1818.06,682.678 1818.62,682.678 1819.18,682.678 1819.73,682.678 1820.29,682.678 1820.85,682.678 1821.41,682.678 1821.97,682.678 1822.53,682.678 1823.09,682.678 1823.65,682.678 1824.21,682.678 1824.77,682.678 1825.33,682.678 1825.89,682.678 1826.45,682.678 1827,682.678 1827.56,682.678 1828.12,682.678 1828.68,682.678 1829.24,682.678 1829.8,682.678 1830.36,682.678 1830.92,682.678 1831.48,682.678 1832.04,682.678 1832.6,682.678 1833.16,682.678 1833.72,682.678 1834.27,682.678 1834.83,682.678 1835.39,682.678 1835.95,682.678 1836.51,682.678 1837.07,682.678 1837.63,682.678 1838.19,682.678 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.029546233844306 ± 0.021748136843669948\nProjected Energy: -4.010519457801343 ± (0.005402772400882938, 0.0052741093952493046)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.470192</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5108e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1171e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.167e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.583e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.705e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.506e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321605\n -3.363124291613378\n -0.759019192277087\n  0.13584182219622143\n  0.15789998694608443\n  0.8767114411781343\n  1.5305929970973287\n  1.5835732611867357\n  3.0728703303258555\n  3.1256726539518507\n  4.862107221562173\n  6.2606948503805935\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
