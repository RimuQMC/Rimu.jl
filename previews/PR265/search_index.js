var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip290\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip290)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip291\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip290)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip292\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.46 2211.02,1003.46 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.091 2211.02,746.091 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.725 2211.02,488.725 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.359 2211.02,231.359 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.46 423.181,1003.46 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.091 423.181,746.091 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.725 423.181,488.725 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.359 423.181,231.359 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.96 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.96 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.62 356.339 1246.62 M356.339 1242.92 Q362.149 1242.92 365.205 1247.52 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.58 365.205 1274.19 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.19 Q344.395 1269.58 344.395 1260.86 Q344.395 1252.11 347.45 1247.52 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M290.043 1016.8 L306.363 1016.8 L306.363 1020.74 L284.418 1020.74 L284.418 1016.8 Q287.08 1014.05 291.664 1009.42 Q296.27 1004.76 297.451 1003.42 Q299.696 1000.9 300.576 999.163 Q301.478 997.404 301.478 995.714 Q301.478 992.959 299.534 991.223 Q297.613 989.487 294.511 989.487 Q292.312 989.487 289.858 990.251 Q287.427 991.015 284.65 992.566 L284.65 987.844 Q287.474 986.709 289.927 986.131 Q292.381 985.552 294.418 985.552 Q299.789 985.552 302.983 988.237 Q306.177 990.922 306.177 995.413 Q306.177 997.543 305.367 999.464 Q304.58 1001.36 302.474 1003.95 Q301.895 1004.63 298.793 1007.84 Q295.691 1011.04 290.043 1016.8 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M316.224 986.177 L334.58 986.177 L334.58 990.112 L320.506 990.112 L320.506 998.584 Q321.524 998.237 322.543 998.075 Q323.562 997.89 324.58 997.89 Q330.367 997.89 333.747 1001.06 Q337.126 1004.23 337.126 1009.65 Q337.126 1015.23 333.654 1018.33 Q330.182 1021.41 323.862 1021.41 Q321.687 1021.41 319.418 1021.04 Q317.173 1020.67 314.765 1019.93 L314.765 1015.23 Q316.849 1016.36 319.071 1016.92 Q321.293 1017.47 323.77 1017.47 Q327.774 1017.47 330.112 1015.37 Q332.45 1013.26 332.45 1009.65 Q332.45 1006.04 330.112 1003.93 Q327.774 1001.83 323.77 1001.83 Q321.895 1001.83 320.02 1002.24 Q318.168 1002.66 316.224 1003.54 L316.224 986.177 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M356.339 989.256 Q352.728 989.256 350.899 992.821 Q349.094 996.362 349.094 1003.49 Q349.094 1010.6 350.899 1014.16 Q352.728 1017.7 356.339 1017.7 Q359.973 1017.7 361.779 1014.16 Q363.608 1010.6 363.608 1003.49 Q363.608 996.362 361.779 992.821 Q359.973 989.256 356.339 989.256 M356.339 985.552 Q362.149 985.552 365.205 990.159 Q368.284 994.742 368.284 1003.49 Q368.284 1012.22 365.205 1016.83 Q362.149 1021.41 356.339 1021.41 Q350.529 1021.41 347.45 1016.83 Q344.395 1012.22 344.395 1003.49 Q344.395 994.742 347.45 990.159 Q350.529 985.552 356.339 985.552 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M286.062 728.811 L304.418 728.811 L304.418 732.746 L290.344 732.746 L290.344 741.218 Q291.363 740.871 292.381 740.709 Q293.4 740.524 294.418 740.524 Q300.205 740.524 303.585 743.695 Q306.964 746.866 306.964 752.283 Q306.964 757.862 303.492 760.964 Q300.02 764.042 293.701 764.042 Q291.525 764.042 289.256 763.672 Q287.011 763.301 284.603 762.561 L284.603 757.862 Q286.687 758.996 288.909 759.551 Q291.131 760.107 293.608 760.107 Q297.613 760.107 299.951 758.001 Q302.288 755.894 302.288 752.283 Q302.288 748.672 299.951 746.565 Q297.613 744.459 293.608 744.459 Q291.733 744.459 289.858 744.876 Q288.006 745.292 286.062 746.172 L286.062 728.811 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M326.177 731.89 Q322.566 731.89 320.737 735.454 Q318.932 738.996 318.932 746.126 Q318.932 753.232 320.737 756.797 Q322.566 760.339 326.177 760.339 Q329.811 760.339 331.617 756.797 Q333.446 753.232 333.446 746.126 Q333.446 738.996 331.617 735.454 Q329.811 731.89 326.177 731.89 M326.177 728.186 Q331.987 728.186 335.043 732.792 Q338.122 737.376 338.122 746.126 Q338.122 754.852 335.043 759.459 Q331.987 764.042 326.177 764.042 Q320.367 764.042 317.288 759.459 Q314.233 754.852 314.233 746.126 Q314.233 737.376 317.288 732.792 Q320.367 728.186 326.177 728.186 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M356.339 731.89 Q352.728 731.89 350.899 735.454 Q349.094 738.996 349.094 746.126 Q349.094 753.232 350.899 756.797 Q352.728 760.339 356.339 760.339 Q359.973 760.339 361.779 756.797 Q363.608 753.232 363.608 746.126 Q363.608 738.996 361.779 735.454 Q359.973 731.89 356.339 731.89 M356.339 728.186 Q362.149 728.186 365.205 732.792 Q368.284 737.376 368.284 746.126 Q368.284 754.852 365.205 759.459 Q362.149 764.042 356.339 764.042 Q350.529 764.042 347.45 759.459 Q344.395 754.852 344.395 746.126 Q344.395 737.376 347.45 732.792 Q350.529 728.186 356.339 728.186 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M284.835 471.445 L307.057 471.445 L307.057 473.435 L294.511 506.005 L289.627 506.005 L301.432 475.38 L284.835 475.38 L284.835 471.445 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M316.224 471.445 L334.58 471.445 L334.58 475.38 L320.506 475.38 L320.506 483.852 Q321.524 483.505 322.543 483.343 Q323.562 483.158 324.58 483.158 Q330.367 483.158 333.747 486.329 Q337.126 489.5 337.126 494.917 Q337.126 500.496 333.654 503.597 Q330.182 506.676 323.862 506.676 Q321.687 506.676 319.418 506.306 Q317.173 505.935 314.765 505.195 L314.765 500.496 Q316.849 501.63 319.071 502.185 Q321.293 502.741 323.77 502.741 Q327.774 502.741 330.112 500.634 Q332.45 498.528 332.45 494.917 Q332.45 491.306 330.112 489.199 Q327.774 487.093 323.77 487.093 Q321.895 487.093 320.02 487.509 Q318.168 487.926 316.224 488.806 L316.224 471.445 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M356.339 474.523 Q352.728 474.523 350.899 478.088 Q349.094 481.63 349.094 488.759 Q349.094 495.866 350.899 499.431 Q352.728 502.972 356.339 502.972 Q359.973 502.972 361.779 499.431 Q363.608 495.866 363.608 488.759 Q363.608 481.63 361.779 478.088 Q359.973 474.523 356.339 474.523 M356.339 470.82 Q362.149 470.82 365.205 475.426 Q368.284 480.01 368.284 488.759 Q368.284 497.486 365.205 502.093 Q362.149 506.676 356.339 506.676 Q350.529 506.676 347.45 502.093 Q344.395 497.486 344.395 488.759 Q344.395 480.01 347.45 475.426 Q350.529 470.82 356.339 470.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M256.664 244.703 L264.303 244.703 L264.303 218.338 L255.992 220.004 L255.992 215.745 L264.256 214.079 L268.932 214.079 L268.932 244.703 L276.571 244.703 L276.571 248.639 L256.664 248.639 L256.664 244.703 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M296.015 217.157 Q292.404 217.157 290.576 220.722 Q288.77 224.264 288.77 231.393 Q288.77 238.5 290.576 242.065 Q292.404 245.606 296.015 245.606 Q299.65 245.606 301.455 242.065 Q303.284 238.5 303.284 231.393 Q303.284 224.264 301.455 220.722 Q299.65 217.157 296.015 217.157 M296.015 213.454 Q301.826 213.454 304.881 218.06 Q307.96 222.643 307.96 231.393 Q307.96 240.12 304.881 244.727 Q301.826 249.31 296.015 249.31 Q290.205 249.31 287.127 244.727 Q284.071 240.12 284.071 231.393 Q284.071 222.643 287.127 218.06 Q290.205 213.454 296.015 213.454 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M326.177 217.157 Q322.566 217.157 320.737 220.722 Q318.932 224.264 318.932 231.393 Q318.932 238.5 320.737 242.065 Q322.566 245.606 326.177 245.606 Q329.811 245.606 331.617 242.065 Q333.446 238.5 333.446 231.393 Q333.446 224.264 331.617 220.722 Q329.811 217.157 326.177 217.157 M326.177 213.454 Q331.987 213.454 335.043 218.06 Q338.122 222.643 338.122 231.393 Q338.122 240.12 335.043 244.727 Q331.987 249.31 326.177 249.31 Q320.367 249.31 317.288 244.727 Q314.233 240.12 314.233 231.393 Q314.233 222.643 317.288 218.06 Q320.367 213.454 326.177 213.454 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M356.339 217.157 Q352.728 217.157 350.899 220.722 Q349.094 224.264 349.094 231.393 Q349.094 238.5 350.899 242.065 Q352.728 245.606 356.339 245.606 Q359.973 245.606 361.779 242.065 Q363.608 238.5 363.608 231.393 Q363.608 224.264 361.779 220.722 Q359.973 217.157 356.339 217.157 M356.339 213.454 Q362.149 213.454 365.205 218.06 Q368.284 222.643 368.284 231.393 Q368.284 240.12 365.205 244.727 Q362.149 249.31 356.339 249.31 Q350.529 249.31 347.45 244.727 Q344.395 240.12 344.395 231.393 Q344.395 222.643 347.45 218.06 Q350.529 213.454 356.339 213.454 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip292)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.359 4017.76,231.359 \"/>\n<polyline clip-path=\"url(#clip292)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1247.56 459.964,1247.04 460.533,1246.46 461.101,1244.77 461.669,1244.06 462.238,1243.26 462.806,1242.36 463.375,1241.39 463.943,1240.32 464.511,1239.13 465.08,1237.86 465.648,1236.48 466.216,1234.99 466.785,1233.37 467.353,1229.57 467.921,1227.68 468.49,1225.64 469.058,1223.46 469.626,1221.1 470.195,1218.61 470.763,1215.95 471.331,1213.06 471.9,1209.04 472.468,1205.83 473.036,1202.4 473.605,1196.73 474.173,1191.82 474.741,1186.67 475.31,1181.3 475.878,1175.81 476.446,1171.09 477.015,1165.12 477.583,1159.91 478.152,1154.49 478.72,1148.73 479.288,1141.8 479.857,1135.7 480.425,1129.41 480.993,1122.85 481.562,1115.02 482.13,1108.01 482.698,1099.82 483.267,1091.18 483.835,1083.48 484.403,1075.66 484.972,1064.53 485.54,1056.34 486.108,1045.9 486.677,1037.44 487.245,1026.78 487.813,1016.85 488.382,1007.8 488.95,996.55 489.518,985.281 490.087,973.843 490.655,964.662 491.224,951.245 491.792,940.881 492.36,929.433 492.929,919.037 493.497,909.47 494.065,899.723 494.634,889.002 495.202,879.394 495.77,867.598 496.339,856.863 496.907,845.096 497.475,832.479 498.044,819.883 498.612,809.518 499.18,799.253 499.749,787.968 500.317,776.841 500.885,766.773 501.454,757.795 502.022,746.653 502.59,735.75 503.159,726.991 503.727,716.193 504.295,704.66 504.864,694.337 505.432,687.282 506.001,677.969 506.569,669.781 507.137,662.714 507.706,654.593 508.274,645.585 508.842,637.667 509.411,629.765 509.979,619.807 510.547,608.871 511.116,601.422 511.684,592.886 512.252,584.629 512.821,576.341 513.389,565.183 513.957,558.334 514.526,549.555 515.094,541.968 515.662,535.68 516.231,528.446 516.799,522.249 517.367,515.185 517.936,507.202 518.504,501.481 519.072,495.921 519.641,488.192 520.209,479.735 520.778,472.543 521.346,463.399 521.914,455.491 522.483,448.998 523.051,444.877 523.619,438.593 524.188,432.584 524.756,427.886 525.324,423.326 525.893,417.491 526.461,412.09 527.029,405.561 527.598,400.601 528.166,393.465 528.734,389.637 529.303,386.019 529.871,383.38 530.439,378.928 531.008,375.529 531.576,373.219 532.144,369.719 532.713,366.512 533.281,364.381 533.85,361.991 534.418,358.821 534.986,355.49 535.555,353.492 536.123,348.521 536.691,345.936 537.26,343.322 537.828,341.633 538.396,339.897 538.965,335.291 539.533,332.795 540.101,329.365 540.67,327.253 541.238,325.121 541.806,319.964 542.375,317.92 542.943,318.08 543.511,316.04 544.08,312.993 544.648,315.289 545.216,312.281 545.785,311.317 546.353,308.329 546.921,309.437 547.49,305.152 548.058,304.458 548.627,301.459 549.195,298.744 549.763,296.955 550.332,296.409 550.9,296.881 551.468,295.184 552.037,294.579 552.605,295.91 553.173,296.216 553.742,292.218 554.31,291.636 554.878,290.767 555.447,290.753 556.015,289.952 556.583,288.193 557.152,288.47 557.72,287.764 558.288,285.927 558.857,284.115 559.425,282.195 559.993,280.337 560.562,276.58 561.13,276.04 561.698,275.6 562.267,274.052 562.835,273.508 563.404,270.137 563.972,268.735 564.54,268.713 565.109,268.646 565.677,266.092 566.245,267.379 566.814,268.332 567.382,265.003 567.95,262.957 568.519,262.832 569.087,261.669 569.655,262.763 570.224,261.648 570.792,260.636 571.36,260.763 571.929,258.612 572.497,258.753 573.065,259.888 573.634,258.886 574.202,257.983 574.77,258.061 575.339,259.192 575.907,261.338 576.476,261.183 577.044,259.841 577.612,258.63 578.181,260.457 578.749,260.196 579.317,261.131 579.886,259.721 580.454,257.595 581.022,259.514 581.591,259.064 582.159,256.684 582.727,255.582 583.296,255.688 583.864,256.711 584.432,256.624 585.001,256.208 585.569,255.813 586.137,254.625 586.706,255.469 587.274,256.13 587.842,254.905 588.411,254.513 588.979,254.253 589.547,256.033 590.116,254.576 590.684,255.257 591.253,252.711 591.821,253.493 592.389,253.125 592.958,253.802 593.526,252.469 594.094,253.254 594.663,252.891 595.231,253.478 595.799,254.023 596.368,250.528 596.936,246.193 597.504,246.239 598.073,246.212 598.641,247.234 599.209,245.255 599.778,243.206 600.346,244.27 600.914,243.478 601.483,243.871 602.051,244.992 602.619,246.048 603.188,246.178 603.756,245.94 604.325,246.767 604.893,245.691 605.461,244.515 606.03,243.628 606.598,241.646 607.166,240.584 607.735,239.68 608.303,237.889 608.871,239.482 609.44,238.973 610.008,239.356 610.576,240.774 611.145,240.075 611.713,240.405 612.281,238.618 612.85,238.988 613.418,241.502 613.986,241.807 614.555,239.76 615.123,240.096 615.691,240.149 616.26,239.376 616.828,238.371 617.396,238.75 617.965,238.27 618.533,238.681 619.102,239.097 619.67,238.451 620.238,236.628 620.807,237.142 621.375,237.261 621.943,237.795 622.512,236.07 623.08,234.455 623.648,236.271 624.217,236.801 624.785,237.267 625.353,236.429 625.922,233.654 626.49,232.158 627.058,230.801 627.627,230.536 628.195,231.517 628.763,233.278 629.332,235.923 629.9,235.227 630.468,235.677 631.037,235.203 631.605,237.599 632.173,239.132 632.742,238.514 633.31,237.653 633.879,237.946 634.447,238.049 635.015,239.445 635.584,238.718 636.152,238.836 636.72,239.229 637.289,241.495 637.857,241.511 638.425,243.675 638.994,243.688 639.562,242.585 640.13,243.617 640.699,244.39 641.267,244.052 641.835,243.675 642.404,243.64 642.972,244.557 643.54,243.2 644.109,242.955 644.677,245.828 645.245,245.462 645.814,246.102 646.382,244.664 646.951,244.31 647.519,241.821 648.087,240.564 648.656,240.576 649.224,242.634 649.792,241.362 650.361,240.34 650.929,240.198 651.497,238.942 652.066,237.731 652.634,236.958 653.202,237.13 653.771,237.208 654.339,235.174 654.907,234.426 655.476,234.566 656.044,233.886 656.612,235.255 657.181,234.761 657.749,234.924 658.317,234.226 658.886,232.347 659.454,233.702 660.022,234.15 660.591,235.597 661.159,235.871 661.728,233.982 662.296,233.471 662.864,232.628 663.433,234.172 664.001,236.567 664.569,236.731 665.138,236.884 665.706,234.99 666.274,234.192 666.843,233.348 667.411,231.732 667.979,229.94 668.548,230.698 669.116,228.995 669.684,230.599 670.253,230.96 670.821,231.472 671.389,234.056 671.958,236.473 672.526,238.757 673.094,234.909 673.663,234.441 674.231,233.733 674.799,235.154 675.368,235.392 675.936,234.591 676.505,237.099 677.073,235.155 677.641,236.498 678.21,236.659 678.778,235.656 679.346,237.799 679.915,237.51 680.483,235.422 681.051,236.3 681.62,236.322 682.188,237.515 682.756,240.362 683.325,238.86 683.893,239.735 684.461,239.601 685.03,238.6 685.598,242.398 686.166,240.783 686.735,240.451 687.303,239.401 687.871,238.052 688.44,241.135 689.008,240.739 689.577,237.343 690.145,233.242 690.713,234.512 691.282,234.663 691.85,232.733 692.418,232.9 692.987,231.961 693.555,231.267 694.123,232.722 694.692,233.214 695.26,233.619 695.828,233.773 696.397,232.814 696.965,234.983 697.533,236.292 698.102,238.611 698.67,238.252 699.238,239.158 699.807,238.937 700.375,237.693 700.943,236.802 701.512,237.96 702.08,237.956 702.648,237.851 703.217,236.549 703.785,237.534 704.354,238.334 704.922,238.063 705.49,240.984 706.059,240.587 706.627,240.273 707.195,241.834 707.764,241.41 708.332,238.923 708.9,239.67 709.469,235.028 710.037,237.085 710.605,236.773 711.174,235.787 711.742,238.887 712.31,237.594 712.879,235.366 713.447,234.165 714.015,232.175 714.584,230.119 715.152,231.502 715.72,231.659 716.289,231.865 716.857,231.952 717.425,229.976 717.994,228.932 718.562,227.208 719.131,228.74 719.699,226.974 720.267,224.35 720.836,224.898 721.404,224.674 721.972,224.619 722.541,228.525 723.109,227.112 723.677,226.72 724.246,227.408 724.814,229.116 725.382,228.325 725.951,227.905 726.519,228.712 727.087,226.971 727.656,228.75 728.224,232.305 728.792,232.513 729.361,232.033 729.929,232.275 730.497,233.584 731.066,234.513 731.634,234.565 732.203,234.585 732.771,236.714 733.339,235.579 733.908,235.698 734.476,233.521 735.044,233.822 735.613,235.08 736.181,235.06 736.749,235.011 737.318,235.204 737.886,236.263 738.454,237.285 739.023,238.254 739.591,237.155 740.159,239.424 740.728,240.101 741.296,238.621 741.864,240.263 742.433,239.08 743.001,238.968 743.569,238.697 744.138,237.392 744.706,237.12 745.274,237.004 745.843,235.792 746.411,235.559 746.98,235.43 747.548,236.438 748.116,237.216 748.685,237.86 749.253,238.601 749.821,238.031 750.39,237.585 750.958,236.176 751.526,230.937 752.095,233.241 752.663,233.132 753.231,233.326 753.8,234.371 754.368,232.13 754.936,234.353 755.505,233.155 756.073,233.086 756.641,234.014 757.21,233.845 757.778,233.77 758.346,233.682 758.915,234.471 759.483,236.492 760.052,236.302 760.62,235.017 761.188,233.928 761.757,233.716 762.325,233.613 762.893,233.507 763.462,235.652 764.03,234.523 764.598,234.306 765.167,233.116 765.735,232.031 766.303,231.876 766.872,232.706 767.44,232.649 768.008,230.656 768.577,228.515 769.145,228.724 769.713,228.278 770.282,229.634 770.85,228.806 771.418,233.048 771.987,233.022 772.555,231.196 773.123,230.389 773.692,231.751 774.26,232.93 774.829,231.086 775.397,231.272 775.965,230.451 776.534,231.763 777.102,230.813 777.67,231.126 778.239,231.309 778.807,231.524 779.375,232.636 779.944,232.643 780.512,230.658 781.08,230.836 781.649,230.803 782.217,229.951 782.785,230.092 783.354,231.17 783.922,231.171 784.49,231.175 785.059,232.407 785.627,232.484 786.195,232.402 786.764,232.334 787.332,233.413 787.9,233.205 788.469,231.208 789.037,231.193 789.606,229.083 790.174,230.162 790.742,230.242 791.311,228.337 791.879,228.619 792.447,226.703 793.016,226.198 793.584,223.552 794.152,223.386 794.721,224.138 795.289,225.049 795.857,225.741 796.426,225.139 796.994,225.872 797.562,226.342 798.131,227.972 798.699,228.266 799.267,229.696 799.836,229.019 800.404,229.611 800.972,227.993 801.541,229.387 802.109,230.828 802.678,228.181 803.246,227.757 803.814,232.466 804.383,230.641 804.951,228.858 805.519,228.139 806.088,229.68 806.656,227.856 807.224,230.383 807.793,230.678 808.361,231.028 808.929,231.303 809.498,234.659 810.066,233.624 810.634,233.752 811.203,232.864 811.771,233.028 812.339,233.336 812.908,233.413 813.476,234.573 814.044,233.842 814.613,233.675 815.181,234.792 815.749,234.921 816.318,234.907 816.886,236.046 817.455,234.916 818.023,235.974 818.591,234.866 819.16,234.962 819.728,234.935 820.296,234.898 820.865,233.903 821.433,234.052 822.001,233.062 822.57,234.131 823.138,235.159 823.706,234.934 824.275,234.888 824.843,237.991 825.411,237.588 825.98,238.017 826.548,236.641 827.116,235.126 827.685,235.949 828.253,234.6 828.821,232.339 829.39,231.322 829.958,233.179 830.526,233.123 831.095,234.378 831.663,234.337 832.232,236.043 832.8,235.841 833.368,236.64 833.937,235.133 834.505,235.863 835.073,237.791 835.642,237.398 836.21,238.059 836.778,237.461 837.347,234.919 837.915,233.559 838.483,233.565 839.052,233.552 839.62,235.689 840.188,236.64 840.757,235.31 841.325,235.113 841.893,238.077 842.462,239.641 843.03,239.05 843.598,238.364 844.167,236.988 844.735,236.826 845.304,236.396 845.872,236.797 846.44,237.477 847.009,237.999 847.577,238.516 848.145,238.028 848.714,236.681 849.282,236.34 849.85,235.843 850.419,234.513 850.987,235.337 851.555,235.991 852.124,236.709 852.692,234.234 853.26,233.898 853.829,234.682 854.397,232.203 854.965,233.184 855.534,234.019 856.102,233.735 856.67,232.462 857.239,231.182 857.807,232.192 858.375,232.032 858.944,232.856 859.512,229.748 860.081,231.757 860.649,232.846 861.217,232.504 861.786,233.253 862.354,235.185 862.922,233.923 863.491,233.653 864.059,231.31 864.627,230.055 865.196,227.851 865.764,227.896 866.332,226.96 866.901,228.233 867.469,229.322 868.037,227.422 868.606,225.539 869.174,224.787 869.742,225.158 870.311,227.911 870.879,227.045 871.447,229.347 872.016,230.5 872.584,231.48 873.152,231.596 873.721,233.619 874.289,232.683 874.858,232.537 875.426,231.586 875.994,231.251 876.563,231.395 877.131,230.302 877.699,230.306 878.268,229.672 878.836,229.829 879.404,228.729 879.973,229.813 880.541,227.824 881.109,227.11 881.678,224.391 882.246,225.899 882.814,225.424 883.383,229.034 883.951,227.044 884.519,225.573 885.088,225.669 885.656,223.94 886.224,223.616 886.793,226.322 887.361,226.616 887.93,226.954 888.498,226.539 889.066,227.314 889.635,227.534 890.203,227.977 890.771,229.455 891.34,232.759 891.908,232.712 892.476,233.632 893.045,234.661 893.613,234.425 894.181,233.372 894.75,233.212 895.318,228.995 895.886,229.294 896.455,229.558 897.023,229.658 897.591,232.036 898.16,229.09 898.728,230.646 899.296,233.95 899.865,232.938 900.433,234.249 901.001,234.386 901.57,233.335 902.138,233.488 902.707,234.447 903.275,236.291 903.843,235.987 904.412,238.858 904.98,236.449 905.548,237.21 906.117,236.878 906.685,236.59 907.253,235.448 907.822,235.413 908.39,236.097 908.958,235.699 909.527,235.491 910.095,234.196 910.663,235.135 911.232,233.781 911.8,233.67 912.368,233.568 912.937,232.606 913.505,231.497 914.073,230.341 914.642,231.482 915.21,232.65 915.779,231.537 916.347,234.553 916.915,234.39 917.484,233.205 918.052,233.261 918.62,233.268 919.189,232.268 919.757,233.189 920.325,232.186 920.894,227.866 921.462,228.125 922.03,228.585 922.599,230.032 923.167,230.006 923.735,232.118 924.304,231.147 924.872,229.991 925.44,232.064 926.009,232.127 926.577,231.952 927.145,231.727 927.714,229.823 928.282,228.829 928.85,229.058 929.419,229.13 929.987,229.078 930.556,231.3 931.124,229.325 931.692,230.497 932.261,229.546 932.829,228.815 933.397,228.665 933.966,229.923 934.534,230.16 935.102,230.365 935.671,230.589 936.239,231.713 936.807,229.727 937.376,232.161 937.944,231.075 938.512,230.218 939.081,230.11 939.649,230.23 940.217,229.623 940.786,230.817 941.354,231.061 941.922,227.197 942.491,229.622 943.059,228.836 943.627,228.295 944.196,228.578 944.764,229.809 945.333,229.008 945.901,231.186 946.469,232.409 947.038,231.533 947.606,233.65 948.174,235.588 948.743,235.254 949.311,236.086 949.879,235.965 950.448,235.742 951.016,233.391 951.584,233.459 952.153,234.64 952.721,234.394 953.289,233.213 953.858,233.155 954.426,231.955 954.994,232.044 955.563,234.102 956.131,234.303 956.699,233.091 957.268,231.768 957.836,233.787 958.405,233.733 958.973,235.649 959.541,234.46 960.11,234.342 960.678,234.25 961.246,234.032 961.815,234.064 962.383,235.942 962.951,234.732 963.52,233.458 964.088,233.507 964.656,232.504 965.225,234.394 965.793,237.391 966.361,237.904 966.93,235.439 967.498,235.19 968.066,235.619 968.635,236.056 969.203,234.839 969.771,235.574 970.34,237.264 970.908,235.6 971.476,234.956 972.045,235.62 972.613,235.465 973.182,235.141 973.75,235.765 974.318,237.338 974.887,236.729 975.455,236.221 976.023,235.744 976.592,234.316 977.16,233.833 977.728,232.627 978.297,233.361 978.865,233.068 979.433,234.045 980.002,230.732 980.57,231.581 981.138,231.245 981.707,230.203 982.275,232.01 982.843,230.93 983.412,230.008 983.98,229.909 984.548,229.939 985.117,229.915 985.685,227.671 986.253,226.803 986.822,224.813 987.39,224.123 987.959,222.509 988.527,222.011 989.095,223.292 989.664,221.924 990.232,223.479 990.8,224.102 991.369,222.656 991.937,223.399 992.505,226.967 993.074,225.154 993.642,224.524 994.21,224.308 994.779,224.93 995.347,230.586 995.915,234.591 996.484,235.443 997.052,234.176 997.62,235.074 998.189,229.755 998.757,231.855 999.325,231.976 999.894,232.012 1000.46,230.905 1001.03,230.016 1001.6,228.221 1002.17,229.432 1002.74,229.387 1003.3,229.831 1003.87,231.187 1004.44,231.301 1005.01,233.141 1005.58,231.984 1006.15,231.127 1006.71,229.058 1007.28,226.298 1007.85,226.697 1008.42,226.047 1008.99,226.406 1009.56,227.892 1010.12,226.378 1010.69,229.819 1011.26,230.948 1011.83,233.218 1012.4,235.354 1012.97,234.069 1013.53,238.248 1014.1,237.871 1014.67,234.376 1015.24,234.301 1015.81,233.301 1016.38,233.224 1016.94,234.205 1017.51,234.054 1018.08,232.924 1018.65,231.973 1019.22,231.025 1019.79,229.148 1020.35,228.239 1020.92,227.637 1021.49,226.811 1022.06,230.25 1022.63,229.217 1023.2,229.305 1023.76,229.708 1024.33,230.914 1024.9,231.034 1025.47,231.145 1026.04,231.239 1026.61,232.267 1027.17,232.185 1027.74,233.078 1028.31,231.948 1028.88,229.793 1029.45,229.8 1030.02,229.879 1030.58,229.993 1031.15,230.034 1031.72,228.946 1032.29,229.314 1032.86,229.492 1033.43,229.554 1033.99,229.873 1034.56,234.256 1035.13,235.236 1035.7,235.121 1036.27,233.655 1036.84,232.83 1037.4,234.008 1037.97,233.004 1038.54,232.003 1039.11,232.121 1039.68,234.332 1040.25,233.065 1040.81,230.976 1041.38,232.021 1041.95,231.189 1042.52,230.219 1043.09,230.193 1043.66,230.405 1044.22,231.637 1044.79,234.918 1045.36,235.657 1045.93,236.498 1046.5,236.25 1047.07,238.927 1047.63,240.508 1048.2,241.861 1048.77,238.98 1049.34,238.338 1049.91,238.858 1050.48,238.576 1051.05,238.917 1051.61,238.321 1052.18,237.766 1052.75,234.344 1053.32,233.236 1053.89,233.079 1054.46,232.804 1055.02,231.431 1055.59,236.532 1056.16,233.942 1056.73,233.835 1057.3,230.648 1057.87,230.731 1058.43,229.907 1059,228.84 1059.57,229.064 1060.14,229.522 1060.71,229.66 1061.28,228.805 1061.84,227.981 1062.41,228.274 1062.98,226.582 1063.55,227.766 1064.12,227.922 1064.69,228.064 1065.25,229.294 1065.82,228.493 1066.39,227.686 1066.96,226.952 1067.53,227.177 1068.1,226.371 1068.66,228.876 1069.23,227.866 1069.8,229.115 1070.37,229.308 1070.94,230.554 1071.51,229.345 1072.07,229.41 1072.64,229.585 1073.21,228.764 1073.78,230.001 1074.35,230.047 1074.92,230.362 1075.48,230.494 1076.05,232.746 1076.62,234.879 1077.19,234.383 1077.76,234.194 1078.33,234.985 1078.89,234.795 1079.46,233.558 1080.03,234.289 1080.6,235.355 1081.17,236.067 1081.74,235.74 1082.3,236.323 1082.87,234.048 1083.44,232.819 1084.01,232.861 1084.58,233.603 1085.15,233.392 1085.71,233.234 1086.28,233.875 1086.85,235.646 1087.42,233.372 1087.99,233.308 1088.56,233.262 1089.12,232.197 1089.69,230.106 1090.26,230.175 1090.83,231.314 1091.4,233.118 1091.97,233.039 1092.53,231.942 1093.1,233.137 1093.67,230.938 1094.24,230.812 1094.81,230.679 1095.38,229.609 1095.94,227.609 1096.51,229.011 1097.08,229.208 1097.65,229.24 1098.22,228.464 1098.79,227.56 1099.35,228.101 1099.92,228.483 1100.49,224.745 1101.06,224.262 1101.63,219.895 1102.2,220.939 1102.76,222.645 1103.33,223.215 1103.9,223.782 1104.47,225.551 1105.04,225.776 1105.61,227.46 1106.17,227.69 1106.74,227.945 1107.31,230.357 1107.88,231.508 1108.45,231.544 1109.02,229.796 1109.58,229.871 1110.15,231.067 1110.72,230.164 1111.29,229.463 1111.86,230.991 1112.43,233.125 1112.99,232.002 1113.56,231.793 1114.13,231.908 1114.7,232.134 1115.27,230.059 1115.84,230.179 1116.4,229.36 1116.97,227.45 1117.54,229.745 1118.11,232.951 1118.68,232.961 1119.25,232.868 1119.81,230.74 1120.38,230.83 1120.95,233.087 1121.52,231.981 1122.09,230.037 1122.66,230.344 1123.23,228.542 1123.79,227.769 1124.36,227.2 1124.93,227.657 1125.5,228.168 1126.07,227.622 1126.64,230.004 1127.2,233.438 1127.77,234.578 1128.34,234.577 1128.91,235.236 1129.48,236.079 1130.05,234.833 1130.61,234.739 1131.18,236.567 1131.75,234.425 1132.32,236.402 1132.89,238.196 1133.46,238.812 1134.02,239.719 1134.59,240.298 1135.16,236.561 1135.73,237.236 1136.3,235.875 1136.87,235.735 1137.43,235.381 1138,237.169 1138.57,235.801 1139.14,236.386 1139.71,237.094 1140.28,233.35 1140.84,235.278 1141.41,233.785 1141.98,233.547 1142.55,234.558 1143.12,233.49 1143.69,234.293 1144.25,233.123 1144.82,234.888 1145.39,234.425 1145.96,234.358 1146.53,235.2 1147.1,234.903 1147.66,233.791 1148.23,231.425 1148.8,231.422 1149.37,230.278 1149.94,229.094 1150.51,229.089 1151.07,228.209 1151.64,230.157 1152.21,228.926 1152.78,230.906 1153.35,230.867 1153.92,230.848 1154.48,231.067 1155.05,230.963 1155.62,229.938 1156.19,229.163 1156.76,231.452 1157.33,232.731 1157.89,231.801 1158.46,230.835 1159.03,230.806 1159.6,230.823 1160.17,231.755 1160.74,231.716 1161.3,232.573 1161.87,230.375 1162.44,230.502 1163.01,228.586 1163.58,227.688 1164.15,227.877 1164.71,226.15 1165.28,228.49 1165.85,227.012 1166.42,227.284 1166.99,227.488 1167.56,229.587 1168.12,230.747 1168.69,231.812 1169.26,233.826 1169.83,233.557 1170.4,232.342 1170.97,234.193 1171.53,233.939 1172.1,233.529 1172.67,232.473 1173.24,235.258 1173.81,233.973 1174.38,234.846 1174.94,234.485 1175.51,236.241 1176.08,233.749 1176.65,231.583 1177.22,231.333 1177.79,231.241 1178.35,230.364 1178.92,231.165 1179.49,233.23 1180.06,234.007 1180.63,232.576 1181.2,234.472 1181.76,233.313 1182.33,230.963 1182.9,229.181 1183.47,228.281 1184.04,228.627 1184.61,227.761 1185.17,228.179 1185.74,228.449 1186.31,228.511 1186.88,228.692 1187.45,229.706 1188.02,228.686 1188.58,228.787 1189.15,224.848 1189.72,225.238 1190.29,226.81 1190.86,224.319 1191.43,226.799 1192,229.249 1192.56,230.474 1193.13,226.51 1193.7,225.73 1194.27,225.168 1194.84,224.604 1195.41,226.386 1195.97,226.902 1196.54,228.466 1197.11,229.742 1197.68,227.767 1198.25,231.517 1198.82,229.508 1199.38,229.643 1199.95,230.902 1200.52,232.2 1201.09,232.141 1201.66,234.177 1202.23,234.285 1202.79,236.19 1203.36,236.953 1203.93,235.499 1204.5,234.27 1205.07,234.135 1205.64,234.12 1206.2,234.829 1206.77,236.732 1207.34,237.554 1207.91,237.107 1208.48,234.649 1209.05,233.478 1209.61,232.189 1210.18,234.323 1210.75,235.073 1211.32,235.674 1211.89,234.364 1212.46,234.164 1213.02,233.861 1213.59,234.473 1214.16,233.149 1214.73,233.149 1215.3,231.939 1215.87,230.842 1216.43,231.97 1217,229.78 1217.57,228.885 1218.14,229.153 1218.71,230.251 1219.28,229.3 1219.84,230.356 1220.41,229.339 1220.98,229.407 1221.55,231.484 1222.12,232.568 1222.69,230.452 1223.25,228.54 1223.82,230.585 1224.39,228.597 1224.96,227.875 1225.53,226.853 1226.1,230.286 1226.66,229.323 1227.23,230.578 1227.8,232.961 1228.37,233.985 1228.94,234.927 1229.51,233.724 1230.07,234.32 1230.64,232.066 1231.21,231.944 1231.78,230.906 1232.35,233.11 1232.92,233.993 1233.48,232.585 1234.05,232.418 1234.62,233.255 1235.19,232.259 1235.76,231.227 1236.33,230.32 1236.89,228.301 1237.46,229.617 1238.03,229.664 1238.6,229.707 1239.17,228.938 1239.74,229.029 1240.3,227.15 1240.87,225.533 1241.44,227.14 1242.01,229.527 1242.58,232.824 1243.15,232.568 1243.71,232.474 1244.28,232.459 1244.85,232.645 1245.42,234.668 1245.99,236.545 1246.56,237.142 1247.12,235.477 1247.69,234.098 1248.26,233.961 1248.83,231.677 1249.4,230.652 1249.97,231.617 1250.53,230.344 1251.1,230.221 1251.67,230.152 1252.24,228.975 1252.81,229.173 1253.38,229.27 1253.94,229.181 1254.51,231.282 1255.08,232.167 1255.65,230.216 1256.22,228.247 1256.79,228.64 1257.35,230.039 1257.92,231.117 1258.49,232.099 1259.06,231.636 1259.63,231.74 1260.2,230.695 1260.76,229.839 1261.33,229.815 1261.9,231.85 1262.47,232.93 1263.04,233.86 1263.61,235.012 1264.18,234.763 1264.74,234.688 1265.31,234.342 1265.88,233.236 1266.45,235.285 1267.02,235.053 1267.59,235.956 1268.15,234.629 1268.72,233.357 1269.29,233.176 1269.86,233.026 1270.43,235.766 1271,235.479 1271.56,234 1272.13,235.743 1272.7,237.448 1273.27,235.91 1273.84,236.438 1274.41,236.879 1274.97,237.402 1275.54,233.567 1276.11,232.087 1276.68,233.946 1277.25,232.593 1277.82,233.456 1278.38,233.454 1278.95,233.571 1279.52,232.437 1280.09,231.986 1280.66,232.967 1281.23,233.849 1281.79,231.633 1282.36,227.512 1282.93,229.851 1283.5,229.946 1284.07,233.012 1284.64,230.729 1285.2,229.733 1285.77,228.571 1286.34,229.808 1286.91,229.977 1287.48,230.194 1288.05,229.16 1288.61,230.271 1289.18,228.22 1289.75,228.444 1290.32,228.339 1290.89,228.513 1291.46,227.503 1292.02,227.581 1292.59,229.969 1293.16,230.125 1293.73,229.099 1294.3,226.998 1294.87,227.247 1295.43,227.562 1296,226.663 1296.57,227.115 1297.14,227.243 1297.71,227.195 1298.28,229.531 1298.84,228.76 1299.41,230.004 1299.98,229.068 1300.55,229.126 1301.12,227.057 1301.69,226.236 1302.25,226.69 1302.82,227.249 1303.39,227.561 1303.96,227.833 1304.53,230.199 1305.1,232.567 1305.66,230.535 1306.23,228.452 1306.8,230.788 1307.37,229.773 1307.94,229.199 1308.51,227.403 1309.07,226.659 1309.64,225.879 1310.21,227.367 1310.78,226.667 1311.35,227.32 1311.92,229.64 1312.48,227.714 1313.05,227.861 1313.62,230.144 1314.19,230.42 1314.76,230.472 1315.33,233.734 1315.89,233.622 1316.46,233.54 1317.03,231.152 1317.6,231.31 1318.17,230.376 1318.74,230.469 1319.3,228.571 1319.87,230.924 1320.44,230.89 1321.01,233.195 1321.58,235.12 1322.15,232.857 1322.71,231.782 1323.28,231.654 1323.85,230.605 1324.42,230.775 1324.99,230.833 1325.56,230.984 1326.12,231.04 1326.69,233.121 1327.26,232.953 1327.83,231.763 1328.4,230.936 1328.97,230.332 1329.53,229.458 1330.1,229.738 1330.67,230.063 1331.24,228.303 1331.81,228.77 1332.38,230.975 1332.94,230.998 1333.51,231.1 1334.08,231.355 1334.65,232.181 1335.22,230.133 1335.79,230.292 1336.36,231.469 1336.92,228.346 1337.49,229.688 1338.06,228.186 1338.63,228.69 1339.2,228.725 1339.77,230.094 1340.33,230.334 1340.9,230.404 1341.47,230.712 1342.04,231.797 1342.61,231.681 1343.18,232.778 1343.74,232.704 1344.31,232.551 1344.88,231.794 1345.45,229.997 1346.02,231.393 1346.59,231.347 1347.15,230.554 1347.72,230.832 1348.29,228.885 1348.86,226.949 1349.43,228.334 1350,228.789 1350.56,229.144 1351.13,230.815 1351.7,232.167 1352.27,231.005 1352.84,231.401 1353.41,229.611 1353.97,229.912 1354.54,231.443 1355.11,233.474 1355.68,232.444 1356.25,233.513 1356.82,234.451 1357.38,235.593 1357.95,237.321 1358.52,237.928 1359.09,240.642 1359.66,238.113 1360.23,236.802 1360.79,237.502 1361.36,236.064 1361.93,234.873 1362.5,234.736 1363.07,235.474 1363.64,235.211 1364.2,232.932 1364.77,231.726 1365.34,232.95 1365.91,234.099 1366.48,232.119 1367.05,232.116 1367.61,231.866 1368.18,231.816 1368.75,230.846 1369.32,232.791 1369.89,233.576 1370.46,234.399 1371.02,235.143 1371.59,235.937 1372.16,235.381 1372.73,237.249 1373.3,236.906 1373.87,235.545 1374.43,235.357 1375,235.116 1375.57,235.874 1376.14,236.856 1376.71,237.381 1377.28,236.907 1377.84,236.524 1378.41,236.199 1378.98,233.844 1379.55,232.639 1380.12,232.487 1380.69,232.277 1381.25,234.144 1381.82,233.853 1382.39,233.669 1382.96,233.516 1383.53,233.133 1384.1,234.559 1384.66,233.539 1385.23,235.241 1385.8,234.058 1386.37,232.951 1386.94,234.941 1387.51,233.46 1388.07,232.19 1388.64,232.094 1389.21,231.823 1389.78,231.679 1390.35,230.465 1390.92,232.618 1391.48,234.367 1392.05,234.891 1392.62,233.73 1393.19,234.488 1393.76,235.165 1394.33,233.669 1394.89,230.282 1395.46,229.325 1396.03,225.277 1396.6,225.563 1397.17,223.705 1397.74,225.201 1398.3,224.584 1398.87,224.904 1399.44,226.223 1400.01,228.332 1400.58,227.497 1401.15,225.919 1401.71,227.373 1402.28,226.485 1402.85,227.83 1403.42,229.171 1403.99,231.332 1404.56,233.277 1405.13,234.187 1405.69,232.854 1406.26,233.99 1406.83,234.849 1407.4,234.696 1407.97,234.351 1408.54,234.325 1409.1,232.041 1409.67,233.035 1410.24,230.482 1410.81,230.394 1411.38,229.332 1411.95,231.749 1412.51,231.489 1413.08,232.759 1413.65,231.547 1414.22,231.286 1414.79,233.328 1415.36,233.221 1415.92,232.164 1416.49,231.072 1417.06,230.835 1417.63,229.537 1418.2,231.936 1418.77,230.808 1419.33,229.979 1419.9,229.041 1420.47,231.356 1421.04,231.179 1421.61,232.393 1422.18,231.262 1422.74,231.298 1423.31,229.129 1423.88,229.18 1424.45,229.26 1425.02,228.51 1425.59,229.785 1426.15,228.593 1426.72,228.699 1427.29,229.752 1427.86,230.81 1428.43,230.743 1429,230.844 1429.56,229.764 1430.13,230.167 1430.7,228.116 1431.27,227.413 1431.84,227.741 1432.41,225.699 1432.97,225.966 1433.54,224.208 1434.11,225.769 1434.68,228.067 1435.25,229.349 1435.82,232.641 1436.38,233.711 1436.95,232.382 1437.52,232.352 1438.09,233.39 1438.66,232.37 1439.23,231 1439.79,231.93 1440.36,230.783 1440.93,230.931 1441.5,231.897 1442.07,229.874 1442.64,230.858 1443.2,230.938 1443.77,231.117 1444.34,230.248 1444.91,230.265 1445.48,230.21 1446.05,231.15 1446.61,232.491 1447.18,231.371 1447.75,232.351 1448.32,233.515 1448.89,235.296 1449.46,234.092 1450.02,234.97 1450.59,233.894 1451.16,233.675 1451.73,232.459 1452.3,233.467 1452.87,233.404 1453.43,231.247 1454,231.139 1454.57,229.063 1455.14,232.55 1455.71,233.575 1456.28,232.369 1456.84,233.424 1457.41,234.199 1457.98,234.032 1458.55,233.928 1459.12,234.671 1459.69,234.345 1460.25,233.029 1460.82,231.674 1461.39,232.743 1461.96,231.843 1462.53,231.924 1463.1,233.228 1463.66,229.824 1464.23,231.909 1464.8,232.982 1465.37,232.621 1465.94,232.283 1466.51,233.16 1467.07,232.971 1467.64,233.727 1468.21,234.286 1468.78,233.992 1469.35,232.766 1469.92,230.669 1470.48,230.472 1471.05,230.667 1471.62,230.571 1472.19,232.675 1472.76,232.645 1473.33,232.304 1473.89,232.052 1474.46,229.99 1475.03,232.141 1475.6,231.852 1476.17,232.709 1476.74,232.512 1477.31,233.423 1477.87,231.983 1478.44,228.939 1479.01,229.848 1479.58,231.919 1480.15,232.733 1480.72,232.53 1481.28,231.211 1481.85,227.986 1482.42,228.079 1482.99,233.417 1483.56,234.028 1484.13,234.909 1484.69,232.573 1485.26,231.402 1485.83,231.563 1486.4,231.648 1486.97,229.615 1487.54,229.881 1488.1,226.806 1488.67,228.087 1489.24,230.262 1489.81,229.362 1490.38,226.427 1490.95,226.871 1491.51,224.941 1492.08,223.232 1492.65,224.832 1493.22,224.406 1493.79,224.137 1494.36,223.488 1494.92,222.806 1495.49,227.509 1496.06,227.886 1496.63,228.169 1497.2,229.46 1497.77,230.756 1498.33,232.049 1498.9,234.163 1499.47,232.932 1500.04,232.919 1500.61,232.806 1501.18,232.879 1501.74,234.87 1502.31,233.71 1502.88,231.508 1503.45,231.588 1504.02,231.394 1504.59,233.371 1505.15,235.303 1505.72,234.92 1506.29,232.471 1506.86,233.409 1507.43,231.289 1508,232.102 1508.56,232.16 1509.13,234.066 1509.7,235.081 1510.27,233.767 1510.84,233.491 1511.41,233.294 1511.97,234.278 1512.54,235.165 1513.11,235.023 1513.68,235.842 1514.25,235.478 1514.82,235.16 1515.38,233.903 1515.95,233.691 1516.52,232.627 1517.09,232.399 1517.66,231.465 1518.23,230.611 1518.79,232.625 1519.36,231.258 1519.93,229.203 1520.5,228.279 1521.07,229.446 1521.64,230.751 1522.2,229.73 1522.77,227.63 1523.34,227.977 1523.91,227.033 1524.48,226.316 1525.05,226.595 1525.61,226.768 1526.18,223.999 1526.75,226.619 1527.32,226.964 1527.89,229.261 1528.46,227.512 1529.02,227.886 1529.59,228.252 1530.16,229.514 1530.73,229.558 1531.3,226.787 1531.87,226.932 1532.43,232.574 1533,232.565 1533.57,230.508 1534.14,228.724 1534.71,228.008 1535.28,230.456 1535.84,231.566 1536.41,232.45 1536.98,230.349 1537.55,228.36 1538.12,229.732 1538.69,232.185 1539.25,233.037 1539.82,233.012 1540.39,233.883 1540.96,233.762 1541.53,233.441 1542.1,233.566 1542.66,232.499 1543.23,233.516 1543.8,232.362 1544.37,233.414 1544.94,236.549 1545.51,233.889 1546.08,231.739 1546.64,229.656 1547.21,228.811 1547.78,227.947 1548.35,227.876 1548.92,229.268 1549.49,230.444 1550.05,231.48 1550.62,231.638 1551.19,232.86 1551.76,232.523 1552.33,231.507 1552.9,230.495 1553.46,232.751 1554.03,232.629 1554.6,233.615 1555.17,232.401 1555.74,231.364 1556.31,232.192 1556.87,230.165 1557.44,231.57 1558.01,233.531 1558.58,233.285 1559.15,235.296 1559.72,236.081 1560.28,235.55 1560.85,235.163 1561.42,234.963 1561.99,234.733 1562.56,233.183 1563.13,232.162 1563.69,235.397 1564.26,236.015 1564.83,236.759 1565.4,237.359 1565.97,234.8 1566.54,233.345 1567.1,231.322 1567.67,232.319 1568.24,234.362 1568.81,234.231 1569.38,234.833 1569.95,234.75 1570.51,233.427 1571.08,233.07 1571.65,231.844 1572.22,231.701 1572.79,232.811 1573.36,231.592 1573.92,230.569 1574.49,230.458 1575.06,229.548 1575.63,230.319 1576.2,229.35 1576.77,230.613 1577.33,229.364 1577.9,228.358 1578.47,230.511 1579.04,229.406 1579.61,228.368 1580.18,228.386 1580.74,229.638 1581.31,229.629 1581.88,229.631 1582.45,229.637 1583.02,228.771 1583.59,229.905 1584.15,230.885 1584.72,232.906 1585.29,233.606 1585.86,235.442 1586.43,233.992 1587,232.593 1587.56,230.399 1588.13,229.367 1588.7,229.409 1589.27,229.288 1589.84,230.622 1590.41,230.564 1590.97,229.566 1591.54,230.325 1592.11,229.415 1592.68,231.431 1593.25,230.304 1593.82,228.236 1594.38,227.381 1594.95,227.432 1595.52,226.822 1596.09,228.199 1596.66,229.61 1597.23,229.819 1597.79,229.822 1598.36,231.018 1598.93,232.175 1599.5,232.982 1600.07,231.847 1600.64,231.738 1601.2,233.886 1601.77,235.714 1602.34,234.301 1602.91,232.957 1603.48,231.847 1604.05,230.998 1604.61,231.918 1605.18,230.67 1605.75,232.807 1606.32,234.738 1606.89,233.569 1607.46,231.211 1608.02,232.228 1608.59,232.243 1609.16,232.131 1609.73,230.118 1610.3,230.327 1610.87,228.481 1611.43,227.654 1612,227.977 1612.57,228.229 1613.14,228.724 1613.71,228.802 1614.28,231.094 1614.84,232.32 1615.41,233.292 1615.98,233.179 1616.55,230.787 1617.12,230.735 1617.69,231.688 1618.26,230.649 1618.82,231.689 1619.39,231.699 1619.96,231.579 1620.53,231.826 1621.1,231.771 1621.67,231.541 1622.23,231.389 1622.8,232.314 1623.37,231.071 1623.94,224.793 1624.51,224.357 1625.08,223.818 1625.64,225.494 1626.21,225.931 1626.78,228.181 1627.35,230.628 1627.92,230.505 1628.49,230.514 1629.05,230.572 1629.62,231.58 1630.19,230.656 1630.76,232.829 1631.33,232.568 1631.9,232.445 1632.46,233.382 1633.03,233.177 1633.6,234.301 1634.17,230.904 1634.74,231.026 1635.31,231.254 1635.87,232.207 1636.44,233.823 1637.01,233.738 1637.58,234.812 1638.15,232.599 1638.72,231.484 1639.28,231.775 1639.85,229.8 1640.42,227.913 1640.99,228.193 1641.56,227.45 1642.13,226.617 1642.69,228.167 1643.26,228.711 1643.83,226.967 1644.4,225.409 1644.97,225.801 1645.54,226.209 1646.1,226.573 1646.67,227.071 1647.24,228.388 1647.81,229.576 1648.38,229.471 1648.95,229.935 1649.51,232.221 1650.08,230.972 1650.65,232.04 1651.22,231.276 1651.79,230.281 1652.36,230.509 1652.92,231.533 1653.49,234.652 1654.06,236.806 1654.63,235.684 1655.2,236.569 1655.77,236.399 1656.33,233.854 1656.9,235.761 1657.47,234.256 1658.04,233.775 1658.61,232.72 1659.18,231.538 1659.74,231.507 1660.31,231.577 1660.88,232.669 1661.45,234.465 1662.02,234.216 1662.59,233.943 1663.15,231.665 1663.72,229.566 1664.29,228.583 1664.86,228.854 1665.43,231.197 1666,229.388 1666.56,229.335 1667.13,231.815 1667.7,230.786 1668.27,229.701 1668.84,226.56 1669.41,229.136 1669.97,228.326 1670.54,227.626 1671.11,231.02 1671.68,230.886 1672.25,230.933 1672.82,230.15 1673.38,230.327 1673.95,230.249 1674.52,230.211 1675.09,228.392 1675.66,228.435 1676.23,230.704 1676.79,232.81 1677.36,231.561 1677.93,231.552 1678.5,233.63 1679.07,233.7 1679.64,233.507 1680.2,233.466 1680.77,234.171 1681.34,234.045 1681.91,233.001 1682.48,234.034 1683.05,237.025 1683.61,235.734 1684.18,235.54 1684.75,234.432 1685.32,237.106 1685.89,235.747 1686.46,235.412 1687.02,235.145 1687.59,235.969 1688.16,235.608 1688.73,237.292 1689.3,236.855 1689.87,234.426 1690.44,234.319 1691,233.013 1691.57,233.786 1692.14,234.688 1692.71,234.582 1693.28,233.4 1693.85,232.305 1694.41,234.433 1694.98,235.208 1695.55,234.784 1696.12,233.67 1696.69,232.288 1697.26,233.188 1697.82,232.833 1698.39,231.696 1698.96,228.605 1699.53,231.817 1700.1,231.734 1700.67,231.436 1701.23,231.365 1701.8,233.446 1702.37,233.315 1702.94,234.004 1703.51,232.895 1704.08,234.014 1704.64,233.747 1705.21,230.535 1705.78,229.592 1706.35,229.851 1706.92,228.939 1707.49,228.83 1708.05,228.982 1708.62,232.259 1709.19,232.146 1709.76,232.805 1710.33,235.731 1710.9,235.363 1711.46,235.031 1712.03,234.662 1712.6,235.531 1713.17,235.316 1713.74,235.912 1714.31,234.418 1714.87,233.226 1715.44,234.132 1716.01,232.583 1716.58,235.449 1717.15,237.083 1717.72,236.464 1718.28,238.116 1718.85,235.453 1719.42,235.011 1719.99,233.728 1720.56,232.475 1721.13,233.231 1721.69,233.93 1722.26,234.72 1722.83,236.412 1723.4,237.781 1723.97,237.261 1724.54,235.728 1725.1,234.125 1725.67,233.762 1726.24,233.345 1726.81,234.04 1727.38,233.796 1727.95,231.614 1728.51,231.395 1729.08,229.403 1729.65,230.387 1730.22,230.446 1730.79,228.192 1731.36,228.478 1731.92,226.599 1732.49,226.817 1733.06,227.065 1733.63,227.076 1734.2,226.255 1734.77,224.317 1735.33,222.671 1735.9,222.287 1736.47,223.902 1737.04,225.413 1737.61,225.711 1738.18,227.08 1738.74,228.069 1739.31,224.031 1739.88,223.803 1740.45,224.331 1741.02,222.616 1741.59,222.187 1742.15,221.769 1742.72,222.554 1743.29,224.238 1743.86,224.473 1744.43,224.059 1745,224.591 1745.56,226.068 1746.13,225.489 1746.7,223.974 1747.27,225.619 1747.84,225.208 1748.41,224.843 1748.97,227.45 1749.54,227.744 1750.11,228.066 1750.68,229.521 1751.25,227.696 1751.82,228.065 1752.38,225.451 1752.95,228.032 1753.52,227.282 1754.09,226.589 1754.66,228.948 1755.23,231.354 1755.79,231.398 1756.36,234.743 1756.93,233.255 1757.5,232.046 1758.07,230.143 1758.64,230.498 1759.21,228.624 1759.77,228.77 1760.34,232.038 1760.91,229.952 1761.48,229.07 1762.05,229.446 1762.62,230.874 1763.18,233.128 1763.75,233.044 1764.32,231.975 1764.89,233.196 1765.46,235.26 1766.03,232.766 1766.59,232.4 1767.16,232.499 1767.73,231.458 1768.3,229.303 1768.87,229.538 1769.44,230.834 1770,232.022 1770.57,233.281 1771.14,232.256 1771.71,235.098 1772.28,235.056 1772.85,235.711 1773.41,233.416 1773.98,231.474 1774.55,231.565 1775.12,232.605 1775.69,232.795 1776.26,233.758 1776.82,232.628 1777.39,233.609 1777.96,233.355 1778.53,231.269 1779.1,230.326 1779.67,230.472 1780.23,230.547 1780.8,229.781 1781.37,230.842 1781.94,231.122 1782.51,232.23 1783.08,234.285 1783.64,234.187 1784.21,232.125 1784.78,233.036 1785.35,232.99 1785.92,230.92 1786.49,230.968 1787.05,234.133 1787.62,234.918 1788.19,233.86 1788.76,234.851 1789.33,235.495 1789.9,235.082 1790.46,234.778 1791.03,233.48 1791.6,234.361 1792.17,232.018 1792.74,232.033 1793.31,234.025 1793.87,233.725 1794.44,229.471 1795.01,231.476 1795.58,235.462 1796.15,234.136 1796.72,232.745 1797.28,231.689 1797.85,231.861 1798.42,232.078 1798.99,230.145 1799.56,228.034 1800.13,228.433 1800.69,227.697 1801.26,228.005 1801.83,229.373 1802.4,229.719 1802.97,229.94 1803.54,228.924 1804.1,228.094 1804.67,228.299 1805.24,227.478 1805.81,226.661 1806.38,228.131 1806.95,228.221 1807.51,230.518 1808.08,230.67 1808.65,232.023 1809.22,231.039 1809.79,230.183 1810.36,228.387 1810.92,230.747 1811.49,231.828 1812.06,230.804 1812.63,229.757 1813.2,230.049 1813.77,230.492 1814.33,229.63 1814.9,229.878 1815.47,230.223 1816.04,231.626 1816.61,233.787 1817.18,233.585 1817.74,234.562 1818.31,235.575 1818.88,234.409 1819.45,234.336 1820.02,235.287 1820.59,231.899 1821.15,233.018 1821.72,232.963 1822.29,232.893 1822.86,232.595 1823.43,232.232 1824,229.146 1824.56,228.047 1825.13,228.345 1825.7,229.653 1826.27,232.759 1826.84,231.651 1827.41,229.756 1827.97,229.904 1828.54,229.983 1829.11,233.31 1829.68,233.068 1830.25,232.941 1830.82,233.876 1831.39,232.541 1831.95,232.388 1832.52,231.31 1833.09,232.101 1833.66,233.978 1834.23,234.728 1834.8,233.536 1835.36,234.467 1835.93,231.163 1836.5,232.196 1837.07,232.155 1837.64,229.215 1838.21,227.46 1838.77,226.638 1839.34,228.963 1839.91,229.12 1840.48,228.172 1841.05,228.648 1841.62,227.659 1842.18,227.198 1842.75,225.549 1843.32,227.27 1843.89,227.515 1844.46,226.724 1845.03,228.177 1845.59,229.565 1846.16,232.808 1846.73,232.724 1847.3,231.618 1847.87,235.452 1848.44,233.188 1849,233.273 1849.57,233.324 1850.14,231.081 1850.71,230.176 1851.28,229.503 1851.85,228.638 1852.41,229.096 1852.98,231.324 1853.55,232.507 1854.12,232.611 1854.69,234.777 1855.26,233.597 1855.82,234.668 1856.39,234.313 1856.96,234.329 1857.53,236.228 1858.1,236.823 1858.67,235.521 1859.23,237.319 1859.8,237.727 1860.37,237.155 1860.94,237.958 1861.51,238.61 1862.08,238.078 1862.64,237.494 1863.21,238.157 1863.78,236.838 1864.35,236.472 1864.92,235.265 1865.49,234.878 1866.05,234.443 1866.62,234.227 1867.19,233.01 1867.76,234.984 1868.33,233.571 1868.9,233.357 1869.46,232.276 1870.03,234.075 1870.6,234.807 1871.17,235.603 1871.74,236.335 1872.31,234.781 1872.87,235.501 1873.44,235.207 1874.01,233.906 1874.58,232.715 1875.15,232.502 1875.72,234.378 1876.28,233.168 1876.85,233.884 1877.42,232.551 1877.99,233.268 1878.56,232.05 1879.13,231.684 1879.69,231.642 1880.26,230.483 1880.83,226.356 1881.4,225.753 1881.97,225.11 1882.54,227.222 1883.1,228.381 1883.67,228.555 1884.24,228.718 1884.81,226.715 1885.38,226.899 1885.95,228.306 1886.51,226.353 1887.08,227.694 1887.65,227.928 1888.22,228.992 1888.79,225.757 1889.36,226.326 1889.92,224.719 1890.49,225.178 1891.06,226.752 1891.63,229.142 1892.2,229.99 1892.77,228.228 1893.33,229.293 1893.9,230.457 1894.47,229.625 1895.04,231.825 1895.61,232.974 1896.18,235.848 1896.74,235.555 1897.31,235.144 1897.88,233.757 1898.45,233.495 1899.02,234.271 1899.59,233.098 1900.16,236.05 1900.72,235.368 1901.29,237.219 1901.86,237.956 1902.43,236.499 1903,235.097 1903.57,235.935 1904.13,235.534 1904.7,236.291 1905.27,236.09 1905.84,235.695 1906.41,236.295 1906.98,237.939 1907.54,238.458 1908.11,239.793 1908.68,239.104 1909.25,240.397 1909.82,239.652 1910.39,238.928 1910.95,238.332 1911.52,236.766 1912.09,236.126 1912.66,234.604 1913.23,235.214 1913.8,233.726 1914.36,233.412 1914.93,231.201 1915.5,229.683 1916.07,229.696 1916.64,230.35 1917.21,231.087 1917.77,227.848 1918.34,227.702 1918.91,227.759 1919.48,228.877 1920.05,229.872 1920.62,228.832 1921.18,228.861 1921.75,228.796 1922.32,225.807 1922.89,224.115 1923.46,224.307 1924.03,224.564 1924.59,223.835 1925.16,223.097 1925.73,223.776 1926.3,223.18 1926.87,225.789 1927.44,223.904 1928,223.367 1928.57,223.943 1929.14,222.447 1929.71,221.187 1930.28,222.799 1930.85,224.478 1931.41,225.827 1931.98,224.35 1932.55,223.941 1933.12,224.631 1933.69,224.128 1934.26,226.383 1934.82,225.624 1935.39,226.178 1935.96,227.616 1936.53,228.071 1937.1,224.328 1937.67,225.958 1938.23,225.273 1938.8,224.726 1939.37,226.341 1939.94,230.747 1940.51,230.051 1941.08,230.247 1941.64,229.184 1942.21,230.447 1942.78,230.316 1943.35,230.665 1943.92,229.797 1944.49,226.999 1945.05,225.482 1945.62,227.019 1946.19,227.278 1946.76,227.678 1947.33,227.054 1947.9,228.399 1948.46,227.698 1949.03,227.327 1949.6,227.857 1950.17,229.43 1950.74,230.835 1951.31,232.025 1951.87,230.074 1952.44,229.374 1953.01,231.629 1953.58,232.783 1954.15,232.581 1954.72,234.513 1955.28,233.094 1955.85,233.083 1956.42,233.825 1956.99,231.724 1957.56,231.891 1958.13,230.877 1958.69,233.085 1959.26,233.197 1959.83,232.067 1960.4,232.329 1960.97,231.467 1961.54,231.647 1962.1,229.744 1962.67,229.95 1963.24,231.116 1963.81,231.078 1964.38,233.303 1964.95,234.391 1965.51,233.243 1966.08,232.273 1966.65,232.348 1967.22,233.313 1967.79,233.412 1968.36,234.263 1968.92,234.108 1969.49,234.131 1970.06,233.917 1970.63,235.967 1971.2,238.898 1971.77,238.415 1972.34,236.882 1972.9,236.634 1973.47,236.239 1974.04,235.924 1974.61,236.52 1975.18,233.928 1975.75,235.855 1976.31,234.404 1976.88,235.269 1977.45,236.072 1978.02,234.853 1978.59,235.743 1979.16,234.247 1979.72,233.874 1980.29,231.74 1980.86,231.655 1981.43,231.873 1982,232.859 1982.57,233.681 1983.13,232.511 1983.7,231.467 1984.27,233.517 1984.84,232.241 1985.41,231.115 1985.98,229.959 1986.54,230.27 1987.11,230.417 1987.68,230.571 1988.25,229.79 1988.82,229.864 1989.39,231.981 1989.95,230.994 1990.52,229.993 1991.09,231.08 1991.66,231.145 1992.23,231.89 1992.8,232.595 1993.36,230.599 1993.93,228.67 1994.5,227.893 1995.07,227.908 1995.64,228.327 1996.21,229.584 1996.77,231.725 1997.34,232.929 1997.91,232.648 1998.48,234.683 1999.05,232.306 1999.62,233.35 2000.18,233.21 2000.75,233.217 2001.32,233.156 2001.89,232.897 2002.46,233.808 2003.03,231.472 2003.59,231.51 2004.16,229.482 2004.73,230.645 2005.3,230.722 2005.87,229.623 2006.44,229.678 2007,230.815 2007.57,233.19 2008.14,231.162 2008.71,232.208 2009.28,232.322 2009.85,233.27 2010.41,233.06 2010.98,233.084 2011.55,233.842 2012.12,234.568 2012.69,236.248 2013.26,236.93 2013.82,235.615 2014.39,236.504 2014.96,236.488 2015.53,236.236 2016.1,235.858 2016.67,236.413 2017.23,237.14 2017.8,236.77 2018.37,233.468 2018.94,232.072 2019.51,231.927 2020.08,232.861 2020.64,233.727 2021.21,234.399 2021.78,235.092 2022.35,232.645 2022.92,231.263 2023.49,232.209 2024.05,232.065 2024.62,231.06 2025.19,226.95 2025.76,228.218 2026.33,228.321 2026.9,229.323 2027.46,231.456 2028.03,231.301 2028.6,231.056 2029.17,231.311 2029.74,231.305 2030.31,232.078 2030.87,233.948 2031.44,232.716 2032.01,232.548 2032.58,231.421 2033.15,230.412 2033.72,228.205 2034.28,227.43 2034.85,227.589 2035.42,229.764 2035.99,231.805 2036.56,231.705 2037.13,231.755 2037.69,230.793 2038.26,228.577 2038.83,229.719 2039.4,230.028 2039.97,230.002 2040.54,228.826 2041.11,229.969 2041.67,229.942 2042.24,227.915 2042.81,226.287 2043.38,227.825 2043.95,228.07 2044.52,227.285 2045.08,229.781 2045.65,228.763 2046.22,227.927 2046.79,227.041 2047.36,228.312 2047.93,228.536 2048.49,227.758 2049.06,229.917 2049.63,231.071 2050.2,231.125 2050.77,233.262 2051.34,234.29 2051.9,231.776 2052.47,230.858 2053.04,227.043 2053.61,228.294 2054.18,226.504 2054.75,227.826 2055.31,227.096 2055.88,226.273 2056.45,226.798 2057.02,229.458 2057.59,230.735 2058.16,227.525 2058.72,227.758 2059.29,228.162 2059.86,227.262 2060.43,227.58 2061,228.966 2061.57,230.238 2062.13,231.265 2062.7,231.349 2063.27,231.317 2063.84,231.435 2064.41,231.432 2064.98,229.628 2065.54,229.789 2066.11,229.64 2066.68,230.876 2067.25,230.105 2067.82,230.103 2068.39,231.356 2068.95,231.39 2069.52,232.396 2070.09,233.418 2070.66,232.102 2071.23,233.208 2071.8,232.278 2072.36,232.31 2072.93,231.289 2073.5,231.328 2074.07,232.564 2074.64,231.752 2075.21,231.776 2075.77,231.905 2076.34,225.866 2076.91,228.376 2077.48,228.676 2078.05,229.025 2078.62,230.37 2079.18,228.527 2079.75,227.67 2080.32,230.127 2080.89,227.081 2081.46,231.601 2082.03,233.593 2082.59,233.322 2083.16,233.006 2083.73,232.148 2084.3,232.258 2084.87,233.363 2085.44,232.22 2086,232.322 2086.57,231.528 2087.14,230.637 2087.71,231.761 2088.28,235.896 2088.85,234.669 2089.41,230.548 2089.98,230.53 2090.55,230.636 2091.12,230.613 2091.69,228.606 2092.26,227.712 2092.82,228.019 2093.39,226.156 2093.96,226.475 2094.53,226.877 2095.1,225.058 2095.67,227.76 2096.23,228.044 2096.8,229.687 2097.37,231.038 2097.94,231.263 2098.51,230.479 2099.08,228.649 2099.64,228.84 2100.21,228.055 2100.78,228.354 2101.35,228.54 2101.92,228.736 2102.49,229.927 2103.05,230.066 2103.62,230.278 2104.19,230.478 2104.76,234.727 2105.33,231.516 2105.9,233.825 2106.46,233.838 2107.03,234.893 2107.6,238.756 2108.17,236.516 2108.74,236.106 2109.31,236.822 2109.87,236.53 2110.44,236.136 2111.01,235.894 2111.58,235.617 2112.15,237.21 2112.72,240.961 2113.29,240.411 2113.85,240.855 2114.42,240.281 2114.99,239.529 2115.56,241.001 2116.13,241.153 2116.7,240.144 2117.26,240.505 2117.83,240.882 2118.4,239.962 2118.97,239.35 2119.54,239.832 2120.11,237.917 2120.67,237.363 2121.24,237.716 2121.81,237.302 2122.38,234.681 2122.95,233.364 2123.52,233.915 2124.08,234.354 2124.65,234.028 2125.22,232.833 2125.79,231.815 2126.36,232.662 2126.93,232.433 2127.49,232.962 2128.06,234.849 2128.63,234.548 2129.2,232.381 2129.77,233.308 2130.34,232.947 2130.9,232.935 2131.47,231.727 2132.04,232.638 2132.61,233.623 2133.18,233.383 2133.75,233.099 2134.31,232.851 2134.88,228.698 2135.45,228.83 2136.02,228.87 2136.59,229.086 2137.16,228.02 2137.72,223.991 2138.29,225.229 2138.86,225.507 2139.43,226.657 2140,227.869 2140.57,231.163 2141.13,229.009 2141.7,229.225 2142.27,227.387 2142.84,226.637 2143.41,226.877 2143.98,229.184 2144.54,230.379 2145.11,230.268 2145.68,232.326 2146.25,233.203 2146.82,234.059 2147.39,232.723 2147.95,231.363 2148.52,230.03 2149.09,229.109 2149.66,227.911 2150.23,227.1 2150.8,226.241 2151.36,227.602 2151.93,226.911 2152.5,227.141 2153.07,224.289 2153.64,224.859 2154.21,225.19 2154.77,228.642 2155.34,226.728 2155.91,225.904 2156.48,224.12 2157.05,223.407 2157.62,224.164 2158.18,224.738 2158.75,224.19 2159.32,223.652 2159.89,224.45 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip290)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip290)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip290)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip290)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.034 ± 0.025\n  with uncertainty of ± 0.0022667967918246256\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01309 ± (0.00231945, 0.00234766) (MC)\n  95% confidence interval: [-4.01753, -4.00875]) (MC)\n  linear error propagation: -4.01331 ± 0.0023473\n  |δ_y| = |0.00174864| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.013088579629471, val_l = 0.004442760882104935, val_u = 0.004342619663770364)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip320\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip320)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip321\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip320)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip322\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip320)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1152.71 2211.02,1152.71 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1002.22 2211.02,1002.22 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,851.725 2211.02,851.725 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,701.235 2211.02,701.235 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,550.745 2211.02,550.745 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,400.255 2211.02,400.255 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,249.764 2211.02,249.764 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1152.71 365.751,1152.71 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1002.22 365.751,1002.22 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,851.725 365.751,851.725 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,701.235 365.751,701.235 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,550.745 365.751,550.745 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,400.255 365.751,400.255 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,249.764 365.751,249.764 \"/>\n<path clip-path=\"url(#clip320)\" d=\"M298.909 1138.5 Q295.298 1138.5 293.469 1142.07 Q291.664 1145.61 291.664 1152.74 Q291.664 1159.85 293.469 1163.41 Q295.298 1166.95 298.909 1166.95 Q302.543 1166.95 304.349 1163.41 Q306.177 1159.85 306.177 1152.74 Q306.177 1145.61 304.349 1142.07 Q302.543 1138.5 298.909 1138.5 M298.909 1134.8 Q304.719 1134.8 307.775 1139.41 Q310.853 1143.99 310.853 1152.74 Q310.853 1161.47 307.775 1166.07 Q304.719 1170.66 298.909 1170.66 Q293.099 1170.66 290.02 1166.07 Q286.964 1161.47 286.964 1152.74 Q286.964 1143.99 290.02 1139.41 Q293.099 1134.8 298.909 1134.8 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M259.557 1015.56 L267.196 1015.56 L267.196 989.195 L258.886 990.862 L258.886 986.602 L267.15 984.936 L271.826 984.936 L271.826 1015.56 L279.465 1015.56 L279.465 1019.5 L259.557 1019.5 L259.557 1015.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M298.909 988.014 Q295.298 988.014 293.469 991.579 Q291.664 995.121 291.664 1002.25 Q291.664 1009.36 293.469 1012.92 Q295.298 1016.46 298.909 1016.46 Q302.543 1016.46 304.349 1012.92 Q306.177 1009.36 306.177 1002.25 Q306.177 995.121 304.349 991.579 Q302.543 988.014 298.909 988.014 M298.909 984.311 Q304.719 984.311 307.775 988.917 Q310.853 993.501 310.853 1002.25 Q310.853 1010.98 307.775 1015.58 Q304.719 1020.17 298.909 1020.17 Q293.099 1020.17 290.02 1015.58 Q286.964 1010.98 286.964 1002.25 Q286.964 993.501 290.02 988.917 Q293.099 984.311 298.909 984.311 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M262.775 865.07 L279.094 865.07 L279.094 869.005 L257.15 869.005 L257.15 865.07 Q259.812 862.316 264.395 857.686 Q269.002 853.033 270.182 851.691 Q272.428 849.168 273.307 847.432 Q274.21 845.672 274.21 843.982 Q274.21 841.228 272.266 839.492 Q270.344 837.756 267.242 837.756 Q265.043 837.756 262.59 838.52 Q260.159 839.283 257.381 840.834 L257.381 836.112 Q260.205 834.978 262.659 834.399 Q265.113 833.82 267.15 833.82 Q272.52 833.82 275.715 836.506 Q278.909 839.191 278.909 843.682 Q278.909 845.811 278.099 847.732 Q277.312 849.631 275.205 852.223 Q274.627 852.894 271.525 856.112 Q268.423 859.306 262.775 865.07 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M298.909 837.524 Q295.298 837.524 293.469 841.089 Q291.664 844.631 291.664 851.76 Q291.664 858.867 293.469 862.431 Q295.298 865.973 298.909 865.973 Q302.543 865.973 304.349 862.431 Q306.177 858.867 306.177 851.76 Q306.177 844.631 304.349 841.089 Q302.543 837.524 298.909 837.524 M298.909 833.82 Q304.719 833.82 307.775 838.427 Q310.853 843.01 310.853 851.76 Q310.853 860.487 307.775 865.093 Q304.719 869.677 298.909 869.677 Q293.099 869.677 290.02 865.093 Q286.964 860.487 286.964 851.76 Q286.964 843.01 290.02 838.427 Q293.099 833.82 298.909 833.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M272.914 699.881 Q276.27 700.599 278.145 702.867 Q280.043 705.136 280.043 708.469 Q280.043 713.585 276.525 716.386 Q273.006 719.186 266.525 719.186 Q264.349 719.186 262.034 718.747 Q259.742 718.33 257.289 717.474 L257.289 712.96 Q259.233 714.094 261.548 714.673 Q263.863 715.251 266.386 715.251 Q270.784 715.251 273.076 713.515 Q275.39 711.779 275.39 708.469 Q275.39 705.413 273.238 703.7 Q271.108 701.964 267.289 701.964 L263.261 701.964 L263.261 698.122 L267.474 698.122 Q270.923 698.122 272.752 696.756 Q274.58 695.367 274.58 692.775 Q274.58 690.113 272.682 688.701 Q270.807 687.265 267.289 687.265 Q265.367 687.265 263.168 687.682 Q260.969 688.099 258.33 688.978 L258.33 684.812 Q260.992 684.071 263.307 683.701 Q265.645 683.33 267.705 683.33 Q273.029 683.33 276.131 685.761 Q279.233 688.168 279.233 692.288 Q279.233 695.159 277.59 697.15 Q275.946 699.117 272.914 699.881 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M298.909 687.034 Q295.298 687.034 293.469 690.599 Q291.664 694.14 291.664 701.27 Q291.664 708.376 293.469 711.941 Q295.298 715.483 298.909 715.483 Q302.543 715.483 304.349 711.941 Q306.177 708.376 306.177 701.27 Q306.177 694.14 304.349 690.599 Q302.543 687.034 298.909 687.034 M298.909 683.33 Q304.719 683.33 307.775 687.937 Q310.853 692.52 310.853 701.27 Q310.853 709.997 307.775 714.603 Q304.719 719.186 298.909 719.186 Q293.099 719.186 290.02 714.603 Q286.964 709.997 286.964 701.27 Q286.964 692.52 290.02 687.937 Q293.099 683.33 298.909 683.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M271.594 537.539 L259.789 555.988 L271.594 555.988 L271.594 537.539 M270.367 533.465 L276.247 533.465 L276.247 555.988 L281.177 555.988 L281.177 559.877 L276.247 559.877 L276.247 568.025 L271.594 568.025 L271.594 559.877 L255.992 559.877 L255.992 555.363 L270.367 533.465 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M298.909 536.544 Q295.298 536.544 293.469 540.108 Q291.664 543.65 291.664 550.78 Q291.664 557.886 293.469 561.451 Q295.298 564.993 298.909 564.993 Q302.543 564.993 304.349 561.451 Q306.177 557.886 306.177 550.78 Q306.177 543.65 304.349 540.108 Q302.543 536.544 298.909 536.544 M298.909 532.84 Q304.719 532.84 307.775 537.446 Q310.853 542.03 310.853 550.78 Q310.853 559.506 307.775 564.113 Q304.719 568.696 298.909 568.696 Q293.099 568.696 290.02 564.113 Q286.964 559.506 286.964 550.78 Q286.964 542.03 290.02 537.446 Q293.099 532.84 298.909 532.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M258.793 382.975 L277.15 382.975 L277.15 386.91 L263.076 386.91 L263.076 395.382 Q264.094 395.035 265.113 394.873 Q266.131 394.688 267.15 394.688 Q272.937 394.688 276.316 397.859 Q279.696 401.03 279.696 406.447 Q279.696 412.025 276.224 415.127 Q272.752 418.206 266.432 418.206 Q264.256 418.206 261.988 417.836 Q259.742 417.465 257.335 416.724 L257.335 412.025 Q259.418 413.16 261.641 413.715 Q263.863 414.271 266.34 414.271 Q270.344 414.271 272.682 412.164 Q275.02 410.058 275.02 406.447 Q275.02 402.836 272.682 400.729 Q270.344 398.623 266.34 398.623 Q264.465 398.623 262.59 399.039 Q260.738 399.456 258.793 400.336 L258.793 382.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M298.909 386.053 Q295.298 386.053 293.469 389.618 Q291.664 393.16 291.664 400.289 Q291.664 407.396 293.469 410.961 Q295.298 414.502 298.909 414.502 Q302.543 414.502 304.349 410.961 Q306.177 407.396 306.177 400.289 Q306.177 393.16 304.349 389.618 Q302.543 386.053 298.909 386.053 M298.909 382.35 Q304.719 382.35 307.775 386.956 Q310.853 391.539 310.853 400.289 Q310.853 409.016 307.775 413.623 Q304.719 418.206 298.909 418.206 Q293.099 418.206 290.02 413.623 Q286.964 409.016 286.964 400.289 Q286.964 391.539 290.02 386.956 Q293.099 382.35 298.909 382.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M269.326 247.901 Q266.178 247.901 264.326 250.054 Q262.497 252.206 262.497 255.956 Q262.497 259.683 264.326 261.859 Q266.178 264.012 269.326 264.012 Q272.474 264.012 274.303 261.859 Q276.154 259.683 276.154 255.956 Q276.154 252.206 274.303 250.054 Q272.474 247.901 269.326 247.901 M278.608 233.248 L278.608 237.507 Q276.849 236.674 275.043 236.234 Q273.261 235.794 271.502 235.794 Q266.872 235.794 264.418 238.919 Q261.988 242.044 261.641 248.364 Q263.006 246.35 265.066 245.285 Q267.127 244.197 269.603 244.197 Q274.812 244.197 277.821 247.369 Q280.853 250.517 280.853 255.956 Q280.853 261.28 277.705 264.498 Q274.557 267.716 269.326 267.716 Q263.33 267.716 260.159 263.132 Q256.988 258.526 256.988 249.799 Q256.988 241.605 260.877 236.744 Q264.766 231.859 271.316 231.859 Q273.076 231.859 274.858 232.207 Q276.664 232.554 278.608 233.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M298.909 235.563 Q295.298 235.563 293.469 239.128 Q291.664 242.669 291.664 249.799 Q291.664 256.905 293.469 260.47 Q295.298 264.012 298.909 264.012 Q302.543 264.012 304.349 260.47 Q306.177 256.905 306.177 249.799 Q306.177 242.669 304.349 239.128 Q302.543 235.563 298.909 235.563 M298.909 231.859 Q304.719 231.859 307.775 236.466 Q310.853 241.049 310.853 249.799 Q310.853 258.526 307.775 263.132 Q304.719 267.716 298.909 267.716 Q293.099 267.716 290.02 263.132 Q286.964 258.526 286.964 249.799 Q286.964 241.049 290.02 236.466 Q293.099 231.859 298.909 231.859 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip322)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1041.82 400.199,939.95 400.786,846.481 401.372,760.848 401.958,682.529 402.545,611.041 403.131,545.939 403.718,585.992 404.304,527.742 404.891,474.824 405.477,508.433 406.063,461.606 406.65,419.464 407.236,382.789 407.823,349.067 408.409,319.181 408.995,293.988 409.582,270.974 410.168,251.09 410.755,234.13 411.341,219.895 411.927,291.893 412.514,279.797 413.1,270.636 413.687,262.967 414.273,258.484 414.86,254.61 415.446,252.886 416.032,253.961 416.619,279.439 417.205,281.256 417.792,285.03 418.378,329.652 418.964,353.399 419.551,376.668 420.137,399.205 420.724,419.506 421.31,425.815 421.896,446.273 422.483,454.064 423.069,462.386 423.656,472.564 424.242,492.822 424.829,502.222 425.415,511.701 426.001,521.961 426.588,541.37 427.174,551.979 427.761,570.164 428.347,589.683 428.933,600.795 429.52,611.445 430.106,641.8 430.693,652.078 431.279,674.305 431.865,684.015 432.452,704.438 433.038,719.83 433.625,729.879 434.211,749.511 434.798,768.049 435.384,786.258 435.97,794.171 436.557,818.581 437.143,830.087 437.73,845.119 438.316,855.759 438.902,863.11 439.489,870.827 440.075,881.529 440.662,888.339 441.248,901.833 441.835,911.734 442.421,924.468 443.007,939.349 443.594,953.828 444.18,961.943 444.767,969.704 445.353,980.053 445.939,989.882 446.526,996.992 447.112,1001.43 447.699,1011.09 448.285,1020.14 448.871,1024.24 449.458,1033.02 450.044,1043.43 450.631,1051.18 451.217,1052 451.804,1057.7 452.39,1061.13 452.976,1062.36 453.563,1065.85 454.149,1071.21 454.736,1074.52 455.322,1077.91 455.908,1085.35 456.495,1094.72 457.081,1097.67 457.668,1102.74 458.254,1107.41 458.84,1112.25 459.427,1122.27 460.013,1124.87 460.6,1130.92 461.186,1135.04 461.773,1137.09 462.359,1140.84 462.945,1142.99 463.532,1146.69 464.118,1152 464.705,1153.77 465.291,1155.41 465.877,1160.6 466.464,1167.06 467.05,1171.66 467.637,1179.4 468.223,1185.37 468.809,1189.32 469.396,1189.82 469.982,1193.64 470.569,1197.17 471.155,1198.88 471.742,1200.48 472.328,1204.04 472.914,1207.08 473.501,1211.84 474.087,1214.47 474.674,1220.3 475.26,1221.58 475.846,1222.65 476.433,1222.43 477.019,1224.79 477.606,1225.79 478.192,1225.36 478.778,1226.62 479.365,1227.56 479.951,1227.09 480.538,1227.03 481.124,1228.09 481.711,1229.43 482.297,1229.04 482.883,1232.71 483.47,1233.28 484.056,1233.94 484.643,1233.43 485.229,1233.01 485.815,1236.46 486.402,1237.2 486.988,1239.24 487.575,1239.61 488.161,1240.06 488.748,1244.5 489.334,1245 489.92,1242.68 490.507,1243.22 491.093,1245.1 491.68,1240.13 492.266,1241.99 492.852,1241.26 493.439,1243.18 494.025,1239.87 494.612,1243.49 495.198,1242.59 495.784,1244.67 496.371,1246.44 496.957,1247.09 497.544,1246.2 498.13,1244.03 498.717,1244.6 499.303,1243.83 499.889,1240.61 500.476,1238.66 501.062,1242.18 501.649,1241.45 502.235,1241.09 502.821,1239.68 503.408,1239.26 503.994,1240.07 504.581,1238.36 505.167,1237.88 505.753,1238.83 506.34,1239.8 506.926,1240.95 507.513,1242.06 508.099,1245.58 508.686,1245.17 509.272,1244.65 509.858,1245.52 510.445,1245.18 511.031,1248.36 511.618,1249.17 512.204,1248.31 512.79,1247.5 513.377,1249.77 513.963,1247.35 514.55,1245.32 515.136,1248.55 515.722,1250.27 516.309,1249.67 516.895,1250.35 517.482,1248.29 518.068,1248.91 518.655,1249.44 519.241,1248.59 519.827,1250.53 520.414,1249.71 521,1247.67 521.587,1248.22 522.173,1248.67 522.759,1247.95 523.346,1245.93 523.932,1242.64 524.519,1242.11 525.105,1243.05 525.691,1243.86 526.278,1240.98 526.864,1240.61 527.451,1238.77 528.037,1239.8 528.624,1241.73 529.21,1238.76 529.796,1238.64 530.383,1240.9 530.969,1241.65 531.556,1240.94 532.142,1239.12 532.728,1238.62 533.315,1238.53 533.901,1238.43 534.488,1239.3 535.074,1237.72 535.661,1236.34 536.247,1237.25 536.833,1237.17 537.42,1236.94 538.006,1234.23 538.593,1235.42 539.179,1234.04 539.765,1236.58 540.352,1235.12 540.938,1235.05 541.525,1233.71 542.111,1234.8 542.697,1233.35 543.284,1233.27 543.87,1232.05 544.457,1230.86 545.043,1234.58 545.63,1239.38 546.216,1238.98 546.802,1238.66 547.389,1237.07 547.975,1239.09 548.562,1241.24 549.148,1239.68 549.734,1240.33 550.321,1239.57 550.907,1237.92 551.494,1236.32 552.08,1235.82 552.666,1235.76 553.253,1234.42 553.839,1235.36 554.426,1236.44 555.012,1237.2 555.599,1239.3 556.185,1240.34 556.771,1241.21 557.358,1243.17 557.944,1241.1 558.531,1241.52 559.117,1240.88 559.703,1238.99 560.29,1239.61 560.876,1239.01 561.463,1240.94 562.049,1240.33 562.635,1237.12 563.222,1236.52 563.808,1238.74 564.395,1238.13 564.981,1237.87 565.568,1238.59 566.154,1239.61 566.74,1238.99 567.327,1239.39 567.913,1238.74 568.5,1238.06 569.086,1238.66 569.672,1240.68 570.259,1239.94 570.845,1239.66 571.432,1238.88 572.018,1240.8 572.605,1242.62 573.191,1240.38 573.777,1239.63 574.364,1238.94 574.95,1239.8 575.537,1243.01 576.123,1244.74 576.709,1246.34 577.296,1246.67 577.882,1245.52 578.469,1243.41 579.055,1240.2 579.641,1240.93 580.228,1240.3 580.814,1240.77 581.401,1237.81 581.987,1235.82 582.574,1236.38 583.16,1237.24 583.746,1236.74 584.333,1236.47 584.919,1234.63 585.506,1235.32 586.092,1235 586.678,1234.35 587.265,1231.44 587.851,1231.18 588.438,1228.34 589.024,1228.03 589.61,1229.07 590.197,1227.56 590.783,1226.34 591.37,1226.44 591.956,1226.6 592.543,1226.35 593.129,1224.95 593.715,1226.28 594.302,1226.3 594.888,1222.55 595.475,1222.66 596.061,1221.55 596.647,1222.94 597.234,1223.06 597.82,1225.76 598.407,1227.02 598.993,1226.79 599.579,1224.1 600.166,1225.36 600.752,1226.36 601.339,1226.32 601.925,1227.62 602.512,1228.9 603.098,1229.68 603.684,1229.34 604.271,1229.11 604.857,1231.41 605.444,1232.22 606.03,1231.98 606.616,1232.71 607.203,1231.02 607.789,1231.52 608.376,1231.24 608.962,1231.99 609.548,1234.17 610.135,1232.53 610.721,1231.94 611.308,1230.14 611.894,1229.72 612.481,1231.87 613.067,1232.42 613.653,1233.38 614.24,1231.5 614.826,1228.57 615.413,1228.25 615.999,1227.94 616.585,1230.08 617.172,1230.95 617.758,1231.89 618.345,1233.78 618.931,1235.9 619.518,1235.03 620.104,1237.08 620.69,1235.22 621.277,1234.81 621.863,1234.21 622.45,1231.12 623.036,1228.16 623.622,1225.3 624.209,1229.74 624.795,1230.22 625.382,1230.99 625.968,1229.24 626.554,1228.86 627.141,1229.73 627.727,1226.65 628.314,1228.84 628.9,1227.15 629.487,1226.83 630.073,1227.91 630.659,1225.24 631.246,1225.43 631.832,1227.79 632.419,1226.65 633.005,1226.5 633.591,1224.96 634.178,1221.39 634.764,1222.99 635.351,1221.76 635.937,1221.72 636.523,1222.73 637.11,1217.99 637.696,1219.68 638.283,1219.85 638.869,1220.9 639.456,1222.34 640.042,1218.47 640.628,1218.72 641.215,1222.58 641.801,1227.35 642.388,1225.79 642.974,1225.53 643.56,1227.76 644.147,1227.53 644.733,1228.62 645.32,1229.43 645.906,1227.7 646.492,1227.08 647.079,1226.55 647.665,1226.31 648.252,1227.4 648.838,1224.77 649.425,1223.12 650.011,1220.22 650.597,1220.48 651.184,1219.23 651.77,1219.32 652.357,1220.63 652.943,1221.55 653.529,1220.03 654.116,1219.88 654.702,1219.86 655.289,1221.27 655.875,1219.96 656.462,1218.86 657.048,1219.02 657.634,1215.35 658.221,1215.6 658.807,1215.76 659.394,1213.67 659.98,1213.94 660.566,1216.69 661.153,1215.62 661.739,1220.99 662.326,1218.44 662.912,1218.68 663.498,1219.74 664.085,1215.91 664.671,1217.29 665.258,1219.81 665.844,1221.16 666.431,1223.47 667.017,1225.9 667.603,1224.28 668.19,1224.09 668.776,1223.84 669.363,1223.72 669.949,1226.07 670.535,1227.34 671.122,1229.45 671.708,1227.72 672.295,1229.88 672.881,1233.1 673.467,1232.61 674.054,1233.03 674.64,1233.25 675.227,1228.77 675.813,1230.51 676.4,1231.08 676.986,1230.37 677.572,1228.43 678.159,1229.42 678.745,1230 679.332,1229.12 679.918,1231.25 680.504,1229.24 681.091,1225.06 681.677,1224.79 682.264,1225.33 682.85,1225.03 683.436,1223.44 684.023,1222.28 684.609,1222.15 685.196,1222.05 685.782,1219.42 686.369,1220.66 686.955,1220.41 687.541,1222.92 688.128,1222.51 688.714,1220.94 689.301,1220.88 689.887,1220.85 690.473,1220.54 691.06,1219.18 691.646,1217.84 692.233,1216.53 692.819,1217.69 693.405,1214.83 693.992,1213.83 694.578,1215.4 695.165,1213.26 695.751,1214.47 696.338,1214.42 696.924,1214.57 697.51,1215.96 698.097,1216.15 698.683,1216.15 699.27,1217.47 699.856,1217.65 700.442,1217.71 701.029,1216.4 701.615,1215.35 702.202,1214.44 702.788,1213.4 703.375,1213.91 703.961,1214.29 704.547,1215.83 705.134,1221.98 705.72,1219.24 706.307,1219.33 706.893,1219.06 707.479,1217.76 708.066,1220.37 708.652,1217.69 709.239,1219.06 709.825,1219.1 710.411,1217.95 710.998,1218.09 711.584,1218.12 712.171,1218.17 712.757,1217.17 713.344,1214.68 713.93,1214.78 714.516,1216.21 715.103,1217.42 715.689,1217.62 716.276,1217.68 716.862,1217.76 717.448,1215.14 718.035,1216.39 718.621,1216.58 719.208,1217.93 719.794,1219.19 720.38,1219.36 720.967,1218.35 721.553,1218.39 722.14,1220.74 722.726,1223.3 723.313,1223.12 723.899,1223.71 724.485,1222.17 725.072,1223.2 725.658,1218.2 726.245,1218.19 726.831,1220.33 727.417,1221.3 728.004,1219.7 728.59,1218.28 729.177,1220.44 729.763,1220.23 730.349,1221.21 730.936,1219.66 731.522,1220.79 732.109,1220.43 732.695,1220.22 733.282,1219.96 733.868,1218.63 734.454,1218.59 735.041,1220.93 735.627,1220.73 736.214,1220.78 736.8,1221.81 737.386,1221.68 737.973,1220.42 738.559,1220.43 739.146,1220.42 739.732,1218.96 740.318,1218.84 740.905,1218.91 741.491,1218.97 742.078,1217.66 742.664,1217.86 743.251,1220.2 743.837,1220.22 744.423,1222.74 745.01,1221.51 745.596,1221.44 746.183,1223.73 746.769,1223.47 747.355,1225.81 747.942,1226.52 748.528,1229.78 749.115,1230.15 749.701,1229.45 750.288,1228.54 750.874,1227.87 751.46,1228.71 752.047,1227.99 752.633,1227.56 753.22,1225.74 753.806,1225.47 754.392,1223.84 754.979,1224.68 755.565,1224.03 756.152,1226 756.738,1224.42 757.324,1222.75 757.911,1225.91 758.497,1226.49 759.084,1220.96 759.67,1223.11 760.257,1225.25 760.843,1226.17 761.429,1224.41 762.016,1226.62 762.602,1223.69 763.189,1223.36 763.775,1222.96 764.361,1222.64 764.948,1218.63 765.534,1219.79 766.121,1219.59 766.707,1220.59 767.293,1220.36 767.88,1219.96 768.466,1219.82 769.053,1218.38 769.639,1219.18 770.226,1219.32 770.812,1217.93 771.398,1217.7 771.985,1217.63 772.571,1216.18 773.158,1217.43 773.744,1216.08 774.33,1217.3 774.917,1217.1 775.503,1217.05 776.09,1217.01 776.676,1218.11 777.262,1217.88 777.849,1219 778.435,1217.68 779.022,1216.38 779.608,1216.56 780.195,1216.54 780.781,1212.73 781.367,1213.06 781.954,1212.4 782.54,1213.89 783.127,1215.59 783.713,1214.51 784.299,1216.02 784.886,1218.65 785.472,1219.84 786.059,1217.62 786.645,1217.65 787.232,1216.1 787.818,1216.08 788.404,1213.97 788.991,1214.1 789.577,1213.04 790.164,1214.72 790.75,1213.76 791.336,1211.34 791.923,1211.66 792.509,1210.73 793.096,1211.29 793.682,1214.19 794.268,1215.73 794.855,1215.67 795.441,1215.64 796.028,1213.03 796.614,1211.79 797.201,1213.26 797.787,1213.4 798.373,1209.76 798.96,1207.72 799.546,1208.24 800.133,1208.88 800.719,1210.37 801.305,1210.43 801.892,1210.82 802.478,1210.22 803.065,1209.28 803.651,1208.51 804.237,1207.73 804.824,1208.15 805.41,1209.61 805.997,1209.89 806.583,1210.37 807.17,1211.86 807.756,1210.8 808.342,1209.92 808.929,1208.95 809.515,1211.79 810.102,1212.13 810.688,1211.13 811.274,1214.01 811.861,1212.82 812.447,1211.78 813.034,1212.06 813.62,1213.52 814.206,1215.02 814.793,1213.82 815.379,1214 815.966,1213 816.552,1216.67 817.139,1214.31 817.725,1213 818.311,1213.37 818.898,1212.45 819.484,1210.1 820.071,1211.52 820.657,1211.78 821.243,1214.53 821.83,1216.02 822.416,1218.68 823.003,1218.7 823.589,1219.9 824.175,1218.49 824.762,1217.26 825.348,1219.57 825.935,1221.9 826.521,1222.93 827.108,1222.64 827.694,1219.52 828.28,1220.63 828.867,1217.99 829.453,1216.66 830.04,1215.51 830.626,1215.37 831.212,1212.95 831.799,1214.02 832.385,1214.16 832.972,1215.27 833.558,1215.66 834.145,1215.49 834.731,1216.8 835.317,1216.81 835.904,1217.59 836.49,1217.45 837.077,1218.79 837.663,1217.56 838.249,1219.97 838.836,1220.9 839.422,1224.22 840.009,1222.6 840.595,1223.29 841.181,1219.14 841.768,1221.56 842.354,1223.4 842.941,1223.43 843.527,1225.61 844.114,1226.16 844.7,1223.14 845.286,1222.91 845.873,1222.61 846.459,1223.21 847.046,1222.4 847.632,1222.23 848.218,1221.8 848.805,1220.12 849.391,1216.22 849.978,1216.25 850.564,1215.11 851.15,1213.83 851.737,1214.03 852.323,1215.22 852.91,1215.37 853.496,1220.35 854.083,1220.05 854.669,1219.79 855.255,1219.71 855.842,1216.91 856.428,1220.41 857.015,1218.61 857.601,1214.68 858.187,1215.83 858.774,1214.22 859.36,1213.99 859.947,1215.18 860.533,1214.95 861.119,1213.75 861.706,1211.47 862.292,1211.72 862.879,1208.17 863.465,1210.88 864.052,1209.85 864.638,1210.11 865.224,1210.33 865.811,1211.57 866.397,1211.52 866.984,1210.61 867.57,1210.97 868.156,1211.12 868.743,1212.57 869.329,1211.38 869.916,1212.91 870.502,1212.99 871.089,1213.06 871.675,1214.16 872.261,1215.45 872.848,1216.82 873.434,1215.49 874.021,1214.09 874.607,1215.39 875.193,1211.78 875.78,1211.9 876.366,1213.25 876.953,1213.14 877.539,1213.08 878.125,1214.23 878.712,1213.11 879.298,1214.27 879.885,1219.4 880.471,1219.17 881.058,1218.7 881.644,1217.04 882.23,1217.1 882.817,1214.61 883.403,1215.75 883.99,1217.14 884.576,1214.7 885.162,1214.61 885.749,1214.8 886.335,1215.05 886.922,1217.31 887.508,1218.53 888.094,1218.32 888.681,1218.29 889.267,1218.4 889.854,1215.81 890.44,1218.16 891.027,1216.81 891.613,1217.97 892.199,1218.88 892.786,1219.12 893.372,1217.68 893.959,1217.43 894.545,1217.22 895.131,1216.97 895.718,1215.65 896.304,1218.01 896.891,1215.14 897.477,1216.42 898.063,1217.45 898.65,1217.61 899.236,1217.49 899.823,1218.24 900.409,1216.86 900.996,1216.58 901.582,1221.19 902.168,1218.4 902.755,1219.38 903.341,1220.08 903.928,1219.81 904.514,1218.41 905.1,1219.4 905.687,1216.86 906.273,1215.41 906.86,1216.43 907.446,1213.9 908.032,1211.52 908.619,1211.82 909.205,1210.74 909.792,1210.77 910.378,1210.93 910.965,1213.64 911.551,1213.51 912.137,1212.05 912.724,1212.27 913.31,1213.61 913.897,1213.63 914.483,1215.03 915.069,1214.9 915.656,1212.43 916.242,1212.13 916.829,1213.5 917.415,1215.04 918.002,1212.62 918.588,1212.63 919.174,1210.28 919.761,1211.61 920.347,1211.67 920.934,1211.71 921.52,1211.91 922.106,1211.81 922.693,1209.5 923.279,1210.84 923.866,1212.28 924.452,1212.17 925.038,1213.32 925.625,1211.04 926.211,1207.37 926.798,1206.62 927.384,1209.42 927.971,1209.62 928.557,1209.02 929.143,1208.39 929.73,1209.74 930.316,1208.78 930.903,1206.66 931.489,1208.51 932.075,1209.18 932.662,1208.3 933.248,1208.39 933.835,1208.68 934.421,1207.85 935.007,1205.86 935.594,1206.45 936.18,1206.93 936.767,1207.39 937.353,1208.99 937.94,1209.5 938.526,1210.89 939.112,1209.98 939.699,1210.28 940.285,1209.07 940.872,1212.97 941.458,1211.97 942.044,1212.36 942.631,1213.61 943.217,1211.48 943.804,1212.75 944.39,1213.86 944.976,1214.01 945.563,1214.01 946.149,1214.07 946.736,1216.78 947.322,1217.89 947.909,1220.36 948.495,1221.33 949.081,1223.41 949.668,1224.21 950.254,1222.91 950.841,1224.71 951.427,1223.09 952.013,1222.54 952.6,1224.42 953.186,1223.74 953.773,1219.7 954.359,1221.95 954.945,1222.84 955.532,1223.26 956.118,1222.69 956.705,1216.11 957.291,1211.35 957.878,1210.25 958.464,1211.67 959.05,1210.53 959.637,1216.8 960.223,1214.33 960.81,1214.18 961.396,1214.12 961.982,1215.42 962.569,1216.49 963.155,1218.66 963.742,1217.29 964.328,1217.39 964.915,1216.91 965.501,1215.33 966.087,1215.2 966.674,1213 967.26,1214.34 967.847,1215.35 968.433,1217.82 969.019,1221.15 969.606,1220.8 970.192,1221.68 970.779,1221.38 971.365,1219.73 971.951,1221.61 972.538,1217.63 973.124,1216.32 973.711,1213.62 974.297,1211.02 974.884,1212.47 975.47,1207.39 976.056,1207.69 976.643,1211.72 977.229,1211.74 977.816,1212.87 978.402,1212.91 978.988,1211.7 979.575,1211.81 980.161,1213.1 980.748,1214.2 981.334,1215.31 981.92,1217.56 982.507,1218.69 983.093,1219.48 983.68,1220.55 984.266,1216.56 984.853,1217.82 985.439,1217.76 986.025,1217.33 986.612,1215.94 987.198,1215.8 987.785,1215.68 988.371,1215.57 988.957,1214.35 989.544,1214.42 990.13,1213.34 990.717,1214.65 991.303,1217.2 991.889,1217.23 992.476,1217.17 993.062,1217.07 993.649,1217.05 994.235,1218.38 994.822,1218 995.408,1217.83 995.994,1217.81 996.581,1217.47 997.167,1212.27 997.754,1211.03 998.34,1211.08 998.926,1212.74 999.513,1213.67 1000.1,1212.23 1000.69,1213.37 1001.27,1214.53 1001.86,1214.37 1002.44,1211.71 1003.03,1213.16 1003.62,1215.61 1004.2,1214.37 1004.79,1215.35 1005.38,1216.51 1005.96,1216.57 1006.55,1216.34 1007.14,1214.89 1007.72,1210.97 1008.31,1210 1008.9,1208.89 1009.48,1209.07 1010.07,1205.74 1010.65,1203.66 1011.24,1201.82 1011.83,1205.04 1012.41,1205.63 1013,1204.84 1013.59,1205 1014.17,1204.42 1014.76,1204.96 1015.35,1205.47 1015.93,1209.41 1016.52,1210.67 1017.11,1210.81 1017.69,1211.1 1018.28,1212.71 1018.86,1206.6 1019.45,1209.59 1020.04,1209.65 1020.62,1213.4 1021.21,1213.32 1021.8,1214.31 1022.38,1215.62 1022.97,1215.41 1023.56,1214.92 1024.14,1214.8 1024.73,1215.85 1025.32,1216.89 1025.9,1216.63 1026.49,1218.71 1027.07,1217.41 1027.66,1217.31 1028.25,1217.22 1028.83,1215.84 1029.42,1216.84 1030.01,1217.86 1030.59,1218.82 1031.18,1218.66 1031.77,1219.71 1032.35,1216.85 1032.94,1218.11 1033.52,1216.71 1034.11,1216.53 1034.7,1215.09 1035.28,1216.55 1035.87,1216.52 1036.46,1216.36 1037.04,1217.38 1037.63,1215.96 1038.22,1215.94 1038.8,1215.6 1039.39,1215.46 1039.98,1212.8 1040.56,1210.21 1041.15,1210.72 1041.73,1210.88 1042.32,1209.87 1042.91,1210.01 1043.49,1211.41 1044.08,1210.48 1044.67,1209.14 1045.25,1208.19 1045.84,1208.47 1046.43,1207.67 1047.01,1210.28 1047.6,1211.69 1048.19,1211.6 1048.77,1210.68 1049.36,1210.88 1049.94,1211.02 1050.53,1210.21 1051.12,1208.03 1051.7,1210.65 1052.29,1210.68 1052.88,1210.69 1053.46,1211.92 1054.05,1214.39 1054.64,1214.34 1055.22,1213.01 1055.81,1210.86 1056.39,1210.91 1056.98,1212.18 1057.57,1210.74 1058.15,1213.32 1058.74,1213.48 1059.33,1213.65 1059.91,1214.95 1060.5,1217.37 1061.09,1215.79 1061.67,1215.6 1062.26,1215.62 1062.85,1216.59 1063.43,1217.73 1064.02,1217.18 1064.6,1216.8 1065.19,1221.31 1065.78,1222.03 1066.36,1227.36 1066.95,1226.39 1067.54,1224.62 1068.12,1224.15 1068.71,1223.67 1069.3,1221.75 1069.88,1221.62 1070.47,1219.75 1071.06,1219.56 1071.64,1219.35 1072.23,1216.56 1072.81,1215.21 1073.4,1215.16 1073.99,1217.24 1074.57,1217.19 1075.16,1215.8 1075.75,1216.88 1076.33,1217.74 1076.92,1215.97 1077.51,1213.43 1078.09,1214.73 1078.68,1214.96 1079.26,1214.81 1079.85,1214.53 1080.44,1216.99 1081.02,1216.88 1081.61,1217.88 1082.2,1220.2 1082.78,1217.56 1083.37,1213.77 1083.96,1213.72 1084.54,1213.8 1085.13,1216.3 1085.72,1216.21 1086.3,1213.53 1086.89,1214.81 1087.47,1217.11 1088.06,1216.77 1088.65,1218.94 1089.23,1219.93 1089.82,1220.69 1090.41,1220.24 1090.99,1219.72 1091.58,1220.45 1092.17,1217.7 1092.75,1213.63 1093.34,1212.22 1093.93,1212.15 1094.51,1211.28 1095.1,1210.18 1095.68,1211.56 1096.27,1211.59 1096.86,1209.33 1097.44,1211.77 1098.03,1209.33 1098.62,1207.06 1099.2,1206.16 1099.79,1204.89 1100.38,1204 1100.96,1208.28 1101.55,1207.35 1102.14,1208.84 1102.72,1208.9 1103.31,1209.22 1103.89,1206.99 1104.48,1208.49 1105.07,1207.69 1105.65,1206.72 1106.24,1211.07 1106.83,1208.71 1107.41,1210.41 1108,1210.64 1108.59,1209.38 1109.17,1210.58 1109.76,1209.57 1110.34,1210.9 1110.93,1208.75 1111.52,1209.22 1112.1,1209.23 1112.69,1208.15 1113.28,1208.41 1113.86,1209.66 1114.45,1212.43 1115.04,1212.43 1115.62,1213.79 1116.21,1215.23 1116.8,1215.29 1117.38,1216.39 1117.97,1214.14 1118.55,1215.64 1119.14,1213.33 1119.73,1213.39 1120.31,1213.43 1120.9,1213.18 1121.49,1213.31 1122.07,1214.54 1122.66,1215.49 1123.25,1212.82 1123.83,1211.29 1124.42,1212.37 1125.01,1213.51 1125.59,1213.56 1126.18,1213.55 1126.76,1212.45 1127.35,1212.49 1127.94,1211.46 1128.52,1214.05 1129.11,1213.92 1129.7,1216.22 1130.28,1217.35 1130.87,1217.22 1131.46,1219.35 1132.04,1216.69 1132.63,1218.51 1133.21,1218.29 1133.8,1218.15 1134.39,1215.74 1134.97,1214.4 1135.56,1213.14 1136.15,1210.73 1136.73,1210.99 1137.32,1212.39 1137.91,1210.15 1138.49,1210.39 1139.08,1210.82 1139.67,1212.03 1140.25,1208.68 1140.84,1210.12 1141.42,1209.02 1142.01,1209.37 1142.6,1207.19 1143.18,1210.06 1143.77,1212.59 1144.36,1212.88 1144.94,1212.99 1145.53,1214.04 1146.12,1213.11 1146.7,1210.65 1147.29,1209.68 1147.88,1211.32 1148.46,1209.03 1149.05,1210.34 1149.63,1213.1 1150.22,1215.24 1150.81,1216.36 1151.39,1216.02 1151.98,1217.11 1152.57,1216.7 1153.15,1216.45 1153.74,1216.44 1154.33,1216.3 1154.91,1215.15 1155.5,1216.4 1156.09,1216.35 1156.67,1221.08 1157.26,1220.77 1157.84,1219.05 1158.43,1222.11 1159.02,1219.33 1159.6,1216.53 1160.19,1215.12 1160.78,1219.85 1161.36,1220.89 1161.95,1221.69 1162.54,1222.5 1163.12,1220.55 1163.71,1220.05 1164.29,1218.3 1164.88,1216.84 1165.47,1219.23 1166.05,1214.85 1166.64,1217.24 1167.23,1217.12 1167.81,1215.66 1168.4,1214.13 1168.99,1214.18 1169.57,1211.72 1170.16,1211.53 1170.75,1209.18 1171.33,1208.15 1171.92,1209.76 1172.5,1211.14 1173.09,1211.23 1173.68,1211.18 1174.26,1210.27 1174.85,1207.91 1175.44,1206.8 1176.02,1207.19 1176.61,1210 1177.2,1211.32 1177.78,1212.81 1178.37,1210.24 1178.96,1209.28 1179.54,1208.47 1180.13,1209.94 1180.71,1210.11 1181.3,1210.4 1181.89,1209.61 1182.47,1211.12 1183.06,1211.08 1183.65,1212.48 1184.23,1213.78 1184.82,1212.44 1185.41,1215.04 1185.99,1216.14 1186.58,1215.88 1187.16,1214.63 1187.75,1215.78 1188.34,1214.57 1188.92,1215.81 1189.51,1215.78 1190.1,1213.35 1190.68,1212.05 1191.27,1214.55 1191.86,1216.84 1192.44,1214.47 1193.03,1216.86 1193.62,1217.78 1194.2,1219.08 1194.79,1215.1 1195.37,1216.27 1195.96,1214.82 1196.55,1212 1197.13,1210.74 1197.72,1209.55 1198.31,1210.9 1198.89,1210.14 1199.48,1212.76 1200.07,1212.89 1200.65,1214.11 1201.24,1211.49 1201.83,1210.4 1202.41,1212.02 1203,1212.19 1203.58,1211.16 1204.17,1212.31 1204.76,1213.52 1205.34,1214.6 1205.93,1217.03 1206.52,1215.54 1207.1,1215.52 1207.69,1215.51 1208.28,1216.46 1208.86,1216.41 1209.45,1218.7 1210.03,1220.72 1210.62,1218.95 1211.21,1216.21 1211.79,1212.32 1212.38,1212.59 1212.97,1212.67 1213.55,1212.66 1214.14,1212.42 1214.73,1209.97 1215.31,1207.64 1215.9,1206.8 1216.49,1208.67 1217.07,1210.22 1217.66,1210.32 1218.24,1212.99 1218.83,1214.2 1219.42,1213.07 1220,1214.58 1220.59,1214.75 1221.18,1214.86 1221.76,1216.29 1222.35,1216.11 1222.94,1216.04 1223.52,1216.2 1224.11,1213.75 1224.7,1212.69 1225.28,1215 1225.87,1217.37 1226.45,1216.97 1227.04,1215.37 1227.63,1214.12 1228.21,1212.95 1228.8,1213.49 1229.39,1213.36 1229.97,1214.59 1230.56,1215.63 1231.15,1215.69 1231.73,1213.3 1232.32,1212 1232.91,1210.85 1233.49,1209.42 1234.08,1209.63 1234.66,1209.64 1235.25,1209.98 1235.84,1211.23 1236.42,1208.73 1237.01,1208.92 1237.6,1207.75 1238.18,1209.23 1238.77,1210.68 1239.36,1210.85 1239.94,1210.98 1240.53,1207.67 1241.11,1207.91 1241.7,1209.58 1242.29,1207.43 1242.87,1205.28 1243.46,1206.99 1244.05,1206.25 1244.63,1205.6 1245.22,1204.84 1245.81,1209.29 1246.39,1211.01 1246.98,1208.77 1247.57,1210.33 1248.15,1209.27 1248.74,1209.22 1249.32,1209.03 1249.91,1210.34 1250.5,1210.85 1251.08,1209.66 1251.67,1208.57 1252.26,1211.16 1252.84,1216.06 1253.43,1213.37 1254.02,1213.29 1254.6,1209.66 1255.19,1212.35 1255.78,1213.55 1256.36,1214.97 1256.95,1213.57 1257.53,1213.4 1258.12,1213.17 1258.71,1214.43 1259.29,1213.16 1259.88,1215.63 1260.47,1215.44 1261.05,1215.63 1261.64,1215.49 1262.23,1216.76 1262.81,1216.76 1263.4,1214 1263.98,1213.85 1264.57,1215.1 1265.16,1217.65 1265.74,1217.46 1266.33,1217.18 1266.92,1218.33 1267.5,1217.91 1268.09,1217.86 1268.68,1218.01 1269.26,1215.33 1269.85,1216.29 1270.44,1214.87 1271.02,1216.01 1271.61,1216 1272.19,1218.51 1272.78,1219.59 1273.37,1219.17 1273.95,1218.61 1274.54,1218.34 1275.13,1218.1 1275.71,1215.37 1276.3,1212.57 1276.89,1214.97 1277.47,1217.47 1278.06,1214.75 1278.65,1215.97 1279.23,1216.7 1279.82,1218.88 1280.4,1219.86 1280.99,1220.89 1281.58,1219.25 1282.16,1220.18 1282.75,1219.51 1283.34,1216.85 1283.92,1219.18 1284.51,1219.09 1285.1,1216.45 1285.68,1216.15 1286.27,1216.11 1286.86,1212.24 1287.44,1212.32 1288.03,1212.36 1288.61,1215.16 1289.2,1214.98 1289.79,1216.09 1290.37,1216.01 1290.96,1218.29 1291.55,1215.55 1292.13,1215.6 1292.72,1212.86 1293.31,1210.51 1293.89,1213.13 1294.48,1214.38 1295.06,1214.52 1295.65,1215.77 1296.24,1215.58 1296.82,1215.53 1297.41,1215.36 1298,1215.3 1298.58,1212.83 1299.17,1212.98 1299.76,1214.37 1300.34,1215.35 1300.93,1216.08 1301.52,1217.14 1302.1,1216.85 1302.69,1216.5 1303.27,1218.63 1303.86,1218.14 1304.45,1215.58 1305.03,1215.56 1305.62,1215.45 1306.21,1215.15 1306.79,1214.16 1307.38,1216.59 1307.97,1216.42 1308.55,1215.05 1309.14,1218.76 1309.73,1217.24 1310.31,1219.06 1310.9,1218.54 1311.48,1218.56 1312.07,1216.99 1312.66,1216.73 1313.24,1216.67 1313.83,1216.33 1314.42,1215.05 1315,1215.18 1315.59,1213.86 1316.18,1213.92 1316.76,1214.07 1317.35,1214.94 1317.93,1217.08 1318.52,1215.44 1319.11,1215.5 1319.69,1216.44 1320.28,1216.13 1320.87,1218.46 1321.45,1220.82 1322.04,1219.28 1322.63,1218.81 1323.21,1218.45 1323.8,1216.51 1324.39,1214.91 1324.97,1216.27 1325.56,1215.81 1326.14,1217.94 1326.73,1217.62 1327.32,1215.83 1327.9,1213.41 1328.49,1214.59 1329.08,1213.29 1329.66,1212.11 1330.25,1210.67 1330.84,1208.5 1331.42,1207.63 1332.01,1204.22 1332.6,1207.04 1333.18,1208.45 1333.77,1207.49 1334.35,1209.07 1334.94,1210.38 1335.53,1210.47 1336.11,1209.5 1336.7,1209.72 1337.29,1212.36 1337.87,1213.76 1338.46,1212.29 1339.05,1210.88 1339.63,1213.18 1340.22,1213.17 1340.8,1213.45 1341.39,1213.49 1341.98,1214.64 1342.56,1212.33 1343.15,1211.36 1343.74,1210.32 1344.32,1209.36 1344.91,1208.32 1345.5,1208.88 1346.08,1206.55 1346.67,1206.82 1347.26,1208.32 1347.84,1208.45 1348.43,1208.64 1349.01,1207.65 1349.6,1206.37 1350.19,1205.61 1350.77,1206.03 1351.36,1206.36 1351.95,1206.63 1352.53,1209.34 1353.12,1210.72 1353.71,1210.87 1354.29,1211.09 1354.88,1208.84 1355.47,1209.13 1356.05,1209.29 1356.64,1209.42 1357.22,1209.82 1357.81,1208.08 1358.4,1209.22 1358.98,1207.13 1359.57,1208.46 1360.16,1209.72 1360.74,1207.3 1361.33,1208.99 1361.92,1210.46 1362.5,1210.55 1363.09,1210.86 1363.68,1211.02 1364.26,1212.46 1364.85,1209.91 1365.43,1207.79 1366.02,1207.09 1366.61,1208.4 1367.19,1207.44 1367.78,1206.55 1368.37,1208.25 1368.95,1212.24 1369.54,1213.41 1370.13,1218.27 1370.71,1218.07 1371.3,1220.41 1371.88,1218.81 1372.47,1219.69 1373.06,1219.47 1373.64,1218.05 1374.23,1215.67 1374.82,1216.73 1375.4,1218.69 1375.99,1217.09 1376.58,1218.24 1377.16,1216.76 1377.75,1215.24 1378.34,1212.72 1378.92,1210.4 1379.51,1209.27 1380.09,1210.79 1380.68,1209.4 1381.27,1208.31 1381.85,1208.41 1382.44,1208.75 1383.03,1208.71 1383.61,1211.37 1384.2,1210.16 1384.79,1213.17 1385.37,1213.3 1385.96,1214.58 1386.55,1211.75 1387.13,1212.05 1387.72,1210.53 1388.3,1211.95 1388.89,1212.25 1389.48,1209.82 1390.06,1209.9 1390.65,1211.12 1391.24,1212.4 1391.82,1212.69 1392.41,1214.25 1393,1211.43 1393.58,1212.77 1394.17,1213.77 1394.75,1214.91 1395.34,1212.21 1395.93,1212.42 1396.51,1210.98 1397.1,1212.3 1397.69,1212.26 1398.27,1214.85 1398.86,1214.84 1399.45,1214.79 1400.03,1215.74 1400.62,1214.29 1401.21,1215.74 1401.79,1215.68 1402.38,1214.49 1402.96,1213.26 1403.55,1213.36 1404.14,1213.25 1404.72,1214.55 1405.31,1214.11 1405.9,1216.58 1406.48,1217.49 1407.07,1217.19 1407.66,1219.7 1408.24,1219.52 1408.83,1221.72 1409.42,1220.04 1410,1217.44 1410.59,1215.99 1411.17,1212.12 1411.76,1210.81 1412.35,1212.34 1412.93,1212.35 1413.52,1211.09 1414.11,1212.26 1414.69,1213.87 1415.28,1212.77 1415.87,1214.12 1416.45,1213.96 1417.04,1212.82 1417.63,1215.22 1418.21,1214.08 1418.8,1214 1419.38,1213.79 1419.97,1214.83 1420.56,1214.84 1421.14,1214.93 1421.73,1213.84 1422.32,1212.24 1422.9,1213.55 1423.49,1212.38 1424.08,1210.97 1424.66,1208.79 1425.25,1210.14 1425.83,1209.02 1426.42,1210.22 1427.01,1210.43 1427.59,1211.82 1428.18,1210.6 1428.77,1210.62 1429.35,1213.15 1429.94,1213.28 1430.53,1215.76 1431.11,1211.66 1431.7,1210.4 1432.29,1211.79 1432.87,1210.51 1433.46,1209.53 1434.04,1209.67 1434.63,1209.73 1435.22,1208.78 1435.8,1209.09 1436.39,1210.59 1436.98,1212.17 1437.56,1210.89 1438.15,1211.93 1438.74,1211.82 1439.32,1210.25 1439.91,1214.27 1440.5,1211.82 1441.08,1210.53 1441.67,1210.92 1442.25,1211.29 1442.84,1210.22 1443.43,1210.41 1444.01,1209.47 1444.6,1208.74 1445.19,1209.03 1445.77,1210.43 1446.36,1212.9 1446.95,1213.15 1447.53,1212.94 1448.12,1213.07 1448.7,1210.58 1449.29,1210.58 1449.88,1210.96 1450.46,1211.24 1451.05,1213.68 1451.64,1211.15 1452.22,1211.47 1452.81,1210.44 1453.4,1210.64 1453.98,1209.53 1454.57,1211.2 1455.16,1214.81 1455.74,1213.79 1456.33,1211.35 1456.91,1210.37 1457.5,1210.58 1458.09,1212.12 1458.67,1215.97 1459.26,1215.94 1459.85,1209.65 1460.43,1208.87 1461.02,1207.75 1461.61,1210.46 1462.19,1211.83 1462.78,1211.64 1463.37,1211.53 1463.95,1213.95 1464.54,1213.67 1465.12,1217.37 1465.71,1215.95 1466.3,1213.44 1466.88,1214.54 1467.47,1218.07 1468.06,1217.66 1468.64,1220.05 1469.23,1222.23 1469.82,1220.52 1470.4,1221.18 1470.99,1221.66 1471.57,1222.6 1472.16,1223.59 1472.75,1218.21 1473.33,1217.85 1473.92,1217.6 1474.51,1216.13 1475.09,1214.63 1475.68,1213.11 1476.27,1210.56 1476.85,1211.97 1477.44,1211.95 1478.03,1212.05 1478.61,1211.93 1479.2,1209.51 1479.78,1210.82 1480.37,1213.39 1480.96,1213.29 1481.54,1213.52 1482.13,1211.16 1482.72,1208.8 1483.3,1209.16 1483.89,1212.01 1484.48,1210.86 1485.06,1213.34 1485.65,1212.38 1486.24,1212.29 1486.82,1209.99 1487.41,1208.72 1487.99,1210.2 1488.58,1210.47 1489.17,1210.66 1489.75,1209.44 1490.34,1208.31 1490.93,1208.39 1491.51,1207.32 1492.1,1207.65 1492.69,1207.94 1493.27,1209.35 1493.86,1209.55 1494.45,1210.76 1495.03,1211.01 1495.62,1212.1 1496.2,1213.11 1496.79,1210.73 1497.38,1212.33 1497.96,1214.78 1498.55,1215.93 1499.14,1214.61 1499.72,1213.1 1500.31,1214.33 1500.9,1216.87 1501.48,1216.54 1502.07,1217.74 1502.65,1218.7 1503.24,1218.48 1503.83,1218.39 1504.41,1221.78 1505,1218.84 1505.59,1218.55 1506.17,1215.92 1506.76,1218.05 1507.35,1217.69 1507.93,1217.34 1508.52,1215.91 1509.11,1215.9 1509.69,1219.24 1510.28,1219.17 1510.86,1212.55 1511.45,1212.54 1512.04,1214.96 1512.62,1217.11 1513.21,1218.02 1513.8,1215.18 1514.38,1213.88 1514.97,1212.82 1515.56,1215.3 1516.14,1217.69 1516.73,1216.13 1517.32,1213.24 1517.9,1212.21 1518.49,1212.2 1519.07,1211.12 1519.66,1211.2 1520.25,1211.53 1520.83,1211.33 1521.42,1212.56 1522.01,1211.31 1522.59,1212.64 1523.18,1211.36 1523.77,1207.56 1524.35,1210.62 1524.94,1213.13 1525.52,1215.61 1526.11,1216.65 1526.7,1217.74 1527.28,1217.9 1527.87,1216.33 1528.46,1214.98 1529.04,1213.76 1529.63,1213.57 1530.22,1212.11 1530.8,1212.47 1531.39,1213.66 1531.98,1214.86 1532.56,1212.19 1533.15,1212.3 1533.73,1211.1 1534.32,1212.49 1534.91,1213.71 1535.49,1212.72 1536.08,1215.12 1536.67,1213.47 1537.25,1211.12 1537.84,1211.37 1538.43,1208.92 1539.01,1207.88 1539.6,1208.41 1540.19,1208.77 1540.77,1208.92 1541.36,1209.11 1541.94,1210.89 1542.53,1212.07 1543.12,1208.18 1543.7,1207.34 1544.29,1206.34 1544.88,1205.5 1545.46,1208.42 1546.05,1210.08 1546.64,1212.45 1547.22,1211.26 1547.81,1208.8 1548.4,1208.89 1548.98,1208.1 1549.57,1208.12 1550.15,1209.62 1550.74,1210 1551.33,1211.42 1551.91,1211.58 1552.5,1210.25 1553.09,1211.67 1553.67,1212.88 1554.26,1213.03 1554.85,1214.14 1555.43,1213.26 1556.02,1214.44 1556.6,1212.98 1557.19,1214.49 1557.78,1215.73 1558.36,1213.24 1558.95,1214.57 1559.54,1215.86 1560.12,1215.9 1560.71,1214.48 1561.3,1214.53 1561.88,1214.57 1562.47,1214.61 1563.06,1215.68 1563.64,1214.39 1564.23,1213.25 1564.81,1210.85 1565.4,1209.98 1565.99,1207.73 1566.57,1209.37 1567.16,1210.98 1567.75,1213.57 1568.33,1214.82 1568.92,1214.82 1569.51,1215.01 1570.09,1213.47 1570.68,1213.55 1571.27,1214.76 1571.85,1213.9 1572.44,1215 1573.02,1212.65 1573.61,1213.99 1574.2,1216.48 1574.78,1217.57 1575.37,1217.6 1575.96,1218.41 1576.54,1216.88 1577.13,1215.28 1577.72,1215.07 1578.3,1215.1 1578.89,1213.71 1579.47,1212.34 1580.06,1211.36 1580.65,1212.67 1581.23,1212.79 1581.82,1210.22 1582.41,1207.97 1582.99,1209.56 1583.58,1211.1 1584.17,1212.39 1584.75,1213.39 1585.34,1212.3 1585.93,1213.78 1586.51,1211.24 1587.1,1208.9 1587.68,1210.22 1588.27,1212.98 1588.86,1211.77 1589.44,1211.73 1590.03,1211.85 1590.62,1214.23 1591.2,1214.01 1591.79,1216.23 1592.38,1217.28 1592.96,1216.98 1593.55,1216.76 1594.14,1216.25 1594.72,1216.22 1595.31,1213.55 1595.89,1212.09 1596.48,1210.9 1597.07,1210.99 1597.65,1213.81 1598.24,1213.88 1598.83,1212.76 1599.41,1213.99 1600,1212.77 1600.59,1212.75 1601.17,1212.88 1601.76,1212.58 1602.34,1212.64 1602.93,1212.9 1603.52,1213.08 1604.1,1211.98 1604.69,1213.44 1605.28,1220.91 1605.86,1221.58 1606.45,1222.38 1607.04,1220.57 1607.62,1220.19 1608.21,1217.64 1608.8,1214.8 1609.38,1214.96 1609.97,1214.97 1610.55,1214.92 1611.14,1213.74 1611.73,1214.84 1612.31,1212.26 1612.9,1212.54 1613.49,1212.66 1614.07,1211.51 1614.66,1211.71 1615.25,1210.32 1615.83,1214.31 1616.42,1214.18 1617.01,1213.91 1617.59,1212.78 1618.18,1210.83 1618.76,1210.87 1619.35,1209.53 1619.94,1212.1 1620.52,1213.4 1621.11,1213.05 1621.7,1215.39 1622.28,1217.67 1622.87,1217.42 1623.46,1218.38 1624.04,1219.46 1624.63,1217.73 1625.22,1217.16 1625.8,1219.29 1626.39,1221.24 1626.97,1220.92 1627.56,1220.56 1628.15,1220.25 1628.73,1219.77 1629.32,1218.3 1629.91,1216.96 1630.49,1217.13 1631.08,1216.62 1631.67,1213.93 1632.25,1215.4 1632.84,1214.13 1633.42,1215.03 1634.01,1216.21 1634.6,1215.97 1635.18,1214.77 1635.77,1211.04 1636.36,1208.38 1636.94,1209.59 1637.53,1208.43 1638.12,1208.51 1638.7,1211.44 1639.29,1209.1 1639.88,1210.8 1640.46,1211.31 1641.05,1212.51 1641.63,1213.89 1642.22,1213.92 1642.81,1213.84 1643.39,1212.53 1643.98,1210.35 1644.57,1210.58 1645.15,1210.84 1645.74,1213.5 1646.33,1215.99 1646.91,1217.2 1647.5,1216.95 1648.09,1214.21 1648.67,1216.37 1649.26,1216.48 1649.84,1213.57 1650.43,1214.79 1651.02,1216.1 1651.6,1219.87 1652.19,1216.92 1652.78,1217.94 1653.36,1218.84 1653.95,1214.88 1654.54,1215.05 1655.12,1215.01 1655.71,1215.95 1656.29,1215.77 1656.88,1215.88 1657.47,1215.96 1658.05,1218.15 1658.64,1218.17 1659.23,1215.53 1659.81,1213.03 1660.4,1214.49 1660.99,1214.5 1661.57,1212.01 1662.16,1211.87 1662.75,1212.05 1663.33,1212.05 1663.92,1211.16 1664.5,1211.24 1665.09,1212.43 1665.68,1211.15 1666.26,1207.51 1666.85,1208.92 1667.44,1209.05 1668.02,1210.28 1668.61,1207.01 1669.2,1208.5 1669.78,1208.8 1670.37,1209.02 1670.96,1207.95 1671.54,1208.27 1672.13,1206.15 1672.71,1206.54 1673.3,1209.32 1673.89,1209.38 1674.47,1210.87 1675.06,1209.91 1675.65,1208.77 1676.23,1208.82 1676.82,1210.16 1677.41,1211.42 1677.99,1208.85 1678.58,1207.85 1679.17,1208.27 1679.75,1209.52 1680.34,1211.12 1680.92,1210.02 1681.51,1210.4 1682.1,1211.73 1682.68,1215.4 1683.27,1211.64 1683.86,1211.73 1684.44,1212.07 1685.03,1212.16 1685.62,1209.67 1686.2,1209.78 1686.79,1208.91 1687.37,1210.17 1687.96,1208.8 1688.55,1209.06 1689.13,1212.83 1689.72,1213.98 1690.31,1213.71 1690.89,1214.83 1691.48,1215.02 1692.07,1214.9 1692.65,1211.04 1693.24,1211.16 1693.83,1210.35 1694.41,1206.82 1695,1207.16 1695.58,1207.46 1696.17,1207.82 1696.76,1206.7 1697.34,1206.86 1697.93,1206.05 1698.52,1207.73 1699.1,1209.09 1699.69,1207.96 1700.28,1209.75 1700.86,1206.29 1701.45,1204.24 1702.04,1204.84 1702.62,1202.74 1703.21,1205.78 1703.79,1206.21 1704.38,1207.66 1704.97,1209.1 1705.55,1208.17 1706.14,1207.29 1706.73,1206.29 1707.31,1204.18 1707.9,1202.42 1708.49,1202.89 1709.07,1204.59 1709.66,1206.41 1710.24,1206.78 1710.83,1207.22 1711.42,1206.35 1712,1206.57 1712.59,1209.12 1713.18,1209.38 1713.76,1211.75 1714.35,1210.62 1714.94,1210.58 1715.52,1213.28 1716.11,1213.02 1716.7,1215.32 1717.28,1215.17 1717.87,1214.98 1718.45,1215.07 1719.04,1216.14 1719.63,1218.56 1720.21,1220.67 1720.8,1221.33 1721.39,1219.63 1721.97,1218.01 1722.56,1217.8 1723.15,1216.3 1723.73,1215.23 1724.32,1220.1 1724.91,1220.54 1725.49,1220.09 1726.08,1222.28 1726.66,1222.99 1727.25,1223.7 1727.84,1223 1728.42,1221.21 1729.01,1221.09 1729.6,1221.75 1730.18,1221.29 1730.77,1219.69 1731.36,1220.5 1731.94,1222.43 1732.53,1220.66 1733.11,1221.28 1733.7,1221.86 1734.29,1218.91 1734.87,1218.65 1735.46,1218.36 1736.05,1216.7 1736.63,1218.92 1737.22,1218.56 1737.81,1221.74 1738.39,1218.82 1738.98,1219.79 1739.57,1220.7 1740.15,1218.01 1740.74,1215.2 1741.32,1215.15 1741.91,1211.15 1742.5,1212.85 1743.08,1214.25 1743.67,1216.5 1744.26,1216.11 1744.84,1218.36 1745.43,1218.25 1746.02,1214.42 1746.6,1216.89 1747.19,1217.97 1747.78,1217.58 1748.36,1215.92 1748.95,1213.24 1749.53,1213.3 1750.12,1214.54 1750.71,1213.07 1751.29,1210.55 1751.88,1213.44 1752.47,1213.85 1753.05,1213.71 1753.64,1214.92 1754.23,1217.49 1754.81,1217.26 1755.4,1215.75 1755.99,1214.35 1756.57,1212.83 1757.16,1214.01 1757.74,1210.59 1758.33,1210.55 1758.92,1209.68 1759.5,1212.33 1760.09,1214.6 1760.68,1214.49 1761.26,1213.24 1761.85,1212.98 1762.44,1211.8 1763.02,1213.09 1763.61,1211.89 1764.19,1212.14 1764.78,1214.59 1765.37,1215.71 1765.95,1215.56 1766.54,1215.49 1767.13,1216.43 1767.71,1215.2 1768.3,1214.88 1768.89,1213.56 1769.47,1211.08 1770.06,1211.13 1770.65,1213.53 1771.23,1212.42 1771.82,1212.44 1772.4,1214.87 1772.99,1214.83 1773.58,1211.06 1774.16,1210.05 1774.75,1211.23 1775.34,1209.99 1775.92,1209.14 1776.51,1209.53 1777.1,1209.81 1777.68,1211.28 1778.27,1210.18 1778.86,1212.91 1779.44,1212.88 1780.03,1210.48 1780.61,1210.78 1781.2,1215.8 1781.79,1213.45 1782.37,1208.68 1782.96,1210.17 1783.55,1211.77 1784.13,1213 1784.72,1212.79 1785.31,1212.52 1785.89,1214.81 1786.48,1217.35 1787.06,1216.95 1787.65,1217.89 1788.24,1217.61 1788.82,1216.06 1789.41,1215.7 1790,1215.47 1790.58,1216.71 1791.17,1217.76 1791.76,1217.59 1792.34,1218.64 1792.93,1219.7 1793.52,1218.06 1794.1,1218.03 1794.69,1215.37 1795.27,1215.21 1795.86,1213.61 1796.45,1214.77 1797.03,1215.8 1797.62,1217.96 1798.21,1215.22 1798.79,1213.95 1799.38,1215.16 1799.97,1216.42 1800.55,1216.11 1801.14,1215.61 1801.73,1216.66 1802.31,1216.4 1802.9,1216.03 1803.48,1214.38 1804.07,1211.79 1804.66,1211.98 1805.24,1210.76 1805.83,1209.47 1806.42,1210.77 1807,1210.78 1807.59,1209.57 1808.18,1213.53 1808.76,1212.18 1809.35,1212.21 1809.94,1212.25 1810.52,1212.57 1811.11,1212.98 1811.69,1216.64 1812.28,1218 1812.87,1217.72 1813.45,1216.23 1814.04,1212.57 1814.63,1213.86 1815.21,1216.11 1815.8,1215.97 1816.39,1215.91 1816.97,1211.97 1817.56,1212.22 1818.14,1212.33 1818.73,1211.18 1819.32,1212.71 1819.9,1212.87 1820.49,1214.13 1821.08,1213.19 1821.66,1210.93 1822.25,1209.97 1822.84,1211.31 1823.42,1210.15 1824.01,1214.02 1824.6,1212.8 1825.18,1212.83 1825.77,1216.31 1826.35,1218.45 1826.94,1219.52 1827.53,1216.86 1828.11,1216.73 1828.7,1217.91 1829.29,1217.42 1829.87,1218.66 1830.46,1219.29 1831.05,1221.35 1831.63,1219.44 1832.22,1219.25 1832.81,1220.27 1833.39,1218.66 1833.98,1217.08 1834.56,1213.25 1835.15,1213.32 1835.74,1214.61 1836.32,1210.02 1836.91,1212.63 1837.5,1212.49 1838.08,1212.38 1838.67,1215.01 1839.26,1216.1 1839.84,1216.93 1840.43,1218 1841.01,1217.52 1841.6,1214.92 1842.19,1213.51 1842.77,1213.35 1843.36,1210.74 1843.95,1212.07 1844.53,1210.73 1845.12,1211.08 1845.71,1210.99 1846.29,1208.65 1846.88,1207.82 1847.47,1209.25 1848.05,1207 1848.64,1206.37 1849.22,1206.91 1849.81,1205.81 1850.4,1204.87 1850.98,1205.34 1851.57,1205.88 1852.16,1204.94 1852.74,1206.37 1853.33,1206.68 1853.92,1208 1854.5,1208.37 1855.09,1208.81 1855.68,1209 1856.26,1210.39 1856.85,1207.99 1857.43,1209.59 1858.02,1209.8 1858.61,1211.04 1859.19,1208.87 1859.78,1207.93 1860.37,1206.9 1860.95,1205.92 1861.54,1207.66 1862.13,1206.72 1862.71,1206.98 1863.3,1208.44 1863.88,1209.81 1864.47,1210.03 1865.06,1207.76 1865.64,1209.14 1866.23,1208.24 1866.82,1209.77 1867.4,1208.89 1867.99,1210.3 1868.58,1210.72 1869.16,1210.76 1869.75,1212.14 1870.34,1217.07 1870.92,1217.9 1871.51,1218.79 1872.09,1216.43 1872.68,1215.15 1873.27,1215.01 1873.85,1214.88 1874.44,1217.33 1875.03,1217.22 1875.61,1215.65 1876.2,1218.04 1876.79,1216.56 1877.37,1216.37 1877.96,1215.19 1878.55,1219.09 1879.13,1218.54 1879.72,1220.56 1880.3,1220.17 1880.89,1218.45 1881.48,1215.72 1882.06,1214.76 1882.65,1216.89 1883.24,1215.69 1883.82,1214.36 1884.41,1215.37 1885,1212.79 1885.58,1211.4 1886.17,1207.93 1886.76,1208.17 1887.34,1208.57 1887.93,1210.14 1888.51,1210.4 1889.1,1209.42 1889.69,1210.75 1890.27,1207.18 1890.86,1207.88 1891.45,1205.57 1892.03,1204.55 1892.62,1206.14 1893.21,1207.7 1893.79,1206.61 1894.38,1206.98 1894.96,1205.98 1895.55,1206.1 1896.14,1206.47 1896.72,1205.65 1897.31,1203.56 1897.9,1202.78 1898.48,1201.01 1899.07,1201.64 1899.66,1199.9 1900.24,1200.59 1900.83,1201.26 1901.42,1201.8 1902,1203.52 1902.59,1204.16 1903.17,1205.87 1903.76,1205.06 1904.35,1206.75 1904.93,1207.07 1905.52,1209.66 1906.11,1211.48 1906.69,1211.5 1907.28,1210.76 1907.87,1209.9 1908.45,1213.77 1909.04,1214.02 1909.63,1214.04 1910.21,1212.79 1910.8,1211.67 1911.38,1212.94 1911.97,1212.97 1912.56,1213.1 1913.14,1216.71 1913.73,1218.85 1914.32,1218.79 1914.9,1218.65 1915.49,1219.67 1916.08,1220.72 1916.66,1220.11 1917.25,1220.99 1917.83,1218.09 1918.42,1220.45 1919.01,1221.26 1919.59,1220.77 1920.18,1222.71 1920.77,1224.41 1921.35,1222.74 1921.94,1220.95 1922.53,1219.51 1923.11,1221.39 1923.7,1222.04 1924.29,1221.4 1924.87,1222.15 1925.46,1219.64 1926.04,1220.66 1926.63,1220.14 1927.22,1218.55 1927.8,1218.1 1928.39,1222.61 1928.98,1220.85 1929.56,1221.78 1930.15,1222.58 1930.74,1220.81 1931.32,1215.69 1931.91,1216.53 1932.5,1216.33 1933.08,1217.62 1933.67,1216.17 1934.25,1216.35 1934.84,1215.95 1935.43,1217.01 1936.01,1220.37 1936.6,1222.27 1937.19,1220.59 1937.77,1220.38 1938.36,1220 1938.95,1220.83 1939.53,1219.33 1940.12,1220.23 1940.71,1220.76 1941.29,1220.22 1941.88,1218.43 1942.46,1216.8 1943.05,1215.39 1943.64,1217.71 1944.22,1218.57 1944.81,1215.93 1945.4,1214.54 1945.98,1214.75 1946.57,1212.41 1947.16,1214.04 1947.74,1214.01 1948.33,1213.08 1948.91,1215.53 1949.5,1215.33 1950.09,1216.52 1950.67,1213.9 1951.26,1213.72 1951.85,1215.03 1952.43,1214.7 1953.02,1215.71 1953.61,1215.49 1954.19,1217.75 1954.78,1217.55 1955.37,1216.19 1955.95,1216.24 1956.54,1213.59 1957.12,1212.24 1957.71,1213.54 1958.3,1214.66 1958.88,1214.55 1959.47,1213.37 1960.06,1213.21 1960.64,1212.14 1961.23,1212.26 1961.82,1212.17 1962.4,1212.36 1962.99,1209.85 1963.58,1206.22 1964.16,1206.62 1964.75,1208.3 1965.33,1208.47 1965.92,1208.81 1966.51,1209.08 1967.09,1208.26 1967.68,1211.24 1968.27,1208.87 1968.85,1210.5 1969.44,1209.4 1970.03,1208.34 1970.61,1209.69 1971.2,1208.55 1971.78,1210.23 1972.37,1210.61 1972.96,1213.1 1973.54,1213.2 1974.13,1212.93 1974.72,1211.74 1975.3,1210.72 1975.89,1212.06 1976.48,1213.28 1977.06,1210.83 1977.65,1212.31 1978.24,1213.63 1978.82,1215.01 1979.41,1214.68 1979.99,1214.53 1980.58,1214.36 1981.17,1215.31 1981.75,1215.26 1982.34,1212.77 1982.93,1213.94 1983.51,1215.14 1984.1,1213.87 1984.69,1213.8 1985.27,1212.92 1985.86,1212.06 1986.45,1214.42 1987.03,1216.73 1987.62,1217.72 1988.2,1217.78 1988.79,1217.36 1989.38,1215.94 1989.96,1213.43 1990.55,1211.98 1991.14,1212.28 1991.72,1209.82 1992.31,1212.58 1992.9,1211.31 1993.48,1211.43 1994.07,1211.38 1994.65,1211.41 1995.24,1211.68 1995.83,1210.55 1996.41,1213.29 1997,1213.24 1997.59,1215.65 1998.17,1214.31 1998.76,1214.24 1999.35,1215.56 1999.93,1215.53 2000.52,1214.22 2001.11,1211.4 2001.69,1213.78 2002.28,1212.53 2002.86,1212.38 2003.45,1211.22 2004.04,1211.43 2004.62,1211.36 2005.21,1210.41 2005.8,1209.49 2006.38,1207.4 2006.97,1206.47 2007.56,1207.91 2008.14,1206.75 2008.73,1206.64 2009.32,1206.83 2009.9,1207.17 2010.49,1206.39 2011.07,1205.4 2011.66,1205.71 2012.25,1209.54 2012.83,1211.16 2013.42,1211.31 2014.01,1210.18 2014.59,1209.12 2015.18,1208.26 2015.77,1207.36 2016.35,1210.19 2016.94,1211.81 2017.53,1210.69 2018.11,1210.84 2018.7,1212.02 2019.28,1216.92 2019.87,1215.52 2020.46,1215.47 2021.04,1214.34 2021.63,1211.85 2022.22,1212.03 2022.8,1212.33 2023.39,1212.03 2023.98,1212.04 2024.56,1211.12 2025.15,1208.87 2025.73,1210.28 2026.32,1210.45 2026.91,1211.76 2027.49,1212.96 2028.08,1215.61 2028.67,1216.61 2029.25,1216.51 2029.84,1214.01 2030.43,1211.62 2031.01,1211.72 2031.6,1211.66 2032.19,1212.8 2032.77,1215.45 2033.36,1214.15 2033.94,1213.82 2034.53,1213.89 2035.12,1215.32 2035.7,1214.02 2036.29,1214.08 2036.88,1216.53 2037.46,1218.54 2038.05,1216.83 2038.64,1216.62 2039.22,1217.63 2039.81,1214.76 2040.4,1216.01 2040.98,1217.06 2041.57,1218.2 2042.15,1216.79 2042.74,1216.59 2043.33,1217.58 2043.91,1215.1 2044.5,1213.75 2045.09,1213.7 2045.67,1211.15 2046.26,1209.88 2046.85,1212.81 2047.43,1213.9 2048.02,1218.45 2048.6,1217.06 2049.19,1219.26 2049.78,1217.8 2050.36,1218.75 2050.95,1219.83 2051.54,1219.33 2052.12,1216.27 2052.71,1214.79 2053.3,1218.63 2053.88,1218.44 2054.47,1218.04 2055.06,1219.19 2055.64,1218.91 2056.23,1217.35 2056.81,1215.89 2057.4,1214.69 2057.99,1214.59 2058.57,1214.63 2059.16,1214.49 2059.75,1214.49 2060.33,1216.64 2060.92,1216.49 2061.51,1216.7 2062.09,1215.27 2062.68,1216.2 2063.27,1216.23 2063.85,1214.77 2064.44,1214.73 2065.02,1213.53 2065.61,1212.28 2066.2,1213.8 2066.78,1212.47 2067.37,1213.53 2067.96,1213.47 2068.54,1214.67 2069.13,1214.63 2069.72,1213.15 2070.3,1214.09 2070.89,1214.06 2071.48,1213.89 2072.06,1221.06 2072.65,1218.21 2073.23,1217.92 2073.82,1217.57 2074.41,1216.02 2074.99,1218.24 2075.58,1219.33 2076.17,1216.49 2076.75,1220.14 2077.34,1214.86 2077.93,1212.48 2078.51,1212.75 2079.1,1213.08 2079.68,1214.06 2080.27,1213.92 2080.86,1212.57 2081.44,1213.89 2082.03,1213.75 2082.62,1214.68 2083.2,1215.73 2083.79,1214.41 2084.38,1209.46 2084.96,1210.82 2085.55,1215.66 2086.14,1215.7 2086.72,1215.6 2087.31,1215.64 2087.89,1218.05 2088.48,1219.18 2089.07,1218.9 2089.65,1221.19 2090.24,1220.93 2090.83,1220.57 2091.41,1222.83 2092,1219.77 2092.59,1219.52 2093.17,1217.64 2093.76,1216.07 2094.35,1215.81 2094.93,1216.74 2095.52,1218.94 2096.1,1218.78 2096.69,1219.77 2097.28,1219.49 2097.86,1219.34 2098.45,1219.17 2099.04,1217.82 2099.62,1217.69 2100.21,1217.46 2100.8,1217.25 2101.38,1212.2 2101.97,1215.95 2102.55,1213.19 2103.14,1213.12 2103.73,1211.8 2104.31,1207.08 2104.9,1209.6 2105.49,1209.97 2106.07,1209 2106.66,1209.22 2107.25,1209.57 2107.83,1209.75 2108.42,1209.98 2109.01,1207.97 2109.59,1203.32 2110.18,1203.76 2110.76,1203.01 2111.35,1203.48 2111.94,1204.17 2112.52,1202.21 2113.11,1201.8 2113.7,1202.78 2114.28,1202.14 2114.87,1201.48 2115.46,1202.36 2116.04,1202.89 2116.63,1202.13 2117.22,1204.23 2117.8,1204.74 2118.39,1204.17 2118.97,1204.52 2119.56,1207.52 2120.15,1209.02 2120.73,1208.31 2121.32,1207.73 2121.91,1208.05 2122.49,1209.42 2123.08,1210.6 2123.67,1209.57 2124.25,1209.82 2124.84,1209.16 2125.42,1206.87 2126.01,1207.14 2126.6,1209.66 2127.18,1208.53 2127.77,1208.91 2128.36,1208.89 2128.94,1210.3 2129.53,1209.2 2130.12,1207.99 2130.7,1208.23 2131.29,1208.52 2131.88,1208.78 2132.46,1213.69 2133.05,1213.6 2133.63,1213.61 2134.22,1213.41 2134.81,1214.73 2135.39,1219.59 2135.98,1218.29 2136.57,1218.11 2137.15,1216.88 2137.74,1215.55 2138.33,1211.71 2138.91,1214.28 2139.5,1214.08 2140.09,1216.31 2140.67,1217.3 2141.26,1217.12 2141.84,1214.48 2142.43,1213.11 2143.02,1213.27 2143.6,1210.84 2144.19,1209.77 2144.78,1208.7 2145.36,1210.23 2145.95,1211.82 2146.54,1213.41 2147.12,1214.54 2147.71,1216.02 2148.3,1217.06 2148.88,1218.18 2149.47,1216.69 2150.05,1217.59 2150.64,1217.42 2151.23,1220.91 2151.81,1220.4 2152.4,1220.16 2152.99,1216.2 2153.57,1218.54 2154.16,1219.62 2154.75,1221.87 2155.33,1222.88 2155.92,1222.17 2156.5,1221.66 2157.09,1222.46 2157.68,1223.26 2158.26,1222.5 \"/>\n<path clip-path=\"url(#clip322)\" d=\"M986.025 1213.8 L986.612 1213.8 L987.198 1213.8 L987.785 1213.8 L988.371 1213.8 L988.957 1213.8 L989.544 1213.8 L990.13 1213.8 L990.717 1213.8 L991.303 1213.8 L991.889 1213.8 L992.476 1213.8 L993.062 1213.8 L993.649 1213.8 L994.235 1213.8 L994.822 1213.8 L995.408 1213.8 L995.994 1213.8 L996.581 1213.8 L997.167 1213.8 L997.754 1213.8 L998.34 1213.8 L998.926 1213.8 L999.513 1213.8 L1000.1 1213.8 L1000.69 1213.8 L1001.27 1213.8 L1001.86 1213.8 L1002.44 1213.8 L1003.03 1213.8 L1003.62 1213.8 L1004.2 1213.8 L1004.79 1213.8 L1005.38 1213.8 L1005.96 1213.8 L1006.55 1213.8 L1007.14 1213.8 L1007.72 1213.8 L1008.31 1213.8 L1008.9 1213.8 L1009.48 1213.8 L1010.07 1213.8 L1010.65 1213.8 L1011.24 1213.8 L1011.83 1213.8 L1012.41 1213.8 L1013 1213.8 L1013.59 1213.8 L1014.17 1213.8 L1014.76 1213.8 L1015.35 1213.8 L1015.93 1213.8 L1016.52 1213.8 L1017.11 1213.8 L1017.69 1213.8 L1018.28 1213.8 L1018.86 1213.8 L1019.45 1213.8 L1020.04 1213.8 L1020.62 1213.8 L1021.21 1213.8 L1021.8 1213.8 L1022.38 1213.8 L1022.97 1213.8 L1023.56 1213.8 L1024.14 1213.8 L1024.73 1213.8 L1025.32 1213.8 L1025.9 1213.8 L1026.49 1213.8 L1027.07 1213.8 L1027.66 1213.8 L1028.25 1213.8 L1028.83 1213.8 L1029.42 1213.8 L1030.01 1213.8 L1030.59 1213.8 L1031.18 1213.8 L1031.77 1213.8 L1032.35 1213.8 L1032.94 1213.8 L1033.52 1213.8 L1034.11 1213.8 L1034.7 1213.8 L1035.28 1213.8 L1035.87 1213.8 L1036.46 1213.8 L1037.04 1213.8 L1037.63 1213.8 L1038.22 1213.8 L1038.8 1213.8 L1039.39 1213.8 L1039.98 1213.8 L1040.56 1213.8 L1041.15 1213.8 L1041.73 1213.8 L1042.32 1213.8 L1042.91 1213.8 L1043.49 1213.8 L1044.08 1213.8 L1044.67 1213.8 L1045.25 1213.8 L1045.84 1213.8 L1046.43 1213.8 L1047.01 1213.8 L1047.6 1213.8 L1048.19 1213.8 L1048.77 1213.8 L1049.36 1213.8 L1049.94 1213.8 L1050.53 1213.8 L1051.12 1213.8 L1051.7 1213.8 L1052.29 1213.8 L1052.88 1213.8 L1053.46 1213.8 L1054.05 1213.8 L1054.64 1213.8 L1055.22 1213.8 L1055.81 1213.8 L1056.39 1213.8 L1056.98 1213.8 L1057.57 1213.8 L1058.15 1213.8 L1058.74 1213.8 L1059.33 1213.8 L1059.91 1213.8 L1060.5 1213.8 L1061.09 1213.8 L1061.67 1213.8 L1062.26 1213.8 L1062.85 1213.8 L1063.43 1213.8 L1064.02 1213.8 L1064.6 1213.8 L1065.19 1213.8 L1065.78 1213.8 L1066.36 1213.8 L1066.95 1213.8 L1067.54 1213.8 L1068.12 1213.8 L1068.71 1213.8 L1069.3 1213.8 L1069.88 1213.8 L1070.47 1213.8 L1071.06 1213.8 L1071.64 1213.8 L1072.23 1213.8 L1072.81 1213.8 L1073.4 1213.8 L1073.99 1213.8 L1074.57 1213.8 L1075.16 1213.8 L1075.75 1213.8 L1076.33 1213.8 L1076.92 1213.8 L1077.51 1213.8 L1078.09 1213.8 L1078.68 1213.8 L1079.26 1213.8 L1079.85 1213.8 L1080.44 1213.8 L1081.02 1213.8 L1081.61 1213.8 L1082.2 1213.8 L1082.78 1213.8 L1083.37 1213.8 L1083.96 1213.8 L1084.54 1213.8 L1085.13 1213.8 L1085.72 1213.8 L1086.3 1213.8 L1086.89 1213.8 L1087.47 1213.8 L1088.06 1213.8 L1088.65 1213.8 L1089.23 1213.8 L1089.82 1213.8 L1090.41 1213.8 L1090.99 1213.8 L1091.58 1213.8 L1092.17 1213.8 L1092.75 1213.8 L1093.34 1213.8 L1093.93 1213.8 L1094.51 1213.8 L1095.1 1213.8 L1095.68 1213.8 L1096.27 1213.8 L1096.86 1213.8 L1097.44 1213.8 L1098.03 1213.8 L1098.62 1213.8 L1099.2 1213.8 L1099.79 1213.8 L1100.38 1213.8 L1100.96 1213.8 L1101.55 1213.8 L1102.14 1213.8 L1102.72 1213.8 L1103.31 1213.8 L1103.89 1213.8 L1104.48 1213.8 L1105.07 1213.8 L1105.65 1213.8 L1106.24 1213.8 L1106.83 1213.8 L1107.41 1213.8 L1108 1213.8 L1108.59 1213.8 L1109.17 1213.8 L1109.76 1213.8 L1110.34 1213.8 L1110.93 1213.8 L1111.52 1213.8 L1112.1 1213.8 L1112.69 1213.8 L1113.28 1213.8 L1113.86 1213.8 L1114.45 1213.8 L1115.04 1213.8 L1115.62 1213.8 L1116.21 1213.8 L1116.8 1213.8 L1117.38 1213.8 L1117.97 1213.8 L1118.55 1213.8 L1119.14 1213.8 L1119.73 1213.8 L1120.31 1213.8 L1120.9 1213.8 L1121.49 1213.8 L1122.07 1213.8 L1122.66 1213.8 L1123.25 1213.8 L1123.83 1213.8 L1124.42 1213.8 L1125.01 1213.8 L1125.59 1213.8 L1126.18 1213.8 L1126.76 1213.8 L1127.35 1213.8 L1127.94 1213.8 L1128.52 1213.8 L1129.11 1213.8 L1129.7 1213.8 L1130.28 1213.8 L1130.87 1213.8 L1131.46 1213.8 L1132.04 1213.8 L1132.63 1213.8 L1133.21 1213.8 L1133.8 1213.8 L1134.39 1213.8 L1134.97 1213.8 L1135.56 1213.8 L1136.15 1213.8 L1136.73 1213.8 L1137.32 1213.8 L1137.91 1213.8 L1138.49 1213.8 L1139.08 1213.8 L1139.67 1213.8 L1140.25 1213.8 L1140.84 1213.8 L1141.42 1213.8 L1142.01 1213.8 L1142.6 1213.8 L1143.18 1213.8 L1143.77 1213.8 L1144.36 1213.8 L1144.94 1213.8 L1145.53 1213.8 L1146.12 1213.8 L1146.7 1213.8 L1147.29 1213.8 L1147.88 1213.8 L1148.46 1213.8 L1149.05 1213.8 L1149.63 1213.8 L1150.22 1213.8 L1150.81 1213.8 L1151.39 1213.8 L1151.98 1213.8 L1152.57 1213.8 L1153.15 1213.8 L1153.74 1213.8 L1154.33 1213.8 L1154.91 1213.8 L1155.5 1213.8 L1156.09 1213.8 L1156.67 1213.8 L1157.26 1213.8 L1157.84 1213.8 L1158.43 1213.8 L1159.02 1213.8 L1159.6 1213.8 L1160.19 1213.8 L1160.78 1213.8 L1161.36 1213.8 L1161.95 1213.8 L1162.54 1213.8 L1163.12 1213.8 L1163.71 1213.8 L1164.29 1213.8 L1164.88 1213.8 L1165.47 1213.8 L1166.05 1213.8 L1166.64 1213.8 L1167.23 1213.8 L1167.81 1213.8 L1168.4 1213.8 L1168.99 1213.8 L1169.57 1213.8 L1170.16 1213.8 L1170.75 1213.8 L1171.33 1213.8 L1171.92 1213.8 L1172.5 1213.8 L1173.09 1213.8 L1173.68 1213.8 L1174.26 1213.8 L1174.85 1213.8 L1175.44 1213.8 L1176.02 1213.8 L1176.61 1213.8 L1177.2 1213.8 L1177.78 1213.8 L1178.37 1213.8 L1178.96 1213.8 L1179.54 1213.8 L1180.13 1213.8 L1180.71 1213.8 L1181.3 1213.8 L1181.89 1213.8 L1182.47 1213.8 L1183.06 1213.8 L1183.65 1213.8 L1184.23 1213.8 L1184.82 1213.8 L1185.41 1213.8 L1185.99 1213.8 L1186.58 1213.8 L1187.16 1213.8 L1187.75 1213.8 L1188.34 1213.8 L1188.92 1213.8 L1189.51 1213.8 L1190.1 1213.8 L1190.68 1213.8 L1191.27 1213.8 L1191.86 1213.8 L1192.44 1213.8 L1193.03 1213.8 L1193.62 1213.8 L1194.2 1213.8 L1194.79 1213.8 L1195.37 1213.8 L1195.96 1213.8 L1196.55 1213.8 L1197.13 1213.8 L1197.72 1213.8 L1198.31 1213.8 L1198.89 1213.8 L1199.48 1213.8 L1200.07 1213.8 L1200.65 1213.8 L1201.24 1213.8 L1201.83 1213.8 L1202.41 1213.8 L1203 1213.8 L1203.58 1213.8 L1204.17 1213.8 L1204.76 1213.8 L1205.34 1213.8 L1205.93 1213.8 L1206.52 1213.8 L1207.1 1213.8 L1207.69 1213.8 L1208.28 1213.8 L1208.86 1213.8 L1209.45 1213.8 L1210.03 1213.8 L1210.62 1213.8 L1211.21 1213.8 L1211.79 1213.8 L1212.38 1213.8 L1212.97 1213.8 L1213.55 1213.8 L1214.14 1213.8 L1214.73 1213.8 L1215.31 1213.8 L1215.9 1213.8 L1216.49 1213.8 L1217.07 1213.8 L1217.66 1213.8 L1218.24 1213.8 L1218.83 1213.8 L1219.42 1213.8 L1220 1213.8 L1220.59 1213.8 L1221.18 1213.8 L1221.76 1213.8 L1222.35 1213.8 L1222.94 1213.8 L1223.52 1213.8 L1224.11 1213.8 L1224.7 1213.8 L1225.28 1213.8 L1225.87 1213.8 L1226.45 1213.8 L1227.04 1213.8 L1227.63 1213.8 L1228.21 1213.8 L1228.8 1213.8 L1229.39 1213.8 L1229.97 1213.8 L1230.56 1213.8 L1231.15 1213.8 L1231.73 1213.8 L1232.32 1213.8 L1232.91 1213.8 L1233.49 1213.8 L1234.08 1213.8 L1234.66 1213.8 L1235.25 1213.8 L1235.84 1213.8 L1236.42 1213.8 L1237.01 1213.8 L1237.6 1213.8 L1238.18 1213.8 L1238.77 1213.8 L1239.36 1213.8 L1239.94 1213.8 L1240.53 1213.8 L1241.11 1213.8 L1241.7 1213.8 L1242.29 1213.8 L1242.87 1213.8 L1243.46 1213.8 L1244.05 1213.8 L1244.63 1213.8 L1245.22 1213.8 L1245.81 1213.8 L1246.39 1213.8 L1246.98 1213.8 L1247.57 1213.8 L1248.15 1213.8 L1248.74 1213.8 L1249.32 1213.8 L1249.91 1213.8 L1250.5 1213.8 L1251.08 1213.8 L1251.67 1213.8 L1252.26 1213.8 L1252.84 1213.8 L1253.43 1213.8 L1254.02 1213.8 L1254.6 1213.8 L1255.19 1213.8 L1255.78 1213.8 L1256.36 1213.8 L1256.95 1213.8 L1257.53 1213.8 L1258.12 1213.8 L1258.71 1213.8 L1259.29 1213.8 L1259.88 1213.8 L1260.47 1213.8 L1261.05 1213.8 L1261.64 1213.8 L1262.23 1213.8 L1262.81 1213.8 L1263.4 1213.8 L1263.98 1213.8 L1264.57 1213.8 L1265.16 1213.8 L1265.74 1213.8 L1266.33 1213.8 L1266.92 1213.8 L1267.5 1213.8 L1268.09 1213.8 L1268.68 1213.8 L1269.26 1213.8 L1269.85 1213.8 L1270.44 1213.8 L1271.02 1213.8 L1271.61 1213.8 L1272.19 1213.8 L1272.78 1213.8 L1273.37 1213.8 L1273.95 1213.8 L1274.54 1213.8 L1275.13 1213.8 L1275.71 1213.8 L1276.3 1213.8 L1276.89 1213.8 L1277.47 1213.8 L1278.06 1213.8 L1278.65 1213.8 L1279.23 1213.8 L1279.82 1213.8 L1280.4 1213.8 L1280.99 1213.8 L1281.58 1213.8 L1282.16 1213.8 L1282.75 1213.8 L1283.34 1213.8 L1283.92 1213.8 L1284.51 1213.8 L1285.1 1213.8 L1285.68 1213.8 L1286.27 1213.8 L1286.86 1213.8 L1287.44 1213.8 L1288.03 1213.8 L1288.61 1213.8 L1289.2 1213.8 L1289.79 1213.8 L1290.37 1213.8 L1290.96 1213.8 L1291.55 1213.8 L1292.13 1213.8 L1292.72 1213.8 L1293.31 1213.8 L1293.89 1213.8 L1294.48 1213.8 L1295.06 1213.8 L1295.65 1213.8 L1296.24 1213.8 L1296.82 1213.8 L1297.41 1213.8 L1298 1213.8 L1298.58 1213.8 L1299.17 1213.8 L1299.76 1213.8 L1300.34 1213.8 L1300.93 1213.8 L1301.52 1213.8 L1302.1 1213.8 L1302.69 1213.8 L1303.27 1213.8 L1303.86 1213.8 L1304.45 1213.8 L1305.03 1213.8 L1305.62 1213.8 L1306.21 1213.8 L1306.79 1213.8 L1307.38 1213.8 L1307.97 1213.8 L1308.55 1213.8 L1309.14 1213.8 L1309.73 1213.8 L1310.31 1213.8 L1310.9 1213.8 L1311.48 1213.8 L1312.07 1213.8 L1312.66 1213.8 L1313.24 1213.8 L1313.83 1213.8 L1314.42 1213.8 L1315 1213.8 L1315.59 1213.8 L1316.18 1213.8 L1316.76 1213.8 L1317.35 1213.8 L1317.93 1213.8 L1318.52 1213.8 L1319.11 1213.8 L1319.69 1213.8 L1320.28 1213.8 L1320.87 1213.8 L1321.45 1213.8 L1322.04 1213.8 L1322.63 1213.8 L1323.21 1213.8 L1323.8 1213.8 L1324.39 1213.8 L1324.97 1213.8 L1325.56 1213.8 L1326.14 1213.8 L1326.73 1213.8 L1327.32 1213.8 L1327.9 1213.8 L1328.49 1213.8 L1329.08 1213.8 L1329.66 1213.8 L1330.25 1213.8 L1330.84 1213.8 L1331.42 1213.8 L1332.01 1213.8 L1332.6 1213.8 L1333.18 1213.8 L1333.77 1213.8 L1334.35 1213.8 L1334.94 1213.8 L1335.53 1213.8 L1336.11 1213.8 L1336.7 1213.8 L1337.29 1213.8 L1337.87 1213.8 L1338.46 1213.8 L1339.05 1213.8 L1339.63 1213.8 L1340.22 1213.8 L1340.8 1213.8 L1341.39 1213.8 L1341.98 1213.8 L1342.56 1213.8 L1343.15 1213.8 L1343.74 1213.8 L1344.32 1213.8 L1344.91 1213.8 L1345.5 1213.8 L1346.08 1213.8 L1346.67 1213.8 L1347.26 1213.8 L1347.84 1213.8 L1348.43 1213.8 L1349.01 1213.8 L1349.6 1213.8 L1350.19 1213.8 L1350.77 1213.8 L1351.36 1213.8 L1351.95 1213.8 L1352.53 1213.8 L1353.12 1213.8 L1353.71 1213.8 L1354.29 1213.8 L1354.88 1213.8 L1355.47 1213.8 L1356.05 1213.8 L1356.64 1213.8 L1357.22 1213.8 L1357.81 1213.8 L1358.4 1213.8 L1358.98 1213.8 L1359.57 1213.8 L1360.16 1213.8 L1360.74 1213.8 L1361.33 1213.8 L1361.92 1213.8 L1362.5 1213.8 L1363.09 1213.8 L1363.68 1213.8 L1364.26 1213.8 L1364.85 1213.8 L1365.43 1213.8 L1366.02 1213.8 L1366.61 1213.8 L1367.19 1213.8 L1367.78 1213.8 L1368.37 1213.8 L1368.95 1213.8 L1369.54 1213.8 L1370.13 1213.8 L1370.71 1213.8 L1371.3 1213.8 L1371.88 1213.8 L1372.47 1213.8 L1373.06 1213.8 L1373.64 1213.8 L1374.23 1213.8 L1374.82 1213.8 L1375.4 1213.8 L1375.99 1213.8 L1376.58 1213.8 L1377.16 1213.8 L1377.75 1213.8 L1378.34 1213.8 L1378.92 1213.8 L1379.51 1213.8 L1380.09 1213.8 L1380.68 1213.8 L1381.27 1213.8 L1381.85 1213.8 L1382.44 1213.8 L1383.03 1213.8 L1383.61 1213.8 L1384.2 1213.8 L1384.79 1213.8 L1385.37 1213.8 L1385.96 1213.8 L1386.55 1213.8 L1387.13 1213.8 L1387.72 1213.8 L1388.3 1213.8 L1388.89 1213.8 L1389.48 1213.8 L1390.06 1213.8 L1390.65 1213.8 L1391.24 1213.8 L1391.82 1213.8 L1392.41 1213.8 L1393 1213.8 L1393.58 1213.8 L1394.17 1213.8 L1394.75 1213.8 L1395.34 1213.8 L1395.93 1213.8 L1396.51 1213.8 L1397.1 1213.8 L1397.69 1213.8 L1398.27 1213.8 L1398.86 1213.8 L1399.45 1213.8 L1400.03 1213.8 L1400.62 1213.8 L1401.21 1213.8 L1401.79 1213.8 L1402.38 1213.8 L1402.96 1213.8 L1403.55 1213.8 L1404.14 1213.8 L1404.72 1213.8 L1405.31 1213.8 L1405.9 1213.8 L1406.48 1213.8 L1407.07 1213.8 L1407.66 1213.8 L1408.24 1213.8 L1408.83 1213.8 L1409.42 1213.8 L1410 1213.8 L1410.59 1213.8 L1411.17 1213.8 L1411.76 1213.8 L1412.35 1213.8 L1412.93 1213.8 L1413.52 1213.8 L1414.11 1213.8 L1414.69 1213.8 L1415.28 1213.8 L1415.87 1213.8 L1416.45 1213.8 L1417.04 1213.8 L1417.63 1213.8 L1418.21 1213.8 L1418.8 1213.8 L1419.38 1213.8 L1419.97 1213.8 L1420.56 1213.8 L1421.14 1213.8 L1421.73 1213.8 L1422.32 1213.8 L1422.9 1213.8 L1423.49 1213.8 L1424.08 1213.8 L1424.66 1213.8 L1425.25 1213.8 L1425.83 1213.8 L1426.42 1213.8 L1427.01 1213.8 L1427.59 1213.8 L1428.18 1213.8 L1428.77 1213.8 L1429.35 1213.8 L1429.94 1213.8 L1430.53 1213.8 L1431.11 1213.8 L1431.7 1213.8 L1432.29 1213.8 L1432.87 1213.8 L1433.46 1213.8 L1434.04 1213.8 L1434.63 1213.8 L1435.22 1213.8 L1435.8 1213.8 L1436.39 1213.8 L1436.98 1213.8 L1437.56 1213.8 L1438.15 1213.8 L1438.74 1213.8 L1439.32 1213.8 L1439.91 1213.8 L1440.5 1213.8 L1441.08 1213.8 L1441.67 1213.8 L1442.25 1213.8 L1442.84 1213.8 L1443.43 1213.8 L1444.01 1213.8 L1444.6 1213.8 L1445.19 1213.8 L1445.77 1213.8 L1446.36 1213.8 L1446.95 1213.8 L1447.53 1213.8 L1448.12 1213.8 L1448.7 1213.8 L1449.29 1213.8 L1449.88 1213.8 L1450.46 1213.8 L1451.05 1213.8 L1451.64 1213.8 L1452.22 1213.8 L1452.81 1213.8 L1453.4 1213.8 L1453.98 1213.8 L1454.57 1213.8 L1455.16 1213.8 L1455.74 1213.8 L1456.33 1213.8 L1456.91 1213.8 L1457.5 1213.8 L1458.09 1213.8 L1458.67 1213.8 L1459.26 1213.8 L1459.85 1213.8 L1460.43 1213.8 L1461.02 1213.8 L1461.61 1213.8 L1462.19 1213.8 L1462.78 1213.8 L1463.37 1213.8 L1463.95 1213.8 L1464.54 1213.8 L1465.12 1213.8 L1465.71 1213.8 L1466.3 1213.8 L1466.88 1213.8 L1467.47 1213.8 L1468.06 1213.8 L1468.64 1213.8 L1469.23 1213.8 L1469.82 1213.8 L1470.4 1213.8 L1470.99 1213.8 L1471.57 1213.8 L1472.16 1213.8 L1472.75 1213.8 L1473.33 1213.8 L1473.92 1213.8 L1474.51 1213.8 L1475.09 1213.8 L1475.68 1213.8 L1476.27 1213.8 L1476.85 1213.8 L1477.44 1213.8 L1478.03 1213.8 L1478.61 1213.8 L1479.2 1213.8 L1479.78 1213.8 L1480.37 1213.8 L1480.96 1213.8 L1481.54 1213.8 L1482.13 1213.8 L1482.72 1213.8 L1483.3 1213.8 L1483.89 1213.8 L1484.48 1213.8 L1485.06 1213.8 L1485.65 1213.8 L1486.24 1213.8 L1486.82 1213.8 L1487.41 1213.8 L1487.99 1213.8 L1488.58 1213.8 L1489.17 1213.8 L1489.75 1213.8 L1490.34 1213.8 L1490.93 1213.8 L1491.51 1213.8 L1492.1 1213.8 L1492.69 1213.8 L1493.27 1213.8 L1493.86 1213.8 L1494.45 1213.8 L1495.03 1213.8 L1495.62 1213.8 L1496.2 1213.8 L1496.79 1213.8 L1497.38 1213.8 L1497.96 1213.8 L1498.55 1213.8 L1499.14 1213.8 L1499.72 1213.8 L1500.31 1213.8 L1500.9 1213.8 L1501.48 1213.8 L1502.07 1213.8 L1502.65 1213.8 L1503.24 1213.8 L1503.83 1213.8 L1504.41 1213.8 L1505 1213.8 L1505.59 1213.8 L1506.17 1213.8 L1506.76 1213.8 L1507.35 1213.8 L1507.93 1213.8 L1508.52 1213.8 L1509.11 1213.8 L1509.69 1213.8 L1510.28 1213.8 L1510.86 1213.8 L1511.45 1213.8 L1512.04 1213.8 L1512.62 1213.8 L1513.21 1213.8 L1513.8 1213.8 L1514.38 1213.8 L1514.97 1213.8 L1515.56 1213.8 L1516.14 1213.8 L1516.73 1213.8 L1517.32 1213.8 L1517.9 1213.8 L1518.49 1213.8 L1519.07 1213.8 L1519.66 1213.8 L1520.25 1213.8 L1520.83 1213.8 L1521.42 1213.8 L1522.01 1213.8 L1522.59 1213.8 L1523.18 1213.8 L1523.77 1213.8 L1524.35 1213.8 L1524.94 1213.8 L1525.52 1213.8 L1526.11 1213.8 L1526.7 1213.8 L1527.28 1213.8 L1527.87 1213.8 L1528.46 1213.8 L1529.04 1213.8 L1529.63 1213.8 L1530.22 1213.8 L1530.8 1213.8 L1531.39 1213.8 L1531.98 1213.8 L1532.56 1213.8 L1533.15 1213.8 L1533.73 1213.8 L1534.32 1213.8 L1534.91 1213.8 L1535.49 1213.8 L1536.08 1213.8 L1536.67 1213.8 L1537.25 1213.8 L1537.84 1213.8 L1538.43 1213.8 L1539.01 1213.8 L1539.6 1213.8 L1540.19 1213.8 L1540.77 1213.8 L1541.36 1213.8 L1541.94 1213.8 L1542.53 1213.8 L1543.12 1213.8 L1543.7 1213.8 L1544.29 1213.8 L1544.88 1213.8 L1545.46 1213.8 L1546.05 1213.8 L1546.64 1213.8 L1547.22 1213.8 L1547.81 1213.8 L1548.4 1213.8 L1548.98 1213.8 L1549.57 1213.8 L1550.15 1213.8 L1550.74 1213.8 L1551.33 1213.8 L1551.91 1213.8 L1552.5 1213.8 L1553.09 1213.8 L1553.67 1213.8 L1554.26 1213.8 L1554.85 1213.8 L1555.43 1213.8 L1556.02 1213.8 L1556.6 1213.8 L1557.19 1213.8 L1557.78 1213.8 L1558.36 1213.8 L1558.95 1213.8 L1559.54 1213.8 L1560.12 1213.8 L1560.71 1213.8 L1561.3 1213.8 L1561.88 1213.8 L1562.47 1213.8 L1563.06 1213.8 L1563.64 1213.8 L1564.23 1213.8 L1564.81 1213.8 L1565.4 1213.8 L1565.99 1213.8 L1566.57 1213.8 L1567.16 1213.8 L1567.75 1213.8 L1568.33 1213.8 L1568.92 1213.8 L1569.51 1213.8 L1570.09 1213.8 L1570.68 1213.8 L1571.27 1213.8 L1571.85 1213.8 L1572.44 1213.8 L1573.02 1213.8 L1573.61 1213.8 L1574.2 1213.8 L1574.78 1213.8 L1575.37 1213.8 L1575.96 1213.8 L1576.54 1213.8 L1577.13 1213.8 L1577.72 1213.8 L1578.3 1213.8 L1578.89 1213.8 L1579.47 1213.8 L1580.06 1213.8 L1580.65 1213.8 L1581.23 1213.8 L1581.82 1213.8 L1582.41 1213.8 L1582.99 1213.8 L1583.58 1213.8 L1584.17 1213.8 L1584.75 1213.8 L1585.34 1213.8 L1585.93 1213.8 L1586.51 1213.8 L1587.1 1213.8 L1587.68 1213.8 L1588.27 1213.8 L1588.86 1213.8 L1589.44 1213.8 L1590.03 1213.8 L1590.62 1213.8 L1591.2 1213.8 L1591.79 1213.8 L1592.38 1213.8 L1592.96 1213.8 L1593.55 1213.8 L1594.14 1213.8 L1594.72 1213.8 L1595.31 1213.8 L1595.89 1213.8 L1596.48 1213.8 L1597.07 1213.8 L1597.65 1213.8 L1598.24 1213.8 L1598.83 1213.8 L1599.41 1213.8 L1600 1213.8 L1600.59 1213.8 L1601.17 1213.8 L1601.76 1213.8 L1602.34 1213.8 L1602.93 1213.8 L1603.52 1213.8 L1604.1 1213.8 L1604.69 1213.8 L1605.28 1213.8 L1605.86 1213.8 L1606.45 1213.8 L1607.04 1213.8 L1607.62 1213.8 L1608.21 1213.8 L1608.8 1213.8 L1609.38 1213.8 L1609.97 1213.8 L1610.55 1213.8 L1611.14 1213.8 L1611.73 1213.8 L1612.31 1213.8 L1612.9 1213.8 L1613.49 1213.8 L1614.07 1213.8 L1614.66 1213.8 L1615.25 1213.8 L1615.83 1213.8 L1616.42 1213.8 L1617.01 1213.8 L1617.59 1213.8 L1618.18 1213.8 L1618.76 1213.8 L1619.35 1213.8 L1619.94 1213.8 L1620.52 1213.8 L1621.11 1213.8 L1621.7 1213.8 L1622.28 1213.8 L1622.87 1213.8 L1623.46 1213.8 L1624.04 1213.8 L1624.63 1213.8 L1625.22 1213.8 L1625.8 1213.8 L1626.39 1213.8 L1626.97 1213.8 L1627.56 1213.8 L1628.15 1213.8 L1628.73 1213.8 L1629.32 1213.8 L1629.91 1213.8 L1630.49 1213.8 L1631.08 1213.8 L1631.67 1213.8 L1632.25 1213.8 L1632.84 1213.8 L1633.42 1213.8 L1634.01 1213.8 L1634.6 1213.8 L1635.18 1213.8 L1635.77 1213.8 L1636.36 1213.8 L1636.94 1213.8 L1637.53 1213.8 L1638.12 1213.8 L1638.7 1213.8 L1639.29 1213.8 L1639.88 1213.8 L1640.46 1213.8 L1641.05 1213.8 L1641.63 1213.8 L1642.22 1213.8 L1642.81 1213.8 L1643.39 1213.8 L1643.98 1213.8 L1644.57 1213.8 L1645.15 1213.8 L1645.74 1213.8 L1646.33 1213.8 L1646.91 1213.8 L1647.5 1213.8 L1648.09 1213.8 L1648.67 1213.8 L1649.26 1213.8 L1649.84 1213.8 L1650.43 1213.8 L1651.02 1213.8 L1651.6 1213.8 L1652.19 1213.8 L1652.78 1213.8 L1653.36 1213.8 L1653.95 1213.8 L1654.54 1213.8 L1655.12 1213.8 L1655.71 1213.8 L1656.29 1213.8 L1656.88 1213.8 L1657.47 1213.8 L1658.05 1213.8 L1658.64 1213.8 L1659.23 1213.8 L1659.81 1213.8 L1660.4 1213.8 L1660.99 1213.8 L1661.57 1213.8 L1662.16 1213.8 L1662.75 1213.8 L1663.33 1213.8 L1663.92 1213.8 L1664.5 1213.8 L1665.09 1213.8 L1665.68 1213.8 L1666.26 1213.8 L1666.85 1213.8 L1667.44 1213.8 L1668.02 1213.8 L1668.61 1213.8 L1669.2 1213.8 L1669.78 1213.8 L1670.37 1213.8 L1670.96 1213.8 L1671.54 1213.8 L1672.13 1213.8 L1672.71 1213.8 L1673.3 1213.8 L1673.89 1213.8 L1674.47 1213.8 L1675.06 1213.8 L1675.65 1213.8 L1676.23 1213.8 L1676.82 1213.8 L1677.41 1213.8 L1677.99 1213.8 L1678.58 1213.8 L1679.17 1213.8 L1679.75 1213.8 L1680.34 1213.8 L1680.92 1213.8 L1681.51 1213.8 L1682.1 1213.8 L1682.68 1213.8 L1683.27 1213.8 L1683.86 1213.8 L1684.44 1213.8 L1685.03 1213.8 L1685.62 1213.8 L1686.2 1213.8 L1686.79 1213.8 L1687.37 1213.8 L1687.96 1213.8 L1688.55 1213.8 L1689.13 1213.8 L1689.72 1213.8 L1690.31 1213.8 L1690.89 1213.8 L1691.48 1213.8 L1692.07 1213.8 L1692.65 1213.8 L1693.24 1213.8 L1693.83 1213.8 L1694.41 1213.8 L1695 1213.8 L1695.58 1213.8 L1696.17 1213.8 L1696.76 1213.8 L1697.34 1213.8 L1697.93 1213.8 L1698.52 1213.8 L1699.1 1213.8 L1699.69 1213.8 L1700.28 1213.8 L1700.86 1213.8 L1701.45 1213.8 L1702.04 1213.8 L1702.62 1213.8 L1703.21 1213.8 L1703.79 1213.8 L1704.38 1213.8 L1704.97 1213.8 L1705.55 1213.8 L1706.14 1213.8 L1706.73 1213.8 L1707.31 1213.8 L1707.9 1213.8 L1708.49 1213.8 L1709.07 1213.8 L1709.66 1213.8 L1710.24 1213.8 L1710.83 1213.8 L1711.42 1213.8 L1712 1213.8 L1712.59 1213.8 L1713.18 1213.8 L1713.76 1213.8 L1714.35 1213.8 L1714.94 1213.8 L1715.52 1213.8 L1716.11 1213.8 L1716.7 1213.8 L1717.28 1213.8 L1717.87 1213.8 L1718.45 1213.8 L1719.04 1213.8 L1719.63 1213.8 L1720.21 1213.8 L1720.8 1213.8 L1721.39 1213.8 L1721.97 1213.8 L1722.56 1213.8 L1723.15 1213.8 L1723.73 1213.8 L1724.32 1213.8 L1724.91 1213.8 L1725.49 1213.8 L1726.08 1213.8 L1726.66 1213.8 L1727.25 1213.8 L1727.84 1213.8 L1728.42 1213.8 L1729.01 1213.8 L1729.6 1213.8 L1730.18 1213.8 L1730.77 1213.8 L1731.36 1213.8 L1731.94 1213.8 L1732.53 1213.8 L1733.11 1213.8 L1733.7 1213.8 L1734.29 1213.8 L1734.87 1213.8 L1735.46 1213.8 L1736.05 1213.8 L1736.63 1213.8 L1737.22 1213.8 L1737.81 1213.8 L1738.39 1213.8 L1738.98 1213.8 L1739.57 1213.8 L1740.15 1213.8 L1740.74 1213.8 L1741.32 1213.8 L1741.91 1213.8 L1742.5 1213.8 L1743.08 1213.8 L1743.67 1213.8 L1744.26 1213.8 L1744.84 1213.8 L1745.43 1213.8 L1746.02 1213.8 L1746.6 1213.8 L1747.19 1213.8 L1747.78 1213.8 L1748.36 1213.8 L1748.95 1213.8 L1749.53 1213.8 L1750.12 1213.8 L1750.71 1213.8 L1751.29 1213.8 L1751.88 1213.8 L1752.47 1213.8 L1753.05 1213.8 L1753.64 1213.8 L1754.23 1213.8 L1754.81 1213.8 L1755.4 1213.8 L1755.99 1213.8 L1756.57 1213.8 L1757.16 1213.8 L1757.74 1213.8 L1758.33 1213.8 L1758.92 1213.8 L1759.5 1213.8 L1760.09 1213.8 L1760.68 1213.8 L1761.26 1213.8 L1761.85 1213.8 L1762.44 1213.8 L1763.02 1213.8 L1763.61 1213.8 L1764.19 1213.8 L1764.78 1213.8 L1765.37 1213.8 L1765.95 1213.8 L1766.54 1213.8 L1767.13 1213.8 L1767.71 1213.8 L1768.3 1213.8 L1768.89 1213.8 L1769.47 1213.8 L1770.06 1213.8 L1770.65 1213.8 L1771.23 1213.8 L1771.82 1213.8 L1772.4 1213.8 L1772.99 1213.8 L1773.58 1213.8 L1774.16 1213.8 L1774.75 1213.8 L1775.34 1213.8 L1775.92 1213.8 L1776.51 1213.8 L1777.1 1213.8 L1777.68 1213.8 L1778.27 1213.8 L1778.86 1213.8 L1779.44 1213.8 L1780.03 1213.8 L1780.61 1213.8 L1781.2 1213.8 L1781.79 1213.8 L1782.37 1213.8 L1782.96 1213.8 L1783.55 1213.8 L1784.13 1213.8 L1784.72 1213.8 L1785.31 1213.8 L1785.89 1213.8 L1786.48 1213.8 L1787.06 1213.8 L1787.65 1213.8 L1788.24 1213.8 L1788.82 1213.8 L1789.41 1213.8 L1790 1213.8 L1790.58 1213.8 L1791.17 1213.8 L1791.76 1213.8 L1792.34 1213.8 L1792.93 1213.8 L1793.52 1213.8 L1794.1 1213.8 L1794.69 1213.8 L1795.27 1213.8 L1795.86 1213.8 L1796.45 1213.8 L1797.03 1213.8 L1797.62 1213.8 L1798.21 1213.8 L1798.79 1213.8 L1799.38 1213.8 L1799.97 1213.8 L1800.55 1213.8 L1801.14 1213.8 L1801.73 1213.8 L1802.31 1213.8 L1802.9 1213.8 L1803.48 1213.8 L1804.07 1213.8 L1804.66 1213.8 L1805.24 1213.8 L1805.83 1213.8 L1806.42 1213.8 L1807 1213.8 L1807.59 1213.8 L1808.18 1213.8 L1808.76 1213.8 L1809.35 1213.8 L1809.94 1213.8 L1810.52 1213.8 L1811.11 1213.8 L1811.69 1213.8 L1812.28 1213.8 L1812.87 1213.8 L1813.45 1213.8 L1814.04 1213.8 L1814.63 1213.8 L1815.21 1213.8 L1815.8 1213.8 L1816.39 1213.8 L1816.97 1213.8 L1817.56 1213.8 L1818.14 1213.8 L1818.73 1213.8 L1819.32 1213.8 L1819.9 1213.8 L1820.49 1213.8 L1821.08 1213.8 L1821.66 1213.8 L1822.25 1213.8 L1822.84 1213.8 L1823.42 1213.8 L1824.01 1213.8 L1824.6 1213.8 L1825.18 1213.8 L1825.77 1213.8 L1826.35 1213.8 L1826.94 1213.8 L1827.53 1213.8 L1828.11 1213.8 L1828.7 1213.8 L1829.29 1213.8 L1829.87 1213.8 L1830.46 1213.8 L1831.05 1213.8 L1831.63 1213.8 L1832.22 1213.8 L1832.81 1213.8 L1833.39 1213.8 L1833.98 1213.8 L1834.56 1213.8 L1835.15 1213.8 L1835.74 1213.8 L1836.32 1213.8 L1836.91 1213.8 L1837.5 1213.8 L1838.08 1213.8 L1838.67 1213.8 L1839.26 1213.8 L1839.84 1213.8 L1840.43 1213.8 L1841.01 1213.8 L1841.6 1213.8 L1842.19 1213.8 L1842.77 1213.8 L1843.36 1213.8 L1843.95 1213.8 L1844.53 1213.8 L1845.12 1213.8 L1845.71 1213.8 L1846.29 1213.8 L1846.88 1213.8 L1847.47 1213.8 L1848.05 1213.8 L1848.64 1213.8 L1849.22 1213.8 L1849.81 1213.8 L1850.4 1213.8 L1850.98 1213.8 L1851.57 1213.8 L1852.16 1213.8 L1852.74 1213.8 L1853.33 1213.8 L1853.92 1213.8 L1854.5 1213.8 L1855.09 1213.8 L1855.68 1213.8 L1856.26 1213.8 L1856.85 1213.8 L1857.43 1213.8 L1858.02 1213.8 L1858.61 1213.8 L1859.19 1213.8 L1859.78 1213.8 L1860.37 1213.8 L1860.95 1213.8 L1861.54 1213.8 L1862.13 1213.8 L1862.71 1213.8 L1863.3 1213.8 L1863.88 1213.8 L1864.47 1213.8 L1865.06 1213.8 L1865.64 1213.8 L1866.23 1213.8 L1866.82 1213.8 L1867.4 1213.8 L1867.99 1213.8 L1868.58 1213.8 L1869.16 1213.8 L1869.75 1213.8 L1870.34 1213.8 L1870.92 1213.8 L1871.51 1213.8 L1872.09 1213.8 L1872.68 1213.8 L1873.27 1213.8 L1873.85 1213.8 L1874.44 1213.8 L1875.03 1213.8 L1875.61 1213.8 L1876.2 1213.8 L1876.79 1213.8 L1877.37 1213.8 L1877.96 1213.8 L1878.55 1213.8 L1879.13 1213.8 L1879.72 1213.8 L1880.3 1213.8 L1880.89 1213.8 L1881.48 1213.8 L1882.06 1213.8 L1882.65 1213.8 L1883.24 1213.8 L1883.82 1213.8 L1884.41 1213.8 L1885 1213.8 L1885.58 1213.8 L1886.17 1213.8 L1886.76 1213.8 L1887.34 1213.8 L1887.93 1213.8 L1888.51 1213.8 L1889.1 1213.8 L1889.69 1213.8 L1890.27 1213.8 L1890.86 1213.8 L1891.45 1213.8 L1892.03 1213.8 L1892.62 1213.8 L1893.21 1213.8 L1893.79 1213.8 L1894.38 1213.8 L1894.96 1213.8 L1895.55 1213.8 L1896.14 1213.8 L1896.72 1213.8 L1897.31 1213.8 L1897.9 1213.8 L1898.48 1213.8 L1899.07 1213.8 L1899.66 1213.8 L1900.24 1213.8 L1900.83 1213.8 L1901.42 1213.8 L1902 1213.8 L1902.59 1213.8 L1903.17 1213.8 L1903.76 1213.8 L1904.35 1213.8 L1904.93 1213.8 L1905.52 1213.8 L1906.11 1213.8 L1906.69 1213.8 L1907.28 1213.8 L1907.87 1213.8 L1908.45 1213.8 L1909.04 1213.8 L1909.63 1213.8 L1910.21 1213.8 L1910.8 1213.8 L1911.38 1213.8 L1911.97 1213.8 L1912.56 1213.8 L1913.14 1213.8 L1913.73 1213.8 L1914.32 1213.8 L1914.9 1213.8 L1915.49 1213.8 L1916.08 1213.8 L1916.66 1213.8 L1917.25 1213.8 L1917.83 1213.8 L1918.42 1213.8 L1919.01 1213.8 L1919.59 1213.8 L1920.18 1213.8 L1920.77 1213.8 L1921.35 1213.8 L1921.94 1213.8 L1922.53 1213.8 L1923.11 1213.8 L1923.7 1213.8 L1924.29 1213.8 L1924.87 1213.8 L1925.46 1213.8 L1926.04 1213.8 L1926.63 1213.8 L1927.22 1213.8 L1927.8 1213.8 L1928.39 1213.8 L1928.98 1213.8 L1929.56 1213.8 L1930.15 1213.8 L1930.74 1213.8 L1931.32 1213.8 L1931.91 1213.8 L1932.5 1213.8 L1933.08 1213.8 L1933.67 1213.8 L1934.25 1213.8 L1934.84 1213.8 L1935.43 1213.8 L1936.01 1213.8 L1936.6 1213.8 L1937.19 1213.8 L1937.77 1213.8 L1938.36 1213.8 L1938.95 1213.8 L1939.53 1213.8 L1940.12 1213.8 L1940.71 1213.8 L1941.29 1213.8 L1941.88 1213.8 L1942.46 1213.8 L1943.05 1213.8 L1943.64 1213.8 L1944.22 1213.8 L1944.81 1213.8 L1945.4 1213.8 L1945.98 1213.8 L1946.57 1213.8 L1947.16 1213.8 L1947.74 1213.8 L1948.33 1213.8 L1948.91 1213.8 L1949.5 1213.8 L1950.09 1213.8 L1950.67 1213.8 L1951.26 1213.8 L1951.85 1213.8 L1952.43 1213.8 L1953.02 1213.8 L1953.61 1213.8 L1954.19 1213.8 L1954.78 1213.8 L1955.37 1213.8 L1955.95 1213.8 L1956.54 1213.8 L1957.12 1213.8 L1957.71 1213.8 L1958.3 1213.8 L1958.88 1213.8 L1959.47 1213.8 L1960.06 1213.8 L1960.64 1213.8 L1961.23 1213.8 L1961.82 1213.8 L1962.4 1213.8 L1962.99 1213.8 L1963.58 1213.8 L1964.16 1213.8 L1964.75 1213.8 L1965.33 1213.8 L1965.92 1213.8 L1966.51 1213.8 L1967.09 1213.8 L1967.68 1213.8 L1968.27 1213.8 L1968.85 1213.8 L1969.44 1213.8 L1970.03 1213.8 L1970.61 1213.8 L1971.2 1213.8 L1971.78 1213.8 L1972.37 1213.8 L1972.96 1213.8 L1973.54 1213.8 L1974.13 1213.8 L1974.72 1213.8 L1975.3 1213.8 L1975.89 1213.8 L1976.48 1213.8 L1977.06 1213.8 L1977.65 1213.8 L1978.24 1213.8 L1978.82 1213.8 L1979.41 1213.8 L1979.99 1213.8 L1980.58 1213.8 L1981.17 1213.8 L1981.75 1213.8 L1982.34 1213.8 L1982.93 1213.8 L1983.51 1213.8 L1984.1 1213.8 L1984.69 1213.8 L1985.27 1213.8 L1985.86 1213.8 L1986.45 1213.8 L1987.03 1213.8 L1987.62 1213.8 L1988.2 1213.8 L1988.79 1213.8 L1989.38 1213.8 L1989.96 1213.8 L1990.55 1213.8 L1991.14 1213.8 L1991.72 1213.8 L1992.31 1213.8 L1992.9 1213.8 L1993.48 1213.8 L1994.07 1213.8 L1994.65 1213.8 L1995.24 1213.8 L1995.83 1213.8 L1996.41 1213.8 L1997 1213.8 L1997.59 1213.8 L1998.17 1213.8 L1998.76 1213.8 L1999.35 1213.8 L1999.93 1213.8 L2000.52 1213.8 L2001.11 1213.8 L2001.69 1213.8 L2002.28 1213.8 L2002.86 1213.8 L2003.45 1213.8 L2004.04 1213.8 L2004.62 1213.8 L2005.21 1213.8 L2005.8 1213.8 L2006.38 1213.8 L2006.97 1213.8 L2007.56 1213.8 L2008.14 1213.8 L2008.73 1213.8 L2009.32 1213.8 L2009.9 1213.8 L2010.49 1213.8 L2011.07 1213.8 L2011.66 1213.8 L2012.25 1213.8 L2012.83 1213.8 L2013.42 1213.8 L2014.01 1213.8 L2014.59 1213.8 L2015.18 1213.8 L2015.77 1213.8 L2016.35 1213.8 L2016.94 1213.8 L2017.53 1213.8 L2018.11 1213.8 L2018.7 1213.8 L2019.28 1213.8 L2019.87 1213.8 L2020.46 1213.8 L2021.04 1213.8 L2021.63 1213.8 L2022.22 1213.8 L2022.8 1213.8 L2023.39 1213.8 L2023.98 1213.8 L2024.56 1213.8 L2025.15 1213.8 L2025.73 1213.8 L2026.32 1213.8 L2026.91 1213.8 L2027.49 1213.8 L2028.08 1213.8 L2028.67 1213.8 L2029.25 1213.8 L2029.84 1213.8 L2030.43 1213.8 L2031.01 1213.8 L2031.6 1213.8 L2032.19 1213.8 L2032.77 1213.8 L2033.36 1213.8 L2033.94 1213.8 L2034.53 1213.8 L2035.12 1213.8 L2035.7 1213.8 L2036.29 1213.8 L2036.88 1213.8 L2037.46 1213.8 L2038.05 1213.8 L2038.64 1213.8 L2039.22 1213.8 L2039.81 1213.8 L2040.4 1213.8 L2040.98 1213.8 L2041.57 1213.8 L2042.15 1213.8 L2042.74 1213.8 L2043.33 1213.8 L2043.91 1213.8 L2044.5 1213.8 L2045.09 1213.8 L2045.67 1213.8 L2046.26 1213.8 L2046.85 1213.8 L2047.43 1213.8 L2048.02 1213.8 L2048.6 1213.8 L2049.19 1213.8 L2049.78 1213.8 L2050.36 1213.8 L2050.95 1213.8 L2051.54 1213.8 L2052.12 1213.8 L2052.71 1213.8 L2053.3 1213.8 L2053.88 1213.8 L2054.47 1213.8 L2055.06 1213.8 L2055.64 1213.8 L2056.23 1213.8 L2056.81 1213.8 L2057.4 1213.8 L2057.99 1213.8 L2058.57 1213.8 L2059.16 1213.8 L2059.75 1213.8 L2060.33 1213.8 L2060.92 1213.8 L2061.51 1213.8 L2062.09 1213.8 L2062.68 1213.8 L2063.27 1213.8 L2063.85 1213.8 L2064.44 1213.8 L2065.02 1213.8 L2065.61 1213.8 L2066.2 1213.8 L2066.78 1213.8 L2067.37 1213.8 L2067.96 1213.8 L2068.54 1213.8 L2069.13 1213.8 L2069.72 1213.8 L2070.3 1213.8 L2070.89 1213.8 L2071.48 1213.8 L2072.06 1213.8 L2072.65 1213.8 L2073.23 1213.8 L2073.82 1213.8 L2074.41 1213.8 L2074.99 1213.8 L2075.58 1213.8 L2076.17 1213.8 L2076.75 1213.8 L2077.34 1213.8 L2077.93 1213.8 L2078.51 1213.8 L2079.1 1213.8 L2079.68 1213.8 L2080.27 1213.8 L2080.86 1213.8 L2081.44 1213.8 L2082.03 1213.8 L2082.62 1213.8 L2083.2 1213.8 L2083.79 1213.8 L2084.38 1213.8 L2084.96 1213.8 L2085.55 1213.8 L2086.14 1213.8 L2086.72 1213.8 L2087.31 1213.8 L2087.89 1213.8 L2088.48 1213.8 L2089.07 1213.8 L2089.65 1213.8 L2090.24 1213.8 L2090.83 1213.8 L2091.41 1213.8 L2092 1213.8 L2092.59 1213.8 L2093.17 1213.8 L2093.76 1213.8 L2094.35 1213.8 L2094.93 1213.8 L2095.52 1213.8 L2096.1 1213.8 L2096.69 1213.8 L2097.28 1213.8 L2097.86 1213.8 L2098.45 1213.8 L2099.04 1213.8 L2099.62 1213.8 L2100.21 1213.8 L2100.8 1213.8 L2101.38 1213.8 L2101.97 1213.8 L2102.55 1213.8 L2103.14 1213.8 L2103.73 1213.8 L2104.31 1213.8 L2104.9 1213.8 L2105.49 1213.8 L2106.07 1213.8 L2106.66 1213.8 L2107.25 1213.8 L2107.83 1213.8 L2108.42 1213.8 L2109.01 1213.8 L2109.59 1213.8 L2110.18 1213.8 L2110.76 1213.8 L2111.35 1213.8 L2111.94 1213.8 L2112.52 1213.8 L2113.11 1213.8 L2113.7 1213.8 L2114.28 1213.8 L2114.87 1213.8 L2115.46 1213.8 L2116.04 1213.8 L2116.63 1213.8 L2117.22 1213.8 L2117.8 1213.8 L2118.39 1213.8 L2118.97 1213.8 L2119.56 1213.8 L2120.15 1213.8 L2120.73 1213.8 L2121.32 1213.8 L2121.91 1213.8 L2122.49 1213.8 L2123.08 1213.8 L2123.67 1213.8 L2124.25 1213.8 L2124.84 1213.8 L2125.42 1213.8 L2126.01 1213.8 L2126.6 1213.8 L2127.18 1213.8 L2127.77 1213.8 L2128.36 1213.8 L2128.94 1213.8 L2129.53 1213.8 L2130.12 1213.8 L2130.7 1213.8 L2131.29 1213.8 L2131.88 1213.8 L2132.46 1213.8 L2133.05 1213.8 L2133.63 1213.8 L2134.22 1213.8 L2134.81 1213.8 L2135.39 1213.8 L2135.98 1213.8 L2136.57 1213.8 L2137.15 1213.8 L2137.74 1213.8 L2138.33 1213.8 L2138.91 1213.8 L2139.5 1213.8 L2140.09 1213.8 L2140.67 1213.8 L2141.26 1213.8 L2141.84 1213.8 L2142.43 1213.8 L2143.02 1213.8 L2143.6 1213.8 L2144.19 1213.8 L2144.78 1213.8 L2145.36 1213.8 L2145.95 1213.8 L2146.54 1213.8 L2147.12 1213.8 L2147.71 1213.8 L2148.3 1213.8 L2148.88 1213.8 L2149.47 1213.8 L2150.05 1213.8 L2150.64 1213.8 L2151.23 1213.8 L2151.81 1213.8 L2152.4 1213.8 L2152.99 1213.8 L2153.57 1213.8 L2154.16 1213.8 L2154.75 1213.8 L2155.33 1213.8 L2155.92 1213.8 L2156.5 1213.8 L2157.09 1213.8 L2157.68 1213.8 L2158.26 1213.8 L2158.26 1213.04 L2157.68 1213.04 L2157.09 1213.04 L2156.5 1213.04 L2155.92 1213.04 L2155.33 1213.04 L2154.75 1213.04 L2154.16 1213.04 L2153.57 1213.04 L2152.99 1213.04 L2152.4 1213.04 L2151.81 1213.04 L2151.23 1213.04 L2150.64 1213.04 L2150.05 1213.04 L2149.47 1213.04 L2148.88 1213.04 L2148.3 1213.04 L2147.71 1213.04 L2147.12 1213.04 L2146.54 1213.04 L2145.95 1213.04 L2145.36 1213.04 L2144.78 1213.04 L2144.19 1213.04 L2143.6 1213.04 L2143.02 1213.04 L2142.43 1213.04 L2141.84 1213.04 L2141.26 1213.04 L2140.67 1213.04 L2140.09 1213.04 L2139.5 1213.04 L2138.91 1213.04 L2138.33 1213.04 L2137.74 1213.04 L2137.15 1213.04 L2136.57 1213.04 L2135.98 1213.04 L2135.39 1213.04 L2134.81 1213.04 L2134.22 1213.04 L2133.63 1213.04 L2133.05 1213.04 L2132.46 1213.04 L2131.88 1213.04 L2131.29 1213.04 L2130.7 1213.04 L2130.12 1213.04 L2129.53 1213.04 L2128.94 1213.04 L2128.36 1213.04 L2127.77 1213.04 L2127.18 1213.04 L2126.6 1213.04 L2126.01 1213.04 L2125.42 1213.04 L2124.84 1213.04 L2124.25 1213.04 L2123.67 1213.04 L2123.08 1213.04 L2122.49 1213.04 L2121.91 1213.04 L2121.32 1213.04 L2120.73 1213.04 L2120.15 1213.04 L2119.56 1213.04 L2118.97 1213.04 L2118.39 1213.04 L2117.8 1213.04 L2117.22 1213.04 L2116.63 1213.04 L2116.04 1213.04 L2115.46 1213.04 L2114.87 1213.04 L2114.28 1213.04 L2113.7 1213.04 L2113.11 1213.04 L2112.52 1213.04 L2111.94 1213.04 L2111.35 1213.04 L2110.76 1213.04 L2110.18 1213.04 L2109.59 1213.04 L2109.01 1213.04 L2108.42 1213.04 L2107.83 1213.04 L2107.25 1213.04 L2106.66 1213.04 L2106.07 1213.04 L2105.49 1213.04 L2104.9 1213.04 L2104.31 1213.04 L2103.73 1213.04 L2103.14 1213.04 L2102.55 1213.04 L2101.97 1213.04 L2101.38 1213.04 L2100.8 1213.04 L2100.21 1213.04 L2099.62 1213.04 L2099.04 1213.04 L2098.45 1213.04 L2097.86 1213.04 L2097.28 1213.04 L2096.69 1213.04 L2096.1 1213.04 L2095.52 1213.04 L2094.93 1213.04 L2094.35 1213.04 L2093.76 1213.04 L2093.17 1213.04 L2092.59 1213.04 L2092 1213.04 L2091.41 1213.04 L2090.83 1213.04 L2090.24 1213.04 L2089.65 1213.04 L2089.07 1213.04 L2088.48 1213.04 L2087.89 1213.04 L2087.31 1213.04 L2086.72 1213.04 L2086.14 1213.04 L2085.55 1213.04 L2084.96 1213.04 L2084.38 1213.04 L2083.79 1213.04 L2083.2 1213.04 L2082.62 1213.04 L2082.03 1213.04 L2081.44 1213.04 L2080.86 1213.04 L2080.27 1213.04 L2079.68 1213.04 L2079.1 1213.04 L2078.51 1213.04 L2077.93 1213.04 L2077.34 1213.04 L2076.75 1213.04 L2076.17 1213.04 L2075.58 1213.04 L2074.99 1213.04 L2074.41 1213.04 L2073.82 1213.04 L2073.23 1213.04 L2072.65 1213.04 L2072.06 1213.04 L2071.48 1213.04 L2070.89 1213.04 L2070.3 1213.04 L2069.72 1213.04 L2069.13 1213.04 L2068.54 1213.04 L2067.96 1213.04 L2067.37 1213.04 L2066.78 1213.04 L2066.2 1213.04 L2065.61 1213.04 L2065.02 1213.04 L2064.44 1213.04 L2063.85 1213.04 L2063.27 1213.04 L2062.68 1213.04 L2062.09 1213.04 L2061.51 1213.04 L2060.92 1213.04 L2060.33 1213.04 L2059.75 1213.04 L2059.16 1213.04 L2058.57 1213.04 L2057.99 1213.04 L2057.4 1213.04 L2056.81 1213.04 L2056.23 1213.04 L2055.64 1213.04 L2055.06 1213.04 L2054.47 1213.04 L2053.88 1213.04 L2053.3 1213.04 L2052.71 1213.04 L2052.12 1213.04 L2051.54 1213.04 L2050.95 1213.04 L2050.36 1213.04 L2049.78 1213.04 L2049.19 1213.04 L2048.6 1213.04 L2048.02 1213.04 L2047.43 1213.04 L2046.85 1213.04 L2046.26 1213.04 L2045.67 1213.04 L2045.09 1213.04 L2044.5 1213.04 L2043.91 1213.04 L2043.33 1213.04 L2042.74 1213.04 L2042.15 1213.04 L2041.57 1213.04 L2040.98 1213.04 L2040.4 1213.04 L2039.81 1213.04 L2039.22 1213.04 L2038.64 1213.04 L2038.05 1213.04 L2037.46 1213.04 L2036.88 1213.04 L2036.29 1213.04 L2035.7 1213.04 L2035.12 1213.04 L2034.53 1213.04 L2033.94 1213.04 L2033.36 1213.04 L2032.77 1213.04 L2032.19 1213.04 L2031.6 1213.04 L2031.01 1213.04 L2030.43 1213.04 L2029.84 1213.04 L2029.25 1213.04 L2028.67 1213.04 L2028.08 1213.04 L2027.49 1213.04 L2026.91 1213.04 L2026.32 1213.04 L2025.73 1213.04 L2025.15 1213.04 L2024.56 1213.04 L2023.98 1213.04 L2023.39 1213.04 L2022.8 1213.04 L2022.22 1213.04 L2021.63 1213.04 L2021.04 1213.04 L2020.46 1213.04 L2019.87 1213.04 L2019.28 1213.04 L2018.7 1213.04 L2018.11 1213.04 L2017.53 1213.04 L2016.94 1213.04 L2016.35 1213.04 L2015.77 1213.04 L2015.18 1213.04 L2014.59 1213.04 L2014.01 1213.04 L2013.42 1213.04 L2012.83 1213.04 L2012.25 1213.04 L2011.66 1213.04 L2011.07 1213.04 L2010.49 1213.04 L2009.9 1213.04 L2009.32 1213.04 L2008.73 1213.04 L2008.14 1213.04 L2007.56 1213.04 L2006.97 1213.04 L2006.38 1213.04 L2005.8 1213.04 L2005.21 1213.04 L2004.62 1213.04 L2004.04 1213.04 L2003.45 1213.04 L2002.86 1213.04 L2002.28 1213.04 L2001.69 1213.04 L2001.11 1213.04 L2000.52 1213.04 L1999.93 1213.04 L1999.35 1213.04 L1998.76 1213.04 L1998.17 1213.04 L1997.59 1213.04 L1997 1213.04 L1996.41 1213.04 L1995.83 1213.04 L1995.24 1213.04 L1994.65 1213.04 L1994.07 1213.04 L1993.48 1213.04 L1992.9 1213.04 L1992.31 1213.04 L1991.72 1213.04 L1991.14 1213.04 L1990.55 1213.04 L1989.96 1213.04 L1989.38 1213.04 L1988.79 1213.04 L1988.2 1213.04 L1987.62 1213.04 L1987.03 1213.04 L1986.45 1213.04 L1985.86 1213.04 L1985.27 1213.04 L1984.69 1213.04 L1984.1 1213.04 L1983.51 1213.04 L1982.93 1213.04 L1982.34 1213.04 L1981.75 1213.04 L1981.17 1213.04 L1980.58 1213.04 L1979.99 1213.04 L1979.41 1213.04 L1978.82 1213.04 L1978.24 1213.04 L1977.65 1213.04 L1977.06 1213.04 L1976.48 1213.04 L1975.89 1213.04 L1975.3 1213.04 L1974.72 1213.04 L1974.13 1213.04 L1973.54 1213.04 L1972.96 1213.04 L1972.37 1213.04 L1971.78 1213.04 L1971.2 1213.04 L1970.61 1213.04 L1970.03 1213.04 L1969.44 1213.04 L1968.85 1213.04 L1968.27 1213.04 L1967.68 1213.04 L1967.09 1213.04 L1966.51 1213.04 L1965.92 1213.04 L1965.33 1213.04 L1964.75 1213.04 L1964.16 1213.04 L1963.58 1213.04 L1962.99 1213.04 L1962.4 1213.04 L1961.82 1213.04 L1961.23 1213.04 L1960.64 1213.04 L1960.06 1213.04 L1959.47 1213.04 L1958.88 1213.04 L1958.3 1213.04 L1957.71 1213.04 L1957.12 1213.04 L1956.54 1213.04 L1955.95 1213.04 L1955.37 1213.04 L1954.78 1213.04 L1954.19 1213.04 L1953.61 1213.04 L1953.02 1213.04 L1952.43 1213.04 L1951.85 1213.04 L1951.26 1213.04 L1950.67 1213.04 L1950.09 1213.04 L1949.5 1213.04 L1948.91 1213.04 L1948.33 1213.04 L1947.74 1213.04 L1947.16 1213.04 L1946.57 1213.04 L1945.98 1213.04 L1945.4 1213.04 L1944.81 1213.04 L1944.22 1213.04 L1943.64 1213.04 L1943.05 1213.04 L1942.46 1213.04 L1941.88 1213.04 L1941.29 1213.04 L1940.71 1213.04 L1940.12 1213.04 L1939.53 1213.04 L1938.95 1213.04 L1938.36 1213.04 L1937.77 1213.04 L1937.19 1213.04 L1936.6 1213.04 L1936.01 1213.04 L1935.43 1213.04 L1934.84 1213.04 L1934.25 1213.04 L1933.67 1213.04 L1933.08 1213.04 L1932.5 1213.04 L1931.91 1213.04 L1931.32 1213.04 L1930.74 1213.04 L1930.15 1213.04 L1929.56 1213.04 L1928.98 1213.04 L1928.39 1213.04 L1927.8 1213.04 L1927.22 1213.04 L1926.63 1213.04 L1926.04 1213.04 L1925.46 1213.04 L1924.87 1213.04 L1924.29 1213.04 L1923.7 1213.04 L1923.11 1213.04 L1922.53 1213.04 L1921.94 1213.04 L1921.35 1213.04 L1920.77 1213.04 L1920.18 1213.04 L1919.59 1213.04 L1919.01 1213.04 L1918.42 1213.04 L1917.83 1213.04 L1917.25 1213.04 L1916.66 1213.04 L1916.08 1213.04 L1915.49 1213.04 L1914.9 1213.04 L1914.32 1213.04 L1913.73 1213.04 L1913.14 1213.04 L1912.56 1213.04 L1911.97 1213.04 L1911.38 1213.04 L1910.8 1213.04 L1910.21 1213.04 L1909.63 1213.04 L1909.04 1213.04 L1908.45 1213.04 L1907.87 1213.04 L1907.28 1213.04 L1906.69 1213.04 L1906.11 1213.04 L1905.52 1213.04 L1904.93 1213.04 L1904.35 1213.04 L1903.76 1213.04 L1903.17 1213.04 L1902.59 1213.04 L1902 1213.04 L1901.42 1213.04 L1900.83 1213.04 L1900.24 1213.04 L1899.66 1213.04 L1899.07 1213.04 L1898.48 1213.04 L1897.9 1213.04 L1897.31 1213.04 L1896.72 1213.04 L1896.14 1213.04 L1895.55 1213.04 L1894.96 1213.04 L1894.38 1213.04 L1893.79 1213.04 L1893.21 1213.04 L1892.62 1213.04 L1892.03 1213.04 L1891.45 1213.04 L1890.86 1213.04 L1890.27 1213.04 L1889.69 1213.04 L1889.1 1213.04 L1888.51 1213.04 L1887.93 1213.04 L1887.34 1213.04 L1886.76 1213.04 L1886.17 1213.04 L1885.58 1213.04 L1885 1213.04 L1884.41 1213.04 L1883.82 1213.04 L1883.24 1213.04 L1882.65 1213.04 L1882.06 1213.04 L1881.48 1213.04 L1880.89 1213.04 L1880.3 1213.04 L1879.72 1213.04 L1879.13 1213.04 L1878.55 1213.04 L1877.96 1213.04 L1877.37 1213.04 L1876.79 1213.04 L1876.2 1213.04 L1875.61 1213.04 L1875.03 1213.04 L1874.44 1213.04 L1873.85 1213.04 L1873.27 1213.04 L1872.68 1213.04 L1872.09 1213.04 L1871.51 1213.04 L1870.92 1213.04 L1870.34 1213.04 L1869.75 1213.04 L1869.16 1213.04 L1868.58 1213.04 L1867.99 1213.04 L1867.4 1213.04 L1866.82 1213.04 L1866.23 1213.04 L1865.64 1213.04 L1865.06 1213.04 L1864.47 1213.04 L1863.88 1213.04 L1863.3 1213.04 L1862.71 1213.04 L1862.13 1213.04 L1861.54 1213.04 L1860.95 1213.04 L1860.37 1213.04 L1859.78 1213.04 L1859.19 1213.04 L1858.61 1213.04 L1858.02 1213.04 L1857.43 1213.04 L1856.85 1213.04 L1856.26 1213.04 L1855.68 1213.04 L1855.09 1213.04 L1854.5 1213.04 L1853.92 1213.04 L1853.33 1213.04 L1852.74 1213.04 L1852.16 1213.04 L1851.57 1213.04 L1850.98 1213.04 L1850.4 1213.04 L1849.81 1213.04 L1849.22 1213.04 L1848.64 1213.04 L1848.05 1213.04 L1847.47 1213.04 L1846.88 1213.04 L1846.29 1213.04 L1845.71 1213.04 L1845.12 1213.04 L1844.53 1213.04 L1843.95 1213.04 L1843.36 1213.04 L1842.77 1213.04 L1842.19 1213.04 L1841.6 1213.04 L1841.01 1213.04 L1840.43 1213.04 L1839.84 1213.04 L1839.26 1213.04 L1838.67 1213.04 L1838.08 1213.04 L1837.5 1213.04 L1836.91 1213.04 L1836.32 1213.04 L1835.74 1213.04 L1835.15 1213.04 L1834.56 1213.04 L1833.98 1213.04 L1833.39 1213.04 L1832.81 1213.04 L1832.22 1213.04 L1831.63 1213.04 L1831.05 1213.04 L1830.46 1213.04 L1829.87 1213.04 L1829.29 1213.04 L1828.7 1213.04 L1828.11 1213.04 L1827.53 1213.04 L1826.94 1213.04 L1826.35 1213.04 L1825.77 1213.04 L1825.18 1213.04 L1824.6 1213.04 L1824.01 1213.04 L1823.42 1213.04 L1822.84 1213.04 L1822.25 1213.04 L1821.66 1213.04 L1821.08 1213.04 L1820.49 1213.04 L1819.9 1213.04 L1819.32 1213.04 L1818.73 1213.04 L1818.14 1213.04 L1817.56 1213.04 L1816.97 1213.04 L1816.39 1213.04 L1815.8 1213.04 L1815.21 1213.04 L1814.63 1213.04 L1814.04 1213.04 L1813.45 1213.04 L1812.87 1213.04 L1812.28 1213.04 L1811.69 1213.04 L1811.11 1213.04 L1810.52 1213.04 L1809.94 1213.04 L1809.35 1213.04 L1808.76 1213.04 L1808.18 1213.04 L1807.59 1213.04 L1807 1213.04 L1806.42 1213.04 L1805.83 1213.04 L1805.24 1213.04 L1804.66 1213.04 L1804.07 1213.04 L1803.48 1213.04 L1802.9 1213.04 L1802.31 1213.04 L1801.73 1213.04 L1801.14 1213.04 L1800.55 1213.04 L1799.97 1213.04 L1799.38 1213.04 L1798.79 1213.04 L1798.21 1213.04 L1797.62 1213.04 L1797.03 1213.04 L1796.45 1213.04 L1795.86 1213.04 L1795.27 1213.04 L1794.69 1213.04 L1794.1 1213.04 L1793.52 1213.04 L1792.93 1213.04 L1792.34 1213.04 L1791.76 1213.04 L1791.17 1213.04 L1790.58 1213.04 L1790 1213.04 L1789.41 1213.04 L1788.82 1213.04 L1788.24 1213.04 L1787.65 1213.04 L1787.06 1213.04 L1786.48 1213.04 L1785.89 1213.04 L1785.31 1213.04 L1784.72 1213.04 L1784.13 1213.04 L1783.55 1213.04 L1782.96 1213.04 L1782.37 1213.04 L1781.79 1213.04 L1781.2 1213.04 L1780.61 1213.04 L1780.03 1213.04 L1779.44 1213.04 L1778.86 1213.04 L1778.27 1213.04 L1777.68 1213.04 L1777.1 1213.04 L1776.51 1213.04 L1775.92 1213.04 L1775.34 1213.04 L1774.75 1213.04 L1774.16 1213.04 L1773.58 1213.04 L1772.99 1213.04 L1772.4 1213.04 L1771.82 1213.04 L1771.23 1213.04 L1770.65 1213.04 L1770.06 1213.04 L1769.47 1213.04 L1768.89 1213.04 L1768.3 1213.04 L1767.71 1213.04 L1767.13 1213.04 L1766.54 1213.04 L1765.95 1213.04 L1765.37 1213.04 L1764.78 1213.04 L1764.19 1213.04 L1763.61 1213.04 L1763.02 1213.04 L1762.44 1213.04 L1761.85 1213.04 L1761.26 1213.04 L1760.68 1213.04 L1760.09 1213.04 L1759.5 1213.04 L1758.92 1213.04 L1758.33 1213.04 L1757.74 1213.04 L1757.16 1213.04 L1756.57 1213.04 L1755.99 1213.04 L1755.4 1213.04 L1754.81 1213.04 L1754.23 1213.04 L1753.64 1213.04 L1753.05 1213.04 L1752.47 1213.04 L1751.88 1213.04 L1751.29 1213.04 L1750.71 1213.04 L1750.12 1213.04 L1749.53 1213.04 L1748.95 1213.04 L1748.36 1213.04 L1747.78 1213.04 L1747.19 1213.04 L1746.6 1213.04 L1746.02 1213.04 L1745.43 1213.04 L1744.84 1213.04 L1744.26 1213.04 L1743.67 1213.04 L1743.08 1213.04 L1742.5 1213.04 L1741.91 1213.04 L1741.32 1213.04 L1740.74 1213.04 L1740.15 1213.04 L1739.57 1213.04 L1738.98 1213.04 L1738.39 1213.04 L1737.81 1213.04 L1737.22 1213.04 L1736.63 1213.04 L1736.05 1213.04 L1735.46 1213.04 L1734.87 1213.04 L1734.29 1213.04 L1733.7 1213.04 L1733.11 1213.04 L1732.53 1213.04 L1731.94 1213.04 L1731.36 1213.04 L1730.77 1213.04 L1730.18 1213.04 L1729.6 1213.04 L1729.01 1213.04 L1728.42 1213.04 L1727.84 1213.04 L1727.25 1213.04 L1726.66 1213.04 L1726.08 1213.04 L1725.49 1213.04 L1724.91 1213.04 L1724.32 1213.04 L1723.73 1213.04 L1723.15 1213.04 L1722.56 1213.04 L1721.97 1213.04 L1721.39 1213.04 L1720.8 1213.04 L1720.21 1213.04 L1719.63 1213.04 L1719.04 1213.04 L1718.45 1213.04 L1717.87 1213.04 L1717.28 1213.04 L1716.7 1213.04 L1716.11 1213.04 L1715.52 1213.04 L1714.94 1213.04 L1714.35 1213.04 L1713.76 1213.04 L1713.18 1213.04 L1712.59 1213.04 L1712 1213.04 L1711.42 1213.04 L1710.83 1213.04 L1710.24 1213.04 L1709.66 1213.04 L1709.07 1213.04 L1708.49 1213.04 L1707.9 1213.04 L1707.31 1213.04 L1706.73 1213.04 L1706.14 1213.04 L1705.55 1213.04 L1704.97 1213.04 L1704.38 1213.04 L1703.79 1213.04 L1703.21 1213.04 L1702.62 1213.04 L1702.04 1213.04 L1701.45 1213.04 L1700.86 1213.04 L1700.28 1213.04 L1699.69 1213.04 L1699.1 1213.04 L1698.52 1213.04 L1697.93 1213.04 L1697.34 1213.04 L1696.76 1213.04 L1696.17 1213.04 L1695.58 1213.04 L1695 1213.04 L1694.41 1213.04 L1693.83 1213.04 L1693.24 1213.04 L1692.65 1213.04 L1692.07 1213.04 L1691.48 1213.04 L1690.89 1213.04 L1690.31 1213.04 L1689.72 1213.04 L1689.13 1213.04 L1688.55 1213.04 L1687.96 1213.04 L1687.37 1213.04 L1686.79 1213.04 L1686.2 1213.04 L1685.62 1213.04 L1685.03 1213.04 L1684.44 1213.04 L1683.86 1213.04 L1683.27 1213.04 L1682.68 1213.04 L1682.1 1213.04 L1681.51 1213.04 L1680.92 1213.04 L1680.34 1213.04 L1679.75 1213.04 L1679.17 1213.04 L1678.58 1213.04 L1677.99 1213.04 L1677.41 1213.04 L1676.82 1213.04 L1676.23 1213.04 L1675.65 1213.04 L1675.06 1213.04 L1674.47 1213.04 L1673.89 1213.04 L1673.3 1213.04 L1672.71 1213.04 L1672.13 1213.04 L1671.54 1213.04 L1670.96 1213.04 L1670.37 1213.04 L1669.78 1213.04 L1669.2 1213.04 L1668.61 1213.04 L1668.02 1213.04 L1667.44 1213.04 L1666.85 1213.04 L1666.26 1213.04 L1665.68 1213.04 L1665.09 1213.04 L1664.5 1213.04 L1663.92 1213.04 L1663.33 1213.04 L1662.75 1213.04 L1662.16 1213.04 L1661.57 1213.04 L1660.99 1213.04 L1660.4 1213.04 L1659.81 1213.04 L1659.23 1213.04 L1658.64 1213.04 L1658.05 1213.04 L1657.47 1213.04 L1656.88 1213.04 L1656.29 1213.04 L1655.71 1213.04 L1655.12 1213.04 L1654.54 1213.04 L1653.95 1213.04 L1653.36 1213.04 L1652.78 1213.04 L1652.19 1213.04 L1651.6 1213.04 L1651.02 1213.04 L1650.43 1213.04 L1649.84 1213.04 L1649.26 1213.04 L1648.67 1213.04 L1648.09 1213.04 L1647.5 1213.04 L1646.91 1213.04 L1646.33 1213.04 L1645.74 1213.04 L1645.15 1213.04 L1644.57 1213.04 L1643.98 1213.04 L1643.39 1213.04 L1642.81 1213.04 L1642.22 1213.04 L1641.63 1213.04 L1641.05 1213.04 L1640.46 1213.04 L1639.88 1213.04 L1639.29 1213.04 L1638.7 1213.04 L1638.12 1213.04 L1637.53 1213.04 L1636.94 1213.04 L1636.36 1213.04 L1635.77 1213.04 L1635.18 1213.04 L1634.6 1213.04 L1634.01 1213.04 L1633.42 1213.04 L1632.84 1213.04 L1632.25 1213.04 L1631.67 1213.04 L1631.08 1213.04 L1630.49 1213.04 L1629.91 1213.04 L1629.32 1213.04 L1628.73 1213.04 L1628.15 1213.04 L1627.56 1213.04 L1626.97 1213.04 L1626.39 1213.04 L1625.8 1213.04 L1625.22 1213.04 L1624.63 1213.04 L1624.04 1213.04 L1623.46 1213.04 L1622.87 1213.04 L1622.28 1213.04 L1621.7 1213.04 L1621.11 1213.04 L1620.52 1213.04 L1619.94 1213.04 L1619.35 1213.04 L1618.76 1213.04 L1618.18 1213.04 L1617.59 1213.04 L1617.01 1213.04 L1616.42 1213.04 L1615.83 1213.04 L1615.25 1213.04 L1614.66 1213.04 L1614.07 1213.04 L1613.49 1213.04 L1612.9 1213.04 L1612.31 1213.04 L1611.73 1213.04 L1611.14 1213.04 L1610.55 1213.04 L1609.97 1213.04 L1609.38 1213.04 L1608.8 1213.04 L1608.21 1213.04 L1607.62 1213.04 L1607.04 1213.04 L1606.45 1213.04 L1605.86 1213.04 L1605.28 1213.04 L1604.69 1213.04 L1604.1 1213.04 L1603.52 1213.04 L1602.93 1213.04 L1602.34 1213.04 L1601.76 1213.04 L1601.17 1213.04 L1600.59 1213.04 L1600 1213.04 L1599.41 1213.04 L1598.83 1213.04 L1598.24 1213.04 L1597.65 1213.04 L1597.07 1213.04 L1596.48 1213.04 L1595.89 1213.04 L1595.31 1213.04 L1594.72 1213.04 L1594.14 1213.04 L1593.55 1213.04 L1592.96 1213.04 L1592.38 1213.04 L1591.79 1213.04 L1591.2 1213.04 L1590.62 1213.04 L1590.03 1213.04 L1589.44 1213.04 L1588.86 1213.04 L1588.27 1213.04 L1587.68 1213.04 L1587.1 1213.04 L1586.51 1213.04 L1585.93 1213.04 L1585.34 1213.04 L1584.75 1213.04 L1584.17 1213.04 L1583.58 1213.04 L1582.99 1213.04 L1582.41 1213.04 L1581.82 1213.04 L1581.23 1213.04 L1580.65 1213.04 L1580.06 1213.04 L1579.47 1213.04 L1578.89 1213.04 L1578.3 1213.04 L1577.72 1213.04 L1577.13 1213.04 L1576.54 1213.04 L1575.96 1213.04 L1575.37 1213.04 L1574.78 1213.04 L1574.2 1213.04 L1573.61 1213.04 L1573.02 1213.04 L1572.44 1213.04 L1571.85 1213.04 L1571.27 1213.04 L1570.68 1213.04 L1570.09 1213.04 L1569.51 1213.04 L1568.92 1213.04 L1568.33 1213.04 L1567.75 1213.04 L1567.16 1213.04 L1566.57 1213.04 L1565.99 1213.04 L1565.4 1213.04 L1564.81 1213.04 L1564.23 1213.04 L1563.64 1213.04 L1563.06 1213.04 L1562.47 1213.04 L1561.88 1213.04 L1561.3 1213.04 L1560.71 1213.04 L1560.12 1213.04 L1559.54 1213.04 L1558.95 1213.04 L1558.36 1213.04 L1557.78 1213.04 L1557.19 1213.04 L1556.6 1213.04 L1556.02 1213.04 L1555.43 1213.04 L1554.85 1213.04 L1554.26 1213.04 L1553.67 1213.04 L1553.09 1213.04 L1552.5 1213.04 L1551.91 1213.04 L1551.33 1213.04 L1550.74 1213.04 L1550.15 1213.04 L1549.57 1213.04 L1548.98 1213.04 L1548.4 1213.04 L1547.81 1213.04 L1547.22 1213.04 L1546.64 1213.04 L1546.05 1213.04 L1545.46 1213.04 L1544.88 1213.04 L1544.29 1213.04 L1543.7 1213.04 L1543.12 1213.04 L1542.53 1213.04 L1541.94 1213.04 L1541.36 1213.04 L1540.77 1213.04 L1540.19 1213.04 L1539.6 1213.04 L1539.01 1213.04 L1538.43 1213.04 L1537.84 1213.04 L1537.25 1213.04 L1536.67 1213.04 L1536.08 1213.04 L1535.49 1213.04 L1534.91 1213.04 L1534.32 1213.04 L1533.73 1213.04 L1533.15 1213.04 L1532.56 1213.04 L1531.98 1213.04 L1531.39 1213.04 L1530.8 1213.04 L1530.22 1213.04 L1529.63 1213.04 L1529.04 1213.04 L1528.46 1213.04 L1527.87 1213.04 L1527.28 1213.04 L1526.7 1213.04 L1526.11 1213.04 L1525.52 1213.04 L1524.94 1213.04 L1524.35 1213.04 L1523.77 1213.04 L1523.18 1213.04 L1522.59 1213.04 L1522.01 1213.04 L1521.42 1213.04 L1520.83 1213.04 L1520.25 1213.04 L1519.66 1213.04 L1519.07 1213.04 L1518.49 1213.04 L1517.9 1213.04 L1517.32 1213.04 L1516.73 1213.04 L1516.14 1213.04 L1515.56 1213.04 L1514.97 1213.04 L1514.38 1213.04 L1513.8 1213.04 L1513.21 1213.04 L1512.62 1213.04 L1512.04 1213.04 L1511.45 1213.04 L1510.86 1213.04 L1510.28 1213.04 L1509.69 1213.04 L1509.11 1213.04 L1508.52 1213.04 L1507.93 1213.04 L1507.35 1213.04 L1506.76 1213.04 L1506.17 1213.04 L1505.59 1213.04 L1505 1213.04 L1504.41 1213.04 L1503.83 1213.04 L1503.24 1213.04 L1502.65 1213.04 L1502.07 1213.04 L1501.48 1213.04 L1500.9 1213.04 L1500.31 1213.04 L1499.72 1213.04 L1499.14 1213.04 L1498.55 1213.04 L1497.96 1213.04 L1497.38 1213.04 L1496.79 1213.04 L1496.2 1213.04 L1495.62 1213.04 L1495.03 1213.04 L1494.45 1213.04 L1493.86 1213.04 L1493.27 1213.04 L1492.69 1213.04 L1492.1 1213.04 L1491.51 1213.04 L1490.93 1213.04 L1490.34 1213.04 L1489.75 1213.04 L1489.17 1213.04 L1488.58 1213.04 L1487.99 1213.04 L1487.41 1213.04 L1486.82 1213.04 L1486.24 1213.04 L1485.65 1213.04 L1485.06 1213.04 L1484.48 1213.04 L1483.89 1213.04 L1483.3 1213.04 L1482.72 1213.04 L1482.13 1213.04 L1481.54 1213.04 L1480.96 1213.04 L1480.37 1213.04 L1479.78 1213.04 L1479.2 1213.04 L1478.61 1213.04 L1478.03 1213.04 L1477.44 1213.04 L1476.85 1213.04 L1476.27 1213.04 L1475.68 1213.04 L1475.09 1213.04 L1474.51 1213.04 L1473.92 1213.04 L1473.33 1213.04 L1472.75 1213.04 L1472.16 1213.04 L1471.57 1213.04 L1470.99 1213.04 L1470.4 1213.04 L1469.82 1213.04 L1469.23 1213.04 L1468.64 1213.04 L1468.06 1213.04 L1467.47 1213.04 L1466.88 1213.04 L1466.3 1213.04 L1465.71 1213.04 L1465.12 1213.04 L1464.54 1213.04 L1463.95 1213.04 L1463.37 1213.04 L1462.78 1213.04 L1462.19 1213.04 L1461.61 1213.04 L1461.02 1213.04 L1460.43 1213.04 L1459.85 1213.04 L1459.26 1213.04 L1458.67 1213.04 L1458.09 1213.04 L1457.5 1213.04 L1456.91 1213.04 L1456.33 1213.04 L1455.74 1213.04 L1455.16 1213.04 L1454.57 1213.04 L1453.98 1213.04 L1453.4 1213.04 L1452.81 1213.04 L1452.22 1213.04 L1451.64 1213.04 L1451.05 1213.04 L1450.46 1213.04 L1449.88 1213.04 L1449.29 1213.04 L1448.7 1213.04 L1448.12 1213.04 L1447.53 1213.04 L1446.95 1213.04 L1446.36 1213.04 L1445.77 1213.04 L1445.19 1213.04 L1444.6 1213.04 L1444.01 1213.04 L1443.43 1213.04 L1442.84 1213.04 L1442.25 1213.04 L1441.67 1213.04 L1441.08 1213.04 L1440.5 1213.04 L1439.91 1213.04 L1439.32 1213.04 L1438.74 1213.04 L1438.15 1213.04 L1437.56 1213.04 L1436.98 1213.04 L1436.39 1213.04 L1435.8 1213.04 L1435.22 1213.04 L1434.63 1213.04 L1434.04 1213.04 L1433.46 1213.04 L1432.87 1213.04 L1432.29 1213.04 L1431.7 1213.04 L1431.11 1213.04 L1430.53 1213.04 L1429.94 1213.04 L1429.35 1213.04 L1428.77 1213.04 L1428.18 1213.04 L1427.59 1213.04 L1427.01 1213.04 L1426.42 1213.04 L1425.83 1213.04 L1425.25 1213.04 L1424.66 1213.04 L1424.08 1213.04 L1423.49 1213.04 L1422.9 1213.04 L1422.32 1213.04 L1421.73 1213.04 L1421.14 1213.04 L1420.56 1213.04 L1419.97 1213.04 L1419.38 1213.04 L1418.8 1213.04 L1418.21 1213.04 L1417.63 1213.04 L1417.04 1213.04 L1416.45 1213.04 L1415.87 1213.04 L1415.28 1213.04 L1414.69 1213.04 L1414.11 1213.04 L1413.52 1213.04 L1412.93 1213.04 L1412.35 1213.04 L1411.76 1213.04 L1411.17 1213.04 L1410.59 1213.04 L1410 1213.04 L1409.42 1213.04 L1408.83 1213.04 L1408.24 1213.04 L1407.66 1213.04 L1407.07 1213.04 L1406.48 1213.04 L1405.9 1213.04 L1405.31 1213.04 L1404.72 1213.04 L1404.14 1213.04 L1403.55 1213.04 L1402.96 1213.04 L1402.38 1213.04 L1401.79 1213.04 L1401.21 1213.04 L1400.62 1213.04 L1400.03 1213.04 L1399.45 1213.04 L1398.86 1213.04 L1398.27 1213.04 L1397.69 1213.04 L1397.1 1213.04 L1396.51 1213.04 L1395.93 1213.04 L1395.34 1213.04 L1394.75 1213.04 L1394.17 1213.04 L1393.58 1213.04 L1393 1213.04 L1392.41 1213.04 L1391.82 1213.04 L1391.24 1213.04 L1390.65 1213.04 L1390.06 1213.04 L1389.48 1213.04 L1388.89 1213.04 L1388.3 1213.04 L1387.72 1213.04 L1387.13 1213.04 L1386.55 1213.04 L1385.96 1213.04 L1385.37 1213.04 L1384.79 1213.04 L1384.2 1213.04 L1383.61 1213.04 L1383.03 1213.04 L1382.44 1213.04 L1381.85 1213.04 L1381.27 1213.04 L1380.68 1213.04 L1380.09 1213.04 L1379.51 1213.04 L1378.92 1213.04 L1378.34 1213.04 L1377.75 1213.04 L1377.16 1213.04 L1376.58 1213.04 L1375.99 1213.04 L1375.4 1213.04 L1374.82 1213.04 L1374.23 1213.04 L1373.64 1213.04 L1373.06 1213.04 L1372.47 1213.04 L1371.88 1213.04 L1371.3 1213.04 L1370.71 1213.04 L1370.13 1213.04 L1369.54 1213.04 L1368.95 1213.04 L1368.37 1213.04 L1367.78 1213.04 L1367.19 1213.04 L1366.61 1213.04 L1366.02 1213.04 L1365.43 1213.04 L1364.85 1213.04 L1364.26 1213.04 L1363.68 1213.04 L1363.09 1213.04 L1362.5 1213.04 L1361.92 1213.04 L1361.33 1213.04 L1360.74 1213.04 L1360.16 1213.04 L1359.57 1213.04 L1358.98 1213.04 L1358.4 1213.04 L1357.81 1213.04 L1357.22 1213.04 L1356.64 1213.04 L1356.05 1213.04 L1355.47 1213.04 L1354.88 1213.04 L1354.29 1213.04 L1353.71 1213.04 L1353.12 1213.04 L1352.53 1213.04 L1351.95 1213.04 L1351.36 1213.04 L1350.77 1213.04 L1350.19 1213.04 L1349.6 1213.04 L1349.01 1213.04 L1348.43 1213.04 L1347.84 1213.04 L1347.26 1213.04 L1346.67 1213.04 L1346.08 1213.04 L1345.5 1213.04 L1344.91 1213.04 L1344.32 1213.04 L1343.74 1213.04 L1343.15 1213.04 L1342.56 1213.04 L1341.98 1213.04 L1341.39 1213.04 L1340.8 1213.04 L1340.22 1213.04 L1339.63 1213.04 L1339.05 1213.04 L1338.46 1213.04 L1337.87 1213.04 L1337.29 1213.04 L1336.7 1213.04 L1336.11 1213.04 L1335.53 1213.04 L1334.94 1213.04 L1334.35 1213.04 L1333.77 1213.04 L1333.18 1213.04 L1332.6 1213.04 L1332.01 1213.04 L1331.42 1213.04 L1330.84 1213.04 L1330.25 1213.04 L1329.66 1213.04 L1329.08 1213.04 L1328.49 1213.04 L1327.9 1213.04 L1327.32 1213.04 L1326.73 1213.04 L1326.14 1213.04 L1325.56 1213.04 L1324.97 1213.04 L1324.39 1213.04 L1323.8 1213.04 L1323.21 1213.04 L1322.63 1213.04 L1322.04 1213.04 L1321.45 1213.04 L1320.87 1213.04 L1320.28 1213.04 L1319.69 1213.04 L1319.11 1213.04 L1318.52 1213.04 L1317.93 1213.04 L1317.35 1213.04 L1316.76 1213.04 L1316.18 1213.04 L1315.59 1213.04 L1315 1213.04 L1314.42 1213.04 L1313.83 1213.04 L1313.24 1213.04 L1312.66 1213.04 L1312.07 1213.04 L1311.48 1213.04 L1310.9 1213.04 L1310.31 1213.04 L1309.73 1213.04 L1309.14 1213.04 L1308.55 1213.04 L1307.97 1213.04 L1307.38 1213.04 L1306.79 1213.04 L1306.21 1213.04 L1305.62 1213.04 L1305.03 1213.04 L1304.45 1213.04 L1303.86 1213.04 L1303.27 1213.04 L1302.69 1213.04 L1302.1 1213.04 L1301.52 1213.04 L1300.93 1213.04 L1300.34 1213.04 L1299.76 1213.04 L1299.17 1213.04 L1298.58 1213.04 L1298 1213.04 L1297.41 1213.04 L1296.82 1213.04 L1296.24 1213.04 L1295.65 1213.04 L1295.06 1213.04 L1294.48 1213.04 L1293.89 1213.04 L1293.31 1213.04 L1292.72 1213.04 L1292.13 1213.04 L1291.55 1213.04 L1290.96 1213.04 L1290.37 1213.04 L1289.79 1213.04 L1289.2 1213.04 L1288.61 1213.04 L1288.03 1213.04 L1287.44 1213.04 L1286.86 1213.04 L1286.27 1213.04 L1285.68 1213.04 L1285.1 1213.04 L1284.51 1213.04 L1283.92 1213.04 L1283.34 1213.04 L1282.75 1213.04 L1282.16 1213.04 L1281.58 1213.04 L1280.99 1213.04 L1280.4 1213.04 L1279.82 1213.04 L1279.23 1213.04 L1278.65 1213.04 L1278.06 1213.04 L1277.47 1213.04 L1276.89 1213.04 L1276.3 1213.04 L1275.71 1213.04 L1275.13 1213.04 L1274.54 1213.04 L1273.95 1213.04 L1273.37 1213.04 L1272.78 1213.04 L1272.19 1213.04 L1271.61 1213.04 L1271.02 1213.04 L1270.44 1213.04 L1269.85 1213.04 L1269.26 1213.04 L1268.68 1213.04 L1268.09 1213.04 L1267.5 1213.04 L1266.92 1213.04 L1266.33 1213.04 L1265.74 1213.04 L1265.16 1213.04 L1264.57 1213.04 L1263.98 1213.04 L1263.4 1213.04 L1262.81 1213.04 L1262.23 1213.04 L1261.64 1213.04 L1261.05 1213.04 L1260.47 1213.04 L1259.88 1213.04 L1259.29 1213.04 L1258.71 1213.04 L1258.12 1213.04 L1257.53 1213.04 L1256.95 1213.04 L1256.36 1213.04 L1255.78 1213.04 L1255.19 1213.04 L1254.6 1213.04 L1254.02 1213.04 L1253.43 1213.04 L1252.84 1213.04 L1252.26 1213.04 L1251.67 1213.04 L1251.08 1213.04 L1250.5 1213.04 L1249.91 1213.04 L1249.32 1213.04 L1248.74 1213.04 L1248.15 1213.04 L1247.57 1213.04 L1246.98 1213.04 L1246.39 1213.04 L1245.81 1213.04 L1245.22 1213.04 L1244.63 1213.04 L1244.05 1213.04 L1243.46 1213.04 L1242.87 1213.04 L1242.29 1213.04 L1241.7 1213.04 L1241.11 1213.04 L1240.53 1213.04 L1239.94 1213.04 L1239.36 1213.04 L1238.77 1213.04 L1238.18 1213.04 L1237.6 1213.04 L1237.01 1213.04 L1236.42 1213.04 L1235.84 1213.04 L1235.25 1213.04 L1234.66 1213.04 L1234.08 1213.04 L1233.49 1213.04 L1232.91 1213.04 L1232.32 1213.04 L1231.73 1213.04 L1231.15 1213.04 L1230.56 1213.04 L1229.97 1213.04 L1229.39 1213.04 L1228.8 1213.04 L1228.21 1213.04 L1227.63 1213.04 L1227.04 1213.04 L1226.45 1213.04 L1225.87 1213.04 L1225.28 1213.04 L1224.7 1213.04 L1224.11 1213.04 L1223.52 1213.04 L1222.94 1213.04 L1222.35 1213.04 L1221.76 1213.04 L1221.18 1213.04 L1220.59 1213.04 L1220 1213.04 L1219.42 1213.04 L1218.83 1213.04 L1218.24 1213.04 L1217.66 1213.04 L1217.07 1213.04 L1216.49 1213.04 L1215.9 1213.04 L1215.31 1213.04 L1214.73 1213.04 L1214.14 1213.04 L1213.55 1213.04 L1212.97 1213.04 L1212.38 1213.04 L1211.79 1213.04 L1211.21 1213.04 L1210.62 1213.04 L1210.03 1213.04 L1209.45 1213.04 L1208.86 1213.04 L1208.28 1213.04 L1207.69 1213.04 L1207.1 1213.04 L1206.52 1213.04 L1205.93 1213.04 L1205.34 1213.04 L1204.76 1213.04 L1204.17 1213.04 L1203.58 1213.04 L1203 1213.04 L1202.41 1213.04 L1201.83 1213.04 L1201.24 1213.04 L1200.65 1213.04 L1200.07 1213.04 L1199.48 1213.04 L1198.89 1213.04 L1198.31 1213.04 L1197.72 1213.04 L1197.13 1213.04 L1196.55 1213.04 L1195.96 1213.04 L1195.37 1213.04 L1194.79 1213.04 L1194.2 1213.04 L1193.62 1213.04 L1193.03 1213.04 L1192.44 1213.04 L1191.86 1213.04 L1191.27 1213.04 L1190.68 1213.04 L1190.1 1213.04 L1189.51 1213.04 L1188.92 1213.04 L1188.34 1213.04 L1187.75 1213.04 L1187.16 1213.04 L1186.58 1213.04 L1185.99 1213.04 L1185.41 1213.04 L1184.82 1213.04 L1184.23 1213.04 L1183.65 1213.04 L1183.06 1213.04 L1182.47 1213.04 L1181.89 1213.04 L1181.3 1213.04 L1180.71 1213.04 L1180.13 1213.04 L1179.54 1213.04 L1178.96 1213.04 L1178.37 1213.04 L1177.78 1213.04 L1177.2 1213.04 L1176.61 1213.04 L1176.02 1213.04 L1175.44 1213.04 L1174.85 1213.04 L1174.26 1213.04 L1173.68 1213.04 L1173.09 1213.04 L1172.5 1213.04 L1171.92 1213.04 L1171.33 1213.04 L1170.75 1213.04 L1170.16 1213.04 L1169.57 1213.04 L1168.99 1213.04 L1168.4 1213.04 L1167.81 1213.04 L1167.23 1213.04 L1166.64 1213.04 L1166.05 1213.04 L1165.47 1213.04 L1164.88 1213.04 L1164.29 1213.04 L1163.71 1213.04 L1163.12 1213.04 L1162.54 1213.04 L1161.95 1213.04 L1161.36 1213.04 L1160.78 1213.04 L1160.19 1213.04 L1159.6 1213.04 L1159.02 1213.04 L1158.43 1213.04 L1157.84 1213.04 L1157.26 1213.04 L1156.67 1213.04 L1156.09 1213.04 L1155.5 1213.04 L1154.91 1213.04 L1154.33 1213.04 L1153.74 1213.04 L1153.15 1213.04 L1152.57 1213.04 L1151.98 1213.04 L1151.39 1213.04 L1150.81 1213.04 L1150.22 1213.04 L1149.63 1213.04 L1149.05 1213.04 L1148.46 1213.04 L1147.88 1213.04 L1147.29 1213.04 L1146.7 1213.04 L1146.12 1213.04 L1145.53 1213.04 L1144.94 1213.04 L1144.36 1213.04 L1143.77 1213.04 L1143.18 1213.04 L1142.6 1213.04 L1142.01 1213.04 L1141.42 1213.04 L1140.84 1213.04 L1140.25 1213.04 L1139.67 1213.04 L1139.08 1213.04 L1138.49 1213.04 L1137.91 1213.04 L1137.32 1213.04 L1136.73 1213.04 L1136.15 1213.04 L1135.56 1213.04 L1134.97 1213.04 L1134.39 1213.04 L1133.8 1213.04 L1133.21 1213.04 L1132.63 1213.04 L1132.04 1213.04 L1131.46 1213.04 L1130.87 1213.04 L1130.28 1213.04 L1129.7 1213.04 L1129.11 1213.04 L1128.52 1213.04 L1127.94 1213.04 L1127.35 1213.04 L1126.76 1213.04 L1126.18 1213.04 L1125.59 1213.04 L1125.01 1213.04 L1124.42 1213.04 L1123.83 1213.04 L1123.25 1213.04 L1122.66 1213.04 L1122.07 1213.04 L1121.49 1213.04 L1120.9 1213.04 L1120.31 1213.04 L1119.73 1213.04 L1119.14 1213.04 L1118.55 1213.04 L1117.97 1213.04 L1117.38 1213.04 L1116.8 1213.04 L1116.21 1213.04 L1115.62 1213.04 L1115.04 1213.04 L1114.45 1213.04 L1113.86 1213.04 L1113.28 1213.04 L1112.69 1213.04 L1112.1 1213.04 L1111.52 1213.04 L1110.93 1213.04 L1110.34 1213.04 L1109.76 1213.04 L1109.17 1213.04 L1108.59 1213.04 L1108 1213.04 L1107.41 1213.04 L1106.83 1213.04 L1106.24 1213.04 L1105.65 1213.04 L1105.07 1213.04 L1104.48 1213.04 L1103.89 1213.04 L1103.31 1213.04 L1102.72 1213.04 L1102.14 1213.04 L1101.55 1213.04 L1100.96 1213.04 L1100.38 1213.04 L1099.79 1213.04 L1099.2 1213.04 L1098.62 1213.04 L1098.03 1213.04 L1097.44 1213.04 L1096.86 1213.04 L1096.27 1213.04 L1095.68 1213.04 L1095.1 1213.04 L1094.51 1213.04 L1093.93 1213.04 L1093.34 1213.04 L1092.75 1213.04 L1092.17 1213.04 L1091.58 1213.04 L1090.99 1213.04 L1090.41 1213.04 L1089.82 1213.04 L1089.23 1213.04 L1088.65 1213.04 L1088.06 1213.04 L1087.47 1213.04 L1086.89 1213.04 L1086.3 1213.04 L1085.72 1213.04 L1085.13 1213.04 L1084.54 1213.04 L1083.96 1213.04 L1083.37 1213.04 L1082.78 1213.04 L1082.2 1213.04 L1081.61 1213.04 L1081.02 1213.04 L1080.44 1213.04 L1079.85 1213.04 L1079.26 1213.04 L1078.68 1213.04 L1078.09 1213.04 L1077.51 1213.04 L1076.92 1213.04 L1076.33 1213.04 L1075.75 1213.04 L1075.16 1213.04 L1074.57 1213.04 L1073.99 1213.04 L1073.4 1213.04 L1072.81 1213.04 L1072.23 1213.04 L1071.64 1213.04 L1071.06 1213.04 L1070.47 1213.04 L1069.88 1213.04 L1069.3 1213.04 L1068.71 1213.04 L1068.12 1213.04 L1067.54 1213.04 L1066.95 1213.04 L1066.36 1213.04 L1065.78 1213.04 L1065.19 1213.04 L1064.6 1213.04 L1064.02 1213.04 L1063.43 1213.04 L1062.85 1213.04 L1062.26 1213.04 L1061.67 1213.04 L1061.09 1213.04 L1060.5 1213.04 L1059.91 1213.04 L1059.33 1213.04 L1058.74 1213.04 L1058.15 1213.04 L1057.57 1213.04 L1056.98 1213.04 L1056.39 1213.04 L1055.81 1213.04 L1055.22 1213.04 L1054.64 1213.04 L1054.05 1213.04 L1053.46 1213.04 L1052.88 1213.04 L1052.29 1213.04 L1051.7 1213.04 L1051.12 1213.04 L1050.53 1213.04 L1049.94 1213.04 L1049.36 1213.04 L1048.77 1213.04 L1048.19 1213.04 L1047.6 1213.04 L1047.01 1213.04 L1046.43 1213.04 L1045.84 1213.04 L1045.25 1213.04 L1044.67 1213.04 L1044.08 1213.04 L1043.49 1213.04 L1042.91 1213.04 L1042.32 1213.04 L1041.73 1213.04 L1041.15 1213.04 L1040.56 1213.04 L1039.98 1213.04 L1039.39 1213.04 L1038.8 1213.04 L1038.22 1213.04 L1037.63 1213.04 L1037.04 1213.04 L1036.46 1213.04 L1035.87 1213.04 L1035.28 1213.04 L1034.7 1213.04 L1034.11 1213.04 L1033.52 1213.04 L1032.94 1213.04 L1032.35 1213.04 L1031.77 1213.04 L1031.18 1213.04 L1030.59 1213.04 L1030.01 1213.04 L1029.42 1213.04 L1028.83 1213.04 L1028.25 1213.04 L1027.66 1213.04 L1027.07 1213.04 L1026.49 1213.04 L1025.9 1213.04 L1025.32 1213.04 L1024.73 1213.04 L1024.14 1213.04 L1023.56 1213.04 L1022.97 1213.04 L1022.38 1213.04 L1021.8 1213.04 L1021.21 1213.04 L1020.62 1213.04 L1020.04 1213.04 L1019.45 1213.04 L1018.86 1213.04 L1018.28 1213.04 L1017.69 1213.04 L1017.11 1213.04 L1016.52 1213.04 L1015.93 1213.04 L1015.35 1213.04 L1014.76 1213.04 L1014.17 1213.04 L1013.59 1213.04 L1013 1213.04 L1012.41 1213.04 L1011.83 1213.04 L1011.24 1213.04 L1010.65 1213.04 L1010.07 1213.04 L1009.48 1213.04 L1008.9 1213.04 L1008.31 1213.04 L1007.72 1213.04 L1007.14 1213.04 L1006.55 1213.04 L1005.96 1213.04 L1005.38 1213.04 L1004.79 1213.04 L1004.2 1213.04 L1003.62 1213.04 L1003.03 1213.04 L1002.44 1213.04 L1001.86 1213.04 L1001.27 1213.04 L1000.69 1213.04 L1000.1 1213.04 L999.513 1213.04 L998.926 1213.04 L998.34 1213.04 L997.754 1213.04 L997.167 1213.04 L996.581 1213.04 L995.994 1213.04 L995.408 1213.04 L994.822 1213.04 L994.235 1213.04 L993.649 1213.04 L993.062 1213.04 L992.476 1213.04 L991.889 1213.04 L991.303 1213.04 L990.717 1213.04 L990.13 1213.04 L989.544 1213.04 L988.957 1213.04 L988.371 1213.04 L987.785 1213.04 L987.198 1213.04 L986.612 1213.04 L986.025 1213.04  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.42 986.612,1213.42 987.198,1213.42 987.785,1213.42 988.371,1213.42 988.957,1213.42 989.544,1213.42 990.13,1213.42 990.717,1213.42 991.303,1213.42 991.889,1213.42 992.476,1213.42 993.062,1213.42 993.649,1213.42 994.235,1213.42 994.822,1213.42 995.408,1213.42 995.994,1213.42 996.581,1213.42 997.167,1213.42 997.754,1213.42 998.34,1213.42 998.926,1213.42 999.513,1213.42 1000.1,1213.42 1000.69,1213.42 1001.27,1213.42 1001.86,1213.42 1002.44,1213.42 1003.03,1213.42 1003.62,1213.42 1004.2,1213.42 1004.79,1213.42 1005.38,1213.42 1005.96,1213.42 1006.55,1213.42 1007.14,1213.42 1007.72,1213.42 1008.31,1213.42 1008.9,1213.42 1009.48,1213.42 1010.07,1213.42 1010.65,1213.42 1011.24,1213.42 1011.83,1213.42 1012.41,1213.42 1013,1213.42 1013.59,1213.42 1014.17,1213.42 1014.76,1213.42 1015.35,1213.42 1015.93,1213.42 1016.52,1213.42 1017.11,1213.42 1017.69,1213.42 1018.28,1213.42 1018.86,1213.42 1019.45,1213.42 1020.04,1213.42 1020.62,1213.42 1021.21,1213.42 1021.8,1213.42 1022.38,1213.42 1022.97,1213.42 1023.56,1213.42 1024.14,1213.42 1024.73,1213.42 1025.32,1213.42 1025.9,1213.42 1026.49,1213.42 1027.07,1213.42 1027.66,1213.42 1028.25,1213.42 1028.83,1213.42 1029.42,1213.42 1030.01,1213.42 1030.59,1213.42 1031.18,1213.42 1031.77,1213.42 1032.35,1213.42 1032.94,1213.42 1033.52,1213.42 1034.11,1213.42 1034.7,1213.42 1035.28,1213.42 1035.87,1213.42 1036.46,1213.42 1037.04,1213.42 1037.63,1213.42 1038.22,1213.42 1038.8,1213.42 1039.39,1213.42 1039.98,1213.42 1040.56,1213.42 1041.15,1213.42 1041.73,1213.42 1042.32,1213.42 1042.91,1213.42 1043.49,1213.42 1044.08,1213.42 1044.67,1213.42 1045.25,1213.42 1045.84,1213.42 1046.43,1213.42 1047.01,1213.42 1047.6,1213.42 1048.19,1213.42 1048.77,1213.42 1049.36,1213.42 1049.94,1213.42 1050.53,1213.42 1051.12,1213.42 1051.7,1213.42 1052.29,1213.42 1052.88,1213.42 1053.46,1213.42 1054.05,1213.42 1054.64,1213.42 1055.22,1213.42 1055.81,1213.42 1056.39,1213.42 1056.98,1213.42 1057.57,1213.42 1058.15,1213.42 1058.74,1213.42 1059.33,1213.42 1059.91,1213.42 1060.5,1213.42 1061.09,1213.42 1061.67,1213.42 1062.26,1213.42 1062.85,1213.42 1063.43,1213.42 1064.02,1213.42 1064.6,1213.42 1065.19,1213.42 1065.78,1213.42 1066.36,1213.42 1066.95,1213.42 1067.54,1213.42 1068.12,1213.42 1068.71,1213.42 1069.3,1213.42 1069.88,1213.42 1070.47,1213.42 1071.06,1213.42 1071.64,1213.42 1072.23,1213.42 1072.81,1213.42 1073.4,1213.42 1073.99,1213.42 1074.57,1213.42 1075.16,1213.42 1075.75,1213.42 1076.33,1213.42 1076.92,1213.42 1077.51,1213.42 1078.09,1213.42 1078.68,1213.42 1079.26,1213.42 1079.85,1213.42 1080.44,1213.42 1081.02,1213.42 1081.61,1213.42 1082.2,1213.42 1082.78,1213.42 1083.37,1213.42 1083.96,1213.42 1084.54,1213.42 1085.13,1213.42 1085.72,1213.42 1086.3,1213.42 1086.89,1213.42 1087.47,1213.42 1088.06,1213.42 1088.65,1213.42 1089.23,1213.42 1089.82,1213.42 1090.41,1213.42 1090.99,1213.42 1091.58,1213.42 1092.17,1213.42 1092.75,1213.42 1093.34,1213.42 1093.93,1213.42 1094.51,1213.42 1095.1,1213.42 1095.68,1213.42 1096.27,1213.42 1096.86,1213.42 1097.44,1213.42 1098.03,1213.42 1098.62,1213.42 1099.2,1213.42 1099.79,1213.42 1100.38,1213.42 1100.96,1213.42 1101.55,1213.42 1102.14,1213.42 1102.72,1213.42 1103.31,1213.42 1103.89,1213.42 1104.48,1213.42 1105.07,1213.42 1105.65,1213.42 1106.24,1213.42 1106.83,1213.42 1107.41,1213.42 1108,1213.42 1108.59,1213.42 1109.17,1213.42 1109.76,1213.42 1110.34,1213.42 1110.93,1213.42 1111.52,1213.42 1112.1,1213.42 1112.69,1213.42 1113.28,1213.42 1113.86,1213.42 1114.45,1213.42 1115.04,1213.42 1115.62,1213.42 1116.21,1213.42 1116.8,1213.42 1117.38,1213.42 1117.97,1213.42 1118.55,1213.42 1119.14,1213.42 1119.73,1213.42 1120.31,1213.42 1120.9,1213.42 1121.49,1213.42 1122.07,1213.42 1122.66,1213.42 1123.25,1213.42 1123.83,1213.42 1124.42,1213.42 1125.01,1213.42 1125.59,1213.42 1126.18,1213.42 1126.76,1213.42 1127.35,1213.42 1127.94,1213.42 1128.52,1213.42 1129.11,1213.42 1129.7,1213.42 1130.28,1213.42 1130.87,1213.42 1131.46,1213.42 1132.04,1213.42 1132.63,1213.42 1133.21,1213.42 1133.8,1213.42 1134.39,1213.42 1134.97,1213.42 1135.56,1213.42 1136.15,1213.42 1136.73,1213.42 1137.32,1213.42 1137.91,1213.42 1138.49,1213.42 1139.08,1213.42 1139.67,1213.42 1140.25,1213.42 1140.84,1213.42 1141.42,1213.42 1142.01,1213.42 1142.6,1213.42 1143.18,1213.42 1143.77,1213.42 1144.36,1213.42 1144.94,1213.42 1145.53,1213.42 1146.12,1213.42 1146.7,1213.42 1147.29,1213.42 1147.88,1213.42 1148.46,1213.42 1149.05,1213.42 1149.63,1213.42 1150.22,1213.42 1150.81,1213.42 1151.39,1213.42 1151.98,1213.42 1152.57,1213.42 1153.15,1213.42 1153.74,1213.42 1154.33,1213.42 1154.91,1213.42 1155.5,1213.42 1156.09,1213.42 1156.67,1213.42 1157.26,1213.42 1157.84,1213.42 1158.43,1213.42 1159.02,1213.42 1159.6,1213.42 1160.19,1213.42 1160.78,1213.42 1161.36,1213.42 1161.95,1213.42 1162.54,1213.42 1163.12,1213.42 1163.71,1213.42 1164.29,1213.42 1164.88,1213.42 1165.47,1213.42 1166.05,1213.42 1166.64,1213.42 1167.23,1213.42 1167.81,1213.42 1168.4,1213.42 1168.99,1213.42 1169.57,1213.42 1170.16,1213.42 1170.75,1213.42 1171.33,1213.42 1171.92,1213.42 1172.5,1213.42 1173.09,1213.42 1173.68,1213.42 1174.26,1213.42 1174.85,1213.42 1175.44,1213.42 1176.02,1213.42 1176.61,1213.42 1177.2,1213.42 1177.78,1213.42 1178.37,1213.42 1178.96,1213.42 1179.54,1213.42 1180.13,1213.42 1180.71,1213.42 1181.3,1213.42 1181.89,1213.42 1182.47,1213.42 1183.06,1213.42 1183.65,1213.42 1184.23,1213.42 1184.82,1213.42 1185.41,1213.42 1185.99,1213.42 1186.58,1213.42 1187.16,1213.42 1187.75,1213.42 1188.34,1213.42 1188.92,1213.42 1189.51,1213.42 1190.1,1213.42 1190.68,1213.42 1191.27,1213.42 1191.86,1213.42 1192.44,1213.42 1193.03,1213.42 1193.62,1213.42 1194.2,1213.42 1194.79,1213.42 1195.37,1213.42 1195.96,1213.42 1196.55,1213.42 1197.13,1213.42 1197.72,1213.42 1198.31,1213.42 1198.89,1213.42 1199.48,1213.42 1200.07,1213.42 1200.65,1213.42 1201.24,1213.42 1201.83,1213.42 1202.41,1213.42 1203,1213.42 1203.58,1213.42 1204.17,1213.42 1204.76,1213.42 1205.34,1213.42 1205.93,1213.42 1206.52,1213.42 1207.1,1213.42 1207.69,1213.42 1208.28,1213.42 1208.86,1213.42 1209.45,1213.42 1210.03,1213.42 1210.62,1213.42 1211.21,1213.42 1211.79,1213.42 1212.38,1213.42 1212.97,1213.42 1213.55,1213.42 1214.14,1213.42 1214.73,1213.42 1215.31,1213.42 1215.9,1213.42 1216.49,1213.42 1217.07,1213.42 1217.66,1213.42 1218.24,1213.42 1218.83,1213.42 1219.42,1213.42 1220,1213.42 1220.59,1213.42 1221.18,1213.42 1221.76,1213.42 1222.35,1213.42 1222.94,1213.42 1223.52,1213.42 1224.11,1213.42 1224.7,1213.42 1225.28,1213.42 1225.87,1213.42 1226.45,1213.42 1227.04,1213.42 1227.63,1213.42 1228.21,1213.42 1228.8,1213.42 1229.39,1213.42 1229.97,1213.42 1230.56,1213.42 1231.15,1213.42 1231.73,1213.42 1232.32,1213.42 1232.91,1213.42 1233.49,1213.42 1234.08,1213.42 1234.66,1213.42 1235.25,1213.42 1235.84,1213.42 1236.42,1213.42 1237.01,1213.42 1237.6,1213.42 1238.18,1213.42 1238.77,1213.42 1239.36,1213.42 1239.94,1213.42 1240.53,1213.42 1241.11,1213.42 1241.7,1213.42 1242.29,1213.42 1242.87,1213.42 1243.46,1213.42 1244.05,1213.42 1244.63,1213.42 1245.22,1213.42 1245.81,1213.42 1246.39,1213.42 1246.98,1213.42 1247.57,1213.42 1248.15,1213.42 1248.74,1213.42 1249.32,1213.42 1249.91,1213.42 1250.5,1213.42 1251.08,1213.42 1251.67,1213.42 1252.26,1213.42 1252.84,1213.42 1253.43,1213.42 1254.02,1213.42 1254.6,1213.42 1255.19,1213.42 1255.78,1213.42 1256.36,1213.42 1256.95,1213.42 1257.53,1213.42 1258.12,1213.42 1258.71,1213.42 1259.29,1213.42 1259.88,1213.42 1260.47,1213.42 1261.05,1213.42 1261.64,1213.42 1262.23,1213.42 1262.81,1213.42 1263.4,1213.42 1263.98,1213.42 1264.57,1213.42 1265.16,1213.42 1265.74,1213.42 1266.33,1213.42 1266.92,1213.42 1267.5,1213.42 1268.09,1213.42 1268.68,1213.42 1269.26,1213.42 1269.85,1213.42 1270.44,1213.42 1271.02,1213.42 1271.61,1213.42 1272.19,1213.42 1272.78,1213.42 1273.37,1213.42 1273.95,1213.42 1274.54,1213.42 1275.13,1213.42 1275.71,1213.42 1276.3,1213.42 1276.89,1213.42 1277.47,1213.42 1278.06,1213.42 1278.65,1213.42 1279.23,1213.42 1279.82,1213.42 1280.4,1213.42 1280.99,1213.42 1281.58,1213.42 1282.16,1213.42 1282.75,1213.42 1283.34,1213.42 1283.92,1213.42 1284.51,1213.42 1285.1,1213.42 1285.68,1213.42 1286.27,1213.42 1286.86,1213.42 1287.44,1213.42 1288.03,1213.42 1288.61,1213.42 1289.2,1213.42 1289.79,1213.42 1290.37,1213.42 1290.96,1213.42 1291.55,1213.42 1292.13,1213.42 1292.72,1213.42 1293.31,1213.42 1293.89,1213.42 1294.48,1213.42 1295.06,1213.42 1295.65,1213.42 1296.24,1213.42 1296.82,1213.42 1297.41,1213.42 1298,1213.42 1298.58,1213.42 1299.17,1213.42 1299.76,1213.42 1300.34,1213.42 1300.93,1213.42 1301.52,1213.42 1302.1,1213.42 1302.69,1213.42 1303.27,1213.42 1303.86,1213.42 1304.45,1213.42 1305.03,1213.42 1305.62,1213.42 1306.21,1213.42 1306.79,1213.42 1307.38,1213.42 1307.97,1213.42 1308.55,1213.42 1309.14,1213.42 1309.73,1213.42 1310.31,1213.42 1310.9,1213.42 1311.48,1213.42 1312.07,1213.42 1312.66,1213.42 1313.24,1213.42 1313.83,1213.42 1314.42,1213.42 1315,1213.42 1315.59,1213.42 1316.18,1213.42 1316.76,1213.42 1317.35,1213.42 1317.93,1213.42 1318.52,1213.42 1319.11,1213.42 1319.69,1213.42 1320.28,1213.42 1320.87,1213.42 1321.45,1213.42 1322.04,1213.42 1322.63,1213.42 1323.21,1213.42 1323.8,1213.42 1324.39,1213.42 1324.97,1213.42 1325.56,1213.42 1326.14,1213.42 1326.73,1213.42 1327.32,1213.42 1327.9,1213.42 1328.49,1213.42 1329.08,1213.42 1329.66,1213.42 1330.25,1213.42 1330.84,1213.42 1331.42,1213.42 1332.01,1213.42 1332.6,1213.42 1333.18,1213.42 1333.77,1213.42 1334.35,1213.42 1334.94,1213.42 1335.53,1213.42 1336.11,1213.42 1336.7,1213.42 1337.29,1213.42 1337.87,1213.42 1338.46,1213.42 1339.05,1213.42 1339.63,1213.42 1340.22,1213.42 1340.8,1213.42 1341.39,1213.42 1341.98,1213.42 1342.56,1213.42 1343.15,1213.42 1343.74,1213.42 1344.32,1213.42 1344.91,1213.42 1345.5,1213.42 1346.08,1213.42 1346.67,1213.42 1347.26,1213.42 1347.84,1213.42 1348.43,1213.42 1349.01,1213.42 1349.6,1213.42 1350.19,1213.42 1350.77,1213.42 1351.36,1213.42 1351.95,1213.42 1352.53,1213.42 1353.12,1213.42 1353.71,1213.42 1354.29,1213.42 1354.88,1213.42 1355.47,1213.42 1356.05,1213.42 1356.64,1213.42 1357.22,1213.42 1357.81,1213.42 1358.4,1213.42 1358.98,1213.42 1359.57,1213.42 1360.16,1213.42 1360.74,1213.42 1361.33,1213.42 1361.92,1213.42 1362.5,1213.42 1363.09,1213.42 1363.68,1213.42 1364.26,1213.42 1364.85,1213.42 1365.43,1213.42 1366.02,1213.42 1366.61,1213.42 1367.19,1213.42 1367.78,1213.42 1368.37,1213.42 1368.95,1213.42 1369.54,1213.42 1370.13,1213.42 1370.71,1213.42 1371.3,1213.42 1371.88,1213.42 1372.47,1213.42 1373.06,1213.42 1373.64,1213.42 1374.23,1213.42 1374.82,1213.42 1375.4,1213.42 1375.99,1213.42 1376.58,1213.42 1377.16,1213.42 1377.75,1213.42 1378.34,1213.42 1378.92,1213.42 1379.51,1213.42 1380.09,1213.42 1380.68,1213.42 1381.27,1213.42 1381.85,1213.42 1382.44,1213.42 1383.03,1213.42 1383.61,1213.42 1384.2,1213.42 1384.79,1213.42 1385.37,1213.42 1385.96,1213.42 1386.55,1213.42 1387.13,1213.42 1387.72,1213.42 1388.3,1213.42 1388.89,1213.42 1389.48,1213.42 1390.06,1213.42 1390.65,1213.42 1391.24,1213.42 1391.82,1213.42 1392.41,1213.42 1393,1213.42 1393.58,1213.42 1394.17,1213.42 1394.75,1213.42 1395.34,1213.42 1395.93,1213.42 1396.51,1213.42 1397.1,1213.42 1397.69,1213.42 1398.27,1213.42 1398.86,1213.42 1399.45,1213.42 1400.03,1213.42 1400.62,1213.42 1401.21,1213.42 1401.79,1213.42 1402.38,1213.42 1402.96,1213.42 1403.55,1213.42 1404.14,1213.42 1404.72,1213.42 1405.31,1213.42 1405.9,1213.42 1406.48,1213.42 1407.07,1213.42 1407.66,1213.42 1408.24,1213.42 1408.83,1213.42 1409.42,1213.42 1410,1213.42 1410.59,1213.42 1411.17,1213.42 1411.76,1213.42 1412.35,1213.42 1412.93,1213.42 1413.52,1213.42 1414.11,1213.42 1414.69,1213.42 1415.28,1213.42 1415.87,1213.42 1416.45,1213.42 1417.04,1213.42 1417.63,1213.42 1418.21,1213.42 1418.8,1213.42 1419.38,1213.42 1419.97,1213.42 1420.56,1213.42 1421.14,1213.42 1421.73,1213.42 1422.32,1213.42 1422.9,1213.42 1423.49,1213.42 1424.08,1213.42 1424.66,1213.42 1425.25,1213.42 1425.83,1213.42 1426.42,1213.42 1427.01,1213.42 1427.59,1213.42 1428.18,1213.42 1428.77,1213.42 1429.35,1213.42 1429.94,1213.42 1430.53,1213.42 1431.11,1213.42 1431.7,1213.42 1432.29,1213.42 1432.87,1213.42 1433.46,1213.42 1434.04,1213.42 1434.63,1213.42 1435.22,1213.42 1435.8,1213.42 1436.39,1213.42 1436.98,1213.42 1437.56,1213.42 1438.15,1213.42 1438.74,1213.42 1439.32,1213.42 1439.91,1213.42 1440.5,1213.42 1441.08,1213.42 1441.67,1213.42 1442.25,1213.42 1442.84,1213.42 1443.43,1213.42 1444.01,1213.42 1444.6,1213.42 1445.19,1213.42 1445.77,1213.42 1446.36,1213.42 1446.95,1213.42 1447.53,1213.42 1448.12,1213.42 1448.7,1213.42 1449.29,1213.42 1449.88,1213.42 1450.46,1213.42 1451.05,1213.42 1451.64,1213.42 1452.22,1213.42 1452.81,1213.42 1453.4,1213.42 1453.98,1213.42 1454.57,1213.42 1455.16,1213.42 1455.74,1213.42 1456.33,1213.42 1456.91,1213.42 1457.5,1213.42 1458.09,1213.42 1458.67,1213.42 1459.26,1213.42 1459.85,1213.42 1460.43,1213.42 1461.02,1213.42 1461.61,1213.42 1462.19,1213.42 1462.78,1213.42 1463.37,1213.42 1463.95,1213.42 1464.54,1213.42 1465.12,1213.42 1465.71,1213.42 1466.3,1213.42 1466.88,1213.42 1467.47,1213.42 1468.06,1213.42 1468.64,1213.42 1469.23,1213.42 1469.82,1213.42 1470.4,1213.42 1470.99,1213.42 1471.57,1213.42 1472.16,1213.42 1472.75,1213.42 1473.33,1213.42 1473.92,1213.42 1474.51,1213.42 1475.09,1213.42 1475.68,1213.42 1476.27,1213.42 1476.85,1213.42 1477.44,1213.42 1478.03,1213.42 1478.61,1213.42 1479.2,1213.42 1479.78,1213.42 1480.37,1213.42 1480.96,1213.42 1481.54,1213.42 1482.13,1213.42 1482.72,1213.42 1483.3,1213.42 1483.89,1213.42 1484.48,1213.42 1485.06,1213.42 1485.65,1213.42 1486.24,1213.42 1486.82,1213.42 1487.41,1213.42 1487.99,1213.42 1488.58,1213.42 1489.17,1213.42 1489.75,1213.42 1490.34,1213.42 1490.93,1213.42 1491.51,1213.42 1492.1,1213.42 1492.69,1213.42 1493.27,1213.42 1493.86,1213.42 1494.45,1213.42 1495.03,1213.42 1495.62,1213.42 1496.2,1213.42 1496.79,1213.42 1497.38,1213.42 1497.96,1213.42 1498.55,1213.42 1499.14,1213.42 1499.72,1213.42 1500.31,1213.42 1500.9,1213.42 1501.48,1213.42 1502.07,1213.42 1502.65,1213.42 1503.24,1213.42 1503.83,1213.42 1504.41,1213.42 1505,1213.42 1505.59,1213.42 1506.17,1213.42 1506.76,1213.42 1507.35,1213.42 1507.93,1213.42 1508.52,1213.42 1509.11,1213.42 1509.69,1213.42 1510.28,1213.42 1510.86,1213.42 1511.45,1213.42 1512.04,1213.42 1512.62,1213.42 1513.21,1213.42 1513.8,1213.42 1514.38,1213.42 1514.97,1213.42 1515.56,1213.42 1516.14,1213.42 1516.73,1213.42 1517.32,1213.42 1517.9,1213.42 1518.49,1213.42 1519.07,1213.42 1519.66,1213.42 1520.25,1213.42 1520.83,1213.42 1521.42,1213.42 1522.01,1213.42 1522.59,1213.42 1523.18,1213.42 1523.77,1213.42 1524.35,1213.42 1524.94,1213.42 1525.52,1213.42 1526.11,1213.42 1526.7,1213.42 1527.28,1213.42 1527.87,1213.42 1528.46,1213.42 1529.04,1213.42 1529.63,1213.42 1530.22,1213.42 1530.8,1213.42 1531.39,1213.42 1531.98,1213.42 1532.56,1213.42 1533.15,1213.42 1533.73,1213.42 1534.32,1213.42 1534.91,1213.42 1535.49,1213.42 1536.08,1213.42 1536.67,1213.42 1537.25,1213.42 1537.84,1213.42 1538.43,1213.42 1539.01,1213.42 1539.6,1213.42 1540.19,1213.42 1540.77,1213.42 1541.36,1213.42 1541.94,1213.42 1542.53,1213.42 1543.12,1213.42 1543.7,1213.42 1544.29,1213.42 1544.88,1213.42 1545.46,1213.42 1546.05,1213.42 1546.64,1213.42 1547.22,1213.42 1547.81,1213.42 1548.4,1213.42 1548.98,1213.42 1549.57,1213.42 1550.15,1213.42 1550.74,1213.42 1551.33,1213.42 1551.91,1213.42 1552.5,1213.42 1553.09,1213.42 1553.67,1213.42 1554.26,1213.42 1554.85,1213.42 1555.43,1213.42 1556.02,1213.42 1556.6,1213.42 1557.19,1213.42 1557.78,1213.42 1558.36,1213.42 1558.95,1213.42 1559.54,1213.42 1560.12,1213.42 1560.71,1213.42 1561.3,1213.42 1561.88,1213.42 1562.47,1213.42 1563.06,1213.42 1563.64,1213.42 1564.23,1213.42 1564.81,1213.42 1565.4,1213.42 1565.99,1213.42 1566.57,1213.42 1567.16,1213.42 1567.75,1213.42 1568.33,1213.42 1568.92,1213.42 1569.51,1213.42 1570.09,1213.42 1570.68,1213.42 1571.27,1213.42 1571.85,1213.42 1572.44,1213.42 1573.02,1213.42 1573.61,1213.42 1574.2,1213.42 1574.78,1213.42 1575.37,1213.42 1575.96,1213.42 1576.54,1213.42 1577.13,1213.42 1577.72,1213.42 1578.3,1213.42 1578.89,1213.42 1579.47,1213.42 1580.06,1213.42 1580.65,1213.42 1581.23,1213.42 1581.82,1213.42 1582.41,1213.42 1582.99,1213.42 1583.58,1213.42 1584.17,1213.42 1584.75,1213.42 1585.34,1213.42 1585.93,1213.42 1586.51,1213.42 1587.1,1213.42 1587.68,1213.42 1588.27,1213.42 1588.86,1213.42 1589.44,1213.42 1590.03,1213.42 1590.62,1213.42 1591.2,1213.42 1591.79,1213.42 1592.38,1213.42 1592.96,1213.42 1593.55,1213.42 1594.14,1213.42 1594.72,1213.42 1595.31,1213.42 1595.89,1213.42 1596.48,1213.42 1597.07,1213.42 1597.65,1213.42 1598.24,1213.42 1598.83,1213.42 1599.41,1213.42 1600,1213.42 1600.59,1213.42 1601.17,1213.42 1601.76,1213.42 1602.34,1213.42 1602.93,1213.42 1603.52,1213.42 1604.1,1213.42 1604.69,1213.42 1605.28,1213.42 1605.86,1213.42 1606.45,1213.42 1607.04,1213.42 1607.62,1213.42 1608.21,1213.42 1608.8,1213.42 1609.38,1213.42 1609.97,1213.42 1610.55,1213.42 1611.14,1213.42 1611.73,1213.42 1612.31,1213.42 1612.9,1213.42 1613.49,1213.42 1614.07,1213.42 1614.66,1213.42 1615.25,1213.42 1615.83,1213.42 1616.42,1213.42 1617.01,1213.42 1617.59,1213.42 1618.18,1213.42 1618.76,1213.42 1619.35,1213.42 1619.94,1213.42 1620.52,1213.42 1621.11,1213.42 1621.7,1213.42 1622.28,1213.42 1622.87,1213.42 1623.46,1213.42 1624.04,1213.42 1624.63,1213.42 1625.22,1213.42 1625.8,1213.42 1626.39,1213.42 1626.97,1213.42 1627.56,1213.42 1628.15,1213.42 1628.73,1213.42 1629.32,1213.42 1629.91,1213.42 1630.49,1213.42 1631.08,1213.42 1631.67,1213.42 1632.25,1213.42 1632.84,1213.42 1633.42,1213.42 1634.01,1213.42 1634.6,1213.42 1635.18,1213.42 1635.77,1213.42 1636.36,1213.42 1636.94,1213.42 1637.53,1213.42 1638.12,1213.42 1638.7,1213.42 1639.29,1213.42 1639.88,1213.42 1640.46,1213.42 1641.05,1213.42 1641.63,1213.42 1642.22,1213.42 1642.81,1213.42 1643.39,1213.42 1643.98,1213.42 1644.57,1213.42 1645.15,1213.42 1645.74,1213.42 1646.33,1213.42 1646.91,1213.42 1647.5,1213.42 1648.09,1213.42 1648.67,1213.42 1649.26,1213.42 1649.84,1213.42 1650.43,1213.42 1651.02,1213.42 1651.6,1213.42 1652.19,1213.42 1652.78,1213.42 1653.36,1213.42 1653.95,1213.42 1654.54,1213.42 1655.12,1213.42 1655.71,1213.42 1656.29,1213.42 1656.88,1213.42 1657.47,1213.42 1658.05,1213.42 1658.64,1213.42 1659.23,1213.42 1659.81,1213.42 1660.4,1213.42 1660.99,1213.42 1661.57,1213.42 1662.16,1213.42 1662.75,1213.42 1663.33,1213.42 1663.92,1213.42 1664.5,1213.42 1665.09,1213.42 1665.68,1213.42 1666.26,1213.42 1666.85,1213.42 1667.44,1213.42 1668.02,1213.42 1668.61,1213.42 1669.2,1213.42 1669.78,1213.42 1670.37,1213.42 1670.96,1213.42 1671.54,1213.42 1672.13,1213.42 1672.71,1213.42 1673.3,1213.42 1673.89,1213.42 1674.47,1213.42 1675.06,1213.42 1675.65,1213.42 1676.23,1213.42 1676.82,1213.42 1677.41,1213.42 1677.99,1213.42 1678.58,1213.42 1679.17,1213.42 1679.75,1213.42 1680.34,1213.42 1680.92,1213.42 1681.51,1213.42 1682.1,1213.42 1682.68,1213.42 1683.27,1213.42 1683.86,1213.42 1684.44,1213.42 1685.03,1213.42 1685.62,1213.42 1686.2,1213.42 1686.79,1213.42 1687.37,1213.42 1687.96,1213.42 1688.55,1213.42 1689.13,1213.42 1689.72,1213.42 1690.31,1213.42 1690.89,1213.42 1691.48,1213.42 1692.07,1213.42 1692.65,1213.42 1693.24,1213.42 1693.83,1213.42 1694.41,1213.42 1695,1213.42 1695.58,1213.42 1696.17,1213.42 1696.76,1213.42 1697.34,1213.42 1697.93,1213.42 1698.52,1213.42 1699.1,1213.42 1699.69,1213.42 1700.28,1213.42 1700.86,1213.42 1701.45,1213.42 1702.04,1213.42 1702.62,1213.42 1703.21,1213.42 1703.79,1213.42 1704.38,1213.42 1704.97,1213.42 1705.55,1213.42 1706.14,1213.42 1706.73,1213.42 1707.31,1213.42 1707.9,1213.42 1708.49,1213.42 1709.07,1213.42 1709.66,1213.42 1710.24,1213.42 1710.83,1213.42 1711.42,1213.42 1712,1213.42 1712.59,1213.42 1713.18,1213.42 1713.76,1213.42 1714.35,1213.42 1714.94,1213.42 1715.52,1213.42 1716.11,1213.42 1716.7,1213.42 1717.28,1213.42 1717.87,1213.42 1718.45,1213.42 1719.04,1213.42 1719.63,1213.42 1720.21,1213.42 1720.8,1213.42 1721.39,1213.42 1721.97,1213.42 1722.56,1213.42 1723.15,1213.42 1723.73,1213.42 1724.32,1213.42 1724.91,1213.42 1725.49,1213.42 1726.08,1213.42 1726.66,1213.42 1727.25,1213.42 1727.84,1213.42 1728.42,1213.42 1729.01,1213.42 1729.6,1213.42 1730.18,1213.42 1730.77,1213.42 1731.36,1213.42 1731.94,1213.42 1732.53,1213.42 1733.11,1213.42 1733.7,1213.42 1734.29,1213.42 1734.87,1213.42 1735.46,1213.42 1736.05,1213.42 1736.63,1213.42 1737.22,1213.42 1737.81,1213.42 1738.39,1213.42 1738.98,1213.42 1739.57,1213.42 1740.15,1213.42 1740.74,1213.42 1741.32,1213.42 1741.91,1213.42 1742.5,1213.42 1743.08,1213.42 1743.67,1213.42 1744.26,1213.42 1744.84,1213.42 1745.43,1213.42 1746.02,1213.42 1746.6,1213.42 1747.19,1213.42 1747.78,1213.42 1748.36,1213.42 1748.95,1213.42 1749.53,1213.42 1750.12,1213.42 1750.71,1213.42 1751.29,1213.42 1751.88,1213.42 1752.47,1213.42 1753.05,1213.42 1753.64,1213.42 1754.23,1213.42 1754.81,1213.42 1755.4,1213.42 1755.99,1213.42 1756.57,1213.42 1757.16,1213.42 1757.74,1213.42 1758.33,1213.42 1758.92,1213.42 1759.5,1213.42 1760.09,1213.42 1760.68,1213.42 1761.26,1213.42 1761.85,1213.42 1762.44,1213.42 1763.02,1213.42 1763.61,1213.42 1764.19,1213.42 1764.78,1213.42 1765.37,1213.42 1765.95,1213.42 1766.54,1213.42 1767.13,1213.42 1767.71,1213.42 1768.3,1213.42 1768.89,1213.42 1769.47,1213.42 1770.06,1213.42 1770.65,1213.42 1771.23,1213.42 1771.82,1213.42 1772.4,1213.42 1772.99,1213.42 1773.58,1213.42 1774.16,1213.42 1774.75,1213.42 1775.34,1213.42 1775.92,1213.42 1776.51,1213.42 1777.1,1213.42 1777.68,1213.42 1778.27,1213.42 1778.86,1213.42 1779.44,1213.42 1780.03,1213.42 1780.61,1213.42 1781.2,1213.42 1781.79,1213.42 1782.37,1213.42 1782.96,1213.42 1783.55,1213.42 1784.13,1213.42 1784.72,1213.42 1785.31,1213.42 1785.89,1213.42 1786.48,1213.42 1787.06,1213.42 1787.65,1213.42 1788.24,1213.42 1788.82,1213.42 1789.41,1213.42 1790,1213.42 1790.58,1213.42 1791.17,1213.42 1791.76,1213.42 1792.34,1213.42 1792.93,1213.42 1793.52,1213.42 1794.1,1213.42 1794.69,1213.42 1795.27,1213.42 1795.86,1213.42 1796.45,1213.42 1797.03,1213.42 1797.62,1213.42 1798.21,1213.42 1798.79,1213.42 1799.38,1213.42 1799.97,1213.42 1800.55,1213.42 1801.14,1213.42 1801.73,1213.42 1802.31,1213.42 1802.9,1213.42 1803.48,1213.42 1804.07,1213.42 1804.66,1213.42 1805.24,1213.42 1805.83,1213.42 1806.42,1213.42 1807,1213.42 1807.59,1213.42 1808.18,1213.42 1808.76,1213.42 1809.35,1213.42 1809.94,1213.42 1810.52,1213.42 1811.11,1213.42 1811.69,1213.42 1812.28,1213.42 1812.87,1213.42 1813.45,1213.42 1814.04,1213.42 1814.63,1213.42 1815.21,1213.42 1815.8,1213.42 1816.39,1213.42 1816.97,1213.42 1817.56,1213.42 1818.14,1213.42 1818.73,1213.42 1819.32,1213.42 1819.9,1213.42 1820.49,1213.42 1821.08,1213.42 1821.66,1213.42 1822.25,1213.42 1822.84,1213.42 1823.42,1213.42 1824.01,1213.42 1824.6,1213.42 1825.18,1213.42 1825.77,1213.42 1826.35,1213.42 1826.94,1213.42 1827.53,1213.42 1828.11,1213.42 1828.7,1213.42 1829.29,1213.42 1829.87,1213.42 1830.46,1213.42 1831.05,1213.42 1831.63,1213.42 1832.22,1213.42 1832.81,1213.42 1833.39,1213.42 1833.98,1213.42 1834.56,1213.42 1835.15,1213.42 1835.74,1213.42 1836.32,1213.42 1836.91,1213.42 1837.5,1213.42 1838.08,1213.42 1838.67,1213.42 1839.26,1213.42 1839.84,1213.42 1840.43,1213.42 1841.01,1213.42 1841.6,1213.42 1842.19,1213.42 1842.77,1213.42 1843.36,1213.42 1843.95,1213.42 1844.53,1213.42 1845.12,1213.42 1845.71,1213.42 1846.29,1213.42 1846.88,1213.42 1847.47,1213.42 1848.05,1213.42 1848.64,1213.42 1849.22,1213.42 1849.81,1213.42 1850.4,1213.42 1850.98,1213.42 1851.57,1213.42 1852.16,1213.42 1852.74,1213.42 1853.33,1213.42 1853.92,1213.42 1854.5,1213.42 1855.09,1213.42 1855.68,1213.42 1856.26,1213.42 1856.85,1213.42 1857.43,1213.42 1858.02,1213.42 1858.61,1213.42 1859.19,1213.42 1859.78,1213.42 1860.37,1213.42 1860.95,1213.42 1861.54,1213.42 1862.13,1213.42 1862.71,1213.42 1863.3,1213.42 1863.88,1213.42 1864.47,1213.42 1865.06,1213.42 1865.64,1213.42 1866.23,1213.42 1866.82,1213.42 1867.4,1213.42 1867.99,1213.42 1868.58,1213.42 1869.16,1213.42 1869.75,1213.42 1870.34,1213.42 1870.92,1213.42 1871.51,1213.42 1872.09,1213.42 1872.68,1213.42 1873.27,1213.42 1873.85,1213.42 1874.44,1213.42 1875.03,1213.42 1875.61,1213.42 1876.2,1213.42 1876.79,1213.42 1877.37,1213.42 1877.96,1213.42 1878.55,1213.42 1879.13,1213.42 1879.72,1213.42 1880.3,1213.42 1880.89,1213.42 1881.48,1213.42 1882.06,1213.42 1882.65,1213.42 1883.24,1213.42 1883.82,1213.42 1884.41,1213.42 1885,1213.42 1885.58,1213.42 1886.17,1213.42 1886.76,1213.42 1887.34,1213.42 1887.93,1213.42 1888.51,1213.42 1889.1,1213.42 1889.69,1213.42 1890.27,1213.42 1890.86,1213.42 1891.45,1213.42 1892.03,1213.42 1892.62,1213.42 1893.21,1213.42 1893.79,1213.42 1894.38,1213.42 1894.96,1213.42 1895.55,1213.42 1896.14,1213.42 1896.72,1213.42 1897.31,1213.42 1897.9,1213.42 1898.48,1213.42 1899.07,1213.42 1899.66,1213.42 1900.24,1213.42 1900.83,1213.42 1901.42,1213.42 1902,1213.42 1902.59,1213.42 1903.17,1213.42 1903.76,1213.42 1904.35,1213.42 1904.93,1213.42 1905.52,1213.42 1906.11,1213.42 1906.69,1213.42 1907.28,1213.42 1907.87,1213.42 1908.45,1213.42 1909.04,1213.42 1909.63,1213.42 1910.21,1213.42 1910.8,1213.42 1911.38,1213.42 1911.97,1213.42 1912.56,1213.42 1913.14,1213.42 1913.73,1213.42 1914.32,1213.42 1914.9,1213.42 1915.49,1213.42 1916.08,1213.42 1916.66,1213.42 1917.25,1213.42 1917.83,1213.42 1918.42,1213.42 1919.01,1213.42 1919.59,1213.42 1920.18,1213.42 1920.77,1213.42 1921.35,1213.42 1921.94,1213.42 1922.53,1213.42 1923.11,1213.42 1923.7,1213.42 1924.29,1213.42 1924.87,1213.42 1925.46,1213.42 1926.04,1213.42 1926.63,1213.42 1927.22,1213.42 1927.8,1213.42 1928.39,1213.42 1928.98,1213.42 1929.56,1213.42 1930.15,1213.42 1930.74,1213.42 1931.32,1213.42 1931.91,1213.42 1932.5,1213.42 1933.08,1213.42 1933.67,1213.42 1934.25,1213.42 1934.84,1213.42 1935.43,1213.42 1936.01,1213.42 1936.6,1213.42 1937.19,1213.42 1937.77,1213.42 1938.36,1213.42 1938.95,1213.42 1939.53,1213.42 1940.12,1213.42 1940.71,1213.42 1941.29,1213.42 1941.88,1213.42 1942.46,1213.42 1943.05,1213.42 1943.64,1213.42 1944.22,1213.42 1944.81,1213.42 1945.4,1213.42 1945.98,1213.42 1946.57,1213.42 1947.16,1213.42 1947.74,1213.42 1948.33,1213.42 1948.91,1213.42 1949.5,1213.42 1950.09,1213.42 1950.67,1213.42 1951.26,1213.42 1951.85,1213.42 1952.43,1213.42 1953.02,1213.42 1953.61,1213.42 1954.19,1213.42 1954.78,1213.42 1955.37,1213.42 1955.95,1213.42 1956.54,1213.42 1957.12,1213.42 1957.71,1213.42 1958.3,1213.42 1958.88,1213.42 1959.47,1213.42 1960.06,1213.42 1960.64,1213.42 1961.23,1213.42 1961.82,1213.42 1962.4,1213.42 1962.99,1213.42 1963.58,1213.42 1964.16,1213.42 1964.75,1213.42 1965.33,1213.42 1965.92,1213.42 1966.51,1213.42 1967.09,1213.42 1967.68,1213.42 1968.27,1213.42 1968.85,1213.42 1969.44,1213.42 1970.03,1213.42 1970.61,1213.42 1971.2,1213.42 1971.78,1213.42 1972.37,1213.42 1972.96,1213.42 1973.54,1213.42 1974.13,1213.42 1974.72,1213.42 1975.3,1213.42 1975.89,1213.42 1976.48,1213.42 1977.06,1213.42 1977.65,1213.42 1978.24,1213.42 1978.82,1213.42 1979.41,1213.42 1979.99,1213.42 1980.58,1213.42 1981.17,1213.42 1981.75,1213.42 1982.34,1213.42 1982.93,1213.42 1983.51,1213.42 1984.1,1213.42 1984.69,1213.42 1985.27,1213.42 1985.86,1213.42 1986.45,1213.42 1987.03,1213.42 1987.62,1213.42 1988.2,1213.42 1988.79,1213.42 1989.38,1213.42 1989.96,1213.42 1990.55,1213.42 1991.14,1213.42 1991.72,1213.42 1992.31,1213.42 1992.9,1213.42 1993.48,1213.42 1994.07,1213.42 1994.65,1213.42 1995.24,1213.42 1995.83,1213.42 1996.41,1213.42 1997,1213.42 1997.59,1213.42 1998.17,1213.42 1998.76,1213.42 1999.35,1213.42 1999.93,1213.42 2000.52,1213.42 2001.11,1213.42 2001.69,1213.42 2002.28,1213.42 2002.86,1213.42 2003.45,1213.42 2004.04,1213.42 2004.62,1213.42 2005.21,1213.42 2005.8,1213.42 2006.38,1213.42 2006.97,1213.42 2007.56,1213.42 2008.14,1213.42 2008.73,1213.42 2009.32,1213.42 2009.9,1213.42 2010.49,1213.42 2011.07,1213.42 2011.66,1213.42 2012.25,1213.42 2012.83,1213.42 2013.42,1213.42 2014.01,1213.42 2014.59,1213.42 2015.18,1213.42 2015.77,1213.42 2016.35,1213.42 2016.94,1213.42 2017.53,1213.42 2018.11,1213.42 2018.7,1213.42 2019.28,1213.42 2019.87,1213.42 2020.46,1213.42 2021.04,1213.42 2021.63,1213.42 2022.22,1213.42 2022.8,1213.42 2023.39,1213.42 2023.98,1213.42 2024.56,1213.42 2025.15,1213.42 2025.73,1213.42 2026.32,1213.42 2026.91,1213.42 2027.49,1213.42 2028.08,1213.42 2028.67,1213.42 2029.25,1213.42 2029.84,1213.42 2030.43,1213.42 2031.01,1213.42 2031.6,1213.42 2032.19,1213.42 2032.77,1213.42 2033.36,1213.42 2033.94,1213.42 2034.53,1213.42 2035.12,1213.42 2035.7,1213.42 2036.29,1213.42 2036.88,1213.42 2037.46,1213.42 2038.05,1213.42 2038.64,1213.42 2039.22,1213.42 2039.81,1213.42 2040.4,1213.42 2040.98,1213.42 2041.57,1213.42 2042.15,1213.42 2042.74,1213.42 2043.33,1213.42 2043.91,1213.42 2044.5,1213.42 2045.09,1213.42 2045.67,1213.42 2046.26,1213.42 2046.85,1213.42 2047.43,1213.42 2048.02,1213.42 2048.6,1213.42 2049.19,1213.42 2049.78,1213.42 2050.36,1213.42 2050.95,1213.42 2051.54,1213.42 2052.12,1213.42 2052.71,1213.42 2053.3,1213.42 2053.88,1213.42 2054.47,1213.42 2055.06,1213.42 2055.64,1213.42 2056.23,1213.42 2056.81,1213.42 2057.4,1213.42 2057.99,1213.42 2058.57,1213.42 2059.16,1213.42 2059.75,1213.42 2060.33,1213.42 2060.92,1213.42 2061.51,1213.42 2062.09,1213.42 2062.68,1213.42 2063.27,1213.42 2063.85,1213.42 2064.44,1213.42 2065.02,1213.42 2065.61,1213.42 2066.2,1213.42 2066.78,1213.42 2067.37,1213.42 2067.96,1213.42 2068.54,1213.42 2069.13,1213.42 2069.72,1213.42 2070.3,1213.42 2070.89,1213.42 2071.48,1213.42 2072.06,1213.42 2072.65,1213.42 2073.23,1213.42 2073.82,1213.42 2074.41,1213.42 2074.99,1213.42 2075.58,1213.42 2076.17,1213.42 2076.75,1213.42 2077.34,1213.42 2077.93,1213.42 2078.51,1213.42 2079.1,1213.42 2079.68,1213.42 2080.27,1213.42 2080.86,1213.42 2081.44,1213.42 2082.03,1213.42 2082.62,1213.42 2083.2,1213.42 2083.79,1213.42 2084.38,1213.42 2084.96,1213.42 2085.55,1213.42 2086.14,1213.42 2086.72,1213.42 2087.31,1213.42 2087.89,1213.42 2088.48,1213.42 2089.07,1213.42 2089.65,1213.42 2090.24,1213.42 2090.83,1213.42 2091.41,1213.42 2092,1213.42 2092.59,1213.42 2093.17,1213.42 2093.76,1213.42 2094.35,1213.42 2094.93,1213.42 2095.52,1213.42 2096.1,1213.42 2096.69,1213.42 2097.28,1213.42 2097.86,1213.42 2098.45,1213.42 2099.04,1213.42 2099.62,1213.42 2100.21,1213.42 2100.8,1213.42 2101.38,1213.42 2101.97,1213.42 2102.55,1213.42 2103.14,1213.42 2103.73,1213.42 2104.31,1213.42 2104.9,1213.42 2105.49,1213.42 2106.07,1213.42 2106.66,1213.42 2107.25,1213.42 2107.83,1213.42 2108.42,1213.42 2109.01,1213.42 2109.59,1213.42 2110.18,1213.42 2110.76,1213.42 2111.35,1213.42 2111.94,1213.42 2112.52,1213.42 2113.11,1213.42 2113.7,1213.42 2114.28,1213.42 2114.87,1213.42 2115.46,1213.42 2116.04,1213.42 2116.63,1213.42 2117.22,1213.42 2117.8,1213.42 2118.39,1213.42 2118.97,1213.42 2119.56,1213.42 2120.15,1213.42 2120.73,1213.42 2121.32,1213.42 2121.91,1213.42 2122.49,1213.42 2123.08,1213.42 2123.67,1213.42 2124.25,1213.42 2124.84,1213.42 2125.42,1213.42 2126.01,1213.42 2126.6,1213.42 2127.18,1213.42 2127.77,1213.42 2128.36,1213.42 2128.94,1213.42 2129.53,1213.42 2130.12,1213.42 2130.7,1213.42 2131.29,1213.42 2131.88,1213.42 2132.46,1213.42 2133.05,1213.42 2133.63,1213.42 2134.22,1213.42 2134.81,1213.42 2135.39,1213.42 2135.98,1213.42 2136.57,1213.42 2137.15,1213.42 2137.74,1213.42 2138.33,1213.42 2138.91,1213.42 2139.5,1213.42 2140.09,1213.42 2140.67,1213.42 2141.26,1213.42 2141.84,1213.42 2142.43,1213.42 2143.02,1213.42 2143.6,1213.42 2144.19,1213.42 2144.78,1213.42 2145.36,1213.42 2145.95,1213.42 2146.54,1213.42 2147.12,1213.42 2147.71,1213.42 2148.3,1213.42 2148.88,1213.42 2149.47,1213.42 2150.05,1213.42 2150.64,1213.42 2151.23,1213.42 2151.81,1213.42 2152.4,1213.42 2152.99,1213.42 2153.57,1213.42 2154.16,1213.42 2154.75,1213.42 2155.33,1213.42 2155.92,1213.42 2156.5,1213.42 2157.09,1213.42 2157.68,1213.42 2158.26,1213.42 \"/>\n<path clip-path=\"url(#clip322)\" d=\"M986.025 1213.17 L986.612 1213.17 L987.198 1213.17 L987.785 1213.17 L988.371 1213.17 L988.957 1213.17 L989.544 1213.17 L990.13 1213.17 L990.717 1213.17 L991.303 1213.17 L991.889 1213.17 L992.476 1213.17 L993.062 1213.17 L993.649 1213.17 L994.235 1213.17 L994.822 1213.17 L995.408 1213.17 L995.994 1213.17 L996.581 1213.17 L997.167 1213.17 L997.754 1213.17 L998.34 1213.17 L998.926 1213.17 L999.513 1213.17 L1000.1 1213.17 L1000.69 1213.17 L1001.27 1213.17 L1001.86 1213.17 L1002.44 1213.17 L1003.03 1213.17 L1003.62 1213.17 L1004.2 1213.17 L1004.79 1213.17 L1005.38 1213.17 L1005.96 1213.17 L1006.55 1213.17 L1007.14 1213.17 L1007.72 1213.17 L1008.31 1213.17 L1008.9 1213.17 L1009.48 1213.17 L1010.07 1213.17 L1010.65 1213.17 L1011.24 1213.17 L1011.83 1213.17 L1012.41 1213.17 L1013 1213.17 L1013.59 1213.17 L1014.17 1213.17 L1014.76 1213.17 L1015.35 1213.17 L1015.93 1213.17 L1016.52 1213.17 L1017.11 1213.17 L1017.69 1213.17 L1018.28 1213.17 L1018.86 1213.17 L1019.45 1213.17 L1020.04 1213.17 L1020.62 1213.17 L1021.21 1213.17 L1021.8 1213.17 L1022.38 1213.17 L1022.97 1213.17 L1023.56 1213.17 L1024.14 1213.17 L1024.73 1213.17 L1025.32 1213.17 L1025.9 1213.17 L1026.49 1213.17 L1027.07 1213.17 L1027.66 1213.17 L1028.25 1213.17 L1028.83 1213.17 L1029.42 1213.17 L1030.01 1213.17 L1030.59 1213.17 L1031.18 1213.17 L1031.77 1213.17 L1032.35 1213.17 L1032.94 1213.17 L1033.52 1213.17 L1034.11 1213.17 L1034.7 1213.17 L1035.28 1213.17 L1035.87 1213.17 L1036.46 1213.17 L1037.04 1213.17 L1037.63 1213.17 L1038.22 1213.17 L1038.8 1213.17 L1039.39 1213.17 L1039.98 1213.17 L1040.56 1213.17 L1041.15 1213.17 L1041.73 1213.17 L1042.32 1213.17 L1042.91 1213.17 L1043.49 1213.17 L1044.08 1213.17 L1044.67 1213.17 L1045.25 1213.17 L1045.84 1213.17 L1046.43 1213.17 L1047.01 1213.17 L1047.6 1213.17 L1048.19 1213.17 L1048.77 1213.17 L1049.36 1213.17 L1049.94 1213.17 L1050.53 1213.17 L1051.12 1213.17 L1051.7 1213.17 L1052.29 1213.17 L1052.88 1213.17 L1053.46 1213.17 L1054.05 1213.17 L1054.64 1213.17 L1055.22 1213.17 L1055.81 1213.17 L1056.39 1213.17 L1056.98 1213.17 L1057.57 1213.17 L1058.15 1213.17 L1058.74 1213.17 L1059.33 1213.17 L1059.91 1213.17 L1060.5 1213.17 L1061.09 1213.17 L1061.67 1213.17 L1062.26 1213.17 L1062.85 1213.17 L1063.43 1213.17 L1064.02 1213.17 L1064.6 1213.17 L1065.19 1213.17 L1065.78 1213.17 L1066.36 1213.17 L1066.95 1213.17 L1067.54 1213.17 L1068.12 1213.17 L1068.71 1213.17 L1069.3 1213.17 L1069.88 1213.17 L1070.47 1213.17 L1071.06 1213.17 L1071.64 1213.17 L1072.23 1213.17 L1072.81 1213.17 L1073.4 1213.17 L1073.99 1213.17 L1074.57 1213.17 L1075.16 1213.17 L1075.75 1213.17 L1076.33 1213.17 L1076.92 1213.17 L1077.51 1213.17 L1078.09 1213.17 L1078.68 1213.17 L1079.26 1213.17 L1079.85 1213.17 L1080.44 1213.17 L1081.02 1213.17 L1081.61 1213.17 L1082.2 1213.17 L1082.78 1213.17 L1083.37 1213.17 L1083.96 1213.17 L1084.54 1213.17 L1085.13 1213.17 L1085.72 1213.17 L1086.3 1213.17 L1086.89 1213.17 L1087.47 1213.17 L1088.06 1213.17 L1088.65 1213.17 L1089.23 1213.17 L1089.82 1213.17 L1090.41 1213.17 L1090.99 1213.17 L1091.58 1213.17 L1092.17 1213.17 L1092.75 1213.17 L1093.34 1213.17 L1093.93 1213.17 L1094.51 1213.17 L1095.1 1213.17 L1095.68 1213.17 L1096.27 1213.17 L1096.86 1213.17 L1097.44 1213.17 L1098.03 1213.17 L1098.62 1213.17 L1099.2 1213.17 L1099.79 1213.17 L1100.38 1213.17 L1100.96 1213.17 L1101.55 1213.17 L1102.14 1213.17 L1102.72 1213.17 L1103.31 1213.17 L1103.89 1213.17 L1104.48 1213.17 L1105.07 1213.17 L1105.65 1213.17 L1106.24 1213.17 L1106.83 1213.17 L1107.41 1213.17 L1108 1213.17 L1108.59 1213.17 L1109.17 1213.17 L1109.76 1213.17 L1110.34 1213.17 L1110.93 1213.17 L1111.52 1213.17 L1112.1 1213.17 L1112.69 1213.17 L1113.28 1213.17 L1113.86 1213.17 L1114.45 1213.17 L1115.04 1213.17 L1115.62 1213.17 L1116.21 1213.17 L1116.8 1213.17 L1117.38 1213.17 L1117.97 1213.17 L1118.55 1213.17 L1119.14 1213.17 L1119.73 1213.17 L1120.31 1213.17 L1120.9 1213.17 L1121.49 1213.17 L1122.07 1213.17 L1122.66 1213.17 L1123.25 1213.17 L1123.83 1213.17 L1124.42 1213.17 L1125.01 1213.17 L1125.59 1213.17 L1126.18 1213.17 L1126.76 1213.17 L1127.35 1213.17 L1127.94 1213.17 L1128.52 1213.17 L1129.11 1213.17 L1129.7 1213.17 L1130.28 1213.17 L1130.87 1213.17 L1131.46 1213.17 L1132.04 1213.17 L1132.63 1213.17 L1133.21 1213.17 L1133.8 1213.17 L1134.39 1213.17 L1134.97 1213.17 L1135.56 1213.17 L1136.15 1213.17 L1136.73 1213.17 L1137.32 1213.17 L1137.91 1213.17 L1138.49 1213.17 L1139.08 1213.17 L1139.67 1213.17 L1140.25 1213.17 L1140.84 1213.17 L1141.42 1213.17 L1142.01 1213.17 L1142.6 1213.17 L1143.18 1213.17 L1143.77 1213.17 L1144.36 1213.17 L1144.94 1213.17 L1145.53 1213.17 L1146.12 1213.17 L1146.7 1213.17 L1147.29 1213.17 L1147.88 1213.17 L1148.46 1213.17 L1149.05 1213.17 L1149.63 1213.17 L1150.22 1213.17 L1150.81 1213.17 L1151.39 1213.17 L1151.98 1213.17 L1152.57 1213.17 L1153.15 1213.17 L1153.74 1213.17 L1154.33 1213.17 L1154.91 1213.17 L1155.5 1213.17 L1156.09 1213.17 L1156.67 1213.17 L1157.26 1213.17 L1157.84 1213.17 L1158.43 1213.17 L1159.02 1213.17 L1159.6 1213.17 L1160.19 1213.17 L1160.78 1213.17 L1161.36 1213.17 L1161.95 1213.17 L1162.54 1213.17 L1163.12 1213.17 L1163.71 1213.17 L1164.29 1213.17 L1164.88 1213.17 L1165.47 1213.17 L1166.05 1213.17 L1166.64 1213.17 L1167.23 1213.17 L1167.81 1213.17 L1168.4 1213.17 L1168.99 1213.17 L1169.57 1213.17 L1170.16 1213.17 L1170.75 1213.17 L1171.33 1213.17 L1171.92 1213.17 L1172.5 1213.17 L1173.09 1213.17 L1173.68 1213.17 L1174.26 1213.17 L1174.85 1213.17 L1175.44 1213.17 L1176.02 1213.17 L1176.61 1213.17 L1177.2 1213.17 L1177.78 1213.17 L1178.37 1213.17 L1178.96 1213.17 L1179.54 1213.17 L1180.13 1213.17 L1180.71 1213.17 L1181.3 1213.17 L1181.89 1213.17 L1182.47 1213.17 L1183.06 1213.17 L1183.65 1213.17 L1184.23 1213.17 L1184.82 1213.17 L1185.41 1213.17 L1185.99 1213.17 L1186.58 1213.17 L1187.16 1213.17 L1187.75 1213.17 L1188.34 1213.17 L1188.92 1213.17 L1189.51 1213.17 L1190.1 1213.17 L1190.68 1213.17 L1191.27 1213.17 L1191.86 1213.17 L1192.44 1213.17 L1193.03 1213.17 L1193.62 1213.17 L1194.2 1213.17 L1194.79 1213.17 L1195.37 1213.17 L1195.96 1213.17 L1196.55 1213.17 L1197.13 1213.17 L1197.72 1213.17 L1198.31 1213.17 L1198.89 1213.17 L1199.48 1213.17 L1200.07 1213.17 L1200.65 1213.17 L1201.24 1213.17 L1201.83 1213.17 L1202.41 1213.17 L1203 1213.17 L1203.58 1213.17 L1204.17 1213.17 L1204.76 1213.17 L1205.34 1213.17 L1205.93 1213.17 L1206.52 1213.17 L1207.1 1213.17 L1207.69 1213.17 L1208.28 1213.17 L1208.86 1213.17 L1209.45 1213.17 L1210.03 1213.17 L1210.62 1213.17 L1211.21 1213.17 L1211.79 1213.17 L1212.38 1213.17 L1212.97 1213.17 L1213.55 1213.17 L1214.14 1213.17 L1214.73 1213.17 L1215.31 1213.17 L1215.9 1213.17 L1216.49 1213.17 L1217.07 1213.17 L1217.66 1213.17 L1218.24 1213.17 L1218.83 1213.17 L1219.42 1213.17 L1220 1213.17 L1220.59 1213.17 L1221.18 1213.17 L1221.76 1213.17 L1222.35 1213.17 L1222.94 1213.17 L1223.52 1213.17 L1224.11 1213.17 L1224.7 1213.17 L1225.28 1213.17 L1225.87 1213.17 L1226.45 1213.17 L1227.04 1213.17 L1227.63 1213.17 L1228.21 1213.17 L1228.8 1213.17 L1229.39 1213.17 L1229.97 1213.17 L1230.56 1213.17 L1231.15 1213.17 L1231.73 1213.17 L1232.32 1213.17 L1232.91 1213.17 L1233.49 1213.17 L1234.08 1213.17 L1234.66 1213.17 L1235.25 1213.17 L1235.84 1213.17 L1236.42 1213.17 L1237.01 1213.17 L1237.6 1213.17 L1238.18 1213.17 L1238.77 1213.17 L1239.36 1213.17 L1239.94 1213.17 L1240.53 1213.17 L1241.11 1213.17 L1241.7 1213.17 L1242.29 1213.17 L1242.87 1213.17 L1243.46 1213.17 L1244.05 1213.17 L1244.63 1213.17 L1245.22 1213.17 L1245.81 1213.17 L1246.39 1213.17 L1246.98 1213.17 L1247.57 1213.17 L1248.15 1213.17 L1248.74 1213.17 L1249.32 1213.17 L1249.91 1213.17 L1250.5 1213.17 L1251.08 1213.17 L1251.67 1213.17 L1252.26 1213.17 L1252.84 1213.17 L1253.43 1213.17 L1254.02 1213.17 L1254.6 1213.17 L1255.19 1213.17 L1255.78 1213.17 L1256.36 1213.17 L1256.95 1213.17 L1257.53 1213.17 L1258.12 1213.17 L1258.71 1213.17 L1259.29 1213.17 L1259.88 1213.17 L1260.47 1213.17 L1261.05 1213.17 L1261.64 1213.17 L1262.23 1213.17 L1262.81 1213.17 L1263.4 1213.17 L1263.98 1213.17 L1264.57 1213.17 L1265.16 1213.17 L1265.74 1213.17 L1266.33 1213.17 L1266.92 1213.17 L1267.5 1213.17 L1268.09 1213.17 L1268.68 1213.17 L1269.26 1213.17 L1269.85 1213.17 L1270.44 1213.17 L1271.02 1213.17 L1271.61 1213.17 L1272.19 1213.17 L1272.78 1213.17 L1273.37 1213.17 L1273.95 1213.17 L1274.54 1213.17 L1275.13 1213.17 L1275.71 1213.17 L1276.3 1213.17 L1276.89 1213.17 L1277.47 1213.17 L1278.06 1213.17 L1278.65 1213.17 L1279.23 1213.17 L1279.82 1213.17 L1280.4 1213.17 L1280.99 1213.17 L1281.58 1213.17 L1282.16 1213.17 L1282.75 1213.17 L1283.34 1213.17 L1283.92 1213.17 L1284.51 1213.17 L1285.1 1213.17 L1285.68 1213.17 L1286.27 1213.17 L1286.86 1213.17 L1287.44 1213.17 L1288.03 1213.17 L1288.61 1213.17 L1289.2 1213.17 L1289.79 1213.17 L1290.37 1213.17 L1290.96 1213.17 L1291.55 1213.17 L1292.13 1213.17 L1292.72 1213.17 L1293.31 1213.17 L1293.89 1213.17 L1294.48 1213.17 L1295.06 1213.17 L1295.65 1213.17 L1296.24 1213.17 L1296.82 1213.17 L1297.41 1213.17 L1298 1213.17 L1298.58 1213.17 L1299.17 1213.17 L1299.76 1213.17 L1300.34 1213.17 L1300.93 1213.17 L1301.52 1213.17 L1302.1 1213.17 L1302.69 1213.17 L1303.27 1213.17 L1303.86 1213.17 L1304.45 1213.17 L1305.03 1213.17 L1305.62 1213.17 L1306.21 1213.17 L1306.79 1213.17 L1307.38 1213.17 L1307.97 1213.17 L1308.55 1213.17 L1309.14 1213.17 L1309.73 1213.17 L1310.31 1213.17 L1310.9 1213.17 L1311.48 1213.17 L1312.07 1213.17 L1312.66 1213.17 L1313.24 1213.17 L1313.83 1213.17 L1314.42 1213.17 L1315 1213.17 L1315.59 1213.17 L1316.18 1213.17 L1316.76 1213.17 L1317.35 1213.17 L1317.93 1213.17 L1318.52 1213.17 L1319.11 1213.17 L1319.69 1213.17 L1320.28 1213.17 L1320.87 1213.17 L1321.45 1213.17 L1322.04 1213.17 L1322.63 1213.17 L1323.21 1213.17 L1323.8 1213.17 L1324.39 1213.17 L1324.97 1213.17 L1325.56 1213.17 L1326.14 1213.17 L1326.73 1213.17 L1327.32 1213.17 L1327.9 1213.17 L1328.49 1213.17 L1329.08 1213.17 L1329.66 1213.17 L1330.25 1213.17 L1330.84 1213.17 L1331.42 1213.17 L1332.01 1213.17 L1332.6 1213.17 L1333.18 1213.17 L1333.77 1213.17 L1334.35 1213.17 L1334.94 1213.17 L1335.53 1213.17 L1336.11 1213.17 L1336.7 1213.17 L1337.29 1213.17 L1337.87 1213.17 L1338.46 1213.17 L1339.05 1213.17 L1339.63 1213.17 L1340.22 1213.17 L1340.8 1213.17 L1341.39 1213.17 L1341.98 1213.17 L1342.56 1213.17 L1343.15 1213.17 L1343.74 1213.17 L1344.32 1213.17 L1344.91 1213.17 L1345.5 1213.17 L1346.08 1213.17 L1346.67 1213.17 L1347.26 1213.17 L1347.84 1213.17 L1348.43 1213.17 L1349.01 1213.17 L1349.6 1213.17 L1350.19 1213.17 L1350.77 1213.17 L1351.36 1213.17 L1351.95 1213.17 L1352.53 1213.17 L1353.12 1213.17 L1353.71 1213.17 L1354.29 1213.17 L1354.88 1213.17 L1355.47 1213.17 L1356.05 1213.17 L1356.64 1213.17 L1357.22 1213.17 L1357.81 1213.17 L1358.4 1213.17 L1358.98 1213.17 L1359.57 1213.17 L1360.16 1213.17 L1360.74 1213.17 L1361.33 1213.17 L1361.92 1213.17 L1362.5 1213.17 L1363.09 1213.17 L1363.68 1213.17 L1364.26 1213.17 L1364.85 1213.17 L1365.43 1213.17 L1366.02 1213.17 L1366.61 1213.17 L1367.19 1213.17 L1367.78 1213.17 L1368.37 1213.17 L1368.95 1213.17 L1369.54 1213.17 L1370.13 1213.17 L1370.71 1213.17 L1371.3 1213.17 L1371.88 1213.17 L1372.47 1213.17 L1373.06 1213.17 L1373.64 1213.17 L1374.23 1213.17 L1374.82 1213.17 L1375.4 1213.17 L1375.99 1213.17 L1376.58 1213.17 L1377.16 1213.17 L1377.75 1213.17 L1378.34 1213.17 L1378.92 1213.17 L1379.51 1213.17 L1380.09 1213.17 L1380.68 1213.17 L1381.27 1213.17 L1381.85 1213.17 L1382.44 1213.17 L1383.03 1213.17 L1383.61 1213.17 L1384.2 1213.17 L1384.79 1213.17 L1385.37 1213.17 L1385.96 1213.17 L1386.55 1213.17 L1387.13 1213.17 L1387.72 1213.17 L1388.3 1213.17 L1388.89 1213.17 L1389.48 1213.17 L1390.06 1213.17 L1390.65 1213.17 L1391.24 1213.17 L1391.82 1213.17 L1392.41 1213.17 L1393 1213.17 L1393.58 1213.17 L1394.17 1213.17 L1394.75 1213.17 L1395.34 1213.17 L1395.93 1213.17 L1396.51 1213.17 L1397.1 1213.17 L1397.69 1213.17 L1398.27 1213.17 L1398.86 1213.17 L1399.45 1213.17 L1400.03 1213.17 L1400.62 1213.17 L1401.21 1213.17 L1401.79 1213.17 L1402.38 1213.17 L1402.96 1213.17 L1403.55 1213.17 L1404.14 1213.17 L1404.72 1213.17 L1405.31 1213.17 L1405.9 1213.17 L1406.48 1213.17 L1407.07 1213.17 L1407.66 1213.17 L1408.24 1213.17 L1408.83 1213.17 L1409.42 1213.17 L1410 1213.17 L1410.59 1213.17 L1411.17 1213.17 L1411.76 1213.17 L1412.35 1213.17 L1412.93 1213.17 L1413.52 1213.17 L1414.11 1213.17 L1414.69 1213.17 L1415.28 1213.17 L1415.87 1213.17 L1416.45 1213.17 L1417.04 1213.17 L1417.63 1213.17 L1418.21 1213.17 L1418.8 1213.17 L1419.38 1213.17 L1419.97 1213.17 L1420.56 1213.17 L1421.14 1213.17 L1421.73 1213.17 L1422.32 1213.17 L1422.9 1213.17 L1423.49 1213.17 L1424.08 1213.17 L1424.66 1213.17 L1425.25 1213.17 L1425.83 1213.17 L1426.42 1213.17 L1427.01 1213.17 L1427.59 1213.17 L1428.18 1213.17 L1428.77 1213.17 L1429.35 1213.17 L1429.94 1213.17 L1430.53 1213.17 L1431.11 1213.17 L1431.7 1213.17 L1432.29 1213.17 L1432.87 1213.17 L1433.46 1213.17 L1434.04 1213.17 L1434.63 1213.17 L1435.22 1213.17 L1435.8 1213.17 L1436.39 1213.17 L1436.98 1213.17 L1437.56 1213.17 L1438.15 1213.17 L1438.74 1213.17 L1439.32 1213.17 L1439.91 1213.17 L1440.5 1213.17 L1441.08 1213.17 L1441.67 1213.17 L1442.25 1213.17 L1442.84 1213.17 L1443.43 1213.17 L1444.01 1213.17 L1444.6 1213.17 L1445.19 1213.17 L1445.77 1213.17 L1446.36 1213.17 L1446.95 1213.17 L1447.53 1213.17 L1448.12 1213.17 L1448.7 1213.17 L1449.29 1213.17 L1449.88 1213.17 L1450.46 1213.17 L1451.05 1213.17 L1451.64 1213.17 L1452.22 1213.17 L1452.81 1213.17 L1453.4 1213.17 L1453.98 1213.17 L1454.57 1213.17 L1455.16 1213.17 L1455.74 1213.17 L1456.33 1213.17 L1456.91 1213.17 L1457.5 1213.17 L1458.09 1213.17 L1458.67 1213.17 L1459.26 1213.17 L1459.85 1213.17 L1460.43 1213.17 L1461.02 1213.17 L1461.61 1213.17 L1462.19 1213.17 L1462.78 1213.17 L1463.37 1213.17 L1463.95 1213.17 L1464.54 1213.17 L1465.12 1213.17 L1465.71 1213.17 L1466.3 1213.17 L1466.88 1213.17 L1467.47 1213.17 L1468.06 1213.17 L1468.64 1213.17 L1469.23 1213.17 L1469.82 1213.17 L1470.4 1213.17 L1470.99 1213.17 L1471.57 1213.17 L1472.16 1213.17 L1472.75 1213.17 L1473.33 1213.17 L1473.92 1213.17 L1474.51 1213.17 L1475.09 1213.17 L1475.68 1213.17 L1476.27 1213.17 L1476.85 1213.17 L1477.44 1213.17 L1478.03 1213.17 L1478.61 1213.17 L1479.2 1213.17 L1479.78 1213.17 L1480.37 1213.17 L1480.96 1213.17 L1481.54 1213.17 L1482.13 1213.17 L1482.72 1213.17 L1483.3 1213.17 L1483.89 1213.17 L1484.48 1213.17 L1485.06 1213.17 L1485.65 1213.17 L1486.24 1213.17 L1486.82 1213.17 L1487.41 1213.17 L1487.99 1213.17 L1488.58 1213.17 L1489.17 1213.17 L1489.75 1213.17 L1490.34 1213.17 L1490.93 1213.17 L1491.51 1213.17 L1492.1 1213.17 L1492.69 1213.17 L1493.27 1213.17 L1493.86 1213.17 L1494.45 1213.17 L1495.03 1213.17 L1495.62 1213.17 L1496.2 1213.17 L1496.79 1213.17 L1497.38 1213.17 L1497.96 1213.17 L1498.55 1213.17 L1499.14 1213.17 L1499.72 1213.17 L1500.31 1213.17 L1500.9 1213.17 L1501.48 1213.17 L1502.07 1213.17 L1502.65 1213.17 L1503.24 1213.17 L1503.83 1213.17 L1504.41 1213.17 L1505 1213.17 L1505.59 1213.17 L1506.17 1213.17 L1506.76 1213.17 L1507.35 1213.17 L1507.93 1213.17 L1508.52 1213.17 L1509.11 1213.17 L1509.69 1213.17 L1510.28 1213.17 L1510.86 1213.17 L1511.45 1213.17 L1512.04 1213.17 L1512.62 1213.17 L1513.21 1213.17 L1513.8 1213.17 L1514.38 1213.17 L1514.97 1213.17 L1515.56 1213.17 L1516.14 1213.17 L1516.73 1213.17 L1517.32 1213.17 L1517.9 1213.17 L1518.49 1213.17 L1519.07 1213.17 L1519.66 1213.17 L1520.25 1213.17 L1520.83 1213.17 L1521.42 1213.17 L1522.01 1213.17 L1522.59 1213.17 L1523.18 1213.17 L1523.77 1213.17 L1524.35 1213.17 L1524.94 1213.17 L1525.52 1213.17 L1526.11 1213.17 L1526.7 1213.17 L1527.28 1213.17 L1527.87 1213.17 L1528.46 1213.17 L1529.04 1213.17 L1529.63 1213.17 L1530.22 1213.17 L1530.8 1213.17 L1531.39 1213.17 L1531.98 1213.17 L1532.56 1213.17 L1533.15 1213.17 L1533.73 1213.17 L1534.32 1213.17 L1534.91 1213.17 L1535.49 1213.17 L1536.08 1213.17 L1536.67 1213.17 L1537.25 1213.17 L1537.84 1213.17 L1538.43 1213.17 L1539.01 1213.17 L1539.6 1213.17 L1540.19 1213.17 L1540.77 1213.17 L1541.36 1213.17 L1541.94 1213.17 L1542.53 1213.17 L1543.12 1213.17 L1543.7 1213.17 L1544.29 1213.17 L1544.88 1213.17 L1545.46 1213.17 L1546.05 1213.17 L1546.64 1213.17 L1547.22 1213.17 L1547.81 1213.17 L1548.4 1213.17 L1548.98 1213.17 L1549.57 1213.17 L1550.15 1213.17 L1550.74 1213.17 L1551.33 1213.17 L1551.91 1213.17 L1552.5 1213.17 L1553.09 1213.17 L1553.67 1213.17 L1554.26 1213.17 L1554.85 1213.17 L1555.43 1213.17 L1556.02 1213.17 L1556.6 1213.17 L1557.19 1213.17 L1557.78 1213.17 L1558.36 1213.17 L1558.95 1213.17 L1559.54 1213.17 L1560.12 1213.17 L1560.71 1213.17 L1561.3 1213.17 L1561.88 1213.17 L1562.47 1213.17 L1563.06 1213.17 L1563.64 1213.17 L1564.23 1213.17 L1564.81 1213.17 L1565.4 1213.17 L1565.99 1213.17 L1566.57 1213.17 L1567.16 1213.17 L1567.75 1213.17 L1568.33 1213.17 L1568.92 1213.17 L1569.51 1213.17 L1570.09 1213.17 L1570.68 1213.17 L1571.27 1213.17 L1571.85 1213.17 L1572.44 1213.17 L1573.02 1213.17 L1573.61 1213.17 L1574.2 1213.17 L1574.78 1213.17 L1575.37 1213.17 L1575.96 1213.17 L1576.54 1213.17 L1577.13 1213.17 L1577.72 1213.17 L1578.3 1213.17 L1578.89 1213.17 L1579.47 1213.17 L1580.06 1213.17 L1580.65 1213.17 L1581.23 1213.17 L1581.82 1213.17 L1582.41 1213.17 L1582.99 1213.17 L1583.58 1213.17 L1584.17 1213.17 L1584.75 1213.17 L1585.34 1213.17 L1585.93 1213.17 L1586.51 1213.17 L1587.1 1213.17 L1587.68 1213.17 L1588.27 1213.17 L1588.86 1213.17 L1589.44 1213.17 L1590.03 1213.17 L1590.62 1213.17 L1591.2 1213.17 L1591.79 1213.17 L1592.38 1213.17 L1592.96 1213.17 L1593.55 1213.17 L1594.14 1213.17 L1594.72 1213.17 L1595.31 1213.17 L1595.89 1213.17 L1596.48 1213.17 L1597.07 1213.17 L1597.65 1213.17 L1598.24 1213.17 L1598.83 1213.17 L1599.41 1213.17 L1600 1213.17 L1600.59 1213.17 L1601.17 1213.17 L1601.76 1213.17 L1602.34 1213.17 L1602.93 1213.17 L1603.52 1213.17 L1604.1 1213.17 L1604.69 1213.17 L1605.28 1213.17 L1605.86 1213.17 L1606.45 1213.17 L1607.04 1213.17 L1607.62 1213.17 L1608.21 1213.17 L1608.8 1213.17 L1609.38 1213.17 L1609.97 1213.17 L1610.55 1213.17 L1611.14 1213.17 L1611.73 1213.17 L1612.31 1213.17 L1612.9 1213.17 L1613.49 1213.17 L1614.07 1213.17 L1614.66 1213.17 L1615.25 1213.17 L1615.83 1213.17 L1616.42 1213.17 L1617.01 1213.17 L1617.59 1213.17 L1618.18 1213.17 L1618.76 1213.17 L1619.35 1213.17 L1619.94 1213.17 L1620.52 1213.17 L1621.11 1213.17 L1621.7 1213.17 L1622.28 1213.17 L1622.87 1213.17 L1623.46 1213.17 L1624.04 1213.17 L1624.63 1213.17 L1625.22 1213.17 L1625.8 1213.17 L1626.39 1213.17 L1626.97 1213.17 L1627.56 1213.17 L1628.15 1213.17 L1628.73 1213.17 L1629.32 1213.17 L1629.91 1213.17 L1630.49 1213.17 L1631.08 1213.17 L1631.67 1213.17 L1632.25 1213.17 L1632.84 1213.17 L1633.42 1213.17 L1634.01 1213.17 L1634.6 1213.17 L1635.18 1213.17 L1635.77 1213.17 L1636.36 1213.17 L1636.94 1213.17 L1637.53 1213.17 L1638.12 1213.17 L1638.7 1213.17 L1639.29 1213.17 L1639.88 1213.17 L1640.46 1213.17 L1641.05 1213.17 L1641.63 1213.17 L1642.22 1213.17 L1642.81 1213.17 L1643.39 1213.17 L1643.98 1213.17 L1644.57 1213.17 L1645.15 1213.17 L1645.74 1213.17 L1646.33 1213.17 L1646.91 1213.17 L1647.5 1213.17 L1648.09 1213.17 L1648.67 1213.17 L1649.26 1213.17 L1649.84 1213.17 L1650.43 1213.17 L1651.02 1213.17 L1651.6 1213.17 L1652.19 1213.17 L1652.78 1213.17 L1653.36 1213.17 L1653.95 1213.17 L1654.54 1213.17 L1655.12 1213.17 L1655.71 1213.17 L1656.29 1213.17 L1656.88 1213.17 L1657.47 1213.17 L1658.05 1213.17 L1658.64 1213.17 L1659.23 1213.17 L1659.81 1213.17 L1660.4 1213.17 L1660.99 1213.17 L1661.57 1213.17 L1662.16 1213.17 L1662.75 1213.17 L1663.33 1213.17 L1663.92 1213.17 L1664.5 1213.17 L1665.09 1213.17 L1665.68 1213.17 L1666.26 1213.17 L1666.85 1213.17 L1667.44 1213.17 L1668.02 1213.17 L1668.61 1213.17 L1669.2 1213.17 L1669.78 1213.17 L1670.37 1213.17 L1670.96 1213.17 L1671.54 1213.17 L1672.13 1213.17 L1672.71 1213.17 L1673.3 1213.17 L1673.89 1213.17 L1674.47 1213.17 L1675.06 1213.17 L1675.65 1213.17 L1676.23 1213.17 L1676.82 1213.17 L1677.41 1213.17 L1677.99 1213.17 L1678.58 1213.17 L1679.17 1213.17 L1679.75 1213.17 L1680.34 1213.17 L1680.92 1213.17 L1681.51 1213.17 L1682.1 1213.17 L1682.68 1213.17 L1683.27 1213.17 L1683.86 1213.17 L1684.44 1213.17 L1685.03 1213.17 L1685.62 1213.17 L1686.2 1213.17 L1686.79 1213.17 L1687.37 1213.17 L1687.96 1213.17 L1688.55 1213.17 L1689.13 1213.17 L1689.72 1213.17 L1690.31 1213.17 L1690.89 1213.17 L1691.48 1213.17 L1692.07 1213.17 L1692.65 1213.17 L1693.24 1213.17 L1693.83 1213.17 L1694.41 1213.17 L1695 1213.17 L1695.58 1213.17 L1696.17 1213.17 L1696.76 1213.17 L1697.34 1213.17 L1697.93 1213.17 L1698.52 1213.17 L1699.1 1213.17 L1699.69 1213.17 L1700.28 1213.17 L1700.86 1213.17 L1701.45 1213.17 L1702.04 1213.17 L1702.62 1213.17 L1703.21 1213.17 L1703.79 1213.17 L1704.38 1213.17 L1704.97 1213.17 L1705.55 1213.17 L1706.14 1213.17 L1706.73 1213.17 L1707.31 1213.17 L1707.9 1213.17 L1708.49 1213.17 L1709.07 1213.17 L1709.66 1213.17 L1710.24 1213.17 L1710.83 1213.17 L1711.42 1213.17 L1712 1213.17 L1712.59 1213.17 L1713.18 1213.17 L1713.76 1213.17 L1714.35 1213.17 L1714.94 1213.17 L1715.52 1213.17 L1716.11 1213.17 L1716.7 1213.17 L1717.28 1213.17 L1717.87 1213.17 L1718.45 1213.17 L1719.04 1213.17 L1719.63 1213.17 L1720.21 1213.17 L1720.8 1213.17 L1721.39 1213.17 L1721.97 1213.17 L1722.56 1213.17 L1723.15 1213.17 L1723.73 1213.17 L1724.32 1213.17 L1724.91 1213.17 L1725.49 1213.17 L1726.08 1213.17 L1726.66 1213.17 L1727.25 1213.17 L1727.84 1213.17 L1728.42 1213.17 L1729.01 1213.17 L1729.6 1213.17 L1730.18 1213.17 L1730.77 1213.17 L1731.36 1213.17 L1731.94 1213.17 L1732.53 1213.17 L1733.11 1213.17 L1733.7 1213.17 L1734.29 1213.17 L1734.87 1213.17 L1735.46 1213.17 L1736.05 1213.17 L1736.63 1213.17 L1737.22 1213.17 L1737.81 1213.17 L1738.39 1213.17 L1738.98 1213.17 L1739.57 1213.17 L1740.15 1213.17 L1740.74 1213.17 L1741.32 1213.17 L1741.91 1213.17 L1742.5 1213.17 L1743.08 1213.17 L1743.67 1213.17 L1744.26 1213.17 L1744.84 1213.17 L1745.43 1213.17 L1746.02 1213.17 L1746.6 1213.17 L1747.19 1213.17 L1747.78 1213.17 L1748.36 1213.17 L1748.95 1213.17 L1749.53 1213.17 L1750.12 1213.17 L1750.71 1213.17 L1751.29 1213.17 L1751.88 1213.17 L1752.47 1213.17 L1753.05 1213.17 L1753.64 1213.17 L1754.23 1213.17 L1754.81 1213.17 L1755.4 1213.17 L1755.99 1213.17 L1756.57 1213.17 L1757.16 1213.17 L1757.74 1213.17 L1758.33 1213.17 L1758.92 1213.17 L1759.5 1213.17 L1760.09 1213.17 L1760.68 1213.17 L1761.26 1213.17 L1761.85 1213.17 L1762.44 1213.17 L1763.02 1213.17 L1763.61 1213.17 L1764.19 1213.17 L1764.78 1213.17 L1765.37 1213.17 L1765.95 1213.17 L1766.54 1213.17 L1767.13 1213.17 L1767.71 1213.17 L1768.3 1213.17 L1768.89 1213.17 L1769.47 1213.17 L1770.06 1213.17 L1770.65 1213.17 L1771.23 1213.17 L1771.82 1213.17 L1772.4 1213.17 L1772.99 1213.17 L1773.58 1213.17 L1774.16 1213.17 L1774.75 1213.17 L1775.34 1213.17 L1775.92 1213.17 L1776.51 1213.17 L1777.1 1213.17 L1777.68 1213.17 L1778.27 1213.17 L1778.86 1213.17 L1779.44 1213.17 L1780.03 1213.17 L1780.61 1213.17 L1781.2 1213.17 L1781.79 1213.17 L1782.37 1213.17 L1782.96 1213.17 L1783.55 1213.17 L1784.13 1213.17 L1784.72 1213.17 L1785.31 1213.17 L1785.89 1213.17 L1786.48 1213.17 L1787.06 1213.17 L1787.65 1213.17 L1788.24 1213.17 L1788.82 1213.17 L1789.41 1213.17 L1790 1213.17 L1790.58 1213.17 L1791.17 1213.17 L1791.76 1213.17 L1792.34 1213.17 L1792.93 1213.17 L1793.52 1213.17 L1794.1 1213.17 L1794.69 1213.17 L1795.27 1213.17 L1795.86 1213.17 L1796.45 1213.17 L1797.03 1213.17 L1797.62 1213.17 L1798.21 1213.17 L1798.79 1213.17 L1799.38 1213.17 L1799.97 1213.17 L1800.55 1213.17 L1801.14 1213.17 L1801.73 1213.17 L1802.31 1213.17 L1802.9 1213.17 L1803.48 1213.17 L1804.07 1213.17 L1804.66 1213.17 L1805.24 1213.17 L1805.83 1213.17 L1806.42 1213.17 L1807 1213.17 L1807.59 1213.17 L1808.18 1213.17 L1808.76 1213.17 L1809.35 1213.17 L1809.94 1213.17 L1810.52 1213.17 L1811.11 1213.17 L1811.69 1213.17 L1812.28 1213.17 L1812.87 1213.17 L1813.45 1213.17 L1814.04 1213.17 L1814.63 1213.17 L1815.21 1213.17 L1815.8 1213.17 L1816.39 1213.17 L1816.97 1213.17 L1817.56 1213.17 L1818.14 1213.17 L1818.73 1213.17 L1819.32 1213.17 L1819.9 1213.17 L1820.49 1213.17 L1821.08 1213.17 L1821.66 1213.17 L1822.25 1213.17 L1822.84 1213.17 L1823.42 1213.17 L1824.01 1213.17 L1824.6 1213.17 L1825.18 1213.17 L1825.77 1213.17 L1826.35 1213.17 L1826.94 1213.17 L1827.53 1213.17 L1828.11 1213.17 L1828.7 1213.17 L1829.29 1213.17 L1829.87 1213.17 L1830.46 1213.17 L1831.05 1213.17 L1831.63 1213.17 L1832.22 1213.17 L1832.81 1213.17 L1833.39 1213.17 L1833.98 1213.17 L1834.56 1213.17 L1835.15 1213.17 L1835.74 1213.17 L1836.32 1213.17 L1836.91 1213.17 L1837.5 1213.17 L1838.08 1213.17 L1838.67 1213.17 L1839.26 1213.17 L1839.84 1213.17 L1840.43 1213.17 L1841.01 1213.17 L1841.6 1213.17 L1842.19 1213.17 L1842.77 1213.17 L1843.36 1213.17 L1843.95 1213.17 L1844.53 1213.17 L1845.12 1213.17 L1845.71 1213.17 L1846.29 1213.17 L1846.88 1213.17 L1847.47 1213.17 L1848.05 1213.17 L1848.64 1213.17 L1849.22 1213.17 L1849.81 1213.17 L1850.4 1213.17 L1850.98 1213.17 L1851.57 1213.17 L1852.16 1213.17 L1852.74 1213.17 L1853.33 1213.17 L1853.92 1213.17 L1854.5 1213.17 L1855.09 1213.17 L1855.68 1213.17 L1856.26 1213.17 L1856.85 1213.17 L1857.43 1213.17 L1858.02 1213.17 L1858.61 1213.17 L1859.19 1213.17 L1859.78 1213.17 L1860.37 1213.17 L1860.95 1213.17 L1861.54 1213.17 L1862.13 1213.17 L1862.71 1213.17 L1863.3 1213.17 L1863.88 1213.17 L1864.47 1213.17 L1865.06 1213.17 L1865.64 1213.17 L1866.23 1213.17 L1866.82 1213.17 L1867.4 1213.17 L1867.99 1213.17 L1868.58 1213.17 L1869.16 1213.17 L1869.75 1213.17 L1870.34 1213.17 L1870.92 1213.17 L1871.51 1213.17 L1872.09 1213.17 L1872.68 1213.17 L1873.27 1213.17 L1873.85 1213.17 L1874.44 1213.17 L1875.03 1213.17 L1875.61 1213.17 L1876.2 1213.17 L1876.79 1213.17 L1877.37 1213.17 L1877.96 1213.17 L1878.55 1213.17 L1879.13 1213.17 L1879.72 1213.17 L1880.3 1213.17 L1880.89 1213.17 L1881.48 1213.17 L1882.06 1213.17 L1882.65 1213.17 L1883.24 1213.17 L1883.82 1213.17 L1884.41 1213.17 L1885 1213.17 L1885.58 1213.17 L1886.17 1213.17 L1886.76 1213.17 L1887.34 1213.17 L1887.93 1213.17 L1888.51 1213.17 L1889.1 1213.17 L1889.69 1213.17 L1890.27 1213.17 L1890.86 1213.17 L1891.45 1213.17 L1892.03 1213.17 L1892.62 1213.17 L1893.21 1213.17 L1893.79 1213.17 L1894.38 1213.17 L1894.96 1213.17 L1895.55 1213.17 L1896.14 1213.17 L1896.72 1213.17 L1897.31 1213.17 L1897.9 1213.17 L1898.48 1213.17 L1899.07 1213.17 L1899.66 1213.17 L1900.24 1213.17 L1900.83 1213.17 L1901.42 1213.17 L1902 1213.17 L1902.59 1213.17 L1903.17 1213.17 L1903.76 1213.17 L1904.35 1213.17 L1904.93 1213.17 L1905.52 1213.17 L1906.11 1213.17 L1906.69 1213.17 L1907.28 1213.17 L1907.87 1213.17 L1908.45 1213.17 L1909.04 1213.17 L1909.63 1213.17 L1910.21 1213.17 L1910.8 1213.17 L1911.38 1213.17 L1911.97 1213.17 L1912.56 1213.17 L1913.14 1213.17 L1913.73 1213.17 L1914.32 1213.17 L1914.9 1213.17 L1915.49 1213.17 L1916.08 1213.17 L1916.66 1213.17 L1917.25 1213.17 L1917.83 1213.17 L1918.42 1213.17 L1919.01 1213.17 L1919.59 1213.17 L1920.18 1213.17 L1920.77 1213.17 L1921.35 1213.17 L1921.94 1213.17 L1922.53 1213.17 L1923.11 1213.17 L1923.7 1213.17 L1924.29 1213.17 L1924.87 1213.17 L1925.46 1213.17 L1926.04 1213.17 L1926.63 1213.17 L1927.22 1213.17 L1927.8 1213.17 L1928.39 1213.17 L1928.98 1213.17 L1929.56 1213.17 L1930.15 1213.17 L1930.74 1213.17 L1931.32 1213.17 L1931.91 1213.17 L1932.5 1213.17 L1933.08 1213.17 L1933.67 1213.17 L1934.25 1213.17 L1934.84 1213.17 L1935.43 1213.17 L1936.01 1213.17 L1936.6 1213.17 L1937.19 1213.17 L1937.77 1213.17 L1938.36 1213.17 L1938.95 1213.17 L1939.53 1213.17 L1940.12 1213.17 L1940.71 1213.17 L1941.29 1213.17 L1941.88 1213.17 L1942.46 1213.17 L1943.05 1213.17 L1943.64 1213.17 L1944.22 1213.17 L1944.81 1213.17 L1945.4 1213.17 L1945.98 1213.17 L1946.57 1213.17 L1947.16 1213.17 L1947.74 1213.17 L1948.33 1213.17 L1948.91 1213.17 L1949.5 1213.17 L1950.09 1213.17 L1950.67 1213.17 L1951.26 1213.17 L1951.85 1213.17 L1952.43 1213.17 L1953.02 1213.17 L1953.61 1213.17 L1954.19 1213.17 L1954.78 1213.17 L1955.37 1213.17 L1955.95 1213.17 L1956.54 1213.17 L1957.12 1213.17 L1957.71 1213.17 L1958.3 1213.17 L1958.88 1213.17 L1959.47 1213.17 L1960.06 1213.17 L1960.64 1213.17 L1961.23 1213.17 L1961.82 1213.17 L1962.4 1213.17 L1962.99 1213.17 L1963.58 1213.17 L1964.16 1213.17 L1964.75 1213.17 L1965.33 1213.17 L1965.92 1213.17 L1966.51 1213.17 L1967.09 1213.17 L1967.68 1213.17 L1968.27 1213.17 L1968.85 1213.17 L1969.44 1213.17 L1970.03 1213.17 L1970.61 1213.17 L1971.2 1213.17 L1971.78 1213.17 L1972.37 1213.17 L1972.96 1213.17 L1973.54 1213.17 L1974.13 1213.17 L1974.72 1213.17 L1975.3 1213.17 L1975.89 1213.17 L1976.48 1213.17 L1977.06 1213.17 L1977.65 1213.17 L1978.24 1213.17 L1978.82 1213.17 L1979.41 1213.17 L1979.99 1213.17 L1980.58 1213.17 L1981.17 1213.17 L1981.75 1213.17 L1982.34 1213.17 L1982.93 1213.17 L1983.51 1213.17 L1984.1 1213.17 L1984.69 1213.17 L1985.27 1213.17 L1985.86 1213.17 L1986.45 1213.17 L1987.03 1213.17 L1987.62 1213.17 L1988.2 1213.17 L1988.79 1213.17 L1989.38 1213.17 L1989.96 1213.17 L1990.55 1213.17 L1991.14 1213.17 L1991.72 1213.17 L1992.31 1213.17 L1992.9 1213.17 L1993.48 1213.17 L1994.07 1213.17 L1994.65 1213.17 L1995.24 1213.17 L1995.83 1213.17 L1996.41 1213.17 L1997 1213.17 L1997.59 1213.17 L1998.17 1213.17 L1998.76 1213.17 L1999.35 1213.17 L1999.93 1213.17 L2000.52 1213.17 L2001.11 1213.17 L2001.69 1213.17 L2002.28 1213.17 L2002.86 1213.17 L2003.45 1213.17 L2004.04 1213.17 L2004.62 1213.17 L2005.21 1213.17 L2005.8 1213.17 L2006.38 1213.17 L2006.97 1213.17 L2007.56 1213.17 L2008.14 1213.17 L2008.73 1213.17 L2009.32 1213.17 L2009.9 1213.17 L2010.49 1213.17 L2011.07 1213.17 L2011.66 1213.17 L2012.25 1213.17 L2012.83 1213.17 L2013.42 1213.17 L2014.01 1213.17 L2014.59 1213.17 L2015.18 1213.17 L2015.77 1213.17 L2016.35 1213.17 L2016.94 1213.17 L2017.53 1213.17 L2018.11 1213.17 L2018.7 1213.17 L2019.28 1213.17 L2019.87 1213.17 L2020.46 1213.17 L2021.04 1213.17 L2021.63 1213.17 L2022.22 1213.17 L2022.8 1213.17 L2023.39 1213.17 L2023.98 1213.17 L2024.56 1213.17 L2025.15 1213.17 L2025.73 1213.17 L2026.32 1213.17 L2026.91 1213.17 L2027.49 1213.17 L2028.08 1213.17 L2028.67 1213.17 L2029.25 1213.17 L2029.84 1213.17 L2030.43 1213.17 L2031.01 1213.17 L2031.6 1213.17 L2032.19 1213.17 L2032.77 1213.17 L2033.36 1213.17 L2033.94 1213.17 L2034.53 1213.17 L2035.12 1213.17 L2035.7 1213.17 L2036.29 1213.17 L2036.88 1213.17 L2037.46 1213.17 L2038.05 1213.17 L2038.64 1213.17 L2039.22 1213.17 L2039.81 1213.17 L2040.4 1213.17 L2040.98 1213.17 L2041.57 1213.17 L2042.15 1213.17 L2042.74 1213.17 L2043.33 1213.17 L2043.91 1213.17 L2044.5 1213.17 L2045.09 1213.17 L2045.67 1213.17 L2046.26 1213.17 L2046.85 1213.17 L2047.43 1213.17 L2048.02 1213.17 L2048.6 1213.17 L2049.19 1213.17 L2049.78 1213.17 L2050.36 1213.17 L2050.95 1213.17 L2051.54 1213.17 L2052.12 1213.17 L2052.71 1213.17 L2053.3 1213.17 L2053.88 1213.17 L2054.47 1213.17 L2055.06 1213.17 L2055.64 1213.17 L2056.23 1213.17 L2056.81 1213.17 L2057.4 1213.17 L2057.99 1213.17 L2058.57 1213.17 L2059.16 1213.17 L2059.75 1213.17 L2060.33 1213.17 L2060.92 1213.17 L2061.51 1213.17 L2062.09 1213.17 L2062.68 1213.17 L2063.27 1213.17 L2063.85 1213.17 L2064.44 1213.17 L2065.02 1213.17 L2065.61 1213.17 L2066.2 1213.17 L2066.78 1213.17 L2067.37 1213.17 L2067.96 1213.17 L2068.54 1213.17 L2069.13 1213.17 L2069.72 1213.17 L2070.3 1213.17 L2070.89 1213.17 L2071.48 1213.17 L2072.06 1213.17 L2072.65 1213.17 L2073.23 1213.17 L2073.82 1213.17 L2074.41 1213.17 L2074.99 1213.17 L2075.58 1213.17 L2076.17 1213.17 L2076.75 1213.17 L2077.34 1213.17 L2077.93 1213.17 L2078.51 1213.17 L2079.1 1213.17 L2079.68 1213.17 L2080.27 1213.17 L2080.86 1213.17 L2081.44 1213.17 L2082.03 1213.17 L2082.62 1213.17 L2083.2 1213.17 L2083.79 1213.17 L2084.38 1213.17 L2084.96 1213.17 L2085.55 1213.17 L2086.14 1213.17 L2086.72 1213.17 L2087.31 1213.17 L2087.89 1213.17 L2088.48 1213.17 L2089.07 1213.17 L2089.65 1213.17 L2090.24 1213.17 L2090.83 1213.17 L2091.41 1213.17 L2092 1213.17 L2092.59 1213.17 L2093.17 1213.17 L2093.76 1213.17 L2094.35 1213.17 L2094.93 1213.17 L2095.52 1213.17 L2096.1 1213.17 L2096.69 1213.17 L2097.28 1213.17 L2097.86 1213.17 L2098.45 1213.17 L2099.04 1213.17 L2099.62 1213.17 L2100.21 1213.17 L2100.8 1213.17 L2101.38 1213.17 L2101.97 1213.17 L2102.55 1213.17 L2103.14 1213.17 L2103.73 1213.17 L2104.31 1213.17 L2104.9 1213.17 L2105.49 1213.17 L2106.07 1213.17 L2106.66 1213.17 L2107.25 1213.17 L2107.83 1213.17 L2108.42 1213.17 L2109.01 1213.17 L2109.59 1213.17 L2110.18 1213.17 L2110.76 1213.17 L2111.35 1213.17 L2111.94 1213.17 L2112.52 1213.17 L2113.11 1213.17 L2113.7 1213.17 L2114.28 1213.17 L2114.87 1213.17 L2115.46 1213.17 L2116.04 1213.17 L2116.63 1213.17 L2117.22 1213.17 L2117.8 1213.17 L2118.39 1213.17 L2118.97 1213.17 L2119.56 1213.17 L2120.15 1213.17 L2120.73 1213.17 L2121.32 1213.17 L2121.91 1213.17 L2122.49 1213.17 L2123.08 1213.17 L2123.67 1213.17 L2124.25 1213.17 L2124.84 1213.17 L2125.42 1213.17 L2126.01 1213.17 L2126.6 1213.17 L2127.18 1213.17 L2127.77 1213.17 L2128.36 1213.17 L2128.94 1213.17 L2129.53 1213.17 L2130.12 1213.17 L2130.7 1213.17 L2131.29 1213.17 L2131.88 1213.17 L2132.46 1213.17 L2133.05 1213.17 L2133.63 1213.17 L2134.22 1213.17 L2134.81 1213.17 L2135.39 1213.17 L2135.98 1213.17 L2136.57 1213.17 L2137.15 1213.17 L2137.74 1213.17 L2138.33 1213.17 L2138.91 1213.17 L2139.5 1213.17 L2140.09 1213.17 L2140.67 1213.17 L2141.26 1213.17 L2141.84 1213.17 L2142.43 1213.17 L2143.02 1213.17 L2143.6 1213.17 L2144.19 1213.17 L2144.78 1213.17 L2145.36 1213.17 L2145.95 1213.17 L2146.54 1213.17 L2147.12 1213.17 L2147.71 1213.17 L2148.3 1213.17 L2148.88 1213.17 L2149.47 1213.17 L2150.05 1213.17 L2150.64 1213.17 L2151.23 1213.17 L2151.81 1213.17 L2152.4 1213.17 L2152.99 1213.17 L2153.57 1213.17 L2154.16 1213.17 L2154.75 1213.17 L2155.33 1213.17 L2155.92 1213.17 L2156.5 1213.17 L2157.09 1213.17 L2157.68 1213.17 L2158.26 1213.17 L2158.26 1213.03 L2157.68 1213.03 L2157.09 1213.03 L2156.5 1213.03 L2155.92 1213.03 L2155.33 1213.03 L2154.75 1213.03 L2154.16 1213.03 L2153.57 1213.03 L2152.99 1213.03 L2152.4 1213.03 L2151.81 1213.03 L2151.23 1213.03 L2150.64 1213.03 L2150.05 1213.03 L2149.47 1213.03 L2148.88 1213.03 L2148.3 1213.03 L2147.71 1213.03 L2147.12 1213.03 L2146.54 1213.03 L2145.95 1213.03 L2145.36 1213.03 L2144.78 1213.03 L2144.19 1213.03 L2143.6 1213.03 L2143.02 1213.03 L2142.43 1213.03 L2141.84 1213.03 L2141.26 1213.03 L2140.67 1213.03 L2140.09 1213.03 L2139.5 1213.03 L2138.91 1213.03 L2138.33 1213.03 L2137.74 1213.03 L2137.15 1213.03 L2136.57 1213.03 L2135.98 1213.03 L2135.39 1213.03 L2134.81 1213.03 L2134.22 1213.03 L2133.63 1213.03 L2133.05 1213.03 L2132.46 1213.03 L2131.88 1213.03 L2131.29 1213.03 L2130.7 1213.03 L2130.12 1213.03 L2129.53 1213.03 L2128.94 1213.03 L2128.36 1213.03 L2127.77 1213.03 L2127.18 1213.03 L2126.6 1213.03 L2126.01 1213.03 L2125.42 1213.03 L2124.84 1213.03 L2124.25 1213.03 L2123.67 1213.03 L2123.08 1213.03 L2122.49 1213.03 L2121.91 1213.03 L2121.32 1213.03 L2120.73 1213.03 L2120.15 1213.03 L2119.56 1213.03 L2118.97 1213.03 L2118.39 1213.03 L2117.8 1213.03 L2117.22 1213.03 L2116.63 1213.03 L2116.04 1213.03 L2115.46 1213.03 L2114.87 1213.03 L2114.28 1213.03 L2113.7 1213.03 L2113.11 1213.03 L2112.52 1213.03 L2111.94 1213.03 L2111.35 1213.03 L2110.76 1213.03 L2110.18 1213.03 L2109.59 1213.03 L2109.01 1213.03 L2108.42 1213.03 L2107.83 1213.03 L2107.25 1213.03 L2106.66 1213.03 L2106.07 1213.03 L2105.49 1213.03 L2104.9 1213.03 L2104.31 1213.03 L2103.73 1213.03 L2103.14 1213.03 L2102.55 1213.03 L2101.97 1213.03 L2101.38 1213.03 L2100.8 1213.03 L2100.21 1213.03 L2099.62 1213.03 L2099.04 1213.03 L2098.45 1213.03 L2097.86 1213.03 L2097.28 1213.03 L2096.69 1213.03 L2096.1 1213.03 L2095.52 1213.03 L2094.93 1213.03 L2094.35 1213.03 L2093.76 1213.03 L2093.17 1213.03 L2092.59 1213.03 L2092 1213.03 L2091.41 1213.03 L2090.83 1213.03 L2090.24 1213.03 L2089.65 1213.03 L2089.07 1213.03 L2088.48 1213.03 L2087.89 1213.03 L2087.31 1213.03 L2086.72 1213.03 L2086.14 1213.03 L2085.55 1213.03 L2084.96 1213.03 L2084.38 1213.03 L2083.79 1213.03 L2083.2 1213.03 L2082.62 1213.03 L2082.03 1213.03 L2081.44 1213.03 L2080.86 1213.03 L2080.27 1213.03 L2079.68 1213.03 L2079.1 1213.03 L2078.51 1213.03 L2077.93 1213.03 L2077.34 1213.03 L2076.75 1213.03 L2076.17 1213.03 L2075.58 1213.03 L2074.99 1213.03 L2074.41 1213.03 L2073.82 1213.03 L2073.23 1213.03 L2072.65 1213.03 L2072.06 1213.03 L2071.48 1213.03 L2070.89 1213.03 L2070.3 1213.03 L2069.72 1213.03 L2069.13 1213.03 L2068.54 1213.03 L2067.96 1213.03 L2067.37 1213.03 L2066.78 1213.03 L2066.2 1213.03 L2065.61 1213.03 L2065.02 1213.03 L2064.44 1213.03 L2063.85 1213.03 L2063.27 1213.03 L2062.68 1213.03 L2062.09 1213.03 L2061.51 1213.03 L2060.92 1213.03 L2060.33 1213.03 L2059.75 1213.03 L2059.16 1213.03 L2058.57 1213.03 L2057.99 1213.03 L2057.4 1213.03 L2056.81 1213.03 L2056.23 1213.03 L2055.64 1213.03 L2055.06 1213.03 L2054.47 1213.03 L2053.88 1213.03 L2053.3 1213.03 L2052.71 1213.03 L2052.12 1213.03 L2051.54 1213.03 L2050.95 1213.03 L2050.36 1213.03 L2049.78 1213.03 L2049.19 1213.03 L2048.6 1213.03 L2048.02 1213.03 L2047.43 1213.03 L2046.85 1213.03 L2046.26 1213.03 L2045.67 1213.03 L2045.09 1213.03 L2044.5 1213.03 L2043.91 1213.03 L2043.33 1213.03 L2042.74 1213.03 L2042.15 1213.03 L2041.57 1213.03 L2040.98 1213.03 L2040.4 1213.03 L2039.81 1213.03 L2039.22 1213.03 L2038.64 1213.03 L2038.05 1213.03 L2037.46 1213.03 L2036.88 1213.03 L2036.29 1213.03 L2035.7 1213.03 L2035.12 1213.03 L2034.53 1213.03 L2033.94 1213.03 L2033.36 1213.03 L2032.77 1213.03 L2032.19 1213.03 L2031.6 1213.03 L2031.01 1213.03 L2030.43 1213.03 L2029.84 1213.03 L2029.25 1213.03 L2028.67 1213.03 L2028.08 1213.03 L2027.49 1213.03 L2026.91 1213.03 L2026.32 1213.03 L2025.73 1213.03 L2025.15 1213.03 L2024.56 1213.03 L2023.98 1213.03 L2023.39 1213.03 L2022.8 1213.03 L2022.22 1213.03 L2021.63 1213.03 L2021.04 1213.03 L2020.46 1213.03 L2019.87 1213.03 L2019.28 1213.03 L2018.7 1213.03 L2018.11 1213.03 L2017.53 1213.03 L2016.94 1213.03 L2016.35 1213.03 L2015.77 1213.03 L2015.18 1213.03 L2014.59 1213.03 L2014.01 1213.03 L2013.42 1213.03 L2012.83 1213.03 L2012.25 1213.03 L2011.66 1213.03 L2011.07 1213.03 L2010.49 1213.03 L2009.9 1213.03 L2009.32 1213.03 L2008.73 1213.03 L2008.14 1213.03 L2007.56 1213.03 L2006.97 1213.03 L2006.38 1213.03 L2005.8 1213.03 L2005.21 1213.03 L2004.62 1213.03 L2004.04 1213.03 L2003.45 1213.03 L2002.86 1213.03 L2002.28 1213.03 L2001.69 1213.03 L2001.11 1213.03 L2000.52 1213.03 L1999.93 1213.03 L1999.35 1213.03 L1998.76 1213.03 L1998.17 1213.03 L1997.59 1213.03 L1997 1213.03 L1996.41 1213.03 L1995.83 1213.03 L1995.24 1213.03 L1994.65 1213.03 L1994.07 1213.03 L1993.48 1213.03 L1992.9 1213.03 L1992.31 1213.03 L1991.72 1213.03 L1991.14 1213.03 L1990.55 1213.03 L1989.96 1213.03 L1989.38 1213.03 L1988.79 1213.03 L1988.2 1213.03 L1987.62 1213.03 L1987.03 1213.03 L1986.45 1213.03 L1985.86 1213.03 L1985.27 1213.03 L1984.69 1213.03 L1984.1 1213.03 L1983.51 1213.03 L1982.93 1213.03 L1982.34 1213.03 L1981.75 1213.03 L1981.17 1213.03 L1980.58 1213.03 L1979.99 1213.03 L1979.41 1213.03 L1978.82 1213.03 L1978.24 1213.03 L1977.65 1213.03 L1977.06 1213.03 L1976.48 1213.03 L1975.89 1213.03 L1975.3 1213.03 L1974.72 1213.03 L1974.13 1213.03 L1973.54 1213.03 L1972.96 1213.03 L1972.37 1213.03 L1971.78 1213.03 L1971.2 1213.03 L1970.61 1213.03 L1970.03 1213.03 L1969.44 1213.03 L1968.85 1213.03 L1968.27 1213.03 L1967.68 1213.03 L1967.09 1213.03 L1966.51 1213.03 L1965.92 1213.03 L1965.33 1213.03 L1964.75 1213.03 L1964.16 1213.03 L1963.58 1213.03 L1962.99 1213.03 L1962.4 1213.03 L1961.82 1213.03 L1961.23 1213.03 L1960.64 1213.03 L1960.06 1213.03 L1959.47 1213.03 L1958.88 1213.03 L1958.3 1213.03 L1957.71 1213.03 L1957.12 1213.03 L1956.54 1213.03 L1955.95 1213.03 L1955.37 1213.03 L1954.78 1213.03 L1954.19 1213.03 L1953.61 1213.03 L1953.02 1213.03 L1952.43 1213.03 L1951.85 1213.03 L1951.26 1213.03 L1950.67 1213.03 L1950.09 1213.03 L1949.5 1213.03 L1948.91 1213.03 L1948.33 1213.03 L1947.74 1213.03 L1947.16 1213.03 L1946.57 1213.03 L1945.98 1213.03 L1945.4 1213.03 L1944.81 1213.03 L1944.22 1213.03 L1943.64 1213.03 L1943.05 1213.03 L1942.46 1213.03 L1941.88 1213.03 L1941.29 1213.03 L1940.71 1213.03 L1940.12 1213.03 L1939.53 1213.03 L1938.95 1213.03 L1938.36 1213.03 L1937.77 1213.03 L1937.19 1213.03 L1936.6 1213.03 L1936.01 1213.03 L1935.43 1213.03 L1934.84 1213.03 L1934.25 1213.03 L1933.67 1213.03 L1933.08 1213.03 L1932.5 1213.03 L1931.91 1213.03 L1931.32 1213.03 L1930.74 1213.03 L1930.15 1213.03 L1929.56 1213.03 L1928.98 1213.03 L1928.39 1213.03 L1927.8 1213.03 L1927.22 1213.03 L1926.63 1213.03 L1926.04 1213.03 L1925.46 1213.03 L1924.87 1213.03 L1924.29 1213.03 L1923.7 1213.03 L1923.11 1213.03 L1922.53 1213.03 L1921.94 1213.03 L1921.35 1213.03 L1920.77 1213.03 L1920.18 1213.03 L1919.59 1213.03 L1919.01 1213.03 L1918.42 1213.03 L1917.83 1213.03 L1917.25 1213.03 L1916.66 1213.03 L1916.08 1213.03 L1915.49 1213.03 L1914.9 1213.03 L1914.32 1213.03 L1913.73 1213.03 L1913.14 1213.03 L1912.56 1213.03 L1911.97 1213.03 L1911.38 1213.03 L1910.8 1213.03 L1910.21 1213.03 L1909.63 1213.03 L1909.04 1213.03 L1908.45 1213.03 L1907.87 1213.03 L1907.28 1213.03 L1906.69 1213.03 L1906.11 1213.03 L1905.52 1213.03 L1904.93 1213.03 L1904.35 1213.03 L1903.76 1213.03 L1903.17 1213.03 L1902.59 1213.03 L1902 1213.03 L1901.42 1213.03 L1900.83 1213.03 L1900.24 1213.03 L1899.66 1213.03 L1899.07 1213.03 L1898.48 1213.03 L1897.9 1213.03 L1897.31 1213.03 L1896.72 1213.03 L1896.14 1213.03 L1895.55 1213.03 L1894.96 1213.03 L1894.38 1213.03 L1893.79 1213.03 L1893.21 1213.03 L1892.62 1213.03 L1892.03 1213.03 L1891.45 1213.03 L1890.86 1213.03 L1890.27 1213.03 L1889.69 1213.03 L1889.1 1213.03 L1888.51 1213.03 L1887.93 1213.03 L1887.34 1213.03 L1886.76 1213.03 L1886.17 1213.03 L1885.58 1213.03 L1885 1213.03 L1884.41 1213.03 L1883.82 1213.03 L1883.24 1213.03 L1882.65 1213.03 L1882.06 1213.03 L1881.48 1213.03 L1880.89 1213.03 L1880.3 1213.03 L1879.72 1213.03 L1879.13 1213.03 L1878.55 1213.03 L1877.96 1213.03 L1877.37 1213.03 L1876.79 1213.03 L1876.2 1213.03 L1875.61 1213.03 L1875.03 1213.03 L1874.44 1213.03 L1873.85 1213.03 L1873.27 1213.03 L1872.68 1213.03 L1872.09 1213.03 L1871.51 1213.03 L1870.92 1213.03 L1870.34 1213.03 L1869.75 1213.03 L1869.16 1213.03 L1868.58 1213.03 L1867.99 1213.03 L1867.4 1213.03 L1866.82 1213.03 L1866.23 1213.03 L1865.64 1213.03 L1865.06 1213.03 L1864.47 1213.03 L1863.88 1213.03 L1863.3 1213.03 L1862.71 1213.03 L1862.13 1213.03 L1861.54 1213.03 L1860.95 1213.03 L1860.37 1213.03 L1859.78 1213.03 L1859.19 1213.03 L1858.61 1213.03 L1858.02 1213.03 L1857.43 1213.03 L1856.85 1213.03 L1856.26 1213.03 L1855.68 1213.03 L1855.09 1213.03 L1854.5 1213.03 L1853.92 1213.03 L1853.33 1213.03 L1852.74 1213.03 L1852.16 1213.03 L1851.57 1213.03 L1850.98 1213.03 L1850.4 1213.03 L1849.81 1213.03 L1849.22 1213.03 L1848.64 1213.03 L1848.05 1213.03 L1847.47 1213.03 L1846.88 1213.03 L1846.29 1213.03 L1845.71 1213.03 L1845.12 1213.03 L1844.53 1213.03 L1843.95 1213.03 L1843.36 1213.03 L1842.77 1213.03 L1842.19 1213.03 L1841.6 1213.03 L1841.01 1213.03 L1840.43 1213.03 L1839.84 1213.03 L1839.26 1213.03 L1838.67 1213.03 L1838.08 1213.03 L1837.5 1213.03 L1836.91 1213.03 L1836.32 1213.03 L1835.74 1213.03 L1835.15 1213.03 L1834.56 1213.03 L1833.98 1213.03 L1833.39 1213.03 L1832.81 1213.03 L1832.22 1213.03 L1831.63 1213.03 L1831.05 1213.03 L1830.46 1213.03 L1829.87 1213.03 L1829.29 1213.03 L1828.7 1213.03 L1828.11 1213.03 L1827.53 1213.03 L1826.94 1213.03 L1826.35 1213.03 L1825.77 1213.03 L1825.18 1213.03 L1824.6 1213.03 L1824.01 1213.03 L1823.42 1213.03 L1822.84 1213.03 L1822.25 1213.03 L1821.66 1213.03 L1821.08 1213.03 L1820.49 1213.03 L1819.9 1213.03 L1819.32 1213.03 L1818.73 1213.03 L1818.14 1213.03 L1817.56 1213.03 L1816.97 1213.03 L1816.39 1213.03 L1815.8 1213.03 L1815.21 1213.03 L1814.63 1213.03 L1814.04 1213.03 L1813.45 1213.03 L1812.87 1213.03 L1812.28 1213.03 L1811.69 1213.03 L1811.11 1213.03 L1810.52 1213.03 L1809.94 1213.03 L1809.35 1213.03 L1808.76 1213.03 L1808.18 1213.03 L1807.59 1213.03 L1807 1213.03 L1806.42 1213.03 L1805.83 1213.03 L1805.24 1213.03 L1804.66 1213.03 L1804.07 1213.03 L1803.48 1213.03 L1802.9 1213.03 L1802.31 1213.03 L1801.73 1213.03 L1801.14 1213.03 L1800.55 1213.03 L1799.97 1213.03 L1799.38 1213.03 L1798.79 1213.03 L1798.21 1213.03 L1797.62 1213.03 L1797.03 1213.03 L1796.45 1213.03 L1795.86 1213.03 L1795.27 1213.03 L1794.69 1213.03 L1794.1 1213.03 L1793.52 1213.03 L1792.93 1213.03 L1792.34 1213.03 L1791.76 1213.03 L1791.17 1213.03 L1790.58 1213.03 L1790 1213.03 L1789.41 1213.03 L1788.82 1213.03 L1788.24 1213.03 L1787.65 1213.03 L1787.06 1213.03 L1786.48 1213.03 L1785.89 1213.03 L1785.31 1213.03 L1784.72 1213.03 L1784.13 1213.03 L1783.55 1213.03 L1782.96 1213.03 L1782.37 1213.03 L1781.79 1213.03 L1781.2 1213.03 L1780.61 1213.03 L1780.03 1213.03 L1779.44 1213.03 L1778.86 1213.03 L1778.27 1213.03 L1777.68 1213.03 L1777.1 1213.03 L1776.51 1213.03 L1775.92 1213.03 L1775.34 1213.03 L1774.75 1213.03 L1774.16 1213.03 L1773.58 1213.03 L1772.99 1213.03 L1772.4 1213.03 L1771.82 1213.03 L1771.23 1213.03 L1770.65 1213.03 L1770.06 1213.03 L1769.47 1213.03 L1768.89 1213.03 L1768.3 1213.03 L1767.71 1213.03 L1767.13 1213.03 L1766.54 1213.03 L1765.95 1213.03 L1765.37 1213.03 L1764.78 1213.03 L1764.19 1213.03 L1763.61 1213.03 L1763.02 1213.03 L1762.44 1213.03 L1761.85 1213.03 L1761.26 1213.03 L1760.68 1213.03 L1760.09 1213.03 L1759.5 1213.03 L1758.92 1213.03 L1758.33 1213.03 L1757.74 1213.03 L1757.16 1213.03 L1756.57 1213.03 L1755.99 1213.03 L1755.4 1213.03 L1754.81 1213.03 L1754.23 1213.03 L1753.64 1213.03 L1753.05 1213.03 L1752.47 1213.03 L1751.88 1213.03 L1751.29 1213.03 L1750.71 1213.03 L1750.12 1213.03 L1749.53 1213.03 L1748.95 1213.03 L1748.36 1213.03 L1747.78 1213.03 L1747.19 1213.03 L1746.6 1213.03 L1746.02 1213.03 L1745.43 1213.03 L1744.84 1213.03 L1744.26 1213.03 L1743.67 1213.03 L1743.08 1213.03 L1742.5 1213.03 L1741.91 1213.03 L1741.32 1213.03 L1740.74 1213.03 L1740.15 1213.03 L1739.57 1213.03 L1738.98 1213.03 L1738.39 1213.03 L1737.81 1213.03 L1737.22 1213.03 L1736.63 1213.03 L1736.05 1213.03 L1735.46 1213.03 L1734.87 1213.03 L1734.29 1213.03 L1733.7 1213.03 L1733.11 1213.03 L1732.53 1213.03 L1731.94 1213.03 L1731.36 1213.03 L1730.77 1213.03 L1730.18 1213.03 L1729.6 1213.03 L1729.01 1213.03 L1728.42 1213.03 L1727.84 1213.03 L1727.25 1213.03 L1726.66 1213.03 L1726.08 1213.03 L1725.49 1213.03 L1724.91 1213.03 L1724.32 1213.03 L1723.73 1213.03 L1723.15 1213.03 L1722.56 1213.03 L1721.97 1213.03 L1721.39 1213.03 L1720.8 1213.03 L1720.21 1213.03 L1719.63 1213.03 L1719.04 1213.03 L1718.45 1213.03 L1717.87 1213.03 L1717.28 1213.03 L1716.7 1213.03 L1716.11 1213.03 L1715.52 1213.03 L1714.94 1213.03 L1714.35 1213.03 L1713.76 1213.03 L1713.18 1213.03 L1712.59 1213.03 L1712 1213.03 L1711.42 1213.03 L1710.83 1213.03 L1710.24 1213.03 L1709.66 1213.03 L1709.07 1213.03 L1708.49 1213.03 L1707.9 1213.03 L1707.31 1213.03 L1706.73 1213.03 L1706.14 1213.03 L1705.55 1213.03 L1704.97 1213.03 L1704.38 1213.03 L1703.79 1213.03 L1703.21 1213.03 L1702.62 1213.03 L1702.04 1213.03 L1701.45 1213.03 L1700.86 1213.03 L1700.28 1213.03 L1699.69 1213.03 L1699.1 1213.03 L1698.52 1213.03 L1697.93 1213.03 L1697.34 1213.03 L1696.76 1213.03 L1696.17 1213.03 L1695.58 1213.03 L1695 1213.03 L1694.41 1213.03 L1693.83 1213.03 L1693.24 1213.03 L1692.65 1213.03 L1692.07 1213.03 L1691.48 1213.03 L1690.89 1213.03 L1690.31 1213.03 L1689.72 1213.03 L1689.13 1213.03 L1688.55 1213.03 L1687.96 1213.03 L1687.37 1213.03 L1686.79 1213.03 L1686.2 1213.03 L1685.62 1213.03 L1685.03 1213.03 L1684.44 1213.03 L1683.86 1213.03 L1683.27 1213.03 L1682.68 1213.03 L1682.1 1213.03 L1681.51 1213.03 L1680.92 1213.03 L1680.34 1213.03 L1679.75 1213.03 L1679.17 1213.03 L1678.58 1213.03 L1677.99 1213.03 L1677.41 1213.03 L1676.82 1213.03 L1676.23 1213.03 L1675.65 1213.03 L1675.06 1213.03 L1674.47 1213.03 L1673.89 1213.03 L1673.3 1213.03 L1672.71 1213.03 L1672.13 1213.03 L1671.54 1213.03 L1670.96 1213.03 L1670.37 1213.03 L1669.78 1213.03 L1669.2 1213.03 L1668.61 1213.03 L1668.02 1213.03 L1667.44 1213.03 L1666.85 1213.03 L1666.26 1213.03 L1665.68 1213.03 L1665.09 1213.03 L1664.5 1213.03 L1663.92 1213.03 L1663.33 1213.03 L1662.75 1213.03 L1662.16 1213.03 L1661.57 1213.03 L1660.99 1213.03 L1660.4 1213.03 L1659.81 1213.03 L1659.23 1213.03 L1658.64 1213.03 L1658.05 1213.03 L1657.47 1213.03 L1656.88 1213.03 L1656.29 1213.03 L1655.71 1213.03 L1655.12 1213.03 L1654.54 1213.03 L1653.95 1213.03 L1653.36 1213.03 L1652.78 1213.03 L1652.19 1213.03 L1651.6 1213.03 L1651.02 1213.03 L1650.43 1213.03 L1649.84 1213.03 L1649.26 1213.03 L1648.67 1213.03 L1648.09 1213.03 L1647.5 1213.03 L1646.91 1213.03 L1646.33 1213.03 L1645.74 1213.03 L1645.15 1213.03 L1644.57 1213.03 L1643.98 1213.03 L1643.39 1213.03 L1642.81 1213.03 L1642.22 1213.03 L1641.63 1213.03 L1641.05 1213.03 L1640.46 1213.03 L1639.88 1213.03 L1639.29 1213.03 L1638.7 1213.03 L1638.12 1213.03 L1637.53 1213.03 L1636.94 1213.03 L1636.36 1213.03 L1635.77 1213.03 L1635.18 1213.03 L1634.6 1213.03 L1634.01 1213.03 L1633.42 1213.03 L1632.84 1213.03 L1632.25 1213.03 L1631.67 1213.03 L1631.08 1213.03 L1630.49 1213.03 L1629.91 1213.03 L1629.32 1213.03 L1628.73 1213.03 L1628.15 1213.03 L1627.56 1213.03 L1626.97 1213.03 L1626.39 1213.03 L1625.8 1213.03 L1625.22 1213.03 L1624.63 1213.03 L1624.04 1213.03 L1623.46 1213.03 L1622.87 1213.03 L1622.28 1213.03 L1621.7 1213.03 L1621.11 1213.03 L1620.52 1213.03 L1619.94 1213.03 L1619.35 1213.03 L1618.76 1213.03 L1618.18 1213.03 L1617.59 1213.03 L1617.01 1213.03 L1616.42 1213.03 L1615.83 1213.03 L1615.25 1213.03 L1614.66 1213.03 L1614.07 1213.03 L1613.49 1213.03 L1612.9 1213.03 L1612.31 1213.03 L1611.73 1213.03 L1611.14 1213.03 L1610.55 1213.03 L1609.97 1213.03 L1609.38 1213.03 L1608.8 1213.03 L1608.21 1213.03 L1607.62 1213.03 L1607.04 1213.03 L1606.45 1213.03 L1605.86 1213.03 L1605.28 1213.03 L1604.69 1213.03 L1604.1 1213.03 L1603.52 1213.03 L1602.93 1213.03 L1602.34 1213.03 L1601.76 1213.03 L1601.17 1213.03 L1600.59 1213.03 L1600 1213.03 L1599.41 1213.03 L1598.83 1213.03 L1598.24 1213.03 L1597.65 1213.03 L1597.07 1213.03 L1596.48 1213.03 L1595.89 1213.03 L1595.31 1213.03 L1594.72 1213.03 L1594.14 1213.03 L1593.55 1213.03 L1592.96 1213.03 L1592.38 1213.03 L1591.79 1213.03 L1591.2 1213.03 L1590.62 1213.03 L1590.03 1213.03 L1589.44 1213.03 L1588.86 1213.03 L1588.27 1213.03 L1587.68 1213.03 L1587.1 1213.03 L1586.51 1213.03 L1585.93 1213.03 L1585.34 1213.03 L1584.75 1213.03 L1584.17 1213.03 L1583.58 1213.03 L1582.99 1213.03 L1582.41 1213.03 L1581.82 1213.03 L1581.23 1213.03 L1580.65 1213.03 L1580.06 1213.03 L1579.47 1213.03 L1578.89 1213.03 L1578.3 1213.03 L1577.72 1213.03 L1577.13 1213.03 L1576.54 1213.03 L1575.96 1213.03 L1575.37 1213.03 L1574.78 1213.03 L1574.2 1213.03 L1573.61 1213.03 L1573.02 1213.03 L1572.44 1213.03 L1571.85 1213.03 L1571.27 1213.03 L1570.68 1213.03 L1570.09 1213.03 L1569.51 1213.03 L1568.92 1213.03 L1568.33 1213.03 L1567.75 1213.03 L1567.16 1213.03 L1566.57 1213.03 L1565.99 1213.03 L1565.4 1213.03 L1564.81 1213.03 L1564.23 1213.03 L1563.64 1213.03 L1563.06 1213.03 L1562.47 1213.03 L1561.88 1213.03 L1561.3 1213.03 L1560.71 1213.03 L1560.12 1213.03 L1559.54 1213.03 L1558.95 1213.03 L1558.36 1213.03 L1557.78 1213.03 L1557.19 1213.03 L1556.6 1213.03 L1556.02 1213.03 L1555.43 1213.03 L1554.85 1213.03 L1554.26 1213.03 L1553.67 1213.03 L1553.09 1213.03 L1552.5 1213.03 L1551.91 1213.03 L1551.33 1213.03 L1550.74 1213.03 L1550.15 1213.03 L1549.57 1213.03 L1548.98 1213.03 L1548.4 1213.03 L1547.81 1213.03 L1547.22 1213.03 L1546.64 1213.03 L1546.05 1213.03 L1545.46 1213.03 L1544.88 1213.03 L1544.29 1213.03 L1543.7 1213.03 L1543.12 1213.03 L1542.53 1213.03 L1541.94 1213.03 L1541.36 1213.03 L1540.77 1213.03 L1540.19 1213.03 L1539.6 1213.03 L1539.01 1213.03 L1538.43 1213.03 L1537.84 1213.03 L1537.25 1213.03 L1536.67 1213.03 L1536.08 1213.03 L1535.49 1213.03 L1534.91 1213.03 L1534.32 1213.03 L1533.73 1213.03 L1533.15 1213.03 L1532.56 1213.03 L1531.98 1213.03 L1531.39 1213.03 L1530.8 1213.03 L1530.22 1213.03 L1529.63 1213.03 L1529.04 1213.03 L1528.46 1213.03 L1527.87 1213.03 L1527.28 1213.03 L1526.7 1213.03 L1526.11 1213.03 L1525.52 1213.03 L1524.94 1213.03 L1524.35 1213.03 L1523.77 1213.03 L1523.18 1213.03 L1522.59 1213.03 L1522.01 1213.03 L1521.42 1213.03 L1520.83 1213.03 L1520.25 1213.03 L1519.66 1213.03 L1519.07 1213.03 L1518.49 1213.03 L1517.9 1213.03 L1517.32 1213.03 L1516.73 1213.03 L1516.14 1213.03 L1515.56 1213.03 L1514.97 1213.03 L1514.38 1213.03 L1513.8 1213.03 L1513.21 1213.03 L1512.62 1213.03 L1512.04 1213.03 L1511.45 1213.03 L1510.86 1213.03 L1510.28 1213.03 L1509.69 1213.03 L1509.11 1213.03 L1508.52 1213.03 L1507.93 1213.03 L1507.35 1213.03 L1506.76 1213.03 L1506.17 1213.03 L1505.59 1213.03 L1505 1213.03 L1504.41 1213.03 L1503.83 1213.03 L1503.24 1213.03 L1502.65 1213.03 L1502.07 1213.03 L1501.48 1213.03 L1500.9 1213.03 L1500.31 1213.03 L1499.72 1213.03 L1499.14 1213.03 L1498.55 1213.03 L1497.96 1213.03 L1497.38 1213.03 L1496.79 1213.03 L1496.2 1213.03 L1495.62 1213.03 L1495.03 1213.03 L1494.45 1213.03 L1493.86 1213.03 L1493.27 1213.03 L1492.69 1213.03 L1492.1 1213.03 L1491.51 1213.03 L1490.93 1213.03 L1490.34 1213.03 L1489.75 1213.03 L1489.17 1213.03 L1488.58 1213.03 L1487.99 1213.03 L1487.41 1213.03 L1486.82 1213.03 L1486.24 1213.03 L1485.65 1213.03 L1485.06 1213.03 L1484.48 1213.03 L1483.89 1213.03 L1483.3 1213.03 L1482.72 1213.03 L1482.13 1213.03 L1481.54 1213.03 L1480.96 1213.03 L1480.37 1213.03 L1479.78 1213.03 L1479.2 1213.03 L1478.61 1213.03 L1478.03 1213.03 L1477.44 1213.03 L1476.85 1213.03 L1476.27 1213.03 L1475.68 1213.03 L1475.09 1213.03 L1474.51 1213.03 L1473.92 1213.03 L1473.33 1213.03 L1472.75 1213.03 L1472.16 1213.03 L1471.57 1213.03 L1470.99 1213.03 L1470.4 1213.03 L1469.82 1213.03 L1469.23 1213.03 L1468.64 1213.03 L1468.06 1213.03 L1467.47 1213.03 L1466.88 1213.03 L1466.3 1213.03 L1465.71 1213.03 L1465.12 1213.03 L1464.54 1213.03 L1463.95 1213.03 L1463.37 1213.03 L1462.78 1213.03 L1462.19 1213.03 L1461.61 1213.03 L1461.02 1213.03 L1460.43 1213.03 L1459.85 1213.03 L1459.26 1213.03 L1458.67 1213.03 L1458.09 1213.03 L1457.5 1213.03 L1456.91 1213.03 L1456.33 1213.03 L1455.74 1213.03 L1455.16 1213.03 L1454.57 1213.03 L1453.98 1213.03 L1453.4 1213.03 L1452.81 1213.03 L1452.22 1213.03 L1451.64 1213.03 L1451.05 1213.03 L1450.46 1213.03 L1449.88 1213.03 L1449.29 1213.03 L1448.7 1213.03 L1448.12 1213.03 L1447.53 1213.03 L1446.95 1213.03 L1446.36 1213.03 L1445.77 1213.03 L1445.19 1213.03 L1444.6 1213.03 L1444.01 1213.03 L1443.43 1213.03 L1442.84 1213.03 L1442.25 1213.03 L1441.67 1213.03 L1441.08 1213.03 L1440.5 1213.03 L1439.91 1213.03 L1439.32 1213.03 L1438.74 1213.03 L1438.15 1213.03 L1437.56 1213.03 L1436.98 1213.03 L1436.39 1213.03 L1435.8 1213.03 L1435.22 1213.03 L1434.63 1213.03 L1434.04 1213.03 L1433.46 1213.03 L1432.87 1213.03 L1432.29 1213.03 L1431.7 1213.03 L1431.11 1213.03 L1430.53 1213.03 L1429.94 1213.03 L1429.35 1213.03 L1428.77 1213.03 L1428.18 1213.03 L1427.59 1213.03 L1427.01 1213.03 L1426.42 1213.03 L1425.83 1213.03 L1425.25 1213.03 L1424.66 1213.03 L1424.08 1213.03 L1423.49 1213.03 L1422.9 1213.03 L1422.32 1213.03 L1421.73 1213.03 L1421.14 1213.03 L1420.56 1213.03 L1419.97 1213.03 L1419.38 1213.03 L1418.8 1213.03 L1418.21 1213.03 L1417.63 1213.03 L1417.04 1213.03 L1416.45 1213.03 L1415.87 1213.03 L1415.28 1213.03 L1414.69 1213.03 L1414.11 1213.03 L1413.52 1213.03 L1412.93 1213.03 L1412.35 1213.03 L1411.76 1213.03 L1411.17 1213.03 L1410.59 1213.03 L1410 1213.03 L1409.42 1213.03 L1408.83 1213.03 L1408.24 1213.03 L1407.66 1213.03 L1407.07 1213.03 L1406.48 1213.03 L1405.9 1213.03 L1405.31 1213.03 L1404.72 1213.03 L1404.14 1213.03 L1403.55 1213.03 L1402.96 1213.03 L1402.38 1213.03 L1401.79 1213.03 L1401.21 1213.03 L1400.62 1213.03 L1400.03 1213.03 L1399.45 1213.03 L1398.86 1213.03 L1398.27 1213.03 L1397.69 1213.03 L1397.1 1213.03 L1396.51 1213.03 L1395.93 1213.03 L1395.34 1213.03 L1394.75 1213.03 L1394.17 1213.03 L1393.58 1213.03 L1393 1213.03 L1392.41 1213.03 L1391.82 1213.03 L1391.24 1213.03 L1390.65 1213.03 L1390.06 1213.03 L1389.48 1213.03 L1388.89 1213.03 L1388.3 1213.03 L1387.72 1213.03 L1387.13 1213.03 L1386.55 1213.03 L1385.96 1213.03 L1385.37 1213.03 L1384.79 1213.03 L1384.2 1213.03 L1383.61 1213.03 L1383.03 1213.03 L1382.44 1213.03 L1381.85 1213.03 L1381.27 1213.03 L1380.68 1213.03 L1380.09 1213.03 L1379.51 1213.03 L1378.92 1213.03 L1378.34 1213.03 L1377.75 1213.03 L1377.16 1213.03 L1376.58 1213.03 L1375.99 1213.03 L1375.4 1213.03 L1374.82 1213.03 L1374.23 1213.03 L1373.64 1213.03 L1373.06 1213.03 L1372.47 1213.03 L1371.88 1213.03 L1371.3 1213.03 L1370.71 1213.03 L1370.13 1213.03 L1369.54 1213.03 L1368.95 1213.03 L1368.37 1213.03 L1367.78 1213.03 L1367.19 1213.03 L1366.61 1213.03 L1366.02 1213.03 L1365.43 1213.03 L1364.85 1213.03 L1364.26 1213.03 L1363.68 1213.03 L1363.09 1213.03 L1362.5 1213.03 L1361.92 1213.03 L1361.33 1213.03 L1360.74 1213.03 L1360.16 1213.03 L1359.57 1213.03 L1358.98 1213.03 L1358.4 1213.03 L1357.81 1213.03 L1357.22 1213.03 L1356.64 1213.03 L1356.05 1213.03 L1355.47 1213.03 L1354.88 1213.03 L1354.29 1213.03 L1353.71 1213.03 L1353.12 1213.03 L1352.53 1213.03 L1351.95 1213.03 L1351.36 1213.03 L1350.77 1213.03 L1350.19 1213.03 L1349.6 1213.03 L1349.01 1213.03 L1348.43 1213.03 L1347.84 1213.03 L1347.26 1213.03 L1346.67 1213.03 L1346.08 1213.03 L1345.5 1213.03 L1344.91 1213.03 L1344.32 1213.03 L1343.74 1213.03 L1343.15 1213.03 L1342.56 1213.03 L1341.98 1213.03 L1341.39 1213.03 L1340.8 1213.03 L1340.22 1213.03 L1339.63 1213.03 L1339.05 1213.03 L1338.46 1213.03 L1337.87 1213.03 L1337.29 1213.03 L1336.7 1213.03 L1336.11 1213.03 L1335.53 1213.03 L1334.94 1213.03 L1334.35 1213.03 L1333.77 1213.03 L1333.18 1213.03 L1332.6 1213.03 L1332.01 1213.03 L1331.42 1213.03 L1330.84 1213.03 L1330.25 1213.03 L1329.66 1213.03 L1329.08 1213.03 L1328.49 1213.03 L1327.9 1213.03 L1327.32 1213.03 L1326.73 1213.03 L1326.14 1213.03 L1325.56 1213.03 L1324.97 1213.03 L1324.39 1213.03 L1323.8 1213.03 L1323.21 1213.03 L1322.63 1213.03 L1322.04 1213.03 L1321.45 1213.03 L1320.87 1213.03 L1320.28 1213.03 L1319.69 1213.03 L1319.11 1213.03 L1318.52 1213.03 L1317.93 1213.03 L1317.35 1213.03 L1316.76 1213.03 L1316.18 1213.03 L1315.59 1213.03 L1315 1213.03 L1314.42 1213.03 L1313.83 1213.03 L1313.24 1213.03 L1312.66 1213.03 L1312.07 1213.03 L1311.48 1213.03 L1310.9 1213.03 L1310.31 1213.03 L1309.73 1213.03 L1309.14 1213.03 L1308.55 1213.03 L1307.97 1213.03 L1307.38 1213.03 L1306.79 1213.03 L1306.21 1213.03 L1305.62 1213.03 L1305.03 1213.03 L1304.45 1213.03 L1303.86 1213.03 L1303.27 1213.03 L1302.69 1213.03 L1302.1 1213.03 L1301.52 1213.03 L1300.93 1213.03 L1300.34 1213.03 L1299.76 1213.03 L1299.17 1213.03 L1298.58 1213.03 L1298 1213.03 L1297.41 1213.03 L1296.82 1213.03 L1296.24 1213.03 L1295.65 1213.03 L1295.06 1213.03 L1294.48 1213.03 L1293.89 1213.03 L1293.31 1213.03 L1292.72 1213.03 L1292.13 1213.03 L1291.55 1213.03 L1290.96 1213.03 L1290.37 1213.03 L1289.79 1213.03 L1289.2 1213.03 L1288.61 1213.03 L1288.03 1213.03 L1287.44 1213.03 L1286.86 1213.03 L1286.27 1213.03 L1285.68 1213.03 L1285.1 1213.03 L1284.51 1213.03 L1283.92 1213.03 L1283.34 1213.03 L1282.75 1213.03 L1282.16 1213.03 L1281.58 1213.03 L1280.99 1213.03 L1280.4 1213.03 L1279.82 1213.03 L1279.23 1213.03 L1278.65 1213.03 L1278.06 1213.03 L1277.47 1213.03 L1276.89 1213.03 L1276.3 1213.03 L1275.71 1213.03 L1275.13 1213.03 L1274.54 1213.03 L1273.95 1213.03 L1273.37 1213.03 L1272.78 1213.03 L1272.19 1213.03 L1271.61 1213.03 L1271.02 1213.03 L1270.44 1213.03 L1269.85 1213.03 L1269.26 1213.03 L1268.68 1213.03 L1268.09 1213.03 L1267.5 1213.03 L1266.92 1213.03 L1266.33 1213.03 L1265.74 1213.03 L1265.16 1213.03 L1264.57 1213.03 L1263.98 1213.03 L1263.4 1213.03 L1262.81 1213.03 L1262.23 1213.03 L1261.64 1213.03 L1261.05 1213.03 L1260.47 1213.03 L1259.88 1213.03 L1259.29 1213.03 L1258.71 1213.03 L1258.12 1213.03 L1257.53 1213.03 L1256.95 1213.03 L1256.36 1213.03 L1255.78 1213.03 L1255.19 1213.03 L1254.6 1213.03 L1254.02 1213.03 L1253.43 1213.03 L1252.84 1213.03 L1252.26 1213.03 L1251.67 1213.03 L1251.08 1213.03 L1250.5 1213.03 L1249.91 1213.03 L1249.32 1213.03 L1248.74 1213.03 L1248.15 1213.03 L1247.57 1213.03 L1246.98 1213.03 L1246.39 1213.03 L1245.81 1213.03 L1245.22 1213.03 L1244.63 1213.03 L1244.05 1213.03 L1243.46 1213.03 L1242.87 1213.03 L1242.29 1213.03 L1241.7 1213.03 L1241.11 1213.03 L1240.53 1213.03 L1239.94 1213.03 L1239.36 1213.03 L1238.77 1213.03 L1238.18 1213.03 L1237.6 1213.03 L1237.01 1213.03 L1236.42 1213.03 L1235.84 1213.03 L1235.25 1213.03 L1234.66 1213.03 L1234.08 1213.03 L1233.49 1213.03 L1232.91 1213.03 L1232.32 1213.03 L1231.73 1213.03 L1231.15 1213.03 L1230.56 1213.03 L1229.97 1213.03 L1229.39 1213.03 L1228.8 1213.03 L1228.21 1213.03 L1227.63 1213.03 L1227.04 1213.03 L1226.45 1213.03 L1225.87 1213.03 L1225.28 1213.03 L1224.7 1213.03 L1224.11 1213.03 L1223.52 1213.03 L1222.94 1213.03 L1222.35 1213.03 L1221.76 1213.03 L1221.18 1213.03 L1220.59 1213.03 L1220 1213.03 L1219.42 1213.03 L1218.83 1213.03 L1218.24 1213.03 L1217.66 1213.03 L1217.07 1213.03 L1216.49 1213.03 L1215.9 1213.03 L1215.31 1213.03 L1214.73 1213.03 L1214.14 1213.03 L1213.55 1213.03 L1212.97 1213.03 L1212.38 1213.03 L1211.79 1213.03 L1211.21 1213.03 L1210.62 1213.03 L1210.03 1213.03 L1209.45 1213.03 L1208.86 1213.03 L1208.28 1213.03 L1207.69 1213.03 L1207.1 1213.03 L1206.52 1213.03 L1205.93 1213.03 L1205.34 1213.03 L1204.76 1213.03 L1204.17 1213.03 L1203.58 1213.03 L1203 1213.03 L1202.41 1213.03 L1201.83 1213.03 L1201.24 1213.03 L1200.65 1213.03 L1200.07 1213.03 L1199.48 1213.03 L1198.89 1213.03 L1198.31 1213.03 L1197.72 1213.03 L1197.13 1213.03 L1196.55 1213.03 L1195.96 1213.03 L1195.37 1213.03 L1194.79 1213.03 L1194.2 1213.03 L1193.62 1213.03 L1193.03 1213.03 L1192.44 1213.03 L1191.86 1213.03 L1191.27 1213.03 L1190.68 1213.03 L1190.1 1213.03 L1189.51 1213.03 L1188.92 1213.03 L1188.34 1213.03 L1187.75 1213.03 L1187.16 1213.03 L1186.58 1213.03 L1185.99 1213.03 L1185.41 1213.03 L1184.82 1213.03 L1184.23 1213.03 L1183.65 1213.03 L1183.06 1213.03 L1182.47 1213.03 L1181.89 1213.03 L1181.3 1213.03 L1180.71 1213.03 L1180.13 1213.03 L1179.54 1213.03 L1178.96 1213.03 L1178.37 1213.03 L1177.78 1213.03 L1177.2 1213.03 L1176.61 1213.03 L1176.02 1213.03 L1175.44 1213.03 L1174.85 1213.03 L1174.26 1213.03 L1173.68 1213.03 L1173.09 1213.03 L1172.5 1213.03 L1171.92 1213.03 L1171.33 1213.03 L1170.75 1213.03 L1170.16 1213.03 L1169.57 1213.03 L1168.99 1213.03 L1168.4 1213.03 L1167.81 1213.03 L1167.23 1213.03 L1166.64 1213.03 L1166.05 1213.03 L1165.47 1213.03 L1164.88 1213.03 L1164.29 1213.03 L1163.71 1213.03 L1163.12 1213.03 L1162.54 1213.03 L1161.95 1213.03 L1161.36 1213.03 L1160.78 1213.03 L1160.19 1213.03 L1159.6 1213.03 L1159.02 1213.03 L1158.43 1213.03 L1157.84 1213.03 L1157.26 1213.03 L1156.67 1213.03 L1156.09 1213.03 L1155.5 1213.03 L1154.91 1213.03 L1154.33 1213.03 L1153.74 1213.03 L1153.15 1213.03 L1152.57 1213.03 L1151.98 1213.03 L1151.39 1213.03 L1150.81 1213.03 L1150.22 1213.03 L1149.63 1213.03 L1149.05 1213.03 L1148.46 1213.03 L1147.88 1213.03 L1147.29 1213.03 L1146.7 1213.03 L1146.12 1213.03 L1145.53 1213.03 L1144.94 1213.03 L1144.36 1213.03 L1143.77 1213.03 L1143.18 1213.03 L1142.6 1213.03 L1142.01 1213.03 L1141.42 1213.03 L1140.84 1213.03 L1140.25 1213.03 L1139.67 1213.03 L1139.08 1213.03 L1138.49 1213.03 L1137.91 1213.03 L1137.32 1213.03 L1136.73 1213.03 L1136.15 1213.03 L1135.56 1213.03 L1134.97 1213.03 L1134.39 1213.03 L1133.8 1213.03 L1133.21 1213.03 L1132.63 1213.03 L1132.04 1213.03 L1131.46 1213.03 L1130.87 1213.03 L1130.28 1213.03 L1129.7 1213.03 L1129.11 1213.03 L1128.52 1213.03 L1127.94 1213.03 L1127.35 1213.03 L1126.76 1213.03 L1126.18 1213.03 L1125.59 1213.03 L1125.01 1213.03 L1124.42 1213.03 L1123.83 1213.03 L1123.25 1213.03 L1122.66 1213.03 L1122.07 1213.03 L1121.49 1213.03 L1120.9 1213.03 L1120.31 1213.03 L1119.73 1213.03 L1119.14 1213.03 L1118.55 1213.03 L1117.97 1213.03 L1117.38 1213.03 L1116.8 1213.03 L1116.21 1213.03 L1115.62 1213.03 L1115.04 1213.03 L1114.45 1213.03 L1113.86 1213.03 L1113.28 1213.03 L1112.69 1213.03 L1112.1 1213.03 L1111.52 1213.03 L1110.93 1213.03 L1110.34 1213.03 L1109.76 1213.03 L1109.17 1213.03 L1108.59 1213.03 L1108 1213.03 L1107.41 1213.03 L1106.83 1213.03 L1106.24 1213.03 L1105.65 1213.03 L1105.07 1213.03 L1104.48 1213.03 L1103.89 1213.03 L1103.31 1213.03 L1102.72 1213.03 L1102.14 1213.03 L1101.55 1213.03 L1100.96 1213.03 L1100.38 1213.03 L1099.79 1213.03 L1099.2 1213.03 L1098.62 1213.03 L1098.03 1213.03 L1097.44 1213.03 L1096.86 1213.03 L1096.27 1213.03 L1095.68 1213.03 L1095.1 1213.03 L1094.51 1213.03 L1093.93 1213.03 L1093.34 1213.03 L1092.75 1213.03 L1092.17 1213.03 L1091.58 1213.03 L1090.99 1213.03 L1090.41 1213.03 L1089.82 1213.03 L1089.23 1213.03 L1088.65 1213.03 L1088.06 1213.03 L1087.47 1213.03 L1086.89 1213.03 L1086.3 1213.03 L1085.72 1213.03 L1085.13 1213.03 L1084.54 1213.03 L1083.96 1213.03 L1083.37 1213.03 L1082.78 1213.03 L1082.2 1213.03 L1081.61 1213.03 L1081.02 1213.03 L1080.44 1213.03 L1079.85 1213.03 L1079.26 1213.03 L1078.68 1213.03 L1078.09 1213.03 L1077.51 1213.03 L1076.92 1213.03 L1076.33 1213.03 L1075.75 1213.03 L1075.16 1213.03 L1074.57 1213.03 L1073.99 1213.03 L1073.4 1213.03 L1072.81 1213.03 L1072.23 1213.03 L1071.64 1213.03 L1071.06 1213.03 L1070.47 1213.03 L1069.88 1213.03 L1069.3 1213.03 L1068.71 1213.03 L1068.12 1213.03 L1067.54 1213.03 L1066.95 1213.03 L1066.36 1213.03 L1065.78 1213.03 L1065.19 1213.03 L1064.6 1213.03 L1064.02 1213.03 L1063.43 1213.03 L1062.85 1213.03 L1062.26 1213.03 L1061.67 1213.03 L1061.09 1213.03 L1060.5 1213.03 L1059.91 1213.03 L1059.33 1213.03 L1058.74 1213.03 L1058.15 1213.03 L1057.57 1213.03 L1056.98 1213.03 L1056.39 1213.03 L1055.81 1213.03 L1055.22 1213.03 L1054.64 1213.03 L1054.05 1213.03 L1053.46 1213.03 L1052.88 1213.03 L1052.29 1213.03 L1051.7 1213.03 L1051.12 1213.03 L1050.53 1213.03 L1049.94 1213.03 L1049.36 1213.03 L1048.77 1213.03 L1048.19 1213.03 L1047.6 1213.03 L1047.01 1213.03 L1046.43 1213.03 L1045.84 1213.03 L1045.25 1213.03 L1044.67 1213.03 L1044.08 1213.03 L1043.49 1213.03 L1042.91 1213.03 L1042.32 1213.03 L1041.73 1213.03 L1041.15 1213.03 L1040.56 1213.03 L1039.98 1213.03 L1039.39 1213.03 L1038.8 1213.03 L1038.22 1213.03 L1037.63 1213.03 L1037.04 1213.03 L1036.46 1213.03 L1035.87 1213.03 L1035.28 1213.03 L1034.7 1213.03 L1034.11 1213.03 L1033.52 1213.03 L1032.94 1213.03 L1032.35 1213.03 L1031.77 1213.03 L1031.18 1213.03 L1030.59 1213.03 L1030.01 1213.03 L1029.42 1213.03 L1028.83 1213.03 L1028.25 1213.03 L1027.66 1213.03 L1027.07 1213.03 L1026.49 1213.03 L1025.9 1213.03 L1025.32 1213.03 L1024.73 1213.03 L1024.14 1213.03 L1023.56 1213.03 L1022.97 1213.03 L1022.38 1213.03 L1021.8 1213.03 L1021.21 1213.03 L1020.62 1213.03 L1020.04 1213.03 L1019.45 1213.03 L1018.86 1213.03 L1018.28 1213.03 L1017.69 1213.03 L1017.11 1213.03 L1016.52 1213.03 L1015.93 1213.03 L1015.35 1213.03 L1014.76 1213.03 L1014.17 1213.03 L1013.59 1213.03 L1013 1213.03 L1012.41 1213.03 L1011.83 1213.03 L1011.24 1213.03 L1010.65 1213.03 L1010.07 1213.03 L1009.48 1213.03 L1008.9 1213.03 L1008.31 1213.03 L1007.72 1213.03 L1007.14 1213.03 L1006.55 1213.03 L1005.96 1213.03 L1005.38 1213.03 L1004.79 1213.03 L1004.2 1213.03 L1003.62 1213.03 L1003.03 1213.03 L1002.44 1213.03 L1001.86 1213.03 L1001.27 1213.03 L1000.69 1213.03 L1000.1 1213.03 L999.513 1213.03 L998.926 1213.03 L998.34 1213.03 L997.754 1213.03 L997.167 1213.03 L996.581 1213.03 L995.994 1213.03 L995.408 1213.03 L994.822 1213.03 L994.235 1213.03 L993.649 1213.03 L993.062 1213.03 L992.476 1213.03 L991.889 1213.03 L991.303 1213.03 L990.717 1213.03 L990.13 1213.03 L989.544 1213.03 L988.957 1213.03 L988.371 1213.03 L987.785 1213.03 L987.198 1213.03 L986.612 1213.03 L986.025 1213.03  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.1 986.612,1213.1 987.198,1213.1 987.785,1213.1 988.371,1213.1 988.957,1213.1 989.544,1213.1 990.13,1213.1 990.717,1213.1 991.303,1213.1 991.889,1213.1 992.476,1213.1 993.062,1213.1 993.649,1213.1 994.235,1213.1 994.822,1213.1 995.408,1213.1 995.994,1213.1 996.581,1213.1 997.167,1213.1 997.754,1213.1 998.34,1213.1 998.926,1213.1 999.513,1213.1 1000.1,1213.1 1000.69,1213.1 1001.27,1213.1 1001.86,1213.1 1002.44,1213.1 1003.03,1213.1 1003.62,1213.1 1004.2,1213.1 1004.79,1213.1 1005.38,1213.1 1005.96,1213.1 1006.55,1213.1 1007.14,1213.1 1007.72,1213.1 1008.31,1213.1 1008.9,1213.1 1009.48,1213.1 1010.07,1213.1 1010.65,1213.1 1011.24,1213.1 1011.83,1213.1 1012.41,1213.1 1013,1213.1 1013.59,1213.1 1014.17,1213.1 1014.76,1213.1 1015.35,1213.1 1015.93,1213.1 1016.52,1213.1 1017.11,1213.1 1017.69,1213.1 1018.28,1213.1 1018.86,1213.1 1019.45,1213.1 1020.04,1213.1 1020.62,1213.1 1021.21,1213.1 1021.8,1213.1 1022.38,1213.1 1022.97,1213.1 1023.56,1213.1 1024.14,1213.1 1024.73,1213.1 1025.32,1213.1 1025.9,1213.1 1026.49,1213.1 1027.07,1213.1 1027.66,1213.1 1028.25,1213.1 1028.83,1213.1 1029.42,1213.1 1030.01,1213.1 1030.59,1213.1 1031.18,1213.1 1031.77,1213.1 1032.35,1213.1 1032.94,1213.1 1033.52,1213.1 1034.11,1213.1 1034.7,1213.1 1035.28,1213.1 1035.87,1213.1 1036.46,1213.1 1037.04,1213.1 1037.63,1213.1 1038.22,1213.1 1038.8,1213.1 1039.39,1213.1 1039.98,1213.1 1040.56,1213.1 1041.15,1213.1 1041.73,1213.1 1042.32,1213.1 1042.91,1213.1 1043.49,1213.1 1044.08,1213.1 1044.67,1213.1 1045.25,1213.1 1045.84,1213.1 1046.43,1213.1 1047.01,1213.1 1047.6,1213.1 1048.19,1213.1 1048.77,1213.1 1049.36,1213.1 1049.94,1213.1 1050.53,1213.1 1051.12,1213.1 1051.7,1213.1 1052.29,1213.1 1052.88,1213.1 1053.46,1213.1 1054.05,1213.1 1054.64,1213.1 1055.22,1213.1 1055.81,1213.1 1056.39,1213.1 1056.98,1213.1 1057.57,1213.1 1058.15,1213.1 1058.74,1213.1 1059.33,1213.1 1059.91,1213.1 1060.5,1213.1 1061.09,1213.1 1061.67,1213.1 1062.26,1213.1 1062.85,1213.1 1063.43,1213.1 1064.02,1213.1 1064.6,1213.1 1065.19,1213.1 1065.78,1213.1 1066.36,1213.1 1066.95,1213.1 1067.54,1213.1 1068.12,1213.1 1068.71,1213.1 1069.3,1213.1 1069.88,1213.1 1070.47,1213.1 1071.06,1213.1 1071.64,1213.1 1072.23,1213.1 1072.81,1213.1 1073.4,1213.1 1073.99,1213.1 1074.57,1213.1 1075.16,1213.1 1075.75,1213.1 1076.33,1213.1 1076.92,1213.1 1077.51,1213.1 1078.09,1213.1 1078.68,1213.1 1079.26,1213.1 1079.85,1213.1 1080.44,1213.1 1081.02,1213.1 1081.61,1213.1 1082.2,1213.1 1082.78,1213.1 1083.37,1213.1 1083.96,1213.1 1084.54,1213.1 1085.13,1213.1 1085.72,1213.1 1086.3,1213.1 1086.89,1213.1 1087.47,1213.1 1088.06,1213.1 1088.65,1213.1 1089.23,1213.1 1089.82,1213.1 1090.41,1213.1 1090.99,1213.1 1091.58,1213.1 1092.17,1213.1 1092.75,1213.1 1093.34,1213.1 1093.93,1213.1 1094.51,1213.1 1095.1,1213.1 1095.68,1213.1 1096.27,1213.1 1096.86,1213.1 1097.44,1213.1 1098.03,1213.1 1098.62,1213.1 1099.2,1213.1 1099.79,1213.1 1100.38,1213.1 1100.96,1213.1 1101.55,1213.1 1102.14,1213.1 1102.72,1213.1 1103.31,1213.1 1103.89,1213.1 1104.48,1213.1 1105.07,1213.1 1105.65,1213.1 1106.24,1213.1 1106.83,1213.1 1107.41,1213.1 1108,1213.1 1108.59,1213.1 1109.17,1213.1 1109.76,1213.1 1110.34,1213.1 1110.93,1213.1 1111.52,1213.1 1112.1,1213.1 1112.69,1213.1 1113.28,1213.1 1113.86,1213.1 1114.45,1213.1 1115.04,1213.1 1115.62,1213.1 1116.21,1213.1 1116.8,1213.1 1117.38,1213.1 1117.97,1213.1 1118.55,1213.1 1119.14,1213.1 1119.73,1213.1 1120.31,1213.1 1120.9,1213.1 1121.49,1213.1 1122.07,1213.1 1122.66,1213.1 1123.25,1213.1 1123.83,1213.1 1124.42,1213.1 1125.01,1213.1 1125.59,1213.1 1126.18,1213.1 1126.76,1213.1 1127.35,1213.1 1127.94,1213.1 1128.52,1213.1 1129.11,1213.1 1129.7,1213.1 1130.28,1213.1 1130.87,1213.1 1131.46,1213.1 1132.04,1213.1 1132.63,1213.1 1133.21,1213.1 1133.8,1213.1 1134.39,1213.1 1134.97,1213.1 1135.56,1213.1 1136.15,1213.1 1136.73,1213.1 1137.32,1213.1 1137.91,1213.1 1138.49,1213.1 1139.08,1213.1 1139.67,1213.1 1140.25,1213.1 1140.84,1213.1 1141.42,1213.1 1142.01,1213.1 1142.6,1213.1 1143.18,1213.1 1143.77,1213.1 1144.36,1213.1 1144.94,1213.1 1145.53,1213.1 1146.12,1213.1 1146.7,1213.1 1147.29,1213.1 1147.88,1213.1 1148.46,1213.1 1149.05,1213.1 1149.63,1213.1 1150.22,1213.1 1150.81,1213.1 1151.39,1213.1 1151.98,1213.1 1152.57,1213.1 1153.15,1213.1 1153.74,1213.1 1154.33,1213.1 1154.91,1213.1 1155.5,1213.1 1156.09,1213.1 1156.67,1213.1 1157.26,1213.1 1157.84,1213.1 1158.43,1213.1 1159.02,1213.1 1159.6,1213.1 1160.19,1213.1 1160.78,1213.1 1161.36,1213.1 1161.95,1213.1 1162.54,1213.1 1163.12,1213.1 1163.71,1213.1 1164.29,1213.1 1164.88,1213.1 1165.47,1213.1 1166.05,1213.1 1166.64,1213.1 1167.23,1213.1 1167.81,1213.1 1168.4,1213.1 1168.99,1213.1 1169.57,1213.1 1170.16,1213.1 1170.75,1213.1 1171.33,1213.1 1171.92,1213.1 1172.5,1213.1 1173.09,1213.1 1173.68,1213.1 1174.26,1213.1 1174.85,1213.1 1175.44,1213.1 1176.02,1213.1 1176.61,1213.1 1177.2,1213.1 1177.78,1213.1 1178.37,1213.1 1178.96,1213.1 1179.54,1213.1 1180.13,1213.1 1180.71,1213.1 1181.3,1213.1 1181.89,1213.1 1182.47,1213.1 1183.06,1213.1 1183.65,1213.1 1184.23,1213.1 1184.82,1213.1 1185.41,1213.1 1185.99,1213.1 1186.58,1213.1 1187.16,1213.1 1187.75,1213.1 1188.34,1213.1 1188.92,1213.1 1189.51,1213.1 1190.1,1213.1 1190.68,1213.1 1191.27,1213.1 1191.86,1213.1 1192.44,1213.1 1193.03,1213.1 1193.62,1213.1 1194.2,1213.1 1194.79,1213.1 1195.37,1213.1 1195.96,1213.1 1196.55,1213.1 1197.13,1213.1 1197.72,1213.1 1198.31,1213.1 1198.89,1213.1 1199.48,1213.1 1200.07,1213.1 1200.65,1213.1 1201.24,1213.1 1201.83,1213.1 1202.41,1213.1 1203,1213.1 1203.58,1213.1 1204.17,1213.1 1204.76,1213.1 1205.34,1213.1 1205.93,1213.1 1206.52,1213.1 1207.1,1213.1 1207.69,1213.1 1208.28,1213.1 1208.86,1213.1 1209.45,1213.1 1210.03,1213.1 1210.62,1213.1 1211.21,1213.1 1211.79,1213.1 1212.38,1213.1 1212.97,1213.1 1213.55,1213.1 1214.14,1213.1 1214.73,1213.1 1215.31,1213.1 1215.9,1213.1 1216.49,1213.1 1217.07,1213.1 1217.66,1213.1 1218.24,1213.1 1218.83,1213.1 1219.42,1213.1 1220,1213.1 1220.59,1213.1 1221.18,1213.1 1221.76,1213.1 1222.35,1213.1 1222.94,1213.1 1223.52,1213.1 1224.11,1213.1 1224.7,1213.1 1225.28,1213.1 1225.87,1213.1 1226.45,1213.1 1227.04,1213.1 1227.63,1213.1 1228.21,1213.1 1228.8,1213.1 1229.39,1213.1 1229.97,1213.1 1230.56,1213.1 1231.15,1213.1 1231.73,1213.1 1232.32,1213.1 1232.91,1213.1 1233.49,1213.1 1234.08,1213.1 1234.66,1213.1 1235.25,1213.1 1235.84,1213.1 1236.42,1213.1 1237.01,1213.1 1237.6,1213.1 1238.18,1213.1 1238.77,1213.1 1239.36,1213.1 1239.94,1213.1 1240.53,1213.1 1241.11,1213.1 1241.7,1213.1 1242.29,1213.1 1242.87,1213.1 1243.46,1213.1 1244.05,1213.1 1244.63,1213.1 1245.22,1213.1 1245.81,1213.1 1246.39,1213.1 1246.98,1213.1 1247.57,1213.1 1248.15,1213.1 1248.74,1213.1 1249.32,1213.1 1249.91,1213.1 1250.5,1213.1 1251.08,1213.1 1251.67,1213.1 1252.26,1213.1 1252.84,1213.1 1253.43,1213.1 1254.02,1213.1 1254.6,1213.1 1255.19,1213.1 1255.78,1213.1 1256.36,1213.1 1256.95,1213.1 1257.53,1213.1 1258.12,1213.1 1258.71,1213.1 1259.29,1213.1 1259.88,1213.1 1260.47,1213.1 1261.05,1213.1 1261.64,1213.1 1262.23,1213.1 1262.81,1213.1 1263.4,1213.1 1263.98,1213.1 1264.57,1213.1 1265.16,1213.1 1265.74,1213.1 1266.33,1213.1 1266.92,1213.1 1267.5,1213.1 1268.09,1213.1 1268.68,1213.1 1269.26,1213.1 1269.85,1213.1 1270.44,1213.1 1271.02,1213.1 1271.61,1213.1 1272.19,1213.1 1272.78,1213.1 1273.37,1213.1 1273.95,1213.1 1274.54,1213.1 1275.13,1213.1 1275.71,1213.1 1276.3,1213.1 1276.89,1213.1 1277.47,1213.1 1278.06,1213.1 1278.65,1213.1 1279.23,1213.1 1279.82,1213.1 1280.4,1213.1 1280.99,1213.1 1281.58,1213.1 1282.16,1213.1 1282.75,1213.1 1283.34,1213.1 1283.92,1213.1 1284.51,1213.1 1285.1,1213.1 1285.68,1213.1 1286.27,1213.1 1286.86,1213.1 1287.44,1213.1 1288.03,1213.1 1288.61,1213.1 1289.2,1213.1 1289.79,1213.1 1290.37,1213.1 1290.96,1213.1 1291.55,1213.1 1292.13,1213.1 1292.72,1213.1 1293.31,1213.1 1293.89,1213.1 1294.48,1213.1 1295.06,1213.1 1295.65,1213.1 1296.24,1213.1 1296.82,1213.1 1297.41,1213.1 1298,1213.1 1298.58,1213.1 1299.17,1213.1 1299.76,1213.1 1300.34,1213.1 1300.93,1213.1 1301.52,1213.1 1302.1,1213.1 1302.69,1213.1 1303.27,1213.1 1303.86,1213.1 1304.45,1213.1 1305.03,1213.1 1305.62,1213.1 1306.21,1213.1 1306.79,1213.1 1307.38,1213.1 1307.97,1213.1 1308.55,1213.1 1309.14,1213.1 1309.73,1213.1 1310.31,1213.1 1310.9,1213.1 1311.48,1213.1 1312.07,1213.1 1312.66,1213.1 1313.24,1213.1 1313.83,1213.1 1314.42,1213.1 1315,1213.1 1315.59,1213.1 1316.18,1213.1 1316.76,1213.1 1317.35,1213.1 1317.93,1213.1 1318.52,1213.1 1319.11,1213.1 1319.69,1213.1 1320.28,1213.1 1320.87,1213.1 1321.45,1213.1 1322.04,1213.1 1322.63,1213.1 1323.21,1213.1 1323.8,1213.1 1324.39,1213.1 1324.97,1213.1 1325.56,1213.1 1326.14,1213.1 1326.73,1213.1 1327.32,1213.1 1327.9,1213.1 1328.49,1213.1 1329.08,1213.1 1329.66,1213.1 1330.25,1213.1 1330.84,1213.1 1331.42,1213.1 1332.01,1213.1 1332.6,1213.1 1333.18,1213.1 1333.77,1213.1 1334.35,1213.1 1334.94,1213.1 1335.53,1213.1 1336.11,1213.1 1336.7,1213.1 1337.29,1213.1 1337.87,1213.1 1338.46,1213.1 1339.05,1213.1 1339.63,1213.1 1340.22,1213.1 1340.8,1213.1 1341.39,1213.1 1341.98,1213.1 1342.56,1213.1 1343.15,1213.1 1343.74,1213.1 1344.32,1213.1 1344.91,1213.1 1345.5,1213.1 1346.08,1213.1 1346.67,1213.1 1347.26,1213.1 1347.84,1213.1 1348.43,1213.1 1349.01,1213.1 1349.6,1213.1 1350.19,1213.1 1350.77,1213.1 1351.36,1213.1 1351.95,1213.1 1352.53,1213.1 1353.12,1213.1 1353.71,1213.1 1354.29,1213.1 1354.88,1213.1 1355.47,1213.1 1356.05,1213.1 1356.64,1213.1 1357.22,1213.1 1357.81,1213.1 1358.4,1213.1 1358.98,1213.1 1359.57,1213.1 1360.16,1213.1 1360.74,1213.1 1361.33,1213.1 1361.92,1213.1 1362.5,1213.1 1363.09,1213.1 1363.68,1213.1 1364.26,1213.1 1364.85,1213.1 1365.43,1213.1 1366.02,1213.1 1366.61,1213.1 1367.19,1213.1 1367.78,1213.1 1368.37,1213.1 1368.95,1213.1 1369.54,1213.1 1370.13,1213.1 1370.71,1213.1 1371.3,1213.1 1371.88,1213.1 1372.47,1213.1 1373.06,1213.1 1373.64,1213.1 1374.23,1213.1 1374.82,1213.1 1375.4,1213.1 1375.99,1213.1 1376.58,1213.1 1377.16,1213.1 1377.75,1213.1 1378.34,1213.1 1378.92,1213.1 1379.51,1213.1 1380.09,1213.1 1380.68,1213.1 1381.27,1213.1 1381.85,1213.1 1382.44,1213.1 1383.03,1213.1 1383.61,1213.1 1384.2,1213.1 1384.79,1213.1 1385.37,1213.1 1385.96,1213.1 1386.55,1213.1 1387.13,1213.1 1387.72,1213.1 1388.3,1213.1 1388.89,1213.1 1389.48,1213.1 1390.06,1213.1 1390.65,1213.1 1391.24,1213.1 1391.82,1213.1 1392.41,1213.1 1393,1213.1 1393.58,1213.1 1394.17,1213.1 1394.75,1213.1 1395.34,1213.1 1395.93,1213.1 1396.51,1213.1 1397.1,1213.1 1397.69,1213.1 1398.27,1213.1 1398.86,1213.1 1399.45,1213.1 1400.03,1213.1 1400.62,1213.1 1401.21,1213.1 1401.79,1213.1 1402.38,1213.1 1402.96,1213.1 1403.55,1213.1 1404.14,1213.1 1404.72,1213.1 1405.31,1213.1 1405.9,1213.1 1406.48,1213.1 1407.07,1213.1 1407.66,1213.1 1408.24,1213.1 1408.83,1213.1 1409.42,1213.1 1410,1213.1 1410.59,1213.1 1411.17,1213.1 1411.76,1213.1 1412.35,1213.1 1412.93,1213.1 1413.52,1213.1 1414.11,1213.1 1414.69,1213.1 1415.28,1213.1 1415.87,1213.1 1416.45,1213.1 1417.04,1213.1 1417.63,1213.1 1418.21,1213.1 1418.8,1213.1 1419.38,1213.1 1419.97,1213.1 1420.56,1213.1 1421.14,1213.1 1421.73,1213.1 1422.32,1213.1 1422.9,1213.1 1423.49,1213.1 1424.08,1213.1 1424.66,1213.1 1425.25,1213.1 1425.83,1213.1 1426.42,1213.1 1427.01,1213.1 1427.59,1213.1 1428.18,1213.1 1428.77,1213.1 1429.35,1213.1 1429.94,1213.1 1430.53,1213.1 1431.11,1213.1 1431.7,1213.1 1432.29,1213.1 1432.87,1213.1 1433.46,1213.1 1434.04,1213.1 1434.63,1213.1 1435.22,1213.1 1435.8,1213.1 1436.39,1213.1 1436.98,1213.1 1437.56,1213.1 1438.15,1213.1 1438.74,1213.1 1439.32,1213.1 1439.91,1213.1 1440.5,1213.1 1441.08,1213.1 1441.67,1213.1 1442.25,1213.1 1442.84,1213.1 1443.43,1213.1 1444.01,1213.1 1444.6,1213.1 1445.19,1213.1 1445.77,1213.1 1446.36,1213.1 1446.95,1213.1 1447.53,1213.1 1448.12,1213.1 1448.7,1213.1 1449.29,1213.1 1449.88,1213.1 1450.46,1213.1 1451.05,1213.1 1451.64,1213.1 1452.22,1213.1 1452.81,1213.1 1453.4,1213.1 1453.98,1213.1 1454.57,1213.1 1455.16,1213.1 1455.74,1213.1 1456.33,1213.1 1456.91,1213.1 1457.5,1213.1 1458.09,1213.1 1458.67,1213.1 1459.26,1213.1 1459.85,1213.1 1460.43,1213.1 1461.02,1213.1 1461.61,1213.1 1462.19,1213.1 1462.78,1213.1 1463.37,1213.1 1463.95,1213.1 1464.54,1213.1 1465.12,1213.1 1465.71,1213.1 1466.3,1213.1 1466.88,1213.1 1467.47,1213.1 1468.06,1213.1 1468.64,1213.1 1469.23,1213.1 1469.82,1213.1 1470.4,1213.1 1470.99,1213.1 1471.57,1213.1 1472.16,1213.1 1472.75,1213.1 1473.33,1213.1 1473.92,1213.1 1474.51,1213.1 1475.09,1213.1 1475.68,1213.1 1476.27,1213.1 1476.85,1213.1 1477.44,1213.1 1478.03,1213.1 1478.61,1213.1 1479.2,1213.1 1479.78,1213.1 1480.37,1213.1 1480.96,1213.1 1481.54,1213.1 1482.13,1213.1 1482.72,1213.1 1483.3,1213.1 1483.89,1213.1 1484.48,1213.1 1485.06,1213.1 1485.65,1213.1 1486.24,1213.1 1486.82,1213.1 1487.41,1213.1 1487.99,1213.1 1488.58,1213.1 1489.17,1213.1 1489.75,1213.1 1490.34,1213.1 1490.93,1213.1 1491.51,1213.1 1492.1,1213.1 1492.69,1213.1 1493.27,1213.1 1493.86,1213.1 1494.45,1213.1 1495.03,1213.1 1495.62,1213.1 1496.2,1213.1 1496.79,1213.1 1497.38,1213.1 1497.96,1213.1 1498.55,1213.1 1499.14,1213.1 1499.72,1213.1 1500.31,1213.1 1500.9,1213.1 1501.48,1213.1 1502.07,1213.1 1502.65,1213.1 1503.24,1213.1 1503.83,1213.1 1504.41,1213.1 1505,1213.1 1505.59,1213.1 1506.17,1213.1 1506.76,1213.1 1507.35,1213.1 1507.93,1213.1 1508.52,1213.1 1509.11,1213.1 1509.69,1213.1 1510.28,1213.1 1510.86,1213.1 1511.45,1213.1 1512.04,1213.1 1512.62,1213.1 1513.21,1213.1 1513.8,1213.1 1514.38,1213.1 1514.97,1213.1 1515.56,1213.1 1516.14,1213.1 1516.73,1213.1 1517.32,1213.1 1517.9,1213.1 1518.49,1213.1 1519.07,1213.1 1519.66,1213.1 1520.25,1213.1 1520.83,1213.1 1521.42,1213.1 1522.01,1213.1 1522.59,1213.1 1523.18,1213.1 1523.77,1213.1 1524.35,1213.1 1524.94,1213.1 1525.52,1213.1 1526.11,1213.1 1526.7,1213.1 1527.28,1213.1 1527.87,1213.1 1528.46,1213.1 1529.04,1213.1 1529.63,1213.1 1530.22,1213.1 1530.8,1213.1 1531.39,1213.1 1531.98,1213.1 1532.56,1213.1 1533.15,1213.1 1533.73,1213.1 1534.32,1213.1 1534.91,1213.1 1535.49,1213.1 1536.08,1213.1 1536.67,1213.1 1537.25,1213.1 1537.84,1213.1 1538.43,1213.1 1539.01,1213.1 1539.6,1213.1 1540.19,1213.1 1540.77,1213.1 1541.36,1213.1 1541.94,1213.1 1542.53,1213.1 1543.12,1213.1 1543.7,1213.1 1544.29,1213.1 1544.88,1213.1 1545.46,1213.1 1546.05,1213.1 1546.64,1213.1 1547.22,1213.1 1547.81,1213.1 1548.4,1213.1 1548.98,1213.1 1549.57,1213.1 1550.15,1213.1 1550.74,1213.1 1551.33,1213.1 1551.91,1213.1 1552.5,1213.1 1553.09,1213.1 1553.67,1213.1 1554.26,1213.1 1554.85,1213.1 1555.43,1213.1 1556.02,1213.1 1556.6,1213.1 1557.19,1213.1 1557.78,1213.1 1558.36,1213.1 1558.95,1213.1 1559.54,1213.1 1560.12,1213.1 1560.71,1213.1 1561.3,1213.1 1561.88,1213.1 1562.47,1213.1 1563.06,1213.1 1563.64,1213.1 1564.23,1213.1 1564.81,1213.1 1565.4,1213.1 1565.99,1213.1 1566.57,1213.1 1567.16,1213.1 1567.75,1213.1 1568.33,1213.1 1568.92,1213.1 1569.51,1213.1 1570.09,1213.1 1570.68,1213.1 1571.27,1213.1 1571.85,1213.1 1572.44,1213.1 1573.02,1213.1 1573.61,1213.1 1574.2,1213.1 1574.78,1213.1 1575.37,1213.1 1575.96,1213.1 1576.54,1213.1 1577.13,1213.1 1577.72,1213.1 1578.3,1213.1 1578.89,1213.1 1579.47,1213.1 1580.06,1213.1 1580.65,1213.1 1581.23,1213.1 1581.82,1213.1 1582.41,1213.1 1582.99,1213.1 1583.58,1213.1 1584.17,1213.1 1584.75,1213.1 1585.34,1213.1 1585.93,1213.1 1586.51,1213.1 1587.1,1213.1 1587.68,1213.1 1588.27,1213.1 1588.86,1213.1 1589.44,1213.1 1590.03,1213.1 1590.62,1213.1 1591.2,1213.1 1591.79,1213.1 1592.38,1213.1 1592.96,1213.1 1593.55,1213.1 1594.14,1213.1 1594.72,1213.1 1595.31,1213.1 1595.89,1213.1 1596.48,1213.1 1597.07,1213.1 1597.65,1213.1 1598.24,1213.1 1598.83,1213.1 1599.41,1213.1 1600,1213.1 1600.59,1213.1 1601.17,1213.1 1601.76,1213.1 1602.34,1213.1 1602.93,1213.1 1603.52,1213.1 1604.1,1213.1 1604.69,1213.1 1605.28,1213.1 1605.86,1213.1 1606.45,1213.1 1607.04,1213.1 1607.62,1213.1 1608.21,1213.1 1608.8,1213.1 1609.38,1213.1 1609.97,1213.1 1610.55,1213.1 1611.14,1213.1 1611.73,1213.1 1612.31,1213.1 1612.9,1213.1 1613.49,1213.1 1614.07,1213.1 1614.66,1213.1 1615.25,1213.1 1615.83,1213.1 1616.42,1213.1 1617.01,1213.1 1617.59,1213.1 1618.18,1213.1 1618.76,1213.1 1619.35,1213.1 1619.94,1213.1 1620.52,1213.1 1621.11,1213.1 1621.7,1213.1 1622.28,1213.1 1622.87,1213.1 1623.46,1213.1 1624.04,1213.1 1624.63,1213.1 1625.22,1213.1 1625.8,1213.1 1626.39,1213.1 1626.97,1213.1 1627.56,1213.1 1628.15,1213.1 1628.73,1213.1 1629.32,1213.1 1629.91,1213.1 1630.49,1213.1 1631.08,1213.1 1631.67,1213.1 1632.25,1213.1 1632.84,1213.1 1633.42,1213.1 1634.01,1213.1 1634.6,1213.1 1635.18,1213.1 1635.77,1213.1 1636.36,1213.1 1636.94,1213.1 1637.53,1213.1 1638.12,1213.1 1638.7,1213.1 1639.29,1213.1 1639.88,1213.1 1640.46,1213.1 1641.05,1213.1 1641.63,1213.1 1642.22,1213.1 1642.81,1213.1 1643.39,1213.1 1643.98,1213.1 1644.57,1213.1 1645.15,1213.1 1645.74,1213.1 1646.33,1213.1 1646.91,1213.1 1647.5,1213.1 1648.09,1213.1 1648.67,1213.1 1649.26,1213.1 1649.84,1213.1 1650.43,1213.1 1651.02,1213.1 1651.6,1213.1 1652.19,1213.1 1652.78,1213.1 1653.36,1213.1 1653.95,1213.1 1654.54,1213.1 1655.12,1213.1 1655.71,1213.1 1656.29,1213.1 1656.88,1213.1 1657.47,1213.1 1658.05,1213.1 1658.64,1213.1 1659.23,1213.1 1659.81,1213.1 1660.4,1213.1 1660.99,1213.1 1661.57,1213.1 1662.16,1213.1 1662.75,1213.1 1663.33,1213.1 1663.92,1213.1 1664.5,1213.1 1665.09,1213.1 1665.68,1213.1 1666.26,1213.1 1666.85,1213.1 1667.44,1213.1 1668.02,1213.1 1668.61,1213.1 1669.2,1213.1 1669.78,1213.1 1670.37,1213.1 1670.96,1213.1 1671.54,1213.1 1672.13,1213.1 1672.71,1213.1 1673.3,1213.1 1673.89,1213.1 1674.47,1213.1 1675.06,1213.1 1675.65,1213.1 1676.23,1213.1 1676.82,1213.1 1677.41,1213.1 1677.99,1213.1 1678.58,1213.1 1679.17,1213.1 1679.75,1213.1 1680.34,1213.1 1680.92,1213.1 1681.51,1213.1 1682.1,1213.1 1682.68,1213.1 1683.27,1213.1 1683.86,1213.1 1684.44,1213.1 1685.03,1213.1 1685.62,1213.1 1686.2,1213.1 1686.79,1213.1 1687.37,1213.1 1687.96,1213.1 1688.55,1213.1 1689.13,1213.1 1689.72,1213.1 1690.31,1213.1 1690.89,1213.1 1691.48,1213.1 1692.07,1213.1 1692.65,1213.1 1693.24,1213.1 1693.83,1213.1 1694.41,1213.1 1695,1213.1 1695.58,1213.1 1696.17,1213.1 1696.76,1213.1 1697.34,1213.1 1697.93,1213.1 1698.52,1213.1 1699.1,1213.1 1699.69,1213.1 1700.28,1213.1 1700.86,1213.1 1701.45,1213.1 1702.04,1213.1 1702.62,1213.1 1703.21,1213.1 1703.79,1213.1 1704.38,1213.1 1704.97,1213.1 1705.55,1213.1 1706.14,1213.1 1706.73,1213.1 1707.31,1213.1 1707.9,1213.1 1708.49,1213.1 1709.07,1213.1 1709.66,1213.1 1710.24,1213.1 1710.83,1213.1 1711.42,1213.1 1712,1213.1 1712.59,1213.1 1713.18,1213.1 1713.76,1213.1 1714.35,1213.1 1714.94,1213.1 1715.52,1213.1 1716.11,1213.1 1716.7,1213.1 1717.28,1213.1 1717.87,1213.1 1718.45,1213.1 1719.04,1213.1 1719.63,1213.1 1720.21,1213.1 1720.8,1213.1 1721.39,1213.1 1721.97,1213.1 1722.56,1213.1 1723.15,1213.1 1723.73,1213.1 1724.32,1213.1 1724.91,1213.1 1725.49,1213.1 1726.08,1213.1 1726.66,1213.1 1727.25,1213.1 1727.84,1213.1 1728.42,1213.1 1729.01,1213.1 1729.6,1213.1 1730.18,1213.1 1730.77,1213.1 1731.36,1213.1 1731.94,1213.1 1732.53,1213.1 1733.11,1213.1 1733.7,1213.1 1734.29,1213.1 1734.87,1213.1 1735.46,1213.1 1736.05,1213.1 1736.63,1213.1 1737.22,1213.1 1737.81,1213.1 1738.39,1213.1 1738.98,1213.1 1739.57,1213.1 1740.15,1213.1 1740.74,1213.1 1741.32,1213.1 1741.91,1213.1 1742.5,1213.1 1743.08,1213.1 1743.67,1213.1 1744.26,1213.1 1744.84,1213.1 1745.43,1213.1 1746.02,1213.1 1746.6,1213.1 1747.19,1213.1 1747.78,1213.1 1748.36,1213.1 1748.95,1213.1 1749.53,1213.1 1750.12,1213.1 1750.71,1213.1 1751.29,1213.1 1751.88,1213.1 1752.47,1213.1 1753.05,1213.1 1753.64,1213.1 1754.23,1213.1 1754.81,1213.1 1755.4,1213.1 1755.99,1213.1 1756.57,1213.1 1757.16,1213.1 1757.74,1213.1 1758.33,1213.1 1758.92,1213.1 1759.5,1213.1 1760.09,1213.1 1760.68,1213.1 1761.26,1213.1 1761.85,1213.1 1762.44,1213.1 1763.02,1213.1 1763.61,1213.1 1764.19,1213.1 1764.78,1213.1 1765.37,1213.1 1765.95,1213.1 1766.54,1213.1 1767.13,1213.1 1767.71,1213.1 1768.3,1213.1 1768.89,1213.1 1769.47,1213.1 1770.06,1213.1 1770.65,1213.1 1771.23,1213.1 1771.82,1213.1 1772.4,1213.1 1772.99,1213.1 1773.58,1213.1 1774.16,1213.1 1774.75,1213.1 1775.34,1213.1 1775.92,1213.1 1776.51,1213.1 1777.1,1213.1 1777.68,1213.1 1778.27,1213.1 1778.86,1213.1 1779.44,1213.1 1780.03,1213.1 1780.61,1213.1 1781.2,1213.1 1781.79,1213.1 1782.37,1213.1 1782.96,1213.1 1783.55,1213.1 1784.13,1213.1 1784.72,1213.1 1785.31,1213.1 1785.89,1213.1 1786.48,1213.1 1787.06,1213.1 1787.65,1213.1 1788.24,1213.1 1788.82,1213.1 1789.41,1213.1 1790,1213.1 1790.58,1213.1 1791.17,1213.1 1791.76,1213.1 1792.34,1213.1 1792.93,1213.1 1793.52,1213.1 1794.1,1213.1 1794.69,1213.1 1795.27,1213.1 1795.86,1213.1 1796.45,1213.1 1797.03,1213.1 1797.62,1213.1 1798.21,1213.1 1798.79,1213.1 1799.38,1213.1 1799.97,1213.1 1800.55,1213.1 1801.14,1213.1 1801.73,1213.1 1802.31,1213.1 1802.9,1213.1 1803.48,1213.1 1804.07,1213.1 1804.66,1213.1 1805.24,1213.1 1805.83,1213.1 1806.42,1213.1 1807,1213.1 1807.59,1213.1 1808.18,1213.1 1808.76,1213.1 1809.35,1213.1 1809.94,1213.1 1810.52,1213.1 1811.11,1213.1 1811.69,1213.1 1812.28,1213.1 1812.87,1213.1 1813.45,1213.1 1814.04,1213.1 1814.63,1213.1 1815.21,1213.1 1815.8,1213.1 1816.39,1213.1 1816.97,1213.1 1817.56,1213.1 1818.14,1213.1 1818.73,1213.1 1819.32,1213.1 1819.9,1213.1 1820.49,1213.1 1821.08,1213.1 1821.66,1213.1 1822.25,1213.1 1822.84,1213.1 1823.42,1213.1 1824.01,1213.1 1824.6,1213.1 1825.18,1213.1 1825.77,1213.1 1826.35,1213.1 1826.94,1213.1 1827.53,1213.1 1828.11,1213.1 1828.7,1213.1 1829.29,1213.1 1829.87,1213.1 1830.46,1213.1 1831.05,1213.1 1831.63,1213.1 1832.22,1213.1 1832.81,1213.1 1833.39,1213.1 1833.98,1213.1 1834.56,1213.1 1835.15,1213.1 1835.74,1213.1 1836.32,1213.1 1836.91,1213.1 1837.5,1213.1 1838.08,1213.1 1838.67,1213.1 1839.26,1213.1 1839.84,1213.1 1840.43,1213.1 1841.01,1213.1 1841.6,1213.1 1842.19,1213.1 1842.77,1213.1 1843.36,1213.1 1843.95,1213.1 1844.53,1213.1 1845.12,1213.1 1845.71,1213.1 1846.29,1213.1 1846.88,1213.1 1847.47,1213.1 1848.05,1213.1 1848.64,1213.1 1849.22,1213.1 1849.81,1213.1 1850.4,1213.1 1850.98,1213.1 1851.57,1213.1 1852.16,1213.1 1852.74,1213.1 1853.33,1213.1 1853.92,1213.1 1854.5,1213.1 1855.09,1213.1 1855.68,1213.1 1856.26,1213.1 1856.85,1213.1 1857.43,1213.1 1858.02,1213.1 1858.61,1213.1 1859.19,1213.1 1859.78,1213.1 1860.37,1213.1 1860.95,1213.1 1861.54,1213.1 1862.13,1213.1 1862.71,1213.1 1863.3,1213.1 1863.88,1213.1 1864.47,1213.1 1865.06,1213.1 1865.64,1213.1 1866.23,1213.1 1866.82,1213.1 1867.4,1213.1 1867.99,1213.1 1868.58,1213.1 1869.16,1213.1 1869.75,1213.1 1870.34,1213.1 1870.92,1213.1 1871.51,1213.1 1872.09,1213.1 1872.68,1213.1 1873.27,1213.1 1873.85,1213.1 1874.44,1213.1 1875.03,1213.1 1875.61,1213.1 1876.2,1213.1 1876.79,1213.1 1877.37,1213.1 1877.96,1213.1 1878.55,1213.1 1879.13,1213.1 1879.72,1213.1 1880.3,1213.1 1880.89,1213.1 1881.48,1213.1 1882.06,1213.1 1882.65,1213.1 1883.24,1213.1 1883.82,1213.1 1884.41,1213.1 1885,1213.1 1885.58,1213.1 1886.17,1213.1 1886.76,1213.1 1887.34,1213.1 1887.93,1213.1 1888.51,1213.1 1889.1,1213.1 1889.69,1213.1 1890.27,1213.1 1890.86,1213.1 1891.45,1213.1 1892.03,1213.1 1892.62,1213.1 1893.21,1213.1 1893.79,1213.1 1894.38,1213.1 1894.96,1213.1 1895.55,1213.1 1896.14,1213.1 1896.72,1213.1 1897.31,1213.1 1897.9,1213.1 1898.48,1213.1 1899.07,1213.1 1899.66,1213.1 1900.24,1213.1 1900.83,1213.1 1901.42,1213.1 1902,1213.1 1902.59,1213.1 1903.17,1213.1 1903.76,1213.1 1904.35,1213.1 1904.93,1213.1 1905.52,1213.1 1906.11,1213.1 1906.69,1213.1 1907.28,1213.1 1907.87,1213.1 1908.45,1213.1 1909.04,1213.1 1909.63,1213.1 1910.21,1213.1 1910.8,1213.1 1911.38,1213.1 1911.97,1213.1 1912.56,1213.1 1913.14,1213.1 1913.73,1213.1 1914.32,1213.1 1914.9,1213.1 1915.49,1213.1 1916.08,1213.1 1916.66,1213.1 1917.25,1213.1 1917.83,1213.1 1918.42,1213.1 1919.01,1213.1 1919.59,1213.1 1920.18,1213.1 1920.77,1213.1 1921.35,1213.1 1921.94,1213.1 1922.53,1213.1 1923.11,1213.1 1923.7,1213.1 1924.29,1213.1 1924.87,1213.1 1925.46,1213.1 1926.04,1213.1 1926.63,1213.1 1927.22,1213.1 1927.8,1213.1 1928.39,1213.1 1928.98,1213.1 1929.56,1213.1 1930.15,1213.1 1930.74,1213.1 1931.32,1213.1 1931.91,1213.1 1932.5,1213.1 1933.08,1213.1 1933.67,1213.1 1934.25,1213.1 1934.84,1213.1 1935.43,1213.1 1936.01,1213.1 1936.6,1213.1 1937.19,1213.1 1937.77,1213.1 1938.36,1213.1 1938.95,1213.1 1939.53,1213.1 1940.12,1213.1 1940.71,1213.1 1941.29,1213.1 1941.88,1213.1 1942.46,1213.1 1943.05,1213.1 1943.64,1213.1 1944.22,1213.1 1944.81,1213.1 1945.4,1213.1 1945.98,1213.1 1946.57,1213.1 1947.16,1213.1 1947.74,1213.1 1948.33,1213.1 1948.91,1213.1 1949.5,1213.1 1950.09,1213.1 1950.67,1213.1 1951.26,1213.1 1951.85,1213.1 1952.43,1213.1 1953.02,1213.1 1953.61,1213.1 1954.19,1213.1 1954.78,1213.1 1955.37,1213.1 1955.95,1213.1 1956.54,1213.1 1957.12,1213.1 1957.71,1213.1 1958.3,1213.1 1958.88,1213.1 1959.47,1213.1 1960.06,1213.1 1960.64,1213.1 1961.23,1213.1 1961.82,1213.1 1962.4,1213.1 1962.99,1213.1 1963.58,1213.1 1964.16,1213.1 1964.75,1213.1 1965.33,1213.1 1965.92,1213.1 1966.51,1213.1 1967.09,1213.1 1967.68,1213.1 1968.27,1213.1 1968.85,1213.1 1969.44,1213.1 1970.03,1213.1 1970.61,1213.1 1971.2,1213.1 1971.78,1213.1 1972.37,1213.1 1972.96,1213.1 1973.54,1213.1 1974.13,1213.1 1974.72,1213.1 1975.3,1213.1 1975.89,1213.1 1976.48,1213.1 1977.06,1213.1 1977.65,1213.1 1978.24,1213.1 1978.82,1213.1 1979.41,1213.1 1979.99,1213.1 1980.58,1213.1 1981.17,1213.1 1981.75,1213.1 1982.34,1213.1 1982.93,1213.1 1983.51,1213.1 1984.1,1213.1 1984.69,1213.1 1985.27,1213.1 1985.86,1213.1 1986.45,1213.1 1987.03,1213.1 1987.62,1213.1 1988.2,1213.1 1988.79,1213.1 1989.38,1213.1 1989.96,1213.1 1990.55,1213.1 1991.14,1213.1 1991.72,1213.1 1992.31,1213.1 1992.9,1213.1 1993.48,1213.1 1994.07,1213.1 1994.65,1213.1 1995.24,1213.1 1995.83,1213.1 1996.41,1213.1 1997,1213.1 1997.59,1213.1 1998.17,1213.1 1998.76,1213.1 1999.35,1213.1 1999.93,1213.1 2000.52,1213.1 2001.11,1213.1 2001.69,1213.1 2002.28,1213.1 2002.86,1213.1 2003.45,1213.1 2004.04,1213.1 2004.62,1213.1 2005.21,1213.1 2005.8,1213.1 2006.38,1213.1 2006.97,1213.1 2007.56,1213.1 2008.14,1213.1 2008.73,1213.1 2009.32,1213.1 2009.9,1213.1 2010.49,1213.1 2011.07,1213.1 2011.66,1213.1 2012.25,1213.1 2012.83,1213.1 2013.42,1213.1 2014.01,1213.1 2014.59,1213.1 2015.18,1213.1 2015.77,1213.1 2016.35,1213.1 2016.94,1213.1 2017.53,1213.1 2018.11,1213.1 2018.7,1213.1 2019.28,1213.1 2019.87,1213.1 2020.46,1213.1 2021.04,1213.1 2021.63,1213.1 2022.22,1213.1 2022.8,1213.1 2023.39,1213.1 2023.98,1213.1 2024.56,1213.1 2025.15,1213.1 2025.73,1213.1 2026.32,1213.1 2026.91,1213.1 2027.49,1213.1 2028.08,1213.1 2028.67,1213.1 2029.25,1213.1 2029.84,1213.1 2030.43,1213.1 2031.01,1213.1 2031.6,1213.1 2032.19,1213.1 2032.77,1213.1 2033.36,1213.1 2033.94,1213.1 2034.53,1213.1 2035.12,1213.1 2035.7,1213.1 2036.29,1213.1 2036.88,1213.1 2037.46,1213.1 2038.05,1213.1 2038.64,1213.1 2039.22,1213.1 2039.81,1213.1 2040.4,1213.1 2040.98,1213.1 2041.57,1213.1 2042.15,1213.1 2042.74,1213.1 2043.33,1213.1 2043.91,1213.1 2044.5,1213.1 2045.09,1213.1 2045.67,1213.1 2046.26,1213.1 2046.85,1213.1 2047.43,1213.1 2048.02,1213.1 2048.6,1213.1 2049.19,1213.1 2049.78,1213.1 2050.36,1213.1 2050.95,1213.1 2051.54,1213.1 2052.12,1213.1 2052.71,1213.1 2053.3,1213.1 2053.88,1213.1 2054.47,1213.1 2055.06,1213.1 2055.64,1213.1 2056.23,1213.1 2056.81,1213.1 2057.4,1213.1 2057.99,1213.1 2058.57,1213.1 2059.16,1213.1 2059.75,1213.1 2060.33,1213.1 2060.92,1213.1 2061.51,1213.1 2062.09,1213.1 2062.68,1213.1 2063.27,1213.1 2063.85,1213.1 2064.44,1213.1 2065.02,1213.1 2065.61,1213.1 2066.2,1213.1 2066.78,1213.1 2067.37,1213.1 2067.96,1213.1 2068.54,1213.1 2069.13,1213.1 2069.72,1213.1 2070.3,1213.1 2070.89,1213.1 2071.48,1213.1 2072.06,1213.1 2072.65,1213.1 2073.23,1213.1 2073.82,1213.1 2074.41,1213.1 2074.99,1213.1 2075.58,1213.1 2076.17,1213.1 2076.75,1213.1 2077.34,1213.1 2077.93,1213.1 2078.51,1213.1 2079.1,1213.1 2079.68,1213.1 2080.27,1213.1 2080.86,1213.1 2081.44,1213.1 2082.03,1213.1 2082.62,1213.1 2083.2,1213.1 2083.79,1213.1 2084.38,1213.1 2084.96,1213.1 2085.55,1213.1 2086.14,1213.1 2086.72,1213.1 2087.31,1213.1 2087.89,1213.1 2088.48,1213.1 2089.07,1213.1 2089.65,1213.1 2090.24,1213.1 2090.83,1213.1 2091.41,1213.1 2092,1213.1 2092.59,1213.1 2093.17,1213.1 2093.76,1213.1 2094.35,1213.1 2094.93,1213.1 2095.52,1213.1 2096.1,1213.1 2096.69,1213.1 2097.28,1213.1 2097.86,1213.1 2098.45,1213.1 2099.04,1213.1 2099.62,1213.1 2100.21,1213.1 2100.8,1213.1 2101.38,1213.1 2101.97,1213.1 2102.55,1213.1 2103.14,1213.1 2103.73,1213.1 2104.31,1213.1 2104.9,1213.1 2105.49,1213.1 2106.07,1213.1 2106.66,1213.1 2107.25,1213.1 2107.83,1213.1 2108.42,1213.1 2109.01,1213.1 2109.59,1213.1 2110.18,1213.1 2110.76,1213.1 2111.35,1213.1 2111.94,1213.1 2112.52,1213.1 2113.11,1213.1 2113.7,1213.1 2114.28,1213.1 2114.87,1213.1 2115.46,1213.1 2116.04,1213.1 2116.63,1213.1 2117.22,1213.1 2117.8,1213.1 2118.39,1213.1 2118.97,1213.1 2119.56,1213.1 2120.15,1213.1 2120.73,1213.1 2121.32,1213.1 2121.91,1213.1 2122.49,1213.1 2123.08,1213.1 2123.67,1213.1 2124.25,1213.1 2124.84,1213.1 2125.42,1213.1 2126.01,1213.1 2126.6,1213.1 2127.18,1213.1 2127.77,1213.1 2128.36,1213.1 2128.94,1213.1 2129.53,1213.1 2130.12,1213.1 2130.7,1213.1 2131.29,1213.1 2131.88,1213.1 2132.46,1213.1 2133.05,1213.1 2133.63,1213.1 2134.22,1213.1 2134.81,1213.1 2135.39,1213.1 2135.98,1213.1 2136.57,1213.1 2137.15,1213.1 2137.74,1213.1 2138.33,1213.1 2138.91,1213.1 2139.5,1213.1 2140.09,1213.1 2140.67,1213.1 2141.26,1213.1 2141.84,1213.1 2142.43,1213.1 2143.02,1213.1 2143.6,1213.1 2144.19,1213.1 2144.78,1213.1 2145.36,1213.1 2145.95,1213.1 2146.54,1213.1 2147.12,1213.1 2147.71,1213.1 2148.3,1213.1 2148.88,1213.1 2149.47,1213.1 2150.05,1213.1 2150.64,1213.1 2151.23,1213.1 2151.81,1213.1 2152.4,1213.1 2152.99,1213.1 2153.57,1213.1 2154.16,1213.1 2154.75,1213.1 2155.33,1213.1 2155.92,1213.1 2156.5,1213.1 2157.09,1213.1 2157.68,1213.1 2158.26,1213.1 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.74,1196.35 1399.17,899.083 \"/>\n<polyline clip-path=\"url(#clip322)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.46 985.439,1196.35 2158.26,1196.35 2158.26,1229.46 985.439,1229.46 \"/>\n<path clip-path=\"url(#clip320)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip320)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip320)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip320)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip320)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip320)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip323\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip323)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip323)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip323)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip323)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip323)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip320)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip323)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip323)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip323)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip323)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip323)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip320)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip320)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip320)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip323)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-7593.95 165.469,-8362.8 166.029,-9061.26 166.588,-8617.66 167.147,-9235.72 167.706,-9791.94 168.266,-10276 168.825,-10721.1 169.384,-11115.6 169.943,-11448.1 170.503,-11751.9 171.062,-12014.3 171.621,-12238.2 172.18,-12426 172.74,-11475.8 173.299,-11635.4 173.858,-11756.3 174.417,-11857.5 174.977,-11916.7 175.536,-11967.8 176.095,-11990.6 176.655,-11976.4 177.214,-11640.1 177.773,-11616.1 178.332,-11566.3 178.892,-10977.4 179.451,-10663.9 180.01,-10356.8 180.569,-10059.3 181.129,-9791.39 181.688,-9708.12 182.247,-9438.1 182.806,-9335.26 183.366,-9225.43 183.925,-9091.09 184.484,-8823.7 185.043,-8699.63 185.603,-8574.53 186.162,-8439.1 186.721,-8182.92 187.28,-8042.89 187.84,-7802.86 188.399,-7545.24 188.958,-7398.58 189.517,-7258 190.077,-6857.35 190.636,-6721.7 191.195,-6428.32 191.754,-6300.16 192.314,-6030.59 192.873,-5827.43 193.432,-5694.8 193.991,-5435.68 194.551,-5191.01 195.11,-4950.66 195.669,-4846.21 196.228,-4524.03 196.788,-4372.16 197.347,-4173.76 197.906,-4033.32 198.465,-3936.29 199.025,-3834.44 199.584,-3693.18 200.143,-3603.3 200.702,-3425.19 201.262,-3294.51 201.821,-3126.44 202.38,-2930.03 202.939,-2738.92 203.499,-2631.81 204.058,-2529.37 204.617,-2392.77 205.176,-2263.04 205.736,-2169.19 206.295,-2110.63 206.854,-1983.15 207.413,-1863.66 207.973,-1809.5 208.532,-1693.63 209.091,-1556.33 209.65,-1453.92 210.21,-1443.17 210.769,-1367.98 211.328,-1322.66 211.887,-1306.38 212.447,-1260.36 213.006,-1189.59 213.565,-1145.93 214.124,-1101.23 214.684,-1002.97 215.243,-879.353 215.802,-840.402 216.361,-773.498 216.921,-711.839 217.48,-647.977 218.039,-515.599 218.598,-481.368 219.158,-401.511 219.717,-347.056 220.276,-320.013 220.835,-270.506 221.395,-242.147 221.954,-193.388 222.513,-123.294 223.072,-99.8477 223.632,-78.3118 224.191,-9.76648 224.75,75.4671 225.309,136.275 225.869,238.37 226.428,317.157 226.987,369.264 227.546,375.863 228.106,426.329 228.665,472.921 229.224,495.476 229.783,516.64 230.343,563.589 230.902,603.681 231.461,666.542 232.02,701.336 232.58,778.172 233.139,795.091 233.698,809.199 234.257,806.282 234.817,837.543 235.376,850.719 235.935,845.01 236.494,861.666 237.054,874.034 237.613,867.872 238.172,867.056 238.731,881.004 239.291,898.736 239.85,893.625 240.409,942.047 240.968,949.516 241.528,958.264 242.087,951.477 242.646,946.05 243.205,991.509 243.765,1001.34 244.324,1028.16 244.883,1033.08 245.442,1038.98 246.002,1097.7 246.561,1104.28 247.12,1073.61 247.679,1080.7 248.239,1105.59 248.798,1040.02 249.357,1064.48 249.916,1054.93 250.476,1080.16 251.035,1036.6 251.594,1084.37 252.153,1072.5 252.713,1099.84 253.272,1123.22 253.831,1131.82 254.39,1120.08 254.95,1091.4 255.509,1099.01 256.068,1088.81 256.627,1046.33 257.187,1020.61 257.746,1066.97 258.305,1057.34 258.864,1052.7 259.424,1034.04 259.983,1028.52 260.542,1039.24 261.101,1016.58 261.661,1010.21 262.22,1022.86 262.779,1035.65 263.338,1050.76 263.898,1065.41 264.457,1111.91 265.016,1106.52 265.575,1099.66 266.135,1111.15 266.694,1106.62 267.253,1148.58 267.812,1159.3 268.372,1147.9 268.931,1137.25 269.49,1167.2 270.049,1135.3 270.609,1108.42 271.168,1151.07 271.727,1173.78 272.286,1165.91 272.846,1174.91 273.405,1147.67 273.964,1155.92 274.523,1162.83 275.083,1151.61 275.642,1177.22 276.201,1166.41 276.76,1139.48 277.32,1146.76 277.879,1152.75 278.438,1143.15 278.997,1116.51 279.557,1073.04 280.116,1066.16 280.675,1078.57 281.234,1089.25 281.794,1051.13 282.353,1046.25 282.912,1022.07 283.471,1035.59 284.031,1061.09 284.59,1021.85 285.149,1020.33 285.708,1050.12 286.268,1059.98 286.827,1050.7 287.386,1026.6 287.945,1020.08 288.505,1018.9 289.064,1017.5 289.623,1029.01 290.182,1008.14 290.742,989.941 291.301,1001.96 291.86,1000.92 292.419,997.872 292.979,962.044 293.538,977.815 294.097,959.598 294.656,993.111 295.216,973.874 295.775,972.893 296.334,955.21 296.893,969.64 297.453,950.429 298.012,949.441 298.571,933.274 299.13,917.602 299.69,966.689 300.249,1030.13 300.808,1024.77 301.368,1020.58 301.927,999.619 302.486,1026.29 303.045,1054.66 303.605,1034.02 304.164,1042.63 304.723,1032.6 305.282,1010.84 305.842,989.739 306.401,983.106 306.96,982.284 307.519,964.546 308.079,976.945 308.638,991.248 309.197,1001.3 309.756,1029.04 310.316,1042.73 310.875,1054.23 311.434,1080.05 311.993,1052.77 312.553,1058.33 313.112,1049.89 313.671,1024.89 314.23,1033.07 314.79,1025.14 315.349,1050.69 315.908,1042.57 316.467,1000.29 317.027,992.294 317.586,1021.56 318.145,1013.63 318.704,1010.08 319.264,1019.62 319.823,1033.07 320.382,1024.9 320.941,1030.22 321.501,1021.57 322.06,1012.7 322.619,1020.55 323.178,1047.22 323.738,1037.45 324.297,1033.77 324.856,1023.5 325.415,1048.81 325.975,1072.87 326.534,1043.22 327.093,1033.3 327.652,1024.24 328.212,1035.67 328.771,1077.96 329.33,1100.84 329.889,1121.96 330.449,1126.29 331.008,1111.12 331.567,1083.31 332.126,1040.95 332.686,1050.54 333.245,1042.22 333.804,1048.38 334.363,1009.28 334.923,983.049 335.482,990.436 336.041,1001.88 336.6,995.278 337.16,991.612 337.719,967.392 338.278,976.428 338.837,972.268 339.397,963.723 339.956,925.282 340.515,921.884 341.074,884.298 341.634,880.26 342.193,893.994 342.752,874.079 343.311,857.951 343.871,859.289 344.43,861.358 344.989,858.082 345.548,839.658 346.108,857.188 346.667,857.405 347.226,807.991 347.785,809.346 348.345,794.733 348.904,813.096 349.463,814.614 350.022,850.233 350.582,866.961 351.141,863.926 351.7,828.329 352.259,845.064 352.819,858.212 353.378,857.672 353.937,874.867 354.496,891.716 355.056,901.985 355.615,897.523 356.174,894.504 356.733,924.872 357.293,935.507 357.852,932.34 358.411,942.093 358.97,919.682 359.53,926.295 360.089,922.661 360.648,932.579 361.207,961.33 361.767,939.656 362.326,931.86 362.885,908.136 363.444,902.505 364.004,930.955 364.563,938.205 365.122,950.843 365.681,926.091 366.241,887.361 366.8,883.163 367.359,879.08 367.918,907.325 368.478,918.793 369.037,931.238 369.596,956.095 370.155,984.191 370.715,972.699 371.274,999.685 371.833,975.184 372.392,969.749 372.952,961.814 373.511,921.031 374.07,882.008 374.629,844.238 375.189,902.859 375.748,909.145 376.307,919.368 376.866,896.193 377.426,891.266 377.985,902.678 378.544,862.004 379.103,890.992 379.663,868.581 380.222,864.441 380.781,878.663 381.34,843.408 381.9,845.999 382.459,877.134 383.018,861.983 383.577,860.107 384.137,839.689 384.696,792.635 385.255,813.678 385.814,797.474 386.374,797 386.933,810.327 387.492,747.753 388.051,769.999 388.611,772.354 389.17,786.201 389.729,805.103 390.288,754.107 390.848,757.369 391.407,808.319 391.966,871.282 392.525,850.653 393.085,847.302 393.644,876.731 394.203,873.676 394.762,887.991 395.322,898.742 395.881,875.856 396.44,867.676 396.999,860.713 397.559,857.585 398.118,871.965 398.677,837.276 399.236,815.464 399.796,777.198 400.355,780.654 400.914,764.149 401.473,765.232 402.033,782.612 402.592,794.751 403.151,774.734 403.71,772.746 404.27,772.362 404.829,790.97 405.388,773.778 405.947,759.186 406.507,761.322 407.066,712.89 407.625,716.205 408.184,718.333 408.744,690.753 409.303,694.255 409.862,730.626 410.421,716.431 410.981,787.368 411.54,753.703 412.099,756.863 412.658,770.794 413.218,720.327 413.777,738.49 414.336,771.805 414.895,789.536 415.455,820.064 416.014,852.171 416.573,830.785 417.132,828.279 417.692,824.944 418.251,823.418 418.81,854.331 419.369,871.161 419.929,898.971 420.488,876.211 421.047,904.717 421.606,947.151 422.166,940.748 422.725,946.239 423.284,949.158 423.843,890.013 424.403,913.057 424.962,920.514 425.521,911.155 426.08,885.564 426.64,898.668 427.199,906.203 427.758,894.604 428.318,922.738 428.877,896.17 429.436,841.038 429.995,837.481 430.555,844.68 431.114,840.66 431.673,819.732 432.232,804.386 432.792,802.588 433.351,801.284 433.91,766.618 434.469,782.923 435.029,779.735 435.588,812.779 436.147,807.355 436.706,786.732 437.266,785.901 437.825,785.525 438.384,781.336 438.943,763.407 439.503,745.715 440.062,728.532 440.621,743.81 441.18,706.041 441.74,692.794 442.299,713.564 442.858,685.264 443.417,701.279 443.977,700.665 444.536,702.598 445.095,721.006 445.654,723.45 446.214,723.499 446.773,740.939 447.332,743.251 447.891,743.99 448.451,726.788 449.01,712.897 449.569,700.88 450.128,687.123 450.688,693.913 451.247,698.914 451.806,719.285 452.365,800.463 452.925,764.297 453.484,765.434 454.043,761.819 454.602,744.714 455.162,779.142 455.721,743.83 456.28,761.809 456.839,762.34 457.399,747.166 457.958,749.025 458.517,749.437 459.076,750.079 459.636,736.899 460.195,703.998 460.754,705.404 461.313,724.192 461.873,740.258 462.432,742.814 462.991,743.715 463.55,744.682 464.11,710.142 464.669,726.663 465.228,729.11 465.787,746.982 466.347,763.539 466.906,765.771 467.465,752.522 468.024,753.012 468.584,784.004 469.143,817.871 469.702,815.456 470.261,823.273 470.821,802.929 471.38,816.472 471.939,750.5 472.498,750.384 473.058,778.646 473.617,791.386 474.176,770.251 474.735,751.552 475.295,780.112 475.854,777.278 476.413,790.225 476.972,769.845 477.532,784.68 478.091,779.919 478.65,777.111 479.209,773.734 479.769,756.163 480.328,755.666 480.887,786.526 481.446,783.952 482.006,784.62 482.565,798.2 483.124,796.42 483.683,779.849 484.243,779.887 484.802,779.877 485.361,760.54 485.92,758.997 486.48,759.935 487.039,760.694 487.598,743.383 488.157,746.029 488.717,776.927 489.276,777.2 489.835,810.43 490.394,794.179 490.954,793.282 491.513,823.567 492.072,820.064 492.631,850.979 493.191,860.318 493.75,903.314 494.309,908.306 494.868,899.004 495.428,886.977 495.987,878.085 496.546,889.23 497.105,879.669 497.665,874 498.224,849.991 498.783,846.423 499.342,824.903 499.902,836.059 500.461,827.475 501.02,853.421 501.579,832.574 502.139,810.529 502.698,852.283 503.257,859.918 503.816,786.972 504.376,815.381 504.935,843.619 505.494,855.687 506.053,832.466 506.613,861.64 507.172,823.022 507.731,818.681 508.29,813.383 508.85,809.16 509.409,756.246 509.968,771.563 510.527,768.842 511.087,782.111 511.646,779.069 512.205,773.696 512.764,771.867 513.324,752.923 513.883,763.467 514.442,765.341 515.001,746.976 515.561,743.882 516.12,742.997 516.679,723.896 517.238,740.309 517.798,722.485 518.357,738.571 518.916,735.966 519.475,735.283 520.035,734.764 520.594,749.388 521.153,746.245 521.712,761.035 522.272,743.632 522.831,726.543 523.39,728.928 523.949,728.541 524.509,678.352 525.068,682.693 525.627,673.959 526.186,693.689 526.746,716.012 527.305,701.843 527.864,721.731 528.423,756.398 528.983,772.118 529.542,742.877 530.101,743.195 530.66,722.838 531.22,722.562 531.779,694.678 532.338,696.425 532.897,682.391 533.457,704.591 534.016,691.883 534.575,659.974 535.134,664.204 535.694,651.862 536.253,659.255 536.812,697.585 537.371,717.959 537.931,717.18 538.49,716.704 539.049,682.277 539.608,665.885 540.168,685.295 540.727,687.178 541.286,639.117 541.845,612.221 542.405,619.036 542.964,627.532 543.523,647.169 544.082,647.985 544.642,653.093 545.201,645.188 545.76,632.745 546.319,622.577 546.879,612.334 547.438,617.838 547.997,637.113 548.556,640.855 549.116,647.183 549.675,666.813 550.234,652.809 550.793,641.244 551.353,628.452 551.912,665.913 552.471,670.334 553.031,657.165 553.59,695.254 554.149,679.534 554.708,665.779 555.268,669.442 555.827,688.795 556.386,708.607 556.945,692.762 557.505,695.022 558.064,681.82 558.623,730.289 559.182,699.172 559.742,681.898 560.301,686.82 560.86,674.663 561.419,643.572 561.979,662.315 562.538,665.787 563.097,702.013 563.656,721.774 564.216,756.796 564.775,757.165 565.334,772.916 565.893,754.306 566.453,738.165 567.012,768.623 567.571,799.339 568.13,812.892 568.69,809.11 569.249,767.876 569.808,782.533 570.367,747.722 570.927,730.222 571.486,715.059 572.045,713.2 572.604,681.234 573.164,695.297 573.723,697.184 574.282,711.803 574.841,717.005 575.401,714.776 575.96,731.971 576.519,732.229 577.078,742.519 577.638,740.579 578.197,758.336 578.756,742.104 579.315,773.827 579.875,786.111 580.434,829.999 580.993,808.546 581.552,817.653 582.112,762.88 582.671,794.818 583.23,819.2 583.789,819.485 584.349,848.282 584.908,855.626 585.467,815.66 586.026,812.617 586.586,808.767 587.145,816.628 587.704,805.964 588.263,803.764 588.823,797.99 589.382,775.826 589.941,724.401 590.5,724.719 591.06,709.781 591.619,692.831 592.178,695.541 592.737,711.216 593.297,713.124 593.856,778.924 594.415,774.96 594.974,771.439 595.534,770.429 596.093,733.533 596.652,779.673 597.211,755.9 597.771,704.051 598.33,719.225 598.889,698.047 599.448,694.991 600.008,710.642 600.567,707.613 601.126,691.825 601.685,661.713 602.245,665.002 602.804,618.096 603.363,653.935 603.922,640.319 604.482,643.765 605.041,646.606 605.6,663.049 606.159,662.336 606.719,650.276 607.278,655.1 607.837,657.042 608.396,676.221 608.956,660.512 609.515,680.729 610.074,681.727 610.633,682.622 611.193,697.125 611.752,714.202 612.311,732.352 612.87,714.711 613.43,696.269 613.989,713.408 614.548,665.784 615.107,667.383 615.667,685.138 616.226,683.685 616.785,682.983 617.344,698.164 617.904,683.369 618.463,698.615 619.022,766.29 619.581,763.294 620.141,757.075 620.7,735.184 621.259,736.003 621.818,703.18 622.378,718.232 622.937,736.497 623.496,704.278 624.055,703.076 624.615,705.589 625.174,708.954 625.733,738.803 626.292,754.901 626.852,752.085 627.411,751.649 627.97,753.153 628.529,718.926 629.089,750.008 629.648,732.207 630.207,747.422 630.766,759.459 631.326,762.601 631.885,743.676 632.444,740.385 633.003,737.529 633.563,734.317 634.122,716.852 634.681,748.004 635.24,710.187 635.8,727.046 636.359,740.621 636.918,742.672 637.477,741.162 638.037,751.063 638.596,732.812 639.155,729.147 639.714,789.938 640.274,753.154 640.833,766.041 641.392,775.309 641.951,771.811 642.511,753.322 643.07,766.398 643.629,732.875 644.188,713.666 644.748,727.132 645.307,693.707 645.866,662.399 646.425,666.364 646.985,652 647.544,652.45 648.103,654.556 648.662,690.332 649.222,688.627 649.781,669.341 650.34,672.205 650.899,689.912 651.459,690.25 652.018,708.614 652.577,707.018 653.136,674.349 653.696,670.332 654.255,688.545 654.814,708.859 655.373,676.901 655.933,677.005 656.492,646.009 657.051,663.473 657.61,664.377 658.17,664.902 658.729,667.451 659.288,666.124 659.847,635.62 660.407,653.317 660.966,672.381 661.525,670.959 662.084,686.116 662.644,655.952 663.203,607.609 663.762,597.621 664.321,634.604 664.881,637.273 665.44,629.305 665.999,621.083 666.558,638.87 667.118,626.173 667.677,598.133 668.236,622.63 668.795,631.502 669.355,619.892 669.914,621.018 670.473,624.871 671.032,613.844 671.592,587.583 672.151,595.381 672.71,601.744 673.269,607.795 673.829,628.99 674.388,635.702 674.947,653.972 675.506,641.992 676.066,646.006 676.625,630.055 677.184,681.44 677.743,668.27 678.303,673.497 678.862,689.924 679.421,661.829 679.981,678.64 680.54,693.27 681.099,695.246 681.658,695.22 682.218,696.04 682.777,731.733 683.336,746.479 683.895,779.041 684.455,791.847 685.014,819.295 685.573,829.776 686.132,812.655 686.692,836.484 687.251,815.113 687.81,807.797 688.369,832.622 688.929,823.692 689.488,770.301 690.047,800.048 690.606,811.822 691.166,817.297 691.725,809.74 692.284,722.977 692.843,660.091 693.403,645.621 693.962,664.367 694.521,649.312 695.08,732.001 695.64,699.453 696.199,697.39 696.758,696.63 697.317,713.865 697.877,727.983 698.436,756.607 698.995,738.548 699.554,739.855 700.114,733.483 700.673,712.617 701.232,710.878 701.791,681.9 702.351,699.593 702.91,712.884 703.469,745.499 704.028,789.509 704.588,784.811 705.147,796.436 705.706,792.444 706.265,770.665 706.825,795.478 707.384,743.003 707.943,725.728 708.502,690.075 709.062,655.788 709.621,674.841 710.18,607.894 710.739,611.744 711.299,665.003 711.858,665.257 712.417,680.139 712.976,680.743 713.536,664.693 714.095,666.195 714.654,683.194 715.213,697.69 715.773,712.434 716.332,742.055 716.891,757.009 717.45,767.419 718.01,781.516 718.569,728.915 719.128,745.492 719.687,744.77 720.247,739.083 720.806,720.624 721.365,718.863 721.924,717.216 722.484,715.801 723.043,699.649 723.602,700.669 724.161,686.334 724.721,703.603 725.28,737.336 725.839,737.712 726.398,736.95 726.958,735.619 727.517,735.386 728.076,752.907 728.635,747.859 729.195,745.694 729.754,745.304 730.313,740.832 730.872,672.248 731.432,655.871 731.991,656.49 732.55,678.469 733.109,690.778 733.669,671.728 734.228,686.754 734.787,702.028 735.346,699.967 735.906,664.851 736.465,683.93 737.024,716.322 737.583,699.981 738.143,712.884 738.702,728.189 739.261,728.952 739.82,725.971 740.38,706.875 740.939,655.042 741.498,642.261 742.057,627.631 742.617,629.961 743.176,586.037 743.735,558.603 744.294,534.257 744.854,576.767 745.413,584.582 745.972,574.177 746.531,576.321 747.091,568.681 747.65,575.794 748.209,582.433 748.768,634.561 749.328,651.123 749.887,653.02 750.446,656.835 751.005,678.009 751.565,597.471 752.124,636.808 752.683,637.702 753.242,687.158 753.802,686.059 754.361,699.223 754.92,716.441 755.479,713.691 756.039,707.201 756.598,705.602 757.157,719.554 757.716,733.279 758.276,729.731 758.835,757.213 759.394,740.125 759.953,738.778 760.513,737.609 761.072,719.302 761.631,732.528 762.19,746.079 762.75,758.721 763.309,756.548 763.868,770.478 764.427,732.713 764.987,749.33 765.546,730.796 766.105,728.45 766.664,709.492 767.224,728.755 767.783,728.355 768.342,726.214 768.901,739.656 769.461,721.013 770.02,720.707 770.579,716.159 771.138,714.387 771.698,679.193 772.257,645.108 772.816,651.845 773.375,653.896 773.935,640.526 774.494,642.411 775.053,660.876 775.612,648.656 776.172,630.914 776.731,618.419 777.29,622.13 777.849,611.559 778.409,645.972 778.968,664.531 779.527,663.417 780.086,651.246 780.646,653.887 781.205,655.746 781.764,645.051 782.323,616.293 782.883,650.892 783.442,651.266 784.001,651.393 784.56,667.597 785.12,700.254 785.679,699.554 786.238,682.004 786.797,653.583 787.357,654.289 787.916,671.066 788.475,652.046 789.034,686.141 789.594,688.255 790.153,690.51 790.712,707.552 791.271,739.495 791.831,718.647 792.39,716.262 792.949,716.436 793.508,729.27 794.068,744.348 794.627,737.028 795.186,732.041 795.745,791.506 796.305,801.1 796.864,871.418 797.423,858.674 797.982,835.273 798.542,829.045 799.101,822.695 799.66,797.354 800.219,795.615 800.779,770.945 801.338,768.53 801.897,765.665 802.456,728.82 803.016,711.009 803.575,710.396 804.134,737.843 804.693,737.145 805.253,718.795 805.812,733.084 806.371,744.485 806.931,721.031 807.49,687.526 808.049,704.683 808.608,707.769 809.168,705.831 809.727,702.093 810.286,734.519 810.845,733.033 811.405,746.269 811.964,776.879 812.523,742.049 813.082,692.059 813.642,691.408 814.201,692.393 814.76,725.433 815.319,724.206 815.879,688.822 816.438,705.718 816.997,736.117 817.556,731.699 818.116,760.333 818.675,773.332 819.234,783.37 819.793,777.488 820.353,770.598 820.912,780.147 821.471,743.891 822.03,690.223 822.59,671.597 823.149,670.613 823.708,659.203 824.267,644.672 824.827,662.916 825.386,663.322 825.945,633.382 826.504,665.628 827.064,633.429 827.623,603.462 828.182,591.576 828.741,574.88 829.301,563.082 829.86,619.56 830.419,607.262 830.978,626.974 831.538,627.804 832.097,632.035 832.656,602.511 833.215,622.36 833.775,611.732 834.334,598.964 834.893,656.365 835.452,625.31 836.012,647.667 836.571,650.684 837.13,634.048 837.689,649.909 838.249,636.58 838.808,654.136 839.367,625.734 839.926,631.944 840.486,632.065 841.045,617.826 841.604,621.334 842.163,637.8 842.723,674.34 843.282,674.376 843.841,692.362 844.4,711.304 844.96,712.082 845.519,726.589 846.078,696.964 846.637,716.675 847.197,686.296 847.756,687.052 848.315,687.509 848.874,684.21 849.434,685.946 849.993,702.179 850.552,714.797 851.111,679.471 851.671,659.305 852.23,673.531 852.789,688.598 853.348,689.223 853.908,689.122 854.467,674.619 855.026,675.113 855.585,661.49 856.145,695.727 856.704,694.037 857.263,724.417 857.822,739.354 858.382,737.524 858.941,765.67 859.5,730.575 860.059,754.66 860.619,751.724 861.178,749.789 861.737,718.028 862.296,700.33 862.856,683.745 863.415,651.858 863.974,655.337 864.533,673.813 865.093,644.321 865.652,647.45 866.211,653.12 866.77,669.102 867.33,624.798 867.889,643.889 868.448,629.292 869.007,633.924 869.567,605.192 870.126,643.06 870.685,676.476 871.244,680.335 871.804,681.793 872.363,695.634 872.922,683.334 873.481,650.858 874.041,638.02 874.6,659.771 875.159,629.476 875.718,646.812 876.278,683.237 876.837,711.383 877.396,726.182 877.955,721.7 878.515,736.139 879.074,730.69 879.633,727.423 880.192,727.343 880.752,725.378 881.311,710.272 881.87,726.814 882.429,726.054 882.989,788.589 883.548,784.49 884.107,761.751 884.666,802.145 885.226,765.494 885.785,728.436 886.344,709.84 886.903,772.352 887.463,786.058 888.022,796.584 888.581,807.311 889.14,781.491 889.7,774.936 890.259,751.772 890.818,732.616 891.377,764.146 891.937,706.299 892.496,737.853 893.055,736.303 893.614,717.033 894.174,696.734 894.733,697.41 895.292,665.045 895.851,662.479 896.411,631.457 896.97,617.903 897.529,639.16 898.088,657.293 898.648,658.535 899.207,657.913 899.766,645.855 900.325,614.69 900.885,600.025 901.444,605.184 902.003,642.265 902.562,659.743 903.122,679.41 903.681,645.496 904.24,632.731 904.799,622.071 905.359,641.438 905.918,643.671 906.477,647.588 907.036,637.153 907.596,657.088 908.155,656.534 908.714,675.044 909.273,692.145 909.833,674.541 910.392,708.815 910.951,723.361 911.51,719.913 912.07,703.336 912.629,718.628 913.188,702.662 913.747,718.956 914.307,718.517 914.866,686.452 915.425,669.322 915.984,702.275 916.544,732.612 917.103,701.329 917.662,732.811 918.221,745.004 918.781,762.111 919.34,709.588 919.899,725.056 920.458,705.955 921.018,668.659 921.577,652.015 922.136,636.32 922.695,654.208 923.255,644.08 923.814,678.704 924.373,680.418 924.932,696.584 925.492,661.998 926.051,647.517 926.61,668.917 927.169,671.172 927.729,657.639 928.288,672.765 928.847,688.731 929.406,703.057 929.966,735.096 930.525,715.36 931.084,715.171 931.644,715.013 932.203,727.598 932.762,726.919 933.321,757.124 933.881,783.767 934.44,760.373 934.999,724.199 935.558,672.867 936.118,676.446 936.677,677.554 937.236,677.453 937.795,674.184 938.355,641.861 938.914,611.166 939.473,600.105 940.032,624.667 940.592,645.164 941.151,646.484 941.71,681.698 942.269,697.733 942.829,682.759 943.388,702.716 943.947,704.958 944.506,706.389 945.066,725.272 945.625,722.898 946.184,722.038 946.743,724.088 947.303,691.715 947.862,677.796 948.421,708.255 948.98,739.543 949.54,734.333 950.099,713.198 950.658,696.638 951.217,681.25 951.777,688.322 952.336,686.591 952.895,702.928 953.454,716.595 954.014,717.443 954.573,685.894 955.132,668.715 955.691,653.558 956.251,634.591 956.81,637.405 957.369,637.532 957.928,641.96 958.488,658.507 959.047,625.562 959.606,628.012 960.165,612.604 960.725,632.146 961.284,651.214 961.843,653.457 962.402,655.26 962.962,611.485 963.521,614.66 964.08,636.744 964.639,608.396 965.199,580.044 965.758,602.512 966.317,592.75 966.876,584.2 967.436,574.211 967.995,632.954 968.554,655.602 969.113,626.076 969.673,646.603 970.232,632.618 970.791,632.005 971.35,629.51 971.91,646.712 972.469,653.477 973.028,637.829 973.587,623.418 974.147,657.574 974.706,722.267 975.265,686.715 975.824,685.697 976.384,637.845 976.943,673.301 977.502,689.156 978.061,707.924 978.621,689.349 979.18,687.17 979.739,684.176 980.298,700.798 980.858,684.009 981.417,716.573 981.976,714.02 982.535,716.561 983.095,714.757 983.654,731.496 984.213,731.462 984.772,695.112 985.332,693.089 985.891,709.602 986.45,743.262 987.009,740.707 987.569,737.041 988.128,752.292 988.687,746.661 989.246,745.963 989.806,747.983 990.365,712.593 990.924,725.265 991.483,706.515 992.043,721.648 992.602,721.441 993.161,754.603 993.72,768.799 994.28,763.262 994.839,755.942 995.398,752.301 995.957,749.209 996.517,713.13 997.076,676.209 997.635,707.834 998.194,740.826 998.754,704.993 999.313,721.144 999.872,730.657 1000.43,759.509 1000.99,772.389 1001.55,786.063 1002.11,764.427 1002.67,776.63 1003.23,767.838 1003.79,732.663 1004.35,763.428 1004.91,762.245 1005.46,727.468 1006.02,723.504 1006.58,722.974 1007.14,671.846 1007.7,672.879 1008.26,673.475 1008.82,710.439 1009.38,708.009 1009.94,722.727 1010.5,721.573 1011.06,751.67 1011.62,715.542 1012.18,716.208 1012.73,680.04 1013.29,649.078 1013.85,683.64 1014.41,700.112 1014.97,702.005 1015.53,718.422 1016.09,715.986 1016.65,715.251 1017.21,713.036 1017.77,712.269 1018.33,679.584 1018.89,681.678 1019.45,699.942 1020.01,712.848 1020.56,722.47 1021.12,736.531 1021.68,732.726 1022.24,728.106 1022.8,756.161 1023.36,749.762 1023.92,715.897 1024.48,715.65 1025.04,714.157 1025.6,710.235 1026.16,697.223 1026.72,729.201 1027.28,727.085 1027.83,708.885 1028.39,757.959 1028.95,737.796 1029.51,761.906 1030.07,754.98 1030.63,755.252 1031.19,734.541 1031.75,731.163 1032.31,730.372 1032.87,725.819 1033.43,708.953 1033.99,710.642 1034.55,693.257 1035.1,693.987 1035.66,695.97 1036.22,707.53 1036.78,735.686 1037.34,714.136 1037.9,714.85 1038.46,727.332 1039.02,723.212 1039.58,753.979 1040.14,785.12 1040.7,764.759 1041.26,758.545 1041.82,753.763 1042.38,728.165 1042.93,707.051 1043.49,725.092 1044.05,718.974 1044.61,747.115 1045.17,742.917 1045.73,719.281 1046.29,687.247 1046.85,702.834 1047.41,685.642 1047.97,670.162 1048.53,651.167 1049.09,622.514 1049.65,611.055 1050.2,565.964 1050.76,603.216 1051.32,621.889 1051.88,609.119 1052.44,629.972 1053,647.342 1053.56,648.426 1054.12,635.712 1054.68,638.605 1055.24,673.377 1055.8,691.9 1056.36,672.498 1056.92,653.886 1057.48,684.262 1058.03,684.066 1058.59,687.773 1059.15,688.407 1059.71,703.534 1060.27,673.058 1060.83,660.232 1061.39,646.554 1061.95,633.864 1062.51,620.145 1063.07,627.521 1063.63,596.727 1064.19,600.323 1064.75,620.146 1065.3,621.822 1065.86,624.388 1066.42,611.245 1066.98,594.306 1067.54,584.304 1068.1,589.936 1068.66,594.285 1069.22,597.818 1069.78,633.531 1070.34,651.773 1070.9,653.776 1071.46,656.73 1072.02,627.009 1072.57,630.744 1073.13,632.873 1073.69,634.579 1074.25,639.942 1074.81,616.891 1075.37,632.003 1075.93,604.457 1076.49,621.943 1077.05,638.57 1077.61,606.666 1078.17,628.934 1078.73,648.319 1079.29,649.568 1079.85,653.616 1080.4,655.734 1080.96,674.746 1081.52,641.114 1082.08,613.139 1082.64,603.933 1083.2,621.175 1083.76,608.469 1084.32,596.807 1084.88,619.25 1085.44,671.904 1086,687.283 1086.56,751.379 1087.12,748.783 1087.67,779.631 1088.23,758.58 1088.79,770.127 1089.35,767.215 1089.91,748.543 1090.47,717.064 1091.03,731.099 1091.59,757.013 1092.15,735.902 1092.71,751.054 1093.27,731.465 1093.83,711.487 1094.39,678.182 1094.94,647.54 1095.5,632.582 1096.06,652.739 1096.62,634.359 1097.18,619.982 1097.74,621.324 1098.3,625.741 1098.86,625.222 1099.42,660.323 1099.98,644.451 1100.54,684.14 1101.1,685.801 1101.66,702.785 1102.22,665.387 1102.77,669.365 1103.33,649.316 1103.89,667.974 1104.45,672.027 1105.01,639.866 1105.57,640.949 1106.13,657.034 1106.69,673.992 1107.25,677.805 1107.81,698.375 1108.37,661.195 1108.93,678.78 1109.49,691.982 1110.04,707.151 1110.6,671.466 1111.16,674.248 1111.72,655.179 1112.28,672.684 1112.84,672.149 1113.4,706.272 1113.96,706.154 1114.52,705.566 1115.08,717.993 1115.64,698.851 1116.2,718.062 1116.76,717.255 1117.31,701.523 1117.87,685.375 1118.43,686.6 1118.99,685.205 1119.55,702.349 1120.11,696.5 1120.67,729.088 1121.23,741.118 1121.79,737.193 1122.35,770.316 1122.91,767.876 1123.47,797.04 1124.03,774.823 1124.59,740.518 1125.14,721.394 1125.7,670.211 1126.26,652.929 1126.82,673.159 1127.38,673.325 1127.94,656.65 1128.5,672.099 1129.06,693.372 1129.62,678.831 1130.18,696.72 1130.74,694.565 1131.3,679.486 1131.86,711.159 1132.41,696.141 1132.97,695.037 1133.53,692.352 1134.09,706.099 1134.65,706.168 1135.21,707.366 1135.77,692.936 1136.33,671.884 1136.89,689.171 1137.45,673.729 1138.01,655.071 1138.57,626.279 1139.13,644.084 1139.68,629.365 1140.24,645.238 1140.8,647.92 1141.36,666.369 1141.92,650.147 1142.48,650.49 1143.04,683.838 1143.6,685.577 1144.16,718.285 1144.72,664.131 1145.28,647.597 1145.84,665.932 1146.4,648.974 1146.96,636.117 1147.51,637.873 1148.07,638.685 1148.63,626.157 1149.19,630.289 1149.75,650.134 1150.31,670.969 1150.87,654.02 1151.43,667.772 1151.99,666.352 1152.55,645.619 1153.11,698.642 1153.67,666.308 1154.23,649.236 1154.78,654.418 1155.34,659.358 1155.9,645.251 1156.46,647.661 1157.02,635.24 1157.58,625.691 1158.14,629.422 1158.7,647.951 1159.26,680.545 1159.82,683.849 1160.38,681.063 1160.94,682.784 1161.5,649.893 1162.05,649.967 1162.61,654.942 1163.17,658.618 1163.73,690.851 1164.29,657.428 1164.85,661.728 1165.41,648.073 1165.97,650.768 1166.53,636.035 1167.09,658.113 1167.65,705.796 1168.21,692.255 1168.77,660.142 1169.33,647.139 1169.88,649.912 1170.44,670.318 1171,721.056 1171.56,720.641 1172.12,637.662 1172.68,627.376 1173.24,612.647 1173.8,648.401 1174.36,666.475 1174.92,663.924 1175.48,662.52 1176.04,694.43 1176.6,690.785 1177.15,739.515 1177.71,720.816 1178.27,687.664 1178.83,702.144 1179.39,748.812 1179.95,743.374 1180.51,774.986 1181.07,803.675 1181.63,781.17 1182.19,789.833 1182.75,796.184 1183.31,808.541 1183.87,821.613 1184.43,750.646 1184.98,745.91 1185.54,742.549 1186.1,723.249 1186.66,703.453 1187.22,683.288 1187.78,649.729 1188.34,668.296 1188.9,668.005 1189.46,669.3 1190.02,667.716 1190.58,635.815 1191.14,653.05 1191.7,687.034 1192.25,685.725 1192.81,688.713 1193.37,657.542 1193.93,626.416 1194.49,631.25 1195.05,668.785 1195.61,653.655 1196.17,686.425 1196.73,673.643 1197.29,672.506 1197.85,642.19 1198.41,625.326 1198.97,644.92 1199.52,648.534 1200.08,650.989 1200.64,634.857 1201.2,619.938 1201.76,621.018 1202.32,606.932 1202.88,611.301 1203.44,615.055 1204,633.725 1204.56,636.293 1205.12,652.341 1205.68,655.55 1206.24,669.94 1206.8,683.358 1207.35,651.867 1207.91,673.005 1208.47,705.363 1209.03,720.537 1209.59,703.151 1210.15,683.218 1210.71,699.475 1211.27,732.956 1211.83,728.645 1212.39,744.505 1212.95,757.075 1213.51,754.256 1214.07,753.006 1214.62,797.763 1215.18,759.025 1215.74,755.074 1216.3,720.384 1216.86,748.488 1217.42,743.805 1217.98,739.124 1218.54,720.267 1219.1,720.137 1219.66,764.181 1220.22,763.318 1220.78,675.991 1221.34,675.767 1221.89,707.786 1222.45,736.079 1223.01,748.14 1223.57,710.706 1224.13,693.509 1224.69,679.526 1225.25,712.268 1225.81,743.838 1226.37,723.206 1226.93,685.093 1227.49,671.407 1228.05,671.294 1228.61,657.031 1229.17,658.173 1229.72,662.487 1230.28,659.88 1230.84,676.018 1231.4,659.633 1231.96,677.164 1232.52,660.263 1233.08,610.087 1233.64,650.522 1234.2,683.644 1234.76,716.298 1235.32,730.1 1235.88,744.443 1236.44,746.611 1236.99,725.822 1237.55,707.978 1238.11,691.971 1238.67,689.437 1239.23,670.092 1239.79,674.941 1240.35,690.59 1240.91,706.476 1241.47,671.217 1242.03,672.702 1242.59,656.763 1243.15,675.208 1243.71,691.229 1244.26,678.185 1244.82,709.835 1245.38,688.085 1245.94,657.107 1246.5,660.32 1247.06,627.98 1247.62,614.348 1248.18,621.276 1248.74,626.105 1249.3,628.088 1249.86,630.6 1250.42,654.017 1250.98,669.563 1251.54,618.255 1252.09,607.234 1252.65,594.025 1253.21,582.85 1253.77,621.469 1254.33,643.371 1254.89,674.638 1255.45,658.948 1256.01,626.419 1256.57,627.567 1257.13,617.165 1257.69,617.406 1258.25,637.239 1258.81,642.225 1259.36,661.028 1259.92,663.133 1260.48,645.537 1261.04,664.291 1261.6,680.325 1262.16,682.31 1262.72,696.9 1263.28,685.331 1263.84,700.882 1264.4,681.644 1264.96,701.513 1265.52,717.928 1266.08,685.026 1266.63,702.654 1267.19,719.567 1267.75,720.207 1268.31,701.447 1268.87,702.13 1269.43,702.624 1269.99,703.068 1270.55,717.201 1271.11,700.181 1271.67,685.217 1272.23,653.519 1272.79,642.001 1273.35,612.32 1273.91,633.965 1274.46,655.218 1275.02,689.377 1275.58,705.895 1276.14,705.851 1276.7,708.357 1277.26,688.027 1277.82,689.165 1278.38,705.092 1278.94,693.712 1279.5,708.339 1280.06,677.234 1280.62,694.948 1281.18,727.758 1281.73,742.142 1282.29,742.567 1282.85,753.343 1283.41,733.136 1283.97,711.949 1284.53,709.21 1285.09,709.637 1285.65,691.29 1286.21,673.172 1286.77,660.2 1287.33,677.59 1287.89,679.152 1288.45,645.177 1289,615.514 1289.56,636.5 1290.12,656.793 1290.68,673.796 1291.24,687.004 1291.8,672.631 1292.36,692.115 1292.92,658.66 1293.48,627.734 1294.04,645.159 1294.6,681.633 1295.16,665.66 1295.72,665.157 1296.28,666.642 1296.83,698.09 1297.39,695.185 1297.95,724.518 1298.51,738.385 1299.07,734.46 1299.63,731.538 1300.19,724.735 1300.75,724.317 1301.31,689.081 1301.87,669.842 1302.43,654.219 1302.99,655.409 1303.55,692.537 1304.1,693.521 1304.66,678.71 1305.22,694.977 1305.78,678.814 1306.34,678.564 1306.9,680.339 1307.46,676.392 1308.02,677.11 1308.58,680.604 1309.14,682.931 1309.7,668.359 1310.26,687.637 1310.82,786.248 1311.38,795.079 1311.93,805.668 1312.49,781.768 1313.05,776.73 1313.61,743.124 1314.17,705.653 1314.73,707.814 1315.29,707.938 1315.85,707.285 1316.41,691.654 1316.97,706.139 1317.53,672.129 1318.09,675.781 1318.65,677.35 1319.2,662.244 1319.76,664.842 1320.32,646.552 1320.88,699.195 1321.44,697.41 1322,693.923 1322.56,678.941 1323.12,653.205 1323.68,653.776 1324.24,636.085 1324.8,669.936 1325.36,687.128 1325.92,682.508 1326.47,713.45 1327.03,743.567 1327.59,740.232 1328.15,752.866 1328.71,767.139 1329.27,744.29 1329.83,736.727 1330.39,764.91 1330.95,790.669 1331.51,786.36 1332.07,781.678 1332.63,777.57 1333.19,771.232 1333.75,751.893 1334.3,734.142 1334.86,736.351 1335.42,729.64 1335.98,694.098 1336.54,713.498 1337.1,696.801 1337.66,708.627 1338.22,724.309 1338.78,721.05 1339.34,705.19 1339.9,655.951 1340.46,620.882 1341.02,636.937 1341.57,621.604 1342.13,622.672 1342.69,661.334 1343.25,630.438 1343.81,652.848 1344.37,659.557 1344.93,675.446 1345.49,693.656 1346.05,694.086 1346.61,692.929 1347.17,675.662 1347.73,646.911 1348.29,649.888 1348.84,653.308 1349.4,688.44 1349.96,721.365 1350.52,737.356 1351.08,733.954 1351.64,697.883 1352.2,726.39 1352.76,727.834 1353.32,689.436 1353.88,705.501 1354.44,722.744 1355,772.55 1355.56,733.607 1356.12,747.021 1356.67,758.94 1357.23,706.754 1357.79,708.958 1358.35,708.365 1358.91,720.828 1359.47,718.41 1360.03,719.959 1360.59,720.895 1361.15,749.83 1361.71,750.073 1362.27,715.306 1362.83,682.342 1363.39,701.577 1363.94,701.649 1364.5,668.838 1365.06,667.023 1365.62,669.348 1366.18,669.337 1366.74,657.554 1367.3,658.67 1367.86,674.311 1368.42,657.516 1368.98,609.398 1369.54,628.071 1370.1,629.788 1370.66,646.004 1371.21,602.771 1371.77,622.485 1372.33,626.426 1372.89,629.392 1373.45,615.194 1374.01,619.485 1374.57,591.513 1375.13,596.597 1375.69,633.306 1376.25,634.039 1376.81,653.733 1377.37,641.037 1377.93,626.045 1378.49,626.686 1379.04,644.341 1379.6,660.982 1380.16,627.119 1380.72,613.921 1381.28,619.43 1381.84,635.964 1382.4,657.049 1382.96,642.568 1383.52,647.595 1384.08,665.061 1384.64,713.559 1385.2,663.9 1385.76,665.058 1386.31,669.636 1386.87,670.74 1387.43,637.936 1387.99,639.356 1388.55,627.881 1389.11,644.553 1389.67,626.429 1390.23,629.819 1390.79,679.687 1391.35,694.775 1391.91,691.256 1392.47,706.048 1393.03,708.508 1393.58,706.9 1394.14,656.075 1394.7,657.579 1395.26,646.941 1395.82,600.294 1396.38,604.763 1396.94,608.773 1397.5,613.465 1398.06,598.706 1398.62,600.822 1399.18,590.168 1399.74,612.372 1400.3,630.247 1400.86,615.367 1401.41,638.948 1401.97,593.329 1402.53,566.209 1403.09,574.237 1403.65,546.499 1404.21,586.557 1404.77,592.276 1405.33,611.406 1405.89,630.425 1406.45,618.17 1407.01,606.557 1407.57,593.291 1408.13,565.509 1408.68,542.269 1409.24,548.503 1409.8,570.939 1410.36,594.921 1410.92,599.789 1411.48,605.629 1412.04,594.045 1412.6,597.068 1413.16,630.714 1413.72,634.079 1414.28,665.406 1414.84,650.53 1415.4,649.902 1415.95,685.61 1416.51,682.089 1417.07,712.453 1417.63,710.513 1418.19,708.022 1418.75,709.172 1419.31,723.357 1419.87,755.257 1420.43,783.151 1420.99,791.805 1421.55,769.374 1422.11,748.028 1422.67,745.204 1423.23,725.489 1423.78,711.293 1424.34,775.551 1424.9,781.373 1425.46,775.436 1426.02,804.398 1426.58,813.784 1427.14,823.126 1427.7,813.826 1428.26,790.216 1428.82,788.724 1429.38,797.324 1429.94,791.249 1430.5,770.221 1431.05,780.916 1431.61,806.41 1432.17,782.956 1432.73,791.157 1433.29,798.758 1433.85,759.929 1434.41,756.514 1434.97,752.573 1435.53,730.747 1436.09,759.971 1436.65,755.309 1437.21,797.29 1437.77,758.663 1438.33,771.451 1438.88,783.566 1439.44,748.021 1440,710.929 1440.56,710.242 1441.12,657.483 1441.68,679.909 1442.24,698.384 1442.8,728.131 1443.36,722.914 1443.92,752.642 1444.48,751.195 1445.04,700.581 1445.6,733.207 1446.15,747.509 1446.71,742.296 1447.27,720.434 1447.83,685.064 1448.39,685.842 1448.95,702.183 1449.51,682.744 1450.07,649.583 1450.63,687.747 1451.19,693.082 1451.75,691.198 1452.31,707.253 1452.87,741.115 1453.42,738.06 1453.98,718.237 1454.54,699.685 1455.1,679.647 1455.66,695.206 1456.22,650.084 1456.78,649.589 1457.34,638.089 1457.9,672.992 1458.46,702.972 1459.02,701.49 1459.58,685.039 1460.14,681.665 1460.7,666.025 1461.25,683.112 1461.81,667.255 1462.37,670.559 1462.93,702.817 1463.49,717.683 1464.05,715.706 1464.61,714.797 1465.17,727.103 1465.73,710.889 1466.29,706.65 1466.85,689.271 1467.41,656.581 1467.97,657.227 1468.52,688.871 1469.08,674.276 1469.64,674.481 1470.2,706.586 1470.76,705.973 1471.32,656.209 1471.88,642.95 1472.44,658.552 1473,642.13 1473.56,630.874 1474.12,636.122 1474.68,639.772 1475.24,659.206 1475.79,644.645 1476.35,680.682 1476.91,680.241 1477.47,648.618 1478.03,652.523 1478.59,718.793 1479.15,687.82 1479.71,624.902 1480.27,644.587 1480.83,665.674 1481.39,681.88 1481.95,679.077 1482.51,675.491 1483.07,705.706 1483.62,739.233 1484.18,733.999 1484.74,746.46 1485.3,742.741 1485.86,722.303 1486.42,717.467 1486.98,714.512 1487.54,730.904 1488.1,744.697 1488.66,742.477 1489.22,756.299 1489.78,770.314 1490.34,748.704 1490.89,748.281 1491.45,713.164 1492.01,711.029 1492.57,689.936 1493.13,705.226 1493.69,718.795 1494.25,747.38 1494.81,711.196 1495.37,694.372 1495.93,710.344 1496.49,726.988 1497.05,722.881 1497.61,716.322 1498.16,730.142 1498.72,726.773 1499.28,721.818 1499.84,700.088 1500.4,665.938 1500.96,668.369 1501.52,652.262 1502.08,635.268 1502.64,652.384 1503.2,652.596 1503.76,636.65 1504.32,688.889 1504.88,671.089 1505.44,671.445 1505.99,672.044 1506.55,676.264 1507.11,681.606 1507.67,729.898 1508.23,747.833 1508.79,744.183 1509.35,724.554 1509.91,676.187 1510.47,693.215 1511.03,722.941 1511.59,721.116 1512.15,720.312 1512.71,668.342 1513.26,671.564 1513.82,673.032 1514.38,657.8 1514.94,678.074 1515.5,680.125 1516.06,696.777 1516.62,684.345 1517.18,654.515 1517.74,641.863 1518.3,659.632 1518.86,644.26 1519.42,695.39 1519.98,679.194 1520.53,679.574 1521.09,725.596 1521.65,753.798 1522.21,767.888 1522.77,732.86 1523.33,731.14 1523.89,746.72 1524.45,740.226 1525.01,756.584 1525.57,764.95 1526.13,792.074 1526.69,766.888 1527.25,764.318 1527.81,777.899 1528.36,756.542 1528.92,735.72 1529.48,685.218 1530.04,686.096 1530.6,703.101 1531.16,642.531 1531.72,677.014 1532.28,675.106 1532.84,673.716 1533.4,708.446 1533.96,722.764 1534.52,733.721 1535.08,747.876 1535.63,741.517 1536.19,707.179 1536.75,688.548 1537.31,686.565 1537.87,652.001 1538.43,669.565 1538.99,651.973 1539.55,656.55 1540.11,655.389 1540.67,624.447 1541.23,613.529 1541.79,632.431 1542.35,602.703 1542.9,594.394 1543.46,601.474 1544.02,586.967 1544.58,574.585 1545.14,580.779 1545.7,587.943 1546.26,575.543 1546.82,594.328 1547.38,598.419 1547.94,615.931 1548.5,620.829 1549.06,626.613 1549.62,629.071 1550.18,647.387 1550.73,615.72 1551.29,636.914 1551.85,639.6 1552.41,656.02 1552.97,627.376 1553.53,614.973 1554.09,601.328 1554.65,588.436 1555.21,611.454 1555.77,599.02 1556.33,602.396 1556.89,621.741 1557.45,639.755 1558,642.68 1558.56,612.74 1559.12,630.904 1559.68,619.042 1560.24,639.295 1560.8,627.618 1561.36,646.218 1561.92,651.773 1562.48,652.331 1563.04,670.494 1563.6,735.551 1564.16,746.544 1564.72,758.336 1565.28,727.166 1565.83,710.261 1566.39,708.453 1566.95,706.743 1567.51,738.994 1568.07,737.53 1568.63,716.837 1569.19,748.404 1569.75,728.917 1570.31,726.387 1570.87,710.733 1571.43,762.203 1571.99,755.007 1572.55,781.716 1573.1,776.58 1573.66,753.832 1574.22,717.738 1574.78,705.101 1575.34,733.208 1575.9,717.439 1576.46,699.784 1577.02,713.148 1577.58,679.062 1578.14,660.805 1578.7,614.919 1579.26,618.172 1579.82,623.36 1580.37,644.093 1580.93,647.498 1581.49,634.587 1582.05,652.187 1582.61,605.028 1583.17,614.366 1583.73,583.838 1584.29,570.354 1584.85,591.387 1585.41,611.962 1585.97,597.55 1586.53,602.477 1587.09,589.215 1587.65,590.866 1588.2,595.651 1588.76,584.817 1589.32,557.26 1589.88,547.001 1590.44,523.615 1591,531.945 1591.56,509.013 1592.12,518.04 1592.68,526.958 1593.24,534.059 1593.8,556.713 1594.36,565.166 1594.92,587.738 1595.47,577.095 1596.03,599.407 1596.59,603.638 1597.15,637.835 1597.71,661.769 1598.27,662.075 1598.83,652.312 1599.39,641.024 1599.95,692.013 1600.51,695.382 1601.07,695.61 1601.63,679.169 1602.19,664.308 1602.74,681.106 1603.3,681.422 1603.86,683.218 1604.42,730.892 1604.98,759.063 1605.54,758.3 1606.1,756.44 1606.66,769.931 1607.22,783.779 1607.78,775.708 1608.34,787.356 1608.9,749.061 1609.46,780.276 1610.02,790.964 1610.57,784.407 1611.13,810.058 1611.69,832.458 1612.25,810.427 1612.81,786.829 1613.37,767.833 1613.93,792.646 1614.49,801.195 1615.05,792.693 1615.61,802.629 1616.17,769.56 1616.73,782.979 1617.29,776.059 1617.84,755.119 1618.4,749.132 1618.96,808.784 1619.52,785.436 1620.08,797.82 1620.64,808.264 1621.2,785.015 1621.76,717.374 1622.32,728.509 1622.88,725.836 1623.44,742.894 1624,723.711 1624.56,726.046 1625.11,720.88 1625.67,734.744 1626.23,779.152 1626.79,804.267 1627.35,781.997 1627.91,779.262 1628.47,774.255 1629.03,785.165 1629.59,765.392 1630.15,777.315 1630.71,784.251 1631.27,777.181 1631.83,753.567 1632.39,732.063 1632.94,713.486 1633.5,743.99 1634.06,755.39 1634.62,720.534 1635.18,702.257 1635.74,704.998 1636.3,674.137 1636.86,695.569 1637.42,695.198 1637.98,682.955 1638.54,715.325 1639.1,712.576 1639.66,728.373 1640.21,693.751 1640.77,691.438 1641.33,708.686 1641.89,704.335 1642.45,717.623 1643.01,714.757 1643.57,744.601 1644.13,741.873 1644.69,723.959 1645.25,724.634 1645.81,689.66 1646.37,671.886 1646.93,689.061 1647.48,703.77 1648.04,702.308 1648.6,686.789 1649.16,684.63 1649.72,670.565 1650.28,672.105 1650.84,670.894 1651.4,673.421 1651.96,640.244 1652.52,592.39 1653.08,597.72 1653.64,619.809 1654.2,622.031 1654.76,626.639 1655.31,630.119 1655.87,619.281 1656.43,658.649 1656.99,627.397 1657.55,648.943 1658.11,634.34 1658.67,620.435 1659.23,638.246 1659.79,623.1 1660.35,645.38 1660.91,650.375 1661.47,683.243 1662.03,684.46 1662.58,680.941 1663.14,665.237 1663.7,651.802 1664.26,669.535 1664.82,685.636 1665.38,653.283 1665.94,672.733 1666.5,690.209 1667.06,708.463 1667.62,704.008 1668.18,702.03 1668.74,699.891 1669.3,712.424 1669.85,711.744 1670.41,678.886 1670.97,694.242 1671.53,710.101 1672.09,693.423 1672.65,692.477 1673.21,680.806 1673.77,669.533 1674.33,700.585 1674.89,731.144 1675.45,744.167 1676.01,744.999 1676.57,739.489 1677.13,720.683 1677.68,687.549 1678.24,668.461 1678.8,672.401 1679.36,639.89 1679.92,676.363 1680.48,659.607 1681.04,661.208 1681.6,660.524 1682.16,660.908 1682.72,664.441 1683.28,649.59 1683.84,685.66 1684.4,685.026 1684.95,716.888 1685.51,699.17 1686.07,698.189 1686.63,715.669 1687.19,715.338 1687.75,697.969 1688.31,660.715 1688.87,692.112 1689.43,675.69 1689.99,673.645 1690.55,658.396 1691.11,661.11 1691.67,660.212 1692.23,647.728 1692.78,635.49 1693.34,607.942 1693.9,595.636 1694.46,614.711 1695.02,599.345 1695.58,597.999 1696.14,600.394 1696.7,604.866 1697.26,594.694 1697.82,581.632 1698.38,585.7 1698.94,636.2 1699.5,657.557 1700.05,659.613 1700.61,644.716 1701.17,630.605 1701.73,619.26 1702.29,607.376 1702.85,644.833 1703.41,666.206 1703.97,651.339 1704.53,653.342 1705.09,668.963 1705.65,733.613 1706.21,715.077 1706.77,714.435 1707.32,699.627 1707.88,666.705 1708.44,669.108 1709,672.983 1709.56,669.061 1710.12,669.183 1710.68,657.013 1711.24,627.311 1711.8,645.939 1712.36,648.166 1712.92,665.553 1713.48,681.418 1714.04,716.391 1714.6,729.52 1715.15,728.23 1715.71,695.248 1716.27,663.623 1716.83,665.049 1717.39,664.161 1717.95,679.177 1718.51,714.187 1719.07,697.112 1719.63,692.751 1720.19,693.567 1720.75,712.481 1721.31,695.294 1721.87,696.14 1722.42,728.418 1722.98,755.013 1723.54,732.461 1724.1,729.704 1724.66,743.026 1725.22,705.101 1725.78,721.572 1726.34,735.5 1726.9,750.463 1727.46,731.84 1728.02,729.265 1728.58,742.353 1729.14,709.557 1729.69,691.843 1730.25,691.078 1730.81,657.485 1731.37,640.663 1731.93,679.411 1732.49,693.738 1733.05,753.805 1733.61,735.519 1734.17,764.54 1734.73,745.293 1735.29,757.832 1735.85,772.046 1736.41,765.384 1736.97,725.049 1737.52,705.554 1738.08,756.179 1738.64,753.705 1739.2,748.462 1739.76,763.575 1740.32,759.849 1740.88,739.256 1741.44,719.999 1742,704.192 1742.56,702.9 1743.12,703.399 1743.68,701.548 1744.24,701.581 1744.79,729.933 1745.35,727.946 1745.91,730.765 1746.47,711.858 1747.03,724.137 1747.59,724.552 1748.15,705.231 1748.71,704.684 1749.27,688.836 1749.83,672.393 1750.39,692.503 1750.95,674.848 1751.51,688.94 1752.06,688.145 1752.62,703.935 1753.18,703.338 1753.74,683.888 1754.3,696.302 1754.86,695.805 1755.42,693.645 1755.98,788.322 1756.54,750.659 1757.1,746.874 1757.66,742.21 1758.22,721.797 1758.78,751.066 1759.34,765.378 1759.89,727.932 1760.45,776.146 1761.01,706.434 1761.57,674.952 1762.13,678.546 1762.69,682.913 1763.25,695.926 1763.81,693.963 1764.37,676.264 1764.93,693.666 1765.49,691.785 1766.05,703.995 1766.61,717.97 1767.16,700.502 1767.72,635.112 1768.28,653.105 1768.84,717.036 1769.4,717.573 1769.96,716.165 1770.52,716.749 1771.08,748.514 1771.64,763.409 1772.2,759.716 1772.76,789.947 1773.32,786.559 1773.88,781.761 1774.43,811.634 1774.99,771.223 1775.55,767.874 1776.11,743.1 1776.67,722.367 1777.23,718.917 1777.79,731.293 1778.35,760.325 1778.91,758.153 1779.47,771.26 1780.03,767.578 1780.59,765.583 1781.15,763.382 1781.71,745.478 1782.26,743.723 1782.82,740.797 1783.38,737.988 1783.94,671.27 1784.5,720.876 1785.06,684.419 1785.62,683.458 1786.18,666.031 1786.74,603.801 1787.3,636.988 1787.86,641.879 1788.42,629.077 1788.98,632.009 1789.53,636.642 1790.09,638.996 1790.65,641.975 1791.21,615.439 1791.77,554.124 1792.33,559.883 1792.89,550.037 1793.45,556.198 1794.01,565.374 1794.57,539.458 1795.13,534.057 1795.69,547.052 1796.25,538.592 1796.8,529.772 1797.36,541.427 1797.92,548.466 1798.48,538.35 1799.04,566.089 1799.6,572.845 1800.16,565.394 1800.72,569.975 1801.28,609.581 1801.84,629.348 1802.4,620.042 1802.96,612.312 1803.52,616.531 1804.08,634.569 1804.63,650.154 1805.19,636.66 1805.75,639.864 1806.31,631.195 1806.87,600.916 1807.43,604.592 1807.99,637.799 1808.55,622.866 1809.11,627.951 1809.67,627.657 1810.23,646.205 1810.79,631.742 1811.35,615.808 1811.9,618.9 1812.46,622.745 1813.02,626.117 1813.58,691.008 1814.14,689.751 1814.7,689.904 1815.26,687.277 1815.82,704.719 1816.38,768.857 1816.94,751.764 1817.5,749.296 1818.06,733.081 1818.62,715.524 1819.18,664.824 1819.73,698.753 1820.29,696.084 1820.85,725.607 1821.41,738.578 1821.97,736.279 1822.53,701.444 1823.09,683.334 1823.65,685.381 1824.21,653.325 1824.77,639.192 1825.33,625.114 1825.89,645.352 1826.45,666.357 1827,687.335 1827.56,702.223 1828.12,721.723 1828.68,735.507 1829.24,750.28 1829.8,730.529 1830.36,742.513 1830.92,740.283 1831.48,786.236 1832.04,779.5 1832.6,776.321 1833.16,724.101 1833.72,754.96 1834.27,769.309 1834.83,798.896 1835.39,812.276 1835.95,802.888 1836.51,796.125 1837.07,806.729 1837.63,817.336 1838.19,807.24 \"/>\n<path clip-path=\"url(#clip323)\" d=\"M720.247 692.408 L720.806 692.408 L721.365 692.408 L721.924 692.408 L722.484 692.408 L723.043 692.408 L723.602 692.408 L724.161 692.408 L724.721 692.408 L725.28 692.408 L725.839 692.408 L726.398 692.408 L726.958 692.408 L727.517 692.408 L728.076 692.408 L728.635 692.408 L729.195 692.408 L729.754 692.408 L730.313 692.408 L730.872 692.408 L731.432 692.408 L731.991 692.408 L732.55 692.408 L733.109 692.408 L733.669 692.408 L734.228 692.408 L734.787 692.408 L735.346 692.408 L735.906 692.408 L736.465 692.408 L737.024 692.408 L737.583 692.408 L738.143 692.408 L738.702 692.408 L739.261 692.408 L739.82 692.408 L740.38 692.408 L740.939 692.408 L741.498 692.408 L742.057 692.408 L742.617 692.408 L743.176 692.408 L743.735 692.408 L744.294 692.408 L744.854 692.408 L745.413 692.408 L745.972 692.408 L746.531 692.408 L747.091 692.408 L747.65 692.408 L748.209 692.408 L748.768 692.408 L749.328 692.408 L749.887 692.408 L750.446 692.408 L751.005 692.408 L751.565 692.408 L752.124 692.408 L752.683 692.408 L753.242 692.408 L753.802 692.408 L754.361 692.408 L754.92 692.408 L755.479 692.408 L756.039 692.408 L756.598 692.408 L757.157 692.408 L757.716 692.408 L758.276 692.408 L758.835 692.408 L759.394 692.408 L759.953 692.408 L760.513 692.408 L761.072 692.408 L761.631 692.408 L762.19 692.408 L762.75 692.408 L763.309 692.408 L763.868 692.408 L764.427 692.408 L764.987 692.408 L765.546 692.408 L766.105 692.408 L766.664 692.408 L767.224 692.408 L767.783 692.408 L768.342 692.408 L768.901 692.408 L769.461 692.408 L770.02 692.408 L770.579 692.408 L771.138 692.408 L771.698 692.408 L772.257 692.408 L772.816 692.408 L773.375 692.408 L773.935 692.408 L774.494 692.408 L775.053 692.408 L775.612 692.408 L776.172 692.408 L776.731 692.408 L777.29 692.408 L777.849 692.408 L778.409 692.408 L778.968 692.408 L779.527 692.408 L780.086 692.408 L780.646 692.408 L781.205 692.408 L781.764 692.408 L782.323 692.408 L782.883 692.408 L783.442 692.408 L784.001 692.408 L784.56 692.408 L785.12 692.408 L785.679 692.408 L786.238 692.408 L786.797 692.408 L787.357 692.408 L787.916 692.408 L788.475 692.408 L789.034 692.408 L789.594 692.408 L790.153 692.408 L790.712 692.408 L791.271 692.408 L791.831 692.408 L792.39 692.408 L792.949 692.408 L793.508 692.408 L794.068 692.408 L794.627 692.408 L795.186 692.408 L795.745 692.408 L796.305 692.408 L796.864 692.408 L797.423 692.408 L797.982 692.408 L798.542 692.408 L799.101 692.408 L799.66 692.408 L800.219 692.408 L800.779 692.408 L801.338 692.408 L801.897 692.408 L802.456 692.408 L803.016 692.408 L803.575 692.408 L804.134 692.408 L804.693 692.408 L805.253 692.408 L805.812 692.408 L806.371 692.408 L806.931 692.408 L807.49 692.408 L808.049 692.408 L808.608 692.408 L809.168 692.408 L809.727 692.408 L810.286 692.408 L810.845 692.408 L811.405 692.408 L811.964 692.408 L812.523 692.408 L813.082 692.408 L813.642 692.408 L814.201 692.408 L814.76 692.408 L815.319 692.408 L815.879 692.408 L816.438 692.408 L816.997 692.408 L817.556 692.408 L818.116 692.408 L818.675 692.408 L819.234 692.408 L819.793 692.408 L820.353 692.408 L820.912 692.408 L821.471 692.408 L822.03 692.408 L822.59 692.408 L823.149 692.408 L823.708 692.408 L824.267 692.408 L824.827 692.408 L825.386 692.408 L825.945 692.408 L826.504 692.408 L827.064 692.408 L827.623 692.408 L828.182 692.408 L828.741 692.408 L829.301 692.408 L829.86 692.408 L830.419 692.408 L830.978 692.408 L831.538 692.408 L832.097 692.408 L832.656 692.408 L833.215 692.408 L833.775 692.408 L834.334 692.408 L834.893 692.408 L835.452 692.408 L836.012 692.408 L836.571 692.408 L837.13 692.408 L837.689 692.408 L838.249 692.408 L838.808 692.408 L839.367 692.408 L839.926 692.408 L840.486 692.408 L841.045 692.408 L841.604 692.408 L842.163 692.408 L842.723 692.408 L843.282 692.408 L843.841 692.408 L844.4 692.408 L844.96 692.408 L845.519 692.408 L846.078 692.408 L846.637 692.408 L847.197 692.408 L847.756 692.408 L848.315 692.408 L848.874 692.408 L849.434 692.408 L849.993 692.408 L850.552 692.408 L851.111 692.408 L851.671 692.408 L852.23 692.408 L852.789 692.408 L853.348 692.408 L853.908 692.408 L854.467 692.408 L855.026 692.408 L855.585 692.408 L856.145 692.408 L856.704 692.408 L857.263 692.408 L857.822 692.408 L858.382 692.408 L858.941 692.408 L859.5 692.408 L860.059 692.408 L860.619 692.408 L861.178 692.408 L861.737 692.408 L862.296 692.408 L862.856 692.408 L863.415 692.408 L863.974 692.408 L864.533 692.408 L865.093 692.408 L865.652 692.408 L866.211 692.408 L866.77 692.408 L867.33 692.408 L867.889 692.408 L868.448 692.408 L869.007 692.408 L869.567 692.408 L870.126 692.408 L870.685 692.408 L871.244 692.408 L871.804 692.408 L872.363 692.408 L872.922 692.408 L873.481 692.408 L874.041 692.408 L874.6 692.408 L875.159 692.408 L875.718 692.408 L876.278 692.408 L876.837 692.408 L877.396 692.408 L877.955 692.408 L878.515 692.408 L879.074 692.408 L879.633 692.408 L880.192 692.408 L880.752 692.408 L881.311 692.408 L881.87 692.408 L882.429 692.408 L882.989 692.408 L883.548 692.408 L884.107 692.408 L884.666 692.408 L885.226 692.408 L885.785 692.408 L886.344 692.408 L886.903 692.408 L887.463 692.408 L888.022 692.408 L888.581 692.408 L889.14 692.408 L889.7 692.408 L890.259 692.408 L890.818 692.408 L891.377 692.408 L891.937 692.408 L892.496 692.408 L893.055 692.408 L893.614 692.408 L894.174 692.408 L894.733 692.408 L895.292 692.408 L895.851 692.408 L896.411 692.408 L896.97 692.408 L897.529 692.408 L898.088 692.408 L898.648 692.408 L899.207 692.408 L899.766 692.408 L900.325 692.408 L900.885 692.408 L901.444 692.408 L902.003 692.408 L902.562 692.408 L903.122 692.408 L903.681 692.408 L904.24 692.408 L904.799 692.408 L905.359 692.408 L905.918 692.408 L906.477 692.408 L907.036 692.408 L907.596 692.408 L908.155 692.408 L908.714 692.408 L909.273 692.408 L909.833 692.408 L910.392 692.408 L910.951 692.408 L911.51 692.408 L912.07 692.408 L912.629 692.408 L913.188 692.408 L913.747 692.408 L914.307 692.408 L914.866 692.408 L915.425 692.408 L915.984 692.408 L916.544 692.408 L917.103 692.408 L917.662 692.408 L918.221 692.408 L918.781 692.408 L919.34 692.408 L919.899 692.408 L920.458 692.408 L921.018 692.408 L921.577 692.408 L922.136 692.408 L922.695 692.408 L923.255 692.408 L923.814 692.408 L924.373 692.408 L924.932 692.408 L925.492 692.408 L926.051 692.408 L926.61 692.408 L927.169 692.408 L927.729 692.408 L928.288 692.408 L928.847 692.408 L929.406 692.408 L929.966 692.408 L930.525 692.408 L931.084 692.408 L931.644 692.408 L932.203 692.408 L932.762 692.408 L933.321 692.408 L933.881 692.408 L934.44 692.408 L934.999 692.408 L935.558 692.408 L936.118 692.408 L936.677 692.408 L937.236 692.408 L937.795 692.408 L938.355 692.408 L938.914 692.408 L939.473 692.408 L940.032 692.408 L940.592 692.408 L941.151 692.408 L941.71 692.408 L942.269 692.408 L942.829 692.408 L943.388 692.408 L943.947 692.408 L944.506 692.408 L945.066 692.408 L945.625 692.408 L946.184 692.408 L946.743 692.408 L947.303 692.408 L947.862 692.408 L948.421 692.408 L948.98 692.408 L949.54 692.408 L950.099 692.408 L950.658 692.408 L951.217 692.408 L951.777 692.408 L952.336 692.408 L952.895 692.408 L953.454 692.408 L954.014 692.408 L954.573 692.408 L955.132 692.408 L955.691 692.408 L956.251 692.408 L956.81 692.408 L957.369 692.408 L957.928 692.408 L958.488 692.408 L959.047 692.408 L959.606 692.408 L960.165 692.408 L960.725 692.408 L961.284 692.408 L961.843 692.408 L962.402 692.408 L962.962 692.408 L963.521 692.408 L964.08 692.408 L964.639 692.408 L965.199 692.408 L965.758 692.408 L966.317 692.408 L966.876 692.408 L967.436 692.408 L967.995 692.408 L968.554 692.408 L969.113 692.408 L969.673 692.408 L970.232 692.408 L970.791 692.408 L971.35 692.408 L971.91 692.408 L972.469 692.408 L973.028 692.408 L973.587 692.408 L974.147 692.408 L974.706 692.408 L975.265 692.408 L975.824 692.408 L976.384 692.408 L976.943 692.408 L977.502 692.408 L978.061 692.408 L978.621 692.408 L979.18 692.408 L979.739 692.408 L980.298 692.408 L980.858 692.408 L981.417 692.408 L981.976 692.408 L982.535 692.408 L983.095 692.408 L983.654 692.408 L984.213 692.408 L984.772 692.408 L985.332 692.408 L985.891 692.408 L986.45 692.408 L987.009 692.408 L987.569 692.408 L988.128 692.408 L988.687 692.408 L989.246 692.408 L989.806 692.408 L990.365 692.408 L990.924 692.408 L991.483 692.408 L992.043 692.408 L992.602 692.408 L993.161 692.408 L993.72 692.408 L994.28 692.408 L994.839 692.408 L995.398 692.408 L995.957 692.408 L996.517 692.408 L997.076 692.408 L997.635 692.408 L998.194 692.408 L998.754 692.408 L999.313 692.408 L999.872 692.408 L1000.43 692.408 L1000.99 692.408 L1001.55 692.408 L1002.11 692.408 L1002.67 692.408 L1003.23 692.408 L1003.79 692.408 L1004.35 692.408 L1004.91 692.408 L1005.46 692.408 L1006.02 692.408 L1006.58 692.408 L1007.14 692.408 L1007.7 692.408 L1008.26 692.408 L1008.82 692.408 L1009.38 692.408 L1009.94 692.408 L1010.5 692.408 L1011.06 692.408 L1011.62 692.408 L1012.18 692.408 L1012.73 692.408 L1013.29 692.408 L1013.85 692.408 L1014.41 692.408 L1014.97 692.408 L1015.53 692.408 L1016.09 692.408 L1016.65 692.408 L1017.21 692.408 L1017.77 692.408 L1018.33 692.408 L1018.89 692.408 L1019.45 692.408 L1020.01 692.408 L1020.56 692.408 L1021.12 692.408 L1021.68 692.408 L1022.24 692.408 L1022.8 692.408 L1023.36 692.408 L1023.92 692.408 L1024.48 692.408 L1025.04 692.408 L1025.6 692.408 L1026.16 692.408 L1026.72 692.408 L1027.28 692.408 L1027.83 692.408 L1028.39 692.408 L1028.95 692.408 L1029.51 692.408 L1030.07 692.408 L1030.63 692.408 L1031.19 692.408 L1031.75 692.408 L1032.31 692.408 L1032.87 692.408 L1033.43 692.408 L1033.99 692.408 L1034.55 692.408 L1035.1 692.408 L1035.66 692.408 L1036.22 692.408 L1036.78 692.408 L1037.34 692.408 L1037.9 692.408 L1038.46 692.408 L1039.02 692.408 L1039.58 692.408 L1040.14 692.408 L1040.7 692.408 L1041.26 692.408 L1041.82 692.408 L1042.38 692.408 L1042.93 692.408 L1043.49 692.408 L1044.05 692.408 L1044.61 692.408 L1045.17 692.408 L1045.73 692.408 L1046.29 692.408 L1046.85 692.408 L1047.41 692.408 L1047.97 692.408 L1048.53 692.408 L1049.09 692.408 L1049.65 692.408 L1050.2 692.408 L1050.76 692.408 L1051.32 692.408 L1051.88 692.408 L1052.44 692.408 L1053 692.408 L1053.56 692.408 L1054.12 692.408 L1054.68 692.408 L1055.24 692.408 L1055.8 692.408 L1056.36 692.408 L1056.92 692.408 L1057.48 692.408 L1058.03 692.408 L1058.59 692.408 L1059.15 692.408 L1059.71 692.408 L1060.27 692.408 L1060.83 692.408 L1061.39 692.408 L1061.95 692.408 L1062.51 692.408 L1063.07 692.408 L1063.63 692.408 L1064.19 692.408 L1064.75 692.408 L1065.3 692.408 L1065.86 692.408 L1066.42 692.408 L1066.98 692.408 L1067.54 692.408 L1068.1 692.408 L1068.66 692.408 L1069.22 692.408 L1069.78 692.408 L1070.34 692.408 L1070.9 692.408 L1071.46 692.408 L1072.02 692.408 L1072.57 692.408 L1073.13 692.408 L1073.69 692.408 L1074.25 692.408 L1074.81 692.408 L1075.37 692.408 L1075.93 692.408 L1076.49 692.408 L1077.05 692.408 L1077.61 692.408 L1078.17 692.408 L1078.73 692.408 L1079.29 692.408 L1079.85 692.408 L1080.4 692.408 L1080.96 692.408 L1081.52 692.408 L1082.08 692.408 L1082.64 692.408 L1083.2 692.408 L1083.76 692.408 L1084.32 692.408 L1084.88 692.408 L1085.44 692.408 L1086 692.408 L1086.56 692.408 L1087.12 692.408 L1087.67 692.408 L1088.23 692.408 L1088.79 692.408 L1089.35 692.408 L1089.91 692.408 L1090.47 692.408 L1091.03 692.408 L1091.59 692.408 L1092.15 692.408 L1092.71 692.408 L1093.27 692.408 L1093.83 692.408 L1094.39 692.408 L1094.94 692.408 L1095.5 692.408 L1096.06 692.408 L1096.62 692.408 L1097.18 692.408 L1097.74 692.408 L1098.3 692.408 L1098.86 692.408 L1099.42 692.408 L1099.98 692.408 L1100.54 692.408 L1101.1 692.408 L1101.66 692.408 L1102.22 692.408 L1102.77 692.408 L1103.33 692.408 L1103.89 692.408 L1104.45 692.408 L1105.01 692.408 L1105.57 692.408 L1106.13 692.408 L1106.69 692.408 L1107.25 692.408 L1107.81 692.408 L1108.37 692.408 L1108.93 692.408 L1109.49 692.408 L1110.04 692.408 L1110.6 692.408 L1111.16 692.408 L1111.72 692.408 L1112.28 692.408 L1112.84 692.408 L1113.4 692.408 L1113.96 692.408 L1114.52 692.408 L1115.08 692.408 L1115.64 692.408 L1116.2 692.408 L1116.76 692.408 L1117.31 692.408 L1117.87 692.408 L1118.43 692.408 L1118.99 692.408 L1119.55 692.408 L1120.11 692.408 L1120.67 692.408 L1121.23 692.408 L1121.79 692.408 L1122.35 692.408 L1122.91 692.408 L1123.47 692.408 L1124.03 692.408 L1124.59 692.408 L1125.14 692.408 L1125.7 692.408 L1126.26 692.408 L1126.82 692.408 L1127.38 692.408 L1127.94 692.408 L1128.5 692.408 L1129.06 692.408 L1129.62 692.408 L1130.18 692.408 L1130.74 692.408 L1131.3 692.408 L1131.86 692.408 L1132.41 692.408 L1132.97 692.408 L1133.53 692.408 L1134.09 692.408 L1134.65 692.408 L1135.21 692.408 L1135.77 692.408 L1136.33 692.408 L1136.89 692.408 L1137.45 692.408 L1138.01 692.408 L1138.57 692.408 L1139.13 692.408 L1139.68 692.408 L1140.24 692.408 L1140.8 692.408 L1141.36 692.408 L1141.92 692.408 L1142.48 692.408 L1143.04 692.408 L1143.6 692.408 L1144.16 692.408 L1144.72 692.408 L1145.28 692.408 L1145.84 692.408 L1146.4 692.408 L1146.96 692.408 L1147.51 692.408 L1148.07 692.408 L1148.63 692.408 L1149.19 692.408 L1149.75 692.408 L1150.31 692.408 L1150.87 692.408 L1151.43 692.408 L1151.99 692.408 L1152.55 692.408 L1153.11 692.408 L1153.67 692.408 L1154.23 692.408 L1154.78 692.408 L1155.34 692.408 L1155.9 692.408 L1156.46 692.408 L1157.02 692.408 L1157.58 692.408 L1158.14 692.408 L1158.7 692.408 L1159.26 692.408 L1159.82 692.408 L1160.38 692.408 L1160.94 692.408 L1161.5 692.408 L1162.05 692.408 L1162.61 692.408 L1163.17 692.408 L1163.73 692.408 L1164.29 692.408 L1164.85 692.408 L1165.41 692.408 L1165.97 692.408 L1166.53 692.408 L1167.09 692.408 L1167.65 692.408 L1168.21 692.408 L1168.77 692.408 L1169.33 692.408 L1169.88 692.408 L1170.44 692.408 L1171 692.408 L1171.56 692.408 L1172.12 692.408 L1172.68 692.408 L1173.24 692.408 L1173.8 692.408 L1174.36 692.408 L1174.92 692.408 L1175.48 692.408 L1176.04 692.408 L1176.6 692.408 L1177.15 692.408 L1177.71 692.408 L1178.27 692.408 L1178.83 692.408 L1179.39 692.408 L1179.95 692.408 L1180.51 692.408 L1181.07 692.408 L1181.63 692.408 L1182.19 692.408 L1182.75 692.408 L1183.31 692.408 L1183.87 692.408 L1184.43 692.408 L1184.98 692.408 L1185.54 692.408 L1186.1 692.408 L1186.66 692.408 L1187.22 692.408 L1187.78 692.408 L1188.34 692.408 L1188.9 692.408 L1189.46 692.408 L1190.02 692.408 L1190.58 692.408 L1191.14 692.408 L1191.7 692.408 L1192.25 692.408 L1192.81 692.408 L1193.37 692.408 L1193.93 692.408 L1194.49 692.408 L1195.05 692.408 L1195.61 692.408 L1196.17 692.408 L1196.73 692.408 L1197.29 692.408 L1197.85 692.408 L1198.41 692.408 L1198.97 692.408 L1199.52 692.408 L1200.08 692.408 L1200.64 692.408 L1201.2 692.408 L1201.76 692.408 L1202.32 692.408 L1202.88 692.408 L1203.44 692.408 L1204 692.408 L1204.56 692.408 L1205.12 692.408 L1205.68 692.408 L1206.24 692.408 L1206.8 692.408 L1207.35 692.408 L1207.91 692.408 L1208.47 692.408 L1209.03 692.408 L1209.59 692.408 L1210.15 692.408 L1210.71 692.408 L1211.27 692.408 L1211.83 692.408 L1212.39 692.408 L1212.95 692.408 L1213.51 692.408 L1214.07 692.408 L1214.62 692.408 L1215.18 692.408 L1215.74 692.408 L1216.3 692.408 L1216.86 692.408 L1217.42 692.408 L1217.98 692.408 L1218.54 692.408 L1219.1 692.408 L1219.66 692.408 L1220.22 692.408 L1220.78 692.408 L1221.34 692.408 L1221.89 692.408 L1222.45 692.408 L1223.01 692.408 L1223.57 692.408 L1224.13 692.408 L1224.69 692.408 L1225.25 692.408 L1225.81 692.408 L1226.37 692.408 L1226.93 692.408 L1227.49 692.408 L1228.05 692.408 L1228.61 692.408 L1229.17 692.408 L1229.72 692.408 L1230.28 692.408 L1230.84 692.408 L1231.4 692.408 L1231.96 692.408 L1232.52 692.408 L1233.08 692.408 L1233.64 692.408 L1234.2 692.408 L1234.76 692.408 L1235.32 692.408 L1235.88 692.408 L1236.44 692.408 L1236.99 692.408 L1237.55 692.408 L1238.11 692.408 L1238.67 692.408 L1239.23 692.408 L1239.79 692.408 L1240.35 692.408 L1240.91 692.408 L1241.47 692.408 L1242.03 692.408 L1242.59 692.408 L1243.15 692.408 L1243.71 692.408 L1244.26 692.408 L1244.82 692.408 L1245.38 692.408 L1245.94 692.408 L1246.5 692.408 L1247.06 692.408 L1247.62 692.408 L1248.18 692.408 L1248.74 692.408 L1249.3 692.408 L1249.86 692.408 L1250.42 692.408 L1250.98 692.408 L1251.54 692.408 L1252.09 692.408 L1252.65 692.408 L1253.21 692.408 L1253.77 692.408 L1254.33 692.408 L1254.89 692.408 L1255.45 692.408 L1256.01 692.408 L1256.57 692.408 L1257.13 692.408 L1257.69 692.408 L1258.25 692.408 L1258.81 692.408 L1259.36 692.408 L1259.92 692.408 L1260.48 692.408 L1261.04 692.408 L1261.6 692.408 L1262.16 692.408 L1262.72 692.408 L1263.28 692.408 L1263.84 692.408 L1264.4 692.408 L1264.96 692.408 L1265.52 692.408 L1266.08 692.408 L1266.63 692.408 L1267.19 692.408 L1267.75 692.408 L1268.31 692.408 L1268.87 692.408 L1269.43 692.408 L1269.99 692.408 L1270.55 692.408 L1271.11 692.408 L1271.67 692.408 L1272.23 692.408 L1272.79 692.408 L1273.35 692.408 L1273.91 692.408 L1274.46 692.408 L1275.02 692.408 L1275.58 692.408 L1276.14 692.408 L1276.7 692.408 L1277.26 692.408 L1277.82 692.408 L1278.38 692.408 L1278.94 692.408 L1279.5 692.408 L1280.06 692.408 L1280.62 692.408 L1281.18 692.408 L1281.73 692.408 L1282.29 692.408 L1282.85 692.408 L1283.41 692.408 L1283.97 692.408 L1284.53 692.408 L1285.09 692.408 L1285.65 692.408 L1286.21 692.408 L1286.77 692.408 L1287.33 692.408 L1287.89 692.408 L1288.45 692.408 L1289 692.408 L1289.56 692.408 L1290.12 692.408 L1290.68 692.408 L1291.24 692.408 L1291.8 692.408 L1292.36 692.408 L1292.92 692.408 L1293.48 692.408 L1294.04 692.408 L1294.6 692.408 L1295.16 692.408 L1295.72 692.408 L1296.28 692.408 L1296.83 692.408 L1297.39 692.408 L1297.95 692.408 L1298.51 692.408 L1299.07 692.408 L1299.63 692.408 L1300.19 692.408 L1300.75 692.408 L1301.31 692.408 L1301.87 692.408 L1302.43 692.408 L1302.99 692.408 L1303.55 692.408 L1304.1 692.408 L1304.66 692.408 L1305.22 692.408 L1305.78 692.408 L1306.34 692.408 L1306.9 692.408 L1307.46 692.408 L1308.02 692.408 L1308.58 692.408 L1309.14 692.408 L1309.7 692.408 L1310.26 692.408 L1310.82 692.408 L1311.38 692.408 L1311.93 692.408 L1312.49 692.408 L1313.05 692.408 L1313.61 692.408 L1314.17 692.408 L1314.73 692.408 L1315.29 692.408 L1315.85 692.408 L1316.41 692.408 L1316.97 692.408 L1317.53 692.408 L1318.09 692.408 L1318.65 692.408 L1319.2 692.408 L1319.76 692.408 L1320.32 692.408 L1320.88 692.408 L1321.44 692.408 L1322 692.408 L1322.56 692.408 L1323.12 692.408 L1323.68 692.408 L1324.24 692.408 L1324.8 692.408 L1325.36 692.408 L1325.92 692.408 L1326.47 692.408 L1327.03 692.408 L1327.59 692.408 L1328.15 692.408 L1328.71 692.408 L1329.27 692.408 L1329.83 692.408 L1330.39 692.408 L1330.95 692.408 L1331.51 692.408 L1332.07 692.408 L1332.63 692.408 L1333.19 692.408 L1333.75 692.408 L1334.3 692.408 L1334.86 692.408 L1335.42 692.408 L1335.98 692.408 L1336.54 692.408 L1337.1 692.408 L1337.66 692.408 L1338.22 692.408 L1338.78 692.408 L1339.34 692.408 L1339.9 692.408 L1340.46 692.408 L1341.02 692.408 L1341.57 692.408 L1342.13 692.408 L1342.69 692.408 L1343.25 692.408 L1343.81 692.408 L1344.37 692.408 L1344.93 692.408 L1345.49 692.408 L1346.05 692.408 L1346.61 692.408 L1347.17 692.408 L1347.73 692.408 L1348.29 692.408 L1348.84 692.408 L1349.4 692.408 L1349.96 692.408 L1350.52 692.408 L1351.08 692.408 L1351.64 692.408 L1352.2 692.408 L1352.76 692.408 L1353.32 692.408 L1353.88 692.408 L1354.44 692.408 L1355 692.408 L1355.56 692.408 L1356.12 692.408 L1356.67 692.408 L1357.23 692.408 L1357.79 692.408 L1358.35 692.408 L1358.91 692.408 L1359.47 692.408 L1360.03 692.408 L1360.59 692.408 L1361.15 692.408 L1361.71 692.408 L1362.27 692.408 L1362.83 692.408 L1363.39 692.408 L1363.94 692.408 L1364.5 692.408 L1365.06 692.408 L1365.62 692.408 L1366.18 692.408 L1366.74 692.408 L1367.3 692.408 L1367.86 692.408 L1368.42 692.408 L1368.98 692.408 L1369.54 692.408 L1370.1 692.408 L1370.66 692.408 L1371.21 692.408 L1371.77 692.408 L1372.33 692.408 L1372.89 692.408 L1373.45 692.408 L1374.01 692.408 L1374.57 692.408 L1375.13 692.408 L1375.69 692.408 L1376.25 692.408 L1376.81 692.408 L1377.37 692.408 L1377.93 692.408 L1378.49 692.408 L1379.04 692.408 L1379.6 692.408 L1380.16 692.408 L1380.72 692.408 L1381.28 692.408 L1381.84 692.408 L1382.4 692.408 L1382.96 692.408 L1383.52 692.408 L1384.08 692.408 L1384.64 692.408 L1385.2 692.408 L1385.76 692.408 L1386.31 692.408 L1386.87 692.408 L1387.43 692.408 L1387.99 692.408 L1388.55 692.408 L1389.11 692.408 L1389.67 692.408 L1390.23 692.408 L1390.79 692.408 L1391.35 692.408 L1391.91 692.408 L1392.47 692.408 L1393.03 692.408 L1393.58 692.408 L1394.14 692.408 L1394.7 692.408 L1395.26 692.408 L1395.82 692.408 L1396.38 692.408 L1396.94 692.408 L1397.5 692.408 L1398.06 692.408 L1398.62 692.408 L1399.18 692.408 L1399.74 692.408 L1400.3 692.408 L1400.86 692.408 L1401.41 692.408 L1401.97 692.408 L1402.53 692.408 L1403.09 692.408 L1403.65 692.408 L1404.21 692.408 L1404.77 692.408 L1405.33 692.408 L1405.89 692.408 L1406.45 692.408 L1407.01 692.408 L1407.57 692.408 L1408.13 692.408 L1408.68 692.408 L1409.24 692.408 L1409.8 692.408 L1410.36 692.408 L1410.92 692.408 L1411.48 692.408 L1412.04 692.408 L1412.6 692.408 L1413.16 692.408 L1413.72 692.408 L1414.28 692.408 L1414.84 692.408 L1415.4 692.408 L1415.95 692.408 L1416.51 692.408 L1417.07 692.408 L1417.63 692.408 L1418.19 692.408 L1418.75 692.408 L1419.31 692.408 L1419.87 692.408 L1420.43 692.408 L1420.99 692.408 L1421.55 692.408 L1422.11 692.408 L1422.67 692.408 L1423.23 692.408 L1423.78 692.408 L1424.34 692.408 L1424.9 692.408 L1425.46 692.408 L1426.02 692.408 L1426.58 692.408 L1427.14 692.408 L1427.7 692.408 L1428.26 692.408 L1428.82 692.408 L1429.38 692.408 L1429.94 692.408 L1430.5 692.408 L1431.05 692.408 L1431.61 692.408 L1432.17 692.408 L1432.73 692.408 L1433.29 692.408 L1433.85 692.408 L1434.41 692.408 L1434.97 692.408 L1435.53 692.408 L1436.09 692.408 L1436.65 692.408 L1437.21 692.408 L1437.77 692.408 L1438.33 692.408 L1438.88 692.408 L1439.44 692.408 L1440 692.408 L1440.56 692.408 L1441.12 692.408 L1441.68 692.408 L1442.24 692.408 L1442.8 692.408 L1443.36 692.408 L1443.92 692.408 L1444.48 692.408 L1445.04 692.408 L1445.6 692.408 L1446.15 692.408 L1446.71 692.408 L1447.27 692.408 L1447.83 692.408 L1448.39 692.408 L1448.95 692.408 L1449.51 692.408 L1450.07 692.408 L1450.63 692.408 L1451.19 692.408 L1451.75 692.408 L1452.31 692.408 L1452.87 692.408 L1453.42 692.408 L1453.98 692.408 L1454.54 692.408 L1455.1 692.408 L1455.66 692.408 L1456.22 692.408 L1456.78 692.408 L1457.34 692.408 L1457.9 692.408 L1458.46 692.408 L1459.02 692.408 L1459.58 692.408 L1460.14 692.408 L1460.7 692.408 L1461.25 692.408 L1461.81 692.408 L1462.37 692.408 L1462.93 692.408 L1463.49 692.408 L1464.05 692.408 L1464.61 692.408 L1465.17 692.408 L1465.73 692.408 L1466.29 692.408 L1466.85 692.408 L1467.41 692.408 L1467.97 692.408 L1468.52 692.408 L1469.08 692.408 L1469.64 692.408 L1470.2 692.408 L1470.76 692.408 L1471.32 692.408 L1471.88 692.408 L1472.44 692.408 L1473 692.408 L1473.56 692.408 L1474.12 692.408 L1474.68 692.408 L1475.24 692.408 L1475.79 692.408 L1476.35 692.408 L1476.91 692.408 L1477.47 692.408 L1478.03 692.408 L1478.59 692.408 L1479.15 692.408 L1479.71 692.408 L1480.27 692.408 L1480.83 692.408 L1481.39 692.408 L1481.95 692.408 L1482.51 692.408 L1483.07 692.408 L1483.62 692.408 L1484.18 692.408 L1484.74 692.408 L1485.3 692.408 L1485.86 692.408 L1486.42 692.408 L1486.98 692.408 L1487.54 692.408 L1488.1 692.408 L1488.66 692.408 L1489.22 692.408 L1489.78 692.408 L1490.34 692.408 L1490.89 692.408 L1491.45 692.408 L1492.01 692.408 L1492.57 692.408 L1493.13 692.408 L1493.69 692.408 L1494.25 692.408 L1494.81 692.408 L1495.37 692.408 L1495.93 692.408 L1496.49 692.408 L1497.05 692.408 L1497.61 692.408 L1498.16 692.408 L1498.72 692.408 L1499.28 692.408 L1499.84 692.408 L1500.4 692.408 L1500.96 692.408 L1501.52 692.408 L1502.08 692.408 L1502.64 692.408 L1503.2 692.408 L1503.76 692.408 L1504.32 692.408 L1504.88 692.408 L1505.44 692.408 L1505.99 692.408 L1506.55 692.408 L1507.11 692.408 L1507.67 692.408 L1508.23 692.408 L1508.79 692.408 L1509.35 692.408 L1509.91 692.408 L1510.47 692.408 L1511.03 692.408 L1511.59 692.408 L1512.15 692.408 L1512.71 692.408 L1513.26 692.408 L1513.82 692.408 L1514.38 692.408 L1514.94 692.408 L1515.5 692.408 L1516.06 692.408 L1516.62 692.408 L1517.18 692.408 L1517.74 692.408 L1518.3 692.408 L1518.86 692.408 L1519.42 692.408 L1519.98 692.408 L1520.53 692.408 L1521.09 692.408 L1521.65 692.408 L1522.21 692.408 L1522.77 692.408 L1523.33 692.408 L1523.89 692.408 L1524.45 692.408 L1525.01 692.408 L1525.57 692.408 L1526.13 692.408 L1526.69 692.408 L1527.25 692.408 L1527.81 692.408 L1528.36 692.408 L1528.92 692.408 L1529.48 692.408 L1530.04 692.408 L1530.6 692.408 L1531.16 692.408 L1531.72 692.408 L1532.28 692.408 L1532.84 692.408 L1533.4 692.408 L1533.96 692.408 L1534.52 692.408 L1535.08 692.408 L1535.63 692.408 L1536.19 692.408 L1536.75 692.408 L1537.31 692.408 L1537.87 692.408 L1538.43 692.408 L1538.99 692.408 L1539.55 692.408 L1540.11 692.408 L1540.67 692.408 L1541.23 692.408 L1541.79 692.408 L1542.35 692.408 L1542.9 692.408 L1543.46 692.408 L1544.02 692.408 L1544.58 692.408 L1545.14 692.408 L1545.7 692.408 L1546.26 692.408 L1546.82 692.408 L1547.38 692.408 L1547.94 692.408 L1548.5 692.408 L1549.06 692.408 L1549.62 692.408 L1550.18 692.408 L1550.73 692.408 L1551.29 692.408 L1551.85 692.408 L1552.41 692.408 L1552.97 692.408 L1553.53 692.408 L1554.09 692.408 L1554.65 692.408 L1555.21 692.408 L1555.77 692.408 L1556.33 692.408 L1556.89 692.408 L1557.45 692.408 L1558 692.408 L1558.56 692.408 L1559.12 692.408 L1559.68 692.408 L1560.24 692.408 L1560.8 692.408 L1561.36 692.408 L1561.92 692.408 L1562.48 692.408 L1563.04 692.408 L1563.6 692.408 L1564.16 692.408 L1564.72 692.408 L1565.28 692.408 L1565.83 692.408 L1566.39 692.408 L1566.95 692.408 L1567.51 692.408 L1568.07 692.408 L1568.63 692.408 L1569.19 692.408 L1569.75 692.408 L1570.31 692.408 L1570.87 692.408 L1571.43 692.408 L1571.99 692.408 L1572.55 692.408 L1573.1 692.408 L1573.66 692.408 L1574.22 692.408 L1574.78 692.408 L1575.34 692.408 L1575.9 692.408 L1576.46 692.408 L1577.02 692.408 L1577.58 692.408 L1578.14 692.408 L1578.7 692.408 L1579.26 692.408 L1579.82 692.408 L1580.37 692.408 L1580.93 692.408 L1581.49 692.408 L1582.05 692.408 L1582.61 692.408 L1583.17 692.408 L1583.73 692.408 L1584.29 692.408 L1584.85 692.408 L1585.41 692.408 L1585.97 692.408 L1586.53 692.408 L1587.09 692.408 L1587.65 692.408 L1588.2 692.408 L1588.76 692.408 L1589.32 692.408 L1589.88 692.408 L1590.44 692.408 L1591 692.408 L1591.56 692.408 L1592.12 692.408 L1592.68 692.408 L1593.24 692.408 L1593.8 692.408 L1594.36 692.408 L1594.92 692.408 L1595.47 692.408 L1596.03 692.408 L1596.59 692.408 L1597.15 692.408 L1597.71 692.408 L1598.27 692.408 L1598.83 692.408 L1599.39 692.408 L1599.95 692.408 L1600.51 692.408 L1601.07 692.408 L1601.63 692.408 L1602.19 692.408 L1602.74 692.408 L1603.3 692.408 L1603.86 692.408 L1604.42 692.408 L1604.98 692.408 L1605.54 692.408 L1606.1 692.408 L1606.66 692.408 L1607.22 692.408 L1607.78 692.408 L1608.34 692.408 L1608.9 692.408 L1609.46 692.408 L1610.02 692.408 L1610.57 692.408 L1611.13 692.408 L1611.69 692.408 L1612.25 692.408 L1612.81 692.408 L1613.37 692.408 L1613.93 692.408 L1614.49 692.408 L1615.05 692.408 L1615.61 692.408 L1616.17 692.408 L1616.73 692.408 L1617.29 692.408 L1617.84 692.408 L1618.4 692.408 L1618.96 692.408 L1619.52 692.408 L1620.08 692.408 L1620.64 692.408 L1621.2 692.408 L1621.76 692.408 L1622.32 692.408 L1622.88 692.408 L1623.44 692.408 L1624 692.408 L1624.56 692.408 L1625.11 692.408 L1625.67 692.408 L1626.23 692.408 L1626.79 692.408 L1627.35 692.408 L1627.91 692.408 L1628.47 692.408 L1629.03 692.408 L1629.59 692.408 L1630.15 692.408 L1630.71 692.408 L1631.27 692.408 L1631.83 692.408 L1632.39 692.408 L1632.94 692.408 L1633.5 692.408 L1634.06 692.408 L1634.62 692.408 L1635.18 692.408 L1635.74 692.408 L1636.3 692.408 L1636.86 692.408 L1637.42 692.408 L1637.98 692.408 L1638.54 692.408 L1639.1 692.408 L1639.66 692.408 L1640.21 692.408 L1640.77 692.408 L1641.33 692.408 L1641.89 692.408 L1642.45 692.408 L1643.01 692.408 L1643.57 692.408 L1644.13 692.408 L1644.69 692.408 L1645.25 692.408 L1645.81 692.408 L1646.37 692.408 L1646.93 692.408 L1647.48 692.408 L1648.04 692.408 L1648.6 692.408 L1649.16 692.408 L1649.72 692.408 L1650.28 692.408 L1650.84 692.408 L1651.4 692.408 L1651.96 692.408 L1652.52 692.408 L1653.08 692.408 L1653.64 692.408 L1654.2 692.408 L1654.76 692.408 L1655.31 692.408 L1655.87 692.408 L1656.43 692.408 L1656.99 692.408 L1657.55 692.408 L1658.11 692.408 L1658.67 692.408 L1659.23 692.408 L1659.79 692.408 L1660.35 692.408 L1660.91 692.408 L1661.47 692.408 L1662.03 692.408 L1662.58 692.408 L1663.14 692.408 L1663.7 692.408 L1664.26 692.408 L1664.82 692.408 L1665.38 692.408 L1665.94 692.408 L1666.5 692.408 L1667.06 692.408 L1667.62 692.408 L1668.18 692.408 L1668.74 692.408 L1669.3 692.408 L1669.85 692.408 L1670.41 692.408 L1670.97 692.408 L1671.53 692.408 L1672.09 692.408 L1672.65 692.408 L1673.21 692.408 L1673.77 692.408 L1674.33 692.408 L1674.89 692.408 L1675.45 692.408 L1676.01 692.408 L1676.57 692.408 L1677.13 692.408 L1677.68 692.408 L1678.24 692.408 L1678.8 692.408 L1679.36 692.408 L1679.92 692.408 L1680.48 692.408 L1681.04 692.408 L1681.6 692.408 L1682.16 692.408 L1682.72 692.408 L1683.28 692.408 L1683.84 692.408 L1684.4 692.408 L1684.95 692.408 L1685.51 692.408 L1686.07 692.408 L1686.63 692.408 L1687.19 692.408 L1687.75 692.408 L1688.31 692.408 L1688.87 692.408 L1689.43 692.408 L1689.99 692.408 L1690.55 692.408 L1691.11 692.408 L1691.67 692.408 L1692.23 692.408 L1692.78 692.408 L1693.34 692.408 L1693.9 692.408 L1694.46 692.408 L1695.02 692.408 L1695.58 692.408 L1696.14 692.408 L1696.7 692.408 L1697.26 692.408 L1697.82 692.408 L1698.38 692.408 L1698.94 692.408 L1699.5 692.408 L1700.05 692.408 L1700.61 692.408 L1701.17 692.408 L1701.73 692.408 L1702.29 692.408 L1702.85 692.408 L1703.41 692.408 L1703.97 692.408 L1704.53 692.408 L1705.09 692.408 L1705.65 692.408 L1706.21 692.408 L1706.77 692.408 L1707.32 692.408 L1707.88 692.408 L1708.44 692.408 L1709 692.408 L1709.56 692.408 L1710.12 692.408 L1710.68 692.408 L1711.24 692.408 L1711.8 692.408 L1712.36 692.408 L1712.92 692.408 L1713.48 692.408 L1714.04 692.408 L1714.6 692.408 L1715.15 692.408 L1715.71 692.408 L1716.27 692.408 L1716.83 692.408 L1717.39 692.408 L1717.95 692.408 L1718.51 692.408 L1719.07 692.408 L1719.63 692.408 L1720.19 692.408 L1720.75 692.408 L1721.31 692.408 L1721.87 692.408 L1722.42 692.408 L1722.98 692.408 L1723.54 692.408 L1724.1 692.408 L1724.66 692.408 L1725.22 692.408 L1725.78 692.408 L1726.34 692.408 L1726.9 692.408 L1727.46 692.408 L1728.02 692.408 L1728.58 692.408 L1729.14 692.408 L1729.69 692.408 L1730.25 692.408 L1730.81 692.408 L1731.37 692.408 L1731.93 692.408 L1732.49 692.408 L1733.05 692.408 L1733.61 692.408 L1734.17 692.408 L1734.73 692.408 L1735.29 692.408 L1735.85 692.408 L1736.41 692.408 L1736.97 692.408 L1737.52 692.408 L1738.08 692.408 L1738.64 692.408 L1739.2 692.408 L1739.76 692.408 L1740.32 692.408 L1740.88 692.408 L1741.44 692.408 L1742 692.408 L1742.56 692.408 L1743.12 692.408 L1743.68 692.408 L1744.24 692.408 L1744.79 692.408 L1745.35 692.408 L1745.91 692.408 L1746.47 692.408 L1747.03 692.408 L1747.59 692.408 L1748.15 692.408 L1748.71 692.408 L1749.27 692.408 L1749.83 692.408 L1750.39 692.408 L1750.95 692.408 L1751.51 692.408 L1752.06 692.408 L1752.62 692.408 L1753.18 692.408 L1753.74 692.408 L1754.3 692.408 L1754.86 692.408 L1755.42 692.408 L1755.98 692.408 L1756.54 692.408 L1757.1 692.408 L1757.66 692.408 L1758.22 692.408 L1758.78 692.408 L1759.34 692.408 L1759.89 692.408 L1760.45 692.408 L1761.01 692.408 L1761.57 692.408 L1762.13 692.408 L1762.69 692.408 L1763.25 692.408 L1763.81 692.408 L1764.37 692.408 L1764.93 692.408 L1765.49 692.408 L1766.05 692.408 L1766.61 692.408 L1767.16 692.408 L1767.72 692.408 L1768.28 692.408 L1768.84 692.408 L1769.4 692.408 L1769.96 692.408 L1770.52 692.408 L1771.08 692.408 L1771.64 692.408 L1772.2 692.408 L1772.76 692.408 L1773.32 692.408 L1773.88 692.408 L1774.43 692.408 L1774.99 692.408 L1775.55 692.408 L1776.11 692.408 L1776.67 692.408 L1777.23 692.408 L1777.79 692.408 L1778.35 692.408 L1778.91 692.408 L1779.47 692.408 L1780.03 692.408 L1780.59 692.408 L1781.15 692.408 L1781.71 692.408 L1782.26 692.408 L1782.82 692.408 L1783.38 692.408 L1783.94 692.408 L1784.5 692.408 L1785.06 692.408 L1785.62 692.408 L1786.18 692.408 L1786.74 692.408 L1787.3 692.408 L1787.86 692.408 L1788.42 692.408 L1788.98 692.408 L1789.53 692.408 L1790.09 692.408 L1790.65 692.408 L1791.21 692.408 L1791.77 692.408 L1792.33 692.408 L1792.89 692.408 L1793.45 692.408 L1794.01 692.408 L1794.57 692.408 L1795.13 692.408 L1795.69 692.408 L1796.25 692.408 L1796.8 692.408 L1797.36 692.408 L1797.92 692.408 L1798.48 692.408 L1799.04 692.408 L1799.6 692.408 L1800.16 692.408 L1800.72 692.408 L1801.28 692.408 L1801.84 692.408 L1802.4 692.408 L1802.96 692.408 L1803.52 692.408 L1804.08 692.408 L1804.63 692.408 L1805.19 692.408 L1805.75 692.408 L1806.31 692.408 L1806.87 692.408 L1807.43 692.408 L1807.99 692.408 L1808.55 692.408 L1809.11 692.408 L1809.67 692.408 L1810.23 692.408 L1810.79 692.408 L1811.35 692.408 L1811.9 692.408 L1812.46 692.408 L1813.02 692.408 L1813.58 692.408 L1814.14 692.408 L1814.7 692.408 L1815.26 692.408 L1815.82 692.408 L1816.38 692.408 L1816.94 692.408 L1817.5 692.408 L1818.06 692.408 L1818.62 692.408 L1819.18 692.408 L1819.73 692.408 L1820.29 692.408 L1820.85 692.408 L1821.41 692.408 L1821.97 692.408 L1822.53 692.408 L1823.09 692.408 L1823.65 692.408 L1824.21 692.408 L1824.77 692.408 L1825.33 692.408 L1825.89 692.408 L1826.45 692.408 L1827 692.408 L1827.56 692.408 L1828.12 692.408 L1828.68 692.408 L1829.24 692.408 L1829.8 692.408 L1830.36 692.408 L1830.92 692.408 L1831.48 692.408 L1832.04 692.408 L1832.6 692.408 L1833.16 692.408 L1833.72 692.408 L1834.27 692.408 L1834.83 692.408 L1835.39 692.408 L1835.95 692.408 L1836.51 692.408 L1837.07 692.408 L1837.63 692.408 L1838.19 692.408 L1838.19 682.461 L1837.63 682.461 L1837.07 682.461 L1836.51 682.461 L1835.95 682.461 L1835.39 682.461 L1834.83 682.461 L1834.27 682.461 L1833.72 682.461 L1833.16 682.461 L1832.6 682.461 L1832.04 682.461 L1831.48 682.461 L1830.92 682.461 L1830.36 682.461 L1829.8 682.461 L1829.24 682.461 L1828.68 682.461 L1828.12 682.461 L1827.56 682.461 L1827 682.461 L1826.45 682.461 L1825.89 682.461 L1825.33 682.461 L1824.77 682.461 L1824.21 682.461 L1823.65 682.461 L1823.09 682.461 L1822.53 682.461 L1821.97 682.461 L1821.41 682.461 L1820.85 682.461 L1820.29 682.461 L1819.73 682.461 L1819.18 682.461 L1818.62 682.461 L1818.06 682.461 L1817.5 682.461 L1816.94 682.461 L1816.38 682.461 L1815.82 682.461 L1815.26 682.461 L1814.7 682.461 L1814.14 682.461 L1813.58 682.461 L1813.02 682.461 L1812.46 682.461 L1811.9 682.461 L1811.35 682.461 L1810.79 682.461 L1810.23 682.461 L1809.67 682.461 L1809.11 682.461 L1808.55 682.461 L1807.99 682.461 L1807.43 682.461 L1806.87 682.461 L1806.31 682.461 L1805.75 682.461 L1805.19 682.461 L1804.63 682.461 L1804.08 682.461 L1803.52 682.461 L1802.96 682.461 L1802.4 682.461 L1801.84 682.461 L1801.28 682.461 L1800.72 682.461 L1800.16 682.461 L1799.6 682.461 L1799.04 682.461 L1798.48 682.461 L1797.92 682.461 L1797.36 682.461 L1796.8 682.461 L1796.25 682.461 L1795.69 682.461 L1795.13 682.461 L1794.57 682.461 L1794.01 682.461 L1793.45 682.461 L1792.89 682.461 L1792.33 682.461 L1791.77 682.461 L1791.21 682.461 L1790.65 682.461 L1790.09 682.461 L1789.53 682.461 L1788.98 682.461 L1788.42 682.461 L1787.86 682.461 L1787.3 682.461 L1786.74 682.461 L1786.18 682.461 L1785.62 682.461 L1785.06 682.461 L1784.5 682.461 L1783.94 682.461 L1783.38 682.461 L1782.82 682.461 L1782.26 682.461 L1781.71 682.461 L1781.15 682.461 L1780.59 682.461 L1780.03 682.461 L1779.47 682.461 L1778.91 682.461 L1778.35 682.461 L1777.79 682.461 L1777.23 682.461 L1776.67 682.461 L1776.11 682.461 L1775.55 682.461 L1774.99 682.461 L1774.43 682.461 L1773.88 682.461 L1773.32 682.461 L1772.76 682.461 L1772.2 682.461 L1771.64 682.461 L1771.08 682.461 L1770.52 682.461 L1769.96 682.461 L1769.4 682.461 L1768.84 682.461 L1768.28 682.461 L1767.72 682.461 L1767.16 682.461 L1766.61 682.461 L1766.05 682.461 L1765.49 682.461 L1764.93 682.461 L1764.37 682.461 L1763.81 682.461 L1763.25 682.461 L1762.69 682.461 L1762.13 682.461 L1761.57 682.461 L1761.01 682.461 L1760.45 682.461 L1759.89 682.461 L1759.34 682.461 L1758.78 682.461 L1758.22 682.461 L1757.66 682.461 L1757.1 682.461 L1756.54 682.461 L1755.98 682.461 L1755.42 682.461 L1754.86 682.461 L1754.3 682.461 L1753.74 682.461 L1753.18 682.461 L1752.62 682.461 L1752.06 682.461 L1751.51 682.461 L1750.95 682.461 L1750.39 682.461 L1749.83 682.461 L1749.27 682.461 L1748.71 682.461 L1748.15 682.461 L1747.59 682.461 L1747.03 682.461 L1746.47 682.461 L1745.91 682.461 L1745.35 682.461 L1744.79 682.461 L1744.24 682.461 L1743.68 682.461 L1743.12 682.461 L1742.56 682.461 L1742 682.461 L1741.44 682.461 L1740.88 682.461 L1740.32 682.461 L1739.76 682.461 L1739.2 682.461 L1738.64 682.461 L1738.08 682.461 L1737.52 682.461 L1736.97 682.461 L1736.41 682.461 L1735.85 682.461 L1735.29 682.461 L1734.73 682.461 L1734.17 682.461 L1733.61 682.461 L1733.05 682.461 L1732.49 682.461 L1731.93 682.461 L1731.37 682.461 L1730.81 682.461 L1730.25 682.461 L1729.69 682.461 L1729.14 682.461 L1728.58 682.461 L1728.02 682.461 L1727.46 682.461 L1726.9 682.461 L1726.34 682.461 L1725.78 682.461 L1725.22 682.461 L1724.66 682.461 L1724.1 682.461 L1723.54 682.461 L1722.98 682.461 L1722.42 682.461 L1721.87 682.461 L1721.31 682.461 L1720.75 682.461 L1720.19 682.461 L1719.63 682.461 L1719.07 682.461 L1718.51 682.461 L1717.95 682.461 L1717.39 682.461 L1716.83 682.461 L1716.27 682.461 L1715.71 682.461 L1715.15 682.461 L1714.6 682.461 L1714.04 682.461 L1713.48 682.461 L1712.92 682.461 L1712.36 682.461 L1711.8 682.461 L1711.24 682.461 L1710.68 682.461 L1710.12 682.461 L1709.56 682.461 L1709 682.461 L1708.44 682.461 L1707.88 682.461 L1707.32 682.461 L1706.77 682.461 L1706.21 682.461 L1705.65 682.461 L1705.09 682.461 L1704.53 682.461 L1703.97 682.461 L1703.41 682.461 L1702.85 682.461 L1702.29 682.461 L1701.73 682.461 L1701.17 682.461 L1700.61 682.461 L1700.05 682.461 L1699.5 682.461 L1698.94 682.461 L1698.38 682.461 L1697.82 682.461 L1697.26 682.461 L1696.7 682.461 L1696.14 682.461 L1695.58 682.461 L1695.02 682.461 L1694.46 682.461 L1693.9 682.461 L1693.34 682.461 L1692.78 682.461 L1692.23 682.461 L1691.67 682.461 L1691.11 682.461 L1690.55 682.461 L1689.99 682.461 L1689.43 682.461 L1688.87 682.461 L1688.31 682.461 L1687.75 682.461 L1687.19 682.461 L1686.63 682.461 L1686.07 682.461 L1685.51 682.461 L1684.95 682.461 L1684.4 682.461 L1683.84 682.461 L1683.28 682.461 L1682.72 682.461 L1682.16 682.461 L1681.6 682.461 L1681.04 682.461 L1680.48 682.461 L1679.92 682.461 L1679.36 682.461 L1678.8 682.461 L1678.24 682.461 L1677.68 682.461 L1677.13 682.461 L1676.57 682.461 L1676.01 682.461 L1675.45 682.461 L1674.89 682.461 L1674.33 682.461 L1673.77 682.461 L1673.21 682.461 L1672.65 682.461 L1672.09 682.461 L1671.53 682.461 L1670.97 682.461 L1670.41 682.461 L1669.85 682.461 L1669.3 682.461 L1668.74 682.461 L1668.18 682.461 L1667.62 682.461 L1667.06 682.461 L1666.5 682.461 L1665.94 682.461 L1665.38 682.461 L1664.82 682.461 L1664.26 682.461 L1663.7 682.461 L1663.14 682.461 L1662.58 682.461 L1662.03 682.461 L1661.47 682.461 L1660.91 682.461 L1660.35 682.461 L1659.79 682.461 L1659.23 682.461 L1658.67 682.461 L1658.11 682.461 L1657.55 682.461 L1656.99 682.461 L1656.43 682.461 L1655.87 682.461 L1655.31 682.461 L1654.76 682.461 L1654.2 682.461 L1653.64 682.461 L1653.08 682.461 L1652.52 682.461 L1651.96 682.461 L1651.4 682.461 L1650.84 682.461 L1650.28 682.461 L1649.72 682.461 L1649.16 682.461 L1648.6 682.461 L1648.04 682.461 L1647.48 682.461 L1646.93 682.461 L1646.37 682.461 L1645.81 682.461 L1645.25 682.461 L1644.69 682.461 L1644.13 682.461 L1643.57 682.461 L1643.01 682.461 L1642.45 682.461 L1641.89 682.461 L1641.33 682.461 L1640.77 682.461 L1640.21 682.461 L1639.66 682.461 L1639.1 682.461 L1638.54 682.461 L1637.98 682.461 L1637.42 682.461 L1636.86 682.461 L1636.3 682.461 L1635.74 682.461 L1635.18 682.461 L1634.62 682.461 L1634.06 682.461 L1633.5 682.461 L1632.94 682.461 L1632.39 682.461 L1631.83 682.461 L1631.27 682.461 L1630.71 682.461 L1630.15 682.461 L1629.59 682.461 L1629.03 682.461 L1628.47 682.461 L1627.91 682.461 L1627.35 682.461 L1626.79 682.461 L1626.23 682.461 L1625.67 682.461 L1625.11 682.461 L1624.56 682.461 L1624 682.461 L1623.44 682.461 L1622.88 682.461 L1622.32 682.461 L1621.76 682.461 L1621.2 682.461 L1620.64 682.461 L1620.08 682.461 L1619.52 682.461 L1618.96 682.461 L1618.4 682.461 L1617.84 682.461 L1617.29 682.461 L1616.73 682.461 L1616.17 682.461 L1615.61 682.461 L1615.05 682.461 L1614.49 682.461 L1613.93 682.461 L1613.37 682.461 L1612.81 682.461 L1612.25 682.461 L1611.69 682.461 L1611.13 682.461 L1610.57 682.461 L1610.02 682.461 L1609.46 682.461 L1608.9 682.461 L1608.34 682.461 L1607.78 682.461 L1607.22 682.461 L1606.66 682.461 L1606.1 682.461 L1605.54 682.461 L1604.98 682.461 L1604.42 682.461 L1603.86 682.461 L1603.3 682.461 L1602.74 682.461 L1602.19 682.461 L1601.63 682.461 L1601.07 682.461 L1600.51 682.461 L1599.95 682.461 L1599.39 682.461 L1598.83 682.461 L1598.27 682.461 L1597.71 682.461 L1597.15 682.461 L1596.59 682.461 L1596.03 682.461 L1595.47 682.461 L1594.92 682.461 L1594.36 682.461 L1593.8 682.461 L1593.24 682.461 L1592.68 682.461 L1592.12 682.461 L1591.56 682.461 L1591 682.461 L1590.44 682.461 L1589.88 682.461 L1589.32 682.461 L1588.76 682.461 L1588.2 682.461 L1587.65 682.461 L1587.09 682.461 L1586.53 682.461 L1585.97 682.461 L1585.41 682.461 L1584.85 682.461 L1584.29 682.461 L1583.73 682.461 L1583.17 682.461 L1582.61 682.461 L1582.05 682.461 L1581.49 682.461 L1580.93 682.461 L1580.37 682.461 L1579.82 682.461 L1579.26 682.461 L1578.7 682.461 L1578.14 682.461 L1577.58 682.461 L1577.02 682.461 L1576.46 682.461 L1575.9 682.461 L1575.34 682.461 L1574.78 682.461 L1574.22 682.461 L1573.66 682.461 L1573.1 682.461 L1572.55 682.461 L1571.99 682.461 L1571.43 682.461 L1570.87 682.461 L1570.31 682.461 L1569.75 682.461 L1569.19 682.461 L1568.63 682.461 L1568.07 682.461 L1567.51 682.461 L1566.95 682.461 L1566.39 682.461 L1565.83 682.461 L1565.28 682.461 L1564.72 682.461 L1564.16 682.461 L1563.6 682.461 L1563.04 682.461 L1562.48 682.461 L1561.92 682.461 L1561.36 682.461 L1560.8 682.461 L1560.24 682.461 L1559.68 682.461 L1559.12 682.461 L1558.56 682.461 L1558 682.461 L1557.45 682.461 L1556.89 682.461 L1556.33 682.461 L1555.77 682.461 L1555.21 682.461 L1554.65 682.461 L1554.09 682.461 L1553.53 682.461 L1552.97 682.461 L1552.41 682.461 L1551.85 682.461 L1551.29 682.461 L1550.73 682.461 L1550.18 682.461 L1549.62 682.461 L1549.06 682.461 L1548.5 682.461 L1547.94 682.461 L1547.38 682.461 L1546.82 682.461 L1546.26 682.461 L1545.7 682.461 L1545.14 682.461 L1544.58 682.461 L1544.02 682.461 L1543.46 682.461 L1542.9 682.461 L1542.35 682.461 L1541.79 682.461 L1541.23 682.461 L1540.67 682.461 L1540.11 682.461 L1539.55 682.461 L1538.99 682.461 L1538.43 682.461 L1537.87 682.461 L1537.31 682.461 L1536.75 682.461 L1536.19 682.461 L1535.63 682.461 L1535.08 682.461 L1534.52 682.461 L1533.96 682.461 L1533.4 682.461 L1532.84 682.461 L1532.28 682.461 L1531.72 682.461 L1531.16 682.461 L1530.6 682.461 L1530.04 682.461 L1529.48 682.461 L1528.92 682.461 L1528.36 682.461 L1527.81 682.461 L1527.25 682.461 L1526.69 682.461 L1526.13 682.461 L1525.57 682.461 L1525.01 682.461 L1524.45 682.461 L1523.89 682.461 L1523.33 682.461 L1522.77 682.461 L1522.21 682.461 L1521.65 682.461 L1521.09 682.461 L1520.53 682.461 L1519.98 682.461 L1519.42 682.461 L1518.86 682.461 L1518.3 682.461 L1517.74 682.461 L1517.18 682.461 L1516.62 682.461 L1516.06 682.461 L1515.5 682.461 L1514.94 682.461 L1514.38 682.461 L1513.82 682.461 L1513.26 682.461 L1512.71 682.461 L1512.15 682.461 L1511.59 682.461 L1511.03 682.461 L1510.47 682.461 L1509.91 682.461 L1509.35 682.461 L1508.79 682.461 L1508.23 682.461 L1507.67 682.461 L1507.11 682.461 L1506.55 682.461 L1505.99 682.461 L1505.44 682.461 L1504.88 682.461 L1504.32 682.461 L1503.76 682.461 L1503.2 682.461 L1502.64 682.461 L1502.08 682.461 L1501.52 682.461 L1500.96 682.461 L1500.4 682.461 L1499.84 682.461 L1499.28 682.461 L1498.72 682.461 L1498.16 682.461 L1497.61 682.461 L1497.05 682.461 L1496.49 682.461 L1495.93 682.461 L1495.37 682.461 L1494.81 682.461 L1494.25 682.461 L1493.69 682.461 L1493.13 682.461 L1492.57 682.461 L1492.01 682.461 L1491.45 682.461 L1490.89 682.461 L1490.34 682.461 L1489.78 682.461 L1489.22 682.461 L1488.66 682.461 L1488.1 682.461 L1487.54 682.461 L1486.98 682.461 L1486.42 682.461 L1485.86 682.461 L1485.3 682.461 L1484.74 682.461 L1484.18 682.461 L1483.62 682.461 L1483.07 682.461 L1482.51 682.461 L1481.95 682.461 L1481.39 682.461 L1480.83 682.461 L1480.27 682.461 L1479.71 682.461 L1479.15 682.461 L1478.59 682.461 L1478.03 682.461 L1477.47 682.461 L1476.91 682.461 L1476.35 682.461 L1475.79 682.461 L1475.24 682.461 L1474.68 682.461 L1474.12 682.461 L1473.56 682.461 L1473 682.461 L1472.44 682.461 L1471.88 682.461 L1471.32 682.461 L1470.76 682.461 L1470.2 682.461 L1469.64 682.461 L1469.08 682.461 L1468.52 682.461 L1467.97 682.461 L1467.41 682.461 L1466.85 682.461 L1466.29 682.461 L1465.73 682.461 L1465.17 682.461 L1464.61 682.461 L1464.05 682.461 L1463.49 682.461 L1462.93 682.461 L1462.37 682.461 L1461.81 682.461 L1461.25 682.461 L1460.7 682.461 L1460.14 682.461 L1459.58 682.461 L1459.02 682.461 L1458.46 682.461 L1457.9 682.461 L1457.34 682.461 L1456.78 682.461 L1456.22 682.461 L1455.66 682.461 L1455.1 682.461 L1454.54 682.461 L1453.98 682.461 L1453.42 682.461 L1452.87 682.461 L1452.31 682.461 L1451.75 682.461 L1451.19 682.461 L1450.63 682.461 L1450.07 682.461 L1449.51 682.461 L1448.95 682.461 L1448.39 682.461 L1447.83 682.461 L1447.27 682.461 L1446.71 682.461 L1446.15 682.461 L1445.6 682.461 L1445.04 682.461 L1444.48 682.461 L1443.92 682.461 L1443.36 682.461 L1442.8 682.461 L1442.24 682.461 L1441.68 682.461 L1441.12 682.461 L1440.56 682.461 L1440 682.461 L1439.44 682.461 L1438.88 682.461 L1438.33 682.461 L1437.77 682.461 L1437.21 682.461 L1436.65 682.461 L1436.09 682.461 L1435.53 682.461 L1434.97 682.461 L1434.41 682.461 L1433.85 682.461 L1433.29 682.461 L1432.73 682.461 L1432.17 682.461 L1431.61 682.461 L1431.05 682.461 L1430.5 682.461 L1429.94 682.461 L1429.38 682.461 L1428.82 682.461 L1428.26 682.461 L1427.7 682.461 L1427.14 682.461 L1426.58 682.461 L1426.02 682.461 L1425.46 682.461 L1424.9 682.461 L1424.34 682.461 L1423.78 682.461 L1423.23 682.461 L1422.67 682.461 L1422.11 682.461 L1421.55 682.461 L1420.99 682.461 L1420.43 682.461 L1419.87 682.461 L1419.31 682.461 L1418.75 682.461 L1418.19 682.461 L1417.63 682.461 L1417.07 682.461 L1416.51 682.461 L1415.95 682.461 L1415.4 682.461 L1414.84 682.461 L1414.28 682.461 L1413.72 682.461 L1413.16 682.461 L1412.6 682.461 L1412.04 682.461 L1411.48 682.461 L1410.92 682.461 L1410.36 682.461 L1409.8 682.461 L1409.24 682.461 L1408.68 682.461 L1408.13 682.461 L1407.57 682.461 L1407.01 682.461 L1406.45 682.461 L1405.89 682.461 L1405.33 682.461 L1404.77 682.461 L1404.21 682.461 L1403.65 682.461 L1403.09 682.461 L1402.53 682.461 L1401.97 682.461 L1401.41 682.461 L1400.86 682.461 L1400.3 682.461 L1399.74 682.461 L1399.18 682.461 L1398.62 682.461 L1398.06 682.461 L1397.5 682.461 L1396.94 682.461 L1396.38 682.461 L1395.82 682.461 L1395.26 682.461 L1394.7 682.461 L1394.14 682.461 L1393.58 682.461 L1393.03 682.461 L1392.47 682.461 L1391.91 682.461 L1391.35 682.461 L1390.79 682.461 L1390.23 682.461 L1389.67 682.461 L1389.11 682.461 L1388.55 682.461 L1387.99 682.461 L1387.43 682.461 L1386.87 682.461 L1386.31 682.461 L1385.76 682.461 L1385.2 682.461 L1384.64 682.461 L1384.08 682.461 L1383.52 682.461 L1382.96 682.461 L1382.4 682.461 L1381.84 682.461 L1381.28 682.461 L1380.72 682.461 L1380.16 682.461 L1379.6 682.461 L1379.04 682.461 L1378.49 682.461 L1377.93 682.461 L1377.37 682.461 L1376.81 682.461 L1376.25 682.461 L1375.69 682.461 L1375.13 682.461 L1374.57 682.461 L1374.01 682.461 L1373.45 682.461 L1372.89 682.461 L1372.33 682.461 L1371.77 682.461 L1371.21 682.461 L1370.66 682.461 L1370.1 682.461 L1369.54 682.461 L1368.98 682.461 L1368.42 682.461 L1367.86 682.461 L1367.3 682.461 L1366.74 682.461 L1366.18 682.461 L1365.62 682.461 L1365.06 682.461 L1364.5 682.461 L1363.94 682.461 L1363.39 682.461 L1362.83 682.461 L1362.27 682.461 L1361.71 682.461 L1361.15 682.461 L1360.59 682.461 L1360.03 682.461 L1359.47 682.461 L1358.91 682.461 L1358.35 682.461 L1357.79 682.461 L1357.23 682.461 L1356.67 682.461 L1356.12 682.461 L1355.56 682.461 L1355 682.461 L1354.44 682.461 L1353.88 682.461 L1353.32 682.461 L1352.76 682.461 L1352.2 682.461 L1351.64 682.461 L1351.08 682.461 L1350.52 682.461 L1349.96 682.461 L1349.4 682.461 L1348.84 682.461 L1348.29 682.461 L1347.73 682.461 L1347.17 682.461 L1346.61 682.461 L1346.05 682.461 L1345.49 682.461 L1344.93 682.461 L1344.37 682.461 L1343.81 682.461 L1343.25 682.461 L1342.69 682.461 L1342.13 682.461 L1341.57 682.461 L1341.02 682.461 L1340.46 682.461 L1339.9 682.461 L1339.34 682.461 L1338.78 682.461 L1338.22 682.461 L1337.66 682.461 L1337.1 682.461 L1336.54 682.461 L1335.98 682.461 L1335.42 682.461 L1334.86 682.461 L1334.3 682.461 L1333.75 682.461 L1333.19 682.461 L1332.63 682.461 L1332.07 682.461 L1331.51 682.461 L1330.95 682.461 L1330.39 682.461 L1329.83 682.461 L1329.27 682.461 L1328.71 682.461 L1328.15 682.461 L1327.59 682.461 L1327.03 682.461 L1326.47 682.461 L1325.92 682.461 L1325.36 682.461 L1324.8 682.461 L1324.24 682.461 L1323.68 682.461 L1323.12 682.461 L1322.56 682.461 L1322 682.461 L1321.44 682.461 L1320.88 682.461 L1320.32 682.461 L1319.76 682.461 L1319.2 682.461 L1318.65 682.461 L1318.09 682.461 L1317.53 682.461 L1316.97 682.461 L1316.41 682.461 L1315.85 682.461 L1315.29 682.461 L1314.73 682.461 L1314.17 682.461 L1313.61 682.461 L1313.05 682.461 L1312.49 682.461 L1311.93 682.461 L1311.38 682.461 L1310.82 682.461 L1310.26 682.461 L1309.7 682.461 L1309.14 682.461 L1308.58 682.461 L1308.02 682.461 L1307.46 682.461 L1306.9 682.461 L1306.34 682.461 L1305.78 682.461 L1305.22 682.461 L1304.66 682.461 L1304.1 682.461 L1303.55 682.461 L1302.99 682.461 L1302.43 682.461 L1301.87 682.461 L1301.31 682.461 L1300.75 682.461 L1300.19 682.461 L1299.63 682.461 L1299.07 682.461 L1298.51 682.461 L1297.95 682.461 L1297.39 682.461 L1296.83 682.461 L1296.28 682.461 L1295.72 682.461 L1295.16 682.461 L1294.6 682.461 L1294.04 682.461 L1293.48 682.461 L1292.92 682.461 L1292.36 682.461 L1291.8 682.461 L1291.24 682.461 L1290.68 682.461 L1290.12 682.461 L1289.56 682.461 L1289 682.461 L1288.45 682.461 L1287.89 682.461 L1287.33 682.461 L1286.77 682.461 L1286.21 682.461 L1285.65 682.461 L1285.09 682.461 L1284.53 682.461 L1283.97 682.461 L1283.41 682.461 L1282.85 682.461 L1282.29 682.461 L1281.73 682.461 L1281.18 682.461 L1280.62 682.461 L1280.06 682.461 L1279.5 682.461 L1278.94 682.461 L1278.38 682.461 L1277.82 682.461 L1277.26 682.461 L1276.7 682.461 L1276.14 682.461 L1275.58 682.461 L1275.02 682.461 L1274.46 682.461 L1273.91 682.461 L1273.35 682.461 L1272.79 682.461 L1272.23 682.461 L1271.67 682.461 L1271.11 682.461 L1270.55 682.461 L1269.99 682.461 L1269.43 682.461 L1268.87 682.461 L1268.31 682.461 L1267.75 682.461 L1267.19 682.461 L1266.63 682.461 L1266.08 682.461 L1265.52 682.461 L1264.96 682.461 L1264.4 682.461 L1263.84 682.461 L1263.28 682.461 L1262.72 682.461 L1262.16 682.461 L1261.6 682.461 L1261.04 682.461 L1260.48 682.461 L1259.92 682.461 L1259.36 682.461 L1258.81 682.461 L1258.25 682.461 L1257.69 682.461 L1257.13 682.461 L1256.57 682.461 L1256.01 682.461 L1255.45 682.461 L1254.89 682.461 L1254.33 682.461 L1253.77 682.461 L1253.21 682.461 L1252.65 682.461 L1252.09 682.461 L1251.54 682.461 L1250.98 682.461 L1250.42 682.461 L1249.86 682.461 L1249.3 682.461 L1248.74 682.461 L1248.18 682.461 L1247.62 682.461 L1247.06 682.461 L1246.5 682.461 L1245.94 682.461 L1245.38 682.461 L1244.82 682.461 L1244.26 682.461 L1243.71 682.461 L1243.15 682.461 L1242.59 682.461 L1242.03 682.461 L1241.47 682.461 L1240.91 682.461 L1240.35 682.461 L1239.79 682.461 L1239.23 682.461 L1238.67 682.461 L1238.11 682.461 L1237.55 682.461 L1236.99 682.461 L1236.44 682.461 L1235.88 682.461 L1235.32 682.461 L1234.76 682.461 L1234.2 682.461 L1233.64 682.461 L1233.08 682.461 L1232.52 682.461 L1231.96 682.461 L1231.4 682.461 L1230.84 682.461 L1230.28 682.461 L1229.72 682.461 L1229.17 682.461 L1228.61 682.461 L1228.05 682.461 L1227.49 682.461 L1226.93 682.461 L1226.37 682.461 L1225.81 682.461 L1225.25 682.461 L1224.69 682.461 L1224.13 682.461 L1223.57 682.461 L1223.01 682.461 L1222.45 682.461 L1221.89 682.461 L1221.34 682.461 L1220.78 682.461 L1220.22 682.461 L1219.66 682.461 L1219.1 682.461 L1218.54 682.461 L1217.98 682.461 L1217.42 682.461 L1216.86 682.461 L1216.3 682.461 L1215.74 682.461 L1215.18 682.461 L1214.62 682.461 L1214.07 682.461 L1213.51 682.461 L1212.95 682.461 L1212.39 682.461 L1211.83 682.461 L1211.27 682.461 L1210.71 682.461 L1210.15 682.461 L1209.59 682.461 L1209.03 682.461 L1208.47 682.461 L1207.91 682.461 L1207.35 682.461 L1206.8 682.461 L1206.24 682.461 L1205.68 682.461 L1205.12 682.461 L1204.56 682.461 L1204 682.461 L1203.44 682.461 L1202.88 682.461 L1202.32 682.461 L1201.76 682.461 L1201.2 682.461 L1200.64 682.461 L1200.08 682.461 L1199.52 682.461 L1198.97 682.461 L1198.41 682.461 L1197.85 682.461 L1197.29 682.461 L1196.73 682.461 L1196.17 682.461 L1195.61 682.461 L1195.05 682.461 L1194.49 682.461 L1193.93 682.461 L1193.37 682.461 L1192.81 682.461 L1192.25 682.461 L1191.7 682.461 L1191.14 682.461 L1190.58 682.461 L1190.02 682.461 L1189.46 682.461 L1188.9 682.461 L1188.34 682.461 L1187.78 682.461 L1187.22 682.461 L1186.66 682.461 L1186.1 682.461 L1185.54 682.461 L1184.98 682.461 L1184.43 682.461 L1183.87 682.461 L1183.31 682.461 L1182.75 682.461 L1182.19 682.461 L1181.63 682.461 L1181.07 682.461 L1180.51 682.461 L1179.95 682.461 L1179.39 682.461 L1178.83 682.461 L1178.27 682.461 L1177.71 682.461 L1177.15 682.461 L1176.6 682.461 L1176.04 682.461 L1175.48 682.461 L1174.92 682.461 L1174.36 682.461 L1173.8 682.461 L1173.24 682.461 L1172.68 682.461 L1172.12 682.461 L1171.56 682.461 L1171 682.461 L1170.44 682.461 L1169.88 682.461 L1169.33 682.461 L1168.77 682.461 L1168.21 682.461 L1167.65 682.461 L1167.09 682.461 L1166.53 682.461 L1165.97 682.461 L1165.41 682.461 L1164.85 682.461 L1164.29 682.461 L1163.73 682.461 L1163.17 682.461 L1162.61 682.461 L1162.05 682.461 L1161.5 682.461 L1160.94 682.461 L1160.38 682.461 L1159.82 682.461 L1159.26 682.461 L1158.7 682.461 L1158.14 682.461 L1157.58 682.461 L1157.02 682.461 L1156.46 682.461 L1155.9 682.461 L1155.34 682.461 L1154.78 682.461 L1154.23 682.461 L1153.67 682.461 L1153.11 682.461 L1152.55 682.461 L1151.99 682.461 L1151.43 682.461 L1150.87 682.461 L1150.31 682.461 L1149.75 682.461 L1149.19 682.461 L1148.63 682.461 L1148.07 682.461 L1147.51 682.461 L1146.96 682.461 L1146.4 682.461 L1145.84 682.461 L1145.28 682.461 L1144.72 682.461 L1144.16 682.461 L1143.6 682.461 L1143.04 682.461 L1142.48 682.461 L1141.92 682.461 L1141.36 682.461 L1140.8 682.461 L1140.24 682.461 L1139.68 682.461 L1139.13 682.461 L1138.57 682.461 L1138.01 682.461 L1137.45 682.461 L1136.89 682.461 L1136.33 682.461 L1135.77 682.461 L1135.21 682.461 L1134.65 682.461 L1134.09 682.461 L1133.53 682.461 L1132.97 682.461 L1132.41 682.461 L1131.86 682.461 L1131.3 682.461 L1130.74 682.461 L1130.18 682.461 L1129.62 682.461 L1129.06 682.461 L1128.5 682.461 L1127.94 682.461 L1127.38 682.461 L1126.82 682.461 L1126.26 682.461 L1125.7 682.461 L1125.14 682.461 L1124.59 682.461 L1124.03 682.461 L1123.47 682.461 L1122.91 682.461 L1122.35 682.461 L1121.79 682.461 L1121.23 682.461 L1120.67 682.461 L1120.11 682.461 L1119.55 682.461 L1118.99 682.461 L1118.43 682.461 L1117.87 682.461 L1117.31 682.461 L1116.76 682.461 L1116.2 682.461 L1115.64 682.461 L1115.08 682.461 L1114.52 682.461 L1113.96 682.461 L1113.4 682.461 L1112.84 682.461 L1112.28 682.461 L1111.72 682.461 L1111.16 682.461 L1110.6 682.461 L1110.04 682.461 L1109.49 682.461 L1108.93 682.461 L1108.37 682.461 L1107.81 682.461 L1107.25 682.461 L1106.69 682.461 L1106.13 682.461 L1105.57 682.461 L1105.01 682.461 L1104.45 682.461 L1103.89 682.461 L1103.33 682.461 L1102.77 682.461 L1102.22 682.461 L1101.66 682.461 L1101.1 682.461 L1100.54 682.461 L1099.98 682.461 L1099.42 682.461 L1098.86 682.461 L1098.3 682.461 L1097.74 682.461 L1097.18 682.461 L1096.62 682.461 L1096.06 682.461 L1095.5 682.461 L1094.94 682.461 L1094.39 682.461 L1093.83 682.461 L1093.27 682.461 L1092.71 682.461 L1092.15 682.461 L1091.59 682.461 L1091.03 682.461 L1090.47 682.461 L1089.91 682.461 L1089.35 682.461 L1088.79 682.461 L1088.23 682.461 L1087.67 682.461 L1087.12 682.461 L1086.56 682.461 L1086 682.461 L1085.44 682.461 L1084.88 682.461 L1084.32 682.461 L1083.76 682.461 L1083.2 682.461 L1082.64 682.461 L1082.08 682.461 L1081.52 682.461 L1080.96 682.461 L1080.4 682.461 L1079.85 682.461 L1079.29 682.461 L1078.73 682.461 L1078.17 682.461 L1077.61 682.461 L1077.05 682.461 L1076.49 682.461 L1075.93 682.461 L1075.37 682.461 L1074.81 682.461 L1074.25 682.461 L1073.69 682.461 L1073.13 682.461 L1072.57 682.461 L1072.02 682.461 L1071.46 682.461 L1070.9 682.461 L1070.34 682.461 L1069.78 682.461 L1069.22 682.461 L1068.66 682.461 L1068.1 682.461 L1067.54 682.461 L1066.98 682.461 L1066.42 682.461 L1065.86 682.461 L1065.3 682.461 L1064.75 682.461 L1064.19 682.461 L1063.63 682.461 L1063.07 682.461 L1062.51 682.461 L1061.95 682.461 L1061.39 682.461 L1060.83 682.461 L1060.27 682.461 L1059.71 682.461 L1059.15 682.461 L1058.59 682.461 L1058.03 682.461 L1057.48 682.461 L1056.92 682.461 L1056.36 682.461 L1055.8 682.461 L1055.24 682.461 L1054.68 682.461 L1054.12 682.461 L1053.56 682.461 L1053 682.461 L1052.44 682.461 L1051.88 682.461 L1051.32 682.461 L1050.76 682.461 L1050.2 682.461 L1049.65 682.461 L1049.09 682.461 L1048.53 682.461 L1047.97 682.461 L1047.41 682.461 L1046.85 682.461 L1046.29 682.461 L1045.73 682.461 L1045.17 682.461 L1044.61 682.461 L1044.05 682.461 L1043.49 682.461 L1042.93 682.461 L1042.38 682.461 L1041.82 682.461 L1041.26 682.461 L1040.7 682.461 L1040.14 682.461 L1039.58 682.461 L1039.02 682.461 L1038.46 682.461 L1037.9 682.461 L1037.34 682.461 L1036.78 682.461 L1036.22 682.461 L1035.66 682.461 L1035.1 682.461 L1034.55 682.461 L1033.99 682.461 L1033.43 682.461 L1032.87 682.461 L1032.31 682.461 L1031.75 682.461 L1031.19 682.461 L1030.63 682.461 L1030.07 682.461 L1029.51 682.461 L1028.95 682.461 L1028.39 682.461 L1027.83 682.461 L1027.28 682.461 L1026.72 682.461 L1026.16 682.461 L1025.6 682.461 L1025.04 682.461 L1024.48 682.461 L1023.92 682.461 L1023.36 682.461 L1022.8 682.461 L1022.24 682.461 L1021.68 682.461 L1021.12 682.461 L1020.56 682.461 L1020.01 682.461 L1019.45 682.461 L1018.89 682.461 L1018.33 682.461 L1017.77 682.461 L1017.21 682.461 L1016.65 682.461 L1016.09 682.461 L1015.53 682.461 L1014.97 682.461 L1014.41 682.461 L1013.85 682.461 L1013.29 682.461 L1012.73 682.461 L1012.18 682.461 L1011.62 682.461 L1011.06 682.461 L1010.5 682.461 L1009.94 682.461 L1009.38 682.461 L1008.82 682.461 L1008.26 682.461 L1007.7 682.461 L1007.14 682.461 L1006.58 682.461 L1006.02 682.461 L1005.46 682.461 L1004.91 682.461 L1004.35 682.461 L1003.79 682.461 L1003.23 682.461 L1002.67 682.461 L1002.11 682.461 L1001.55 682.461 L1000.99 682.461 L1000.43 682.461 L999.872 682.461 L999.313 682.461 L998.754 682.461 L998.194 682.461 L997.635 682.461 L997.076 682.461 L996.517 682.461 L995.957 682.461 L995.398 682.461 L994.839 682.461 L994.28 682.461 L993.72 682.461 L993.161 682.461 L992.602 682.461 L992.043 682.461 L991.483 682.461 L990.924 682.461 L990.365 682.461 L989.806 682.461 L989.246 682.461 L988.687 682.461 L988.128 682.461 L987.569 682.461 L987.009 682.461 L986.45 682.461 L985.891 682.461 L985.332 682.461 L984.772 682.461 L984.213 682.461 L983.654 682.461 L983.095 682.461 L982.535 682.461 L981.976 682.461 L981.417 682.461 L980.858 682.461 L980.298 682.461 L979.739 682.461 L979.18 682.461 L978.621 682.461 L978.061 682.461 L977.502 682.461 L976.943 682.461 L976.384 682.461 L975.824 682.461 L975.265 682.461 L974.706 682.461 L974.147 682.461 L973.587 682.461 L973.028 682.461 L972.469 682.461 L971.91 682.461 L971.35 682.461 L970.791 682.461 L970.232 682.461 L969.673 682.461 L969.113 682.461 L968.554 682.461 L967.995 682.461 L967.436 682.461 L966.876 682.461 L966.317 682.461 L965.758 682.461 L965.199 682.461 L964.639 682.461 L964.08 682.461 L963.521 682.461 L962.962 682.461 L962.402 682.461 L961.843 682.461 L961.284 682.461 L960.725 682.461 L960.165 682.461 L959.606 682.461 L959.047 682.461 L958.488 682.461 L957.928 682.461 L957.369 682.461 L956.81 682.461 L956.251 682.461 L955.691 682.461 L955.132 682.461 L954.573 682.461 L954.014 682.461 L953.454 682.461 L952.895 682.461 L952.336 682.461 L951.777 682.461 L951.217 682.461 L950.658 682.461 L950.099 682.461 L949.54 682.461 L948.98 682.461 L948.421 682.461 L947.862 682.461 L947.303 682.461 L946.743 682.461 L946.184 682.461 L945.625 682.461 L945.066 682.461 L944.506 682.461 L943.947 682.461 L943.388 682.461 L942.829 682.461 L942.269 682.461 L941.71 682.461 L941.151 682.461 L940.592 682.461 L940.032 682.461 L939.473 682.461 L938.914 682.461 L938.355 682.461 L937.795 682.461 L937.236 682.461 L936.677 682.461 L936.118 682.461 L935.558 682.461 L934.999 682.461 L934.44 682.461 L933.881 682.461 L933.321 682.461 L932.762 682.461 L932.203 682.461 L931.644 682.461 L931.084 682.461 L930.525 682.461 L929.966 682.461 L929.406 682.461 L928.847 682.461 L928.288 682.461 L927.729 682.461 L927.169 682.461 L926.61 682.461 L926.051 682.461 L925.492 682.461 L924.932 682.461 L924.373 682.461 L923.814 682.461 L923.255 682.461 L922.695 682.461 L922.136 682.461 L921.577 682.461 L921.018 682.461 L920.458 682.461 L919.899 682.461 L919.34 682.461 L918.781 682.461 L918.221 682.461 L917.662 682.461 L917.103 682.461 L916.544 682.461 L915.984 682.461 L915.425 682.461 L914.866 682.461 L914.307 682.461 L913.747 682.461 L913.188 682.461 L912.629 682.461 L912.07 682.461 L911.51 682.461 L910.951 682.461 L910.392 682.461 L909.833 682.461 L909.273 682.461 L908.714 682.461 L908.155 682.461 L907.596 682.461 L907.036 682.461 L906.477 682.461 L905.918 682.461 L905.359 682.461 L904.799 682.461 L904.24 682.461 L903.681 682.461 L903.122 682.461 L902.562 682.461 L902.003 682.461 L901.444 682.461 L900.885 682.461 L900.325 682.461 L899.766 682.461 L899.207 682.461 L898.648 682.461 L898.088 682.461 L897.529 682.461 L896.97 682.461 L896.411 682.461 L895.851 682.461 L895.292 682.461 L894.733 682.461 L894.174 682.461 L893.614 682.461 L893.055 682.461 L892.496 682.461 L891.937 682.461 L891.377 682.461 L890.818 682.461 L890.259 682.461 L889.7 682.461 L889.14 682.461 L888.581 682.461 L888.022 682.461 L887.463 682.461 L886.903 682.461 L886.344 682.461 L885.785 682.461 L885.226 682.461 L884.666 682.461 L884.107 682.461 L883.548 682.461 L882.989 682.461 L882.429 682.461 L881.87 682.461 L881.311 682.461 L880.752 682.461 L880.192 682.461 L879.633 682.461 L879.074 682.461 L878.515 682.461 L877.955 682.461 L877.396 682.461 L876.837 682.461 L876.278 682.461 L875.718 682.461 L875.159 682.461 L874.6 682.461 L874.041 682.461 L873.481 682.461 L872.922 682.461 L872.363 682.461 L871.804 682.461 L871.244 682.461 L870.685 682.461 L870.126 682.461 L869.567 682.461 L869.007 682.461 L868.448 682.461 L867.889 682.461 L867.33 682.461 L866.77 682.461 L866.211 682.461 L865.652 682.461 L865.093 682.461 L864.533 682.461 L863.974 682.461 L863.415 682.461 L862.856 682.461 L862.296 682.461 L861.737 682.461 L861.178 682.461 L860.619 682.461 L860.059 682.461 L859.5 682.461 L858.941 682.461 L858.382 682.461 L857.822 682.461 L857.263 682.461 L856.704 682.461 L856.145 682.461 L855.585 682.461 L855.026 682.461 L854.467 682.461 L853.908 682.461 L853.348 682.461 L852.789 682.461 L852.23 682.461 L851.671 682.461 L851.111 682.461 L850.552 682.461 L849.993 682.461 L849.434 682.461 L848.874 682.461 L848.315 682.461 L847.756 682.461 L847.197 682.461 L846.637 682.461 L846.078 682.461 L845.519 682.461 L844.96 682.461 L844.4 682.461 L843.841 682.461 L843.282 682.461 L842.723 682.461 L842.163 682.461 L841.604 682.461 L841.045 682.461 L840.486 682.461 L839.926 682.461 L839.367 682.461 L838.808 682.461 L838.249 682.461 L837.689 682.461 L837.13 682.461 L836.571 682.461 L836.012 682.461 L835.452 682.461 L834.893 682.461 L834.334 682.461 L833.775 682.461 L833.215 682.461 L832.656 682.461 L832.097 682.461 L831.538 682.461 L830.978 682.461 L830.419 682.461 L829.86 682.461 L829.301 682.461 L828.741 682.461 L828.182 682.461 L827.623 682.461 L827.064 682.461 L826.504 682.461 L825.945 682.461 L825.386 682.461 L824.827 682.461 L824.267 682.461 L823.708 682.461 L823.149 682.461 L822.59 682.461 L822.03 682.461 L821.471 682.461 L820.912 682.461 L820.353 682.461 L819.793 682.461 L819.234 682.461 L818.675 682.461 L818.116 682.461 L817.556 682.461 L816.997 682.461 L816.438 682.461 L815.879 682.461 L815.319 682.461 L814.76 682.461 L814.201 682.461 L813.642 682.461 L813.082 682.461 L812.523 682.461 L811.964 682.461 L811.405 682.461 L810.845 682.461 L810.286 682.461 L809.727 682.461 L809.168 682.461 L808.608 682.461 L808.049 682.461 L807.49 682.461 L806.931 682.461 L806.371 682.461 L805.812 682.461 L805.253 682.461 L804.693 682.461 L804.134 682.461 L803.575 682.461 L803.016 682.461 L802.456 682.461 L801.897 682.461 L801.338 682.461 L800.779 682.461 L800.219 682.461 L799.66 682.461 L799.101 682.461 L798.542 682.461 L797.982 682.461 L797.423 682.461 L796.864 682.461 L796.305 682.461 L795.745 682.461 L795.186 682.461 L794.627 682.461 L794.068 682.461 L793.508 682.461 L792.949 682.461 L792.39 682.461 L791.831 682.461 L791.271 682.461 L790.712 682.461 L790.153 682.461 L789.594 682.461 L789.034 682.461 L788.475 682.461 L787.916 682.461 L787.357 682.461 L786.797 682.461 L786.238 682.461 L785.679 682.461 L785.12 682.461 L784.56 682.461 L784.001 682.461 L783.442 682.461 L782.883 682.461 L782.323 682.461 L781.764 682.461 L781.205 682.461 L780.646 682.461 L780.086 682.461 L779.527 682.461 L778.968 682.461 L778.409 682.461 L777.849 682.461 L777.29 682.461 L776.731 682.461 L776.172 682.461 L775.612 682.461 L775.053 682.461 L774.494 682.461 L773.935 682.461 L773.375 682.461 L772.816 682.461 L772.257 682.461 L771.698 682.461 L771.138 682.461 L770.579 682.461 L770.02 682.461 L769.461 682.461 L768.901 682.461 L768.342 682.461 L767.783 682.461 L767.224 682.461 L766.664 682.461 L766.105 682.461 L765.546 682.461 L764.987 682.461 L764.427 682.461 L763.868 682.461 L763.309 682.461 L762.75 682.461 L762.19 682.461 L761.631 682.461 L761.072 682.461 L760.513 682.461 L759.953 682.461 L759.394 682.461 L758.835 682.461 L758.276 682.461 L757.716 682.461 L757.157 682.461 L756.598 682.461 L756.039 682.461 L755.479 682.461 L754.92 682.461 L754.361 682.461 L753.802 682.461 L753.242 682.461 L752.683 682.461 L752.124 682.461 L751.565 682.461 L751.005 682.461 L750.446 682.461 L749.887 682.461 L749.328 682.461 L748.768 682.461 L748.209 682.461 L747.65 682.461 L747.091 682.461 L746.531 682.461 L745.972 682.461 L745.413 682.461 L744.854 682.461 L744.294 682.461 L743.735 682.461 L743.176 682.461 L742.617 682.461 L742.057 682.461 L741.498 682.461 L740.939 682.461 L740.38 682.461 L739.82 682.461 L739.261 682.461 L738.702 682.461 L738.143 682.461 L737.583 682.461 L737.024 682.461 L736.465 682.461 L735.906 682.461 L735.346 682.461 L734.787 682.461 L734.228 682.461 L733.669 682.461 L733.109 682.461 L732.55 682.461 L731.991 682.461 L731.432 682.461 L730.872 682.461 L730.313 682.461 L729.754 682.461 L729.195 682.461 L728.635 682.461 L728.076 682.461 L727.517 682.461 L726.958 682.461 L726.398 682.461 L725.839 682.461 L725.28 682.461 L724.721 682.461 L724.161 682.461 L723.602 682.461 L723.043 682.461 L722.484 682.461 L721.924 682.461 L721.365 682.461 L720.806 682.461 L720.247 682.461  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip323)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.435 720.806,687.435 721.365,687.435 721.924,687.435 722.484,687.435 723.043,687.435 723.602,687.435 724.161,687.435 724.721,687.435 725.28,687.435 725.839,687.435 726.398,687.435 726.958,687.435 727.517,687.435 728.076,687.435 728.635,687.435 729.195,687.435 729.754,687.435 730.313,687.435 730.872,687.435 731.432,687.435 731.991,687.435 732.55,687.435 733.109,687.435 733.669,687.435 734.228,687.435 734.787,687.435 735.346,687.435 735.906,687.435 736.465,687.435 737.024,687.435 737.583,687.435 738.143,687.435 738.702,687.435 739.261,687.435 739.82,687.435 740.38,687.435 740.939,687.435 741.498,687.435 742.057,687.435 742.617,687.435 743.176,687.435 743.735,687.435 744.294,687.435 744.854,687.435 745.413,687.435 745.972,687.435 746.531,687.435 747.091,687.435 747.65,687.435 748.209,687.435 748.768,687.435 749.328,687.435 749.887,687.435 750.446,687.435 751.005,687.435 751.565,687.435 752.124,687.435 752.683,687.435 753.242,687.435 753.802,687.435 754.361,687.435 754.92,687.435 755.479,687.435 756.039,687.435 756.598,687.435 757.157,687.435 757.716,687.435 758.276,687.435 758.835,687.435 759.394,687.435 759.953,687.435 760.513,687.435 761.072,687.435 761.631,687.435 762.19,687.435 762.75,687.435 763.309,687.435 763.868,687.435 764.427,687.435 764.987,687.435 765.546,687.435 766.105,687.435 766.664,687.435 767.224,687.435 767.783,687.435 768.342,687.435 768.901,687.435 769.461,687.435 770.02,687.435 770.579,687.435 771.138,687.435 771.698,687.435 772.257,687.435 772.816,687.435 773.375,687.435 773.935,687.435 774.494,687.435 775.053,687.435 775.612,687.435 776.172,687.435 776.731,687.435 777.29,687.435 777.849,687.435 778.409,687.435 778.968,687.435 779.527,687.435 780.086,687.435 780.646,687.435 781.205,687.435 781.764,687.435 782.323,687.435 782.883,687.435 783.442,687.435 784.001,687.435 784.56,687.435 785.12,687.435 785.679,687.435 786.238,687.435 786.797,687.435 787.357,687.435 787.916,687.435 788.475,687.435 789.034,687.435 789.594,687.435 790.153,687.435 790.712,687.435 791.271,687.435 791.831,687.435 792.39,687.435 792.949,687.435 793.508,687.435 794.068,687.435 794.627,687.435 795.186,687.435 795.745,687.435 796.305,687.435 796.864,687.435 797.423,687.435 797.982,687.435 798.542,687.435 799.101,687.435 799.66,687.435 800.219,687.435 800.779,687.435 801.338,687.435 801.897,687.435 802.456,687.435 803.016,687.435 803.575,687.435 804.134,687.435 804.693,687.435 805.253,687.435 805.812,687.435 806.371,687.435 806.931,687.435 807.49,687.435 808.049,687.435 808.608,687.435 809.168,687.435 809.727,687.435 810.286,687.435 810.845,687.435 811.405,687.435 811.964,687.435 812.523,687.435 813.082,687.435 813.642,687.435 814.201,687.435 814.76,687.435 815.319,687.435 815.879,687.435 816.438,687.435 816.997,687.435 817.556,687.435 818.116,687.435 818.675,687.435 819.234,687.435 819.793,687.435 820.353,687.435 820.912,687.435 821.471,687.435 822.03,687.435 822.59,687.435 823.149,687.435 823.708,687.435 824.267,687.435 824.827,687.435 825.386,687.435 825.945,687.435 826.504,687.435 827.064,687.435 827.623,687.435 828.182,687.435 828.741,687.435 829.301,687.435 829.86,687.435 830.419,687.435 830.978,687.435 831.538,687.435 832.097,687.435 832.656,687.435 833.215,687.435 833.775,687.435 834.334,687.435 834.893,687.435 835.452,687.435 836.012,687.435 836.571,687.435 837.13,687.435 837.689,687.435 838.249,687.435 838.808,687.435 839.367,687.435 839.926,687.435 840.486,687.435 841.045,687.435 841.604,687.435 842.163,687.435 842.723,687.435 843.282,687.435 843.841,687.435 844.4,687.435 844.96,687.435 845.519,687.435 846.078,687.435 846.637,687.435 847.197,687.435 847.756,687.435 848.315,687.435 848.874,687.435 849.434,687.435 849.993,687.435 850.552,687.435 851.111,687.435 851.671,687.435 852.23,687.435 852.789,687.435 853.348,687.435 853.908,687.435 854.467,687.435 855.026,687.435 855.585,687.435 856.145,687.435 856.704,687.435 857.263,687.435 857.822,687.435 858.382,687.435 858.941,687.435 859.5,687.435 860.059,687.435 860.619,687.435 861.178,687.435 861.737,687.435 862.296,687.435 862.856,687.435 863.415,687.435 863.974,687.435 864.533,687.435 865.093,687.435 865.652,687.435 866.211,687.435 866.77,687.435 867.33,687.435 867.889,687.435 868.448,687.435 869.007,687.435 869.567,687.435 870.126,687.435 870.685,687.435 871.244,687.435 871.804,687.435 872.363,687.435 872.922,687.435 873.481,687.435 874.041,687.435 874.6,687.435 875.159,687.435 875.718,687.435 876.278,687.435 876.837,687.435 877.396,687.435 877.955,687.435 878.515,687.435 879.074,687.435 879.633,687.435 880.192,687.435 880.752,687.435 881.311,687.435 881.87,687.435 882.429,687.435 882.989,687.435 883.548,687.435 884.107,687.435 884.666,687.435 885.226,687.435 885.785,687.435 886.344,687.435 886.903,687.435 887.463,687.435 888.022,687.435 888.581,687.435 889.14,687.435 889.7,687.435 890.259,687.435 890.818,687.435 891.377,687.435 891.937,687.435 892.496,687.435 893.055,687.435 893.614,687.435 894.174,687.435 894.733,687.435 895.292,687.435 895.851,687.435 896.411,687.435 896.97,687.435 897.529,687.435 898.088,687.435 898.648,687.435 899.207,687.435 899.766,687.435 900.325,687.435 900.885,687.435 901.444,687.435 902.003,687.435 902.562,687.435 903.122,687.435 903.681,687.435 904.24,687.435 904.799,687.435 905.359,687.435 905.918,687.435 906.477,687.435 907.036,687.435 907.596,687.435 908.155,687.435 908.714,687.435 909.273,687.435 909.833,687.435 910.392,687.435 910.951,687.435 911.51,687.435 912.07,687.435 912.629,687.435 913.188,687.435 913.747,687.435 914.307,687.435 914.866,687.435 915.425,687.435 915.984,687.435 916.544,687.435 917.103,687.435 917.662,687.435 918.221,687.435 918.781,687.435 919.34,687.435 919.899,687.435 920.458,687.435 921.018,687.435 921.577,687.435 922.136,687.435 922.695,687.435 923.255,687.435 923.814,687.435 924.373,687.435 924.932,687.435 925.492,687.435 926.051,687.435 926.61,687.435 927.169,687.435 927.729,687.435 928.288,687.435 928.847,687.435 929.406,687.435 929.966,687.435 930.525,687.435 931.084,687.435 931.644,687.435 932.203,687.435 932.762,687.435 933.321,687.435 933.881,687.435 934.44,687.435 934.999,687.435 935.558,687.435 936.118,687.435 936.677,687.435 937.236,687.435 937.795,687.435 938.355,687.435 938.914,687.435 939.473,687.435 940.032,687.435 940.592,687.435 941.151,687.435 941.71,687.435 942.269,687.435 942.829,687.435 943.388,687.435 943.947,687.435 944.506,687.435 945.066,687.435 945.625,687.435 946.184,687.435 946.743,687.435 947.303,687.435 947.862,687.435 948.421,687.435 948.98,687.435 949.54,687.435 950.099,687.435 950.658,687.435 951.217,687.435 951.777,687.435 952.336,687.435 952.895,687.435 953.454,687.435 954.014,687.435 954.573,687.435 955.132,687.435 955.691,687.435 956.251,687.435 956.81,687.435 957.369,687.435 957.928,687.435 958.488,687.435 959.047,687.435 959.606,687.435 960.165,687.435 960.725,687.435 961.284,687.435 961.843,687.435 962.402,687.435 962.962,687.435 963.521,687.435 964.08,687.435 964.639,687.435 965.199,687.435 965.758,687.435 966.317,687.435 966.876,687.435 967.436,687.435 967.995,687.435 968.554,687.435 969.113,687.435 969.673,687.435 970.232,687.435 970.791,687.435 971.35,687.435 971.91,687.435 972.469,687.435 973.028,687.435 973.587,687.435 974.147,687.435 974.706,687.435 975.265,687.435 975.824,687.435 976.384,687.435 976.943,687.435 977.502,687.435 978.061,687.435 978.621,687.435 979.18,687.435 979.739,687.435 980.298,687.435 980.858,687.435 981.417,687.435 981.976,687.435 982.535,687.435 983.095,687.435 983.654,687.435 984.213,687.435 984.772,687.435 985.332,687.435 985.891,687.435 986.45,687.435 987.009,687.435 987.569,687.435 988.128,687.435 988.687,687.435 989.246,687.435 989.806,687.435 990.365,687.435 990.924,687.435 991.483,687.435 992.043,687.435 992.602,687.435 993.161,687.435 993.72,687.435 994.28,687.435 994.839,687.435 995.398,687.435 995.957,687.435 996.517,687.435 997.076,687.435 997.635,687.435 998.194,687.435 998.754,687.435 999.313,687.435 999.872,687.435 1000.43,687.435 1000.99,687.435 1001.55,687.435 1002.11,687.435 1002.67,687.435 1003.23,687.435 1003.79,687.435 1004.35,687.435 1004.91,687.435 1005.46,687.435 1006.02,687.435 1006.58,687.435 1007.14,687.435 1007.7,687.435 1008.26,687.435 1008.82,687.435 1009.38,687.435 1009.94,687.435 1010.5,687.435 1011.06,687.435 1011.62,687.435 1012.18,687.435 1012.73,687.435 1013.29,687.435 1013.85,687.435 1014.41,687.435 1014.97,687.435 1015.53,687.435 1016.09,687.435 1016.65,687.435 1017.21,687.435 1017.77,687.435 1018.33,687.435 1018.89,687.435 1019.45,687.435 1020.01,687.435 1020.56,687.435 1021.12,687.435 1021.68,687.435 1022.24,687.435 1022.8,687.435 1023.36,687.435 1023.92,687.435 1024.48,687.435 1025.04,687.435 1025.6,687.435 1026.16,687.435 1026.72,687.435 1027.28,687.435 1027.83,687.435 1028.39,687.435 1028.95,687.435 1029.51,687.435 1030.07,687.435 1030.63,687.435 1031.19,687.435 1031.75,687.435 1032.31,687.435 1032.87,687.435 1033.43,687.435 1033.99,687.435 1034.55,687.435 1035.1,687.435 1035.66,687.435 1036.22,687.435 1036.78,687.435 1037.34,687.435 1037.9,687.435 1038.46,687.435 1039.02,687.435 1039.58,687.435 1040.14,687.435 1040.7,687.435 1041.26,687.435 1041.82,687.435 1042.38,687.435 1042.93,687.435 1043.49,687.435 1044.05,687.435 1044.61,687.435 1045.17,687.435 1045.73,687.435 1046.29,687.435 1046.85,687.435 1047.41,687.435 1047.97,687.435 1048.53,687.435 1049.09,687.435 1049.65,687.435 1050.2,687.435 1050.76,687.435 1051.32,687.435 1051.88,687.435 1052.44,687.435 1053,687.435 1053.56,687.435 1054.12,687.435 1054.68,687.435 1055.24,687.435 1055.8,687.435 1056.36,687.435 1056.92,687.435 1057.48,687.435 1058.03,687.435 1058.59,687.435 1059.15,687.435 1059.71,687.435 1060.27,687.435 1060.83,687.435 1061.39,687.435 1061.95,687.435 1062.51,687.435 1063.07,687.435 1063.63,687.435 1064.19,687.435 1064.75,687.435 1065.3,687.435 1065.86,687.435 1066.42,687.435 1066.98,687.435 1067.54,687.435 1068.1,687.435 1068.66,687.435 1069.22,687.435 1069.78,687.435 1070.34,687.435 1070.9,687.435 1071.46,687.435 1072.02,687.435 1072.57,687.435 1073.13,687.435 1073.69,687.435 1074.25,687.435 1074.81,687.435 1075.37,687.435 1075.93,687.435 1076.49,687.435 1077.05,687.435 1077.61,687.435 1078.17,687.435 1078.73,687.435 1079.29,687.435 1079.85,687.435 1080.4,687.435 1080.96,687.435 1081.52,687.435 1082.08,687.435 1082.64,687.435 1083.2,687.435 1083.76,687.435 1084.32,687.435 1084.88,687.435 1085.44,687.435 1086,687.435 1086.56,687.435 1087.12,687.435 1087.67,687.435 1088.23,687.435 1088.79,687.435 1089.35,687.435 1089.91,687.435 1090.47,687.435 1091.03,687.435 1091.59,687.435 1092.15,687.435 1092.71,687.435 1093.27,687.435 1093.83,687.435 1094.39,687.435 1094.94,687.435 1095.5,687.435 1096.06,687.435 1096.62,687.435 1097.18,687.435 1097.74,687.435 1098.3,687.435 1098.86,687.435 1099.42,687.435 1099.98,687.435 1100.54,687.435 1101.1,687.435 1101.66,687.435 1102.22,687.435 1102.77,687.435 1103.33,687.435 1103.89,687.435 1104.45,687.435 1105.01,687.435 1105.57,687.435 1106.13,687.435 1106.69,687.435 1107.25,687.435 1107.81,687.435 1108.37,687.435 1108.93,687.435 1109.49,687.435 1110.04,687.435 1110.6,687.435 1111.16,687.435 1111.72,687.435 1112.28,687.435 1112.84,687.435 1113.4,687.435 1113.96,687.435 1114.52,687.435 1115.08,687.435 1115.64,687.435 1116.2,687.435 1116.76,687.435 1117.31,687.435 1117.87,687.435 1118.43,687.435 1118.99,687.435 1119.55,687.435 1120.11,687.435 1120.67,687.435 1121.23,687.435 1121.79,687.435 1122.35,687.435 1122.91,687.435 1123.47,687.435 1124.03,687.435 1124.59,687.435 1125.14,687.435 1125.7,687.435 1126.26,687.435 1126.82,687.435 1127.38,687.435 1127.94,687.435 1128.5,687.435 1129.06,687.435 1129.62,687.435 1130.18,687.435 1130.74,687.435 1131.3,687.435 1131.86,687.435 1132.41,687.435 1132.97,687.435 1133.53,687.435 1134.09,687.435 1134.65,687.435 1135.21,687.435 1135.77,687.435 1136.33,687.435 1136.89,687.435 1137.45,687.435 1138.01,687.435 1138.57,687.435 1139.13,687.435 1139.68,687.435 1140.24,687.435 1140.8,687.435 1141.36,687.435 1141.92,687.435 1142.48,687.435 1143.04,687.435 1143.6,687.435 1144.16,687.435 1144.72,687.435 1145.28,687.435 1145.84,687.435 1146.4,687.435 1146.96,687.435 1147.51,687.435 1148.07,687.435 1148.63,687.435 1149.19,687.435 1149.75,687.435 1150.31,687.435 1150.87,687.435 1151.43,687.435 1151.99,687.435 1152.55,687.435 1153.11,687.435 1153.67,687.435 1154.23,687.435 1154.78,687.435 1155.34,687.435 1155.9,687.435 1156.46,687.435 1157.02,687.435 1157.58,687.435 1158.14,687.435 1158.7,687.435 1159.26,687.435 1159.82,687.435 1160.38,687.435 1160.94,687.435 1161.5,687.435 1162.05,687.435 1162.61,687.435 1163.17,687.435 1163.73,687.435 1164.29,687.435 1164.85,687.435 1165.41,687.435 1165.97,687.435 1166.53,687.435 1167.09,687.435 1167.65,687.435 1168.21,687.435 1168.77,687.435 1169.33,687.435 1169.88,687.435 1170.44,687.435 1171,687.435 1171.56,687.435 1172.12,687.435 1172.68,687.435 1173.24,687.435 1173.8,687.435 1174.36,687.435 1174.92,687.435 1175.48,687.435 1176.04,687.435 1176.6,687.435 1177.15,687.435 1177.71,687.435 1178.27,687.435 1178.83,687.435 1179.39,687.435 1179.95,687.435 1180.51,687.435 1181.07,687.435 1181.63,687.435 1182.19,687.435 1182.75,687.435 1183.31,687.435 1183.87,687.435 1184.43,687.435 1184.98,687.435 1185.54,687.435 1186.1,687.435 1186.66,687.435 1187.22,687.435 1187.78,687.435 1188.34,687.435 1188.9,687.435 1189.46,687.435 1190.02,687.435 1190.58,687.435 1191.14,687.435 1191.7,687.435 1192.25,687.435 1192.81,687.435 1193.37,687.435 1193.93,687.435 1194.49,687.435 1195.05,687.435 1195.61,687.435 1196.17,687.435 1196.73,687.435 1197.29,687.435 1197.85,687.435 1198.41,687.435 1198.97,687.435 1199.52,687.435 1200.08,687.435 1200.64,687.435 1201.2,687.435 1201.76,687.435 1202.32,687.435 1202.88,687.435 1203.44,687.435 1204,687.435 1204.56,687.435 1205.12,687.435 1205.68,687.435 1206.24,687.435 1206.8,687.435 1207.35,687.435 1207.91,687.435 1208.47,687.435 1209.03,687.435 1209.59,687.435 1210.15,687.435 1210.71,687.435 1211.27,687.435 1211.83,687.435 1212.39,687.435 1212.95,687.435 1213.51,687.435 1214.07,687.435 1214.62,687.435 1215.18,687.435 1215.74,687.435 1216.3,687.435 1216.86,687.435 1217.42,687.435 1217.98,687.435 1218.54,687.435 1219.1,687.435 1219.66,687.435 1220.22,687.435 1220.78,687.435 1221.34,687.435 1221.89,687.435 1222.45,687.435 1223.01,687.435 1223.57,687.435 1224.13,687.435 1224.69,687.435 1225.25,687.435 1225.81,687.435 1226.37,687.435 1226.93,687.435 1227.49,687.435 1228.05,687.435 1228.61,687.435 1229.17,687.435 1229.72,687.435 1230.28,687.435 1230.84,687.435 1231.4,687.435 1231.96,687.435 1232.52,687.435 1233.08,687.435 1233.64,687.435 1234.2,687.435 1234.76,687.435 1235.32,687.435 1235.88,687.435 1236.44,687.435 1236.99,687.435 1237.55,687.435 1238.11,687.435 1238.67,687.435 1239.23,687.435 1239.79,687.435 1240.35,687.435 1240.91,687.435 1241.47,687.435 1242.03,687.435 1242.59,687.435 1243.15,687.435 1243.71,687.435 1244.26,687.435 1244.82,687.435 1245.38,687.435 1245.94,687.435 1246.5,687.435 1247.06,687.435 1247.62,687.435 1248.18,687.435 1248.74,687.435 1249.3,687.435 1249.86,687.435 1250.42,687.435 1250.98,687.435 1251.54,687.435 1252.09,687.435 1252.65,687.435 1253.21,687.435 1253.77,687.435 1254.33,687.435 1254.89,687.435 1255.45,687.435 1256.01,687.435 1256.57,687.435 1257.13,687.435 1257.69,687.435 1258.25,687.435 1258.81,687.435 1259.36,687.435 1259.92,687.435 1260.48,687.435 1261.04,687.435 1261.6,687.435 1262.16,687.435 1262.72,687.435 1263.28,687.435 1263.84,687.435 1264.4,687.435 1264.96,687.435 1265.52,687.435 1266.08,687.435 1266.63,687.435 1267.19,687.435 1267.75,687.435 1268.31,687.435 1268.87,687.435 1269.43,687.435 1269.99,687.435 1270.55,687.435 1271.11,687.435 1271.67,687.435 1272.23,687.435 1272.79,687.435 1273.35,687.435 1273.91,687.435 1274.46,687.435 1275.02,687.435 1275.58,687.435 1276.14,687.435 1276.7,687.435 1277.26,687.435 1277.82,687.435 1278.38,687.435 1278.94,687.435 1279.5,687.435 1280.06,687.435 1280.62,687.435 1281.18,687.435 1281.73,687.435 1282.29,687.435 1282.85,687.435 1283.41,687.435 1283.97,687.435 1284.53,687.435 1285.09,687.435 1285.65,687.435 1286.21,687.435 1286.77,687.435 1287.33,687.435 1287.89,687.435 1288.45,687.435 1289,687.435 1289.56,687.435 1290.12,687.435 1290.68,687.435 1291.24,687.435 1291.8,687.435 1292.36,687.435 1292.92,687.435 1293.48,687.435 1294.04,687.435 1294.6,687.435 1295.16,687.435 1295.72,687.435 1296.28,687.435 1296.83,687.435 1297.39,687.435 1297.95,687.435 1298.51,687.435 1299.07,687.435 1299.63,687.435 1300.19,687.435 1300.75,687.435 1301.31,687.435 1301.87,687.435 1302.43,687.435 1302.99,687.435 1303.55,687.435 1304.1,687.435 1304.66,687.435 1305.22,687.435 1305.78,687.435 1306.34,687.435 1306.9,687.435 1307.46,687.435 1308.02,687.435 1308.58,687.435 1309.14,687.435 1309.7,687.435 1310.26,687.435 1310.82,687.435 1311.38,687.435 1311.93,687.435 1312.49,687.435 1313.05,687.435 1313.61,687.435 1314.17,687.435 1314.73,687.435 1315.29,687.435 1315.85,687.435 1316.41,687.435 1316.97,687.435 1317.53,687.435 1318.09,687.435 1318.65,687.435 1319.2,687.435 1319.76,687.435 1320.32,687.435 1320.88,687.435 1321.44,687.435 1322,687.435 1322.56,687.435 1323.12,687.435 1323.68,687.435 1324.24,687.435 1324.8,687.435 1325.36,687.435 1325.92,687.435 1326.47,687.435 1327.03,687.435 1327.59,687.435 1328.15,687.435 1328.71,687.435 1329.27,687.435 1329.83,687.435 1330.39,687.435 1330.95,687.435 1331.51,687.435 1332.07,687.435 1332.63,687.435 1333.19,687.435 1333.75,687.435 1334.3,687.435 1334.86,687.435 1335.42,687.435 1335.98,687.435 1336.54,687.435 1337.1,687.435 1337.66,687.435 1338.22,687.435 1338.78,687.435 1339.34,687.435 1339.9,687.435 1340.46,687.435 1341.02,687.435 1341.57,687.435 1342.13,687.435 1342.69,687.435 1343.25,687.435 1343.81,687.435 1344.37,687.435 1344.93,687.435 1345.49,687.435 1346.05,687.435 1346.61,687.435 1347.17,687.435 1347.73,687.435 1348.29,687.435 1348.84,687.435 1349.4,687.435 1349.96,687.435 1350.52,687.435 1351.08,687.435 1351.64,687.435 1352.2,687.435 1352.76,687.435 1353.32,687.435 1353.88,687.435 1354.44,687.435 1355,687.435 1355.56,687.435 1356.12,687.435 1356.67,687.435 1357.23,687.435 1357.79,687.435 1358.35,687.435 1358.91,687.435 1359.47,687.435 1360.03,687.435 1360.59,687.435 1361.15,687.435 1361.71,687.435 1362.27,687.435 1362.83,687.435 1363.39,687.435 1363.94,687.435 1364.5,687.435 1365.06,687.435 1365.62,687.435 1366.18,687.435 1366.74,687.435 1367.3,687.435 1367.86,687.435 1368.42,687.435 1368.98,687.435 1369.54,687.435 1370.1,687.435 1370.66,687.435 1371.21,687.435 1371.77,687.435 1372.33,687.435 1372.89,687.435 1373.45,687.435 1374.01,687.435 1374.57,687.435 1375.13,687.435 1375.69,687.435 1376.25,687.435 1376.81,687.435 1377.37,687.435 1377.93,687.435 1378.49,687.435 1379.04,687.435 1379.6,687.435 1380.16,687.435 1380.72,687.435 1381.28,687.435 1381.84,687.435 1382.4,687.435 1382.96,687.435 1383.52,687.435 1384.08,687.435 1384.64,687.435 1385.2,687.435 1385.76,687.435 1386.31,687.435 1386.87,687.435 1387.43,687.435 1387.99,687.435 1388.55,687.435 1389.11,687.435 1389.67,687.435 1390.23,687.435 1390.79,687.435 1391.35,687.435 1391.91,687.435 1392.47,687.435 1393.03,687.435 1393.58,687.435 1394.14,687.435 1394.7,687.435 1395.26,687.435 1395.82,687.435 1396.38,687.435 1396.94,687.435 1397.5,687.435 1398.06,687.435 1398.62,687.435 1399.18,687.435 1399.74,687.435 1400.3,687.435 1400.86,687.435 1401.41,687.435 1401.97,687.435 1402.53,687.435 1403.09,687.435 1403.65,687.435 1404.21,687.435 1404.77,687.435 1405.33,687.435 1405.89,687.435 1406.45,687.435 1407.01,687.435 1407.57,687.435 1408.13,687.435 1408.68,687.435 1409.24,687.435 1409.8,687.435 1410.36,687.435 1410.92,687.435 1411.48,687.435 1412.04,687.435 1412.6,687.435 1413.16,687.435 1413.72,687.435 1414.28,687.435 1414.84,687.435 1415.4,687.435 1415.95,687.435 1416.51,687.435 1417.07,687.435 1417.63,687.435 1418.19,687.435 1418.75,687.435 1419.31,687.435 1419.87,687.435 1420.43,687.435 1420.99,687.435 1421.55,687.435 1422.11,687.435 1422.67,687.435 1423.23,687.435 1423.78,687.435 1424.34,687.435 1424.9,687.435 1425.46,687.435 1426.02,687.435 1426.58,687.435 1427.14,687.435 1427.7,687.435 1428.26,687.435 1428.82,687.435 1429.38,687.435 1429.94,687.435 1430.5,687.435 1431.05,687.435 1431.61,687.435 1432.17,687.435 1432.73,687.435 1433.29,687.435 1433.85,687.435 1434.41,687.435 1434.97,687.435 1435.53,687.435 1436.09,687.435 1436.65,687.435 1437.21,687.435 1437.77,687.435 1438.33,687.435 1438.88,687.435 1439.44,687.435 1440,687.435 1440.56,687.435 1441.12,687.435 1441.68,687.435 1442.24,687.435 1442.8,687.435 1443.36,687.435 1443.92,687.435 1444.48,687.435 1445.04,687.435 1445.6,687.435 1446.15,687.435 1446.71,687.435 1447.27,687.435 1447.83,687.435 1448.39,687.435 1448.95,687.435 1449.51,687.435 1450.07,687.435 1450.63,687.435 1451.19,687.435 1451.75,687.435 1452.31,687.435 1452.87,687.435 1453.42,687.435 1453.98,687.435 1454.54,687.435 1455.1,687.435 1455.66,687.435 1456.22,687.435 1456.78,687.435 1457.34,687.435 1457.9,687.435 1458.46,687.435 1459.02,687.435 1459.58,687.435 1460.14,687.435 1460.7,687.435 1461.25,687.435 1461.81,687.435 1462.37,687.435 1462.93,687.435 1463.49,687.435 1464.05,687.435 1464.61,687.435 1465.17,687.435 1465.73,687.435 1466.29,687.435 1466.85,687.435 1467.41,687.435 1467.97,687.435 1468.52,687.435 1469.08,687.435 1469.64,687.435 1470.2,687.435 1470.76,687.435 1471.32,687.435 1471.88,687.435 1472.44,687.435 1473,687.435 1473.56,687.435 1474.12,687.435 1474.68,687.435 1475.24,687.435 1475.79,687.435 1476.35,687.435 1476.91,687.435 1477.47,687.435 1478.03,687.435 1478.59,687.435 1479.15,687.435 1479.71,687.435 1480.27,687.435 1480.83,687.435 1481.39,687.435 1481.95,687.435 1482.51,687.435 1483.07,687.435 1483.62,687.435 1484.18,687.435 1484.74,687.435 1485.3,687.435 1485.86,687.435 1486.42,687.435 1486.98,687.435 1487.54,687.435 1488.1,687.435 1488.66,687.435 1489.22,687.435 1489.78,687.435 1490.34,687.435 1490.89,687.435 1491.45,687.435 1492.01,687.435 1492.57,687.435 1493.13,687.435 1493.69,687.435 1494.25,687.435 1494.81,687.435 1495.37,687.435 1495.93,687.435 1496.49,687.435 1497.05,687.435 1497.61,687.435 1498.16,687.435 1498.72,687.435 1499.28,687.435 1499.84,687.435 1500.4,687.435 1500.96,687.435 1501.52,687.435 1502.08,687.435 1502.64,687.435 1503.2,687.435 1503.76,687.435 1504.32,687.435 1504.88,687.435 1505.44,687.435 1505.99,687.435 1506.55,687.435 1507.11,687.435 1507.67,687.435 1508.23,687.435 1508.79,687.435 1509.35,687.435 1509.91,687.435 1510.47,687.435 1511.03,687.435 1511.59,687.435 1512.15,687.435 1512.71,687.435 1513.26,687.435 1513.82,687.435 1514.38,687.435 1514.94,687.435 1515.5,687.435 1516.06,687.435 1516.62,687.435 1517.18,687.435 1517.74,687.435 1518.3,687.435 1518.86,687.435 1519.42,687.435 1519.98,687.435 1520.53,687.435 1521.09,687.435 1521.65,687.435 1522.21,687.435 1522.77,687.435 1523.33,687.435 1523.89,687.435 1524.45,687.435 1525.01,687.435 1525.57,687.435 1526.13,687.435 1526.69,687.435 1527.25,687.435 1527.81,687.435 1528.36,687.435 1528.92,687.435 1529.48,687.435 1530.04,687.435 1530.6,687.435 1531.16,687.435 1531.72,687.435 1532.28,687.435 1532.84,687.435 1533.4,687.435 1533.96,687.435 1534.52,687.435 1535.08,687.435 1535.63,687.435 1536.19,687.435 1536.75,687.435 1537.31,687.435 1537.87,687.435 1538.43,687.435 1538.99,687.435 1539.55,687.435 1540.11,687.435 1540.67,687.435 1541.23,687.435 1541.79,687.435 1542.35,687.435 1542.9,687.435 1543.46,687.435 1544.02,687.435 1544.58,687.435 1545.14,687.435 1545.7,687.435 1546.26,687.435 1546.82,687.435 1547.38,687.435 1547.94,687.435 1548.5,687.435 1549.06,687.435 1549.62,687.435 1550.18,687.435 1550.73,687.435 1551.29,687.435 1551.85,687.435 1552.41,687.435 1552.97,687.435 1553.53,687.435 1554.09,687.435 1554.65,687.435 1555.21,687.435 1555.77,687.435 1556.33,687.435 1556.89,687.435 1557.45,687.435 1558,687.435 1558.56,687.435 1559.12,687.435 1559.68,687.435 1560.24,687.435 1560.8,687.435 1561.36,687.435 1561.92,687.435 1562.48,687.435 1563.04,687.435 1563.6,687.435 1564.16,687.435 1564.72,687.435 1565.28,687.435 1565.83,687.435 1566.39,687.435 1566.95,687.435 1567.51,687.435 1568.07,687.435 1568.63,687.435 1569.19,687.435 1569.75,687.435 1570.31,687.435 1570.87,687.435 1571.43,687.435 1571.99,687.435 1572.55,687.435 1573.1,687.435 1573.66,687.435 1574.22,687.435 1574.78,687.435 1575.34,687.435 1575.9,687.435 1576.46,687.435 1577.02,687.435 1577.58,687.435 1578.14,687.435 1578.7,687.435 1579.26,687.435 1579.82,687.435 1580.37,687.435 1580.93,687.435 1581.49,687.435 1582.05,687.435 1582.61,687.435 1583.17,687.435 1583.73,687.435 1584.29,687.435 1584.85,687.435 1585.41,687.435 1585.97,687.435 1586.53,687.435 1587.09,687.435 1587.65,687.435 1588.2,687.435 1588.76,687.435 1589.32,687.435 1589.88,687.435 1590.44,687.435 1591,687.435 1591.56,687.435 1592.12,687.435 1592.68,687.435 1593.24,687.435 1593.8,687.435 1594.36,687.435 1594.92,687.435 1595.47,687.435 1596.03,687.435 1596.59,687.435 1597.15,687.435 1597.71,687.435 1598.27,687.435 1598.83,687.435 1599.39,687.435 1599.95,687.435 1600.51,687.435 1601.07,687.435 1601.63,687.435 1602.19,687.435 1602.74,687.435 1603.3,687.435 1603.86,687.435 1604.42,687.435 1604.98,687.435 1605.54,687.435 1606.1,687.435 1606.66,687.435 1607.22,687.435 1607.78,687.435 1608.34,687.435 1608.9,687.435 1609.46,687.435 1610.02,687.435 1610.57,687.435 1611.13,687.435 1611.69,687.435 1612.25,687.435 1612.81,687.435 1613.37,687.435 1613.93,687.435 1614.49,687.435 1615.05,687.435 1615.61,687.435 1616.17,687.435 1616.73,687.435 1617.29,687.435 1617.84,687.435 1618.4,687.435 1618.96,687.435 1619.52,687.435 1620.08,687.435 1620.64,687.435 1621.2,687.435 1621.76,687.435 1622.32,687.435 1622.88,687.435 1623.44,687.435 1624,687.435 1624.56,687.435 1625.11,687.435 1625.67,687.435 1626.23,687.435 1626.79,687.435 1627.35,687.435 1627.91,687.435 1628.47,687.435 1629.03,687.435 1629.59,687.435 1630.15,687.435 1630.71,687.435 1631.27,687.435 1631.83,687.435 1632.39,687.435 1632.94,687.435 1633.5,687.435 1634.06,687.435 1634.62,687.435 1635.18,687.435 1635.74,687.435 1636.3,687.435 1636.86,687.435 1637.42,687.435 1637.98,687.435 1638.54,687.435 1639.1,687.435 1639.66,687.435 1640.21,687.435 1640.77,687.435 1641.33,687.435 1641.89,687.435 1642.45,687.435 1643.01,687.435 1643.57,687.435 1644.13,687.435 1644.69,687.435 1645.25,687.435 1645.81,687.435 1646.37,687.435 1646.93,687.435 1647.48,687.435 1648.04,687.435 1648.6,687.435 1649.16,687.435 1649.72,687.435 1650.28,687.435 1650.84,687.435 1651.4,687.435 1651.96,687.435 1652.52,687.435 1653.08,687.435 1653.64,687.435 1654.2,687.435 1654.76,687.435 1655.31,687.435 1655.87,687.435 1656.43,687.435 1656.99,687.435 1657.55,687.435 1658.11,687.435 1658.67,687.435 1659.23,687.435 1659.79,687.435 1660.35,687.435 1660.91,687.435 1661.47,687.435 1662.03,687.435 1662.58,687.435 1663.14,687.435 1663.7,687.435 1664.26,687.435 1664.82,687.435 1665.38,687.435 1665.94,687.435 1666.5,687.435 1667.06,687.435 1667.62,687.435 1668.18,687.435 1668.74,687.435 1669.3,687.435 1669.85,687.435 1670.41,687.435 1670.97,687.435 1671.53,687.435 1672.09,687.435 1672.65,687.435 1673.21,687.435 1673.77,687.435 1674.33,687.435 1674.89,687.435 1675.45,687.435 1676.01,687.435 1676.57,687.435 1677.13,687.435 1677.68,687.435 1678.24,687.435 1678.8,687.435 1679.36,687.435 1679.92,687.435 1680.48,687.435 1681.04,687.435 1681.6,687.435 1682.16,687.435 1682.72,687.435 1683.28,687.435 1683.84,687.435 1684.4,687.435 1684.95,687.435 1685.51,687.435 1686.07,687.435 1686.63,687.435 1687.19,687.435 1687.75,687.435 1688.31,687.435 1688.87,687.435 1689.43,687.435 1689.99,687.435 1690.55,687.435 1691.11,687.435 1691.67,687.435 1692.23,687.435 1692.78,687.435 1693.34,687.435 1693.9,687.435 1694.46,687.435 1695.02,687.435 1695.58,687.435 1696.14,687.435 1696.7,687.435 1697.26,687.435 1697.82,687.435 1698.38,687.435 1698.94,687.435 1699.5,687.435 1700.05,687.435 1700.61,687.435 1701.17,687.435 1701.73,687.435 1702.29,687.435 1702.85,687.435 1703.41,687.435 1703.97,687.435 1704.53,687.435 1705.09,687.435 1705.65,687.435 1706.21,687.435 1706.77,687.435 1707.32,687.435 1707.88,687.435 1708.44,687.435 1709,687.435 1709.56,687.435 1710.12,687.435 1710.68,687.435 1711.24,687.435 1711.8,687.435 1712.36,687.435 1712.92,687.435 1713.48,687.435 1714.04,687.435 1714.6,687.435 1715.15,687.435 1715.71,687.435 1716.27,687.435 1716.83,687.435 1717.39,687.435 1717.95,687.435 1718.51,687.435 1719.07,687.435 1719.63,687.435 1720.19,687.435 1720.75,687.435 1721.31,687.435 1721.87,687.435 1722.42,687.435 1722.98,687.435 1723.54,687.435 1724.1,687.435 1724.66,687.435 1725.22,687.435 1725.78,687.435 1726.34,687.435 1726.9,687.435 1727.46,687.435 1728.02,687.435 1728.58,687.435 1729.14,687.435 1729.69,687.435 1730.25,687.435 1730.81,687.435 1731.37,687.435 1731.93,687.435 1732.49,687.435 1733.05,687.435 1733.61,687.435 1734.17,687.435 1734.73,687.435 1735.29,687.435 1735.85,687.435 1736.41,687.435 1736.97,687.435 1737.52,687.435 1738.08,687.435 1738.64,687.435 1739.2,687.435 1739.76,687.435 1740.32,687.435 1740.88,687.435 1741.44,687.435 1742,687.435 1742.56,687.435 1743.12,687.435 1743.68,687.435 1744.24,687.435 1744.79,687.435 1745.35,687.435 1745.91,687.435 1746.47,687.435 1747.03,687.435 1747.59,687.435 1748.15,687.435 1748.71,687.435 1749.27,687.435 1749.83,687.435 1750.39,687.435 1750.95,687.435 1751.51,687.435 1752.06,687.435 1752.62,687.435 1753.18,687.435 1753.74,687.435 1754.3,687.435 1754.86,687.435 1755.42,687.435 1755.98,687.435 1756.54,687.435 1757.1,687.435 1757.66,687.435 1758.22,687.435 1758.78,687.435 1759.34,687.435 1759.89,687.435 1760.45,687.435 1761.01,687.435 1761.57,687.435 1762.13,687.435 1762.69,687.435 1763.25,687.435 1763.81,687.435 1764.37,687.435 1764.93,687.435 1765.49,687.435 1766.05,687.435 1766.61,687.435 1767.16,687.435 1767.72,687.435 1768.28,687.435 1768.84,687.435 1769.4,687.435 1769.96,687.435 1770.52,687.435 1771.08,687.435 1771.64,687.435 1772.2,687.435 1772.76,687.435 1773.32,687.435 1773.88,687.435 1774.43,687.435 1774.99,687.435 1775.55,687.435 1776.11,687.435 1776.67,687.435 1777.23,687.435 1777.79,687.435 1778.35,687.435 1778.91,687.435 1779.47,687.435 1780.03,687.435 1780.59,687.435 1781.15,687.435 1781.71,687.435 1782.26,687.435 1782.82,687.435 1783.38,687.435 1783.94,687.435 1784.5,687.435 1785.06,687.435 1785.62,687.435 1786.18,687.435 1786.74,687.435 1787.3,687.435 1787.86,687.435 1788.42,687.435 1788.98,687.435 1789.53,687.435 1790.09,687.435 1790.65,687.435 1791.21,687.435 1791.77,687.435 1792.33,687.435 1792.89,687.435 1793.45,687.435 1794.01,687.435 1794.57,687.435 1795.13,687.435 1795.69,687.435 1796.25,687.435 1796.8,687.435 1797.36,687.435 1797.92,687.435 1798.48,687.435 1799.04,687.435 1799.6,687.435 1800.16,687.435 1800.72,687.435 1801.28,687.435 1801.84,687.435 1802.4,687.435 1802.96,687.435 1803.52,687.435 1804.08,687.435 1804.63,687.435 1805.19,687.435 1805.75,687.435 1806.31,687.435 1806.87,687.435 1807.43,687.435 1807.99,687.435 1808.55,687.435 1809.11,687.435 1809.67,687.435 1810.23,687.435 1810.79,687.435 1811.35,687.435 1811.9,687.435 1812.46,687.435 1813.02,687.435 1813.58,687.435 1814.14,687.435 1814.7,687.435 1815.26,687.435 1815.82,687.435 1816.38,687.435 1816.94,687.435 1817.5,687.435 1818.06,687.435 1818.62,687.435 1819.18,687.435 1819.73,687.435 1820.29,687.435 1820.85,687.435 1821.41,687.435 1821.97,687.435 1822.53,687.435 1823.09,687.435 1823.65,687.435 1824.21,687.435 1824.77,687.435 1825.33,687.435 1825.89,687.435 1826.45,687.435 1827,687.435 1827.56,687.435 1828.12,687.435 1828.68,687.435 1829.24,687.435 1829.8,687.435 1830.36,687.435 1830.92,687.435 1831.48,687.435 1832.04,687.435 1832.6,687.435 1833.16,687.435 1833.72,687.435 1834.27,687.435 1834.83,687.435 1835.39,687.435 1835.95,687.435 1836.51,687.435 1837.07,687.435 1837.63,687.435 1838.19,687.435 \"/>\n<path clip-path=\"url(#clip323)\" d=\"M720.247 684.071 L720.806 684.071 L721.365 684.071 L721.924 684.071 L722.484 684.071 L723.043 684.071 L723.602 684.071 L724.161 684.071 L724.721 684.071 L725.28 684.071 L725.839 684.071 L726.398 684.071 L726.958 684.071 L727.517 684.071 L728.076 684.071 L728.635 684.071 L729.195 684.071 L729.754 684.071 L730.313 684.071 L730.872 684.071 L731.432 684.071 L731.991 684.071 L732.55 684.071 L733.109 684.071 L733.669 684.071 L734.228 684.071 L734.787 684.071 L735.346 684.071 L735.906 684.071 L736.465 684.071 L737.024 684.071 L737.583 684.071 L738.143 684.071 L738.702 684.071 L739.261 684.071 L739.82 684.071 L740.38 684.071 L740.939 684.071 L741.498 684.071 L742.057 684.071 L742.617 684.071 L743.176 684.071 L743.735 684.071 L744.294 684.071 L744.854 684.071 L745.413 684.071 L745.972 684.071 L746.531 684.071 L747.091 684.071 L747.65 684.071 L748.209 684.071 L748.768 684.071 L749.328 684.071 L749.887 684.071 L750.446 684.071 L751.005 684.071 L751.565 684.071 L752.124 684.071 L752.683 684.071 L753.242 684.071 L753.802 684.071 L754.361 684.071 L754.92 684.071 L755.479 684.071 L756.039 684.071 L756.598 684.071 L757.157 684.071 L757.716 684.071 L758.276 684.071 L758.835 684.071 L759.394 684.071 L759.953 684.071 L760.513 684.071 L761.072 684.071 L761.631 684.071 L762.19 684.071 L762.75 684.071 L763.309 684.071 L763.868 684.071 L764.427 684.071 L764.987 684.071 L765.546 684.071 L766.105 684.071 L766.664 684.071 L767.224 684.071 L767.783 684.071 L768.342 684.071 L768.901 684.071 L769.461 684.071 L770.02 684.071 L770.579 684.071 L771.138 684.071 L771.698 684.071 L772.257 684.071 L772.816 684.071 L773.375 684.071 L773.935 684.071 L774.494 684.071 L775.053 684.071 L775.612 684.071 L776.172 684.071 L776.731 684.071 L777.29 684.071 L777.849 684.071 L778.409 684.071 L778.968 684.071 L779.527 684.071 L780.086 684.071 L780.646 684.071 L781.205 684.071 L781.764 684.071 L782.323 684.071 L782.883 684.071 L783.442 684.071 L784.001 684.071 L784.56 684.071 L785.12 684.071 L785.679 684.071 L786.238 684.071 L786.797 684.071 L787.357 684.071 L787.916 684.071 L788.475 684.071 L789.034 684.071 L789.594 684.071 L790.153 684.071 L790.712 684.071 L791.271 684.071 L791.831 684.071 L792.39 684.071 L792.949 684.071 L793.508 684.071 L794.068 684.071 L794.627 684.071 L795.186 684.071 L795.745 684.071 L796.305 684.071 L796.864 684.071 L797.423 684.071 L797.982 684.071 L798.542 684.071 L799.101 684.071 L799.66 684.071 L800.219 684.071 L800.779 684.071 L801.338 684.071 L801.897 684.071 L802.456 684.071 L803.016 684.071 L803.575 684.071 L804.134 684.071 L804.693 684.071 L805.253 684.071 L805.812 684.071 L806.371 684.071 L806.931 684.071 L807.49 684.071 L808.049 684.071 L808.608 684.071 L809.168 684.071 L809.727 684.071 L810.286 684.071 L810.845 684.071 L811.405 684.071 L811.964 684.071 L812.523 684.071 L813.082 684.071 L813.642 684.071 L814.201 684.071 L814.76 684.071 L815.319 684.071 L815.879 684.071 L816.438 684.071 L816.997 684.071 L817.556 684.071 L818.116 684.071 L818.675 684.071 L819.234 684.071 L819.793 684.071 L820.353 684.071 L820.912 684.071 L821.471 684.071 L822.03 684.071 L822.59 684.071 L823.149 684.071 L823.708 684.071 L824.267 684.071 L824.827 684.071 L825.386 684.071 L825.945 684.071 L826.504 684.071 L827.064 684.071 L827.623 684.071 L828.182 684.071 L828.741 684.071 L829.301 684.071 L829.86 684.071 L830.419 684.071 L830.978 684.071 L831.538 684.071 L832.097 684.071 L832.656 684.071 L833.215 684.071 L833.775 684.071 L834.334 684.071 L834.893 684.071 L835.452 684.071 L836.012 684.071 L836.571 684.071 L837.13 684.071 L837.689 684.071 L838.249 684.071 L838.808 684.071 L839.367 684.071 L839.926 684.071 L840.486 684.071 L841.045 684.071 L841.604 684.071 L842.163 684.071 L842.723 684.071 L843.282 684.071 L843.841 684.071 L844.4 684.071 L844.96 684.071 L845.519 684.071 L846.078 684.071 L846.637 684.071 L847.197 684.071 L847.756 684.071 L848.315 684.071 L848.874 684.071 L849.434 684.071 L849.993 684.071 L850.552 684.071 L851.111 684.071 L851.671 684.071 L852.23 684.071 L852.789 684.071 L853.348 684.071 L853.908 684.071 L854.467 684.071 L855.026 684.071 L855.585 684.071 L856.145 684.071 L856.704 684.071 L857.263 684.071 L857.822 684.071 L858.382 684.071 L858.941 684.071 L859.5 684.071 L860.059 684.071 L860.619 684.071 L861.178 684.071 L861.737 684.071 L862.296 684.071 L862.856 684.071 L863.415 684.071 L863.974 684.071 L864.533 684.071 L865.093 684.071 L865.652 684.071 L866.211 684.071 L866.77 684.071 L867.33 684.071 L867.889 684.071 L868.448 684.071 L869.007 684.071 L869.567 684.071 L870.126 684.071 L870.685 684.071 L871.244 684.071 L871.804 684.071 L872.363 684.071 L872.922 684.071 L873.481 684.071 L874.041 684.071 L874.6 684.071 L875.159 684.071 L875.718 684.071 L876.278 684.071 L876.837 684.071 L877.396 684.071 L877.955 684.071 L878.515 684.071 L879.074 684.071 L879.633 684.071 L880.192 684.071 L880.752 684.071 L881.311 684.071 L881.87 684.071 L882.429 684.071 L882.989 684.071 L883.548 684.071 L884.107 684.071 L884.666 684.071 L885.226 684.071 L885.785 684.071 L886.344 684.071 L886.903 684.071 L887.463 684.071 L888.022 684.071 L888.581 684.071 L889.14 684.071 L889.7 684.071 L890.259 684.071 L890.818 684.071 L891.377 684.071 L891.937 684.071 L892.496 684.071 L893.055 684.071 L893.614 684.071 L894.174 684.071 L894.733 684.071 L895.292 684.071 L895.851 684.071 L896.411 684.071 L896.97 684.071 L897.529 684.071 L898.088 684.071 L898.648 684.071 L899.207 684.071 L899.766 684.071 L900.325 684.071 L900.885 684.071 L901.444 684.071 L902.003 684.071 L902.562 684.071 L903.122 684.071 L903.681 684.071 L904.24 684.071 L904.799 684.071 L905.359 684.071 L905.918 684.071 L906.477 684.071 L907.036 684.071 L907.596 684.071 L908.155 684.071 L908.714 684.071 L909.273 684.071 L909.833 684.071 L910.392 684.071 L910.951 684.071 L911.51 684.071 L912.07 684.071 L912.629 684.071 L913.188 684.071 L913.747 684.071 L914.307 684.071 L914.866 684.071 L915.425 684.071 L915.984 684.071 L916.544 684.071 L917.103 684.071 L917.662 684.071 L918.221 684.071 L918.781 684.071 L919.34 684.071 L919.899 684.071 L920.458 684.071 L921.018 684.071 L921.577 684.071 L922.136 684.071 L922.695 684.071 L923.255 684.071 L923.814 684.071 L924.373 684.071 L924.932 684.071 L925.492 684.071 L926.051 684.071 L926.61 684.071 L927.169 684.071 L927.729 684.071 L928.288 684.071 L928.847 684.071 L929.406 684.071 L929.966 684.071 L930.525 684.071 L931.084 684.071 L931.644 684.071 L932.203 684.071 L932.762 684.071 L933.321 684.071 L933.881 684.071 L934.44 684.071 L934.999 684.071 L935.558 684.071 L936.118 684.071 L936.677 684.071 L937.236 684.071 L937.795 684.071 L938.355 684.071 L938.914 684.071 L939.473 684.071 L940.032 684.071 L940.592 684.071 L941.151 684.071 L941.71 684.071 L942.269 684.071 L942.829 684.071 L943.388 684.071 L943.947 684.071 L944.506 684.071 L945.066 684.071 L945.625 684.071 L946.184 684.071 L946.743 684.071 L947.303 684.071 L947.862 684.071 L948.421 684.071 L948.98 684.071 L949.54 684.071 L950.099 684.071 L950.658 684.071 L951.217 684.071 L951.777 684.071 L952.336 684.071 L952.895 684.071 L953.454 684.071 L954.014 684.071 L954.573 684.071 L955.132 684.071 L955.691 684.071 L956.251 684.071 L956.81 684.071 L957.369 684.071 L957.928 684.071 L958.488 684.071 L959.047 684.071 L959.606 684.071 L960.165 684.071 L960.725 684.071 L961.284 684.071 L961.843 684.071 L962.402 684.071 L962.962 684.071 L963.521 684.071 L964.08 684.071 L964.639 684.071 L965.199 684.071 L965.758 684.071 L966.317 684.071 L966.876 684.071 L967.436 684.071 L967.995 684.071 L968.554 684.071 L969.113 684.071 L969.673 684.071 L970.232 684.071 L970.791 684.071 L971.35 684.071 L971.91 684.071 L972.469 684.071 L973.028 684.071 L973.587 684.071 L974.147 684.071 L974.706 684.071 L975.265 684.071 L975.824 684.071 L976.384 684.071 L976.943 684.071 L977.502 684.071 L978.061 684.071 L978.621 684.071 L979.18 684.071 L979.739 684.071 L980.298 684.071 L980.858 684.071 L981.417 684.071 L981.976 684.071 L982.535 684.071 L983.095 684.071 L983.654 684.071 L984.213 684.071 L984.772 684.071 L985.332 684.071 L985.891 684.071 L986.45 684.071 L987.009 684.071 L987.569 684.071 L988.128 684.071 L988.687 684.071 L989.246 684.071 L989.806 684.071 L990.365 684.071 L990.924 684.071 L991.483 684.071 L992.043 684.071 L992.602 684.071 L993.161 684.071 L993.72 684.071 L994.28 684.071 L994.839 684.071 L995.398 684.071 L995.957 684.071 L996.517 684.071 L997.076 684.071 L997.635 684.071 L998.194 684.071 L998.754 684.071 L999.313 684.071 L999.872 684.071 L1000.43 684.071 L1000.99 684.071 L1001.55 684.071 L1002.11 684.071 L1002.67 684.071 L1003.23 684.071 L1003.79 684.071 L1004.35 684.071 L1004.91 684.071 L1005.46 684.071 L1006.02 684.071 L1006.58 684.071 L1007.14 684.071 L1007.7 684.071 L1008.26 684.071 L1008.82 684.071 L1009.38 684.071 L1009.94 684.071 L1010.5 684.071 L1011.06 684.071 L1011.62 684.071 L1012.18 684.071 L1012.73 684.071 L1013.29 684.071 L1013.85 684.071 L1014.41 684.071 L1014.97 684.071 L1015.53 684.071 L1016.09 684.071 L1016.65 684.071 L1017.21 684.071 L1017.77 684.071 L1018.33 684.071 L1018.89 684.071 L1019.45 684.071 L1020.01 684.071 L1020.56 684.071 L1021.12 684.071 L1021.68 684.071 L1022.24 684.071 L1022.8 684.071 L1023.36 684.071 L1023.92 684.071 L1024.48 684.071 L1025.04 684.071 L1025.6 684.071 L1026.16 684.071 L1026.72 684.071 L1027.28 684.071 L1027.83 684.071 L1028.39 684.071 L1028.95 684.071 L1029.51 684.071 L1030.07 684.071 L1030.63 684.071 L1031.19 684.071 L1031.75 684.071 L1032.31 684.071 L1032.87 684.071 L1033.43 684.071 L1033.99 684.071 L1034.55 684.071 L1035.1 684.071 L1035.66 684.071 L1036.22 684.071 L1036.78 684.071 L1037.34 684.071 L1037.9 684.071 L1038.46 684.071 L1039.02 684.071 L1039.58 684.071 L1040.14 684.071 L1040.7 684.071 L1041.26 684.071 L1041.82 684.071 L1042.38 684.071 L1042.93 684.071 L1043.49 684.071 L1044.05 684.071 L1044.61 684.071 L1045.17 684.071 L1045.73 684.071 L1046.29 684.071 L1046.85 684.071 L1047.41 684.071 L1047.97 684.071 L1048.53 684.071 L1049.09 684.071 L1049.65 684.071 L1050.2 684.071 L1050.76 684.071 L1051.32 684.071 L1051.88 684.071 L1052.44 684.071 L1053 684.071 L1053.56 684.071 L1054.12 684.071 L1054.68 684.071 L1055.24 684.071 L1055.8 684.071 L1056.36 684.071 L1056.92 684.071 L1057.48 684.071 L1058.03 684.071 L1058.59 684.071 L1059.15 684.071 L1059.71 684.071 L1060.27 684.071 L1060.83 684.071 L1061.39 684.071 L1061.95 684.071 L1062.51 684.071 L1063.07 684.071 L1063.63 684.071 L1064.19 684.071 L1064.75 684.071 L1065.3 684.071 L1065.86 684.071 L1066.42 684.071 L1066.98 684.071 L1067.54 684.071 L1068.1 684.071 L1068.66 684.071 L1069.22 684.071 L1069.78 684.071 L1070.34 684.071 L1070.9 684.071 L1071.46 684.071 L1072.02 684.071 L1072.57 684.071 L1073.13 684.071 L1073.69 684.071 L1074.25 684.071 L1074.81 684.071 L1075.37 684.071 L1075.93 684.071 L1076.49 684.071 L1077.05 684.071 L1077.61 684.071 L1078.17 684.071 L1078.73 684.071 L1079.29 684.071 L1079.85 684.071 L1080.4 684.071 L1080.96 684.071 L1081.52 684.071 L1082.08 684.071 L1082.64 684.071 L1083.2 684.071 L1083.76 684.071 L1084.32 684.071 L1084.88 684.071 L1085.44 684.071 L1086 684.071 L1086.56 684.071 L1087.12 684.071 L1087.67 684.071 L1088.23 684.071 L1088.79 684.071 L1089.35 684.071 L1089.91 684.071 L1090.47 684.071 L1091.03 684.071 L1091.59 684.071 L1092.15 684.071 L1092.71 684.071 L1093.27 684.071 L1093.83 684.071 L1094.39 684.071 L1094.94 684.071 L1095.5 684.071 L1096.06 684.071 L1096.62 684.071 L1097.18 684.071 L1097.74 684.071 L1098.3 684.071 L1098.86 684.071 L1099.42 684.071 L1099.98 684.071 L1100.54 684.071 L1101.1 684.071 L1101.66 684.071 L1102.22 684.071 L1102.77 684.071 L1103.33 684.071 L1103.89 684.071 L1104.45 684.071 L1105.01 684.071 L1105.57 684.071 L1106.13 684.071 L1106.69 684.071 L1107.25 684.071 L1107.81 684.071 L1108.37 684.071 L1108.93 684.071 L1109.49 684.071 L1110.04 684.071 L1110.6 684.071 L1111.16 684.071 L1111.72 684.071 L1112.28 684.071 L1112.84 684.071 L1113.4 684.071 L1113.96 684.071 L1114.52 684.071 L1115.08 684.071 L1115.64 684.071 L1116.2 684.071 L1116.76 684.071 L1117.31 684.071 L1117.87 684.071 L1118.43 684.071 L1118.99 684.071 L1119.55 684.071 L1120.11 684.071 L1120.67 684.071 L1121.23 684.071 L1121.79 684.071 L1122.35 684.071 L1122.91 684.071 L1123.47 684.071 L1124.03 684.071 L1124.59 684.071 L1125.14 684.071 L1125.7 684.071 L1126.26 684.071 L1126.82 684.071 L1127.38 684.071 L1127.94 684.071 L1128.5 684.071 L1129.06 684.071 L1129.62 684.071 L1130.18 684.071 L1130.74 684.071 L1131.3 684.071 L1131.86 684.071 L1132.41 684.071 L1132.97 684.071 L1133.53 684.071 L1134.09 684.071 L1134.65 684.071 L1135.21 684.071 L1135.77 684.071 L1136.33 684.071 L1136.89 684.071 L1137.45 684.071 L1138.01 684.071 L1138.57 684.071 L1139.13 684.071 L1139.68 684.071 L1140.24 684.071 L1140.8 684.071 L1141.36 684.071 L1141.92 684.071 L1142.48 684.071 L1143.04 684.071 L1143.6 684.071 L1144.16 684.071 L1144.72 684.071 L1145.28 684.071 L1145.84 684.071 L1146.4 684.071 L1146.96 684.071 L1147.51 684.071 L1148.07 684.071 L1148.63 684.071 L1149.19 684.071 L1149.75 684.071 L1150.31 684.071 L1150.87 684.071 L1151.43 684.071 L1151.99 684.071 L1152.55 684.071 L1153.11 684.071 L1153.67 684.071 L1154.23 684.071 L1154.78 684.071 L1155.34 684.071 L1155.9 684.071 L1156.46 684.071 L1157.02 684.071 L1157.58 684.071 L1158.14 684.071 L1158.7 684.071 L1159.26 684.071 L1159.82 684.071 L1160.38 684.071 L1160.94 684.071 L1161.5 684.071 L1162.05 684.071 L1162.61 684.071 L1163.17 684.071 L1163.73 684.071 L1164.29 684.071 L1164.85 684.071 L1165.41 684.071 L1165.97 684.071 L1166.53 684.071 L1167.09 684.071 L1167.65 684.071 L1168.21 684.071 L1168.77 684.071 L1169.33 684.071 L1169.88 684.071 L1170.44 684.071 L1171 684.071 L1171.56 684.071 L1172.12 684.071 L1172.68 684.071 L1173.24 684.071 L1173.8 684.071 L1174.36 684.071 L1174.92 684.071 L1175.48 684.071 L1176.04 684.071 L1176.6 684.071 L1177.15 684.071 L1177.71 684.071 L1178.27 684.071 L1178.83 684.071 L1179.39 684.071 L1179.95 684.071 L1180.51 684.071 L1181.07 684.071 L1181.63 684.071 L1182.19 684.071 L1182.75 684.071 L1183.31 684.071 L1183.87 684.071 L1184.43 684.071 L1184.98 684.071 L1185.54 684.071 L1186.1 684.071 L1186.66 684.071 L1187.22 684.071 L1187.78 684.071 L1188.34 684.071 L1188.9 684.071 L1189.46 684.071 L1190.02 684.071 L1190.58 684.071 L1191.14 684.071 L1191.7 684.071 L1192.25 684.071 L1192.81 684.071 L1193.37 684.071 L1193.93 684.071 L1194.49 684.071 L1195.05 684.071 L1195.61 684.071 L1196.17 684.071 L1196.73 684.071 L1197.29 684.071 L1197.85 684.071 L1198.41 684.071 L1198.97 684.071 L1199.52 684.071 L1200.08 684.071 L1200.64 684.071 L1201.2 684.071 L1201.76 684.071 L1202.32 684.071 L1202.88 684.071 L1203.44 684.071 L1204 684.071 L1204.56 684.071 L1205.12 684.071 L1205.68 684.071 L1206.24 684.071 L1206.8 684.071 L1207.35 684.071 L1207.91 684.071 L1208.47 684.071 L1209.03 684.071 L1209.59 684.071 L1210.15 684.071 L1210.71 684.071 L1211.27 684.071 L1211.83 684.071 L1212.39 684.071 L1212.95 684.071 L1213.51 684.071 L1214.07 684.071 L1214.62 684.071 L1215.18 684.071 L1215.74 684.071 L1216.3 684.071 L1216.86 684.071 L1217.42 684.071 L1217.98 684.071 L1218.54 684.071 L1219.1 684.071 L1219.66 684.071 L1220.22 684.071 L1220.78 684.071 L1221.34 684.071 L1221.89 684.071 L1222.45 684.071 L1223.01 684.071 L1223.57 684.071 L1224.13 684.071 L1224.69 684.071 L1225.25 684.071 L1225.81 684.071 L1226.37 684.071 L1226.93 684.071 L1227.49 684.071 L1228.05 684.071 L1228.61 684.071 L1229.17 684.071 L1229.72 684.071 L1230.28 684.071 L1230.84 684.071 L1231.4 684.071 L1231.96 684.071 L1232.52 684.071 L1233.08 684.071 L1233.64 684.071 L1234.2 684.071 L1234.76 684.071 L1235.32 684.071 L1235.88 684.071 L1236.44 684.071 L1236.99 684.071 L1237.55 684.071 L1238.11 684.071 L1238.67 684.071 L1239.23 684.071 L1239.79 684.071 L1240.35 684.071 L1240.91 684.071 L1241.47 684.071 L1242.03 684.071 L1242.59 684.071 L1243.15 684.071 L1243.71 684.071 L1244.26 684.071 L1244.82 684.071 L1245.38 684.071 L1245.94 684.071 L1246.5 684.071 L1247.06 684.071 L1247.62 684.071 L1248.18 684.071 L1248.74 684.071 L1249.3 684.071 L1249.86 684.071 L1250.42 684.071 L1250.98 684.071 L1251.54 684.071 L1252.09 684.071 L1252.65 684.071 L1253.21 684.071 L1253.77 684.071 L1254.33 684.071 L1254.89 684.071 L1255.45 684.071 L1256.01 684.071 L1256.57 684.071 L1257.13 684.071 L1257.69 684.071 L1258.25 684.071 L1258.81 684.071 L1259.36 684.071 L1259.92 684.071 L1260.48 684.071 L1261.04 684.071 L1261.6 684.071 L1262.16 684.071 L1262.72 684.071 L1263.28 684.071 L1263.84 684.071 L1264.4 684.071 L1264.96 684.071 L1265.52 684.071 L1266.08 684.071 L1266.63 684.071 L1267.19 684.071 L1267.75 684.071 L1268.31 684.071 L1268.87 684.071 L1269.43 684.071 L1269.99 684.071 L1270.55 684.071 L1271.11 684.071 L1271.67 684.071 L1272.23 684.071 L1272.79 684.071 L1273.35 684.071 L1273.91 684.071 L1274.46 684.071 L1275.02 684.071 L1275.58 684.071 L1276.14 684.071 L1276.7 684.071 L1277.26 684.071 L1277.82 684.071 L1278.38 684.071 L1278.94 684.071 L1279.5 684.071 L1280.06 684.071 L1280.62 684.071 L1281.18 684.071 L1281.73 684.071 L1282.29 684.071 L1282.85 684.071 L1283.41 684.071 L1283.97 684.071 L1284.53 684.071 L1285.09 684.071 L1285.65 684.071 L1286.21 684.071 L1286.77 684.071 L1287.33 684.071 L1287.89 684.071 L1288.45 684.071 L1289 684.071 L1289.56 684.071 L1290.12 684.071 L1290.68 684.071 L1291.24 684.071 L1291.8 684.071 L1292.36 684.071 L1292.92 684.071 L1293.48 684.071 L1294.04 684.071 L1294.6 684.071 L1295.16 684.071 L1295.72 684.071 L1296.28 684.071 L1296.83 684.071 L1297.39 684.071 L1297.95 684.071 L1298.51 684.071 L1299.07 684.071 L1299.63 684.071 L1300.19 684.071 L1300.75 684.071 L1301.31 684.071 L1301.87 684.071 L1302.43 684.071 L1302.99 684.071 L1303.55 684.071 L1304.1 684.071 L1304.66 684.071 L1305.22 684.071 L1305.78 684.071 L1306.34 684.071 L1306.9 684.071 L1307.46 684.071 L1308.02 684.071 L1308.58 684.071 L1309.14 684.071 L1309.7 684.071 L1310.26 684.071 L1310.82 684.071 L1311.38 684.071 L1311.93 684.071 L1312.49 684.071 L1313.05 684.071 L1313.61 684.071 L1314.17 684.071 L1314.73 684.071 L1315.29 684.071 L1315.85 684.071 L1316.41 684.071 L1316.97 684.071 L1317.53 684.071 L1318.09 684.071 L1318.65 684.071 L1319.2 684.071 L1319.76 684.071 L1320.32 684.071 L1320.88 684.071 L1321.44 684.071 L1322 684.071 L1322.56 684.071 L1323.12 684.071 L1323.68 684.071 L1324.24 684.071 L1324.8 684.071 L1325.36 684.071 L1325.92 684.071 L1326.47 684.071 L1327.03 684.071 L1327.59 684.071 L1328.15 684.071 L1328.71 684.071 L1329.27 684.071 L1329.83 684.071 L1330.39 684.071 L1330.95 684.071 L1331.51 684.071 L1332.07 684.071 L1332.63 684.071 L1333.19 684.071 L1333.75 684.071 L1334.3 684.071 L1334.86 684.071 L1335.42 684.071 L1335.98 684.071 L1336.54 684.071 L1337.1 684.071 L1337.66 684.071 L1338.22 684.071 L1338.78 684.071 L1339.34 684.071 L1339.9 684.071 L1340.46 684.071 L1341.02 684.071 L1341.57 684.071 L1342.13 684.071 L1342.69 684.071 L1343.25 684.071 L1343.81 684.071 L1344.37 684.071 L1344.93 684.071 L1345.49 684.071 L1346.05 684.071 L1346.61 684.071 L1347.17 684.071 L1347.73 684.071 L1348.29 684.071 L1348.84 684.071 L1349.4 684.071 L1349.96 684.071 L1350.52 684.071 L1351.08 684.071 L1351.64 684.071 L1352.2 684.071 L1352.76 684.071 L1353.32 684.071 L1353.88 684.071 L1354.44 684.071 L1355 684.071 L1355.56 684.071 L1356.12 684.071 L1356.67 684.071 L1357.23 684.071 L1357.79 684.071 L1358.35 684.071 L1358.91 684.071 L1359.47 684.071 L1360.03 684.071 L1360.59 684.071 L1361.15 684.071 L1361.71 684.071 L1362.27 684.071 L1362.83 684.071 L1363.39 684.071 L1363.94 684.071 L1364.5 684.071 L1365.06 684.071 L1365.62 684.071 L1366.18 684.071 L1366.74 684.071 L1367.3 684.071 L1367.86 684.071 L1368.42 684.071 L1368.98 684.071 L1369.54 684.071 L1370.1 684.071 L1370.66 684.071 L1371.21 684.071 L1371.77 684.071 L1372.33 684.071 L1372.89 684.071 L1373.45 684.071 L1374.01 684.071 L1374.57 684.071 L1375.13 684.071 L1375.69 684.071 L1376.25 684.071 L1376.81 684.071 L1377.37 684.071 L1377.93 684.071 L1378.49 684.071 L1379.04 684.071 L1379.6 684.071 L1380.16 684.071 L1380.72 684.071 L1381.28 684.071 L1381.84 684.071 L1382.4 684.071 L1382.96 684.071 L1383.52 684.071 L1384.08 684.071 L1384.64 684.071 L1385.2 684.071 L1385.76 684.071 L1386.31 684.071 L1386.87 684.071 L1387.43 684.071 L1387.99 684.071 L1388.55 684.071 L1389.11 684.071 L1389.67 684.071 L1390.23 684.071 L1390.79 684.071 L1391.35 684.071 L1391.91 684.071 L1392.47 684.071 L1393.03 684.071 L1393.58 684.071 L1394.14 684.071 L1394.7 684.071 L1395.26 684.071 L1395.82 684.071 L1396.38 684.071 L1396.94 684.071 L1397.5 684.071 L1398.06 684.071 L1398.62 684.071 L1399.18 684.071 L1399.74 684.071 L1400.3 684.071 L1400.86 684.071 L1401.41 684.071 L1401.97 684.071 L1402.53 684.071 L1403.09 684.071 L1403.65 684.071 L1404.21 684.071 L1404.77 684.071 L1405.33 684.071 L1405.89 684.071 L1406.45 684.071 L1407.01 684.071 L1407.57 684.071 L1408.13 684.071 L1408.68 684.071 L1409.24 684.071 L1409.8 684.071 L1410.36 684.071 L1410.92 684.071 L1411.48 684.071 L1412.04 684.071 L1412.6 684.071 L1413.16 684.071 L1413.72 684.071 L1414.28 684.071 L1414.84 684.071 L1415.4 684.071 L1415.95 684.071 L1416.51 684.071 L1417.07 684.071 L1417.63 684.071 L1418.19 684.071 L1418.75 684.071 L1419.31 684.071 L1419.87 684.071 L1420.43 684.071 L1420.99 684.071 L1421.55 684.071 L1422.11 684.071 L1422.67 684.071 L1423.23 684.071 L1423.78 684.071 L1424.34 684.071 L1424.9 684.071 L1425.46 684.071 L1426.02 684.071 L1426.58 684.071 L1427.14 684.071 L1427.7 684.071 L1428.26 684.071 L1428.82 684.071 L1429.38 684.071 L1429.94 684.071 L1430.5 684.071 L1431.05 684.071 L1431.61 684.071 L1432.17 684.071 L1432.73 684.071 L1433.29 684.071 L1433.85 684.071 L1434.41 684.071 L1434.97 684.071 L1435.53 684.071 L1436.09 684.071 L1436.65 684.071 L1437.21 684.071 L1437.77 684.071 L1438.33 684.071 L1438.88 684.071 L1439.44 684.071 L1440 684.071 L1440.56 684.071 L1441.12 684.071 L1441.68 684.071 L1442.24 684.071 L1442.8 684.071 L1443.36 684.071 L1443.92 684.071 L1444.48 684.071 L1445.04 684.071 L1445.6 684.071 L1446.15 684.071 L1446.71 684.071 L1447.27 684.071 L1447.83 684.071 L1448.39 684.071 L1448.95 684.071 L1449.51 684.071 L1450.07 684.071 L1450.63 684.071 L1451.19 684.071 L1451.75 684.071 L1452.31 684.071 L1452.87 684.071 L1453.42 684.071 L1453.98 684.071 L1454.54 684.071 L1455.1 684.071 L1455.66 684.071 L1456.22 684.071 L1456.78 684.071 L1457.34 684.071 L1457.9 684.071 L1458.46 684.071 L1459.02 684.071 L1459.58 684.071 L1460.14 684.071 L1460.7 684.071 L1461.25 684.071 L1461.81 684.071 L1462.37 684.071 L1462.93 684.071 L1463.49 684.071 L1464.05 684.071 L1464.61 684.071 L1465.17 684.071 L1465.73 684.071 L1466.29 684.071 L1466.85 684.071 L1467.41 684.071 L1467.97 684.071 L1468.52 684.071 L1469.08 684.071 L1469.64 684.071 L1470.2 684.071 L1470.76 684.071 L1471.32 684.071 L1471.88 684.071 L1472.44 684.071 L1473 684.071 L1473.56 684.071 L1474.12 684.071 L1474.68 684.071 L1475.24 684.071 L1475.79 684.071 L1476.35 684.071 L1476.91 684.071 L1477.47 684.071 L1478.03 684.071 L1478.59 684.071 L1479.15 684.071 L1479.71 684.071 L1480.27 684.071 L1480.83 684.071 L1481.39 684.071 L1481.95 684.071 L1482.51 684.071 L1483.07 684.071 L1483.62 684.071 L1484.18 684.071 L1484.74 684.071 L1485.3 684.071 L1485.86 684.071 L1486.42 684.071 L1486.98 684.071 L1487.54 684.071 L1488.1 684.071 L1488.66 684.071 L1489.22 684.071 L1489.78 684.071 L1490.34 684.071 L1490.89 684.071 L1491.45 684.071 L1492.01 684.071 L1492.57 684.071 L1493.13 684.071 L1493.69 684.071 L1494.25 684.071 L1494.81 684.071 L1495.37 684.071 L1495.93 684.071 L1496.49 684.071 L1497.05 684.071 L1497.61 684.071 L1498.16 684.071 L1498.72 684.071 L1499.28 684.071 L1499.84 684.071 L1500.4 684.071 L1500.96 684.071 L1501.52 684.071 L1502.08 684.071 L1502.64 684.071 L1503.2 684.071 L1503.76 684.071 L1504.32 684.071 L1504.88 684.071 L1505.44 684.071 L1505.99 684.071 L1506.55 684.071 L1507.11 684.071 L1507.67 684.071 L1508.23 684.071 L1508.79 684.071 L1509.35 684.071 L1509.91 684.071 L1510.47 684.071 L1511.03 684.071 L1511.59 684.071 L1512.15 684.071 L1512.71 684.071 L1513.26 684.071 L1513.82 684.071 L1514.38 684.071 L1514.94 684.071 L1515.5 684.071 L1516.06 684.071 L1516.62 684.071 L1517.18 684.071 L1517.74 684.071 L1518.3 684.071 L1518.86 684.071 L1519.42 684.071 L1519.98 684.071 L1520.53 684.071 L1521.09 684.071 L1521.65 684.071 L1522.21 684.071 L1522.77 684.071 L1523.33 684.071 L1523.89 684.071 L1524.45 684.071 L1525.01 684.071 L1525.57 684.071 L1526.13 684.071 L1526.69 684.071 L1527.25 684.071 L1527.81 684.071 L1528.36 684.071 L1528.92 684.071 L1529.48 684.071 L1530.04 684.071 L1530.6 684.071 L1531.16 684.071 L1531.72 684.071 L1532.28 684.071 L1532.84 684.071 L1533.4 684.071 L1533.96 684.071 L1534.52 684.071 L1535.08 684.071 L1535.63 684.071 L1536.19 684.071 L1536.75 684.071 L1537.31 684.071 L1537.87 684.071 L1538.43 684.071 L1538.99 684.071 L1539.55 684.071 L1540.11 684.071 L1540.67 684.071 L1541.23 684.071 L1541.79 684.071 L1542.35 684.071 L1542.9 684.071 L1543.46 684.071 L1544.02 684.071 L1544.58 684.071 L1545.14 684.071 L1545.7 684.071 L1546.26 684.071 L1546.82 684.071 L1547.38 684.071 L1547.94 684.071 L1548.5 684.071 L1549.06 684.071 L1549.62 684.071 L1550.18 684.071 L1550.73 684.071 L1551.29 684.071 L1551.85 684.071 L1552.41 684.071 L1552.97 684.071 L1553.53 684.071 L1554.09 684.071 L1554.65 684.071 L1555.21 684.071 L1555.77 684.071 L1556.33 684.071 L1556.89 684.071 L1557.45 684.071 L1558 684.071 L1558.56 684.071 L1559.12 684.071 L1559.68 684.071 L1560.24 684.071 L1560.8 684.071 L1561.36 684.071 L1561.92 684.071 L1562.48 684.071 L1563.04 684.071 L1563.6 684.071 L1564.16 684.071 L1564.72 684.071 L1565.28 684.071 L1565.83 684.071 L1566.39 684.071 L1566.95 684.071 L1567.51 684.071 L1568.07 684.071 L1568.63 684.071 L1569.19 684.071 L1569.75 684.071 L1570.31 684.071 L1570.87 684.071 L1571.43 684.071 L1571.99 684.071 L1572.55 684.071 L1573.1 684.071 L1573.66 684.071 L1574.22 684.071 L1574.78 684.071 L1575.34 684.071 L1575.9 684.071 L1576.46 684.071 L1577.02 684.071 L1577.58 684.071 L1578.14 684.071 L1578.7 684.071 L1579.26 684.071 L1579.82 684.071 L1580.37 684.071 L1580.93 684.071 L1581.49 684.071 L1582.05 684.071 L1582.61 684.071 L1583.17 684.071 L1583.73 684.071 L1584.29 684.071 L1584.85 684.071 L1585.41 684.071 L1585.97 684.071 L1586.53 684.071 L1587.09 684.071 L1587.65 684.071 L1588.2 684.071 L1588.76 684.071 L1589.32 684.071 L1589.88 684.071 L1590.44 684.071 L1591 684.071 L1591.56 684.071 L1592.12 684.071 L1592.68 684.071 L1593.24 684.071 L1593.8 684.071 L1594.36 684.071 L1594.92 684.071 L1595.47 684.071 L1596.03 684.071 L1596.59 684.071 L1597.15 684.071 L1597.71 684.071 L1598.27 684.071 L1598.83 684.071 L1599.39 684.071 L1599.95 684.071 L1600.51 684.071 L1601.07 684.071 L1601.63 684.071 L1602.19 684.071 L1602.74 684.071 L1603.3 684.071 L1603.86 684.071 L1604.42 684.071 L1604.98 684.071 L1605.54 684.071 L1606.1 684.071 L1606.66 684.071 L1607.22 684.071 L1607.78 684.071 L1608.34 684.071 L1608.9 684.071 L1609.46 684.071 L1610.02 684.071 L1610.57 684.071 L1611.13 684.071 L1611.69 684.071 L1612.25 684.071 L1612.81 684.071 L1613.37 684.071 L1613.93 684.071 L1614.49 684.071 L1615.05 684.071 L1615.61 684.071 L1616.17 684.071 L1616.73 684.071 L1617.29 684.071 L1617.84 684.071 L1618.4 684.071 L1618.96 684.071 L1619.52 684.071 L1620.08 684.071 L1620.64 684.071 L1621.2 684.071 L1621.76 684.071 L1622.32 684.071 L1622.88 684.071 L1623.44 684.071 L1624 684.071 L1624.56 684.071 L1625.11 684.071 L1625.67 684.071 L1626.23 684.071 L1626.79 684.071 L1627.35 684.071 L1627.91 684.071 L1628.47 684.071 L1629.03 684.071 L1629.59 684.071 L1630.15 684.071 L1630.71 684.071 L1631.27 684.071 L1631.83 684.071 L1632.39 684.071 L1632.94 684.071 L1633.5 684.071 L1634.06 684.071 L1634.62 684.071 L1635.18 684.071 L1635.74 684.071 L1636.3 684.071 L1636.86 684.071 L1637.42 684.071 L1637.98 684.071 L1638.54 684.071 L1639.1 684.071 L1639.66 684.071 L1640.21 684.071 L1640.77 684.071 L1641.33 684.071 L1641.89 684.071 L1642.45 684.071 L1643.01 684.071 L1643.57 684.071 L1644.13 684.071 L1644.69 684.071 L1645.25 684.071 L1645.81 684.071 L1646.37 684.071 L1646.93 684.071 L1647.48 684.071 L1648.04 684.071 L1648.6 684.071 L1649.16 684.071 L1649.72 684.071 L1650.28 684.071 L1650.84 684.071 L1651.4 684.071 L1651.96 684.071 L1652.52 684.071 L1653.08 684.071 L1653.64 684.071 L1654.2 684.071 L1654.76 684.071 L1655.31 684.071 L1655.87 684.071 L1656.43 684.071 L1656.99 684.071 L1657.55 684.071 L1658.11 684.071 L1658.67 684.071 L1659.23 684.071 L1659.79 684.071 L1660.35 684.071 L1660.91 684.071 L1661.47 684.071 L1662.03 684.071 L1662.58 684.071 L1663.14 684.071 L1663.7 684.071 L1664.26 684.071 L1664.82 684.071 L1665.38 684.071 L1665.94 684.071 L1666.5 684.071 L1667.06 684.071 L1667.62 684.071 L1668.18 684.071 L1668.74 684.071 L1669.3 684.071 L1669.85 684.071 L1670.41 684.071 L1670.97 684.071 L1671.53 684.071 L1672.09 684.071 L1672.65 684.071 L1673.21 684.071 L1673.77 684.071 L1674.33 684.071 L1674.89 684.071 L1675.45 684.071 L1676.01 684.071 L1676.57 684.071 L1677.13 684.071 L1677.68 684.071 L1678.24 684.071 L1678.8 684.071 L1679.36 684.071 L1679.92 684.071 L1680.48 684.071 L1681.04 684.071 L1681.6 684.071 L1682.16 684.071 L1682.72 684.071 L1683.28 684.071 L1683.84 684.071 L1684.4 684.071 L1684.95 684.071 L1685.51 684.071 L1686.07 684.071 L1686.63 684.071 L1687.19 684.071 L1687.75 684.071 L1688.31 684.071 L1688.87 684.071 L1689.43 684.071 L1689.99 684.071 L1690.55 684.071 L1691.11 684.071 L1691.67 684.071 L1692.23 684.071 L1692.78 684.071 L1693.34 684.071 L1693.9 684.071 L1694.46 684.071 L1695.02 684.071 L1695.58 684.071 L1696.14 684.071 L1696.7 684.071 L1697.26 684.071 L1697.82 684.071 L1698.38 684.071 L1698.94 684.071 L1699.5 684.071 L1700.05 684.071 L1700.61 684.071 L1701.17 684.071 L1701.73 684.071 L1702.29 684.071 L1702.85 684.071 L1703.41 684.071 L1703.97 684.071 L1704.53 684.071 L1705.09 684.071 L1705.65 684.071 L1706.21 684.071 L1706.77 684.071 L1707.32 684.071 L1707.88 684.071 L1708.44 684.071 L1709 684.071 L1709.56 684.071 L1710.12 684.071 L1710.68 684.071 L1711.24 684.071 L1711.8 684.071 L1712.36 684.071 L1712.92 684.071 L1713.48 684.071 L1714.04 684.071 L1714.6 684.071 L1715.15 684.071 L1715.71 684.071 L1716.27 684.071 L1716.83 684.071 L1717.39 684.071 L1717.95 684.071 L1718.51 684.071 L1719.07 684.071 L1719.63 684.071 L1720.19 684.071 L1720.75 684.071 L1721.31 684.071 L1721.87 684.071 L1722.42 684.071 L1722.98 684.071 L1723.54 684.071 L1724.1 684.071 L1724.66 684.071 L1725.22 684.071 L1725.78 684.071 L1726.34 684.071 L1726.9 684.071 L1727.46 684.071 L1728.02 684.071 L1728.58 684.071 L1729.14 684.071 L1729.69 684.071 L1730.25 684.071 L1730.81 684.071 L1731.37 684.071 L1731.93 684.071 L1732.49 684.071 L1733.05 684.071 L1733.61 684.071 L1734.17 684.071 L1734.73 684.071 L1735.29 684.071 L1735.85 684.071 L1736.41 684.071 L1736.97 684.071 L1737.52 684.071 L1738.08 684.071 L1738.64 684.071 L1739.2 684.071 L1739.76 684.071 L1740.32 684.071 L1740.88 684.071 L1741.44 684.071 L1742 684.071 L1742.56 684.071 L1743.12 684.071 L1743.68 684.071 L1744.24 684.071 L1744.79 684.071 L1745.35 684.071 L1745.91 684.071 L1746.47 684.071 L1747.03 684.071 L1747.59 684.071 L1748.15 684.071 L1748.71 684.071 L1749.27 684.071 L1749.83 684.071 L1750.39 684.071 L1750.95 684.071 L1751.51 684.071 L1752.06 684.071 L1752.62 684.071 L1753.18 684.071 L1753.74 684.071 L1754.3 684.071 L1754.86 684.071 L1755.42 684.071 L1755.98 684.071 L1756.54 684.071 L1757.1 684.071 L1757.66 684.071 L1758.22 684.071 L1758.78 684.071 L1759.34 684.071 L1759.89 684.071 L1760.45 684.071 L1761.01 684.071 L1761.57 684.071 L1762.13 684.071 L1762.69 684.071 L1763.25 684.071 L1763.81 684.071 L1764.37 684.071 L1764.93 684.071 L1765.49 684.071 L1766.05 684.071 L1766.61 684.071 L1767.16 684.071 L1767.72 684.071 L1768.28 684.071 L1768.84 684.071 L1769.4 684.071 L1769.96 684.071 L1770.52 684.071 L1771.08 684.071 L1771.64 684.071 L1772.2 684.071 L1772.76 684.071 L1773.32 684.071 L1773.88 684.071 L1774.43 684.071 L1774.99 684.071 L1775.55 684.071 L1776.11 684.071 L1776.67 684.071 L1777.23 684.071 L1777.79 684.071 L1778.35 684.071 L1778.91 684.071 L1779.47 684.071 L1780.03 684.071 L1780.59 684.071 L1781.15 684.071 L1781.71 684.071 L1782.26 684.071 L1782.82 684.071 L1783.38 684.071 L1783.94 684.071 L1784.5 684.071 L1785.06 684.071 L1785.62 684.071 L1786.18 684.071 L1786.74 684.071 L1787.3 684.071 L1787.86 684.071 L1788.42 684.071 L1788.98 684.071 L1789.53 684.071 L1790.09 684.071 L1790.65 684.071 L1791.21 684.071 L1791.77 684.071 L1792.33 684.071 L1792.89 684.071 L1793.45 684.071 L1794.01 684.071 L1794.57 684.071 L1795.13 684.071 L1795.69 684.071 L1796.25 684.071 L1796.8 684.071 L1797.36 684.071 L1797.92 684.071 L1798.48 684.071 L1799.04 684.071 L1799.6 684.071 L1800.16 684.071 L1800.72 684.071 L1801.28 684.071 L1801.84 684.071 L1802.4 684.071 L1802.96 684.071 L1803.52 684.071 L1804.08 684.071 L1804.63 684.071 L1805.19 684.071 L1805.75 684.071 L1806.31 684.071 L1806.87 684.071 L1807.43 684.071 L1807.99 684.071 L1808.55 684.071 L1809.11 684.071 L1809.67 684.071 L1810.23 684.071 L1810.79 684.071 L1811.35 684.071 L1811.9 684.071 L1812.46 684.071 L1813.02 684.071 L1813.58 684.071 L1814.14 684.071 L1814.7 684.071 L1815.26 684.071 L1815.82 684.071 L1816.38 684.071 L1816.94 684.071 L1817.5 684.071 L1818.06 684.071 L1818.62 684.071 L1819.18 684.071 L1819.73 684.071 L1820.29 684.071 L1820.85 684.071 L1821.41 684.071 L1821.97 684.071 L1822.53 684.071 L1823.09 684.071 L1823.65 684.071 L1824.21 684.071 L1824.77 684.071 L1825.33 684.071 L1825.89 684.071 L1826.45 684.071 L1827 684.071 L1827.56 684.071 L1828.12 684.071 L1828.68 684.071 L1829.24 684.071 L1829.8 684.071 L1830.36 684.071 L1830.92 684.071 L1831.48 684.071 L1832.04 684.071 L1832.6 684.071 L1833.16 684.071 L1833.72 684.071 L1834.27 684.071 L1834.83 684.071 L1835.39 684.071 L1835.95 684.071 L1836.51 684.071 L1837.07 684.071 L1837.63 684.071 L1838.19 684.071 L1838.19 682.326 L1837.63 682.326 L1837.07 682.326 L1836.51 682.326 L1835.95 682.326 L1835.39 682.326 L1834.83 682.326 L1834.27 682.326 L1833.72 682.326 L1833.16 682.326 L1832.6 682.326 L1832.04 682.326 L1831.48 682.326 L1830.92 682.326 L1830.36 682.326 L1829.8 682.326 L1829.24 682.326 L1828.68 682.326 L1828.12 682.326 L1827.56 682.326 L1827 682.326 L1826.45 682.326 L1825.89 682.326 L1825.33 682.326 L1824.77 682.326 L1824.21 682.326 L1823.65 682.326 L1823.09 682.326 L1822.53 682.326 L1821.97 682.326 L1821.41 682.326 L1820.85 682.326 L1820.29 682.326 L1819.73 682.326 L1819.18 682.326 L1818.62 682.326 L1818.06 682.326 L1817.5 682.326 L1816.94 682.326 L1816.38 682.326 L1815.82 682.326 L1815.26 682.326 L1814.7 682.326 L1814.14 682.326 L1813.58 682.326 L1813.02 682.326 L1812.46 682.326 L1811.9 682.326 L1811.35 682.326 L1810.79 682.326 L1810.23 682.326 L1809.67 682.326 L1809.11 682.326 L1808.55 682.326 L1807.99 682.326 L1807.43 682.326 L1806.87 682.326 L1806.31 682.326 L1805.75 682.326 L1805.19 682.326 L1804.63 682.326 L1804.08 682.326 L1803.52 682.326 L1802.96 682.326 L1802.4 682.326 L1801.84 682.326 L1801.28 682.326 L1800.72 682.326 L1800.16 682.326 L1799.6 682.326 L1799.04 682.326 L1798.48 682.326 L1797.92 682.326 L1797.36 682.326 L1796.8 682.326 L1796.25 682.326 L1795.69 682.326 L1795.13 682.326 L1794.57 682.326 L1794.01 682.326 L1793.45 682.326 L1792.89 682.326 L1792.33 682.326 L1791.77 682.326 L1791.21 682.326 L1790.65 682.326 L1790.09 682.326 L1789.53 682.326 L1788.98 682.326 L1788.42 682.326 L1787.86 682.326 L1787.3 682.326 L1786.74 682.326 L1786.18 682.326 L1785.62 682.326 L1785.06 682.326 L1784.5 682.326 L1783.94 682.326 L1783.38 682.326 L1782.82 682.326 L1782.26 682.326 L1781.71 682.326 L1781.15 682.326 L1780.59 682.326 L1780.03 682.326 L1779.47 682.326 L1778.91 682.326 L1778.35 682.326 L1777.79 682.326 L1777.23 682.326 L1776.67 682.326 L1776.11 682.326 L1775.55 682.326 L1774.99 682.326 L1774.43 682.326 L1773.88 682.326 L1773.32 682.326 L1772.76 682.326 L1772.2 682.326 L1771.64 682.326 L1771.08 682.326 L1770.52 682.326 L1769.96 682.326 L1769.4 682.326 L1768.84 682.326 L1768.28 682.326 L1767.72 682.326 L1767.16 682.326 L1766.61 682.326 L1766.05 682.326 L1765.49 682.326 L1764.93 682.326 L1764.37 682.326 L1763.81 682.326 L1763.25 682.326 L1762.69 682.326 L1762.13 682.326 L1761.57 682.326 L1761.01 682.326 L1760.45 682.326 L1759.89 682.326 L1759.34 682.326 L1758.78 682.326 L1758.22 682.326 L1757.66 682.326 L1757.1 682.326 L1756.54 682.326 L1755.98 682.326 L1755.42 682.326 L1754.86 682.326 L1754.3 682.326 L1753.74 682.326 L1753.18 682.326 L1752.62 682.326 L1752.06 682.326 L1751.51 682.326 L1750.95 682.326 L1750.39 682.326 L1749.83 682.326 L1749.27 682.326 L1748.71 682.326 L1748.15 682.326 L1747.59 682.326 L1747.03 682.326 L1746.47 682.326 L1745.91 682.326 L1745.35 682.326 L1744.79 682.326 L1744.24 682.326 L1743.68 682.326 L1743.12 682.326 L1742.56 682.326 L1742 682.326 L1741.44 682.326 L1740.88 682.326 L1740.32 682.326 L1739.76 682.326 L1739.2 682.326 L1738.64 682.326 L1738.08 682.326 L1737.52 682.326 L1736.97 682.326 L1736.41 682.326 L1735.85 682.326 L1735.29 682.326 L1734.73 682.326 L1734.17 682.326 L1733.61 682.326 L1733.05 682.326 L1732.49 682.326 L1731.93 682.326 L1731.37 682.326 L1730.81 682.326 L1730.25 682.326 L1729.69 682.326 L1729.14 682.326 L1728.58 682.326 L1728.02 682.326 L1727.46 682.326 L1726.9 682.326 L1726.34 682.326 L1725.78 682.326 L1725.22 682.326 L1724.66 682.326 L1724.1 682.326 L1723.54 682.326 L1722.98 682.326 L1722.42 682.326 L1721.87 682.326 L1721.31 682.326 L1720.75 682.326 L1720.19 682.326 L1719.63 682.326 L1719.07 682.326 L1718.51 682.326 L1717.95 682.326 L1717.39 682.326 L1716.83 682.326 L1716.27 682.326 L1715.71 682.326 L1715.15 682.326 L1714.6 682.326 L1714.04 682.326 L1713.48 682.326 L1712.92 682.326 L1712.36 682.326 L1711.8 682.326 L1711.24 682.326 L1710.68 682.326 L1710.12 682.326 L1709.56 682.326 L1709 682.326 L1708.44 682.326 L1707.88 682.326 L1707.32 682.326 L1706.77 682.326 L1706.21 682.326 L1705.65 682.326 L1705.09 682.326 L1704.53 682.326 L1703.97 682.326 L1703.41 682.326 L1702.85 682.326 L1702.29 682.326 L1701.73 682.326 L1701.17 682.326 L1700.61 682.326 L1700.05 682.326 L1699.5 682.326 L1698.94 682.326 L1698.38 682.326 L1697.82 682.326 L1697.26 682.326 L1696.7 682.326 L1696.14 682.326 L1695.58 682.326 L1695.02 682.326 L1694.46 682.326 L1693.9 682.326 L1693.34 682.326 L1692.78 682.326 L1692.23 682.326 L1691.67 682.326 L1691.11 682.326 L1690.55 682.326 L1689.99 682.326 L1689.43 682.326 L1688.87 682.326 L1688.31 682.326 L1687.75 682.326 L1687.19 682.326 L1686.63 682.326 L1686.07 682.326 L1685.51 682.326 L1684.95 682.326 L1684.4 682.326 L1683.84 682.326 L1683.28 682.326 L1682.72 682.326 L1682.16 682.326 L1681.6 682.326 L1681.04 682.326 L1680.48 682.326 L1679.92 682.326 L1679.36 682.326 L1678.8 682.326 L1678.24 682.326 L1677.68 682.326 L1677.13 682.326 L1676.57 682.326 L1676.01 682.326 L1675.45 682.326 L1674.89 682.326 L1674.33 682.326 L1673.77 682.326 L1673.21 682.326 L1672.65 682.326 L1672.09 682.326 L1671.53 682.326 L1670.97 682.326 L1670.41 682.326 L1669.85 682.326 L1669.3 682.326 L1668.74 682.326 L1668.18 682.326 L1667.62 682.326 L1667.06 682.326 L1666.5 682.326 L1665.94 682.326 L1665.38 682.326 L1664.82 682.326 L1664.26 682.326 L1663.7 682.326 L1663.14 682.326 L1662.58 682.326 L1662.03 682.326 L1661.47 682.326 L1660.91 682.326 L1660.35 682.326 L1659.79 682.326 L1659.23 682.326 L1658.67 682.326 L1658.11 682.326 L1657.55 682.326 L1656.99 682.326 L1656.43 682.326 L1655.87 682.326 L1655.31 682.326 L1654.76 682.326 L1654.2 682.326 L1653.64 682.326 L1653.08 682.326 L1652.52 682.326 L1651.96 682.326 L1651.4 682.326 L1650.84 682.326 L1650.28 682.326 L1649.72 682.326 L1649.16 682.326 L1648.6 682.326 L1648.04 682.326 L1647.48 682.326 L1646.93 682.326 L1646.37 682.326 L1645.81 682.326 L1645.25 682.326 L1644.69 682.326 L1644.13 682.326 L1643.57 682.326 L1643.01 682.326 L1642.45 682.326 L1641.89 682.326 L1641.33 682.326 L1640.77 682.326 L1640.21 682.326 L1639.66 682.326 L1639.1 682.326 L1638.54 682.326 L1637.98 682.326 L1637.42 682.326 L1636.86 682.326 L1636.3 682.326 L1635.74 682.326 L1635.18 682.326 L1634.62 682.326 L1634.06 682.326 L1633.5 682.326 L1632.94 682.326 L1632.39 682.326 L1631.83 682.326 L1631.27 682.326 L1630.71 682.326 L1630.15 682.326 L1629.59 682.326 L1629.03 682.326 L1628.47 682.326 L1627.91 682.326 L1627.35 682.326 L1626.79 682.326 L1626.23 682.326 L1625.67 682.326 L1625.11 682.326 L1624.56 682.326 L1624 682.326 L1623.44 682.326 L1622.88 682.326 L1622.32 682.326 L1621.76 682.326 L1621.2 682.326 L1620.64 682.326 L1620.08 682.326 L1619.52 682.326 L1618.96 682.326 L1618.4 682.326 L1617.84 682.326 L1617.29 682.326 L1616.73 682.326 L1616.17 682.326 L1615.61 682.326 L1615.05 682.326 L1614.49 682.326 L1613.93 682.326 L1613.37 682.326 L1612.81 682.326 L1612.25 682.326 L1611.69 682.326 L1611.13 682.326 L1610.57 682.326 L1610.02 682.326 L1609.46 682.326 L1608.9 682.326 L1608.34 682.326 L1607.78 682.326 L1607.22 682.326 L1606.66 682.326 L1606.1 682.326 L1605.54 682.326 L1604.98 682.326 L1604.42 682.326 L1603.86 682.326 L1603.3 682.326 L1602.74 682.326 L1602.19 682.326 L1601.63 682.326 L1601.07 682.326 L1600.51 682.326 L1599.95 682.326 L1599.39 682.326 L1598.83 682.326 L1598.27 682.326 L1597.71 682.326 L1597.15 682.326 L1596.59 682.326 L1596.03 682.326 L1595.47 682.326 L1594.92 682.326 L1594.36 682.326 L1593.8 682.326 L1593.24 682.326 L1592.68 682.326 L1592.12 682.326 L1591.56 682.326 L1591 682.326 L1590.44 682.326 L1589.88 682.326 L1589.32 682.326 L1588.76 682.326 L1588.2 682.326 L1587.65 682.326 L1587.09 682.326 L1586.53 682.326 L1585.97 682.326 L1585.41 682.326 L1584.85 682.326 L1584.29 682.326 L1583.73 682.326 L1583.17 682.326 L1582.61 682.326 L1582.05 682.326 L1581.49 682.326 L1580.93 682.326 L1580.37 682.326 L1579.82 682.326 L1579.26 682.326 L1578.7 682.326 L1578.14 682.326 L1577.58 682.326 L1577.02 682.326 L1576.46 682.326 L1575.9 682.326 L1575.34 682.326 L1574.78 682.326 L1574.22 682.326 L1573.66 682.326 L1573.1 682.326 L1572.55 682.326 L1571.99 682.326 L1571.43 682.326 L1570.87 682.326 L1570.31 682.326 L1569.75 682.326 L1569.19 682.326 L1568.63 682.326 L1568.07 682.326 L1567.51 682.326 L1566.95 682.326 L1566.39 682.326 L1565.83 682.326 L1565.28 682.326 L1564.72 682.326 L1564.16 682.326 L1563.6 682.326 L1563.04 682.326 L1562.48 682.326 L1561.92 682.326 L1561.36 682.326 L1560.8 682.326 L1560.24 682.326 L1559.68 682.326 L1559.12 682.326 L1558.56 682.326 L1558 682.326 L1557.45 682.326 L1556.89 682.326 L1556.33 682.326 L1555.77 682.326 L1555.21 682.326 L1554.65 682.326 L1554.09 682.326 L1553.53 682.326 L1552.97 682.326 L1552.41 682.326 L1551.85 682.326 L1551.29 682.326 L1550.73 682.326 L1550.18 682.326 L1549.62 682.326 L1549.06 682.326 L1548.5 682.326 L1547.94 682.326 L1547.38 682.326 L1546.82 682.326 L1546.26 682.326 L1545.7 682.326 L1545.14 682.326 L1544.58 682.326 L1544.02 682.326 L1543.46 682.326 L1542.9 682.326 L1542.35 682.326 L1541.79 682.326 L1541.23 682.326 L1540.67 682.326 L1540.11 682.326 L1539.55 682.326 L1538.99 682.326 L1538.43 682.326 L1537.87 682.326 L1537.31 682.326 L1536.75 682.326 L1536.19 682.326 L1535.63 682.326 L1535.08 682.326 L1534.52 682.326 L1533.96 682.326 L1533.4 682.326 L1532.84 682.326 L1532.28 682.326 L1531.72 682.326 L1531.16 682.326 L1530.6 682.326 L1530.04 682.326 L1529.48 682.326 L1528.92 682.326 L1528.36 682.326 L1527.81 682.326 L1527.25 682.326 L1526.69 682.326 L1526.13 682.326 L1525.57 682.326 L1525.01 682.326 L1524.45 682.326 L1523.89 682.326 L1523.33 682.326 L1522.77 682.326 L1522.21 682.326 L1521.65 682.326 L1521.09 682.326 L1520.53 682.326 L1519.98 682.326 L1519.42 682.326 L1518.86 682.326 L1518.3 682.326 L1517.74 682.326 L1517.18 682.326 L1516.62 682.326 L1516.06 682.326 L1515.5 682.326 L1514.94 682.326 L1514.38 682.326 L1513.82 682.326 L1513.26 682.326 L1512.71 682.326 L1512.15 682.326 L1511.59 682.326 L1511.03 682.326 L1510.47 682.326 L1509.91 682.326 L1509.35 682.326 L1508.79 682.326 L1508.23 682.326 L1507.67 682.326 L1507.11 682.326 L1506.55 682.326 L1505.99 682.326 L1505.44 682.326 L1504.88 682.326 L1504.32 682.326 L1503.76 682.326 L1503.2 682.326 L1502.64 682.326 L1502.08 682.326 L1501.52 682.326 L1500.96 682.326 L1500.4 682.326 L1499.84 682.326 L1499.28 682.326 L1498.72 682.326 L1498.16 682.326 L1497.61 682.326 L1497.05 682.326 L1496.49 682.326 L1495.93 682.326 L1495.37 682.326 L1494.81 682.326 L1494.25 682.326 L1493.69 682.326 L1493.13 682.326 L1492.57 682.326 L1492.01 682.326 L1491.45 682.326 L1490.89 682.326 L1490.34 682.326 L1489.78 682.326 L1489.22 682.326 L1488.66 682.326 L1488.1 682.326 L1487.54 682.326 L1486.98 682.326 L1486.42 682.326 L1485.86 682.326 L1485.3 682.326 L1484.74 682.326 L1484.18 682.326 L1483.62 682.326 L1483.07 682.326 L1482.51 682.326 L1481.95 682.326 L1481.39 682.326 L1480.83 682.326 L1480.27 682.326 L1479.71 682.326 L1479.15 682.326 L1478.59 682.326 L1478.03 682.326 L1477.47 682.326 L1476.91 682.326 L1476.35 682.326 L1475.79 682.326 L1475.24 682.326 L1474.68 682.326 L1474.12 682.326 L1473.56 682.326 L1473 682.326 L1472.44 682.326 L1471.88 682.326 L1471.32 682.326 L1470.76 682.326 L1470.2 682.326 L1469.64 682.326 L1469.08 682.326 L1468.52 682.326 L1467.97 682.326 L1467.41 682.326 L1466.85 682.326 L1466.29 682.326 L1465.73 682.326 L1465.17 682.326 L1464.61 682.326 L1464.05 682.326 L1463.49 682.326 L1462.93 682.326 L1462.37 682.326 L1461.81 682.326 L1461.25 682.326 L1460.7 682.326 L1460.14 682.326 L1459.58 682.326 L1459.02 682.326 L1458.46 682.326 L1457.9 682.326 L1457.34 682.326 L1456.78 682.326 L1456.22 682.326 L1455.66 682.326 L1455.1 682.326 L1454.54 682.326 L1453.98 682.326 L1453.42 682.326 L1452.87 682.326 L1452.31 682.326 L1451.75 682.326 L1451.19 682.326 L1450.63 682.326 L1450.07 682.326 L1449.51 682.326 L1448.95 682.326 L1448.39 682.326 L1447.83 682.326 L1447.27 682.326 L1446.71 682.326 L1446.15 682.326 L1445.6 682.326 L1445.04 682.326 L1444.48 682.326 L1443.92 682.326 L1443.36 682.326 L1442.8 682.326 L1442.24 682.326 L1441.68 682.326 L1441.12 682.326 L1440.56 682.326 L1440 682.326 L1439.44 682.326 L1438.88 682.326 L1438.33 682.326 L1437.77 682.326 L1437.21 682.326 L1436.65 682.326 L1436.09 682.326 L1435.53 682.326 L1434.97 682.326 L1434.41 682.326 L1433.85 682.326 L1433.29 682.326 L1432.73 682.326 L1432.17 682.326 L1431.61 682.326 L1431.05 682.326 L1430.5 682.326 L1429.94 682.326 L1429.38 682.326 L1428.82 682.326 L1428.26 682.326 L1427.7 682.326 L1427.14 682.326 L1426.58 682.326 L1426.02 682.326 L1425.46 682.326 L1424.9 682.326 L1424.34 682.326 L1423.78 682.326 L1423.23 682.326 L1422.67 682.326 L1422.11 682.326 L1421.55 682.326 L1420.99 682.326 L1420.43 682.326 L1419.87 682.326 L1419.31 682.326 L1418.75 682.326 L1418.19 682.326 L1417.63 682.326 L1417.07 682.326 L1416.51 682.326 L1415.95 682.326 L1415.4 682.326 L1414.84 682.326 L1414.28 682.326 L1413.72 682.326 L1413.16 682.326 L1412.6 682.326 L1412.04 682.326 L1411.48 682.326 L1410.92 682.326 L1410.36 682.326 L1409.8 682.326 L1409.24 682.326 L1408.68 682.326 L1408.13 682.326 L1407.57 682.326 L1407.01 682.326 L1406.45 682.326 L1405.89 682.326 L1405.33 682.326 L1404.77 682.326 L1404.21 682.326 L1403.65 682.326 L1403.09 682.326 L1402.53 682.326 L1401.97 682.326 L1401.41 682.326 L1400.86 682.326 L1400.3 682.326 L1399.74 682.326 L1399.18 682.326 L1398.62 682.326 L1398.06 682.326 L1397.5 682.326 L1396.94 682.326 L1396.38 682.326 L1395.82 682.326 L1395.26 682.326 L1394.7 682.326 L1394.14 682.326 L1393.58 682.326 L1393.03 682.326 L1392.47 682.326 L1391.91 682.326 L1391.35 682.326 L1390.79 682.326 L1390.23 682.326 L1389.67 682.326 L1389.11 682.326 L1388.55 682.326 L1387.99 682.326 L1387.43 682.326 L1386.87 682.326 L1386.31 682.326 L1385.76 682.326 L1385.2 682.326 L1384.64 682.326 L1384.08 682.326 L1383.52 682.326 L1382.96 682.326 L1382.4 682.326 L1381.84 682.326 L1381.28 682.326 L1380.72 682.326 L1380.16 682.326 L1379.6 682.326 L1379.04 682.326 L1378.49 682.326 L1377.93 682.326 L1377.37 682.326 L1376.81 682.326 L1376.25 682.326 L1375.69 682.326 L1375.13 682.326 L1374.57 682.326 L1374.01 682.326 L1373.45 682.326 L1372.89 682.326 L1372.33 682.326 L1371.77 682.326 L1371.21 682.326 L1370.66 682.326 L1370.1 682.326 L1369.54 682.326 L1368.98 682.326 L1368.42 682.326 L1367.86 682.326 L1367.3 682.326 L1366.74 682.326 L1366.18 682.326 L1365.62 682.326 L1365.06 682.326 L1364.5 682.326 L1363.94 682.326 L1363.39 682.326 L1362.83 682.326 L1362.27 682.326 L1361.71 682.326 L1361.15 682.326 L1360.59 682.326 L1360.03 682.326 L1359.47 682.326 L1358.91 682.326 L1358.35 682.326 L1357.79 682.326 L1357.23 682.326 L1356.67 682.326 L1356.12 682.326 L1355.56 682.326 L1355 682.326 L1354.44 682.326 L1353.88 682.326 L1353.32 682.326 L1352.76 682.326 L1352.2 682.326 L1351.64 682.326 L1351.08 682.326 L1350.52 682.326 L1349.96 682.326 L1349.4 682.326 L1348.84 682.326 L1348.29 682.326 L1347.73 682.326 L1347.17 682.326 L1346.61 682.326 L1346.05 682.326 L1345.49 682.326 L1344.93 682.326 L1344.37 682.326 L1343.81 682.326 L1343.25 682.326 L1342.69 682.326 L1342.13 682.326 L1341.57 682.326 L1341.02 682.326 L1340.46 682.326 L1339.9 682.326 L1339.34 682.326 L1338.78 682.326 L1338.22 682.326 L1337.66 682.326 L1337.1 682.326 L1336.54 682.326 L1335.98 682.326 L1335.42 682.326 L1334.86 682.326 L1334.3 682.326 L1333.75 682.326 L1333.19 682.326 L1332.63 682.326 L1332.07 682.326 L1331.51 682.326 L1330.95 682.326 L1330.39 682.326 L1329.83 682.326 L1329.27 682.326 L1328.71 682.326 L1328.15 682.326 L1327.59 682.326 L1327.03 682.326 L1326.47 682.326 L1325.92 682.326 L1325.36 682.326 L1324.8 682.326 L1324.24 682.326 L1323.68 682.326 L1323.12 682.326 L1322.56 682.326 L1322 682.326 L1321.44 682.326 L1320.88 682.326 L1320.32 682.326 L1319.76 682.326 L1319.2 682.326 L1318.65 682.326 L1318.09 682.326 L1317.53 682.326 L1316.97 682.326 L1316.41 682.326 L1315.85 682.326 L1315.29 682.326 L1314.73 682.326 L1314.17 682.326 L1313.61 682.326 L1313.05 682.326 L1312.49 682.326 L1311.93 682.326 L1311.38 682.326 L1310.82 682.326 L1310.26 682.326 L1309.7 682.326 L1309.14 682.326 L1308.58 682.326 L1308.02 682.326 L1307.46 682.326 L1306.9 682.326 L1306.34 682.326 L1305.78 682.326 L1305.22 682.326 L1304.66 682.326 L1304.1 682.326 L1303.55 682.326 L1302.99 682.326 L1302.43 682.326 L1301.87 682.326 L1301.31 682.326 L1300.75 682.326 L1300.19 682.326 L1299.63 682.326 L1299.07 682.326 L1298.51 682.326 L1297.95 682.326 L1297.39 682.326 L1296.83 682.326 L1296.28 682.326 L1295.72 682.326 L1295.16 682.326 L1294.6 682.326 L1294.04 682.326 L1293.48 682.326 L1292.92 682.326 L1292.36 682.326 L1291.8 682.326 L1291.24 682.326 L1290.68 682.326 L1290.12 682.326 L1289.56 682.326 L1289 682.326 L1288.45 682.326 L1287.89 682.326 L1287.33 682.326 L1286.77 682.326 L1286.21 682.326 L1285.65 682.326 L1285.09 682.326 L1284.53 682.326 L1283.97 682.326 L1283.41 682.326 L1282.85 682.326 L1282.29 682.326 L1281.73 682.326 L1281.18 682.326 L1280.62 682.326 L1280.06 682.326 L1279.5 682.326 L1278.94 682.326 L1278.38 682.326 L1277.82 682.326 L1277.26 682.326 L1276.7 682.326 L1276.14 682.326 L1275.58 682.326 L1275.02 682.326 L1274.46 682.326 L1273.91 682.326 L1273.35 682.326 L1272.79 682.326 L1272.23 682.326 L1271.67 682.326 L1271.11 682.326 L1270.55 682.326 L1269.99 682.326 L1269.43 682.326 L1268.87 682.326 L1268.31 682.326 L1267.75 682.326 L1267.19 682.326 L1266.63 682.326 L1266.08 682.326 L1265.52 682.326 L1264.96 682.326 L1264.4 682.326 L1263.84 682.326 L1263.28 682.326 L1262.72 682.326 L1262.16 682.326 L1261.6 682.326 L1261.04 682.326 L1260.48 682.326 L1259.92 682.326 L1259.36 682.326 L1258.81 682.326 L1258.25 682.326 L1257.69 682.326 L1257.13 682.326 L1256.57 682.326 L1256.01 682.326 L1255.45 682.326 L1254.89 682.326 L1254.33 682.326 L1253.77 682.326 L1253.21 682.326 L1252.65 682.326 L1252.09 682.326 L1251.54 682.326 L1250.98 682.326 L1250.42 682.326 L1249.86 682.326 L1249.3 682.326 L1248.74 682.326 L1248.18 682.326 L1247.62 682.326 L1247.06 682.326 L1246.5 682.326 L1245.94 682.326 L1245.38 682.326 L1244.82 682.326 L1244.26 682.326 L1243.71 682.326 L1243.15 682.326 L1242.59 682.326 L1242.03 682.326 L1241.47 682.326 L1240.91 682.326 L1240.35 682.326 L1239.79 682.326 L1239.23 682.326 L1238.67 682.326 L1238.11 682.326 L1237.55 682.326 L1236.99 682.326 L1236.44 682.326 L1235.88 682.326 L1235.32 682.326 L1234.76 682.326 L1234.2 682.326 L1233.64 682.326 L1233.08 682.326 L1232.52 682.326 L1231.96 682.326 L1231.4 682.326 L1230.84 682.326 L1230.28 682.326 L1229.72 682.326 L1229.17 682.326 L1228.61 682.326 L1228.05 682.326 L1227.49 682.326 L1226.93 682.326 L1226.37 682.326 L1225.81 682.326 L1225.25 682.326 L1224.69 682.326 L1224.13 682.326 L1223.57 682.326 L1223.01 682.326 L1222.45 682.326 L1221.89 682.326 L1221.34 682.326 L1220.78 682.326 L1220.22 682.326 L1219.66 682.326 L1219.1 682.326 L1218.54 682.326 L1217.98 682.326 L1217.42 682.326 L1216.86 682.326 L1216.3 682.326 L1215.74 682.326 L1215.18 682.326 L1214.62 682.326 L1214.07 682.326 L1213.51 682.326 L1212.95 682.326 L1212.39 682.326 L1211.83 682.326 L1211.27 682.326 L1210.71 682.326 L1210.15 682.326 L1209.59 682.326 L1209.03 682.326 L1208.47 682.326 L1207.91 682.326 L1207.35 682.326 L1206.8 682.326 L1206.24 682.326 L1205.68 682.326 L1205.12 682.326 L1204.56 682.326 L1204 682.326 L1203.44 682.326 L1202.88 682.326 L1202.32 682.326 L1201.76 682.326 L1201.2 682.326 L1200.64 682.326 L1200.08 682.326 L1199.52 682.326 L1198.97 682.326 L1198.41 682.326 L1197.85 682.326 L1197.29 682.326 L1196.73 682.326 L1196.17 682.326 L1195.61 682.326 L1195.05 682.326 L1194.49 682.326 L1193.93 682.326 L1193.37 682.326 L1192.81 682.326 L1192.25 682.326 L1191.7 682.326 L1191.14 682.326 L1190.58 682.326 L1190.02 682.326 L1189.46 682.326 L1188.9 682.326 L1188.34 682.326 L1187.78 682.326 L1187.22 682.326 L1186.66 682.326 L1186.1 682.326 L1185.54 682.326 L1184.98 682.326 L1184.43 682.326 L1183.87 682.326 L1183.31 682.326 L1182.75 682.326 L1182.19 682.326 L1181.63 682.326 L1181.07 682.326 L1180.51 682.326 L1179.95 682.326 L1179.39 682.326 L1178.83 682.326 L1178.27 682.326 L1177.71 682.326 L1177.15 682.326 L1176.6 682.326 L1176.04 682.326 L1175.48 682.326 L1174.92 682.326 L1174.36 682.326 L1173.8 682.326 L1173.24 682.326 L1172.68 682.326 L1172.12 682.326 L1171.56 682.326 L1171 682.326 L1170.44 682.326 L1169.88 682.326 L1169.33 682.326 L1168.77 682.326 L1168.21 682.326 L1167.65 682.326 L1167.09 682.326 L1166.53 682.326 L1165.97 682.326 L1165.41 682.326 L1164.85 682.326 L1164.29 682.326 L1163.73 682.326 L1163.17 682.326 L1162.61 682.326 L1162.05 682.326 L1161.5 682.326 L1160.94 682.326 L1160.38 682.326 L1159.82 682.326 L1159.26 682.326 L1158.7 682.326 L1158.14 682.326 L1157.58 682.326 L1157.02 682.326 L1156.46 682.326 L1155.9 682.326 L1155.34 682.326 L1154.78 682.326 L1154.23 682.326 L1153.67 682.326 L1153.11 682.326 L1152.55 682.326 L1151.99 682.326 L1151.43 682.326 L1150.87 682.326 L1150.31 682.326 L1149.75 682.326 L1149.19 682.326 L1148.63 682.326 L1148.07 682.326 L1147.51 682.326 L1146.96 682.326 L1146.4 682.326 L1145.84 682.326 L1145.28 682.326 L1144.72 682.326 L1144.16 682.326 L1143.6 682.326 L1143.04 682.326 L1142.48 682.326 L1141.92 682.326 L1141.36 682.326 L1140.8 682.326 L1140.24 682.326 L1139.68 682.326 L1139.13 682.326 L1138.57 682.326 L1138.01 682.326 L1137.45 682.326 L1136.89 682.326 L1136.33 682.326 L1135.77 682.326 L1135.21 682.326 L1134.65 682.326 L1134.09 682.326 L1133.53 682.326 L1132.97 682.326 L1132.41 682.326 L1131.86 682.326 L1131.3 682.326 L1130.74 682.326 L1130.18 682.326 L1129.62 682.326 L1129.06 682.326 L1128.5 682.326 L1127.94 682.326 L1127.38 682.326 L1126.82 682.326 L1126.26 682.326 L1125.7 682.326 L1125.14 682.326 L1124.59 682.326 L1124.03 682.326 L1123.47 682.326 L1122.91 682.326 L1122.35 682.326 L1121.79 682.326 L1121.23 682.326 L1120.67 682.326 L1120.11 682.326 L1119.55 682.326 L1118.99 682.326 L1118.43 682.326 L1117.87 682.326 L1117.31 682.326 L1116.76 682.326 L1116.2 682.326 L1115.64 682.326 L1115.08 682.326 L1114.52 682.326 L1113.96 682.326 L1113.4 682.326 L1112.84 682.326 L1112.28 682.326 L1111.72 682.326 L1111.16 682.326 L1110.6 682.326 L1110.04 682.326 L1109.49 682.326 L1108.93 682.326 L1108.37 682.326 L1107.81 682.326 L1107.25 682.326 L1106.69 682.326 L1106.13 682.326 L1105.57 682.326 L1105.01 682.326 L1104.45 682.326 L1103.89 682.326 L1103.33 682.326 L1102.77 682.326 L1102.22 682.326 L1101.66 682.326 L1101.1 682.326 L1100.54 682.326 L1099.98 682.326 L1099.42 682.326 L1098.86 682.326 L1098.3 682.326 L1097.74 682.326 L1097.18 682.326 L1096.62 682.326 L1096.06 682.326 L1095.5 682.326 L1094.94 682.326 L1094.39 682.326 L1093.83 682.326 L1093.27 682.326 L1092.71 682.326 L1092.15 682.326 L1091.59 682.326 L1091.03 682.326 L1090.47 682.326 L1089.91 682.326 L1089.35 682.326 L1088.79 682.326 L1088.23 682.326 L1087.67 682.326 L1087.12 682.326 L1086.56 682.326 L1086 682.326 L1085.44 682.326 L1084.88 682.326 L1084.32 682.326 L1083.76 682.326 L1083.2 682.326 L1082.64 682.326 L1082.08 682.326 L1081.52 682.326 L1080.96 682.326 L1080.4 682.326 L1079.85 682.326 L1079.29 682.326 L1078.73 682.326 L1078.17 682.326 L1077.61 682.326 L1077.05 682.326 L1076.49 682.326 L1075.93 682.326 L1075.37 682.326 L1074.81 682.326 L1074.25 682.326 L1073.69 682.326 L1073.13 682.326 L1072.57 682.326 L1072.02 682.326 L1071.46 682.326 L1070.9 682.326 L1070.34 682.326 L1069.78 682.326 L1069.22 682.326 L1068.66 682.326 L1068.1 682.326 L1067.54 682.326 L1066.98 682.326 L1066.42 682.326 L1065.86 682.326 L1065.3 682.326 L1064.75 682.326 L1064.19 682.326 L1063.63 682.326 L1063.07 682.326 L1062.51 682.326 L1061.95 682.326 L1061.39 682.326 L1060.83 682.326 L1060.27 682.326 L1059.71 682.326 L1059.15 682.326 L1058.59 682.326 L1058.03 682.326 L1057.48 682.326 L1056.92 682.326 L1056.36 682.326 L1055.8 682.326 L1055.24 682.326 L1054.68 682.326 L1054.12 682.326 L1053.56 682.326 L1053 682.326 L1052.44 682.326 L1051.88 682.326 L1051.32 682.326 L1050.76 682.326 L1050.2 682.326 L1049.65 682.326 L1049.09 682.326 L1048.53 682.326 L1047.97 682.326 L1047.41 682.326 L1046.85 682.326 L1046.29 682.326 L1045.73 682.326 L1045.17 682.326 L1044.61 682.326 L1044.05 682.326 L1043.49 682.326 L1042.93 682.326 L1042.38 682.326 L1041.82 682.326 L1041.26 682.326 L1040.7 682.326 L1040.14 682.326 L1039.58 682.326 L1039.02 682.326 L1038.46 682.326 L1037.9 682.326 L1037.34 682.326 L1036.78 682.326 L1036.22 682.326 L1035.66 682.326 L1035.1 682.326 L1034.55 682.326 L1033.99 682.326 L1033.43 682.326 L1032.87 682.326 L1032.31 682.326 L1031.75 682.326 L1031.19 682.326 L1030.63 682.326 L1030.07 682.326 L1029.51 682.326 L1028.95 682.326 L1028.39 682.326 L1027.83 682.326 L1027.28 682.326 L1026.72 682.326 L1026.16 682.326 L1025.6 682.326 L1025.04 682.326 L1024.48 682.326 L1023.92 682.326 L1023.36 682.326 L1022.8 682.326 L1022.24 682.326 L1021.68 682.326 L1021.12 682.326 L1020.56 682.326 L1020.01 682.326 L1019.45 682.326 L1018.89 682.326 L1018.33 682.326 L1017.77 682.326 L1017.21 682.326 L1016.65 682.326 L1016.09 682.326 L1015.53 682.326 L1014.97 682.326 L1014.41 682.326 L1013.85 682.326 L1013.29 682.326 L1012.73 682.326 L1012.18 682.326 L1011.62 682.326 L1011.06 682.326 L1010.5 682.326 L1009.94 682.326 L1009.38 682.326 L1008.82 682.326 L1008.26 682.326 L1007.7 682.326 L1007.14 682.326 L1006.58 682.326 L1006.02 682.326 L1005.46 682.326 L1004.91 682.326 L1004.35 682.326 L1003.79 682.326 L1003.23 682.326 L1002.67 682.326 L1002.11 682.326 L1001.55 682.326 L1000.99 682.326 L1000.43 682.326 L999.872 682.326 L999.313 682.326 L998.754 682.326 L998.194 682.326 L997.635 682.326 L997.076 682.326 L996.517 682.326 L995.957 682.326 L995.398 682.326 L994.839 682.326 L994.28 682.326 L993.72 682.326 L993.161 682.326 L992.602 682.326 L992.043 682.326 L991.483 682.326 L990.924 682.326 L990.365 682.326 L989.806 682.326 L989.246 682.326 L988.687 682.326 L988.128 682.326 L987.569 682.326 L987.009 682.326 L986.45 682.326 L985.891 682.326 L985.332 682.326 L984.772 682.326 L984.213 682.326 L983.654 682.326 L983.095 682.326 L982.535 682.326 L981.976 682.326 L981.417 682.326 L980.858 682.326 L980.298 682.326 L979.739 682.326 L979.18 682.326 L978.621 682.326 L978.061 682.326 L977.502 682.326 L976.943 682.326 L976.384 682.326 L975.824 682.326 L975.265 682.326 L974.706 682.326 L974.147 682.326 L973.587 682.326 L973.028 682.326 L972.469 682.326 L971.91 682.326 L971.35 682.326 L970.791 682.326 L970.232 682.326 L969.673 682.326 L969.113 682.326 L968.554 682.326 L967.995 682.326 L967.436 682.326 L966.876 682.326 L966.317 682.326 L965.758 682.326 L965.199 682.326 L964.639 682.326 L964.08 682.326 L963.521 682.326 L962.962 682.326 L962.402 682.326 L961.843 682.326 L961.284 682.326 L960.725 682.326 L960.165 682.326 L959.606 682.326 L959.047 682.326 L958.488 682.326 L957.928 682.326 L957.369 682.326 L956.81 682.326 L956.251 682.326 L955.691 682.326 L955.132 682.326 L954.573 682.326 L954.014 682.326 L953.454 682.326 L952.895 682.326 L952.336 682.326 L951.777 682.326 L951.217 682.326 L950.658 682.326 L950.099 682.326 L949.54 682.326 L948.98 682.326 L948.421 682.326 L947.862 682.326 L947.303 682.326 L946.743 682.326 L946.184 682.326 L945.625 682.326 L945.066 682.326 L944.506 682.326 L943.947 682.326 L943.388 682.326 L942.829 682.326 L942.269 682.326 L941.71 682.326 L941.151 682.326 L940.592 682.326 L940.032 682.326 L939.473 682.326 L938.914 682.326 L938.355 682.326 L937.795 682.326 L937.236 682.326 L936.677 682.326 L936.118 682.326 L935.558 682.326 L934.999 682.326 L934.44 682.326 L933.881 682.326 L933.321 682.326 L932.762 682.326 L932.203 682.326 L931.644 682.326 L931.084 682.326 L930.525 682.326 L929.966 682.326 L929.406 682.326 L928.847 682.326 L928.288 682.326 L927.729 682.326 L927.169 682.326 L926.61 682.326 L926.051 682.326 L925.492 682.326 L924.932 682.326 L924.373 682.326 L923.814 682.326 L923.255 682.326 L922.695 682.326 L922.136 682.326 L921.577 682.326 L921.018 682.326 L920.458 682.326 L919.899 682.326 L919.34 682.326 L918.781 682.326 L918.221 682.326 L917.662 682.326 L917.103 682.326 L916.544 682.326 L915.984 682.326 L915.425 682.326 L914.866 682.326 L914.307 682.326 L913.747 682.326 L913.188 682.326 L912.629 682.326 L912.07 682.326 L911.51 682.326 L910.951 682.326 L910.392 682.326 L909.833 682.326 L909.273 682.326 L908.714 682.326 L908.155 682.326 L907.596 682.326 L907.036 682.326 L906.477 682.326 L905.918 682.326 L905.359 682.326 L904.799 682.326 L904.24 682.326 L903.681 682.326 L903.122 682.326 L902.562 682.326 L902.003 682.326 L901.444 682.326 L900.885 682.326 L900.325 682.326 L899.766 682.326 L899.207 682.326 L898.648 682.326 L898.088 682.326 L897.529 682.326 L896.97 682.326 L896.411 682.326 L895.851 682.326 L895.292 682.326 L894.733 682.326 L894.174 682.326 L893.614 682.326 L893.055 682.326 L892.496 682.326 L891.937 682.326 L891.377 682.326 L890.818 682.326 L890.259 682.326 L889.7 682.326 L889.14 682.326 L888.581 682.326 L888.022 682.326 L887.463 682.326 L886.903 682.326 L886.344 682.326 L885.785 682.326 L885.226 682.326 L884.666 682.326 L884.107 682.326 L883.548 682.326 L882.989 682.326 L882.429 682.326 L881.87 682.326 L881.311 682.326 L880.752 682.326 L880.192 682.326 L879.633 682.326 L879.074 682.326 L878.515 682.326 L877.955 682.326 L877.396 682.326 L876.837 682.326 L876.278 682.326 L875.718 682.326 L875.159 682.326 L874.6 682.326 L874.041 682.326 L873.481 682.326 L872.922 682.326 L872.363 682.326 L871.804 682.326 L871.244 682.326 L870.685 682.326 L870.126 682.326 L869.567 682.326 L869.007 682.326 L868.448 682.326 L867.889 682.326 L867.33 682.326 L866.77 682.326 L866.211 682.326 L865.652 682.326 L865.093 682.326 L864.533 682.326 L863.974 682.326 L863.415 682.326 L862.856 682.326 L862.296 682.326 L861.737 682.326 L861.178 682.326 L860.619 682.326 L860.059 682.326 L859.5 682.326 L858.941 682.326 L858.382 682.326 L857.822 682.326 L857.263 682.326 L856.704 682.326 L856.145 682.326 L855.585 682.326 L855.026 682.326 L854.467 682.326 L853.908 682.326 L853.348 682.326 L852.789 682.326 L852.23 682.326 L851.671 682.326 L851.111 682.326 L850.552 682.326 L849.993 682.326 L849.434 682.326 L848.874 682.326 L848.315 682.326 L847.756 682.326 L847.197 682.326 L846.637 682.326 L846.078 682.326 L845.519 682.326 L844.96 682.326 L844.4 682.326 L843.841 682.326 L843.282 682.326 L842.723 682.326 L842.163 682.326 L841.604 682.326 L841.045 682.326 L840.486 682.326 L839.926 682.326 L839.367 682.326 L838.808 682.326 L838.249 682.326 L837.689 682.326 L837.13 682.326 L836.571 682.326 L836.012 682.326 L835.452 682.326 L834.893 682.326 L834.334 682.326 L833.775 682.326 L833.215 682.326 L832.656 682.326 L832.097 682.326 L831.538 682.326 L830.978 682.326 L830.419 682.326 L829.86 682.326 L829.301 682.326 L828.741 682.326 L828.182 682.326 L827.623 682.326 L827.064 682.326 L826.504 682.326 L825.945 682.326 L825.386 682.326 L824.827 682.326 L824.267 682.326 L823.708 682.326 L823.149 682.326 L822.59 682.326 L822.03 682.326 L821.471 682.326 L820.912 682.326 L820.353 682.326 L819.793 682.326 L819.234 682.326 L818.675 682.326 L818.116 682.326 L817.556 682.326 L816.997 682.326 L816.438 682.326 L815.879 682.326 L815.319 682.326 L814.76 682.326 L814.201 682.326 L813.642 682.326 L813.082 682.326 L812.523 682.326 L811.964 682.326 L811.405 682.326 L810.845 682.326 L810.286 682.326 L809.727 682.326 L809.168 682.326 L808.608 682.326 L808.049 682.326 L807.49 682.326 L806.931 682.326 L806.371 682.326 L805.812 682.326 L805.253 682.326 L804.693 682.326 L804.134 682.326 L803.575 682.326 L803.016 682.326 L802.456 682.326 L801.897 682.326 L801.338 682.326 L800.779 682.326 L800.219 682.326 L799.66 682.326 L799.101 682.326 L798.542 682.326 L797.982 682.326 L797.423 682.326 L796.864 682.326 L796.305 682.326 L795.745 682.326 L795.186 682.326 L794.627 682.326 L794.068 682.326 L793.508 682.326 L792.949 682.326 L792.39 682.326 L791.831 682.326 L791.271 682.326 L790.712 682.326 L790.153 682.326 L789.594 682.326 L789.034 682.326 L788.475 682.326 L787.916 682.326 L787.357 682.326 L786.797 682.326 L786.238 682.326 L785.679 682.326 L785.12 682.326 L784.56 682.326 L784.001 682.326 L783.442 682.326 L782.883 682.326 L782.323 682.326 L781.764 682.326 L781.205 682.326 L780.646 682.326 L780.086 682.326 L779.527 682.326 L778.968 682.326 L778.409 682.326 L777.849 682.326 L777.29 682.326 L776.731 682.326 L776.172 682.326 L775.612 682.326 L775.053 682.326 L774.494 682.326 L773.935 682.326 L773.375 682.326 L772.816 682.326 L772.257 682.326 L771.698 682.326 L771.138 682.326 L770.579 682.326 L770.02 682.326 L769.461 682.326 L768.901 682.326 L768.342 682.326 L767.783 682.326 L767.224 682.326 L766.664 682.326 L766.105 682.326 L765.546 682.326 L764.987 682.326 L764.427 682.326 L763.868 682.326 L763.309 682.326 L762.75 682.326 L762.19 682.326 L761.631 682.326 L761.072 682.326 L760.513 682.326 L759.953 682.326 L759.394 682.326 L758.835 682.326 L758.276 682.326 L757.716 682.326 L757.157 682.326 L756.598 682.326 L756.039 682.326 L755.479 682.326 L754.92 682.326 L754.361 682.326 L753.802 682.326 L753.242 682.326 L752.683 682.326 L752.124 682.326 L751.565 682.326 L751.005 682.326 L750.446 682.326 L749.887 682.326 L749.328 682.326 L748.768 682.326 L748.209 682.326 L747.65 682.326 L747.091 682.326 L746.531 682.326 L745.972 682.326 L745.413 682.326 L744.854 682.326 L744.294 682.326 L743.735 682.326 L743.176 682.326 L742.617 682.326 L742.057 682.326 L741.498 682.326 L740.939 682.326 L740.38 682.326 L739.82 682.326 L739.261 682.326 L738.702 682.326 L738.143 682.326 L737.583 682.326 L737.024 682.326 L736.465 682.326 L735.906 682.326 L735.346 682.326 L734.787 682.326 L734.228 682.326 L733.669 682.326 L733.109 682.326 L732.55 682.326 L731.991 682.326 L731.432 682.326 L730.872 682.326 L730.313 682.326 L729.754 682.326 L729.195 682.326 L728.635 682.326 L728.076 682.326 L727.517 682.326 L726.958 682.326 L726.398 682.326 L725.839 682.326 L725.28 682.326 L724.721 682.326 L724.161 682.326 L723.602 682.326 L723.043 682.326 L722.484 682.326 L721.924 682.326 L721.365 682.326 L720.806 682.326 L720.247 682.326  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip323)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.188 720.806,683.188 721.365,683.188 721.924,683.188 722.484,683.188 723.043,683.188 723.602,683.188 724.161,683.188 724.721,683.188 725.28,683.188 725.839,683.188 726.398,683.188 726.958,683.188 727.517,683.188 728.076,683.188 728.635,683.188 729.195,683.188 729.754,683.188 730.313,683.188 730.872,683.188 731.432,683.188 731.991,683.188 732.55,683.188 733.109,683.188 733.669,683.188 734.228,683.188 734.787,683.188 735.346,683.188 735.906,683.188 736.465,683.188 737.024,683.188 737.583,683.188 738.143,683.188 738.702,683.188 739.261,683.188 739.82,683.188 740.38,683.188 740.939,683.188 741.498,683.188 742.057,683.188 742.617,683.188 743.176,683.188 743.735,683.188 744.294,683.188 744.854,683.188 745.413,683.188 745.972,683.188 746.531,683.188 747.091,683.188 747.65,683.188 748.209,683.188 748.768,683.188 749.328,683.188 749.887,683.188 750.446,683.188 751.005,683.188 751.565,683.188 752.124,683.188 752.683,683.188 753.242,683.188 753.802,683.188 754.361,683.188 754.92,683.188 755.479,683.188 756.039,683.188 756.598,683.188 757.157,683.188 757.716,683.188 758.276,683.188 758.835,683.188 759.394,683.188 759.953,683.188 760.513,683.188 761.072,683.188 761.631,683.188 762.19,683.188 762.75,683.188 763.309,683.188 763.868,683.188 764.427,683.188 764.987,683.188 765.546,683.188 766.105,683.188 766.664,683.188 767.224,683.188 767.783,683.188 768.342,683.188 768.901,683.188 769.461,683.188 770.02,683.188 770.579,683.188 771.138,683.188 771.698,683.188 772.257,683.188 772.816,683.188 773.375,683.188 773.935,683.188 774.494,683.188 775.053,683.188 775.612,683.188 776.172,683.188 776.731,683.188 777.29,683.188 777.849,683.188 778.409,683.188 778.968,683.188 779.527,683.188 780.086,683.188 780.646,683.188 781.205,683.188 781.764,683.188 782.323,683.188 782.883,683.188 783.442,683.188 784.001,683.188 784.56,683.188 785.12,683.188 785.679,683.188 786.238,683.188 786.797,683.188 787.357,683.188 787.916,683.188 788.475,683.188 789.034,683.188 789.594,683.188 790.153,683.188 790.712,683.188 791.271,683.188 791.831,683.188 792.39,683.188 792.949,683.188 793.508,683.188 794.068,683.188 794.627,683.188 795.186,683.188 795.745,683.188 796.305,683.188 796.864,683.188 797.423,683.188 797.982,683.188 798.542,683.188 799.101,683.188 799.66,683.188 800.219,683.188 800.779,683.188 801.338,683.188 801.897,683.188 802.456,683.188 803.016,683.188 803.575,683.188 804.134,683.188 804.693,683.188 805.253,683.188 805.812,683.188 806.371,683.188 806.931,683.188 807.49,683.188 808.049,683.188 808.608,683.188 809.168,683.188 809.727,683.188 810.286,683.188 810.845,683.188 811.405,683.188 811.964,683.188 812.523,683.188 813.082,683.188 813.642,683.188 814.201,683.188 814.76,683.188 815.319,683.188 815.879,683.188 816.438,683.188 816.997,683.188 817.556,683.188 818.116,683.188 818.675,683.188 819.234,683.188 819.793,683.188 820.353,683.188 820.912,683.188 821.471,683.188 822.03,683.188 822.59,683.188 823.149,683.188 823.708,683.188 824.267,683.188 824.827,683.188 825.386,683.188 825.945,683.188 826.504,683.188 827.064,683.188 827.623,683.188 828.182,683.188 828.741,683.188 829.301,683.188 829.86,683.188 830.419,683.188 830.978,683.188 831.538,683.188 832.097,683.188 832.656,683.188 833.215,683.188 833.775,683.188 834.334,683.188 834.893,683.188 835.452,683.188 836.012,683.188 836.571,683.188 837.13,683.188 837.689,683.188 838.249,683.188 838.808,683.188 839.367,683.188 839.926,683.188 840.486,683.188 841.045,683.188 841.604,683.188 842.163,683.188 842.723,683.188 843.282,683.188 843.841,683.188 844.4,683.188 844.96,683.188 845.519,683.188 846.078,683.188 846.637,683.188 847.197,683.188 847.756,683.188 848.315,683.188 848.874,683.188 849.434,683.188 849.993,683.188 850.552,683.188 851.111,683.188 851.671,683.188 852.23,683.188 852.789,683.188 853.348,683.188 853.908,683.188 854.467,683.188 855.026,683.188 855.585,683.188 856.145,683.188 856.704,683.188 857.263,683.188 857.822,683.188 858.382,683.188 858.941,683.188 859.5,683.188 860.059,683.188 860.619,683.188 861.178,683.188 861.737,683.188 862.296,683.188 862.856,683.188 863.415,683.188 863.974,683.188 864.533,683.188 865.093,683.188 865.652,683.188 866.211,683.188 866.77,683.188 867.33,683.188 867.889,683.188 868.448,683.188 869.007,683.188 869.567,683.188 870.126,683.188 870.685,683.188 871.244,683.188 871.804,683.188 872.363,683.188 872.922,683.188 873.481,683.188 874.041,683.188 874.6,683.188 875.159,683.188 875.718,683.188 876.278,683.188 876.837,683.188 877.396,683.188 877.955,683.188 878.515,683.188 879.074,683.188 879.633,683.188 880.192,683.188 880.752,683.188 881.311,683.188 881.87,683.188 882.429,683.188 882.989,683.188 883.548,683.188 884.107,683.188 884.666,683.188 885.226,683.188 885.785,683.188 886.344,683.188 886.903,683.188 887.463,683.188 888.022,683.188 888.581,683.188 889.14,683.188 889.7,683.188 890.259,683.188 890.818,683.188 891.377,683.188 891.937,683.188 892.496,683.188 893.055,683.188 893.614,683.188 894.174,683.188 894.733,683.188 895.292,683.188 895.851,683.188 896.411,683.188 896.97,683.188 897.529,683.188 898.088,683.188 898.648,683.188 899.207,683.188 899.766,683.188 900.325,683.188 900.885,683.188 901.444,683.188 902.003,683.188 902.562,683.188 903.122,683.188 903.681,683.188 904.24,683.188 904.799,683.188 905.359,683.188 905.918,683.188 906.477,683.188 907.036,683.188 907.596,683.188 908.155,683.188 908.714,683.188 909.273,683.188 909.833,683.188 910.392,683.188 910.951,683.188 911.51,683.188 912.07,683.188 912.629,683.188 913.188,683.188 913.747,683.188 914.307,683.188 914.866,683.188 915.425,683.188 915.984,683.188 916.544,683.188 917.103,683.188 917.662,683.188 918.221,683.188 918.781,683.188 919.34,683.188 919.899,683.188 920.458,683.188 921.018,683.188 921.577,683.188 922.136,683.188 922.695,683.188 923.255,683.188 923.814,683.188 924.373,683.188 924.932,683.188 925.492,683.188 926.051,683.188 926.61,683.188 927.169,683.188 927.729,683.188 928.288,683.188 928.847,683.188 929.406,683.188 929.966,683.188 930.525,683.188 931.084,683.188 931.644,683.188 932.203,683.188 932.762,683.188 933.321,683.188 933.881,683.188 934.44,683.188 934.999,683.188 935.558,683.188 936.118,683.188 936.677,683.188 937.236,683.188 937.795,683.188 938.355,683.188 938.914,683.188 939.473,683.188 940.032,683.188 940.592,683.188 941.151,683.188 941.71,683.188 942.269,683.188 942.829,683.188 943.388,683.188 943.947,683.188 944.506,683.188 945.066,683.188 945.625,683.188 946.184,683.188 946.743,683.188 947.303,683.188 947.862,683.188 948.421,683.188 948.98,683.188 949.54,683.188 950.099,683.188 950.658,683.188 951.217,683.188 951.777,683.188 952.336,683.188 952.895,683.188 953.454,683.188 954.014,683.188 954.573,683.188 955.132,683.188 955.691,683.188 956.251,683.188 956.81,683.188 957.369,683.188 957.928,683.188 958.488,683.188 959.047,683.188 959.606,683.188 960.165,683.188 960.725,683.188 961.284,683.188 961.843,683.188 962.402,683.188 962.962,683.188 963.521,683.188 964.08,683.188 964.639,683.188 965.199,683.188 965.758,683.188 966.317,683.188 966.876,683.188 967.436,683.188 967.995,683.188 968.554,683.188 969.113,683.188 969.673,683.188 970.232,683.188 970.791,683.188 971.35,683.188 971.91,683.188 972.469,683.188 973.028,683.188 973.587,683.188 974.147,683.188 974.706,683.188 975.265,683.188 975.824,683.188 976.384,683.188 976.943,683.188 977.502,683.188 978.061,683.188 978.621,683.188 979.18,683.188 979.739,683.188 980.298,683.188 980.858,683.188 981.417,683.188 981.976,683.188 982.535,683.188 983.095,683.188 983.654,683.188 984.213,683.188 984.772,683.188 985.332,683.188 985.891,683.188 986.45,683.188 987.009,683.188 987.569,683.188 988.128,683.188 988.687,683.188 989.246,683.188 989.806,683.188 990.365,683.188 990.924,683.188 991.483,683.188 992.043,683.188 992.602,683.188 993.161,683.188 993.72,683.188 994.28,683.188 994.839,683.188 995.398,683.188 995.957,683.188 996.517,683.188 997.076,683.188 997.635,683.188 998.194,683.188 998.754,683.188 999.313,683.188 999.872,683.188 1000.43,683.188 1000.99,683.188 1001.55,683.188 1002.11,683.188 1002.67,683.188 1003.23,683.188 1003.79,683.188 1004.35,683.188 1004.91,683.188 1005.46,683.188 1006.02,683.188 1006.58,683.188 1007.14,683.188 1007.7,683.188 1008.26,683.188 1008.82,683.188 1009.38,683.188 1009.94,683.188 1010.5,683.188 1011.06,683.188 1011.62,683.188 1012.18,683.188 1012.73,683.188 1013.29,683.188 1013.85,683.188 1014.41,683.188 1014.97,683.188 1015.53,683.188 1016.09,683.188 1016.65,683.188 1017.21,683.188 1017.77,683.188 1018.33,683.188 1018.89,683.188 1019.45,683.188 1020.01,683.188 1020.56,683.188 1021.12,683.188 1021.68,683.188 1022.24,683.188 1022.8,683.188 1023.36,683.188 1023.92,683.188 1024.48,683.188 1025.04,683.188 1025.6,683.188 1026.16,683.188 1026.72,683.188 1027.28,683.188 1027.83,683.188 1028.39,683.188 1028.95,683.188 1029.51,683.188 1030.07,683.188 1030.63,683.188 1031.19,683.188 1031.75,683.188 1032.31,683.188 1032.87,683.188 1033.43,683.188 1033.99,683.188 1034.55,683.188 1035.1,683.188 1035.66,683.188 1036.22,683.188 1036.78,683.188 1037.34,683.188 1037.9,683.188 1038.46,683.188 1039.02,683.188 1039.58,683.188 1040.14,683.188 1040.7,683.188 1041.26,683.188 1041.82,683.188 1042.38,683.188 1042.93,683.188 1043.49,683.188 1044.05,683.188 1044.61,683.188 1045.17,683.188 1045.73,683.188 1046.29,683.188 1046.85,683.188 1047.41,683.188 1047.97,683.188 1048.53,683.188 1049.09,683.188 1049.65,683.188 1050.2,683.188 1050.76,683.188 1051.32,683.188 1051.88,683.188 1052.44,683.188 1053,683.188 1053.56,683.188 1054.12,683.188 1054.68,683.188 1055.24,683.188 1055.8,683.188 1056.36,683.188 1056.92,683.188 1057.48,683.188 1058.03,683.188 1058.59,683.188 1059.15,683.188 1059.71,683.188 1060.27,683.188 1060.83,683.188 1061.39,683.188 1061.95,683.188 1062.51,683.188 1063.07,683.188 1063.63,683.188 1064.19,683.188 1064.75,683.188 1065.3,683.188 1065.86,683.188 1066.42,683.188 1066.98,683.188 1067.54,683.188 1068.1,683.188 1068.66,683.188 1069.22,683.188 1069.78,683.188 1070.34,683.188 1070.9,683.188 1071.46,683.188 1072.02,683.188 1072.57,683.188 1073.13,683.188 1073.69,683.188 1074.25,683.188 1074.81,683.188 1075.37,683.188 1075.93,683.188 1076.49,683.188 1077.05,683.188 1077.61,683.188 1078.17,683.188 1078.73,683.188 1079.29,683.188 1079.85,683.188 1080.4,683.188 1080.96,683.188 1081.52,683.188 1082.08,683.188 1082.64,683.188 1083.2,683.188 1083.76,683.188 1084.32,683.188 1084.88,683.188 1085.44,683.188 1086,683.188 1086.56,683.188 1087.12,683.188 1087.67,683.188 1088.23,683.188 1088.79,683.188 1089.35,683.188 1089.91,683.188 1090.47,683.188 1091.03,683.188 1091.59,683.188 1092.15,683.188 1092.71,683.188 1093.27,683.188 1093.83,683.188 1094.39,683.188 1094.94,683.188 1095.5,683.188 1096.06,683.188 1096.62,683.188 1097.18,683.188 1097.74,683.188 1098.3,683.188 1098.86,683.188 1099.42,683.188 1099.98,683.188 1100.54,683.188 1101.1,683.188 1101.66,683.188 1102.22,683.188 1102.77,683.188 1103.33,683.188 1103.89,683.188 1104.45,683.188 1105.01,683.188 1105.57,683.188 1106.13,683.188 1106.69,683.188 1107.25,683.188 1107.81,683.188 1108.37,683.188 1108.93,683.188 1109.49,683.188 1110.04,683.188 1110.6,683.188 1111.16,683.188 1111.72,683.188 1112.28,683.188 1112.84,683.188 1113.4,683.188 1113.96,683.188 1114.52,683.188 1115.08,683.188 1115.64,683.188 1116.2,683.188 1116.76,683.188 1117.31,683.188 1117.87,683.188 1118.43,683.188 1118.99,683.188 1119.55,683.188 1120.11,683.188 1120.67,683.188 1121.23,683.188 1121.79,683.188 1122.35,683.188 1122.91,683.188 1123.47,683.188 1124.03,683.188 1124.59,683.188 1125.14,683.188 1125.7,683.188 1126.26,683.188 1126.82,683.188 1127.38,683.188 1127.94,683.188 1128.5,683.188 1129.06,683.188 1129.62,683.188 1130.18,683.188 1130.74,683.188 1131.3,683.188 1131.86,683.188 1132.41,683.188 1132.97,683.188 1133.53,683.188 1134.09,683.188 1134.65,683.188 1135.21,683.188 1135.77,683.188 1136.33,683.188 1136.89,683.188 1137.45,683.188 1138.01,683.188 1138.57,683.188 1139.13,683.188 1139.68,683.188 1140.24,683.188 1140.8,683.188 1141.36,683.188 1141.92,683.188 1142.48,683.188 1143.04,683.188 1143.6,683.188 1144.16,683.188 1144.72,683.188 1145.28,683.188 1145.84,683.188 1146.4,683.188 1146.96,683.188 1147.51,683.188 1148.07,683.188 1148.63,683.188 1149.19,683.188 1149.75,683.188 1150.31,683.188 1150.87,683.188 1151.43,683.188 1151.99,683.188 1152.55,683.188 1153.11,683.188 1153.67,683.188 1154.23,683.188 1154.78,683.188 1155.34,683.188 1155.9,683.188 1156.46,683.188 1157.02,683.188 1157.58,683.188 1158.14,683.188 1158.7,683.188 1159.26,683.188 1159.82,683.188 1160.38,683.188 1160.94,683.188 1161.5,683.188 1162.05,683.188 1162.61,683.188 1163.17,683.188 1163.73,683.188 1164.29,683.188 1164.85,683.188 1165.41,683.188 1165.97,683.188 1166.53,683.188 1167.09,683.188 1167.65,683.188 1168.21,683.188 1168.77,683.188 1169.33,683.188 1169.88,683.188 1170.44,683.188 1171,683.188 1171.56,683.188 1172.12,683.188 1172.68,683.188 1173.24,683.188 1173.8,683.188 1174.36,683.188 1174.92,683.188 1175.48,683.188 1176.04,683.188 1176.6,683.188 1177.15,683.188 1177.71,683.188 1178.27,683.188 1178.83,683.188 1179.39,683.188 1179.95,683.188 1180.51,683.188 1181.07,683.188 1181.63,683.188 1182.19,683.188 1182.75,683.188 1183.31,683.188 1183.87,683.188 1184.43,683.188 1184.98,683.188 1185.54,683.188 1186.1,683.188 1186.66,683.188 1187.22,683.188 1187.78,683.188 1188.34,683.188 1188.9,683.188 1189.46,683.188 1190.02,683.188 1190.58,683.188 1191.14,683.188 1191.7,683.188 1192.25,683.188 1192.81,683.188 1193.37,683.188 1193.93,683.188 1194.49,683.188 1195.05,683.188 1195.61,683.188 1196.17,683.188 1196.73,683.188 1197.29,683.188 1197.85,683.188 1198.41,683.188 1198.97,683.188 1199.52,683.188 1200.08,683.188 1200.64,683.188 1201.2,683.188 1201.76,683.188 1202.32,683.188 1202.88,683.188 1203.44,683.188 1204,683.188 1204.56,683.188 1205.12,683.188 1205.68,683.188 1206.24,683.188 1206.8,683.188 1207.35,683.188 1207.91,683.188 1208.47,683.188 1209.03,683.188 1209.59,683.188 1210.15,683.188 1210.71,683.188 1211.27,683.188 1211.83,683.188 1212.39,683.188 1212.95,683.188 1213.51,683.188 1214.07,683.188 1214.62,683.188 1215.18,683.188 1215.74,683.188 1216.3,683.188 1216.86,683.188 1217.42,683.188 1217.98,683.188 1218.54,683.188 1219.1,683.188 1219.66,683.188 1220.22,683.188 1220.78,683.188 1221.34,683.188 1221.89,683.188 1222.45,683.188 1223.01,683.188 1223.57,683.188 1224.13,683.188 1224.69,683.188 1225.25,683.188 1225.81,683.188 1226.37,683.188 1226.93,683.188 1227.49,683.188 1228.05,683.188 1228.61,683.188 1229.17,683.188 1229.72,683.188 1230.28,683.188 1230.84,683.188 1231.4,683.188 1231.96,683.188 1232.52,683.188 1233.08,683.188 1233.64,683.188 1234.2,683.188 1234.76,683.188 1235.32,683.188 1235.88,683.188 1236.44,683.188 1236.99,683.188 1237.55,683.188 1238.11,683.188 1238.67,683.188 1239.23,683.188 1239.79,683.188 1240.35,683.188 1240.91,683.188 1241.47,683.188 1242.03,683.188 1242.59,683.188 1243.15,683.188 1243.71,683.188 1244.26,683.188 1244.82,683.188 1245.38,683.188 1245.94,683.188 1246.5,683.188 1247.06,683.188 1247.62,683.188 1248.18,683.188 1248.74,683.188 1249.3,683.188 1249.86,683.188 1250.42,683.188 1250.98,683.188 1251.54,683.188 1252.09,683.188 1252.65,683.188 1253.21,683.188 1253.77,683.188 1254.33,683.188 1254.89,683.188 1255.45,683.188 1256.01,683.188 1256.57,683.188 1257.13,683.188 1257.69,683.188 1258.25,683.188 1258.81,683.188 1259.36,683.188 1259.92,683.188 1260.48,683.188 1261.04,683.188 1261.6,683.188 1262.16,683.188 1262.72,683.188 1263.28,683.188 1263.84,683.188 1264.4,683.188 1264.96,683.188 1265.52,683.188 1266.08,683.188 1266.63,683.188 1267.19,683.188 1267.75,683.188 1268.31,683.188 1268.87,683.188 1269.43,683.188 1269.99,683.188 1270.55,683.188 1271.11,683.188 1271.67,683.188 1272.23,683.188 1272.79,683.188 1273.35,683.188 1273.91,683.188 1274.46,683.188 1275.02,683.188 1275.58,683.188 1276.14,683.188 1276.7,683.188 1277.26,683.188 1277.82,683.188 1278.38,683.188 1278.94,683.188 1279.5,683.188 1280.06,683.188 1280.62,683.188 1281.18,683.188 1281.73,683.188 1282.29,683.188 1282.85,683.188 1283.41,683.188 1283.97,683.188 1284.53,683.188 1285.09,683.188 1285.65,683.188 1286.21,683.188 1286.77,683.188 1287.33,683.188 1287.89,683.188 1288.45,683.188 1289,683.188 1289.56,683.188 1290.12,683.188 1290.68,683.188 1291.24,683.188 1291.8,683.188 1292.36,683.188 1292.92,683.188 1293.48,683.188 1294.04,683.188 1294.6,683.188 1295.16,683.188 1295.72,683.188 1296.28,683.188 1296.83,683.188 1297.39,683.188 1297.95,683.188 1298.51,683.188 1299.07,683.188 1299.63,683.188 1300.19,683.188 1300.75,683.188 1301.31,683.188 1301.87,683.188 1302.43,683.188 1302.99,683.188 1303.55,683.188 1304.1,683.188 1304.66,683.188 1305.22,683.188 1305.78,683.188 1306.34,683.188 1306.9,683.188 1307.46,683.188 1308.02,683.188 1308.58,683.188 1309.14,683.188 1309.7,683.188 1310.26,683.188 1310.82,683.188 1311.38,683.188 1311.93,683.188 1312.49,683.188 1313.05,683.188 1313.61,683.188 1314.17,683.188 1314.73,683.188 1315.29,683.188 1315.85,683.188 1316.41,683.188 1316.97,683.188 1317.53,683.188 1318.09,683.188 1318.65,683.188 1319.2,683.188 1319.76,683.188 1320.32,683.188 1320.88,683.188 1321.44,683.188 1322,683.188 1322.56,683.188 1323.12,683.188 1323.68,683.188 1324.24,683.188 1324.8,683.188 1325.36,683.188 1325.92,683.188 1326.47,683.188 1327.03,683.188 1327.59,683.188 1328.15,683.188 1328.71,683.188 1329.27,683.188 1329.83,683.188 1330.39,683.188 1330.95,683.188 1331.51,683.188 1332.07,683.188 1332.63,683.188 1333.19,683.188 1333.75,683.188 1334.3,683.188 1334.86,683.188 1335.42,683.188 1335.98,683.188 1336.54,683.188 1337.1,683.188 1337.66,683.188 1338.22,683.188 1338.78,683.188 1339.34,683.188 1339.9,683.188 1340.46,683.188 1341.02,683.188 1341.57,683.188 1342.13,683.188 1342.69,683.188 1343.25,683.188 1343.81,683.188 1344.37,683.188 1344.93,683.188 1345.49,683.188 1346.05,683.188 1346.61,683.188 1347.17,683.188 1347.73,683.188 1348.29,683.188 1348.84,683.188 1349.4,683.188 1349.96,683.188 1350.52,683.188 1351.08,683.188 1351.64,683.188 1352.2,683.188 1352.76,683.188 1353.32,683.188 1353.88,683.188 1354.44,683.188 1355,683.188 1355.56,683.188 1356.12,683.188 1356.67,683.188 1357.23,683.188 1357.79,683.188 1358.35,683.188 1358.91,683.188 1359.47,683.188 1360.03,683.188 1360.59,683.188 1361.15,683.188 1361.71,683.188 1362.27,683.188 1362.83,683.188 1363.39,683.188 1363.94,683.188 1364.5,683.188 1365.06,683.188 1365.62,683.188 1366.18,683.188 1366.74,683.188 1367.3,683.188 1367.86,683.188 1368.42,683.188 1368.98,683.188 1369.54,683.188 1370.1,683.188 1370.66,683.188 1371.21,683.188 1371.77,683.188 1372.33,683.188 1372.89,683.188 1373.45,683.188 1374.01,683.188 1374.57,683.188 1375.13,683.188 1375.69,683.188 1376.25,683.188 1376.81,683.188 1377.37,683.188 1377.93,683.188 1378.49,683.188 1379.04,683.188 1379.6,683.188 1380.16,683.188 1380.72,683.188 1381.28,683.188 1381.84,683.188 1382.4,683.188 1382.96,683.188 1383.52,683.188 1384.08,683.188 1384.64,683.188 1385.2,683.188 1385.76,683.188 1386.31,683.188 1386.87,683.188 1387.43,683.188 1387.99,683.188 1388.55,683.188 1389.11,683.188 1389.67,683.188 1390.23,683.188 1390.79,683.188 1391.35,683.188 1391.91,683.188 1392.47,683.188 1393.03,683.188 1393.58,683.188 1394.14,683.188 1394.7,683.188 1395.26,683.188 1395.82,683.188 1396.38,683.188 1396.94,683.188 1397.5,683.188 1398.06,683.188 1398.62,683.188 1399.18,683.188 1399.74,683.188 1400.3,683.188 1400.86,683.188 1401.41,683.188 1401.97,683.188 1402.53,683.188 1403.09,683.188 1403.65,683.188 1404.21,683.188 1404.77,683.188 1405.33,683.188 1405.89,683.188 1406.45,683.188 1407.01,683.188 1407.57,683.188 1408.13,683.188 1408.68,683.188 1409.24,683.188 1409.8,683.188 1410.36,683.188 1410.92,683.188 1411.48,683.188 1412.04,683.188 1412.6,683.188 1413.16,683.188 1413.72,683.188 1414.28,683.188 1414.84,683.188 1415.4,683.188 1415.95,683.188 1416.51,683.188 1417.07,683.188 1417.63,683.188 1418.19,683.188 1418.75,683.188 1419.31,683.188 1419.87,683.188 1420.43,683.188 1420.99,683.188 1421.55,683.188 1422.11,683.188 1422.67,683.188 1423.23,683.188 1423.78,683.188 1424.34,683.188 1424.9,683.188 1425.46,683.188 1426.02,683.188 1426.58,683.188 1427.14,683.188 1427.7,683.188 1428.26,683.188 1428.82,683.188 1429.38,683.188 1429.94,683.188 1430.5,683.188 1431.05,683.188 1431.61,683.188 1432.17,683.188 1432.73,683.188 1433.29,683.188 1433.85,683.188 1434.41,683.188 1434.97,683.188 1435.53,683.188 1436.09,683.188 1436.65,683.188 1437.21,683.188 1437.77,683.188 1438.33,683.188 1438.88,683.188 1439.44,683.188 1440,683.188 1440.56,683.188 1441.12,683.188 1441.68,683.188 1442.24,683.188 1442.8,683.188 1443.36,683.188 1443.92,683.188 1444.48,683.188 1445.04,683.188 1445.6,683.188 1446.15,683.188 1446.71,683.188 1447.27,683.188 1447.83,683.188 1448.39,683.188 1448.95,683.188 1449.51,683.188 1450.07,683.188 1450.63,683.188 1451.19,683.188 1451.75,683.188 1452.31,683.188 1452.87,683.188 1453.42,683.188 1453.98,683.188 1454.54,683.188 1455.1,683.188 1455.66,683.188 1456.22,683.188 1456.78,683.188 1457.34,683.188 1457.9,683.188 1458.46,683.188 1459.02,683.188 1459.58,683.188 1460.14,683.188 1460.7,683.188 1461.25,683.188 1461.81,683.188 1462.37,683.188 1462.93,683.188 1463.49,683.188 1464.05,683.188 1464.61,683.188 1465.17,683.188 1465.73,683.188 1466.29,683.188 1466.85,683.188 1467.41,683.188 1467.97,683.188 1468.52,683.188 1469.08,683.188 1469.64,683.188 1470.2,683.188 1470.76,683.188 1471.32,683.188 1471.88,683.188 1472.44,683.188 1473,683.188 1473.56,683.188 1474.12,683.188 1474.68,683.188 1475.24,683.188 1475.79,683.188 1476.35,683.188 1476.91,683.188 1477.47,683.188 1478.03,683.188 1478.59,683.188 1479.15,683.188 1479.71,683.188 1480.27,683.188 1480.83,683.188 1481.39,683.188 1481.95,683.188 1482.51,683.188 1483.07,683.188 1483.62,683.188 1484.18,683.188 1484.74,683.188 1485.3,683.188 1485.86,683.188 1486.42,683.188 1486.98,683.188 1487.54,683.188 1488.1,683.188 1488.66,683.188 1489.22,683.188 1489.78,683.188 1490.34,683.188 1490.89,683.188 1491.45,683.188 1492.01,683.188 1492.57,683.188 1493.13,683.188 1493.69,683.188 1494.25,683.188 1494.81,683.188 1495.37,683.188 1495.93,683.188 1496.49,683.188 1497.05,683.188 1497.61,683.188 1498.16,683.188 1498.72,683.188 1499.28,683.188 1499.84,683.188 1500.4,683.188 1500.96,683.188 1501.52,683.188 1502.08,683.188 1502.64,683.188 1503.2,683.188 1503.76,683.188 1504.32,683.188 1504.88,683.188 1505.44,683.188 1505.99,683.188 1506.55,683.188 1507.11,683.188 1507.67,683.188 1508.23,683.188 1508.79,683.188 1509.35,683.188 1509.91,683.188 1510.47,683.188 1511.03,683.188 1511.59,683.188 1512.15,683.188 1512.71,683.188 1513.26,683.188 1513.82,683.188 1514.38,683.188 1514.94,683.188 1515.5,683.188 1516.06,683.188 1516.62,683.188 1517.18,683.188 1517.74,683.188 1518.3,683.188 1518.86,683.188 1519.42,683.188 1519.98,683.188 1520.53,683.188 1521.09,683.188 1521.65,683.188 1522.21,683.188 1522.77,683.188 1523.33,683.188 1523.89,683.188 1524.45,683.188 1525.01,683.188 1525.57,683.188 1526.13,683.188 1526.69,683.188 1527.25,683.188 1527.81,683.188 1528.36,683.188 1528.92,683.188 1529.48,683.188 1530.04,683.188 1530.6,683.188 1531.16,683.188 1531.72,683.188 1532.28,683.188 1532.84,683.188 1533.4,683.188 1533.96,683.188 1534.52,683.188 1535.08,683.188 1535.63,683.188 1536.19,683.188 1536.75,683.188 1537.31,683.188 1537.87,683.188 1538.43,683.188 1538.99,683.188 1539.55,683.188 1540.11,683.188 1540.67,683.188 1541.23,683.188 1541.79,683.188 1542.35,683.188 1542.9,683.188 1543.46,683.188 1544.02,683.188 1544.58,683.188 1545.14,683.188 1545.7,683.188 1546.26,683.188 1546.82,683.188 1547.38,683.188 1547.94,683.188 1548.5,683.188 1549.06,683.188 1549.62,683.188 1550.18,683.188 1550.73,683.188 1551.29,683.188 1551.85,683.188 1552.41,683.188 1552.97,683.188 1553.53,683.188 1554.09,683.188 1554.65,683.188 1555.21,683.188 1555.77,683.188 1556.33,683.188 1556.89,683.188 1557.45,683.188 1558,683.188 1558.56,683.188 1559.12,683.188 1559.68,683.188 1560.24,683.188 1560.8,683.188 1561.36,683.188 1561.92,683.188 1562.48,683.188 1563.04,683.188 1563.6,683.188 1564.16,683.188 1564.72,683.188 1565.28,683.188 1565.83,683.188 1566.39,683.188 1566.95,683.188 1567.51,683.188 1568.07,683.188 1568.63,683.188 1569.19,683.188 1569.75,683.188 1570.31,683.188 1570.87,683.188 1571.43,683.188 1571.99,683.188 1572.55,683.188 1573.1,683.188 1573.66,683.188 1574.22,683.188 1574.78,683.188 1575.34,683.188 1575.9,683.188 1576.46,683.188 1577.02,683.188 1577.58,683.188 1578.14,683.188 1578.7,683.188 1579.26,683.188 1579.82,683.188 1580.37,683.188 1580.93,683.188 1581.49,683.188 1582.05,683.188 1582.61,683.188 1583.17,683.188 1583.73,683.188 1584.29,683.188 1584.85,683.188 1585.41,683.188 1585.97,683.188 1586.53,683.188 1587.09,683.188 1587.65,683.188 1588.2,683.188 1588.76,683.188 1589.32,683.188 1589.88,683.188 1590.44,683.188 1591,683.188 1591.56,683.188 1592.12,683.188 1592.68,683.188 1593.24,683.188 1593.8,683.188 1594.36,683.188 1594.92,683.188 1595.47,683.188 1596.03,683.188 1596.59,683.188 1597.15,683.188 1597.71,683.188 1598.27,683.188 1598.83,683.188 1599.39,683.188 1599.95,683.188 1600.51,683.188 1601.07,683.188 1601.63,683.188 1602.19,683.188 1602.74,683.188 1603.3,683.188 1603.86,683.188 1604.42,683.188 1604.98,683.188 1605.54,683.188 1606.1,683.188 1606.66,683.188 1607.22,683.188 1607.78,683.188 1608.34,683.188 1608.9,683.188 1609.46,683.188 1610.02,683.188 1610.57,683.188 1611.13,683.188 1611.69,683.188 1612.25,683.188 1612.81,683.188 1613.37,683.188 1613.93,683.188 1614.49,683.188 1615.05,683.188 1615.61,683.188 1616.17,683.188 1616.73,683.188 1617.29,683.188 1617.84,683.188 1618.4,683.188 1618.96,683.188 1619.52,683.188 1620.08,683.188 1620.64,683.188 1621.2,683.188 1621.76,683.188 1622.32,683.188 1622.88,683.188 1623.44,683.188 1624,683.188 1624.56,683.188 1625.11,683.188 1625.67,683.188 1626.23,683.188 1626.79,683.188 1627.35,683.188 1627.91,683.188 1628.47,683.188 1629.03,683.188 1629.59,683.188 1630.15,683.188 1630.71,683.188 1631.27,683.188 1631.83,683.188 1632.39,683.188 1632.94,683.188 1633.5,683.188 1634.06,683.188 1634.62,683.188 1635.18,683.188 1635.74,683.188 1636.3,683.188 1636.86,683.188 1637.42,683.188 1637.98,683.188 1638.54,683.188 1639.1,683.188 1639.66,683.188 1640.21,683.188 1640.77,683.188 1641.33,683.188 1641.89,683.188 1642.45,683.188 1643.01,683.188 1643.57,683.188 1644.13,683.188 1644.69,683.188 1645.25,683.188 1645.81,683.188 1646.37,683.188 1646.93,683.188 1647.48,683.188 1648.04,683.188 1648.6,683.188 1649.16,683.188 1649.72,683.188 1650.28,683.188 1650.84,683.188 1651.4,683.188 1651.96,683.188 1652.52,683.188 1653.08,683.188 1653.64,683.188 1654.2,683.188 1654.76,683.188 1655.31,683.188 1655.87,683.188 1656.43,683.188 1656.99,683.188 1657.55,683.188 1658.11,683.188 1658.67,683.188 1659.23,683.188 1659.79,683.188 1660.35,683.188 1660.91,683.188 1661.47,683.188 1662.03,683.188 1662.58,683.188 1663.14,683.188 1663.7,683.188 1664.26,683.188 1664.82,683.188 1665.38,683.188 1665.94,683.188 1666.5,683.188 1667.06,683.188 1667.62,683.188 1668.18,683.188 1668.74,683.188 1669.3,683.188 1669.85,683.188 1670.41,683.188 1670.97,683.188 1671.53,683.188 1672.09,683.188 1672.65,683.188 1673.21,683.188 1673.77,683.188 1674.33,683.188 1674.89,683.188 1675.45,683.188 1676.01,683.188 1676.57,683.188 1677.13,683.188 1677.68,683.188 1678.24,683.188 1678.8,683.188 1679.36,683.188 1679.92,683.188 1680.48,683.188 1681.04,683.188 1681.6,683.188 1682.16,683.188 1682.72,683.188 1683.28,683.188 1683.84,683.188 1684.4,683.188 1684.95,683.188 1685.51,683.188 1686.07,683.188 1686.63,683.188 1687.19,683.188 1687.75,683.188 1688.31,683.188 1688.87,683.188 1689.43,683.188 1689.99,683.188 1690.55,683.188 1691.11,683.188 1691.67,683.188 1692.23,683.188 1692.78,683.188 1693.34,683.188 1693.9,683.188 1694.46,683.188 1695.02,683.188 1695.58,683.188 1696.14,683.188 1696.7,683.188 1697.26,683.188 1697.82,683.188 1698.38,683.188 1698.94,683.188 1699.5,683.188 1700.05,683.188 1700.61,683.188 1701.17,683.188 1701.73,683.188 1702.29,683.188 1702.85,683.188 1703.41,683.188 1703.97,683.188 1704.53,683.188 1705.09,683.188 1705.65,683.188 1706.21,683.188 1706.77,683.188 1707.32,683.188 1707.88,683.188 1708.44,683.188 1709,683.188 1709.56,683.188 1710.12,683.188 1710.68,683.188 1711.24,683.188 1711.8,683.188 1712.36,683.188 1712.92,683.188 1713.48,683.188 1714.04,683.188 1714.6,683.188 1715.15,683.188 1715.71,683.188 1716.27,683.188 1716.83,683.188 1717.39,683.188 1717.95,683.188 1718.51,683.188 1719.07,683.188 1719.63,683.188 1720.19,683.188 1720.75,683.188 1721.31,683.188 1721.87,683.188 1722.42,683.188 1722.98,683.188 1723.54,683.188 1724.1,683.188 1724.66,683.188 1725.22,683.188 1725.78,683.188 1726.34,683.188 1726.9,683.188 1727.46,683.188 1728.02,683.188 1728.58,683.188 1729.14,683.188 1729.69,683.188 1730.25,683.188 1730.81,683.188 1731.37,683.188 1731.93,683.188 1732.49,683.188 1733.05,683.188 1733.61,683.188 1734.17,683.188 1734.73,683.188 1735.29,683.188 1735.85,683.188 1736.41,683.188 1736.97,683.188 1737.52,683.188 1738.08,683.188 1738.64,683.188 1739.2,683.188 1739.76,683.188 1740.32,683.188 1740.88,683.188 1741.44,683.188 1742,683.188 1742.56,683.188 1743.12,683.188 1743.68,683.188 1744.24,683.188 1744.79,683.188 1745.35,683.188 1745.91,683.188 1746.47,683.188 1747.03,683.188 1747.59,683.188 1748.15,683.188 1748.71,683.188 1749.27,683.188 1749.83,683.188 1750.39,683.188 1750.95,683.188 1751.51,683.188 1752.06,683.188 1752.62,683.188 1753.18,683.188 1753.74,683.188 1754.3,683.188 1754.86,683.188 1755.42,683.188 1755.98,683.188 1756.54,683.188 1757.1,683.188 1757.66,683.188 1758.22,683.188 1758.78,683.188 1759.34,683.188 1759.89,683.188 1760.45,683.188 1761.01,683.188 1761.57,683.188 1762.13,683.188 1762.69,683.188 1763.25,683.188 1763.81,683.188 1764.37,683.188 1764.93,683.188 1765.49,683.188 1766.05,683.188 1766.61,683.188 1767.16,683.188 1767.72,683.188 1768.28,683.188 1768.84,683.188 1769.4,683.188 1769.96,683.188 1770.52,683.188 1771.08,683.188 1771.64,683.188 1772.2,683.188 1772.76,683.188 1773.32,683.188 1773.88,683.188 1774.43,683.188 1774.99,683.188 1775.55,683.188 1776.11,683.188 1776.67,683.188 1777.23,683.188 1777.79,683.188 1778.35,683.188 1778.91,683.188 1779.47,683.188 1780.03,683.188 1780.59,683.188 1781.15,683.188 1781.71,683.188 1782.26,683.188 1782.82,683.188 1783.38,683.188 1783.94,683.188 1784.5,683.188 1785.06,683.188 1785.62,683.188 1786.18,683.188 1786.74,683.188 1787.3,683.188 1787.86,683.188 1788.42,683.188 1788.98,683.188 1789.53,683.188 1790.09,683.188 1790.65,683.188 1791.21,683.188 1791.77,683.188 1792.33,683.188 1792.89,683.188 1793.45,683.188 1794.01,683.188 1794.57,683.188 1795.13,683.188 1795.69,683.188 1796.25,683.188 1796.8,683.188 1797.36,683.188 1797.92,683.188 1798.48,683.188 1799.04,683.188 1799.6,683.188 1800.16,683.188 1800.72,683.188 1801.28,683.188 1801.84,683.188 1802.4,683.188 1802.96,683.188 1803.52,683.188 1804.08,683.188 1804.63,683.188 1805.19,683.188 1805.75,683.188 1806.31,683.188 1806.87,683.188 1807.43,683.188 1807.99,683.188 1808.55,683.188 1809.11,683.188 1809.67,683.188 1810.23,683.188 1810.79,683.188 1811.35,683.188 1811.9,683.188 1812.46,683.188 1813.02,683.188 1813.58,683.188 1814.14,683.188 1814.7,683.188 1815.26,683.188 1815.82,683.188 1816.38,683.188 1816.94,683.188 1817.5,683.188 1818.06,683.188 1818.62,683.188 1819.18,683.188 1819.73,683.188 1820.29,683.188 1820.85,683.188 1821.41,683.188 1821.97,683.188 1822.53,683.188 1823.09,683.188 1823.65,683.188 1824.21,683.188 1824.77,683.188 1825.33,683.188 1825.89,683.188 1826.45,683.188 1827,683.188 1827.56,683.188 1828.12,683.188 1828.68,683.188 1829.24,683.188 1829.8,683.188 1830.36,683.188 1830.92,683.188 1831.48,683.188 1832.04,683.188 1832.6,683.188 1833.16,683.188 1833.72,683.188 1834.27,683.188 1834.83,683.188 1835.39,683.188 1835.95,683.188 1836.51,683.188 1837.07,683.188 1837.63,683.188 1838.19,683.188 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.034466849782456 ± 0.025037588918304866\nProjected Energy: -4.013088579629471 ± (0.004442760882104935, 0.004342619663770364)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=df.dτ[end],\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.474326</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4817e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0911e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.477e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.282e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.715e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.536e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition : applied boundray condition \n\nBoundary conditions\n\nFor π-twisted -> :twisted\nFor hard wall -> :hard_wall\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{boundary_condition}, Tuple{SingleComponentFockAddress, Any, Val{boundary_condition}}} where boundary_condition","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen, Val(boundary_condition))\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic, pi-twisted and hard-wall.\n\nBoundary conditions\n\nFor π-twisted -> :twisted\nFor hard wall -> :hard_wall\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, Val(true),Val(false))\n(BoseFS{2,4}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, Val(false),Val(true))\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
