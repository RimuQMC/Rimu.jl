var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21703780129132683 ± 0.0019430262250593139\n   G2(1) = 0.9154834881332409 ± 0.0007846857312221243\n   G2(2) = 0.9816512370647454 ± 0.000673245462276556\n   G2(3) = 0.9886927483126999 ± 0.0009795963383252744\n   G2(4) = 0.9816512370647454 ± 0.000673245462276556\n   G2(5) = 0.9154834881332409 ± 0.0007846857312221243\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.938711541669327 ± 0.13456068737660662\n   Replica 2: -4.107100359218179 ± 0.13924016096428682\n   Replica 3: -4.071761619475889 ± 0.1485394635950207\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip510\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip510)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip511\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip510)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip512\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip510)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.05 2211.02,1003.05 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.267 2211.02,745.267 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.481 2211.02,487.481 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.694 2211.02,229.694 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.05 423.181,1003.05 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.267 423.181,745.267 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.481 423.181,487.481 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.694 423.181,229.694 \"/>\n<path clip-path=\"url(#clip510)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.75 349.094 1260.87 Q349.094 1267.98 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.75 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.94 Q362.149 1242.94 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M290.043 1016.4 L306.363 1016.4 L306.363 1020.33 L284.418 1020.33 L284.418 1016.4 Q287.08 1013.64 291.664 1009.01 Q296.27 1004.36 297.451 1003.02 Q299.696 1000.5 300.576 998.76 Q301.478 997 301.478 995.311 Q301.478 992.556 299.534 990.82 Q297.613 989.084 294.511 989.084 Q292.312 989.084 289.858 989.848 Q287.427 990.611 284.65 992.162 L284.65 987.44 Q287.474 986.306 289.927 985.727 Q292.381 985.149 294.418 985.149 Q299.789 985.149 302.983 987.834 Q306.177 990.519 306.177 995.01 Q306.177 997.139 305.367 999.061 Q304.58 1000.96 302.474 1003.55 Q301.895 1004.22 298.793 1007.44 Q295.691 1010.63 290.043 1016.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M316.224 985.774 L334.58 985.774 L334.58 989.709 L320.506 989.709 L320.506 998.181 Q321.524 997.834 322.543 997.672 Q323.562 997.486 324.58 997.486 Q330.367 997.486 333.747 1000.66 Q337.126 1003.83 337.126 1009.25 Q337.126 1014.82 333.654 1017.93 Q330.182 1021 323.862 1021 Q321.687 1021 319.418 1020.63 Q317.173 1020.26 314.765 1019.52 L314.765 1014.82 Q316.849 1015.96 319.071 1016.51 Q321.293 1017.07 323.77 1017.07 Q327.774 1017.07 330.112 1014.96 Q332.45 1012.86 332.45 1009.25 Q332.45 1005.63 330.112 1003.53 Q327.774 1001.42 323.77 1001.42 Q321.895 1001.42 320.02 1001.84 Q318.168 1002.25 316.224 1003.13 L316.224 985.774 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M356.339 988.852 Q352.728 988.852 350.899 992.417 Q349.094 995.959 349.094 1003.09 Q349.094 1010.19 350.899 1013.76 Q352.728 1017.3 356.339 1017.3 Q359.973 1017.3 361.779 1013.76 Q363.608 1010.19 363.608 1003.09 Q363.608 995.959 361.779 992.417 Q359.973 988.852 356.339 988.852 M356.339 985.149 Q362.149 985.149 365.205 989.755 Q368.284 994.338 368.284 1003.09 Q368.284 1011.82 365.205 1016.42 Q362.149 1021 356.339 1021 Q350.529 1021 347.45 1016.42 Q344.395 1011.82 344.395 1003.09 Q344.395 994.338 347.45 989.755 Q350.529 985.149 356.339 985.149 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M286.062 727.987 L304.418 727.987 L304.418 731.922 L290.344 731.922 L290.344 740.394 Q291.363 740.047 292.381 739.885 Q293.4 739.7 294.418 739.7 Q300.205 739.7 303.585 742.871 Q306.964 746.043 306.964 751.459 Q306.964 757.038 303.492 760.14 Q300.02 763.218 293.701 763.218 Q291.525 763.218 289.256 762.848 Q287.011 762.478 284.603 761.737 L284.603 757.038 Q286.687 758.172 288.909 758.728 Q291.131 759.283 293.608 759.283 Q297.613 759.283 299.951 757.177 Q302.288 755.07 302.288 751.459 Q302.288 747.848 299.951 745.742 Q297.613 743.635 293.608 743.635 Q291.733 743.635 289.858 744.052 Q288.006 744.468 286.062 745.348 L286.062 727.987 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M326.177 731.066 Q322.566 731.066 320.737 734.631 Q318.932 738.172 318.932 745.302 Q318.932 752.408 320.737 755.973 Q322.566 759.515 326.177 759.515 Q329.811 759.515 331.617 755.973 Q333.446 752.408 333.446 745.302 Q333.446 738.172 331.617 734.631 Q329.811 731.066 326.177 731.066 M326.177 727.362 Q331.987 727.362 335.043 731.969 Q338.122 736.552 338.122 745.302 Q338.122 754.029 335.043 758.635 Q331.987 763.218 326.177 763.218 Q320.367 763.218 317.288 758.635 Q314.233 754.029 314.233 745.302 Q314.233 736.552 317.288 731.969 Q320.367 727.362 326.177 727.362 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M356.339 731.066 Q352.728 731.066 350.899 734.631 Q349.094 738.172 349.094 745.302 Q349.094 752.408 350.899 755.973 Q352.728 759.515 356.339 759.515 Q359.973 759.515 361.779 755.973 Q363.608 752.408 363.608 745.302 Q363.608 738.172 361.779 734.631 Q359.973 731.066 356.339 731.066 M356.339 727.362 Q362.149 727.362 365.205 731.969 Q368.284 736.552 368.284 745.302 Q368.284 754.029 365.205 758.635 Q362.149 763.218 356.339 763.218 Q350.529 763.218 347.45 758.635 Q344.395 754.029 344.395 745.302 Q344.395 736.552 347.45 731.969 Q350.529 727.362 356.339 727.362 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M284.835 470.201 L307.057 470.201 L307.057 472.191 L294.511 504.761 L289.627 504.761 L301.432 474.136 L284.835 474.136 L284.835 470.201 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M316.224 470.201 L334.58 470.201 L334.58 474.136 L320.506 474.136 L320.506 482.608 Q321.524 482.261 322.543 482.099 Q323.562 481.914 324.58 481.914 Q330.367 481.914 333.747 485.085 Q337.126 488.256 337.126 493.673 Q337.126 499.251 333.654 502.353 Q330.182 505.432 323.862 505.432 Q321.687 505.432 319.418 505.062 Q317.173 504.691 314.765 503.95 L314.765 499.251 Q316.849 500.386 319.071 500.941 Q321.293 501.497 323.77 501.497 Q327.774 501.497 330.112 499.39 Q332.45 497.284 332.45 493.673 Q332.45 490.062 330.112 487.955 Q327.774 485.849 323.77 485.849 Q321.895 485.849 320.02 486.265 Q318.168 486.682 316.224 487.562 L316.224 470.201 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M356.339 473.279 Q352.728 473.279 350.899 476.844 Q349.094 480.386 349.094 487.515 Q349.094 494.622 350.899 498.187 Q352.728 501.728 356.339 501.728 Q359.973 501.728 361.779 498.187 Q363.608 494.622 363.608 487.515 Q363.608 480.386 361.779 476.844 Q359.973 473.279 356.339 473.279 M356.339 469.576 Q362.149 469.576 365.205 474.182 Q368.284 478.765 368.284 487.515 Q368.284 496.242 365.205 500.849 Q362.149 505.432 356.339 505.432 Q350.529 505.432 347.45 500.849 Q344.395 496.242 344.395 487.515 Q344.395 478.765 347.45 474.182 Q350.529 469.576 356.339 469.576 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M256.664 243.039 L264.303 243.039 L264.303 216.673 L255.992 218.34 L255.992 214.081 L264.256 212.414 L268.932 212.414 L268.932 243.039 L276.571 243.039 L276.571 246.974 L256.664 246.974 L256.664 243.039 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M296.015 215.493 Q292.404 215.493 290.576 219.058 Q288.77 222.599 288.77 229.729 Q288.77 236.835 290.576 240.4 Q292.404 243.942 296.015 243.942 Q299.65 243.942 301.455 240.4 Q303.284 236.835 303.284 229.729 Q303.284 222.599 301.455 219.058 Q299.65 215.493 296.015 215.493 M296.015 211.789 Q301.826 211.789 304.881 216.396 Q307.96 220.979 307.96 229.729 Q307.96 238.456 304.881 243.062 Q301.826 247.645 296.015 247.645 Q290.205 247.645 287.127 243.062 Q284.071 238.456 284.071 229.729 Q284.071 220.979 287.127 216.396 Q290.205 211.789 296.015 211.789 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M326.177 215.493 Q322.566 215.493 320.737 219.058 Q318.932 222.599 318.932 229.729 Q318.932 236.835 320.737 240.4 Q322.566 243.942 326.177 243.942 Q329.811 243.942 331.617 240.4 Q333.446 236.835 333.446 229.729 Q333.446 222.599 331.617 219.058 Q329.811 215.493 326.177 215.493 M326.177 211.789 Q331.987 211.789 335.043 216.396 Q338.122 220.979 338.122 229.729 Q338.122 238.456 335.043 243.062 Q331.987 247.645 326.177 247.645 Q320.367 247.645 317.288 243.062 Q314.233 238.456 314.233 229.729 Q314.233 220.979 317.288 216.396 Q320.367 211.789 326.177 211.789 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M356.339 215.493 Q352.728 215.493 350.899 219.058 Q349.094 222.599 349.094 229.729 Q349.094 236.835 350.899 240.4 Q352.728 243.942 356.339 243.942 Q359.973 243.942 361.779 240.4 Q363.608 236.835 363.608 229.729 Q363.608 222.599 361.779 219.058 Q359.973 215.493 356.339 215.493 M356.339 211.789 Q362.149 211.789 365.205 216.396 Q368.284 220.979 368.284 229.729 Q368.284 238.456 365.205 243.062 Q362.149 247.645 356.339 247.645 Q350.529 247.645 347.45 243.062 Q344.395 238.456 344.395 229.729 Q344.395 220.979 347.45 216.396 Q350.529 211.789 356.339 211.789 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip512)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.694 4017.76,229.694 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1249.3 457.123,1249.16 457.691,1248.95 458.259,1248.64 458.828,1248.27 459.396,1247.84 459.964,1247.33 460.533,1246.72 461.101,1246.07 461.669,1245.31 462.238,1244.5 462.806,1243.6 463.375,1242.61 463.943,1241.53 464.511,1239.32 465.08,1238.03 465.648,1236.64 466.216,1235.14 466.785,1233.51 467.353,1230.73 467.921,1228.82 468.49,1225.75 469.058,1221.47 469.626,1217.1 470.195,1212.54 470.763,1209.87 471.331,1207.05 471.9,1204.04 472.468,1200.89 473.036,1196.49 473.605,1192.88 474.173,1188.05 474.741,1184.12 475.31,1180 475.878,1173.59 476.446,1169.1 477.015,1164.41 477.583,1158.49 478.152,1150.17 478.72,1144.79 479.288,1138.24 479.857,1132.29 480.425,1126.21 480.993,1118.9 481.562,1112.42 482.13,1105.71 482.698,1097.83 483.267,1089.76 483.835,1080.53 484.403,1073.2 484.972,1063.57 485.54,1054.89 486.108,1046.07 486.677,1036.06 487.245,1026.84 487.813,1018.61 488.382,1008.14 488.95,999.694 489.518,987.949 490.087,977.305 490.655,967.514 491.224,958.657 491.792,946.745 492.36,936.979 492.929,928.106 493.497,917.975 494.065,907.794 494.634,897.73 495.202,885.561 495.77,876.411 496.339,866.149 496.907,854.989 497.475,842.638 498.044,833.524 498.612,822.375 499.18,813.281 499.749,802.098 500.317,793.139 500.885,783.042 501.454,775.102 502.022,763.941 502.59,753.956 503.159,744.013 503.727,734.032 504.295,724.215 504.864,714.53 505.432,704.758 506.001,695.188 506.569,685.654 507.137,674.008 507.706,663.467 508.274,655.306 508.842,644.028 509.411,635.217 509.979,627.293 510.547,617.646 511.116,608.808 511.684,601.343 512.252,592.763 512.821,582.505 513.389,573.48 513.957,566.644 514.526,555.809 515.094,545.176 515.662,537.764 516.231,528.524 516.799,520.751 517.367,512.746 517.936,506.17 518.504,498.875 519.072,492.606 519.641,486.55 520.209,479.352 520.778,473.354 521.346,467.453 521.914,461.328 522.483,454.641 523.051,450.12 523.619,444.447 524.188,437.049 524.756,434.047 525.324,430.6 525.893,425.328 526.461,420.196 527.029,416.189 527.598,410.195 528.166,405.554 528.734,401.046 529.303,397.446 529.871,392.019 530.439,387.543 531.008,384.365 531.576,381.259 532.144,377.075 532.713,375.168 533.281,370.331 533.85,366.401 534.418,363.675 534.986,361.099 535.555,357.366 536.123,352.953 536.691,348.529 537.26,345.359 537.828,342.43 538.396,341.394 538.965,340.367 539.533,336.131 540.101,333.242 540.67,327.141 541.238,325.527 541.806,322.706 542.375,318.081 542.943,314.882 543.511,314.778 544.08,311.519 544.648,310.603 545.216,310.478 545.785,308.471 546.353,306.406 546.921,304.642 547.49,303.634 548.058,300.523 548.627,300.065 549.195,299.219 549.763,299.257 550.332,298.204 550.9,299.29 551.468,297.264 552.037,295.023 552.605,290.898 553.173,288.029 553.742,287.453 554.31,286.566 554.878,284.831 555.447,285.345 556.015,282.665 556.583,280.616 557.152,279.973 557.72,279.498 558.288,276.793 558.857,278.418 559.425,276.954 559.993,277.602 560.562,275.866 561.13,275.234 561.698,275.493 562.267,274.931 562.835,276.309 563.404,274.493 563.972,272.751 564.54,271.188 565.109,269.363 565.677,267.657 566.245,267.221 566.814,265.756 567.382,264.194 567.95,263.884 568.519,261.491 569.087,261.537 569.655,259.158 570.224,258.89 570.792,258.649 571.36,258.519 571.929,258.244 572.497,258.285 573.065,259.354 573.634,258.016 574.202,257.856 574.77,258.499 575.339,258.178 575.907,254.746 576.476,254.716 577.044,254.549 577.612,253.378 578.181,252.48 578.749,253.398 579.317,253.506 579.886,253.569 580.454,253.571 581.022,252.454 581.591,253.575 582.159,252.154 582.727,251.005 583.296,251.029 583.864,248.875 584.432,250.081 585.001,249.022 585.569,248.258 586.137,248.303 586.706,247.369 587.274,246.664 587.842,246.915 588.411,247.176 588.979,246.241 589.547,244.301 590.116,245.675 590.684,244.858 591.253,244.093 591.821,242.314 592.389,239.566 592.958,239.182 593.526,237.974 594.094,238.635 594.663,237.196 595.231,239.897 595.799,241.278 596.368,243.738 596.936,241.726 597.504,242.114 598.073,242.36 598.641,245.618 599.209,245.816 599.778,243.656 600.346,241.715 600.914,244.094 601.483,245.188 602.051,243.746 602.619,244.765 603.188,243.613 603.756,244.839 604.325,242.7 604.893,241.745 605.461,242.908 606.03,242.865 606.598,242.937 607.166,243.015 607.735,242.03 608.303,244.183 608.871,242.886 609.44,241.925 610.008,244.765 610.576,245.699 611.145,245.552 611.713,246.349 612.281,244.125 612.85,242.827 613.418,243.685 613.986,244.715 614.555,245.314 615.123,246.082 615.691,243.43 616.26,240.92 616.828,239.849 617.396,239.717 617.965,237.714 618.533,236.933 619.102,236.005 619.67,237.351 620.238,236.636 620.807,234.893 621.375,235.522 621.943,238.115 622.512,237.483 623.08,238.877 623.648,237.786 624.217,236.982 624.785,234.88 625.353,236.36 625.922,237.636 626.49,237.475 627.058,239.621 627.627,238.382 628.195,236.475 628.763,237.763 629.332,237.768 629.9,235.61 630.468,234.801 631.037,235.385 631.605,234.574 632.173,233.803 632.742,233.11 633.31,232.349 633.879,232.87 634.447,233.345 635.015,235.791 635.584,234.977 636.152,235.156 636.72,233.27 637.289,232.376 637.857,232.788 638.425,233.247 638.994,232.583 639.562,235.017 640.13,234.427 640.699,235.035 641.267,236.275 641.835,236.397 642.404,236.419 642.972,235.351 643.54,232.527 644.109,230.892 644.677,234.792 645.245,233.892 645.814,236.244 646.382,235.463 646.951,234.486 647.519,234.757 648.087,233.799 648.656,234.26 649.224,235.563 649.792,235.893 650.361,235.961 650.929,238.191 651.497,237.025 652.066,237.117 652.634,237.338 653.202,236.438 653.771,237.33 654.339,236.249 654.907,236.326 655.476,236.399 656.044,233.385 656.612,233.374 657.181,234.751 657.749,233.872 658.317,233.898 658.886,234.988 659.454,235.937 660.022,238.048 660.591,239.758 661.159,239.552 661.728,241.32 662.296,238.946 662.864,238.78 663.433,236.562 664.001,235.441 664.569,234.43 665.138,235.558 665.706,236.587 666.274,237.436 666.843,238.225 667.411,235.944 667.979,232.005 668.548,233.304 669.116,232.649 669.684,234.223 670.253,236.356 670.821,237.402 671.389,234.096 671.958,234.192 672.526,234.305 673.094,232.229 673.663,232.436 674.231,230.627 674.799,227.814 675.368,226.353 675.936,227.914 676.505,230.619 677.073,230.971 677.641,231.214 678.21,229.395 678.778,231.013 679.346,229.512 679.915,230.096 680.483,230.334 681.051,233.574 681.62,233.923 682.188,235.785 682.756,235.709 683.325,236.654 683.893,237.444 684.461,239.26 685.03,237.995 685.598,238.081 686.166,236.971 686.735,236.726 687.303,235.748 687.871,235.673 688.44,236.483 689.008,235.452 689.577,235.307 690.145,236.4 690.713,235.168 691.282,234.201 691.85,235.352 692.418,233.279 692.987,233.545 693.555,233.853 694.123,235.017 694.692,236.217 695.26,235.183 695.828,232.849 696.397,236.053 696.965,235.789 697.533,235.584 698.102,235.473 698.67,235.028 699.238,235.062 699.807,232.168 700.375,231.457 700.943,232.893 701.512,231.716 702.08,231.798 702.648,232.089 703.217,231.224 703.785,230.265 704.354,229.356 704.922,228.558 705.49,226.738 706.059,228.09 706.627,227.498 707.195,228.178 707.764,227.706 708.332,225.23 708.9,225.727 709.469,226.227 710.037,227.011 710.605,227.526 711.174,228.137 711.742,228.44 712.31,228.201 712.879,230.657 713.447,228.847 714.015,230.285 714.584,230.807 715.152,228.954 715.72,230.218 716.289,230.538 716.857,231.722 717.425,231.751 717.994,232.097 718.562,231.409 719.131,234.681 719.699,233.626 720.267,229.762 720.836,229.967 721.404,227.213 721.972,226.725 722.541,227.29 723.109,227.516 723.677,226.583 724.246,224.11 724.814,226.059 725.382,226.509 725.951,229.121 726.519,229.534 727.087,227.878 727.656,228.523 728.224,230.767 728.792,231.006 729.361,230.434 729.929,228.701 730.497,228.108 731.066,229.567 731.634,227.635 732.203,228.193 732.771,228.805 733.339,229.286 733.908,230.686 734.476,233.887 735.044,233.899 735.613,234.909 736.181,234.72 736.749,234.86 737.318,234.712 737.886,235.634 738.454,234.664 739.023,232.769 739.591,232.999 740.159,234.208 740.728,234.11 741.296,235.287 741.864,237.333 742.433,238.117 743.001,236.822 743.569,236.739 744.138,235.292 744.706,236.234 745.274,237.049 745.843,238.932 746.411,238.711 746.98,237.438 747.548,235.901 748.116,236.744 748.685,236.719 749.253,238.538 749.821,234.856 750.39,233.537 750.958,232.203 751.526,231.253 752.095,230.234 752.663,230.22 753.231,230.356 753.8,231.744 754.368,229.929 754.936,229.19 755.505,230.297 756.073,230.514 756.641,231.813 757.21,233.763 757.778,232.676 758.346,233.736 758.915,233.646 759.483,234.686 760.052,234.336 760.62,238.257 761.188,237.967 761.757,235.509 762.325,234.164 762.893,232.922 763.462,232.752 764.03,234.611 764.598,234.435 765.167,235.099 765.735,231.834 766.303,229.92 766.872,230.137 767.44,231.228 768.008,228.265 768.577,229.694 769.145,229.956 769.713,230.002 770.282,230.114 770.85,228.203 771.418,228.455 771.987,227.58 772.555,228.821 773.123,230.061 773.692,230.239 774.26,230.301 774.829,228.276 775.397,229.726 775.965,227.889 776.534,227.222 777.102,228.8 777.67,230.044 778.239,230.26 778.807,230.365 779.375,229.556 779.944,226.702 780.512,227.945 781.08,228.274 781.649,227.171 782.217,228.536 782.785,229.448 783.354,228.583 783.922,229.875 784.49,230.955 785.059,229.994 785.627,231.334 786.195,232.579 786.764,233.587 787.332,232.62 787.9,229.53 788.469,227.766 789.037,231.104 789.606,233.146 790.174,234.911 790.742,235.89 791.311,234.539 791.879,235.425 792.447,235.289 793.016,234.965 793.584,235.729 794.152,237.408 794.721,235.807 795.289,236.716 795.857,237.533 796.426,236.252 796.994,236.921 797.562,236.55 798.131,238.15 798.699,236.622 799.267,237.397 799.836,236.844 800.404,237.465 800.972,237.089 801.541,234.427 802.109,233.145 802.678,233.177 803.246,229.88 803.814,227.833 804.383,228.053 804.951,227.152 805.519,227.373 806.088,229.606 806.656,228.846 807.224,226.902 807.793,227.004 808.361,227.21 808.929,228.718 809.498,228.839 810.066,226.91 810.634,230.195 811.203,228.122 811.771,226.116 812.339,225.353 812.908,225.678 813.476,227.007 814.044,224.296 814.613,225.682 815.181,227.868 815.749,229.219 816.318,227.413 816.886,227.883 817.455,229.233 818.023,228.296 818.591,228.479 819.16,227.847 819.728,227.395 820.296,229.824 820.865,230.194 821.433,231.25 822.001,230.146 822.57,231.21 823.138,231.5 823.706,231.491 824.275,232.67 824.843,231.694 825.411,229.32 825.98,231.507 826.548,231.482 827.116,231.547 827.685,231.41 828.253,233.56 828.821,233.318 829.39,232.841 829.958,232.785 830.526,232.532 831.095,234.566 831.663,234.274 832.232,235.011 832.8,236.567 833.368,236.179 833.937,236.887 834.505,235.373 835.073,237.245 835.642,236.875 836.21,237.507 836.778,236.734 837.347,237.24 837.915,234.622 838.483,232.263 839.052,233.129 839.62,232.801 840.188,234.542 840.757,235.329 841.325,234.104 841.893,233.891 842.462,233.916 843.03,233.575 843.598,233.384 844.167,232.061 844.735,230.674 845.304,229.418 845.872,229.406 846.44,227.62 847.009,228.799 847.577,228.902 848.145,229.081 848.714,228.242 849.282,227.33 849.85,227.371 850.419,225.465 850.987,226.762 851.555,226.878 852.124,229.119 852.692,231.085 853.26,230.977 853.829,229.996 854.397,226.999 854.965,226.267 855.534,226.543 856.102,228.883 856.67,230.854 857.239,229.648 857.807,229.644 858.375,231.897 858.944,230.614 859.512,230.674 860.081,230.595 860.649,232.472 861.217,230.438 861.786,232.629 862.354,233.558 862.922,235.33 863.491,233 864.059,231.7 864.627,231.758 865.196,231.762 865.764,231.566 866.332,229.145 866.901,228.075 867.469,228.922 868.037,229.992 868.606,230.083 869.174,230.982 869.742,230.926 870.311,228.753 870.879,229.588 871.447,230.831 872.016,229.634 872.584,231.612 873.152,231.492 873.721,231.291 874.289,230.292 874.858,230.373 875.426,229.141 875.994,229.055 876.563,231.036 877.131,228.742 877.699,228.666 878.268,228.298 878.836,228.546 879.404,229.628 879.973,228.762 880.541,228.742 881.109,227.588 881.678,226.803 882.246,228.795 882.814,228.991 883.383,229.054 883.951,230.166 884.519,229.992 885.088,228.864 885.656,228.676 886.224,228.743 886.793,227.95 887.361,227.167 887.93,228.417 888.498,226.439 889.066,228.986 889.635,230.931 890.203,229.731 890.771,231.789 891.34,232.643 891.908,234.269 892.476,235.098 893.045,235.705 893.613,235.389 894.181,235.101 894.75,233.742 895.318,233.563 895.886,234.323 896.455,231.039 897.023,229.78 897.591,230.792 898.16,228.711 898.728,228.556 899.296,228.739 899.865,227.835 900.433,227.847 901.001,227.231 901.57,226.412 902.138,220.583 902.707,222.54 903.275,222.181 903.843,223.708 904.412,224.262 904.98,223.596 905.548,221.9 906.117,224.641 906.685,224.956 907.253,224.403 907.822,225.871 908.39,229.483 908.958,230.767 909.527,229.891 910.095,226.878 910.663,225.036 911.232,226.55 911.8,225.841 912.368,226.263 912.937,225.512 913.505,223.761 914.073,227.335 914.642,226.686 915.21,226.139 915.779,226.472 916.347,227.694 916.915,228.036 917.484,229.321 918.052,230.407 918.62,231.544 919.189,231.565 919.757,231.483 920.325,230.425 920.894,230.647 921.462,229.692 922.03,229.775 922.599,231.211 923.167,230.091 923.735,231.256 924.304,231.381 924.872,232.369 925.44,234.417 926.009,233.223 926.577,233.053 927.145,232.916 927.714,231.614 928.282,230.59 928.85,230.778 929.419,229.129 929.987,230.392 930.556,230.521 931.124,230.738 931.692,227.588 932.261,227.765 932.829,227.04 933.397,228.522 933.966,229.8 934.534,228.94 935.102,229.205 935.671,228.292 936.239,228.412 936.807,226.529 937.376,227.961 937.944,229.123 938.512,228.344 939.081,231.576 939.649,231.474 940.217,230.224 940.786,231.369 941.354,232.366 941.922,232.137 942.491,232.171 943.059,229.897 943.627,228.911 944.196,229.037 944.764,227.051 945.333,228.302 945.901,230.724 946.469,231.767 947.038,232.814 947.606,232.738 948.174,232.447 948.743,231.132 949.311,232.13 949.879,235.384 950.448,234.079 951.016,236.038 951.584,236.868 952.153,234.314 952.721,231.91 953.289,229.878 953.858,227.638 954.426,231.021 954.994,229.69 955.563,231.81 956.131,232.784 956.699,233.678 957.268,232.29 957.836,233.129 958.405,233.096 958.973,234.013 959.541,233.468 960.11,232.243 960.678,229.994 961.246,229.069 961.815,230.236 962.383,229.131 962.951,228.257 963.52,227.167 964.088,227.404 964.656,226.62 965.225,227.266 965.793,229.468 966.361,230.469 966.93,230.43 967.498,230.368 968.066,231.411 968.635,231.531 969.203,231.444 969.771,231.349 970.34,230.131 970.908,232.378 971.476,233.3 972.045,233.27 972.613,231.088 973.182,230.978 973.75,230.959 974.318,229.905 974.887,227.736 975.455,228.911 976.023,229.92 976.592,230.775 977.16,231.565 977.728,231.34 978.297,229.197 978.865,229.236 979.433,230.129 980.002,229.242 980.57,229.458 981.138,231.589 981.707,231.492 982.275,230.392 982.843,230.564 983.412,228.639 983.98,230.828 984.548,232.778 985.117,231.525 985.685,231.433 986.253,231.286 986.822,231.015 987.39,231.972 987.959,230.786 988.527,230.731 989.095,229.403 989.664,230.54 990.232,230.317 990.8,229.304 991.369,230.2 991.937,230.56 992.505,228.276 993.074,228.389 993.642,228.322 994.21,226.299 994.779,224.524 995.347,227.078 995.915,227.373 996.484,227.544 997.052,228.693 997.62,227.575 998.189,226.85 998.757,227.121 999.325,227.339 999.894,227.233 1000.46,227.518 1001.03,227.698 1001.6,227.958 1002.17,226.131 1002.74,227.487 1003.3,225.967 1003.87,227.284 1004.44,228.385 1005.01,229.652 1005.58,229.55 1006.15,228.629 1006.71,227.965 1007.28,229.544 1007.85,231.571 1008.42,231.557 1008.99,230.359 1009.56,230.394 1010.12,230.624 1010.69,232.729 1011.26,232.566 1011.83,233.389 1012.4,235.43 1012.97,235.053 1013.53,234.711 1014.1,234.375 1014.67,236.275 1015.24,236.757 1015.81,235.195 1016.38,232.784 1016.94,232.539 1017.51,231.341 1018.08,228.123 1018.65,227.172 1019.22,227.276 1019.79,229.407 1020.35,230.485 1020.92,229.473 1021.49,229.433 1022.06,231.473 1022.63,230.265 1023.2,229.121 1023.76,225.115 1024.33,225.493 1024.9,224.849 1025.47,226.099 1026.04,226.395 1026.61,226.794 1027.17,226.836 1027.74,226.928 1028.31,225.244 1028.88,227.549 1029.45,226.869 1030.02,227.316 1030.58,227.296 1031.15,226.522 1031.72,228.004 1032.29,228.188 1032.86,228.425 1033.43,228.736 1033.99,228.83 1034.56,230.121 1035.13,230.12 1035.7,233.142 1036.27,231.978 1036.84,230.908 1037.4,231.224 1037.97,230.219 1038.54,229.356 1039.11,229.611 1039.68,229.742 1040.25,227.865 1040.81,228.071 1041.38,231.352 1041.95,230.104 1042.52,231.012 1043.09,234.257 1043.66,232.993 1044.22,235.963 1044.79,235.332 1045.36,232.988 1045.93,232.906 1046.5,233.683 1047.07,233.301 1047.63,232.964 1048.2,230.765 1048.77,229.567 1049.34,228.522 1049.91,228.49 1050.48,228.677 1051.05,228.923 1051.61,229.192 1052.18,228.217 1052.75,227.393 1053.32,227.622 1053.89,227.873 1054.46,230.14 1055.02,231.312 1055.59,231.284 1056.16,229.113 1056.73,229.241 1057.3,228.122 1057.87,227.064 1058.43,230.487 1059,231.34 1059.57,231.442 1060.14,230.452 1060.71,231.597 1061.28,231.568 1061.84,230.494 1062.41,230.378 1062.98,230.296 1063.55,232.235 1064.12,231.115 1064.69,233.074 1065.25,232.654 1065.82,232.644 1066.39,233.642 1066.96,233.585 1067.53,233.273 1068.1,233.172 1068.66,234.936 1069.23,235.695 1069.8,236.272 1070.37,235.851 1070.94,236.405 1071.51,235.877 1072.07,237.701 1072.64,234.897 1073.21,234.419 1073.78,235.893 1074.35,235.413 1074.92,234.833 1075.48,234.382 1076.05,233.998 1076.62,234.587 1077.19,233.018 1077.76,231.629 1078.33,229.413 1078.89,231.495 1079.46,232.503 1080.03,231.061 1080.6,232.904 1081.17,232.59 1081.74,231.099 1082.3,233.054 1082.87,231.762 1083.44,231.456 1084.01,230.268 1084.58,228.065 1085.15,227.107 1085.71,226 1086.28,227.242 1086.85,225.225 1087.42,225.33 1087.99,224.475 1088.56,226.535 1089.12,228.604 1089.69,228.683 1090.26,230.701 1090.83,230.406 1091.4,230.308 1091.97,229.217 1092.53,227.928 1093.1,228.957 1093.67,227.739 1094.24,226.708 1094.81,227.877 1095.38,227.862 1095.94,226.836 1096.51,226.892 1097.08,227.992 1097.65,227.019 1098.22,228.283 1098.79,227.382 1099.35,226.342 1099.92,225.418 1100.49,225.745 1101.06,227.08 1101.63,227.05 1102.2,226.077 1102.76,226.418 1103.33,225.711 1103.9,227.042 1104.47,227.275 1105.04,227.406 1105.61,227.321 1106.17,227.363 1106.74,225.383 1107.31,224.778 1107.88,225.246 1108.45,224.721 1109.02,226.201 1109.58,227.51 1110.15,227.726 1110.72,229.021 1111.29,229.217 1111.86,228.214 1112.43,227.24 1112.99,227.526 1113.56,227.763 1114.13,229.031 1114.7,231.003 1115.27,230.903 1115.84,232.178 1116.4,232.317 1116.97,232.267 1117.54,232.26 1118.11,232.059 1118.68,232.864 1119.25,233.674 1119.81,233.733 1120.38,234.477 1120.95,235.227 1121.52,235.815 1122.09,235.537 1122.66,237.087 1123.23,235.842 1123.79,235.314 1124.36,235.999 1124.93,236.364 1125.5,232.874 1126.07,230.462 1126.64,229.167 1127.2,230.027 1127.77,230.095 1128.34,228.917 1128.91,228.872 1129.48,230.951 1130.05,231.766 1130.61,232.641 1131.18,233.382 1131.75,229.876 1132.32,230.839 1132.89,230.727 1133.46,230.604 1134.02,228.427 1134.59,230.697 1135.16,230.736 1135.73,229.671 1136.3,229.635 1136.87,228.86 1137.43,229.025 1138,229.012 1138.57,229.055 1139.14,231.09 1139.71,231.921 1140.28,233 1140.84,232.587 1141.41,232.246 1141.98,233.011 1142.55,231.615 1143.12,234.563 1143.69,234.057 1144.25,232.696 1144.82,231.271 1145.39,232.135 1145.96,232.926 1146.53,231.654 1147.1,230.294 1147.66,229.313 1148.23,228.334 1148.8,228.368 1149.37,228.315 1149.94,229.484 1150.51,230.213 1151.07,232.014 1151.64,230.978 1152.21,231.7 1152.78,229.34 1153.35,229.323 1153.92,230.401 1154.48,230.245 1155.05,226.951 1155.62,225.996 1156.19,224.968 1156.76,225.151 1157.33,226.382 1157.89,226.439 1158.46,226.562 1159.03,225.837 1159.6,226.935 1160.17,228.034 1160.74,228.168 1161.3,226.835 1161.87,227.048 1162.44,226.136 1163.01,227.247 1163.58,229.338 1164.15,230.287 1164.71,231 1165.28,230.844 1165.85,229.58 1166.42,229.377 1166.99,229.198 1167.56,226.168 1168.12,227.45 1168.69,227.508 1169.26,228.411 1169.83,229.592 1170.4,228.723 1170.97,228.796 1171.53,228.142 1172.1,227.282 1172.67,227.551 1173.24,230.794 1173.81,230.606 1174.38,230.407 1174.94,229.178 1175.51,229.275 1176.08,229.072 1176.65,231.859 1177.22,232.66 1177.79,232.517 1178.35,230.016 1178.92,229.029 1179.49,229.106 1180.06,230.04 1180.63,231.133 1181.2,230.993 1181.76,228.627 1182.33,225.561 1182.9,223.894 1183.47,223.214 1184.04,223.653 1184.61,222.945 1185.17,223.098 1185.74,222.465 1186.31,223.052 1186.88,224.692 1187.45,225.081 1188.02,225.636 1188.58,224.675 1189.15,224.897 1189.72,224.373 1190.29,223.725 1190.86,225.264 1191.43,225.694 1192,229.241 1192.56,230.262 1193.13,229.127 1193.7,230.189 1194.27,230.024 1194.84,232.254 1195.41,232.368 1195.97,230.185 1196.54,230.138 1197.11,229.113 1197.68,228.439 1198.25,229.777 1198.82,228.892 1199.38,228.985 1199.95,226.817 1200.52,227.118 1201.09,226.246 1201.66,227.454 1202.23,225.711 1202.79,226.964 1203.36,228.255 1203.93,226.502 1204.5,226.888 1205.07,227.001 1205.64,226.477 1206.2,227.929 1206.77,228.134 1207.34,228.286 1207.91,224.613 1208.48,224.908 1209.05,227.548 1209.61,228.9 1210.18,229.194 1210.75,231.436 1211.32,231.504 1211.89,231.447 1212.46,230.619 1213.02,230.686 1213.59,230.667 1214.16,231.92 1214.73,229.553 1215.3,232.79 1215.87,232.576 1216.43,230.383 1217,230.466 1217.57,231.653 1218.14,231.526 1218.71,232.326 1219.28,231.191 1219.84,229.884 1220.41,230.807 1220.98,230.003 1221.55,229.838 1222.12,227.594 1222.69,226.889 1223.25,228.092 1223.82,228.246 1224.39,227.482 1224.96,227.657 1225.53,227.758 1226.1,228.078 1226.66,229.281 1227.23,229.524 1227.8,232.542 1228.37,233.265 1228.94,231.9 1229.51,229.799 1230.07,229.432 1230.64,232.734 1231.21,232.623 1231.78,231.456 1232.35,231.238 1232.92,230.11 1233.48,230.22 1234.05,230.149 1234.62,230.138 1235.19,227.24 1235.76,227.548 1236.33,227.863 1236.89,228.331 1237.46,228.423 1238.03,226.341 1238.6,227.574 1239.17,229.844 1239.74,231.828 1240.3,232.76 1240.87,233.741 1241.44,234.426 1242.01,237.387 1242.58,237.02 1243.15,235.546 1243.71,235.306 1244.28,232.049 1244.85,232.909 1245.42,233.57 1245.99,232.317 1246.56,231.147 1247.12,231.078 1247.69,232.076 1248.26,229.883 1248.83,228.896 1249.4,227.788 1249.97,228.852 1250.53,229.858 1251.1,230.15 1251.67,231.177 1252.24,230.001 1252.81,230.077 1253.38,228.979 1253.94,227.918 1254.51,229.208 1255.08,229.306 1255.65,229.46 1256.22,231.668 1256.79,232.451 1257.35,232.454 1257.92,233.127 1258.49,232.987 1259.06,232.76 1259.63,230.629 1260.2,231.659 1260.76,230.331 1261.33,229.304 1261.9,230.166 1262.47,230.211 1263.04,230.277 1263.61,230.038 1264.18,230.215 1264.74,229.318 1265.31,229.413 1265.88,230.358 1266.45,230.506 1267.02,232.606 1267.59,233.477 1268.15,232.176 1268.72,231.932 1269.29,231.67 1269.86,231.643 1270.43,228.458 1271,227.608 1271.56,227.741 1272.13,227.855 1272.7,223 1273.27,222.672 1273.84,223.169 1274.41,223.669 1274.97,226.135 1275.54,223.395 1276.11,223.911 1276.68,223.392 1277.25,223.933 1277.82,223.367 1278.38,224.991 1278.95,228.358 1279.52,229.459 1280.09,230.445 1280.66,229.373 1281.23,228.391 1281.79,228.573 1282.36,230.817 1282.93,230.774 1283.5,229.868 1284.07,232.241 1284.64,234.081 1285.2,235.031 1285.77,235.635 1286.34,235.327 1286.91,234.139 1287.48,234.922 1288.05,236.753 1288.61,236.372 1289.18,236.93 1289.75,235.524 1290.32,234.06 1290.89,233.787 1291.46,233.496 1292.02,234.541 1292.59,233.197 1293.16,231.865 1293.73,233.801 1294.3,232.414 1294.87,234.432 1295.43,235.013 1296,232.55 1296.57,232.129 1297.14,231.955 1297.71,229.659 1298.28,231.565 1298.84,231.279 1299.41,230.101 1299.98,229.769 1300.55,230.918 1301.12,229.65 1301.69,227.37 1302.25,223.303 1302.82,224.573 1303.39,225.776 1303.96,225.861 1304.53,226.183 1305.1,226.476 1305.66,223.713 1306.23,224.105 1306.8,224.449 1307.37,226.908 1307.94,225.125 1308.51,225.423 1309.07,223.617 1309.64,222.235 1310.21,222.639 1310.78,224.26 1311.35,224.424 1311.92,227.887 1312.48,227.071 1313.05,227.744 1313.62,225.907 1314.19,227.054 1314.76,227.259 1315.33,227.431 1315.89,227.498 1316.46,226.704 1317.03,226.861 1317.6,229.314 1318.17,229.206 1318.74,229.26 1319.3,228.474 1319.87,226.758 1320.44,227.959 1321.01,228.186 1321.58,227.375 1322.15,228.778 1322.71,228.024 1323.28,227.318 1323.85,227.463 1324.42,228.924 1324.99,226.819 1325.56,227.105 1326.12,228.399 1326.69,228.681 1327.26,230.891 1327.83,231.982 1328.4,231.934 1328.97,232.958 1329.53,231.819 1330.1,233.898 1330.67,232.758 1331.24,232.567 1331.81,231.158 1332.38,232.351 1332.94,234.476 1333.51,234.37 1334.08,234.046 1334.65,233.524 1335.22,231.991 1335.79,232.762 1336.36,233.408 1336.92,235.214 1337.49,237.89 1338.06,238.192 1338.63,237.607 1339.2,238.016 1339.77,238.669 1340.33,237.247 1340.9,235.41 1341.47,234.148 1342.04,232.838 1342.61,232.356 1343.18,232.051 1343.74,228.755 1344.31,228.451 1344.88,229.475 1345.45,229.32 1346.02,228.096 1346.59,228.034 1347.15,227.132 1347.72,225.311 1348.29,225.501 1348.86,227.941 1349.43,228.157 1350,228.314 1350.56,230.526 1351.13,231.315 1351.7,233.49 1352.27,232.987 1352.84,234.808 1353.41,232.498 1353.97,230.193 1354.54,230.213 1355.11,229.052 1355.68,229.104 1356.25,227.117 1356.82,226.295 1357.38,226.61 1357.95,225.855 1358.52,228.129 1359.09,228.333 1359.66,230.501 1360.23,227.502 1360.79,227.681 1361.36,227.764 1361.93,228.011 1362.5,229.267 1363.07,230.13 1363.64,231.972 1364.2,230.933 1364.77,229.664 1365.34,231.855 1365.91,231.67 1366.48,231.558 1367.05,230.433 1367.61,231.117 1368.18,230.194 1368.75,229.022 1369.32,228.168 1369.89,229.247 1370.46,230.272 1371.02,230.975 1371.59,231.978 1372.16,231.806 1372.73,231.491 1373.3,229.252 1373.87,229.3 1374.43,229.217 1375,229.036 1375.57,230.137 1376.14,229.072 1376.71,227.954 1377.28,231.207 1377.84,230.244 1378.41,229.181 1378.98,231.479 1379.55,231.487 1380.12,230.319 1380.69,231.229 1381.25,229.942 1381.82,229.916 1382.39,228.761 1382.96,229.569 1383.53,227.473 1384.1,226.584 1384.66,225.798 1385.23,226.188 1385.8,226.338 1386.37,230.623 1386.94,231.629 1387.51,233.639 1388.07,233.642 1388.64,232.425 1389.21,232.213 1389.78,232.006 1390.35,231.9 1390.92,230.765 1391.48,230.537 1392.05,230.641 1392.62,229.456 1393.19,231.861 1393.76,230.526 1394.33,228.36 1394.89,228.405 1395.46,227.508 1396.03,226.6 1396.6,227.726 1397.17,225.749 1397.74,227.101 1398.3,228.241 1398.87,226.456 1399.44,226.751 1400.01,226.865 1400.58,227.964 1401.15,229.141 1401.71,229.319 1402.28,228.246 1402.85,228.193 1403.42,228.275 1403.99,231.398 1404.56,230.178 1405.13,230.178 1405.69,230.193 1406.26,232.305 1406.83,232.059 1407.4,233.937 1407.97,233.555 1408.54,232.035 1409.1,233.119 1409.67,231.94 1410.24,230.821 1410.81,230.806 1411.38,231.849 1411.95,232.804 1412.51,233.52 1413.08,232.29 1413.65,233 1414.22,233.723 1414.79,234.261 1415.36,234.056 1415.92,233.648 1416.49,231.352 1417.06,232.158 1417.63,231.735 1418.2,229.519 1418.77,228.531 1419.33,228.851 1419.9,227.922 1420.47,227.927 1421.04,226.795 1421.61,224.807 1422.18,225.164 1422.74,224.689 1423.31,224.147 1423.88,224.486 1424.45,225.87 1425.02,227.157 1425.59,226.099 1426.15,227.263 1426.72,226.61 1427.29,227.606 1427.86,227.732 1428.43,226.777 1429,227.768 1429.56,226.897 1430.13,224.903 1430.7,226.425 1431.27,226.911 1431.84,227.128 1432.41,228.516 1432.97,229.666 1433.54,228.465 1434.11,227.468 1434.68,227.598 1435.25,229.837 1435.82,229.766 1436.38,229.892 1436.95,226.668 1437.52,225.689 1438.09,227.162 1438.66,229.246 1439.23,231.199 1439.79,232.188 1440.36,232.971 1440.93,234.776 1441.5,234.337 1442.07,233.97 1442.64,232.546 1443.2,232.305 1443.77,231.881 1444.34,230.714 1444.91,230.698 1445.48,229.772 1446.05,229.788 1446.61,229.811 1447.18,227.756 1447.75,227.964 1448.32,229.22 1448.89,228.1 1449.46,226.189 1450.02,228.5 1450.59,227.698 1451.16,228.964 1451.73,229.053 1452.3,228.051 1452.87,228.156 1453.43,226.011 1454,226.233 1454.57,228.298 1455.14,229.364 1455.71,226.458 1456.28,225.684 1456.84,224.579 1457.41,223.17 1457.98,226.607 1458.55,224.78 1459.12,225.183 1459.69,224.528 1460.25,225.125 1460.82,225.473 1461.39,225.615 1461.96,226.002 1462.53,227.549 1463.1,225.865 1463.66,229.064 1464.23,230.105 1464.8,231.196 1465.37,231.328 1465.94,230.241 1466.51,231.259 1467.07,232.232 1467.64,231.91 1468.21,230.752 1468.78,230.916 1469.35,233.034 1469.92,232.86 1470.48,234.573 1471.05,233.111 1471.62,232.887 1472.19,231.704 1472.76,230.514 1473.33,229.624 1473.89,230.737 1474.46,227.554 1475.03,229.745 1475.6,231.795 1476.17,231.316 1476.74,233.124 1477.31,233.051 1477.87,234.779 1478.44,235.67 1479.01,232.942 1479.58,232.708 1480.15,231.449 1480.72,229.404 1481.28,228.406 1481.85,227.325 1482.42,226.515 1482.99,227.023 1483.56,229.149 1484.13,228.011 1484.69,226.903 1485.26,229.268 1485.83,229.339 1486.4,229.218 1486.97,232.162 1487.54,232.044 1488.1,231.964 1488.67,232.007 1489.24,231.778 1489.81,230.67 1490.38,231.593 1490.95,232.429 1491.51,233.208 1492.08,232.775 1492.65,230.441 1493.22,228.603 1493.79,229.556 1494.36,230.66 1494.92,231.38 1495.49,231.263 1496.06,230.139 1496.63,231.009 1497.2,233.097 1497.77,232.92 1498.33,232.744 1498.9,232.419 1499.47,232.348 1500.04,231.879 1500.61,229.606 1501.18,228.747 1501.74,226.827 1502.31,228.747 1502.88,227.842 1503.45,228.96 1504.02,227.847 1504.59,228.974 1505.15,226.935 1505.72,227.109 1506.29,228.349 1506.86,229.511 1507.43,230.535 1508,231.563 1508.56,233.389 1509.13,230.003 1509.7,232.206 1510.27,234.119 1510.84,231.666 1511.41,231.359 1511.97,231.189 1512.54,229.153 1513.11,228.275 1513.68,228.386 1514.25,229.398 1514.82,228.301 1515.38,229.169 1515.95,226.993 1516.52,226.072 1517.09,226.276 1517.66,226.385 1518.23,225.605 1518.79,226.76 1519.36,228.768 1519.93,229.048 1520.5,230.208 1521.07,231.167 1521.64,230.078 1522.2,229.918 1522.77,226.574 1523.34,223.675 1523.91,225.149 1524.48,227.344 1525.05,228.734 1525.61,226.846 1526.18,226.916 1526.75,226.144 1527.32,225.71 1527.89,225.88 1528.46,227.943 1529.02,230.157 1529.59,232.145 1530.16,233.044 1530.73,231.798 1531.3,231.623 1531.87,232.709 1532.43,231.683 1533,231.78 1533.57,232.725 1534.14,231.67 1534.71,230.592 1535.28,230.549 1535.84,230.659 1536.41,229.708 1536.98,227.731 1537.55,224.877 1538.12,226.349 1538.69,225.499 1539.25,225.934 1539.82,225.24 1540.39,226.826 1540.96,226.16 1541.53,226.651 1542.1,227.979 1542.66,229.25 1543.23,229.302 1543.8,229.67 1544.37,226.782 1544.94,227.835 1545.51,227.899 1546.08,228.252 1546.64,229.52 1547.21,231.435 1547.78,231.372 1548.35,231.373 1548.92,231.387 1549.49,229.387 1550.05,230.302 1550.62,231.14 1551.19,229.973 1551.76,230.299 1552.33,233.308 1552.9,234.214 1553.46,232.93 1554.03,232.53 1554.6,231.119 1555.17,229.851 1555.74,229.88 1556.31,228.939 1556.87,230.044 1557.44,230.197 1558.01,230.267 1558.58,230.239 1559.15,230.421 1559.72,231.659 1560.28,232.648 1560.85,232.481 1561.42,232.24 1561.99,233.055 1562.56,231.912 1563.13,229.724 1563.69,229.728 1564.26,231.629 1564.83,232.476 1565.4,234.161 1565.97,233.879 1566.54,234.574 1567.1,234.21 1567.67,233.572 1568.24,233.288 1568.81,233.005 1569.38,231.908 1569.95,231.555 1570.51,233.394 1571.08,232.04 1571.65,231.837 1572.22,230.642 1572.79,230.337 1573.36,230.321 1573.92,231.172 1574.49,229.927 1575.06,230.852 1575.63,230.787 1576.2,232.92 1576.77,233.79 1577.33,233.433 1577.9,234.282 1578.47,230.737 1579.04,230.669 1579.61,232.686 1580.18,232.512 1580.74,234.107 1581.31,233.512 1581.88,235.129 1582.45,234.612 1583.02,235.139 1583.59,232.673 1584.15,232.244 1584.72,236.165 1585.29,235.503 1585.86,231.645 1586.43,231.086 1587,229.752 1587.56,229.799 1588.13,229.599 1588.7,230.331 1589.27,232.298 1589.84,230.058 1590.41,230.888 1590.97,230.877 1591.54,230.82 1592.11,230.493 1592.68,229.131 1593.25,228.035 1593.82,226.156 1594.38,225.382 1594.95,225.549 1595.52,223.779 1596.09,224.175 1596.66,223.569 1597.23,226.971 1597.79,227.234 1598.36,225.451 1598.93,225.68 1599.5,225.771 1600.07,225.149 1600.64,226.54 1601.2,225.796 1601.77,225.955 1602.34,227.231 1602.91,227.333 1603.48,225.541 1604.05,226.827 1604.61,224.833 1605.18,227.059 1605.75,227.076 1606.32,226.318 1606.89,226.539 1607.46,226.815 1608.02,224.912 1608.59,225.238 1609.16,226.654 1609.73,227.797 1610.3,227.867 1610.87,228.123 1611.43,229.19 1612,227.299 1612.57,227.441 1613.14,229.55 1613.71,228.583 1614.28,228.599 1614.84,229.926 1615.41,229.697 1615.98,229.594 1616.55,229.602 1617.12,228.439 1617.69,226.503 1618.26,225.88 1618.82,225.118 1619.39,224.453 1619.96,224.727 1620.53,226.999 1621.1,227.152 1621.67,224.387 1622.23,226.786 1622.8,229.247 1623.37,230.165 1623.94,230.179 1624.51,229.212 1625.08,227.145 1625.64,225.403 1626.21,225.815 1626.78,222.75 1627.35,223.69 1627.92,226.248 1628.49,226.848 1629.05,226.797 1629.62,225.808 1630.19,225.105 1630.76,226.47 1631.33,227.773 1631.9,227.033 1632.46,229.466 1633.03,230.403 1633.6,230.443 1634.17,230.429 1634.74,230.299 1635.31,228.292 1635.87,230.718 1636.44,230.774 1637.01,225.723 1637.58,226.896 1638.15,224.857 1638.72,223.409 1639.28,221.838 1639.85,222.445 1640.42,219.895 1640.99,221.807 1641.56,220.393 1642.13,223.247 1642.69,223.778 1643.26,225.369 1643.83,227.86 1644.4,230.454 1644.97,230.871 1645.54,230.884 1646.1,233.138 1646.67,234.135 1647.24,235.045 1647.81,233.989 1648.38,233.754 1648.95,233.503 1649.51,234.261 1650.08,233.151 1650.65,235.122 1651.22,234.815 1651.79,234.428 1652.36,235.209 1652.92,237.072 1653.49,234.504 1654.06,232.114 1654.63,230.045 1655.2,229.059 1655.77,227.222 1656.33,228.635 1656.9,227.583 1657.47,226.021 1658.04,228.066 1658.61,228.218 1659.18,229.354 1659.74,229.358 1660.31,229.39 1660.88,229.546 1661.45,229.775 1662.02,230.795 1662.59,230.998 1663.15,231.084 1663.72,231.1 1664.29,232.119 1664.86,233.27 1665.43,233.133 1666,237.11 1666.56,233.618 1667.13,235.593 1667.7,235.27 1668.27,234.867 1668.84,232.647 1669.41,232.472 1669.97,233.658 1670.54,235.538 1671.11,235.113 1671.68,236.862 1672.25,235.356 1672.82,236.347 1673.38,235.046 1673.95,232.761 1674.52,234.561 1675.09,235.194 1675.66,236.878 1676.23,235.319 1676.79,233.792 1677.36,233.634 1677.93,231.35 1678.5,233.304 1679.07,232.898 1679.64,232.635 1680.2,233.536 1680.77,230.185 1681.34,231.306 1681.91,232.284 1682.48,232.063 1683.05,231.068 1683.61,232.021 1684.18,231.774 1684.75,231.905 1685.32,230.57 1685.89,229.714 1686.46,228.751 1687.02,228.734 1687.59,225.579 1688.16,225.878 1688.73,225.042 1689.3,228.333 1689.87,227.33 1690.44,228.514 1691,227.503 1691.57,227.751 1692.14,226.858 1692.71,228.125 1693.28,229.596 1693.85,230.643 1694.41,230.376 1694.98,230.512 1695.55,229.383 1696.12,229.443 1696.69,227.012 1697.26,227.181 1697.82,227.304 1698.39,226.491 1698.96,225.587 1699.53,227.726 1700.1,226.884 1700.67,228.07 1701.23,226.411 1701.8,227.729 1702.37,228.835 1702.94,227.937 1703.51,229.928 1704.08,227.937 1704.64,229.228 1705.21,229.478 1705.78,230.593 1706.35,231.525 1706.92,232.429 1707.49,233.357 1708.05,233.075 1708.62,231.618 1709.19,233.567 1709.76,233.259 1710.33,233.065 1710.9,236.937 1711.46,236.123 1712.03,234.502 1712.6,235.295 1713.17,234.75 1713.74,236.36 1714.31,231.832 1714.87,231.566 1715.44,233.352 1716.01,234.983 1716.58,233.382 1717.15,233.061 1717.72,231.823 1718.28,231.548 1718.85,229.32 1719.42,229.064 1719.99,228.988 1720.56,227.885 1721.13,227.793 1721.69,230.97 1722.26,229.776 1722.83,228.276 1723.4,228.289 1723.97,227.101 1724.54,227.967 1725.1,229.774 1725.67,229.754 1726.24,227.671 1726.81,226.598 1727.38,225.637 1727.95,223.902 1728.51,224.254 1729.08,226.679 1729.65,227 1730.22,226.193 1730.79,224.374 1731.36,225.785 1731.92,227.208 1732.49,229.604 1733.06,229.224 1733.63,232.346 1734.2,233.072 1734.77,232.646 1735.33,233.606 1735.9,233.365 1736.47,231.966 1737.04,231.8 1737.61,231.695 1738.18,231.411 1738.74,229.152 1739.31,230.168 1739.88,231.233 1740.45,229.72 1741.02,232.864 1741.59,231.53 1742.15,231.16 1742.72,229.999 1743.29,229.739 1743.86,227.774 1744.43,225.624 1745,226.953 1745.56,227.248 1746.13,227.236 1746.7,227.123 1747.27,227.197 1747.84,229.286 1748.41,227.165 1748.97,228.489 1749.54,227.662 1750.11,226.719 1750.68,225.819 1751.25,225.913 1751.82,224.159 1752.38,226.449 1752.95,224.579 1753.52,226.811 1754.09,226.94 1754.66,228.117 1755.23,230.241 1755.79,230.163 1756.36,226.258 1756.93,228.609 1757.5,227.628 1758.07,229.842 1758.64,228.66 1759.21,227.807 1759.77,227.954 1760.34,227.012 1760.91,226.338 1761.48,226.511 1762.05,227.082 1762.62,225.112 1763.18,224.465 1763.75,221.766 1764.32,221.331 1764.89,222.059 1765.46,224.672 1766.03,228.482 1766.59,228.292 1767.16,229.536 1767.73,228.816 1768.3,227.932 1768.87,229.016 1769.44,230.021 1770,228.185 1770.57,230.595 1771.14,230.494 1771.71,228.406 1772.28,228.509 1772.85,224.479 1773.41,225.887 1773.98,226.219 1774.55,226.704 1775.12,226.067 1775.69,227.412 1776.26,227.758 1776.82,229.002 1777.39,229.154 1777.96,229.395 1778.53,229.756 1779.1,231.797 1779.67,231.952 1780.23,232.796 1780.8,233.839 1781.37,231.633 1781.94,230.587 1782.51,226.777 1783.08,226.006 1783.64,226.206 1784.21,228.472 1784.78,228.491 1785.35,230.606 1785.92,228.665 1786.49,229.945 1787.05,230.222 1787.62,230.384 1788.19,231.654 1788.76,230.532 1789.33,229.462 1789.9,230.317 1790.46,230.338 1791.03,228.233 1791.6,228.253 1792.17,230.878 1792.74,234.926 1793.31,236.775 1793.87,235.313 1794.44,234.073 1795.01,235.945 1795.58,234.743 1796.15,235.449 1796.72,238.251 1797.28,240.817 1797.85,240.987 1798.42,241.201 1798.99,241.387 1799.56,240.688 1800.13,237.967 1800.69,234.083 1801.26,233.742 1801.83,232.546 1802.4,232.23 1802.97,232.825 1803.54,231.614 1804.1,233.304 1804.67,232.158 1805.24,233.046 1805.81,232.582 1806.38,231.111 1806.95,231.069 1807.51,229.996 1808.08,230.865 1808.65,231.734 1809.22,231.411 1809.79,231.203 1810.36,231.166 1810.92,228.986 1811.49,231.832 1812.06,231.545 1812.63,230.409 1813.2,231.266 1813.77,232 1814.33,230.741 1814.9,235.683 1815.47,234.148 1816.04,232.792 1816.61,233.592 1817.18,233.249 1817.74,233.841 1818.31,233.258 1818.88,234.012 1819.45,234.31 1820.02,231.797 1820.59,230.646 1821.15,230.586 1821.72,230.367 1822.29,229.203 1822.86,228.165 1823.43,229.271 1824,229.117 1824.56,231.177 1825.13,230.948 1825.7,227.638 1826.27,229.843 1826.84,228.884 1827.41,231.005 1827.97,229.582 1828.54,229.451 1829.11,229.408 1829.68,230.528 1830.25,231.137 1830.82,231.023 1831.39,231.811 1831.95,232.543 1832.52,231.175 1833.09,227.919 1833.66,229.096 1834.23,227.994 1834.8,229.096 1835.36,230.077 1835.93,229.889 1836.5,228.595 1837.07,226.396 1837.64,228.488 1838.21,226.27 1838.77,226.251 1839.34,226.211 1839.91,226.285 1840.48,226.409 1841.05,225.296 1841.62,223.349 1842.18,224.727 1842.75,223.902 1843.32,224.226 1843.89,224.428 1844.46,222.615 1845.03,223.785 1845.59,227.21 1846.16,228.466 1846.73,228.63 1847.3,228.702 1847.87,225.552 1848.44,225.82 1849,226.04 1849.57,224.369 1850.14,224.812 1850.71,225.126 1851.28,226.496 1851.85,227.518 1852.41,229.737 1852.98,230.965 1853.55,229.759 1854.12,230.856 1854.69,227.778 1855.26,227.698 1855.82,226.934 1856.39,226.813 1856.96,227.325 1857.53,227.407 1858.1,227.453 1858.67,224.537 1859.23,226.815 1859.8,225.887 1860.37,225.041 1860.94,226.315 1861.51,225.642 1862.08,220.828 1862.64,221.643 1863.21,225.237 1863.78,226.806 1864.35,224.104 1864.92,224.558 1865.49,223.728 1866.05,223.046 1866.62,220.452 1867.19,222.131 1867.76,222.761 1868.33,222.289 1868.9,223.986 1869.46,223.675 1870.03,226.381 1870.6,226.753 1871.17,226.943 1871.74,228.154 1872.31,229.393 1872.87,230.667 1873.44,231.732 1874.01,231.589 1874.58,231.705 1875.15,231.649 1875.72,229.58 1876.28,229.642 1876.85,233.201 1877.42,234.185 1877.99,233.997 1878.56,232.678 1879.13,231.662 1879.69,232.852 1880.26,230.56 1880.83,228.453 1881.4,228.722 1881.97,229.006 1882.54,230.002 1883.1,228.152 1883.67,228.243 1884.24,228.726 1884.81,229.996 1885.38,230.951 1885.95,230.84 1886.51,229.902 1887.08,231.108 1887.65,229.95 1888.22,229.18 1888.79,230.505 1889.36,231.375 1889.92,231.488 1890.49,230.502 1891.06,229.455 1891.63,230.686 1892.2,231.687 1892.77,232.469 1893.33,233.24 1893.9,236.215 1894.47,236.62 1895.04,234.157 1895.61,235.931 1896.18,235.52 1896.74,235.246 1897.31,234.954 1897.88,236.52 1898.45,238.18 1899.02,234.364 1899.59,233.979 1900.16,231.635 1900.72,231.525 1901.29,233.31 1901.86,233.092 1902.43,232.801 1903,230.613 1903.57,227.581 1904.13,228.585 1904.7,226.596 1905.27,226.086 1905.84,226.37 1906.41,227.742 1906.98,227.893 1907.54,228.055 1908.11,227.127 1908.68,228.456 1909.25,229.391 1909.82,228.371 1910.39,227.517 1910.95,227.588 1911.52,227.879 1912.09,227.131 1912.66,226.266 1913.23,225.498 1913.8,225.828 1914.36,227.008 1914.93,228.183 1915.5,225.204 1916.07,224.278 1916.64,224.845 1917.21,227.293 1917.77,226.528 1918.34,229.265 1918.91,229.823 1919.48,229.165 1920.05,229.184 1920.62,232.275 1921.18,232.142 1921.75,231.135 1922.32,232.075 1922.89,232.923 1923.46,232.628 1924.03,231.641 1924.59,230.616 1925.16,232.59 1925.73,232.557 1926.3,234.639 1926.87,231.48 1927.44,229.388 1928,227.561 1928.57,227.794 1929.14,228.963 1929.71,229.125 1930.28,228.465 1930.85,229.722 1931.41,229.862 1931.98,229.879 1932.55,228.787 1933.12,230.712 1933.69,230.761 1934.26,228.687 1934.82,227.791 1935.39,229.041 1935.96,230.207 1936.53,229.153 1937.1,231.083 1937.67,233.058 1938.23,234.879 1938.8,236.494 1939.37,235.093 1939.94,234.665 1940.51,234.258 1941.08,232.987 1941.64,234.766 1942.21,236.305 1942.78,234.529 1943.35,231.995 1943.92,230.618 1944.49,232.526 1945.05,232.262 1945.62,231.327 1946.19,230.141 1946.76,229.134 1947.33,229.255 1947.9,227.952 1948.46,229.078 1949.03,228.276 1949.6,229.454 1950.17,231.368 1950.74,232.097 1951.31,230.688 1951.87,229.422 1952.44,228.601 1953.01,230.616 1953.58,230.37 1954.15,232.482 1954.72,232.309 1955.28,232.121 1955.85,231.874 1956.42,231.726 1956.99,231.779 1957.56,231.53 1958.13,229.414 1958.69,229.426 1959.26,232.549 1959.83,229.369 1960.4,230.28 1960.97,233.229 1961.54,233.002 1962.1,231.451 1962.67,230.4 1963.24,230.325 1963.81,230.148 1964.38,230.015 1964.95,229.986 1965.51,228.909 1966.08,228.738 1966.65,233.029 1967.22,232.523 1967.79,234.253 1968.36,233.931 1968.92,233.225 1969.49,233.837 1970.06,234.598 1970.63,234.192 1971.2,233.74 1971.77,233.266 1972.34,230.721 1972.9,230.485 1973.47,231.284 1974.04,233.185 1974.61,234.84 1975.18,236.423 1975.75,234.735 1976.31,234.254 1976.88,232.743 1977.45,232.36 1978.02,232.02 1978.59,230.629 1979.16,229.337 1979.72,230.277 1980.29,229.972 1980.86,227.681 1981.43,229.788 1982,228.787 1982.57,227.695 1983.13,226.725 1983.7,227.884 1984.27,226.969 1984.84,227.008 1985.41,227.124 1985.98,226.321 1986.54,226.213 1987.11,225.579 1987.68,225.806 1988.25,228.032 1988.82,227.922 1989.39,227.738 1989.95,228.765 1990.52,225.853 1991.09,227.131 1991.66,228.147 1992.23,229.36 1992.8,231.128 1993.36,231.019 1993.93,233.98 1994.5,233.751 1995.07,234.305 1995.64,235.063 1996.21,232.68 1996.77,233.326 1997.34,232.085 1997.91,228.666 1998.48,226.701 1999.05,227.836 1999.62,229.966 2000.18,229.71 2000.75,229.602 2001.32,228.496 2001.89,227.257 2002.46,227.146 2003.03,227.174 2003.59,226.046 2004.16,230.304 2004.73,230.259 2005.3,230.135 2005.87,230.88 2006.44,229.459 2007,227.457 2007.57,226.576 2008.14,227.634 2008.71,227.567 2009.28,227.829 2009.85,226.8 2010.41,228.164 2010.98,227.975 2011.55,228.073 2012.12,228.187 2012.69,228.094 2013.26,228.095 2013.82,225.971 2014.39,226.239 2014.96,227.408 2015.53,228.506 2016.1,231.644 2016.67,232.479 2017.23,232.177 2017.8,231.065 2018.37,226.721 2018.94,225.818 2019.51,226.072 2020.08,227.498 2020.64,227.553 2021.21,226.697 2021.78,227.733 2022.35,226.713 2022.92,226 2023.49,226.305 2024.05,225.467 2024.62,224.761 2025.19,223.131 2025.76,221.74 2026.33,223.354 2026.9,223.812 2027.46,225.329 2028.03,225.627 2028.6,226.89 2029.17,225.896 2029.74,225.402 2030.31,225.661 2030.87,226.941 2031.44,227.127 2032.01,225.255 2032.58,224.837 2033.15,225.285 2033.72,227.944 2034.28,227.953 2034.85,227.319 2035.42,227.663 2035.99,226.739 2036.56,227.953 2037.13,228.273 2037.69,230.65 2038.26,230.711 2038.83,230.61 2039.4,232.727 2039.97,230.506 2040.54,227.556 2041.11,226.779 2041.67,227.134 2042.24,227.289 2042.81,228.711 2043.38,227.889 2043.95,228.004 2044.52,230.397 2045.08,230.368 2045.65,230.357 2046.22,229.397 2046.79,229.618 2047.36,231.577 2047.93,231.65 2048.49,231.688 2049.06,231.53 2049.63,231.541 2050.2,230.375 2050.77,230.383 2051.34,229.444 2051.9,232.458 2052.47,234.301 2053.04,232.133 2053.61,230.916 2054.18,229.675 2054.75,227.738 2055.31,224.875 2055.88,225.27 2056.45,227.793 2057.02,229.898 2057.59,230.03 2058.16,229.817 2058.72,230.113 2059.29,229.121 2059.86,230.526 2060.43,230.535 2061,231.564 2061.57,232.042 2062.13,229.655 2062.7,230.92 2063.27,232.129 2063.84,232.158 2064.41,232.078 2064.98,233.131 2065.54,232.972 2066.11,235.154 2066.68,233.682 2067.25,234.349 2067.82,232.997 2068.39,228.522 2068.95,228.557 2069.52,228.81 2070.09,229.807 2070.66,230.725 2071.23,230.792 2071.8,229.873 2072.36,229.941 2072.93,229.944 2073.5,230.797 2074.07,232.845 2074.64,232.601 2075.21,234.497 2075.77,235.281 2076.34,232.966 2076.91,230.934 2077.48,229.889 2078.05,229.863 2078.62,229.52 2079.18,230.338 2079.75,230.29 2080.32,229.146 2080.89,230.243 2081.46,232.589 2082.03,233.372 2082.59,233.052 2083.16,232.731 2083.73,233.586 2084.3,233.24 2084.87,232.166 2085.44,230.673 2086,230.37 2086.57,231.262 2087.14,231.135 2087.71,232.079 2088.28,231.984 2088.85,231.606 2089.41,232.625 2089.98,232.499 2090.55,232.366 2091.12,231.887 2091.69,231.631 2092.26,231.417 2092.82,233.336 2093.39,231.052 2093.96,230.888 2094.53,232.5 2095.1,232.146 2095.67,231.879 2096.23,232.523 2096.8,232.325 2097.37,231.984 2097.94,231.551 2098.51,230.234 2099.08,230.054 2099.64,228.903 2100.21,228.025 2100.78,227.85 2101.35,229.836 2101.92,227.75 2102.49,226.653 2103.05,224.738 2103.62,225.057 2104.19,228.475 2104.76,229.475 2105.33,230.541 2105.9,231.444 2106.46,232.313 2107.03,231.103 2107.6,231.048 2108.17,227.722 2108.74,228.731 2109.31,229.781 2109.87,229.463 2110.44,231.412 2111.01,231.073 2111.58,227.806 2112.15,225.846 2112.72,225.154 2113.29,227.446 2113.85,226.39 2114.42,226.466 2114.99,226.772 2115.56,228.118 2116.13,230.271 2116.7,230.189 2117.26,230.952 2117.83,229.903 2118.4,227.967 2118.97,228.057 2119.54,227.13 2120.11,227.303 2120.67,228.325 2121.24,227.351 2121.81,227.481 2122.38,230.573 2122.95,230.328 2123.52,230.198 2124.08,230.237 2124.65,231.245 2125.22,232.114 2125.79,232.152 2126.36,229.819 2126.93,229.682 2127.49,229.759 2128.06,230.747 2128.63,228.389 2129.2,228.35 2129.77,228.366 2130.34,226.347 2130.9,227.742 2131.47,227.78 2132.04,225.757 2132.61,224.856 2133.18,226.048 2133.75,227.186 2134.31,228.444 2134.88,229.666 2135.45,228.704 2136.02,228.507 2136.59,227.618 2137.16,228.776 2137.72,228.707 2138.29,230.966 2138.86,229.805 2139.43,229.813 2140,230.711 2140.57,230.742 2141.13,229.65 2141.7,229.841 2142.27,228.848 2142.84,227.883 2143.41,229.057 2143.98,227.909 2144.54,227.802 2145.11,228.129 2145.68,229.393 2146.25,230.407 2146.82,228.366 2147.39,227.575 2147.95,227.748 2148.52,227.768 2149.09,228.786 2149.66,228.842 2150.23,231.044 2150.8,229.992 2151.36,230.884 2151.93,227.552 2152.5,231.677 2153.07,232.526 2153.64,232.258 2154.21,229.913 2154.77,231.1 2155.34,229.934 2155.91,228.871 2156.48,229.961 2157.05,226.85 2157.62,225.874 2158.18,225.232 2158.75,228.656 2159.32,228.659 2159.89,227.937 \"/>\n<path clip-path=\"url(#clip510)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip510)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip510)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip510)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.029 ± 0.021\n  with uncertainty of ± 0.0019328338261263278\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01481 ± (0.00380743, 0.00403361) (MC)\n  95% confidence interval: [-4.02316, -4.00741]) (MC)\n  linear error propagation: -4.01561 ± 0.00401057\n  |δ_y| = |0.00263443| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014810655305322, val_l = 0.008353418161425985, val_u = 0.007397905220381418)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip540\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip540)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip541\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip540)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip542\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip540)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1154.81 2211.02,1154.81 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1005.37 2211.02,1005.37 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,855.93 2211.02,855.93 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,706.49 2211.02,706.49 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,557.05 2211.02,557.05 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,407.611 2211.02,407.611 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,258.171 2211.02,258.171 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1154.81 365.751,1154.81 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1005.37 365.751,1005.37 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,855.93 365.751,855.93 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,706.49 365.751,706.49 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,557.05 365.751,557.05 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,407.611 365.751,407.611 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,258.171 365.751,258.171 \"/>\n<path clip-path=\"url(#clip540)\" d=\"M298.909 1140.61 Q295.298 1140.61 293.469 1144.17 Q291.664 1147.71 291.664 1154.84 Q291.664 1161.95 293.469 1165.51 Q295.298 1169.06 298.909 1169.06 Q302.543 1169.06 304.349 1165.51 Q306.177 1161.95 306.177 1154.84 Q306.177 1147.71 304.349 1144.17 Q302.543 1140.61 298.909 1140.61 M298.909 1136.9 Q304.719 1136.9 307.775 1141.51 Q310.853 1146.09 310.853 1154.84 Q310.853 1163.57 307.775 1168.18 Q304.719 1172.76 298.909 1172.76 Q293.099 1172.76 290.02 1168.18 Q286.964 1163.57 286.964 1154.84 Q286.964 1146.09 290.02 1141.51 Q293.099 1136.9 298.909 1136.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M259.557 1018.71 L267.196 1018.71 L267.196 992.349 L258.886 994.015 L258.886 989.756 L267.15 988.089 L271.826 988.089 L271.826 1018.71 L279.465 1018.71 L279.465 1022.65 L259.557 1022.65 L259.557 1018.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M298.909 991.168 Q295.298 991.168 293.469 994.733 Q291.664 998.274 291.664 1005.4 Q291.664 1012.51 293.469 1016.08 Q295.298 1019.62 298.909 1019.62 Q302.543 1019.62 304.349 1016.08 Q306.177 1012.51 306.177 1005.4 Q306.177 998.274 304.349 994.733 Q302.543 991.168 298.909 991.168 M298.909 987.464 Q304.719 987.464 307.775 992.071 Q310.853 996.654 310.853 1005.4 Q310.853 1014.13 307.775 1018.74 Q304.719 1023.32 298.909 1023.32 Q293.099 1023.32 290.02 1018.74 Q286.964 1014.13 286.964 1005.4 Q286.964 996.654 290.02 992.071 Q293.099 987.464 298.909 987.464 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M262.775 869.275 L279.094 869.275 L279.094 873.21 L257.15 873.21 L257.15 869.275 Q259.812 866.52 264.395 861.89 Q269.002 857.238 270.182 855.895 Q272.428 853.372 273.307 851.636 Q274.21 849.876 274.21 848.187 Q274.21 845.432 272.266 843.696 Q270.344 841.96 267.242 841.96 Q265.043 841.96 262.59 842.724 Q260.159 843.488 257.381 845.039 L257.381 840.316 Q260.205 839.182 262.659 838.603 Q265.113 838.025 267.15 838.025 Q272.52 838.025 275.715 840.71 Q278.909 843.395 278.909 847.886 Q278.909 850.015 278.099 851.937 Q277.312 853.835 275.205 856.427 Q274.627 857.099 271.525 860.316 Q268.423 863.511 262.775 869.275 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M298.909 841.728 Q295.298 841.728 293.469 845.293 Q291.664 848.835 291.664 855.964 Q291.664 863.071 293.469 866.636 Q295.298 870.177 298.909 870.177 Q302.543 870.177 304.349 866.636 Q306.177 863.071 306.177 855.964 Q306.177 848.835 304.349 845.293 Q302.543 841.728 298.909 841.728 M298.909 838.025 Q304.719 838.025 307.775 842.631 Q310.853 847.214 310.853 855.964 Q310.853 864.691 307.775 869.298 Q304.719 873.881 298.909 873.881 Q293.099 873.881 290.02 869.298 Q286.964 864.691 286.964 855.964 Q286.964 847.214 290.02 842.631 Q293.099 838.025 298.909 838.025 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M272.914 705.136 Q276.27 705.853 278.145 708.122 Q280.043 710.391 280.043 713.724 Q280.043 718.84 276.525 721.64 Q273.006 724.441 266.525 724.441 Q264.349 724.441 262.034 724.002 Q259.742 723.585 257.289 722.728 L257.289 718.215 Q259.233 719.349 261.548 719.927 Q263.863 720.506 266.386 720.506 Q270.784 720.506 273.076 718.77 Q275.39 717.034 275.39 713.724 Q275.39 710.668 273.238 708.955 Q271.108 707.219 267.289 707.219 L263.261 707.219 L263.261 703.377 L267.474 703.377 Q270.923 703.377 272.752 702.011 Q274.58 700.622 274.58 698.029 Q274.58 695.367 272.682 693.955 Q270.807 692.52 267.289 692.52 Q265.367 692.52 263.168 692.937 Q260.969 693.354 258.33 694.233 L258.33 690.067 Q260.992 689.326 263.307 688.955 Q265.645 688.585 267.705 688.585 Q273.029 688.585 276.131 691.016 Q279.233 693.423 279.233 697.543 Q279.233 700.414 277.59 702.404 Q275.946 704.372 272.914 705.136 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M298.909 692.289 Q295.298 692.289 293.469 695.854 Q291.664 699.395 291.664 706.525 Q291.664 713.631 293.469 717.196 Q295.298 720.738 298.909 720.738 Q302.543 720.738 304.349 717.196 Q306.177 713.631 306.177 706.525 Q306.177 699.395 304.349 695.854 Q302.543 692.289 298.909 692.289 M298.909 688.585 Q304.719 688.585 307.775 693.192 Q310.853 697.775 310.853 706.525 Q310.853 715.252 307.775 719.858 Q304.719 724.441 298.909 724.441 Q293.099 724.441 290.02 719.858 Q286.964 715.252 286.964 706.525 Q286.964 697.775 290.02 693.192 Q293.099 688.585 298.909 688.585 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M271.594 543.845 L259.789 562.293 L271.594 562.293 L271.594 543.845 M270.367 539.77 L276.247 539.77 L276.247 562.293 L281.177 562.293 L281.177 566.182 L276.247 566.182 L276.247 574.33 L271.594 574.33 L271.594 566.182 L255.992 566.182 L255.992 561.669 L270.367 539.77 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M298.909 542.849 Q295.298 542.849 293.469 546.414 Q291.664 549.956 291.664 557.085 Q291.664 564.192 293.469 567.756 Q295.298 571.298 298.909 571.298 Q302.543 571.298 304.349 567.756 Q306.177 564.192 306.177 557.085 Q306.177 549.956 304.349 546.414 Q302.543 542.849 298.909 542.849 M298.909 539.145 Q304.719 539.145 307.775 543.752 Q310.853 548.335 310.853 557.085 Q310.853 565.812 307.775 570.418 Q304.719 575.002 298.909 575.002 Q293.099 575.002 290.02 570.418 Q286.964 565.812 286.964 557.085 Q286.964 548.335 290.02 543.752 Q293.099 539.145 298.909 539.145 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M258.793 390.331 L277.15 390.331 L277.15 394.266 L263.076 394.266 L263.076 402.738 Q264.094 402.391 265.113 402.229 Q266.131 402.044 267.15 402.044 Q272.937 402.044 276.316 405.215 Q279.696 408.386 279.696 413.803 Q279.696 419.382 276.224 422.483 Q272.752 425.562 266.432 425.562 Q264.256 425.562 261.988 425.192 Q259.742 424.821 257.335 424.081 L257.335 419.382 Q259.418 420.516 261.641 421.071 Q263.863 421.627 266.34 421.627 Q270.344 421.627 272.682 419.521 Q275.02 417.414 275.02 413.803 Q275.02 410.192 272.682 408.085 Q270.344 405.979 266.34 405.979 Q264.465 405.979 262.59 406.396 Q260.738 406.812 258.793 407.692 L258.793 390.331 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M298.909 393.41 Q295.298 393.41 293.469 396.974 Q291.664 400.516 291.664 407.646 Q291.664 414.752 293.469 418.317 Q295.298 421.858 298.909 421.858 Q302.543 421.858 304.349 418.317 Q306.177 414.752 306.177 407.646 Q306.177 400.516 304.349 396.974 Q302.543 393.41 298.909 393.41 M298.909 389.706 Q304.719 389.706 307.775 394.312 Q310.853 398.896 310.853 407.646 Q310.853 416.372 307.775 420.979 Q304.719 425.562 298.909 425.562 Q293.099 425.562 290.02 420.979 Q286.964 416.372 286.964 407.646 Q286.964 398.896 290.02 394.312 Q293.099 389.706 298.909 389.706 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M269.326 256.308 Q266.178 256.308 264.326 258.461 Q262.497 260.613 262.497 264.363 Q262.497 268.09 264.326 270.266 Q266.178 272.419 269.326 272.419 Q272.474 272.419 274.303 270.266 Q276.154 268.09 276.154 264.363 Q276.154 260.613 274.303 258.461 Q272.474 256.308 269.326 256.308 M278.608 241.655 L278.608 245.914 Q276.849 245.081 275.043 244.641 Q273.261 244.201 271.502 244.201 Q266.872 244.201 264.418 247.326 Q261.988 250.451 261.641 256.771 Q263.006 254.757 265.066 253.692 Q267.127 252.604 269.603 252.604 Q274.812 252.604 277.821 255.775 Q280.853 258.924 280.853 264.363 Q280.853 269.687 277.705 272.905 Q274.557 276.123 269.326 276.123 Q263.33 276.123 260.159 271.539 Q256.988 266.933 256.988 258.206 Q256.988 250.012 260.877 245.151 Q264.766 240.266 271.316 240.266 Q273.076 240.266 274.858 240.613 Q276.664 240.961 278.608 241.655 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M298.909 243.97 Q295.298 243.97 293.469 247.535 Q291.664 251.076 291.664 258.206 Q291.664 265.312 293.469 268.877 Q295.298 272.419 298.909 272.419 Q302.543 272.419 304.349 268.877 Q306.177 265.312 306.177 258.206 Q306.177 251.076 304.349 247.535 Q302.543 243.97 298.909 243.97 M298.909 240.266 Q304.719 240.266 307.775 244.873 Q310.853 249.456 310.853 258.206 Q310.853 266.933 307.775 271.539 Q304.719 276.123 298.909 276.123 Q293.099 276.123 290.02 271.539 Q286.964 266.933 286.964 258.206 Q286.964 249.456 290.02 244.873 Q293.099 240.266 298.909 240.266 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip542)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1044.7 400.199,1058.95 400.786,964.021 401.372,871.389 401.958,786.495 402.545,710.656 403.131,641.432 403.718,576.582 404.304,519.277 404.891,469.014 405.477,421.94 406.063,381.213 406.65,343.237 407.236,309.418 407.823,279.488 408.409,253.191 408.995,290.168 409.582,268.811 410.168,249.702 410.755,233.461 411.341,219.895 411.927,251.316 412.514,241.987 413.1,270.389 413.687,329.833 414.273,380.367 414.86,425.61 415.446,418.061 416.032,411.723 416.619,407.58 417.205,404.051 417.792,422.497 418.378,422.763 418.964,441.434 419.551,442.19 420.137,443.831 420.724,476.028 421.31,478.165 421.896,481.105 422.483,497.099 423.069,537.132 423.656,541.608 424.242,556.348 424.829,563.19 425.415,569.812 426.001,585.599 426.588,592.646 427.174,600.202 427.761,615.34 428.347,630.16 428.933,651.291 429.52,658.166 430.106,678.463 430.693,691.395 431.279,704.028 431.865,722.074 432.452,734.693 433.038,741.346 433.625,758.325 434.211,764.802 434.798,785.608 435.384,800.484 435.97,811.012 436.557,817.228 437.143,835.027 437.73,843.942 438.316,849.21 438.902,858.742 439.489,868.096 440.075,876.743 440.662,891.986 441.248,897.193 441.835,905.725 442.421,916.765 443.007,931.026 443.594,935.738 444.18,946.083 444.767,950.668 445.353,960.809 445.939,965.027 446.526,972.171 447.112,973.874 447.699,983.579 448.285,990.383 448.871,997.092 449.458,1003.9 450.044,1010.36 450.631,1016.55 451.217,1022.99 451.804,1029.03 452.39,1035.05 452.976,1045.54 453.563,1053.77 454.149,1057.27 454.736,1067.04 455.322,1072.05 455.908,1075.45 456.495,1082.23 457.081,1087.59 457.668,1090.51 458.254,1095.59 458.84,1103.79 459.427,1109.9 460.013,1112.27 460.6,1121.69 461.186,1130.85 461.773,1134.69 462.359,1141.68 462.945,1146.38 463.532,1151.56 464.118,1154.56 464.705,1158.83 465.291,1161.59 465.877,1164.13 466.464,1168.56 467.05,1171.26 467.637,1173.91 468.223,1177.02 468.809,1181.1 469.396,1182.03 469.982,1184.79 470.569,1190.2 471.155,1189.27 471.742,1189.06 472.328,1191.6 472.914,1194.04 473.501,1194.95 474.087,1198.8 474.674,1200.84 475.26,1202.78 475.846,1203.53 476.433,1206.92 477.019,1209.09 477.606,1209.55 478.192,1209.98 478.778,1211.96 479.365,1210.9 479.951,1213.91 480.538,1215.77 481.124,1216.08 481.711,1216.25 482.297,1218.04 482.883,1220.82 483.47,1223.71 484.056,1225.01 484.643,1226.06 485.229,1224.67 485.815,1223.29 486.402,1226.17 486.988,1227.37 487.575,1232.83 488.161,1232.56 488.748,1233.9 489.334,1237.64 489.92,1239.63 490.507,1237.7 491.093,1239.84 491.68,1239.04 492.266,1237.24 492.852,1237.86 493.439,1238.61 494.025,1239.01 494.612,1238.49 495.198,1240.67 495.784,1239.55 496.371,1238.93 496.957,1237.21 497.544,1236.88 498.13,1233.86 498.717,1234.75 499.303,1235.96 499.889,1239.6 500.476,1241.73 501.062,1241.06 501.649,1240.8 502.235,1241.61 502.821,1239.65 503.408,1241.67 503.994,1242.96 504.581,1242.55 505.167,1241.95 505.753,1244.12 506.34,1240.99 506.926,1241.65 507.513,1239.72 508.099,1240.73 508.686,1240.42 509.272,1239.02 509.858,1238.63 510.445,1235.85 511.031,1236.99 511.618,1238.08 512.204,1238.99 512.79,1240.25 513.377,1241.41 513.963,1241.05 514.55,1241.96 515.136,1243.02 515.722,1242.59 516.309,1244.71 516.895,1243.9 517.482,1246.05 518.068,1245.68 518.655,1245.29 519.241,1244.77 519.827,1244.42 520.414,1243.7 521,1241.73 521.587,1242.66 522.173,1242.19 522.759,1240.74 523.346,1240.46 523.932,1243.95 524.519,1243.4 525.105,1243.02 525.691,1243.85 526.278,1244.38 526.864,1242.74 527.451,1242.05 528.037,1241.42 528.624,1240.85 529.21,1241.64 529.796,1239.75 530.383,1240.91 530.969,1241.77 531.556,1241.25 532.142,1243.35 532.728,1241.44 533.315,1242.24 533.901,1242.71 534.488,1242.22 535.074,1242.91 535.661,1243.34 536.247,1242.65 536.833,1241.93 537.42,1242.64 538.006,1244.59 538.593,1242.6 539.179,1243.2 539.765,1243.77 540.352,1245.56 540.938,1248.55 541.525,1248.78 542.111,1250 542.697,1249.02 543.284,1250.53 543.87,1247.13 544.457,1245.24 545.043,1242.03 545.63,1244.11 546.216,1243.36 546.802,1242.78 547.389,1238.58 547.975,1237.97 548.562,1240.18 549.148,1242.18 549.734,1239.05 550.321,1237.4 550.907,1238.77 551.494,1237.22 552.08,1238.25 552.666,1236.46 553.253,1238.67 553.839,1239.51 554.426,1237.83 555.012,1237.57 555.599,1237.18 556.185,1236.78 556.771,1237.65 557.358,1234.78 557.944,1236 558.531,1236.84 559.117,1233.15 559.703,1231.68 560.29,1231.48 560.876,1230.15 561.463,1232.43 562.049,1233.65 562.635,1232.32 563.222,1230.75 563.808,1229.68 564.395,1228.4 564.981,1231.2 565.568,1233.88 566.154,1234.9 566.74,1234.82 567.327,1236.98 567.913,1237.72 568.5,1238.66 569.086,1236.91 569.672,1237.58 570.259,1239.49 570.845,1238.62 571.432,1235.4 572.018,1235.96 572.605,1234.11 573.191,1235.2 573.777,1235.97 574.364,1238.3 574.95,1236.42 575.537,1234.75 576.123,1234.75 576.709,1232.01 577.296,1233.26 577.882,1235.33 578.469,1233.64 579.055,1233.44 579.641,1235.83 580.228,1236.65 580.814,1235.84 581.401,1236.67 581.987,1237.47 582.574,1238.2 583.16,1239.02 583.746,1238.34 584.333,1237.7 584.919,1234.71 585.506,1235.54 586.092,1235.2 586.678,1237.32 587.265,1238.29 587.851,1237.74 588.438,1237.13 589.024,1237.83 589.61,1234.87 590.197,1235.45 590.783,1234.62 591.37,1233.02 591.956,1232.72 592.543,1232.54 593.129,1233.65 593.715,1236.88 594.302,1238.75 594.888,1234.09 595.475,1235.04 596.061,1232.15 596.647,1232.93 597.234,1233.95 597.82,1233.52 598.407,1234.54 598.993,1233.9 599.579,1232.24 600.166,1231.71 600.752,1231.49 601.339,1228.69 601.925,1229.88 602.512,1229.6 603.098,1229.16 603.684,1230.06 604.271,1228.84 604.857,1229.95 605.444,1229.7 606.03,1229.46 606.616,1232.89 607.203,1232.82 607.789,1231.1 608.376,1232.02 608.962,1231.89 609.548,1230.5 610.135,1229.25 610.721,1226.59 611.308,1224.36 611.894,1224.37 612.481,1222.02 613.067,1224.59 613.653,1224.57 614.24,1227 614.826,1228.18 615.413,1229.25 615.999,1227.79 616.585,1226.43 617.172,1225.26 617.758,1224.14 618.345,1226.66 618.931,1231.19 619.518,1229.6 620.104,1230.29 620.69,1228.35 621.277,1225.71 621.863,1224.31 622.45,1228.07 623.036,1227.85 623.622,1227.61 624.209,1229.97 624.795,1229.66 625.382,1231.74 625.968,1235.05 626.554,1236.81 627.141,1235.05 627.727,1231.89 628.314,1231.45 628.9,1231.14 629.487,1233.25 630.073,1231.35 630.659,1233.09 631.246,1232.41 631.832,1232.11 632.419,1228.26 633.005,1227.76 633.591,1225.44 634.178,1225.39 634.764,1224.13 635.351,1223.03 635.937,1220.68 636.523,1221.96 637.11,1221.67 637.696,1222.8 638.283,1222.92 638.869,1223.92 639.456,1223.87 640.042,1222.77 640.628,1223.83 641.215,1223.87 641.801,1222.44 642.388,1223.75 642.974,1224.77 643.56,1223.3 644.147,1225.63 644.733,1225.23 645.32,1224.78 645.906,1223.3 646.492,1221.75 647.079,1222.83 647.665,1225.47 648.252,1221.59 648.838,1221.76 649.425,1221.86 650.011,1221.85 650.597,1222.25 651.184,1222.08 651.77,1225.39 652.357,1226.18 652.943,1224.44 653.529,1225.76 654.116,1225.61 654.702,1225.22 655.289,1226.19 655.875,1227.29 656.462,1228.35 657.048,1229.3 657.634,1231.48 658.221,1229.95 658.807,1230.68 659.394,1229.93 659.98,1230.52 660.566,1233.49 661.153,1233.01 661.739,1232.51 662.326,1231.67 662.912,1231.12 663.498,1230.45 664.085,1230.13 664.671,1230.44 665.258,1227.57 665.844,1229.69 666.431,1228.01 667.017,1227.38 667.603,1229.54 668.19,1228.07 668.776,1227.67 669.363,1226.25 669.949,1226.17 670.535,1225.71 671.122,1226.47 671.708,1222.55 672.295,1223.69 672.881,1228.17 673.467,1227.93 674.054,1231.18 674.64,1231.81 675.227,1231.21 675.813,1231 676.4,1232.15 676.986,1235.14 677.572,1232.97 678.159,1232.53 678.745,1229.52 679.332,1229.04 679.918,1231 680.504,1230.28 681.091,1227.66 681.677,1227.35 682.264,1227.99 682.85,1230.03 683.436,1230.75 684.023,1229.06 684.609,1231.35 685.196,1230.74 685.782,1230.05 686.369,1229.5 686.955,1227.85 687.541,1224.04 688.128,1223.92 688.714,1222.63 689.301,1222.73 689.887,1222.45 690.473,1222.5 691.06,1221.29 691.646,1222.3 692.233,1224.44 692.819,1224.09 693.405,1222.58 693.992,1222.59 694.578,1221.09 695.165,1218.53 695.751,1217.41 696.338,1218.76 696.924,1218.7 697.51,1220.25 698.097,1219 698.683,1217.88 699.27,1215.46 699.856,1215.51 700.442,1216.82 701.029,1218.47 701.615,1217.32 702.202,1217.19 702.788,1214.86 703.375,1219.04 703.961,1220.48 704.547,1221.97 705.134,1223.04 705.72,1224.21 706.307,1224.22 706.893,1224.04 707.479,1222.38 708.066,1224.49 708.652,1225.35 709.239,1224.06 709.825,1223.79 710.411,1222.23 710.998,1219.87 711.584,1221.06 712.171,1219.73 712.757,1219.75 713.344,1218.42 713.93,1218.72 714.516,1213.95 715.103,1214.09 715.689,1216.83 716.276,1218.29 716.862,1219.66 717.448,1219.79 718.035,1217.51 718.621,1217.6 719.208,1216.7 719.794,1220.45 720.38,1222.67 720.967,1222.41 721.553,1221.11 722.14,1224.58 722.726,1222.92 723.313,1222.61 723.899,1222.55 724.485,1222.41 725.072,1224.66 725.658,1224.39 726.245,1225.46 726.831,1224.04 727.417,1222.6 728.004,1222.38 728.59,1222.29 729.177,1224.67 729.763,1222.99 730.349,1225.16 730.936,1225.99 731.522,1224.18 732.109,1222.73 732.695,1222.47 733.282,1222.33 733.868,1223.27 734.454,1226.64 735.041,1225.25 735.627,1224.9 736.214,1226.23 736.8,1224.68 737.386,1223.63 737.973,1224.66 738.559,1223.16 739.146,1221.88 739.732,1222.98 740.318,1221.39 740.905,1219.88 741.491,1218.61 742.078,1219.67 742.664,1223.26 743.251,1225.35 743.837,1221.45 744.423,1218.99 745.01,1216.82 745.596,1215.53 746.183,1216.99 746.769,1215.83 747.355,1215.86 747.942,1216.11 748.528,1215.08 749.115,1212.94 749.701,1214.67 750.288,1213.44 750.874,1212.31 751.46,1213.65 752.047,1212.7 752.633,1212.98 753.22,1210.91 753.806,1212.53 754.392,1211.45 754.979,1211.93 755.565,1211.02 756.152,1211.29 756.738,1214.28 757.324,1215.7 757.911,1215.58 758.497,1219.4 759.084,1221.82 759.67,1221.6 760.257,1222.7 760.843,1222.5 761.429,1219.92 762.016,1220.82 762.602,1223.13 763.189,1223.08 763.775,1222.9 764.361,1221.17 764.948,1221.05 765.534,1223.35 766.121,1219.53 766.707,1221.97 767.293,1224.37 767.88,1225.36 768.466,1225.07 769.053,1223.6 769.639,1226.86 770.226,1225.35 770.812,1222.86 771.398,1221.31 771.985,1223.45 772.571,1222.95 773.158,1221.4 773.744,1222.52 774.33,1222.33 774.917,1223.11 775.503,1223.68 776.09,1220.87 776.676,1220.43 777.262,1219.17 777.849,1220.44 778.435,1219.17 779.022,1218.79 779.608,1218.76 780.195,1217.32 780.781,1218.41 781.367,1221.17 781.954,1218.59 782.54,1218.58 783.127,1218.46 783.713,1218.58 784.299,1215.99 784.886,1216.19 785.472,1216.67 786.059,1216.66 786.645,1216.89 787.232,1214.41 787.818,1214.64 788.404,1213.66 788.991,1211.69 789.577,1211.99 790.164,1210.99 790.75,1212.63 791.336,1210.27 791.923,1210.53 792.509,1209.61 793.096,1210.35 793.682,1209.59 794.268,1212.53 794.855,1215.21 795.441,1214.12 796.028,1214.43 796.614,1212.29 797.201,1211.25 797.787,1212.57 798.373,1212.72 798.96,1212.59 799.546,1212.9 800.133,1213.04 800.719,1214.52 801.305,1216.11 801.892,1217.57 802.478,1217.59 803.065,1219.71 803.651,1218.36 804.237,1218.26 804.824,1218.07 805.41,1219.08 805.997,1220.19 806.583,1220.19 807.17,1222.49 807.756,1221.06 808.342,1220.99 808.929,1218.41 809.515,1216.1 810.102,1216.2 810.688,1217.33 811.274,1220.86 811.861,1221.79 812.447,1221.54 813.034,1218.85 813.62,1216.54 814.206,1217.94 814.793,1217.94 815.379,1215.28 815.966,1216.75 816.552,1216.65 817.139,1216.72 817.725,1214.48 818.311,1216.83 818.898,1214.21 819.484,1213.04 820.071,1210.85 820.657,1213.48 821.243,1214.95 821.83,1214.83 822.416,1214.78 823.003,1214.96 823.589,1217.79 824.175,1219.06 824.762,1218.1 825.348,1216.85 825.935,1216.74 826.521,1215.66 827.108,1215.7 827.694,1218.24 828.28,1217.28 828.867,1215.81 829.453,1217.2 830.04,1214.86 830.626,1214.96 831.212,1215.15 831.799,1216.3 832.385,1216.19 832.972,1217.63 833.558,1217.75 834.145,1215.42 834.731,1218.1 835.317,1218.21 835.904,1218.67 836.49,1218.41 837.077,1217.16 837.663,1218.18 838.249,1218.23 838.836,1219.61 839.422,1220.59 840.009,1218.3 840.595,1218.09 841.181,1218.03 841.768,1216.73 842.354,1216.93 842.941,1218.25 843.527,1218.5 844.114,1218.44 844.7,1219.4 845.286,1220.36 845.873,1218.95 846.459,1221.31 847.046,1218.38 847.632,1216.09 848.218,1217.49 848.805,1215.05 849.391,1213.99 849.978,1211.99 850.564,1210.9 851.15,1210.05 851.737,1210.29 852.323,1210.5 852.91,1211.99 853.496,1212.1 854.083,1211.11 854.669,1214.9 855.255,1216.36 855.842,1215.16 856.428,1217.59 857.015,1217.8 857.601,1217.61 858.187,1218.7 858.774,1218.73 859.36,1219.5 859.947,1220.52 860.533,1227.45 861.119,1225.36 861.706,1225.95 862.292,1224.33 862.879,1223.82 863.465,1224.73 864.052,1226.86 864.638,1223.82 865.224,1223.56 865.811,1224.32 866.397,1222.72 866.984,1218.54 867.57,1217.03 868.156,1218.04 868.743,1221.59 869.329,1223.83 869.916,1222.16 870.502,1223.06 871.089,1222.66 871.675,1223.62 872.261,1225.78 872.848,1221.7 873.434,1222.52 874.021,1223.24 874.607,1222.93 875.193,1221.56 875.78,1221.2 876.366,1219.72 876.953,1218.45 877.539,1217.09 878.125,1217.02 878.712,1217.07 879.298,1218.28 879.885,1218 880.471,1219.11 881.058,1219.01 881.644,1217.31 882.23,1218.6 882.817,1217.21 883.403,1217.03 883.99,1215.82 884.576,1213.33 885.162,1214.63 885.749,1214.75 886.335,1214.84 886.922,1216.31 887.508,1217.48 888.094,1217.23 888.681,1219.16 889.267,1217.68 889.854,1217.51 890.44,1217.23 891.027,1220.93 891.613,1220.77 892.199,1221.67 892.786,1219.98 893.372,1218.5 893.959,1219.51 894.545,1219.22 895.131,1220.31 895.718,1220.2 896.304,1222.45 896.891,1220.83 897.477,1219.5 898.063,1220.44 898.65,1216.64 899.236,1216.72 899.823,1218.16 900.409,1216.79 900.996,1215.57 901.582,1215.78 902.168,1215.68 902.755,1218.32 903.341,1219.48 903.928,1219.35 904.514,1221.71 905.1,1220.29 905.687,1217.46 906.273,1216.2 906.86,1214.91 907.446,1214.93 908.032,1215.21 908.619,1216.7 909.205,1215.49 909.792,1211.56 910.378,1212.98 910.965,1210.55 911.551,1209.42 912.137,1212.29 912.724,1215.03 913.31,1217.39 913.897,1220.03 914.483,1216.08 915.069,1217.62 915.656,1215.11 916.242,1213.91 916.829,1212.78 917.415,1214.33 918.002,1213.28 918.588,1213.23 919.174,1212.07 919.761,1212.61 920.347,1213.98 920.934,1216.58 921.52,1217.67 922.106,1216.3 922.693,1217.6 923.279,1218.64 923.866,1219.96 924.452,1219.74 925.038,1220.72 925.625,1220.03 926.211,1217.49 926.798,1216.31 927.384,1216.34 927.971,1216.39 928.557,1215.14 929.143,1214.96 929.73,1215.02 930.316,1215.09 930.903,1216.49 931.489,1213.82 932.075,1212.67 932.662,1212.62 933.248,1215.12 933.835,1215.22 934.421,1215.21 935.007,1216.43 935.594,1218.99 936.18,1217.65 936.767,1216.47 937.353,1215.45 937.94,1214.49 938.526,1214.72 939.112,1217.21 939.699,1217.18 940.285,1216.14 940.872,1217.17 941.458,1216.93 942.044,1214.41 942.631,1214.48 943.217,1215.74 943.804,1215.52 944.39,1217.78 944.976,1215.22 945.563,1212.88 946.149,1214.29 946.736,1214.36 947.322,1214.49 947.909,1214.78 948.495,1213.61 949.081,1214.97 949.668,1215 950.254,1216.55 950.841,1215.21 951.427,1215.46 952.013,1216.64 952.6,1215.59 953.186,1215.15 953.773,1217.83 954.359,1217.73 954.945,1217.84 955.532,1220.26 956.118,1222.43 956.705,1219.54 957.291,1219.25 957.878,1219.1 958.464,1217.8 959.05,1219.14 959.637,1220.05 960.223,1219.79 960.81,1219.59 961.396,1219.77 961.982,1219.49 962.569,1219.33 963.155,1219.07 963.742,1221.27 964.328,1219.75 964.915,1221.59 965.501,1220.13 966.087,1218.88 966.674,1217.42 967.26,1217.54 967.847,1218.63 968.433,1219.44 969.019,1217.61 969.606,1215.22 970.192,1215.19 970.779,1216.57 971.365,1216.51 971.951,1216.22 972.538,1213.7 973.124,1213.83 973.711,1212.78 974.297,1210.27 974.884,1210.59 975.47,1210.87 976.056,1211.15 976.643,1208.79 977.229,1208.06 977.816,1209.75 978.402,1212.49 978.988,1212.71 979.575,1214.06 980.161,1217.83 980.748,1218.99 981.334,1218.92 981.92,1216.46 982.507,1215.19 983.093,1216.37 983.68,1216.42 984.266,1214.02 984.853,1215.41 985.439,1216.74 986.025,1221.48 986.612,1221.15 987.198,1222 987.785,1220.64 988.371,1220.37 988.957,1219.98 989.544,1220 990.13,1219.96 990.717,1222 991.303,1219.39 991.889,1220.24 992.476,1219.78 993.062,1219.86 993.649,1220.83 994.235,1219.15 994.822,1218.97 995.408,1218.73 995.994,1218.39 996.581,1218.3 997.167,1216.8 997.754,1216.79 998.34,1213.2 998.926,1214.5 999.513,1215.71 1000.1,1215.31 1000.69,1216.46 1001.27,1217.47 1001.86,1217.18 1002.44,1217.03 1003.03,1219.24 1003.62,1219.04 1004.2,1215.2 1004.79,1216.64 1005.38,1215.55 1005.96,1211.67 1006.55,1213.07 1007.14,1209.46 1007.72,1210.07 1008.31,1212.72 1008.9,1212.74 1009.48,1211.74 1010.07,1212.11 1010.65,1212.42 1011.24,1214.95 1011.83,1216.34 1012.41,1217.58 1013,1217.65 1013.59,1217.45 1014.17,1217.19 1014.76,1216.89 1015.35,1218.05 1015.93,1219.06 1016.52,1218.84 1017.11,1218.59 1017.69,1215.96 1018.28,1214.56 1018.86,1214.55 1019.45,1217.09 1020.04,1216.95 1020.62,1218.28 1021.21,1219.57 1021.8,1215.58 1022.38,1214.55 1022.97,1214.39 1023.56,1215.53 1024.14,1214.15 1024.73,1214.14 1025.32,1215.37 1025.9,1215.49 1026.49,1215.57 1027.07,1213.26 1027.66,1214.53 1028.25,1212.17 1028.83,1212.59 1029.42,1212.54 1030.01,1211.28 1030.59,1211.26 1031.18,1211.54 1031.77,1211.58 1032.35,1209.4 1032.94,1208.38 1033.52,1207.55 1034.11,1207.9 1034.7,1207.1 1035.28,1207.57 1035.87,1205.25 1036.46,1208.4 1037.04,1208.85 1037.63,1206.99 1038.22,1207.41 1038.8,1207.97 1039.39,1208.39 1039.98,1208.73 1040.56,1207.93 1041.15,1209.68 1041.73,1211.25 1042.32,1213.83 1042.91,1211.37 1043.49,1210.14 1044.08,1211.78 1044.67,1209.56 1045.25,1209.86 1045.84,1211.56 1046.43,1209.21 1047.01,1210.67 1047.6,1210.98 1048.19,1212.35 1048.77,1214.94 1049.36,1216.11 1049.94,1217.47 1050.53,1216.09 1051.12,1218.53 1051.7,1218.51 1052.29,1219.61 1052.88,1217.31 1053.46,1214.94 1054.05,1214.87 1054.64,1212.51 1055.22,1212.83 1055.81,1212.93 1056.39,1214.21 1056.98,1215.74 1057.57,1214.57 1058.15,1216.02 1058.74,1217.29 1059.33,1215.98 1059.91,1216.03 1060.5,1217.29 1061.09,1217.29 1061.67,1216.06 1062.26,1217.24 1062.85,1215.81 1063.43,1216.91 1064.02,1218.19 1064.6,1219.36 1065.19,1219.07 1065.78,1217.59 1066.36,1217.68 1066.95,1218.89 1067.54,1218.57 1068.12,1219.48 1068.71,1218.01 1069.3,1217.79 1069.88,1217.69 1070.47,1217.85 1071.06,1217.85 1071.64,1220.24 1072.23,1221.05 1072.81,1220.62 1073.4,1221.34 1073.99,1219.71 1074.57,1218.25 1075.16,1218.04 1075.75,1216.56 1076.33,1216.34 1076.92,1217.54 1077.51,1218.72 1078.09,1218.44 1078.68,1218.21 1079.26,1216.76 1079.85,1214.44 1080.44,1214.53 1081.02,1212.99 1081.61,1212.77 1082.2,1212.77 1082.78,1212.71 1083.37,1212.89 1083.96,1211.88 1084.54,1210.85 1085.13,1210.69 1085.72,1209.71 1086.3,1208.71 1086.89,1207.88 1087.47,1208.07 1088.06,1206.09 1088.65,1207.4 1089.23,1207.88 1089.82,1206.94 1090.41,1206.35 1090.99,1210.35 1091.58,1213.13 1092.17,1214.64 1092.75,1213.64 1093.34,1213.55 1093.93,1214.93 1094.51,1215.01 1095.1,1212.57 1095.68,1211.57 1096.27,1210.49 1096.86,1209.54 1097.44,1213.61 1098.03,1212.46 1098.62,1212.57 1099.2,1212.69 1099.79,1215.24 1100.38,1212.59 1100.96,1212.52 1101.55,1213.75 1102.14,1213.8 1102.72,1214.72 1103.31,1214.54 1103.89,1214.57 1104.48,1214.54 1105.07,1212.14 1105.65,1211.13 1106.24,1209.79 1106.83,1210.21 1107.41,1210.55 1108,1209.58 1108.59,1211.16 1109.17,1207.61 1109.76,1208.1 1110.34,1209.62 1110.93,1211.24 1111.52,1210.18 1112.1,1209.18 1112.69,1210.61 1113.28,1212.18 1113.86,1213.32 1114.45,1214.49 1115.04,1214.48 1115.62,1214.58 1116.21,1213.23 1116.8,1212.37 1117.38,1210.22 1117.97,1211.4 1118.55,1210.51 1119.14,1213.26 1119.73,1213.29 1120.31,1212.02 1120.9,1212.19 1121.49,1216.07 1122.07,1217.26 1122.66,1218.55 1123.25,1218.45 1123.83,1217.1 1124.42,1217.11 1125.01,1217.04 1125.59,1217.97 1126.18,1216.76 1126.76,1215.53 1127.35,1215.41 1127.94,1217.02 1128.52,1216.83 1129.11,1217.97 1129.7,1216.74 1130.28,1214.33 1130.87,1213.22 1131.46,1212.36 1132.04,1212.51 1132.63,1213.98 1133.21,1214.22 1133.8,1214.44 1134.39,1218.03 1134.97,1216.6 1135.56,1216.58 1136.15,1215.57 1136.73,1214.2 1137.32,1215.23 1137.91,1215.17 1138.49,1215.96 1139.08,1217.01 1139.67,1216.75 1140.25,1212.97 1140.84,1213.16 1141.42,1213.38 1142.01,1214.82 1142.6,1214.71 1143.18,1214.96 1143.77,1211.68 1144.36,1210.68 1144.94,1210.78 1145.53,1213.68 1146.12,1214.84 1146.7,1214.76 1147.29,1213.67 1147.88,1212.37 1148.46,1212.5 1149.05,1215.27 1149.63,1218.91 1150.22,1220.97 1150.81,1221.9 1151.39,1221.54 1151.98,1222.51 1152.57,1222.48 1153.15,1223.38 1153.74,1222.86 1154.33,1221.08 1154.91,1220.74 1155.5,1220.19 1156.09,1221.42 1156.67,1221.27 1157.26,1222 1157.84,1222.89 1158.43,1221.21 1159.02,1220.81 1159.6,1216.72 1160.19,1215.52 1160.78,1216.85 1161.36,1215.61 1161.95,1215.79 1162.54,1213.14 1163.12,1212.95 1163.71,1215.47 1164.29,1215.51 1164.88,1216.72 1165.47,1217.53 1166.05,1215.97 1166.64,1217.02 1167.23,1216.93 1167.81,1219.5 1168.4,1219.21 1168.99,1220.3 1169.57,1218.96 1170.16,1221.06 1170.75,1219.68 1171.33,1218.22 1171.92,1220.32 1172.5,1219.94 1173.09,1219.87 1173.68,1220.55 1174.26,1218.91 1174.85,1218.71 1175.44,1218.57 1176.02,1222.93 1176.61,1222.7 1177.2,1219.7 1177.78,1218.15 1178.37,1217.82 1178.96,1215.18 1179.54,1215.06 1180.13,1215.09 1180.71,1216.03 1181.3,1215.93 1181.89,1215.93 1182.47,1214.42 1183.06,1217.17 1183.65,1213.34 1184.23,1213.52 1184.82,1216.05 1185.41,1215.94 1185.99,1214.51 1186.58,1214.62 1187.16,1213.63 1187.75,1214.91 1188.34,1216.42 1188.92,1215.33 1189.51,1216.25 1190.1,1216.44 1190.68,1219.09 1191.27,1219.97 1191.86,1218.62 1192.44,1218.47 1193.03,1219.41 1193.62,1219.25 1194.2,1219.18 1194.79,1218.85 1195.37,1217.46 1195.96,1217.18 1196.55,1213.62 1197.13,1212.69 1197.72,1214.23 1198.31,1216.66 1198.89,1217.09 1199.48,1213.19 1200.07,1213.25 1200.65,1214.57 1201.24,1214.78 1201.83,1216.08 1202.41,1215.94 1203,1216.02 1203.58,1216.02 1204.17,1219.43 1204.76,1219.12 1205.34,1218.8 1205.93,1218.29 1206.52,1218.22 1207.1,1220.7 1207.69,1219.32 1208.28,1216.69 1208.86,1214.34 1209.45,1213.18 1210.03,1211.95 1210.62,1211.04 1211.21,1207.41 1211.79,1207.67 1212.38,1209.25 1212.97,1209.4 1213.55,1213.14 1214.14,1212.06 1214.73,1211.2 1215.31,1212.6 1215.9,1213.93 1216.49,1213.97 1217.07,1212.76 1217.66,1215.3 1218.24,1216.46 1218.83,1217.79 1219.42,1216.58 1220,1215.41 1220.59,1215.06 1221.18,1213.83 1221.76,1215.19 1222.35,1215.09 1222.94,1216.38 1223.52,1217.65 1224.11,1216.17 1224.7,1216.06 1225.28,1215.89 1225.87,1213.28 1226.45,1212.31 1227.04,1212.24 1227.63,1211.38 1228.21,1211.47 1228.8,1211.66 1229.39,1214.11 1229.97,1212.87 1230.56,1214.4 1231.15,1215.6 1231.73,1214.59 1232.32,1214.52 1232.91,1214.43 1233.49,1214.7 1234.08,1214.48 1234.66,1215.53 1235.25,1215.43 1235.84,1214.32 1236.42,1214.13 1237.01,1211.62 1237.6,1210.52 1238.18,1211.98 1238.77,1212.21 1239.36,1212.47 1239.94,1212.45 1240.53,1216.18 1241.11,1217.21 1241.7,1217.1 1242.29,1217.01 1242.87,1222.77 1243.46,1223.31 1244.05,1222.89 1244.63,1222.45 1245.22,1219.69 1245.81,1223 1246.39,1222.53 1246.98,1223.28 1247.57,1222.79 1248.15,1223.59 1248.74,1221.82 1249.32,1217.96 1249.91,1216.69 1250.5,1215.53 1251.08,1216.78 1251.67,1217.95 1252.26,1217.76 1252.84,1215.14 1253.43,1215.16 1254.02,1216.21 1254.6,1213.39 1255.19,1211.15 1255.78,1209.92 1256.36,1209.08 1256.95,1209.31 1257.53,1210.59 1258.12,1209.55 1258.71,1207.25 1259.29,1207.54 1259.88,1206.72 1260.47,1208.23 1261.05,1209.83 1261.64,1210.06 1262.23,1210.31 1262.81,1208.98 1263.4,1210.46 1263.98,1211.96 1264.57,1209.61 1265.16,1211.16 1265.74,1208.7 1266.33,1207.9 1266.92,1210.7 1267.5,1211.14 1268.09,1211.28 1268.68,1213.95 1269.26,1211.7 1269.85,1211.99 1270.44,1213.35 1271.02,1213.73 1271.61,1212.37 1272.19,1213.84 1272.78,1216.54 1273.37,1221.38 1273.95,1220.03 1274.54,1218.74 1275.13,1218.73 1275.71,1218.44 1276.3,1218.17 1276.89,1221.5 1277.47,1221.18 1278.06,1220.9 1278.65,1218.13 1279.23,1220.29 1279.82,1220.05 1280.4,1222.27 1280.99,1224.04 1281.58,1223.73 1282.16,1221.99 1282.75,1221.92 1283.34,1217.96 1283.92,1218.97 1284.51,1218.23 1285.1,1220.45 1285.68,1219.18 1286.27,1219 1286.86,1218.85 1287.44,1218.83 1288.03,1219.82 1288.61,1219.7 1289.2,1216.87 1289.79,1217 1290.37,1216.95 1290.96,1217.89 1291.55,1219.95 1292.13,1218.6 1292.72,1218.37 1293.31,1219.36 1293.89,1217.76 1294.48,1218.67 1295.06,1219.54 1295.65,1219.42 1296.24,1217.75 1296.82,1220.25 1297.41,1219.98 1298,1218.52 1298.58,1218.21 1299.17,1215.62 1299.76,1214.3 1300.34,1214.31 1300.93,1213.04 1301.52,1214.31 1302.1,1211.8 1302.69,1213.05 1303.27,1213.21 1303.86,1214.81 1304.45,1213.37 1305.03,1210.78 1305.62,1210.8 1306.21,1211.07 1306.79,1211.59 1307.38,1213.32 1307.97,1212.35 1308.55,1211.52 1309.14,1209.28 1309.73,1205.97 1310.31,1205.42 1310.9,1205.92 1311.48,1205.25 1312.07,1204.27 1312.66,1205.76 1313.24,1207.77 1313.83,1209.14 1314.42,1210.59 1315,1211.09 1315.59,1211.39 1316.18,1215.23 1316.76,1215.61 1317.35,1214.43 1317.93,1214.62 1318.52,1216.08 1319.11,1216.19 1319.69,1217.29 1320.28,1219.5 1320.87,1219.37 1321.45,1216.59 1322.04,1216.38 1322.63,1216.23 1323.21,1213.65 1323.8,1212.69 1324.39,1210.08 1324.97,1210.58 1325.56,1208.35 1326.14,1210.97 1326.73,1213.63 1327.32,1213.6 1327.9,1214.96 1328.49,1214.91 1329.08,1217.27 1329.66,1218.3 1330.25,1218.01 1330.84,1218.97 1331.42,1216.38 1332.01,1216.17 1332.6,1213.64 1333.18,1217.17 1333.77,1217.01 1334.35,1216.95 1334.94,1216.71 1335.53,1215.26 1336.11,1214.25 1336.7,1212.06 1337.29,1213.24 1337.87,1214.71 1338.46,1212.12 1339.05,1212.29 1339.63,1212.37 1340.22,1213.66 1340.8,1212.84 1341.39,1213.9 1341.98,1215.27 1342.56,1216.3 1343.15,1215.06 1343.74,1213.85 1344.32,1213.01 1344.91,1211.79 1345.5,1211.94 1346.08,1212.27 1346.67,1214.87 1347.26,1214.83 1347.84,1214.93 1348.43,1215.16 1349.01,1213.87 1349.6,1215.12 1350.19,1216.46 1350.77,1212.65 1351.36,1213.75 1351.95,1215 1352.53,1212.29 1353.12,1212.24 1353.71,1213.58 1354.29,1212.49 1354.88,1213.98 1355.47,1214 1356.05,1215.36 1356.64,1214.43 1357.22,1216.91 1357.81,1218.01 1358.4,1219.01 1358.98,1218.64 1359.57,1218.54 1360.16,1213.56 1360.74,1212.34 1361.33,1209.92 1361.92,1209.82 1362.5,1211.17 1363.09,1211.36 1363.68,1211.55 1364.26,1211.62 1364.85,1212.91 1365.43,1213.16 1366.02,1213.02 1366.61,1214.4 1367.19,1211.56 1367.78,1213.09 1368.37,1215.63 1368.95,1215.6 1369.54,1216.69 1370.13,1217.82 1370.71,1216.56 1371.3,1218.94 1371.88,1217.43 1372.47,1216.15 1373.06,1218.29 1373.64,1218.01 1374.23,1217.95 1374.82,1216.72 1375.4,1215.37 1375.99,1215.17 1376.58,1216.45 1377.16,1216.54 1377.75,1216.48 1378.34,1212.82 1378.92,1214.22 1379.51,1214.21 1380.09,1214.18 1380.68,1211.67 1381.27,1211.9 1381.85,1209.62 1382.44,1209.97 1383.03,1211.69 1383.61,1210.35 1384.2,1211.67 1384.79,1212.94 1385.37,1212.93 1385.96,1211.67 1386.55,1210.49 1387.13,1209.56 1387.72,1210.94 1388.3,1210.03 1388.89,1209.1 1389.48,1208.37 1390.06,1208.5 1390.65,1208.89 1391.24,1211.52 1391.82,1210.52 1392.41,1210.97 1393,1213.54 1393.58,1214.71 1394.17,1214.36 1394.75,1215.48 1395.34,1215.51 1395.93,1216.89 1396.51,1219.3 1397.1,1218.99 1397.69,1219.66 1398.27,1220.41 1398.86,1220.14 1399.45,1218.63 1400.03,1217.2 1400.62,1218.51 1401.21,1217.22 1401.79,1218.05 1402.38,1216.94 1402.96,1216.84 1403.55,1218.02 1404.14,1216.91 1404.72,1217.99 1405.31,1220.4 1405.9,1218.72 1406.48,1218.22 1407.07,1218.03 1407.66,1216.45 1408.24,1215.12 1408.83,1216.54 1409.42,1217.74 1410,1217.64 1410.59,1215.04 1411.17,1215.13 1411.76,1214.97 1412.35,1218.78 1412.93,1220 1413.52,1218.36 1414.11,1215.96 1414.69,1213.65 1415.28,1212.45 1415.87,1211.46 1416.45,1209.24 1417.04,1209.65 1417.63,1209.97 1418.21,1211.56 1418.8,1211.78 1419.38,1212.23 1419.97,1213.56 1420.56,1213.55 1421.14,1214.63 1421.73,1214.6 1422.32,1214.57 1422.9,1217 1423.49,1216.8 1424.08,1215.36 1424.66,1216.69 1425.25,1218.98 1425.83,1216.34 1426.42,1217.31 1427.01,1215.86 1427.59,1215.77 1428.18,1216.97 1428.77,1216.89 1429.35,1219.45 1429.94,1219.28 1430.53,1216.92 1431.11,1215.69 1431.7,1219.13 1432.29,1220.12 1432.87,1221.51 1433.46,1223.29 1434.04,1219.39 1434.63,1221.62 1435.22,1221.25 1435.8,1222.13 1436.39,1221.55 1436.98,1221.24 1437.56,1221.17 1438.15,1220.81 1438.74,1219.07 1439.32,1221.11 1439.91,1217.42 1440.5,1216.21 1441.08,1214.91 1441.67,1214.71 1442.25,1215.96 1442.84,1214.74 1443.43,1213.56 1444.01,1213.88 1444.6,1215.2 1445.19,1214.98 1445.77,1212.44 1446.36,1212.57 1446.95,1210.46 1447.53,1212.08 1448.12,1212.27 1448.7,1213.6 1449.29,1214.96 1449.88,1216 1450.46,1214.68 1451.05,1218.42 1451.64,1215.88 1452.22,1213.45 1452.81,1213.97 1453.4,1211.79 1453.98,1211.8 1454.57,1209.67 1455.16,1208.49 1455.74,1211.59 1456.33,1211.79 1456.91,1213.22 1457.5,1215.59 1458.09,1216.78 1458.67,1218.09 1459.26,1219.1 1459.85,1218.57 1460.43,1216.12 1461.02,1217.48 1461.61,1218.83 1462.19,1216.1 1462.78,1216.03 1463.37,1216.18 1463.95,1212.7 1464.54,1212.78 1465.12,1212.82 1465.71,1212.72 1466.3,1212.94 1466.88,1214.2 1467.47,1213.09 1468.06,1212.05 1468.64,1211.06 1469.23,1211.5 1469.82,1214.19 1470.4,1216.35 1470.99,1215.25 1471.57,1213.94 1472.16,1213.07 1472.75,1213.17 1473.33,1214.46 1473.92,1213.42 1474.51,1210.92 1475.09,1211.05 1475.68,1211.18 1476.27,1211.49 1476.85,1211.52 1477.44,1212.01 1478.03,1214.65 1478.61,1215.67 1479.2,1217.96 1479.78,1215.76 1480.37,1216.85 1480.96,1215.57 1481.54,1216.9 1482.13,1215.61 1482.72,1218.04 1483.3,1217.89 1483.89,1216.49 1484.48,1215.15 1485.06,1213.94 1485.65,1212.71 1486.24,1210.5 1486.82,1214.42 1487.41,1211.81 1487.99,1209.48 1488.58,1212.29 1489.17,1212.6 1489.75,1212.77 1490.34,1215.14 1490.93,1216.19 1491.51,1216.09 1492.1,1214.93 1492.69,1216.23 1493.27,1215.24 1493.86,1217.82 1494.45,1218.97 1495.03,1218.81 1495.62,1218.76 1496.2,1219.76 1496.79,1218.49 1497.38,1216.19 1497.96,1215.88 1498.55,1214.52 1499.14,1213.37 1499.72,1214.63 1500.31,1214.81 1500.9,1218.75 1501.48,1222.24 1502.07,1220.64 1502.65,1218.16 1503.24,1216.58 1503.83,1218.83 1504.41,1218.81 1505,1219.78 1505.59,1220.38 1506.17,1220.27 1506.76,1217.92 1507.35,1215.35 1507.93,1212.98 1508.52,1211.86 1509.11,1213.26 1509.69,1213.42 1510.28,1212.09 1510.86,1213.23 1511.45,1213.07 1512.04,1211.9 1512.62,1213.08 1513.21,1214.31 1513.8,1214.34 1514.38,1214.19 1514.97,1215.3 1515.56,1217.63 1516.14,1221.04 1516.73,1219.42 1517.32,1220.5 1517.9,1220.08 1518.49,1220.99 1519.07,1219.22 1519.66,1220.07 1520.25,1219.58 1520.83,1218.08 1521.42,1216.62 1522.01,1216.57 1522.59,1216.14 1523.18,1219.55 1523.77,1218.38 1524.35,1218.34 1524.94,1217.97 1525.52,1216.5 1526.11,1214.24 1526.7,1214.28 1527.28,1214.24 1527.87,1214.18 1528.46,1216.51 1529.04,1215.43 1529.63,1214.43 1530.22,1215.77 1530.8,1215.38 1531.39,1211.8 1531.98,1210.64 1532.56,1212.06 1533.15,1212.46 1533.73,1214.07 1534.32,1215.53 1534.91,1215.5 1535.49,1216.6 1536.08,1215.32 1536.67,1215.13 1537.25,1215.03 1537.84,1215.05 1538.43,1214.82 1539.01,1213.34 1539.6,1212.12 1540.19,1212.25 1540.77,1212.47 1541.36,1211.45 1541.94,1212.73 1542.53,1215.26 1543.12,1215.26 1543.7,1213.01 1544.29,1211.96 1544.88,1209.89 1545.46,1210.13 1546.05,1209.2 1546.64,1209.52 1547.22,1210.18 1547.81,1210.42 1548.4,1210.67 1548.98,1211.9 1549.57,1212.26 1550.15,1210.04 1550.74,1211.56 1551.33,1211.75 1551.91,1213.11 1552.5,1213.45 1553.09,1213.46 1553.67,1212.43 1554.26,1213.87 1554.85,1212.77 1555.43,1212.82 1556.02,1210.27 1556.6,1209.16 1557.19,1209.49 1557.78,1208.4 1558.36,1212.49 1558.95,1212.55 1559.54,1210.14 1560.12,1210.27 1560.71,1208.32 1561.3,1208.92 1561.88,1206.91 1562.47,1207.4 1563.06,1206.66 1563.64,1209.46 1564.23,1209.9 1564.81,1205.18 1565.4,1205.82 1565.99,1210.26 1566.57,1210.88 1567.16,1212.43 1567.75,1212.37 1568.33,1212.6 1568.92,1211.74 1569.51,1209.4 1570.09,1211.99 1570.68,1211 1571.27,1210.98 1571.85,1211.02 1572.44,1211.38 1573.02,1212.98 1573.61,1214.28 1574.2,1216.54 1574.78,1217.53 1575.37,1217.44 1575.96,1219.61 1576.54,1219.29 1577.13,1220.13 1577.72,1216.26 1578.3,1216.01 1578.89,1218.17 1579.47,1218 1580.06,1217.99 1580.65,1218.81 1581.23,1217.28 1581.82,1218.23 1582.41,1218.13 1582.99,1216.71 1583.58,1216.65 1584.17,1218.82 1584.75,1217.4 1585.34,1219.81 1585.93,1217.3 1586.51,1217.34 1587.1,1218.3 1587.68,1218.12 1588.27,1217.86 1588.86,1220.17 1589.44,1219.9 1590.03,1218.33 1590.62,1217.05 1591.2,1217.02 1591.79,1216.76 1592.38,1215.53 1592.96,1217.78 1593.55,1217.66 1594.14,1215.23 1594.72,1216.37 1595.31,1216.38 1595.89,1214.84 1596.48,1215.1 1597.07,1215.22 1597.65,1215.22 1598.24,1216.59 1598.83,1218.91 1599.41,1219.71 1600,1220.7 1600.59,1221.59 1601.17,1221.39 1601.76,1218.82 1602.34,1218.71 1602.93,1222.02 1603.52,1219.32 1604.1,1216.48 1604.69,1215.41 1605.28,1215.38 1605.86,1216.51 1606.45,1218.96 1607.04,1221.08 1607.62,1220.69 1608.21,1224.38 1608.8,1223.44 1609.38,1220.57 1609.97,1219.94 1610.55,1220.07 1611.14,1221.3 1611.73,1222.22 1612.31,1220.72 1612.9,1219.25 1613.49,1220.17 1614.07,1217.36 1614.66,1216.26 1615.25,1216.19 1615.83,1216.19 1616.42,1216.33 1617.01,1218.69 1617.59,1215.85 1618.18,1215.76 1618.76,1221.7 1619.35,1220.41 1619.94,1222.88 1620.52,1224.69 1621.11,1226.68 1621.7,1226.15 1622.28,1229.31 1622.87,1227.29 1623.46,1229.14 1624.04,1226 1624.63,1225.53 1625.22,1223.79 1625.8,1220.95 1626.39,1217.93 1626.97,1217.42 1627.56,1217.37 1628.15,1214.68 1628.73,1213.41 1629.32,1212.23 1629.91,1213.36 1630.49,1213.54 1631.08,1213.74 1631.67,1212.75 1632.25,1213.96 1632.84,1211.54 1633.42,1211.78 1634.01,1212.12 1634.6,1211.08 1635.18,1208.74 1635.77,1211.62 1636.36,1214.35 1636.94,1216.74 1637.53,1217.9 1638.12,1220.08 1638.7,1218.47 1639.29,1219.74 1639.88,1221.63 1640.46,1219.3 1641.05,1219.16 1641.63,1217.85 1642.22,1217.85 1642.81,1217.83 1643.39,1217.65 1643.98,1217.38 1644.57,1216.17 1645.15,1215.91 1645.74,1215.77 1646.33,1215.72 1646.91,1214.48 1647.5,1213.06 1648.09,1213.14 1648.67,1208.33 1649.26,1212.31 1649.84,1209.87 1650.43,1210.12 1651.02,1210.47 1651.6,1212.99 1652.19,1213.13 1652.78,1211.65 1653.36,1209.33 1653.95,1209.7 1654.54,1207.49 1655.12,1209.12 1655.71,1207.8 1656.29,1209.2 1656.88,1211.79 1657.47,1209.58 1658.05,1208.71 1658.64,1206.58 1659.23,1208.27 1659.81,1209.95 1660.4,1210.05 1660.99,1212.66 1661.57,1210.31 1662.16,1210.71 1662.75,1210.94 1663.33,1209.81 1663.92,1213.69 1664.5,1212.35 1665.09,1211.15 1665.68,1211.35 1666.26,1212.48 1666.85,1211.32 1667.44,1211.56 1668.02,1211.35 1668.61,1212.88 1669.2,1213.87 1669.78,1215.01 1670.37,1215.05 1670.96,1218.8 1671.54,1218.54 1672.13,1219.62 1672.71,1215.84 1673.3,1217.06 1673.89,1215.71 1674.47,1216.93 1675.06,1216.69 1675.65,1217.79 1676.23,1216.36 1676.82,1214.66 1677.41,1213.42 1677.99,1213.72 1678.58,1213.54 1679.17,1214.86 1679.75,1214.79 1680.34,1217.67 1680.92,1217.53 1681.51,1217.45 1682.1,1218.46 1682.68,1219.6 1683.27,1217.17 1683.86,1218.21 1684.44,1216.88 1685.03,1218.87 1685.62,1217.39 1686.2,1216.13 1686.79,1217.21 1687.37,1214.9 1687.96,1217.25 1688.55,1215.77 1689.13,1215.48 1689.72,1214.17 1690.31,1213.04 1690.89,1211.93 1691.48,1210.76 1692.07,1211.01 1692.65,1212.66 1693.24,1210.31 1693.83,1210.58 1694.41,1210.73 1695,1206.05 1695.58,1206.85 1696.17,1208.63 1696.76,1207.57 1697.34,1208.09 1697.93,1206.06 1698.52,1211.28 1699.1,1211.55 1699.69,1209.38 1700.28,1207.36 1700.86,1209.14 1701.45,1209.44 1702.04,1210.83 1702.62,1211.1 1703.21,1213.7 1703.79,1214.01 1704.38,1214.11 1704.97,1215.43 1705.55,1215.58 1706.14,1211.87 1706.73,1213.25 1707.31,1215.02 1707.9,1215.04 1708.49,1216.48 1709.07,1215.51 1709.66,1213.42 1710.24,1213.44 1710.83,1215.9 1711.42,1217.21 1712,1218.42 1712.59,1220.55 1713.18,1220.27 1713.76,1217.54 1714.35,1217.23 1714.94,1218.25 1715.52,1220.47 1716.11,1218.93 1716.7,1217.35 1717.28,1214.57 1717.87,1215.02 1718.45,1211.34 1719.04,1210.42 1719.63,1210.84 1720.21,1209.64 1720.8,1209.83 1721.39,1211.4 1721.97,1211.55 1722.56,1211.62 1723.15,1211.91 1723.73,1214.55 1724.32,1213.36 1724.91,1212.09 1725.49,1213.84 1726.08,1210.12 1726.66,1211.62 1727.25,1212.02 1727.84,1213.36 1728.42,1213.66 1729.01,1215.98 1729.6,1218.56 1730.18,1217.09 1730.77,1216.81 1731.36,1216.88 1731.94,1217.07 1732.53,1217.04 1733.11,1214.63 1733.7,1217.14 1734.29,1215.64 1734.87,1216.64 1735.46,1217.8 1736.05,1218.93 1736.63,1218.91 1737.22,1221.06 1737.81,1218.5 1738.39,1220.77 1738.98,1218.26 1739.57,1218.18 1740.15,1216.85 1740.74,1214.38 1741.32,1214.46 1741.91,1219.06 1742.5,1216.36 1743.08,1217.55 1743.67,1214.98 1744.26,1216.37 1744.84,1217.4 1745.43,1217.27 1746.02,1218.43 1746.6,1219.28 1747.19,1219.16 1747.78,1218.56 1748.36,1220.94 1748.95,1221.81 1749.53,1225.1 1750.12,1225.79 1750.71,1225.13 1751.29,1222.24 1751.88,1217.86 1752.47,1218.11 1753.05,1216.68 1753.64,1217.53 1754.23,1218.59 1754.81,1217.35 1755.4,1216.18 1755.99,1218.34 1756.57,1215.53 1757.16,1215.63 1757.74,1218.08 1758.33,1217.99 1758.92,1222.77 1759.5,1221.23 1760.09,1220.93 1760.68,1220.43 1761.26,1221.25 1761.85,1219.75 1762.44,1219.4 1763.02,1217.97 1763.61,1217.81 1764.19,1217.54 1764.78,1217.12 1765.37,1214.7 1765.95,1214.47 1766.54,1213.41 1767.13,1212.1 1767.71,1214.62 1768.3,1215.82 1768.89,1220.3 1769.47,1221.27 1770.06,1221.12 1770.65,1218.53 1771.23,1218.54 1771.82,1216.06 1772.4,1218.34 1772.99,1216.85 1773.58,1216.51 1774.16,1216.31 1774.75,1214.79 1775.34,1216.07 1775.92,1217.32 1776.51,1216.32 1777.1,1216.28 1777.68,1218.75 1778.27,1218.76 1778.86,1215.69 1779.44,1210.86 1780.03,1208.54 1780.61,1210.11 1781.2,1211.46 1781.79,1209.13 1782.37,1210.41 1782.96,1209.46 1783.55,1205.99 1784.13,1202.72 1784.72,1202.26 1785.31,1201.74 1785.89,1201.25 1786.48,1201.81 1787.06,1204.81 1787.65,1209.23 1788.24,1209.54 1788.82,1210.86 1789.41,1211.17 1790,1210.41 1790.58,1211.77 1791.17,1209.72 1791.76,1211 1792.34,1209.89 1792.93,1210.36 1793.52,1212.03 1794.1,1212.05 1794.69,1213.29 1795.27,1212.25 1795.86,1211.2 1796.45,1211.53 1797.03,1211.74 1797.62,1211.75 1798.21,1214.29 1798.79,1210.94 1799.38,1211.23 1799.97,1212.53 1800.55,1211.5 1801.14,1210.6 1801.73,1212.03 1802.31,1206.15 1802.9,1207.83 1803.48,1209.34 1804.07,1208.32 1804.66,1208.63 1805.24,1207.85 1805.83,1208.44 1806.42,1207.46 1807,1207.01 1807.59,1209.88 1808.18,1211.2 1808.76,1211.25 1809.35,1211.49 1809.94,1212.85 1810.52,1214.08 1811.11,1212.81 1811.69,1213.01 1812.28,1210.58 1812.87,1210.82 1813.45,1214.7 1814.04,1212.14 1814.63,1213.27 1815.21,1210.78 1815.8,1212.44 1816.39,1212.6 1816.97,1212.65 1817.56,1211.33 1818.14,1210.59 1818.73,1210.7 1819.32,1209.73 1819.9,1208.81 1820.49,1210.37 1821.08,1214.18 1821.66,1212.84 1822.25,1214.15 1822.84,1212.89 1823.42,1211.74 1824.01,1211.96 1824.6,1213.48 1825.18,1216.1 1825.77,1213.71 1826.35,1216.35 1826.94,1216.46 1827.53,1216.58 1828.11,1216.58 1828.7,1216.51 1829.29,1217.9 1829.87,1220.29 1830.46,1218.81 1831.05,1219.9 1831.63,1219.65 1832.22,1219.54 1832.81,1221.8 1833.39,1220.58 1833.98,1216.69 1834.56,1215.26 1835.15,1215.1 1835.74,1215.04 1836.32,1218.77 1836.91,1218.56 1837.5,1218.38 1838.08,1220.44 1838.67,1220.04 1839.26,1219.78 1839.84,1218.27 1840.43,1217.14 1841.01,1214.57 1841.6,1213.12 1842.19,1214.52 1842.77,1213.22 1843.36,1216.83 1843.95,1216.97 1844.53,1217.91 1845.12,1218.12 1845.71,1217.58 1846.29,1217.54 1846.88,1217.54 1847.47,1221.03 1848.05,1218.46 1848.64,1219.62 1849.22,1220.71 1849.81,1219.32 1850.4,1220.19 1850.98,1225.94 1851.57,1225.19 1852.16,1221.15 1852.74,1219.4 1853.33,1222.65 1853.92,1222.25 1854.5,1223.34 1855.09,1224.28 1855.68,1227.48 1856.26,1225.72 1856.85,1225.16 1857.43,1225.87 1858.02,1224.05 1858.61,1224.55 1859.19,1221.5 1859.78,1221.14 1860.37,1220.98 1860.95,1219.62 1861.54,1218.19 1862.13,1216.69 1862.71,1215.41 1863.3,1215.53 1863.88,1215.35 1864.47,1215.37 1865.06,1217.77 1865.64,1217.7 1866.23,1213.48 1866.82,1212.23 1867.4,1212.35 1867.99,1213.82 1868.58,1214.95 1869.16,1213.5 1869.75,1216.14 1870.34,1218.61 1870.92,1218.32 1871.51,1218.01 1872.09,1216.85 1872.68,1219.03 1873.27,1218.96 1873.85,1218.42 1874.44,1216.94 1875.03,1215.8 1875.61,1215.9 1876.2,1216.99 1876.79,1215.55 1877.37,1216.89 1877.96,1217.8 1878.55,1216.24 1879.13,1215.19 1879.72,1215.02 1880.3,1216.15 1880.89,1217.37 1881.48,1215.92 1882.06,1214.71 1882.65,1213.73 1883.24,1212.76 1883.82,1209.14 1884.41,1208.5 1885,1211.27 1885.58,1209.06 1886.17,1209.4 1886.76,1209.59 1887.34,1209.81 1887.93,1207.83 1888.51,1205.69 1889.1,1210.03 1889.69,1210.38 1890.27,1213.06 1890.86,1213.15 1891.45,1210.99 1892.03,1211.16 1892.62,1211.43 1893.21,1213.95 1893.79,1217.51 1894.38,1216.38 1894.96,1218.75 1895.55,1219.42 1896.14,1219.17 1896.72,1217.63 1897.31,1217.5 1897.9,1217.35 1898.48,1218.48 1899.07,1216.97 1899.66,1215.89 1900.24,1217.11 1900.83,1218.15 1901.42,1218.11 1902,1217.82 1902.59,1218.74 1903.17,1219.82 1903.76,1220.81 1904.35,1220.51 1904.93,1219.21 1905.52,1217.89 1906.11,1221.44 1906.69,1222.63 1907.28,1222.09 1907.87,1219.32 1908.45,1220.27 1909.04,1217.12 1909.63,1216.47 1910.21,1217.24 1910.8,1217.23 1911.38,1213.58 1911.97,1213.68 1912.56,1214.82 1913.14,1213.67 1913.73,1212.61 1914.32,1212.88 1914.9,1213.99 1915.49,1215.15 1916.08,1212.79 1916.66,1212.77 1917.25,1210.23 1917.83,1213.86 1918.42,1216.3 1919.01,1218.46 1919.59,1218.23 1920.18,1216.9 1920.77,1216.72 1921.35,1217.52 1921.94,1216.06 1922.53,1215.89 1923.11,1215.87 1923.7,1217.16 1924.29,1214.9 1924.87,1214.82 1925.46,1217.25 1926.04,1218.33 1926.63,1216.9 1927.22,1215.53 1927.8,1216.77 1928.39,1214.5 1928.98,1212.12 1929.56,1209.88 1930.15,1207.84 1930.74,1209.35 1931.32,1209.73 1931.91,1210.1 1932.5,1211.5 1933.08,1209.31 1933.67,1207.37 1934.25,1209.32 1934.84,1212.22 1935.43,1213.8 1936.01,1211.51 1936.6,1211.76 1937.19,1212.81 1937.77,1214.18 1938.36,1215.36 1938.95,1215.23 1939.53,1216.78 1940.12,1215.49 1940.71,1216.45 1941.29,1215.09 1941.88,1212.83 1942.46,1211.93 1943.05,1213.54 1943.64,1215.01 1944.22,1215.99 1944.81,1213.63 1945.4,1213.9 1945.98,1211.39 1946.57,1211.53 1947.16,1211.69 1947.74,1211.93 1948.33,1212.05 1948.91,1211.94 1949.5,1212.19 1950.09,1214.65 1950.67,1214.64 1951.26,1210.95 1951.85,1214.65 1952.43,1213.58 1953.02,1210.07 1953.61,1210.26 1954.19,1212.02 1954.78,1213.22 1955.37,1213.3 1955.95,1213.49 1956.54,1213.64 1957.12,1213.66 1957.71,1214.93 1958.3,1215.15 1958.88,1210.09 1959.47,1210.62 1960.06,1208.5 1960.64,1208.77 1961.23,1209.51 1961.82,1208.7 1962.4,1207.7 1962.99,1208.07 1963.58,1208.5 1964.16,1208.97 1964.75,1211.91 1965.33,1212.16 1965.92,1211.2 1966.51,1208.91 1967.09,1206.86 1967.68,1204.86 1968.27,1206.71 1968.85,1207.16 1969.44,1208.85 1970.03,1209.23 1970.61,1209.58 1971.2,1211.17 1971.78,1212.68 1972.37,1211.57 1972.96,1211.92 1973.54,1214.62 1974.13,1212.18 1974.72,1213.36 1975.3,1214.67 1975.89,1215.86 1976.48,1214.56 1977.06,1215.68 1977.65,1215.7 1978.24,1215.63 1978.82,1216.63 1979.41,1216.84 1979.99,1217.66 1980.58,1217.49 1981.17,1214.96 1981.75,1215.13 1982.34,1215.38 1982.93,1214.22 1983.51,1217.67 1984.1,1216.26 1984.69,1215.12 1985.27,1213.72 1985.86,1211.63 1986.45,1211.73 1987.03,1208.19 1987.62,1208.36 1988.2,1207.61 1988.79,1206.6 1989.38,1209.31 1989.96,1208.47 1990.55,1209.86 1991.14,1213.85 1991.72,1216.19 1992.31,1214.92 1992.9,1212.45 1993.48,1212.74 1994.07,1212.87 1994.65,1214.18 1995.24,1215.67 1995.83,1215.86 1996.41,1215.88 1997,1217.27 1997.59,1212.33 1998.17,1212.37 1998.76,1212.5 1999.35,1211.61 1999.93,1213.26 2000.52,1215.63 2001.11,1216.72 2001.69,1215.55 2002.28,1215.67 2002.86,1215.41 2003.45,1216.67 2004.04,1215.13 2004.62,1215.39 2005.21,1215.31 2005.8,1215.22 2006.38,1215.36 2006.97,1215.4 2007.56,1217.94 2008.14,1217.71 2008.73,1216.41 2009.32,1215.17 2009.9,1211.48 2010.49,1210.45 2011.07,1210.74 2011.66,1212 2012.25,1217.1 2012.83,1218.23 2013.42,1218.03 2014.01,1216.43 2014.59,1216.41 2015.18,1217.47 2015.77,1216.32 2016.35,1217.57 2016.94,1218.48 2017.53,1218.2 2018.11,1219.27 2018.7,1220.2 2019.28,1222.23 2019.87,1224.01 2020.46,1222.3 2021.04,1221.91 2021.63,1220.26 2022.22,1220.01 2022.8,1218.62 2023.39,1219.85 2023.98,1220.52 2024.56,1220.32 2025.15,1218.9 2025.73,1218.75 2026.32,1221.01 2026.91,1221.61 2027.49,1221.19 2028.08,1218.16 2028.67,1218.19 2029.25,1218.98 2029.84,1218.63 2030.43,1219.77 2031.01,1218.4 2031.6,1218.06 2032.19,1215.29 2032.77,1215.19 2033.36,1215.29 2033.94,1212.76 2034.53,1215.32 2035.12,1218.79 2035.7,1219.75 2036.29,1219.4 2036.88,1219.28 2037.46,1217.65 2038.05,1218.65 2038.64,1218.55 2039.22,1215.76 2039.81,1215.78 2040.4,1215.78 2040.98,1216.9 2041.57,1216.65 2042.15,1214.33 2042.74,1214.2 2043.33,1214.11 2043.91,1214.25 2044.5,1214.19 2045.09,1215.53 2045.67,1215.51 2046.26,1216.6 2046.85,1213.04 2047.43,1210.79 2048.02,1213.25 2048.6,1214.64 2049.19,1216.08 2049.78,1218.37 2050.36,1221.79 2050.95,1221.43 2051.54,1218.56 2052.12,1216.12 2052.71,1215.96 2053.3,1216.2 2053.88,1215.85 2054.47,1217.01 2055.06,1215.36 2055.64,1215.33 2056.23,1214.09 2056.81,1213.48 2057.4,1216.26 2057.99,1214.76 2058.57,1213.3 2059.16,1213.21 2059.75,1213.25 2060.33,1211.94 2060.92,1212.05 2061.51,1209.38 2062.09,1211.01 2062.68,1210.12 2063.27,1211.62 2063.85,1216.84 2064.44,1216.82 2065.02,1216.55 2065.61,1215.39 2066.2,1214.3 2066.78,1214.2 2067.37,1215.26 2067.96,1215.18 2068.54,1215.17 2069.13,1214.15 2069.72,1211.7 2070.3,1211.92 2070.89,1209.6 2071.48,1208.56 2072.06,1211.18 2072.65,1213.51 2073.23,1214.72 2073.82,1214.74 2074.41,1215.14 2074.99,1214.18 2075.58,1214.22 2076.17,1215.56 2076.75,1214.28 2077.34,1211.48 2077.93,1210.49 2078.51,1210.78 2079.1,1211.09 2079.68,1210 2080.27,1210.32 2080.86,1211.51 2081.44,1213.22 2082.03,1213.56 2082.62,1212.49 2083.2,1212.6 2083.79,1211.45 2084.38,1211.51 2084.96,1211.9 2085.55,1210.65 2086.14,1210.73 2086.72,1210.82 2087.31,1211.33 2087.89,1211.58 2088.48,1211.79 2089.07,1209.48 2089.65,1212.1 2090.24,1212.26 2090.83,1210.32 2091.41,1210.68 2092,1210.94 2092.59,1210.12 2093.17,1210.29 2093.76,1210.64 2094.35,1211.1 2094.93,1212.61 2095.52,1212.81 2096.1,1214.16 2096.69,1215.22 2097.28,1215.46 2097.86,1213.16 2098.45,1215.62 2099.04,1216.96 2099.62,1219.29 2100.21,1219.03 2100.8,1215.1 2101.38,1213.95 2101.97,1212.69 2102.55,1211.61 2103.14,1210.53 2103.73,1211.91 2104.31,1211.94 2104.9,1215.84 2105.49,1214.7 2106.07,1213.48 2106.66,1213.85 2107.25,1211.55 2107.83,1211.91 2108.42,1215.74 2109.01,1218.1 2109.59,1219 2110.18,1216.4 2110.76,1217.7 2111.35,1217.69 2111.94,1217.4 2112.52,1215.88 2113.11,1213.37 2113.7,1213.46 2114.28,1212.54 2114.87,1213.75 2115.46,1216.04 2116.04,1215.97 2116.63,1217.1 2117.22,1216.96 2117.8,1215.81 2118.39,1216.99 2118.97,1216.89 2119.56,1213.29 2120.15,1213.56 2120.73,1213.7 2121.32,1213.64 2121.91,1212.43 2122.49,1211.37 2123.08,1211.26 2123.67,1213.97 2124.25,1214.13 2124.84,1214.04 2125.42,1212.87 2126.01,1215.63 2126.6,1215.71 2127.18,1215.72 2127.77,1218.13 2128.36,1216.57 2128.94,1216.57 2129.53,1219 2130.12,1220.15 2130.7,1218.86 2131.29,1217.6 2131.88,1216.17 2132.46,1214.76 2133.05,1215.89 2133.63,1216.15 2134.22,1217.23 2134.81,1215.91 2135.39,1216.01 2135.98,1213.36 2136.57,1214.71 2137.15,1214.69 2137.74,1213.63 2138.33,1213.57 2138.91,1214.84 2139.5,1214.61 2140.09,1215.78 2140.67,1216.94 2141.26,1215.6 2141.84,1216.97 2142.43,1217.14 2143.02,1216.79 2143.6,1215.34 2144.19,1214.14 2144.78,1216.54 2145.36,1217.5 2145.95,1217.35 2146.54,1217.37 2147.12,1216.21 2147.71,1216.17 2148.3,1213.58 2148.88,1214.8 2149.47,1213.73 2150.05,1217.65 2150.64,1212.82 2151.23,1211.76 2151.81,1212.02 2152.4,1214.73 2152.99,1213.32 2153.57,1214.67 2154.16,1215.92 2154.75,1214.65 2155.33,1218.32 2155.92,1219.54 2156.5,1220.38 2157.09,1216.45 2157.68,1216.47 2158.26,1217.34 \"/>\n<path clip-path=\"url(#clip542)\" d=\"M986.025 1215.34 L986.612 1215.34 L987.198 1215.34 L987.785 1215.34 L988.371 1215.34 L988.957 1215.34 L989.544 1215.34 L990.13 1215.34 L990.717 1215.34 L991.303 1215.34 L991.889 1215.34 L992.476 1215.34 L993.062 1215.34 L993.649 1215.34 L994.235 1215.34 L994.822 1215.34 L995.408 1215.34 L995.994 1215.34 L996.581 1215.34 L997.167 1215.34 L997.754 1215.34 L998.34 1215.34 L998.926 1215.34 L999.513 1215.34 L1000.1 1215.34 L1000.69 1215.34 L1001.27 1215.34 L1001.86 1215.34 L1002.44 1215.34 L1003.03 1215.34 L1003.62 1215.34 L1004.2 1215.34 L1004.79 1215.34 L1005.38 1215.34 L1005.96 1215.34 L1006.55 1215.34 L1007.14 1215.34 L1007.72 1215.34 L1008.31 1215.34 L1008.9 1215.34 L1009.48 1215.34 L1010.07 1215.34 L1010.65 1215.34 L1011.24 1215.34 L1011.83 1215.34 L1012.41 1215.34 L1013 1215.34 L1013.59 1215.34 L1014.17 1215.34 L1014.76 1215.34 L1015.35 1215.34 L1015.93 1215.34 L1016.52 1215.34 L1017.11 1215.34 L1017.69 1215.34 L1018.28 1215.34 L1018.86 1215.34 L1019.45 1215.34 L1020.04 1215.34 L1020.62 1215.34 L1021.21 1215.34 L1021.8 1215.34 L1022.38 1215.34 L1022.97 1215.34 L1023.56 1215.34 L1024.14 1215.34 L1024.73 1215.34 L1025.32 1215.34 L1025.9 1215.34 L1026.49 1215.34 L1027.07 1215.34 L1027.66 1215.34 L1028.25 1215.34 L1028.83 1215.34 L1029.42 1215.34 L1030.01 1215.34 L1030.59 1215.34 L1031.18 1215.34 L1031.77 1215.34 L1032.35 1215.34 L1032.94 1215.34 L1033.52 1215.34 L1034.11 1215.34 L1034.7 1215.34 L1035.28 1215.34 L1035.87 1215.34 L1036.46 1215.34 L1037.04 1215.34 L1037.63 1215.34 L1038.22 1215.34 L1038.8 1215.34 L1039.39 1215.34 L1039.98 1215.34 L1040.56 1215.34 L1041.15 1215.34 L1041.73 1215.34 L1042.32 1215.34 L1042.91 1215.34 L1043.49 1215.34 L1044.08 1215.34 L1044.67 1215.34 L1045.25 1215.34 L1045.84 1215.34 L1046.43 1215.34 L1047.01 1215.34 L1047.6 1215.34 L1048.19 1215.34 L1048.77 1215.34 L1049.36 1215.34 L1049.94 1215.34 L1050.53 1215.34 L1051.12 1215.34 L1051.7 1215.34 L1052.29 1215.34 L1052.88 1215.34 L1053.46 1215.34 L1054.05 1215.34 L1054.64 1215.34 L1055.22 1215.34 L1055.81 1215.34 L1056.39 1215.34 L1056.98 1215.34 L1057.57 1215.34 L1058.15 1215.34 L1058.74 1215.34 L1059.33 1215.34 L1059.91 1215.34 L1060.5 1215.34 L1061.09 1215.34 L1061.67 1215.34 L1062.26 1215.34 L1062.85 1215.34 L1063.43 1215.34 L1064.02 1215.34 L1064.6 1215.34 L1065.19 1215.34 L1065.78 1215.34 L1066.36 1215.34 L1066.95 1215.34 L1067.54 1215.34 L1068.12 1215.34 L1068.71 1215.34 L1069.3 1215.34 L1069.88 1215.34 L1070.47 1215.34 L1071.06 1215.34 L1071.64 1215.34 L1072.23 1215.34 L1072.81 1215.34 L1073.4 1215.34 L1073.99 1215.34 L1074.57 1215.34 L1075.16 1215.34 L1075.75 1215.34 L1076.33 1215.34 L1076.92 1215.34 L1077.51 1215.34 L1078.09 1215.34 L1078.68 1215.34 L1079.26 1215.34 L1079.85 1215.34 L1080.44 1215.34 L1081.02 1215.34 L1081.61 1215.34 L1082.2 1215.34 L1082.78 1215.34 L1083.37 1215.34 L1083.96 1215.34 L1084.54 1215.34 L1085.13 1215.34 L1085.72 1215.34 L1086.3 1215.34 L1086.89 1215.34 L1087.47 1215.34 L1088.06 1215.34 L1088.65 1215.34 L1089.23 1215.34 L1089.82 1215.34 L1090.41 1215.34 L1090.99 1215.34 L1091.58 1215.34 L1092.17 1215.34 L1092.75 1215.34 L1093.34 1215.34 L1093.93 1215.34 L1094.51 1215.34 L1095.1 1215.34 L1095.68 1215.34 L1096.27 1215.34 L1096.86 1215.34 L1097.44 1215.34 L1098.03 1215.34 L1098.62 1215.34 L1099.2 1215.34 L1099.79 1215.34 L1100.38 1215.34 L1100.96 1215.34 L1101.55 1215.34 L1102.14 1215.34 L1102.72 1215.34 L1103.31 1215.34 L1103.89 1215.34 L1104.48 1215.34 L1105.07 1215.34 L1105.65 1215.34 L1106.24 1215.34 L1106.83 1215.34 L1107.41 1215.34 L1108 1215.34 L1108.59 1215.34 L1109.17 1215.34 L1109.76 1215.34 L1110.34 1215.34 L1110.93 1215.34 L1111.52 1215.34 L1112.1 1215.34 L1112.69 1215.34 L1113.28 1215.34 L1113.86 1215.34 L1114.45 1215.34 L1115.04 1215.34 L1115.62 1215.34 L1116.21 1215.34 L1116.8 1215.34 L1117.38 1215.34 L1117.97 1215.34 L1118.55 1215.34 L1119.14 1215.34 L1119.73 1215.34 L1120.31 1215.34 L1120.9 1215.34 L1121.49 1215.34 L1122.07 1215.34 L1122.66 1215.34 L1123.25 1215.34 L1123.83 1215.34 L1124.42 1215.34 L1125.01 1215.34 L1125.59 1215.34 L1126.18 1215.34 L1126.76 1215.34 L1127.35 1215.34 L1127.94 1215.34 L1128.52 1215.34 L1129.11 1215.34 L1129.7 1215.34 L1130.28 1215.34 L1130.87 1215.34 L1131.46 1215.34 L1132.04 1215.34 L1132.63 1215.34 L1133.21 1215.34 L1133.8 1215.34 L1134.39 1215.34 L1134.97 1215.34 L1135.56 1215.34 L1136.15 1215.34 L1136.73 1215.34 L1137.32 1215.34 L1137.91 1215.34 L1138.49 1215.34 L1139.08 1215.34 L1139.67 1215.34 L1140.25 1215.34 L1140.84 1215.34 L1141.42 1215.34 L1142.01 1215.34 L1142.6 1215.34 L1143.18 1215.34 L1143.77 1215.34 L1144.36 1215.34 L1144.94 1215.34 L1145.53 1215.34 L1146.12 1215.34 L1146.7 1215.34 L1147.29 1215.34 L1147.88 1215.34 L1148.46 1215.34 L1149.05 1215.34 L1149.63 1215.34 L1150.22 1215.34 L1150.81 1215.34 L1151.39 1215.34 L1151.98 1215.34 L1152.57 1215.34 L1153.15 1215.34 L1153.74 1215.34 L1154.33 1215.34 L1154.91 1215.34 L1155.5 1215.34 L1156.09 1215.34 L1156.67 1215.34 L1157.26 1215.34 L1157.84 1215.34 L1158.43 1215.34 L1159.02 1215.34 L1159.6 1215.34 L1160.19 1215.34 L1160.78 1215.34 L1161.36 1215.34 L1161.95 1215.34 L1162.54 1215.34 L1163.12 1215.34 L1163.71 1215.34 L1164.29 1215.34 L1164.88 1215.34 L1165.47 1215.34 L1166.05 1215.34 L1166.64 1215.34 L1167.23 1215.34 L1167.81 1215.34 L1168.4 1215.34 L1168.99 1215.34 L1169.57 1215.34 L1170.16 1215.34 L1170.75 1215.34 L1171.33 1215.34 L1171.92 1215.34 L1172.5 1215.34 L1173.09 1215.34 L1173.68 1215.34 L1174.26 1215.34 L1174.85 1215.34 L1175.44 1215.34 L1176.02 1215.34 L1176.61 1215.34 L1177.2 1215.34 L1177.78 1215.34 L1178.37 1215.34 L1178.96 1215.34 L1179.54 1215.34 L1180.13 1215.34 L1180.71 1215.34 L1181.3 1215.34 L1181.89 1215.34 L1182.47 1215.34 L1183.06 1215.34 L1183.65 1215.34 L1184.23 1215.34 L1184.82 1215.34 L1185.41 1215.34 L1185.99 1215.34 L1186.58 1215.34 L1187.16 1215.34 L1187.75 1215.34 L1188.34 1215.34 L1188.92 1215.34 L1189.51 1215.34 L1190.1 1215.34 L1190.68 1215.34 L1191.27 1215.34 L1191.86 1215.34 L1192.44 1215.34 L1193.03 1215.34 L1193.62 1215.34 L1194.2 1215.34 L1194.79 1215.34 L1195.37 1215.34 L1195.96 1215.34 L1196.55 1215.34 L1197.13 1215.34 L1197.72 1215.34 L1198.31 1215.34 L1198.89 1215.34 L1199.48 1215.34 L1200.07 1215.34 L1200.65 1215.34 L1201.24 1215.34 L1201.83 1215.34 L1202.41 1215.34 L1203 1215.34 L1203.58 1215.34 L1204.17 1215.34 L1204.76 1215.34 L1205.34 1215.34 L1205.93 1215.34 L1206.52 1215.34 L1207.1 1215.34 L1207.69 1215.34 L1208.28 1215.34 L1208.86 1215.34 L1209.45 1215.34 L1210.03 1215.34 L1210.62 1215.34 L1211.21 1215.34 L1211.79 1215.34 L1212.38 1215.34 L1212.97 1215.34 L1213.55 1215.34 L1214.14 1215.34 L1214.73 1215.34 L1215.31 1215.34 L1215.9 1215.34 L1216.49 1215.34 L1217.07 1215.34 L1217.66 1215.34 L1218.24 1215.34 L1218.83 1215.34 L1219.42 1215.34 L1220 1215.34 L1220.59 1215.34 L1221.18 1215.34 L1221.76 1215.34 L1222.35 1215.34 L1222.94 1215.34 L1223.52 1215.34 L1224.11 1215.34 L1224.7 1215.34 L1225.28 1215.34 L1225.87 1215.34 L1226.45 1215.34 L1227.04 1215.34 L1227.63 1215.34 L1228.21 1215.34 L1228.8 1215.34 L1229.39 1215.34 L1229.97 1215.34 L1230.56 1215.34 L1231.15 1215.34 L1231.73 1215.34 L1232.32 1215.34 L1232.91 1215.34 L1233.49 1215.34 L1234.08 1215.34 L1234.66 1215.34 L1235.25 1215.34 L1235.84 1215.34 L1236.42 1215.34 L1237.01 1215.34 L1237.6 1215.34 L1238.18 1215.34 L1238.77 1215.34 L1239.36 1215.34 L1239.94 1215.34 L1240.53 1215.34 L1241.11 1215.34 L1241.7 1215.34 L1242.29 1215.34 L1242.87 1215.34 L1243.46 1215.34 L1244.05 1215.34 L1244.63 1215.34 L1245.22 1215.34 L1245.81 1215.34 L1246.39 1215.34 L1246.98 1215.34 L1247.57 1215.34 L1248.15 1215.34 L1248.74 1215.34 L1249.32 1215.34 L1249.91 1215.34 L1250.5 1215.34 L1251.08 1215.34 L1251.67 1215.34 L1252.26 1215.34 L1252.84 1215.34 L1253.43 1215.34 L1254.02 1215.34 L1254.6 1215.34 L1255.19 1215.34 L1255.78 1215.34 L1256.36 1215.34 L1256.95 1215.34 L1257.53 1215.34 L1258.12 1215.34 L1258.71 1215.34 L1259.29 1215.34 L1259.88 1215.34 L1260.47 1215.34 L1261.05 1215.34 L1261.64 1215.34 L1262.23 1215.34 L1262.81 1215.34 L1263.4 1215.34 L1263.98 1215.34 L1264.57 1215.34 L1265.16 1215.34 L1265.74 1215.34 L1266.33 1215.34 L1266.92 1215.34 L1267.5 1215.34 L1268.09 1215.34 L1268.68 1215.34 L1269.26 1215.34 L1269.85 1215.34 L1270.44 1215.34 L1271.02 1215.34 L1271.61 1215.34 L1272.19 1215.34 L1272.78 1215.34 L1273.37 1215.34 L1273.95 1215.34 L1274.54 1215.34 L1275.13 1215.34 L1275.71 1215.34 L1276.3 1215.34 L1276.89 1215.34 L1277.47 1215.34 L1278.06 1215.34 L1278.65 1215.34 L1279.23 1215.34 L1279.82 1215.34 L1280.4 1215.34 L1280.99 1215.34 L1281.58 1215.34 L1282.16 1215.34 L1282.75 1215.34 L1283.34 1215.34 L1283.92 1215.34 L1284.51 1215.34 L1285.1 1215.34 L1285.68 1215.34 L1286.27 1215.34 L1286.86 1215.34 L1287.44 1215.34 L1288.03 1215.34 L1288.61 1215.34 L1289.2 1215.34 L1289.79 1215.34 L1290.37 1215.34 L1290.96 1215.34 L1291.55 1215.34 L1292.13 1215.34 L1292.72 1215.34 L1293.31 1215.34 L1293.89 1215.34 L1294.48 1215.34 L1295.06 1215.34 L1295.65 1215.34 L1296.24 1215.34 L1296.82 1215.34 L1297.41 1215.34 L1298 1215.34 L1298.58 1215.34 L1299.17 1215.34 L1299.76 1215.34 L1300.34 1215.34 L1300.93 1215.34 L1301.52 1215.34 L1302.1 1215.34 L1302.69 1215.34 L1303.27 1215.34 L1303.86 1215.34 L1304.45 1215.34 L1305.03 1215.34 L1305.62 1215.34 L1306.21 1215.34 L1306.79 1215.34 L1307.38 1215.34 L1307.97 1215.34 L1308.55 1215.34 L1309.14 1215.34 L1309.73 1215.34 L1310.31 1215.34 L1310.9 1215.34 L1311.48 1215.34 L1312.07 1215.34 L1312.66 1215.34 L1313.24 1215.34 L1313.83 1215.34 L1314.42 1215.34 L1315 1215.34 L1315.59 1215.34 L1316.18 1215.34 L1316.76 1215.34 L1317.35 1215.34 L1317.93 1215.34 L1318.52 1215.34 L1319.11 1215.34 L1319.69 1215.34 L1320.28 1215.34 L1320.87 1215.34 L1321.45 1215.34 L1322.04 1215.34 L1322.63 1215.34 L1323.21 1215.34 L1323.8 1215.34 L1324.39 1215.34 L1324.97 1215.34 L1325.56 1215.34 L1326.14 1215.34 L1326.73 1215.34 L1327.32 1215.34 L1327.9 1215.34 L1328.49 1215.34 L1329.08 1215.34 L1329.66 1215.34 L1330.25 1215.34 L1330.84 1215.34 L1331.42 1215.34 L1332.01 1215.34 L1332.6 1215.34 L1333.18 1215.34 L1333.77 1215.34 L1334.35 1215.34 L1334.94 1215.34 L1335.53 1215.34 L1336.11 1215.34 L1336.7 1215.34 L1337.29 1215.34 L1337.87 1215.34 L1338.46 1215.34 L1339.05 1215.34 L1339.63 1215.34 L1340.22 1215.34 L1340.8 1215.34 L1341.39 1215.34 L1341.98 1215.34 L1342.56 1215.34 L1343.15 1215.34 L1343.74 1215.34 L1344.32 1215.34 L1344.91 1215.34 L1345.5 1215.34 L1346.08 1215.34 L1346.67 1215.34 L1347.26 1215.34 L1347.84 1215.34 L1348.43 1215.34 L1349.01 1215.34 L1349.6 1215.34 L1350.19 1215.34 L1350.77 1215.34 L1351.36 1215.34 L1351.95 1215.34 L1352.53 1215.34 L1353.12 1215.34 L1353.71 1215.34 L1354.29 1215.34 L1354.88 1215.34 L1355.47 1215.34 L1356.05 1215.34 L1356.64 1215.34 L1357.22 1215.34 L1357.81 1215.34 L1358.4 1215.34 L1358.98 1215.34 L1359.57 1215.34 L1360.16 1215.34 L1360.74 1215.34 L1361.33 1215.34 L1361.92 1215.34 L1362.5 1215.34 L1363.09 1215.34 L1363.68 1215.34 L1364.26 1215.34 L1364.85 1215.34 L1365.43 1215.34 L1366.02 1215.34 L1366.61 1215.34 L1367.19 1215.34 L1367.78 1215.34 L1368.37 1215.34 L1368.95 1215.34 L1369.54 1215.34 L1370.13 1215.34 L1370.71 1215.34 L1371.3 1215.34 L1371.88 1215.34 L1372.47 1215.34 L1373.06 1215.34 L1373.64 1215.34 L1374.23 1215.34 L1374.82 1215.34 L1375.4 1215.34 L1375.99 1215.34 L1376.58 1215.34 L1377.16 1215.34 L1377.75 1215.34 L1378.34 1215.34 L1378.92 1215.34 L1379.51 1215.34 L1380.09 1215.34 L1380.68 1215.34 L1381.27 1215.34 L1381.85 1215.34 L1382.44 1215.34 L1383.03 1215.34 L1383.61 1215.34 L1384.2 1215.34 L1384.79 1215.34 L1385.37 1215.34 L1385.96 1215.34 L1386.55 1215.34 L1387.13 1215.34 L1387.72 1215.34 L1388.3 1215.34 L1388.89 1215.34 L1389.48 1215.34 L1390.06 1215.34 L1390.65 1215.34 L1391.24 1215.34 L1391.82 1215.34 L1392.41 1215.34 L1393 1215.34 L1393.58 1215.34 L1394.17 1215.34 L1394.75 1215.34 L1395.34 1215.34 L1395.93 1215.34 L1396.51 1215.34 L1397.1 1215.34 L1397.69 1215.34 L1398.27 1215.34 L1398.86 1215.34 L1399.45 1215.34 L1400.03 1215.34 L1400.62 1215.34 L1401.21 1215.34 L1401.79 1215.34 L1402.38 1215.34 L1402.96 1215.34 L1403.55 1215.34 L1404.14 1215.34 L1404.72 1215.34 L1405.31 1215.34 L1405.9 1215.34 L1406.48 1215.34 L1407.07 1215.34 L1407.66 1215.34 L1408.24 1215.34 L1408.83 1215.34 L1409.42 1215.34 L1410 1215.34 L1410.59 1215.34 L1411.17 1215.34 L1411.76 1215.34 L1412.35 1215.34 L1412.93 1215.34 L1413.52 1215.34 L1414.11 1215.34 L1414.69 1215.34 L1415.28 1215.34 L1415.87 1215.34 L1416.45 1215.34 L1417.04 1215.34 L1417.63 1215.34 L1418.21 1215.34 L1418.8 1215.34 L1419.38 1215.34 L1419.97 1215.34 L1420.56 1215.34 L1421.14 1215.34 L1421.73 1215.34 L1422.32 1215.34 L1422.9 1215.34 L1423.49 1215.34 L1424.08 1215.34 L1424.66 1215.34 L1425.25 1215.34 L1425.83 1215.34 L1426.42 1215.34 L1427.01 1215.34 L1427.59 1215.34 L1428.18 1215.34 L1428.77 1215.34 L1429.35 1215.34 L1429.94 1215.34 L1430.53 1215.34 L1431.11 1215.34 L1431.7 1215.34 L1432.29 1215.34 L1432.87 1215.34 L1433.46 1215.34 L1434.04 1215.34 L1434.63 1215.34 L1435.22 1215.34 L1435.8 1215.34 L1436.39 1215.34 L1436.98 1215.34 L1437.56 1215.34 L1438.15 1215.34 L1438.74 1215.34 L1439.32 1215.34 L1439.91 1215.34 L1440.5 1215.34 L1441.08 1215.34 L1441.67 1215.34 L1442.25 1215.34 L1442.84 1215.34 L1443.43 1215.34 L1444.01 1215.34 L1444.6 1215.34 L1445.19 1215.34 L1445.77 1215.34 L1446.36 1215.34 L1446.95 1215.34 L1447.53 1215.34 L1448.12 1215.34 L1448.7 1215.34 L1449.29 1215.34 L1449.88 1215.34 L1450.46 1215.34 L1451.05 1215.34 L1451.64 1215.34 L1452.22 1215.34 L1452.81 1215.34 L1453.4 1215.34 L1453.98 1215.34 L1454.57 1215.34 L1455.16 1215.34 L1455.74 1215.34 L1456.33 1215.34 L1456.91 1215.34 L1457.5 1215.34 L1458.09 1215.34 L1458.67 1215.34 L1459.26 1215.34 L1459.85 1215.34 L1460.43 1215.34 L1461.02 1215.34 L1461.61 1215.34 L1462.19 1215.34 L1462.78 1215.34 L1463.37 1215.34 L1463.95 1215.34 L1464.54 1215.34 L1465.12 1215.34 L1465.71 1215.34 L1466.3 1215.34 L1466.88 1215.34 L1467.47 1215.34 L1468.06 1215.34 L1468.64 1215.34 L1469.23 1215.34 L1469.82 1215.34 L1470.4 1215.34 L1470.99 1215.34 L1471.57 1215.34 L1472.16 1215.34 L1472.75 1215.34 L1473.33 1215.34 L1473.92 1215.34 L1474.51 1215.34 L1475.09 1215.34 L1475.68 1215.34 L1476.27 1215.34 L1476.85 1215.34 L1477.44 1215.34 L1478.03 1215.34 L1478.61 1215.34 L1479.2 1215.34 L1479.78 1215.34 L1480.37 1215.34 L1480.96 1215.34 L1481.54 1215.34 L1482.13 1215.34 L1482.72 1215.34 L1483.3 1215.34 L1483.89 1215.34 L1484.48 1215.34 L1485.06 1215.34 L1485.65 1215.34 L1486.24 1215.34 L1486.82 1215.34 L1487.41 1215.34 L1487.99 1215.34 L1488.58 1215.34 L1489.17 1215.34 L1489.75 1215.34 L1490.34 1215.34 L1490.93 1215.34 L1491.51 1215.34 L1492.1 1215.34 L1492.69 1215.34 L1493.27 1215.34 L1493.86 1215.34 L1494.45 1215.34 L1495.03 1215.34 L1495.62 1215.34 L1496.2 1215.34 L1496.79 1215.34 L1497.38 1215.34 L1497.96 1215.34 L1498.55 1215.34 L1499.14 1215.34 L1499.72 1215.34 L1500.31 1215.34 L1500.9 1215.34 L1501.48 1215.34 L1502.07 1215.34 L1502.65 1215.34 L1503.24 1215.34 L1503.83 1215.34 L1504.41 1215.34 L1505 1215.34 L1505.59 1215.34 L1506.17 1215.34 L1506.76 1215.34 L1507.35 1215.34 L1507.93 1215.34 L1508.52 1215.34 L1509.11 1215.34 L1509.69 1215.34 L1510.28 1215.34 L1510.86 1215.34 L1511.45 1215.34 L1512.04 1215.34 L1512.62 1215.34 L1513.21 1215.34 L1513.8 1215.34 L1514.38 1215.34 L1514.97 1215.34 L1515.56 1215.34 L1516.14 1215.34 L1516.73 1215.34 L1517.32 1215.34 L1517.9 1215.34 L1518.49 1215.34 L1519.07 1215.34 L1519.66 1215.34 L1520.25 1215.34 L1520.83 1215.34 L1521.42 1215.34 L1522.01 1215.34 L1522.59 1215.34 L1523.18 1215.34 L1523.77 1215.34 L1524.35 1215.34 L1524.94 1215.34 L1525.52 1215.34 L1526.11 1215.34 L1526.7 1215.34 L1527.28 1215.34 L1527.87 1215.34 L1528.46 1215.34 L1529.04 1215.34 L1529.63 1215.34 L1530.22 1215.34 L1530.8 1215.34 L1531.39 1215.34 L1531.98 1215.34 L1532.56 1215.34 L1533.15 1215.34 L1533.73 1215.34 L1534.32 1215.34 L1534.91 1215.34 L1535.49 1215.34 L1536.08 1215.34 L1536.67 1215.34 L1537.25 1215.34 L1537.84 1215.34 L1538.43 1215.34 L1539.01 1215.34 L1539.6 1215.34 L1540.19 1215.34 L1540.77 1215.34 L1541.36 1215.34 L1541.94 1215.34 L1542.53 1215.34 L1543.12 1215.34 L1543.7 1215.34 L1544.29 1215.34 L1544.88 1215.34 L1545.46 1215.34 L1546.05 1215.34 L1546.64 1215.34 L1547.22 1215.34 L1547.81 1215.34 L1548.4 1215.34 L1548.98 1215.34 L1549.57 1215.34 L1550.15 1215.34 L1550.74 1215.34 L1551.33 1215.34 L1551.91 1215.34 L1552.5 1215.34 L1553.09 1215.34 L1553.67 1215.34 L1554.26 1215.34 L1554.85 1215.34 L1555.43 1215.34 L1556.02 1215.34 L1556.6 1215.34 L1557.19 1215.34 L1557.78 1215.34 L1558.36 1215.34 L1558.95 1215.34 L1559.54 1215.34 L1560.12 1215.34 L1560.71 1215.34 L1561.3 1215.34 L1561.88 1215.34 L1562.47 1215.34 L1563.06 1215.34 L1563.64 1215.34 L1564.23 1215.34 L1564.81 1215.34 L1565.4 1215.34 L1565.99 1215.34 L1566.57 1215.34 L1567.16 1215.34 L1567.75 1215.34 L1568.33 1215.34 L1568.92 1215.34 L1569.51 1215.34 L1570.09 1215.34 L1570.68 1215.34 L1571.27 1215.34 L1571.85 1215.34 L1572.44 1215.34 L1573.02 1215.34 L1573.61 1215.34 L1574.2 1215.34 L1574.78 1215.34 L1575.37 1215.34 L1575.96 1215.34 L1576.54 1215.34 L1577.13 1215.34 L1577.72 1215.34 L1578.3 1215.34 L1578.89 1215.34 L1579.47 1215.34 L1580.06 1215.34 L1580.65 1215.34 L1581.23 1215.34 L1581.82 1215.34 L1582.41 1215.34 L1582.99 1215.34 L1583.58 1215.34 L1584.17 1215.34 L1584.75 1215.34 L1585.34 1215.34 L1585.93 1215.34 L1586.51 1215.34 L1587.1 1215.34 L1587.68 1215.34 L1588.27 1215.34 L1588.86 1215.34 L1589.44 1215.34 L1590.03 1215.34 L1590.62 1215.34 L1591.2 1215.34 L1591.79 1215.34 L1592.38 1215.34 L1592.96 1215.34 L1593.55 1215.34 L1594.14 1215.34 L1594.72 1215.34 L1595.31 1215.34 L1595.89 1215.34 L1596.48 1215.34 L1597.07 1215.34 L1597.65 1215.34 L1598.24 1215.34 L1598.83 1215.34 L1599.41 1215.34 L1600 1215.34 L1600.59 1215.34 L1601.17 1215.34 L1601.76 1215.34 L1602.34 1215.34 L1602.93 1215.34 L1603.52 1215.34 L1604.1 1215.34 L1604.69 1215.34 L1605.28 1215.34 L1605.86 1215.34 L1606.45 1215.34 L1607.04 1215.34 L1607.62 1215.34 L1608.21 1215.34 L1608.8 1215.34 L1609.38 1215.34 L1609.97 1215.34 L1610.55 1215.34 L1611.14 1215.34 L1611.73 1215.34 L1612.31 1215.34 L1612.9 1215.34 L1613.49 1215.34 L1614.07 1215.34 L1614.66 1215.34 L1615.25 1215.34 L1615.83 1215.34 L1616.42 1215.34 L1617.01 1215.34 L1617.59 1215.34 L1618.18 1215.34 L1618.76 1215.34 L1619.35 1215.34 L1619.94 1215.34 L1620.52 1215.34 L1621.11 1215.34 L1621.7 1215.34 L1622.28 1215.34 L1622.87 1215.34 L1623.46 1215.34 L1624.04 1215.34 L1624.63 1215.34 L1625.22 1215.34 L1625.8 1215.34 L1626.39 1215.34 L1626.97 1215.34 L1627.56 1215.34 L1628.15 1215.34 L1628.73 1215.34 L1629.32 1215.34 L1629.91 1215.34 L1630.49 1215.34 L1631.08 1215.34 L1631.67 1215.34 L1632.25 1215.34 L1632.84 1215.34 L1633.42 1215.34 L1634.01 1215.34 L1634.6 1215.34 L1635.18 1215.34 L1635.77 1215.34 L1636.36 1215.34 L1636.94 1215.34 L1637.53 1215.34 L1638.12 1215.34 L1638.7 1215.34 L1639.29 1215.34 L1639.88 1215.34 L1640.46 1215.34 L1641.05 1215.34 L1641.63 1215.34 L1642.22 1215.34 L1642.81 1215.34 L1643.39 1215.34 L1643.98 1215.34 L1644.57 1215.34 L1645.15 1215.34 L1645.74 1215.34 L1646.33 1215.34 L1646.91 1215.34 L1647.5 1215.34 L1648.09 1215.34 L1648.67 1215.34 L1649.26 1215.34 L1649.84 1215.34 L1650.43 1215.34 L1651.02 1215.34 L1651.6 1215.34 L1652.19 1215.34 L1652.78 1215.34 L1653.36 1215.34 L1653.95 1215.34 L1654.54 1215.34 L1655.12 1215.34 L1655.71 1215.34 L1656.29 1215.34 L1656.88 1215.34 L1657.47 1215.34 L1658.05 1215.34 L1658.64 1215.34 L1659.23 1215.34 L1659.81 1215.34 L1660.4 1215.34 L1660.99 1215.34 L1661.57 1215.34 L1662.16 1215.34 L1662.75 1215.34 L1663.33 1215.34 L1663.92 1215.34 L1664.5 1215.34 L1665.09 1215.34 L1665.68 1215.34 L1666.26 1215.34 L1666.85 1215.34 L1667.44 1215.34 L1668.02 1215.34 L1668.61 1215.34 L1669.2 1215.34 L1669.78 1215.34 L1670.37 1215.34 L1670.96 1215.34 L1671.54 1215.34 L1672.13 1215.34 L1672.71 1215.34 L1673.3 1215.34 L1673.89 1215.34 L1674.47 1215.34 L1675.06 1215.34 L1675.65 1215.34 L1676.23 1215.34 L1676.82 1215.34 L1677.41 1215.34 L1677.99 1215.34 L1678.58 1215.34 L1679.17 1215.34 L1679.75 1215.34 L1680.34 1215.34 L1680.92 1215.34 L1681.51 1215.34 L1682.1 1215.34 L1682.68 1215.34 L1683.27 1215.34 L1683.86 1215.34 L1684.44 1215.34 L1685.03 1215.34 L1685.62 1215.34 L1686.2 1215.34 L1686.79 1215.34 L1687.37 1215.34 L1687.96 1215.34 L1688.55 1215.34 L1689.13 1215.34 L1689.72 1215.34 L1690.31 1215.34 L1690.89 1215.34 L1691.48 1215.34 L1692.07 1215.34 L1692.65 1215.34 L1693.24 1215.34 L1693.83 1215.34 L1694.41 1215.34 L1695 1215.34 L1695.58 1215.34 L1696.17 1215.34 L1696.76 1215.34 L1697.34 1215.34 L1697.93 1215.34 L1698.52 1215.34 L1699.1 1215.34 L1699.69 1215.34 L1700.28 1215.34 L1700.86 1215.34 L1701.45 1215.34 L1702.04 1215.34 L1702.62 1215.34 L1703.21 1215.34 L1703.79 1215.34 L1704.38 1215.34 L1704.97 1215.34 L1705.55 1215.34 L1706.14 1215.34 L1706.73 1215.34 L1707.31 1215.34 L1707.9 1215.34 L1708.49 1215.34 L1709.07 1215.34 L1709.66 1215.34 L1710.24 1215.34 L1710.83 1215.34 L1711.42 1215.34 L1712 1215.34 L1712.59 1215.34 L1713.18 1215.34 L1713.76 1215.34 L1714.35 1215.34 L1714.94 1215.34 L1715.52 1215.34 L1716.11 1215.34 L1716.7 1215.34 L1717.28 1215.34 L1717.87 1215.34 L1718.45 1215.34 L1719.04 1215.34 L1719.63 1215.34 L1720.21 1215.34 L1720.8 1215.34 L1721.39 1215.34 L1721.97 1215.34 L1722.56 1215.34 L1723.15 1215.34 L1723.73 1215.34 L1724.32 1215.34 L1724.91 1215.34 L1725.49 1215.34 L1726.08 1215.34 L1726.66 1215.34 L1727.25 1215.34 L1727.84 1215.34 L1728.42 1215.34 L1729.01 1215.34 L1729.6 1215.34 L1730.18 1215.34 L1730.77 1215.34 L1731.36 1215.34 L1731.94 1215.34 L1732.53 1215.34 L1733.11 1215.34 L1733.7 1215.34 L1734.29 1215.34 L1734.87 1215.34 L1735.46 1215.34 L1736.05 1215.34 L1736.63 1215.34 L1737.22 1215.34 L1737.81 1215.34 L1738.39 1215.34 L1738.98 1215.34 L1739.57 1215.34 L1740.15 1215.34 L1740.74 1215.34 L1741.32 1215.34 L1741.91 1215.34 L1742.5 1215.34 L1743.08 1215.34 L1743.67 1215.34 L1744.26 1215.34 L1744.84 1215.34 L1745.43 1215.34 L1746.02 1215.34 L1746.6 1215.34 L1747.19 1215.34 L1747.78 1215.34 L1748.36 1215.34 L1748.95 1215.34 L1749.53 1215.34 L1750.12 1215.34 L1750.71 1215.34 L1751.29 1215.34 L1751.88 1215.34 L1752.47 1215.34 L1753.05 1215.34 L1753.64 1215.34 L1754.23 1215.34 L1754.81 1215.34 L1755.4 1215.34 L1755.99 1215.34 L1756.57 1215.34 L1757.16 1215.34 L1757.74 1215.34 L1758.33 1215.34 L1758.92 1215.34 L1759.5 1215.34 L1760.09 1215.34 L1760.68 1215.34 L1761.26 1215.34 L1761.85 1215.34 L1762.44 1215.34 L1763.02 1215.34 L1763.61 1215.34 L1764.19 1215.34 L1764.78 1215.34 L1765.37 1215.34 L1765.95 1215.34 L1766.54 1215.34 L1767.13 1215.34 L1767.71 1215.34 L1768.3 1215.34 L1768.89 1215.34 L1769.47 1215.34 L1770.06 1215.34 L1770.65 1215.34 L1771.23 1215.34 L1771.82 1215.34 L1772.4 1215.34 L1772.99 1215.34 L1773.58 1215.34 L1774.16 1215.34 L1774.75 1215.34 L1775.34 1215.34 L1775.92 1215.34 L1776.51 1215.34 L1777.1 1215.34 L1777.68 1215.34 L1778.27 1215.34 L1778.86 1215.34 L1779.44 1215.34 L1780.03 1215.34 L1780.61 1215.34 L1781.2 1215.34 L1781.79 1215.34 L1782.37 1215.34 L1782.96 1215.34 L1783.55 1215.34 L1784.13 1215.34 L1784.72 1215.34 L1785.31 1215.34 L1785.89 1215.34 L1786.48 1215.34 L1787.06 1215.34 L1787.65 1215.34 L1788.24 1215.34 L1788.82 1215.34 L1789.41 1215.34 L1790 1215.34 L1790.58 1215.34 L1791.17 1215.34 L1791.76 1215.34 L1792.34 1215.34 L1792.93 1215.34 L1793.52 1215.34 L1794.1 1215.34 L1794.69 1215.34 L1795.27 1215.34 L1795.86 1215.34 L1796.45 1215.34 L1797.03 1215.34 L1797.62 1215.34 L1798.21 1215.34 L1798.79 1215.34 L1799.38 1215.34 L1799.97 1215.34 L1800.55 1215.34 L1801.14 1215.34 L1801.73 1215.34 L1802.31 1215.34 L1802.9 1215.34 L1803.48 1215.34 L1804.07 1215.34 L1804.66 1215.34 L1805.24 1215.34 L1805.83 1215.34 L1806.42 1215.34 L1807 1215.34 L1807.59 1215.34 L1808.18 1215.34 L1808.76 1215.34 L1809.35 1215.34 L1809.94 1215.34 L1810.52 1215.34 L1811.11 1215.34 L1811.69 1215.34 L1812.28 1215.34 L1812.87 1215.34 L1813.45 1215.34 L1814.04 1215.34 L1814.63 1215.34 L1815.21 1215.34 L1815.8 1215.34 L1816.39 1215.34 L1816.97 1215.34 L1817.56 1215.34 L1818.14 1215.34 L1818.73 1215.34 L1819.32 1215.34 L1819.9 1215.34 L1820.49 1215.34 L1821.08 1215.34 L1821.66 1215.34 L1822.25 1215.34 L1822.84 1215.34 L1823.42 1215.34 L1824.01 1215.34 L1824.6 1215.34 L1825.18 1215.34 L1825.77 1215.34 L1826.35 1215.34 L1826.94 1215.34 L1827.53 1215.34 L1828.11 1215.34 L1828.7 1215.34 L1829.29 1215.34 L1829.87 1215.34 L1830.46 1215.34 L1831.05 1215.34 L1831.63 1215.34 L1832.22 1215.34 L1832.81 1215.34 L1833.39 1215.34 L1833.98 1215.34 L1834.56 1215.34 L1835.15 1215.34 L1835.74 1215.34 L1836.32 1215.34 L1836.91 1215.34 L1837.5 1215.34 L1838.08 1215.34 L1838.67 1215.34 L1839.26 1215.34 L1839.84 1215.34 L1840.43 1215.34 L1841.01 1215.34 L1841.6 1215.34 L1842.19 1215.34 L1842.77 1215.34 L1843.36 1215.34 L1843.95 1215.34 L1844.53 1215.34 L1845.12 1215.34 L1845.71 1215.34 L1846.29 1215.34 L1846.88 1215.34 L1847.47 1215.34 L1848.05 1215.34 L1848.64 1215.34 L1849.22 1215.34 L1849.81 1215.34 L1850.4 1215.34 L1850.98 1215.34 L1851.57 1215.34 L1852.16 1215.34 L1852.74 1215.34 L1853.33 1215.34 L1853.92 1215.34 L1854.5 1215.34 L1855.09 1215.34 L1855.68 1215.34 L1856.26 1215.34 L1856.85 1215.34 L1857.43 1215.34 L1858.02 1215.34 L1858.61 1215.34 L1859.19 1215.34 L1859.78 1215.34 L1860.37 1215.34 L1860.95 1215.34 L1861.54 1215.34 L1862.13 1215.34 L1862.71 1215.34 L1863.3 1215.34 L1863.88 1215.34 L1864.47 1215.34 L1865.06 1215.34 L1865.64 1215.34 L1866.23 1215.34 L1866.82 1215.34 L1867.4 1215.34 L1867.99 1215.34 L1868.58 1215.34 L1869.16 1215.34 L1869.75 1215.34 L1870.34 1215.34 L1870.92 1215.34 L1871.51 1215.34 L1872.09 1215.34 L1872.68 1215.34 L1873.27 1215.34 L1873.85 1215.34 L1874.44 1215.34 L1875.03 1215.34 L1875.61 1215.34 L1876.2 1215.34 L1876.79 1215.34 L1877.37 1215.34 L1877.96 1215.34 L1878.55 1215.34 L1879.13 1215.34 L1879.72 1215.34 L1880.3 1215.34 L1880.89 1215.34 L1881.48 1215.34 L1882.06 1215.34 L1882.65 1215.34 L1883.24 1215.34 L1883.82 1215.34 L1884.41 1215.34 L1885 1215.34 L1885.58 1215.34 L1886.17 1215.34 L1886.76 1215.34 L1887.34 1215.34 L1887.93 1215.34 L1888.51 1215.34 L1889.1 1215.34 L1889.69 1215.34 L1890.27 1215.34 L1890.86 1215.34 L1891.45 1215.34 L1892.03 1215.34 L1892.62 1215.34 L1893.21 1215.34 L1893.79 1215.34 L1894.38 1215.34 L1894.96 1215.34 L1895.55 1215.34 L1896.14 1215.34 L1896.72 1215.34 L1897.31 1215.34 L1897.9 1215.34 L1898.48 1215.34 L1899.07 1215.34 L1899.66 1215.34 L1900.24 1215.34 L1900.83 1215.34 L1901.42 1215.34 L1902 1215.34 L1902.59 1215.34 L1903.17 1215.34 L1903.76 1215.34 L1904.35 1215.34 L1904.93 1215.34 L1905.52 1215.34 L1906.11 1215.34 L1906.69 1215.34 L1907.28 1215.34 L1907.87 1215.34 L1908.45 1215.34 L1909.04 1215.34 L1909.63 1215.34 L1910.21 1215.34 L1910.8 1215.34 L1911.38 1215.34 L1911.97 1215.34 L1912.56 1215.34 L1913.14 1215.34 L1913.73 1215.34 L1914.32 1215.34 L1914.9 1215.34 L1915.49 1215.34 L1916.08 1215.34 L1916.66 1215.34 L1917.25 1215.34 L1917.83 1215.34 L1918.42 1215.34 L1919.01 1215.34 L1919.59 1215.34 L1920.18 1215.34 L1920.77 1215.34 L1921.35 1215.34 L1921.94 1215.34 L1922.53 1215.34 L1923.11 1215.34 L1923.7 1215.34 L1924.29 1215.34 L1924.87 1215.34 L1925.46 1215.34 L1926.04 1215.34 L1926.63 1215.34 L1927.22 1215.34 L1927.8 1215.34 L1928.39 1215.34 L1928.98 1215.34 L1929.56 1215.34 L1930.15 1215.34 L1930.74 1215.34 L1931.32 1215.34 L1931.91 1215.34 L1932.5 1215.34 L1933.08 1215.34 L1933.67 1215.34 L1934.25 1215.34 L1934.84 1215.34 L1935.43 1215.34 L1936.01 1215.34 L1936.6 1215.34 L1937.19 1215.34 L1937.77 1215.34 L1938.36 1215.34 L1938.95 1215.34 L1939.53 1215.34 L1940.12 1215.34 L1940.71 1215.34 L1941.29 1215.34 L1941.88 1215.34 L1942.46 1215.34 L1943.05 1215.34 L1943.64 1215.34 L1944.22 1215.34 L1944.81 1215.34 L1945.4 1215.34 L1945.98 1215.34 L1946.57 1215.34 L1947.16 1215.34 L1947.74 1215.34 L1948.33 1215.34 L1948.91 1215.34 L1949.5 1215.34 L1950.09 1215.34 L1950.67 1215.34 L1951.26 1215.34 L1951.85 1215.34 L1952.43 1215.34 L1953.02 1215.34 L1953.61 1215.34 L1954.19 1215.34 L1954.78 1215.34 L1955.37 1215.34 L1955.95 1215.34 L1956.54 1215.34 L1957.12 1215.34 L1957.71 1215.34 L1958.3 1215.34 L1958.88 1215.34 L1959.47 1215.34 L1960.06 1215.34 L1960.64 1215.34 L1961.23 1215.34 L1961.82 1215.34 L1962.4 1215.34 L1962.99 1215.34 L1963.58 1215.34 L1964.16 1215.34 L1964.75 1215.34 L1965.33 1215.34 L1965.92 1215.34 L1966.51 1215.34 L1967.09 1215.34 L1967.68 1215.34 L1968.27 1215.34 L1968.85 1215.34 L1969.44 1215.34 L1970.03 1215.34 L1970.61 1215.34 L1971.2 1215.34 L1971.78 1215.34 L1972.37 1215.34 L1972.96 1215.34 L1973.54 1215.34 L1974.13 1215.34 L1974.72 1215.34 L1975.3 1215.34 L1975.89 1215.34 L1976.48 1215.34 L1977.06 1215.34 L1977.65 1215.34 L1978.24 1215.34 L1978.82 1215.34 L1979.41 1215.34 L1979.99 1215.34 L1980.58 1215.34 L1981.17 1215.34 L1981.75 1215.34 L1982.34 1215.34 L1982.93 1215.34 L1983.51 1215.34 L1984.1 1215.34 L1984.69 1215.34 L1985.27 1215.34 L1985.86 1215.34 L1986.45 1215.34 L1987.03 1215.34 L1987.62 1215.34 L1988.2 1215.34 L1988.79 1215.34 L1989.38 1215.34 L1989.96 1215.34 L1990.55 1215.34 L1991.14 1215.34 L1991.72 1215.34 L1992.31 1215.34 L1992.9 1215.34 L1993.48 1215.34 L1994.07 1215.34 L1994.65 1215.34 L1995.24 1215.34 L1995.83 1215.34 L1996.41 1215.34 L1997 1215.34 L1997.59 1215.34 L1998.17 1215.34 L1998.76 1215.34 L1999.35 1215.34 L1999.93 1215.34 L2000.52 1215.34 L2001.11 1215.34 L2001.69 1215.34 L2002.28 1215.34 L2002.86 1215.34 L2003.45 1215.34 L2004.04 1215.34 L2004.62 1215.34 L2005.21 1215.34 L2005.8 1215.34 L2006.38 1215.34 L2006.97 1215.34 L2007.56 1215.34 L2008.14 1215.34 L2008.73 1215.34 L2009.32 1215.34 L2009.9 1215.34 L2010.49 1215.34 L2011.07 1215.34 L2011.66 1215.34 L2012.25 1215.34 L2012.83 1215.34 L2013.42 1215.34 L2014.01 1215.34 L2014.59 1215.34 L2015.18 1215.34 L2015.77 1215.34 L2016.35 1215.34 L2016.94 1215.34 L2017.53 1215.34 L2018.11 1215.34 L2018.7 1215.34 L2019.28 1215.34 L2019.87 1215.34 L2020.46 1215.34 L2021.04 1215.34 L2021.63 1215.34 L2022.22 1215.34 L2022.8 1215.34 L2023.39 1215.34 L2023.98 1215.34 L2024.56 1215.34 L2025.15 1215.34 L2025.73 1215.34 L2026.32 1215.34 L2026.91 1215.34 L2027.49 1215.34 L2028.08 1215.34 L2028.67 1215.34 L2029.25 1215.34 L2029.84 1215.34 L2030.43 1215.34 L2031.01 1215.34 L2031.6 1215.34 L2032.19 1215.34 L2032.77 1215.34 L2033.36 1215.34 L2033.94 1215.34 L2034.53 1215.34 L2035.12 1215.34 L2035.7 1215.34 L2036.29 1215.34 L2036.88 1215.34 L2037.46 1215.34 L2038.05 1215.34 L2038.64 1215.34 L2039.22 1215.34 L2039.81 1215.34 L2040.4 1215.34 L2040.98 1215.34 L2041.57 1215.34 L2042.15 1215.34 L2042.74 1215.34 L2043.33 1215.34 L2043.91 1215.34 L2044.5 1215.34 L2045.09 1215.34 L2045.67 1215.34 L2046.26 1215.34 L2046.85 1215.34 L2047.43 1215.34 L2048.02 1215.34 L2048.6 1215.34 L2049.19 1215.34 L2049.78 1215.34 L2050.36 1215.34 L2050.95 1215.34 L2051.54 1215.34 L2052.12 1215.34 L2052.71 1215.34 L2053.3 1215.34 L2053.88 1215.34 L2054.47 1215.34 L2055.06 1215.34 L2055.64 1215.34 L2056.23 1215.34 L2056.81 1215.34 L2057.4 1215.34 L2057.99 1215.34 L2058.57 1215.34 L2059.16 1215.34 L2059.75 1215.34 L2060.33 1215.34 L2060.92 1215.34 L2061.51 1215.34 L2062.09 1215.34 L2062.68 1215.34 L2063.27 1215.34 L2063.85 1215.34 L2064.44 1215.34 L2065.02 1215.34 L2065.61 1215.34 L2066.2 1215.34 L2066.78 1215.34 L2067.37 1215.34 L2067.96 1215.34 L2068.54 1215.34 L2069.13 1215.34 L2069.72 1215.34 L2070.3 1215.34 L2070.89 1215.34 L2071.48 1215.34 L2072.06 1215.34 L2072.65 1215.34 L2073.23 1215.34 L2073.82 1215.34 L2074.41 1215.34 L2074.99 1215.34 L2075.58 1215.34 L2076.17 1215.34 L2076.75 1215.34 L2077.34 1215.34 L2077.93 1215.34 L2078.51 1215.34 L2079.1 1215.34 L2079.68 1215.34 L2080.27 1215.34 L2080.86 1215.34 L2081.44 1215.34 L2082.03 1215.34 L2082.62 1215.34 L2083.2 1215.34 L2083.79 1215.34 L2084.38 1215.34 L2084.96 1215.34 L2085.55 1215.34 L2086.14 1215.34 L2086.72 1215.34 L2087.31 1215.34 L2087.89 1215.34 L2088.48 1215.34 L2089.07 1215.34 L2089.65 1215.34 L2090.24 1215.34 L2090.83 1215.34 L2091.41 1215.34 L2092 1215.34 L2092.59 1215.34 L2093.17 1215.34 L2093.76 1215.34 L2094.35 1215.34 L2094.93 1215.34 L2095.52 1215.34 L2096.1 1215.34 L2096.69 1215.34 L2097.28 1215.34 L2097.86 1215.34 L2098.45 1215.34 L2099.04 1215.34 L2099.62 1215.34 L2100.21 1215.34 L2100.8 1215.34 L2101.38 1215.34 L2101.97 1215.34 L2102.55 1215.34 L2103.14 1215.34 L2103.73 1215.34 L2104.31 1215.34 L2104.9 1215.34 L2105.49 1215.34 L2106.07 1215.34 L2106.66 1215.34 L2107.25 1215.34 L2107.83 1215.34 L2108.42 1215.34 L2109.01 1215.34 L2109.59 1215.34 L2110.18 1215.34 L2110.76 1215.34 L2111.35 1215.34 L2111.94 1215.34 L2112.52 1215.34 L2113.11 1215.34 L2113.7 1215.34 L2114.28 1215.34 L2114.87 1215.34 L2115.46 1215.34 L2116.04 1215.34 L2116.63 1215.34 L2117.22 1215.34 L2117.8 1215.34 L2118.39 1215.34 L2118.97 1215.34 L2119.56 1215.34 L2120.15 1215.34 L2120.73 1215.34 L2121.32 1215.34 L2121.91 1215.34 L2122.49 1215.34 L2123.08 1215.34 L2123.67 1215.34 L2124.25 1215.34 L2124.84 1215.34 L2125.42 1215.34 L2126.01 1215.34 L2126.6 1215.34 L2127.18 1215.34 L2127.77 1215.34 L2128.36 1215.34 L2128.94 1215.34 L2129.53 1215.34 L2130.12 1215.34 L2130.7 1215.34 L2131.29 1215.34 L2131.88 1215.34 L2132.46 1215.34 L2133.05 1215.34 L2133.63 1215.34 L2134.22 1215.34 L2134.81 1215.34 L2135.39 1215.34 L2135.98 1215.34 L2136.57 1215.34 L2137.15 1215.34 L2137.74 1215.34 L2138.33 1215.34 L2138.91 1215.34 L2139.5 1215.34 L2140.09 1215.34 L2140.67 1215.34 L2141.26 1215.34 L2141.84 1215.34 L2142.43 1215.34 L2143.02 1215.34 L2143.6 1215.34 L2144.19 1215.34 L2144.78 1215.34 L2145.36 1215.34 L2145.95 1215.34 L2146.54 1215.34 L2147.12 1215.34 L2147.71 1215.34 L2148.3 1215.34 L2148.88 1215.34 L2149.47 1215.34 L2150.05 1215.34 L2150.64 1215.34 L2151.23 1215.34 L2151.81 1215.34 L2152.4 1215.34 L2152.99 1215.34 L2153.57 1215.34 L2154.16 1215.34 L2154.75 1215.34 L2155.33 1215.34 L2155.92 1215.34 L2156.5 1215.34 L2157.09 1215.34 L2157.68 1215.34 L2158.26 1215.34 L2158.26 1214.7 L2157.68 1214.7 L2157.09 1214.7 L2156.5 1214.7 L2155.92 1214.7 L2155.33 1214.7 L2154.75 1214.7 L2154.16 1214.7 L2153.57 1214.7 L2152.99 1214.7 L2152.4 1214.7 L2151.81 1214.7 L2151.23 1214.7 L2150.64 1214.7 L2150.05 1214.7 L2149.47 1214.7 L2148.88 1214.7 L2148.3 1214.7 L2147.71 1214.7 L2147.12 1214.7 L2146.54 1214.7 L2145.95 1214.7 L2145.36 1214.7 L2144.78 1214.7 L2144.19 1214.7 L2143.6 1214.7 L2143.02 1214.7 L2142.43 1214.7 L2141.84 1214.7 L2141.26 1214.7 L2140.67 1214.7 L2140.09 1214.7 L2139.5 1214.7 L2138.91 1214.7 L2138.33 1214.7 L2137.74 1214.7 L2137.15 1214.7 L2136.57 1214.7 L2135.98 1214.7 L2135.39 1214.7 L2134.81 1214.7 L2134.22 1214.7 L2133.63 1214.7 L2133.05 1214.7 L2132.46 1214.7 L2131.88 1214.7 L2131.29 1214.7 L2130.7 1214.7 L2130.12 1214.7 L2129.53 1214.7 L2128.94 1214.7 L2128.36 1214.7 L2127.77 1214.7 L2127.18 1214.7 L2126.6 1214.7 L2126.01 1214.7 L2125.42 1214.7 L2124.84 1214.7 L2124.25 1214.7 L2123.67 1214.7 L2123.08 1214.7 L2122.49 1214.7 L2121.91 1214.7 L2121.32 1214.7 L2120.73 1214.7 L2120.15 1214.7 L2119.56 1214.7 L2118.97 1214.7 L2118.39 1214.7 L2117.8 1214.7 L2117.22 1214.7 L2116.63 1214.7 L2116.04 1214.7 L2115.46 1214.7 L2114.87 1214.7 L2114.28 1214.7 L2113.7 1214.7 L2113.11 1214.7 L2112.52 1214.7 L2111.94 1214.7 L2111.35 1214.7 L2110.76 1214.7 L2110.18 1214.7 L2109.59 1214.7 L2109.01 1214.7 L2108.42 1214.7 L2107.83 1214.7 L2107.25 1214.7 L2106.66 1214.7 L2106.07 1214.7 L2105.49 1214.7 L2104.9 1214.7 L2104.31 1214.7 L2103.73 1214.7 L2103.14 1214.7 L2102.55 1214.7 L2101.97 1214.7 L2101.38 1214.7 L2100.8 1214.7 L2100.21 1214.7 L2099.62 1214.7 L2099.04 1214.7 L2098.45 1214.7 L2097.86 1214.7 L2097.28 1214.7 L2096.69 1214.7 L2096.1 1214.7 L2095.52 1214.7 L2094.93 1214.7 L2094.35 1214.7 L2093.76 1214.7 L2093.17 1214.7 L2092.59 1214.7 L2092 1214.7 L2091.41 1214.7 L2090.83 1214.7 L2090.24 1214.7 L2089.65 1214.7 L2089.07 1214.7 L2088.48 1214.7 L2087.89 1214.7 L2087.31 1214.7 L2086.72 1214.7 L2086.14 1214.7 L2085.55 1214.7 L2084.96 1214.7 L2084.38 1214.7 L2083.79 1214.7 L2083.2 1214.7 L2082.62 1214.7 L2082.03 1214.7 L2081.44 1214.7 L2080.86 1214.7 L2080.27 1214.7 L2079.68 1214.7 L2079.1 1214.7 L2078.51 1214.7 L2077.93 1214.7 L2077.34 1214.7 L2076.75 1214.7 L2076.17 1214.7 L2075.58 1214.7 L2074.99 1214.7 L2074.41 1214.7 L2073.82 1214.7 L2073.23 1214.7 L2072.65 1214.7 L2072.06 1214.7 L2071.48 1214.7 L2070.89 1214.7 L2070.3 1214.7 L2069.72 1214.7 L2069.13 1214.7 L2068.54 1214.7 L2067.96 1214.7 L2067.37 1214.7 L2066.78 1214.7 L2066.2 1214.7 L2065.61 1214.7 L2065.02 1214.7 L2064.44 1214.7 L2063.85 1214.7 L2063.27 1214.7 L2062.68 1214.7 L2062.09 1214.7 L2061.51 1214.7 L2060.92 1214.7 L2060.33 1214.7 L2059.75 1214.7 L2059.16 1214.7 L2058.57 1214.7 L2057.99 1214.7 L2057.4 1214.7 L2056.81 1214.7 L2056.23 1214.7 L2055.64 1214.7 L2055.06 1214.7 L2054.47 1214.7 L2053.88 1214.7 L2053.3 1214.7 L2052.71 1214.7 L2052.12 1214.7 L2051.54 1214.7 L2050.95 1214.7 L2050.36 1214.7 L2049.78 1214.7 L2049.19 1214.7 L2048.6 1214.7 L2048.02 1214.7 L2047.43 1214.7 L2046.85 1214.7 L2046.26 1214.7 L2045.67 1214.7 L2045.09 1214.7 L2044.5 1214.7 L2043.91 1214.7 L2043.33 1214.7 L2042.74 1214.7 L2042.15 1214.7 L2041.57 1214.7 L2040.98 1214.7 L2040.4 1214.7 L2039.81 1214.7 L2039.22 1214.7 L2038.64 1214.7 L2038.05 1214.7 L2037.46 1214.7 L2036.88 1214.7 L2036.29 1214.7 L2035.7 1214.7 L2035.12 1214.7 L2034.53 1214.7 L2033.94 1214.7 L2033.36 1214.7 L2032.77 1214.7 L2032.19 1214.7 L2031.6 1214.7 L2031.01 1214.7 L2030.43 1214.7 L2029.84 1214.7 L2029.25 1214.7 L2028.67 1214.7 L2028.08 1214.7 L2027.49 1214.7 L2026.91 1214.7 L2026.32 1214.7 L2025.73 1214.7 L2025.15 1214.7 L2024.56 1214.7 L2023.98 1214.7 L2023.39 1214.7 L2022.8 1214.7 L2022.22 1214.7 L2021.63 1214.7 L2021.04 1214.7 L2020.46 1214.7 L2019.87 1214.7 L2019.28 1214.7 L2018.7 1214.7 L2018.11 1214.7 L2017.53 1214.7 L2016.94 1214.7 L2016.35 1214.7 L2015.77 1214.7 L2015.18 1214.7 L2014.59 1214.7 L2014.01 1214.7 L2013.42 1214.7 L2012.83 1214.7 L2012.25 1214.7 L2011.66 1214.7 L2011.07 1214.7 L2010.49 1214.7 L2009.9 1214.7 L2009.32 1214.7 L2008.73 1214.7 L2008.14 1214.7 L2007.56 1214.7 L2006.97 1214.7 L2006.38 1214.7 L2005.8 1214.7 L2005.21 1214.7 L2004.62 1214.7 L2004.04 1214.7 L2003.45 1214.7 L2002.86 1214.7 L2002.28 1214.7 L2001.69 1214.7 L2001.11 1214.7 L2000.52 1214.7 L1999.93 1214.7 L1999.35 1214.7 L1998.76 1214.7 L1998.17 1214.7 L1997.59 1214.7 L1997 1214.7 L1996.41 1214.7 L1995.83 1214.7 L1995.24 1214.7 L1994.65 1214.7 L1994.07 1214.7 L1993.48 1214.7 L1992.9 1214.7 L1992.31 1214.7 L1991.72 1214.7 L1991.14 1214.7 L1990.55 1214.7 L1989.96 1214.7 L1989.38 1214.7 L1988.79 1214.7 L1988.2 1214.7 L1987.62 1214.7 L1987.03 1214.7 L1986.45 1214.7 L1985.86 1214.7 L1985.27 1214.7 L1984.69 1214.7 L1984.1 1214.7 L1983.51 1214.7 L1982.93 1214.7 L1982.34 1214.7 L1981.75 1214.7 L1981.17 1214.7 L1980.58 1214.7 L1979.99 1214.7 L1979.41 1214.7 L1978.82 1214.7 L1978.24 1214.7 L1977.65 1214.7 L1977.06 1214.7 L1976.48 1214.7 L1975.89 1214.7 L1975.3 1214.7 L1974.72 1214.7 L1974.13 1214.7 L1973.54 1214.7 L1972.96 1214.7 L1972.37 1214.7 L1971.78 1214.7 L1971.2 1214.7 L1970.61 1214.7 L1970.03 1214.7 L1969.44 1214.7 L1968.85 1214.7 L1968.27 1214.7 L1967.68 1214.7 L1967.09 1214.7 L1966.51 1214.7 L1965.92 1214.7 L1965.33 1214.7 L1964.75 1214.7 L1964.16 1214.7 L1963.58 1214.7 L1962.99 1214.7 L1962.4 1214.7 L1961.82 1214.7 L1961.23 1214.7 L1960.64 1214.7 L1960.06 1214.7 L1959.47 1214.7 L1958.88 1214.7 L1958.3 1214.7 L1957.71 1214.7 L1957.12 1214.7 L1956.54 1214.7 L1955.95 1214.7 L1955.37 1214.7 L1954.78 1214.7 L1954.19 1214.7 L1953.61 1214.7 L1953.02 1214.7 L1952.43 1214.7 L1951.85 1214.7 L1951.26 1214.7 L1950.67 1214.7 L1950.09 1214.7 L1949.5 1214.7 L1948.91 1214.7 L1948.33 1214.7 L1947.74 1214.7 L1947.16 1214.7 L1946.57 1214.7 L1945.98 1214.7 L1945.4 1214.7 L1944.81 1214.7 L1944.22 1214.7 L1943.64 1214.7 L1943.05 1214.7 L1942.46 1214.7 L1941.88 1214.7 L1941.29 1214.7 L1940.71 1214.7 L1940.12 1214.7 L1939.53 1214.7 L1938.95 1214.7 L1938.36 1214.7 L1937.77 1214.7 L1937.19 1214.7 L1936.6 1214.7 L1936.01 1214.7 L1935.43 1214.7 L1934.84 1214.7 L1934.25 1214.7 L1933.67 1214.7 L1933.08 1214.7 L1932.5 1214.7 L1931.91 1214.7 L1931.32 1214.7 L1930.74 1214.7 L1930.15 1214.7 L1929.56 1214.7 L1928.98 1214.7 L1928.39 1214.7 L1927.8 1214.7 L1927.22 1214.7 L1926.63 1214.7 L1926.04 1214.7 L1925.46 1214.7 L1924.87 1214.7 L1924.29 1214.7 L1923.7 1214.7 L1923.11 1214.7 L1922.53 1214.7 L1921.94 1214.7 L1921.35 1214.7 L1920.77 1214.7 L1920.18 1214.7 L1919.59 1214.7 L1919.01 1214.7 L1918.42 1214.7 L1917.83 1214.7 L1917.25 1214.7 L1916.66 1214.7 L1916.08 1214.7 L1915.49 1214.7 L1914.9 1214.7 L1914.32 1214.7 L1913.73 1214.7 L1913.14 1214.7 L1912.56 1214.7 L1911.97 1214.7 L1911.38 1214.7 L1910.8 1214.7 L1910.21 1214.7 L1909.63 1214.7 L1909.04 1214.7 L1908.45 1214.7 L1907.87 1214.7 L1907.28 1214.7 L1906.69 1214.7 L1906.11 1214.7 L1905.52 1214.7 L1904.93 1214.7 L1904.35 1214.7 L1903.76 1214.7 L1903.17 1214.7 L1902.59 1214.7 L1902 1214.7 L1901.42 1214.7 L1900.83 1214.7 L1900.24 1214.7 L1899.66 1214.7 L1899.07 1214.7 L1898.48 1214.7 L1897.9 1214.7 L1897.31 1214.7 L1896.72 1214.7 L1896.14 1214.7 L1895.55 1214.7 L1894.96 1214.7 L1894.38 1214.7 L1893.79 1214.7 L1893.21 1214.7 L1892.62 1214.7 L1892.03 1214.7 L1891.45 1214.7 L1890.86 1214.7 L1890.27 1214.7 L1889.69 1214.7 L1889.1 1214.7 L1888.51 1214.7 L1887.93 1214.7 L1887.34 1214.7 L1886.76 1214.7 L1886.17 1214.7 L1885.58 1214.7 L1885 1214.7 L1884.41 1214.7 L1883.82 1214.7 L1883.24 1214.7 L1882.65 1214.7 L1882.06 1214.7 L1881.48 1214.7 L1880.89 1214.7 L1880.3 1214.7 L1879.72 1214.7 L1879.13 1214.7 L1878.55 1214.7 L1877.96 1214.7 L1877.37 1214.7 L1876.79 1214.7 L1876.2 1214.7 L1875.61 1214.7 L1875.03 1214.7 L1874.44 1214.7 L1873.85 1214.7 L1873.27 1214.7 L1872.68 1214.7 L1872.09 1214.7 L1871.51 1214.7 L1870.92 1214.7 L1870.34 1214.7 L1869.75 1214.7 L1869.16 1214.7 L1868.58 1214.7 L1867.99 1214.7 L1867.4 1214.7 L1866.82 1214.7 L1866.23 1214.7 L1865.64 1214.7 L1865.06 1214.7 L1864.47 1214.7 L1863.88 1214.7 L1863.3 1214.7 L1862.71 1214.7 L1862.13 1214.7 L1861.54 1214.7 L1860.95 1214.7 L1860.37 1214.7 L1859.78 1214.7 L1859.19 1214.7 L1858.61 1214.7 L1858.02 1214.7 L1857.43 1214.7 L1856.85 1214.7 L1856.26 1214.7 L1855.68 1214.7 L1855.09 1214.7 L1854.5 1214.7 L1853.92 1214.7 L1853.33 1214.7 L1852.74 1214.7 L1852.16 1214.7 L1851.57 1214.7 L1850.98 1214.7 L1850.4 1214.7 L1849.81 1214.7 L1849.22 1214.7 L1848.64 1214.7 L1848.05 1214.7 L1847.47 1214.7 L1846.88 1214.7 L1846.29 1214.7 L1845.71 1214.7 L1845.12 1214.7 L1844.53 1214.7 L1843.95 1214.7 L1843.36 1214.7 L1842.77 1214.7 L1842.19 1214.7 L1841.6 1214.7 L1841.01 1214.7 L1840.43 1214.7 L1839.84 1214.7 L1839.26 1214.7 L1838.67 1214.7 L1838.08 1214.7 L1837.5 1214.7 L1836.91 1214.7 L1836.32 1214.7 L1835.74 1214.7 L1835.15 1214.7 L1834.56 1214.7 L1833.98 1214.7 L1833.39 1214.7 L1832.81 1214.7 L1832.22 1214.7 L1831.63 1214.7 L1831.05 1214.7 L1830.46 1214.7 L1829.87 1214.7 L1829.29 1214.7 L1828.7 1214.7 L1828.11 1214.7 L1827.53 1214.7 L1826.94 1214.7 L1826.35 1214.7 L1825.77 1214.7 L1825.18 1214.7 L1824.6 1214.7 L1824.01 1214.7 L1823.42 1214.7 L1822.84 1214.7 L1822.25 1214.7 L1821.66 1214.7 L1821.08 1214.7 L1820.49 1214.7 L1819.9 1214.7 L1819.32 1214.7 L1818.73 1214.7 L1818.14 1214.7 L1817.56 1214.7 L1816.97 1214.7 L1816.39 1214.7 L1815.8 1214.7 L1815.21 1214.7 L1814.63 1214.7 L1814.04 1214.7 L1813.45 1214.7 L1812.87 1214.7 L1812.28 1214.7 L1811.69 1214.7 L1811.11 1214.7 L1810.52 1214.7 L1809.94 1214.7 L1809.35 1214.7 L1808.76 1214.7 L1808.18 1214.7 L1807.59 1214.7 L1807 1214.7 L1806.42 1214.7 L1805.83 1214.7 L1805.24 1214.7 L1804.66 1214.7 L1804.07 1214.7 L1803.48 1214.7 L1802.9 1214.7 L1802.31 1214.7 L1801.73 1214.7 L1801.14 1214.7 L1800.55 1214.7 L1799.97 1214.7 L1799.38 1214.7 L1798.79 1214.7 L1798.21 1214.7 L1797.62 1214.7 L1797.03 1214.7 L1796.45 1214.7 L1795.86 1214.7 L1795.27 1214.7 L1794.69 1214.7 L1794.1 1214.7 L1793.52 1214.7 L1792.93 1214.7 L1792.34 1214.7 L1791.76 1214.7 L1791.17 1214.7 L1790.58 1214.7 L1790 1214.7 L1789.41 1214.7 L1788.82 1214.7 L1788.24 1214.7 L1787.65 1214.7 L1787.06 1214.7 L1786.48 1214.7 L1785.89 1214.7 L1785.31 1214.7 L1784.72 1214.7 L1784.13 1214.7 L1783.55 1214.7 L1782.96 1214.7 L1782.37 1214.7 L1781.79 1214.7 L1781.2 1214.7 L1780.61 1214.7 L1780.03 1214.7 L1779.44 1214.7 L1778.86 1214.7 L1778.27 1214.7 L1777.68 1214.7 L1777.1 1214.7 L1776.51 1214.7 L1775.92 1214.7 L1775.34 1214.7 L1774.75 1214.7 L1774.16 1214.7 L1773.58 1214.7 L1772.99 1214.7 L1772.4 1214.7 L1771.82 1214.7 L1771.23 1214.7 L1770.65 1214.7 L1770.06 1214.7 L1769.47 1214.7 L1768.89 1214.7 L1768.3 1214.7 L1767.71 1214.7 L1767.13 1214.7 L1766.54 1214.7 L1765.95 1214.7 L1765.37 1214.7 L1764.78 1214.7 L1764.19 1214.7 L1763.61 1214.7 L1763.02 1214.7 L1762.44 1214.7 L1761.85 1214.7 L1761.26 1214.7 L1760.68 1214.7 L1760.09 1214.7 L1759.5 1214.7 L1758.92 1214.7 L1758.33 1214.7 L1757.74 1214.7 L1757.16 1214.7 L1756.57 1214.7 L1755.99 1214.7 L1755.4 1214.7 L1754.81 1214.7 L1754.23 1214.7 L1753.64 1214.7 L1753.05 1214.7 L1752.47 1214.7 L1751.88 1214.7 L1751.29 1214.7 L1750.71 1214.7 L1750.12 1214.7 L1749.53 1214.7 L1748.95 1214.7 L1748.36 1214.7 L1747.78 1214.7 L1747.19 1214.7 L1746.6 1214.7 L1746.02 1214.7 L1745.43 1214.7 L1744.84 1214.7 L1744.26 1214.7 L1743.67 1214.7 L1743.08 1214.7 L1742.5 1214.7 L1741.91 1214.7 L1741.32 1214.7 L1740.74 1214.7 L1740.15 1214.7 L1739.57 1214.7 L1738.98 1214.7 L1738.39 1214.7 L1737.81 1214.7 L1737.22 1214.7 L1736.63 1214.7 L1736.05 1214.7 L1735.46 1214.7 L1734.87 1214.7 L1734.29 1214.7 L1733.7 1214.7 L1733.11 1214.7 L1732.53 1214.7 L1731.94 1214.7 L1731.36 1214.7 L1730.77 1214.7 L1730.18 1214.7 L1729.6 1214.7 L1729.01 1214.7 L1728.42 1214.7 L1727.84 1214.7 L1727.25 1214.7 L1726.66 1214.7 L1726.08 1214.7 L1725.49 1214.7 L1724.91 1214.7 L1724.32 1214.7 L1723.73 1214.7 L1723.15 1214.7 L1722.56 1214.7 L1721.97 1214.7 L1721.39 1214.7 L1720.8 1214.7 L1720.21 1214.7 L1719.63 1214.7 L1719.04 1214.7 L1718.45 1214.7 L1717.87 1214.7 L1717.28 1214.7 L1716.7 1214.7 L1716.11 1214.7 L1715.52 1214.7 L1714.94 1214.7 L1714.35 1214.7 L1713.76 1214.7 L1713.18 1214.7 L1712.59 1214.7 L1712 1214.7 L1711.42 1214.7 L1710.83 1214.7 L1710.24 1214.7 L1709.66 1214.7 L1709.07 1214.7 L1708.49 1214.7 L1707.9 1214.7 L1707.31 1214.7 L1706.73 1214.7 L1706.14 1214.7 L1705.55 1214.7 L1704.97 1214.7 L1704.38 1214.7 L1703.79 1214.7 L1703.21 1214.7 L1702.62 1214.7 L1702.04 1214.7 L1701.45 1214.7 L1700.86 1214.7 L1700.28 1214.7 L1699.69 1214.7 L1699.1 1214.7 L1698.52 1214.7 L1697.93 1214.7 L1697.34 1214.7 L1696.76 1214.7 L1696.17 1214.7 L1695.58 1214.7 L1695 1214.7 L1694.41 1214.7 L1693.83 1214.7 L1693.24 1214.7 L1692.65 1214.7 L1692.07 1214.7 L1691.48 1214.7 L1690.89 1214.7 L1690.31 1214.7 L1689.72 1214.7 L1689.13 1214.7 L1688.55 1214.7 L1687.96 1214.7 L1687.37 1214.7 L1686.79 1214.7 L1686.2 1214.7 L1685.62 1214.7 L1685.03 1214.7 L1684.44 1214.7 L1683.86 1214.7 L1683.27 1214.7 L1682.68 1214.7 L1682.1 1214.7 L1681.51 1214.7 L1680.92 1214.7 L1680.34 1214.7 L1679.75 1214.7 L1679.17 1214.7 L1678.58 1214.7 L1677.99 1214.7 L1677.41 1214.7 L1676.82 1214.7 L1676.23 1214.7 L1675.65 1214.7 L1675.06 1214.7 L1674.47 1214.7 L1673.89 1214.7 L1673.3 1214.7 L1672.71 1214.7 L1672.13 1214.7 L1671.54 1214.7 L1670.96 1214.7 L1670.37 1214.7 L1669.78 1214.7 L1669.2 1214.7 L1668.61 1214.7 L1668.02 1214.7 L1667.44 1214.7 L1666.85 1214.7 L1666.26 1214.7 L1665.68 1214.7 L1665.09 1214.7 L1664.5 1214.7 L1663.92 1214.7 L1663.33 1214.7 L1662.75 1214.7 L1662.16 1214.7 L1661.57 1214.7 L1660.99 1214.7 L1660.4 1214.7 L1659.81 1214.7 L1659.23 1214.7 L1658.64 1214.7 L1658.05 1214.7 L1657.47 1214.7 L1656.88 1214.7 L1656.29 1214.7 L1655.71 1214.7 L1655.12 1214.7 L1654.54 1214.7 L1653.95 1214.7 L1653.36 1214.7 L1652.78 1214.7 L1652.19 1214.7 L1651.6 1214.7 L1651.02 1214.7 L1650.43 1214.7 L1649.84 1214.7 L1649.26 1214.7 L1648.67 1214.7 L1648.09 1214.7 L1647.5 1214.7 L1646.91 1214.7 L1646.33 1214.7 L1645.74 1214.7 L1645.15 1214.7 L1644.57 1214.7 L1643.98 1214.7 L1643.39 1214.7 L1642.81 1214.7 L1642.22 1214.7 L1641.63 1214.7 L1641.05 1214.7 L1640.46 1214.7 L1639.88 1214.7 L1639.29 1214.7 L1638.7 1214.7 L1638.12 1214.7 L1637.53 1214.7 L1636.94 1214.7 L1636.36 1214.7 L1635.77 1214.7 L1635.18 1214.7 L1634.6 1214.7 L1634.01 1214.7 L1633.42 1214.7 L1632.84 1214.7 L1632.25 1214.7 L1631.67 1214.7 L1631.08 1214.7 L1630.49 1214.7 L1629.91 1214.7 L1629.32 1214.7 L1628.73 1214.7 L1628.15 1214.7 L1627.56 1214.7 L1626.97 1214.7 L1626.39 1214.7 L1625.8 1214.7 L1625.22 1214.7 L1624.63 1214.7 L1624.04 1214.7 L1623.46 1214.7 L1622.87 1214.7 L1622.28 1214.7 L1621.7 1214.7 L1621.11 1214.7 L1620.52 1214.7 L1619.94 1214.7 L1619.35 1214.7 L1618.76 1214.7 L1618.18 1214.7 L1617.59 1214.7 L1617.01 1214.7 L1616.42 1214.7 L1615.83 1214.7 L1615.25 1214.7 L1614.66 1214.7 L1614.07 1214.7 L1613.49 1214.7 L1612.9 1214.7 L1612.31 1214.7 L1611.73 1214.7 L1611.14 1214.7 L1610.55 1214.7 L1609.97 1214.7 L1609.38 1214.7 L1608.8 1214.7 L1608.21 1214.7 L1607.62 1214.7 L1607.04 1214.7 L1606.45 1214.7 L1605.86 1214.7 L1605.28 1214.7 L1604.69 1214.7 L1604.1 1214.7 L1603.52 1214.7 L1602.93 1214.7 L1602.34 1214.7 L1601.76 1214.7 L1601.17 1214.7 L1600.59 1214.7 L1600 1214.7 L1599.41 1214.7 L1598.83 1214.7 L1598.24 1214.7 L1597.65 1214.7 L1597.07 1214.7 L1596.48 1214.7 L1595.89 1214.7 L1595.31 1214.7 L1594.72 1214.7 L1594.14 1214.7 L1593.55 1214.7 L1592.96 1214.7 L1592.38 1214.7 L1591.79 1214.7 L1591.2 1214.7 L1590.62 1214.7 L1590.03 1214.7 L1589.44 1214.7 L1588.86 1214.7 L1588.27 1214.7 L1587.68 1214.7 L1587.1 1214.7 L1586.51 1214.7 L1585.93 1214.7 L1585.34 1214.7 L1584.75 1214.7 L1584.17 1214.7 L1583.58 1214.7 L1582.99 1214.7 L1582.41 1214.7 L1581.82 1214.7 L1581.23 1214.7 L1580.65 1214.7 L1580.06 1214.7 L1579.47 1214.7 L1578.89 1214.7 L1578.3 1214.7 L1577.72 1214.7 L1577.13 1214.7 L1576.54 1214.7 L1575.96 1214.7 L1575.37 1214.7 L1574.78 1214.7 L1574.2 1214.7 L1573.61 1214.7 L1573.02 1214.7 L1572.44 1214.7 L1571.85 1214.7 L1571.27 1214.7 L1570.68 1214.7 L1570.09 1214.7 L1569.51 1214.7 L1568.92 1214.7 L1568.33 1214.7 L1567.75 1214.7 L1567.16 1214.7 L1566.57 1214.7 L1565.99 1214.7 L1565.4 1214.7 L1564.81 1214.7 L1564.23 1214.7 L1563.64 1214.7 L1563.06 1214.7 L1562.47 1214.7 L1561.88 1214.7 L1561.3 1214.7 L1560.71 1214.7 L1560.12 1214.7 L1559.54 1214.7 L1558.95 1214.7 L1558.36 1214.7 L1557.78 1214.7 L1557.19 1214.7 L1556.6 1214.7 L1556.02 1214.7 L1555.43 1214.7 L1554.85 1214.7 L1554.26 1214.7 L1553.67 1214.7 L1553.09 1214.7 L1552.5 1214.7 L1551.91 1214.7 L1551.33 1214.7 L1550.74 1214.7 L1550.15 1214.7 L1549.57 1214.7 L1548.98 1214.7 L1548.4 1214.7 L1547.81 1214.7 L1547.22 1214.7 L1546.64 1214.7 L1546.05 1214.7 L1545.46 1214.7 L1544.88 1214.7 L1544.29 1214.7 L1543.7 1214.7 L1543.12 1214.7 L1542.53 1214.7 L1541.94 1214.7 L1541.36 1214.7 L1540.77 1214.7 L1540.19 1214.7 L1539.6 1214.7 L1539.01 1214.7 L1538.43 1214.7 L1537.84 1214.7 L1537.25 1214.7 L1536.67 1214.7 L1536.08 1214.7 L1535.49 1214.7 L1534.91 1214.7 L1534.32 1214.7 L1533.73 1214.7 L1533.15 1214.7 L1532.56 1214.7 L1531.98 1214.7 L1531.39 1214.7 L1530.8 1214.7 L1530.22 1214.7 L1529.63 1214.7 L1529.04 1214.7 L1528.46 1214.7 L1527.87 1214.7 L1527.28 1214.7 L1526.7 1214.7 L1526.11 1214.7 L1525.52 1214.7 L1524.94 1214.7 L1524.35 1214.7 L1523.77 1214.7 L1523.18 1214.7 L1522.59 1214.7 L1522.01 1214.7 L1521.42 1214.7 L1520.83 1214.7 L1520.25 1214.7 L1519.66 1214.7 L1519.07 1214.7 L1518.49 1214.7 L1517.9 1214.7 L1517.32 1214.7 L1516.73 1214.7 L1516.14 1214.7 L1515.56 1214.7 L1514.97 1214.7 L1514.38 1214.7 L1513.8 1214.7 L1513.21 1214.7 L1512.62 1214.7 L1512.04 1214.7 L1511.45 1214.7 L1510.86 1214.7 L1510.28 1214.7 L1509.69 1214.7 L1509.11 1214.7 L1508.52 1214.7 L1507.93 1214.7 L1507.35 1214.7 L1506.76 1214.7 L1506.17 1214.7 L1505.59 1214.7 L1505 1214.7 L1504.41 1214.7 L1503.83 1214.7 L1503.24 1214.7 L1502.65 1214.7 L1502.07 1214.7 L1501.48 1214.7 L1500.9 1214.7 L1500.31 1214.7 L1499.72 1214.7 L1499.14 1214.7 L1498.55 1214.7 L1497.96 1214.7 L1497.38 1214.7 L1496.79 1214.7 L1496.2 1214.7 L1495.62 1214.7 L1495.03 1214.7 L1494.45 1214.7 L1493.86 1214.7 L1493.27 1214.7 L1492.69 1214.7 L1492.1 1214.7 L1491.51 1214.7 L1490.93 1214.7 L1490.34 1214.7 L1489.75 1214.7 L1489.17 1214.7 L1488.58 1214.7 L1487.99 1214.7 L1487.41 1214.7 L1486.82 1214.7 L1486.24 1214.7 L1485.65 1214.7 L1485.06 1214.7 L1484.48 1214.7 L1483.89 1214.7 L1483.3 1214.7 L1482.72 1214.7 L1482.13 1214.7 L1481.54 1214.7 L1480.96 1214.7 L1480.37 1214.7 L1479.78 1214.7 L1479.2 1214.7 L1478.61 1214.7 L1478.03 1214.7 L1477.44 1214.7 L1476.85 1214.7 L1476.27 1214.7 L1475.68 1214.7 L1475.09 1214.7 L1474.51 1214.7 L1473.92 1214.7 L1473.33 1214.7 L1472.75 1214.7 L1472.16 1214.7 L1471.57 1214.7 L1470.99 1214.7 L1470.4 1214.7 L1469.82 1214.7 L1469.23 1214.7 L1468.64 1214.7 L1468.06 1214.7 L1467.47 1214.7 L1466.88 1214.7 L1466.3 1214.7 L1465.71 1214.7 L1465.12 1214.7 L1464.54 1214.7 L1463.95 1214.7 L1463.37 1214.7 L1462.78 1214.7 L1462.19 1214.7 L1461.61 1214.7 L1461.02 1214.7 L1460.43 1214.7 L1459.85 1214.7 L1459.26 1214.7 L1458.67 1214.7 L1458.09 1214.7 L1457.5 1214.7 L1456.91 1214.7 L1456.33 1214.7 L1455.74 1214.7 L1455.16 1214.7 L1454.57 1214.7 L1453.98 1214.7 L1453.4 1214.7 L1452.81 1214.7 L1452.22 1214.7 L1451.64 1214.7 L1451.05 1214.7 L1450.46 1214.7 L1449.88 1214.7 L1449.29 1214.7 L1448.7 1214.7 L1448.12 1214.7 L1447.53 1214.7 L1446.95 1214.7 L1446.36 1214.7 L1445.77 1214.7 L1445.19 1214.7 L1444.6 1214.7 L1444.01 1214.7 L1443.43 1214.7 L1442.84 1214.7 L1442.25 1214.7 L1441.67 1214.7 L1441.08 1214.7 L1440.5 1214.7 L1439.91 1214.7 L1439.32 1214.7 L1438.74 1214.7 L1438.15 1214.7 L1437.56 1214.7 L1436.98 1214.7 L1436.39 1214.7 L1435.8 1214.7 L1435.22 1214.7 L1434.63 1214.7 L1434.04 1214.7 L1433.46 1214.7 L1432.87 1214.7 L1432.29 1214.7 L1431.7 1214.7 L1431.11 1214.7 L1430.53 1214.7 L1429.94 1214.7 L1429.35 1214.7 L1428.77 1214.7 L1428.18 1214.7 L1427.59 1214.7 L1427.01 1214.7 L1426.42 1214.7 L1425.83 1214.7 L1425.25 1214.7 L1424.66 1214.7 L1424.08 1214.7 L1423.49 1214.7 L1422.9 1214.7 L1422.32 1214.7 L1421.73 1214.7 L1421.14 1214.7 L1420.56 1214.7 L1419.97 1214.7 L1419.38 1214.7 L1418.8 1214.7 L1418.21 1214.7 L1417.63 1214.7 L1417.04 1214.7 L1416.45 1214.7 L1415.87 1214.7 L1415.28 1214.7 L1414.69 1214.7 L1414.11 1214.7 L1413.52 1214.7 L1412.93 1214.7 L1412.35 1214.7 L1411.76 1214.7 L1411.17 1214.7 L1410.59 1214.7 L1410 1214.7 L1409.42 1214.7 L1408.83 1214.7 L1408.24 1214.7 L1407.66 1214.7 L1407.07 1214.7 L1406.48 1214.7 L1405.9 1214.7 L1405.31 1214.7 L1404.72 1214.7 L1404.14 1214.7 L1403.55 1214.7 L1402.96 1214.7 L1402.38 1214.7 L1401.79 1214.7 L1401.21 1214.7 L1400.62 1214.7 L1400.03 1214.7 L1399.45 1214.7 L1398.86 1214.7 L1398.27 1214.7 L1397.69 1214.7 L1397.1 1214.7 L1396.51 1214.7 L1395.93 1214.7 L1395.34 1214.7 L1394.75 1214.7 L1394.17 1214.7 L1393.58 1214.7 L1393 1214.7 L1392.41 1214.7 L1391.82 1214.7 L1391.24 1214.7 L1390.65 1214.7 L1390.06 1214.7 L1389.48 1214.7 L1388.89 1214.7 L1388.3 1214.7 L1387.72 1214.7 L1387.13 1214.7 L1386.55 1214.7 L1385.96 1214.7 L1385.37 1214.7 L1384.79 1214.7 L1384.2 1214.7 L1383.61 1214.7 L1383.03 1214.7 L1382.44 1214.7 L1381.85 1214.7 L1381.27 1214.7 L1380.68 1214.7 L1380.09 1214.7 L1379.51 1214.7 L1378.92 1214.7 L1378.34 1214.7 L1377.75 1214.7 L1377.16 1214.7 L1376.58 1214.7 L1375.99 1214.7 L1375.4 1214.7 L1374.82 1214.7 L1374.23 1214.7 L1373.64 1214.7 L1373.06 1214.7 L1372.47 1214.7 L1371.88 1214.7 L1371.3 1214.7 L1370.71 1214.7 L1370.13 1214.7 L1369.54 1214.7 L1368.95 1214.7 L1368.37 1214.7 L1367.78 1214.7 L1367.19 1214.7 L1366.61 1214.7 L1366.02 1214.7 L1365.43 1214.7 L1364.85 1214.7 L1364.26 1214.7 L1363.68 1214.7 L1363.09 1214.7 L1362.5 1214.7 L1361.92 1214.7 L1361.33 1214.7 L1360.74 1214.7 L1360.16 1214.7 L1359.57 1214.7 L1358.98 1214.7 L1358.4 1214.7 L1357.81 1214.7 L1357.22 1214.7 L1356.64 1214.7 L1356.05 1214.7 L1355.47 1214.7 L1354.88 1214.7 L1354.29 1214.7 L1353.71 1214.7 L1353.12 1214.7 L1352.53 1214.7 L1351.95 1214.7 L1351.36 1214.7 L1350.77 1214.7 L1350.19 1214.7 L1349.6 1214.7 L1349.01 1214.7 L1348.43 1214.7 L1347.84 1214.7 L1347.26 1214.7 L1346.67 1214.7 L1346.08 1214.7 L1345.5 1214.7 L1344.91 1214.7 L1344.32 1214.7 L1343.74 1214.7 L1343.15 1214.7 L1342.56 1214.7 L1341.98 1214.7 L1341.39 1214.7 L1340.8 1214.7 L1340.22 1214.7 L1339.63 1214.7 L1339.05 1214.7 L1338.46 1214.7 L1337.87 1214.7 L1337.29 1214.7 L1336.7 1214.7 L1336.11 1214.7 L1335.53 1214.7 L1334.94 1214.7 L1334.35 1214.7 L1333.77 1214.7 L1333.18 1214.7 L1332.6 1214.7 L1332.01 1214.7 L1331.42 1214.7 L1330.84 1214.7 L1330.25 1214.7 L1329.66 1214.7 L1329.08 1214.7 L1328.49 1214.7 L1327.9 1214.7 L1327.32 1214.7 L1326.73 1214.7 L1326.14 1214.7 L1325.56 1214.7 L1324.97 1214.7 L1324.39 1214.7 L1323.8 1214.7 L1323.21 1214.7 L1322.63 1214.7 L1322.04 1214.7 L1321.45 1214.7 L1320.87 1214.7 L1320.28 1214.7 L1319.69 1214.7 L1319.11 1214.7 L1318.52 1214.7 L1317.93 1214.7 L1317.35 1214.7 L1316.76 1214.7 L1316.18 1214.7 L1315.59 1214.7 L1315 1214.7 L1314.42 1214.7 L1313.83 1214.7 L1313.24 1214.7 L1312.66 1214.7 L1312.07 1214.7 L1311.48 1214.7 L1310.9 1214.7 L1310.31 1214.7 L1309.73 1214.7 L1309.14 1214.7 L1308.55 1214.7 L1307.97 1214.7 L1307.38 1214.7 L1306.79 1214.7 L1306.21 1214.7 L1305.62 1214.7 L1305.03 1214.7 L1304.45 1214.7 L1303.86 1214.7 L1303.27 1214.7 L1302.69 1214.7 L1302.1 1214.7 L1301.52 1214.7 L1300.93 1214.7 L1300.34 1214.7 L1299.76 1214.7 L1299.17 1214.7 L1298.58 1214.7 L1298 1214.7 L1297.41 1214.7 L1296.82 1214.7 L1296.24 1214.7 L1295.65 1214.7 L1295.06 1214.7 L1294.48 1214.7 L1293.89 1214.7 L1293.31 1214.7 L1292.72 1214.7 L1292.13 1214.7 L1291.55 1214.7 L1290.96 1214.7 L1290.37 1214.7 L1289.79 1214.7 L1289.2 1214.7 L1288.61 1214.7 L1288.03 1214.7 L1287.44 1214.7 L1286.86 1214.7 L1286.27 1214.7 L1285.68 1214.7 L1285.1 1214.7 L1284.51 1214.7 L1283.92 1214.7 L1283.34 1214.7 L1282.75 1214.7 L1282.16 1214.7 L1281.58 1214.7 L1280.99 1214.7 L1280.4 1214.7 L1279.82 1214.7 L1279.23 1214.7 L1278.65 1214.7 L1278.06 1214.7 L1277.47 1214.7 L1276.89 1214.7 L1276.3 1214.7 L1275.71 1214.7 L1275.13 1214.7 L1274.54 1214.7 L1273.95 1214.7 L1273.37 1214.7 L1272.78 1214.7 L1272.19 1214.7 L1271.61 1214.7 L1271.02 1214.7 L1270.44 1214.7 L1269.85 1214.7 L1269.26 1214.7 L1268.68 1214.7 L1268.09 1214.7 L1267.5 1214.7 L1266.92 1214.7 L1266.33 1214.7 L1265.74 1214.7 L1265.16 1214.7 L1264.57 1214.7 L1263.98 1214.7 L1263.4 1214.7 L1262.81 1214.7 L1262.23 1214.7 L1261.64 1214.7 L1261.05 1214.7 L1260.47 1214.7 L1259.88 1214.7 L1259.29 1214.7 L1258.71 1214.7 L1258.12 1214.7 L1257.53 1214.7 L1256.95 1214.7 L1256.36 1214.7 L1255.78 1214.7 L1255.19 1214.7 L1254.6 1214.7 L1254.02 1214.7 L1253.43 1214.7 L1252.84 1214.7 L1252.26 1214.7 L1251.67 1214.7 L1251.08 1214.7 L1250.5 1214.7 L1249.91 1214.7 L1249.32 1214.7 L1248.74 1214.7 L1248.15 1214.7 L1247.57 1214.7 L1246.98 1214.7 L1246.39 1214.7 L1245.81 1214.7 L1245.22 1214.7 L1244.63 1214.7 L1244.05 1214.7 L1243.46 1214.7 L1242.87 1214.7 L1242.29 1214.7 L1241.7 1214.7 L1241.11 1214.7 L1240.53 1214.7 L1239.94 1214.7 L1239.36 1214.7 L1238.77 1214.7 L1238.18 1214.7 L1237.6 1214.7 L1237.01 1214.7 L1236.42 1214.7 L1235.84 1214.7 L1235.25 1214.7 L1234.66 1214.7 L1234.08 1214.7 L1233.49 1214.7 L1232.91 1214.7 L1232.32 1214.7 L1231.73 1214.7 L1231.15 1214.7 L1230.56 1214.7 L1229.97 1214.7 L1229.39 1214.7 L1228.8 1214.7 L1228.21 1214.7 L1227.63 1214.7 L1227.04 1214.7 L1226.45 1214.7 L1225.87 1214.7 L1225.28 1214.7 L1224.7 1214.7 L1224.11 1214.7 L1223.52 1214.7 L1222.94 1214.7 L1222.35 1214.7 L1221.76 1214.7 L1221.18 1214.7 L1220.59 1214.7 L1220 1214.7 L1219.42 1214.7 L1218.83 1214.7 L1218.24 1214.7 L1217.66 1214.7 L1217.07 1214.7 L1216.49 1214.7 L1215.9 1214.7 L1215.31 1214.7 L1214.73 1214.7 L1214.14 1214.7 L1213.55 1214.7 L1212.97 1214.7 L1212.38 1214.7 L1211.79 1214.7 L1211.21 1214.7 L1210.62 1214.7 L1210.03 1214.7 L1209.45 1214.7 L1208.86 1214.7 L1208.28 1214.7 L1207.69 1214.7 L1207.1 1214.7 L1206.52 1214.7 L1205.93 1214.7 L1205.34 1214.7 L1204.76 1214.7 L1204.17 1214.7 L1203.58 1214.7 L1203 1214.7 L1202.41 1214.7 L1201.83 1214.7 L1201.24 1214.7 L1200.65 1214.7 L1200.07 1214.7 L1199.48 1214.7 L1198.89 1214.7 L1198.31 1214.7 L1197.72 1214.7 L1197.13 1214.7 L1196.55 1214.7 L1195.96 1214.7 L1195.37 1214.7 L1194.79 1214.7 L1194.2 1214.7 L1193.62 1214.7 L1193.03 1214.7 L1192.44 1214.7 L1191.86 1214.7 L1191.27 1214.7 L1190.68 1214.7 L1190.1 1214.7 L1189.51 1214.7 L1188.92 1214.7 L1188.34 1214.7 L1187.75 1214.7 L1187.16 1214.7 L1186.58 1214.7 L1185.99 1214.7 L1185.41 1214.7 L1184.82 1214.7 L1184.23 1214.7 L1183.65 1214.7 L1183.06 1214.7 L1182.47 1214.7 L1181.89 1214.7 L1181.3 1214.7 L1180.71 1214.7 L1180.13 1214.7 L1179.54 1214.7 L1178.96 1214.7 L1178.37 1214.7 L1177.78 1214.7 L1177.2 1214.7 L1176.61 1214.7 L1176.02 1214.7 L1175.44 1214.7 L1174.85 1214.7 L1174.26 1214.7 L1173.68 1214.7 L1173.09 1214.7 L1172.5 1214.7 L1171.92 1214.7 L1171.33 1214.7 L1170.75 1214.7 L1170.16 1214.7 L1169.57 1214.7 L1168.99 1214.7 L1168.4 1214.7 L1167.81 1214.7 L1167.23 1214.7 L1166.64 1214.7 L1166.05 1214.7 L1165.47 1214.7 L1164.88 1214.7 L1164.29 1214.7 L1163.71 1214.7 L1163.12 1214.7 L1162.54 1214.7 L1161.95 1214.7 L1161.36 1214.7 L1160.78 1214.7 L1160.19 1214.7 L1159.6 1214.7 L1159.02 1214.7 L1158.43 1214.7 L1157.84 1214.7 L1157.26 1214.7 L1156.67 1214.7 L1156.09 1214.7 L1155.5 1214.7 L1154.91 1214.7 L1154.33 1214.7 L1153.74 1214.7 L1153.15 1214.7 L1152.57 1214.7 L1151.98 1214.7 L1151.39 1214.7 L1150.81 1214.7 L1150.22 1214.7 L1149.63 1214.7 L1149.05 1214.7 L1148.46 1214.7 L1147.88 1214.7 L1147.29 1214.7 L1146.7 1214.7 L1146.12 1214.7 L1145.53 1214.7 L1144.94 1214.7 L1144.36 1214.7 L1143.77 1214.7 L1143.18 1214.7 L1142.6 1214.7 L1142.01 1214.7 L1141.42 1214.7 L1140.84 1214.7 L1140.25 1214.7 L1139.67 1214.7 L1139.08 1214.7 L1138.49 1214.7 L1137.91 1214.7 L1137.32 1214.7 L1136.73 1214.7 L1136.15 1214.7 L1135.56 1214.7 L1134.97 1214.7 L1134.39 1214.7 L1133.8 1214.7 L1133.21 1214.7 L1132.63 1214.7 L1132.04 1214.7 L1131.46 1214.7 L1130.87 1214.7 L1130.28 1214.7 L1129.7 1214.7 L1129.11 1214.7 L1128.52 1214.7 L1127.94 1214.7 L1127.35 1214.7 L1126.76 1214.7 L1126.18 1214.7 L1125.59 1214.7 L1125.01 1214.7 L1124.42 1214.7 L1123.83 1214.7 L1123.25 1214.7 L1122.66 1214.7 L1122.07 1214.7 L1121.49 1214.7 L1120.9 1214.7 L1120.31 1214.7 L1119.73 1214.7 L1119.14 1214.7 L1118.55 1214.7 L1117.97 1214.7 L1117.38 1214.7 L1116.8 1214.7 L1116.21 1214.7 L1115.62 1214.7 L1115.04 1214.7 L1114.45 1214.7 L1113.86 1214.7 L1113.28 1214.7 L1112.69 1214.7 L1112.1 1214.7 L1111.52 1214.7 L1110.93 1214.7 L1110.34 1214.7 L1109.76 1214.7 L1109.17 1214.7 L1108.59 1214.7 L1108 1214.7 L1107.41 1214.7 L1106.83 1214.7 L1106.24 1214.7 L1105.65 1214.7 L1105.07 1214.7 L1104.48 1214.7 L1103.89 1214.7 L1103.31 1214.7 L1102.72 1214.7 L1102.14 1214.7 L1101.55 1214.7 L1100.96 1214.7 L1100.38 1214.7 L1099.79 1214.7 L1099.2 1214.7 L1098.62 1214.7 L1098.03 1214.7 L1097.44 1214.7 L1096.86 1214.7 L1096.27 1214.7 L1095.68 1214.7 L1095.1 1214.7 L1094.51 1214.7 L1093.93 1214.7 L1093.34 1214.7 L1092.75 1214.7 L1092.17 1214.7 L1091.58 1214.7 L1090.99 1214.7 L1090.41 1214.7 L1089.82 1214.7 L1089.23 1214.7 L1088.65 1214.7 L1088.06 1214.7 L1087.47 1214.7 L1086.89 1214.7 L1086.3 1214.7 L1085.72 1214.7 L1085.13 1214.7 L1084.54 1214.7 L1083.96 1214.7 L1083.37 1214.7 L1082.78 1214.7 L1082.2 1214.7 L1081.61 1214.7 L1081.02 1214.7 L1080.44 1214.7 L1079.85 1214.7 L1079.26 1214.7 L1078.68 1214.7 L1078.09 1214.7 L1077.51 1214.7 L1076.92 1214.7 L1076.33 1214.7 L1075.75 1214.7 L1075.16 1214.7 L1074.57 1214.7 L1073.99 1214.7 L1073.4 1214.7 L1072.81 1214.7 L1072.23 1214.7 L1071.64 1214.7 L1071.06 1214.7 L1070.47 1214.7 L1069.88 1214.7 L1069.3 1214.7 L1068.71 1214.7 L1068.12 1214.7 L1067.54 1214.7 L1066.95 1214.7 L1066.36 1214.7 L1065.78 1214.7 L1065.19 1214.7 L1064.6 1214.7 L1064.02 1214.7 L1063.43 1214.7 L1062.85 1214.7 L1062.26 1214.7 L1061.67 1214.7 L1061.09 1214.7 L1060.5 1214.7 L1059.91 1214.7 L1059.33 1214.7 L1058.74 1214.7 L1058.15 1214.7 L1057.57 1214.7 L1056.98 1214.7 L1056.39 1214.7 L1055.81 1214.7 L1055.22 1214.7 L1054.64 1214.7 L1054.05 1214.7 L1053.46 1214.7 L1052.88 1214.7 L1052.29 1214.7 L1051.7 1214.7 L1051.12 1214.7 L1050.53 1214.7 L1049.94 1214.7 L1049.36 1214.7 L1048.77 1214.7 L1048.19 1214.7 L1047.6 1214.7 L1047.01 1214.7 L1046.43 1214.7 L1045.84 1214.7 L1045.25 1214.7 L1044.67 1214.7 L1044.08 1214.7 L1043.49 1214.7 L1042.91 1214.7 L1042.32 1214.7 L1041.73 1214.7 L1041.15 1214.7 L1040.56 1214.7 L1039.98 1214.7 L1039.39 1214.7 L1038.8 1214.7 L1038.22 1214.7 L1037.63 1214.7 L1037.04 1214.7 L1036.46 1214.7 L1035.87 1214.7 L1035.28 1214.7 L1034.7 1214.7 L1034.11 1214.7 L1033.52 1214.7 L1032.94 1214.7 L1032.35 1214.7 L1031.77 1214.7 L1031.18 1214.7 L1030.59 1214.7 L1030.01 1214.7 L1029.42 1214.7 L1028.83 1214.7 L1028.25 1214.7 L1027.66 1214.7 L1027.07 1214.7 L1026.49 1214.7 L1025.9 1214.7 L1025.32 1214.7 L1024.73 1214.7 L1024.14 1214.7 L1023.56 1214.7 L1022.97 1214.7 L1022.38 1214.7 L1021.8 1214.7 L1021.21 1214.7 L1020.62 1214.7 L1020.04 1214.7 L1019.45 1214.7 L1018.86 1214.7 L1018.28 1214.7 L1017.69 1214.7 L1017.11 1214.7 L1016.52 1214.7 L1015.93 1214.7 L1015.35 1214.7 L1014.76 1214.7 L1014.17 1214.7 L1013.59 1214.7 L1013 1214.7 L1012.41 1214.7 L1011.83 1214.7 L1011.24 1214.7 L1010.65 1214.7 L1010.07 1214.7 L1009.48 1214.7 L1008.9 1214.7 L1008.31 1214.7 L1007.72 1214.7 L1007.14 1214.7 L1006.55 1214.7 L1005.96 1214.7 L1005.38 1214.7 L1004.79 1214.7 L1004.2 1214.7 L1003.62 1214.7 L1003.03 1214.7 L1002.44 1214.7 L1001.86 1214.7 L1001.27 1214.7 L1000.69 1214.7 L1000.1 1214.7 L999.513 1214.7 L998.926 1214.7 L998.34 1214.7 L997.754 1214.7 L997.167 1214.7 L996.581 1214.7 L995.994 1214.7 L995.408 1214.7 L994.822 1214.7 L994.235 1214.7 L993.649 1214.7 L993.062 1214.7 L992.476 1214.7 L991.889 1214.7 L991.303 1214.7 L990.717 1214.7 L990.13 1214.7 L989.544 1214.7 L988.957 1214.7 L988.371 1214.7 L987.785 1214.7 L987.198 1214.7 L986.612 1214.7 L986.025 1214.7  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1215.02 986.612,1215.02 987.198,1215.02 987.785,1215.02 988.371,1215.02 988.957,1215.02 989.544,1215.02 990.13,1215.02 990.717,1215.02 991.303,1215.02 991.889,1215.02 992.476,1215.02 993.062,1215.02 993.649,1215.02 994.235,1215.02 994.822,1215.02 995.408,1215.02 995.994,1215.02 996.581,1215.02 997.167,1215.02 997.754,1215.02 998.34,1215.02 998.926,1215.02 999.513,1215.02 1000.1,1215.02 1000.69,1215.02 1001.27,1215.02 1001.86,1215.02 1002.44,1215.02 1003.03,1215.02 1003.62,1215.02 1004.2,1215.02 1004.79,1215.02 1005.38,1215.02 1005.96,1215.02 1006.55,1215.02 1007.14,1215.02 1007.72,1215.02 1008.31,1215.02 1008.9,1215.02 1009.48,1215.02 1010.07,1215.02 1010.65,1215.02 1011.24,1215.02 1011.83,1215.02 1012.41,1215.02 1013,1215.02 1013.59,1215.02 1014.17,1215.02 1014.76,1215.02 1015.35,1215.02 1015.93,1215.02 1016.52,1215.02 1017.11,1215.02 1017.69,1215.02 1018.28,1215.02 1018.86,1215.02 1019.45,1215.02 1020.04,1215.02 1020.62,1215.02 1021.21,1215.02 1021.8,1215.02 1022.38,1215.02 1022.97,1215.02 1023.56,1215.02 1024.14,1215.02 1024.73,1215.02 1025.32,1215.02 1025.9,1215.02 1026.49,1215.02 1027.07,1215.02 1027.66,1215.02 1028.25,1215.02 1028.83,1215.02 1029.42,1215.02 1030.01,1215.02 1030.59,1215.02 1031.18,1215.02 1031.77,1215.02 1032.35,1215.02 1032.94,1215.02 1033.52,1215.02 1034.11,1215.02 1034.7,1215.02 1035.28,1215.02 1035.87,1215.02 1036.46,1215.02 1037.04,1215.02 1037.63,1215.02 1038.22,1215.02 1038.8,1215.02 1039.39,1215.02 1039.98,1215.02 1040.56,1215.02 1041.15,1215.02 1041.73,1215.02 1042.32,1215.02 1042.91,1215.02 1043.49,1215.02 1044.08,1215.02 1044.67,1215.02 1045.25,1215.02 1045.84,1215.02 1046.43,1215.02 1047.01,1215.02 1047.6,1215.02 1048.19,1215.02 1048.77,1215.02 1049.36,1215.02 1049.94,1215.02 1050.53,1215.02 1051.12,1215.02 1051.7,1215.02 1052.29,1215.02 1052.88,1215.02 1053.46,1215.02 1054.05,1215.02 1054.64,1215.02 1055.22,1215.02 1055.81,1215.02 1056.39,1215.02 1056.98,1215.02 1057.57,1215.02 1058.15,1215.02 1058.74,1215.02 1059.33,1215.02 1059.91,1215.02 1060.5,1215.02 1061.09,1215.02 1061.67,1215.02 1062.26,1215.02 1062.85,1215.02 1063.43,1215.02 1064.02,1215.02 1064.6,1215.02 1065.19,1215.02 1065.78,1215.02 1066.36,1215.02 1066.95,1215.02 1067.54,1215.02 1068.12,1215.02 1068.71,1215.02 1069.3,1215.02 1069.88,1215.02 1070.47,1215.02 1071.06,1215.02 1071.64,1215.02 1072.23,1215.02 1072.81,1215.02 1073.4,1215.02 1073.99,1215.02 1074.57,1215.02 1075.16,1215.02 1075.75,1215.02 1076.33,1215.02 1076.92,1215.02 1077.51,1215.02 1078.09,1215.02 1078.68,1215.02 1079.26,1215.02 1079.85,1215.02 1080.44,1215.02 1081.02,1215.02 1081.61,1215.02 1082.2,1215.02 1082.78,1215.02 1083.37,1215.02 1083.96,1215.02 1084.54,1215.02 1085.13,1215.02 1085.72,1215.02 1086.3,1215.02 1086.89,1215.02 1087.47,1215.02 1088.06,1215.02 1088.65,1215.02 1089.23,1215.02 1089.82,1215.02 1090.41,1215.02 1090.99,1215.02 1091.58,1215.02 1092.17,1215.02 1092.75,1215.02 1093.34,1215.02 1093.93,1215.02 1094.51,1215.02 1095.1,1215.02 1095.68,1215.02 1096.27,1215.02 1096.86,1215.02 1097.44,1215.02 1098.03,1215.02 1098.62,1215.02 1099.2,1215.02 1099.79,1215.02 1100.38,1215.02 1100.96,1215.02 1101.55,1215.02 1102.14,1215.02 1102.72,1215.02 1103.31,1215.02 1103.89,1215.02 1104.48,1215.02 1105.07,1215.02 1105.65,1215.02 1106.24,1215.02 1106.83,1215.02 1107.41,1215.02 1108,1215.02 1108.59,1215.02 1109.17,1215.02 1109.76,1215.02 1110.34,1215.02 1110.93,1215.02 1111.52,1215.02 1112.1,1215.02 1112.69,1215.02 1113.28,1215.02 1113.86,1215.02 1114.45,1215.02 1115.04,1215.02 1115.62,1215.02 1116.21,1215.02 1116.8,1215.02 1117.38,1215.02 1117.97,1215.02 1118.55,1215.02 1119.14,1215.02 1119.73,1215.02 1120.31,1215.02 1120.9,1215.02 1121.49,1215.02 1122.07,1215.02 1122.66,1215.02 1123.25,1215.02 1123.83,1215.02 1124.42,1215.02 1125.01,1215.02 1125.59,1215.02 1126.18,1215.02 1126.76,1215.02 1127.35,1215.02 1127.94,1215.02 1128.52,1215.02 1129.11,1215.02 1129.7,1215.02 1130.28,1215.02 1130.87,1215.02 1131.46,1215.02 1132.04,1215.02 1132.63,1215.02 1133.21,1215.02 1133.8,1215.02 1134.39,1215.02 1134.97,1215.02 1135.56,1215.02 1136.15,1215.02 1136.73,1215.02 1137.32,1215.02 1137.91,1215.02 1138.49,1215.02 1139.08,1215.02 1139.67,1215.02 1140.25,1215.02 1140.84,1215.02 1141.42,1215.02 1142.01,1215.02 1142.6,1215.02 1143.18,1215.02 1143.77,1215.02 1144.36,1215.02 1144.94,1215.02 1145.53,1215.02 1146.12,1215.02 1146.7,1215.02 1147.29,1215.02 1147.88,1215.02 1148.46,1215.02 1149.05,1215.02 1149.63,1215.02 1150.22,1215.02 1150.81,1215.02 1151.39,1215.02 1151.98,1215.02 1152.57,1215.02 1153.15,1215.02 1153.74,1215.02 1154.33,1215.02 1154.91,1215.02 1155.5,1215.02 1156.09,1215.02 1156.67,1215.02 1157.26,1215.02 1157.84,1215.02 1158.43,1215.02 1159.02,1215.02 1159.6,1215.02 1160.19,1215.02 1160.78,1215.02 1161.36,1215.02 1161.95,1215.02 1162.54,1215.02 1163.12,1215.02 1163.71,1215.02 1164.29,1215.02 1164.88,1215.02 1165.47,1215.02 1166.05,1215.02 1166.64,1215.02 1167.23,1215.02 1167.81,1215.02 1168.4,1215.02 1168.99,1215.02 1169.57,1215.02 1170.16,1215.02 1170.75,1215.02 1171.33,1215.02 1171.92,1215.02 1172.5,1215.02 1173.09,1215.02 1173.68,1215.02 1174.26,1215.02 1174.85,1215.02 1175.44,1215.02 1176.02,1215.02 1176.61,1215.02 1177.2,1215.02 1177.78,1215.02 1178.37,1215.02 1178.96,1215.02 1179.54,1215.02 1180.13,1215.02 1180.71,1215.02 1181.3,1215.02 1181.89,1215.02 1182.47,1215.02 1183.06,1215.02 1183.65,1215.02 1184.23,1215.02 1184.82,1215.02 1185.41,1215.02 1185.99,1215.02 1186.58,1215.02 1187.16,1215.02 1187.75,1215.02 1188.34,1215.02 1188.92,1215.02 1189.51,1215.02 1190.1,1215.02 1190.68,1215.02 1191.27,1215.02 1191.86,1215.02 1192.44,1215.02 1193.03,1215.02 1193.62,1215.02 1194.2,1215.02 1194.79,1215.02 1195.37,1215.02 1195.96,1215.02 1196.55,1215.02 1197.13,1215.02 1197.72,1215.02 1198.31,1215.02 1198.89,1215.02 1199.48,1215.02 1200.07,1215.02 1200.65,1215.02 1201.24,1215.02 1201.83,1215.02 1202.41,1215.02 1203,1215.02 1203.58,1215.02 1204.17,1215.02 1204.76,1215.02 1205.34,1215.02 1205.93,1215.02 1206.52,1215.02 1207.1,1215.02 1207.69,1215.02 1208.28,1215.02 1208.86,1215.02 1209.45,1215.02 1210.03,1215.02 1210.62,1215.02 1211.21,1215.02 1211.79,1215.02 1212.38,1215.02 1212.97,1215.02 1213.55,1215.02 1214.14,1215.02 1214.73,1215.02 1215.31,1215.02 1215.9,1215.02 1216.49,1215.02 1217.07,1215.02 1217.66,1215.02 1218.24,1215.02 1218.83,1215.02 1219.42,1215.02 1220,1215.02 1220.59,1215.02 1221.18,1215.02 1221.76,1215.02 1222.35,1215.02 1222.94,1215.02 1223.52,1215.02 1224.11,1215.02 1224.7,1215.02 1225.28,1215.02 1225.87,1215.02 1226.45,1215.02 1227.04,1215.02 1227.63,1215.02 1228.21,1215.02 1228.8,1215.02 1229.39,1215.02 1229.97,1215.02 1230.56,1215.02 1231.15,1215.02 1231.73,1215.02 1232.32,1215.02 1232.91,1215.02 1233.49,1215.02 1234.08,1215.02 1234.66,1215.02 1235.25,1215.02 1235.84,1215.02 1236.42,1215.02 1237.01,1215.02 1237.6,1215.02 1238.18,1215.02 1238.77,1215.02 1239.36,1215.02 1239.94,1215.02 1240.53,1215.02 1241.11,1215.02 1241.7,1215.02 1242.29,1215.02 1242.87,1215.02 1243.46,1215.02 1244.05,1215.02 1244.63,1215.02 1245.22,1215.02 1245.81,1215.02 1246.39,1215.02 1246.98,1215.02 1247.57,1215.02 1248.15,1215.02 1248.74,1215.02 1249.32,1215.02 1249.91,1215.02 1250.5,1215.02 1251.08,1215.02 1251.67,1215.02 1252.26,1215.02 1252.84,1215.02 1253.43,1215.02 1254.02,1215.02 1254.6,1215.02 1255.19,1215.02 1255.78,1215.02 1256.36,1215.02 1256.95,1215.02 1257.53,1215.02 1258.12,1215.02 1258.71,1215.02 1259.29,1215.02 1259.88,1215.02 1260.47,1215.02 1261.05,1215.02 1261.64,1215.02 1262.23,1215.02 1262.81,1215.02 1263.4,1215.02 1263.98,1215.02 1264.57,1215.02 1265.16,1215.02 1265.74,1215.02 1266.33,1215.02 1266.92,1215.02 1267.5,1215.02 1268.09,1215.02 1268.68,1215.02 1269.26,1215.02 1269.85,1215.02 1270.44,1215.02 1271.02,1215.02 1271.61,1215.02 1272.19,1215.02 1272.78,1215.02 1273.37,1215.02 1273.95,1215.02 1274.54,1215.02 1275.13,1215.02 1275.71,1215.02 1276.3,1215.02 1276.89,1215.02 1277.47,1215.02 1278.06,1215.02 1278.65,1215.02 1279.23,1215.02 1279.82,1215.02 1280.4,1215.02 1280.99,1215.02 1281.58,1215.02 1282.16,1215.02 1282.75,1215.02 1283.34,1215.02 1283.92,1215.02 1284.51,1215.02 1285.1,1215.02 1285.68,1215.02 1286.27,1215.02 1286.86,1215.02 1287.44,1215.02 1288.03,1215.02 1288.61,1215.02 1289.2,1215.02 1289.79,1215.02 1290.37,1215.02 1290.96,1215.02 1291.55,1215.02 1292.13,1215.02 1292.72,1215.02 1293.31,1215.02 1293.89,1215.02 1294.48,1215.02 1295.06,1215.02 1295.65,1215.02 1296.24,1215.02 1296.82,1215.02 1297.41,1215.02 1298,1215.02 1298.58,1215.02 1299.17,1215.02 1299.76,1215.02 1300.34,1215.02 1300.93,1215.02 1301.52,1215.02 1302.1,1215.02 1302.69,1215.02 1303.27,1215.02 1303.86,1215.02 1304.45,1215.02 1305.03,1215.02 1305.62,1215.02 1306.21,1215.02 1306.79,1215.02 1307.38,1215.02 1307.97,1215.02 1308.55,1215.02 1309.14,1215.02 1309.73,1215.02 1310.31,1215.02 1310.9,1215.02 1311.48,1215.02 1312.07,1215.02 1312.66,1215.02 1313.24,1215.02 1313.83,1215.02 1314.42,1215.02 1315,1215.02 1315.59,1215.02 1316.18,1215.02 1316.76,1215.02 1317.35,1215.02 1317.93,1215.02 1318.52,1215.02 1319.11,1215.02 1319.69,1215.02 1320.28,1215.02 1320.87,1215.02 1321.45,1215.02 1322.04,1215.02 1322.63,1215.02 1323.21,1215.02 1323.8,1215.02 1324.39,1215.02 1324.97,1215.02 1325.56,1215.02 1326.14,1215.02 1326.73,1215.02 1327.32,1215.02 1327.9,1215.02 1328.49,1215.02 1329.08,1215.02 1329.66,1215.02 1330.25,1215.02 1330.84,1215.02 1331.42,1215.02 1332.01,1215.02 1332.6,1215.02 1333.18,1215.02 1333.77,1215.02 1334.35,1215.02 1334.94,1215.02 1335.53,1215.02 1336.11,1215.02 1336.7,1215.02 1337.29,1215.02 1337.87,1215.02 1338.46,1215.02 1339.05,1215.02 1339.63,1215.02 1340.22,1215.02 1340.8,1215.02 1341.39,1215.02 1341.98,1215.02 1342.56,1215.02 1343.15,1215.02 1343.74,1215.02 1344.32,1215.02 1344.91,1215.02 1345.5,1215.02 1346.08,1215.02 1346.67,1215.02 1347.26,1215.02 1347.84,1215.02 1348.43,1215.02 1349.01,1215.02 1349.6,1215.02 1350.19,1215.02 1350.77,1215.02 1351.36,1215.02 1351.95,1215.02 1352.53,1215.02 1353.12,1215.02 1353.71,1215.02 1354.29,1215.02 1354.88,1215.02 1355.47,1215.02 1356.05,1215.02 1356.64,1215.02 1357.22,1215.02 1357.81,1215.02 1358.4,1215.02 1358.98,1215.02 1359.57,1215.02 1360.16,1215.02 1360.74,1215.02 1361.33,1215.02 1361.92,1215.02 1362.5,1215.02 1363.09,1215.02 1363.68,1215.02 1364.26,1215.02 1364.85,1215.02 1365.43,1215.02 1366.02,1215.02 1366.61,1215.02 1367.19,1215.02 1367.78,1215.02 1368.37,1215.02 1368.95,1215.02 1369.54,1215.02 1370.13,1215.02 1370.71,1215.02 1371.3,1215.02 1371.88,1215.02 1372.47,1215.02 1373.06,1215.02 1373.64,1215.02 1374.23,1215.02 1374.82,1215.02 1375.4,1215.02 1375.99,1215.02 1376.58,1215.02 1377.16,1215.02 1377.75,1215.02 1378.34,1215.02 1378.92,1215.02 1379.51,1215.02 1380.09,1215.02 1380.68,1215.02 1381.27,1215.02 1381.85,1215.02 1382.44,1215.02 1383.03,1215.02 1383.61,1215.02 1384.2,1215.02 1384.79,1215.02 1385.37,1215.02 1385.96,1215.02 1386.55,1215.02 1387.13,1215.02 1387.72,1215.02 1388.3,1215.02 1388.89,1215.02 1389.48,1215.02 1390.06,1215.02 1390.65,1215.02 1391.24,1215.02 1391.82,1215.02 1392.41,1215.02 1393,1215.02 1393.58,1215.02 1394.17,1215.02 1394.75,1215.02 1395.34,1215.02 1395.93,1215.02 1396.51,1215.02 1397.1,1215.02 1397.69,1215.02 1398.27,1215.02 1398.86,1215.02 1399.45,1215.02 1400.03,1215.02 1400.62,1215.02 1401.21,1215.02 1401.79,1215.02 1402.38,1215.02 1402.96,1215.02 1403.55,1215.02 1404.14,1215.02 1404.72,1215.02 1405.31,1215.02 1405.9,1215.02 1406.48,1215.02 1407.07,1215.02 1407.66,1215.02 1408.24,1215.02 1408.83,1215.02 1409.42,1215.02 1410,1215.02 1410.59,1215.02 1411.17,1215.02 1411.76,1215.02 1412.35,1215.02 1412.93,1215.02 1413.52,1215.02 1414.11,1215.02 1414.69,1215.02 1415.28,1215.02 1415.87,1215.02 1416.45,1215.02 1417.04,1215.02 1417.63,1215.02 1418.21,1215.02 1418.8,1215.02 1419.38,1215.02 1419.97,1215.02 1420.56,1215.02 1421.14,1215.02 1421.73,1215.02 1422.32,1215.02 1422.9,1215.02 1423.49,1215.02 1424.08,1215.02 1424.66,1215.02 1425.25,1215.02 1425.83,1215.02 1426.42,1215.02 1427.01,1215.02 1427.59,1215.02 1428.18,1215.02 1428.77,1215.02 1429.35,1215.02 1429.94,1215.02 1430.53,1215.02 1431.11,1215.02 1431.7,1215.02 1432.29,1215.02 1432.87,1215.02 1433.46,1215.02 1434.04,1215.02 1434.63,1215.02 1435.22,1215.02 1435.8,1215.02 1436.39,1215.02 1436.98,1215.02 1437.56,1215.02 1438.15,1215.02 1438.74,1215.02 1439.32,1215.02 1439.91,1215.02 1440.5,1215.02 1441.08,1215.02 1441.67,1215.02 1442.25,1215.02 1442.84,1215.02 1443.43,1215.02 1444.01,1215.02 1444.6,1215.02 1445.19,1215.02 1445.77,1215.02 1446.36,1215.02 1446.95,1215.02 1447.53,1215.02 1448.12,1215.02 1448.7,1215.02 1449.29,1215.02 1449.88,1215.02 1450.46,1215.02 1451.05,1215.02 1451.64,1215.02 1452.22,1215.02 1452.81,1215.02 1453.4,1215.02 1453.98,1215.02 1454.57,1215.02 1455.16,1215.02 1455.74,1215.02 1456.33,1215.02 1456.91,1215.02 1457.5,1215.02 1458.09,1215.02 1458.67,1215.02 1459.26,1215.02 1459.85,1215.02 1460.43,1215.02 1461.02,1215.02 1461.61,1215.02 1462.19,1215.02 1462.78,1215.02 1463.37,1215.02 1463.95,1215.02 1464.54,1215.02 1465.12,1215.02 1465.71,1215.02 1466.3,1215.02 1466.88,1215.02 1467.47,1215.02 1468.06,1215.02 1468.64,1215.02 1469.23,1215.02 1469.82,1215.02 1470.4,1215.02 1470.99,1215.02 1471.57,1215.02 1472.16,1215.02 1472.75,1215.02 1473.33,1215.02 1473.92,1215.02 1474.51,1215.02 1475.09,1215.02 1475.68,1215.02 1476.27,1215.02 1476.85,1215.02 1477.44,1215.02 1478.03,1215.02 1478.61,1215.02 1479.2,1215.02 1479.78,1215.02 1480.37,1215.02 1480.96,1215.02 1481.54,1215.02 1482.13,1215.02 1482.72,1215.02 1483.3,1215.02 1483.89,1215.02 1484.48,1215.02 1485.06,1215.02 1485.65,1215.02 1486.24,1215.02 1486.82,1215.02 1487.41,1215.02 1487.99,1215.02 1488.58,1215.02 1489.17,1215.02 1489.75,1215.02 1490.34,1215.02 1490.93,1215.02 1491.51,1215.02 1492.1,1215.02 1492.69,1215.02 1493.27,1215.02 1493.86,1215.02 1494.45,1215.02 1495.03,1215.02 1495.62,1215.02 1496.2,1215.02 1496.79,1215.02 1497.38,1215.02 1497.96,1215.02 1498.55,1215.02 1499.14,1215.02 1499.72,1215.02 1500.31,1215.02 1500.9,1215.02 1501.48,1215.02 1502.07,1215.02 1502.65,1215.02 1503.24,1215.02 1503.83,1215.02 1504.41,1215.02 1505,1215.02 1505.59,1215.02 1506.17,1215.02 1506.76,1215.02 1507.35,1215.02 1507.93,1215.02 1508.52,1215.02 1509.11,1215.02 1509.69,1215.02 1510.28,1215.02 1510.86,1215.02 1511.45,1215.02 1512.04,1215.02 1512.62,1215.02 1513.21,1215.02 1513.8,1215.02 1514.38,1215.02 1514.97,1215.02 1515.56,1215.02 1516.14,1215.02 1516.73,1215.02 1517.32,1215.02 1517.9,1215.02 1518.49,1215.02 1519.07,1215.02 1519.66,1215.02 1520.25,1215.02 1520.83,1215.02 1521.42,1215.02 1522.01,1215.02 1522.59,1215.02 1523.18,1215.02 1523.77,1215.02 1524.35,1215.02 1524.94,1215.02 1525.52,1215.02 1526.11,1215.02 1526.7,1215.02 1527.28,1215.02 1527.87,1215.02 1528.46,1215.02 1529.04,1215.02 1529.63,1215.02 1530.22,1215.02 1530.8,1215.02 1531.39,1215.02 1531.98,1215.02 1532.56,1215.02 1533.15,1215.02 1533.73,1215.02 1534.32,1215.02 1534.91,1215.02 1535.49,1215.02 1536.08,1215.02 1536.67,1215.02 1537.25,1215.02 1537.84,1215.02 1538.43,1215.02 1539.01,1215.02 1539.6,1215.02 1540.19,1215.02 1540.77,1215.02 1541.36,1215.02 1541.94,1215.02 1542.53,1215.02 1543.12,1215.02 1543.7,1215.02 1544.29,1215.02 1544.88,1215.02 1545.46,1215.02 1546.05,1215.02 1546.64,1215.02 1547.22,1215.02 1547.81,1215.02 1548.4,1215.02 1548.98,1215.02 1549.57,1215.02 1550.15,1215.02 1550.74,1215.02 1551.33,1215.02 1551.91,1215.02 1552.5,1215.02 1553.09,1215.02 1553.67,1215.02 1554.26,1215.02 1554.85,1215.02 1555.43,1215.02 1556.02,1215.02 1556.6,1215.02 1557.19,1215.02 1557.78,1215.02 1558.36,1215.02 1558.95,1215.02 1559.54,1215.02 1560.12,1215.02 1560.71,1215.02 1561.3,1215.02 1561.88,1215.02 1562.47,1215.02 1563.06,1215.02 1563.64,1215.02 1564.23,1215.02 1564.81,1215.02 1565.4,1215.02 1565.99,1215.02 1566.57,1215.02 1567.16,1215.02 1567.75,1215.02 1568.33,1215.02 1568.92,1215.02 1569.51,1215.02 1570.09,1215.02 1570.68,1215.02 1571.27,1215.02 1571.85,1215.02 1572.44,1215.02 1573.02,1215.02 1573.61,1215.02 1574.2,1215.02 1574.78,1215.02 1575.37,1215.02 1575.96,1215.02 1576.54,1215.02 1577.13,1215.02 1577.72,1215.02 1578.3,1215.02 1578.89,1215.02 1579.47,1215.02 1580.06,1215.02 1580.65,1215.02 1581.23,1215.02 1581.82,1215.02 1582.41,1215.02 1582.99,1215.02 1583.58,1215.02 1584.17,1215.02 1584.75,1215.02 1585.34,1215.02 1585.93,1215.02 1586.51,1215.02 1587.1,1215.02 1587.68,1215.02 1588.27,1215.02 1588.86,1215.02 1589.44,1215.02 1590.03,1215.02 1590.62,1215.02 1591.2,1215.02 1591.79,1215.02 1592.38,1215.02 1592.96,1215.02 1593.55,1215.02 1594.14,1215.02 1594.72,1215.02 1595.31,1215.02 1595.89,1215.02 1596.48,1215.02 1597.07,1215.02 1597.65,1215.02 1598.24,1215.02 1598.83,1215.02 1599.41,1215.02 1600,1215.02 1600.59,1215.02 1601.17,1215.02 1601.76,1215.02 1602.34,1215.02 1602.93,1215.02 1603.52,1215.02 1604.1,1215.02 1604.69,1215.02 1605.28,1215.02 1605.86,1215.02 1606.45,1215.02 1607.04,1215.02 1607.62,1215.02 1608.21,1215.02 1608.8,1215.02 1609.38,1215.02 1609.97,1215.02 1610.55,1215.02 1611.14,1215.02 1611.73,1215.02 1612.31,1215.02 1612.9,1215.02 1613.49,1215.02 1614.07,1215.02 1614.66,1215.02 1615.25,1215.02 1615.83,1215.02 1616.42,1215.02 1617.01,1215.02 1617.59,1215.02 1618.18,1215.02 1618.76,1215.02 1619.35,1215.02 1619.94,1215.02 1620.52,1215.02 1621.11,1215.02 1621.7,1215.02 1622.28,1215.02 1622.87,1215.02 1623.46,1215.02 1624.04,1215.02 1624.63,1215.02 1625.22,1215.02 1625.8,1215.02 1626.39,1215.02 1626.97,1215.02 1627.56,1215.02 1628.15,1215.02 1628.73,1215.02 1629.32,1215.02 1629.91,1215.02 1630.49,1215.02 1631.08,1215.02 1631.67,1215.02 1632.25,1215.02 1632.84,1215.02 1633.42,1215.02 1634.01,1215.02 1634.6,1215.02 1635.18,1215.02 1635.77,1215.02 1636.36,1215.02 1636.94,1215.02 1637.53,1215.02 1638.12,1215.02 1638.7,1215.02 1639.29,1215.02 1639.88,1215.02 1640.46,1215.02 1641.05,1215.02 1641.63,1215.02 1642.22,1215.02 1642.81,1215.02 1643.39,1215.02 1643.98,1215.02 1644.57,1215.02 1645.15,1215.02 1645.74,1215.02 1646.33,1215.02 1646.91,1215.02 1647.5,1215.02 1648.09,1215.02 1648.67,1215.02 1649.26,1215.02 1649.84,1215.02 1650.43,1215.02 1651.02,1215.02 1651.6,1215.02 1652.19,1215.02 1652.78,1215.02 1653.36,1215.02 1653.95,1215.02 1654.54,1215.02 1655.12,1215.02 1655.71,1215.02 1656.29,1215.02 1656.88,1215.02 1657.47,1215.02 1658.05,1215.02 1658.64,1215.02 1659.23,1215.02 1659.81,1215.02 1660.4,1215.02 1660.99,1215.02 1661.57,1215.02 1662.16,1215.02 1662.75,1215.02 1663.33,1215.02 1663.92,1215.02 1664.5,1215.02 1665.09,1215.02 1665.68,1215.02 1666.26,1215.02 1666.85,1215.02 1667.44,1215.02 1668.02,1215.02 1668.61,1215.02 1669.2,1215.02 1669.78,1215.02 1670.37,1215.02 1670.96,1215.02 1671.54,1215.02 1672.13,1215.02 1672.71,1215.02 1673.3,1215.02 1673.89,1215.02 1674.47,1215.02 1675.06,1215.02 1675.65,1215.02 1676.23,1215.02 1676.82,1215.02 1677.41,1215.02 1677.99,1215.02 1678.58,1215.02 1679.17,1215.02 1679.75,1215.02 1680.34,1215.02 1680.92,1215.02 1681.51,1215.02 1682.1,1215.02 1682.68,1215.02 1683.27,1215.02 1683.86,1215.02 1684.44,1215.02 1685.03,1215.02 1685.62,1215.02 1686.2,1215.02 1686.79,1215.02 1687.37,1215.02 1687.96,1215.02 1688.55,1215.02 1689.13,1215.02 1689.72,1215.02 1690.31,1215.02 1690.89,1215.02 1691.48,1215.02 1692.07,1215.02 1692.65,1215.02 1693.24,1215.02 1693.83,1215.02 1694.41,1215.02 1695,1215.02 1695.58,1215.02 1696.17,1215.02 1696.76,1215.02 1697.34,1215.02 1697.93,1215.02 1698.52,1215.02 1699.1,1215.02 1699.69,1215.02 1700.28,1215.02 1700.86,1215.02 1701.45,1215.02 1702.04,1215.02 1702.62,1215.02 1703.21,1215.02 1703.79,1215.02 1704.38,1215.02 1704.97,1215.02 1705.55,1215.02 1706.14,1215.02 1706.73,1215.02 1707.31,1215.02 1707.9,1215.02 1708.49,1215.02 1709.07,1215.02 1709.66,1215.02 1710.24,1215.02 1710.83,1215.02 1711.42,1215.02 1712,1215.02 1712.59,1215.02 1713.18,1215.02 1713.76,1215.02 1714.35,1215.02 1714.94,1215.02 1715.52,1215.02 1716.11,1215.02 1716.7,1215.02 1717.28,1215.02 1717.87,1215.02 1718.45,1215.02 1719.04,1215.02 1719.63,1215.02 1720.21,1215.02 1720.8,1215.02 1721.39,1215.02 1721.97,1215.02 1722.56,1215.02 1723.15,1215.02 1723.73,1215.02 1724.32,1215.02 1724.91,1215.02 1725.49,1215.02 1726.08,1215.02 1726.66,1215.02 1727.25,1215.02 1727.84,1215.02 1728.42,1215.02 1729.01,1215.02 1729.6,1215.02 1730.18,1215.02 1730.77,1215.02 1731.36,1215.02 1731.94,1215.02 1732.53,1215.02 1733.11,1215.02 1733.7,1215.02 1734.29,1215.02 1734.87,1215.02 1735.46,1215.02 1736.05,1215.02 1736.63,1215.02 1737.22,1215.02 1737.81,1215.02 1738.39,1215.02 1738.98,1215.02 1739.57,1215.02 1740.15,1215.02 1740.74,1215.02 1741.32,1215.02 1741.91,1215.02 1742.5,1215.02 1743.08,1215.02 1743.67,1215.02 1744.26,1215.02 1744.84,1215.02 1745.43,1215.02 1746.02,1215.02 1746.6,1215.02 1747.19,1215.02 1747.78,1215.02 1748.36,1215.02 1748.95,1215.02 1749.53,1215.02 1750.12,1215.02 1750.71,1215.02 1751.29,1215.02 1751.88,1215.02 1752.47,1215.02 1753.05,1215.02 1753.64,1215.02 1754.23,1215.02 1754.81,1215.02 1755.4,1215.02 1755.99,1215.02 1756.57,1215.02 1757.16,1215.02 1757.74,1215.02 1758.33,1215.02 1758.92,1215.02 1759.5,1215.02 1760.09,1215.02 1760.68,1215.02 1761.26,1215.02 1761.85,1215.02 1762.44,1215.02 1763.02,1215.02 1763.61,1215.02 1764.19,1215.02 1764.78,1215.02 1765.37,1215.02 1765.95,1215.02 1766.54,1215.02 1767.13,1215.02 1767.71,1215.02 1768.3,1215.02 1768.89,1215.02 1769.47,1215.02 1770.06,1215.02 1770.65,1215.02 1771.23,1215.02 1771.82,1215.02 1772.4,1215.02 1772.99,1215.02 1773.58,1215.02 1774.16,1215.02 1774.75,1215.02 1775.34,1215.02 1775.92,1215.02 1776.51,1215.02 1777.1,1215.02 1777.68,1215.02 1778.27,1215.02 1778.86,1215.02 1779.44,1215.02 1780.03,1215.02 1780.61,1215.02 1781.2,1215.02 1781.79,1215.02 1782.37,1215.02 1782.96,1215.02 1783.55,1215.02 1784.13,1215.02 1784.72,1215.02 1785.31,1215.02 1785.89,1215.02 1786.48,1215.02 1787.06,1215.02 1787.65,1215.02 1788.24,1215.02 1788.82,1215.02 1789.41,1215.02 1790,1215.02 1790.58,1215.02 1791.17,1215.02 1791.76,1215.02 1792.34,1215.02 1792.93,1215.02 1793.52,1215.02 1794.1,1215.02 1794.69,1215.02 1795.27,1215.02 1795.86,1215.02 1796.45,1215.02 1797.03,1215.02 1797.62,1215.02 1798.21,1215.02 1798.79,1215.02 1799.38,1215.02 1799.97,1215.02 1800.55,1215.02 1801.14,1215.02 1801.73,1215.02 1802.31,1215.02 1802.9,1215.02 1803.48,1215.02 1804.07,1215.02 1804.66,1215.02 1805.24,1215.02 1805.83,1215.02 1806.42,1215.02 1807,1215.02 1807.59,1215.02 1808.18,1215.02 1808.76,1215.02 1809.35,1215.02 1809.94,1215.02 1810.52,1215.02 1811.11,1215.02 1811.69,1215.02 1812.28,1215.02 1812.87,1215.02 1813.45,1215.02 1814.04,1215.02 1814.63,1215.02 1815.21,1215.02 1815.8,1215.02 1816.39,1215.02 1816.97,1215.02 1817.56,1215.02 1818.14,1215.02 1818.73,1215.02 1819.32,1215.02 1819.9,1215.02 1820.49,1215.02 1821.08,1215.02 1821.66,1215.02 1822.25,1215.02 1822.84,1215.02 1823.42,1215.02 1824.01,1215.02 1824.6,1215.02 1825.18,1215.02 1825.77,1215.02 1826.35,1215.02 1826.94,1215.02 1827.53,1215.02 1828.11,1215.02 1828.7,1215.02 1829.29,1215.02 1829.87,1215.02 1830.46,1215.02 1831.05,1215.02 1831.63,1215.02 1832.22,1215.02 1832.81,1215.02 1833.39,1215.02 1833.98,1215.02 1834.56,1215.02 1835.15,1215.02 1835.74,1215.02 1836.32,1215.02 1836.91,1215.02 1837.5,1215.02 1838.08,1215.02 1838.67,1215.02 1839.26,1215.02 1839.84,1215.02 1840.43,1215.02 1841.01,1215.02 1841.6,1215.02 1842.19,1215.02 1842.77,1215.02 1843.36,1215.02 1843.95,1215.02 1844.53,1215.02 1845.12,1215.02 1845.71,1215.02 1846.29,1215.02 1846.88,1215.02 1847.47,1215.02 1848.05,1215.02 1848.64,1215.02 1849.22,1215.02 1849.81,1215.02 1850.4,1215.02 1850.98,1215.02 1851.57,1215.02 1852.16,1215.02 1852.74,1215.02 1853.33,1215.02 1853.92,1215.02 1854.5,1215.02 1855.09,1215.02 1855.68,1215.02 1856.26,1215.02 1856.85,1215.02 1857.43,1215.02 1858.02,1215.02 1858.61,1215.02 1859.19,1215.02 1859.78,1215.02 1860.37,1215.02 1860.95,1215.02 1861.54,1215.02 1862.13,1215.02 1862.71,1215.02 1863.3,1215.02 1863.88,1215.02 1864.47,1215.02 1865.06,1215.02 1865.64,1215.02 1866.23,1215.02 1866.82,1215.02 1867.4,1215.02 1867.99,1215.02 1868.58,1215.02 1869.16,1215.02 1869.75,1215.02 1870.34,1215.02 1870.92,1215.02 1871.51,1215.02 1872.09,1215.02 1872.68,1215.02 1873.27,1215.02 1873.85,1215.02 1874.44,1215.02 1875.03,1215.02 1875.61,1215.02 1876.2,1215.02 1876.79,1215.02 1877.37,1215.02 1877.96,1215.02 1878.55,1215.02 1879.13,1215.02 1879.72,1215.02 1880.3,1215.02 1880.89,1215.02 1881.48,1215.02 1882.06,1215.02 1882.65,1215.02 1883.24,1215.02 1883.82,1215.02 1884.41,1215.02 1885,1215.02 1885.58,1215.02 1886.17,1215.02 1886.76,1215.02 1887.34,1215.02 1887.93,1215.02 1888.51,1215.02 1889.1,1215.02 1889.69,1215.02 1890.27,1215.02 1890.86,1215.02 1891.45,1215.02 1892.03,1215.02 1892.62,1215.02 1893.21,1215.02 1893.79,1215.02 1894.38,1215.02 1894.96,1215.02 1895.55,1215.02 1896.14,1215.02 1896.72,1215.02 1897.31,1215.02 1897.9,1215.02 1898.48,1215.02 1899.07,1215.02 1899.66,1215.02 1900.24,1215.02 1900.83,1215.02 1901.42,1215.02 1902,1215.02 1902.59,1215.02 1903.17,1215.02 1903.76,1215.02 1904.35,1215.02 1904.93,1215.02 1905.52,1215.02 1906.11,1215.02 1906.69,1215.02 1907.28,1215.02 1907.87,1215.02 1908.45,1215.02 1909.04,1215.02 1909.63,1215.02 1910.21,1215.02 1910.8,1215.02 1911.38,1215.02 1911.97,1215.02 1912.56,1215.02 1913.14,1215.02 1913.73,1215.02 1914.32,1215.02 1914.9,1215.02 1915.49,1215.02 1916.08,1215.02 1916.66,1215.02 1917.25,1215.02 1917.83,1215.02 1918.42,1215.02 1919.01,1215.02 1919.59,1215.02 1920.18,1215.02 1920.77,1215.02 1921.35,1215.02 1921.94,1215.02 1922.53,1215.02 1923.11,1215.02 1923.7,1215.02 1924.29,1215.02 1924.87,1215.02 1925.46,1215.02 1926.04,1215.02 1926.63,1215.02 1927.22,1215.02 1927.8,1215.02 1928.39,1215.02 1928.98,1215.02 1929.56,1215.02 1930.15,1215.02 1930.74,1215.02 1931.32,1215.02 1931.91,1215.02 1932.5,1215.02 1933.08,1215.02 1933.67,1215.02 1934.25,1215.02 1934.84,1215.02 1935.43,1215.02 1936.01,1215.02 1936.6,1215.02 1937.19,1215.02 1937.77,1215.02 1938.36,1215.02 1938.95,1215.02 1939.53,1215.02 1940.12,1215.02 1940.71,1215.02 1941.29,1215.02 1941.88,1215.02 1942.46,1215.02 1943.05,1215.02 1943.64,1215.02 1944.22,1215.02 1944.81,1215.02 1945.4,1215.02 1945.98,1215.02 1946.57,1215.02 1947.16,1215.02 1947.74,1215.02 1948.33,1215.02 1948.91,1215.02 1949.5,1215.02 1950.09,1215.02 1950.67,1215.02 1951.26,1215.02 1951.85,1215.02 1952.43,1215.02 1953.02,1215.02 1953.61,1215.02 1954.19,1215.02 1954.78,1215.02 1955.37,1215.02 1955.95,1215.02 1956.54,1215.02 1957.12,1215.02 1957.71,1215.02 1958.3,1215.02 1958.88,1215.02 1959.47,1215.02 1960.06,1215.02 1960.64,1215.02 1961.23,1215.02 1961.82,1215.02 1962.4,1215.02 1962.99,1215.02 1963.58,1215.02 1964.16,1215.02 1964.75,1215.02 1965.33,1215.02 1965.92,1215.02 1966.51,1215.02 1967.09,1215.02 1967.68,1215.02 1968.27,1215.02 1968.85,1215.02 1969.44,1215.02 1970.03,1215.02 1970.61,1215.02 1971.2,1215.02 1971.78,1215.02 1972.37,1215.02 1972.96,1215.02 1973.54,1215.02 1974.13,1215.02 1974.72,1215.02 1975.3,1215.02 1975.89,1215.02 1976.48,1215.02 1977.06,1215.02 1977.65,1215.02 1978.24,1215.02 1978.82,1215.02 1979.41,1215.02 1979.99,1215.02 1980.58,1215.02 1981.17,1215.02 1981.75,1215.02 1982.34,1215.02 1982.93,1215.02 1983.51,1215.02 1984.1,1215.02 1984.69,1215.02 1985.27,1215.02 1985.86,1215.02 1986.45,1215.02 1987.03,1215.02 1987.62,1215.02 1988.2,1215.02 1988.79,1215.02 1989.38,1215.02 1989.96,1215.02 1990.55,1215.02 1991.14,1215.02 1991.72,1215.02 1992.31,1215.02 1992.9,1215.02 1993.48,1215.02 1994.07,1215.02 1994.65,1215.02 1995.24,1215.02 1995.83,1215.02 1996.41,1215.02 1997,1215.02 1997.59,1215.02 1998.17,1215.02 1998.76,1215.02 1999.35,1215.02 1999.93,1215.02 2000.52,1215.02 2001.11,1215.02 2001.69,1215.02 2002.28,1215.02 2002.86,1215.02 2003.45,1215.02 2004.04,1215.02 2004.62,1215.02 2005.21,1215.02 2005.8,1215.02 2006.38,1215.02 2006.97,1215.02 2007.56,1215.02 2008.14,1215.02 2008.73,1215.02 2009.32,1215.02 2009.9,1215.02 2010.49,1215.02 2011.07,1215.02 2011.66,1215.02 2012.25,1215.02 2012.83,1215.02 2013.42,1215.02 2014.01,1215.02 2014.59,1215.02 2015.18,1215.02 2015.77,1215.02 2016.35,1215.02 2016.94,1215.02 2017.53,1215.02 2018.11,1215.02 2018.7,1215.02 2019.28,1215.02 2019.87,1215.02 2020.46,1215.02 2021.04,1215.02 2021.63,1215.02 2022.22,1215.02 2022.8,1215.02 2023.39,1215.02 2023.98,1215.02 2024.56,1215.02 2025.15,1215.02 2025.73,1215.02 2026.32,1215.02 2026.91,1215.02 2027.49,1215.02 2028.08,1215.02 2028.67,1215.02 2029.25,1215.02 2029.84,1215.02 2030.43,1215.02 2031.01,1215.02 2031.6,1215.02 2032.19,1215.02 2032.77,1215.02 2033.36,1215.02 2033.94,1215.02 2034.53,1215.02 2035.12,1215.02 2035.7,1215.02 2036.29,1215.02 2036.88,1215.02 2037.46,1215.02 2038.05,1215.02 2038.64,1215.02 2039.22,1215.02 2039.81,1215.02 2040.4,1215.02 2040.98,1215.02 2041.57,1215.02 2042.15,1215.02 2042.74,1215.02 2043.33,1215.02 2043.91,1215.02 2044.5,1215.02 2045.09,1215.02 2045.67,1215.02 2046.26,1215.02 2046.85,1215.02 2047.43,1215.02 2048.02,1215.02 2048.6,1215.02 2049.19,1215.02 2049.78,1215.02 2050.36,1215.02 2050.95,1215.02 2051.54,1215.02 2052.12,1215.02 2052.71,1215.02 2053.3,1215.02 2053.88,1215.02 2054.47,1215.02 2055.06,1215.02 2055.64,1215.02 2056.23,1215.02 2056.81,1215.02 2057.4,1215.02 2057.99,1215.02 2058.57,1215.02 2059.16,1215.02 2059.75,1215.02 2060.33,1215.02 2060.92,1215.02 2061.51,1215.02 2062.09,1215.02 2062.68,1215.02 2063.27,1215.02 2063.85,1215.02 2064.44,1215.02 2065.02,1215.02 2065.61,1215.02 2066.2,1215.02 2066.78,1215.02 2067.37,1215.02 2067.96,1215.02 2068.54,1215.02 2069.13,1215.02 2069.72,1215.02 2070.3,1215.02 2070.89,1215.02 2071.48,1215.02 2072.06,1215.02 2072.65,1215.02 2073.23,1215.02 2073.82,1215.02 2074.41,1215.02 2074.99,1215.02 2075.58,1215.02 2076.17,1215.02 2076.75,1215.02 2077.34,1215.02 2077.93,1215.02 2078.51,1215.02 2079.1,1215.02 2079.68,1215.02 2080.27,1215.02 2080.86,1215.02 2081.44,1215.02 2082.03,1215.02 2082.62,1215.02 2083.2,1215.02 2083.79,1215.02 2084.38,1215.02 2084.96,1215.02 2085.55,1215.02 2086.14,1215.02 2086.72,1215.02 2087.31,1215.02 2087.89,1215.02 2088.48,1215.02 2089.07,1215.02 2089.65,1215.02 2090.24,1215.02 2090.83,1215.02 2091.41,1215.02 2092,1215.02 2092.59,1215.02 2093.17,1215.02 2093.76,1215.02 2094.35,1215.02 2094.93,1215.02 2095.52,1215.02 2096.1,1215.02 2096.69,1215.02 2097.28,1215.02 2097.86,1215.02 2098.45,1215.02 2099.04,1215.02 2099.62,1215.02 2100.21,1215.02 2100.8,1215.02 2101.38,1215.02 2101.97,1215.02 2102.55,1215.02 2103.14,1215.02 2103.73,1215.02 2104.31,1215.02 2104.9,1215.02 2105.49,1215.02 2106.07,1215.02 2106.66,1215.02 2107.25,1215.02 2107.83,1215.02 2108.42,1215.02 2109.01,1215.02 2109.59,1215.02 2110.18,1215.02 2110.76,1215.02 2111.35,1215.02 2111.94,1215.02 2112.52,1215.02 2113.11,1215.02 2113.7,1215.02 2114.28,1215.02 2114.87,1215.02 2115.46,1215.02 2116.04,1215.02 2116.63,1215.02 2117.22,1215.02 2117.8,1215.02 2118.39,1215.02 2118.97,1215.02 2119.56,1215.02 2120.15,1215.02 2120.73,1215.02 2121.32,1215.02 2121.91,1215.02 2122.49,1215.02 2123.08,1215.02 2123.67,1215.02 2124.25,1215.02 2124.84,1215.02 2125.42,1215.02 2126.01,1215.02 2126.6,1215.02 2127.18,1215.02 2127.77,1215.02 2128.36,1215.02 2128.94,1215.02 2129.53,1215.02 2130.12,1215.02 2130.7,1215.02 2131.29,1215.02 2131.88,1215.02 2132.46,1215.02 2133.05,1215.02 2133.63,1215.02 2134.22,1215.02 2134.81,1215.02 2135.39,1215.02 2135.98,1215.02 2136.57,1215.02 2137.15,1215.02 2137.74,1215.02 2138.33,1215.02 2138.91,1215.02 2139.5,1215.02 2140.09,1215.02 2140.67,1215.02 2141.26,1215.02 2141.84,1215.02 2142.43,1215.02 2143.02,1215.02 2143.6,1215.02 2144.19,1215.02 2144.78,1215.02 2145.36,1215.02 2145.95,1215.02 2146.54,1215.02 2147.12,1215.02 2147.71,1215.02 2148.3,1215.02 2148.88,1215.02 2149.47,1215.02 2150.05,1215.02 2150.64,1215.02 2151.23,1215.02 2151.81,1215.02 2152.4,1215.02 2152.99,1215.02 2153.57,1215.02 2154.16,1215.02 2154.75,1215.02 2155.33,1215.02 2155.92,1215.02 2156.5,1215.02 2157.09,1215.02 2157.68,1215.02 2158.26,1215.02 \"/>\n<path clip-path=\"url(#clip542)\" d=\"M986.025 1214.93 L986.612 1214.93 L987.198 1214.93 L987.785 1214.93 L988.371 1214.93 L988.957 1214.93 L989.544 1214.93 L990.13 1214.93 L990.717 1214.93 L991.303 1214.93 L991.889 1214.93 L992.476 1214.93 L993.062 1214.93 L993.649 1214.93 L994.235 1214.93 L994.822 1214.93 L995.408 1214.93 L995.994 1214.93 L996.581 1214.93 L997.167 1214.93 L997.754 1214.93 L998.34 1214.93 L998.926 1214.93 L999.513 1214.93 L1000.1 1214.93 L1000.69 1214.93 L1001.27 1214.93 L1001.86 1214.93 L1002.44 1214.93 L1003.03 1214.93 L1003.62 1214.93 L1004.2 1214.93 L1004.79 1214.93 L1005.38 1214.93 L1005.96 1214.93 L1006.55 1214.93 L1007.14 1214.93 L1007.72 1214.93 L1008.31 1214.93 L1008.9 1214.93 L1009.48 1214.93 L1010.07 1214.93 L1010.65 1214.93 L1011.24 1214.93 L1011.83 1214.93 L1012.41 1214.93 L1013 1214.93 L1013.59 1214.93 L1014.17 1214.93 L1014.76 1214.93 L1015.35 1214.93 L1015.93 1214.93 L1016.52 1214.93 L1017.11 1214.93 L1017.69 1214.93 L1018.28 1214.93 L1018.86 1214.93 L1019.45 1214.93 L1020.04 1214.93 L1020.62 1214.93 L1021.21 1214.93 L1021.8 1214.93 L1022.38 1214.93 L1022.97 1214.93 L1023.56 1214.93 L1024.14 1214.93 L1024.73 1214.93 L1025.32 1214.93 L1025.9 1214.93 L1026.49 1214.93 L1027.07 1214.93 L1027.66 1214.93 L1028.25 1214.93 L1028.83 1214.93 L1029.42 1214.93 L1030.01 1214.93 L1030.59 1214.93 L1031.18 1214.93 L1031.77 1214.93 L1032.35 1214.93 L1032.94 1214.93 L1033.52 1214.93 L1034.11 1214.93 L1034.7 1214.93 L1035.28 1214.93 L1035.87 1214.93 L1036.46 1214.93 L1037.04 1214.93 L1037.63 1214.93 L1038.22 1214.93 L1038.8 1214.93 L1039.39 1214.93 L1039.98 1214.93 L1040.56 1214.93 L1041.15 1214.93 L1041.73 1214.93 L1042.32 1214.93 L1042.91 1214.93 L1043.49 1214.93 L1044.08 1214.93 L1044.67 1214.93 L1045.25 1214.93 L1045.84 1214.93 L1046.43 1214.93 L1047.01 1214.93 L1047.6 1214.93 L1048.19 1214.93 L1048.77 1214.93 L1049.36 1214.93 L1049.94 1214.93 L1050.53 1214.93 L1051.12 1214.93 L1051.7 1214.93 L1052.29 1214.93 L1052.88 1214.93 L1053.46 1214.93 L1054.05 1214.93 L1054.64 1214.93 L1055.22 1214.93 L1055.81 1214.93 L1056.39 1214.93 L1056.98 1214.93 L1057.57 1214.93 L1058.15 1214.93 L1058.74 1214.93 L1059.33 1214.93 L1059.91 1214.93 L1060.5 1214.93 L1061.09 1214.93 L1061.67 1214.93 L1062.26 1214.93 L1062.85 1214.93 L1063.43 1214.93 L1064.02 1214.93 L1064.6 1214.93 L1065.19 1214.93 L1065.78 1214.93 L1066.36 1214.93 L1066.95 1214.93 L1067.54 1214.93 L1068.12 1214.93 L1068.71 1214.93 L1069.3 1214.93 L1069.88 1214.93 L1070.47 1214.93 L1071.06 1214.93 L1071.64 1214.93 L1072.23 1214.93 L1072.81 1214.93 L1073.4 1214.93 L1073.99 1214.93 L1074.57 1214.93 L1075.16 1214.93 L1075.75 1214.93 L1076.33 1214.93 L1076.92 1214.93 L1077.51 1214.93 L1078.09 1214.93 L1078.68 1214.93 L1079.26 1214.93 L1079.85 1214.93 L1080.44 1214.93 L1081.02 1214.93 L1081.61 1214.93 L1082.2 1214.93 L1082.78 1214.93 L1083.37 1214.93 L1083.96 1214.93 L1084.54 1214.93 L1085.13 1214.93 L1085.72 1214.93 L1086.3 1214.93 L1086.89 1214.93 L1087.47 1214.93 L1088.06 1214.93 L1088.65 1214.93 L1089.23 1214.93 L1089.82 1214.93 L1090.41 1214.93 L1090.99 1214.93 L1091.58 1214.93 L1092.17 1214.93 L1092.75 1214.93 L1093.34 1214.93 L1093.93 1214.93 L1094.51 1214.93 L1095.1 1214.93 L1095.68 1214.93 L1096.27 1214.93 L1096.86 1214.93 L1097.44 1214.93 L1098.03 1214.93 L1098.62 1214.93 L1099.2 1214.93 L1099.79 1214.93 L1100.38 1214.93 L1100.96 1214.93 L1101.55 1214.93 L1102.14 1214.93 L1102.72 1214.93 L1103.31 1214.93 L1103.89 1214.93 L1104.48 1214.93 L1105.07 1214.93 L1105.65 1214.93 L1106.24 1214.93 L1106.83 1214.93 L1107.41 1214.93 L1108 1214.93 L1108.59 1214.93 L1109.17 1214.93 L1109.76 1214.93 L1110.34 1214.93 L1110.93 1214.93 L1111.52 1214.93 L1112.1 1214.93 L1112.69 1214.93 L1113.28 1214.93 L1113.86 1214.93 L1114.45 1214.93 L1115.04 1214.93 L1115.62 1214.93 L1116.21 1214.93 L1116.8 1214.93 L1117.38 1214.93 L1117.97 1214.93 L1118.55 1214.93 L1119.14 1214.93 L1119.73 1214.93 L1120.31 1214.93 L1120.9 1214.93 L1121.49 1214.93 L1122.07 1214.93 L1122.66 1214.93 L1123.25 1214.93 L1123.83 1214.93 L1124.42 1214.93 L1125.01 1214.93 L1125.59 1214.93 L1126.18 1214.93 L1126.76 1214.93 L1127.35 1214.93 L1127.94 1214.93 L1128.52 1214.93 L1129.11 1214.93 L1129.7 1214.93 L1130.28 1214.93 L1130.87 1214.93 L1131.46 1214.93 L1132.04 1214.93 L1132.63 1214.93 L1133.21 1214.93 L1133.8 1214.93 L1134.39 1214.93 L1134.97 1214.93 L1135.56 1214.93 L1136.15 1214.93 L1136.73 1214.93 L1137.32 1214.93 L1137.91 1214.93 L1138.49 1214.93 L1139.08 1214.93 L1139.67 1214.93 L1140.25 1214.93 L1140.84 1214.93 L1141.42 1214.93 L1142.01 1214.93 L1142.6 1214.93 L1143.18 1214.93 L1143.77 1214.93 L1144.36 1214.93 L1144.94 1214.93 L1145.53 1214.93 L1146.12 1214.93 L1146.7 1214.93 L1147.29 1214.93 L1147.88 1214.93 L1148.46 1214.93 L1149.05 1214.93 L1149.63 1214.93 L1150.22 1214.93 L1150.81 1214.93 L1151.39 1214.93 L1151.98 1214.93 L1152.57 1214.93 L1153.15 1214.93 L1153.74 1214.93 L1154.33 1214.93 L1154.91 1214.93 L1155.5 1214.93 L1156.09 1214.93 L1156.67 1214.93 L1157.26 1214.93 L1157.84 1214.93 L1158.43 1214.93 L1159.02 1214.93 L1159.6 1214.93 L1160.19 1214.93 L1160.78 1214.93 L1161.36 1214.93 L1161.95 1214.93 L1162.54 1214.93 L1163.12 1214.93 L1163.71 1214.93 L1164.29 1214.93 L1164.88 1214.93 L1165.47 1214.93 L1166.05 1214.93 L1166.64 1214.93 L1167.23 1214.93 L1167.81 1214.93 L1168.4 1214.93 L1168.99 1214.93 L1169.57 1214.93 L1170.16 1214.93 L1170.75 1214.93 L1171.33 1214.93 L1171.92 1214.93 L1172.5 1214.93 L1173.09 1214.93 L1173.68 1214.93 L1174.26 1214.93 L1174.85 1214.93 L1175.44 1214.93 L1176.02 1214.93 L1176.61 1214.93 L1177.2 1214.93 L1177.78 1214.93 L1178.37 1214.93 L1178.96 1214.93 L1179.54 1214.93 L1180.13 1214.93 L1180.71 1214.93 L1181.3 1214.93 L1181.89 1214.93 L1182.47 1214.93 L1183.06 1214.93 L1183.65 1214.93 L1184.23 1214.93 L1184.82 1214.93 L1185.41 1214.93 L1185.99 1214.93 L1186.58 1214.93 L1187.16 1214.93 L1187.75 1214.93 L1188.34 1214.93 L1188.92 1214.93 L1189.51 1214.93 L1190.1 1214.93 L1190.68 1214.93 L1191.27 1214.93 L1191.86 1214.93 L1192.44 1214.93 L1193.03 1214.93 L1193.62 1214.93 L1194.2 1214.93 L1194.79 1214.93 L1195.37 1214.93 L1195.96 1214.93 L1196.55 1214.93 L1197.13 1214.93 L1197.72 1214.93 L1198.31 1214.93 L1198.89 1214.93 L1199.48 1214.93 L1200.07 1214.93 L1200.65 1214.93 L1201.24 1214.93 L1201.83 1214.93 L1202.41 1214.93 L1203 1214.93 L1203.58 1214.93 L1204.17 1214.93 L1204.76 1214.93 L1205.34 1214.93 L1205.93 1214.93 L1206.52 1214.93 L1207.1 1214.93 L1207.69 1214.93 L1208.28 1214.93 L1208.86 1214.93 L1209.45 1214.93 L1210.03 1214.93 L1210.62 1214.93 L1211.21 1214.93 L1211.79 1214.93 L1212.38 1214.93 L1212.97 1214.93 L1213.55 1214.93 L1214.14 1214.93 L1214.73 1214.93 L1215.31 1214.93 L1215.9 1214.93 L1216.49 1214.93 L1217.07 1214.93 L1217.66 1214.93 L1218.24 1214.93 L1218.83 1214.93 L1219.42 1214.93 L1220 1214.93 L1220.59 1214.93 L1221.18 1214.93 L1221.76 1214.93 L1222.35 1214.93 L1222.94 1214.93 L1223.52 1214.93 L1224.11 1214.93 L1224.7 1214.93 L1225.28 1214.93 L1225.87 1214.93 L1226.45 1214.93 L1227.04 1214.93 L1227.63 1214.93 L1228.21 1214.93 L1228.8 1214.93 L1229.39 1214.93 L1229.97 1214.93 L1230.56 1214.93 L1231.15 1214.93 L1231.73 1214.93 L1232.32 1214.93 L1232.91 1214.93 L1233.49 1214.93 L1234.08 1214.93 L1234.66 1214.93 L1235.25 1214.93 L1235.84 1214.93 L1236.42 1214.93 L1237.01 1214.93 L1237.6 1214.93 L1238.18 1214.93 L1238.77 1214.93 L1239.36 1214.93 L1239.94 1214.93 L1240.53 1214.93 L1241.11 1214.93 L1241.7 1214.93 L1242.29 1214.93 L1242.87 1214.93 L1243.46 1214.93 L1244.05 1214.93 L1244.63 1214.93 L1245.22 1214.93 L1245.81 1214.93 L1246.39 1214.93 L1246.98 1214.93 L1247.57 1214.93 L1248.15 1214.93 L1248.74 1214.93 L1249.32 1214.93 L1249.91 1214.93 L1250.5 1214.93 L1251.08 1214.93 L1251.67 1214.93 L1252.26 1214.93 L1252.84 1214.93 L1253.43 1214.93 L1254.02 1214.93 L1254.6 1214.93 L1255.19 1214.93 L1255.78 1214.93 L1256.36 1214.93 L1256.95 1214.93 L1257.53 1214.93 L1258.12 1214.93 L1258.71 1214.93 L1259.29 1214.93 L1259.88 1214.93 L1260.47 1214.93 L1261.05 1214.93 L1261.64 1214.93 L1262.23 1214.93 L1262.81 1214.93 L1263.4 1214.93 L1263.98 1214.93 L1264.57 1214.93 L1265.16 1214.93 L1265.74 1214.93 L1266.33 1214.93 L1266.92 1214.93 L1267.5 1214.93 L1268.09 1214.93 L1268.68 1214.93 L1269.26 1214.93 L1269.85 1214.93 L1270.44 1214.93 L1271.02 1214.93 L1271.61 1214.93 L1272.19 1214.93 L1272.78 1214.93 L1273.37 1214.93 L1273.95 1214.93 L1274.54 1214.93 L1275.13 1214.93 L1275.71 1214.93 L1276.3 1214.93 L1276.89 1214.93 L1277.47 1214.93 L1278.06 1214.93 L1278.65 1214.93 L1279.23 1214.93 L1279.82 1214.93 L1280.4 1214.93 L1280.99 1214.93 L1281.58 1214.93 L1282.16 1214.93 L1282.75 1214.93 L1283.34 1214.93 L1283.92 1214.93 L1284.51 1214.93 L1285.1 1214.93 L1285.68 1214.93 L1286.27 1214.93 L1286.86 1214.93 L1287.44 1214.93 L1288.03 1214.93 L1288.61 1214.93 L1289.2 1214.93 L1289.79 1214.93 L1290.37 1214.93 L1290.96 1214.93 L1291.55 1214.93 L1292.13 1214.93 L1292.72 1214.93 L1293.31 1214.93 L1293.89 1214.93 L1294.48 1214.93 L1295.06 1214.93 L1295.65 1214.93 L1296.24 1214.93 L1296.82 1214.93 L1297.41 1214.93 L1298 1214.93 L1298.58 1214.93 L1299.17 1214.93 L1299.76 1214.93 L1300.34 1214.93 L1300.93 1214.93 L1301.52 1214.93 L1302.1 1214.93 L1302.69 1214.93 L1303.27 1214.93 L1303.86 1214.93 L1304.45 1214.93 L1305.03 1214.93 L1305.62 1214.93 L1306.21 1214.93 L1306.79 1214.93 L1307.38 1214.93 L1307.97 1214.93 L1308.55 1214.93 L1309.14 1214.93 L1309.73 1214.93 L1310.31 1214.93 L1310.9 1214.93 L1311.48 1214.93 L1312.07 1214.93 L1312.66 1214.93 L1313.24 1214.93 L1313.83 1214.93 L1314.42 1214.93 L1315 1214.93 L1315.59 1214.93 L1316.18 1214.93 L1316.76 1214.93 L1317.35 1214.93 L1317.93 1214.93 L1318.52 1214.93 L1319.11 1214.93 L1319.69 1214.93 L1320.28 1214.93 L1320.87 1214.93 L1321.45 1214.93 L1322.04 1214.93 L1322.63 1214.93 L1323.21 1214.93 L1323.8 1214.93 L1324.39 1214.93 L1324.97 1214.93 L1325.56 1214.93 L1326.14 1214.93 L1326.73 1214.93 L1327.32 1214.93 L1327.9 1214.93 L1328.49 1214.93 L1329.08 1214.93 L1329.66 1214.93 L1330.25 1214.93 L1330.84 1214.93 L1331.42 1214.93 L1332.01 1214.93 L1332.6 1214.93 L1333.18 1214.93 L1333.77 1214.93 L1334.35 1214.93 L1334.94 1214.93 L1335.53 1214.93 L1336.11 1214.93 L1336.7 1214.93 L1337.29 1214.93 L1337.87 1214.93 L1338.46 1214.93 L1339.05 1214.93 L1339.63 1214.93 L1340.22 1214.93 L1340.8 1214.93 L1341.39 1214.93 L1341.98 1214.93 L1342.56 1214.93 L1343.15 1214.93 L1343.74 1214.93 L1344.32 1214.93 L1344.91 1214.93 L1345.5 1214.93 L1346.08 1214.93 L1346.67 1214.93 L1347.26 1214.93 L1347.84 1214.93 L1348.43 1214.93 L1349.01 1214.93 L1349.6 1214.93 L1350.19 1214.93 L1350.77 1214.93 L1351.36 1214.93 L1351.95 1214.93 L1352.53 1214.93 L1353.12 1214.93 L1353.71 1214.93 L1354.29 1214.93 L1354.88 1214.93 L1355.47 1214.93 L1356.05 1214.93 L1356.64 1214.93 L1357.22 1214.93 L1357.81 1214.93 L1358.4 1214.93 L1358.98 1214.93 L1359.57 1214.93 L1360.16 1214.93 L1360.74 1214.93 L1361.33 1214.93 L1361.92 1214.93 L1362.5 1214.93 L1363.09 1214.93 L1363.68 1214.93 L1364.26 1214.93 L1364.85 1214.93 L1365.43 1214.93 L1366.02 1214.93 L1366.61 1214.93 L1367.19 1214.93 L1367.78 1214.93 L1368.37 1214.93 L1368.95 1214.93 L1369.54 1214.93 L1370.13 1214.93 L1370.71 1214.93 L1371.3 1214.93 L1371.88 1214.93 L1372.47 1214.93 L1373.06 1214.93 L1373.64 1214.93 L1374.23 1214.93 L1374.82 1214.93 L1375.4 1214.93 L1375.99 1214.93 L1376.58 1214.93 L1377.16 1214.93 L1377.75 1214.93 L1378.34 1214.93 L1378.92 1214.93 L1379.51 1214.93 L1380.09 1214.93 L1380.68 1214.93 L1381.27 1214.93 L1381.85 1214.93 L1382.44 1214.93 L1383.03 1214.93 L1383.61 1214.93 L1384.2 1214.93 L1384.79 1214.93 L1385.37 1214.93 L1385.96 1214.93 L1386.55 1214.93 L1387.13 1214.93 L1387.72 1214.93 L1388.3 1214.93 L1388.89 1214.93 L1389.48 1214.93 L1390.06 1214.93 L1390.65 1214.93 L1391.24 1214.93 L1391.82 1214.93 L1392.41 1214.93 L1393 1214.93 L1393.58 1214.93 L1394.17 1214.93 L1394.75 1214.93 L1395.34 1214.93 L1395.93 1214.93 L1396.51 1214.93 L1397.1 1214.93 L1397.69 1214.93 L1398.27 1214.93 L1398.86 1214.93 L1399.45 1214.93 L1400.03 1214.93 L1400.62 1214.93 L1401.21 1214.93 L1401.79 1214.93 L1402.38 1214.93 L1402.96 1214.93 L1403.55 1214.93 L1404.14 1214.93 L1404.72 1214.93 L1405.31 1214.93 L1405.9 1214.93 L1406.48 1214.93 L1407.07 1214.93 L1407.66 1214.93 L1408.24 1214.93 L1408.83 1214.93 L1409.42 1214.93 L1410 1214.93 L1410.59 1214.93 L1411.17 1214.93 L1411.76 1214.93 L1412.35 1214.93 L1412.93 1214.93 L1413.52 1214.93 L1414.11 1214.93 L1414.69 1214.93 L1415.28 1214.93 L1415.87 1214.93 L1416.45 1214.93 L1417.04 1214.93 L1417.63 1214.93 L1418.21 1214.93 L1418.8 1214.93 L1419.38 1214.93 L1419.97 1214.93 L1420.56 1214.93 L1421.14 1214.93 L1421.73 1214.93 L1422.32 1214.93 L1422.9 1214.93 L1423.49 1214.93 L1424.08 1214.93 L1424.66 1214.93 L1425.25 1214.93 L1425.83 1214.93 L1426.42 1214.93 L1427.01 1214.93 L1427.59 1214.93 L1428.18 1214.93 L1428.77 1214.93 L1429.35 1214.93 L1429.94 1214.93 L1430.53 1214.93 L1431.11 1214.93 L1431.7 1214.93 L1432.29 1214.93 L1432.87 1214.93 L1433.46 1214.93 L1434.04 1214.93 L1434.63 1214.93 L1435.22 1214.93 L1435.8 1214.93 L1436.39 1214.93 L1436.98 1214.93 L1437.56 1214.93 L1438.15 1214.93 L1438.74 1214.93 L1439.32 1214.93 L1439.91 1214.93 L1440.5 1214.93 L1441.08 1214.93 L1441.67 1214.93 L1442.25 1214.93 L1442.84 1214.93 L1443.43 1214.93 L1444.01 1214.93 L1444.6 1214.93 L1445.19 1214.93 L1445.77 1214.93 L1446.36 1214.93 L1446.95 1214.93 L1447.53 1214.93 L1448.12 1214.93 L1448.7 1214.93 L1449.29 1214.93 L1449.88 1214.93 L1450.46 1214.93 L1451.05 1214.93 L1451.64 1214.93 L1452.22 1214.93 L1452.81 1214.93 L1453.4 1214.93 L1453.98 1214.93 L1454.57 1214.93 L1455.16 1214.93 L1455.74 1214.93 L1456.33 1214.93 L1456.91 1214.93 L1457.5 1214.93 L1458.09 1214.93 L1458.67 1214.93 L1459.26 1214.93 L1459.85 1214.93 L1460.43 1214.93 L1461.02 1214.93 L1461.61 1214.93 L1462.19 1214.93 L1462.78 1214.93 L1463.37 1214.93 L1463.95 1214.93 L1464.54 1214.93 L1465.12 1214.93 L1465.71 1214.93 L1466.3 1214.93 L1466.88 1214.93 L1467.47 1214.93 L1468.06 1214.93 L1468.64 1214.93 L1469.23 1214.93 L1469.82 1214.93 L1470.4 1214.93 L1470.99 1214.93 L1471.57 1214.93 L1472.16 1214.93 L1472.75 1214.93 L1473.33 1214.93 L1473.92 1214.93 L1474.51 1214.93 L1475.09 1214.93 L1475.68 1214.93 L1476.27 1214.93 L1476.85 1214.93 L1477.44 1214.93 L1478.03 1214.93 L1478.61 1214.93 L1479.2 1214.93 L1479.78 1214.93 L1480.37 1214.93 L1480.96 1214.93 L1481.54 1214.93 L1482.13 1214.93 L1482.72 1214.93 L1483.3 1214.93 L1483.89 1214.93 L1484.48 1214.93 L1485.06 1214.93 L1485.65 1214.93 L1486.24 1214.93 L1486.82 1214.93 L1487.41 1214.93 L1487.99 1214.93 L1488.58 1214.93 L1489.17 1214.93 L1489.75 1214.93 L1490.34 1214.93 L1490.93 1214.93 L1491.51 1214.93 L1492.1 1214.93 L1492.69 1214.93 L1493.27 1214.93 L1493.86 1214.93 L1494.45 1214.93 L1495.03 1214.93 L1495.62 1214.93 L1496.2 1214.93 L1496.79 1214.93 L1497.38 1214.93 L1497.96 1214.93 L1498.55 1214.93 L1499.14 1214.93 L1499.72 1214.93 L1500.31 1214.93 L1500.9 1214.93 L1501.48 1214.93 L1502.07 1214.93 L1502.65 1214.93 L1503.24 1214.93 L1503.83 1214.93 L1504.41 1214.93 L1505 1214.93 L1505.59 1214.93 L1506.17 1214.93 L1506.76 1214.93 L1507.35 1214.93 L1507.93 1214.93 L1508.52 1214.93 L1509.11 1214.93 L1509.69 1214.93 L1510.28 1214.93 L1510.86 1214.93 L1511.45 1214.93 L1512.04 1214.93 L1512.62 1214.93 L1513.21 1214.93 L1513.8 1214.93 L1514.38 1214.93 L1514.97 1214.93 L1515.56 1214.93 L1516.14 1214.93 L1516.73 1214.93 L1517.32 1214.93 L1517.9 1214.93 L1518.49 1214.93 L1519.07 1214.93 L1519.66 1214.93 L1520.25 1214.93 L1520.83 1214.93 L1521.42 1214.93 L1522.01 1214.93 L1522.59 1214.93 L1523.18 1214.93 L1523.77 1214.93 L1524.35 1214.93 L1524.94 1214.93 L1525.52 1214.93 L1526.11 1214.93 L1526.7 1214.93 L1527.28 1214.93 L1527.87 1214.93 L1528.46 1214.93 L1529.04 1214.93 L1529.63 1214.93 L1530.22 1214.93 L1530.8 1214.93 L1531.39 1214.93 L1531.98 1214.93 L1532.56 1214.93 L1533.15 1214.93 L1533.73 1214.93 L1534.32 1214.93 L1534.91 1214.93 L1535.49 1214.93 L1536.08 1214.93 L1536.67 1214.93 L1537.25 1214.93 L1537.84 1214.93 L1538.43 1214.93 L1539.01 1214.93 L1539.6 1214.93 L1540.19 1214.93 L1540.77 1214.93 L1541.36 1214.93 L1541.94 1214.93 L1542.53 1214.93 L1543.12 1214.93 L1543.7 1214.93 L1544.29 1214.93 L1544.88 1214.93 L1545.46 1214.93 L1546.05 1214.93 L1546.64 1214.93 L1547.22 1214.93 L1547.81 1214.93 L1548.4 1214.93 L1548.98 1214.93 L1549.57 1214.93 L1550.15 1214.93 L1550.74 1214.93 L1551.33 1214.93 L1551.91 1214.93 L1552.5 1214.93 L1553.09 1214.93 L1553.67 1214.93 L1554.26 1214.93 L1554.85 1214.93 L1555.43 1214.93 L1556.02 1214.93 L1556.6 1214.93 L1557.19 1214.93 L1557.78 1214.93 L1558.36 1214.93 L1558.95 1214.93 L1559.54 1214.93 L1560.12 1214.93 L1560.71 1214.93 L1561.3 1214.93 L1561.88 1214.93 L1562.47 1214.93 L1563.06 1214.93 L1563.64 1214.93 L1564.23 1214.93 L1564.81 1214.93 L1565.4 1214.93 L1565.99 1214.93 L1566.57 1214.93 L1567.16 1214.93 L1567.75 1214.93 L1568.33 1214.93 L1568.92 1214.93 L1569.51 1214.93 L1570.09 1214.93 L1570.68 1214.93 L1571.27 1214.93 L1571.85 1214.93 L1572.44 1214.93 L1573.02 1214.93 L1573.61 1214.93 L1574.2 1214.93 L1574.78 1214.93 L1575.37 1214.93 L1575.96 1214.93 L1576.54 1214.93 L1577.13 1214.93 L1577.72 1214.93 L1578.3 1214.93 L1578.89 1214.93 L1579.47 1214.93 L1580.06 1214.93 L1580.65 1214.93 L1581.23 1214.93 L1581.82 1214.93 L1582.41 1214.93 L1582.99 1214.93 L1583.58 1214.93 L1584.17 1214.93 L1584.75 1214.93 L1585.34 1214.93 L1585.93 1214.93 L1586.51 1214.93 L1587.1 1214.93 L1587.68 1214.93 L1588.27 1214.93 L1588.86 1214.93 L1589.44 1214.93 L1590.03 1214.93 L1590.62 1214.93 L1591.2 1214.93 L1591.79 1214.93 L1592.38 1214.93 L1592.96 1214.93 L1593.55 1214.93 L1594.14 1214.93 L1594.72 1214.93 L1595.31 1214.93 L1595.89 1214.93 L1596.48 1214.93 L1597.07 1214.93 L1597.65 1214.93 L1598.24 1214.93 L1598.83 1214.93 L1599.41 1214.93 L1600 1214.93 L1600.59 1214.93 L1601.17 1214.93 L1601.76 1214.93 L1602.34 1214.93 L1602.93 1214.93 L1603.52 1214.93 L1604.1 1214.93 L1604.69 1214.93 L1605.28 1214.93 L1605.86 1214.93 L1606.45 1214.93 L1607.04 1214.93 L1607.62 1214.93 L1608.21 1214.93 L1608.8 1214.93 L1609.38 1214.93 L1609.97 1214.93 L1610.55 1214.93 L1611.14 1214.93 L1611.73 1214.93 L1612.31 1214.93 L1612.9 1214.93 L1613.49 1214.93 L1614.07 1214.93 L1614.66 1214.93 L1615.25 1214.93 L1615.83 1214.93 L1616.42 1214.93 L1617.01 1214.93 L1617.59 1214.93 L1618.18 1214.93 L1618.76 1214.93 L1619.35 1214.93 L1619.94 1214.93 L1620.52 1214.93 L1621.11 1214.93 L1621.7 1214.93 L1622.28 1214.93 L1622.87 1214.93 L1623.46 1214.93 L1624.04 1214.93 L1624.63 1214.93 L1625.22 1214.93 L1625.8 1214.93 L1626.39 1214.93 L1626.97 1214.93 L1627.56 1214.93 L1628.15 1214.93 L1628.73 1214.93 L1629.32 1214.93 L1629.91 1214.93 L1630.49 1214.93 L1631.08 1214.93 L1631.67 1214.93 L1632.25 1214.93 L1632.84 1214.93 L1633.42 1214.93 L1634.01 1214.93 L1634.6 1214.93 L1635.18 1214.93 L1635.77 1214.93 L1636.36 1214.93 L1636.94 1214.93 L1637.53 1214.93 L1638.12 1214.93 L1638.7 1214.93 L1639.29 1214.93 L1639.88 1214.93 L1640.46 1214.93 L1641.05 1214.93 L1641.63 1214.93 L1642.22 1214.93 L1642.81 1214.93 L1643.39 1214.93 L1643.98 1214.93 L1644.57 1214.93 L1645.15 1214.93 L1645.74 1214.93 L1646.33 1214.93 L1646.91 1214.93 L1647.5 1214.93 L1648.09 1214.93 L1648.67 1214.93 L1649.26 1214.93 L1649.84 1214.93 L1650.43 1214.93 L1651.02 1214.93 L1651.6 1214.93 L1652.19 1214.93 L1652.78 1214.93 L1653.36 1214.93 L1653.95 1214.93 L1654.54 1214.93 L1655.12 1214.93 L1655.71 1214.93 L1656.29 1214.93 L1656.88 1214.93 L1657.47 1214.93 L1658.05 1214.93 L1658.64 1214.93 L1659.23 1214.93 L1659.81 1214.93 L1660.4 1214.93 L1660.99 1214.93 L1661.57 1214.93 L1662.16 1214.93 L1662.75 1214.93 L1663.33 1214.93 L1663.92 1214.93 L1664.5 1214.93 L1665.09 1214.93 L1665.68 1214.93 L1666.26 1214.93 L1666.85 1214.93 L1667.44 1214.93 L1668.02 1214.93 L1668.61 1214.93 L1669.2 1214.93 L1669.78 1214.93 L1670.37 1214.93 L1670.96 1214.93 L1671.54 1214.93 L1672.13 1214.93 L1672.71 1214.93 L1673.3 1214.93 L1673.89 1214.93 L1674.47 1214.93 L1675.06 1214.93 L1675.65 1214.93 L1676.23 1214.93 L1676.82 1214.93 L1677.41 1214.93 L1677.99 1214.93 L1678.58 1214.93 L1679.17 1214.93 L1679.75 1214.93 L1680.34 1214.93 L1680.92 1214.93 L1681.51 1214.93 L1682.1 1214.93 L1682.68 1214.93 L1683.27 1214.93 L1683.86 1214.93 L1684.44 1214.93 L1685.03 1214.93 L1685.62 1214.93 L1686.2 1214.93 L1686.79 1214.93 L1687.37 1214.93 L1687.96 1214.93 L1688.55 1214.93 L1689.13 1214.93 L1689.72 1214.93 L1690.31 1214.93 L1690.89 1214.93 L1691.48 1214.93 L1692.07 1214.93 L1692.65 1214.93 L1693.24 1214.93 L1693.83 1214.93 L1694.41 1214.93 L1695 1214.93 L1695.58 1214.93 L1696.17 1214.93 L1696.76 1214.93 L1697.34 1214.93 L1697.93 1214.93 L1698.52 1214.93 L1699.1 1214.93 L1699.69 1214.93 L1700.28 1214.93 L1700.86 1214.93 L1701.45 1214.93 L1702.04 1214.93 L1702.62 1214.93 L1703.21 1214.93 L1703.79 1214.93 L1704.38 1214.93 L1704.97 1214.93 L1705.55 1214.93 L1706.14 1214.93 L1706.73 1214.93 L1707.31 1214.93 L1707.9 1214.93 L1708.49 1214.93 L1709.07 1214.93 L1709.66 1214.93 L1710.24 1214.93 L1710.83 1214.93 L1711.42 1214.93 L1712 1214.93 L1712.59 1214.93 L1713.18 1214.93 L1713.76 1214.93 L1714.35 1214.93 L1714.94 1214.93 L1715.52 1214.93 L1716.11 1214.93 L1716.7 1214.93 L1717.28 1214.93 L1717.87 1214.93 L1718.45 1214.93 L1719.04 1214.93 L1719.63 1214.93 L1720.21 1214.93 L1720.8 1214.93 L1721.39 1214.93 L1721.97 1214.93 L1722.56 1214.93 L1723.15 1214.93 L1723.73 1214.93 L1724.32 1214.93 L1724.91 1214.93 L1725.49 1214.93 L1726.08 1214.93 L1726.66 1214.93 L1727.25 1214.93 L1727.84 1214.93 L1728.42 1214.93 L1729.01 1214.93 L1729.6 1214.93 L1730.18 1214.93 L1730.77 1214.93 L1731.36 1214.93 L1731.94 1214.93 L1732.53 1214.93 L1733.11 1214.93 L1733.7 1214.93 L1734.29 1214.93 L1734.87 1214.93 L1735.46 1214.93 L1736.05 1214.93 L1736.63 1214.93 L1737.22 1214.93 L1737.81 1214.93 L1738.39 1214.93 L1738.98 1214.93 L1739.57 1214.93 L1740.15 1214.93 L1740.74 1214.93 L1741.32 1214.93 L1741.91 1214.93 L1742.5 1214.93 L1743.08 1214.93 L1743.67 1214.93 L1744.26 1214.93 L1744.84 1214.93 L1745.43 1214.93 L1746.02 1214.93 L1746.6 1214.93 L1747.19 1214.93 L1747.78 1214.93 L1748.36 1214.93 L1748.95 1214.93 L1749.53 1214.93 L1750.12 1214.93 L1750.71 1214.93 L1751.29 1214.93 L1751.88 1214.93 L1752.47 1214.93 L1753.05 1214.93 L1753.64 1214.93 L1754.23 1214.93 L1754.81 1214.93 L1755.4 1214.93 L1755.99 1214.93 L1756.57 1214.93 L1757.16 1214.93 L1757.74 1214.93 L1758.33 1214.93 L1758.92 1214.93 L1759.5 1214.93 L1760.09 1214.93 L1760.68 1214.93 L1761.26 1214.93 L1761.85 1214.93 L1762.44 1214.93 L1763.02 1214.93 L1763.61 1214.93 L1764.19 1214.93 L1764.78 1214.93 L1765.37 1214.93 L1765.95 1214.93 L1766.54 1214.93 L1767.13 1214.93 L1767.71 1214.93 L1768.3 1214.93 L1768.89 1214.93 L1769.47 1214.93 L1770.06 1214.93 L1770.65 1214.93 L1771.23 1214.93 L1771.82 1214.93 L1772.4 1214.93 L1772.99 1214.93 L1773.58 1214.93 L1774.16 1214.93 L1774.75 1214.93 L1775.34 1214.93 L1775.92 1214.93 L1776.51 1214.93 L1777.1 1214.93 L1777.68 1214.93 L1778.27 1214.93 L1778.86 1214.93 L1779.44 1214.93 L1780.03 1214.93 L1780.61 1214.93 L1781.2 1214.93 L1781.79 1214.93 L1782.37 1214.93 L1782.96 1214.93 L1783.55 1214.93 L1784.13 1214.93 L1784.72 1214.93 L1785.31 1214.93 L1785.89 1214.93 L1786.48 1214.93 L1787.06 1214.93 L1787.65 1214.93 L1788.24 1214.93 L1788.82 1214.93 L1789.41 1214.93 L1790 1214.93 L1790.58 1214.93 L1791.17 1214.93 L1791.76 1214.93 L1792.34 1214.93 L1792.93 1214.93 L1793.52 1214.93 L1794.1 1214.93 L1794.69 1214.93 L1795.27 1214.93 L1795.86 1214.93 L1796.45 1214.93 L1797.03 1214.93 L1797.62 1214.93 L1798.21 1214.93 L1798.79 1214.93 L1799.38 1214.93 L1799.97 1214.93 L1800.55 1214.93 L1801.14 1214.93 L1801.73 1214.93 L1802.31 1214.93 L1802.9 1214.93 L1803.48 1214.93 L1804.07 1214.93 L1804.66 1214.93 L1805.24 1214.93 L1805.83 1214.93 L1806.42 1214.93 L1807 1214.93 L1807.59 1214.93 L1808.18 1214.93 L1808.76 1214.93 L1809.35 1214.93 L1809.94 1214.93 L1810.52 1214.93 L1811.11 1214.93 L1811.69 1214.93 L1812.28 1214.93 L1812.87 1214.93 L1813.45 1214.93 L1814.04 1214.93 L1814.63 1214.93 L1815.21 1214.93 L1815.8 1214.93 L1816.39 1214.93 L1816.97 1214.93 L1817.56 1214.93 L1818.14 1214.93 L1818.73 1214.93 L1819.32 1214.93 L1819.9 1214.93 L1820.49 1214.93 L1821.08 1214.93 L1821.66 1214.93 L1822.25 1214.93 L1822.84 1214.93 L1823.42 1214.93 L1824.01 1214.93 L1824.6 1214.93 L1825.18 1214.93 L1825.77 1214.93 L1826.35 1214.93 L1826.94 1214.93 L1827.53 1214.93 L1828.11 1214.93 L1828.7 1214.93 L1829.29 1214.93 L1829.87 1214.93 L1830.46 1214.93 L1831.05 1214.93 L1831.63 1214.93 L1832.22 1214.93 L1832.81 1214.93 L1833.39 1214.93 L1833.98 1214.93 L1834.56 1214.93 L1835.15 1214.93 L1835.74 1214.93 L1836.32 1214.93 L1836.91 1214.93 L1837.5 1214.93 L1838.08 1214.93 L1838.67 1214.93 L1839.26 1214.93 L1839.84 1214.93 L1840.43 1214.93 L1841.01 1214.93 L1841.6 1214.93 L1842.19 1214.93 L1842.77 1214.93 L1843.36 1214.93 L1843.95 1214.93 L1844.53 1214.93 L1845.12 1214.93 L1845.71 1214.93 L1846.29 1214.93 L1846.88 1214.93 L1847.47 1214.93 L1848.05 1214.93 L1848.64 1214.93 L1849.22 1214.93 L1849.81 1214.93 L1850.4 1214.93 L1850.98 1214.93 L1851.57 1214.93 L1852.16 1214.93 L1852.74 1214.93 L1853.33 1214.93 L1853.92 1214.93 L1854.5 1214.93 L1855.09 1214.93 L1855.68 1214.93 L1856.26 1214.93 L1856.85 1214.93 L1857.43 1214.93 L1858.02 1214.93 L1858.61 1214.93 L1859.19 1214.93 L1859.78 1214.93 L1860.37 1214.93 L1860.95 1214.93 L1861.54 1214.93 L1862.13 1214.93 L1862.71 1214.93 L1863.3 1214.93 L1863.88 1214.93 L1864.47 1214.93 L1865.06 1214.93 L1865.64 1214.93 L1866.23 1214.93 L1866.82 1214.93 L1867.4 1214.93 L1867.99 1214.93 L1868.58 1214.93 L1869.16 1214.93 L1869.75 1214.93 L1870.34 1214.93 L1870.92 1214.93 L1871.51 1214.93 L1872.09 1214.93 L1872.68 1214.93 L1873.27 1214.93 L1873.85 1214.93 L1874.44 1214.93 L1875.03 1214.93 L1875.61 1214.93 L1876.2 1214.93 L1876.79 1214.93 L1877.37 1214.93 L1877.96 1214.93 L1878.55 1214.93 L1879.13 1214.93 L1879.72 1214.93 L1880.3 1214.93 L1880.89 1214.93 L1881.48 1214.93 L1882.06 1214.93 L1882.65 1214.93 L1883.24 1214.93 L1883.82 1214.93 L1884.41 1214.93 L1885 1214.93 L1885.58 1214.93 L1886.17 1214.93 L1886.76 1214.93 L1887.34 1214.93 L1887.93 1214.93 L1888.51 1214.93 L1889.1 1214.93 L1889.69 1214.93 L1890.27 1214.93 L1890.86 1214.93 L1891.45 1214.93 L1892.03 1214.93 L1892.62 1214.93 L1893.21 1214.93 L1893.79 1214.93 L1894.38 1214.93 L1894.96 1214.93 L1895.55 1214.93 L1896.14 1214.93 L1896.72 1214.93 L1897.31 1214.93 L1897.9 1214.93 L1898.48 1214.93 L1899.07 1214.93 L1899.66 1214.93 L1900.24 1214.93 L1900.83 1214.93 L1901.42 1214.93 L1902 1214.93 L1902.59 1214.93 L1903.17 1214.93 L1903.76 1214.93 L1904.35 1214.93 L1904.93 1214.93 L1905.52 1214.93 L1906.11 1214.93 L1906.69 1214.93 L1907.28 1214.93 L1907.87 1214.93 L1908.45 1214.93 L1909.04 1214.93 L1909.63 1214.93 L1910.21 1214.93 L1910.8 1214.93 L1911.38 1214.93 L1911.97 1214.93 L1912.56 1214.93 L1913.14 1214.93 L1913.73 1214.93 L1914.32 1214.93 L1914.9 1214.93 L1915.49 1214.93 L1916.08 1214.93 L1916.66 1214.93 L1917.25 1214.93 L1917.83 1214.93 L1918.42 1214.93 L1919.01 1214.93 L1919.59 1214.93 L1920.18 1214.93 L1920.77 1214.93 L1921.35 1214.93 L1921.94 1214.93 L1922.53 1214.93 L1923.11 1214.93 L1923.7 1214.93 L1924.29 1214.93 L1924.87 1214.93 L1925.46 1214.93 L1926.04 1214.93 L1926.63 1214.93 L1927.22 1214.93 L1927.8 1214.93 L1928.39 1214.93 L1928.98 1214.93 L1929.56 1214.93 L1930.15 1214.93 L1930.74 1214.93 L1931.32 1214.93 L1931.91 1214.93 L1932.5 1214.93 L1933.08 1214.93 L1933.67 1214.93 L1934.25 1214.93 L1934.84 1214.93 L1935.43 1214.93 L1936.01 1214.93 L1936.6 1214.93 L1937.19 1214.93 L1937.77 1214.93 L1938.36 1214.93 L1938.95 1214.93 L1939.53 1214.93 L1940.12 1214.93 L1940.71 1214.93 L1941.29 1214.93 L1941.88 1214.93 L1942.46 1214.93 L1943.05 1214.93 L1943.64 1214.93 L1944.22 1214.93 L1944.81 1214.93 L1945.4 1214.93 L1945.98 1214.93 L1946.57 1214.93 L1947.16 1214.93 L1947.74 1214.93 L1948.33 1214.93 L1948.91 1214.93 L1949.5 1214.93 L1950.09 1214.93 L1950.67 1214.93 L1951.26 1214.93 L1951.85 1214.93 L1952.43 1214.93 L1953.02 1214.93 L1953.61 1214.93 L1954.19 1214.93 L1954.78 1214.93 L1955.37 1214.93 L1955.95 1214.93 L1956.54 1214.93 L1957.12 1214.93 L1957.71 1214.93 L1958.3 1214.93 L1958.88 1214.93 L1959.47 1214.93 L1960.06 1214.93 L1960.64 1214.93 L1961.23 1214.93 L1961.82 1214.93 L1962.4 1214.93 L1962.99 1214.93 L1963.58 1214.93 L1964.16 1214.93 L1964.75 1214.93 L1965.33 1214.93 L1965.92 1214.93 L1966.51 1214.93 L1967.09 1214.93 L1967.68 1214.93 L1968.27 1214.93 L1968.85 1214.93 L1969.44 1214.93 L1970.03 1214.93 L1970.61 1214.93 L1971.2 1214.93 L1971.78 1214.93 L1972.37 1214.93 L1972.96 1214.93 L1973.54 1214.93 L1974.13 1214.93 L1974.72 1214.93 L1975.3 1214.93 L1975.89 1214.93 L1976.48 1214.93 L1977.06 1214.93 L1977.65 1214.93 L1978.24 1214.93 L1978.82 1214.93 L1979.41 1214.93 L1979.99 1214.93 L1980.58 1214.93 L1981.17 1214.93 L1981.75 1214.93 L1982.34 1214.93 L1982.93 1214.93 L1983.51 1214.93 L1984.1 1214.93 L1984.69 1214.93 L1985.27 1214.93 L1985.86 1214.93 L1986.45 1214.93 L1987.03 1214.93 L1987.62 1214.93 L1988.2 1214.93 L1988.79 1214.93 L1989.38 1214.93 L1989.96 1214.93 L1990.55 1214.93 L1991.14 1214.93 L1991.72 1214.93 L1992.31 1214.93 L1992.9 1214.93 L1993.48 1214.93 L1994.07 1214.93 L1994.65 1214.93 L1995.24 1214.93 L1995.83 1214.93 L1996.41 1214.93 L1997 1214.93 L1997.59 1214.93 L1998.17 1214.93 L1998.76 1214.93 L1999.35 1214.93 L1999.93 1214.93 L2000.52 1214.93 L2001.11 1214.93 L2001.69 1214.93 L2002.28 1214.93 L2002.86 1214.93 L2003.45 1214.93 L2004.04 1214.93 L2004.62 1214.93 L2005.21 1214.93 L2005.8 1214.93 L2006.38 1214.93 L2006.97 1214.93 L2007.56 1214.93 L2008.14 1214.93 L2008.73 1214.93 L2009.32 1214.93 L2009.9 1214.93 L2010.49 1214.93 L2011.07 1214.93 L2011.66 1214.93 L2012.25 1214.93 L2012.83 1214.93 L2013.42 1214.93 L2014.01 1214.93 L2014.59 1214.93 L2015.18 1214.93 L2015.77 1214.93 L2016.35 1214.93 L2016.94 1214.93 L2017.53 1214.93 L2018.11 1214.93 L2018.7 1214.93 L2019.28 1214.93 L2019.87 1214.93 L2020.46 1214.93 L2021.04 1214.93 L2021.63 1214.93 L2022.22 1214.93 L2022.8 1214.93 L2023.39 1214.93 L2023.98 1214.93 L2024.56 1214.93 L2025.15 1214.93 L2025.73 1214.93 L2026.32 1214.93 L2026.91 1214.93 L2027.49 1214.93 L2028.08 1214.93 L2028.67 1214.93 L2029.25 1214.93 L2029.84 1214.93 L2030.43 1214.93 L2031.01 1214.93 L2031.6 1214.93 L2032.19 1214.93 L2032.77 1214.93 L2033.36 1214.93 L2033.94 1214.93 L2034.53 1214.93 L2035.12 1214.93 L2035.7 1214.93 L2036.29 1214.93 L2036.88 1214.93 L2037.46 1214.93 L2038.05 1214.93 L2038.64 1214.93 L2039.22 1214.93 L2039.81 1214.93 L2040.4 1214.93 L2040.98 1214.93 L2041.57 1214.93 L2042.15 1214.93 L2042.74 1214.93 L2043.33 1214.93 L2043.91 1214.93 L2044.5 1214.93 L2045.09 1214.93 L2045.67 1214.93 L2046.26 1214.93 L2046.85 1214.93 L2047.43 1214.93 L2048.02 1214.93 L2048.6 1214.93 L2049.19 1214.93 L2049.78 1214.93 L2050.36 1214.93 L2050.95 1214.93 L2051.54 1214.93 L2052.12 1214.93 L2052.71 1214.93 L2053.3 1214.93 L2053.88 1214.93 L2054.47 1214.93 L2055.06 1214.93 L2055.64 1214.93 L2056.23 1214.93 L2056.81 1214.93 L2057.4 1214.93 L2057.99 1214.93 L2058.57 1214.93 L2059.16 1214.93 L2059.75 1214.93 L2060.33 1214.93 L2060.92 1214.93 L2061.51 1214.93 L2062.09 1214.93 L2062.68 1214.93 L2063.27 1214.93 L2063.85 1214.93 L2064.44 1214.93 L2065.02 1214.93 L2065.61 1214.93 L2066.2 1214.93 L2066.78 1214.93 L2067.37 1214.93 L2067.96 1214.93 L2068.54 1214.93 L2069.13 1214.93 L2069.72 1214.93 L2070.3 1214.93 L2070.89 1214.93 L2071.48 1214.93 L2072.06 1214.93 L2072.65 1214.93 L2073.23 1214.93 L2073.82 1214.93 L2074.41 1214.93 L2074.99 1214.93 L2075.58 1214.93 L2076.17 1214.93 L2076.75 1214.93 L2077.34 1214.93 L2077.93 1214.93 L2078.51 1214.93 L2079.1 1214.93 L2079.68 1214.93 L2080.27 1214.93 L2080.86 1214.93 L2081.44 1214.93 L2082.03 1214.93 L2082.62 1214.93 L2083.2 1214.93 L2083.79 1214.93 L2084.38 1214.93 L2084.96 1214.93 L2085.55 1214.93 L2086.14 1214.93 L2086.72 1214.93 L2087.31 1214.93 L2087.89 1214.93 L2088.48 1214.93 L2089.07 1214.93 L2089.65 1214.93 L2090.24 1214.93 L2090.83 1214.93 L2091.41 1214.93 L2092 1214.93 L2092.59 1214.93 L2093.17 1214.93 L2093.76 1214.93 L2094.35 1214.93 L2094.93 1214.93 L2095.52 1214.93 L2096.1 1214.93 L2096.69 1214.93 L2097.28 1214.93 L2097.86 1214.93 L2098.45 1214.93 L2099.04 1214.93 L2099.62 1214.93 L2100.21 1214.93 L2100.8 1214.93 L2101.38 1214.93 L2101.97 1214.93 L2102.55 1214.93 L2103.14 1214.93 L2103.73 1214.93 L2104.31 1214.93 L2104.9 1214.93 L2105.49 1214.93 L2106.07 1214.93 L2106.66 1214.93 L2107.25 1214.93 L2107.83 1214.93 L2108.42 1214.93 L2109.01 1214.93 L2109.59 1214.93 L2110.18 1214.93 L2110.76 1214.93 L2111.35 1214.93 L2111.94 1214.93 L2112.52 1214.93 L2113.11 1214.93 L2113.7 1214.93 L2114.28 1214.93 L2114.87 1214.93 L2115.46 1214.93 L2116.04 1214.93 L2116.63 1214.93 L2117.22 1214.93 L2117.8 1214.93 L2118.39 1214.93 L2118.97 1214.93 L2119.56 1214.93 L2120.15 1214.93 L2120.73 1214.93 L2121.32 1214.93 L2121.91 1214.93 L2122.49 1214.93 L2123.08 1214.93 L2123.67 1214.93 L2124.25 1214.93 L2124.84 1214.93 L2125.42 1214.93 L2126.01 1214.93 L2126.6 1214.93 L2127.18 1214.93 L2127.77 1214.93 L2128.36 1214.93 L2128.94 1214.93 L2129.53 1214.93 L2130.12 1214.93 L2130.7 1214.93 L2131.29 1214.93 L2131.88 1214.93 L2132.46 1214.93 L2133.05 1214.93 L2133.63 1214.93 L2134.22 1214.93 L2134.81 1214.93 L2135.39 1214.93 L2135.98 1214.93 L2136.57 1214.93 L2137.15 1214.93 L2137.74 1214.93 L2138.33 1214.93 L2138.91 1214.93 L2139.5 1214.93 L2140.09 1214.93 L2140.67 1214.93 L2141.26 1214.93 L2141.84 1214.93 L2142.43 1214.93 L2143.02 1214.93 L2143.6 1214.93 L2144.19 1214.93 L2144.78 1214.93 L2145.36 1214.93 L2145.95 1214.93 L2146.54 1214.93 L2147.12 1214.93 L2147.71 1214.93 L2148.3 1214.93 L2148.88 1214.93 L2149.47 1214.93 L2150.05 1214.93 L2150.64 1214.93 L2151.23 1214.93 L2151.81 1214.93 L2152.4 1214.93 L2152.99 1214.93 L2153.57 1214.93 L2154.16 1214.93 L2154.75 1214.93 L2155.33 1214.93 L2155.92 1214.93 L2156.5 1214.93 L2157.09 1214.93 L2157.68 1214.93 L2158.26 1214.93 L2158.26 1214.7 L2157.68 1214.7 L2157.09 1214.7 L2156.5 1214.7 L2155.92 1214.7 L2155.33 1214.7 L2154.75 1214.7 L2154.16 1214.7 L2153.57 1214.7 L2152.99 1214.7 L2152.4 1214.7 L2151.81 1214.7 L2151.23 1214.7 L2150.64 1214.7 L2150.05 1214.7 L2149.47 1214.7 L2148.88 1214.7 L2148.3 1214.7 L2147.71 1214.7 L2147.12 1214.7 L2146.54 1214.7 L2145.95 1214.7 L2145.36 1214.7 L2144.78 1214.7 L2144.19 1214.7 L2143.6 1214.7 L2143.02 1214.7 L2142.43 1214.7 L2141.84 1214.7 L2141.26 1214.7 L2140.67 1214.7 L2140.09 1214.7 L2139.5 1214.7 L2138.91 1214.7 L2138.33 1214.7 L2137.74 1214.7 L2137.15 1214.7 L2136.57 1214.7 L2135.98 1214.7 L2135.39 1214.7 L2134.81 1214.7 L2134.22 1214.7 L2133.63 1214.7 L2133.05 1214.7 L2132.46 1214.7 L2131.88 1214.7 L2131.29 1214.7 L2130.7 1214.7 L2130.12 1214.7 L2129.53 1214.7 L2128.94 1214.7 L2128.36 1214.7 L2127.77 1214.7 L2127.18 1214.7 L2126.6 1214.7 L2126.01 1214.7 L2125.42 1214.7 L2124.84 1214.7 L2124.25 1214.7 L2123.67 1214.7 L2123.08 1214.7 L2122.49 1214.7 L2121.91 1214.7 L2121.32 1214.7 L2120.73 1214.7 L2120.15 1214.7 L2119.56 1214.7 L2118.97 1214.7 L2118.39 1214.7 L2117.8 1214.7 L2117.22 1214.7 L2116.63 1214.7 L2116.04 1214.7 L2115.46 1214.7 L2114.87 1214.7 L2114.28 1214.7 L2113.7 1214.7 L2113.11 1214.7 L2112.52 1214.7 L2111.94 1214.7 L2111.35 1214.7 L2110.76 1214.7 L2110.18 1214.7 L2109.59 1214.7 L2109.01 1214.7 L2108.42 1214.7 L2107.83 1214.7 L2107.25 1214.7 L2106.66 1214.7 L2106.07 1214.7 L2105.49 1214.7 L2104.9 1214.7 L2104.31 1214.7 L2103.73 1214.7 L2103.14 1214.7 L2102.55 1214.7 L2101.97 1214.7 L2101.38 1214.7 L2100.8 1214.7 L2100.21 1214.7 L2099.62 1214.7 L2099.04 1214.7 L2098.45 1214.7 L2097.86 1214.7 L2097.28 1214.7 L2096.69 1214.7 L2096.1 1214.7 L2095.52 1214.7 L2094.93 1214.7 L2094.35 1214.7 L2093.76 1214.7 L2093.17 1214.7 L2092.59 1214.7 L2092 1214.7 L2091.41 1214.7 L2090.83 1214.7 L2090.24 1214.7 L2089.65 1214.7 L2089.07 1214.7 L2088.48 1214.7 L2087.89 1214.7 L2087.31 1214.7 L2086.72 1214.7 L2086.14 1214.7 L2085.55 1214.7 L2084.96 1214.7 L2084.38 1214.7 L2083.79 1214.7 L2083.2 1214.7 L2082.62 1214.7 L2082.03 1214.7 L2081.44 1214.7 L2080.86 1214.7 L2080.27 1214.7 L2079.68 1214.7 L2079.1 1214.7 L2078.51 1214.7 L2077.93 1214.7 L2077.34 1214.7 L2076.75 1214.7 L2076.17 1214.7 L2075.58 1214.7 L2074.99 1214.7 L2074.41 1214.7 L2073.82 1214.7 L2073.23 1214.7 L2072.65 1214.7 L2072.06 1214.7 L2071.48 1214.7 L2070.89 1214.7 L2070.3 1214.7 L2069.72 1214.7 L2069.13 1214.7 L2068.54 1214.7 L2067.96 1214.7 L2067.37 1214.7 L2066.78 1214.7 L2066.2 1214.7 L2065.61 1214.7 L2065.02 1214.7 L2064.44 1214.7 L2063.85 1214.7 L2063.27 1214.7 L2062.68 1214.7 L2062.09 1214.7 L2061.51 1214.7 L2060.92 1214.7 L2060.33 1214.7 L2059.75 1214.7 L2059.16 1214.7 L2058.57 1214.7 L2057.99 1214.7 L2057.4 1214.7 L2056.81 1214.7 L2056.23 1214.7 L2055.64 1214.7 L2055.06 1214.7 L2054.47 1214.7 L2053.88 1214.7 L2053.3 1214.7 L2052.71 1214.7 L2052.12 1214.7 L2051.54 1214.7 L2050.95 1214.7 L2050.36 1214.7 L2049.78 1214.7 L2049.19 1214.7 L2048.6 1214.7 L2048.02 1214.7 L2047.43 1214.7 L2046.85 1214.7 L2046.26 1214.7 L2045.67 1214.7 L2045.09 1214.7 L2044.5 1214.7 L2043.91 1214.7 L2043.33 1214.7 L2042.74 1214.7 L2042.15 1214.7 L2041.57 1214.7 L2040.98 1214.7 L2040.4 1214.7 L2039.81 1214.7 L2039.22 1214.7 L2038.64 1214.7 L2038.05 1214.7 L2037.46 1214.7 L2036.88 1214.7 L2036.29 1214.7 L2035.7 1214.7 L2035.12 1214.7 L2034.53 1214.7 L2033.94 1214.7 L2033.36 1214.7 L2032.77 1214.7 L2032.19 1214.7 L2031.6 1214.7 L2031.01 1214.7 L2030.43 1214.7 L2029.84 1214.7 L2029.25 1214.7 L2028.67 1214.7 L2028.08 1214.7 L2027.49 1214.7 L2026.91 1214.7 L2026.32 1214.7 L2025.73 1214.7 L2025.15 1214.7 L2024.56 1214.7 L2023.98 1214.7 L2023.39 1214.7 L2022.8 1214.7 L2022.22 1214.7 L2021.63 1214.7 L2021.04 1214.7 L2020.46 1214.7 L2019.87 1214.7 L2019.28 1214.7 L2018.7 1214.7 L2018.11 1214.7 L2017.53 1214.7 L2016.94 1214.7 L2016.35 1214.7 L2015.77 1214.7 L2015.18 1214.7 L2014.59 1214.7 L2014.01 1214.7 L2013.42 1214.7 L2012.83 1214.7 L2012.25 1214.7 L2011.66 1214.7 L2011.07 1214.7 L2010.49 1214.7 L2009.9 1214.7 L2009.32 1214.7 L2008.73 1214.7 L2008.14 1214.7 L2007.56 1214.7 L2006.97 1214.7 L2006.38 1214.7 L2005.8 1214.7 L2005.21 1214.7 L2004.62 1214.7 L2004.04 1214.7 L2003.45 1214.7 L2002.86 1214.7 L2002.28 1214.7 L2001.69 1214.7 L2001.11 1214.7 L2000.52 1214.7 L1999.93 1214.7 L1999.35 1214.7 L1998.76 1214.7 L1998.17 1214.7 L1997.59 1214.7 L1997 1214.7 L1996.41 1214.7 L1995.83 1214.7 L1995.24 1214.7 L1994.65 1214.7 L1994.07 1214.7 L1993.48 1214.7 L1992.9 1214.7 L1992.31 1214.7 L1991.72 1214.7 L1991.14 1214.7 L1990.55 1214.7 L1989.96 1214.7 L1989.38 1214.7 L1988.79 1214.7 L1988.2 1214.7 L1987.62 1214.7 L1987.03 1214.7 L1986.45 1214.7 L1985.86 1214.7 L1985.27 1214.7 L1984.69 1214.7 L1984.1 1214.7 L1983.51 1214.7 L1982.93 1214.7 L1982.34 1214.7 L1981.75 1214.7 L1981.17 1214.7 L1980.58 1214.7 L1979.99 1214.7 L1979.41 1214.7 L1978.82 1214.7 L1978.24 1214.7 L1977.65 1214.7 L1977.06 1214.7 L1976.48 1214.7 L1975.89 1214.7 L1975.3 1214.7 L1974.72 1214.7 L1974.13 1214.7 L1973.54 1214.7 L1972.96 1214.7 L1972.37 1214.7 L1971.78 1214.7 L1971.2 1214.7 L1970.61 1214.7 L1970.03 1214.7 L1969.44 1214.7 L1968.85 1214.7 L1968.27 1214.7 L1967.68 1214.7 L1967.09 1214.7 L1966.51 1214.7 L1965.92 1214.7 L1965.33 1214.7 L1964.75 1214.7 L1964.16 1214.7 L1963.58 1214.7 L1962.99 1214.7 L1962.4 1214.7 L1961.82 1214.7 L1961.23 1214.7 L1960.64 1214.7 L1960.06 1214.7 L1959.47 1214.7 L1958.88 1214.7 L1958.3 1214.7 L1957.71 1214.7 L1957.12 1214.7 L1956.54 1214.7 L1955.95 1214.7 L1955.37 1214.7 L1954.78 1214.7 L1954.19 1214.7 L1953.61 1214.7 L1953.02 1214.7 L1952.43 1214.7 L1951.85 1214.7 L1951.26 1214.7 L1950.67 1214.7 L1950.09 1214.7 L1949.5 1214.7 L1948.91 1214.7 L1948.33 1214.7 L1947.74 1214.7 L1947.16 1214.7 L1946.57 1214.7 L1945.98 1214.7 L1945.4 1214.7 L1944.81 1214.7 L1944.22 1214.7 L1943.64 1214.7 L1943.05 1214.7 L1942.46 1214.7 L1941.88 1214.7 L1941.29 1214.7 L1940.71 1214.7 L1940.12 1214.7 L1939.53 1214.7 L1938.95 1214.7 L1938.36 1214.7 L1937.77 1214.7 L1937.19 1214.7 L1936.6 1214.7 L1936.01 1214.7 L1935.43 1214.7 L1934.84 1214.7 L1934.25 1214.7 L1933.67 1214.7 L1933.08 1214.7 L1932.5 1214.7 L1931.91 1214.7 L1931.32 1214.7 L1930.74 1214.7 L1930.15 1214.7 L1929.56 1214.7 L1928.98 1214.7 L1928.39 1214.7 L1927.8 1214.7 L1927.22 1214.7 L1926.63 1214.7 L1926.04 1214.7 L1925.46 1214.7 L1924.87 1214.7 L1924.29 1214.7 L1923.7 1214.7 L1923.11 1214.7 L1922.53 1214.7 L1921.94 1214.7 L1921.35 1214.7 L1920.77 1214.7 L1920.18 1214.7 L1919.59 1214.7 L1919.01 1214.7 L1918.42 1214.7 L1917.83 1214.7 L1917.25 1214.7 L1916.66 1214.7 L1916.08 1214.7 L1915.49 1214.7 L1914.9 1214.7 L1914.32 1214.7 L1913.73 1214.7 L1913.14 1214.7 L1912.56 1214.7 L1911.97 1214.7 L1911.38 1214.7 L1910.8 1214.7 L1910.21 1214.7 L1909.63 1214.7 L1909.04 1214.7 L1908.45 1214.7 L1907.87 1214.7 L1907.28 1214.7 L1906.69 1214.7 L1906.11 1214.7 L1905.52 1214.7 L1904.93 1214.7 L1904.35 1214.7 L1903.76 1214.7 L1903.17 1214.7 L1902.59 1214.7 L1902 1214.7 L1901.42 1214.7 L1900.83 1214.7 L1900.24 1214.7 L1899.66 1214.7 L1899.07 1214.7 L1898.48 1214.7 L1897.9 1214.7 L1897.31 1214.7 L1896.72 1214.7 L1896.14 1214.7 L1895.55 1214.7 L1894.96 1214.7 L1894.38 1214.7 L1893.79 1214.7 L1893.21 1214.7 L1892.62 1214.7 L1892.03 1214.7 L1891.45 1214.7 L1890.86 1214.7 L1890.27 1214.7 L1889.69 1214.7 L1889.1 1214.7 L1888.51 1214.7 L1887.93 1214.7 L1887.34 1214.7 L1886.76 1214.7 L1886.17 1214.7 L1885.58 1214.7 L1885 1214.7 L1884.41 1214.7 L1883.82 1214.7 L1883.24 1214.7 L1882.65 1214.7 L1882.06 1214.7 L1881.48 1214.7 L1880.89 1214.7 L1880.3 1214.7 L1879.72 1214.7 L1879.13 1214.7 L1878.55 1214.7 L1877.96 1214.7 L1877.37 1214.7 L1876.79 1214.7 L1876.2 1214.7 L1875.61 1214.7 L1875.03 1214.7 L1874.44 1214.7 L1873.85 1214.7 L1873.27 1214.7 L1872.68 1214.7 L1872.09 1214.7 L1871.51 1214.7 L1870.92 1214.7 L1870.34 1214.7 L1869.75 1214.7 L1869.16 1214.7 L1868.58 1214.7 L1867.99 1214.7 L1867.4 1214.7 L1866.82 1214.7 L1866.23 1214.7 L1865.64 1214.7 L1865.06 1214.7 L1864.47 1214.7 L1863.88 1214.7 L1863.3 1214.7 L1862.71 1214.7 L1862.13 1214.7 L1861.54 1214.7 L1860.95 1214.7 L1860.37 1214.7 L1859.78 1214.7 L1859.19 1214.7 L1858.61 1214.7 L1858.02 1214.7 L1857.43 1214.7 L1856.85 1214.7 L1856.26 1214.7 L1855.68 1214.7 L1855.09 1214.7 L1854.5 1214.7 L1853.92 1214.7 L1853.33 1214.7 L1852.74 1214.7 L1852.16 1214.7 L1851.57 1214.7 L1850.98 1214.7 L1850.4 1214.7 L1849.81 1214.7 L1849.22 1214.7 L1848.64 1214.7 L1848.05 1214.7 L1847.47 1214.7 L1846.88 1214.7 L1846.29 1214.7 L1845.71 1214.7 L1845.12 1214.7 L1844.53 1214.7 L1843.95 1214.7 L1843.36 1214.7 L1842.77 1214.7 L1842.19 1214.7 L1841.6 1214.7 L1841.01 1214.7 L1840.43 1214.7 L1839.84 1214.7 L1839.26 1214.7 L1838.67 1214.7 L1838.08 1214.7 L1837.5 1214.7 L1836.91 1214.7 L1836.32 1214.7 L1835.74 1214.7 L1835.15 1214.7 L1834.56 1214.7 L1833.98 1214.7 L1833.39 1214.7 L1832.81 1214.7 L1832.22 1214.7 L1831.63 1214.7 L1831.05 1214.7 L1830.46 1214.7 L1829.87 1214.7 L1829.29 1214.7 L1828.7 1214.7 L1828.11 1214.7 L1827.53 1214.7 L1826.94 1214.7 L1826.35 1214.7 L1825.77 1214.7 L1825.18 1214.7 L1824.6 1214.7 L1824.01 1214.7 L1823.42 1214.7 L1822.84 1214.7 L1822.25 1214.7 L1821.66 1214.7 L1821.08 1214.7 L1820.49 1214.7 L1819.9 1214.7 L1819.32 1214.7 L1818.73 1214.7 L1818.14 1214.7 L1817.56 1214.7 L1816.97 1214.7 L1816.39 1214.7 L1815.8 1214.7 L1815.21 1214.7 L1814.63 1214.7 L1814.04 1214.7 L1813.45 1214.7 L1812.87 1214.7 L1812.28 1214.7 L1811.69 1214.7 L1811.11 1214.7 L1810.52 1214.7 L1809.94 1214.7 L1809.35 1214.7 L1808.76 1214.7 L1808.18 1214.7 L1807.59 1214.7 L1807 1214.7 L1806.42 1214.7 L1805.83 1214.7 L1805.24 1214.7 L1804.66 1214.7 L1804.07 1214.7 L1803.48 1214.7 L1802.9 1214.7 L1802.31 1214.7 L1801.73 1214.7 L1801.14 1214.7 L1800.55 1214.7 L1799.97 1214.7 L1799.38 1214.7 L1798.79 1214.7 L1798.21 1214.7 L1797.62 1214.7 L1797.03 1214.7 L1796.45 1214.7 L1795.86 1214.7 L1795.27 1214.7 L1794.69 1214.7 L1794.1 1214.7 L1793.52 1214.7 L1792.93 1214.7 L1792.34 1214.7 L1791.76 1214.7 L1791.17 1214.7 L1790.58 1214.7 L1790 1214.7 L1789.41 1214.7 L1788.82 1214.7 L1788.24 1214.7 L1787.65 1214.7 L1787.06 1214.7 L1786.48 1214.7 L1785.89 1214.7 L1785.31 1214.7 L1784.72 1214.7 L1784.13 1214.7 L1783.55 1214.7 L1782.96 1214.7 L1782.37 1214.7 L1781.79 1214.7 L1781.2 1214.7 L1780.61 1214.7 L1780.03 1214.7 L1779.44 1214.7 L1778.86 1214.7 L1778.27 1214.7 L1777.68 1214.7 L1777.1 1214.7 L1776.51 1214.7 L1775.92 1214.7 L1775.34 1214.7 L1774.75 1214.7 L1774.16 1214.7 L1773.58 1214.7 L1772.99 1214.7 L1772.4 1214.7 L1771.82 1214.7 L1771.23 1214.7 L1770.65 1214.7 L1770.06 1214.7 L1769.47 1214.7 L1768.89 1214.7 L1768.3 1214.7 L1767.71 1214.7 L1767.13 1214.7 L1766.54 1214.7 L1765.95 1214.7 L1765.37 1214.7 L1764.78 1214.7 L1764.19 1214.7 L1763.61 1214.7 L1763.02 1214.7 L1762.44 1214.7 L1761.85 1214.7 L1761.26 1214.7 L1760.68 1214.7 L1760.09 1214.7 L1759.5 1214.7 L1758.92 1214.7 L1758.33 1214.7 L1757.74 1214.7 L1757.16 1214.7 L1756.57 1214.7 L1755.99 1214.7 L1755.4 1214.7 L1754.81 1214.7 L1754.23 1214.7 L1753.64 1214.7 L1753.05 1214.7 L1752.47 1214.7 L1751.88 1214.7 L1751.29 1214.7 L1750.71 1214.7 L1750.12 1214.7 L1749.53 1214.7 L1748.95 1214.7 L1748.36 1214.7 L1747.78 1214.7 L1747.19 1214.7 L1746.6 1214.7 L1746.02 1214.7 L1745.43 1214.7 L1744.84 1214.7 L1744.26 1214.7 L1743.67 1214.7 L1743.08 1214.7 L1742.5 1214.7 L1741.91 1214.7 L1741.32 1214.7 L1740.74 1214.7 L1740.15 1214.7 L1739.57 1214.7 L1738.98 1214.7 L1738.39 1214.7 L1737.81 1214.7 L1737.22 1214.7 L1736.63 1214.7 L1736.05 1214.7 L1735.46 1214.7 L1734.87 1214.7 L1734.29 1214.7 L1733.7 1214.7 L1733.11 1214.7 L1732.53 1214.7 L1731.94 1214.7 L1731.36 1214.7 L1730.77 1214.7 L1730.18 1214.7 L1729.6 1214.7 L1729.01 1214.7 L1728.42 1214.7 L1727.84 1214.7 L1727.25 1214.7 L1726.66 1214.7 L1726.08 1214.7 L1725.49 1214.7 L1724.91 1214.7 L1724.32 1214.7 L1723.73 1214.7 L1723.15 1214.7 L1722.56 1214.7 L1721.97 1214.7 L1721.39 1214.7 L1720.8 1214.7 L1720.21 1214.7 L1719.63 1214.7 L1719.04 1214.7 L1718.45 1214.7 L1717.87 1214.7 L1717.28 1214.7 L1716.7 1214.7 L1716.11 1214.7 L1715.52 1214.7 L1714.94 1214.7 L1714.35 1214.7 L1713.76 1214.7 L1713.18 1214.7 L1712.59 1214.7 L1712 1214.7 L1711.42 1214.7 L1710.83 1214.7 L1710.24 1214.7 L1709.66 1214.7 L1709.07 1214.7 L1708.49 1214.7 L1707.9 1214.7 L1707.31 1214.7 L1706.73 1214.7 L1706.14 1214.7 L1705.55 1214.7 L1704.97 1214.7 L1704.38 1214.7 L1703.79 1214.7 L1703.21 1214.7 L1702.62 1214.7 L1702.04 1214.7 L1701.45 1214.7 L1700.86 1214.7 L1700.28 1214.7 L1699.69 1214.7 L1699.1 1214.7 L1698.52 1214.7 L1697.93 1214.7 L1697.34 1214.7 L1696.76 1214.7 L1696.17 1214.7 L1695.58 1214.7 L1695 1214.7 L1694.41 1214.7 L1693.83 1214.7 L1693.24 1214.7 L1692.65 1214.7 L1692.07 1214.7 L1691.48 1214.7 L1690.89 1214.7 L1690.31 1214.7 L1689.72 1214.7 L1689.13 1214.7 L1688.55 1214.7 L1687.96 1214.7 L1687.37 1214.7 L1686.79 1214.7 L1686.2 1214.7 L1685.62 1214.7 L1685.03 1214.7 L1684.44 1214.7 L1683.86 1214.7 L1683.27 1214.7 L1682.68 1214.7 L1682.1 1214.7 L1681.51 1214.7 L1680.92 1214.7 L1680.34 1214.7 L1679.75 1214.7 L1679.17 1214.7 L1678.58 1214.7 L1677.99 1214.7 L1677.41 1214.7 L1676.82 1214.7 L1676.23 1214.7 L1675.65 1214.7 L1675.06 1214.7 L1674.47 1214.7 L1673.89 1214.7 L1673.3 1214.7 L1672.71 1214.7 L1672.13 1214.7 L1671.54 1214.7 L1670.96 1214.7 L1670.37 1214.7 L1669.78 1214.7 L1669.2 1214.7 L1668.61 1214.7 L1668.02 1214.7 L1667.44 1214.7 L1666.85 1214.7 L1666.26 1214.7 L1665.68 1214.7 L1665.09 1214.7 L1664.5 1214.7 L1663.92 1214.7 L1663.33 1214.7 L1662.75 1214.7 L1662.16 1214.7 L1661.57 1214.7 L1660.99 1214.7 L1660.4 1214.7 L1659.81 1214.7 L1659.23 1214.7 L1658.64 1214.7 L1658.05 1214.7 L1657.47 1214.7 L1656.88 1214.7 L1656.29 1214.7 L1655.71 1214.7 L1655.12 1214.7 L1654.54 1214.7 L1653.95 1214.7 L1653.36 1214.7 L1652.78 1214.7 L1652.19 1214.7 L1651.6 1214.7 L1651.02 1214.7 L1650.43 1214.7 L1649.84 1214.7 L1649.26 1214.7 L1648.67 1214.7 L1648.09 1214.7 L1647.5 1214.7 L1646.91 1214.7 L1646.33 1214.7 L1645.74 1214.7 L1645.15 1214.7 L1644.57 1214.7 L1643.98 1214.7 L1643.39 1214.7 L1642.81 1214.7 L1642.22 1214.7 L1641.63 1214.7 L1641.05 1214.7 L1640.46 1214.7 L1639.88 1214.7 L1639.29 1214.7 L1638.7 1214.7 L1638.12 1214.7 L1637.53 1214.7 L1636.94 1214.7 L1636.36 1214.7 L1635.77 1214.7 L1635.18 1214.7 L1634.6 1214.7 L1634.01 1214.7 L1633.42 1214.7 L1632.84 1214.7 L1632.25 1214.7 L1631.67 1214.7 L1631.08 1214.7 L1630.49 1214.7 L1629.91 1214.7 L1629.32 1214.7 L1628.73 1214.7 L1628.15 1214.7 L1627.56 1214.7 L1626.97 1214.7 L1626.39 1214.7 L1625.8 1214.7 L1625.22 1214.7 L1624.63 1214.7 L1624.04 1214.7 L1623.46 1214.7 L1622.87 1214.7 L1622.28 1214.7 L1621.7 1214.7 L1621.11 1214.7 L1620.52 1214.7 L1619.94 1214.7 L1619.35 1214.7 L1618.76 1214.7 L1618.18 1214.7 L1617.59 1214.7 L1617.01 1214.7 L1616.42 1214.7 L1615.83 1214.7 L1615.25 1214.7 L1614.66 1214.7 L1614.07 1214.7 L1613.49 1214.7 L1612.9 1214.7 L1612.31 1214.7 L1611.73 1214.7 L1611.14 1214.7 L1610.55 1214.7 L1609.97 1214.7 L1609.38 1214.7 L1608.8 1214.7 L1608.21 1214.7 L1607.62 1214.7 L1607.04 1214.7 L1606.45 1214.7 L1605.86 1214.7 L1605.28 1214.7 L1604.69 1214.7 L1604.1 1214.7 L1603.52 1214.7 L1602.93 1214.7 L1602.34 1214.7 L1601.76 1214.7 L1601.17 1214.7 L1600.59 1214.7 L1600 1214.7 L1599.41 1214.7 L1598.83 1214.7 L1598.24 1214.7 L1597.65 1214.7 L1597.07 1214.7 L1596.48 1214.7 L1595.89 1214.7 L1595.31 1214.7 L1594.72 1214.7 L1594.14 1214.7 L1593.55 1214.7 L1592.96 1214.7 L1592.38 1214.7 L1591.79 1214.7 L1591.2 1214.7 L1590.62 1214.7 L1590.03 1214.7 L1589.44 1214.7 L1588.86 1214.7 L1588.27 1214.7 L1587.68 1214.7 L1587.1 1214.7 L1586.51 1214.7 L1585.93 1214.7 L1585.34 1214.7 L1584.75 1214.7 L1584.17 1214.7 L1583.58 1214.7 L1582.99 1214.7 L1582.41 1214.7 L1581.82 1214.7 L1581.23 1214.7 L1580.65 1214.7 L1580.06 1214.7 L1579.47 1214.7 L1578.89 1214.7 L1578.3 1214.7 L1577.72 1214.7 L1577.13 1214.7 L1576.54 1214.7 L1575.96 1214.7 L1575.37 1214.7 L1574.78 1214.7 L1574.2 1214.7 L1573.61 1214.7 L1573.02 1214.7 L1572.44 1214.7 L1571.85 1214.7 L1571.27 1214.7 L1570.68 1214.7 L1570.09 1214.7 L1569.51 1214.7 L1568.92 1214.7 L1568.33 1214.7 L1567.75 1214.7 L1567.16 1214.7 L1566.57 1214.7 L1565.99 1214.7 L1565.4 1214.7 L1564.81 1214.7 L1564.23 1214.7 L1563.64 1214.7 L1563.06 1214.7 L1562.47 1214.7 L1561.88 1214.7 L1561.3 1214.7 L1560.71 1214.7 L1560.12 1214.7 L1559.54 1214.7 L1558.95 1214.7 L1558.36 1214.7 L1557.78 1214.7 L1557.19 1214.7 L1556.6 1214.7 L1556.02 1214.7 L1555.43 1214.7 L1554.85 1214.7 L1554.26 1214.7 L1553.67 1214.7 L1553.09 1214.7 L1552.5 1214.7 L1551.91 1214.7 L1551.33 1214.7 L1550.74 1214.7 L1550.15 1214.7 L1549.57 1214.7 L1548.98 1214.7 L1548.4 1214.7 L1547.81 1214.7 L1547.22 1214.7 L1546.64 1214.7 L1546.05 1214.7 L1545.46 1214.7 L1544.88 1214.7 L1544.29 1214.7 L1543.7 1214.7 L1543.12 1214.7 L1542.53 1214.7 L1541.94 1214.7 L1541.36 1214.7 L1540.77 1214.7 L1540.19 1214.7 L1539.6 1214.7 L1539.01 1214.7 L1538.43 1214.7 L1537.84 1214.7 L1537.25 1214.7 L1536.67 1214.7 L1536.08 1214.7 L1535.49 1214.7 L1534.91 1214.7 L1534.32 1214.7 L1533.73 1214.7 L1533.15 1214.7 L1532.56 1214.7 L1531.98 1214.7 L1531.39 1214.7 L1530.8 1214.7 L1530.22 1214.7 L1529.63 1214.7 L1529.04 1214.7 L1528.46 1214.7 L1527.87 1214.7 L1527.28 1214.7 L1526.7 1214.7 L1526.11 1214.7 L1525.52 1214.7 L1524.94 1214.7 L1524.35 1214.7 L1523.77 1214.7 L1523.18 1214.7 L1522.59 1214.7 L1522.01 1214.7 L1521.42 1214.7 L1520.83 1214.7 L1520.25 1214.7 L1519.66 1214.7 L1519.07 1214.7 L1518.49 1214.7 L1517.9 1214.7 L1517.32 1214.7 L1516.73 1214.7 L1516.14 1214.7 L1515.56 1214.7 L1514.97 1214.7 L1514.38 1214.7 L1513.8 1214.7 L1513.21 1214.7 L1512.62 1214.7 L1512.04 1214.7 L1511.45 1214.7 L1510.86 1214.7 L1510.28 1214.7 L1509.69 1214.7 L1509.11 1214.7 L1508.52 1214.7 L1507.93 1214.7 L1507.35 1214.7 L1506.76 1214.7 L1506.17 1214.7 L1505.59 1214.7 L1505 1214.7 L1504.41 1214.7 L1503.83 1214.7 L1503.24 1214.7 L1502.65 1214.7 L1502.07 1214.7 L1501.48 1214.7 L1500.9 1214.7 L1500.31 1214.7 L1499.72 1214.7 L1499.14 1214.7 L1498.55 1214.7 L1497.96 1214.7 L1497.38 1214.7 L1496.79 1214.7 L1496.2 1214.7 L1495.62 1214.7 L1495.03 1214.7 L1494.45 1214.7 L1493.86 1214.7 L1493.27 1214.7 L1492.69 1214.7 L1492.1 1214.7 L1491.51 1214.7 L1490.93 1214.7 L1490.34 1214.7 L1489.75 1214.7 L1489.17 1214.7 L1488.58 1214.7 L1487.99 1214.7 L1487.41 1214.7 L1486.82 1214.7 L1486.24 1214.7 L1485.65 1214.7 L1485.06 1214.7 L1484.48 1214.7 L1483.89 1214.7 L1483.3 1214.7 L1482.72 1214.7 L1482.13 1214.7 L1481.54 1214.7 L1480.96 1214.7 L1480.37 1214.7 L1479.78 1214.7 L1479.2 1214.7 L1478.61 1214.7 L1478.03 1214.7 L1477.44 1214.7 L1476.85 1214.7 L1476.27 1214.7 L1475.68 1214.7 L1475.09 1214.7 L1474.51 1214.7 L1473.92 1214.7 L1473.33 1214.7 L1472.75 1214.7 L1472.16 1214.7 L1471.57 1214.7 L1470.99 1214.7 L1470.4 1214.7 L1469.82 1214.7 L1469.23 1214.7 L1468.64 1214.7 L1468.06 1214.7 L1467.47 1214.7 L1466.88 1214.7 L1466.3 1214.7 L1465.71 1214.7 L1465.12 1214.7 L1464.54 1214.7 L1463.95 1214.7 L1463.37 1214.7 L1462.78 1214.7 L1462.19 1214.7 L1461.61 1214.7 L1461.02 1214.7 L1460.43 1214.7 L1459.85 1214.7 L1459.26 1214.7 L1458.67 1214.7 L1458.09 1214.7 L1457.5 1214.7 L1456.91 1214.7 L1456.33 1214.7 L1455.74 1214.7 L1455.16 1214.7 L1454.57 1214.7 L1453.98 1214.7 L1453.4 1214.7 L1452.81 1214.7 L1452.22 1214.7 L1451.64 1214.7 L1451.05 1214.7 L1450.46 1214.7 L1449.88 1214.7 L1449.29 1214.7 L1448.7 1214.7 L1448.12 1214.7 L1447.53 1214.7 L1446.95 1214.7 L1446.36 1214.7 L1445.77 1214.7 L1445.19 1214.7 L1444.6 1214.7 L1444.01 1214.7 L1443.43 1214.7 L1442.84 1214.7 L1442.25 1214.7 L1441.67 1214.7 L1441.08 1214.7 L1440.5 1214.7 L1439.91 1214.7 L1439.32 1214.7 L1438.74 1214.7 L1438.15 1214.7 L1437.56 1214.7 L1436.98 1214.7 L1436.39 1214.7 L1435.8 1214.7 L1435.22 1214.7 L1434.63 1214.7 L1434.04 1214.7 L1433.46 1214.7 L1432.87 1214.7 L1432.29 1214.7 L1431.7 1214.7 L1431.11 1214.7 L1430.53 1214.7 L1429.94 1214.7 L1429.35 1214.7 L1428.77 1214.7 L1428.18 1214.7 L1427.59 1214.7 L1427.01 1214.7 L1426.42 1214.7 L1425.83 1214.7 L1425.25 1214.7 L1424.66 1214.7 L1424.08 1214.7 L1423.49 1214.7 L1422.9 1214.7 L1422.32 1214.7 L1421.73 1214.7 L1421.14 1214.7 L1420.56 1214.7 L1419.97 1214.7 L1419.38 1214.7 L1418.8 1214.7 L1418.21 1214.7 L1417.63 1214.7 L1417.04 1214.7 L1416.45 1214.7 L1415.87 1214.7 L1415.28 1214.7 L1414.69 1214.7 L1414.11 1214.7 L1413.52 1214.7 L1412.93 1214.7 L1412.35 1214.7 L1411.76 1214.7 L1411.17 1214.7 L1410.59 1214.7 L1410 1214.7 L1409.42 1214.7 L1408.83 1214.7 L1408.24 1214.7 L1407.66 1214.7 L1407.07 1214.7 L1406.48 1214.7 L1405.9 1214.7 L1405.31 1214.7 L1404.72 1214.7 L1404.14 1214.7 L1403.55 1214.7 L1402.96 1214.7 L1402.38 1214.7 L1401.79 1214.7 L1401.21 1214.7 L1400.62 1214.7 L1400.03 1214.7 L1399.45 1214.7 L1398.86 1214.7 L1398.27 1214.7 L1397.69 1214.7 L1397.1 1214.7 L1396.51 1214.7 L1395.93 1214.7 L1395.34 1214.7 L1394.75 1214.7 L1394.17 1214.7 L1393.58 1214.7 L1393 1214.7 L1392.41 1214.7 L1391.82 1214.7 L1391.24 1214.7 L1390.65 1214.7 L1390.06 1214.7 L1389.48 1214.7 L1388.89 1214.7 L1388.3 1214.7 L1387.72 1214.7 L1387.13 1214.7 L1386.55 1214.7 L1385.96 1214.7 L1385.37 1214.7 L1384.79 1214.7 L1384.2 1214.7 L1383.61 1214.7 L1383.03 1214.7 L1382.44 1214.7 L1381.85 1214.7 L1381.27 1214.7 L1380.68 1214.7 L1380.09 1214.7 L1379.51 1214.7 L1378.92 1214.7 L1378.34 1214.7 L1377.75 1214.7 L1377.16 1214.7 L1376.58 1214.7 L1375.99 1214.7 L1375.4 1214.7 L1374.82 1214.7 L1374.23 1214.7 L1373.64 1214.7 L1373.06 1214.7 L1372.47 1214.7 L1371.88 1214.7 L1371.3 1214.7 L1370.71 1214.7 L1370.13 1214.7 L1369.54 1214.7 L1368.95 1214.7 L1368.37 1214.7 L1367.78 1214.7 L1367.19 1214.7 L1366.61 1214.7 L1366.02 1214.7 L1365.43 1214.7 L1364.85 1214.7 L1364.26 1214.7 L1363.68 1214.7 L1363.09 1214.7 L1362.5 1214.7 L1361.92 1214.7 L1361.33 1214.7 L1360.74 1214.7 L1360.16 1214.7 L1359.57 1214.7 L1358.98 1214.7 L1358.4 1214.7 L1357.81 1214.7 L1357.22 1214.7 L1356.64 1214.7 L1356.05 1214.7 L1355.47 1214.7 L1354.88 1214.7 L1354.29 1214.7 L1353.71 1214.7 L1353.12 1214.7 L1352.53 1214.7 L1351.95 1214.7 L1351.36 1214.7 L1350.77 1214.7 L1350.19 1214.7 L1349.6 1214.7 L1349.01 1214.7 L1348.43 1214.7 L1347.84 1214.7 L1347.26 1214.7 L1346.67 1214.7 L1346.08 1214.7 L1345.5 1214.7 L1344.91 1214.7 L1344.32 1214.7 L1343.74 1214.7 L1343.15 1214.7 L1342.56 1214.7 L1341.98 1214.7 L1341.39 1214.7 L1340.8 1214.7 L1340.22 1214.7 L1339.63 1214.7 L1339.05 1214.7 L1338.46 1214.7 L1337.87 1214.7 L1337.29 1214.7 L1336.7 1214.7 L1336.11 1214.7 L1335.53 1214.7 L1334.94 1214.7 L1334.35 1214.7 L1333.77 1214.7 L1333.18 1214.7 L1332.6 1214.7 L1332.01 1214.7 L1331.42 1214.7 L1330.84 1214.7 L1330.25 1214.7 L1329.66 1214.7 L1329.08 1214.7 L1328.49 1214.7 L1327.9 1214.7 L1327.32 1214.7 L1326.73 1214.7 L1326.14 1214.7 L1325.56 1214.7 L1324.97 1214.7 L1324.39 1214.7 L1323.8 1214.7 L1323.21 1214.7 L1322.63 1214.7 L1322.04 1214.7 L1321.45 1214.7 L1320.87 1214.7 L1320.28 1214.7 L1319.69 1214.7 L1319.11 1214.7 L1318.52 1214.7 L1317.93 1214.7 L1317.35 1214.7 L1316.76 1214.7 L1316.18 1214.7 L1315.59 1214.7 L1315 1214.7 L1314.42 1214.7 L1313.83 1214.7 L1313.24 1214.7 L1312.66 1214.7 L1312.07 1214.7 L1311.48 1214.7 L1310.9 1214.7 L1310.31 1214.7 L1309.73 1214.7 L1309.14 1214.7 L1308.55 1214.7 L1307.97 1214.7 L1307.38 1214.7 L1306.79 1214.7 L1306.21 1214.7 L1305.62 1214.7 L1305.03 1214.7 L1304.45 1214.7 L1303.86 1214.7 L1303.27 1214.7 L1302.69 1214.7 L1302.1 1214.7 L1301.52 1214.7 L1300.93 1214.7 L1300.34 1214.7 L1299.76 1214.7 L1299.17 1214.7 L1298.58 1214.7 L1298 1214.7 L1297.41 1214.7 L1296.82 1214.7 L1296.24 1214.7 L1295.65 1214.7 L1295.06 1214.7 L1294.48 1214.7 L1293.89 1214.7 L1293.31 1214.7 L1292.72 1214.7 L1292.13 1214.7 L1291.55 1214.7 L1290.96 1214.7 L1290.37 1214.7 L1289.79 1214.7 L1289.2 1214.7 L1288.61 1214.7 L1288.03 1214.7 L1287.44 1214.7 L1286.86 1214.7 L1286.27 1214.7 L1285.68 1214.7 L1285.1 1214.7 L1284.51 1214.7 L1283.92 1214.7 L1283.34 1214.7 L1282.75 1214.7 L1282.16 1214.7 L1281.58 1214.7 L1280.99 1214.7 L1280.4 1214.7 L1279.82 1214.7 L1279.23 1214.7 L1278.65 1214.7 L1278.06 1214.7 L1277.47 1214.7 L1276.89 1214.7 L1276.3 1214.7 L1275.71 1214.7 L1275.13 1214.7 L1274.54 1214.7 L1273.95 1214.7 L1273.37 1214.7 L1272.78 1214.7 L1272.19 1214.7 L1271.61 1214.7 L1271.02 1214.7 L1270.44 1214.7 L1269.85 1214.7 L1269.26 1214.7 L1268.68 1214.7 L1268.09 1214.7 L1267.5 1214.7 L1266.92 1214.7 L1266.33 1214.7 L1265.74 1214.7 L1265.16 1214.7 L1264.57 1214.7 L1263.98 1214.7 L1263.4 1214.7 L1262.81 1214.7 L1262.23 1214.7 L1261.64 1214.7 L1261.05 1214.7 L1260.47 1214.7 L1259.88 1214.7 L1259.29 1214.7 L1258.71 1214.7 L1258.12 1214.7 L1257.53 1214.7 L1256.95 1214.7 L1256.36 1214.7 L1255.78 1214.7 L1255.19 1214.7 L1254.6 1214.7 L1254.02 1214.7 L1253.43 1214.7 L1252.84 1214.7 L1252.26 1214.7 L1251.67 1214.7 L1251.08 1214.7 L1250.5 1214.7 L1249.91 1214.7 L1249.32 1214.7 L1248.74 1214.7 L1248.15 1214.7 L1247.57 1214.7 L1246.98 1214.7 L1246.39 1214.7 L1245.81 1214.7 L1245.22 1214.7 L1244.63 1214.7 L1244.05 1214.7 L1243.46 1214.7 L1242.87 1214.7 L1242.29 1214.7 L1241.7 1214.7 L1241.11 1214.7 L1240.53 1214.7 L1239.94 1214.7 L1239.36 1214.7 L1238.77 1214.7 L1238.18 1214.7 L1237.6 1214.7 L1237.01 1214.7 L1236.42 1214.7 L1235.84 1214.7 L1235.25 1214.7 L1234.66 1214.7 L1234.08 1214.7 L1233.49 1214.7 L1232.91 1214.7 L1232.32 1214.7 L1231.73 1214.7 L1231.15 1214.7 L1230.56 1214.7 L1229.97 1214.7 L1229.39 1214.7 L1228.8 1214.7 L1228.21 1214.7 L1227.63 1214.7 L1227.04 1214.7 L1226.45 1214.7 L1225.87 1214.7 L1225.28 1214.7 L1224.7 1214.7 L1224.11 1214.7 L1223.52 1214.7 L1222.94 1214.7 L1222.35 1214.7 L1221.76 1214.7 L1221.18 1214.7 L1220.59 1214.7 L1220 1214.7 L1219.42 1214.7 L1218.83 1214.7 L1218.24 1214.7 L1217.66 1214.7 L1217.07 1214.7 L1216.49 1214.7 L1215.9 1214.7 L1215.31 1214.7 L1214.73 1214.7 L1214.14 1214.7 L1213.55 1214.7 L1212.97 1214.7 L1212.38 1214.7 L1211.79 1214.7 L1211.21 1214.7 L1210.62 1214.7 L1210.03 1214.7 L1209.45 1214.7 L1208.86 1214.7 L1208.28 1214.7 L1207.69 1214.7 L1207.1 1214.7 L1206.52 1214.7 L1205.93 1214.7 L1205.34 1214.7 L1204.76 1214.7 L1204.17 1214.7 L1203.58 1214.7 L1203 1214.7 L1202.41 1214.7 L1201.83 1214.7 L1201.24 1214.7 L1200.65 1214.7 L1200.07 1214.7 L1199.48 1214.7 L1198.89 1214.7 L1198.31 1214.7 L1197.72 1214.7 L1197.13 1214.7 L1196.55 1214.7 L1195.96 1214.7 L1195.37 1214.7 L1194.79 1214.7 L1194.2 1214.7 L1193.62 1214.7 L1193.03 1214.7 L1192.44 1214.7 L1191.86 1214.7 L1191.27 1214.7 L1190.68 1214.7 L1190.1 1214.7 L1189.51 1214.7 L1188.92 1214.7 L1188.34 1214.7 L1187.75 1214.7 L1187.16 1214.7 L1186.58 1214.7 L1185.99 1214.7 L1185.41 1214.7 L1184.82 1214.7 L1184.23 1214.7 L1183.65 1214.7 L1183.06 1214.7 L1182.47 1214.7 L1181.89 1214.7 L1181.3 1214.7 L1180.71 1214.7 L1180.13 1214.7 L1179.54 1214.7 L1178.96 1214.7 L1178.37 1214.7 L1177.78 1214.7 L1177.2 1214.7 L1176.61 1214.7 L1176.02 1214.7 L1175.44 1214.7 L1174.85 1214.7 L1174.26 1214.7 L1173.68 1214.7 L1173.09 1214.7 L1172.5 1214.7 L1171.92 1214.7 L1171.33 1214.7 L1170.75 1214.7 L1170.16 1214.7 L1169.57 1214.7 L1168.99 1214.7 L1168.4 1214.7 L1167.81 1214.7 L1167.23 1214.7 L1166.64 1214.7 L1166.05 1214.7 L1165.47 1214.7 L1164.88 1214.7 L1164.29 1214.7 L1163.71 1214.7 L1163.12 1214.7 L1162.54 1214.7 L1161.95 1214.7 L1161.36 1214.7 L1160.78 1214.7 L1160.19 1214.7 L1159.6 1214.7 L1159.02 1214.7 L1158.43 1214.7 L1157.84 1214.7 L1157.26 1214.7 L1156.67 1214.7 L1156.09 1214.7 L1155.5 1214.7 L1154.91 1214.7 L1154.33 1214.7 L1153.74 1214.7 L1153.15 1214.7 L1152.57 1214.7 L1151.98 1214.7 L1151.39 1214.7 L1150.81 1214.7 L1150.22 1214.7 L1149.63 1214.7 L1149.05 1214.7 L1148.46 1214.7 L1147.88 1214.7 L1147.29 1214.7 L1146.7 1214.7 L1146.12 1214.7 L1145.53 1214.7 L1144.94 1214.7 L1144.36 1214.7 L1143.77 1214.7 L1143.18 1214.7 L1142.6 1214.7 L1142.01 1214.7 L1141.42 1214.7 L1140.84 1214.7 L1140.25 1214.7 L1139.67 1214.7 L1139.08 1214.7 L1138.49 1214.7 L1137.91 1214.7 L1137.32 1214.7 L1136.73 1214.7 L1136.15 1214.7 L1135.56 1214.7 L1134.97 1214.7 L1134.39 1214.7 L1133.8 1214.7 L1133.21 1214.7 L1132.63 1214.7 L1132.04 1214.7 L1131.46 1214.7 L1130.87 1214.7 L1130.28 1214.7 L1129.7 1214.7 L1129.11 1214.7 L1128.52 1214.7 L1127.94 1214.7 L1127.35 1214.7 L1126.76 1214.7 L1126.18 1214.7 L1125.59 1214.7 L1125.01 1214.7 L1124.42 1214.7 L1123.83 1214.7 L1123.25 1214.7 L1122.66 1214.7 L1122.07 1214.7 L1121.49 1214.7 L1120.9 1214.7 L1120.31 1214.7 L1119.73 1214.7 L1119.14 1214.7 L1118.55 1214.7 L1117.97 1214.7 L1117.38 1214.7 L1116.8 1214.7 L1116.21 1214.7 L1115.62 1214.7 L1115.04 1214.7 L1114.45 1214.7 L1113.86 1214.7 L1113.28 1214.7 L1112.69 1214.7 L1112.1 1214.7 L1111.52 1214.7 L1110.93 1214.7 L1110.34 1214.7 L1109.76 1214.7 L1109.17 1214.7 L1108.59 1214.7 L1108 1214.7 L1107.41 1214.7 L1106.83 1214.7 L1106.24 1214.7 L1105.65 1214.7 L1105.07 1214.7 L1104.48 1214.7 L1103.89 1214.7 L1103.31 1214.7 L1102.72 1214.7 L1102.14 1214.7 L1101.55 1214.7 L1100.96 1214.7 L1100.38 1214.7 L1099.79 1214.7 L1099.2 1214.7 L1098.62 1214.7 L1098.03 1214.7 L1097.44 1214.7 L1096.86 1214.7 L1096.27 1214.7 L1095.68 1214.7 L1095.1 1214.7 L1094.51 1214.7 L1093.93 1214.7 L1093.34 1214.7 L1092.75 1214.7 L1092.17 1214.7 L1091.58 1214.7 L1090.99 1214.7 L1090.41 1214.7 L1089.82 1214.7 L1089.23 1214.7 L1088.65 1214.7 L1088.06 1214.7 L1087.47 1214.7 L1086.89 1214.7 L1086.3 1214.7 L1085.72 1214.7 L1085.13 1214.7 L1084.54 1214.7 L1083.96 1214.7 L1083.37 1214.7 L1082.78 1214.7 L1082.2 1214.7 L1081.61 1214.7 L1081.02 1214.7 L1080.44 1214.7 L1079.85 1214.7 L1079.26 1214.7 L1078.68 1214.7 L1078.09 1214.7 L1077.51 1214.7 L1076.92 1214.7 L1076.33 1214.7 L1075.75 1214.7 L1075.16 1214.7 L1074.57 1214.7 L1073.99 1214.7 L1073.4 1214.7 L1072.81 1214.7 L1072.23 1214.7 L1071.64 1214.7 L1071.06 1214.7 L1070.47 1214.7 L1069.88 1214.7 L1069.3 1214.7 L1068.71 1214.7 L1068.12 1214.7 L1067.54 1214.7 L1066.95 1214.7 L1066.36 1214.7 L1065.78 1214.7 L1065.19 1214.7 L1064.6 1214.7 L1064.02 1214.7 L1063.43 1214.7 L1062.85 1214.7 L1062.26 1214.7 L1061.67 1214.7 L1061.09 1214.7 L1060.5 1214.7 L1059.91 1214.7 L1059.33 1214.7 L1058.74 1214.7 L1058.15 1214.7 L1057.57 1214.7 L1056.98 1214.7 L1056.39 1214.7 L1055.81 1214.7 L1055.22 1214.7 L1054.64 1214.7 L1054.05 1214.7 L1053.46 1214.7 L1052.88 1214.7 L1052.29 1214.7 L1051.7 1214.7 L1051.12 1214.7 L1050.53 1214.7 L1049.94 1214.7 L1049.36 1214.7 L1048.77 1214.7 L1048.19 1214.7 L1047.6 1214.7 L1047.01 1214.7 L1046.43 1214.7 L1045.84 1214.7 L1045.25 1214.7 L1044.67 1214.7 L1044.08 1214.7 L1043.49 1214.7 L1042.91 1214.7 L1042.32 1214.7 L1041.73 1214.7 L1041.15 1214.7 L1040.56 1214.7 L1039.98 1214.7 L1039.39 1214.7 L1038.8 1214.7 L1038.22 1214.7 L1037.63 1214.7 L1037.04 1214.7 L1036.46 1214.7 L1035.87 1214.7 L1035.28 1214.7 L1034.7 1214.7 L1034.11 1214.7 L1033.52 1214.7 L1032.94 1214.7 L1032.35 1214.7 L1031.77 1214.7 L1031.18 1214.7 L1030.59 1214.7 L1030.01 1214.7 L1029.42 1214.7 L1028.83 1214.7 L1028.25 1214.7 L1027.66 1214.7 L1027.07 1214.7 L1026.49 1214.7 L1025.9 1214.7 L1025.32 1214.7 L1024.73 1214.7 L1024.14 1214.7 L1023.56 1214.7 L1022.97 1214.7 L1022.38 1214.7 L1021.8 1214.7 L1021.21 1214.7 L1020.62 1214.7 L1020.04 1214.7 L1019.45 1214.7 L1018.86 1214.7 L1018.28 1214.7 L1017.69 1214.7 L1017.11 1214.7 L1016.52 1214.7 L1015.93 1214.7 L1015.35 1214.7 L1014.76 1214.7 L1014.17 1214.7 L1013.59 1214.7 L1013 1214.7 L1012.41 1214.7 L1011.83 1214.7 L1011.24 1214.7 L1010.65 1214.7 L1010.07 1214.7 L1009.48 1214.7 L1008.9 1214.7 L1008.31 1214.7 L1007.72 1214.7 L1007.14 1214.7 L1006.55 1214.7 L1005.96 1214.7 L1005.38 1214.7 L1004.79 1214.7 L1004.2 1214.7 L1003.62 1214.7 L1003.03 1214.7 L1002.44 1214.7 L1001.86 1214.7 L1001.27 1214.7 L1000.69 1214.7 L1000.1 1214.7 L999.513 1214.7 L998.926 1214.7 L998.34 1214.7 L997.754 1214.7 L997.167 1214.7 L996.581 1214.7 L995.994 1214.7 L995.408 1214.7 L994.822 1214.7 L994.235 1214.7 L993.649 1214.7 L993.062 1214.7 L992.476 1214.7 L991.889 1214.7 L991.303 1214.7 L990.717 1214.7 L990.13 1214.7 L989.544 1214.7 L988.957 1214.7 L988.371 1214.7 L987.785 1214.7 L987.198 1214.7 L986.612 1214.7 L986.025 1214.7  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.81 986.612,1214.81 987.198,1214.81 987.785,1214.81 988.371,1214.81 988.957,1214.81 989.544,1214.81 990.13,1214.81 990.717,1214.81 991.303,1214.81 991.889,1214.81 992.476,1214.81 993.062,1214.81 993.649,1214.81 994.235,1214.81 994.822,1214.81 995.408,1214.81 995.994,1214.81 996.581,1214.81 997.167,1214.81 997.754,1214.81 998.34,1214.81 998.926,1214.81 999.513,1214.81 1000.1,1214.81 1000.69,1214.81 1001.27,1214.81 1001.86,1214.81 1002.44,1214.81 1003.03,1214.81 1003.62,1214.81 1004.2,1214.81 1004.79,1214.81 1005.38,1214.81 1005.96,1214.81 1006.55,1214.81 1007.14,1214.81 1007.72,1214.81 1008.31,1214.81 1008.9,1214.81 1009.48,1214.81 1010.07,1214.81 1010.65,1214.81 1011.24,1214.81 1011.83,1214.81 1012.41,1214.81 1013,1214.81 1013.59,1214.81 1014.17,1214.81 1014.76,1214.81 1015.35,1214.81 1015.93,1214.81 1016.52,1214.81 1017.11,1214.81 1017.69,1214.81 1018.28,1214.81 1018.86,1214.81 1019.45,1214.81 1020.04,1214.81 1020.62,1214.81 1021.21,1214.81 1021.8,1214.81 1022.38,1214.81 1022.97,1214.81 1023.56,1214.81 1024.14,1214.81 1024.73,1214.81 1025.32,1214.81 1025.9,1214.81 1026.49,1214.81 1027.07,1214.81 1027.66,1214.81 1028.25,1214.81 1028.83,1214.81 1029.42,1214.81 1030.01,1214.81 1030.59,1214.81 1031.18,1214.81 1031.77,1214.81 1032.35,1214.81 1032.94,1214.81 1033.52,1214.81 1034.11,1214.81 1034.7,1214.81 1035.28,1214.81 1035.87,1214.81 1036.46,1214.81 1037.04,1214.81 1037.63,1214.81 1038.22,1214.81 1038.8,1214.81 1039.39,1214.81 1039.98,1214.81 1040.56,1214.81 1041.15,1214.81 1041.73,1214.81 1042.32,1214.81 1042.91,1214.81 1043.49,1214.81 1044.08,1214.81 1044.67,1214.81 1045.25,1214.81 1045.84,1214.81 1046.43,1214.81 1047.01,1214.81 1047.6,1214.81 1048.19,1214.81 1048.77,1214.81 1049.36,1214.81 1049.94,1214.81 1050.53,1214.81 1051.12,1214.81 1051.7,1214.81 1052.29,1214.81 1052.88,1214.81 1053.46,1214.81 1054.05,1214.81 1054.64,1214.81 1055.22,1214.81 1055.81,1214.81 1056.39,1214.81 1056.98,1214.81 1057.57,1214.81 1058.15,1214.81 1058.74,1214.81 1059.33,1214.81 1059.91,1214.81 1060.5,1214.81 1061.09,1214.81 1061.67,1214.81 1062.26,1214.81 1062.85,1214.81 1063.43,1214.81 1064.02,1214.81 1064.6,1214.81 1065.19,1214.81 1065.78,1214.81 1066.36,1214.81 1066.95,1214.81 1067.54,1214.81 1068.12,1214.81 1068.71,1214.81 1069.3,1214.81 1069.88,1214.81 1070.47,1214.81 1071.06,1214.81 1071.64,1214.81 1072.23,1214.81 1072.81,1214.81 1073.4,1214.81 1073.99,1214.81 1074.57,1214.81 1075.16,1214.81 1075.75,1214.81 1076.33,1214.81 1076.92,1214.81 1077.51,1214.81 1078.09,1214.81 1078.68,1214.81 1079.26,1214.81 1079.85,1214.81 1080.44,1214.81 1081.02,1214.81 1081.61,1214.81 1082.2,1214.81 1082.78,1214.81 1083.37,1214.81 1083.96,1214.81 1084.54,1214.81 1085.13,1214.81 1085.72,1214.81 1086.3,1214.81 1086.89,1214.81 1087.47,1214.81 1088.06,1214.81 1088.65,1214.81 1089.23,1214.81 1089.82,1214.81 1090.41,1214.81 1090.99,1214.81 1091.58,1214.81 1092.17,1214.81 1092.75,1214.81 1093.34,1214.81 1093.93,1214.81 1094.51,1214.81 1095.1,1214.81 1095.68,1214.81 1096.27,1214.81 1096.86,1214.81 1097.44,1214.81 1098.03,1214.81 1098.62,1214.81 1099.2,1214.81 1099.79,1214.81 1100.38,1214.81 1100.96,1214.81 1101.55,1214.81 1102.14,1214.81 1102.72,1214.81 1103.31,1214.81 1103.89,1214.81 1104.48,1214.81 1105.07,1214.81 1105.65,1214.81 1106.24,1214.81 1106.83,1214.81 1107.41,1214.81 1108,1214.81 1108.59,1214.81 1109.17,1214.81 1109.76,1214.81 1110.34,1214.81 1110.93,1214.81 1111.52,1214.81 1112.1,1214.81 1112.69,1214.81 1113.28,1214.81 1113.86,1214.81 1114.45,1214.81 1115.04,1214.81 1115.62,1214.81 1116.21,1214.81 1116.8,1214.81 1117.38,1214.81 1117.97,1214.81 1118.55,1214.81 1119.14,1214.81 1119.73,1214.81 1120.31,1214.81 1120.9,1214.81 1121.49,1214.81 1122.07,1214.81 1122.66,1214.81 1123.25,1214.81 1123.83,1214.81 1124.42,1214.81 1125.01,1214.81 1125.59,1214.81 1126.18,1214.81 1126.76,1214.81 1127.35,1214.81 1127.94,1214.81 1128.52,1214.81 1129.11,1214.81 1129.7,1214.81 1130.28,1214.81 1130.87,1214.81 1131.46,1214.81 1132.04,1214.81 1132.63,1214.81 1133.21,1214.81 1133.8,1214.81 1134.39,1214.81 1134.97,1214.81 1135.56,1214.81 1136.15,1214.81 1136.73,1214.81 1137.32,1214.81 1137.91,1214.81 1138.49,1214.81 1139.08,1214.81 1139.67,1214.81 1140.25,1214.81 1140.84,1214.81 1141.42,1214.81 1142.01,1214.81 1142.6,1214.81 1143.18,1214.81 1143.77,1214.81 1144.36,1214.81 1144.94,1214.81 1145.53,1214.81 1146.12,1214.81 1146.7,1214.81 1147.29,1214.81 1147.88,1214.81 1148.46,1214.81 1149.05,1214.81 1149.63,1214.81 1150.22,1214.81 1150.81,1214.81 1151.39,1214.81 1151.98,1214.81 1152.57,1214.81 1153.15,1214.81 1153.74,1214.81 1154.33,1214.81 1154.91,1214.81 1155.5,1214.81 1156.09,1214.81 1156.67,1214.81 1157.26,1214.81 1157.84,1214.81 1158.43,1214.81 1159.02,1214.81 1159.6,1214.81 1160.19,1214.81 1160.78,1214.81 1161.36,1214.81 1161.95,1214.81 1162.54,1214.81 1163.12,1214.81 1163.71,1214.81 1164.29,1214.81 1164.88,1214.81 1165.47,1214.81 1166.05,1214.81 1166.64,1214.81 1167.23,1214.81 1167.81,1214.81 1168.4,1214.81 1168.99,1214.81 1169.57,1214.81 1170.16,1214.81 1170.75,1214.81 1171.33,1214.81 1171.92,1214.81 1172.5,1214.81 1173.09,1214.81 1173.68,1214.81 1174.26,1214.81 1174.85,1214.81 1175.44,1214.81 1176.02,1214.81 1176.61,1214.81 1177.2,1214.81 1177.78,1214.81 1178.37,1214.81 1178.96,1214.81 1179.54,1214.81 1180.13,1214.81 1180.71,1214.81 1181.3,1214.81 1181.89,1214.81 1182.47,1214.81 1183.06,1214.81 1183.65,1214.81 1184.23,1214.81 1184.82,1214.81 1185.41,1214.81 1185.99,1214.81 1186.58,1214.81 1187.16,1214.81 1187.75,1214.81 1188.34,1214.81 1188.92,1214.81 1189.51,1214.81 1190.1,1214.81 1190.68,1214.81 1191.27,1214.81 1191.86,1214.81 1192.44,1214.81 1193.03,1214.81 1193.62,1214.81 1194.2,1214.81 1194.79,1214.81 1195.37,1214.81 1195.96,1214.81 1196.55,1214.81 1197.13,1214.81 1197.72,1214.81 1198.31,1214.81 1198.89,1214.81 1199.48,1214.81 1200.07,1214.81 1200.65,1214.81 1201.24,1214.81 1201.83,1214.81 1202.41,1214.81 1203,1214.81 1203.58,1214.81 1204.17,1214.81 1204.76,1214.81 1205.34,1214.81 1205.93,1214.81 1206.52,1214.81 1207.1,1214.81 1207.69,1214.81 1208.28,1214.81 1208.86,1214.81 1209.45,1214.81 1210.03,1214.81 1210.62,1214.81 1211.21,1214.81 1211.79,1214.81 1212.38,1214.81 1212.97,1214.81 1213.55,1214.81 1214.14,1214.81 1214.73,1214.81 1215.31,1214.81 1215.9,1214.81 1216.49,1214.81 1217.07,1214.81 1217.66,1214.81 1218.24,1214.81 1218.83,1214.81 1219.42,1214.81 1220,1214.81 1220.59,1214.81 1221.18,1214.81 1221.76,1214.81 1222.35,1214.81 1222.94,1214.81 1223.52,1214.81 1224.11,1214.81 1224.7,1214.81 1225.28,1214.81 1225.87,1214.81 1226.45,1214.81 1227.04,1214.81 1227.63,1214.81 1228.21,1214.81 1228.8,1214.81 1229.39,1214.81 1229.97,1214.81 1230.56,1214.81 1231.15,1214.81 1231.73,1214.81 1232.32,1214.81 1232.91,1214.81 1233.49,1214.81 1234.08,1214.81 1234.66,1214.81 1235.25,1214.81 1235.84,1214.81 1236.42,1214.81 1237.01,1214.81 1237.6,1214.81 1238.18,1214.81 1238.77,1214.81 1239.36,1214.81 1239.94,1214.81 1240.53,1214.81 1241.11,1214.81 1241.7,1214.81 1242.29,1214.81 1242.87,1214.81 1243.46,1214.81 1244.05,1214.81 1244.63,1214.81 1245.22,1214.81 1245.81,1214.81 1246.39,1214.81 1246.98,1214.81 1247.57,1214.81 1248.15,1214.81 1248.74,1214.81 1249.32,1214.81 1249.91,1214.81 1250.5,1214.81 1251.08,1214.81 1251.67,1214.81 1252.26,1214.81 1252.84,1214.81 1253.43,1214.81 1254.02,1214.81 1254.6,1214.81 1255.19,1214.81 1255.78,1214.81 1256.36,1214.81 1256.95,1214.81 1257.53,1214.81 1258.12,1214.81 1258.71,1214.81 1259.29,1214.81 1259.88,1214.81 1260.47,1214.81 1261.05,1214.81 1261.64,1214.81 1262.23,1214.81 1262.81,1214.81 1263.4,1214.81 1263.98,1214.81 1264.57,1214.81 1265.16,1214.81 1265.74,1214.81 1266.33,1214.81 1266.92,1214.81 1267.5,1214.81 1268.09,1214.81 1268.68,1214.81 1269.26,1214.81 1269.85,1214.81 1270.44,1214.81 1271.02,1214.81 1271.61,1214.81 1272.19,1214.81 1272.78,1214.81 1273.37,1214.81 1273.95,1214.81 1274.54,1214.81 1275.13,1214.81 1275.71,1214.81 1276.3,1214.81 1276.89,1214.81 1277.47,1214.81 1278.06,1214.81 1278.65,1214.81 1279.23,1214.81 1279.82,1214.81 1280.4,1214.81 1280.99,1214.81 1281.58,1214.81 1282.16,1214.81 1282.75,1214.81 1283.34,1214.81 1283.92,1214.81 1284.51,1214.81 1285.1,1214.81 1285.68,1214.81 1286.27,1214.81 1286.86,1214.81 1287.44,1214.81 1288.03,1214.81 1288.61,1214.81 1289.2,1214.81 1289.79,1214.81 1290.37,1214.81 1290.96,1214.81 1291.55,1214.81 1292.13,1214.81 1292.72,1214.81 1293.31,1214.81 1293.89,1214.81 1294.48,1214.81 1295.06,1214.81 1295.65,1214.81 1296.24,1214.81 1296.82,1214.81 1297.41,1214.81 1298,1214.81 1298.58,1214.81 1299.17,1214.81 1299.76,1214.81 1300.34,1214.81 1300.93,1214.81 1301.52,1214.81 1302.1,1214.81 1302.69,1214.81 1303.27,1214.81 1303.86,1214.81 1304.45,1214.81 1305.03,1214.81 1305.62,1214.81 1306.21,1214.81 1306.79,1214.81 1307.38,1214.81 1307.97,1214.81 1308.55,1214.81 1309.14,1214.81 1309.73,1214.81 1310.31,1214.81 1310.9,1214.81 1311.48,1214.81 1312.07,1214.81 1312.66,1214.81 1313.24,1214.81 1313.83,1214.81 1314.42,1214.81 1315,1214.81 1315.59,1214.81 1316.18,1214.81 1316.76,1214.81 1317.35,1214.81 1317.93,1214.81 1318.52,1214.81 1319.11,1214.81 1319.69,1214.81 1320.28,1214.81 1320.87,1214.81 1321.45,1214.81 1322.04,1214.81 1322.63,1214.81 1323.21,1214.81 1323.8,1214.81 1324.39,1214.81 1324.97,1214.81 1325.56,1214.81 1326.14,1214.81 1326.73,1214.81 1327.32,1214.81 1327.9,1214.81 1328.49,1214.81 1329.08,1214.81 1329.66,1214.81 1330.25,1214.81 1330.84,1214.81 1331.42,1214.81 1332.01,1214.81 1332.6,1214.81 1333.18,1214.81 1333.77,1214.81 1334.35,1214.81 1334.94,1214.81 1335.53,1214.81 1336.11,1214.81 1336.7,1214.81 1337.29,1214.81 1337.87,1214.81 1338.46,1214.81 1339.05,1214.81 1339.63,1214.81 1340.22,1214.81 1340.8,1214.81 1341.39,1214.81 1341.98,1214.81 1342.56,1214.81 1343.15,1214.81 1343.74,1214.81 1344.32,1214.81 1344.91,1214.81 1345.5,1214.81 1346.08,1214.81 1346.67,1214.81 1347.26,1214.81 1347.84,1214.81 1348.43,1214.81 1349.01,1214.81 1349.6,1214.81 1350.19,1214.81 1350.77,1214.81 1351.36,1214.81 1351.95,1214.81 1352.53,1214.81 1353.12,1214.81 1353.71,1214.81 1354.29,1214.81 1354.88,1214.81 1355.47,1214.81 1356.05,1214.81 1356.64,1214.81 1357.22,1214.81 1357.81,1214.81 1358.4,1214.81 1358.98,1214.81 1359.57,1214.81 1360.16,1214.81 1360.74,1214.81 1361.33,1214.81 1361.92,1214.81 1362.5,1214.81 1363.09,1214.81 1363.68,1214.81 1364.26,1214.81 1364.85,1214.81 1365.43,1214.81 1366.02,1214.81 1366.61,1214.81 1367.19,1214.81 1367.78,1214.81 1368.37,1214.81 1368.95,1214.81 1369.54,1214.81 1370.13,1214.81 1370.71,1214.81 1371.3,1214.81 1371.88,1214.81 1372.47,1214.81 1373.06,1214.81 1373.64,1214.81 1374.23,1214.81 1374.82,1214.81 1375.4,1214.81 1375.99,1214.81 1376.58,1214.81 1377.16,1214.81 1377.75,1214.81 1378.34,1214.81 1378.92,1214.81 1379.51,1214.81 1380.09,1214.81 1380.68,1214.81 1381.27,1214.81 1381.85,1214.81 1382.44,1214.81 1383.03,1214.81 1383.61,1214.81 1384.2,1214.81 1384.79,1214.81 1385.37,1214.81 1385.96,1214.81 1386.55,1214.81 1387.13,1214.81 1387.72,1214.81 1388.3,1214.81 1388.89,1214.81 1389.48,1214.81 1390.06,1214.81 1390.65,1214.81 1391.24,1214.81 1391.82,1214.81 1392.41,1214.81 1393,1214.81 1393.58,1214.81 1394.17,1214.81 1394.75,1214.81 1395.34,1214.81 1395.93,1214.81 1396.51,1214.81 1397.1,1214.81 1397.69,1214.81 1398.27,1214.81 1398.86,1214.81 1399.45,1214.81 1400.03,1214.81 1400.62,1214.81 1401.21,1214.81 1401.79,1214.81 1402.38,1214.81 1402.96,1214.81 1403.55,1214.81 1404.14,1214.81 1404.72,1214.81 1405.31,1214.81 1405.9,1214.81 1406.48,1214.81 1407.07,1214.81 1407.66,1214.81 1408.24,1214.81 1408.83,1214.81 1409.42,1214.81 1410,1214.81 1410.59,1214.81 1411.17,1214.81 1411.76,1214.81 1412.35,1214.81 1412.93,1214.81 1413.52,1214.81 1414.11,1214.81 1414.69,1214.81 1415.28,1214.81 1415.87,1214.81 1416.45,1214.81 1417.04,1214.81 1417.63,1214.81 1418.21,1214.81 1418.8,1214.81 1419.38,1214.81 1419.97,1214.81 1420.56,1214.81 1421.14,1214.81 1421.73,1214.81 1422.32,1214.81 1422.9,1214.81 1423.49,1214.81 1424.08,1214.81 1424.66,1214.81 1425.25,1214.81 1425.83,1214.81 1426.42,1214.81 1427.01,1214.81 1427.59,1214.81 1428.18,1214.81 1428.77,1214.81 1429.35,1214.81 1429.94,1214.81 1430.53,1214.81 1431.11,1214.81 1431.7,1214.81 1432.29,1214.81 1432.87,1214.81 1433.46,1214.81 1434.04,1214.81 1434.63,1214.81 1435.22,1214.81 1435.8,1214.81 1436.39,1214.81 1436.98,1214.81 1437.56,1214.81 1438.15,1214.81 1438.74,1214.81 1439.32,1214.81 1439.91,1214.81 1440.5,1214.81 1441.08,1214.81 1441.67,1214.81 1442.25,1214.81 1442.84,1214.81 1443.43,1214.81 1444.01,1214.81 1444.6,1214.81 1445.19,1214.81 1445.77,1214.81 1446.36,1214.81 1446.95,1214.81 1447.53,1214.81 1448.12,1214.81 1448.7,1214.81 1449.29,1214.81 1449.88,1214.81 1450.46,1214.81 1451.05,1214.81 1451.64,1214.81 1452.22,1214.81 1452.81,1214.81 1453.4,1214.81 1453.98,1214.81 1454.57,1214.81 1455.16,1214.81 1455.74,1214.81 1456.33,1214.81 1456.91,1214.81 1457.5,1214.81 1458.09,1214.81 1458.67,1214.81 1459.26,1214.81 1459.85,1214.81 1460.43,1214.81 1461.02,1214.81 1461.61,1214.81 1462.19,1214.81 1462.78,1214.81 1463.37,1214.81 1463.95,1214.81 1464.54,1214.81 1465.12,1214.81 1465.71,1214.81 1466.3,1214.81 1466.88,1214.81 1467.47,1214.81 1468.06,1214.81 1468.64,1214.81 1469.23,1214.81 1469.82,1214.81 1470.4,1214.81 1470.99,1214.81 1471.57,1214.81 1472.16,1214.81 1472.75,1214.81 1473.33,1214.81 1473.92,1214.81 1474.51,1214.81 1475.09,1214.81 1475.68,1214.81 1476.27,1214.81 1476.85,1214.81 1477.44,1214.81 1478.03,1214.81 1478.61,1214.81 1479.2,1214.81 1479.78,1214.81 1480.37,1214.81 1480.96,1214.81 1481.54,1214.81 1482.13,1214.81 1482.72,1214.81 1483.3,1214.81 1483.89,1214.81 1484.48,1214.81 1485.06,1214.81 1485.65,1214.81 1486.24,1214.81 1486.82,1214.81 1487.41,1214.81 1487.99,1214.81 1488.58,1214.81 1489.17,1214.81 1489.75,1214.81 1490.34,1214.81 1490.93,1214.81 1491.51,1214.81 1492.1,1214.81 1492.69,1214.81 1493.27,1214.81 1493.86,1214.81 1494.45,1214.81 1495.03,1214.81 1495.62,1214.81 1496.2,1214.81 1496.79,1214.81 1497.38,1214.81 1497.96,1214.81 1498.55,1214.81 1499.14,1214.81 1499.72,1214.81 1500.31,1214.81 1500.9,1214.81 1501.48,1214.81 1502.07,1214.81 1502.65,1214.81 1503.24,1214.81 1503.83,1214.81 1504.41,1214.81 1505,1214.81 1505.59,1214.81 1506.17,1214.81 1506.76,1214.81 1507.35,1214.81 1507.93,1214.81 1508.52,1214.81 1509.11,1214.81 1509.69,1214.81 1510.28,1214.81 1510.86,1214.81 1511.45,1214.81 1512.04,1214.81 1512.62,1214.81 1513.21,1214.81 1513.8,1214.81 1514.38,1214.81 1514.97,1214.81 1515.56,1214.81 1516.14,1214.81 1516.73,1214.81 1517.32,1214.81 1517.9,1214.81 1518.49,1214.81 1519.07,1214.81 1519.66,1214.81 1520.25,1214.81 1520.83,1214.81 1521.42,1214.81 1522.01,1214.81 1522.59,1214.81 1523.18,1214.81 1523.77,1214.81 1524.35,1214.81 1524.94,1214.81 1525.52,1214.81 1526.11,1214.81 1526.7,1214.81 1527.28,1214.81 1527.87,1214.81 1528.46,1214.81 1529.04,1214.81 1529.63,1214.81 1530.22,1214.81 1530.8,1214.81 1531.39,1214.81 1531.98,1214.81 1532.56,1214.81 1533.15,1214.81 1533.73,1214.81 1534.32,1214.81 1534.91,1214.81 1535.49,1214.81 1536.08,1214.81 1536.67,1214.81 1537.25,1214.81 1537.84,1214.81 1538.43,1214.81 1539.01,1214.81 1539.6,1214.81 1540.19,1214.81 1540.77,1214.81 1541.36,1214.81 1541.94,1214.81 1542.53,1214.81 1543.12,1214.81 1543.7,1214.81 1544.29,1214.81 1544.88,1214.81 1545.46,1214.81 1546.05,1214.81 1546.64,1214.81 1547.22,1214.81 1547.81,1214.81 1548.4,1214.81 1548.98,1214.81 1549.57,1214.81 1550.15,1214.81 1550.74,1214.81 1551.33,1214.81 1551.91,1214.81 1552.5,1214.81 1553.09,1214.81 1553.67,1214.81 1554.26,1214.81 1554.85,1214.81 1555.43,1214.81 1556.02,1214.81 1556.6,1214.81 1557.19,1214.81 1557.78,1214.81 1558.36,1214.81 1558.95,1214.81 1559.54,1214.81 1560.12,1214.81 1560.71,1214.81 1561.3,1214.81 1561.88,1214.81 1562.47,1214.81 1563.06,1214.81 1563.64,1214.81 1564.23,1214.81 1564.81,1214.81 1565.4,1214.81 1565.99,1214.81 1566.57,1214.81 1567.16,1214.81 1567.75,1214.81 1568.33,1214.81 1568.92,1214.81 1569.51,1214.81 1570.09,1214.81 1570.68,1214.81 1571.27,1214.81 1571.85,1214.81 1572.44,1214.81 1573.02,1214.81 1573.61,1214.81 1574.2,1214.81 1574.78,1214.81 1575.37,1214.81 1575.96,1214.81 1576.54,1214.81 1577.13,1214.81 1577.72,1214.81 1578.3,1214.81 1578.89,1214.81 1579.47,1214.81 1580.06,1214.81 1580.65,1214.81 1581.23,1214.81 1581.82,1214.81 1582.41,1214.81 1582.99,1214.81 1583.58,1214.81 1584.17,1214.81 1584.75,1214.81 1585.34,1214.81 1585.93,1214.81 1586.51,1214.81 1587.1,1214.81 1587.68,1214.81 1588.27,1214.81 1588.86,1214.81 1589.44,1214.81 1590.03,1214.81 1590.62,1214.81 1591.2,1214.81 1591.79,1214.81 1592.38,1214.81 1592.96,1214.81 1593.55,1214.81 1594.14,1214.81 1594.72,1214.81 1595.31,1214.81 1595.89,1214.81 1596.48,1214.81 1597.07,1214.81 1597.65,1214.81 1598.24,1214.81 1598.83,1214.81 1599.41,1214.81 1600,1214.81 1600.59,1214.81 1601.17,1214.81 1601.76,1214.81 1602.34,1214.81 1602.93,1214.81 1603.52,1214.81 1604.1,1214.81 1604.69,1214.81 1605.28,1214.81 1605.86,1214.81 1606.45,1214.81 1607.04,1214.81 1607.62,1214.81 1608.21,1214.81 1608.8,1214.81 1609.38,1214.81 1609.97,1214.81 1610.55,1214.81 1611.14,1214.81 1611.73,1214.81 1612.31,1214.81 1612.9,1214.81 1613.49,1214.81 1614.07,1214.81 1614.66,1214.81 1615.25,1214.81 1615.83,1214.81 1616.42,1214.81 1617.01,1214.81 1617.59,1214.81 1618.18,1214.81 1618.76,1214.81 1619.35,1214.81 1619.94,1214.81 1620.52,1214.81 1621.11,1214.81 1621.7,1214.81 1622.28,1214.81 1622.87,1214.81 1623.46,1214.81 1624.04,1214.81 1624.63,1214.81 1625.22,1214.81 1625.8,1214.81 1626.39,1214.81 1626.97,1214.81 1627.56,1214.81 1628.15,1214.81 1628.73,1214.81 1629.32,1214.81 1629.91,1214.81 1630.49,1214.81 1631.08,1214.81 1631.67,1214.81 1632.25,1214.81 1632.84,1214.81 1633.42,1214.81 1634.01,1214.81 1634.6,1214.81 1635.18,1214.81 1635.77,1214.81 1636.36,1214.81 1636.94,1214.81 1637.53,1214.81 1638.12,1214.81 1638.7,1214.81 1639.29,1214.81 1639.88,1214.81 1640.46,1214.81 1641.05,1214.81 1641.63,1214.81 1642.22,1214.81 1642.81,1214.81 1643.39,1214.81 1643.98,1214.81 1644.57,1214.81 1645.15,1214.81 1645.74,1214.81 1646.33,1214.81 1646.91,1214.81 1647.5,1214.81 1648.09,1214.81 1648.67,1214.81 1649.26,1214.81 1649.84,1214.81 1650.43,1214.81 1651.02,1214.81 1651.6,1214.81 1652.19,1214.81 1652.78,1214.81 1653.36,1214.81 1653.95,1214.81 1654.54,1214.81 1655.12,1214.81 1655.71,1214.81 1656.29,1214.81 1656.88,1214.81 1657.47,1214.81 1658.05,1214.81 1658.64,1214.81 1659.23,1214.81 1659.81,1214.81 1660.4,1214.81 1660.99,1214.81 1661.57,1214.81 1662.16,1214.81 1662.75,1214.81 1663.33,1214.81 1663.92,1214.81 1664.5,1214.81 1665.09,1214.81 1665.68,1214.81 1666.26,1214.81 1666.85,1214.81 1667.44,1214.81 1668.02,1214.81 1668.61,1214.81 1669.2,1214.81 1669.78,1214.81 1670.37,1214.81 1670.96,1214.81 1671.54,1214.81 1672.13,1214.81 1672.71,1214.81 1673.3,1214.81 1673.89,1214.81 1674.47,1214.81 1675.06,1214.81 1675.65,1214.81 1676.23,1214.81 1676.82,1214.81 1677.41,1214.81 1677.99,1214.81 1678.58,1214.81 1679.17,1214.81 1679.75,1214.81 1680.34,1214.81 1680.92,1214.81 1681.51,1214.81 1682.1,1214.81 1682.68,1214.81 1683.27,1214.81 1683.86,1214.81 1684.44,1214.81 1685.03,1214.81 1685.62,1214.81 1686.2,1214.81 1686.79,1214.81 1687.37,1214.81 1687.96,1214.81 1688.55,1214.81 1689.13,1214.81 1689.72,1214.81 1690.31,1214.81 1690.89,1214.81 1691.48,1214.81 1692.07,1214.81 1692.65,1214.81 1693.24,1214.81 1693.83,1214.81 1694.41,1214.81 1695,1214.81 1695.58,1214.81 1696.17,1214.81 1696.76,1214.81 1697.34,1214.81 1697.93,1214.81 1698.52,1214.81 1699.1,1214.81 1699.69,1214.81 1700.28,1214.81 1700.86,1214.81 1701.45,1214.81 1702.04,1214.81 1702.62,1214.81 1703.21,1214.81 1703.79,1214.81 1704.38,1214.81 1704.97,1214.81 1705.55,1214.81 1706.14,1214.81 1706.73,1214.81 1707.31,1214.81 1707.9,1214.81 1708.49,1214.81 1709.07,1214.81 1709.66,1214.81 1710.24,1214.81 1710.83,1214.81 1711.42,1214.81 1712,1214.81 1712.59,1214.81 1713.18,1214.81 1713.76,1214.81 1714.35,1214.81 1714.94,1214.81 1715.52,1214.81 1716.11,1214.81 1716.7,1214.81 1717.28,1214.81 1717.87,1214.81 1718.45,1214.81 1719.04,1214.81 1719.63,1214.81 1720.21,1214.81 1720.8,1214.81 1721.39,1214.81 1721.97,1214.81 1722.56,1214.81 1723.15,1214.81 1723.73,1214.81 1724.32,1214.81 1724.91,1214.81 1725.49,1214.81 1726.08,1214.81 1726.66,1214.81 1727.25,1214.81 1727.84,1214.81 1728.42,1214.81 1729.01,1214.81 1729.6,1214.81 1730.18,1214.81 1730.77,1214.81 1731.36,1214.81 1731.94,1214.81 1732.53,1214.81 1733.11,1214.81 1733.7,1214.81 1734.29,1214.81 1734.87,1214.81 1735.46,1214.81 1736.05,1214.81 1736.63,1214.81 1737.22,1214.81 1737.81,1214.81 1738.39,1214.81 1738.98,1214.81 1739.57,1214.81 1740.15,1214.81 1740.74,1214.81 1741.32,1214.81 1741.91,1214.81 1742.5,1214.81 1743.08,1214.81 1743.67,1214.81 1744.26,1214.81 1744.84,1214.81 1745.43,1214.81 1746.02,1214.81 1746.6,1214.81 1747.19,1214.81 1747.78,1214.81 1748.36,1214.81 1748.95,1214.81 1749.53,1214.81 1750.12,1214.81 1750.71,1214.81 1751.29,1214.81 1751.88,1214.81 1752.47,1214.81 1753.05,1214.81 1753.64,1214.81 1754.23,1214.81 1754.81,1214.81 1755.4,1214.81 1755.99,1214.81 1756.57,1214.81 1757.16,1214.81 1757.74,1214.81 1758.33,1214.81 1758.92,1214.81 1759.5,1214.81 1760.09,1214.81 1760.68,1214.81 1761.26,1214.81 1761.85,1214.81 1762.44,1214.81 1763.02,1214.81 1763.61,1214.81 1764.19,1214.81 1764.78,1214.81 1765.37,1214.81 1765.95,1214.81 1766.54,1214.81 1767.13,1214.81 1767.71,1214.81 1768.3,1214.81 1768.89,1214.81 1769.47,1214.81 1770.06,1214.81 1770.65,1214.81 1771.23,1214.81 1771.82,1214.81 1772.4,1214.81 1772.99,1214.81 1773.58,1214.81 1774.16,1214.81 1774.75,1214.81 1775.34,1214.81 1775.92,1214.81 1776.51,1214.81 1777.1,1214.81 1777.68,1214.81 1778.27,1214.81 1778.86,1214.81 1779.44,1214.81 1780.03,1214.81 1780.61,1214.81 1781.2,1214.81 1781.79,1214.81 1782.37,1214.81 1782.96,1214.81 1783.55,1214.81 1784.13,1214.81 1784.72,1214.81 1785.31,1214.81 1785.89,1214.81 1786.48,1214.81 1787.06,1214.81 1787.65,1214.81 1788.24,1214.81 1788.82,1214.81 1789.41,1214.81 1790,1214.81 1790.58,1214.81 1791.17,1214.81 1791.76,1214.81 1792.34,1214.81 1792.93,1214.81 1793.52,1214.81 1794.1,1214.81 1794.69,1214.81 1795.27,1214.81 1795.86,1214.81 1796.45,1214.81 1797.03,1214.81 1797.62,1214.81 1798.21,1214.81 1798.79,1214.81 1799.38,1214.81 1799.97,1214.81 1800.55,1214.81 1801.14,1214.81 1801.73,1214.81 1802.31,1214.81 1802.9,1214.81 1803.48,1214.81 1804.07,1214.81 1804.66,1214.81 1805.24,1214.81 1805.83,1214.81 1806.42,1214.81 1807,1214.81 1807.59,1214.81 1808.18,1214.81 1808.76,1214.81 1809.35,1214.81 1809.94,1214.81 1810.52,1214.81 1811.11,1214.81 1811.69,1214.81 1812.28,1214.81 1812.87,1214.81 1813.45,1214.81 1814.04,1214.81 1814.63,1214.81 1815.21,1214.81 1815.8,1214.81 1816.39,1214.81 1816.97,1214.81 1817.56,1214.81 1818.14,1214.81 1818.73,1214.81 1819.32,1214.81 1819.9,1214.81 1820.49,1214.81 1821.08,1214.81 1821.66,1214.81 1822.25,1214.81 1822.84,1214.81 1823.42,1214.81 1824.01,1214.81 1824.6,1214.81 1825.18,1214.81 1825.77,1214.81 1826.35,1214.81 1826.94,1214.81 1827.53,1214.81 1828.11,1214.81 1828.7,1214.81 1829.29,1214.81 1829.87,1214.81 1830.46,1214.81 1831.05,1214.81 1831.63,1214.81 1832.22,1214.81 1832.81,1214.81 1833.39,1214.81 1833.98,1214.81 1834.56,1214.81 1835.15,1214.81 1835.74,1214.81 1836.32,1214.81 1836.91,1214.81 1837.5,1214.81 1838.08,1214.81 1838.67,1214.81 1839.26,1214.81 1839.84,1214.81 1840.43,1214.81 1841.01,1214.81 1841.6,1214.81 1842.19,1214.81 1842.77,1214.81 1843.36,1214.81 1843.95,1214.81 1844.53,1214.81 1845.12,1214.81 1845.71,1214.81 1846.29,1214.81 1846.88,1214.81 1847.47,1214.81 1848.05,1214.81 1848.64,1214.81 1849.22,1214.81 1849.81,1214.81 1850.4,1214.81 1850.98,1214.81 1851.57,1214.81 1852.16,1214.81 1852.74,1214.81 1853.33,1214.81 1853.92,1214.81 1854.5,1214.81 1855.09,1214.81 1855.68,1214.81 1856.26,1214.81 1856.85,1214.81 1857.43,1214.81 1858.02,1214.81 1858.61,1214.81 1859.19,1214.81 1859.78,1214.81 1860.37,1214.81 1860.95,1214.81 1861.54,1214.81 1862.13,1214.81 1862.71,1214.81 1863.3,1214.81 1863.88,1214.81 1864.47,1214.81 1865.06,1214.81 1865.64,1214.81 1866.23,1214.81 1866.82,1214.81 1867.4,1214.81 1867.99,1214.81 1868.58,1214.81 1869.16,1214.81 1869.75,1214.81 1870.34,1214.81 1870.92,1214.81 1871.51,1214.81 1872.09,1214.81 1872.68,1214.81 1873.27,1214.81 1873.85,1214.81 1874.44,1214.81 1875.03,1214.81 1875.61,1214.81 1876.2,1214.81 1876.79,1214.81 1877.37,1214.81 1877.96,1214.81 1878.55,1214.81 1879.13,1214.81 1879.72,1214.81 1880.3,1214.81 1880.89,1214.81 1881.48,1214.81 1882.06,1214.81 1882.65,1214.81 1883.24,1214.81 1883.82,1214.81 1884.41,1214.81 1885,1214.81 1885.58,1214.81 1886.17,1214.81 1886.76,1214.81 1887.34,1214.81 1887.93,1214.81 1888.51,1214.81 1889.1,1214.81 1889.69,1214.81 1890.27,1214.81 1890.86,1214.81 1891.45,1214.81 1892.03,1214.81 1892.62,1214.81 1893.21,1214.81 1893.79,1214.81 1894.38,1214.81 1894.96,1214.81 1895.55,1214.81 1896.14,1214.81 1896.72,1214.81 1897.31,1214.81 1897.9,1214.81 1898.48,1214.81 1899.07,1214.81 1899.66,1214.81 1900.24,1214.81 1900.83,1214.81 1901.42,1214.81 1902,1214.81 1902.59,1214.81 1903.17,1214.81 1903.76,1214.81 1904.35,1214.81 1904.93,1214.81 1905.52,1214.81 1906.11,1214.81 1906.69,1214.81 1907.28,1214.81 1907.87,1214.81 1908.45,1214.81 1909.04,1214.81 1909.63,1214.81 1910.21,1214.81 1910.8,1214.81 1911.38,1214.81 1911.97,1214.81 1912.56,1214.81 1913.14,1214.81 1913.73,1214.81 1914.32,1214.81 1914.9,1214.81 1915.49,1214.81 1916.08,1214.81 1916.66,1214.81 1917.25,1214.81 1917.83,1214.81 1918.42,1214.81 1919.01,1214.81 1919.59,1214.81 1920.18,1214.81 1920.77,1214.81 1921.35,1214.81 1921.94,1214.81 1922.53,1214.81 1923.11,1214.81 1923.7,1214.81 1924.29,1214.81 1924.87,1214.81 1925.46,1214.81 1926.04,1214.81 1926.63,1214.81 1927.22,1214.81 1927.8,1214.81 1928.39,1214.81 1928.98,1214.81 1929.56,1214.81 1930.15,1214.81 1930.74,1214.81 1931.32,1214.81 1931.91,1214.81 1932.5,1214.81 1933.08,1214.81 1933.67,1214.81 1934.25,1214.81 1934.84,1214.81 1935.43,1214.81 1936.01,1214.81 1936.6,1214.81 1937.19,1214.81 1937.77,1214.81 1938.36,1214.81 1938.95,1214.81 1939.53,1214.81 1940.12,1214.81 1940.71,1214.81 1941.29,1214.81 1941.88,1214.81 1942.46,1214.81 1943.05,1214.81 1943.64,1214.81 1944.22,1214.81 1944.81,1214.81 1945.4,1214.81 1945.98,1214.81 1946.57,1214.81 1947.16,1214.81 1947.74,1214.81 1948.33,1214.81 1948.91,1214.81 1949.5,1214.81 1950.09,1214.81 1950.67,1214.81 1951.26,1214.81 1951.85,1214.81 1952.43,1214.81 1953.02,1214.81 1953.61,1214.81 1954.19,1214.81 1954.78,1214.81 1955.37,1214.81 1955.95,1214.81 1956.54,1214.81 1957.12,1214.81 1957.71,1214.81 1958.3,1214.81 1958.88,1214.81 1959.47,1214.81 1960.06,1214.81 1960.64,1214.81 1961.23,1214.81 1961.82,1214.81 1962.4,1214.81 1962.99,1214.81 1963.58,1214.81 1964.16,1214.81 1964.75,1214.81 1965.33,1214.81 1965.92,1214.81 1966.51,1214.81 1967.09,1214.81 1967.68,1214.81 1968.27,1214.81 1968.85,1214.81 1969.44,1214.81 1970.03,1214.81 1970.61,1214.81 1971.2,1214.81 1971.78,1214.81 1972.37,1214.81 1972.96,1214.81 1973.54,1214.81 1974.13,1214.81 1974.72,1214.81 1975.3,1214.81 1975.89,1214.81 1976.48,1214.81 1977.06,1214.81 1977.65,1214.81 1978.24,1214.81 1978.82,1214.81 1979.41,1214.81 1979.99,1214.81 1980.58,1214.81 1981.17,1214.81 1981.75,1214.81 1982.34,1214.81 1982.93,1214.81 1983.51,1214.81 1984.1,1214.81 1984.69,1214.81 1985.27,1214.81 1985.86,1214.81 1986.45,1214.81 1987.03,1214.81 1987.62,1214.81 1988.2,1214.81 1988.79,1214.81 1989.38,1214.81 1989.96,1214.81 1990.55,1214.81 1991.14,1214.81 1991.72,1214.81 1992.31,1214.81 1992.9,1214.81 1993.48,1214.81 1994.07,1214.81 1994.65,1214.81 1995.24,1214.81 1995.83,1214.81 1996.41,1214.81 1997,1214.81 1997.59,1214.81 1998.17,1214.81 1998.76,1214.81 1999.35,1214.81 1999.93,1214.81 2000.52,1214.81 2001.11,1214.81 2001.69,1214.81 2002.28,1214.81 2002.86,1214.81 2003.45,1214.81 2004.04,1214.81 2004.62,1214.81 2005.21,1214.81 2005.8,1214.81 2006.38,1214.81 2006.97,1214.81 2007.56,1214.81 2008.14,1214.81 2008.73,1214.81 2009.32,1214.81 2009.9,1214.81 2010.49,1214.81 2011.07,1214.81 2011.66,1214.81 2012.25,1214.81 2012.83,1214.81 2013.42,1214.81 2014.01,1214.81 2014.59,1214.81 2015.18,1214.81 2015.77,1214.81 2016.35,1214.81 2016.94,1214.81 2017.53,1214.81 2018.11,1214.81 2018.7,1214.81 2019.28,1214.81 2019.87,1214.81 2020.46,1214.81 2021.04,1214.81 2021.63,1214.81 2022.22,1214.81 2022.8,1214.81 2023.39,1214.81 2023.98,1214.81 2024.56,1214.81 2025.15,1214.81 2025.73,1214.81 2026.32,1214.81 2026.91,1214.81 2027.49,1214.81 2028.08,1214.81 2028.67,1214.81 2029.25,1214.81 2029.84,1214.81 2030.43,1214.81 2031.01,1214.81 2031.6,1214.81 2032.19,1214.81 2032.77,1214.81 2033.36,1214.81 2033.94,1214.81 2034.53,1214.81 2035.12,1214.81 2035.7,1214.81 2036.29,1214.81 2036.88,1214.81 2037.46,1214.81 2038.05,1214.81 2038.64,1214.81 2039.22,1214.81 2039.81,1214.81 2040.4,1214.81 2040.98,1214.81 2041.57,1214.81 2042.15,1214.81 2042.74,1214.81 2043.33,1214.81 2043.91,1214.81 2044.5,1214.81 2045.09,1214.81 2045.67,1214.81 2046.26,1214.81 2046.85,1214.81 2047.43,1214.81 2048.02,1214.81 2048.6,1214.81 2049.19,1214.81 2049.78,1214.81 2050.36,1214.81 2050.95,1214.81 2051.54,1214.81 2052.12,1214.81 2052.71,1214.81 2053.3,1214.81 2053.88,1214.81 2054.47,1214.81 2055.06,1214.81 2055.64,1214.81 2056.23,1214.81 2056.81,1214.81 2057.4,1214.81 2057.99,1214.81 2058.57,1214.81 2059.16,1214.81 2059.75,1214.81 2060.33,1214.81 2060.92,1214.81 2061.51,1214.81 2062.09,1214.81 2062.68,1214.81 2063.27,1214.81 2063.85,1214.81 2064.44,1214.81 2065.02,1214.81 2065.61,1214.81 2066.2,1214.81 2066.78,1214.81 2067.37,1214.81 2067.96,1214.81 2068.54,1214.81 2069.13,1214.81 2069.72,1214.81 2070.3,1214.81 2070.89,1214.81 2071.48,1214.81 2072.06,1214.81 2072.65,1214.81 2073.23,1214.81 2073.82,1214.81 2074.41,1214.81 2074.99,1214.81 2075.58,1214.81 2076.17,1214.81 2076.75,1214.81 2077.34,1214.81 2077.93,1214.81 2078.51,1214.81 2079.1,1214.81 2079.68,1214.81 2080.27,1214.81 2080.86,1214.81 2081.44,1214.81 2082.03,1214.81 2082.62,1214.81 2083.2,1214.81 2083.79,1214.81 2084.38,1214.81 2084.96,1214.81 2085.55,1214.81 2086.14,1214.81 2086.72,1214.81 2087.31,1214.81 2087.89,1214.81 2088.48,1214.81 2089.07,1214.81 2089.65,1214.81 2090.24,1214.81 2090.83,1214.81 2091.41,1214.81 2092,1214.81 2092.59,1214.81 2093.17,1214.81 2093.76,1214.81 2094.35,1214.81 2094.93,1214.81 2095.52,1214.81 2096.1,1214.81 2096.69,1214.81 2097.28,1214.81 2097.86,1214.81 2098.45,1214.81 2099.04,1214.81 2099.62,1214.81 2100.21,1214.81 2100.8,1214.81 2101.38,1214.81 2101.97,1214.81 2102.55,1214.81 2103.14,1214.81 2103.73,1214.81 2104.31,1214.81 2104.9,1214.81 2105.49,1214.81 2106.07,1214.81 2106.66,1214.81 2107.25,1214.81 2107.83,1214.81 2108.42,1214.81 2109.01,1214.81 2109.59,1214.81 2110.18,1214.81 2110.76,1214.81 2111.35,1214.81 2111.94,1214.81 2112.52,1214.81 2113.11,1214.81 2113.7,1214.81 2114.28,1214.81 2114.87,1214.81 2115.46,1214.81 2116.04,1214.81 2116.63,1214.81 2117.22,1214.81 2117.8,1214.81 2118.39,1214.81 2118.97,1214.81 2119.56,1214.81 2120.15,1214.81 2120.73,1214.81 2121.32,1214.81 2121.91,1214.81 2122.49,1214.81 2123.08,1214.81 2123.67,1214.81 2124.25,1214.81 2124.84,1214.81 2125.42,1214.81 2126.01,1214.81 2126.6,1214.81 2127.18,1214.81 2127.77,1214.81 2128.36,1214.81 2128.94,1214.81 2129.53,1214.81 2130.12,1214.81 2130.7,1214.81 2131.29,1214.81 2131.88,1214.81 2132.46,1214.81 2133.05,1214.81 2133.63,1214.81 2134.22,1214.81 2134.81,1214.81 2135.39,1214.81 2135.98,1214.81 2136.57,1214.81 2137.15,1214.81 2137.74,1214.81 2138.33,1214.81 2138.91,1214.81 2139.5,1214.81 2140.09,1214.81 2140.67,1214.81 2141.26,1214.81 2141.84,1214.81 2142.43,1214.81 2143.02,1214.81 2143.6,1214.81 2144.19,1214.81 2144.78,1214.81 2145.36,1214.81 2145.95,1214.81 2146.54,1214.81 2147.12,1214.81 2147.71,1214.81 2148.3,1214.81 2148.88,1214.81 2149.47,1214.81 2150.05,1214.81 2150.64,1214.81 2151.23,1214.81 2151.81,1214.81 2152.4,1214.81 2152.99,1214.81 2153.57,1214.81 2154.16,1214.81 2154.75,1214.81 2155.33,1214.81 2155.92,1214.81 2156.5,1214.81 2157.09,1214.81 2157.68,1214.81 2158.26,1214.81 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.83,1198.15 1398.79,899.083 \"/>\n<polyline clip-path=\"url(#clip542)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1231.02 985.439,1198.15 2158.26,1198.15 2158.26,1231.02 985.439,1231.02 \"/>\n<path clip-path=\"url(#clip540)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip540)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip540)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip540)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip540)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip540)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip543\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip543)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip543)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip543)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip543)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip543)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip540)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip543)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip543)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip543)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip543)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip543)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip540)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip540)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip540)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip543)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2649.84 162.673,-3881.08 163.232,-5009.47 163.792,-6017.5 164.351,-6937.6 164.91,-7799.58 165.469,-8561.25 166.029,-9229.33 166.588,-9855.04 167.147,-10396.4 167.706,-10901.1 168.266,-11350.6 168.825,-11748.5 169.384,-12098 169.943,-11606.5 170.503,-11890.4 171.062,-12144.4 171.621,-12360.2 172.18,-12540.6 172.74,-12122.9 173.299,-12246.9 173.858,-11869.4 174.417,-11079.3 174.977,-10407.6 175.536,-9806.25 176.095,-9906.59 176.655,-9990.84 177.214,-10045.9 177.773,-10092.8 178.332,-9847.63 178.892,-9844.09 179.451,-9595.93 180.01,-9585.88 180.569,-9564.07 181.129,-9136.12 181.688,-9107.71 182.247,-9068.63 182.806,-8856.05 183.366,-8323.94 183.925,-8264.44 184.484,-8068.52 185.043,-7977.57 185.603,-7889.55 186.162,-7679.72 186.721,-7586.05 187.28,-7485.62 187.84,-7284.41 188.399,-7087.43 188.958,-6806.57 189.517,-6715.18 190.077,-6445.39 190.636,-6273.52 191.195,-6105.6 191.754,-5865.73 192.314,-5698 192.873,-5609.58 193.432,-5383.9 193.991,-5297.8 194.551,-5021.26 195.11,-4823.53 195.669,-4683.59 196.228,-4600.98 196.788,-4364.39 197.347,-4245.89 197.906,-4175.87 198.465,-4049.17 199.025,-3924.85 199.584,-3809.91 200.143,-3607.31 200.702,-3538.09 201.262,-3424.69 201.821,-3277.95 202.38,-3088.4 202.939,-3025.76 203.499,-2888.27 204.058,-2827.32 204.617,-2692.54 205.176,-2636.47 205.736,-2541.51 206.295,-2518.87 206.854,-2389.88 207.413,-2299.43 207.973,-2210.27 208.532,-2119.74 209.091,-2033.93 209.65,-1951.57 210.21,-1866.1 210.769,-1785.78 211.328,-1705.7 211.887,-1566.31 212.447,-1456.91 213.006,-1410.45 213.565,-1280.53 214.124,-1213.95 214.684,-1168.74 215.243,-1078.6 215.802,-1007.42 216.361,-968.556 216.921,-901.086 217.48,-792.057 218.039,-710.914 218.598,-679.41 219.158,-554.151 219.717,-432.344 220.276,-381.412 220.835,-288.388 221.395,-226.02 221.954,-157.058 222.513,-117.194 223.072,-60.4627 223.632,-23.8068 224.191,9.9312 224.75,68.8647 225.309,104.683 225.869,140.015 226.428,181.352 226.987,235.489 227.546,247.931 228.106,284.521 228.665,356.517 229.224,344.107 229.783,341.353 230.343,375.078 230.902,407.48 231.461,419.633 232.02,470.84 232.58,497.868 233.139,523.651 233.698,533.61 234.257,578.755 234.817,607.593 235.376,613.678 235.935,619.363 236.494,645.761 237.054,631.672 237.613,671.62 238.172,696.385 238.731,700.509 239.291,702.751 239.85,726.541 240.409,763.512 240.968,801.834 241.528,819.136 242.087,833.098 242.646,814.574 243.205,796.234 243.765,834.575 244.324,850.498 244.883,923.124 245.442,919.577 246.002,937.388 246.561,987.052 247.12,1013.47 247.679,987.862 248.239,1016.22 248.798,1005.58 249.357,981.738 249.916,990.014 250.476,999.861 251.035,1005.22 251.594,998.308 252.153,1027.26 252.713,1012.37 253.272,1004.17 253.831,981.348 254.39,976.878 254.95,936.735 255.509,948.649 256.068,964.756 256.627,1013.03 257.187,1041.46 257.746,1032.54 258.305,1028.99 258.864,1039.79 259.424,1013.79 259.983,1040.63 260.542,1057.79 261.101,1052.32 261.661,1044.28 262.22,1073.16 262.779,1031.52 263.338,1040.28 263.898,1014.67 264.457,1028.15 265.016,1023.99 265.575,1005.37 266.135,1000.18 266.694,963.243 267.253,978.412 267.812,992.896 268.372,1004.97 268.931,1021.78 269.49,1037.17 270.049,1032.37 270.609,1044.46 271.168,1058.57 271.727,1052.79 272.286,1080.94 272.846,1070.24 273.405,1098.82 273.964,1093.94 274.523,1088.7 275.083,1081.76 275.642,1077.18 276.201,1067.6 276.76,1041.37 277.32,1053.73 277.879,1047.48 278.438,1028.28 278.997,1024.46 279.557,1070.95 280.116,1063.62 280.675,1058.5 281.234,1069.59 281.794,1076.64 282.353,1054.79 282.912,1045.65 283.471,1037.22 284.031,1029.75 284.59,1040.25 285.149,1015.13 285.708,1030.54 286.268,1041.98 286.827,1034.96 287.386,1062.87 287.945,1037.57 288.505,1048.2 289.064,1054.42 289.623,1047.92 290.182,1057.08 290.742,1062.85 291.301,1053.56 291.86,1044.03 292.419,1053.56 292.979,1079.37 293.538,1052.91 294.097,1060.99 294.656,1068.48 295.216,1092.35 295.775,1132.1 296.334,1135.14 296.893,1151.35 297.453,1138.31 298.012,1158.34 298.571,1113.2 299.13,1088.1 299.69,1045.35 300.249,1073.02 300.808,1063.13 301.368,1055.36 301.927,999.506 302.486,991.397 303.045,1020.84 303.605,1047.41 304.164,1005.81 304.723,983.88 305.282,1002.07 305.842,981.46 306.401,995.149 306.96,971.283 307.519,1000.67 308.079,1011.83 308.638,989.579 309.197,986.168 309.756,980.947 310.316,975.589 310.875,987.135 311.434,949.027 311.993,965.191 312.553,976.397 313.112,927.364 313.671,907.771 314.23,905.15 314.79,887.487 315.349,917.811 315.908,934.02 316.467,916.281 317.027,895.506 317.586,881.295 318.145,864.175 318.704,901.387 319.264,937.057 319.823,950.603 320.382,949.543 320.941,978.208 321.501,988.096 322.06,1000.53 322.619,977.289 323.178,986.229 323.738,1011.64 324.297,1000.11 324.856,957.261 325.415,964.656 325.975,940.166 326.534,954.615 327.093,964.833 327.652,995.834 328.212,970.832 328.771,948.566 329.33,948.652 329.889,912.222 330.449,928.813 331.008,956.325 331.567,933.836 332.126,931.261 332.686,962.914 333.245,973.857 333.804,963.058 334.363,974.108 334.923,984.785 335.482,994.448 336.041,1005.39 336.6,996.349 337.16,987.886 337.719,948.122 338.278,959.11 338.837,954.648 339.397,982.737 339.956,995.724 340.515,988.4 341.074,980.215 341.634,989.582 342.193,950.28 342.752,957.952 343.311,946.885 343.871,925.636 344.43,921.663 344.989,919.25 345.548,934.055 346.108,976.88 346.667,1001.75 347.226,939.9 347.785,952.534 348.345,914.079 348.904,924.4 349.463,938.051 350.022,932.284 350.582,945.857 351.141,937.306 351.7,915.307 352.259,908.278 352.819,905.287 353.378,868.042 353.937,883.889 354.496,880.157 355.056,874.37 355.615,886.249 356.174,870.042 356.733,884.782 357.293,881.539 357.852,878.335 358.411,923.887 358.97,922.922 359.53,900.041 360.089,912.351 360.648,910.66 361.207,892.154 361.767,875.513 362.326,840.167 362.885,810.462 363.444,810.611 364.004,779.48 364.563,813.559 365.122,813.333 365.681,845.65 366.241,861.257 366.8,875.458 367.359,856.175 367.918,838.088 368.478,822.508 369.037,807.612 369.596,841.097 370.155,901.337 370.715,880.145 371.274,889.359 371.833,863.618 372.392,828.505 372.952,809.885 373.511,859.776 374.07,856.901 374.629,853.727 375.189,885.056 375.748,881.01 376.307,908.642 376.866,952.548 377.426,976.032 377.985,952.596 378.544,910.63 379.103,904.816 379.663,900.602 380.222,928.737 380.781,903.374 381.34,926.575 381.9,917.453 382.459,913.59 383.018,862.355 383.577,855.652 384.137,824.93 384.696,824.249 385.255,807.438 385.814,792.78 386.374,761.585 386.933,778.681 387.492,774.752 388.051,789.742 388.611,791.367 389.17,804.661 389.729,803.98 390.288,789.319 390.848,803.534 391.407,804.039 391.966,785.013 392.525,802.429 393.085,816.002 393.644,796.429 394.203,827.415 394.762,822.114 395.322,816.059 395.881,796.4 396.44,775.788 396.999,790.122 397.559,825.256 398.118,773.685 398.677,775.907 399.236,777.259 399.796,777.194 400.355,782.434 400.914,780.26 401.473,824.263 402.033,834.689 402.592,811.519 403.151,829.087 403.71,827.162 404.27,821.931 404.829,834.824 405.388,849.432 405.947,863.551 406.507,876.194 407.066,905.091 407.625,884.793 408.184,894.574 408.744,884.591 409.303,892.46 409.862,931.868 410.421,925.467 410.981,918.852 411.54,907.623 412.099,900.373 412.658,891.459 413.218,887.183 413.777,891.328 414.336,853.192 414.895,881.337 415.455,859.005 416.014,850.604 416.573,879.398 417.132,859.766 417.692,854.564 418.251,835.663 418.81,834.588 419.369,828.495 419.929,838.599 420.488,786.458 421.047,801.585 421.606,861.222 422.166,857.983 422.725,901.132 423.284,909.556 423.843,901.607 424.403,898.808 424.962,914.102 425.521,953.772 426.08,924.984 426.64,919.059 427.199,879.05 427.758,872.734 428.318,898.794 428.877,889.226 429.436,854.317 429.995,850.219 430.555,858.814 431.114,885.825 431.673,895.449 432.232,873.015 432.792,903.39 433.351,895.265 433.91,886.129 434.469,878.847 435.029,856.957 435.588,806.211 436.147,804.721 436.706,787.477 437.266,788.852 437.825,785.09 438.384,785.836 438.943,769.703 439.503,783.204 440.062,811.564 440.621,806.995 441.18,786.89 441.74,787.056 442.299,767.097 442.858,732.998 443.417,718.207 443.977,736.112 444.536,735.224 445.095,755.938 445.654,739.307 446.214,724.392 446.773,692.269 447.332,692.916 447.891,710.297 448.451,732.231 449.01,716.97 449.569,715.196 450.128,684.211 450.688,739.741 451.247,758.967 451.806,778.811 452.365,793.002 452.925,808.563 453.484,808.612 454.043,806.304 454.602,784.265 455.162,812.193 455.721,823.723 456.28,806.484 456.839,802.887 457.399,782.186 457.958,750.785 458.517,766.68 459.076,749.029 459.636,749.2 460.195,731.57 460.754,735.554 461.313,672.092 461.873,674.04 462.432,710.375 462.991,729.823 463.55,748.035 464.11,749.732 464.669,719.453 465.228,720.715 465.787,708.756 466.347,758.596 466.906,788.048 467.465,784.567 468.024,767.28 468.584,813.379 469.143,791.375 469.702,787.249 470.261,786.446 470.821,784.584 471.38,814.48 471.939,810.98 472.498,825.101 473.058,806.278 473.617,787.061 474.176,784.146 474.735,782.997 475.295,814.627 475.854,792.286 476.413,821.138 476.972,832.152 477.532,808.151 478.091,788.88 478.65,785.371 479.209,783.548 479.769,796.06 480.328,840.885 480.887,822.317 481.446,817.695 482.006,835.44 482.565,814.796 483.124,800.824 483.683,814.497 484.243,794.529 484.802,777.493 485.361,792.224 485.92,771.045 486.48,750.926 487.039,734.129 487.598,748.19 488.157,795.917 488.717,823.676 489.276,771.811 489.835,739.206 490.394,710.27 490.954,693.178 491.513,712.619 492.072,697.123 492.631,697.499 493.191,700.887 493.75,687.188 494.309,658.76 494.868,681.698 495.428,665.438 495.987,650.33 496.546,668.173 497.105,655.571 497.665,659.207 498.224,631.74 498.783,653.325 499.342,638.914 499.902,645.291 500.461,633.246 501.02,636.798 501.579,676.602 502.139,695.362 502.698,693.795 503.257,744.644 503.816,776.736 504.376,773.855 504.935,788.493 505.494,785.806 506.053,751.466 506.613,763.425 507.172,794.196 507.731,793.451 508.29,791.056 508.85,768.162 509.409,766.558 509.968,797.086 510.527,746.369 511.087,778.774 511.646,810.711 512.205,823.763 512.764,820.018 513.324,800.431 513.883,843.696 514.442,823.672 515.001,790.638 515.561,769.995 516.12,798.49 516.679,791.822 517.238,771.178 517.798,786.028 518.357,783.586 518.916,793.891 519.475,801.545 520.035,764.112 520.594,758.256 521.153,741.482 521.712,758.381 522.272,741.498 522.831,736.471 523.39,736.04 523.949,716.925 524.509,731.371 525.068,768.099 525.627,733.823 526.186,733.656 526.746,732.086 527.305,733.671 527.864,699.257 528.423,701.879 528.983,708.28 529.542,708.197 530.101,711.23 530.66,678.261 531.22,681.361 531.779,668.307 532.338,642.057 532.897,646.069 533.457,632.87 534.016,654.591 534.575,623.211 535.134,626.733 535.694,614.505 536.253,624.327 536.812,614.147 537.371,653.218 537.931,688.91 538.49,674.468 539.049,678.578 539.608,650.136 540.168,636.215 540.727,653.816 541.286,655.823 541.845,654.122 542.405,658.201 542.964,660.025 543.523,679.742 544.082,700.841 544.642,720.287 545.201,720.573 545.76,748.691 546.319,730.83 546.879,729.491 547.438,726.923 547.997,740.285 548.556,755.033 549.116,755.12 549.675,785.703 550.234,766.693 550.793,765.766 551.353,731.475 551.912,700.73 552.471,702.006 553.031,717.048 553.59,764.002 554.149,776.31 554.708,773.036 555.268,737.291 555.827,706.549 556.386,725.17 556.945,725.236 557.505,689.803 558.064,709.331 558.623,708.1 559.182,709.035 559.742,679.198 560.301,710.369 560.86,675.644 561.419,660.087 561.979,630.904 562.538,665.951 563.097,685.423 563.656,683.88 564.216,683.178 564.775,685.634 565.334,723.138 565.893,740.102 566.453,727.307 567.012,710.726 567.571,709.201 568.13,694.938 568.69,695.435 569.249,729.215 569.808,716.389 570.367,696.873 570.927,715.347 571.486,684.242 572.045,685.536 572.604,688.142 573.164,703.375 573.723,701.918 574.282,721.079 574.841,722.6 575.401,691.642 575.96,727.299 576.519,728.775 577.078,734.884 577.638,731.408 578.197,714.77 578.756,728.393 579.315,728.994 579.875,747.401 580.434,760.365 580.993,730.002 581.552,727.201 582.112,726.428 582.671,709.137 583.23,711.738 583.789,729.368 584.349,732.574 584.908,731.831 585.467,744.575 586.026,757.398 586.586,738.57 587.145,769.985 587.704,731.015 588.263,700.66 588.823,719.16 589.382,686.763 589.941,672.661 590.5,646.094 591.06,631.592 591.619,620.318 592.178,623.459 592.737,626.245 593.297,646.035 593.856,647.609 594.415,634.429 594.974,684.764 595.534,704.16 596.093,688.205 596.652,720.584 597.211,723.323 597.771,720.804 598.33,735.29 598.889,735.675 599.448,745.901 600.008,759.492 600.567,851.587 601.126,823.862 601.685,831.66 602.245,810.125 602.804,803.304 603.363,815.381 603.922,843.736 604.482,803.316 605.041,799.934 605.6,810.04 606.159,788.692 606.719,733.204 607.278,713.075 607.837,726.519 608.396,773.766 608.956,803.485 609.515,781.211 610.074,793.284 610.633,787.858 611.193,800.672 611.752,829.342 612.311,775.215 612.87,786.113 613.43,795.614 613.989,791.496 614.548,773.331 615.107,768.569 615.667,748.909 616.226,731.946 616.785,713.834 617.344,712.933 617.904,713.651 618.463,729.75 619.022,726.025 619.581,740.747 620.141,739.451 620.7,716.836 621.259,733.986 621.818,715.542 622.378,713.089 622.937,696.996 623.496,663.863 624.055,681.245 624.615,682.845 625.174,683.968 625.733,703.492 626.292,719.016 626.852,715.782 627.411,741.371 627.97,721.691 628.529,719.456 629.089,715.788 629.648,764.948 630.207,762.826 630.766,774.785 631.326,752.356 631.885,732.638 632.444,746.118 633.003,742.181 633.563,756.68 634.122,755.217 634.681,785.147 635.24,763.661 635.8,745.962 636.359,758.365 636.918,707.96 637.477,708.998 638.037,728.107 638.596,709.933 639.155,693.717 639.714,696.492 640.274,695.207 640.833,730.231 641.392,745.661 641.951,743.93 642.511,775.297 643.07,756.487 643.629,718.848 644.188,702.106 644.748,684.965 645.307,685.212 645.866,688.856 646.425,708.724 646.985,692.564 647.544,640.45 648.103,659.316 648.662,627.008 649.222,611.905 649.781,650.07 650.34,686.56 650.899,717.852 651.459,752.968 652.018,700.439 652.577,720.977 653.136,687.615 653.696,671.615 654.255,656.563 654.814,677.219 655.373,663.183 655.933,662.639 656.492,647.13 657.051,654.395 657.61,672.551 658.17,707.153 658.729,721.605 659.288,703.448 659.847,720.647 660.407,734.553 660.966,752.099 661.525,749.162 662.084,762.15 662.644,752.971 663.203,719.149 663.762,703.478 664.321,703.856 664.881,704.608 665.44,687.985 665.999,685.568 666.558,686.364 667.118,687.332 667.677,705.977 668.236,670.47 668.795,655.105 669.355,654.469 669.914,687.741 670.473,689.037 671.032,688.949 671.592,705.138 672.151,739.13 672.71,721.287 673.269,705.68 673.829,692.154 674.388,679.391 674.947,682.365 675.506,715.548 676.066,715.088 676.625,701.204 677.184,715.005 677.743,711.757 678.303,678.297 678.862,679.25 679.421,695.998 679.981,693.076 680.54,723.069 681.099,688.978 681.658,657.915 682.218,676.71 682.777,677.602 683.336,679.366 683.895,683.149 684.455,667.677 685.014,685.648 685.573,686.17 686.132,706.731 686.692,688.948 687.251,692.2 687.81,707.931 688.369,693.956 688.929,688.148 689.488,723.764 690.047,722.438 690.606,723.891 691.166,756.033 691.725,784.855 692.284,746.45 692.843,742.637 693.403,740.67 693.962,723.295 694.521,741.149 695.08,753.174 695.64,749.802 696.199,747.177 696.758,749.558 697.317,745.852 697.877,743.697 698.436,740.23 698.995,769.415 699.554,749.249 700.114,773.759 700.673,754.269 701.232,737.735 701.791,718.231 702.351,719.849 702.91,734.365 703.469,745.115 704.028,720.843 704.588,688.999 705.147,688.65 705.706,706.927 706.265,706.174 706.825,702.335 707.384,668.895 707.943,670.529 708.502,656.66 709.062,623.289 709.621,627.472 710.18,631.231 710.739,634.981 711.299,603.504 711.858,593.839 712.417,616.363 712.976,652.725 713.536,655.628 714.095,673.624 714.654,723.697 715.213,739.109 715.773,738.243 716.332,705.535 716.891,688.686 717.45,704.349 718.01,705.042 718.569,673.04 719.128,691.498 719.687,709.297 720.247,772.293 720.806,767.788 721.365,779.147 721.924,761.076 722.484,757.54 723.043,752.309 723.602,752.538 724.161,751.98 724.721,779.202 725.28,744.453 725.839,755.782 726.398,749.638 726.958,750.694 727.517,763.562 728.076,741.295 728.635,738.938 729.195,735.681 729.754,731.177 730.313,730 730.872,709.971 731.432,709.866 731.991,662.135 732.55,679.418 733.109,695.57 733.669,690.224 734.228,705.558 734.787,718.956 735.346,715.061 735.906,713.034 736.465,742.497 737.024,739.815 737.583,688.741 738.143,707.868 738.702,693.46 739.261,641.895 739.82,660.436 740.38,612.512 740.939,620.56 741.498,655.816 742.057,656.09 742.617,642.839 743.176,647.632 743.735,651.835 744.294,685.468 744.854,703.985 745.413,720.438 745.972,721.3 746.531,718.734 747.091,715.179 747.65,711.201 748.209,726.657 748.768,740.037 749.328,737.156 749.887,733.857 750.446,698.807 751.005,680.224 751.565,680.168 752.124,713.832 752.683,711.999 753.242,729.698 753.802,746.792 754.361,693.837 754.92,680.167 755.479,678.053 756.039,693.09 756.598,674.836 757.157,674.718 757.716,691.041 758.276,692.613 758.835,693.701 759.394,662.981 759.953,679.836 760.513,648.542 761.072,654.119 761.631,653.358 762.19,636.711 762.75,636.384 763.309,640.116 763.868,640.594 764.427,611.672 764.987,598.07 765.546,587.083 766.105,591.706 766.664,581.037 767.224,587.313 767.783,556.529 768.342,598.419 768.901,604.355 769.461,579.601 770.02,585.286 770.579,592.679 771.138,598.21 771.698,602.827 772.257,592.194 772.816,615.446 773.375,636.308 773.935,670.569 774.494,637.907 775.053,621.481 775.612,643.319 776.172,613.868 776.731,617.828 777.29,640.418 777.849,609.176 778.409,628.512 778.968,632.691 779.527,650.846 780.086,685.267 780.646,700.797 781.205,718.94 781.764,700.615 782.323,732.967 782.883,732.703 783.442,747.416 784.001,716.784 784.56,685.294 785.12,684.382 785.679,652.985 786.238,657.313 786.797,658.641 787.357,675.601 787.916,695.984 788.475,680.368 789.034,699.721 789.594,716.489 790.153,699.073 790.712,699.861 791.271,716.529 791.831,716.523 792.39,700.141 792.949,715.913 793.508,696.913 794.068,711.491 794.627,728.494 795.186,744.007 795.745,740.204 796.305,720.489 796.864,721.776 797.423,737.836 797.982,733.6 798.542,745.682 799.101,726.055 799.66,723.219 800.219,721.906 800.779,723.954 801.338,724.016 801.897,755.763 802.456,766.555 803.016,760.744 803.575,770.332 804.134,748.685 804.693,729.245 805.253,726.518 805.812,706.802 806.371,703.93 806.931,719.823 807.49,735.562 808.049,731.841 808.608,728.785 809.168,709.467 809.727,678.667 810.286,679.834 810.845,659.386 811.405,656.434 811.964,656.405 812.523,655.728 813.082,658.096 813.642,644.68 814.201,630.932 814.76,628.77 815.319,615.773 815.879,602.455 816.438,591.447 816.997,593.951 817.556,567.616 818.116,585.04 818.675,591.484 819.234,578.911 819.793,571.196 820.353,624.258 820.912,661.248 821.471,681.378 822.03,668.028 822.59,666.849 823.149,685.237 823.708,686.185 824.267,653.761 824.827,640.542 825.386,626.114 825.945,613.508 826.504,667.59 827.064,652.384 827.623,653.803 828.182,655.405 828.741,689.352 829.301,654.054 829.86,653.136 830.419,669.56 830.978,670.139 831.538,682.339 832.097,680.001 832.656,680.401 833.215,679.948 833.775,648.147 834.334,634.629 834.893,616.923 835.452,622.421 836.012,626.903 836.571,614.061 837.13,635.027 837.689,587.948 838.249,594.436 838.808,614.549 839.367,636.082 839.926,621.979 840.486,608.762 841.045,627.808 841.604,648.608 842.163,663.838 842.723,679.337 843.282,679.22 843.841,680.47 844.4,662.526 844.96,651.137 845.519,622.626 846.078,638.22 846.637,626.46 847.197,662.962 847.756,663.333 848.315,646.505 848.874,648.75 849.434,700.295 849.993,716.104 850.552,733.335 851.111,731.922 851.671,714.046 852.23,714.174 852.789,713.254 853.348,725.563 853.908,709.553 854.467,693.159 855.026,691.575 855.585,712.943 856.145,710.485 856.704,725.597 857.263,709.276 857.822,677.207 858.382,662.401 858.941,651.005 859.5,653.053 860.059,672.582 860.619,675.794 861.178,678.719 861.737,726.402 862.296,707.387 862.856,707.17 863.415,693.679 863.974,675.513 864.533,689.205 865.093,688.349 865.652,698.893 866.211,712.868 866.77,709.396 867.33,659.109 867.889,661.718 868.448,664.578 869.007,683.666 869.567,682.303 870.126,685.629 870.685,641.977 871.244,628.689 871.804,630.021 872.363,668.525 872.922,683.932 873.481,682.935 874.041,668.441 874.6,651.125 875.159,652.896 875.718,689.688 876.278,738.082 876.837,765.442 877.396,777.852 877.955,772.977 878.515,785.89 879.074,785.584 879.633,797.48 880.192,790.543 880.752,766.952 881.311,762.394 881.87,755.126 882.429,771.426 882.989,769.484 883.548,779.166 884.107,790.923 884.666,768.688 885.226,763.317 885.785,708.917 886.344,693.011 886.903,710.68 887.463,694.151 888.022,696.598 888.581,661.392 889.14,658.811 889.7,692.357 890.259,692.943 890.818,708.909 891.377,719.678 891.937,699.05 892.496,712.928 893.055,711.715 893.614,745.942 894.174,742.118 894.733,756.582 895.292,738.694 895.851,766.711 896.411,748.306 896.97,728.884 897.529,756.828 898.088,751.764 898.648,750.846 899.207,759.887 899.766,738.116 900.325,735.435 900.885,733.54 901.444,791.523 902.003,788.465 902.562,748.576 903.122,728.018 903.681,723.64 904.24,688.538 904.799,686.927 905.359,687.276 905.918,699.766 906.477,698.415 907.036,698.41 907.596,678.381 908.155,714.943 908.714,664.032 909.273,666.447 909.833,700.093 910.392,698.571 910.951,679.649 911.51,681.045 912.07,667.881 912.629,684.941 913.188,705.039 913.747,690.471 914.307,702.778 914.866,705.272 915.425,740.469 915.984,752.167 916.544,734.17 917.103,732.233 917.662,744.681 918.221,742.611 918.781,741.645 919.34,737.232 919.899,718.837 920.458,715.137 921.018,667.701 921.577,655.412 922.136,675.827 922.695,708.208 923.255,713.954 923.814,662.053 924.373,662.869 924.932,680.354 925.492,683.244 926.051,700.511 926.61,698.656 927.169,699.603 927.729,699.634 928.288,745.003 928.847,740.931 929.406,736.645 929.966,729.87 930.525,728.843 931.084,761.896 931.644,743.593 932.203,708.596 932.762,677.327 933.321,661.983 933.881,645.567 934.44,633.5 934.999,585.219 935.558,588.651 936.118,609.699 936.677,611.692 937.236,661.343 937.795,647.057 938.355,635.649 938.914,654.2 939.473,671.823 940.032,672.462 940.592,656.318 941.151,690.103 941.71,705.55 942.269,723.188 942.829,707.07 943.388,691.528 943.947,686.881 944.506,670.584 945.066,688.626 945.625,687.342 946.184,704.474 946.743,721.348 947.303,701.651 947.862,700.25 948.421,697.951 948.98,663.291 949.54,650.347 950.099,649.453 950.658,637.991 951.217,639.137 951.777,641.692 952.336,674.317 952.895,657.813 953.454,678.112 954.014,694.06 954.573,680.626 955.132,679.766 955.691,678.574 956.251,682.153 956.81,679.257 957.369,693.21 957.928,691.83 958.488,677.063 959.047,674.523 959.606,641.202 960.165,626.57 960.725,645.918 961.284,648.989 961.843,652.436 962.402,652.249 962.962,701.731 963.521,715.439 964.08,713.994 964.639,712.817 965.199,789.38 965.758,796.564 966.317,790.952 966.876,785.142 967.436,748.413 967.995,792.381 968.554,786.24 969.113,796.141 969.673,789.615 970.232,800.235 970.791,776.786 971.35,725.468 971.91,708.58 972.469,693.146 973.028,709.778 973.587,725.296 974.147,722.841 974.706,687.913 975.265,688.248 975.824,702.154 976.384,664.763 976.943,634.946 977.502,618.597 978.061,607.392 978.621,610.428 979.18,627.451 979.739,613.719 980.298,583.139 980.858,586.987 981.417,576.089 981.976,596.094 982.535,617.42 983.095,620.386 983.654,623.705 984.213,606.041 984.772,625.752 985.332,645.669 985.891,614.477 986.45,635.081 987.009,602.409 987.569,591.766 988.128,628.989 988.687,634.749 989.246,636.728 989.806,672.171 990.365,642.186 990.924,646.114 991.483,664.166 992.043,669.255 992.602,651.166 993.161,670.734 993.72,706.546 994.28,770.911 994.839,753.025 995.398,735.773 995.957,735.644 996.517,731.784 997.076,728.28 997.635,772.501 998.194,768.211 998.754,764.549 999.313,727.666 999.872,756.447 1000.43,753.182 1000.99,782.747 1001.55,806.202 1002.11,802.172 1002.67,779.019 1003.23,778.126 1003.79,725.502 1004.35,738.852 1004.91,729.1 1005.46,758.503 1006.02,741.695 1006.58,739.284 1007.14,737.347 1007.7,736.99 1008.26,750.115 1008.82,748.573 1009.38,710.95 1009.94,712.757 1010.5,712.057 1011.06,724.535 1011.62,751.844 1012.18,733.908 1012.73,730.885 1013.29,744.07 1013.85,722.767 1014.41,734.884 1014.97,746.477 1015.53,744.923 1016.09,722.689 1016.65,755.946 1017.21,752.348 1017.77,732.842 1018.33,728.825 1018.89,694.388 1019.45,676.838 1020.01,676.887 1020.56,660.067 1021.12,677 1021.68,643.564 1022.24,660.255 1022.8,662.326 1023.36,683.626 1023.92,664.393 1024.48,630.049 1025.04,630.234 1025.6,633.917 1026.16,640.809 1026.72,663.783 1027.28,650.927 1027.83,639.796 1028.39,610.135 1028.95,566.09 1029.51,558.757 1030.07,565.401 1030.63,556.479 1031.19,543.55 1031.75,563.306 1032.31,590.03 1032.87,608.202 1033.43,627.486 1033.99,634.107 1034.55,638.101 1035.1,689.213 1035.66,694.274 1036.22,678.571 1036.78,681.083 1037.34,700.413 1037.9,701.889 1038.46,716.535 1039.02,745.863 1039.58,744.225 1040.14,707.285 1040.7,704.435 1041.26,702.431 1041.82,668.109 1042.38,655.435 1042.93,620.648 1043.49,627.412 1044.05,597.661 1044.61,632.527 1045.17,667.949 1045.73,667.479 1046.29,685.576 1046.85,684.957 1047.41,716.318 1047.97,729.998 1048.53,726.113 1049.09,738.88 1049.65,704.408 1050.2,701.69 1050.76,668.04 1051.32,714.899 1051.88,712.774 1052.44,712.091 1053,708.813 1053.56,689.596 1054.12,676.165 1054.68,647.049 1055.24,662.704 1055.8,682.28 1056.36,647.804 1056.92,650.056 1057.48,651.214 1058.03,668.34 1058.59,657.347 1059.15,671.433 1059.71,689.705 1060.27,703.322 1060.83,686.841 1061.39,670.869 1061.95,659.625 1062.51,643.44 1063.07,645.449 1063.63,649.758 1064.19,684.417 1064.75,683.803 1065.3,685.23 1065.86,688.214 1066.42,671.108 1066.98,687.725 1067.54,705.456 1068.1,654.864 1068.66,669.553 1069.22,686.1 1069.78,650.108 1070.34,649.436 1070.9,667.269 1071.46,652.743 1072.02,672.53 1072.57,672.85 1073.13,690.935 1073.69,678.527 1074.25,711.476 1074.81,726.094 1075.37,739.372 1075.93,734.462 1076.49,733.189 1077.05,666.944 1077.61,650.819 1078.17,618.538 1078.73,617.284 1079.29,635.246 1079.85,637.748 1080.4,640.224 1080.96,641.191 1081.52,658.377 1082.08,661.641 1082.64,659.74 1083.2,678.079 1083.76,640.321 1084.32,660.663 1084.88,694.437 1085.44,694.147 1086,708.623 1086.56,723.528 1087.12,706.818 1087.67,738.414 1088.23,718.454 1088.79,701.369 1089.35,729.801 1089.91,726.172 1090.47,725.297 1091.03,708.926 1091.59,690.976 1092.15,688.36 1092.71,705.322 1093.27,706.598 1093.83,705.782 1094.39,657.115 1094.94,675.795 1095.5,675.645 1096.06,675.258 1096.62,641.845 1097.18,644.925 1097.74,614.571 1098.3,619.288 1098.86,642.072 1099.42,624.26 1099.98,641.786 1100.54,658.707 1101.1,658.597 1101.66,641.842 1102.22,626.114 1102.77,613.864 1103.33,632.085 1103.89,620.094 1104.45,607.668 1105.01,597.925 1105.57,599.752 1106.13,604.843 1106.69,639.806 1107.25,626.598 1107.81,632.51 1108.37,666.744 1108.93,682.313 1109.49,677.646 1110.04,692.493 1110.6,692.953 1111.16,711.255 1111.72,743.284 1112.28,739.204 1112.84,748.026 1113.4,758.032 1113.96,754.449 1114.52,734.382 1115.08,715.392 1115.64,732.75 1116.2,715.622 1116.76,726.601 1117.31,711.932 1117.87,710.607 1118.43,726.184 1118.99,711.546 1119.55,725.795 1120.11,757.883 1120.67,735.517 1121.23,728.919 1121.79,726.367 1122.35,705.385 1122.91,687.67 1123.47,706.55 1124.03,722.579 1124.59,721.217 1125.14,686.7 1125.7,687.776 1126.26,685.775 1126.82,736.317 1127.38,752.583 1127.94,730.735 1128.5,698.811 1129.06,668.227 1129.62,652.187 1130.18,639.076 1130.74,609.575 1131.3,614.938 1131.86,619.31 1132.41,640.45 1132.97,643.368 1133.53,649.242 1134.09,666.93 1134.65,666.88 1135.21,681.132 1135.77,680.856 1136.33,680.453 1136.89,712.7 1137.45,710.029 1138.01,690.846 1138.57,708.568 1139.13,739.029 1139.68,703.86 1140.24,716.818 1140.8,697.554 1141.36,696.392 1141.92,712.323 1142.48,711.17 1143.04,745.29 1143.6,742.938 1144.16,711.625 1144.72,695.314 1145.28,741.006 1145.84,754.122 1146.4,772.655 1146.96,796.245 1147.51,744.478 1148.07,774.036 1148.63,769.248 1149.19,780.87 1149.75,773.13 1150.31,769.089 1150.87,768.165 1151.43,763.349 1151.99,740.236 1152.55,767.293 1153.11,718.292 1153.67,702.133 1154.23,684.846 1154.78,682.297 1155.34,698.903 1155.9,682.715 1156.46,666.911 1157.02,671.199 1157.58,688.75 1158.14,685.839 1158.7,652.098 1159.26,653.807 1159.82,625.797 1160.38,647.356 1160.94,649.835 1161.5,667.499 1162.05,685.605 1162.61,699.348 1163.17,681.869 1163.73,731.547 1164.29,697.812 1164.85,665.528 1165.41,672.435 1165.97,643.438 1166.53,643.534 1167.09,615.222 1167.65,599.565 1168.21,640.79 1168.77,643.482 1169.33,662.392 1169.88,694.017 1170.44,709.772 1171,727.131 1171.56,740.57 1172.12,733.583 1172.68,701.043 1173.24,719.077 1173.8,736.963 1174.36,700.71 1174.92,699.733 1175.48,701.744 1176.04,655.558 1176.6,656.662 1177.15,657.196 1177.71,655.818 1178.27,658.708 1178.83,675.519 1179.39,660.687 1179.95,646.924 1180.51,633.801 1181.07,639.544 1181.63,675.349 1182.19,704.003 1182.75,689.378 1183.31,672.055 1183.87,660.418 1184.43,661.752 1184.98,678.948 1185.54,665.116 1186.1,631.827 1186.66,633.564 1187.22,635.338 1187.78,639.517 1188.34,639.798 1188.9,646.366 1189.46,681.46 1190.02,694.977 1190.58,725.394 1191.14,696.164 1191.7,710.663 1192.25,693.672 1192.81,711.369 1193.37,694.252 1193.93,726.469 1194.49,724.587 1195.05,705.935 1195.61,688.09 1196.17,672.048 1196.73,655.61 1197.29,626.257 1197.85,678.444 1198.41,643.673 1198.97,612.724 1199.52,650.037 1200.08,654.26 1200.64,656.426 1201.2,687.982 1201.76,701.929 1202.32,700.629 1202.88,685.138 1203.44,702.463 1204,689.248 1204.56,723.563 1205.12,738.837 1205.68,736.748 1206.24,736.1 1206.8,749.328 1207.35,732.498 1207.91,701.89 1208.47,697.772 1209.03,679.745 1209.59,664.501 1210.15,681.179 1210.71,683.571 1211.27,735.998 1211.83,782.322 1212.39,761.123 1212.95,728.132 1213.51,707.046 1214.07,736.955 1214.62,736.739 1215.18,749.691 1215.74,757.586 1216.3,756.149 1216.86,724.978 1217.42,690.739 1217.98,659.301 1218.54,644.368 1219.1,662.982 1219.66,665.092 1220.22,647.378 1220.78,662.608 1221.34,660.471 1221.89,644.931 1222.45,660.63 1223.01,676.98 1223.57,677.381 1224.13,675.387 1224.69,690.051 1225.25,721.09 1225.81,766.404 1226.37,744.842 1226.93,759.191 1227.49,753.673 1228.05,765.689 1228.61,742.209 1229.17,753.541 1229.72,746.932 1230.28,727.044 1230.84,707.616 1231.4,706.933 1231.96,701.267 1232.52,746.602 1233.08,730.994 1233.64,730.558 1234.2,725.571 1234.76,706.101 1235.32,676.027 1235.88,676.478 1236.44,675.952 1236.99,675.205 1237.55,706.153 1238.11,691.857 1238.67,678.477 1239.23,696.403 1239.79,691.188 1240.35,643.603 1240.91,628.192 1241.47,647.047 1242.03,652.366 1242.59,673.715 1243.15,693.212 1243.71,692.707 1244.26,707.438 1244.82,690.314 1245.38,687.794 1245.94,686.546 1246.5,686.809 1247.06,683.773 1247.62,664.057 1248.18,647.877 1248.74,649.591 1249.3,652.538 1249.86,638.899 1250.42,655.885 1250.98,689.62 1251.54,689.555 1252.09,659.639 1252.65,645.695 1253.21,618.248 1253.77,621.33 1254.33,609.061 1254.89,613.305 1255.45,621.978 1256.01,625.255 1256.57,628.603 1257.13,644.879 1257.69,649.749 1258.25,620.197 1258.81,640.405 1259.36,642.877 1259.92,661.023 1260.48,665.53 1261.04,665.581 1261.6,652.003 1262.16,671.138 1262.72,656.506 1263.28,657.168 1263.84,623.24 1264.4,608.523 1264.96,612.891 1265.52,598.326 1266.08,652.796 1266.63,653.541 1267.19,621.474 1267.75,623.291 1268.31,597.259 1268.87,605.297 1269.43,578.582 1269.99,585.073 1270.55,575.224 1271.11,612.465 1271.67,618.31 1272.23,555.612 1272.79,564.082 1273.35,623.158 1273.91,631.357 1274.46,651.917 1275.02,651.159 1275.58,654.27 1276.14,642.783 1276.7,611.622 1277.26,646.085 1277.82,632.908 1278.38,632.709 1278.94,633.243 1279.5,638.038 1280.06,659.206 1280.62,676.59 1281.18,706.564 1281.73,719.772 1282.29,718.487 1282.85,747.441 1283.41,743.072 1283.97,754.239 1284.53,702.878 1285.09,699.595 1285.65,728.287 1286.21,726.013 1286.77,725.814 1287.33,736.765 1287.89,716.368 1288.45,729.002 1289,727.704 1289.56,708.866 1290.12,708.018 1290.68,736.822 1291.24,717.958 1291.8,750.062 1292.36,716.707 1292.92,717.252 1293.48,729.937 1294.04,727.514 1294.6,724.156 1295.16,754.846 1295.72,751.204 1296.28,730.401 1296.83,713.411 1297.39,712.896 1297.95,709.442 1298.51,693.173 1299.07,723.012 1299.63,721.517 1300.19,689.102 1300.75,704.336 1301.31,704.434 1301.87,683.919 1302.43,687.453 1302.99,689.065 1303.55,688.967 1304.1,707.274 1304.66,738.015 1305.22,748.758 1305.78,761.861 1306.34,773.68 1306.9,771.007 1307.46,736.949 1308.02,735.376 1308.58,779.462 1309.14,743.534 1309.7,705.799 1310.26,691.514 1310.82,691.144 1311.38,706.2 1311.93,738.789 1312.49,766.864 1313.05,761.735 1313.61,810.846 1314.17,798.309 1314.73,760.126 1315.29,751.779 1315.85,753.459 1316.41,769.843 1316.97,782.046 1317.53,762.079 1318.09,742.64 1318.65,754.842 1319.2,717.472 1319.76,702.806 1320.32,701.954 1320.88,701.942 1321.44,703.767 1322,735.112 1322.56,697.423 1323.12,696.217 1323.68,775.181 1324.24,758.023 1324.8,790.807 1325.36,814.932 1325.92,841.401 1326.47,834.332 1327.03,876.31 1327.59,849.525 1328.15,873.993 1328.71,832.322 1329.27,826.01 1329.83,802.932 1330.39,765.235 1330.95,725.036 1331.51,718.244 1332.07,717.675 1332.63,681.794 1333.19,665.013 1333.75,649.263 1334.3,664.283 1334.86,666.664 1335.42,669.367 1335.98,656.233 1336.54,672.337 1337.1,640.156 1337.66,643.337 1338.22,647.859 1338.78,634.062 1339.34,602.886 1339.9,641.21 1340.46,677.431 1341.02,709.244 1341.57,724.63 1342.13,753.663 1342.69,732.246 1343.25,749.088 1343.81,774.22 1344.37,743.283 1344.93,741.4 1345.49,724.016 1346.05,724.053 1346.61,723.666 1347.17,721.308 1347.73,717.749 1348.29,701.687 1348.84,698.15 1349.4,696.39 1349.96,695.705 1350.52,679.235 1351.08,660.343 1351.64,661.401 1352.2,597.483 1352.76,650.393 1353.32,617.976 1353.88,621.269 1354.44,625.91 1355,659.338 1355.56,661.198 1356.12,641.636 1356.67,610.716 1357.23,615.632 1357.79,586.297 1358.35,607.894 1358.91,590.474 1359.47,608.992 1360.03,643.389 1360.59,614.045 1361.15,602.549 1361.71,574.207 1362.27,596.652 1362.83,619.031 1363.39,620.255 1363.94,655.042 1364.5,623.734 1365.06,629.021 1365.62,632.178 1366.18,617.066 1366.74,668.661 1367.3,650.863 1367.86,634.964 1368.42,637.656 1368.98,652.582 1369.54,637.165 1370.1,640.332 1370.66,637.62 1371.21,657.958 1371.77,671.154 1372.33,686.276 1372.89,686.837 1373.45,736.605 1374.01,733.184 1374.57,747.45 1375.13,697.302 1375.69,713.446 1376.25,695.602 1376.81,711.824 1377.37,708.617 1377.93,723.222 1378.49,704.212 1379.04,681.591 1379.6,665.163 1380.16,669.061 1380.72,666.719 1381.28,684.222 1381.84,683.374 1382.4,721.605 1382.96,719.786 1383.52,718.622 1384.08,732.114 1384.64,747.245 1385.2,714.99 1385.76,728.8 1386.31,711.069 1386.87,737.582 1387.43,717.933 1387.99,701.173 1388.55,715.538 1389.11,684.806 1389.67,715.997 1390.23,696.279 1390.79,692.495 1391.35,675.024 1391.91,660.069 1392.47,645.277 1393.03,629.793 1393.58,633.117 1394.14,655.022 1394.7,623.709 1395.26,627.376 1395.82,629.335 1396.38,567.117 1396.94,577.764 1397.5,601.39 1398.06,587.367 1398.62,594.252 1399.18,567.241 1399.74,636.658 1400.3,640.195 1400.86,611.462 1401.41,584.588 1401.97,608.223 1402.53,612.143 1403.09,630.615 1403.65,634.292 1404.21,668.777 1404.77,672.904 1405.33,674.296 1405.89,691.83 1406.45,693.834 1407.01,644.491 1407.57,662.873 1408.13,686.412 1408.68,686.644 1409.24,705.726 1409.8,692.942 1410.36,665.078 1410.92,665.373 1411.48,698.069 1412.04,715.521 1412.6,731.521 1413.16,759.918 1413.72,756.19 1414.28,719.905 1414.84,715.795 1415.4,729.275 1415.95,758.825 1416.51,738.373 1417.07,717.281 1417.63,680.427 1418.19,686.434 1418.75,637.452 1419.31,625.186 1419.87,630.859 1420.43,614.814 1420.99,617.402 1421.55,638.314 1422.11,640.232 1422.67,641.236 1423.23,645.101 1423.78,680.095 1424.34,664.284 1424.9,647.39 1425.46,670.719 1426.02,621.215 1426.58,641.244 1427.14,646.504 1427.7,664.327 1428.26,668.318 1428.82,699.164 1429.38,733.458 1429.94,713.889 1430.5,710.101 1431.05,711.042 1431.61,713.568 1432.17,713.205 1432.73,681.173 1433.29,714.594 1433.85,694.608 1434.41,707.953 1434.97,723.359 1435.53,738.387 1436.09,738.106 1436.65,766.705 1437.21,732.571 1437.77,762.843 1438.33,729.472 1438.88,728.329 1439.44,710.719 1440,677.832 1440.56,678.89 1441.12,740.037 1441.68,704.221 1442.24,719.958 1442.8,685.825 1443.36,704.349 1443.92,718.057 1444.48,716.336 1445.04,731.644 1445.6,743.023 1446.15,741.355 1446.71,733.377 1447.27,765.051 1447.83,776.57 1448.39,820.344 1448.95,829.561 1449.51,820.765 1450.07,782.294 1450.63,724.128 1451.19,727.483 1451.75,708.383 1452.31,719.737 1452.87,733.891 1453.42,717.408 1453.98,701.828 1454.54,730.562 1455.1,693.154 1455.66,694.471 1456.22,727.033 1456.78,725.814 1457.34,789.328 1457.9,768.902 1458.46,764.863 1459.02,758.337 1459.58,769.239 1460.14,749.274 1460.7,744.556 1461.25,725.618 1461.81,723.437 1462.37,719.821 1462.93,714.246 1463.49,682.111 1464.05,679.011 1464.61,665.023 1465.17,647.611 1465.73,681.108 1466.29,696.975 1466.85,756.533 1467.41,769.502 1467.97,767.507 1468.52,733.035 1469.08,733.12 1469.64,700.249 1470.2,730.48 1470.76,710.684 1471.32,706.245 1471.88,703.546 1472.44,683.333 1473,700.389 1473.56,716.966 1474.12,703.594 1474.68,703.061 1475.24,735.936 1475.79,736.086 1476.35,695.26 1476.91,631.068 1477.47,600.215 1478.03,621.148 1478.59,638.998 1479.15,608.078 1479.71,625.129 1480.27,612.42 1480.83,566.286 1481.39,522.926 1481.95,516.768 1482.51,509.874 1483.07,503.348 1483.62,510.828 1484.18,550.604 1484.74,609.46 1485.3,613.491 1485.86,631.107 1486.42,635.209 1486.98,625.051 1487.54,643.16 1488.1,615.931 1488.66,632.889 1489.22,618.128 1489.78,624.407 1490.34,646.68 1490.89,646.907 1491.45,663.366 1492.01,649.597 1492.57,635.561 1493.13,640.017 1493.69,642.761 1494.25,642.884 1494.81,676.71 1495.37,632.162 1495.93,636.014 1496.49,653.329 1497.05,639.618 1497.61,627.572 1498.16,646.686 1498.72,568.411 1499.28,590.817 1499.84,610.838 1500.4,597.266 1500.96,601.464 1501.52,591.023 1502.08,598.944 1502.64,585.954 1503.2,579.904 1503.76,618.117 1504.32,635.578 1504.88,636.237 1505.44,639.412 1505.99,657.495 1506.55,673.943 1507.11,657.042 1507.67,659.597 1508.23,627.382 1508.79,630.528 1509.35,682.146 1509.91,648.152 1510.47,663.175 1511.03,630.079 1511.59,652.055 1512.15,654.154 1512.71,654.908 1513.26,637.381 1513.82,627.534 1514.38,628.889 1514.94,616.07 1515.5,603.89 1516.06,624.563 1516.62,675.271 1517.18,657.332 1517.74,674.821 1518.3,658.05 1518.86,642.808 1519.42,645.647 1519.98,665.914 1520.53,700.745 1521.09,668.953 1521.65,704.113 1522.21,705.461 1522.77,707.156 1523.33,707.056 1523.89,706.166 1524.45,724.605 1525.01,756.407 1525.57,736.813 1526.13,751.247 1526.69,747.95 1527.25,746.482 1527.81,776.426 1528.36,760.319 1528.92,708.525 1529.48,689.588 1530.04,687.389 1530.6,686.585 1531.16,736.277 1531.72,733.362 1532.28,731.099 1532.84,758.376 1533.4,753.082 1533.96,749.678 1534.52,729.626 1535.08,714.593 1535.63,680.406 1536.19,661.077 1536.75,679.664 1537.31,662.385 1537.87,710.398 1538.43,712.235 1538.99,724.838 1539.55,727.578 1540.11,720.447 1540.67,719.892 1541.23,719.874 1541.79,766.222 1542.35,732.14 1542.9,747.571 1543.46,761.989 1544.02,743.474 1544.58,755.044 1545.14,831.492 1545.7,821.504 1546.26,767.836 1546.82,744.632 1547.38,787.82 1547.94,782.437 1548.5,796.992 1549.06,809.469 1549.62,851.987 1550.18,828.64 1550.73,821.125 1551.29,830.622 1551.85,806.397 1552.41,813.006 1552.97,772.515 1553.53,767.701 1554.09,765.639 1554.65,747.48 1555.21,728.496 1555.77,708.562 1556.33,691.498 1556.89,693.111 1557.45,690.705 1558,690.962 1558.56,722.921 1559.12,721.978 1559.68,665.957 1560.24,649.338 1560.8,650.919 1561.36,670.409 1561.92,685.487 1562.48,666.125 1563.04,701.256 1563.6,734.101 1564.16,730.265 1564.72,726.096 1565.28,710.653 1565.83,739.618 1566.39,738.679 1566.95,731.535 1567.51,711.871 1568.07,696.768 1568.63,698.129 1569.19,712.526 1569.75,693.479 1570.31,711.269 1570.87,723.289 1571.43,702.623 1571.99,688.677 1572.55,686.379 1573.1,701.344 1573.66,717.563 1574.22,698.271 1574.78,682.213 1575.34,669.281 1575.9,656.269 1576.46,608.182 1577.02,599.751 1577.58,636.543 1578.14,607.134 1578.7,611.699 1579.26,614.23 1579.82,617.131 1580.37,590.749 1580.93,562.343 1581.49,620.094 1582.05,624.72 1582.61,660.352 1583.17,661.491 1583.73,632.791 1584.29,635.114 1584.85,638.647 1585.41,672.157 1585.97,719.5 1586.53,704.392 1587.09,735.939 1587.65,744.884 1588.2,741.55 1588.76,721.052 1589.32,719.28 1589.88,717.306 1590.44,732.367 1591,712.307 1591.56,697.988 1592.12,714.108 1592.68,727.918 1593.24,727.473 1593.8,723.551 1594.36,735.846 1594.92,750.192 1595.47,763.277 1596.03,759.406 1596.59,742.097 1597.15,724.495 1597.71,771.659 1598.27,787.519 1598.83,780.321 1599.39,743.463 1599.95,756.194 1600.51,714.223 1601.07,705.583 1601.63,715.877 1602.19,715.75 1602.74,667.27 1603.3,668.57 1603.86,683.677 1604.42,668.424 1604.98,654.326 1605.54,657.981 1606.1,672.623 1606.66,688.155 1607.22,656.789 1607.78,656.417 1608.34,622.675 1608.9,670.972 1609.46,703.323 1610.02,732.107 1610.57,729.1 1611.13,711.334 1611.69,709.026 1612.25,719.556 1612.81,700.199 1613.37,697.99 1613.93,697.661 1614.49,714.766 1615.05,684.78 1615.61,683.699 1616.17,715.969 1616.73,730.351 1617.29,711.305 1617.84,693.189 1618.4,709.591 1618.96,679.403 1619.52,647.867 1620.08,618.087 1620.64,590.946 1621.2,610.997 1621.76,616.085 1622.32,620.981 1622.88,639.622 1623.44,610.531 1624,584.631 1624.56,610.658 1625.11,649.149 1625.67,670.107 1626.23,639.78 1626.79,643.065 1627.35,657.003 1627.91,675.155 1628.47,690.84 1629.03,689.122 1629.59,709.715 1630.15,692.574 1630.71,705.355 1631.27,687.298 1631.83,657.258 1632.39,645.256 1632.94,666.707 1633.5,686.297 1634.06,699.292 1634.62,667.955 1635.18,671.532 1635.74,638.08 1636.3,639.942 1636.86,642.097 1637.42,645.239 1637.98,646.897 1638.54,645.431 1639.1,648.71 1639.66,681.425 1640.21,681.335 1640.77,632.26 1641.33,681.42 1641.89,667.212 1642.45,620.582 1643.01,623.07 1643.57,646.48 1644.13,662.481 1644.69,663.451 1645.25,666.035 1645.81,667.989 1646.37,668.336 1646.93,685.175 1647.48,688.104 1648.04,620.876 1648.6,627.824 1649.16,599.664 1649.72,603.326 1650.28,613.17 1650.84,602.414 1651.4,589.124 1651.96,594.019 1652.52,599.764 1653.08,605.996 1653.64,644.981 1654.2,648.378 1654.76,635.561 1655.31,605.111 1655.87,577.916 1656.43,551.299 1656.99,575.911 1657.55,581.939 1658.11,604.377 1658.67,609.463 1659.23,614.01 1659.79,635.189 1660.35,655.212 1660.91,640.547 1661.47,645.155 1662.03,681.063 1662.58,648.583 1663.14,664.286 1663.7,681.708 1664.26,697.528 1664.82,680.268 1665.38,695.175 1665.94,695.411 1666.5,694.418 1667.06,707.786 1667.62,710.521 1668.18,721.518 1668.74,719.234 1669.3,685.526 1669.85,687.777 1670.41,691.199 1670.97,675.692 1671.53,721.635 1672.09,702.797 1672.65,687.645 1673.21,669.075 1673.77,641.37 1674.33,642.648 1674.89,595.566 1675.45,597.857 1676.01,587.864 1676.57,574.456 1677.13,610.417 1677.68,599.306 1678.24,617.741 1678.8,670.793 1679.36,701.929 1679.92,685.052 1680.48,652.166 1681.04,656.113 1681.6,657.798 1682.16,675.204 1682.72,695.014 1683.28,697.509 1683.84,697.858 1684.4,716.301 1684.95,650.593 1685.51,651.117 1686.07,652.889 1686.63,641.028 1687.19,663.023 1687.75,694.518 1688.31,709.021 1688.87,693.388 1689.43,695.074 1689.99,691.621 1690.55,708.336 1691.11,687.824 1691.67,691.27 1692.23,690.255 1692.78,688.974 1693.34,690.886 1693.9,691.375 1694.46,725.16 1695.02,722.114 1695.58,704.85 1696.14,688.321 1696.7,639.341 1697.26,625.587 1697.82,629.482 1698.38,646.229 1698.94,714.04 1699.5,729.105 1700.05,726.316 1700.61,705.079 1701.17,704.887 1701.73,718.972 1702.29,703.65 1702.85,720.247 1703.41,732.338 1703.97,728.693 1704.53,742.866 1705.09,755.213 1705.65,782.212 1706.21,805.93 1706.77,783.19 1707.32,777.967 1707.88,756.049 1708.44,752.727 1709,734.199 1709.56,750.634 1710.12,759.536 1710.68,756.803 1711.24,737.982 1711.8,735.924 1712.36,766.032 1712.92,773.947 1713.48,768.42 1714.04,728.112 1714.6,728.502 1715.15,738.988 1715.71,734.322 1716.27,749.447 1716.83,731.309 1717.39,726.818 1717.95,689.909 1718.51,688.657 1719.07,689.935 1719.63,656.303 1720.19,690.345 1720.75,736.431 1721.31,749.281 1721.87,744.604 1722.42,742.962 1722.98,721.385 1723.54,734.596 1724.1,733.352 1724.66,696.27 1725.22,696.508 1725.78,696.476 1726.34,711.362 1726.9,707.978 1727.46,677.194 1728.02,675.46 1728.58,674.248 1729.14,676.131 1729.69,675.391 1730.25,693.177 1730.81,692.841 1731.37,707.38 1731.93,660.025 1732.49,630.095 1733.05,662.866 1733.61,681.286 1734.17,700.426 1734.73,730.842 1735.29,776.31 1735.85,771.613 1736.41,733.436 1736.97,700.962 1737.52,698.815 1738.08,702.061 1738.64,697.371 1739.2,712.836 1739.76,690.926 1740.32,690.531 1740.88,674.064 1741.44,665.956 1742,702.796 1742.56,682.922 1743.12,663.499 1743.68,662.294 1744.24,662.796 1744.79,645.463 1745.35,646.911 1745.91,611.446 1746.47,633.009 1747.03,621.255 1747.59,641.139 1748.15,710.537 1748.71,710.345 1749.27,706.722 1749.83,691.332 1750.39,676.867 1750.95,675.495 1751.51,689.604 1752.06,688.481 1752.62,688.364 1753.18,674.866 1753.74,642.266 1754.3,645.134 1754.86,614.322 1755.42,600.459 1755.98,635.272 1756.54,666.28 1757.1,682.335 1757.66,682.675 1758.22,688.025 1758.78,675.216 1759.34,675.773 1759.89,693.57 1760.45,676.502 1761.01,639.387 1761.57,626.147 1762.13,630.061 1762.69,634.079 1763.25,619.655 1763.81,623.922 1764.37,639.754 1764.93,662.499 1765.49,666.956 1766.05,652.725 1766.61,654.241 1767.16,638.93 1767.72,639.686 1768.28,644.933 1768.84,628.28 1769.4,629.377 1769.96,630.597 1770.52,637.318 1771.08,640.682 1771.64,643.445 1772.2,612.678 1772.76,647.54 1773.32,649.702 1773.88,623.941 1774.43,628.664 1774.99,632.104 1775.55,621.285 1776.11,623.537 1776.67,628.096 1777.23,634.21 1777.79,654.363 1778.35,657.029 1778.91,675 1779.47,689.033 1780.03,692.288 1780.59,661.673 1781.15,694.391 1781.71,712.182 1782.26,743.108 1782.82,739.643 1783.38,687.492 1783.94,672.153 1784.5,655.461 1785.06,640.986 1785.62,626.757 1786.18,645.014 1786.74,645.443 1787.3,697.291 1787.86,682.067 1788.42,665.856 1788.98,670.834 1789.53,640.244 1790.09,645.052 1790.65,695.965 1791.21,727.268 1791.77,739.281 1792.33,704.769 1792.89,722.021 1793.45,721.841 1794.01,718.044 1794.57,697.825 1795.13,664.494 1795.69,665.598 1796.25,653.455 1796.8,669.555 1797.36,699.911 1797.92,699.022 1798.48,714.076 1799.04,712.141 1799.6,696.85 1800.16,712.55 1800.72,711.239 1801.28,663.344 1801.84,666.925 1802.4,668.773 1802.96,668.008 1803.52,651.974 1804.08,637.819 1804.63,636.463 1805.19,672.433 1805.75,674.543 1806.31,673.331 1806.87,657.774 1807.43,694.51 1807.99,695.533 1808.55,695.693 1809.11,727.762 1809.67,706.925 1810.23,706.934 1810.79,739.233 1811.35,754.535 1811.9,737.368 1812.46,720.65 1813.02,701.696 1813.58,682.885 1814.14,698 1814.7,701.407 1815.26,715.719 1815.82,698.173 1816.38,699.542 1816.94,664.337 1817.5,682.212 1818.06,682.05 1818.62,667.881 1819.18,667.09 1819.73,683.937 1820.29,680.943 1820.85,696.5 1821.41,711.916 1821.97,694.043 1822.53,712.263 1823.09,714.49 1823.65,709.946 1824.21,690.572 1824.77,674.724 1825.33,706.578 1825.89,719.393 1826.45,717.331 1827,717.626 1827.56,702.238 1828.12,701.629 1828.68,667.27 1829.24,683.409 1829.8,669.29 1830.36,721.267 1830.92,657.097 1831.48,643.099 1832.04,646.457 1832.6,682.575 1833.16,663.839 1833.72,681.745 1834.27,698.369 1834.83,681.492 1835.39,730.255 1835.95,746.428 1836.51,757.648 1837.07,705.352 1837.63,705.611 1838.19,717.268 \"/>\n<path clip-path=\"url(#clip543)\" d=\"M720.247 690.611 L720.806 690.611 L721.365 690.611 L721.924 690.611 L722.484 690.611 L723.043 690.611 L723.602 690.611 L724.161 690.611 L724.721 690.611 L725.28 690.611 L725.839 690.611 L726.398 690.611 L726.958 690.611 L727.517 690.611 L728.076 690.611 L728.635 690.611 L729.195 690.611 L729.754 690.611 L730.313 690.611 L730.872 690.611 L731.432 690.611 L731.991 690.611 L732.55 690.611 L733.109 690.611 L733.669 690.611 L734.228 690.611 L734.787 690.611 L735.346 690.611 L735.906 690.611 L736.465 690.611 L737.024 690.611 L737.583 690.611 L738.143 690.611 L738.702 690.611 L739.261 690.611 L739.82 690.611 L740.38 690.611 L740.939 690.611 L741.498 690.611 L742.057 690.611 L742.617 690.611 L743.176 690.611 L743.735 690.611 L744.294 690.611 L744.854 690.611 L745.413 690.611 L745.972 690.611 L746.531 690.611 L747.091 690.611 L747.65 690.611 L748.209 690.611 L748.768 690.611 L749.328 690.611 L749.887 690.611 L750.446 690.611 L751.005 690.611 L751.565 690.611 L752.124 690.611 L752.683 690.611 L753.242 690.611 L753.802 690.611 L754.361 690.611 L754.92 690.611 L755.479 690.611 L756.039 690.611 L756.598 690.611 L757.157 690.611 L757.716 690.611 L758.276 690.611 L758.835 690.611 L759.394 690.611 L759.953 690.611 L760.513 690.611 L761.072 690.611 L761.631 690.611 L762.19 690.611 L762.75 690.611 L763.309 690.611 L763.868 690.611 L764.427 690.611 L764.987 690.611 L765.546 690.611 L766.105 690.611 L766.664 690.611 L767.224 690.611 L767.783 690.611 L768.342 690.611 L768.901 690.611 L769.461 690.611 L770.02 690.611 L770.579 690.611 L771.138 690.611 L771.698 690.611 L772.257 690.611 L772.816 690.611 L773.375 690.611 L773.935 690.611 L774.494 690.611 L775.053 690.611 L775.612 690.611 L776.172 690.611 L776.731 690.611 L777.29 690.611 L777.849 690.611 L778.409 690.611 L778.968 690.611 L779.527 690.611 L780.086 690.611 L780.646 690.611 L781.205 690.611 L781.764 690.611 L782.323 690.611 L782.883 690.611 L783.442 690.611 L784.001 690.611 L784.56 690.611 L785.12 690.611 L785.679 690.611 L786.238 690.611 L786.797 690.611 L787.357 690.611 L787.916 690.611 L788.475 690.611 L789.034 690.611 L789.594 690.611 L790.153 690.611 L790.712 690.611 L791.271 690.611 L791.831 690.611 L792.39 690.611 L792.949 690.611 L793.508 690.611 L794.068 690.611 L794.627 690.611 L795.186 690.611 L795.745 690.611 L796.305 690.611 L796.864 690.611 L797.423 690.611 L797.982 690.611 L798.542 690.611 L799.101 690.611 L799.66 690.611 L800.219 690.611 L800.779 690.611 L801.338 690.611 L801.897 690.611 L802.456 690.611 L803.016 690.611 L803.575 690.611 L804.134 690.611 L804.693 690.611 L805.253 690.611 L805.812 690.611 L806.371 690.611 L806.931 690.611 L807.49 690.611 L808.049 690.611 L808.608 690.611 L809.168 690.611 L809.727 690.611 L810.286 690.611 L810.845 690.611 L811.405 690.611 L811.964 690.611 L812.523 690.611 L813.082 690.611 L813.642 690.611 L814.201 690.611 L814.76 690.611 L815.319 690.611 L815.879 690.611 L816.438 690.611 L816.997 690.611 L817.556 690.611 L818.116 690.611 L818.675 690.611 L819.234 690.611 L819.793 690.611 L820.353 690.611 L820.912 690.611 L821.471 690.611 L822.03 690.611 L822.59 690.611 L823.149 690.611 L823.708 690.611 L824.267 690.611 L824.827 690.611 L825.386 690.611 L825.945 690.611 L826.504 690.611 L827.064 690.611 L827.623 690.611 L828.182 690.611 L828.741 690.611 L829.301 690.611 L829.86 690.611 L830.419 690.611 L830.978 690.611 L831.538 690.611 L832.097 690.611 L832.656 690.611 L833.215 690.611 L833.775 690.611 L834.334 690.611 L834.893 690.611 L835.452 690.611 L836.012 690.611 L836.571 690.611 L837.13 690.611 L837.689 690.611 L838.249 690.611 L838.808 690.611 L839.367 690.611 L839.926 690.611 L840.486 690.611 L841.045 690.611 L841.604 690.611 L842.163 690.611 L842.723 690.611 L843.282 690.611 L843.841 690.611 L844.4 690.611 L844.96 690.611 L845.519 690.611 L846.078 690.611 L846.637 690.611 L847.197 690.611 L847.756 690.611 L848.315 690.611 L848.874 690.611 L849.434 690.611 L849.993 690.611 L850.552 690.611 L851.111 690.611 L851.671 690.611 L852.23 690.611 L852.789 690.611 L853.348 690.611 L853.908 690.611 L854.467 690.611 L855.026 690.611 L855.585 690.611 L856.145 690.611 L856.704 690.611 L857.263 690.611 L857.822 690.611 L858.382 690.611 L858.941 690.611 L859.5 690.611 L860.059 690.611 L860.619 690.611 L861.178 690.611 L861.737 690.611 L862.296 690.611 L862.856 690.611 L863.415 690.611 L863.974 690.611 L864.533 690.611 L865.093 690.611 L865.652 690.611 L866.211 690.611 L866.77 690.611 L867.33 690.611 L867.889 690.611 L868.448 690.611 L869.007 690.611 L869.567 690.611 L870.126 690.611 L870.685 690.611 L871.244 690.611 L871.804 690.611 L872.363 690.611 L872.922 690.611 L873.481 690.611 L874.041 690.611 L874.6 690.611 L875.159 690.611 L875.718 690.611 L876.278 690.611 L876.837 690.611 L877.396 690.611 L877.955 690.611 L878.515 690.611 L879.074 690.611 L879.633 690.611 L880.192 690.611 L880.752 690.611 L881.311 690.611 L881.87 690.611 L882.429 690.611 L882.989 690.611 L883.548 690.611 L884.107 690.611 L884.666 690.611 L885.226 690.611 L885.785 690.611 L886.344 690.611 L886.903 690.611 L887.463 690.611 L888.022 690.611 L888.581 690.611 L889.14 690.611 L889.7 690.611 L890.259 690.611 L890.818 690.611 L891.377 690.611 L891.937 690.611 L892.496 690.611 L893.055 690.611 L893.614 690.611 L894.174 690.611 L894.733 690.611 L895.292 690.611 L895.851 690.611 L896.411 690.611 L896.97 690.611 L897.529 690.611 L898.088 690.611 L898.648 690.611 L899.207 690.611 L899.766 690.611 L900.325 690.611 L900.885 690.611 L901.444 690.611 L902.003 690.611 L902.562 690.611 L903.122 690.611 L903.681 690.611 L904.24 690.611 L904.799 690.611 L905.359 690.611 L905.918 690.611 L906.477 690.611 L907.036 690.611 L907.596 690.611 L908.155 690.611 L908.714 690.611 L909.273 690.611 L909.833 690.611 L910.392 690.611 L910.951 690.611 L911.51 690.611 L912.07 690.611 L912.629 690.611 L913.188 690.611 L913.747 690.611 L914.307 690.611 L914.866 690.611 L915.425 690.611 L915.984 690.611 L916.544 690.611 L917.103 690.611 L917.662 690.611 L918.221 690.611 L918.781 690.611 L919.34 690.611 L919.899 690.611 L920.458 690.611 L921.018 690.611 L921.577 690.611 L922.136 690.611 L922.695 690.611 L923.255 690.611 L923.814 690.611 L924.373 690.611 L924.932 690.611 L925.492 690.611 L926.051 690.611 L926.61 690.611 L927.169 690.611 L927.729 690.611 L928.288 690.611 L928.847 690.611 L929.406 690.611 L929.966 690.611 L930.525 690.611 L931.084 690.611 L931.644 690.611 L932.203 690.611 L932.762 690.611 L933.321 690.611 L933.881 690.611 L934.44 690.611 L934.999 690.611 L935.558 690.611 L936.118 690.611 L936.677 690.611 L937.236 690.611 L937.795 690.611 L938.355 690.611 L938.914 690.611 L939.473 690.611 L940.032 690.611 L940.592 690.611 L941.151 690.611 L941.71 690.611 L942.269 690.611 L942.829 690.611 L943.388 690.611 L943.947 690.611 L944.506 690.611 L945.066 690.611 L945.625 690.611 L946.184 690.611 L946.743 690.611 L947.303 690.611 L947.862 690.611 L948.421 690.611 L948.98 690.611 L949.54 690.611 L950.099 690.611 L950.658 690.611 L951.217 690.611 L951.777 690.611 L952.336 690.611 L952.895 690.611 L953.454 690.611 L954.014 690.611 L954.573 690.611 L955.132 690.611 L955.691 690.611 L956.251 690.611 L956.81 690.611 L957.369 690.611 L957.928 690.611 L958.488 690.611 L959.047 690.611 L959.606 690.611 L960.165 690.611 L960.725 690.611 L961.284 690.611 L961.843 690.611 L962.402 690.611 L962.962 690.611 L963.521 690.611 L964.08 690.611 L964.639 690.611 L965.199 690.611 L965.758 690.611 L966.317 690.611 L966.876 690.611 L967.436 690.611 L967.995 690.611 L968.554 690.611 L969.113 690.611 L969.673 690.611 L970.232 690.611 L970.791 690.611 L971.35 690.611 L971.91 690.611 L972.469 690.611 L973.028 690.611 L973.587 690.611 L974.147 690.611 L974.706 690.611 L975.265 690.611 L975.824 690.611 L976.384 690.611 L976.943 690.611 L977.502 690.611 L978.061 690.611 L978.621 690.611 L979.18 690.611 L979.739 690.611 L980.298 690.611 L980.858 690.611 L981.417 690.611 L981.976 690.611 L982.535 690.611 L983.095 690.611 L983.654 690.611 L984.213 690.611 L984.772 690.611 L985.332 690.611 L985.891 690.611 L986.45 690.611 L987.009 690.611 L987.569 690.611 L988.128 690.611 L988.687 690.611 L989.246 690.611 L989.806 690.611 L990.365 690.611 L990.924 690.611 L991.483 690.611 L992.043 690.611 L992.602 690.611 L993.161 690.611 L993.72 690.611 L994.28 690.611 L994.839 690.611 L995.398 690.611 L995.957 690.611 L996.517 690.611 L997.076 690.611 L997.635 690.611 L998.194 690.611 L998.754 690.611 L999.313 690.611 L999.872 690.611 L1000.43 690.611 L1000.99 690.611 L1001.55 690.611 L1002.11 690.611 L1002.67 690.611 L1003.23 690.611 L1003.79 690.611 L1004.35 690.611 L1004.91 690.611 L1005.46 690.611 L1006.02 690.611 L1006.58 690.611 L1007.14 690.611 L1007.7 690.611 L1008.26 690.611 L1008.82 690.611 L1009.38 690.611 L1009.94 690.611 L1010.5 690.611 L1011.06 690.611 L1011.62 690.611 L1012.18 690.611 L1012.73 690.611 L1013.29 690.611 L1013.85 690.611 L1014.41 690.611 L1014.97 690.611 L1015.53 690.611 L1016.09 690.611 L1016.65 690.611 L1017.21 690.611 L1017.77 690.611 L1018.33 690.611 L1018.89 690.611 L1019.45 690.611 L1020.01 690.611 L1020.56 690.611 L1021.12 690.611 L1021.68 690.611 L1022.24 690.611 L1022.8 690.611 L1023.36 690.611 L1023.92 690.611 L1024.48 690.611 L1025.04 690.611 L1025.6 690.611 L1026.16 690.611 L1026.72 690.611 L1027.28 690.611 L1027.83 690.611 L1028.39 690.611 L1028.95 690.611 L1029.51 690.611 L1030.07 690.611 L1030.63 690.611 L1031.19 690.611 L1031.75 690.611 L1032.31 690.611 L1032.87 690.611 L1033.43 690.611 L1033.99 690.611 L1034.55 690.611 L1035.1 690.611 L1035.66 690.611 L1036.22 690.611 L1036.78 690.611 L1037.34 690.611 L1037.9 690.611 L1038.46 690.611 L1039.02 690.611 L1039.58 690.611 L1040.14 690.611 L1040.7 690.611 L1041.26 690.611 L1041.82 690.611 L1042.38 690.611 L1042.93 690.611 L1043.49 690.611 L1044.05 690.611 L1044.61 690.611 L1045.17 690.611 L1045.73 690.611 L1046.29 690.611 L1046.85 690.611 L1047.41 690.611 L1047.97 690.611 L1048.53 690.611 L1049.09 690.611 L1049.65 690.611 L1050.2 690.611 L1050.76 690.611 L1051.32 690.611 L1051.88 690.611 L1052.44 690.611 L1053 690.611 L1053.56 690.611 L1054.12 690.611 L1054.68 690.611 L1055.24 690.611 L1055.8 690.611 L1056.36 690.611 L1056.92 690.611 L1057.48 690.611 L1058.03 690.611 L1058.59 690.611 L1059.15 690.611 L1059.71 690.611 L1060.27 690.611 L1060.83 690.611 L1061.39 690.611 L1061.95 690.611 L1062.51 690.611 L1063.07 690.611 L1063.63 690.611 L1064.19 690.611 L1064.75 690.611 L1065.3 690.611 L1065.86 690.611 L1066.42 690.611 L1066.98 690.611 L1067.54 690.611 L1068.1 690.611 L1068.66 690.611 L1069.22 690.611 L1069.78 690.611 L1070.34 690.611 L1070.9 690.611 L1071.46 690.611 L1072.02 690.611 L1072.57 690.611 L1073.13 690.611 L1073.69 690.611 L1074.25 690.611 L1074.81 690.611 L1075.37 690.611 L1075.93 690.611 L1076.49 690.611 L1077.05 690.611 L1077.61 690.611 L1078.17 690.611 L1078.73 690.611 L1079.29 690.611 L1079.85 690.611 L1080.4 690.611 L1080.96 690.611 L1081.52 690.611 L1082.08 690.611 L1082.64 690.611 L1083.2 690.611 L1083.76 690.611 L1084.32 690.611 L1084.88 690.611 L1085.44 690.611 L1086 690.611 L1086.56 690.611 L1087.12 690.611 L1087.67 690.611 L1088.23 690.611 L1088.79 690.611 L1089.35 690.611 L1089.91 690.611 L1090.47 690.611 L1091.03 690.611 L1091.59 690.611 L1092.15 690.611 L1092.71 690.611 L1093.27 690.611 L1093.83 690.611 L1094.39 690.611 L1094.94 690.611 L1095.5 690.611 L1096.06 690.611 L1096.62 690.611 L1097.18 690.611 L1097.74 690.611 L1098.3 690.611 L1098.86 690.611 L1099.42 690.611 L1099.98 690.611 L1100.54 690.611 L1101.1 690.611 L1101.66 690.611 L1102.22 690.611 L1102.77 690.611 L1103.33 690.611 L1103.89 690.611 L1104.45 690.611 L1105.01 690.611 L1105.57 690.611 L1106.13 690.611 L1106.69 690.611 L1107.25 690.611 L1107.81 690.611 L1108.37 690.611 L1108.93 690.611 L1109.49 690.611 L1110.04 690.611 L1110.6 690.611 L1111.16 690.611 L1111.72 690.611 L1112.28 690.611 L1112.84 690.611 L1113.4 690.611 L1113.96 690.611 L1114.52 690.611 L1115.08 690.611 L1115.64 690.611 L1116.2 690.611 L1116.76 690.611 L1117.31 690.611 L1117.87 690.611 L1118.43 690.611 L1118.99 690.611 L1119.55 690.611 L1120.11 690.611 L1120.67 690.611 L1121.23 690.611 L1121.79 690.611 L1122.35 690.611 L1122.91 690.611 L1123.47 690.611 L1124.03 690.611 L1124.59 690.611 L1125.14 690.611 L1125.7 690.611 L1126.26 690.611 L1126.82 690.611 L1127.38 690.611 L1127.94 690.611 L1128.5 690.611 L1129.06 690.611 L1129.62 690.611 L1130.18 690.611 L1130.74 690.611 L1131.3 690.611 L1131.86 690.611 L1132.41 690.611 L1132.97 690.611 L1133.53 690.611 L1134.09 690.611 L1134.65 690.611 L1135.21 690.611 L1135.77 690.611 L1136.33 690.611 L1136.89 690.611 L1137.45 690.611 L1138.01 690.611 L1138.57 690.611 L1139.13 690.611 L1139.68 690.611 L1140.24 690.611 L1140.8 690.611 L1141.36 690.611 L1141.92 690.611 L1142.48 690.611 L1143.04 690.611 L1143.6 690.611 L1144.16 690.611 L1144.72 690.611 L1145.28 690.611 L1145.84 690.611 L1146.4 690.611 L1146.96 690.611 L1147.51 690.611 L1148.07 690.611 L1148.63 690.611 L1149.19 690.611 L1149.75 690.611 L1150.31 690.611 L1150.87 690.611 L1151.43 690.611 L1151.99 690.611 L1152.55 690.611 L1153.11 690.611 L1153.67 690.611 L1154.23 690.611 L1154.78 690.611 L1155.34 690.611 L1155.9 690.611 L1156.46 690.611 L1157.02 690.611 L1157.58 690.611 L1158.14 690.611 L1158.7 690.611 L1159.26 690.611 L1159.82 690.611 L1160.38 690.611 L1160.94 690.611 L1161.5 690.611 L1162.05 690.611 L1162.61 690.611 L1163.17 690.611 L1163.73 690.611 L1164.29 690.611 L1164.85 690.611 L1165.41 690.611 L1165.97 690.611 L1166.53 690.611 L1167.09 690.611 L1167.65 690.611 L1168.21 690.611 L1168.77 690.611 L1169.33 690.611 L1169.88 690.611 L1170.44 690.611 L1171 690.611 L1171.56 690.611 L1172.12 690.611 L1172.68 690.611 L1173.24 690.611 L1173.8 690.611 L1174.36 690.611 L1174.92 690.611 L1175.48 690.611 L1176.04 690.611 L1176.6 690.611 L1177.15 690.611 L1177.71 690.611 L1178.27 690.611 L1178.83 690.611 L1179.39 690.611 L1179.95 690.611 L1180.51 690.611 L1181.07 690.611 L1181.63 690.611 L1182.19 690.611 L1182.75 690.611 L1183.31 690.611 L1183.87 690.611 L1184.43 690.611 L1184.98 690.611 L1185.54 690.611 L1186.1 690.611 L1186.66 690.611 L1187.22 690.611 L1187.78 690.611 L1188.34 690.611 L1188.9 690.611 L1189.46 690.611 L1190.02 690.611 L1190.58 690.611 L1191.14 690.611 L1191.7 690.611 L1192.25 690.611 L1192.81 690.611 L1193.37 690.611 L1193.93 690.611 L1194.49 690.611 L1195.05 690.611 L1195.61 690.611 L1196.17 690.611 L1196.73 690.611 L1197.29 690.611 L1197.85 690.611 L1198.41 690.611 L1198.97 690.611 L1199.52 690.611 L1200.08 690.611 L1200.64 690.611 L1201.2 690.611 L1201.76 690.611 L1202.32 690.611 L1202.88 690.611 L1203.44 690.611 L1204 690.611 L1204.56 690.611 L1205.12 690.611 L1205.68 690.611 L1206.24 690.611 L1206.8 690.611 L1207.35 690.611 L1207.91 690.611 L1208.47 690.611 L1209.03 690.611 L1209.59 690.611 L1210.15 690.611 L1210.71 690.611 L1211.27 690.611 L1211.83 690.611 L1212.39 690.611 L1212.95 690.611 L1213.51 690.611 L1214.07 690.611 L1214.62 690.611 L1215.18 690.611 L1215.74 690.611 L1216.3 690.611 L1216.86 690.611 L1217.42 690.611 L1217.98 690.611 L1218.54 690.611 L1219.1 690.611 L1219.66 690.611 L1220.22 690.611 L1220.78 690.611 L1221.34 690.611 L1221.89 690.611 L1222.45 690.611 L1223.01 690.611 L1223.57 690.611 L1224.13 690.611 L1224.69 690.611 L1225.25 690.611 L1225.81 690.611 L1226.37 690.611 L1226.93 690.611 L1227.49 690.611 L1228.05 690.611 L1228.61 690.611 L1229.17 690.611 L1229.72 690.611 L1230.28 690.611 L1230.84 690.611 L1231.4 690.611 L1231.96 690.611 L1232.52 690.611 L1233.08 690.611 L1233.64 690.611 L1234.2 690.611 L1234.76 690.611 L1235.32 690.611 L1235.88 690.611 L1236.44 690.611 L1236.99 690.611 L1237.55 690.611 L1238.11 690.611 L1238.67 690.611 L1239.23 690.611 L1239.79 690.611 L1240.35 690.611 L1240.91 690.611 L1241.47 690.611 L1242.03 690.611 L1242.59 690.611 L1243.15 690.611 L1243.71 690.611 L1244.26 690.611 L1244.82 690.611 L1245.38 690.611 L1245.94 690.611 L1246.5 690.611 L1247.06 690.611 L1247.62 690.611 L1248.18 690.611 L1248.74 690.611 L1249.3 690.611 L1249.86 690.611 L1250.42 690.611 L1250.98 690.611 L1251.54 690.611 L1252.09 690.611 L1252.65 690.611 L1253.21 690.611 L1253.77 690.611 L1254.33 690.611 L1254.89 690.611 L1255.45 690.611 L1256.01 690.611 L1256.57 690.611 L1257.13 690.611 L1257.69 690.611 L1258.25 690.611 L1258.81 690.611 L1259.36 690.611 L1259.92 690.611 L1260.48 690.611 L1261.04 690.611 L1261.6 690.611 L1262.16 690.611 L1262.72 690.611 L1263.28 690.611 L1263.84 690.611 L1264.4 690.611 L1264.96 690.611 L1265.52 690.611 L1266.08 690.611 L1266.63 690.611 L1267.19 690.611 L1267.75 690.611 L1268.31 690.611 L1268.87 690.611 L1269.43 690.611 L1269.99 690.611 L1270.55 690.611 L1271.11 690.611 L1271.67 690.611 L1272.23 690.611 L1272.79 690.611 L1273.35 690.611 L1273.91 690.611 L1274.46 690.611 L1275.02 690.611 L1275.58 690.611 L1276.14 690.611 L1276.7 690.611 L1277.26 690.611 L1277.82 690.611 L1278.38 690.611 L1278.94 690.611 L1279.5 690.611 L1280.06 690.611 L1280.62 690.611 L1281.18 690.611 L1281.73 690.611 L1282.29 690.611 L1282.85 690.611 L1283.41 690.611 L1283.97 690.611 L1284.53 690.611 L1285.09 690.611 L1285.65 690.611 L1286.21 690.611 L1286.77 690.611 L1287.33 690.611 L1287.89 690.611 L1288.45 690.611 L1289 690.611 L1289.56 690.611 L1290.12 690.611 L1290.68 690.611 L1291.24 690.611 L1291.8 690.611 L1292.36 690.611 L1292.92 690.611 L1293.48 690.611 L1294.04 690.611 L1294.6 690.611 L1295.16 690.611 L1295.72 690.611 L1296.28 690.611 L1296.83 690.611 L1297.39 690.611 L1297.95 690.611 L1298.51 690.611 L1299.07 690.611 L1299.63 690.611 L1300.19 690.611 L1300.75 690.611 L1301.31 690.611 L1301.87 690.611 L1302.43 690.611 L1302.99 690.611 L1303.55 690.611 L1304.1 690.611 L1304.66 690.611 L1305.22 690.611 L1305.78 690.611 L1306.34 690.611 L1306.9 690.611 L1307.46 690.611 L1308.02 690.611 L1308.58 690.611 L1309.14 690.611 L1309.7 690.611 L1310.26 690.611 L1310.82 690.611 L1311.38 690.611 L1311.93 690.611 L1312.49 690.611 L1313.05 690.611 L1313.61 690.611 L1314.17 690.611 L1314.73 690.611 L1315.29 690.611 L1315.85 690.611 L1316.41 690.611 L1316.97 690.611 L1317.53 690.611 L1318.09 690.611 L1318.65 690.611 L1319.2 690.611 L1319.76 690.611 L1320.32 690.611 L1320.88 690.611 L1321.44 690.611 L1322 690.611 L1322.56 690.611 L1323.12 690.611 L1323.68 690.611 L1324.24 690.611 L1324.8 690.611 L1325.36 690.611 L1325.92 690.611 L1326.47 690.611 L1327.03 690.611 L1327.59 690.611 L1328.15 690.611 L1328.71 690.611 L1329.27 690.611 L1329.83 690.611 L1330.39 690.611 L1330.95 690.611 L1331.51 690.611 L1332.07 690.611 L1332.63 690.611 L1333.19 690.611 L1333.75 690.611 L1334.3 690.611 L1334.86 690.611 L1335.42 690.611 L1335.98 690.611 L1336.54 690.611 L1337.1 690.611 L1337.66 690.611 L1338.22 690.611 L1338.78 690.611 L1339.34 690.611 L1339.9 690.611 L1340.46 690.611 L1341.02 690.611 L1341.57 690.611 L1342.13 690.611 L1342.69 690.611 L1343.25 690.611 L1343.81 690.611 L1344.37 690.611 L1344.93 690.611 L1345.49 690.611 L1346.05 690.611 L1346.61 690.611 L1347.17 690.611 L1347.73 690.611 L1348.29 690.611 L1348.84 690.611 L1349.4 690.611 L1349.96 690.611 L1350.52 690.611 L1351.08 690.611 L1351.64 690.611 L1352.2 690.611 L1352.76 690.611 L1353.32 690.611 L1353.88 690.611 L1354.44 690.611 L1355 690.611 L1355.56 690.611 L1356.12 690.611 L1356.67 690.611 L1357.23 690.611 L1357.79 690.611 L1358.35 690.611 L1358.91 690.611 L1359.47 690.611 L1360.03 690.611 L1360.59 690.611 L1361.15 690.611 L1361.71 690.611 L1362.27 690.611 L1362.83 690.611 L1363.39 690.611 L1363.94 690.611 L1364.5 690.611 L1365.06 690.611 L1365.62 690.611 L1366.18 690.611 L1366.74 690.611 L1367.3 690.611 L1367.86 690.611 L1368.42 690.611 L1368.98 690.611 L1369.54 690.611 L1370.1 690.611 L1370.66 690.611 L1371.21 690.611 L1371.77 690.611 L1372.33 690.611 L1372.89 690.611 L1373.45 690.611 L1374.01 690.611 L1374.57 690.611 L1375.13 690.611 L1375.69 690.611 L1376.25 690.611 L1376.81 690.611 L1377.37 690.611 L1377.93 690.611 L1378.49 690.611 L1379.04 690.611 L1379.6 690.611 L1380.16 690.611 L1380.72 690.611 L1381.28 690.611 L1381.84 690.611 L1382.4 690.611 L1382.96 690.611 L1383.52 690.611 L1384.08 690.611 L1384.64 690.611 L1385.2 690.611 L1385.76 690.611 L1386.31 690.611 L1386.87 690.611 L1387.43 690.611 L1387.99 690.611 L1388.55 690.611 L1389.11 690.611 L1389.67 690.611 L1390.23 690.611 L1390.79 690.611 L1391.35 690.611 L1391.91 690.611 L1392.47 690.611 L1393.03 690.611 L1393.58 690.611 L1394.14 690.611 L1394.7 690.611 L1395.26 690.611 L1395.82 690.611 L1396.38 690.611 L1396.94 690.611 L1397.5 690.611 L1398.06 690.611 L1398.62 690.611 L1399.18 690.611 L1399.74 690.611 L1400.3 690.611 L1400.86 690.611 L1401.41 690.611 L1401.97 690.611 L1402.53 690.611 L1403.09 690.611 L1403.65 690.611 L1404.21 690.611 L1404.77 690.611 L1405.33 690.611 L1405.89 690.611 L1406.45 690.611 L1407.01 690.611 L1407.57 690.611 L1408.13 690.611 L1408.68 690.611 L1409.24 690.611 L1409.8 690.611 L1410.36 690.611 L1410.92 690.611 L1411.48 690.611 L1412.04 690.611 L1412.6 690.611 L1413.16 690.611 L1413.72 690.611 L1414.28 690.611 L1414.84 690.611 L1415.4 690.611 L1415.95 690.611 L1416.51 690.611 L1417.07 690.611 L1417.63 690.611 L1418.19 690.611 L1418.75 690.611 L1419.31 690.611 L1419.87 690.611 L1420.43 690.611 L1420.99 690.611 L1421.55 690.611 L1422.11 690.611 L1422.67 690.611 L1423.23 690.611 L1423.78 690.611 L1424.34 690.611 L1424.9 690.611 L1425.46 690.611 L1426.02 690.611 L1426.58 690.611 L1427.14 690.611 L1427.7 690.611 L1428.26 690.611 L1428.82 690.611 L1429.38 690.611 L1429.94 690.611 L1430.5 690.611 L1431.05 690.611 L1431.61 690.611 L1432.17 690.611 L1432.73 690.611 L1433.29 690.611 L1433.85 690.611 L1434.41 690.611 L1434.97 690.611 L1435.53 690.611 L1436.09 690.611 L1436.65 690.611 L1437.21 690.611 L1437.77 690.611 L1438.33 690.611 L1438.88 690.611 L1439.44 690.611 L1440 690.611 L1440.56 690.611 L1441.12 690.611 L1441.68 690.611 L1442.24 690.611 L1442.8 690.611 L1443.36 690.611 L1443.92 690.611 L1444.48 690.611 L1445.04 690.611 L1445.6 690.611 L1446.15 690.611 L1446.71 690.611 L1447.27 690.611 L1447.83 690.611 L1448.39 690.611 L1448.95 690.611 L1449.51 690.611 L1450.07 690.611 L1450.63 690.611 L1451.19 690.611 L1451.75 690.611 L1452.31 690.611 L1452.87 690.611 L1453.42 690.611 L1453.98 690.611 L1454.54 690.611 L1455.1 690.611 L1455.66 690.611 L1456.22 690.611 L1456.78 690.611 L1457.34 690.611 L1457.9 690.611 L1458.46 690.611 L1459.02 690.611 L1459.58 690.611 L1460.14 690.611 L1460.7 690.611 L1461.25 690.611 L1461.81 690.611 L1462.37 690.611 L1462.93 690.611 L1463.49 690.611 L1464.05 690.611 L1464.61 690.611 L1465.17 690.611 L1465.73 690.611 L1466.29 690.611 L1466.85 690.611 L1467.41 690.611 L1467.97 690.611 L1468.52 690.611 L1469.08 690.611 L1469.64 690.611 L1470.2 690.611 L1470.76 690.611 L1471.32 690.611 L1471.88 690.611 L1472.44 690.611 L1473 690.611 L1473.56 690.611 L1474.12 690.611 L1474.68 690.611 L1475.24 690.611 L1475.79 690.611 L1476.35 690.611 L1476.91 690.611 L1477.47 690.611 L1478.03 690.611 L1478.59 690.611 L1479.15 690.611 L1479.71 690.611 L1480.27 690.611 L1480.83 690.611 L1481.39 690.611 L1481.95 690.611 L1482.51 690.611 L1483.07 690.611 L1483.62 690.611 L1484.18 690.611 L1484.74 690.611 L1485.3 690.611 L1485.86 690.611 L1486.42 690.611 L1486.98 690.611 L1487.54 690.611 L1488.1 690.611 L1488.66 690.611 L1489.22 690.611 L1489.78 690.611 L1490.34 690.611 L1490.89 690.611 L1491.45 690.611 L1492.01 690.611 L1492.57 690.611 L1493.13 690.611 L1493.69 690.611 L1494.25 690.611 L1494.81 690.611 L1495.37 690.611 L1495.93 690.611 L1496.49 690.611 L1497.05 690.611 L1497.61 690.611 L1498.16 690.611 L1498.72 690.611 L1499.28 690.611 L1499.84 690.611 L1500.4 690.611 L1500.96 690.611 L1501.52 690.611 L1502.08 690.611 L1502.64 690.611 L1503.2 690.611 L1503.76 690.611 L1504.32 690.611 L1504.88 690.611 L1505.44 690.611 L1505.99 690.611 L1506.55 690.611 L1507.11 690.611 L1507.67 690.611 L1508.23 690.611 L1508.79 690.611 L1509.35 690.611 L1509.91 690.611 L1510.47 690.611 L1511.03 690.611 L1511.59 690.611 L1512.15 690.611 L1512.71 690.611 L1513.26 690.611 L1513.82 690.611 L1514.38 690.611 L1514.94 690.611 L1515.5 690.611 L1516.06 690.611 L1516.62 690.611 L1517.18 690.611 L1517.74 690.611 L1518.3 690.611 L1518.86 690.611 L1519.42 690.611 L1519.98 690.611 L1520.53 690.611 L1521.09 690.611 L1521.65 690.611 L1522.21 690.611 L1522.77 690.611 L1523.33 690.611 L1523.89 690.611 L1524.45 690.611 L1525.01 690.611 L1525.57 690.611 L1526.13 690.611 L1526.69 690.611 L1527.25 690.611 L1527.81 690.611 L1528.36 690.611 L1528.92 690.611 L1529.48 690.611 L1530.04 690.611 L1530.6 690.611 L1531.16 690.611 L1531.72 690.611 L1532.28 690.611 L1532.84 690.611 L1533.4 690.611 L1533.96 690.611 L1534.52 690.611 L1535.08 690.611 L1535.63 690.611 L1536.19 690.611 L1536.75 690.611 L1537.31 690.611 L1537.87 690.611 L1538.43 690.611 L1538.99 690.611 L1539.55 690.611 L1540.11 690.611 L1540.67 690.611 L1541.23 690.611 L1541.79 690.611 L1542.35 690.611 L1542.9 690.611 L1543.46 690.611 L1544.02 690.611 L1544.58 690.611 L1545.14 690.611 L1545.7 690.611 L1546.26 690.611 L1546.82 690.611 L1547.38 690.611 L1547.94 690.611 L1548.5 690.611 L1549.06 690.611 L1549.62 690.611 L1550.18 690.611 L1550.73 690.611 L1551.29 690.611 L1551.85 690.611 L1552.41 690.611 L1552.97 690.611 L1553.53 690.611 L1554.09 690.611 L1554.65 690.611 L1555.21 690.611 L1555.77 690.611 L1556.33 690.611 L1556.89 690.611 L1557.45 690.611 L1558 690.611 L1558.56 690.611 L1559.12 690.611 L1559.68 690.611 L1560.24 690.611 L1560.8 690.611 L1561.36 690.611 L1561.92 690.611 L1562.48 690.611 L1563.04 690.611 L1563.6 690.611 L1564.16 690.611 L1564.72 690.611 L1565.28 690.611 L1565.83 690.611 L1566.39 690.611 L1566.95 690.611 L1567.51 690.611 L1568.07 690.611 L1568.63 690.611 L1569.19 690.611 L1569.75 690.611 L1570.31 690.611 L1570.87 690.611 L1571.43 690.611 L1571.99 690.611 L1572.55 690.611 L1573.1 690.611 L1573.66 690.611 L1574.22 690.611 L1574.78 690.611 L1575.34 690.611 L1575.9 690.611 L1576.46 690.611 L1577.02 690.611 L1577.58 690.611 L1578.14 690.611 L1578.7 690.611 L1579.26 690.611 L1579.82 690.611 L1580.37 690.611 L1580.93 690.611 L1581.49 690.611 L1582.05 690.611 L1582.61 690.611 L1583.17 690.611 L1583.73 690.611 L1584.29 690.611 L1584.85 690.611 L1585.41 690.611 L1585.97 690.611 L1586.53 690.611 L1587.09 690.611 L1587.65 690.611 L1588.2 690.611 L1588.76 690.611 L1589.32 690.611 L1589.88 690.611 L1590.44 690.611 L1591 690.611 L1591.56 690.611 L1592.12 690.611 L1592.68 690.611 L1593.24 690.611 L1593.8 690.611 L1594.36 690.611 L1594.92 690.611 L1595.47 690.611 L1596.03 690.611 L1596.59 690.611 L1597.15 690.611 L1597.71 690.611 L1598.27 690.611 L1598.83 690.611 L1599.39 690.611 L1599.95 690.611 L1600.51 690.611 L1601.07 690.611 L1601.63 690.611 L1602.19 690.611 L1602.74 690.611 L1603.3 690.611 L1603.86 690.611 L1604.42 690.611 L1604.98 690.611 L1605.54 690.611 L1606.1 690.611 L1606.66 690.611 L1607.22 690.611 L1607.78 690.611 L1608.34 690.611 L1608.9 690.611 L1609.46 690.611 L1610.02 690.611 L1610.57 690.611 L1611.13 690.611 L1611.69 690.611 L1612.25 690.611 L1612.81 690.611 L1613.37 690.611 L1613.93 690.611 L1614.49 690.611 L1615.05 690.611 L1615.61 690.611 L1616.17 690.611 L1616.73 690.611 L1617.29 690.611 L1617.84 690.611 L1618.4 690.611 L1618.96 690.611 L1619.52 690.611 L1620.08 690.611 L1620.64 690.611 L1621.2 690.611 L1621.76 690.611 L1622.32 690.611 L1622.88 690.611 L1623.44 690.611 L1624 690.611 L1624.56 690.611 L1625.11 690.611 L1625.67 690.611 L1626.23 690.611 L1626.79 690.611 L1627.35 690.611 L1627.91 690.611 L1628.47 690.611 L1629.03 690.611 L1629.59 690.611 L1630.15 690.611 L1630.71 690.611 L1631.27 690.611 L1631.83 690.611 L1632.39 690.611 L1632.94 690.611 L1633.5 690.611 L1634.06 690.611 L1634.62 690.611 L1635.18 690.611 L1635.74 690.611 L1636.3 690.611 L1636.86 690.611 L1637.42 690.611 L1637.98 690.611 L1638.54 690.611 L1639.1 690.611 L1639.66 690.611 L1640.21 690.611 L1640.77 690.611 L1641.33 690.611 L1641.89 690.611 L1642.45 690.611 L1643.01 690.611 L1643.57 690.611 L1644.13 690.611 L1644.69 690.611 L1645.25 690.611 L1645.81 690.611 L1646.37 690.611 L1646.93 690.611 L1647.48 690.611 L1648.04 690.611 L1648.6 690.611 L1649.16 690.611 L1649.72 690.611 L1650.28 690.611 L1650.84 690.611 L1651.4 690.611 L1651.96 690.611 L1652.52 690.611 L1653.08 690.611 L1653.64 690.611 L1654.2 690.611 L1654.76 690.611 L1655.31 690.611 L1655.87 690.611 L1656.43 690.611 L1656.99 690.611 L1657.55 690.611 L1658.11 690.611 L1658.67 690.611 L1659.23 690.611 L1659.79 690.611 L1660.35 690.611 L1660.91 690.611 L1661.47 690.611 L1662.03 690.611 L1662.58 690.611 L1663.14 690.611 L1663.7 690.611 L1664.26 690.611 L1664.82 690.611 L1665.38 690.611 L1665.94 690.611 L1666.5 690.611 L1667.06 690.611 L1667.62 690.611 L1668.18 690.611 L1668.74 690.611 L1669.3 690.611 L1669.85 690.611 L1670.41 690.611 L1670.97 690.611 L1671.53 690.611 L1672.09 690.611 L1672.65 690.611 L1673.21 690.611 L1673.77 690.611 L1674.33 690.611 L1674.89 690.611 L1675.45 690.611 L1676.01 690.611 L1676.57 690.611 L1677.13 690.611 L1677.68 690.611 L1678.24 690.611 L1678.8 690.611 L1679.36 690.611 L1679.92 690.611 L1680.48 690.611 L1681.04 690.611 L1681.6 690.611 L1682.16 690.611 L1682.72 690.611 L1683.28 690.611 L1683.84 690.611 L1684.4 690.611 L1684.95 690.611 L1685.51 690.611 L1686.07 690.611 L1686.63 690.611 L1687.19 690.611 L1687.75 690.611 L1688.31 690.611 L1688.87 690.611 L1689.43 690.611 L1689.99 690.611 L1690.55 690.611 L1691.11 690.611 L1691.67 690.611 L1692.23 690.611 L1692.78 690.611 L1693.34 690.611 L1693.9 690.611 L1694.46 690.611 L1695.02 690.611 L1695.58 690.611 L1696.14 690.611 L1696.7 690.611 L1697.26 690.611 L1697.82 690.611 L1698.38 690.611 L1698.94 690.611 L1699.5 690.611 L1700.05 690.611 L1700.61 690.611 L1701.17 690.611 L1701.73 690.611 L1702.29 690.611 L1702.85 690.611 L1703.41 690.611 L1703.97 690.611 L1704.53 690.611 L1705.09 690.611 L1705.65 690.611 L1706.21 690.611 L1706.77 690.611 L1707.32 690.611 L1707.88 690.611 L1708.44 690.611 L1709 690.611 L1709.56 690.611 L1710.12 690.611 L1710.68 690.611 L1711.24 690.611 L1711.8 690.611 L1712.36 690.611 L1712.92 690.611 L1713.48 690.611 L1714.04 690.611 L1714.6 690.611 L1715.15 690.611 L1715.71 690.611 L1716.27 690.611 L1716.83 690.611 L1717.39 690.611 L1717.95 690.611 L1718.51 690.611 L1719.07 690.611 L1719.63 690.611 L1720.19 690.611 L1720.75 690.611 L1721.31 690.611 L1721.87 690.611 L1722.42 690.611 L1722.98 690.611 L1723.54 690.611 L1724.1 690.611 L1724.66 690.611 L1725.22 690.611 L1725.78 690.611 L1726.34 690.611 L1726.9 690.611 L1727.46 690.611 L1728.02 690.611 L1728.58 690.611 L1729.14 690.611 L1729.69 690.611 L1730.25 690.611 L1730.81 690.611 L1731.37 690.611 L1731.93 690.611 L1732.49 690.611 L1733.05 690.611 L1733.61 690.611 L1734.17 690.611 L1734.73 690.611 L1735.29 690.611 L1735.85 690.611 L1736.41 690.611 L1736.97 690.611 L1737.52 690.611 L1738.08 690.611 L1738.64 690.611 L1739.2 690.611 L1739.76 690.611 L1740.32 690.611 L1740.88 690.611 L1741.44 690.611 L1742 690.611 L1742.56 690.611 L1743.12 690.611 L1743.68 690.611 L1744.24 690.611 L1744.79 690.611 L1745.35 690.611 L1745.91 690.611 L1746.47 690.611 L1747.03 690.611 L1747.59 690.611 L1748.15 690.611 L1748.71 690.611 L1749.27 690.611 L1749.83 690.611 L1750.39 690.611 L1750.95 690.611 L1751.51 690.611 L1752.06 690.611 L1752.62 690.611 L1753.18 690.611 L1753.74 690.611 L1754.3 690.611 L1754.86 690.611 L1755.42 690.611 L1755.98 690.611 L1756.54 690.611 L1757.1 690.611 L1757.66 690.611 L1758.22 690.611 L1758.78 690.611 L1759.34 690.611 L1759.89 690.611 L1760.45 690.611 L1761.01 690.611 L1761.57 690.611 L1762.13 690.611 L1762.69 690.611 L1763.25 690.611 L1763.81 690.611 L1764.37 690.611 L1764.93 690.611 L1765.49 690.611 L1766.05 690.611 L1766.61 690.611 L1767.16 690.611 L1767.72 690.611 L1768.28 690.611 L1768.84 690.611 L1769.4 690.611 L1769.96 690.611 L1770.52 690.611 L1771.08 690.611 L1771.64 690.611 L1772.2 690.611 L1772.76 690.611 L1773.32 690.611 L1773.88 690.611 L1774.43 690.611 L1774.99 690.611 L1775.55 690.611 L1776.11 690.611 L1776.67 690.611 L1777.23 690.611 L1777.79 690.611 L1778.35 690.611 L1778.91 690.611 L1779.47 690.611 L1780.03 690.611 L1780.59 690.611 L1781.15 690.611 L1781.71 690.611 L1782.26 690.611 L1782.82 690.611 L1783.38 690.611 L1783.94 690.611 L1784.5 690.611 L1785.06 690.611 L1785.62 690.611 L1786.18 690.611 L1786.74 690.611 L1787.3 690.611 L1787.86 690.611 L1788.42 690.611 L1788.98 690.611 L1789.53 690.611 L1790.09 690.611 L1790.65 690.611 L1791.21 690.611 L1791.77 690.611 L1792.33 690.611 L1792.89 690.611 L1793.45 690.611 L1794.01 690.611 L1794.57 690.611 L1795.13 690.611 L1795.69 690.611 L1796.25 690.611 L1796.8 690.611 L1797.36 690.611 L1797.92 690.611 L1798.48 690.611 L1799.04 690.611 L1799.6 690.611 L1800.16 690.611 L1800.72 690.611 L1801.28 690.611 L1801.84 690.611 L1802.4 690.611 L1802.96 690.611 L1803.52 690.611 L1804.08 690.611 L1804.63 690.611 L1805.19 690.611 L1805.75 690.611 L1806.31 690.611 L1806.87 690.611 L1807.43 690.611 L1807.99 690.611 L1808.55 690.611 L1809.11 690.611 L1809.67 690.611 L1810.23 690.611 L1810.79 690.611 L1811.35 690.611 L1811.9 690.611 L1812.46 690.611 L1813.02 690.611 L1813.58 690.611 L1814.14 690.611 L1814.7 690.611 L1815.26 690.611 L1815.82 690.611 L1816.38 690.611 L1816.94 690.611 L1817.5 690.611 L1818.06 690.611 L1818.62 690.611 L1819.18 690.611 L1819.73 690.611 L1820.29 690.611 L1820.85 690.611 L1821.41 690.611 L1821.97 690.611 L1822.53 690.611 L1823.09 690.611 L1823.65 690.611 L1824.21 690.611 L1824.77 690.611 L1825.33 690.611 L1825.89 690.611 L1826.45 690.611 L1827 690.611 L1827.56 690.611 L1828.12 690.611 L1828.68 690.611 L1829.24 690.611 L1829.8 690.611 L1830.36 690.611 L1830.92 690.611 L1831.48 690.611 L1832.04 690.611 L1832.6 690.611 L1833.16 690.611 L1833.72 690.611 L1834.27 690.611 L1834.83 690.611 L1835.39 690.611 L1835.95 690.611 L1836.51 690.611 L1837.07 690.611 L1837.63 690.611 L1838.19 690.611 L1838.19 682.13 L1837.63 682.13 L1837.07 682.13 L1836.51 682.13 L1835.95 682.13 L1835.39 682.13 L1834.83 682.13 L1834.27 682.13 L1833.72 682.13 L1833.16 682.13 L1832.6 682.13 L1832.04 682.13 L1831.48 682.13 L1830.92 682.13 L1830.36 682.13 L1829.8 682.13 L1829.24 682.13 L1828.68 682.13 L1828.12 682.13 L1827.56 682.13 L1827 682.13 L1826.45 682.13 L1825.89 682.13 L1825.33 682.13 L1824.77 682.13 L1824.21 682.13 L1823.65 682.13 L1823.09 682.13 L1822.53 682.13 L1821.97 682.13 L1821.41 682.13 L1820.85 682.13 L1820.29 682.13 L1819.73 682.13 L1819.18 682.13 L1818.62 682.13 L1818.06 682.13 L1817.5 682.13 L1816.94 682.13 L1816.38 682.13 L1815.82 682.13 L1815.26 682.13 L1814.7 682.13 L1814.14 682.13 L1813.58 682.13 L1813.02 682.13 L1812.46 682.13 L1811.9 682.13 L1811.35 682.13 L1810.79 682.13 L1810.23 682.13 L1809.67 682.13 L1809.11 682.13 L1808.55 682.13 L1807.99 682.13 L1807.43 682.13 L1806.87 682.13 L1806.31 682.13 L1805.75 682.13 L1805.19 682.13 L1804.63 682.13 L1804.08 682.13 L1803.52 682.13 L1802.96 682.13 L1802.4 682.13 L1801.84 682.13 L1801.28 682.13 L1800.72 682.13 L1800.16 682.13 L1799.6 682.13 L1799.04 682.13 L1798.48 682.13 L1797.92 682.13 L1797.36 682.13 L1796.8 682.13 L1796.25 682.13 L1795.69 682.13 L1795.13 682.13 L1794.57 682.13 L1794.01 682.13 L1793.45 682.13 L1792.89 682.13 L1792.33 682.13 L1791.77 682.13 L1791.21 682.13 L1790.65 682.13 L1790.09 682.13 L1789.53 682.13 L1788.98 682.13 L1788.42 682.13 L1787.86 682.13 L1787.3 682.13 L1786.74 682.13 L1786.18 682.13 L1785.62 682.13 L1785.06 682.13 L1784.5 682.13 L1783.94 682.13 L1783.38 682.13 L1782.82 682.13 L1782.26 682.13 L1781.71 682.13 L1781.15 682.13 L1780.59 682.13 L1780.03 682.13 L1779.47 682.13 L1778.91 682.13 L1778.35 682.13 L1777.79 682.13 L1777.23 682.13 L1776.67 682.13 L1776.11 682.13 L1775.55 682.13 L1774.99 682.13 L1774.43 682.13 L1773.88 682.13 L1773.32 682.13 L1772.76 682.13 L1772.2 682.13 L1771.64 682.13 L1771.08 682.13 L1770.52 682.13 L1769.96 682.13 L1769.4 682.13 L1768.84 682.13 L1768.28 682.13 L1767.72 682.13 L1767.16 682.13 L1766.61 682.13 L1766.05 682.13 L1765.49 682.13 L1764.93 682.13 L1764.37 682.13 L1763.81 682.13 L1763.25 682.13 L1762.69 682.13 L1762.13 682.13 L1761.57 682.13 L1761.01 682.13 L1760.45 682.13 L1759.89 682.13 L1759.34 682.13 L1758.78 682.13 L1758.22 682.13 L1757.66 682.13 L1757.1 682.13 L1756.54 682.13 L1755.98 682.13 L1755.42 682.13 L1754.86 682.13 L1754.3 682.13 L1753.74 682.13 L1753.18 682.13 L1752.62 682.13 L1752.06 682.13 L1751.51 682.13 L1750.95 682.13 L1750.39 682.13 L1749.83 682.13 L1749.27 682.13 L1748.71 682.13 L1748.15 682.13 L1747.59 682.13 L1747.03 682.13 L1746.47 682.13 L1745.91 682.13 L1745.35 682.13 L1744.79 682.13 L1744.24 682.13 L1743.68 682.13 L1743.12 682.13 L1742.56 682.13 L1742 682.13 L1741.44 682.13 L1740.88 682.13 L1740.32 682.13 L1739.76 682.13 L1739.2 682.13 L1738.64 682.13 L1738.08 682.13 L1737.52 682.13 L1736.97 682.13 L1736.41 682.13 L1735.85 682.13 L1735.29 682.13 L1734.73 682.13 L1734.17 682.13 L1733.61 682.13 L1733.05 682.13 L1732.49 682.13 L1731.93 682.13 L1731.37 682.13 L1730.81 682.13 L1730.25 682.13 L1729.69 682.13 L1729.14 682.13 L1728.58 682.13 L1728.02 682.13 L1727.46 682.13 L1726.9 682.13 L1726.34 682.13 L1725.78 682.13 L1725.22 682.13 L1724.66 682.13 L1724.1 682.13 L1723.54 682.13 L1722.98 682.13 L1722.42 682.13 L1721.87 682.13 L1721.31 682.13 L1720.75 682.13 L1720.19 682.13 L1719.63 682.13 L1719.07 682.13 L1718.51 682.13 L1717.95 682.13 L1717.39 682.13 L1716.83 682.13 L1716.27 682.13 L1715.71 682.13 L1715.15 682.13 L1714.6 682.13 L1714.04 682.13 L1713.48 682.13 L1712.92 682.13 L1712.36 682.13 L1711.8 682.13 L1711.24 682.13 L1710.68 682.13 L1710.12 682.13 L1709.56 682.13 L1709 682.13 L1708.44 682.13 L1707.88 682.13 L1707.32 682.13 L1706.77 682.13 L1706.21 682.13 L1705.65 682.13 L1705.09 682.13 L1704.53 682.13 L1703.97 682.13 L1703.41 682.13 L1702.85 682.13 L1702.29 682.13 L1701.73 682.13 L1701.17 682.13 L1700.61 682.13 L1700.05 682.13 L1699.5 682.13 L1698.94 682.13 L1698.38 682.13 L1697.82 682.13 L1697.26 682.13 L1696.7 682.13 L1696.14 682.13 L1695.58 682.13 L1695.02 682.13 L1694.46 682.13 L1693.9 682.13 L1693.34 682.13 L1692.78 682.13 L1692.23 682.13 L1691.67 682.13 L1691.11 682.13 L1690.55 682.13 L1689.99 682.13 L1689.43 682.13 L1688.87 682.13 L1688.31 682.13 L1687.75 682.13 L1687.19 682.13 L1686.63 682.13 L1686.07 682.13 L1685.51 682.13 L1684.95 682.13 L1684.4 682.13 L1683.84 682.13 L1683.28 682.13 L1682.72 682.13 L1682.16 682.13 L1681.6 682.13 L1681.04 682.13 L1680.48 682.13 L1679.92 682.13 L1679.36 682.13 L1678.8 682.13 L1678.24 682.13 L1677.68 682.13 L1677.13 682.13 L1676.57 682.13 L1676.01 682.13 L1675.45 682.13 L1674.89 682.13 L1674.33 682.13 L1673.77 682.13 L1673.21 682.13 L1672.65 682.13 L1672.09 682.13 L1671.53 682.13 L1670.97 682.13 L1670.41 682.13 L1669.85 682.13 L1669.3 682.13 L1668.74 682.13 L1668.18 682.13 L1667.62 682.13 L1667.06 682.13 L1666.5 682.13 L1665.94 682.13 L1665.38 682.13 L1664.82 682.13 L1664.26 682.13 L1663.7 682.13 L1663.14 682.13 L1662.58 682.13 L1662.03 682.13 L1661.47 682.13 L1660.91 682.13 L1660.35 682.13 L1659.79 682.13 L1659.23 682.13 L1658.67 682.13 L1658.11 682.13 L1657.55 682.13 L1656.99 682.13 L1656.43 682.13 L1655.87 682.13 L1655.31 682.13 L1654.76 682.13 L1654.2 682.13 L1653.64 682.13 L1653.08 682.13 L1652.52 682.13 L1651.96 682.13 L1651.4 682.13 L1650.84 682.13 L1650.28 682.13 L1649.72 682.13 L1649.16 682.13 L1648.6 682.13 L1648.04 682.13 L1647.48 682.13 L1646.93 682.13 L1646.37 682.13 L1645.81 682.13 L1645.25 682.13 L1644.69 682.13 L1644.13 682.13 L1643.57 682.13 L1643.01 682.13 L1642.45 682.13 L1641.89 682.13 L1641.33 682.13 L1640.77 682.13 L1640.21 682.13 L1639.66 682.13 L1639.1 682.13 L1638.54 682.13 L1637.98 682.13 L1637.42 682.13 L1636.86 682.13 L1636.3 682.13 L1635.74 682.13 L1635.18 682.13 L1634.62 682.13 L1634.06 682.13 L1633.5 682.13 L1632.94 682.13 L1632.39 682.13 L1631.83 682.13 L1631.27 682.13 L1630.71 682.13 L1630.15 682.13 L1629.59 682.13 L1629.03 682.13 L1628.47 682.13 L1627.91 682.13 L1627.35 682.13 L1626.79 682.13 L1626.23 682.13 L1625.67 682.13 L1625.11 682.13 L1624.56 682.13 L1624 682.13 L1623.44 682.13 L1622.88 682.13 L1622.32 682.13 L1621.76 682.13 L1621.2 682.13 L1620.64 682.13 L1620.08 682.13 L1619.52 682.13 L1618.96 682.13 L1618.4 682.13 L1617.84 682.13 L1617.29 682.13 L1616.73 682.13 L1616.17 682.13 L1615.61 682.13 L1615.05 682.13 L1614.49 682.13 L1613.93 682.13 L1613.37 682.13 L1612.81 682.13 L1612.25 682.13 L1611.69 682.13 L1611.13 682.13 L1610.57 682.13 L1610.02 682.13 L1609.46 682.13 L1608.9 682.13 L1608.34 682.13 L1607.78 682.13 L1607.22 682.13 L1606.66 682.13 L1606.1 682.13 L1605.54 682.13 L1604.98 682.13 L1604.42 682.13 L1603.86 682.13 L1603.3 682.13 L1602.74 682.13 L1602.19 682.13 L1601.63 682.13 L1601.07 682.13 L1600.51 682.13 L1599.95 682.13 L1599.39 682.13 L1598.83 682.13 L1598.27 682.13 L1597.71 682.13 L1597.15 682.13 L1596.59 682.13 L1596.03 682.13 L1595.47 682.13 L1594.92 682.13 L1594.36 682.13 L1593.8 682.13 L1593.24 682.13 L1592.68 682.13 L1592.12 682.13 L1591.56 682.13 L1591 682.13 L1590.44 682.13 L1589.88 682.13 L1589.32 682.13 L1588.76 682.13 L1588.2 682.13 L1587.65 682.13 L1587.09 682.13 L1586.53 682.13 L1585.97 682.13 L1585.41 682.13 L1584.85 682.13 L1584.29 682.13 L1583.73 682.13 L1583.17 682.13 L1582.61 682.13 L1582.05 682.13 L1581.49 682.13 L1580.93 682.13 L1580.37 682.13 L1579.82 682.13 L1579.26 682.13 L1578.7 682.13 L1578.14 682.13 L1577.58 682.13 L1577.02 682.13 L1576.46 682.13 L1575.9 682.13 L1575.34 682.13 L1574.78 682.13 L1574.22 682.13 L1573.66 682.13 L1573.1 682.13 L1572.55 682.13 L1571.99 682.13 L1571.43 682.13 L1570.87 682.13 L1570.31 682.13 L1569.75 682.13 L1569.19 682.13 L1568.63 682.13 L1568.07 682.13 L1567.51 682.13 L1566.95 682.13 L1566.39 682.13 L1565.83 682.13 L1565.28 682.13 L1564.72 682.13 L1564.16 682.13 L1563.6 682.13 L1563.04 682.13 L1562.48 682.13 L1561.92 682.13 L1561.36 682.13 L1560.8 682.13 L1560.24 682.13 L1559.68 682.13 L1559.12 682.13 L1558.56 682.13 L1558 682.13 L1557.45 682.13 L1556.89 682.13 L1556.33 682.13 L1555.77 682.13 L1555.21 682.13 L1554.65 682.13 L1554.09 682.13 L1553.53 682.13 L1552.97 682.13 L1552.41 682.13 L1551.85 682.13 L1551.29 682.13 L1550.73 682.13 L1550.18 682.13 L1549.62 682.13 L1549.06 682.13 L1548.5 682.13 L1547.94 682.13 L1547.38 682.13 L1546.82 682.13 L1546.26 682.13 L1545.7 682.13 L1545.14 682.13 L1544.58 682.13 L1544.02 682.13 L1543.46 682.13 L1542.9 682.13 L1542.35 682.13 L1541.79 682.13 L1541.23 682.13 L1540.67 682.13 L1540.11 682.13 L1539.55 682.13 L1538.99 682.13 L1538.43 682.13 L1537.87 682.13 L1537.31 682.13 L1536.75 682.13 L1536.19 682.13 L1535.63 682.13 L1535.08 682.13 L1534.52 682.13 L1533.96 682.13 L1533.4 682.13 L1532.84 682.13 L1532.28 682.13 L1531.72 682.13 L1531.16 682.13 L1530.6 682.13 L1530.04 682.13 L1529.48 682.13 L1528.92 682.13 L1528.36 682.13 L1527.81 682.13 L1527.25 682.13 L1526.69 682.13 L1526.13 682.13 L1525.57 682.13 L1525.01 682.13 L1524.45 682.13 L1523.89 682.13 L1523.33 682.13 L1522.77 682.13 L1522.21 682.13 L1521.65 682.13 L1521.09 682.13 L1520.53 682.13 L1519.98 682.13 L1519.42 682.13 L1518.86 682.13 L1518.3 682.13 L1517.74 682.13 L1517.18 682.13 L1516.62 682.13 L1516.06 682.13 L1515.5 682.13 L1514.94 682.13 L1514.38 682.13 L1513.82 682.13 L1513.26 682.13 L1512.71 682.13 L1512.15 682.13 L1511.59 682.13 L1511.03 682.13 L1510.47 682.13 L1509.91 682.13 L1509.35 682.13 L1508.79 682.13 L1508.23 682.13 L1507.67 682.13 L1507.11 682.13 L1506.55 682.13 L1505.99 682.13 L1505.44 682.13 L1504.88 682.13 L1504.32 682.13 L1503.76 682.13 L1503.2 682.13 L1502.64 682.13 L1502.08 682.13 L1501.52 682.13 L1500.96 682.13 L1500.4 682.13 L1499.84 682.13 L1499.28 682.13 L1498.72 682.13 L1498.16 682.13 L1497.61 682.13 L1497.05 682.13 L1496.49 682.13 L1495.93 682.13 L1495.37 682.13 L1494.81 682.13 L1494.25 682.13 L1493.69 682.13 L1493.13 682.13 L1492.57 682.13 L1492.01 682.13 L1491.45 682.13 L1490.89 682.13 L1490.34 682.13 L1489.78 682.13 L1489.22 682.13 L1488.66 682.13 L1488.1 682.13 L1487.54 682.13 L1486.98 682.13 L1486.42 682.13 L1485.86 682.13 L1485.3 682.13 L1484.74 682.13 L1484.18 682.13 L1483.62 682.13 L1483.07 682.13 L1482.51 682.13 L1481.95 682.13 L1481.39 682.13 L1480.83 682.13 L1480.27 682.13 L1479.71 682.13 L1479.15 682.13 L1478.59 682.13 L1478.03 682.13 L1477.47 682.13 L1476.91 682.13 L1476.35 682.13 L1475.79 682.13 L1475.24 682.13 L1474.68 682.13 L1474.12 682.13 L1473.56 682.13 L1473 682.13 L1472.44 682.13 L1471.88 682.13 L1471.32 682.13 L1470.76 682.13 L1470.2 682.13 L1469.64 682.13 L1469.08 682.13 L1468.52 682.13 L1467.97 682.13 L1467.41 682.13 L1466.85 682.13 L1466.29 682.13 L1465.73 682.13 L1465.17 682.13 L1464.61 682.13 L1464.05 682.13 L1463.49 682.13 L1462.93 682.13 L1462.37 682.13 L1461.81 682.13 L1461.25 682.13 L1460.7 682.13 L1460.14 682.13 L1459.58 682.13 L1459.02 682.13 L1458.46 682.13 L1457.9 682.13 L1457.34 682.13 L1456.78 682.13 L1456.22 682.13 L1455.66 682.13 L1455.1 682.13 L1454.54 682.13 L1453.98 682.13 L1453.42 682.13 L1452.87 682.13 L1452.31 682.13 L1451.75 682.13 L1451.19 682.13 L1450.63 682.13 L1450.07 682.13 L1449.51 682.13 L1448.95 682.13 L1448.39 682.13 L1447.83 682.13 L1447.27 682.13 L1446.71 682.13 L1446.15 682.13 L1445.6 682.13 L1445.04 682.13 L1444.48 682.13 L1443.92 682.13 L1443.36 682.13 L1442.8 682.13 L1442.24 682.13 L1441.68 682.13 L1441.12 682.13 L1440.56 682.13 L1440 682.13 L1439.44 682.13 L1438.88 682.13 L1438.33 682.13 L1437.77 682.13 L1437.21 682.13 L1436.65 682.13 L1436.09 682.13 L1435.53 682.13 L1434.97 682.13 L1434.41 682.13 L1433.85 682.13 L1433.29 682.13 L1432.73 682.13 L1432.17 682.13 L1431.61 682.13 L1431.05 682.13 L1430.5 682.13 L1429.94 682.13 L1429.38 682.13 L1428.82 682.13 L1428.26 682.13 L1427.7 682.13 L1427.14 682.13 L1426.58 682.13 L1426.02 682.13 L1425.46 682.13 L1424.9 682.13 L1424.34 682.13 L1423.78 682.13 L1423.23 682.13 L1422.67 682.13 L1422.11 682.13 L1421.55 682.13 L1420.99 682.13 L1420.43 682.13 L1419.87 682.13 L1419.31 682.13 L1418.75 682.13 L1418.19 682.13 L1417.63 682.13 L1417.07 682.13 L1416.51 682.13 L1415.95 682.13 L1415.4 682.13 L1414.84 682.13 L1414.28 682.13 L1413.72 682.13 L1413.16 682.13 L1412.6 682.13 L1412.04 682.13 L1411.48 682.13 L1410.92 682.13 L1410.36 682.13 L1409.8 682.13 L1409.24 682.13 L1408.68 682.13 L1408.13 682.13 L1407.57 682.13 L1407.01 682.13 L1406.45 682.13 L1405.89 682.13 L1405.33 682.13 L1404.77 682.13 L1404.21 682.13 L1403.65 682.13 L1403.09 682.13 L1402.53 682.13 L1401.97 682.13 L1401.41 682.13 L1400.86 682.13 L1400.3 682.13 L1399.74 682.13 L1399.18 682.13 L1398.62 682.13 L1398.06 682.13 L1397.5 682.13 L1396.94 682.13 L1396.38 682.13 L1395.82 682.13 L1395.26 682.13 L1394.7 682.13 L1394.14 682.13 L1393.58 682.13 L1393.03 682.13 L1392.47 682.13 L1391.91 682.13 L1391.35 682.13 L1390.79 682.13 L1390.23 682.13 L1389.67 682.13 L1389.11 682.13 L1388.55 682.13 L1387.99 682.13 L1387.43 682.13 L1386.87 682.13 L1386.31 682.13 L1385.76 682.13 L1385.2 682.13 L1384.64 682.13 L1384.08 682.13 L1383.52 682.13 L1382.96 682.13 L1382.4 682.13 L1381.84 682.13 L1381.28 682.13 L1380.72 682.13 L1380.16 682.13 L1379.6 682.13 L1379.04 682.13 L1378.49 682.13 L1377.93 682.13 L1377.37 682.13 L1376.81 682.13 L1376.25 682.13 L1375.69 682.13 L1375.13 682.13 L1374.57 682.13 L1374.01 682.13 L1373.45 682.13 L1372.89 682.13 L1372.33 682.13 L1371.77 682.13 L1371.21 682.13 L1370.66 682.13 L1370.1 682.13 L1369.54 682.13 L1368.98 682.13 L1368.42 682.13 L1367.86 682.13 L1367.3 682.13 L1366.74 682.13 L1366.18 682.13 L1365.62 682.13 L1365.06 682.13 L1364.5 682.13 L1363.94 682.13 L1363.39 682.13 L1362.83 682.13 L1362.27 682.13 L1361.71 682.13 L1361.15 682.13 L1360.59 682.13 L1360.03 682.13 L1359.47 682.13 L1358.91 682.13 L1358.35 682.13 L1357.79 682.13 L1357.23 682.13 L1356.67 682.13 L1356.12 682.13 L1355.56 682.13 L1355 682.13 L1354.44 682.13 L1353.88 682.13 L1353.32 682.13 L1352.76 682.13 L1352.2 682.13 L1351.64 682.13 L1351.08 682.13 L1350.52 682.13 L1349.96 682.13 L1349.4 682.13 L1348.84 682.13 L1348.29 682.13 L1347.73 682.13 L1347.17 682.13 L1346.61 682.13 L1346.05 682.13 L1345.49 682.13 L1344.93 682.13 L1344.37 682.13 L1343.81 682.13 L1343.25 682.13 L1342.69 682.13 L1342.13 682.13 L1341.57 682.13 L1341.02 682.13 L1340.46 682.13 L1339.9 682.13 L1339.34 682.13 L1338.78 682.13 L1338.22 682.13 L1337.66 682.13 L1337.1 682.13 L1336.54 682.13 L1335.98 682.13 L1335.42 682.13 L1334.86 682.13 L1334.3 682.13 L1333.75 682.13 L1333.19 682.13 L1332.63 682.13 L1332.07 682.13 L1331.51 682.13 L1330.95 682.13 L1330.39 682.13 L1329.83 682.13 L1329.27 682.13 L1328.71 682.13 L1328.15 682.13 L1327.59 682.13 L1327.03 682.13 L1326.47 682.13 L1325.92 682.13 L1325.36 682.13 L1324.8 682.13 L1324.24 682.13 L1323.68 682.13 L1323.12 682.13 L1322.56 682.13 L1322 682.13 L1321.44 682.13 L1320.88 682.13 L1320.32 682.13 L1319.76 682.13 L1319.2 682.13 L1318.65 682.13 L1318.09 682.13 L1317.53 682.13 L1316.97 682.13 L1316.41 682.13 L1315.85 682.13 L1315.29 682.13 L1314.73 682.13 L1314.17 682.13 L1313.61 682.13 L1313.05 682.13 L1312.49 682.13 L1311.93 682.13 L1311.38 682.13 L1310.82 682.13 L1310.26 682.13 L1309.7 682.13 L1309.14 682.13 L1308.58 682.13 L1308.02 682.13 L1307.46 682.13 L1306.9 682.13 L1306.34 682.13 L1305.78 682.13 L1305.22 682.13 L1304.66 682.13 L1304.1 682.13 L1303.55 682.13 L1302.99 682.13 L1302.43 682.13 L1301.87 682.13 L1301.31 682.13 L1300.75 682.13 L1300.19 682.13 L1299.63 682.13 L1299.07 682.13 L1298.51 682.13 L1297.95 682.13 L1297.39 682.13 L1296.83 682.13 L1296.28 682.13 L1295.72 682.13 L1295.16 682.13 L1294.6 682.13 L1294.04 682.13 L1293.48 682.13 L1292.92 682.13 L1292.36 682.13 L1291.8 682.13 L1291.24 682.13 L1290.68 682.13 L1290.12 682.13 L1289.56 682.13 L1289 682.13 L1288.45 682.13 L1287.89 682.13 L1287.33 682.13 L1286.77 682.13 L1286.21 682.13 L1285.65 682.13 L1285.09 682.13 L1284.53 682.13 L1283.97 682.13 L1283.41 682.13 L1282.85 682.13 L1282.29 682.13 L1281.73 682.13 L1281.18 682.13 L1280.62 682.13 L1280.06 682.13 L1279.5 682.13 L1278.94 682.13 L1278.38 682.13 L1277.82 682.13 L1277.26 682.13 L1276.7 682.13 L1276.14 682.13 L1275.58 682.13 L1275.02 682.13 L1274.46 682.13 L1273.91 682.13 L1273.35 682.13 L1272.79 682.13 L1272.23 682.13 L1271.67 682.13 L1271.11 682.13 L1270.55 682.13 L1269.99 682.13 L1269.43 682.13 L1268.87 682.13 L1268.31 682.13 L1267.75 682.13 L1267.19 682.13 L1266.63 682.13 L1266.08 682.13 L1265.52 682.13 L1264.96 682.13 L1264.4 682.13 L1263.84 682.13 L1263.28 682.13 L1262.72 682.13 L1262.16 682.13 L1261.6 682.13 L1261.04 682.13 L1260.48 682.13 L1259.92 682.13 L1259.36 682.13 L1258.81 682.13 L1258.25 682.13 L1257.69 682.13 L1257.13 682.13 L1256.57 682.13 L1256.01 682.13 L1255.45 682.13 L1254.89 682.13 L1254.33 682.13 L1253.77 682.13 L1253.21 682.13 L1252.65 682.13 L1252.09 682.13 L1251.54 682.13 L1250.98 682.13 L1250.42 682.13 L1249.86 682.13 L1249.3 682.13 L1248.74 682.13 L1248.18 682.13 L1247.62 682.13 L1247.06 682.13 L1246.5 682.13 L1245.94 682.13 L1245.38 682.13 L1244.82 682.13 L1244.26 682.13 L1243.71 682.13 L1243.15 682.13 L1242.59 682.13 L1242.03 682.13 L1241.47 682.13 L1240.91 682.13 L1240.35 682.13 L1239.79 682.13 L1239.23 682.13 L1238.67 682.13 L1238.11 682.13 L1237.55 682.13 L1236.99 682.13 L1236.44 682.13 L1235.88 682.13 L1235.32 682.13 L1234.76 682.13 L1234.2 682.13 L1233.64 682.13 L1233.08 682.13 L1232.52 682.13 L1231.96 682.13 L1231.4 682.13 L1230.84 682.13 L1230.28 682.13 L1229.72 682.13 L1229.17 682.13 L1228.61 682.13 L1228.05 682.13 L1227.49 682.13 L1226.93 682.13 L1226.37 682.13 L1225.81 682.13 L1225.25 682.13 L1224.69 682.13 L1224.13 682.13 L1223.57 682.13 L1223.01 682.13 L1222.45 682.13 L1221.89 682.13 L1221.34 682.13 L1220.78 682.13 L1220.22 682.13 L1219.66 682.13 L1219.1 682.13 L1218.54 682.13 L1217.98 682.13 L1217.42 682.13 L1216.86 682.13 L1216.3 682.13 L1215.74 682.13 L1215.18 682.13 L1214.62 682.13 L1214.07 682.13 L1213.51 682.13 L1212.95 682.13 L1212.39 682.13 L1211.83 682.13 L1211.27 682.13 L1210.71 682.13 L1210.15 682.13 L1209.59 682.13 L1209.03 682.13 L1208.47 682.13 L1207.91 682.13 L1207.35 682.13 L1206.8 682.13 L1206.24 682.13 L1205.68 682.13 L1205.12 682.13 L1204.56 682.13 L1204 682.13 L1203.44 682.13 L1202.88 682.13 L1202.32 682.13 L1201.76 682.13 L1201.2 682.13 L1200.64 682.13 L1200.08 682.13 L1199.52 682.13 L1198.97 682.13 L1198.41 682.13 L1197.85 682.13 L1197.29 682.13 L1196.73 682.13 L1196.17 682.13 L1195.61 682.13 L1195.05 682.13 L1194.49 682.13 L1193.93 682.13 L1193.37 682.13 L1192.81 682.13 L1192.25 682.13 L1191.7 682.13 L1191.14 682.13 L1190.58 682.13 L1190.02 682.13 L1189.46 682.13 L1188.9 682.13 L1188.34 682.13 L1187.78 682.13 L1187.22 682.13 L1186.66 682.13 L1186.1 682.13 L1185.54 682.13 L1184.98 682.13 L1184.43 682.13 L1183.87 682.13 L1183.31 682.13 L1182.75 682.13 L1182.19 682.13 L1181.63 682.13 L1181.07 682.13 L1180.51 682.13 L1179.95 682.13 L1179.39 682.13 L1178.83 682.13 L1178.27 682.13 L1177.71 682.13 L1177.15 682.13 L1176.6 682.13 L1176.04 682.13 L1175.48 682.13 L1174.92 682.13 L1174.36 682.13 L1173.8 682.13 L1173.24 682.13 L1172.68 682.13 L1172.12 682.13 L1171.56 682.13 L1171 682.13 L1170.44 682.13 L1169.88 682.13 L1169.33 682.13 L1168.77 682.13 L1168.21 682.13 L1167.65 682.13 L1167.09 682.13 L1166.53 682.13 L1165.97 682.13 L1165.41 682.13 L1164.85 682.13 L1164.29 682.13 L1163.73 682.13 L1163.17 682.13 L1162.61 682.13 L1162.05 682.13 L1161.5 682.13 L1160.94 682.13 L1160.38 682.13 L1159.82 682.13 L1159.26 682.13 L1158.7 682.13 L1158.14 682.13 L1157.58 682.13 L1157.02 682.13 L1156.46 682.13 L1155.9 682.13 L1155.34 682.13 L1154.78 682.13 L1154.23 682.13 L1153.67 682.13 L1153.11 682.13 L1152.55 682.13 L1151.99 682.13 L1151.43 682.13 L1150.87 682.13 L1150.31 682.13 L1149.75 682.13 L1149.19 682.13 L1148.63 682.13 L1148.07 682.13 L1147.51 682.13 L1146.96 682.13 L1146.4 682.13 L1145.84 682.13 L1145.28 682.13 L1144.72 682.13 L1144.16 682.13 L1143.6 682.13 L1143.04 682.13 L1142.48 682.13 L1141.92 682.13 L1141.36 682.13 L1140.8 682.13 L1140.24 682.13 L1139.68 682.13 L1139.13 682.13 L1138.57 682.13 L1138.01 682.13 L1137.45 682.13 L1136.89 682.13 L1136.33 682.13 L1135.77 682.13 L1135.21 682.13 L1134.65 682.13 L1134.09 682.13 L1133.53 682.13 L1132.97 682.13 L1132.41 682.13 L1131.86 682.13 L1131.3 682.13 L1130.74 682.13 L1130.18 682.13 L1129.62 682.13 L1129.06 682.13 L1128.5 682.13 L1127.94 682.13 L1127.38 682.13 L1126.82 682.13 L1126.26 682.13 L1125.7 682.13 L1125.14 682.13 L1124.59 682.13 L1124.03 682.13 L1123.47 682.13 L1122.91 682.13 L1122.35 682.13 L1121.79 682.13 L1121.23 682.13 L1120.67 682.13 L1120.11 682.13 L1119.55 682.13 L1118.99 682.13 L1118.43 682.13 L1117.87 682.13 L1117.31 682.13 L1116.76 682.13 L1116.2 682.13 L1115.64 682.13 L1115.08 682.13 L1114.52 682.13 L1113.96 682.13 L1113.4 682.13 L1112.84 682.13 L1112.28 682.13 L1111.72 682.13 L1111.16 682.13 L1110.6 682.13 L1110.04 682.13 L1109.49 682.13 L1108.93 682.13 L1108.37 682.13 L1107.81 682.13 L1107.25 682.13 L1106.69 682.13 L1106.13 682.13 L1105.57 682.13 L1105.01 682.13 L1104.45 682.13 L1103.89 682.13 L1103.33 682.13 L1102.77 682.13 L1102.22 682.13 L1101.66 682.13 L1101.1 682.13 L1100.54 682.13 L1099.98 682.13 L1099.42 682.13 L1098.86 682.13 L1098.3 682.13 L1097.74 682.13 L1097.18 682.13 L1096.62 682.13 L1096.06 682.13 L1095.5 682.13 L1094.94 682.13 L1094.39 682.13 L1093.83 682.13 L1093.27 682.13 L1092.71 682.13 L1092.15 682.13 L1091.59 682.13 L1091.03 682.13 L1090.47 682.13 L1089.91 682.13 L1089.35 682.13 L1088.79 682.13 L1088.23 682.13 L1087.67 682.13 L1087.12 682.13 L1086.56 682.13 L1086 682.13 L1085.44 682.13 L1084.88 682.13 L1084.32 682.13 L1083.76 682.13 L1083.2 682.13 L1082.64 682.13 L1082.08 682.13 L1081.52 682.13 L1080.96 682.13 L1080.4 682.13 L1079.85 682.13 L1079.29 682.13 L1078.73 682.13 L1078.17 682.13 L1077.61 682.13 L1077.05 682.13 L1076.49 682.13 L1075.93 682.13 L1075.37 682.13 L1074.81 682.13 L1074.25 682.13 L1073.69 682.13 L1073.13 682.13 L1072.57 682.13 L1072.02 682.13 L1071.46 682.13 L1070.9 682.13 L1070.34 682.13 L1069.78 682.13 L1069.22 682.13 L1068.66 682.13 L1068.1 682.13 L1067.54 682.13 L1066.98 682.13 L1066.42 682.13 L1065.86 682.13 L1065.3 682.13 L1064.75 682.13 L1064.19 682.13 L1063.63 682.13 L1063.07 682.13 L1062.51 682.13 L1061.95 682.13 L1061.39 682.13 L1060.83 682.13 L1060.27 682.13 L1059.71 682.13 L1059.15 682.13 L1058.59 682.13 L1058.03 682.13 L1057.48 682.13 L1056.92 682.13 L1056.36 682.13 L1055.8 682.13 L1055.24 682.13 L1054.68 682.13 L1054.12 682.13 L1053.56 682.13 L1053 682.13 L1052.44 682.13 L1051.88 682.13 L1051.32 682.13 L1050.76 682.13 L1050.2 682.13 L1049.65 682.13 L1049.09 682.13 L1048.53 682.13 L1047.97 682.13 L1047.41 682.13 L1046.85 682.13 L1046.29 682.13 L1045.73 682.13 L1045.17 682.13 L1044.61 682.13 L1044.05 682.13 L1043.49 682.13 L1042.93 682.13 L1042.38 682.13 L1041.82 682.13 L1041.26 682.13 L1040.7 682.13 L1040.14 682.13 L1039.58 682.13 L1039.02 682.13 L1038.46 682.13 L1037.9 682.13 L1037.34 682.13 L1036.78 682.13 L1036.22 682.13 L1035.66 682.13 L1035.1 682.13 L1034.55 682.13 L1033.99 682.13 L1033.43 682.13 L1032.87 682.13 L1032.31 682.13 L1031.75 682.13 L1031.19 682.13 L1030.63 682.13 L1030.07 682.13 L1029.51 682.13 L1028.95 682.13 L1028.39 682.13 L1027.83 682.13 L1027.28 682.13 L1026.72 682.13 L1026.16 682.13 L1025.6 682.13 L1025.04 682.13 L1024.48 682.13 L1023.92 682.13 L1023.36 682.13 L1022.8 682.13 L1022.24 682.13 L1021.68 682.13 L1021.12 682.13 L1020.56 682.13 L1020.01 682.13 L1019.45 682.13 L1018.89 682.13 L1018.33 682.13 L1017.77 682.13 L1017.21 682.13 L1016.65 682.13 L1016.09 682.13 L1015.53 682.13 L1014.97 682.13 L1014.41 682.13 L1013.85 682.13 L1013.29 682.13 L1012.73 682.13 L1012.18 682.13 L1011.62 682.13 L1011.06 682.13 L1010.5 682.13 L1009.94 682.13 L1009.38 682.13 L1008.82 682.13 L1008.26 682.13 L1007.7 682.13 L1007.14 682.13 L1006.58 682.13 L1006.02 682.13 L1005.46 682.13 L1004.91 682.13 L1004.35 682.13 L1003.79 682.13 L1003.23 682.13 L1002.67 682.13 L1002.11 682.13 L1001.55 682.13 L1000.99 682.13 L1000.43 682.13 L999.872 682.13 L999.313 682.13 L998.754 682.13 L998.194 682.13 L997.635 682.13 L997.076 682.13 L996.517 682.13 L995.957 682.13 L995.398 682.13 L994.839 682.13 L994.28 682.13 L993.72 682.13 L993.161 682.13 L992.602 682.13 L992.043 682.13 L991.483 682.13 L990.924 682.13 L990.365 682.13 L989.806 682.13 L989.246 682.13 L988.687 682.13 L988.128 682.13 L987.569 682.13 L987.009 682.13 L986.45 682.13 L985.891 682.13 L985.332 682.13 L984.772 682.13 L984.213 682.13 L983.654 682.13 L983.095 682.13 L982.535 682.13 L981.976 682.13 L981.417 682.13 L980.858 682.13 L980.298 682.13 L979.739 682.13 L979.18 682.13 L978.621 682.13 L978.061 682.13 L977.502 682.13 L976.943 682.13 L976.384 682.13 L975.824 682.13 L975.265 682.13 L974.706 682.13 L974.147 682.13 L973.587 682.13 L973.028 682.13 L972.469 682.13 L971.91 682.13 L971.35 682.13 L970.791 682.13 L970.232 682.13 L969.673 682.13 L969.113 682.13 L968.554 682.13 L967.995 682.13 L967.436 682.13 L966.876 682.13 L966.317 682.13 L965.758 682.13 L965.199 682.13 L964.639 682.13 L964.08 682.13 L963.521 682.13 L962.962 682.13 L962.402 682.13 L961.843 682.13 L961.284 682.13 L960.725 682.13 L960.165 682.13 L959.606 682.13 L959.047 682.13 L958.488 682.13 L957.928 682.13 L957.369 682.13 L956.81 682.13 L956.251 682.13 L955.691 682.13 L955.132 682.13 L954.573 682.13 L954.014 682.13 L953.454 682.13 L952.895 682.13 L952.336 682.13 L951.777 682.13 L951.217 682.13 L950.658 682.13 L950.099 682.13 L949.54 682.13 L948.98 682.13 L948.421 682.13 L947.862 682.13 L947.303 682.13 L946.743 682.13 L946.184 682.13 L945.625 682.13 L945.066 682.13 L944.506 682.13 L943.947 682.13 L943.388 682.13 L942.829 682.13 L942.269 682.13 L941.71 682.13 L941.151 682.13 L940.592 682.13 L940.032 682.13 L939.473 682.13 L938.914 682.13 L938.355 682.13 L937.795 682.13 L937.236 682.13 L936.677 682.13 L936.118 682.13 L935.558 682.13 L934.999 682.13 L934.44 682.13 L933.881 682.13 L933.321 682.13 L932.762 682.13 L932.203 682.13 L931.644 682.13 L931.084 682.13 L930.525 682.13 L929.966 682.13 L929.406 682.13 L928.847 682.13 L928.288 682.13 L927.729 682.13 L927.169 682.13 L926.61 682.13 L926.051 682.13 L925.492 682.13 L924.932 682.13 L924.373 682.13 L923.814 682.13 L923.255 682.13 L922.695 682.13 L922.136 682.13 L921.577 682.13 L921.018 682.13 L920.458 682.13 L919.899 682.13 L919.34 682.13 L918.781 682.13 L918.221 682.13 L917.662 682.13 L917.103 682.13 L916.544 682.13 L915.984 682.13 L915.425 682.13 L914.866 682.13 L914.307 682.13 L913.747 682.13 L913.188 682.13 L912.629 682.13 L912.07 682.13 L911.51 682.13 L910.951 682.13 L910.392 682.13 L909.833 682.13 L909.273 682.13 L908.714 682.13 L908.155 682.13 L907.596 682.13 L907.036 682.13 L906.477 682.13 L905.918 682.13 L905.359 682.13 L904.799 682.13 L904.24 682.13 L903.681 682.13 L903.122 682.13 L902.562 682.13 L902.003 682.13 L901.444 682.13 L900.885 682.13 L900.325 682.13 L899.766 682.13 L899.207 682.13 L898.648 682.13 L898.088 682.13 L897.529 682.13 L896.97 682.13 L896.411 682.13 L895.851 682.13 L895.292 682.13 L894.733 682.13 L894.174 682.13 L893.614 682.13 L893.055 682.13 L892.496 682.13 L891.937 682.13 L891.377 682.13 L890.818 682.13 L890.259 682.13 L889.7 682.13 L889.14 682.13 L888.581 682.13 L888.022 682.13 L887.463 682.13 L886.903 682.13 L886.344 682.13 L885.785 682.13 L885.226 682.13 L884.666 682.13 L884.107 682.13 L883.548 682.13 L882.989 682.13 L882.429 682.13 L881.87 682.13 L881.311 682.13 L880.752 682.13 L880.192 682.13 L879.633 682.13 L879.074 682.13 L878.515 682.13 L877.955 682.13 L877.396 682.13 L876.837 682.13 L876.278 682.13 L875.718 682.13 L875.159 682.13 L874.6 682.13 L874.041 682.13 L873.481 682.13 L872.922 682.13 L872.363 682.13 L871.804 682.13 L871.244 682.13 L870.685 682.13 L870.126 682.13 L869.567 682.13 L869.007 682.13 L868.448 682.13 L867.889 682.13 L867.33 682.13 L866.77 682.13 L866.211 682.13 L865.652 682.13 L865.093 682.13 L864.533 682.13 L863.974 682.13 L863.415 682.13 L862.856 682.13 L862.296 682.13 L861.737 682.13 L861.178 682.13 L860.619 682.13 L860.059 682.13 L859.5 682.13 L858.941 682.13 L858.382 682.13 L857.822 682.13 L857.263 682.13 L856.704 682.13 L856.145 682.13 L855.585 682.13 L855.026 682.13 L854.467 682.13 L853.908 682.13 L853.348 682.13 L852.789 682.13 L852.23 682.13 L851.671 682.13 L851.111 682.13 L850.552 682.13 L849.993 682.13 L849.434 682.13 L848.874 682.13 L848.315 682.13 L847.756 682.13 L847.197 682.13 L846.637 682.13 L846.078 682.13 L845.519 682.13 L844.96 682.13 L844.4 682.13 L843.841 682.13 L843.282 682.13 L842.723 682.13 L842.163 682.13 L841.604 682.13 L841.045 682.13 L840.486 682.13 L839.926 682.13 L839.367 682.13 L838.808 682.13 L838.249 682.13 L837.689 682.13 L837.13 682.13 L836.571 682.13 L836.012 682.13 L835.452 682.13 L834.893 682.13 L834.334 682.13 L833.775 682.13 L833.215 682.13 L832.656 682.13 L832.097 682.13 L831.538 682.13 L830.978 682.13 L830.419 682.13 L829.86 682.13 L829.301 682.13 L828.741 682.13 L828.182 682.13 L827.623 682.13 L827.064 682.13 L826.504 682.13 L825.945 682.13 L825.386 682.13 L824.827 682.13 L824.267 682.13 L823.708 682.13 L823.149 682.13 L822.59 682.13 L822.03 682.13 L821.471 682.13 L820.912 682.13 L820.353 682.13 L819.793 682.13 L819.234 682.13 L818.675 682.13 L818.116 682.13 L817.556 682.13 L816.997 682.13 L816.438 682.13 L815.879 682.13 L815.319 682.13 L814.76 682.13 L814.201 682.13 L813.642 682.13 L813.082 682.13 L812.523 682.13 L811.964 682.13 L811.405 682.13 L810.845 682.13 L810.286 682.13 L809.727 682.13 L809.168 682.13 L808.608 682.13 L808.049 682.13 L807.49 682.13 L806.931 682.13 L806.371 682.13 L805.812 682.13 L805.253 682.13 L804.693 682.13 L804.134 682.13 L803.575 682.13 L803.016 682.13 L802.456 682.13 L801.897 682.13 L801.338 682.13 L800.779 682.13 L800.219 682.13 L799.66 682.13 L799.101 682.13 L798.542 682.13 L797.982 682.13 L797.423 682.13 L796.864 682.13 L796.305 682.13 L795.745 682.13 L795.186 682.13 L794.627 682.13 L794.068 682.13 L793.508 682.13 L792.949 682.13 L792.39 682.13 L791.831 682.13 L791.271 682.13 L790.712 682.13 L790.153 682.13 L789.594 682.13 L789.034 682.13 L788.475 682.13 L787.916 682.13 L787.357 682.13 L786.797 682.13 L786.238 682.13 L785.679 682.13 L785.12 682.13 L784.56 682.13 L784.001 682.13 L783.442 682.13 L782.883 682.13 L782.323 682.13 L781.764 682.13 L781.205 682.13 L780.646 682.13 L780.086 682.13 L779.527 682.13 L778.968 682.13 L778.409 682.13 L777.849 682.13 L777.29 682.13 L776.731 682.13 L776.172 682.13 L775.612 682.13 L775.053 682.13 L774.494 682.13 L773.935 682.13 L773.375 682.13 L772.816 682.13 L772.257 682.13 L771.698 682.13 L771.138 682.13 L770.579 682.13 L770.02 682.13 L769.461 682.13 L768.901 682.13 L768.342 682.13 L767.783 682.13 L767.224 682.13 L766.664 682.13 L766.105 682.13 L765.546 682.13 L764.987 682.13 L764.427 682.13 L763.868 682.13 L763.309 682.13 L762.75 682.13 L762.19 682.13 L761.631 682.13 L761.072 682.13 L760.513 682.13 L759.953 682.13 L759.394 682.13 L758.835 682.13 L758.276 682.13 L757.716 682.13 L757.157 682.13 L756.598 682.13 L756.039 682.13 L755.479 682.13 L754.92 682.13 L754.361 682.13 L753.802 682.13 L753.242 682.13 L752.683 682.13 L752.124 682.13 L751.565 682.13 L751.005 682.13 L750.446 682.13 L749.887 682.13 L749.328 682.13 L748.768 682.13 L748.209 682.13 L747.65 682.13 L747.091 682.13 L746.531 682.13 L745.972 682.13 L745.413 682.13 L744.854 682.13 L744.294 682.13 L743.735 682.13 L743.176 682.13 L742.617 682.13 L742.057 682.13 L741.498 682.13 L740.939 682.13 L740.38 682.13 L739.82 682.13 L739.261 682.13 L738.702 682.13 L738.143 682.13 L737.583 682.13 L737.024 682.13 L736.465 682.13 L735.906 682.13 L735.346 682.13 L734.787 682.13 L734.228 682.13 L733.669 682.13 L733.109 682.13 L732.55 682.13 L731.991 682.13 L731.432 682.13 L730.872 682.13 L730.313 682.13 L729.754 682.13 L729.195 682.13 L728.635 682.13 L728.076 682.13 L727.517 682.13 L726.958 682.13 L726.398 682.13 L725.839 682.13 L725.28 682.13 L724.721 682.13 L724.161 682.13 L723.602 682.13 L723.043 682.13 L722.484 682.13 L721.924 682.13 L721.365 682.13 L720.806 682.13 L720.247 682.13  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip543)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.371 720.806,686.371 721.365,686.371 721.924,686.371 722.484,686.371 723.043,686.371 723.602,686.371 724.161,686.371 724.721,686.371 725.28,686.371 725.839,686.371 726.398,686.371 726.958,686.371 727.517,686.371 728.076,686.371 728.635,686.371 729.195,686.371 729.754,686.371 730.313,686.371 730.872,686.371 731.432,686.371 731.991,686.371 732.55,686.371 733.109,686.371 733.669,686.371 734.228,686.371 734.787,686.371 735.346,686.371 735.906,686.371 736.465,686.371 737.024,686.371 737.583,686.371 738.143,686.371 738.702,686.371 739.261,686.371 739.82,686.371 740.38,686.371 740.939,686.371 741.498,686.371 742.057,686.371 742.617,686.371 743.176,686.371 743.735,686.371 744.294,686.371 744.854,686.371 745.413,686.371 745.972,686.371 746.531,686.371 747.091,686.371 747.65,686.371 748.209,686.371 748.768,686.371 749.328,686.371 749.887,686.371 750.446,686.371 751.005,686.371 751.565,686.371 752.124,686.371 752.683,686.371 753.242,686.371 753.802,686.371 754.361,686.371 754.92,686.371 755.479,686.371 756.039,686.371 756.598,686.371 757.157,686.371 757.716,686.371 758.276,686.371 758.835,686.371 759.394,686.371 759.953,686.371 760.513,686.371 761.072,686.371 761.631,686.371 762.19,686.371 762.75,686.371 763.309,686.371 763.868,686.371 764.427,686.371 764.987,686.371 765.546,686.371 766.105,686.371 766.664,686.371 767.224,686.371 767.783,686.371 768.342,686.371 768.901,686.371 769.461,686.371 770.02,686.371 770.579,686.371 771.138,686.371 771.698,686.371 772.257,686.371 772.816,686.371 773.375,686.371 773.935,686.371 774.494,686.371 775.053,686.371 775.612,686.371 776.172,686.371 776.731,686.371 777.29,686.371 777.849,686.371 778.409,686.371 778.968,686.371 779.527,686.371 780.086,686.371 780.646,686.371 781.205,686.371 781.764,686.371 782.323,686.371 782.883,686.371 783.442,686.371 784.001,686.371 784.56,686.371 785.12,686.371 785.679,686.371 786.238,686.371 786.797,686.371 787.357,686.371 787.916,686.371 788.475,686.371 789.034,686.371 789.594,686.371 790.153,686.371 790.712,686.371 791.271,686.371 791.831,686.371 792.39,686.371 792.949,686.371 793.508,686.371 794.068,686.371 794.627,686.371 795.186,686.371 795.745,686.371 796.305,686.371 796.864,686.371 797.423,686.371 797.982,686.371 798.542,686.371 799.101,686.371 799.66,686.371 800.219,686.371 800.779,686.371 801.338,686.371 801.897,686.371 802.456,686.371 803.016,686.371 803.575,686.371 804.134,686.371 804.693,686.371 805.253,686.371 805.812,686.371 806.371,686.371 806.931,686.371 807.49,686.371 808.049,686.371 808.608,686.371 809.168,686.371 809.727,686.371 810.286,686.371 810.845,686.371 811.405,686.371 811.964,686.371 812.523,686.371 813.082,686.371 813.642,686.371 814.201,686.371 814.76,686.371 815.319,686.371 815.879,686.371 816.438,686.371 816.997,686.371 817.556,686.371 818.116,686.371 818.675,686.371 819.234,686.371 819.793,686.371 820.353,686.371 820.912,686.371 821.471,686.371 822.03,686.371 822.59,686.371 823.149,686.371 823.708,686.371 824.267,686.371 824.827,686.371 825.386,686.371 825.945,686.371 826.504,686.371 827.064,686.371 827.623,686.371 828.182,686.371 828.741,686.371 829.301,686.371 829.86,686.371 830.419,686.371 830.978,686.371 831.538,686.371 832.097,686.371 832.656,686.371 833.215,686.371 833.775,686.371 834.334,686.371 834.893,686.371 835.452,686.371 836.012,686.371 836.571,686.371 837.13,686.371 837.689,686.371 838.249,686.371 838.808,686.371 839.367,686.371 839.926,686.371 840.486,686.371 841.045,686.371 841.604,686.371 842.163,686.371 842.723,686.371 843.282,686.371 843.841,686.371 844.4,686.371 844.96,686.371 845.519,686.371 846.078,686.371 846.637,686.371 847.197,686.371 847.756,686.371 848.315,686.371 848.874,686.371 849.434,686.371 849.993,686.371 850.552,686.371 851.111,686.371 851.671,686.371 852.23,686.371 852.789,686.371 853.348,686.371 853.908,686.371 854.467,686.371 855.026,686.371 855.585,686.371 856.145,686.371 856.704,686.371 857.263,686.371 857.822,686.371 858.382,686.371 858.941,686.371 859.5,686.371 860.059,686.371 860.619,686.371 861.178,686.371 861.737,686.371 862.296,686.371 862.856,686.371 863.415,686.371 863.974,686.371 864.533,686.371 865.093,686.371 865.652,686.371 866.211,686.371 866.77,686.371 867.33,686.371 867.889,686.371 868.448,686.371 869.007,686.371 869.567,686.371 870.126,686.371 870.685,686.371 871.244,686.371 871.804,686.371 872.363,686.371 872.922,686.371 873.481,686.371 874.041,686.371 874.6,686.371 875.159,686.371 875.718,686.371 876.278,686.371 876.837,686.371 877.396,686.371 877.955,686.371 878.515,686.371 879.074,686.371 879.633,686.371 880.192,686.371 880.752,686.371 881.311,686.371 881.87,686.371 882.429,686.371 882.989,686.371 883.548,686.371 884.107,686.371 884.666,686.371 885.226,686.371 885.785,686.371 886.344,686.371 886.903,686.371 887.463,686.371 888.022,686.371 888.581,686.371 889.14,686.371 889.7,686.371 890.259,686.371 890.818,686.371 891.377,686.371 891.937,686.371 892.496,686.371 893.055,686.371 893.614,686.371 894.174,686.371 894.733,686.371 895.292,686.371 895.851,686.371 896.411,686.371 896.97,686.371 897.529,686.371 898.088,686.371 898.648,686.371 899.207,686.371 899.766,686.371 900.325,686.371 900.885,686.371 901.444,686.371 902.003,686.371 902.562,686.371 903.122,686.371 903.681,686.371 904.24,686.371 904.799,686.371 905.359,686.371 905.918,686.371 906.477,686.371 907.036,686.371 907.596,686.371 908.155,686.371 908.714,686.371 909.273,686.371 909.833,686.371 910.392,686.371 910.951,686.371 911.51,686.371 912.07,686.371 912.629,686.371 913.188,686.371 913.747,686.371 914.307,686.371 914.866,686.371 915.425,686.371 915.984,686.371 916.544,686.371 917.103,686.371 917.662,686.371 918.221,686.371 918.781,686.371 919.34,686.371 919.899,686.371 920.458,686.371 921.018,686.371 921.577,686.371 922.136,686.371 922.695,686.371 923.255,686.371 923.814,686.371 924.373,686.371 924.932,686.371 925.492,686.371 926.051,686.371 926.61,686.371 927.169,686.371 927.729,686.371 928.288,686.371 928.847,686.371 929.406,686.371 929.966,686.371 930.525,686.371 931.084,686.371 931.644,686.371 932.203,686.371 932.762,686.371 933.321,686.371 933.881,686.371 934.44,686.371 934.999,686.371 935.558,686.371 936.118,686.371 936.677,686.371 937.236,686.371 937.795,686.371 938.355,686.371 938.914,686.371 939.473,686.371 940.032,686.371 940.592,686.371 941.151,686.371 941.71,686.371 942.269,686.371 942.829,686.371 943.388,686.371 943.947,686.371 944.506,686.371 945.066,686.371 945.625,686.371 946.184,686.371 946.743,686.371 947.303,686.371 947.862,686.371 948.421,686.371 948.98,686.371 949.54,686.371 950.099,686.371 950.658,686.371 951.217,686.371 951.777,686.371 952.336,686.371 952.895,686.371 953.454,686.371 954.014,686.371 954.573,686.371 955.132,686.371 955.691,686.371 956.251,686.371 956.81,686.371 957.369,686.371 957.928,686.371 958.488,686.371 959.047,686.371 959.606,686.371 960.165,686.371 960.725,686.371 961.284,686.371 961.843,686.371 962.402,686.371 962.962,686.371 963.521,686.371 964.08,686.371 964.639,686.371 965.199,686.371 965.758,686.371 966.317,686.371 966.876,686.371 967.436,686.371 967.995,686.371 968.554,686.371 969.113,686.371 969.673,686.371 970.232,686.371 970.791,686.371 971.35,686.371 971.91,686.371 972.469,686.371 973.028,686.371 973.587,686.371 974.147,686.371 974.706,686.371 975.265,686.371 975.824,686.371 976.384,686.371 976.943,686.371 977.502,686.371 978.061,686.371 978.621,686.371 979.18,686.371 979.739,686.371 980.298,686.371 980.858,686.371 981.417,686.371 981.976,686.371 982.535,686.371 983.095,686.371 983.654,686.371 984.213,686.371 984.772,686.371 985.332,686.371 985.891,686.371 986.45,686.371 987.009,686.371 987.569,686.371 988.128,686.371 988.687,686.371 989.246,686.371 989.806,686.371 990.365,686.371 990.924,686.371 991.483,686.371 992.043,686.371 992.602,686.371 993.161,686.371 993.72,686.371 994.28,686.371 994.839,686.371 995.398,686.371 995.957,686.371 996.517,686.371 997.076,686.371 997.635,686.371 998.194,686.371 998.754,686.371 999.313,686.371 999.872,686.371 1000.43,686.371 1000.99,686.371 1001.55,686.371 1002.11,686.371 1002.67,686.371 1003.23,686.371 1003.79,686.371 1004.35,686.371 1004.91,686.371 1005.46,686.371 1006.02,686.371 1006.58,686.371 1007.14,686.371 1007.7,686.371 1008.26,686.371 1008.82,686.371 1009.38,686.371 1009.94,686.371 1010.5,686.371 1011.06,686.371 1011.62,686.371 1012.18,686.371 1012.73,686.371 1013.29,686.371 1013.85,686.371 1014.41,686.371 1014.97,686.371 1015.53,686.371 1016.09,686.371 1016.65,686.371 1017.21,686.371 1017.77,686.371 1018.33,686.371 1018.89,686.371 1019.45,686.371 1020.01,686.371 1020.56,686.371 1021.12,686.371 1021.68,686.371 1022.24,686.371 1022.8,686.371 1023.36,686.371 1023.92,686.371 1024.48,686.371 1025.04,686.371 1025.6,686.371 1026.16,686.371 1026.72,686.371 1027.28,686.371 1027.83,686.371 1028.39,686.371 1028.95,686.371 1029.51,686.371 1030.07,686.371 1030.63,686.371 1031.19,686.371 1031.75,686.371 1032.31,686.371 1032.87,686.371 1033.43,686.371 1033.99,686.371 1034.55,686.371 1035.1,686.371 1035.66,686.371 1036.22,686.371 1036.78,686.371 1037.34,686.371 1037.9,686.371 1038.46,686.371 1039.02,686.371 1039.58,686.371 1040.14,686.371 1040.7,686.371 1041.26,686.371 1041.82,686.371 1042.38,686.371 1042.93,686.371 1043.49,686.371 1044.05,686.371 1044.61,686.371 1045.17,686.371 1045.73,686.371 1046.29,686.371 1046.85,686.371 1047.41,686.371 1047.97,686.371 1048.53,686.371 1049.09,686.371 1049.65,686.371 1050.2,686.371 1050.76,686.371 1051.32,686.371 1051.88,686.371 1052.44,686.371 1053,686.371 1053.56,686.371 1054.12,686.371 1054.68,686.371 1055.24,686.371 1055.8,686.371 1056.36,686.371 1056.92,686.371 1057.48,686.371 1058.03,686.371 1058.59,686.371 1059.15,686.371 1059.71,686.371 1060.27,686.371 1060.83,686.371 1061.39,686.371 1061.95,686.371 1062.51,686.371 1063.07,686.371 1063.63,686.371 1064.19,686.371 1064.75,686.371 1065.3,686.371 1065.86,686.371 1066.42,686.371 1066.98,686.371 1067.54,686.371 1068.1,686.371 1068.66,686.371 1069.22,686.371 1069.78,686.371 1070.34,686.371 1070.9,686.371 1071.46,686.371 1072.02,686.371 1072.57,686.371 1073.13,686.371 1073.69,686.371 1074.25,686.371 1074.81,686.371 1075.37,686.371 1075.93,686.371 1076.49,686.371 1077.05,686.371 1077.61,686.371 1078.17,686.371 1078.73,686.371 1079.29,686.371 1079.85,686.371 1080.4,686.371 1080.96,686.371 1081.52,686.371 1082.08,686.371 1082.64,686.371 1083.2,686.371 1083.76,686.371 1084.32,686.371 1084.88,686.371 1085.44,686.371 1086,686.371 1086.56,686.371 1087.12,686.371 1087.67,686.371 1088.23,686.371 1088.79,686.371 1089.35,686.371 1089.91,686.371 1090.47,686.371 1091.03,686.371 1091.59,686.371 1092.15,686.371 1092.71,686.371 1093.27,686.371 1093.83,686.371 1094.39,686.371 1094.94,686.371 1095.5,686.371 1096.06,686.371 1096.62,686.371 1097.18,686.371 1097.74,686.371 1098.3,686.371 1098.86,686.371 1099.42,686.371 1099.98,686.371 1100.54,686.371 1101.1,686.371 1101.66,686.371 1102.22,686.371 1102.77,686.371 1103.33,686.371 1103.89,686.371 1104.45,686.371 1105.01,686.371 1105.57,686.371 1106.13,686.371 1106.69,686.371 1107.25,686.371 1107.81,686.371 1108.37,686.371 1108.93,686.371 1109.49,686.371 1110.04,686.371 1110.6,686.371 1111.16,686.371 1111.72,686.371 1112.28,686.371 1112.84,686.371 1113.4,686.371 1113.96,686.371 1114.52,686.371 1115.08,686.371 1115.64,686.371 1116.2,686.371 1116.76,686.371 1117.31,686.371 1117.87,686.371 1118.43,686.371 1118.99,686.371 1119.55,686.371 1120.11,686.371 1120.67,686.371 1121.23,686.371 1121.79,686.371 1122.35,686.371 1122.91,686.371 1123.47,686.371 1124.03,686.371 1124.59,686.371 1125.14,686.371 1125.7,686.371 1126.26,686.371 1126.82,686.371 1127.38,686.371 1127.94,686.371 1128.5,686.371 1129.06,686.371 1129.62,686.371 1130.18,686.371 1130.74,686.371 1131.3,686.371 1131.86,686.371 1132.41,686.371 1132.97,686.371 1133.53,686.371 1134.09,686.371 1134.65,686.371 1135.21,686.371 1135.77,686.371 1136.33,686.371 1136.89,686.371 1137.45,686.371 1138.01,686.371 1138.57,686.371 1139.13,686.371 1139.68,686.371 1140.24,686.371 1140.8,686.371 1141.36,686.371 1141.92,686.371 1142.48,686.371 1143.04,686.371 1143.6,686.371 1144.16,686.371 1144.72,686.371 1145.28,686.371 1145.84,686.371 1146.4,686.371 1146.96,686.371 1147.51,686.371 1148.07,686.371 1148.63,686.371 1149.19,686.371 1149.75,686.371 1150.31,686.371 1150.87,686.371 1151.43,686.371 1151.99,686.371 1152.55,686.371 1153.11,686.371 1153.67,686.371 1154.23,686.371 1154.78,686.371 1155.34,686.371 1155.9,686.371 1156.46,686.371 1157.02,686.371 1157.58,686.371 1158.14,686.371 1158.7,686.371 1159.26,686.371 1159.82,686.371 1160.38,686.371 1160.94,686.371 1161.5,686.371 1162.05,686.371 1162.61,686.371 1163.17,686.371 1163.73,686.371 1164.29,686.371 1164.85,686.371 1165.41,686.371 1165.97,686.371 1166.53,686.371 1167.09,686.371 1167.65,686.371 1168.21,686.371 1168.77,686.371 1169.33,686.371 1169.88,686.371 1170.44,686.371 1171,686.371 1171.56,686.371 1172.12,686.371 1172.68,686.371 1173.24,686.371 1173.8,686.371 1174.36,686.371 1174.92,686.371 1175.48,686.371 1176.04,686.371 1176.6,686.371 1177.15,686.371 1177.71,686.371 1178.27,686.371 1178.83,686.371 1179.39,686.371 1179.95,686.371 1180.51,686.371 1181.07,686.371 1181.63,686.371 1182.19,686.371 1182.75,686.371 1183.31,686.371 1183.87,686.371 1184.43,686.371 1184.98,686.371 1185.54,686.371 1186.1,686.371 1186.66,686.371 1187.22,686.371 1187.78,686.371 1188.34,686.371 1188.9,686.371 1189.46,686.371 1190.02,686.371 1190.58,686.371 1191.14,686.371 1191.7,686.371 1192.25,686.371 1192.81,686.371 1193.37,686.371 1193.93,686.371 1194.49,686.371 1195.05,686.371 1195.61,686.371 1196.17,686.371 1196.73,686.371 1197.29,686.371 1197.85,686.371 1198.41,686.371 1198.97,686.371 1199.52,686.371 1200.08,686.371 1200.64,686.371 1201.2,686.371 1201.76,686.371 1202.32,686.371 1202.88,686.371 1203.44,686.371 1204,686.371 1204.56,686.371 1205.12,686.371 1205.68,686.371 1206.24,686.371 1206.8,686.371 1207.35,686.371 1207.91,686.371 1208.47,686.371 1209.03,686.371 1209.59,686.371 1210.15,686.371 1210.71,686.371 1211.27,686.371 1211.83,686.371 1212.39,686.371 1212.95,686.371 1213.51,686.371 1214.07,686.371 1214.62,686.371 1215.18,686.371 1215.74,686.371 1216.3,686.371 1216.86,686.371 1217.42,686.371 1217.98,686.371 1218.54,686.371 1219.1,686.371 1219.66,686.371 1220.22,686.371 1220.78,686.371 1221.34,686.371 1221.89,686.371 1222.45,686.371 1223.01,686.371 1223.57,686.371 1224.13,686.371 1224.69,686.371 1225.25,686.371 1225.81,686.371 1226.37,686.371 1226.93,686.371 1227.49,686.371 1228.05,686.371 1228.61,686.371 1229.17,686.371 1229.72,686.371 1230.28,686.371 1230.84,686.371 1231.4,686.371 1231.96,686.371 1232.52,686.371 1233.08,686.371 1233.64,686.371 1234.2,686.371 1234.76,686.371 1235.32,686.371 1235.88,686.371 1236.44,686.371 1236.99,686.371 1237.55,686.371 1238.11,686.371 1238.67,686.371 1239.23,686.371 1239.79,686.371 1240.35,686.371 1240.91,686.371 1241.47,686.371 1242.03,686.371 1242.59,686.371 1243.15,686.371 1243.71,686.371 1244.26,686.371 1244.82,686.371 1245.38,686.371 1245.94,686.371 1246.5,686.371 1247.06,686.371 1247.62,686.371 1248.18,686.371 1248.74,686.371 1249.3,686.371 1249.86,686.371 1250.42,686.371 1250.98,686.371 1251.54,686.371 1252.09,686.371 1252.65,686.371 1253.21,686.371 1253.77,686.371 1254.33,686.371 1254.89,686.371 1255.45,686.371 1256.01,686.371 1256.57,686.371 1257.13,686.371 1257.69,686.371 1258.25,686.371 1258.81,686.371 1259.36,686.371 1259.92,686.371 1260.48,686.371 1261.04,686.371 1261.6,686.371 1262.16,686.371 1262.72,686.371 1263.28,686.371 1263.84,686.371 1264.4,686.371 1264.96,686.371 1265.52,686.371 1266.08,686.371 1266.63,686.371 1267.19,686.371 1267.75,686.371 1268.31,686.371 1268.87,686.371 1269.43,686.371 1269.99,686.371 1270.55,686.371 1271.11,686.371 1271.67,686.371 1272.23,686.371 1272.79,686.371 1273.35,686.371 1273.91,686.371 1274.46,686.371 1275.02,686.371 1275.58,686.371 1276.14,686.371 1276.7,686.371 1277.26,686.371 1277.82,686.371 1278.38,686.371 1278.94,686.371 1279.5,686.371 1280.06,686.371 1280.62,686.371 1281.18,686.371 1281.73,686.371 1282.29,686.371 1282.85,686.371 1283.41,686.371 1283.97,686.371 1284.53,686.371 1285.09,686.371 1285.65,686.371 1286.21,686.371 1286.77,686.371 1287.33,686.371 1287.89,686.371 1288.45,686.371 1289,686.371 1289.56,686.371 1290.12,686.371 1290.68,686.371 1291.24,686.371 1291.8,686.371 1292.36,686.371 1292.92,686.371 1293.48,686.371 1294.04,686.371 1294.6,686.371 1295.16,686.371 1295.72,686.371 1296.28,686.371 1296.83,686.371 1297.39,686.371 1297.95,686.371 1298.51,686.371 1299.07,686.371 1299.63,686.371 1300.19,686.371 1300.75,686.371 1301.31,686.371 1301.87,686.371 1302.43,686.371 1302.99,686.371 1303.55,686.371 1304.1,686.371 1304.66,686.371 1305.22,686.371 1305.78,686.371 1306.34,686.371 1306.9,686.371 1307.46,686.371 1308.02,686.371 1308.58,686.371 1309.14,686.371 1309.7,686.371 1310.26,686.371 1310.82,686.371 1311.38,686.371 1311.93,686.371 1312.49,686.371 1313.05,686.371 1313.61,686.371 1314.17,686.371 1314.73,686.371 1315.29,686.371 1315.85,686.371 1316.41,686.371 1316.97,686.371 1317.53,686.371 1318.09,686.371 1318.65,686.371 1319.2,686.371 1319.76,686.371 1320.32,686.371 1320.88,686.371 1321.44,686.371 1322,686.371 1322.56,686.371 1323.12,686.371 1323.68,686.371 1324.24,686.371 1324.8,686.371 1325.36,686.371 1325.92,686.371 1326.47,686.371 1327.03,686.371 1327.59,686.371 1328.15,686.371 1328.71,686.371 1329.27,686.371 1329.83,686.371 1330.39,686.371 1330.95,686.371 1331.51,686.371 1332.07,686.371 1332.63,686.371 1333.19,686.371 1333.75,686.371 1334.3,686.371 1334.86,686.371 1335.42,686.371 1335.98,686.371 1336.54,686.371 1337.1,686.371 1337.66,686.371 1338.22,686.371 1338.78,686.371 1339.34,686.371 1339.9,686.371 1340.46,686.371 1341.02,686.371 1341.57,686.371 1342.13,686.371 1342.69,686.371 1343.25,686.371 1343.81,686.371 1344.37,686.371 1344.93,686.371 1345.49,686.371 1346.05,686.371 1346.61,686.371 1347.17,686.371 1347.73,686.371 1348.29,686.371 1348.84,686.371 1349.4,686.371 1349.96,686.371 1350.52,686.371 1351.08,686.371 1351.64,686.371 1352.2,686.371 1352.76,686.371 1353.32,686.371 1353.88,686.371 1354.44,686.371 1355,686.371 1355.56,686.371 1356.12,686.371 1356.67,686.371 1357.23,686.371 1357.79,686.371 1358.35,686.371 1358.91,686.371 1359.47,686.371 1360.03,686.371 1360.59,686.371 1361.15,686.371 1361.71,686.371 1362.27,686.371 1362.83,686.371 1363.39,686.371 1363.94,686.371 1364.5,686.371 1365.06,686.371 1365.62,686.371 1366.18,686.371 1366.74,686.371 1367.3,686.371 1367.86,686.371 1368.42,686.371 1368.98,686.371 1369.54,686.371 1370.1,686.371 1370.66,686.371 1371.21,686.371 1371.77,686.371 1372.33,686.371 1372.89,686.371 1373.45,686.371 1374.01,686.371 1374.57,686.371 1375.13,686.371 1375.69,686.371 1376.25,686.371 1376.81,686.371 1377.37,686.371 1377.93,686.371 1378.49,686.371 1379.04,686.371 1379.6,686.371 1380.16,686.371 1380.72,686.371 1381.28,686.371 1381.84,686.371 1382.4,686.371 1382.96,686.371 1383.52,686.371 1384.08,686.371 1384.64,686.371 1385.2,686.371 1385.76,686.371 1386.31,686.371 1386.87,686.371 1387.43,686.371 1387.99,686.371 1388.55,686.371 1389.11,686.371 1389.67,686.371 1390.23,686.371 1390.79,686.371 1391.35,686.371 1391.91,686.371 1392.47,686.371 1393.03,686.371 1393.58,686.371 1394.14,686.371 1394.7,686.371 1395.26,686.371 1395.82,686.371 1396.38,686.371 1396.94,686.371 1397.5,686.371 1398.06,686.371 1398.62,686.371 1399.18,686.371 1399.74,686.371 1400.3,686.371 1400.86,686.371 1401.41,686.371 1401.97,686.371 1402.53,686.371 1403.09,686.371 1403.65,686.371 1404.21,686.371 1404.77,686.371 1405.33,686.371 1405.89,686.371 1406.45,686.371 1407.01,686.371 1407.57,686.371 1408.13,686.371 1408.68,686.371 1409.24,686.371 1409.8,686.371 1410.36,686.371 1410.92,686.371 1411.48,686.371 1412.04,686.371 1412.6,686.371 1413.16,686.371 1413.72,686.371 1414.28,686.371 1414.84,686.371 1415.4,686.371 1415.95,686.371 1416.51,686.371 1417.07,686.371 1417.63,686.371 1418.19,686.371 1418.75,686.371 1419.31,686.371 1419.87,686.371 1420.43,686.371 1420.99,686.371 1421.55,686.371 1422.11,686.371 1422.67,686.371 1423.23,686.371 1423.78,686.371 1424.34,686.371 1424.9,686.371 1425.46,686.371 1426.02,686.371 1426.58,686.371 1427.14,686.371 1427.7,686.371 1428.26,686.371 1428.82,686.371 1429.38,686.371 1429.94,686.371 1430.5,686.371 1431.05,686.371 1431.61,686.371 1432.17,686.371 1432.73,686.371 1433.29,686.371 1433.85,686.371 1434.41,686.371 1434.97,686.371 1435.53,686.371 1436.09,686.371 1436.65,686.371 1437.21,686.371 1437.77,686.371 1438.33,686.371 1438.88,686.371 1439.44,686.371 1440,686.371 1440.56,686.371 1441.12,686.371 1441.68,686.371 1442.24,686.371 1442.8,686.371 1443.36,686.371 1443.92,686.371 1444.48,686.371 1445.04,686.371 1445.6,686.371 1446.15,686.371 1446.71,686.371 1447.27,686.371 1447.83,686.371 1448.39,686.371 1448.95,686.371 1449.51,686.371 1450.07,686.371 1450.63,686.371 1451.19,686.371 1451.75,686.371 1452.31,686.371 1452.87,686.371 1453.42,686.371 1453.98,686.371 1454.54,686.371 1455.1,686.371 1455.66,686.371 1456.22,686.371 1456.78,686.371 1457.34,686.371 1457.9,686.371 1458.46,686.371 1459.02,686.371 1459.58,686.371 1460.14,686.371 1460.7,686.371 1461.25,686.371 1461.81,686.371 1462.37,686.371 1462.93,686.371 1463.49,686.371 1464.05,686.371 1464.61,686.371 1465.17,686.371 1465.73,686.371 1466.29,686.371 1466.85,686.371 1467.41,686.371 1467.97,686.371 1468.52,686.371 1469.08,686.371 1469.64,686.371 1470.2,686.371 1470.76,686.371 1471.32,686.371 1471.88,686.371 1472.44,686.371 1473,686.371 1473.56,686.371 1474.12,686.371 1474.68,686.371 1475.24,686.371 1475.79,686.371 1476.35,686.371 1476.91,686.371 1477.47,686.371 1478.03,686.371 1478.59,686.371 1479.15,686.371 1479.71,686.371 1480.27,686.371 1480.83,686.371 1481.39,686.371 1481.95,686.371 1482.51,686.371 1483.07,686.371 1483.62,686.371 1484.18,686.371 1484.74,686.371 1485.3,686.371 1485.86,686.371 1486.42,686.371 1486.98,686.371 1487.54,686.371 1488.1,686.371 1488.66,686.371 1489.22,686.371 1489.78,686.371 1490.34,686.371 1490.89,686.371 1491.45,686.371 1492.01,686.371 1492.57,686.371 1493.13,686.371 1493.69,686.371 1494.25,686.371 1494.81,686.371 1495.37,686.371 1495.93,686.371 1496.49,686.371 1497.05,686.371 1497.61,686.371 1498.16,686.371 1498.72,686.371 1499.28,686.371 1499.84,686.371 1500.4,686.371 1500.96,686.371 1501.52,686.371 1502.08,686.371 1502.64,686.371 1503.2,686.371 1503.76,686.371 1504.32,686.371 1504.88,686.371 1505.44,686.371 1505.99,686.371 1506.55,686.371 1507.11,686.371 1507.67,686.371 1508.23,686.371 1508.79,686.371 1509.35,686.371 1509.91,686.371 1510.47,686.371 1511.03,686.371 1511.59,686.371 1512.15,686.371 1512.71,686.371 1513.26,686.371 1513.82,686.371 1514.38,686.371 1514.94,686.371 1515.5,686.371 1516.06,686.371 1516.62,686.371 1517.18,686.371 1517.74,686.371 1518.3,686.371 1518.86,686.371 1519.42,686.371 1519.98,686.371 1520.53,686.371 1521.09,686.371 1521.65,686.371 1522.21,686.371 1522.77,686.371 1523.33,686.371 1523.89,686.371 1524.45,686.371 1525.01,686.371 1525.57,686.371 1526.13,686.371 1526.69,686.371 1527.25,686.371 1527.81,686.371 1528.36,686.371 1528.92,686.371 1529.48,686.371 1530.04,686.371 1530.6,686.371 1531.16,686.371 1531.72,686.371 1532.28,686.371 1532.84,686.371 1533.4,686.371 1533.96,686.371 1534.52,686.371 1535.08,686.371 1535.63,686.371 1536.19,686.371 1536.75,686.371 1537.31,686.371 1537.87,686.371 1538.43,686.371 1538.99,686.371 1539.55,686.371 1540.11,686.371 1540.67,686.371 1541.23,686.371 1541.79,686.371 1542.35,686.371 1542.9,686.371 1543.46,686.371 1544.02,686.371 1544.58,686.371 1545.14,686.371 1545.7,686.371 1546.26,686.371 1546.82,686.371 1547.38,686.371 1547.94,686.371 1548.5,686.371 1549.06,686.371 1549.62,686.371 1550.18,686.371 1550.73,686.371 1551.29,686.371 1551.85,686.371 1552.41,686.371 1552.97,686.371 1553.53,686.371 1554.09,686.371 1554.65,686.371 1555.21,686.371 1555.77,686.371 1556.33,686.371 1556.89,686.371 1557.45,686.371 1558,686.371 1558.56,686.371 1559.12,686.371 1559.68,686.371 1560.24,686.371 1560.8,686.371 1561.36,686.371 1561.92,686.371 1562.48,686.371 1563.04,686.371 1563.6,686.371 1564.16,686.371 1564.72,686.371 1565.28,686.371 1565.83,686.371 1566.39,686.371 1566.95,686.371 1567.51,686.371 1568.07,686.371 1568.63,686.371 1569.19,686.371 1569.75,686.371 1570.31,686.371 1570.87,686.371 1571.43,686.371 1571.99,686.371 1572.55,686.371 1573.1,686.371 1573.66,686.371 1574.22,686.371 1574.78,686.371 1575.34,686.371 1575.9,686.371 1576.46,686.371 1577.02,686.371 1577.58,686.371 1578.14,686.371 1578.7,686.371 1579.26,686.371 1579.82,686.371 1580.37,686.371 1580.93,686.371 1581.49,686.371 1582.05,686.371 1582.61,686.371 1583.17,686.371 1583.73,686.371 1584.29,686.371 1584.85,686.371 1585.41,686.371 1585.97,686.371 1586.53,686.371 1587.09,686.371 1587.65,686.371 1588.2,686.371 1588.76,686.371 1589.32,686.371 1589.88,686.371 1590.44,686.371 1591,686.371 1591.56,686.371 1592.12,686.371 1592.68,686.371 1593.24,686.371 1593.8,686.371 1594.36,686.371 1594.92,686.371 1595.47,686.371 1596.03,686.371 1596.59,686.371 1597.15,686.371 1597.71,686.371 1598.27,686.371 1598.83,686.371 1599.39,686.371 1599.95,686.371 1600.51,686.371 1601.07,686.371 1601.63,686.371 1602.19,686.371 1602.74,686.371 1603.3,686.371 1603.86,686.371 1604.42,686.371 1604.98,686.371 1605.54,686.371 1606.1,686.371 1606.66,686.371 1607.22,686.371 1607.78,686.371 1608.34,686.371 1608.9,686.371 1609.46,686.371 1610.02,686.371 1610.57,686.371 1611.13,686.371 1611.69,686.371 1612.25,686.371 1612.81,686.371 1613.37,686.371 1613.93,686.371 1614.49,686.371 1615.05,686.371 1615.61,686.371 1616.17,686.371 1616.73,686.371 1617.29,686.371 1617.84,686.371 1618.4,686.371 1618.96,686.371 1619.52,686.371 1620.08,686.371 1620.64,686.371 1621.2,686.371 1621.76,686.371 1622.32,686.371 1622.88,686.371 1623.44,686.371 1624,686.371 1624.56,686.371 1625.11,686.371 1625.67,686.371 1626.23,686.371 1626.79,686.371 1627.35,686.371 1627.91,686.371 1628.47,686.371 1629.03,686.371 1629.59,686.371 1630.15,686.371 1630.71,686.371 1631.27,686.371 1631.83,686.371 1632.39,686.371 1632.94,686.371 1633.5,686.371 1634.06,686.371 1634.62,686.371 1635.18,686.371 1635.74,686.371 1636.3,686.371 1636.86,686.371 1637.42,686.371 1637.98,686.371 1638.54,686.371 1639.1,686.371 1639.66,686.371 1640.21,686.371 1640.77,686.371 1641.33,686.371 1641.89,686.371 1642.45,686.371 1643.01,686.371 1643.57,686.371 1644.13,686.371 1644.69,686.371 1645.25,686.371 1645.81,686.371 1646.37,686.371 1646.93,686.371 1647.48,686.371 1648.04,686.371 1648.6,686.371 1649.16,686.371 1649.72,686.371 1650.28,686.371 1650.84,686.371 1651.4,686.371 1651.96,686.371 1652.52,686.371 1653.08,686.371 1653.64,686.371 1654.2,686.371 1654.76,686.371 1655.31,686.371 1655.87,686.371 1656.43,686.371 1656.99,686.371 1657.55,686.371 1658.11,686.371 1658.67,686.371 1659.23,686.371 1659.79,686.371 1660.35,686.371 1660.91,686.371 1661.47,686.371 1662.03,686.371 1662.58,686.371 1663.14,686.371 1663.7,686.371 1664.26,686.371 1664.82,686.371 1665.38,686.371 1665.94,686.371 1666.5,686.371 1667.06,686.371 1667.62,686.371 1668.18,686.371 1668.74,686.371 1669.3,686.371 1669.85,686.371 1670.41,686.371 1670.97,686.371 1671.53,686.371 1672.09,686.371 1672.65,686.371 1673.21,686.371 1673.77,686.371 1674.33,686.371 1674.89,686.371 1675.45,686.371 1676.01,686.371 1676.57,686.371 1677.13,686.371 1677.68,686.371 1678.24,686.371 1678.8,686.371 1679.36,686.371 1679.92,686.371 1680.48,686.371 1681.04,686.371 1681.6,686.371 1682.16,686.371 1682.72,686.371 1683.28,686.371 1683.84,686.371 1684.4,686.371 1684.95,686.371 1685.51,686.371 1686.07,686.371 1686.63,686.371 1687.19,686.371 1687.75,686.371 1688.31,686.371 1688.87,686.371 1689.43,686.371 1689.99,686.371 1690.55,686.371 1691.11,686.371 1691.67,686.371 1692.23,686.371 1692.78,686.371 1693.34,686.371 1693.9,686.371 1694.46,686.371 1695.02,686.371 1695.58,686.371 1696.14,686.371 1696.7,686.371 1697.26,686.371 1697.82,686.371 1698.38,686.371 1698.94,686.371 1699.5,686.371 1700.05,686.371 1700.61,686.371 1701.17,686.371 1701.73,686.371 1702.29,686.371 1702.85,686.371 1703.41,686.371 1703.97,686.371 1704.53,686.371 1705.09,686.371 1705.65,686.371 1706.21,686.371 1706.77,686.371 1707.32,686.371 1707.88,686.371 1708.44,686.371 1709,686.371 1709.56,686.371 1710.12,686.371 1710.68,686.371 1711.24,686.371 1711.8,686.371 1712.36,686.371 1712.92,686.371 1713.48,686.371 1714.04,686.371 1714.6,686.371 1715.15,686.371 1715.71,686.371 1716.27,686.371 1716.83,686.371 1717.39,686.371 1717.95,686.371 1718.51,686.371 1719.07,686.371 1719.63,686.371 1720.19,686.371 1720.75,686.371 1721.31,686.371 1721.87,686.371 1722.42,686.371 1722.98,686.371 1723.54,686.371 1724.1,686.371 1724.66,686.371 1725.22,686.371 1725.78,686.371 1726.34,686.371 1726.9,686.371 1727.46,686.371 1728.02,686.371 1728.58,686.371 1729.14,686.371 1729.69,686.371 1730.25,686.371 1730.81,686.371 1731.37,686.371 1731.93,686.371 1732.49,686.371 1733.05,686.371 1733.61,686.371 1734.17,686.371 1734.73,686.371 1735.29,686.371 1735.85,686.371 1736.41,686.371 1736.97,686.371 1737.52,686.371 1738.08,686.371 1738.64,686.371 1739.2,686.371 1739.76,686.371 1740.32,686.371 1740.88,686.371 1741.44,686.371 1742,686.371 1742.56,686.371 1743.12,686.371 1743.68,686.371 1744.24,686.371 1744.79,686.371 1745.35,686.371 1745.91,686.371 1746.47,686.371 1747.03,686.371 1747.59,686.371 1748.15,686.371 1748.71,686.371 1749.27,686.371 1749.83,686.371 1750.39,686.371 1750.95,686.371 1751.51,686.371 1752.06,686.371 1752.62,686.371 1753.18,686.371 1753.74,686.371 1754.3,686.371 1754.86,686.371 1755.42,686.371 1755.98,686.371 1756.54,686.371 1757.1,686.371 1757.66,686.371 1758.22,686.371 1758.78,686.371 1759.34,686.371 1759.89,686.371 1760.45,686.371 1761.01,686.371 1761.57,686.371 1762.13,686.371 1762.69,686.371 1763.25,686.371 1763.81,686.371 1764.37,686.371 1764.93,686.371 1765.49,686.371 1766.05,686.371 1766.61,686.371 1767.16,686.371 1767.72,686.371 1768.28,686.371 1768.84,686.371 1769.4,686.371 1769.96,686.371 1770.52,686.371 1771.08,686.371 1771.64,686.371 1772.2,686.371 1772.76,686.371 1773.32,686.371 1773.88,686.371 1774.43,686.371 1774.99,686.371 1775.55,686.371 1776.11,686.371 1776.67,686.371 1777.23,686.371 1777.79,686.371 1778.35,686.371 1778.91,686.371 1779.47,686.371 1780.03,686.371 1780.59,686.371 1781.15,686.371 1781.71,686.371 1782.26,686.371 1782.82,686.371 1783.38,686.371 1783.94,686.371 1784.5,686.371 1785.06,686.371 1785.62,686.371 1786.18,686.371 1786.74,686.371 1787.3,686.371 1787.86,686.371 1788.42,686.371 1788.98,686.371 1789.53,686.371 1790.09,686.371 1790.65,686.371 1791.21,686.371 1791.77,686.371 1792.33,686.371 1792.89,686.371 1793.45,686.371 1794.01,686.371 1794.57,686.371 1795.13,686.371 1795.69,686.371 1796.25,686.371 1796.8,686.371 1797.36,686.371 1797.92,686.371 1798.48,686.371 1799.04,686.371 1799.6,686.371 1800.16,686.371 1800.72,686.371 1801.28,686.371 1801.84,686.371 1802.4,686.371 1802.96,686.371 1803.52,686.371 1804.08,686.371 1804.63,686.371 1805.19,686.371 1805.75,686.371 1806.31,686.371 1806.87,686.371 1807.43,686.371 1807.99,686.371 1808.55,686.371 1809.11,686.371 1809.67,686.371 1810.23,686.371 1810.79,686.371 1811.35,686.371 1811.9,686.371 1812.46,686.371 1813.02,686.371 1813.58,686.371 1814.14,686.371 1814.7,686.371 1815.26,686.371 1815.82,686.371 1816.38,686.371 1816.94,686.371 1817.5,686.371 1818.06,686.371 1818.62,686.371 1819.18,686.371 1819.73,686.371 1820.29,686.371 1820.85,686.371 1821.41,686.371 1821.97,686.371 1822.53,686.371 1823.09,686.371 1823.65,686.371 1824.21,686.371 1824.77,686.371 1825.33,686.371 1825.89,686.371 1826.45,686.371 1827,686.371 1827.56,686.371 1828.12,686.371 1828.68,686.371 1829.24,686.371 1829.8,686.371 1830.36,686.371 1830.92,686.371 1831.48,686.371 1832.04,686.371 1832.6,686.371 1833.16,686.371 1833.72,686.371 1834.27,686.371 1834.83,686.371 1835.39,686.371 1835.95,686.371 1836.51,686.371 1837.07,686.371 1837.63,686.371 1838.19,686.371 \"/>\n<path clip-path=\"url(#clip543)\" d=\"M720.247 685.19 L720.806 685.19 L721.365 685.19 L721.924 685.19 L722.484 685.19 L723.043 685.19 L723.602 685.19 L724.161 685.19 L724.721 685.19 L725.28 685.19 L725.839 685.19 L726.398 685.19 L726.958 685.19 L727.517 685.19 L728.076 685.19 L728.635 685.19 L729.195 685.19 L729.754 685.19 L730.313 685.19 L730.872 685.19 L731.432 685.19 L731.991 685.19 L732.55 685.19 L733.109 685.19 L733.669 685.19 L734.228 685.19 L734.787 685.19 L735.346 685.19 L735.906 685.19 L736.465 685.19 L737.024 685.19 L737.583 685.19 L738.143 685.19 L738.702 685.19 L739.261 685.19 L739.82 685.19 L740.38 685.19 L740.939 685.19 L741.498 685.19 L742.057 685.19 L742.617 685.19 L743.176 685.19 L743.735 685.19 L744.294 685.19 L744.854 685.19 L745.413 685.19 L745.972 685.19 L746.531 685.19 L747.091 685.19 L747.65 685.19 L748.209 685.19 L748.768 685.19 L749.328 685.19 L749.887 685.19 L750.446 685.19 L751.005 685.19 L751.565 685.19 L752.124 685.19 L752.683 685.19 L753.242 685.19 L753.802 685.19 L754.361 685.19 L754.92 685.19 L755.479 685.19 L756.039 685.19 L756.598 685.19 L757.157 685.19 L757.716 685.19 L758.276 685.19 L758.835 685.19 L759.394 685.19 L759.953 685.19 L760.513 685.19 L761.072 685.19 L761.631 685.19 L762.19 685.19 L762.75 685.19 L763.309 685.19 L763.868 685.19 L764.427 685.19 L764.987 685.19 L765.546 685.19 L766.105 685.19 L766.664 685.19 L767.224 685.19 L767.783 685.19 L768.342 685.19 L768.901 685.19 L769.461 685.19 L770.02 685.19 L770.579 685.19 L771.138 685.19 L771.698 685.19 L772.257 685.19 L772.816 685.19 L773.375 685.19 L773.935 685.19 L774.494 685.19 L775.053 685.19 L775.612 685.19 L776.172 685.19 L776.731 685.19 L777.29 685.19 L777.849 685.19 L778.409 685.19 L778.968 685.19 L779.527 685.19 L780.086 685.19 L780.646 685.19 L781.205 685.19 L781.764 685.19 L782.323 685.19 L782.883 685.19 L783.442 685.19 L784.001 685.19 L784.56 685.19 L785.12 685.19 L785.679 685.19 L786.238 685.19 L786.797 685.19 L787.357 685.19 L787.916 685.19 L788.475 685.19 L789.034 685.19 L789.594 685.19 L790.153 685.19 L790.712 685.19 L791.271 685.19 L791.831 685.19 L792.39 685.19 L792.949 685.19 L793.508 685.19 L794.068 685.19 L794.627 685.19 L795.186 685.19 L795.745 685.19 L796.305 685.19 L796.864 685.19 L797.423 685.19 L797.982 685.19 L798.542 685.19 L799.101 685.19 L799.66 685.19 L800.219 685.19 L800.779 685.19 L801.338 685.19 L801.897 685.19 L802.456 685.19 L803.016 685.19 L803.575 685.19 L804.134 685.19 L804.693 685.19 L805.253 685.19 L805.812 685.19 L806.371 685.19 L806.931 685.19 L807.49 685.19 L808.049 685.19 L808.608 685.19 L809.168 685.19 L809.727 685.19 L810.286 685.19 L810.845 685.19 L811.405 685.19 L811.964 685.19 L812.523 685.19 L813.082 685.19 L813.642 685.19 L814.201 685.19 L814.76 685.19 L815.319 685.19 L815.879 685.19 L816.438 685.19 L816.997 685.19 L817.556 685.19 L818.116 685.19 L818.675 685.19 L819.234 685.19 L819.793 685.19 L820.353 685.19 L820.912 685.19 L821.471 685.19 L822.03 685.19 L822.59 685.19 L823.149 685.19 L823.708 685.19 L824.267 685.19 L824.827 685.19 L825.386 685.19 L825.945 685.19 L826.504 685.19 L827.064 685.19 L827.623 685.19 L828.182 685.19 L828.741 685.19 L829.301 685.19 L829.86 685.19 L830.419 685.19 L830.978 685.19 L831.538 685.19 L832.097 685.19 L832.656 685.19 L833.215 685.19 L833.775 685.19 L834.334 685.19 L834.893 685.19 L835.452 685.19 L836.012 685.19 L836.571 685.19 L837.13 685.19 L837.689 685.19 L838.249 685.19 L838.808 685.19 L839.367 685.19 L839.926 685.19 L840.486 685.19 L841.045 685.19 L841.604 685.19 L842.163 685.19 L842.723 685.19 L843.282 685.19 L843.841 685.19 L844.4 685.19 L844.96 685.19 L845.519 685.19 L846.078 685.19 L846.637 685.19 L847.197 685.19 L847.756 685.19 L848.315 685.19 L848.874 685.19 L849.434 685.19 L849.993 685.19 L850.552 685.19 L851.111 685.19 L851.671 685.19 L852.23 685.19 L852.789 685.19 L853.348 685.19 L853.908 685.19 L854.467 685.19 L855.026 685.19 L855.585 685.19 L856.145 685.19 L856.704 685.19 L857.263 685.19 L857.822 685.19 L858.382 685.19 L858.941 685.19 L859.5 685.19 L860.059 685.19 L860.619 685.19 L861.178 685.19 L861.737 685.19 L862.296 685.19 L862.856 685.19 L863.415 685.19 L863.974 685.19 L864.533 685.19 L865.093 685.19 L865.652 685.19 L866.211 685.19 L866.77 685.19 L867.33 685.19 L867.889 685.19 L868.448 685.19 L869.007 685.19 L869.567 685.19 L870.126 685.19 L870.685 685.19 L871.244 685.19 L871.804 685.19 L872.363 685.19 L872.922 685.19 L873.481 685.19 L874.041 685.19 L874.6 685.19 L875.159 685.19 L875.718 685.19 L876.278 685.19 L876.837 685.19 L877.396 685.19 L877.955 685.19 L878.515 685.19 L879.074 685.19 L879.633 685.19 L880.192 685.19 L880.752 685.19 L881.311 685.19 L881.87 685.19 L882.429 685.19 L882.989 685.19 L883.548 685.19 L884.107 685.19 L884.666 685.19 L885.226 685.19 L885.785 685.19 L886.344 685.19 L886.903 685.19 L887.463 685.19 L888.022 685.19 L888.581 685.19 L889.14 685.19 L889.7 685.19 L890.259 685.19 L890.818 685.19 L891.377 685.19 L891.937 685.19 L892.496 685.19 L893.055 685.19 L893.614 685.19 L894.174 685.19 L894.733 685.19 L895.292 685.19 L895.851 685.19 L896.411 685.19 L896.97 685.19 L897.529 685.19 L898.088 685.19 L898.648 685.19 L899.207 685.19 L899.766 685.19 L900.325 685.19 L900.885 685.19 L901.444 685.19 L902.003 685.19 L902.562 685.19 L903.122 685.19 L903.681 685.19 L904.24 685.19 L904.799 685.19 L905.359 685.19 L905.918 685.19 L906.477 685.19 L907.036 685.19 L907.596 685.19 L908.155 685.19 L908.714 685.19 L909.273 685.19 L909.833 685.19 L910.392 685.19 L910.951 685.19 L911.51 685.19 L912.07 685.19 L912.629 685.19 L913.188 685.19 L913.747 685.19 L914.307 685.19 L914.866 685.19 L915.425 685.19 L915.984 685.19 L916.544 685.19 L917.103 685.19 L917.662 685.19 L918.221 685.19 L918.781 685.19 L919.34 685.19 L919.899 685.19 L920.458 685.19 L921.018 685.19 L921.577 685.19 L922.136 685.19 L922.695 685.19 L923.255 685.19 L923.814 685.19 L924.373 685.19 L924.932 685.19 L925.492 685.19 L926.051 685.19 L926.61 685.19 L927.169 685.19 L927.729 685.19 L928.288 685.19 L928.847 685.19 L929.406 685.19 L929.966 685.19 L930.525 685.19 L931.084 685.19 L931.644 685.19 L932.203 685.19 L932.762 685.19 L933.321 685.19 L933.881 685.19 L934.44 685.19 L934.999 685.19 L935.558 685.19 L936.118 685.19 L936.677 685.19 L937.236 685.19 L937.795 685.19 L938.355 685.19 L938.914 685.19 L939.473 685.19 L940.032 685.19 L940.592 685.19 L941.151 685.19 L941.71 685.19 L942.269 685.19 L942.829 685.19 L943.388 685.19 L943.947 685.19 L944.506 685.19 L945.066 685.19 L945.625 685.19 L946.184 685.19 L946.743 685.19 L947.303 685.19 L947.862 685.19 L948.421 685.19 L948.98 685.19 L949.54 685.19 L950.099 685.19 L950.658 685.19 L951.217 685.19 L951.777 685.19 L952.336 685.19 L952.895 685.19 L953.454 685.19 L954.014 685.19 L954.573 685.19 L955.132 685.19 L955.691 685.19 L956.251 685.19 L956.81 685.19 L957.369 685.19 L957.928 685.19 L958.488 685.19 L959.047 685.19 L959.606 685.19 L960.165 685.19 L960.725 685.19 L961.284 685.19 L961.843 685.19 L962.402 685.19 L962.962 685.19 L963.521 685.19 L964.08 685.19 L964.639 685.19 L965.199 685.19 L965.758 685.19 L966.317 685.19 L966.876 685.19 L967.436 685.19 L967.995 685.19 L968.554 685.19 L969.113 685.19 L969.673 685.19 L970.232 685.19 L970.791 685.19 L971.35 685.19 L971.91 685.19 L972.469 685.19 L973.028 685.19 L973.587 685.19 L974.147 685.19 L974.706 685.19 L975.265 685.19 L975.824 685.19 L976.384 685.19 L976.943 685.19 L977.502 685.19 L978.061 685.19 L978.621 685.19 L979.18 685.19 L979.739 685.19 L980.298 685.19 L980.858 685.19 L981.417 685.19 L981.976 685.19 L982.535 685.19 L983.095 685.19 L983.654 685.19 L984.213 685.19 L984.772 685.19 L985.332 685.19 L985.891 685.19 L986.45 685.19 L987.009 685.19 L987.569 685.19 L988.128 685.19 L988.687 685.19 L989.246 685.19 L989.806 685.19 L990.365 685.19 L990.924 685.19 L991.483 685.19 L992.043 685.19 L992.602 685.19 L993.161 685.19 L993.72 685.19 L994.28 685.19 L994.839 685.19 L995.398 685.19 L995.957 685.19 L996.517 685.19 L997.076 685.19 L997.635 685.19 L998.194 685.19 L998.754 685.19 L999.313 685.19 L999.872 685.19 L1000.43 685.19 L1000.99 685.19 L1001.55 685.19 L1002.11 685.19 L1002.67 685.19 L1003.23 685.19 L1003.79 685.19 L1004.35 685.19 L1004.91 685.19 L1005.46 685.19 L1006.02 685.19 L1006.58 685.19 L1007.14 685.19 L1007.7 685.19 L1008.26 685.19 L1008.82 685.19 L1009.38 685.19 L1009.94 685.19 L1010.5 685.19 L1011.06 685.19 L1011.62 685.19 L1012.18 685.19 L1012.73 685.19 L1013.29 685.19 L1013.85 685.19 L1014.41 685.19 L1014.97 685.19 L1015.53 685.19 L1016.09 685.19 L1016.65 685.19 L1017.21 685.19 L1017.77 685.19 L1018.33 685.19 L1018.89 685.19 L1019.45 685.19 L1020.01 685.19 L1020.56 685.19 L1021.12 685.19 L1021.68 685.19 L1022.24 685.19 L1022.8 685.19 L1023.36 685.19 L1023.92 685.19 L1024.48 685.19 L1025.04 685.19 L1025.6 685.19 L1026.16 685.19 L1026.72 685.19 L1027.28 685.19 L1027.83 685.19 L1028.39 685.19 L1028.95 685.19 L1029.51 685.19 L1030.07 685.19 L1030.63 685.19 L1031.19 685.19 L1031.75 685.19 L1032.31 685.19 L1032.87 685.19 L1033.43 685.19 L1033.99 685.19 L1034.55 685.19 L1035.1 685.19 L1035.66 685.19 L1036.22 685.19 L1036.78 685.19 L1037.34 685.19 L1037.9 685.19 L1038.46 685.19 L1039.02 685.19 L1039.58 685.19 L1040.14 685.19 L1040.7 685.19 L1041.26 685.19 L1041.82 685.19 L1042.38 685.19 L1042.93 685.19 L1043.49 685.19 L1044.05 685.19 L1044.61 685.19 L1045.17 685.19 L1045.73 685.19 L1046.29 685.19 L1046.85 685.19 L1047.41 685.19 L1047.97 685.19 L1048.53 685.19 L1049.09 685.19 L1049.65 685.19 L1050.2 685.19 L1050.76 685.19 L1051.32 685.19 L1051.88 685.19 L1052.44 685.19 L1053 685.19 L1053.56 685.19 L1054.12 685.19 L1054.68 685.19 L1055.24 685.19 L1055.8 685.19 L1056.36 685.19 L1056.92 685.19 L1057.48 685.19 L1058.03 685.19 L1058.59 685.19 L1059.15 685.19 L1059.71 685.19 L1060.27 685.19 L1060.83 685.19 L1061.39 685.19 L1061.95 685.19 L1062.51 685.19 L1063.07 685.19 L1063.63 685.19 L1064.19 685.19 L1064.75 685.19 L1065.3 685.19 L1065.86 685.19 L1066.42 685.19 L1066.98 685.19 L1067.54 685.19 L1068.1 685.19 L1068.66 685.19 L1069.22 685.19 L1069.78 685.19 L1070.34 685.19 L1070.9 685.19 L1071.46 685.19 L1072.02 685.19 L1072.57 685.19 L1073.13 685.19 L1073.69 685.19 L1074.25 685.19 L1074.81 685.19 L1075.37 685.19 L1075.93 685.19 L1076.49 685.19 L1077.05 685.19 L1077.61 685.19 L1078.17 685.19 L1078.73 685.19 L1079.29 685.19 L1079.85 685.19 L1080.4 685.19 L1080.96 685.19 L1081.52 685.19 L1082.08 685.19 L1082.64 685.19 L1083.2 685.19 L1083.76 685.19 L1084.32 685.19 L1084.88 685.19 L1085.44 685.19 L1086 685.19 L1086.56 685.19 L1087.12 685.19 L1087.67 685.19 L1088.23 685.19 L1088.79 685.19 L1089.35 685.19 L1089.91 685.19 L1090.47 685.19 L1091.03 685.19 L1091.59 685.19 L1092.15 685.19 L1092.71 685.19 L1093.27 685.19 L1093.83 685.19 L1094.39 685.19 L1094.94 685.19 L1095.5 685.19 L1096.06 685.19 L1096.62 685.19 L1097.18 685.19 L1097.74 685.19 L1098.3 685.19 L1098.86 685.19 L1099.42 685.19 L1099.98 685.19 L1100.54 685.19 L1101.1 685.19 L1101.66 685.19 L1102.22 685.19 L1102.77 685.19 L1103.33 685.19 L1103.89 685.19 L1104.45 685.19 L1105.01 685.19 L1105.57 685.19 L1106.13 685.19 L1106.69 685.19 L1107.25 685.19 L1107.81 685.19 L1108.37 685.19 L1108.93 685.19 L1109.49 685.19 L1110.04 685.19 L1110.6 685.19 L1111.16 685.19 L1111.72 685.19 L1112.28 685.19 L1112.84 685.19 L1113.4 685.19 L1113.96 685.19 L1114.52 685.19 L1115.08 685.19 L1115.64 685.19 L1116.2 685.19 L1116.76 685.19 L1117.31 685.19 L1117.87 685.19 L1118.43 685.19 L1118.99 685.19 L1119.55 685.19 L1120.11 685.19 L1120.67 685.19 L1121.23 685.19 L1121.79 685.19 L1122.35 685.19 L1122.91 685.19 L1123.47 685.19 L1124.03 685.19 L1124.59 685.19 L1125.14 685.19 L1125.7 685.19 L1126.26 685.19 L1126.82 685.19 L1127.38 685.19 L1127.94 685.19 L1128.5 685.19 L1129.06 685.19 L1129.62 685.19 L1130.18 685.19 L1130.74 685.19 L1131.3 685.19 L1131.86 685.19 L1132.41 685.19 L1132.97 685.19 L1133.53 685.19 L1134.09 685.19 L1134.65 685.19 L1135.21 685.19 L1135.77 685.19 L1136.33 685.19 L1136.89 685.19 L1137.45 685.19 L1138.01 685.19 L1138.57 685.19 L1139.13 685.19 L1139.68 685.19 L1140.24 685.19 L1140.8 685.19 L1141.36 685.19 L1141.92 685.19 L1142.48 685.19 L1143.04 685.19 L1143.6 685.19 L1144.16 685.19 L1144.72 685.19 L1145.28 685.19 L1145.84 685.19 L1146.4 685.19 L1146.96 685.19 L1147.51 685.19 L1148.07 685.19 L1148.63 685.19 L1149.19 685.19 L1149.75 685.19 L1150.31 685.19 L1150.87 685.19 L1151.43 685.19 L1151.99 685.19 L1152.55 685.19 L1153.11 685.19 L1153.67 685.19 L1154.23 685.19 L1154.78 685.19 L1155.34 685.19 L1155.9 685.19 L1156.46 685.19 L1157.02 685.19 L1157.58 685.19 L1158.14 685.19 L1158.7 685.19 L1159.26 685.19 L1159.82 685.19 L1160.38 685.19 L1160.94 685.19 L1161.5 685.19 L1162.05 685.19 L1162.61 685.19 L1163.17 685.19 L1163.73 685.19 L1164.29 685.19 L1164.85 685.19 L1165.41 685.19 L1165.97 685.19 L1166.53 685.19 L1167.09 685.19 L1167.65 685.19 L1168.21 685.19 L1168.77 685.19 L1169.33 685.19 L1169.88 685.19 L1170.44 685.19 L1171 685.19 L1171.56 685.19 L1172.12 685.19 L1172.68 685.19 L1173.24 685.19 L1173.8 685.19 L1174.36 685.19 L1174.92 685.19 L1175.48 685.19 L1176.04 685.19 L1176.6 685.19 L1177.15 685.19 L1177.71 685.19 L1178.27 685.19 L1178.83 685.19 L1179.39 685.19 L1179.95 685.19 L1180.51 685.19 L1181.07 685.19 L1181.63 685.19 L1182.19 685.19 L1182.75 685.19 L1183.31 685.19 L1183.87 685.19 L1184.43 685.19 L1184.98 685.19 L1185.54 685.19 L1186.1 685.19 L1186.66 685.19 L1187.22 685.19 L1187.78 685.19 L1188.34 685.19 L1188.9 685.19 L1189.46 685.19 L1190.02 685.19 L1190.58 685.19 L1191.14 685.19 L1191.7 685.19 L1192.25 685.19 L1192.81 685.19 L1193.37 685.19 L1193.93 685.19 L1194.49 685.19 L1195.05 685.19 L1195.61 685.19 L1196.17 685.19 L1196.73 685.19 L1197.29 685.19 L1197.85 685.19 L1198.41 685.19 L1198.97 685.19 L1199.52 685.19 L1200.08 685.19 L1200.64 685.19 L1201.2 685.19 L1201.76 685.19 L1202.32 685.19 L1202.88 685.19 L1203.44 685.19 L1204 685.19 L1204.56 685.19 L1205.12 685.19 L1205.68 685.19 L1206.24 685.19 L1206.8 685.19 L1207.35 685.19 L1207.91 685.19 L1208.47 685.19 L1209.03 685.19 L1209.59 685.19 L1210.15 685.19 L1210.71 685.19 L1211.27 685.19 L1211.83 685.19 L1212.39 685.19 L1212.95 685.19 L1213.51 685.19 L1214.07 685.19 L1214.62 685.19 L1215.18 685.19 L1215.74 685.19 L1216.3 685.19 L1216.86 685.19 L1217.42 685.19 L1217.98 685.19 L1218.54 685.19 L1219.1 685.19 L1219.66 685.19 L1220.22 685.19 L1220.78 685.19 L1221.34 685.19 L1221.89 685.19 L1222.45 685.19 L1223.01 685.19 L1223.57 685.19 L1224.13 685.19 L1224.69 685.19 L1225.25 685.19 L1225.81 685.19 L1226.37 685.19 L1226.93 685.19 L1227.49 685.19 L1228.05 685.19 L1228.61 685.19 L1229.17 685.19 L1229.72 685.19 L1230.28 685.19 L1230.84 685.19 L1231.4 685.19 L1231.96 685.19 L1232.52 685.19 L1233.08 685.19 L1233.64 685.19 L1234.2 685.19 L1234.76 685.19 L1235.32 685.19 L1235.88 685.19 L1236.44 685.19 L1236.99 685.19 L1237.55 685.19 L1238.11 685.19 L1238.67 685.19 L1239.23 685.19 L1239.79 685.19 L1240.35 685.19 L1240.91 685.19 L1241.47 685.19 L1242.03 685.19 L1242.59 685.19 L1243.15 685.19 L1243.71 685.19 L1244.26 685.19 L1244.82 685.19 L1245.38 685.19 L1245.94 685.19 L1246.5 685.19 L1247.06 685.19 L1247.62 685.19 L1248.18 685.19 L1248.74 685.19 L1249.3 685.19 L1249.86 685.19 L1250.42 685.19 L1250.98 685.19 L1251.54 685.19 L1252.09 685.19 L1252.65 685.19 L1253.21 685.19 L1253.77 685.19 L1254.33 685.19 L1254.89 685.19 L1255.45 685.19 L1256.01 685.19 L1256.57 685.19 L1257.13 685.19 L1257.69 685.19 L1258.25 685.19 L1258.81 685.19 L1259.36 685.19 L1259.92 685.19 L1260.48 685.19 L1261.04 685.19 L1261.6 685.19 L1262.16 685.19 L1262.72 685.19 L1263.28 685.19 L1263.84 685.19 L1264.4 685.19 L1264.96 685.19 L1265.52 685.19 L1266.08 685.19 L1266.63 685.19 L1267.19 685.19 L1267.75 685.19 L1268.31 685.19 L1268.87 685.19 L1269.43 685.19 L1269.99 685.19 L1270.55 685.19 L1271.11 685.19 L1271.67 685.19 L1272.23 685.19 L1272.79 685.19 L1273.35 685.19 L1273.91 685.19 L1274.46 685.19 L1275.02 685.19 L1275.58 685.19 L1276.14 685.19 L1276.7 685.19 L1277.26 685.19 L1277.82 685.19 L1278.38 685.19 L1278.94 685.19 L1279.5 685.19 L1280.06 685.19 L1280.62 685.19 L1281.18 685.19 L1281.73 685.19 L1282.29 685.19 L1282.85 685.19 L1283.41 685.19 L1283.97 685.19 L1284.53 685.19 L1285.09 685.19 L1285.65 685.19 L1286.21 685.19 L1286.77 685.19 L1287.33 685.19 L1287.89 685.19 L1288.45 685.19 L1289 685.19 L1289.56 685.19 L1290.12 685.19 L1290.68 685.19 L1291.24 685.19 L1291.8 685.19 L1292.36 685.19 L1292.92 685.19 L1293.48 685.19 L1294.04 685.19 L1294.6 685.19 L1295.16 685.19 L1295.72 685.19 L1296.28 685.19 L1296.83 685.19 L1297.39 685.19 L1297.95 685.19 L1298.51 685.19 L1299.07 685.19 L1299.63 685.19 L1300.19 685.19 L1300.75 685.19 L1301.31 685.19 L1301.87 685.19 L1302.43 685.19 L1302.99 685.19 L1303.55 685.19 L1304.1 685.19 L1304.66 685.19 L1305.22 685.19 L1305.78 685.19 L1306.34 685.19 L1306.9 685.19 L1307.46 685.19 L1308.02 685.19 L1308.58 685.19 L1309.14 685.19 L1309.7 685.19 L1310.26 685.19 L1310.82 685.19 L1311.38 685.19 L1311.93 685.19 L1312.49 685.19 L1313.05 685.19 L1313.61 685.19 L1314.17 685.19 L1314.73 685.19 L1315.29 685.19 L1315.85 685.19 L1316.41 685.19 L1316.97 685.19 L1317.53 685.19 L1318.09 685.19 L1318.65 685.19 L1319.2 685.19 L1319.76 685.19 L1320.32 685.19 L1320.88 685.19 L1321.44 685.19 L1322 685.19 L1322.56 685.19 L1323.12 685.19 L1323.68 685.19 L1324.24 685.19 L1324.8 685.19 L1325.36 685.19 L1325.92 685.19 L1326.47 685.19 L1327.03 685.19 L1327.59 685.19 L1328.15 685.19 L1328.71 685.19 L1329.27 685.19 L1329.83 685.19 L1330.39 685.19 L1330.95 685.19 L1331.51 685.19 L1332.07 685.19 L1332.63 685.19 L1333.19 685.19 L1333.75 685.19 L1334.3 685.19 L1334.86 685.19 L1335.42 685.19 L1335.98 685.19 L1336.54 685.19 L1337.1 685.19 L1337.66 685.19 L1338.22 685.19 L1338.78 685.19 L1339.34 685.19 L1339.9 685.19 L1340.46 685.19 L1341.02 685.19 L1341.57 685.19 L1342.13 685.19 L1342.69 685.19 L1343.25 685.19 L1343.81 685.19 L1344.37 685.19 L1344.93 685.19 L1345.49 685.19 L1346.05 685.19 L1346.61 685.19 L1347.17 685.19 L1347.73 685.19 L1348.29 685.19 L1348.84 685.19 L1349.4 685.19 L1349.96 685.19 L1350.52 685.19 L1351.08 685.19 L1351.64 685.19 L1352.2 685.19 L1352.76 685.19 L1353.32 685.19 L1353.88 685.19 L1354.44 685.19 L1355 685.19 L1355.56 685.19 L1356.12 685.19 L1356.67 685.19 L1357.23 685.19 L1357.79 685.19 L1358.35 685.19 L1358.91 685.19 L1359.47 685.19 L1360.03 685.19 L1360.59 685.19 L1361.15 685.19 L1361.71 685.19 L1362.27 685.19 L1362.83 685.19 L1363.39 685.19 L1363.94 685.19 L1364.5 685.19 L1365.06 685.19 L1365.62 685.19 L1366.18 685.19 L1366.74 685.19 L1367.3 685.19 L1367.86 685.19 L1368.42 685.19 L1368.98 685.19 L1369.54 685.19 L1370.1 685.19 L1370.66 685.19 L1371.21 685.19 L1371.77 685.19 L1372.33 685.19 L1372.89 685.19 L1373.45 685.19 L1374.01 685.19 L1374.57 685.19 L1375.13 685.19 L1375.69 685.19 L1376.25 685.19 L1376.81 685.19 L1377.37 685.19 L1377.93 685.19 L1378.49 685.19 L1379.04 685.19 L1379.6 685.19 L1380.16 685.19 L1380.72 685.19 L1381.28 685.19 L1381.84 685.19 L1382.4 685.19 L1382.96 685.19 L1383.52 685.19 L1384.08 685.19 L1384.64 685.19 L1385.2 685.19 L1385.76 685.19 L1386.31 685.19 L1386.87 685.19 L1387.43 685.19 L1387.99 685.19 L1388.55 685.19 L1389.11 685.19 L1389.67 685.19 L1390.23 685.19 L1390.79 685.19 L1391.35 685.19 L1391.91 685.19 L1392.47 685.19 L1393.03 685.19 L1393.58 685.19 L1394.14 685.19 L1394.7 685.19 L1395.26 685.19 L1395.82 685.19 L1396.38 685.19 L1396.94 685.19 L1397.5 685.19 L1398.06 685.19 L1398.62 685.19 L1399.18 685.19 L1399.74 685.19 L1400.3 685.19 L1400.86 685.19 L1401.41 685.19 L1401.97 685.19 L1402.53 685.19 L1403.09 685.19 L1403.65 685.19 L1404.21 685.19 L1404.77 685.19 L1405.33 685.19 L1405.89 685.19 L1406.45 685.19 L1407.01 685.19 L1407.57 685.19 L1408.13 685.19 L1408.68 685.19 L1409.24 685.19 L1409.8 685.19 L1410.36 685.19 L1410.92 685.19 L1411.48 685.19 L1412.04 685.19 L1412.6 685.19 L1413.16 685.19 L1413.72 685.19 L1414.28 685.19 L1414.84 685.19 L1415.4 685.19 L1415.95 685.19 L1416.51 685.19 L1417.07 685.19 L1417.63 685.19 L1418.19 685.19 L1418.75 685.19 L1419.31 685.19 L1419.87 685.19 L1420.43 685.19 L1420.99 685.19 L1421.55 685.19 L1422.11 685.19 L1422.67 685.19 L1423.23 685.19 L1423.78 685.19 L1424.34 685.19 L1424.9 685.19 L1425.46 685.19 L1426.02 685.19 L1426.58 685.19 L1427.14 685.19 L1427.7 685.19 L1428.26 685.19 L1428.82 685.19 L1429.38 685.19 L1429.94 685.19 L1430.5 685.19 L1431.05 685.19 L1431.61 685.19 L1432.17 685.19 L1432.73 685.19 L1433.29 685.19 L1433.85 685.19 L1434.41 685.19 L1434.97 685.19 L1435.53 685.19 L1436.09 685.19 L1436.65 685.19 L1437.21 685.19 L1437.77 685.19 L1438.33 685.19 L1438.88 685.19 L1439.44 685.19 L1440 685.19 L1440.56 685.19 L1441.12 685.19 L1441.68 685.19 L1442.24 685.19 L1442.8 685.19 L1443.36 685.19 L1443.92 685.19 L1444.48 685.19 L1445.04 685.19 L1445.6 685.19 L1446.15 685.19 L1446.71 685.19 L1447.27 685.19 L1447.83 685.19 L1448.39 685.19 L1448.95 685.19 L1449.51 685.19 L1450.07 685.19 L1450.63 685.19 L1451.19 685.19 L1451.75 685.19 L1452.31 685.19 L1452.87 685.19 L1453.42 685.19 L1453.98 685.19 L1454.54 685.19 L1455.1 685.19 L1455.66 685.19 L1456.22 685.19 L1456.78 685.19 L1457.34 685.19 L1457.9 685.19 L1458.46 685.19 L1459.02 685.19 L1459.58 685.19 L1460.14 685.19 L1460.7 685.19 L1461.25 685.19 L1461.81 685.19 L1462.37 685.19 L1462.93 685.19 L1463.49 685.19 L1464.05 685.19 L1464.61 685.19 L1465.17 685.19 L1465.73 685.19 L1466.29 685.19 L1466.85 685.19 L1467.41 685.19 L1467.97 685.19 L1468.52 685.19 L1469.08 685.19 L1469.64 685.19 L1470.2 685.19 L1470.76 685.19 L1471.32 685.19 L1471.88 685.19 L1472.44 685.19 L1473 685.19 L1473.56 685.19 L1474.12 685.19 L1474.68 685.19 L1475.24 685.19 L1475.79 685.19 L1476.35 685.19 L1476.91 685.19 L1477.47 685.19 L1478.03 685.19 L1478.59 685.19 L1479.15 685.19 L1479.71 685.19 L1480.27 685.19 L1480.83 685.19 L1481.39 685.19 L1481.95 685.19 L1482.51 685.19 L1483.07 685.19 L1483.62 685.19 L1484.18 685.19 L1484.74 685.19 L1485.3 685.19 L1485.86 685.19 L1486.42 685.19 L1486.98 685.19 L1487.54 685.19 L1488.1 685.19 L1488.66 685.19 L1489.22 685.19 L1489.78 685.19 L1490.34 685.19 L1490.89 685.19 L1491.45 685.19 L1492.01 685.19 L1492.57 685.19 L1493.13 685.19 L1493.69 685.19 L1494.25 685.19 L1494.81 685.19 L1495.37 685.19 L1495.93 685.19 L1496.49 685.19 L1497.05 685.19 L1497.61 685.19 L1498.16 685.19 L1498.72 685.19 L1499.28 685.19 L1499.84 685.19 L1500.4 685.19 L1500.96 685.19 L1501.52 685.19 L1502.08 685.19 L1502.64 685.19 L1503.2 685.19 L1503.76 685.19 L1504.32 685.19 L1504.88 685.19 L1505.44 685.19 L1505.99 685.19 L1506.55 685.19 L1507.11 685.19 L1507.67 685.19 L1508.23 685.19 L1508.79 685.19 L1509.35 685.19 L1509.91 685.19 L1510.47 685.19 L1511.03 685.19 L1511.59 685.19 L1512.15 685.19 L1512.71 685.19 L1513.26 685.19 L1513.82 685.19 L1514.38 685.19 L1514.94 685.19 L1515.5 685.19 L1516.06 685.19 L1516.62 685.19 L1517.18 685.19 L1517.74 685.19 L1518.3 685.19 L1518.86 685.19 L1519.42 685.19 L1519.98 685.19 L1520.53 685.19 L1521.09 685.19 L1521.65 685.19 L1522.21 685.19 L1522.77 685.19 L1523.33 685.19 L1523.89 685.19 L1524.45 685.19 L1525.01 685.19 L1525.57 685.19 L1526.13 685.19 L1526.69 685.19 L1527.25 685.19 L1527.81 685.19 L1528.36 685.19 L1528.92 685.19 L1529.48 685.19 L1530.04 685.19 L1530.6 685.19 L1531.16 685.19 L1531.72 685.19 L1532.28 685.19 L1532.84 685.19 L1533.4 685.19 L1533.96 685.19 L1534.52 685.19 L1535.08 685.19 L1535.63 685.19 L1536.19 685.19 L1536.75 685.19 L1537.31 685.19 L1537.87 685.19 L1538.43 685.19 L1538.99 685.19 L1539.55 685.19 L1540.11 685.19 L1540.67 685.19 L1541.23 685.19 L1541.79 685.19 L1542.35 685.19 L1542.9 685.19 L1543.46 685.19 L1544.02 685.19 L1544.58 685.19 L1545.14 685.19 L1545.7 685.19 L1546.26 685.19 L1546.82 685.19 L1547.38 685.19 L1547.94 685.19 L1548.5 685.19 L1549.06 685.19 L1549.62 685.19 L1550.18 685.19 L1550.73 685.19 L1551.29 685.19 L1551.85 685.19 L1552.41 685.19 L1552.97 685.19 L1553.53 685.19 L1554.09 685.19 L1554.65 685.19 L1555.21 685.19 L1555.77 685.19 L1556.33 685.19 L1556.89 685.19 L1557.45 685.19 L1558 685.19 L1558.56 685.19 L1559.12 685.19 L1559.68 685.19 L1560.24 685.19 L1560.8 685.19 L1561.36 685.19 L1561.92 685.19 L1562.48 685.19 L1563.04 685.19 L1563.6 685.19 L1564.16 685.19 L1564.72 685.19 L1565.28 685.19 L1565.83 685.19 L1566.39 685.19 L1566.95 685.19 L1567.51 685.19 L1568.07 685.19 L1568.63 685.19 L1569.19 685.19 L1569.75 685.19 L1570.31 685.19 L1570.87 685.19 L1571.43 685.19 L1571.99 685.19 L1572.55 685.19 L1573.1 685.19 L1573.66 685.19 L1574.22 685.19 L1574.78 685.19 L1575.34 685.19 L1575.9 685.19 L1576.46 685.19 L1577.02 685.19 L1577.58 685.19 L1578.14 685.19 L1578.7 685.19 L1579.26 685.19 L1579.82 685.19 L1580.37 685.19 L1580.93 685.19 L1581.49 685.19 L1582.05 685.19 L1582.61 685.19 L1583.17 685.19 L1583.73 685.19 L1584.29 685.19 L1584.85 685.19 L1585.41 685.19 L1585.97 685.19 L1586.53 685.19 L1587.09 685.19 L1587.65 685.19 L1588.2 685.19 L1588.76 685.19 L1589.32 685.19 L1589.88 685.19 L1590.44 685.19 L1591 685.19 L1591.56 685.19 L1592.12 685.19 L1592.68 685.19 L1593.24 685.19 L1593.8 685.19 L1594.36 685.19 L1594.92 685.19 L1595.47 685.19 L1596.03 685.19 L1596.59 685.19 L1597.15 685.19 L1597.71 685.19 L1598.27 685.19 L1598.83 685.19 L1599.39 685.19 L1599.95 685.19 L1600.51 685.19 L1601.07 685.19 L1601.63 685.19 L1602.19 685.19 L1602.74 685.19 L1603.3 685.19 L1603.86 685.19 L1604.42 685.19 L1604.98 685.19 L1605.54 685.19 L1606.1 685.19 L1606.66 685.19 L1607.22 685.19 L1607.78 685.19 L1608.34 685.19 L1608.9 685.19 L1609.46 685.19 L1610.02 685.19 L1610.57 685.19 L1611.13 685.19 L1611.69 685.19 L1612.25 685.19 L1612.81 685.19 L1613.37 685.19 L1613.93 685.19 L1614.49 685.19 L1615.05 685.19 L1615.61 685.19 L1616.17 685.19 L1616.73 685.19 L1617.29 685.19 L1617.84 685.19 L1618.4 685.19 L1618.96 685.19 L1619.52 685.19 L1620.08 685.19 L1620.64 685.19 L1621.2 685.19 L1621.76 685.19 L1622.32 685.19 L1622.88 685.19 L1623.44 685.19 L1624 685.19 L1624.56 685.19 L1625.11 685.19 L1625.67 685.19 L1626.23 685.19 L1626.79 685.19 L1627.35 685.19 L1627.91 685.19 L1628.47 685.19 L1629.03 685.19 L1629.59 685.19 L1630.15 685.19 L1630.71 685.19 L1631.27 685.19 L1631.83 685.19 L1632.39 685.19 L1632.94 685.19 L1633.5 685.19 L1634.06 685.19 L1634.62 685.19 L1635.18 685.19 L1635.74 685.19 L1636.3 685.19 L1636.86 685.19 L1637.42 685.19 L1637.98 685.19 L1638.54 685.19 L1639.1 685.19 L1639.66 685.19 L1640.21 685.19 L1640.77 685.19 L1641.33 685.19 L1641.89 685.19 L1642.45 685.19 L1643.01 685.19 L1643.57 685.19 L1644.13 685.19 L1644.69 685.19 L1645.25 685.19 L1645.81 685.19 L1646.37 685.19 L1646.93 685.19 L1647.48 685.19 L1648.04 685.19 L1648.6 685.19 L1649.16 685.19 L1649.72 685.19 L1650.28 685.19 L1650.84 685.19 L1651.4 685.19 L1651.96 685.19 L1652.52 685.19 L1653.08 685.19 L1653.64 685.19 L1654.2 685.19 L1654.76 685.19 L1655.31 685.19 L1655.87 685.19 L1656.43 685.19 L1656.99 685.19 L1657.55 685.19 L1658.11 685.19 L1658.67 685.19 L1659.23 685.19 L1659.79 685.19 L1660.35 685.19 L1660.91 685.19 L1661.47 685.19 L1662.03 685.19 L1662.58 685.19 L1663.14 685.19 L1663.7 685.19 L1664.26 685.19 L1664.82 685.19 L1665.38 685.19 L1665.94 685.19 L1666.5 685.19 L1667.06 685.19 L1667.62 685.19 L1668.18 685.19 L1668.74 685.19 L1669.3 685.19 L1669.85 685.19 L1670.41 685.19 L1670.97 685.19 L1671.53 685.19 L1672.09 685.19 L1672.65 685.19 L1673.21 685.19 L1673.77 685.19 L1674.33 685.19 L1674.89 685.19 L1675.45 685.19 L1676.01 685.19 L1676.57 685.19 L1677.13 685.19 L1677.68 685.19 L1678.24 685.19 L1678.8 685.19 L1679.36 685.19 L1679.92 685.19 L1680.48 685.19 L1681.04 685.19 L1681.6 685.19 L1682.16 685.19 L1682.72 685.19 L1683.28 685.19 L1683.84 685.19 L1684.4 685.19 L1684.95 685.19 L1685.51 685.19 L1686.07 685.19 L1686.63 685.19 L1687.19 685.19 L1687.75 685.19 L1688.31 685.19 L1688.87 685.19 L1689.43 685.19 L1689.99 685.19 L1690.55 685.19 L1691.11 685.19 L1691.67 685.19 L1692.23 685.19 L1692.78 685.19 L1693.34 685.19 L1693.9 685.19 L1694.46 685.19 L1695.02 685.19 L1695.58 685.19 L1696.14 685.19 L1696.7 685.19 L1697.26 685.19 L1697.82 685.19 L1698.38 685.19 L1698.94 685.19 L1699.5 685.19 L1700.05 685.19 L1700.61 685.19 L1701.17 685.19 L1701.73 685.19 L1702.29 685.19 L1702.85 685.19 L1703.41 685.19 L1703.97 685.19 L1704.53 685.19 L1705.09 685.19 L1705.65 685.19 L1706.21 685.19 L1706.77 685.19 L1707.32 685.19 L1707.88 685.19 L1708.44 685.19 L1709 685.19 L1709.56 685.19 L1710.12 685.19 L1710.68 685.19 L1711.24 685.19 L1711.8 685.19 L1712.36 685.19 L1712.92 685.19 L1713.48 685.19 L1714.04 685.19 L1714.6 685.19 L1715.15 685.19 L1715.71 685.19 L1716.27 685.19 L1716.83 685.19 L1717.39 685.19 L1717.95 685.19 L1718.51 685.19 L1719.07 685.19 L1719.63 685.19 L1720.19 685.19 L1720.75 685.19 L1721.31 685.19 L1721.87 685.19 L1722.42 685.19 L1722.98 685.19 L1723.54 685.19 L1724.1 685.19 L1724.66 685.19 L1725.22 685.19 L1725.78 685.19 L1726.34 685.19 L1726.9 685.19 L1727.46 685.19 L1728.02 685.19 L1728.58 685.19 L1729.14 685.19 L1729.69 685.19 L1730.25 685.19 L1730.81 685.19 L1731.37 685.19 L1731.93 685.19 L1732.49 685.19 L1733.05 685.19 L1733.61 685.19 L1734.17 685.19 L1734.73 685.19 L1735.29 685.19 L1735.85 685.19 L1736.41 685.19 L1736.97 685.19 L1737.52 685.19 L1738.08 685.19 L1738.64 685.19 L1739.2 685.19 L1739.76 685.19 L1740.32 685.19 L1740.88 685.19 L1741.44 685.19 L1742 685.19 L1742.56 685.19 L1743.12 685.19 L1743.68 685.19 L1744.24 685.19 L1744.79 685.19 L1745.35 685.19 L1745.91 685.19 L1746.47 685.19 L1747.03 685.19 L1747.59 685.19 L1748.15 685.19 L1748.71 685.19 L1749.27 685.19 L1749.83 685.19 L1750.39 685.19 L1750.95 685.19 L1751.51 685.19 L1752.06 685.19 L1752.62 685.19 L1753.18 685.19 L1753.74 685.19 L1754.3 685.19 L1754.86 685.19 L1755.42 685.19 L1755.98 685.19 L1756.54 685.19 L1757.1 685.19 L1757.66 685.19 L1758.22 685.19 L1758.78 685.19 L1759.34 685.19 L1759.89 685.19 L1760.45 685.19 L1761.01 685.19 L1761.57 685.19 L1762.13 685.19 L1762.69 685.19 L1763.25 685.19 L1763.81 685.19 L1764.37 685.19 L1764.93 685.19 L1765.49 685.19 L1766.05 685.19 L1766.61 685.19 L1767.16 685.19 L1767.72 685.19 L1768.28 685.19 L1768.84 685.19 L1769.4 685.19 L1769.96 685.19 L1770.52 685.19 L1771.08 685.19 L1771.64 685.19 L1772.2 685.19 L1772.76 685.19 L1773.32 685.19 L1773.88 685.19 L1774.43 685.19 L1774.99 685.19 L1775.55 685.19 L1776.11 685.19 L1776.67 685.19 L1777.23 685.19 L1777.79 685.19 L1778.35 685.19 L1778.91 685.19 L1779.47 685.19 L1780.03 685.19 L1780.59 685.19 L1781.15 685.19 L1781.71 685.19 L1782.26 685.19 L1782.82 685.19 L1783.38 685.19 L1783.94 685.19 L1784.5 685.19 L1785.06 685.19 L1785.62 685.19 L1786.18 685.19 L1786.74 685.19 L1787.3 685.19 L1787.86 685.19 L1788.42 685.19 L1788.98 685.19 L1789.53 685.19 L1790.09 685.19 L1790.65 685.19 L1791.21 685.19 L1791.77 685.19 L1792.33 685.19 L1792.89 685.19 L1793.45 685.19 L1794.01 685.19 L1794.57 685.19 L1795.13 685.19 L1795.69 685.19 L1796.25 685.19 L1796.8 685.19 L1797.36 685.19 L1797.92 685.19 L1798.48 685.19 L1799.04 685.19 L1799.6 685.19 L1800.16 685.19 L1800.72 685.19 L1801.28 685.19 L1801.84 685.19 L1802.4 685.19 L1802.96 685.19 L1803.52 685.19 L1804.08 685.19 L1804.63 685.19 L1805.19 685.19 L1805.75 685.19 L1806.31 685.19 L1806.87 685.19 L1807.43 685.19 L1807.99 685.19 L1808.55 685.19 L1809.11 685.19 L1809.67 685.19 L1810.23 685.19 L1810.79 685.19 L1811.35 685.19 L1811.9 685.19 L1812.46 685.19 L1813.02 685.19 L1813.58 685.19 L1814.14 685.19 L1814.7 685.19 L1815.26 685.19 L1815.82 685.19 L1816.38 685.19 L1816.94 685.19 L1817.5 685.19 L1818.06 685.19 L1818.62 685.19 L1819.18 685.19 L1819.73 685.19 L1820.29 685.19 L1820.85 685.19 L1821.41 685.19 L1821.97 685.19 L1822.53 685.19 L1823.09 685.19 L1823.65 685.19 L1824.21 685.19 L1824.77 685.19 L1825.33 685.19 L1825.89 685.19 L1826.45 685.19 L1827 685.19 L1827.56 685.19 L1828.12 685.19 L1828.68 685.19 L1829.24 685.19 L1829.8 685.19 L1830.36 685.19 L1830.92 685.19 L1831.48 685.19 L1832.04 685.19 L1832.6 685.19 L1833.16 685.19 L1833.72 685.19 L1834.27 685.19 L1834.83 685.19 L1835.39 685.19 L1835.95 685.19 L1836.51 685.19 L1837.07 685.19 L1837.63 685.19 L1838.19 685.19 L1838.19 682.061 L1837.63 682.061 L1837.07 682.061 L1836.51 682.061 L1835.95 682.061 L1835.39 682.061 L1834.83 682.061 L1834.27 682.061 L1833.72 682.061 L1833.16 682.061 L1832.6 682.061 L1832.04 682.061 L1831.48 682.061 L1830.92 682.061 L1830.36 682.061 L1829.8 682.061 L1829.24 682.061 L1828.68 682.061 L1828.12 682.061 L1827.56 682.061 L1827 682.061 L1826.45 682.061 L1825.89 682.061 L1825.33 682.061 L1824.77 682.061 L1824.21 682.061 L1823.65 682.061 L1823.09 682.061 L1822.53 682.061 L1821.97 682.061 L1821.41 682.061 L1820.85 682.061 L1820.29 682.061 L1819.73 682.061 L1819.18 682.061 L1818.62 682.061 L1818.06 682.061 L1817.5 682.061 L1816.94 682.061 L1816.38 682.061 L1815.82 682.061 L1815.26 682.061 L1814.7 682.061 L1814.14 682.061 L1813.58 682.061 L1813.02 682.061 L1812.46 682.061 L1811.9 682.061 L1811.35 682.061 L1810.79 682.061 L1810.23 682.061 L1809.67 682.061 L1809.11 682.061 L1808.55 682.061 L1807.99 682.061 L1807.43 682.061 L1806.87 682.061 L1806.31 682.061 L1805.75 682.061 L1805.19 682.061 L1804.63 682.061 L1804.08 682.061 L1803.52 682.061 L1802.96 682.061 L1802.4 682.061 L1801.84 682.061 L1801.28 682.061 L1800.72 682.061 L1800.16 682.061 L1799.6 682.061 L1799.04 682.061 L1798.48 682.061 L1797.92 682.061 L1797.36 682.061 L1796.8 682.061 L1796.25 682.061 L1795.69 682.061 L1795.13 682.061 L1794.57 682.061 L1794.01 682.061 L1793.45 682.061 L1792.89 682.061 L1792.33 682.061 L1791.77 682.061 L1791.21 682.061 L1790.65 682.061 L1790.09 682.061 L1789.53 682.061 L1788.98 682.061 L1788.42 682.061 L1787.86 682.061 L1787.3 682.061 L1786.74 682.061 L1786.18 682.061 L1785.62 682.061 L1785.06 682.061 L1784.5 682.061 L1783.94 682.061 L1783.38 682.061 L1782.82 682.061 L1782.26 682.061 L1781.71 682.061 L1781.15 682.061 L1780.59 682.061 L1780.03 682.061 L1779.47 682.061 L1778.91 682.061 L1778.35 682.061 L1777.79 682.061 L1777.23 682.061 L1776.67 682.061 L1776.11 682.061 L1775.55 682.061 L1774.99 682.061 L1774.43 682.061 L1773.88 682.061 L1773.32 682.061 L1772.76 682.061 L1772.2 682.061 L1771.64 682.061 L1771.08 682.061 L1770.52 682.061 L1769.96 682.061 L1769.4 682.061 L1768.84 682.061 L1768.28 682.061 L1767.72 682.061 L1767.16 682.061 L1766.61 682.061 L1766.05 682.061 L1765.49 682.061 L1764.93 682.061 L1764.37 682.061 L1763.81 682.061 L1763.25 682.061 L1762.69 682.061 L1762.13 682.061 L1761.57 682.061 L1761.01 682.061 L1760.45 682.061 L1759.89 682.061 L1759.34 682.061 L1758.78 682.061 L1758.22 682.061 L1757.66 682.061 L1757.1 682.061 L1756.54 682.061 L1755.98 682.061 L1755.42 682.061 L1754.86 682.061 L1754.3 682.061 L1753.74 682.061 L1753.18 682.061 L1752.62 682.061 L1752.06 682.061 L1751.51 682.061 L1750.95 682.061 L1750.39 682.061 L1749.83 682.061 L1749.27 682.061 L1748.71 682.061 L1748.15 682.061 L1747.59 682.061 L1747.03 682.061 L1746.47 682.061 L1745.91 682.061 L1745.35 682.061 L1744.79 682.061 L1744.24 682.061 L1743.68 682.061 L1743.12 682.061 L1742.56 682.061 L1742 682.061 L1741.44 682.061 L1740.88 682.061 L1740.32 682.061 L1739.76 682.061 L1739.2 682.061 L1738.64 682.061 L1738.08 682.061 L1737.52 682.061 L1736.97 682.061 L1736.41 682.061 L1735.85 682.061 L1735.29 682.061 L1734.73 682.061 L1734.17 682.061 L1733.61 682.061 L1733.05 682.061 L1732.49 682.061 L1731.93 682.061 L1731.37 682.061 L1730.81 682.061 L1730.25 682.061 L1729.69 682.061 L1729.14 682.061 L1728.58 682.061 L1728.02 682.061 L1727.46 682.061 L1726.9 682.061 L1726.34 682.061 L1725.78 682.061 L1725.22 682.061 L1724.66 682.061 L1724.1 682.061 L1723.54 682.061 L1722.98 682.061 L1722.42 682.061 L1721.87 682.061 L1721.31 682.061 L1720.75 682.061 L1720.19 682.061 L1719.63 682.061 L1719.07 682.061 L1718.51 682.061 L1717.95 682.061 L1717.39 682.061 L1716.83 682.061 L1716.27 682.061 L1715.71 682.061 L1715.15 682.061 L1714.6 682.061 L1714.04 682.061 L1713.48 682.061 L1712.92 682.061 L1712.36 682.061 L1711.8 682.061 L1711.24 682.061 L1710.68 682.061 L1710.12 682.061 L1709.56 682.061 L1709 682.061 L1708.44 682.061 L1707.88 682.061 L1707.32 682.061 L1706.77 682.061 L1706.21 682.061 L1705.65 682.061 L1705.09 682.061 L1704.53 682.061 L1703.97 682.061 L1703.41 682.061 L1702.85 682.061 L1702.29 682.061 L1701.73 682.061 L1701.17 682.061 L1700.61 682.061 L1700.05 682.061 L1699.5 682.061 L1698.94 682.061 L1698.38 682.061 L1697.82 682.061 L1697.26 682.061 L1696.7 682.061 L1696.14 682.061 L1695.58 682.061 L1695.02 682.061 L1694.46 682.061 L1693.9 682.061 L1693.34 682.061 L1692.78 682.061 L1692.23 682.061 L1691.67 682.061 L1691.11 682.061 L1690.55 682.061 L1689.99 682.061 L1689.43 682.061 L1688.87 682.061 L1688.31 682.061 L1687.75 682.061 L1687.19 682.061 L1686.63 682.061 L1686.07 682.061 L1685.51 682.061 L1684.95 682.061 L1684.4 682.061 L1683.84 682.061 L1683.28 682.061 L1682.72 682.061 L1682.16 682.061 L1681.6 682.061 L1681.04 682.061 L1680.48 682.061 L1679.92 682.061 L1679.36 682.061 L1678.8 682.061 L1678.24 682.061 L1677.68 682.061 L1677.13 682.061 L1676.57 682.061 L1676.01 682.061 L1675.45 682.061 L1674.89 682.061 L1674.33 682.061 L1673.77 682.061 L1673.21 682.061 L1672.65 682.061 L1672.09 682.061 L1671.53 682.061 L1670.97 682.061 L1670.41 682.061 L1669.85 682.061 L1669.3 682.061 L1668.74 682.061 L1668.18 682.061 L1667.62 682.061 L1667.06 682.061 L1666.5 682.061 L1665.94 682.061 L1665.38 682.061 L1664.82 682.061 L1664.26 682.061 L1663.7 682.061 L1663.14 682.061 L1662.58 682.061 L1662.03 682.061 L1661.47 682.061 L1660.91 682.061 L1660.35 682.061 L1659.79 682.061 L1659.23 682.061 L1658.67 682.061 L1658.11 682.061 L1657.55 682.061 L1656.99 682.061 L1656.43 682.061 L1655.87 682.061 L1655.31 682.061 L1654.76 682.061 L1654.2 682.061 L1653.64 682.061 L1653.08 682.061 L1652.52 682.061 L1651.96 682.061 L1651.4 682.061 L1650.84 682.061 L1650.28 682.061 L1649.72 682.061 L1649.16 682.061 L1648.6 682.061 L1648.04 682.061 L1647.48 682.061 L1646.93 682.061 L1646.37 682.061 L1645.81 682.061 L1645.25 682.061 L1644.69 682.061 L1644.13 682.061 L1643.57 682.061 L1643.01 682.061 L1642.45 682.061 L1641.89 682.061 L1641.33 682.061 L1640.77 682.061 L1640.21 682.061 L1639.66 682.061 L1639.1 682.061 L1638.54 682.061 L1637.98 682.061 L1637.42 682.061 L1636.86 682.061 L1636.3 682.061 L1635.74 682.061 L1635.18 682.061 L1634.62 682.061 L1634.06 682.061 L1633.5 682.061 L1632.94 682.061 L1632.39 682.061 L1631.83 682.061 L1631.27 682.061 L1630.71 682.061 L1630.15 682.061 L1629.59 682.061 L1629.03 682.061 L1628.47 682.061 L1627.91 682.061 L1627.35 682.061 L1626.79 682.061 L1626.23 682.061 L1625.67 682.061 L1625.11 682.061 L1624.56 682.061 L1624 682.061 L1623.44 682.061 L1622.88 682.061 L1622.32 682.061 L1621.76 682.061 L1621.2 682.061 L1620.64 682.061 L1620.08 682.061 L1619.52 682.061 L1618.96 682.061 L1618.4 682.061 L1617.84 682.061 L1617.29 682.061 L1616.73 682.061 L1616.17 682.061 L1615.61 682.061 L1615.05 682.061 L1614.49 682.061 L1613.93 682.061 L1613.37 682.061 L1612.81 682.061 L1612.25 682.061 L1611.69 682.061 L1611.13 682.061 L1610.57 682.061 L1610.02 682.061 L1609.46 682.061 L1608.9 682.061 L1608.34 682.061 L1607.78 682.061 L1607.22 682.061 L1606.66 682.061 L1606.1 682.061 L1605.54 682.061 L1604.98 682.061 L1604.42 682.061 L1603.86 682.061 L1603.3 682.061 L1602.74 682.061 L1602.19 682.061 L1601.63 682.061 L1601.07 682.061 L1600.51 682.061 L1599.95 682.061 L1599.39 682.061 L1598.83 682.061 L1598.27 682.061 L1597.71 682.061 L1597.15 682.061 L1596.59 682.061 L1596.03 682.061 L1595.47 682.061 L1594.92 682.061 L1594.36 682.061 L1593.8 682.061 L1593.24 682.061 L1592.68 682.061 L1592.12 682.061 L1591.56 682.061 L1591 682.061 L1590.44 682.061 L1589.88 682.061 L1589.32 682.061 L1588.76 682.061 L1588.2 682.061 L1587.65 682.061 L1587.09 682.061 L1586.53 682.061 L1585.97 682.061 L1585.41 682.061 L1584.85 682.061 L1584.29 682.061 L1583.73 682.061 L1583.17 682.061 L1582.61 682.061 L1582.05 682.061 L1581.49 682.061 L1580.93 682.061 L1580.37 682.061 L1579.82 682.061 L1579.26 682.061 L1578.7 682.061 L1578.14 682.061 L1577.58 682.061 L1577.02 682.061 L1576.46 682.061 L1575.9 682.061 L1575.34 682.061 L1574.78 682.061 L1574.22 682.061 L1573.66 682.061 L1573.1 682.061 L1572.55 682.061 L1571.99 682.061 L1571.43 682.061 L1570.87 682.061 L1570.31 682.061 L1569.75 682.061 L1569.19 682.061 L1568.63 682.061 L1568.07 682.061 L1567.51 682.061 L1566.95 682.061 L1566.39 682.061 L1565.83 682.061 L1565.28 682.061 L1564.72 682.061 L1564.16 682.061 L1563.6 682.061 L1563.04 682.061 L1562.48 682.061 L1561.92 682.061 L1561.36 682.061 L1560.8 682.061 L1560.24 682.061 L1559.68 682.061 L1559.12 682.061 L1558.56 682.061 L1558 682.061 L1557.45 682.061 L1556.89 682.061 L1556.33 682.061 L1555.77 682.061 L1555.21 682.061 L1554.65 682.061 L1554.09 682.061 L1553.53 682.061 L1552.97 682.061 L1552.41 682.061 L1551.85 682.061 L1551.29 682.061 L1550.73 682.061 L1550.18 682.061 L1549.62 682.061 L1549.06 682.061 L1548.5 682.061 L1547.94 682.061 L1547.38 682.061 L1546.82 682.061 L1546.26 682.061 L1545.7 682.061 L1545.14 682.061 L1544.58 682.061 L1544.02 682.061 L1543.46 682.061 L1542.9 682.061 L1542.35 682.061 L1541.79 682.061 L1541.23 682.061 L1540.67 682.061 L1540.11 682.061 L1539.55 682.061 L1538.99 682.061 L1538.43 682.061 L1537.87 682.061 L1537.31 682.061 L1536.75 682.061 L1536.19 682.061 L1535.63 682.061 L1535.08 682.061 L1534.52 682.061 L1533.96 682.061 L1533.4 682.061 L1532.84 682.061 L1532.28 682.061 L1531.72 682.061 L1531.16 682.061 L1530.6 682.061 L1530.04 682.061 L1529.48 682.061 L1528.92 682.061 L1528.36 682.061 L1527.81 682.061 L1527.25 682.061 L1526.69 682.061 L1526.13 682.061 L1525.57 682.061 L1525.01 682.061 L1524.45 682.061 L1523.89 682.061 L1523.33 682.061 L1522.77 682.061 L1522.21 682.061 L1521.65 682.061 L1521.09 682.061 L1520.53 682.061 L1519.98 682.061 L1519.42 682.061 L1518.86 682.061 L1518.3 682.061 L1517.74 682.061 L1517.18 682.061 L1516.62 682.061 L1516.06 682.061 L1515.5 682.061 L1514.94 682.061 L1514.38 682.061 L1513.82 682.061 L1513.26 682.061 L1512.71 682.061 L1512.15 682.061 L1511.59 682.061 L1511.03 682.061 L1510.47 682.061 L1509.91 682.061 L1509.35 682.061 L1508.79 682.061 L1508.23 682.061 L1507.67 682.061 L1507.11 682.061 L1506.55 682.061 L1505.99 682.061 L1505.44 682.061 L1504.88 682.061 L1504.32 682.061 L1503.76 682.061 L1503.2 682.061 L1502.64 682.061 L1502.08 682.061 L1501.52 682.061 L1500.96 682.061 L1500.4 682.061 L1499.84 682.061 L1499.28 682.061 L1498.72 682.061 L1498.16 682.061 L1497.61 682.061 L1497.05 682.061 L1496.49 682.061 L1495.93 682.061 L1495.37 682.061 L1494.81 682.061 L1494.25 682.061 L1493.69 682.061 L1493.13 682.061 L1492.57 682.061 L1492.01 682.061 L1491.45 682.061 L1490.89 682.061 L1490.34 682.061 L1489.78 682.061 L1489.22 682.061 L1488.66 682.061 L1488.1 682.061 L1487.54 682.061 L1486.98 682.061 L1486.42 682.061 L1485.86 682.061 L1485.3 682.061 L1484.74 682.061 L1484.18 682.061 L1483.62 682.061 L1483.07 682.061 L1482.51 682.061 L1481.95 682.061 L1481.39 682.061 L1480.83 682.061 L1480.27 682.061 L1479.71 682.061 L1479.15 682.061 L1478.59 682.061 L1478.03 682.061 L1477.47 682.061 L1476.91 682.061 L1476.35 682.061 L1475.79 682.061 L1475.24 682.061 L1474.68 682.061 L1474.12 682.061 L1473.56 682.061 L1473 682.061 L1472.44 682.061 L1471.88 682.061 L1471.32 682.061 L1470.76 682.061 L1470.2 682.061 L1469.64 682.061 L1469.08 682.061 L1468.52 682.061 L1467.97 682.061 L1467.41 682.061 L1466.85 682.061 L1466.29 682.061 L1465.73 682.061 L1465.17 682.061 L1464.61 682.061 L1464.05 682.061 L1463.49 682.061 L1462.93 682.061 L1462.37 682.061 L1461.81 682.061 L1461.25 682.061 L1460.7 682.061 L1460.14 682.061 L1459.58 682.061 L1459.02 682.061 L1458.46 682.061 L1457.9 682.061 L1457.34 682.061 L1456.78 682.061 L1456.22 682.061 L1455.66 682.061 L1455.1 682.061 L1454.54 682.061 L1453.98 682.061 L1453.42 682.061 L1452.87 682.061 L1452.31 682.061 L1451.75 682.061 L1451.19 682.061 L1450.63 682.061 L1450.07 682.061 L1449.51 682.061 L1448.95 682.061 L1448.39 682.061 L1447.83 682.061 L1447.27 682.061 L1446.71 682.061 L1446.15 682.061 L1445.6 682.061 L1445.04 682.061 L1444.48 682.061 L1443.92 682.061 L1443.36 682.061 L1442.8 682.061 L1442.24 682.061 L1441.68 682.061 L1441.12 682.061 L1440.56 682.061 L1440 682.061 L1439.44 682.061 L1438.88 682.061 L1438.33 682.061 L1437.77 682.061 L1437.21 682.061 L1436.65 682.061 L1436.09 682.061 L1435.53 682.061 L1434.97 682.061 L1434.41 682.061 L1433.85 682.061 L1433.29 682.061 L1432.73 682.061 L1432.17 682.061 L1431.61 682.061 L1431.05 682.061 L1430.5 682.061 L1429.94 682.061 L1429.38 682.061 L1428.82 682.061 L1428.26 682.061 L1427.7 682.061 L1427.14 682.061 L1426.58 682.061 L1426.02 682.061 L1425.46 682.061 L1424.9 682.061 L1424.34 682.061 L1423.78 682.061 L1423.23 682.061 L1422.67 682.061 L1422.11 682.061 L1421.55 682.061 L1420.99 682.061 L1420.43 682.061 L1419.87 682.061 L1419.31 682.061 L1418.75 682.061 L1418.19 682.061 L1417.63 682.061 L1417.07 682.061 L1416.51 682.061 L1415.95 682.061 L1415.4 682.061 L1414.84 682.061 L1414.28 682.061 L1413.72 682.061 L1413.16 682.061 L1412.6 682.061 L1412.04 682.061 L1411.48 682.061 L1410.92 682.061 L1410.36 682.061 L1409.8 682.061 L1409.24 682.061 L1408.68 682.061 L1408.13 682.061 L1407.57 682.061 L1407.01 682.061 L1406.45 682.061 L1405.89 682.061 L1405.33 682.061 L1404.77 682.061 L1404.21 682.061 L1403.65 682.061 L1403.09 682.061 L1402.53 682.061 L1401.97 682.061 L1401.41 682.061 L1400.86 682.061 L1400.3 682.061 L1399.74 682.061 L1399.18 682.061 L1398.62 682.061 L1398.06 682.061 L1397.5 682.061 L1396.94 682.061 L1396.38 682.061 L1395.82 682.061 L1395.26 682.061 L1394.7 682.061 L1394.14 682.061 L1393.58 682.061 L1393.03 682.061 L1392.47 682.061 L1391.91 682.061 L1391.35 682.061 L1390.79 682.061 L1390.23 682.061 L1389.67 682.061 L1389.11 682.061 L1388.55 682.061 L1387.99 682.061 L1387.43 682.061 L1386.87 682.061 L1386.31 682.061 L1385.76 682.061 L1385.2 682.061 L1384.64 682.061 L1384.08 682.061 L1383.52 682.061 L1382.96 682.061 L1382.4 682.061 L1381.84 682.061 L1381.28 682.061 L1380.72 682.061 L1380.16 682.061 L1379.6 682.061 L1379.04 682.061 L1378.49 682.061 L1377.93 682.061 L1377.37 682.061 L1376.81 682.061 L1376.25 682.061 L1375.69 682.061 L1375.13 682.061 L1374.57 682.061 L1374.01 682.061 L1373.45 682.061 L1372.89 682.061 L1372.33 682.061 L1371.77 682.061 L1371.21 682.061 L1370.66 682.061 L1370.1 682.061 L1369.54 682.061 L1368.98 682.061 L1368.42 682.061 L1367.86 682.061 L1367.3 682.061 L1366.74 682.061 L1366.18 682.061 L1365.62 682.061 L1365.06 682.061 L1364.5 682.061 L1363.94 682.061 L1363.39 682.061 L1362.83 682.061 L1362.27 682.061 L1361.71 682.061 L1361.15 682.061 L1360.59 682.061 L1360.03 682.061 L1359.47 682.061 L1358.91 682.061 L1358.35 682.061 L1357.79 682.061 L1357.23 682.061 L1356.67 682.061 L1356.12 682.061 L1355.56 682.061 L1355 682.061 L1354.44 682.061 L1353.88 682.061 L1353.32 682.061 L1352.76 682.061 L1352.2 682.061 L1351.64 682.061 L1351.08 682.061 L1350.52 682.061 L1349.96 682.061 L1349.4 682.061 L1348.84 682.061 L1348.29 682.061 L1347.73 682.061 L1347.17 682.061 L1346.61 682.061 L1346.05 682.061 L1345.49 682.061 L1344.93 682.061 L1344.37 682.061 L1343.81 682.061 L1343.25 682.061 L1342.69 682.061 L1342.13 682.061 L1341.57 682.061 L1341.02 682.061 L1340.46 682.061 L1339.9 682.061 L1339.34 682.061 L1338.78 682.061 L1338.22 682.061 L1337.66 682.061 L1337.1 682.061 L1336.54 682.061 L1335.98 682.061 L1335.42 682.061 L1334.86 682.061 L1334.3 682.061 L1333.75 682.061 L1333.19 682.061 L1332.63 682.061 L1332.07 682.061 L1331.51 682.061 L1330.95 682.061 L1330.39 682.061 L1329.83 682.061 L1329.27 682.061 L1328.71 682.061 L1328.15 682.061 L1327.59 682.061 L1327.03 682.061 L1326.47 682.061 L1325.92 682.061 L1325.36 682.061 L1324.8 682.061 L1324.24 682.061 L1323.68 682.061 L1323.12 682.061 L1322.56 682.061 L1322 682.061 L1321.44 682.061 L1320.88 682.061 L1320.32 682.061 L1319.76 682.061 L1319.2 682.061 L1318.65 682.061 L1318.09 682.061 L1317.53 682.061 L1316.97 682.061 L1316.41 682.061 L1315.85 682.061 L1315.29 682.061 L1314.73 682.061 L1314.17 682.061 L1313.61 682.061 L1313.05 682.061 L1312.49 682.061 L1311.93 682.061 L1311.38 682.061 L1310.82 682.061 L1310.26 682.061 L1309.7 682.061 L1309.14 682.061 L1308.58 682.061 L1308.02 682.061 L1307.46 682.061 L1306.9 682.061 L1306.34 682.061 L1305.78 682.061 L1305.22 682.061 L1304.66 682.061 L1304.1 682.061 L1303.55 682.061 L1302.99 682.061 L1302.43 682.061 L1301.87 682.061 L1301.31 682.061 L1300.75 682.061 L1300.19 682.061 L1299.63 682.061 L1299.07 682.061 L1298.51 682.061 L1297.95 682.061 L1297.39 682.061 L1296.83 682.061 L1296.28 682.061 L1295.72 682.061 L1295.16 682.061 L1294.6 682.061 L1294.04 682.061 L1293.48 682.061 L1292.92 682.061 L1292.36 682.061 L1291.8 682.061 L1291.24 682.061 L1290.68 682.061 L1290.12 682.061 L1289.56 682.061 L1289 682.061 L1288.45 682.061 L1287.89 682.061 L1287.33 682.061 L1286.77 682.061 L1286.21 682.061 L1285.65 682.061 L1285.09 682.061 L1284.53 682.061 L1283.97 682.061 L1283.41 682.061 L1282.85 682.061 L1282.29 682.061 L1281.73 682.061 L1281.18 682.061 L1280.62 682.061 L1280.06 682.061 L1279.5 682.061 L1278.94 682.061 L1278.38 682.061 L1277.82 682.061 L1277.26 682.061 L1276.7 682.061 L1276.14 682.061 L1275.58 682.061 L1275.02 682.061 L1274.46 682.061 L1273.91 682.061 L1273.35 682.061 L1272.79 682.061 L1272.23 682.061 L1271.67 682.061 L1271.11 682.061 L1270.55 682.061 L1269.99 682.061 L1269.43 682.061 L1268.87 682.061 L1268.31 682.061 L1267.75 682.061 L1267.19 682.061 L1266.63 682.061 L1266.08 682.061 L1265.52 682.061 L1264.96 682.061 L1264.4 682.061 L1263.84 682.061 L1263.28 682.061 L1262.72 682.061 L1262.16 682.061 L1261.6 682.061 L1261.04 682.061 L1260.48 682.061 L1259.92 682.061 L1259.36 682.061 L1258.81 682.061 L1258.25 682.061 L1257.69 682.061 L1257.13 682.061 L1256.57 682.061 L1256.01 682.061 L1255.45 682.061 L1254.89 682.061 L1254.33 682.061 L1253.77 682.061 L1253.21 682.061 L1252.65 682.061 L1252.09 682.061 L1251.54 682.061 L1250.98 682.061 L1250.42 682.061 L1249.86 682.061 L1249.3 682.061 L1248.74 682.061 L1248.18 682.061 L1247.62 682.061 L1247.06 682.061 L1246.5 682.061 L1245.94 682.061 L1245.38 682.061 L1244.82 682.061 L1244.26 682.061 L1243.71 682.061 L1243.15 682.061 L1242.59 682.061 L1242.03 682.061 L1241.47 682.061 L1240.91 682.061 L1240.35 682.061 L1239.79 682.061 L1239.23 682.061 L1238.67 682.061 L1238.11 682.061 L1237.55 682.061 L1236.99 682.061 L1236.44 682.061 L1235.88 682.061 L1235.32 682.061 L1234.76 682.061 L1234.2 682.061 L1233.64 682.061 L1233.08 682.061 L1232.52 682.061 L1231.96 682.061 L1231.4 682.061 L1230.84 682.061 L1230.28 682.061 L1229.72 682.061 L1229.17 682.061 L1228.61 682.061 L1228.05 682.061 L1227.49 682.061 L1226.93 682.061 L1226.37 682.061 L1225.81 682.061 L1225.25 682.061 L1224.69 682.061 L1224.13 682.061 L1223.57 682.061 L1223.01 682.061 L1222.45 682.061 L1221.89 682.061 L1221.34 682.061 L1220.78 682.061 L1220.22 682.061 L1219.66 682.061 L1219.1 682.061 L1218.54 682.061 L1217.98 682.061 L1217.42 682.061 L1216.86 682.061 L1216.3 682.061 L1215.74 682.061 L1215.18 682.061 L1214.62 682.061 L1214.07 682.061 L1213.51 682.061 L1212.95 682.061 L1212.39 682.061 L1211.83 682.061 L1211.27 682.061 L1210.71 682.061 L1210.15 682.061 L1209.59 682.061 L1209.03 682.061 L1208.47 682.061 L1207.91 682.061 L1207.35 682.061 L1206.8 682.061 L1206.24 682.061 L1205.68 682.061 L1205.12 682.061 L1204.56 682.061 L1204 682.061 L1203.44 682.061 L1202.88 682.061 L1202.32 682.061 L1201.76 682.061 L1201.2 682.061 L1200.64 682.061 L1200.08 682.061 L1199.52 682.061 L1198.97 682.061 L1198.41 682.061 L1197.85 682.061 L1197.29 682.061 L1196.73 682.061 L1196.17 682.061 L1195.61 682.061 L1195.05 682.061 L1194.49 682.061 L1193.93 682.061 L1193.37 682.061 L1192.81 682.061 L1192.25 682.061 L1191.7 682.061 L1191.14 682.061 L1190.58 682.061 L1190.02 682.061 L1189.46 682.061 L1188.9 682.061 L1188.34 682.061 L1187.78 682.061 L1187.22 682.061 L1186.66 682.061 L1186.1 682.061 L1185.54 682.061 L1184.98 682.061 L1184.43 682.061 L1183.87 682.061 L1183.31 682.061 L1182.75 682.061 L1182.19 682.061 L1181.63 682.061 L1181.07 682.061 L1180.51 682.061 L1179.95 682.061 L1179.39 682.061 L1178.83 682.061 L1178.27 682.061 L1177.71 682.061 L1177.15 682.061 L1176.6 682.061 L1176.04 682.061 L1175.48 682.061 L1174.92 682.061 L1174.36 682.061 L1173.8 682.061 L1173.24 682.061 L1172.68 682.061 L1172.12 682.061 L1171.56 682.061 L1171 682.061 L1170.44 682.061 L1169.88 682.061 L1169.33 682.061 L1168.77 682.061 L1168.21 682.061 L1167.65 682.061 L1167.09 682.061 L1166.53 682.061 L1165.97 682.061 L1165.41 682.061 L1164.85 682.061 L1164.29 682.061 L1163.73 682.061 L1163.17 682.061 L1162.61 682.061 L1162.05 682.061 L1161.5 682.061 L1160.94 682.061 L1160.38 682.061 L1159.82 682.061 L1159.26 682.061 L1158.7 682.061 L1158.14 682.061 L1157.58 682.061 L1157.02 682.061 L1156.46 682.061 L1155.9 682.061 L1155.34 682.061 L1154.78 682.061 L1154.23 682.061 L1153.67 682.061 L1153.11 682.061 L1152.55 682.061 L1151.99 682.061 L1151.43 682.061 L1150.87 682.061 L1150.31 682.061 L1149.75 682.061 L1149.19 682.061 L1148.63 682.061 L1148.07 682.061 L1147.51 682.061 L1146.96 682.061 L1146.4 682.061 L1145.84 682.061 L1145.28 682.061 L1144.72 682.061 L1144.16 682.061 L1143.6 682.061 L1143.04 682.061 L1142.48 682.061 L1141.92 682.061 L1141.36 682.061 L1140.8 682.061 L1140.24 682.061 L1139.68 682.061 L1139.13 682.061 L1138.57 682.061 L1138.01 682.061 L1137.45 682.061 L1136.89 682.061 L1136.33 682.061 L1135.77 682.061 L1135.21 682.061 L1134.65 682.061 L1134.09 682.061 L1133.53 682.061 L1132.97 682.061 L1132.41 682.061 L1131.86 682.061 L1131.3 682.061 L1130.74 682.061 L1130.18 682.061 L1129.62 682.061 L1129.06 682.061 L1128.5 682.061 L1127.94 682.061 L1127.38 682.061 L1126.82 682.061 L1126.26 682.061 L1125.7 682.061 L1125.14 682.061 L1124.59 682.061 L1124.03 682.061 L1123.47 682.061 L1122.91 682.061 L1122.35 682.061 L1121.79 682.061 L1121.23 682.061 L1120.67 682.061 L1120.11 682.061 L1119.55 682.061 L1118.99 682.061 L1118.43 682.061 L1117.87 682.061 L1117.31 682.061 L1116.76 682.061 L1116.2 682.061 L1115.64 682.061 L1115.08 682.061 L1114.52 682.061 L1113.96 682.061 L1113.4 682.061 L1112.84 682.061 L1112.28 682.061 L1111.72 682.061 L1111.16 682.061 L1110.6 682.061 L1110.04 682.061 L1109.49 682.061 L1108.93 682.061 L1108.37 682.061 L1107.81 682.061 L1107.25 682.061 L1106.69 682.061 L1106.13 682.061 L1105.57 682.061 L1105.01 682.061 L1104.45 682.061 L1103.89 682.061 L1103.33 682.061 L1102.77 682.061 L1102.22 682.061 L1101.66 682.061 L1101.1 682.061 L1100.54 682.061 L1099.98 682.061 L1099.42 682.061 L1098.86 682.061 L1098.3 682.061 L1097.74 682.061 L1097.18 682.061 L1096.62 682.061 L1096.06 682.061 L1095.5 682.061 L1094.94 682.061 L1094.39 682.061 L1093.83 682.061 L1093.27 682.061 L1092.71 682.061 L1092.15 682.061 L1091.59 682.061 L1091.03 682.061 L1090.47 682.061 L1089.91 682.061 L1089.35 682.061 L1088.79 682.061 L1088.23 682.061 L1087.67 682.061 L1087.12 682.061 L1086.56 682.061 L1086 682.061 L1085.44 682.061 L1084.88 682.061 L1084.32 682.061 L1083.76 682.061 L1083.2 682.061 L1082.64 682.061 L1082.08 682.061 L1081.52 682.061 L1080.96 682.061 L1080.4 682.061 L1079.85 682.061 L1079.29 682.061 L1078.73 682.061 L1078.17 682.061 L1077.61 682.061 L1077.05 682.061 L1076.49 682.061 L1075.93 682.061 L1075.37 682.061 L1074.81 682.061 L1074.25 682.061 L1073.69 682.061 L1073.13 682.061 L1072.57 682.061 L1072.02 682.061 L1071.46 682.061 L1070.9 682.061 L1070.34 682.061 L1069.78 682.061 L1069.22 682.061 L1068.66 682.061 L1068.1 682.061 L1067.54 682.061 L1066.98 682.061 L1066.42 682.061 L1065.86 682.061 L1065.3 682.061 L1064.75 682.061 L1064.19 682.061 L1063.63 682.061 L1063.07 682.061 L1062.51 682.061 L1061.95 682.061 L1061.39 682.061 L1060.83 682.061 L1060.27 682.061 L1059.71 682.061 L1059.15 682.061 L1058.59 682.061 L1058.03 682.061 L1057.48 682.061 L1056.92 682.061 L1056.36 682.061 L1055.8 682.061 L1055.24 682.061 L1054.68 682.061 L1054.12 682.061 L1053.56 682.061 L1053 682.061 L1052.44 682.061 L1051.88 682.061 L1051.32 682.061 L1050.76 682.061 L1050.2 682.061 L1049.65 682.061 L1049.09 682.061 L1048.53 682.061 L1047.97 682.061 L1047.41 682.061 L1046.85 682.061 L1046.29 682.061 L1045.73 682.061 L1045.17 682.061 L1044.61 682.061 L1044.05 682.061 L1043.49 682.061 L1042.93 682.061 L1042.38 682.061 L1041.82 682.061 L1041.26 682.061 L1040.7 682.061 L1040.14 682.061 L1039.58 682.061 L1039.02 682.061 L1038.46 682.061 L1037.9 682.061 L1037.34 682.061 L1036.78 682.061 L1036.22 682.061 L1035.66 682.061 L1035.1 682.061 L1034.55 682.061 L1033.99 682.061 L1033.43 682.061 L1032.87 682.061 L1032.31 682.061 L1031.75 682.061 L1031.19 682.061 L1030.63 682.061 L1030.07 682.061 L1029.51 682.061 L1028.95 682.061 L1028.39 682.061 L1027.83 682.061 L1027.28 682.061 L1026.72 682.061 L1026.16 682.061 L1025.6 682.061 L1025.04 682.061 L1024.48 682.061 L1023.92 682.061 L1023.36 682.061 L1022.8 682.061 L1022.24 682.061 L1021.68 682.061 L1021.12 682.061 L1020.56 682.061 L1020.01 682.061 L1019.45 682.061 L1018.89 682.061 L1018.33 682.061 L1017.77 682.061 L1017.21 682.061 L1016.65 682.061 L1016.09 682.061 L1015.53 682.061 L1014.97 682.061 L1014.41 682.061 L1013.85 682.061 L1013.29 682.061 L1012.73 682.061 L1012.18 682.061 L1011.62 682.061 L1011.06 682.061 L1010.5 682.061 L1009.94 682.061 L1009.38 682.061 L1008.82 682.061 L1008.26 682.061 L1007.7 682.061 L1007.14 682.061 L1006.58 682.061 L1006.02 682.061 L1005.46 682.061 L1004.91 682.061 L1004.35 682.061 L1003.79 682.061 L1003.23 682.061 L1002.67 682.061 L1002.11 682.061 L1001.55 682.061 L1000.99 682.061 L1000.43 682.061 L999.872 682.061 L999.313 682.061 L998.754 682.061 L998.194 682.061 L997.635 682.061 L997.076 682.061 L996.517 682.061 L995.957 682.061 L995.398 682.061 L994.839 682.061 L994.28 682.061 L993.72 682.061 L993.161 682.061 L992.602 682.061 L992.043 682.061 L991.483 682.061 L990.924 682.061 L990.365 682.061 L989.806 682.061 L989.246 682.061 L988.687 682.061 L988.128 682.061 L987.569 682.061 L987.009 682.061 L986.45 682.061 L985.891 682.061 L985.332 682.061 L984.772 682.061 L984.213 682.061 L983.654 682.061 L983.095 682.061 L982.535 682.061 L981.976 682.061 L981.417 682.061 L980.858 682.061 L980.298 682.061 L979.739 682.061 L979.18 682.061 L978.621 682.061 L978.061 682.061 L977.502 682.061 L976.943 682.061 L976.384 682.061 L975.824 682.061 L975.265 682.061 L974.706 682.061 L974.147 682.061 L973.587 682.061 L973.028 682.061 L972.469 682.061 L971.91 682.061 L971.35 682.061 L970.791 682.061 L970.232 682.061 L969.673 682.061 L969.113 682.061 L968.554 682.061 L967.995 682.061 L967.436 682.061 L966.876 682.061 L966.317 682.061 L965.758 682.061 L965.199 682.061 L964.639 682.061 L964.08 682.061 L963.521 682.061 L962.962 682.061 L962.402 682.061 L961.843 682.061 L961.284 682.061 L960.725 682.061 L960.165 682.061 L959.606 682.061 L959.047 682.061 L958.488 682.061 L957.928 682.061 L957.369 682.061 L956.81 682.061 L956.251 682.061 L955.691 682.061 L955.132 682.061 L954.573 682.061 L954.014 682.061 L953.454 682.061 L952.895 682.061 L952.336 682.061 L951.777 682.061 L951.217 682.061 L950.658 682.061 L950.099 682.061 L949.54 682.061 L948.98 682.061 L948.421 682.061 L947.862 682.061 L947.303 682.061 L946.743 682.061 L946.184 682.061 L945.625 682.061 L945.066 682.061 L944.506 682.061 L943.947 682.061 L943.388 682.061 L942.829 682.061 L942.269 682.061 L941.71 682.061 L941.151 682.061 L940.592 682.061 L940.032 682.061 L939.473 682.061 L938.914 682.061 L938.355 682.061 L937.795 682.061 L937.236 682.061 L936.677 682.061 L936.118 682.061 L935.558 682.061 L934.999 682.061 L934.44 682.061 L933.881 682.061 L933.321 682.061 L932.762 682.061 L932.203 682.061 L931.644 682.061 L931.084 682.061 L930.525 682.061 L929.966 682.061 L929.406 682.061 L928.847 682.061 L928.288 682.061 L927.729 682.061 L927.169 682.061 L926.61 682.061 L926.051 682.061 L925.492 682.061 L924.932 682.061 L924.373 682.061 L923.814 682.061 L923.255 682.061 L922.695 682.061 L922.136 682.061 L921.577 682.061 L921.018 682.061 L920.458 682.061 L919.899 682.061 L919.34 682.061 L918.781 682.061 L918.221 682.061 L917.662 682.061 L917.103 682.061 L916.544 682.061 L915.984 682.061 L915.425 682.061 L914.866 682.061 L914.307 682.061 L913.747 682.061 L913.188 682.061 L912.629 682.061 L912.07 682.061 L911.51 682.061 L910.951 682.061 L910.392 682.061 L909.833 682.061 L909.273 682.061 L908.714 682.061 L908.155 682.061 L907.596 682.061 L907.036 682.061 L906.477 682.061 L905.918 682.061 L905.359 682.061 L904.799 682.061 L904.24 682.061 L903.681 682.061 L903.122 682.061 L902.562 682.061 L902.003 682.061 L901.444 682.061 L900.885 682.061 L900.325 682.061 L899.766 682.061 L899.207 682.061 L898.648 682.061 L898.088 682.061 L897.529 682.061 L896.97 682.061 L896.411 682.061 L895.851 682.061 L895.292 682.061 L894.733 682.061 L894.174 682.061 L893.614 682.061 L893.055 682.061 L892.496 682.061 L891.937 682.061 L891.377 682.061 L890.818 682.061 L890.259 682.061 L889.7 682.061 L889.14 682.061 L888.581 682.061 L888.022 682.061 L887.463 682.061 L886.903 682.061 L886.344 682.061 L885.785 682.061 L885.226 682.061 L884.666 682.061 L884.107 682.061 L883.548 682.061 L882.989 682.061 L882.429 682.061 L881.87 682.061 L881.311 682.061 L880.752 682.061 L880.192 682.061 L879.633 682.061 L879.074 682.061 L878.515 682.061 L877.955 682.061 L877.396 682.061 L876.837 682.061 L876.278 682.061 L875.718 682.061 L875.159 682.061 L874.6 682.061 L874.041 682.061 L873.481 682.061 L872.922 682.061 L872.363 682.061 L871.804 682.061 L871.244 682.061 L870.685 682.061 L870.126 682.061 L869.567 682.061 L869.007 682.061 L868.448 682.061 L867.889 682.061 L867.33 682.061 L866.77 682.061 L866.211 682.061 L865.652 682.061 L865.093 682.061 L864.533 682.061 L863.974 682.061 L863.415 682.061 L862.856 682.061 L862.296 682.061 L861.737 682.061 L861.178 682.061 L860.619 682.061 L860.059 682.061 L859.5 682.061 L858.941 682.061 L858.382 682.061 L857.822 682.061 L857.263 682.061 L856.704 682.061 L856.145 682.061 L855.585 682.061 L855.026 682.061 L854.467 682.061 L853.908 682.061 L853.348 682.061 L852.789 682.061 L852.23 682.061 L851.671 682.061 L851.111 682.061 L850.552 682.061 L849.993 682.061 L849.434 682.061 L848.874 682.061 L848.315 682.061 L847.756 682.061 L847.197 682.061 L846.637 682.061 L846.078 682.061 L845.519 682.061 L844.96 682.061 L844.4 682.061 L843.841 682.061 L843.282 682.061 L842.723 682.061 L842.163 682.061 L841.604 682.061 L841.045 682.061 L840.486 682.061 L839.926 682.061 L839.367 682.061 L838.808 682.061 L838.249 682.061 L837.689 682.061 L837.13 682.061 L836.571 682.061 L836.012 682.061 L835.452 682.061 L834.893 682.061 L834.334 682.061 L833.775 682.061 L833.215 682.061 L832.656 682.061 L832.097 682.061 L831.538 682.061 L830.978 682.061 L830.419 682.061 L829.86 682.061 L829.301 682.061 L828.741 682.061 L828.182 682.061 L827.623 682.061 L827.064 682.061 L826.504 682.061 L825.945 682.061 L825.386 682.061 L824.827 682.061 L824.267 682.061 L823.708 682.061 L823.149 682.061 L822.59 682.061 L822.03 682.061 L821.471 682.061 L820.912 682.061 L820.353 682.061 L819.793 682.061 L819.234 682.061 L818.675 682.061 L818.116 682.061 L817.556 682.061 L816.997 682.061 L816.438 682.061 L815.879 682.061 L815.319 682.061 L814.76 682.061 L814.201 682.061 L813.642 682.061 L813.082 682.061 L812.523 682.061 L811.964 682.061 L811.405 682.061 L810.845 682.061 L810.286 682.061 L809.727 682.061 L809.168 682.061 L808.608 682.061 L808.049 682.061 L807.49 682.061 L806.931 682.061 L806.371 682.061 L805.812 682.061 L805.253 682.061 L804.693 682.061 L804.134 682.061 L803.575 682.061 L803.016 682.061 L802.456 682.061 L801.897 682.061 L801.338 682.061 L800.779 682.061 L800.219 682.061 L799.66 682.061 L799.101 682.061 L798.542 682.061 L797.982 682.061 L797.423 682.061 L796.864 682.061 L796.305 682.061 L795.745 682.061 L795.186 682.061 L794.627 682.061 L794.068 682.061 L793.508 682.061 L792.949 682.061 L792.39 682.061 L791.831 682.061 L791.271 682.061 L790.712 682.061 L790.153 682.061 L789.594 682.061 L789.034 682.061 L788.475 682.061 L787.916 682.061 L787.357 682.061 L786.797 682.061 L786.238 682.061 L785.679 682.061 L785.12 682.061 L784.56 682.061 L784.001 682.061 L783.442 682.061 L782.883 682.061 L782.323 682.061 L781.764 682.061 L781.205 682.061 L780.646 682.061 L780.086 682.061 L779.527 682.061 L778.968 682.061 L778.409 682.061 L777.849 682.061 L777.29 682.061 L776.731 682.061 L776.172 682.061 L775.612 682.061 L775.053 682.061 L774.494 682.061 L773.935 682.061 L773.375 682.061 L772.816 682.061 L772.257 682.061 L771.698 682.061 L771.138 682.061 L770.579 682.061 L770.02 682.061 L769.461 682.061 L768.901 682.061 L768.342 682.061 L767.783 682.061 L767.224 682.061 L766.664 682.061 L766.105 682.061 L765.546 682.061 L764.987 682.061 L764.427 682.061 L763.868 682.061 L763.309 682.061 L762.75 682.061 L762.19 682.061 L761.631 682.061 L761.072 682.061 L760.513 682.061 L759.953 682.061 L759.394 682.061 L758.835 682.061 L758.276 682.061 L757.716 682.061 L757.157 682.061 L756.598 682.061 L756.039 682.061 L755.479 682.061 L754.92 682.061 L754.361 682.061 L753.802 682.061 L753.242 682.061 L752.683 682.061 L752.124 682.061 L751.565 682.061 L751.005 682.061 L750.446 682.061 L749.887 682.061 L749.328 682.061 L748.768 682.061 L748.209 682.061 L747.65 682.061 L747.091 682.061 L746.531 682.061 L745.972 682.061 L745.413 682.061 L744.854 682.061 L744.294 682.061 L743.735 682.061 L743.176 682.061 L742.617 682.061 L742.057 682.061 L741.498 682.061 L740.939 682.061 L740.38 682.061 L739.82 682.061 L739.261 682.061 L738.702 682.061 L738.143 682.061 L737.583 682.061 L737.024 682.061 L736.465 682.061 L735.906 682.061 L735.346 682.061 L734.787 682.061 L734.228 682.061 L733.669 682.061 L733.109 682.061 L732.55 682.061 L731.991 682.061 L731.432 682.061 L730.872 682.061 L730.313 682.061 L729.754 682.061 L729.195 682.061 L728.635 682.061 L728.076 682.061 L727.517 682.061 L726.958 682.061 L726.398 682.061 L725.839 682.061 L725.28 682.061 L724.721 682.061 L724.161 682.061 L723.602 682.061 L723.043 682.061 L722.484 682.061 L721.924 682.061 L721.365 682.061 L720.806 682.061 L720.247 682.061  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip543)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.53 720.806,683.53 721.365,683.53 721.924,683.53 722.484,683.53 723.043,683.53 723.602,683.53 724.161,683.53 724.721,683.53 725.28,683.53 725.839,683.53 726.398,683.53 726.958,683.53 727.517,683.53 728.076,683.53 728.635,683.53 729.195,683.53 729.754,683.53 730.313,683.53 730.872,683.53 731.432,683.53 731.991,683.53 732.55,683.53 733.109,683.53 733.669,683.53 734.228,683.53 734.787,683.53 735.346,683.53 735.906,683.53 736.465,683.53 737.024,683.53 737.583,683.53 738.143,683.53 738.702,683.53 739.261,683.53 739.82,683.53 740.38,683.53 740.939,683.53 741.498,683.53 742.057,683.53 742.617,683.53 743.176,683.53 743.735,683.53 744.294,683.53 744.854,683.53 745.413,683.53 745.972,683.53 746.531,683.53 747.091,683.53 747.65,683.53 748.209,683.53 748.768,683.53 749.328,683.53 749.887,683.53 750.446,683.53 751.005,683.53 751.565,683.53 752.124,683.53 752.683,683.53 753.242,683.53 753.802,683.53 754.361,683.53 754.92,683.53 755.479,683.53 756.039,683.53 756.598,683.53 757.157,683.53 757.716,683.53 758.276,683.53 758.835,683.53 759.394,683.53 759.953,683.53 760.513,683.53 761.072,683.53 761.631,683.53 762.19,683.53 762.75,683.53 763.309,683.53 763.868,683.53 764.427,683.53 764.987,683.53 765.546,683.53 766.105,683.53 766.664,683.53 767.224,683.53 767.783,683.53 768.342,683.53 768.901,683.53 769.461,683.53 770.02,683.53 770.579,683.53 771.138,683.53 771.698,683.53 772.257,683.53 772.816,683.53 773.375,683.53 773.935,683.53 774.494,683.53 775.053,683.53 775.612,683.53 776.172,683.53 776.731,683.53 777.29,683.53 777.849,683.53 778.409,683.53 778.968,683.53 779.527,683.53 780.086,683.53 780.646,683.53 781.205,683.53 781.764,683.53 782.323,683.53 782.883,683.53 783.442,683.53 784.001,683.53 784.56,683.53 785.12,683.53 785.679,683.53 786.238,683.53 786.797,683.53 787.357,683.53 787.916,683.53 788.475,683.53 789.034,683.53 789.594,683.53 790.153,683.53 790.712,683.53 791.271,683.53 791.831,683.53 792.39,683.53 792.949,683.53 793.508,683.53 794.068,683.53 794.627,683.53 795.186,683.53 795.745,683.53 796.305,683.53 796.864,683.53 797.423,683.53 797.982,683.53 798.542,683.53 799.101,683.53 799.66,683.53 800.219,683.53 800.779,683.53 801.338,683.53 801.897,683.53 802.456,683.53 803.016,683.53 803.575,683.53 804.134,683.53 804.693,683.53 805.253,683.53 805.812,683.53 806.371,683.53 806.931,683.53 807.49,683.53 808.049,683.53 808.608,683.53 809.168,683.53 809.727,683.53 810.286,683.53 810.845,683.53 811.405,683.53 811.964,683.53 812.523,683.53 813.082,683.53 813.642,683.53 814.201,683.53 814.76,683.53 815.319,683.53 815.879,683.53 816.438,683.53 816.997,683.53 817.556,683.53 818.116,683.53 818.675,683.53 819.234,683.53 819.793,683.53 820.353,683.53 820.912,683.53 821.471,683.53 822.03,683.53 822.59,683.53 823.149,683.53 823.708,683.53 824.267,683.53 824.827,683.53 825.386,683.53 825.945,683.53 826.504,683.53 827.064,683.53 827.623,683.53 828.182,683.53 828.741,683.53 829.301,683.53 829.86,683.53 830.419,683.53 830.978,683.53 831.538,683.53 832.097,683.53 832.656,683.53 833.215,683.53 833.775,683.53 834.334,683.53 834.893,683.53 835.452,683.53 836.012,683.53 836.571,683.53 837.13,683.53 837.689,683.53 838.249,683.53 838.808,683.53 839.367,683.53 839.926,683.53 840.486,683.53 841.045,683.53 841.604,683.53 842.163,683.53 842.723,683.53 843.282,683.53 843.841,683.53 844.4,683.53 844.96,683.53 845.519,683.53 846.078,683.53 846.637,683.53 847.197,683.53 847.756,683.53 848.315,683.53 848.874,683.53 849.434,683.53 849.993,683.53 850.552,683.53 851.111,683.53 851.671,683.53 852.23,683.53 852.789,683.53 853.348,683.53 853.908,683.53 854.467,683.53 855.026,683.53 855.585,683.53 856.145,683.53 856.704,683.53 857.263,683.53 857.822,683.53 858.382,683.53 858.941,683.53 859.5,683.53 860.059,683.53 860.619,683.53 861.178,683.53 861.737,683.53 862.296,683.53 862.856,683.53 863.415,683.53 863.974,683.53 864.533,683.53 865.093,683.53 865.652,683.53 866.211,683.53 866.77,683.53 867.33,683.53 867.889,683.53 868.448,683.53 869.007,683.53 869.567,683.53 870.126,683.53 870.685,683.53 871.244,683.53 871.804,683.53 872.363,683.53 872.922,683.53 873.481,683.53 874.041,683.53 874.6,683.53 875.159,683.53 875.718,683.53 876.278,683.53 876.837,683.53 877.396,683.53 877.955,683.53 878.515,683.53 879.074,683.53 879.633,683.53 880.192,683.53 880.752,683.53 881.311,683.53 881.87,683.53 882.429,683.53 882.989,683.53 883.548,683.53 884.107,683.53 884.666,683.53 885.226,683.53 885.785,683.53 886.344,683.53 886.903,683.53 887.463,683.53 888.022,683.53 888.581,683.53 889.14,683.53 889.7,683.53 890.259,683.53 890.818,683.53 891.377,683.53 891.937,683.53 892.496,683.53 893.055,683.53 893.614,683.53 894.174,683.53 894.733,683.53 895.292,683.53 895.851,683.53 896.411,683.53 896.97,683.53 897.529,683.53 898.088,683.53 898.648,683.53 899.207,683.53 899.766,683.53 900.325,683.53 900.885,683.53 901.444,683.53 902.003,683.53 902.562,683.53 903.122,683.53 903.681,683.53 904.24,683.53 904.799,683.53 905.359,683.53 905.918,683.53 906.477,683.53 907.036,683.53 907.596,683.53 908.155,683.53 908.714,683.53 909.273,683.53 909.833,683.53 910.392,683.53 910.951,683.53 911.51,683.53 912.07,683.53 912.629,683.53 913.188,683.53 913.747,683.53 914.307,683.53 914.866,683.53 915.425,683.53 915.984,683.53 916.544,683.53 917.103,683.53 917.662,683.53 918.221,683.53 918.781,683.53 919.34,683.53 919.899,683.53 920.458,683.53 921.018,683.53 921.577,683.53 922.136,683.53 922.695,683.53 923.255,683.53 923.814,683.53 924.373,683.53 924.932,683.53 925.492,683.53 926.051,683.53 926.61,683.53 927.169,683.53 927.729,683.53 928.288,683.53 928.847,683.53 929.406,683.53 929.966,683.53 930.525,683.53 931.084,683.53 931.644,683.53 932.203,683.53 932.762,683.53 933.321,683.53 933.881,683.53 934.44,683.53 934.999,683.53 935.558,683.53 936.118,683.53 936.677,683.53 937.236,683.53 937.795,683.53 938.355,683.53 938.914,683.53 939.473,683.53 940.032,683.53 940.592,683.53 941.151,683.53 941.71,683.53 942.269,683.53 942.829,683.53 943.388,683.53 943.947,683.53 944.506,683.53 945.066,683.53 945.625,683.53 946.184,683.53 946.743,683.53 947.303,683.53 947.862,683.53 948.421,683.53 948.98,683.53 949.54,683.53 950.099,683.53 950.658,683.53 951.217,683.53 951.777,683.53 952.336,683.53 952.895,683.53 953.454,683.53 954.014,683.53 954.573,683.53 955.132,683.53 955.691,683.53 956.251,683.53 956.81,683.53 957.369,683.53 957.928,683.53 958.488,683.53 959.047,683.53 959.606,683.53 960.165,683.53 960.725,683.53 961.284,683.53 961.843,683.53 962.402,683.53 962.962,683.53 963.521,683.53 964.08,683.53 964.639,683.53 965.199,683.53 965.758,683.53 966.317,683.53 966.876,683.53 967.436,683.53 967.995,683.53 968.554,683.53 969.113,683.53 969.673,683.53 970.232,683.53 970.791,683.53 971.35,683.53 971.91,683.53 972.469,683.53 973.028,683.53 973.587,683.53 974.147,683.53 974.706,683.53 975.265,683.53 975.824,683.53 976.384,683.53 976.943,683.53 977.502,683.53 978.061,683.53 978.621,683.53 979.18,683.53 979.739,683.53 980.298,683.53 980.858,683.53 981.417,683.53 981.976,683.53 982.535,683.53 983.095,683.53 983.654,683.53 984.213,683.53 984.772,683.53 985.332,683.53 985.891,683.53 986.45,683.53 987.009,683.53 987.569,683.53 988.128,683.53 988.687,683.53 989.246,683.53 989.806,683.53 990.365,683.53 990.924,683.53 991.483,683.53 992.043,683.53 992.602,683.53 993.161,683.53 993.72,683.53 994.28,683.53 994.839,683.53 995.398,683.53 995.957,683.53 996.517,683.53 997.076,683.53 997.635,683.53 998.194,683.53 998.754,683.53 999.313,683.53 999.872,683.53 1000.43,683.53 1000.99,683.53 1001.55,683.53 1002.11,683.53 1002.67,683.53 1003.23,683.53 1003.79,683.53 1004.35,683.53 1004.91,683.53 1005.46,683.53 1006.02,683.53 1006.58,683.53 1007.14,683.53 1007.7,683.53 1008.26,683.53 1008.82,683.53 1009.38,683.53 1009.94,683.53 1010.5,683.53 1011.06,683.53 1011.62,683.53 1012.18,683.53 1012.73,683.53 1013.29,683.53 1013.85,683.53 1014.41,683.53 1014.97,683.53 1015.53,683.53 1016.09,683.53 1016.65,683.53 1017.21,683.53 1017.77,683.53 1018.33,683.53 1018.89,683.53 1019.45,683.53 1020.01,683.53 1020.56,683.53 1021.12,683.53 1021.68,683.53 1022.24,683.53 1022.8,683.53 1023.36,683.53 1023.92,683.53 1024.48,683.53 1025.04,683.53 1025.6,683.53 1026.16,683.53 1026.72,683.53 1027.28,683.53 1027.83,683.53 1028.39,683.53 1028.95,683.53 1029.51,683.53 1030.07,683.53 1030.63,683.53 1031.19,683.53 1031.75,683.53 1032.31,683.53 1032.87,683.53 1033.43,683.53 1033.99,683.53 1034.55,683.53 1035.1,683.53 1035.66,683.53 1036.22,683.53 1036.78,683.53 1037.34,683.53 1037.9,683.53 1038.46,683.53 1039.02,683.53 1039.58,683.53 1040.14,683.53 1040.7,683.53 1041.26,683.53 1041.82,683.53 1042.38,683.53 1042.93,683.53 1043.49,683.53 1044.05,683.53 1044.61,683.53 1045.17,683.53 1045.73,683.53 1046.29,683.53 1046.85,683.53 1047.41,683.53 1047.97,683.53 1048.53,683.53 1049.09,683.53 1049.65,683.53 1050.2,683.53 1050.76,683.53 1051.32,683.53 1051.88,683.53 1052.44,683.53 1053,683.53 1053.56,683.53 1054.12,683.53 1054.68,683.53 1055.24,683.53 1055.8,683.53 1056.36,683.53 1056.92,683.53 1057.48,683.53 1058.03,683.53 1058.59,683.53 1059.15,683.53 1059.71,683.53 1060.27,683.53 1060.83,683.53 1061.39,683.53 1061.95,683.53 1062.51,683.53 1063.07,683.53 1063.63,683.53 1064.19,683.53 1064.75,683.53 1065.3,683.53 1065.86,683.53 1066.42,683.53 1066.98,683.53 1067.54,683.53 1068.1,683.53 1068.66,683.53 1069.22,683.53 1069.78,683.53 1070.34,683.53 1070.9,683.53 1071.46,683.53 1072.02,683.53 1072.57,683.53 1073.13,683.53 1073.69,683.53 1074.25,683.53 1074.81,683.53 1075.37,683.53 1075.93,683.53 1076.49,683.53 1077.05,683.53 1077.61,683.53 1078.17,683.53 1078.73,683.53 1079.29,683.53 1079.85,683.53 1080.4,683.53 1080.96,683.53 1081.52,683.53 1082.08,683.53 1082.64,683.53 1083.2,683.53 1083.76,683.53 1084.32,683.53 1084.88,683.53 1085.44,683.53 1086,683.53 1086.56,683.53 1087.12,683.53 1087.67,683.53 1088.23,683.53 1088.79,683.53 1089.35,683.53 1089.91,683.53 1090.47,683.53 1091.03,683.53 1091.59,683.53 1092.15,683.53 1092.71,683.53 1093.27,683.53 1093.83,683.53 1094.39,683.53 1094.94,683.53 1095.5,683.53 1096.06,683.53 1096.62,683.53 1097.18,683.53 1097.74,683.53 1098.3,683.53 1098.86,683.53 1099.42,683.53 1099.98,683.53 1100.54,683.53 1101.1,683.53 1101.66,683.53 1102.22,683.53 1102.77,683.53 1103.33,683.53 1103.89,683.53 1104.45,683.53 1105.01,683.53 1105.57,683.53 1106.13,683.53 1106.69,683.53 1107.25,683.53 1107.81,683.53 1108.37,683.53 1108.93,683.53 1109.49,683.53 1110.04,683.53 1110.6,683.53 1111.16,683.53 1111.72,683.53 1112.28,683.53 1112.84,683.53 1113.4,683.53 1113.96,683.53 1114.52,683.53 1115.08,683.53 1115.64,683.53 1116.2,683.53 1116.76,683.53 1117.31,683.53 1117.87,683.53 1118.43,683.53 1118.99,683.53 1119.55,683.53 1120.11,683.53 1120.67,683.53 1121.23,683.53 1121.79,683.53 1122.35,683.53 1122.91,683.53 1123.47,683.53 1124.03,683.53 1124.59,683.53 1125.14,683.53 1125.7,683.53 1126.26,683.53 1126.82,683.53 1127.38,683.53 1127.94,683.53 1128.5,683.53 1129.06,683.53 1129.62,683.53 1130.18,683.53 1130.74,683.53 1131.3,683.53 1131.86,683.53 1132.41,683.53 1132.97,683.53 1133.53,683.53 1134.09,683.53 1134.65,683.53 1135.21,683.53 1135.77,683.53 1136.33,683.53 1136.89,683.53 1137.45,683.53 1138.01,683.53 1138.57,683.53 1139.13,683.53 1139.68,683.53 1140.24,683.53 1140.8,683.53 1141.36,683.53 1141.92,683.53 1142.48,683.53 1143.04,683.53 1143.6,683.53 1144.16,683.53 1144.72,683.53 1145.28,683.53 1145.84,683.53 1146.4,683.53 1146.96,683.53 1147.51,683.53 1148.07,683.53 1148.63,683.53 1149.19,683.53 1149.75,683.53 1150.31,683.53 1150.87,683.53 1151.43,683.53 1151.99,683.53 1152.55,683.53 1153.11,683.53 1153.67,683.53 1154.23,683.53 1154.78,683.53 1155.34,683.53 1155.9,683.53 1156.46,683.53 1157.02,683.53 1157.58,683.53 1158.14,683.53 1158.7,683.53 1159.26,683.53 1159.82,683.53 1160.38,683.53 1160.94,683.53 1161.5,683.53 1162.05,683.53 1162.61,683.53 1163.17,683.53 1163.73,683.53 1164.29,683.53 1164.85,683.53 1165.41,683.53 1165.97,683.53 1166.53,683.53 1167.09,683.53 1167.65,683.53 1168.21,683.53 1168.77,683.53 1169.33,683.53 1169.88,683.53 1170.44,683.53 1171,683.53 1171.56,683.53 1172.12,683.53 1172.68,683.53 1173.24,683.53 1173.8,683.53 1174.36,683.53 1174.92,683.53 1175.48,683.53 1176.04,683.53 1176.6,683.53 1177.15,683.53 1177.71,683.53 1178.27,683.53 1178.83,683.53 1179.39,683.53 1179.95,683.53 1180.51,683.53 1181.07,683.53 1181.63,683.53 1182.19,683.53 1182.75,683.53 1183.31,683.53 1183.87,683.53 1184.43,683.53 1184.98,683.53 1185.54,683.53 1186.1,683.53 1186.66,683.53 1187.22,683.53 1187.78,683.53 1188.34,683.53 1188.9,683.53 1189.46,683.53 1190.02,683.53 1190.58,683.53 1191.14,683.53 1191.7,683.53 1192.25,683.53 1192.81,683.53 1193.37,683.53 1193.93,683.53 1194.49,683.53 1195.05,683.53 1195.61,683.53 1196.17,683.53 1196.73,683.53 1197.29,683.53 1197.85,683.53 1198.41,683.53 1198.97,683.53 1199.52,683.53 1200.08,683.53 1200.64,683.53 1201.2,683.53 1201.76,683.53 1202.32,683.53 1202.88,683.53 1203.44,683.53 1204,683.53 1204.56,683.53 1205.12,683.53 1205.68,683.53 1206.24,683.53 1206.8,683.53 1207.35,683.53 1207.91,683.53 1208.47,683.53 1209.03,683.53 1209.59,683.53 1210.15,683.53 1210.71,683.53 1211.27,683.53 1211.83,683.53 1212.39,683.53 1212.95,683.53 1213.51,683.53 1214.07,683.53 1214.62,683.53 1215.18,683.53 1215.74,683.53 1216.3,683.53 1216.86,683.53 1217.42,683.53 1217.98,683.53 1218.54,683.53 1219.1,683.53 1219.66,683.53 1220.22,683.53 1220.78,683.53 1221.34,683.53 1221.89,683.53 1222.45,683.53 1223.01,683.53 1223.57,683.53 1224.13,683.53 1224.69,683.53 1225.25,683.53 1225.81,683.53 1226.37,683.53 1226.93,683.53 1227.49,683.53 1228.05,683.53 1228.61,683.53 1229.17,683.53 1229.72,683.53 1230.28,683.53 1230.84,683.53 1231.4,683.53 1231.96,683.53 1232.52,683.53 1233.08,683.53 1233.64,683.53 1234.2,683.53 1234.76,683.53 1235.32,683.53 1235.88,683.53 1236.44,683.53 1236.99,683.53 1237.55,683.53 1238.11,683.53 1238.67,683.53 1239.23,683.53 1239.79,683.53 1240.35,683.53 1240.91,683.53 1241.47,683.53 1242.03,683.53 1242.59,683.53 1243.15,683.53 1243.71,683.53 1244.26,683.53 1244.82,683.53 1245.38,683.53 1245.94,683.53 1246.5,683.53 1247.06,683.53 1247.62,683.53 1248.18,683.53 1248.74,683.53 1249.3,683.53 1249.86,683.53 1250.42,683.53 1250.98,683.53 1251.54,683.53 1252.09,683.53 1252.65,683.53 1253.21,683.53 1253.77,683.53 1254.33,683.53 1254.89,683.53 1255.45,683.53 1256.01,683.53 1256.57,683.53 1257.13,683.53 1257.69,683.53 1258.25,683.53 1258.81,683.53 1259.36,683.53 1259.92,683.53 1260.48,683.53 1261.04,683.53 1261.6,683.53 1262.16,683.53 1262.72,683.53 1263.28,683.53 1263.84,683.53 1264.4,683.53 1264.96,683.53 1265.52,683.53 1266.08,683.53 1266.63,683.53 1267.19,683.53 1267.75,683.53 1268.31,683.53 1268.87,683.53 1269.43,683.53 1269.99,683.53 1270.55,683.53 1271.11,683.53 1271.67,683.53 1272.23,683.53 1272.79,683.53 1273.35,683.53 1273.91,683.53 1274.46,683.53 1275.02,683.53 1275.58,683.53 1276.14,683.53 1276.7,683.53 1277.26,683.53 1277.82,683.53 1278.38,683.53 1278.94,683.53 1279.5,683.53 1280.06,683.53 1280.62,683.53 1281.18,683.53 1281.73,683.53 1282.29,683.53 1282.85,683.53 1283.41,683.53 1283.97,683.53 1284.53,683.53 1285.09,683.53 1285.65,683.53 1286.21,683.53 1286.77,683.53 1287.33,683.53 1287.89,683.53 1288.45,683.53 1289,683.53 1289.56,683.53 1290.12,683.53 1290.68,683.53 1291.24,683.53 1291.8,683.53 1292.36,683.53 1292.92,683.53 1293.48,683.53 1294.04,683.53 1294.6,683.53 1295.16,683.53 1295.72,683.53 1296.28,683.53 1296.83,683.53 1297.39,683.53 1297.95,683.53 1298.51,683.53 1299.07,683.53 1299.63,683.53 1300.19,683.53 1300.75,683.53 1301.31,683.53 1301.87,683.53 1302.43,683.53 1302.99,683.53 1303.55,683.53 1304.1,683.53 1304.66,683.53 1305.22,683.53 1305.78,683.53 1306.34,683.53 1306.9,683.53 1307.46,683.53 1308.02,683.53 1308.58,683.53 1309.14,683.53 1309.7,683.53 1310.26,683.53 1310.82,683.53 1311.38,683.53 1311.93,683.53 1312.49,683.53 1313.05,683.53 1313.61,683.53 1314.17,683.53 1314.73,683.53 1315.29,683.53 1315.85,683.53 1316.41,683.53 1316.97,683.53 1317.53,683.53 1318.09,683.53 1318.65,683.53 1319.2,683.53 1319.76,683.53 1320.32,683.53 1320.88,683.53 1321.44,683.53 1322,683.53 1322.56,683.53 1323.12,683.53 1323.68,683.53 1324.24,683.53 1324.8,683.53 1325.36,683.53 1325.92,683.53 1326.47,683.53 1327.03,683.53 1327.59,683.53 1328.15,683.53 1328.71,683.53 1329.27,683.53 1329.83,683.53 1330.39,683.53 1330.95,683.53 1331.51,683.53 1332.07,683.53 1332.63,683.53 1333.19,683.53 1333.75,683.53 1334.3,683.53 1334.86,683.53 1335.42,683.53 1335.98,683.53 1336.54,683.53 1337.1,683.53 1337.66,683.53 1338.22,683.53 1338.78,683.53 1339.34,683.53 1339.9,683.53 1340.46,683.53 1341.02,683.53 1341.57,683.53 1342.13,683.53 1342.69,683.53 1343.25,683.53 1343.81,683.53 1344.37,683.53 1344.93,683.53 1345.49,683.53 1346.05,683.53 1346.61,683.53 1347.17,683.53 1347.73,683.53 1348.29,683.53 1348.84,683.53 1349.4,683.53 1349.96,683.53 1350.52,683.53 1351.08,683.53 1351.64,683.53 1352.2,683.53 1352.76,683.53 1353.32,683.53 1353.88,683.53 1354.44,683.53 1355,683.53 1355.56,683.53 1356.12,683.53 1356.67,683.53 1357.23,683.53 1357.79,683.53 1358.35,683.53 1358.91,683.53 1359.47,683.53 1360.03,683.53 1360.59,683.53 1361.15,683.53 1361.71,683.53 1362.27,683.53 1362.83,683.53 1363.39,683.53 1363.94,683.53 1364.5,683.53 1365.06,683.53 1365.62,683.53 1366.18,683.53 1366.74,683.53 1367.3,683.53 1367.86,683.53 1368.42,683.53 1368.98,683.53 1369.54,683.53 1370.1,683.53 1370.66,683.53 1371.21,683.53 1371.77,683.53 1372.33,683.53 1372.89,683.53 1373.45,683.53 1374.01,683.53 1374.57,683.53 1375.13,683.53 1375.69,683.53 1376.25,683.53 1376.81,683.53 1377.37,683.53 1377.93,683.53 1378.49,683.53 1379.04,683.53 1379.6,683.53 1380.16,683.53 1380.72,683.53 1381.28,683.53 1381.84,683.53 1382.4,683.53 1382.96,683.53 1383.52,683.53 1384.08,683.53 1384.64,683.53 1385.2,683.53 1385.76,683.53 1386.31,683.53 1386.87,683.53 1387.43,683.53 1387.99,683.53 1388.55,683.53 1389.11,683.53 1389.67,683.53 1390.23,683.53 1390.79,683.53 1391.35,683.53 1391.91,683.53 1392.47,683.53 1393.03,683.53 1393.58,683.53 1394.14,683.53 1394.7,683.53 1395.26,683.53 1395.82,683.53 1396.38,683.53 1396.94,683.53 1397.5,683.53 1398.06,683.53 1398.62,683.53 1399.18,683.53 1399.74,683.53 1400.3,683.53 1400.86,683.53 1401.41,683.53 1401.97,683.53 1402.53,683.53 1403.09,683.53 1403.65,683.53 1404.21,683.53 1404.77,683.53 1405.33,683.53 1405.89,683.53 1406.45,683.53 1407.01,683.53 1407.57,683.53 1408.13,683.53 1408.68,683.53 1409.24,683.53 1409.8,683.53 1410.36,683.53 1410.92,683.53 1411.48,683.53 1412.04,683.53 1412.6,683.53 1413.16,683.53 1413.72,683.53 1414.28,683.53 1414.84,683.53 1415.4,683.53 1415.95,683.53 1416.51,683.53 1417.07,683.53 1417.63,683.53 1418.19,683.53 1418.75,683.53 1419.31,683.53 1419.87,683.53 1420.43,683.53 1420.99,683.53 1421.55,683.53 1422.11,683.53 1422.67,683.53 1423.23,683.53 1423.78,683.53 1424.34,683.53 1424.9,683.53 1425.46,683.53 1426.02,683.53 1426.58,683.53 1427.14,683.53 1427.7,683.53 1428.26,683.53 1428.82,683.53 1429.38,683.53 1429.94,683.53 1430.5,683.53 1431.05,683.53 1431.61,683.53 1432.17,683.53 1432.73,683.53 1433.29,683.53 1433.85,683.53 1434.41,683.53 1434.97,683.53 1435.53,683.53 1436.09,683.53 1436.65,683.53 1437.21,683.53 1437.77,683.53 1438.33,683.53 1438.88,683.53 1439.44,683.53 1440,683.53 1440.56,683.53 1441.12,683.53 1441.68,683.53 1442.24,683.53 1442.8,683.53 1443.36,683.53 1443.92,683.53 1444.48,683.53 1445.04,683.53 1445.6,683.53 1446.15,683.53 1446.71,683.53 1447.27,683.53 1447.83,683.53 1448.39,683.53 1448.95,683.53 1449.51,683.53 1450.07,683.53 1450.63,683.53 1451.19,683.53 1451.75,683.53 1452.31,683.53 1452.87,683.53 1453.42,683.53 1453.98,683.53 1454.54,683.53 1455.1,683.53 1455.66,683.53 1456.22,683.53 1456.78,683.53 1457.34,683.53 1457.9,683.53 1458.46,683.53 1459.02,683.53 1459.58,683.53 1460.14,683.53 1460.7,683.53 1461.25,683.53 1461.81,683.53 1462.37,683.53 1462.93,683.53 1463.49,683.53 1464.05,683.53 1464.61,683.53 1465.17,683.53 1465.73,683.53 1466.29,683.53 1466.85,683.53 1467.41,683.53 1467.97,683.53 1468.52,683.53 1469.08,683.53 1469.64,683.53 1470.2,683.53 1470.76,683.53 1471.32,683.53 1471.88,683.53 1472.44,683.53 1473,683.53 1473.56,683.53 1474.12,683.53 1474.68,683.53 1475.24,683.53 1475.79,683.53 1476.35,683.53 1476.91,683.53 1477.47,683.53 1478.03,683.53 1478.59,683.53 1479.15,683.53 1479.71,683.53 1480.27,683.53 1480.83,683.53 1481.39,683.53 1481.95,683.53 1482.51,683.53 1483.07,683.53 1483.62,683.53 1484.18,683.53 1484.74,683.53 1485.3,683.53 1485.86,683.53 1486.42,683.53 1486.98,683.53 1487.54,683.53 1488.1,683.53 1488.66,683.53 1489.22,683.53 1489.78,683.53 1490.34,683.53 1490.89,683.53 1491.45,683.53 1492.01,683.53 1492.57,683.53 1493.13,683.53 1493.69,683.53 1494.25,683.53 1494.81,683.53 1495.37,683.53 1495.93,683.53 1496.49,683.53 1497.05,683.53 1497.61,683.53 1498.16,683.53 1498.72,683.53 1499.28,683.53 1499.84,683.53 1500.4,683.53 1500.96,683.53 1501.52,683.53 1502.08,683.53 1502.64,683.53 1503.2,683.53 1503.76,683.53 1504.32,683.53 1504.88,683.53 1505.44,683.53 1505.99,683.53 1506.55,683.53 1507.11,683.53 1507.67,683.53 1508.23,683.53 1508.79,683.53 1509.35,683.53 1509.91,683.53 1510.47,683.53 1511.03,683.53 1511.59,683.53 1512.15,683.53 1512.71,683.53 1513.26,683.53 1513.82,683.53 1514.38,683.53 1514.94,683.53 1515.5,683.53 1516.06,683.53 1516.62,683.53 1517.18,683.53 1517.74,683.53 1518.3,683.53 1518.86,683.53 1519.42,683.53 1519.98,683.53 1520.53,683.53 1521.09,683.53 1521.65,683.53 1522.21,683.53 1522.77,683.53 1523.33,683.53 1523.89,683.53 1524.45,683.53 1525.01,683.53 1525.57,683.53 1526.13,683.53 1526.69,683.53 1527.25,683.53 1527.81,683.53 1528.36,683.53 1528.92,683.53 1529.48,683.53 1530.04,683.53 1530.6,683.53 1531.16,683.53 1531.72,683.53 1532.28,683.53 1532.84,683.53 1533.4,683.53 1533.96,683.53 1534.52,683.53 1535.08,683.53 1535.63,683.53 1536.19,683.53 1536.75,683.53 1537.31,683.53 1537.87,683.53 1538.43,683.53 1538.99,683.53 1539.55,683.53 1540.11,683.53 1540.67,683.53 1541.23,683.53 1541.79,683.53 1542.35,683.53 1542.9,683.53 1543.46,683.53 1544.02,683.53 1544.58,683.53 1545.14,683.53 1545.7,683.53 1546.26,683.53 1546.82,683.53 1547.38,683.53 1547.94,683.53 1548.5,683.53 1549.06,683.53 1549.62,683.53 1550.18,683.53 1550.73,683.53 1551.29,683.53 1551.85,683.53 1552.41,683.53 1552.97,683.53 1553.53,683.53 1554.09,683.53 1554.65,683.53 1555.21,683.53 1555.77,683.53 1556.33,683.53 1556.89,683.53 1557.45,683.53 1558,683.53 1558.56,683.53 1559.12,683.53 1559.68,683.53 1560.24,683.53 1560.8,683.53 1561.36,683.53 1561.92,683.53 1562.48,683.53 1563.04,683.53 1563.6,683.53 1564.16,683.53 1564.72,683.53 1565.28,683.53 1565.83,683.53 1566.39,683.53 1566.95,683.53 1567.51,683.53 1568.07,683.53 1568.63,683.53 1569.19,683.53 1569.75,683.53 1570.31,683.53 1570.87,683.53 1571.43,683.53 1571.99,683.53 1572.55,683.53 1573.1,683.53 1573.66,683.53 1574.22,683.53 1574.78,683.53 1575.34,683.53 1575.9,683.53 1576.46,683.53 1577.02,683.53 1577.58,683.53 1578.14,683.53 1578.7,683.53 1579.26,683.53 1579.82,683.53 1580.37,683.53 1580.93,683.53 1581.49,683.53 1582.05,683.53 1582.61,683.53 1583.17,683.53 1583.73,683.53 1584.29,683.53 1584.85,683.53 1585.41,683.53 1585.97,683.53 1586.53,683.53 1587.09,683.53 1587.65,683.53 1588.2,683.53 1588.76,683.53 1589.32,683.53 1589.88,683.53 1590.44,683.53 1591,683.53 1591.56,683.53 1592.12,683.53 1592.68,683.53 1593.24,683.53 1593.8,683.53 1594.36,683.53 1594.92,683.53 1595.47,683.53 1596.03,683.53 1596.59,683.53 1597.15,683.53 1597.71,683.53 1598.27,683.53 1598.83,683.53 1599.39,683.53 1599.95,683.53 1600.51,683.53 1601.07,683.53 1601.63,683.53 1602.19,683.53 1602.74,683.53 1603.3,683.53 1603.86,683.53 1604.42,683.53 1604.98,683.53 1605.54,683.53 1606.1,683.53 1606.66,683.53 1607.22,683.53 1607.78,683.53 1608.34,683.53 1608.9,683.53 1609.46,683.53 1610.02,683.53 1610.57,683.53 1611.13,683.53 1611.69,683.53 1612.25,683.53 1612.81,683.53 1613.37,683.53 1613.93,683.53 1614.49,683.53 1615.05,683.53 1615.61,683.53 1616.17,683.53 1616.73,683.53 1617.29,683.53 1617.84,683.53 1618.4,683.53 1618.96,683.53 1619.52,683.53 1620.08,683.53 1620.64,683.53 1621.2,683.53 1621.76,683.53 1622.32,683.53 1622.88,683.53 1623.44,683.53 1624,683.53 1624.56,683.53 1625.11,683.53 1625.67,683.53 1626.23,683.53 1626.79,683.53 1627.35,683.53 1627.91,683.53 1628.47,683.53 1629.03,683.53 1629.59,683.53 1630.15,683.53 1630.71,683.53 1631.27,683.53 1631.83,683.53 1632.39,683.53 1632.94,683.53 1633.5,683.53 1634.06,683.53 1634.62,683.53 1635.18,683.53 1635.74,683.53 1636.3,683.53 1636.86,683.53 1637.42,683.53 1637.98,683.53 1638.54,683.53 1639.1,683.53 1639.66,683.53 1640.21,683.53 1640.77,683.53 1641.33,683.53 1641.89,683.53 1642.45,683.53 1643.01,683.53 1643.57,683.53 1644.13,683.53 1644.69,683.53 1645.25,683.53 1645.81,683.53 1646.37,683.53 1646.93,683.53 1647.48,683.53 1648.04,683.53 1648.6,683.53 1649.16,683.53 1649.72,683.53 1650.28,683.53 1650.84,683.53 1651.4,683.53 1651.96,683.53 1652.52,683.53 1653.08,683.53 1653.64,683.53 1654.2,683.53 1654.76,683.53 1655.31,683.53 1655.87,683.53 1656.43,683.53 1656.99,683.53 1657.55,683.53 1658.11,683.53 1658.67,683.53 1659.23,683.53 1659.79,683.53 1660.35,683.53 1660.91,683.53 1661.47,683.53 1662.03,683.53 1662.58,683.53 1663.14,683.53 1663.7,683.53 1664.26,683.53 1664.82,683.53 1665.38,683.53 1665.94,683.53 1666.5,683.53 1667.06,683.53 1667.62,683.53 1668.18,683.53 1668.74,683.53 1669.3,683.53 1669.85,683.53 1670.41,683.53 1670.97,683.53 1671.53,683.53 1672.09,683.53 1672.65,683.53 1673.21,683.53 1673.77,683.53 1674.33,683.53 1674.89,683.53 1675.45,683.53 1676.01,683.53 1676.57,683.53 1677.13,683.53 1677.68,683.53 1678.24,683.53 1678.8,683.53 1679.36,683.53 1679.92,683.53 1680.48,683.53 1681.04,683.53 1681.6,683.53 1682.16,683.53 1682.72,683.53 1683.28,683.53 1683.84,683.53 1684.4,683.53 1684.95,683.53 1685.51,683.53 1686.07,683.53 1686.63,683.53 1687.19,683.53 1687.75,683.53 1688.31,683.53 1688.87,683.53 1689.43,683.53 1689.99,683.53 1690.55,683.53 1691.11,683.53 1691.67,683.53 1692.23,683.53 1692.78,683.53 1693.34,683.53 1693.9,683.53 1694.46,683.53 1695.02,683.53 1695.58,683.53 1696.14,683.53 1696.7,683.53 1697.26,683.53 1697.82,683.53 1698.38,683.53 1698.94,683.53 1699.5,683.53 1700.05,683.53 1700.61,683.53 1701.17,683.53 1701.73,683.53 1702.29,683.53 1702.85,683.53 1703.41,683.53 1703.97,683.53 1704.53,683.53 1705.09,683.53 1705.65,683.53 1706.21,683.53 1706.77,683.53 1707.32,683.53 1707.88,683.53 1708.44,683.53 1709,683.53 1709.56,683.53 1710.12,683.53 1710.68,683.53 1711.24,683.53 1711.8,683.53 1712.36,683.53 1712.92,683.53 1713.48,683.53 1714.04,683.53 1714.6,683.53 1715.15,683.53 1715.71,683.53 1716.27,683.53 1716.83,683.53 1717.39,683.53 1717.95,683.53 1718.51,683.53 1719.07,683.53 1719.63,683.53 1720.19,683.53 1720.75,683.53 1721.31,683.53 1721.87,683.53 1722.42,683.53 1722.98,683.53 1723.54,683.53 1724.1,683.53 1724.66,683.53 1725.22,683.53 1725.78,683.53 1726.34,683.53 1726.9,683.53 1727.46,683.53 1728.02,683.53 1728.58,683.53 1729.14,683.53 1729.69,683.53 1730.25,683.53 1730.81,683.53 1731.37,683.53 1731.93,683.53 1732.49,683.53 1733.05,683.53 1733.61,683.53 1734.17,683.53 1734.73,683.53 1735.29,683.53 1735.85,683.53 1736.41,683.53 1736.97,683.53 1737.52,683.53 1738.08,683.53 1738.64,683.53 1739.2,683.53 1739.76,683.53 1740.32,683.53 1740.88,683.53 1741.44,683.53 1742,683.53 1742.56,683.53 1743.12,683.53 1743.68,683.53 1744.24,683.53 1744.79,683.53 1745.35,683.53 1745.91,683.53 1746.47,683.53 1747.03,683.53 1747.59,683.53 1748.15,683.53 1748.71,683.53 1749.27,683.53 1749.83,683.53 1750.39,683.53 1750.95,683.53 1751.51,683.53 1752.06,683.53 1752.62,683.53 1753.18,683.53 1753.74,683.53 1754.3,683.53 1754.86,683.53 1755.42,683.53 1755.98,683.53 1756.54,683.53 1757.1,683.53 1757.66,683.53 1758.22,683.53 1758.78,683.53 1759.34,683.53 1759.89,683.53 1760.45,683.53 1761.01,683.53 1761.57,683.53 1762.13,683.53 1762.69,683.53 1763.25,683.53 1763.81,683.53 1764.37,683.53 1764.93,683.53 1765.49,683.53 1766.05,683.53 1766.61,683.53 1767.16,683.53 1767.72,683.53 1768.28,683.53 1768.84,683.53 1769.4,683.53 1769.96,683.53 1770.52,683.53 1771.08,683.53 1771.64,683.53 1772.2,683.53 1772.76,683.53 1773.32,683.53 1773.88,683.53 1774.43,683.53 1774.99,683.53 1775.55,683.53 1776.11,683.53 1776.67,683.53 1777.23,683.53 1777.79,683.53 1778.35,683.53 1778.91,683.53 1779.47,683.53 1780.03,683.53 1780.59,683.53 1781.15,683.53 1781.71,683.53 1782.26,683.53 1782.82,683.53 1783.38,683.53 1783.94,683.53 1784.5,683.53 1785.06,683.53 1785.62,683.53 1786.18,683.53 1786.74,683.53 1787.3,683.53 1787.86,683.53 1788.42,683.53 1788.98,683.53 1789.53,683.53 1790.09,683.53 1790.65,683.53 1791.21,683.53 1791.77,683.53 1792.33,683.53 1792.89,683.53 1793.45,683.53 1794.01,683.53 1794.57,683.53 1795.13,683.53 1795.69,683.53 1796.25,683.53 1796.8,683.53 1797.36,683.53 1797.92,683.53 1798.48,683.53 1799.04,683.53 1799.6,683.53 1800.16,683.53 1800.72,683.53 1801.28,683.53 1801.84,683.53 1802.4,683.53 1802.96,683.53 1803.52,683.53 1804.08,683.53 1804.63,683.53 1805.19,683.53 1805.75,683.53 1806.31,683.53 1806.87,683.53 1807.43,683.53 1807.99,683.53 1808.55,683.53 1809.11,683.53 1809.67,683.53 1810.23,683.53 1810.79,683.53 1811.35,683.53 1811.9,683.53 1812.46,683.53 1813.02,683.53 1813.58,683.53 1814.14,683.53 1814.7,683.53 1815.26,683.53 1815.82,683.53 1816.38,683.53 1816.94,683.53 1817.5,683.53 1818.06,683.53 1818.62,683.53 1819.18,683.53 1819.73,683.53 1820.29,683.53 1820.85,683.53 1821.41,683.53 1821.97,683.53 1822.53,683.53 1823.09,683.53 1823.65,683.53 1824.21,683.53 1824.77,683.53 1825.33,683.53 1825.89,683.53 1826.45,683.53 1827,683.53 1827.56,683.53 1828.12,683.53 1828.68,683.53 1829.24,683.53 1829.8,683.53 1830.36,683.53 1830.92,683.53 1831.48,683.53 1832.04,683.53 1832.6,683.53 1833.16,683.53 1833.72,683.53 1834.27,683.53 1834.83,683.53 1835.39,683.53 1835.95,683.53 1836.51,683.53 1837.07,683.53 1837.63,683.53 1838.19,683.53 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0291115681080445 ± 0.021348847395796643\nProjected Energy: -4.014810655305322 ± (0.008353418161425985, 0.007397905220381418)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.486572</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4387e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.8224e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.689e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.333e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.665e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.007e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.3631242916133672\n -0.7590191922770906\n  0.13584182219622498\n  0.15789998694607732\n  0.8767114411781449\n  1.530592997097334\n  1.5835732611867437\n  3.072870330325867\n  3.125672653951832\n  4.862107221562173\n  6.260694850380592\n  6.40267121118311\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is deterimed by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
