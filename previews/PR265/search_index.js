var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip580\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip580)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip581\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip580)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip582\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip580)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.18 2211.02,1003.18 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.52 2211.02,745.52 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.863 2211.02,487.863 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.206 2211.02,230.206 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.18 423.181,1003.18 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.52 423.181,745.52 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.863 423.181,487.863 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.206 423.181,230.206 \"/>\n<path clip-path=\"url(#clip580)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M290.043 1016.52 L306.363 1016.52 L306.363 1020.46 L284.418 1020.46 L284.418 1016.52 Q287.08 1013.77 291.664 1009.14 Q296.27 1004.49 297.451 1003.14 Q299.696 1000.62 300.576 998.884 Q301.478 997.124 301.478 995.435 Q301.478 992.68 299.534 990.944 Q297.613 989.208 294.511 989.208 Q292.312 989.208 289.858 989.972 Q287.427 990.735 284.65 992.286 L284.65 987.564 Q287.474 986.43 289.927 985.851 Q292.381 985.273 294.418 985.273 Q299.789 985.273 302.983 987.958 Q306.177 990.643 306.177 995.134 Q306.177 997.263 305.367 999.185 Q304.58 1001.08 302.474 1003.68 Q301.895 1004.35 298.793 1007.56 Q295.691 1010.76 290.043 1016.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M316.224 985.898 L334.58 985.898 L334.58 989.833 L320.506 989.833 L320.506 998.305 Q321.524 997.958 322.543 997.796 Q323.562 997.61 324.58 997.61 Q330.367 997.61 333.747 1000.78 Q337.126 1003.95 337.126 1009.37 Q337.126 1014.95 333.654 1018.05 Q330.182 1021.13 323.862 1021.13 Q321.687 1021.13 319.418 1020.76 Q317.173 1020.39 314.765 1019.65 L314.765 1014.95 Q316.849 1016.08 319.071 1016.64 Q321.293 1017.19 323.77 1017.19 Q327.774 1017.19 330.112 1015.09 Q332.45 1012.98 332.45 1009.37 Q332.45 1005.76 330.112 1003.65 Q327.774 1001.55 323.77 1001.55 Q321.895 1001.55 320.02 1001.96 Q318.168 1002.38 316.224 1003.26 L316.224 985.898 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M356.339 988.976 Q352.728 988.976 350.899 992.541 Q349.094 996.083 349.094 1003.21 Q349.094 1010.32 350.899 1013.88 Q352.728 1017.43 356.339 1017.43 Q359.973 1017.43 361.779 1013.88 Q363.608 1010.32 363.608 1003.21 Q363.608 996.083 361.779 992.541 Q359.973 988.976 356.339 988.976 M356.339 985.273 Q362.149 985.273 365.205 989.879 Q368.284 994.462 368.284 1003.21 Q368.284 1011.94 365.205 1016.55 Q362.149 1021.13 356.339 1021.13 Q350.529 1021.13 347.45 1016.55 Q344.395 1011.94 344.395 1003.21 Q344.395 994.462 347.45 989.879 Q350.529 985.273 356.339 985.273 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M286.062 728.24 L304.418 728.24 L304.418 732.175 L290.344 732.175 L290.344 740.648 Q291.363 740.3 292.381 740.138 Q293.4 739.953 294.418 739.953 Q300.205 739.953 303.585 743.124 Q306.964 746.296 306.964 751.712 Q306.964 757.291 303.492 760.393 Q300.02 763.472 293.701 763.472 Q291.525 763.472 289.256 763.101 Q287.011 762.731 284.603 761.99 L284.603 757.291 Q286.687 758.425 288.909 758.981 Q291.131 759.536 293.608 759.536 Q297.613 759.536 299.951 757.43 Q302.288 755.323 302.288 751.712 Q302.288 748.101 299.951 745.995 Q297.613 743.888 293.608 743.888 Q291.733 743.888 289.858 744.305 Q288.006 744.722 286.062 745.601 L286.062 728.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M326.177 731.319 Q322.566 731.319 320.737 734.884 Q318.932 738.425 318.932 745.555 Q318.932 752.661 320.737 756.226 Q322.566 759.768 326.177 759.768 Q329.811 759.768 331.617 756.226 Q333.446 752.661 333.446 745.555 Q333.446 738.425 331.617 734.884 Q329.811 731.319 326.177 731.319 M326.177 727.615 Q331.987 727.615 335.043 732.222 Q338.122 736.805 338.122 745.555 Q338.122 754.282 335.043 758.888 Q331.987 763.472 326.177 763.472 Q320.367 763.472 317.288 758.888 Q314.233 754.282 314.233 745.555 Q314.233 736.805 317.288 732.222 Q320.367 727.615 326.177 727.615 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M356.339 731.319 Q352.728 731.319 350.899 734.884 Q349.094 738.425 349.094 745.555 Q349.094 752.661 350.899 756.226 Q352.728 759.768 356.339 759.768 Q359.973 759.768 361.779 756.226 Q363.608 752.661 363.608 745.555 Q363.608 738.425 361.779 734.884 Q359.973 731.319 356.339 731.319 M356.339 727.615 Q362.149 727.615 365.205 732.222 Q368.284 736.805 368.284 745.555 Q368.284 754.282 365.205 758.888 Q362.149 763.472 356.339 763.472 Q350.529 763.472 347.45 758.888 Q344.395 754.282 344.395 745.555 Q344.395 736.805 347.45 732.222 Q350.529 727.615 356.339 727.615 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M284.835 470.583 L307.057 470.583 L307.057 472.574 L294.511 505.143 L289.627 505.143 L301.432 474.518 L284.835 474.518 L284.835 470.583 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M316.224 470.583 L334.58 470.583 L334.58 474.518 L320.506 474.518 L320.506 482.99 Q321.524 482.643 322.543 482.481 Q323.562 482.296 324.58 482.296 Q330.367 482.296 333.747 485.467 Q337.126 488.638 337.126 494.055 Q337.126 499.634 333.654 502.736 Q330.182 505.814 323.862 505.814 Q321.687 505.814 319.418 505.444 Q317.173 505.073 314.765 504.333 L314.765 499.634 Q316.849 500.768 319.071 501.324 Q321.293 501.879 323.77 501.879 Q327.774 501.879 330.112 499.773 Q332.45 497.666 332.45 494.055 Q332.45 490.444 330.112 488.337 Q327.774 486.231 323.77 486.231 Q321.895 486.231 320.02 486.648 Q318.168 487.064 316.224 487.944 L316.224 470.583 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M356.339 473.662 Q352.728 473.662 350.899 477.226 Q349.094 480.768 349.094 487.898 Q349.094 495.004 350.899 498.569 Q352.728 502.111 356.339 502.111 Q359.973 502.111 361.779 498.569 Q363.608 495.004 363.608 487.898 Q363.608 480.768 361.779 477.226 Q359.973 473.662 356.339 473.662 M356.339 469.958 Q362.149 469.958 365.205 474.564 Q368.284 479.148 368.284 487.898 Q368.284 496.624 365.205 501.231 Q362.149 505.814 356.339 505.814 Q350.529 505.814 347.45 501.231 Q344.395 496.624 344.395 487.898 Q344.395 479.148 347.45 474.564 Q350.529 469.958 356.339 469.958 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M256.664 243.55 L264.303 243.55 L264.303 217.185 L255.992 218.852 L255.992 214.592 L264.256 212.926 L268.932 212.926 L268.932 243.55 L276.571 243.55 L276.571 247.486 L256.664 247.486 L256.664 243.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M296.015 216.004 Q292.404 216.004 290.576 219.569 Q288.77 223.111 288.77 230.24 Q288.77 237.347 290.576 240.912 Q292.404 244.453 296.015 244.453 Q299.65 244.453 301.455 240.912 Q303.284 237.347 303.284 230.24 Q303.284 223.111 301.455 219.569 Q299.65 216.004 296.015 216.004 M296.015 212.301 Q301.826 212.301 304.881 216.907 Q307.96 221.49 307.96 230.24 Q307.96 238.967 304.881 243.574 Q301.826 248.157 296.015 248.157 Q290.205 248.157 287.127 243.574 Q284.071 238.967 284.071 230.24 Q284.071 221.49 287.127 216.907 Q290.205 212.301 296.015 212.301 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M326.177 216.004 Q322.566 216.004 320.737 219.569 Q318.932 223.111 318.932 230.24 Q318.932 237.347 320.737 240.912 Q322.566 244.453 326.177 244.453 Q329.811 244.453 331.617 240.912 Q333.446 237.347 333.446 230.24 Q333.446 223.111 331.617 219.569 Q329.811 216.004 326.177 216.004 M326.177 212.301 Q331.987 212.301 335.043 216.907 Q338.122 221.49 338.122 230.24 Q338.122 238.967 335.043 243.574 Q331.987 248.157 326.177 248.157 Q320.367 248.157 317.288 243.574 Q314.233 238.967 314.233 230.24 Q314.233 221.49 317.288 216.907 Q320.367 212.301 326.177 212.301 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M356.339 216.004 Q352.728 216.004 350.899 219.569 Q349.094 223.111 349.094 230.24 Q349.094 237.347 350.899 240.912 Q352.728 244.453 356.339 244.453 Q359.973 244.453 361.779 240.912 Q363.608 237.347 363.608 230.24 Q363.608 223.111 361.779 219.569 Q359.973 216.004 356.339 216.004 M356.339 212.301 Q362.149 212.301 365.205 216.907 Q368.284 221.49 368.284 230.24 Q368.284 238.967 365.205 243.574 Q362.149 248.157 356.339 248.157 Q350.529 248.157 347.45 243.574 Q344.395 238.967 344.395 230.24 Q344.395 221.49 347.45 216.907 Q350.529 212.301 356.339 212.301 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip582)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.206 4017.76,230.206 \"/>\n<polyline clip-path=\"url(#clip582)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1248.44 458.828,1248.07 459.396,1247.63 459.964,1247.11 460.533,1245.5 461.101,1244.87 461.669,1244.16 462.238,1242.34 462.806,1241.5 463.375,1240.58 463.943,1238.53 464.511,1237.42 465.08,1236.21 465.648,1231.8 466.216,1229.37 466.785,1227.86 467.353,1226.25 467.921,1223.41 468.49,1221.52 469.058,1219.51 469.626,1217.36 470.195,1215.06 470.763,1212.57 471.331,1209.86 471.9,1207.05 472.468,1204.07 473.036,1200.91 473.605,1197.6 474.173,1191.99 474.741,1188.25 475.31,1184.29 475.878,1179.11 476.446,1174.71 477.015,1169.05 477.583,1164.36 478.152,1159.36 478.72,1152.05 479.288,1146.61 479.857,1139.88 480.425,1132.96 480.993,1125.84 481.562,1119.46 482.13,1112.94 482.698,1105.1 483.267,1097.95 483.835,1089.61 484.403,1080.1 484.972,1072.54 485.54,1061.68 486.108,1052.71 486.677,1044.66 487.245,1035.38 487.813,1025.98 488.382,1017.5 488.95,1007.84 489.518,999.063 490.087,990.209 490.655,981.011 491.224,969.698 491.792,955.261 492.36,944.964 492.929,933.909 493.497,924.511 494.065,914.826 494.634,904.027 495.202,893.316 495.77,882.581 496.339,870.686 496.907,860.863 497.475,849.984 498.044,836.164 498.612,824.509 499.18,811.861 499.749,800.269 500.317,789.721 500.885,778.315 501.454,769.026 502.022,756.683 502.59,747.552 503.159,737.525 503.727,726.572 504.295,716.65 504.864,706.919 505.432,696.283 506.001,685.551 506.569,675.158 507.137,663.868 507.706,655.759 508.274,647.603 508.842,637.415 509.411,626.425 509.979,617.706 510.547,610.296 511.116,600.718 511.684,591.176 512.252,584.028 512.821,576.893 513.389,567.822 513.957,561.035 514.526,553.162 515.094,546.43 515.662,538.984 516.231,530.345 516.799,523.257 517.367,515.11 517.936,509.194 518.504,500.312 519.072,495.871 519.641,490.386 520.209,483.844 520.778,477.522 521.346,471.333 521.914,465.254 522.483,459.094 523.051,452.284 523.619,446.434 524.188,441.858 524.756,435.492 525.324,430.027 525.893,425.966 526.461,421.97 527.029,416.794 527.598,411.941 528.166,407.053 528.734,403.345 529.303,397.73 529.871,390.11 530.439,385.78 531.008,383.676 531.576,378.676 532.144,375.692 532.713,372.786 533.281,369.986 533.85,365.147 534.418,359.626 534.986,357.239 535.555,355.742 536.123,351.316 536.691,348.062 537.26,342.698 537.828,341.579 538.396,334.245 538.965,330.638 539.533,329.311 540.101,327.863 540.67,326.307 541.238,324.658 541.806,322.183 542.375,320.664 542.943,318.336 543.511,317.884 544.08,315.49 544.648,314.195 545.216,312.558 545.785,310.98 546.353,308.613 546.921,307.443 547.49,306.331 548.058,304.091 548.627,301.974 549.195,298.63 549.763,298.495 550.332,295.122 550.9,295.423 551.468,296.343 552.037,291.969 552.605,290.894 553.173,287.71 553.742,286.786 554.31,286.092 554.878,283.246 555.447,282.565 556.015,279.818 556.583,279.196 557.152,278.685 557.72,275.954 558.288,274.547 558.857,272.313 559.425,271.1 559.993,271.997 560.562,271.654 561.13,270.189 561.698,271.11 562.267,268.815 562.835,269.527 563.404,269.204 563.972,267.619 564.54,267.555 565.109,267.066 565.677,266.539 566.245,266.193 566.814,264.714 567.382,264.32 567.95,263.845 568.519,262.537 569.087,260.972 569.655,259.589 570.224,257.366 570.792,257.547 571.36,256.399 571.929,255.326 572.497,256.557 573.065,254.448 573.634,254.458 574.202,253.56 574.77,252.928 575.339,254.041 575.907,251.877 576.476,252 577.044,250.231 577.612,249.403 578.181,247.852 578.749,247.214 579.317,245.277 579.886,245.775 580.454,245.117 581.022,245.647 581.591,246.349 582.159,246.688 582.727,247.24 583.296,245.598 583.864,245.92 584.432,246.281 585.001,244.532 585.569,245.101 586.137,244.482 586.706,245.967 587.274,247.275 587.842,246.471 588.411,249.744 588.979,249.567 589.547,248.551 590.116,245.56 590.684,245.927 591.253,245.141 591.821,247.41 592.389,247.481 592.958,247.817 593.526,245.591 594.094,246.74 594.663,246.905 595.231,248.083 595.799,248.083 596.368,246.973 596.936,245.714 597.504,242.856 598.073,242.192 598.641,241.263 599.209,241.602 599.778,242.05 600.346,241.477 600.914,238.898 601.483,239.303 602.051,239.491 602.619,238.89 603.188,240.566 603.756,240.105 604.325,239.191 604.893,239.406 605.461,238.845 606.03,239.45 606.598,240.896 607.166,244.141 607.735,244.333 608.303,243.328 608.871,241.6 609.44,240.749 610.008,240.938 610.576,242.304 611.145,242.545 611.713,242.847 612.281,241.972 612.85,242.381 613.418,242.407 613.986,241.56 614.555,240.614 615.123,240.745 615.691,238.978 616.26,239.076 616.828,238.148 617.396,238.364 617.965,237.78 618.533,238.103 619.102,237.52 619.67,236.872 620.238,238.347 620.807,238.673 621.375,237.852 621.943,238.17 622.512,238.493 623.08,239.718 623.648,239.8 624.217,239.016 624.785,237.292 625.353,236.875 625.922,237.39 626.49,236.825 627.058,236.326 627.627,235.814 628.195,237.372 628.763,235.474 629.332,237.936 629.9,238.174 630.468,236.498 631.037,240.096 631.605,240.29 632.173,240.149 632.742,240.111 633.31,239.078 633.879,240.105 634.447,241.235 635.015,241.027 635.584,239.855 636.152,239.744 636.72,238.692 637.289,237.648 637.857,238.745 638.425,238.764 638.994,236.757 639.562,235.866 640.13,236.176 640.699,236.373 641.267,237.642 641.835,239.868 642.404,239.038 642.972,241.239 643.54,241.112 644.109,239.869 644.677,240.692 645.245,239.521 645.814,240.308 646.382,239.121 646.951,240.043 647.519,239.867 648.087,239.613 648.656,238.495 649.224,237.305 649.792,236.27 650.361,234.157 650.929,235.394 651.497,235.399 652.066,234.777 652.634,234.14 653.202,234.486 653.771,235.735 654.339,234.826 654.907,234.051 655.476,233.323 656.044,234.684 656.612,232.737 657.181,235.011 657.749,234.042 658.317,234.188 658.886,234.333 659.454,236.768 660.022,237.879 660.591,238.001 661.159,238.855 661.728,237.012 662.296,236.017 662.864,235.779 663.433,233.57 664.001,234.829 664.569,235.859 665.138,235.957 665.706,233.897 666.274,235.229 666.843,235.336 667.411,235.416 667.979,234.396 668.548,230.366 669.116,231.699 669.684,231.147 670.253,232.498 670.821,230.545 671.389,231.953 671.958,231.243 672.526,232.839 673.094,233.119 673.663,235.647 674.231,236.563 674.799,234.548 675.368,235.527 675.936,235.557 676.505,234.356 677.073,232.301 677.641,232.76 678.21,233.049 678.778,233.47 679.346,232.721 679.915,232.109 680.483,232.183 681.051,231.355 681.62,233.851 682.188,231.864 682.756,232.275 683.325,230.656 683.893,232.099 684.461,234.608 685.03,234.602 685.598,233.703 686.166,233.869 686.735,233.041 687.303,235.331 687.871,236.163 688.44,236.296 689.008,236.457 689.577,236.205 690.145,235.062 690.713,235.314 691.282,235.536 691.85,235.74 692.418,234.488 692.987,234.777 693.555,233.892 694.123,235.093 694.692,235.163 695.26,234.289 695.828,230.197 696.397,230.663 696.965,230.986 697.533,231.28 698.102,229.542 698.67,230.93 699.238,231.38 699.807,230.538 700.375,229.962 700.943,230.046 701.512,231.465 702.08,234.669 702.648,234.526 703.217,236.526 703.785,235.278 704.354,236.428 704.922,237.339 705.49,235.241 706.059,237.321 706.627,235.108 707.195,235.226 707.764,237.376 708.332,238.092 708.9,237.815 709.469,237.52 710.037,236.297 710.605,235.76 711.174,234.546 711.742,230.936 712.31,231.055 712.879,232.222 713.447,233.233 714.015,234.361 714.584,235.146 715.152,237.172 715.72,236.877 716.289,235.697 716.857,235.396 717.425,236.296 717.994,234.087 718.562,236.396 719.131,238.374 719.699,238.125 720.267,237.591 720.836,236.342 721.404,235.945 721.972,236.823 722.541,238.709 723.109,240.453 723.677,238.805 724.246,237.354 724.814,234.884 725.382,233.687 725.951,233.48 726.519,233.569 727.087,233.852 727.656,231.526 728.224,230.559 728.792,229.773 729.361,228.766 729.929,228.998 730.497,229.228 731.066,231.368 731.634,229.189 732.203,225.248 732.771,223.635 733.339,223.167 733.908,223.879 734.476,224.508 735.044,225.198 735.613,227.626 736.181,226.146 736.749,226.783 737.318,226.112 737.886,227.49 738.454,227.877 739.023,229.195 739.591,228.629 740.159,228.771 740.728,232.209 741.296,232.296 741.864,232.462 742.433,232.649 743.001,230.872 743.569,232.03 744.138,232.133 744.706,232.178 745.274,234.368 745.843,236.208 746.411,234.089 746.98,235.228 747.548,235.292 748.116,237.218 748.685,236.88 749.253,237.731 749.821,239.416 750.39,238.854 750.958,238.315 751.526,237.732 752.095,237.283 752.663,236.866 753.231,235.474 753.8,234.155 754.368,233.024 754.936,235.061 755.505,234.617 756.073,233.514 756.641,234.5 757.21,234.254 757.778,233.906 758.346,230.736 758.915,227.789 759.483,228.064 760.052,229.467 760.62,230.639 761.188,233.803 761.757,233.53 762.325,234.349 762.893,232.34 763.462,232.266 764.03,232.302 764.598,230.201 765.167,231.205 765.735,231.366 766.303,229.415 766.872,229.653 767.44,229.804 768.008,228.948 768.577,227.105 769.145,226.377 769.713,225.634 770.282,226.194 770.85,227.932 771.418,228.33 771.987,228.811 772.555,230.967 773.123,231.26 773.692,229.311 774.26,229.553 774.829,227.745 775.397,229.918 775.965,229.968 776.534,227.094 777.102,229.678 777.67,229.944 778.239,228.111 778.807,227.311 779.375,225.6 779.944,226.977 780.512,225.44 781.08,228.067 781.649,226.346 782.217,228.763 782.785,230.264 783.354,229.406 783.922,231.669 784.49,229.633 785.059,230.159 785.627,230.351 786.195,232.661 786.764,230.504 787.332,230.883 787.9,231.271 788.469,231.305 789.037,231.336 789.606,229.359 790.174,229.822 790.742,233.353 791.311,234.401 791.879,235.492 792.447,235.313 793.016,233.097 793.584,233.96 794.152,233.877 794.721,233.715 795.289,234.631 795.857,233.491 796.426,235.455 796.994,234.268 797.562,233.054 798.131,233.123 798.699,232.907 799.267,239.989 799.836,241.3 800.404,239.462 800.972,242.172 801.541,240.528 802.109,238.798 802.678,239.335 803.246,239.852 803.814,240.171 804.383,239.556 804.951,241.963 805.519,241.267 806.088,239.262 806.656,235.405 807.224,234.139 807.793,231.632 808.361,232.634 808.929,232.513 809.498,232.377 810.066,233.341 810.634,233.056 811.203,230.77 811.771,230.738 812.339,228.527 812.908,228.283 813.476,227.305 814.044,228.38 814.613,228.56 815.181,228.748 815.749,229.836 816.318,228.95 816.886,229.149 817.455,226.181 818.023,225.454 818.591,225.919 819.16,226.31 819.728,225.494 820.296,225.777 820.865,225.095 821.433,224.654 822.001,225.503 822.57,225.82 823.138,227.188 823.706,226.68 824.275,228.013 824.843,226.235 825.411,225.648 825.98,226.035 826.548,227.351 827.116,229.568 827.685,226.662 828.253,226.964 828.821,228.345 829.39,227.47 829.958,226.808 830.526,227.182 831.095,226.409 831.663,224.65 832.232,226.069 832.8,222.521 833.368,223.035 833.937,225.673 834.505,227.25 835.073,227.657 835.642,227.979 836.21,229.53 836.778,233.024 837.347,234.087 837.915,233.801 838.483,232.609 839.052,233.536 839.62,234.404 840.188,234.288 840.757,234.35 841.325,236.178 841.893,235.694 842.462,234.328 843.03,231.188 843.598,231.622 844.167,231.53 844.735,231.681 845.304,230.801 845.872,230.856 846.44,229.902 847.009,230.823 847.577,231.783 848.145,228.602 848.714,227.901 849.282,227.876 849.85,227.143 850.419,226.56 850.987,225.997 851.555,226.5 852.124,228.869 852.692,230.227 853.26,230.549 853.829,230.684 854.397,227.714 854.965,227.934 855.534,228.287 856.102,229.653 856.67,228.903 857.239,228 857.807,227.453 858.375,227.914 858.944,226.211 859.512,229.032 860.081,228.397 860.649,228.768 861.217,229.082 861.786,231.396 862.354,233.563 862.922,234.581 863.491,235.467 864.059,236.264 864.627,236.287 865.196,234.957 865.764,235.931 866.332,233.614 866.901,232.54 867.469,231.541 868.037,233.862 868.606,234.77 869.174,232.69 869.742,233.682 870.311,234.64 870.879,233.392 871.447,232.471 872.016,232.319 872.584,232.318 873.152,228.981 873.721,228.159 874.289,231.442 874.858,231.35 875.426,230.422 875.994,228.47 876.563,230.649 877.131,230.707 877.699,232.139 878.268,232.289 878.836,231.125 879.404,232.253 879.973,232.462 880.541,230.354 881.109,231.383 881.678,229.698 882.246,230.017 882.814,232.282 883.383,232.346 883.951,232.485 884.519,231.692 885.088,229.774 885.656,229.767 886.224,228.969 886.793,226.993 887.361,228.424 887.93,228.579 888.498,227.099 889.066,227.447 889.635,226.845 890.203,228.355 890.771,228.955 891.34,230.29 891.908,230.606 892.476,231.712 893.045,234.835 893.613,232.741 894.181,232.782 894.75,231.609 895.318,231.597 895.886,231.72 896.455,234.044 897.023,233.828 897.591,232.6 898.16,231.751 898.728,234.152 899.296,234.986 899.865,235.887 900.433,235.688 901.001,236.222 901.57,234.739 902.138,233.458 902.707,234.274 903.275,233.141 903.843,233.141 904.412,235.161 904.98,233.852 905.548,233.658 906.117,233.216 906.685,234.89 907.253,233.598 907.822,233.207 908.39,233.725 908.958,233.223 909.527,234.134 910.095,231.839 910.663,232.634 911.232,233.517 911.8,232.514 912.368,231.354 912.937,233.332 913.505,235.232 914.073,235.052 914.642,236.749 915.21,234.33 915.779,234.008 916.347,234.742 916.915,234.249 917.484,235.874 918.052,234.088 918.62,232.815 919.189,231.67 919.757,230.56 920.325,230.657 920.894,229.336 921.462,227.293 922.03,229.579 922.599,229.827 923.167,229.769 923.735,231.921 924.304,231.826 924.872,232.687 925.44,232.322 926.009,233.079 926.577,234.003 927.145,233.655 927.714,233.459 928.282,234.093 928.85,235.682 929.419,234.328 929.987,232.895 930.556,235.736 931.124,234.146 931.692,230.884 932.261,232.889 932.829,234.511 933.397,231.874 933.966,233.74 934.534,233.294 935.102,232.966 935.671,231.561 936.239,232.268 936.807,231.955 937.376,230.714 937.944,230.728 938.512,230.607 939.081,231.351 939.649,232.344 940.217,229.789 940.786,229.697 941.354,227.719 941.922,226.811 942.491,224.873 943.059,225.016 943.627,225.396 944.196,224.662 944.764,224.912 945.333,228.192 945.901,228.396 946.469,228.7 947.038,229.742 947.606,226.754 948.174,228.141 948.743,228.346 949.311,227.454 949.879,228.811 950.448,228.734 951.016,229.815 951.584,229.913 952.153,228.814 952.721,228.866 953.289,228.789 953.858,229.548 954.426,230.288 954.994,230.365 955.563,229.234 956.131,229.196 956.699,229.362 957.268,229.514 957.836,227.32 958.405,228.414 958.973,228.51 959.541,226.612 960.11,229.051 960.678,229.209 961.246,230.159 961.815,230.24 962.383,230.261 962.951,229.058 963.52,228.092 964.088,227.206 964.656,225.457 965.225,224.892 965.793,228.502 966.361,229.778 966.93,229.589 967.498,229.455 968.066,228.563 968.635,227.78 969.203,226.99 969.771,229.243 970.34,228.335 970.908,227.344 971.476,227.578 972.045,228.925 972.613,227.997 973.182,228.112 973.75,228.421 974.318,229.547 974.887,229.623 975.455,230.722 976.023,234.96 976.592,236.436 977.16,236.982 977.728,237.654 978.297,237.06 978.865,236.608 979.433,234.994 980.002,234.663 980.57,236.416 981.138,234.945 981.707,234.728 982.275,233.525 982.843,233.014 983.412,232.671 983.98,231.466 984.548,232.273 985.117,232.232 985.685,234.928 986.253,235.567 986.822,235.15 987.39,234.781 987.959,234.589 988.527,234.253 989.095,232.875 989.664,231.855 990.232,230.501 990.8,230.221 991.369,229.118 991.937,229.108 992.505,229.267 993.074,229.044 993.642,231.133 994.21,231.041 994.779,230.831 995.347,228.466 995.915,231.693 996.484,232.643 997.052,230.296 997.62,229.472 998.189,228.355 998.757,229.463 999.325,230.368 999.894,230.074 1000.46,230.068 1001.03,229.09 1001.6,229.212 1002.17,228.418 1002.74,226.38 1003.3,224.812 1003.87,226.12 1004.44,224.402 1005.01,224.817 1005.58,226.032 1006.15,227.399 1006.71,227.576 1007.28,226.625 1007.85,226.883 1008.42,227.08 1008.99,231.527 1009.56,230.51 1010.12,232.384 1010.69,234.313 1011.26,233.953 1011.83,232.782 1012.4,231.377 1012.97,232.156 1013.53,231.928 1014.1,231.688 1014.67,230.477 1015.24,229.331 1015.81,227.222 1016.38,228.238 1016.94,228.344 1017.51,231.617 1018.08,231.283 1018.65,231.391 1019.22,231.119 1019.79,230.737 1020.35,230.831 1020.92,230.691 1021.49,230.535 1022.06,230.548 1022.63,229.613 1023.2,230.528 1023.76,230.552 1024.33,230.677 1024.9,229.738 1025.47,229.63 1026.04,229.558 1026.61,228.465 1027.17,228.743 1027.74,228.774 1028.31,228.887 1028.88,229.918 1029.45,227.813 1030.02,228.131 1030.58,228.446 1031.15,230.583 1031.72,229.593 1032.29,229.505 1032.86,229.592 1033.43,229.538 1033.99,230.711 1034.56,228.712 1035.13,229.03 1035.7,229.101 1036.27,232.237 1036.84,230.203 1037.4,232.408 1037.97,231.158 1038.54,227.831 1039.11,227.771 1039.68,228.191 1040.25,226.476 1040.81,226.813 1041.38,226.338 1041.95,226.577 1042.52,225.723 1043.09,225.122 1043.66,225.614 1044.22,228.087 1044.79,227.231 1045.36,229.491 1045.93,229.595 1046.5,228.524 1047.07,229.545 1047.63,229.777 1048.2,230.121 1048.77,228.042 1049.34,227.256 1049.91,229.68 1050.48,228.828 1051.05,229.083 1051.61,229.261 1052.18,227.425 1052.75,226.789 1053.32,226.098 1053.89,224.883 1054.46,226.597 1055.02,225.835 1055.59,226.227 1056.16,228.741 1056.73,229.106 1057.3,228.223 1057.87,231.579 1058.43,231.891 1059,230.037 1059.57,231.219 1060.14,232.151 1060.71,232.072 1061.28,233.068 1061.84,232.854 1062.41,231.924 1062.98,232.977 1063.55,231.783 1064.12,232.879 1064.69,230.803 1065.25,228.946 1065.82,227.959 1066.39,231.171 1066.96,232.095 1067.53,231.156 1068.1,232.265 1068.66,231.308 1069.23,231.217 1069.8,232.194 1070.37,233.027 1070.94,235.032 1071.51,233.639 1072.07,233.554 1072.64,233.542 1073.21,232.285 1073.78,231.226 1074.35,231.163 1074.92,231.005 1075.48,230.836 1076.05,232.828 1076.62,228.544 1077.19,228.827 1077.76,230.133 1078.33,231.434 1078.89,231.533 1079.46,231.293 1080.03,233.324 1080.6,233.149 1081.17,232.758 1081.74,231.533 1082.3,231.492 1082.87,230.184 1083.44,229.37 1084.01,228.668 1084.58,224.832 1085.15,226.487 1085.71,224.902 1086.28,226.436 1086.85,226.868 1087.42,228.15 1087.99,227.209 1088.56,227.444 1089.12,229.812 1089.69,227.958 1090.26,230.298 1090.83,232.464 1091.4,231.423 1091.97,232.446 1092.53,230.322 1093.1,231.333 1093.67,234.332 1094.24,234.144 1094.81,235.212 1095.38,235.122 1095.94,234.883 1096.51,234.427 1097.08,235.964 1097.65,238.545 1098.22,239.244 1098.79,236.566 1099.35,236.185 1099.92,235.838 1100.49,235.313 1101.06,235.695 1101.63,233.345 1102.2,231.906 1102.76,230.649 1103.33,230.612 1103.9,230.596 1104.47,230.453 1105.04,229.328 1105.61,229.215 1106.17,230.411 1106.74,233.499 1107.31,232.246 1107.88,233.079 1108.45,233.953 1109.02,235.685 1109.58,236.261 1110.15,234.525 1110.72,230.068 1111.29,230.845 1111.86,231.727 1112.43,230.536 1112.99,230.474 1113.56,230.415 1114.13,230.036 1114.7,229.805 1115.27,232.702 1115.84,230.211 1116.4,228.309 1116.97,227.363 1117.54,229.525 1118.11,231.617 1118.68,232.462 1119.25,228.114 1119.81,228.301 1120.38,228.396 1120.95,228.481 1121.52,229.626 1122.09,230.771 1122.66,229.425 1123.23,230.137 1123.79,228.962 1124.36,229.965 1124.93,229.975 1125.5,229.805 1126.07,231.748 1126.64,231.663 1127.2,231.459 1127.77,230.226 1128.34,231.257 1128.91,232.055 1129.48,231.704 1130.05,231.823 1130.61,230.616 1131.18,230.479 1131.75,230.346 1132.32,231.405 1132.89,233.41 1133.46,232.974 1134.02,232.642 1134.59,230.334 1135.16,225.073 1135.73,226.168 1136.3,226.521 1136.87,227.521 1137.43,229.899 1138,230.022 1138.57,230.014 1139.14,229.926 1139.71,230.071 1140.28,230.799 1140.84,232.621 1141.41,232.364 1141.98,230.045 1142.55,228.915 1143.12,228.888 1143.69,226.833 1144.25,226.898 1144.82,226.141 1145.39,225.619 1145.96,226.939 1146.53,227.317 1147.1,228.31 1147.66,227.347 1148.23,228.425 1148.8,228.572 1149.37,229.734 1149.94,229.762 1150.51,226.908 1151.07,228.335 1151.64,227.487 1152.21,227.726 1152.78,226.817 1153.35,226.952 1153.92,226.07 1154.48,225.47 1155.05,223.864 1155.62,224.475 1156.19,223.659 1156.76,224.411 1157.33,225.921 1157.89,224.177 1158.46,223.506 1159.03,224.176 1159.6,222.515 1160.17,225.172 1160.74,225.696 1161.3,224.215 1161.87,224.706 1162.44,227.355 1163.01,227.682 1163.58,226.947 1164.15,226.207 1164.71,226.567 1165.28,224.835 1165.85,227.424 1166.42,227.731 1166.99,228.136 1167.56,228.426 1168.12,228.657 1168.69,230.197 1169.26,230.407 1169.83,229.598 1170.4,228.777 1170.97,229.124 1171.53,227.166 1172.1,227.765 1172.67,228.045 1173.24,228.219 1173.81,230.57 1174.38,233.782 1174.94,233.572 1175.51,235.453 1176.08,236.11 1176.65,236.742 1177.22,237.45 1177.79,239.012 1178.35,238.614 1178.92,237.233 1179.49,238.881 1180.06,238.726 1180.63,239.294 1181.2,238.68 1181.76,238.285 1182.33,238.912 1182.9,239.277 1183.47,235.718 1184.04,234.412 1184.61,234.304 1185.17,231.957 1185.74,230.786 1186.31,230.85 1186.88,228.963 1187.45,228.994 1188.02,228.207 1188.58,229.279 1189.15,228.18 1189.72,228.202 1190.29,226.33 1190.86,228.715 1191.43,230.104 1192,231 1192.56,231.889 1193.13,230.826 1193.7,230.807 1194.27,232.852 1194.84,233.6 1195.41,235.445 1195.97,234.196 1196.54,237.029 1197.11,237.632 1197.68,238.154 1198.25,236.497 1198.82,235.015 1199.38,236.674 1199.95,236.062 1200.52,235.419 1201.09,237.13 1201.66,235.243 1202.23,235.741 1202.79,235.269 1203.36,234.954 1203.93,235.665 1204.5,235.161 1205.07,233.678 1205.64,233.65 1206.2,233.27 1206.77,231.023 1207.34,232.065 1207.91,228.749 1208.48,230.004 1209.05,225.86 1209.61,225.094 1210.18,228.46 1210.75,227.298 1211.32,227.457 1211.89,227.653 1212.46,228.769 1213.02,230.813 1213.59,230.873 1214.16,231.964 1214.73,232.795 1215.3,233.523 1215.87,233.325 1216.43,232.221 1217,232.16 1217.57,229.669 1218.14,230.486 1218.71,231.392 1219.28,228.967 1219.84,230.004 1220.41,228.631 1220.98,228.926 1221.55,229.799 1222.12,228.687 1222.69,229.387 1223.25,230.204 1223.82,230.381 1224.39,230.526 1224.96,230.468 1225.53,230.232 1226.1,230.11 1226.66,228.098 1227.23,229.283 1227.8,229.353 1228.37,228.369 1228.94,228.405 1229.51,226.232 1230.07,227.531 1230.64,227.313 1231.21,227.441 1231.78,226.54 1232.35,224.732 1232.92,222.868 1233.48,223.25 1234.05,223.549 1234.62,219.895 1235.19,221.548 1235.76,224.399 1236.33,221.426 1236.89,221.997 1237.46,222.573 1238.03,223.284 1238.6,224.736 1239.17,223.058 1239.74,223.69 1240.3,223.018 1240.87,223.649 1241.44,226.126 1242.01,226.463 1242.58,224.746 1243.15,224.375 1243.71,225.883 1244.28,226.397 1244.85,225.687 1245.42,227.942 1245.99,227.394 1246.56,229.706 1247.12,227.741 1247.69,227.767 1248.26,229.243 1248.83,229.439 1249.4,229.575 1249.97,230.375 1250.53,230.546 1251.1,229.797 1251.67,229.194 1252.24,229.65 1252.81,230.871 1253.38,228.93 1253.94,228.048 1254.51,228.103 1255.08,228.248 1255.65,229.383 1256.22,228.308 1256.79,229.6 1257.35,228.932 1257.92,229.218 1258.49,229.136 1259.06,228.392 1259.63,228.422 1260.2,229.554 1260.76,227.827 1261.33,227.109 1261.9,226.45 1262.47,226.087 1263.04,226.507 1263.61,228.783 1264.18,230.928 1264.74,231.235 1265.31,232.466 1265.88,232.454 1266.45,232.565 1267.02,233.545 1267.59,232.425 1268.15,231.295 1268.72,235.31 1269.29,234.237 1269.86,231.973 1270.43,231.825 1271,231.868 1271.56,230.648 1272.13,231.878 1272.7,231.977 1273.27,232.816 1273.84,232.553 1274.41,233.301 1274.97,235.177 1275.54,234.24 1276.11,232.944 1276.68,234.792 1277.25,234.532 1277.82,234.511 1278.38,234.128 1278.95,234.934 1279.52,235.666 1280.09,234.277 1280.66,233.977 1281.23,231.793 1281.79,231.653 1282.36,231.568 1282.93,231.627 1283.5,233.513 1284.07,233.207 1284.64,233.018 1285.2,231.929 1285.77,232.174 1286.34,233.033 1286.91,232.758 1287.48,232.481 1288.05,233.439 1288.61,232.345 1289.18,232.951 1289.75,232.992 1290.32,231.925 1290.89,230.854 1291.46,228.743 1292.02,229.676 1292.59,227.639 1293.16,226.907 1293.73,227.352 1294.3,226.485 1294.87,227.951 1295.43,229.035 1296,230.106 1296.57,230.252 1297.14,232.425 1297.71,231.275 1298.28,230.42 1298.84,226.431 1299.41,226.633 1299.98,228.008 1300.55,228.161 1301.12,230.357 1301.69,232.273 1302.25,232.092 1302.82,229.856 1303.39,231.051 1303.96,229.754 1304.53,227.689 1305.1,228.876 1305.66,229.109 1306.23,227.259 1306.8,226.253 1307.37,224.561 1307.94,227.398 1308.51,224.529 1309.07,223.037 1309.64,226.743 1310.21,229.152 1310.78,229.148 1311.35,233.25 1311.92,234.047 1312.48,236.956 1313.05,235.531 1313.62,235.014 1314.19,234.601 1314.76,234.234 1315.33,232.091 1315.89,231.934 1316.46,231.656 1317.03,233.513 1317.6,234.276 1318.17,235.959 1318.74,235.653 1319.3,234.013 1319.87,233.713 1320.44,234.431 1321.01,234.385 1321.58,233.956 1322.15,234.852 1322.71,235.385 1323.28,231.938 1323.85,231.662 1324.42,231.526 1324.99,230.509 1325.56,232.581 1326.12,232.241 1326.69,232.115 1327.26,233.762 1327.83,232.698 1328.4,231.473 1328.97,231.484 1329.53,231.178 1330.1,232.136 1330.67,232.917 1331.24,233.761 1331.81,233.551 1332.38,234.469 1332.94,234.07 1333.51,234.922 1334.08,236.502 1334.65,233.841 1335.22,235.704 1335.79,235.207 1336.36,233.957 1336.92,233.642 1337.49,232.236 1338.06,230.96 1338.63,232.806 1339.2,231.57 1339.77,232.517 1340.33,232.118 1340.9,230.706 1341.47,230.606 1342.04,229.475 1342.61,230.387 1343.18,232.32 1343.74,230.924 1344.31,232.764 1344.88,232.504 1345.45,231.995 1346.02,233.804 1346.59,232.378 1347.15,233.187 1347.72,232.696 1348.29,228.434 1348.86,228.458 1349.43,230.404 1350,228.151 1350.56,228.03 1351.13,227.843 1351.7,228.925 1352.27,228.875 1352.84,228.849 1353.41,227.932 1353.97,228.027 1354.54,229.382 1355.11,228.344 1355.68,228.524 1356.25,228.441 1356.82,228.721 1357.38,228.747 1357.95,228.805 1358.52,227.763 1359.09,226.743 1359.66,227.956 1360.23,227.071 1360.79,228.187 1361.36,229.36 1361.93,229.382 1362.5,230.364 1363.07,228.194 1363.64,228.41 1364.2,230.488 1364.77,230.549 1365.34,232.738 1365.91,231.621 1366.48,231.513 1367.05,232.617 1367.61,235.323 1368.18,234.662 1368.75,235.356 1369.32,234.748 1369.89,233.251 1370.46,231.879 1371.02,232.505 1371.59,232.127 1372.16,233.687 1372.73,231.326 1373.3,232.173 1373.87,231.938 1374.43,232.699 1375,232.482 1375.57,233.283 1376.14,230.915 1376.71,230.61 1377.28,231.632 1377.84,232.301 1378.41,231.891 1378.98,231.651 1379.55,231.355 1380.12,229.957 1380.69,229.086 1381.25,229.932 1381.82,230.165 1382.39,230.11 1382.96,227.005 1383.53,226.368 1384.1,225.411 1384.66,221.617 1385.23,220.146 1385.8,220.881 1386.37,221.364 1386.94,219.922 1387.51,220.392 1388.07,220.811 1388.64,222.259 1389.21,222.664 1389.78,223.181 1390.35,224.617 1390.92,222.173 1391.48,221.538 1392.05,223.57 1392.62,221.893 1393.19,222.454 1393.76,221.927 1394.33,222.554 1394.89,224.2 1395.46,222.56 1396.03,223.056 1396.6,221.858 1397.17,223.416 1397.74,222.998 1398.3,222.548 1398.87,223.303 1399.44,223.783 1400.01,225.51 1400.58,224.828 1401.15,228.208 1401.71,230.642 1402.28,229.891 1402.85,231.338 1403.42,234.455 1403.99,234.313 1404.56,233.743 1405.13,233.539 1405.69,232.372 1406.26,234.422 1406.83,234.32 1407.4,233.162 1407.97,233.12 1408.54,231.836 1409.1,232.853 1409.67,232.824 1410.24,229.602 1410.81,229.425 1411.38,229.45 1411.95,231.429 1412.51,233.541 1413.08,234.451 1413.65,233.003 1414.22,231.734 1414.79,232.522 1415.36,232.185 1415.92,232.234 1416.49,232.151 1417.06,230.885 1417.63,232.042 1418.2,229.092 1418.77,230.385 1419.33,231.381 1419.9,230.495 1420.47,229.564 1421.04,229.313 1421.61,230.464 1422.18,231.415 1422.74,229.499 1423.31,229.785 1423.88,229.88 1424.45,230.905 1425.02,230.623 1425.59,230.651 1426.15,230.615 1426.72,229.561 1427.29,230.584 1427.86,227.31 1428.43,227.69 1429,229.765 1429.56,230.144 1430.13,233.415 1430.7,234.412 1431.27,236.132 1431.84,235.787 1432.41,235.19 1432.97,230.74 1433.54,230.809 1434.11,230.744 1434.68,228.635 1435.25,228.901 1435.82,229.955 1436.38,231.049 1436.95,230.829 1437.52,230.683 1438.09,229.584 1438.66,227.544 1439.23,227.806 1439.79,229.052 1440.36,229.375 1440.93,229.392 1441.5,231.394 1442.07,231.29 1442.64,233.449 1443.2,232.36 1443.77,232.253 1444.34,230.277 1444.91,232.624 1445.48,233.517 1446.05,233.268 1446.61,231.923 1447.18,230.584 1447.75,229.467 1448.32,230.394 1448.89,229.587 1449.46,228.587 1450.02,228.641 1450.59,228.858 1451.16,230.034 1451.73,229.119 1452.3,230.161 1452.87,230.229 1453.43,231.176 1454,234.115 1454.57,232.854 1455.14,233.521 1455.71,231.276 1456.28,230.168 1456.84,231.286 1457.41,231.072 1457.98,230.832 1458.55,231.601 1459.12,232.537 1459.69,233.227 1460.25,233.976 1460.82,233.579 1461.39,234.359 1461.96,234.234 1462.53,234.958 1463.1,234.559 1463.66,233.248 1464.23,232.873 1464.8,233.796 1465.37,233.44 1465.94,231.135 1466.51,231.147 1467.07,233.019 1467.64,231.498 1468.21,230.237 1468.78,230.302 1469.35,230.088 1469.92,228.102 1470.48,231.271 1471.05,230.844 1471.62,230.633 1472.19,228.638 1472.76,226.648 1473.33,223.903 1473.89,225.349 1474.46,226.816 1475.03,228.016 1475.6,230.064 1476.17,232.084 1476.74,229.685 1477.31,230.745 1477.87,227.619 1478.44,226.925 1479.01,226.011 1479.58,227.172 1480.15,228.526 1480.72,229.665 1481.28,228.696 1481.85,228.772 1482.42,227.869 1482.99,225.924 1483.56,226.34 1484.13,227.743 1484.69,228.849 1485.26,228.831 1485.83,230.021 1486.4,231.254 1486.97,232.133 1487.54,233.007 1488.1,233.744 1488.67,234.536 1489.24,233.228 1489.81,230.855 1490.38,228.842 1490.95,229.022 1491.51,229.03 1492.08,227.991 1492.65,227.152 1493.22,228.23 1493.79,227.264 1494.36,224.1 1494.92,226.351 1495.49,229.558 1496.06,231.541 1496.63,231.568 1497.2,233.862 1497.77,235.882 1498.33,235.403 1498.9,235.066 1499.47,233.579 1500.04,236.347 1500.61,234.016 1501.18,232.688 1501.74,233.408 1502.31,234.248 1502.88,236.85 1503.45,233.508 1504.02,231.175 1504.59,229.064 1505.15,229.074 1505.72,228.169 1506.29,228.577 1506.86,227.461 1507.43,227.715 1508,226.712 1508.56,227.915 1509.13,228.056 1509.7,228.273 1510.27,232.494 1510.84,231.124 1511.41,229.845 1511.97,229.841 1512.54,230.772 1513.11,230.712 1513.68,229.766 1514.25,229.869 1514.82,227.984 1515.38,225.161 1515.95,226.481 1516.52,226.825 1517.09,226.014 1517.66,227.587 1518.23,227.855 1518.79,225.956 1519.36,226.301 1519.93,225.441 1520.5,225.69 1521.07,227.003 1521.64,228.555 1522.2,227.812 1522.77,227.731 1523.34,227.914 1523.91,229.193 1524.48,229.304 1525.05,228.377 1525.61,228.456 1526.18,227.733 1526.75,226.92 1527.32,226.24 1527.89,225.762 1528.46,224.98 1529.02,223.074 1529.59,224.621 1530.16,225.086 1530.73,227.689 1531.3,228.128 1531.87,228.261 1532.43,228.41 1533,228.385 1533.57,227.426 1534.14,228.81 1534.71,230.028 1535.28,232.063 1535.84,230.018 1536.41,229.202 1536.98,227.179 1537.55,226.454 1538.12,226.846 1538.69,227.174 1539.25,228.422 1539.82,229.648 1540.39,230.75 1540.96,230.87 1541.53,231.013 1542.1,231.233 1542.66,233.193 1543.23,234.212 1543.8,235.273 1544.37,235.915 1544.94,234.565 1545.51,234.583 1546.08,234.261 1546.64,234.977 1547.21,234.514 1547.78,234.1 1548.35,234.98 1548.92,237.731 1549.49,236.968 1550.05,237.502 1550.62,236.886 1551.19,236.37 1551.76,235.842 1552.33,235.43 1552.9,235.803 1553.46,234.414 1554.03,238.108 1554.6,237.464 1555.17,236.838 1555.74,235.41 1556.31,234.015 1556.87,234.494 1557.44,233.408 1558.01,233.05 1558.58,232.877 1559.15,231.616 1559.72,231.501 1560.28,230.224 1560.85,230.177 1561.42,230.126 1561.99,228.012 1562.56,228.199 1563.13,228.317 1563.69,228.468 1564.26,229.829 1564.83,228.058 1565.4,229.323 1565.97,230.676 1566.54,227.438 1567.1,227.384 1567.67,228.293 1568.24,226.443 1568.81,225.778 1569.38,226.054 1569.95,226.214 1570.51,225.515 1571.08,227.747 1571.65,229.947 1572.22,227.567 1572.79,225.759 1573.36,226.209 1573.92,225.498 1574.49,224.928 1575.06,225.343 1575.63,223.594 1576.2,226.192 1576.77,226.515 1577.33,225.727 1577.9,226.063 1578.47,226.494 1579.04,227.927 1579.61,228.05 1580.18,228.361 1580.74,229.67 1581.31,230.661 1581.88,232.935 1582.45,231.792 1583.02,232.753 1583.59,231.79 1584.15,232.803 1584.72,232.67 1585.29,233.573 1585.86,235.447 1586.43,234.154 1587,234.062 1587.56,233.834 1588.13,236.668 1588.7,236.071 1589.27,235.762 1589.84,234.371 1590.41,233.397 1590.97,233.263 1591.54,230.03 1592.11,229.987 1592.68,229.954 1593.25,226.024 1593.82,225.418 1594.38,224.695 1594.95,227.176 1595.52,226.282 1596.09,227.414 1596.66,228.772 1597.23,229.938 1597.79,230.184 1598.36,232.237 1598.93,230.12 1599.5,227.977 1600.07,227.065 1600.64,228.254 1601.2,229.688 1601.77,229.828 1602.34,230.8 1602.91,235.011 1603.48,236.072 1604.05,234.72 1604.61,237.583 1605.18,237.298 1605.75,233.584 1606.32,233.636 1606.89,234.241 1607.46,231.923 1608.02,233.035 1608.59,231.659 1609.16,231.66 1609.73,230.4 1610.3,231.114 1610.87,231.895 1611.43,233.015 1612,233.996 1612.57,232.56 1613.14,231.315 1613.71,232.231 1614.28,234.352 1614.84,234.015 1615.41,232.654 1615.98,233.561 1616.55,232.291 1617.12,229.925 1617.69,229.1 1618.26,228.143 1618.82,227.224 1619.39,227.49 1619.96,229.527 1620.53,230.429 1621.1,229.344 1621.67,229.69 1622.23,228.582 1622.8,230.795 1623.37,232.739 1623.94,233.757 1624.51,233.533 1625.08,232.146 1625.64,234.131 1626.21,233.874 1626.78,234.383 1627.35,234.111 1627.92,232.587 1628.49,232.43 1629.05,233.319 1629.62,234.117 1630.19,230.876 1630.76,227.778 1631.33,229.836 1631.9,227.771 1632.46,227.988 1633.03,229.353 1633.6,229.293 1634.17,229.319 1634.74,228.092 1635.31,228.144 1635.87,225.949 1636.44,225.387 1637.01,225.513 1637.58,228.685 1638.15,227.755 1638.72,228.869 1639.28,225.974 1639.85,224.103 1640.42,224.183 1640.99,226.654 1641.56,224.669 1642.13,225.949 1642.69,227.267 1643.26,228.224 1643.83,229.479 1644.4,228.497 1644.97,225.521 1645.54,223.919 1646.1,225.419 1646.67,224.526 1647.24,221.715 1647.81,224.4 1648.38,225.698 1648.95,228.956 1649.51,230.097 1650.08,233.092 1650.65,232.812 1651.22,230.526 1651.79,230.724 1652.36,232.668 1652.92,232.451 1653.49,234.343 1654.06,234.229 1654.63,234.052 1655.2,232.838 1655.77,230.514 1656.33,231.523 1656.9,232.315 1657.47,231.346 1658.04,232.441 1658.61,229.111 1659.18,231.224 1659.74,231.196 1660.31,229.032 1660.88,229.069 1661.45,230.167 1662.02,230.318 1662.59,229.326 1663.15,228.326 1663.72,229.302 1664.29,229.264 1664.86,228.145 1665.43,227.199 1666,227.29 1666.56,227.548 1667.13,227.61 1667.7,227.936 1668.27,229.097 1668.84,229.129 1669.41,230.047 1669.97,229.936 1670.54,230.167 1671.11,230.3 1671.68,229.36 1672.25,227.43 1672.82,227.642 1673.38,229.829 1673.95,234.108 1674.52,233.739 1675.09,233.484 1675.66,235.339 1676.23,232.872 1676.79,231.633 1677.36,234.399 1677.93,233.34 1678.5,233.04 1679.07,231.753 1679.64,230.545 1680.2,228.29 1680.77,230.138 1681.34,230.087 1681.91,231.246 1682.48,232.114 1683.05,230.809 1683.61,229.64 1684.18,229.516 1684.75,229.484 1685.32,229.44 1685.89,229.585 1686.46,231.761 1687.02,230.542 1687.59,228.446 1688.16,228.477 1688.73,229.807 1689.3,230.055 1689.87,228.934 1690.44,227.834 1691,229.017 1691.57,227.745 1692.14,226.922 1692.71,230.296 1693.28,230.396 1693.85,230.424 1694.41,229.539 1694.98,231.496 1695.55,229.515 1696.12,227.545 1696.69,227.481 1697.26,227.97 1697.82,228.302 1698.39,231.676 1698.96,232.241 1699.53,228.95 1700.1,226.763 1700.67,230.173 1701.23,229.945 1701.8,229.767 1702.37,229.645 1702.94,229.606 1703.51,228.695 1704.08,227.729 1704.64,227.873 1705.21,228.072 1705.78,227.237 1706.35,228.467 1706.92,228.552 1707.49,229.513 1708.05,228.777 1708.62,230.818 1709.19,230.959 1709.76,231.117 1710.33,231.146 1710.9,233.022 1711.46,233.994 1712.03,232.738 1712.6,233.626 1713.17,234.375 1713.74,235.017 1714.31,233.599 1714.87,232.138 1715.44,231.933 1716.01,230.763 1716.58,230.785 1717.15,231.655 1717.72,231.446 1718.28,230.199 1718.85,233.463 1719.42,234.268 1719.99,234.953 1720.56,235.439 1721.13,234.227 1721.69,231.947 1722.26,235.432 1722.83,234.72 1723.4,233.418 1723.97,234.264 1724.54,232.97 1725.1,233.792 1725.67,233.335 1726.24,232.984 1726.81,229.756 1727.38,228.68 1727.95,228.7 1728.51,228.867 1729.08,228.898 1729.65,229.643 1730.22,231.731 1730.79,230.423 1731.36,229.55 1731.92,232.79 1732.49,234.745 1733.06,237.508 1733.63,238.008 1734.2,237.299 1734.77,234.525 1735.33,234.157 1735.9,233.722 1736.47,233.178 1737.04,233.055 1737.61,232.783 1738.18,232.746 1738.74,232.443 1739.31,232.042 1739.88,230.753 1740.45,232.771 1741.02,231.551 1741.59,231.379 1742.15,232.094 1742.72,229.805 1743.29,229.504 1743.86,231.528 1744.43,230.228 1745,231.345 1745.56,228.911 1746.13,225.975 1746.7,227.318 1747.27,227.381 1747.84,227.342 1748.41,226.261 1748.97,225.31 1749.54,226.526 1750.11,226.456 1750.68,226.527 1751.25,227.545 1751.82,225.415 1752.38,228.657 1752.95,226.884 1753.52,227.143 1754.09,227.232 1754.66,229.238 1755.23,228.226 1755.79,226.125 1756.36,225.234 1756.93,225.49 1757.5,226.597 1758.07,226.65 1758.64,226.788 1759.21,227.091 1759.77,227.357 1760.34,226.497 1760.91,224.778 1761.48,223.248 1762.05,222.539 1762.62,225.207 1763.18,225.598 1763.75,226.1 1764.32,225.453 1764.89,225.873 1765.46,227.141 1766.03,226.468 1766.59,227.89 1767.16,229.035 1767.73,229.95 1768.3,230.202 1768.87,230.243 1769.44,227.185 1770,227.579 1770.57,227.627 1771.14,226.907 1771.71,229.3 1772.28,230.457 1772.85,231.558 1773.41,232.369 1773.98,229.118 1774.55,228.311 1775.12,227.615 1775.69,226.849 1776.26,228.246 1776.82,227.606 1777.39,228.045 1777.96,228.261 1778.53,228.626 1779.1,227.883 1779.67,225.001 1780.23,225.528 1780.8,225.991 1781.37,226.389 1781.94,226.656 1782.51,226.981 1783.08,226.301 1783.64,227.866 1784.21,226.096 1784.78,226.468 1785.35,229.069 1785.92,229.089 1786.49,230.418 1787.05,229.52 1787.62,230.414 1788.19,230.678 1788.76,230.762 1789.33,230.941 1789.9,231.754 1790.46,231.841 1791.03,233.767 1791.6,233.673 1792.17,233.453 1792.74,234.523 1793.31,235.526 1793.87,234.306 1794.44,235.144 1795.01,235.686 1795.58,237.348 1796.15,236.705 1796.72,236.491 1797.28,235.852 1797.85,233.468 1798.42,233.094 1798.99,233.999 1799.56,231.483 1800.13,230.328 1800.69,230.549 1801.26,229.489 1801.83,230.236 1802.4,229.203 1802.97,229.386 1803.54,229.637 1804.1,230.717 1804.67,229.86 1805.24,231.863 1805.81,230.855 1806.38,232.991 1806.95,233.995 1807.51,233.636 1808.08,232.353 1808.65,232.447 1809.22,231.419 1809.79,232.289 1810.36,231.131 1810.92,230.073 1811.49,231.046 1812.06,228.717 1812.63,228.912 1813.2,227.893 1813.77,230.096 1814.33,230.255 1814.9,229.412 1815.47,229.606 1816.04,227.883 1816.61,231.129 1817.18,230.253 1817.74,232.252 1818.31,233.034 1818.88,232.749 1819.45,231.52 1820.02,233.452 1820.59,232.157 1821.15,230.979 1821.72,231.979 1822.29,230.683 1822.86,230.639 1823.43,228.706 1824,228.627 1824.56,229.828 1825.13,233.005 1825.7,232.614 1826.27,232.458 1826.84,231.15 1827.41,231.906 1827.97,232.82 1828.54,235.644 1829.11,236.301 1829.68,234.911 1830.25,233.549 1830.82,234.256 1831.39,233.739 1831.95,233.441 1832.52,230.963 1833.09,231.098 1833.66,229.187 1834.23,229.232 1834.8,230.29 1835.36,227.157 1835.93,224.011 1836.5,221.527 1837.07,224.457 1837.64,223.9 1838.21,224.389 1838.77,221.726 1839.34,221.377 1839.91,221.248 1840.48,221.001 1841.05,221.722 1841.62,221.284 1842.18,222.629 1842.75,223.105 1843.32,223.373 1843.89,224.992 1844.46,226.468 1845.03,225.834 1845.59,227.28 1846.16,228.447 1846.73,226.39 1847.3,225.785 1847.87,229.21 1848.44,230.21 1849,231.317 1849.57,232.245 1850.14,231.18 1850.71,230.404 1851.28,231.438 1851.85,231.399 1852.41,230.312 1852.98,231.338 1853.55,231.324 1854.12,231.449 1854.69,231.443 1855.26,232.28 1855.82,232.284 1856.39,233.145 1856.96,233.083 1857.53,230.892 1858.1,231.151 1858.67,231.126 1859.23,230.036 1859.8,229.115 1860.37,231.215 1860.94,232.199 1861.51,232.315 1862.08,234.191 1862.64,234.171 1863.21,234.096 1863.78,233.842 1864.35,234.889 1864.92,234.674 1865.49,233.444 1866.05,234.119 1866.62,233.698 1867.19,232.508 1867.76,234.368 1868.33,235.098 1868.9,234.841 1869.46,233.615 1870.03,232.528 1870.6,232.453 1871.17,232.287 1871.74,232.093 1872.31,233.982 1872.87,232.488 1873.44,231.289 1874.01,233.064 1874.58,233.7 1875.15,234.359 1875.72,231.942 1876.28,230.659 1876.85,231.645 1877.42,230.604 1877.99,230.637 1878.56,228.538 1879.13,231.679 1879.69,231.463 1880.26,231.392 1880.83,230.35 1881.4,231.277 1881.97,231.148 1882.54,231.118 1883.1,230.864 1883.67,230.602 1884.24,230.63 1884.81,229.541 1885.38,230.708 1885.95,230.618 1886.51,230.694 1887.08,229.505 1887.65,229.798 1888.22,231.902 1888.79,232.841 1889.36,234.67 1889.92,236.48 1890.49,237.179 1891.06,235.656 1891.63,234.907 1892.2,235.381 1892.77,231.707 1893.33,231.62 1893.9,232.459 1894.47,231.151 1895.04,232.118 1895.61,233.951 1896.18,231.2 1896.74,231.855 1897.31,231.493 1897.88,232.272 1898.45,232.021 1899.02,233.821 1899.59,233.4 1900.16,231.983 1900.72,229.834 1901.29,229.784 1901.86,228.553 1902.43,229.29 1903,230.263 1903.57,231.406 1904.13,228.02 1904.7,229.262 1905.27,228.136 1905.84,230.386 1906.41,230.329 1906.98,227.994 1907.54,229.115 1908.11,229.005 1908.68,228.194 1909.25,228.28 1909.82,227.258 1910.39,227.328 1910.95,226.529 1911.52,226.714 1912.09,227.87 1912.66,229.249 1913.23,227.944 1913.8,227.139 1914.36,229.368 1914.93,229.576 1915.5,226.543 1916.07,226.751 1916.64,224.76 1917.21,223.161 1917.77,221.648 1918.34,219.979 1918.91,221.88 1919.48,223.674 1920.05,224.051 1920.62,225.509 1921.18,224.717 1921.75,225.274 1922.32,226.783 1922.89,230.183 1923.46,229.205 1924.03,228.285 1924.59,228.498 1925.16,230.472 1925.73,229.668 1926.3,228.711 1926.87,228.81 1927.44,231.238 1928,231.297 1928.57,229.15 1929.14,228.248 1929.71,227.49 1930.28,228.699 1930.85,227.8 1931.41,229.148 1931.98,229.216 1932.55,231.308 1933.12,230.226 1933.69,230.668 1934.26,228.809 1934.82,228.987 1935.39,229.017 1935.96,231.369 1936.53,230.114 1937.1,233.186 1937.67,229.832 1938.23,230.99 1938.8,228.916 1939.37,229.252 1939.94,232.535 1940.51,231.281 1941.08,233.075 1941.64,236.117 1942.21,235.492 1942.78,234.067 1943.35,234.899 1943.92,232.379 1944.49,233.307 1945.05,232.067 1945.62,230.888 1946.19,228.963 1946.76,229.176 1947.33,228.375 1947.9,226.54 1948.46,227.687 1949.03,229.997 1949.6,230.227 1950.17,231.225 1950.74,232.33 1951.31,232.114 1951.87,231.075 1952.44,233.259 1953.01,234.039 1953.58,232.676 1954.15,231.494 1954.72,232.507 1955.28,231.611 1955.85,231.425 1956.42,233.401 1956.99,233.244 1957.56,232.877 1958.13,233.695 1958.69,234.584 1959.26,234.215 1959.83,232.615 1960.4,231.443 1960.97,231.581 1961.54,231.357 1962.1,229.255 1962.67,230.24 1963.24,231.23 1963.81,231.172 1964.38,230.091 1964.95,230.105 1965.51,228.819 1966.08,226.823 1966.65,227.079 1967.22,227.027 1967.79,229.329 1968.36,230.367 1968.92,223.956 1969.49,223.196 1970.06,224.756 1970.63,226.157 1971.2,224.449 1971.77,223.697 1972.34,223.209 1972.9,224.832 1973.47,225.352 1974.04,226.777 1974.61,228.21 1975.18,227.427 1975.75,228.518 1976.31,228.604 1976.88,228.818 1977.45,229.064 1978.02,230.193 1978.59,226.898 1979.16,228.217 1979.72,230.498 1980.29,230.536 1980.86,230.508 1981.43,231.382 1982,231.244 1982.57,232.3 1983.13,232.326 1983.7,230.928 1984.27,228.913 1984.84,227.947 1985.41,228.153 1985.98,229.616 1986.54,230.839 1987.11,230.739 1987.68,230.628 1988.25,232.726 1988.82,230.524 1989.39,230.449 1989.95,230.629 1990.52,231.471 1991.09,232.385 1991.66,232.242 1992.23,230.065 1992.8,229.293 1993.36,227.381 1993.93,225.497 1994.5,226.981 1995.07,227.16 1995.64,227.558 1996.21,223.625 1996.77,224.091 1997.34,223.64 1997.91,224.34 1998.48,223.792 1999.05,224.39 1999.62,225.87 2000.18,227.17 2000.75,225.544 2001.32,225.963 2001.89,226.332 2002.46,224.627 2003.03,225.21 2003.59,228.883 2004.16,229.212 2004.73,228.426 2005.3,227.467 2005.87,228.892 2006.44,228.011 2007,229.07 2007.57,230.511 2008.14,228.677 2008.71,230.094 2009.28,231.418 2009.85,229.457 2010.41,228.931 2010.98,227.007 2011.55,224.387 2012.12,224.869 2012.69,226.42 2013.26,229.887 2013.82,230.166 2014.39,231.402 2014.96,233.505 2015.53,232.751 2016.1,233.561 2016.67,232.907 2017.23,238.085 2017.8,237.814 2018.37,239.61 2018.94,240.232 2019.51,239.634 2020.08,239.97 2020.64,242.581 2021.21,241.794 2021.78,241.133 2022.35,245.625 2022.92,244.586 2023.49,242.667 2024.05,242.857 2024.62,244.071 2025.19,243.11 2025.76,242.2 2026.33,240.135 2026.9,239.365 2027.46,237.465 2028.03,238.021 2028.6,237.253 2029.17,238.791 2029.74,238.161 2030.31,236.504 2030.87,235.865 2031.44,235.47 2032.01,233.958 2032.58,234.387 2033.15,233.689 2033.72,233.288 2034.28,232.934 2034.85,231.392 2035.42,231.295 2035.99,231.037 2036.56,230.916 2037.13,230.538 2037.69,229.235 2038.26,230.109 2038.83,229.944 2039.4,229.731 2039.97,229.742 2040.54,227.633 2041.11,227.591 2041.67,229.771 2042.24,231.727 2042.81,231.384 2043.38,232.262 2043.95,232.789 2044.52,231.548 2045.08,231.211 2045.65,229.882 2046.22,229.029 2046.79,227.926 2047.36,229.011 2047.93,229.112 2048.49,229.112 2049.06,229.071 2049.63,230.185 2050.2,229.953 2050.77,227.681 2051.34,228.687 2051.9,227.506 2052.47,228.585 2053.04,229.462 2053.61,228.392 2054.18,229.201 2054.75,228.314 2055.31,229.228 2055.88,231.331 2056.45,229.128 2057.02,227.965 2057.59,226.819 2058.16,226.98 2058.72,225.835 2059.29,228.019 2059.86,230.249 2060.43,227.978 2061,227.814 2061.57,227.665 2062.13,228.882 2062.7,225.67 2063.27,225.8 2063.84,224.151 2064.41,224.556 2064.98,223.616 2065.54,223.878 2066.11,225.2 2066.68,226.598 2067.25,227.85 2067.82,223.925 2068.39,226.38 2068.95,226.705 2069.52,224.069 2070.09,224.405 2070.66,226.807 2071.23,226.956 2071.8,225.969 2072.36,228.322 2072.93,229.729 2073.5,228.429 2074.07,228.799 2074.64,228.84 2075.21,231.838 2075.77,231.712 2076.34,230.538 2076.91,228.341 2077.48,227.543 2078.05,227.715 2078.62,229.925 2079.18,229.87 2079.75,230.086 2080.32,230.291 2080.89,228.386 2081.46,228.735 2082.03,230.051 2082.59,230.122 2083.16,230.193 2083.73,230.371 2084.3,230.165 2084.87,231.272 2085.44,229.393 2086,229.266 2086.57,230.552 2087.14,229.46 2087.71,231.645 2088.28,231.53 2088.85,232.385 2089.41,231.978 2089.98,232.85 2090.55,232.707 2091.12,234.697 2091.69,237.315 2092.26,235.995 2092.82,234.728 2093.39,234.351 2093.96,235.02 2094.53,232.73 2095.1,234.687 2095.67,234.269 2096.23,234.802 2096.8,233.331 2097.37,231.773 2097.94,231.38 2098.51,230.296 2099.08,230.179 2099.64,227.992 2100.21,228.186 2100.78,229.538 2101.35,228.379 2101.92,228.613 2102.49,229.617 2103.05,230.495 2103.62,230.47 2104.19,231.17 2104.76,232.186 2105.33,234.17 2105.9,234.915 2106.46,231.675 2107.03,229.486 2107.6,226.495 2108.17,225.509 2108.74,223.699 2109.31,224.045 2109.87,223.585 2110.44,222.927 2111.01,223.585 2111.58,225.145 2112.15,224.564 2112.72,223.914 2113.29,224.289 2113.85,225.73 2114.42,225.959 2114.99,225.316 2115.56,220.56 2116.13,221.373 2116.7,223.142 2117.26,224.779 2117.83,224.083 2118.4,223.475 2118.97,223.03 2119.54,222.602 2120.11,221.28 2120.67,223.062 2121.24,225.601 2121.81,224.965 2122.38,224.366 2122.95,224.655 2123.52,226.366 2124.08,227.874 2124.65,226.892 2125.22,227.133 2125.79,231.565 2126.36,230.735 2126.93,230.959 2127.49,234.11 2128.06,235.78 2128.63,235.533 2129.2,234.32 2129.77,235.239 2130.34,235.04 2130.9,233.805 2131.47,235.556 2132.04,234.214 2132.61,234.133 2133.18,235.129 2133.75,238.936 2134.31,238.384 2134.88,240.052 2135.45,239.255 2136.02,238.642 2136.59,237.27 2137.16,235.755 2137.72,234.404 2138.29,235.198 2138.86,233.812 2139.43,232.571 2140,233.546 2140.57,231.074 2141.13,230.18 2141.7,232.443 2142.27,233.297 2142.84,232.181 2143.41,231.08 2143.98,232.328 2144.54,232.152 2145.11,234.011 2145.68,234.972 2146.25,235.539 2146.82,233.836 2147.39,233.512 2147.95,233.208 2148.52,232.888 2149.09,230.843 2149.66,230.699 2150.23,231.67 2150.8,232.475 2151.36,233.292 2151.93,236.025 2152.5,232.387 2153.07,232.306 2153.64,231.919 2154.21,232.713 2154.77,232.352 2155.34,229.999 2155.91,229.9 2156.48,229.892 2157.05,227.72 2157.62,227.696 2158.18,227.516 2158.75,227.9 2159.32,228.964 2159.89,227.082 \"/>\n<path clip-path=\"url(#clip580)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip580)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip580)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip580)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip580)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip580)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.028 ± 0.025\n  with uncertainty of ± 0.00224924756131909\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01526 ± (0.00237683, 0.00254052) (MC)\n  95% confidence interval: [-4.01993, -4.01048]) (MC)\n  linear error propagation: -4.01551 ± 0.00240886\n  |δ_y| = |0.00129411| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015257285796151, val_l = 0.004671355085524631, val_u = 0.004775223350847568)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip610\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip610)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip611\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip610)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip612\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1136.91 2211.02,1136.91 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,963.096 2211.02,963.096 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,789.285 2211.02,789.285 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,615.475 2211.02,615.475 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,441.664 2211.02,441.664 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,267.854 2211.02,267.854 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1136.91 365.751,1136.91 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,963.096 365.751,963.096 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,789.285 365.751,789.285 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,615.475 365.751,615.475 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,441.664 365.751,441.664 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,267.854 365.751,267.854 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M298.909 1122.7 Q295.298 1122.7 293.469 1126.27 Q291.664 1129.81 291.664 1136.94 Q291.664 1144.05 293.469 1147.61 Q295.298 1151.15 298.909 1151.15 Q302.543 1151.15 304.349 1147.61 Q306.177 1144.05 306.177 1136.94 Q306.177 1129.81 304.349 1126.27 Q302.543 1122.7 298.909 1122.7 M298.909 1119 Q304.719 1119 307.775 1123.61 Q310.853 1128.19 310.853 1136.94 Q310.853 1145.67 307.775 1150.27 Q304.719 1154.86 298.909 1154.86 Q293.099 1154.86 290.02 1150.27 Q286.964 1145.67 286.964 1136.94 Q286.964 1128.19 290.02 1123.61 Q293.099 1119 298.909 1119 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M259.557 976.44 L267.196 976.44 L267.196 950.075 L258.886 951.742 L258.886 947.482 L267.15 945.816 L271.826 945.816 L271.826 976.44 L279.465 976.44 L279.465 980.376 L259.557 980.376 L259.557 976.44 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M298.909 948.894 Q295.298 948.894 293.469 952.459 Q291.664 956.001 291.664 963.13 Q291.664 970.237 293.469 973.802 Q295.298 977.343 298.909 977.343 Q302.543 977.343 304.349 973.802 Q306.177 970.237 306.177 963.13 Q306.177 956.001 304.349 952.459 Q302.543 948.894 298.909 948.894 M298.909 945.191 Q304.719 945.191 307.775 949.797 Q310.853 954.38 310.853 963.13 Q310.853 971.857 307.775 976.464 Q304.719 981.047 298.909 981.047 Q293.099 981.047 290.02 976.464 Q286.964 971.857 286.964 963.13 Q286.964 954.38 290.02 949.797 Q293.099 945.191 298.909 945.191 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M262.775 802.63 L279.094 802.63 L279.094 806.565 L257.15 806.565 L257.15 802.63 Q259.812 799.875 264.395 795.246 Q269.002 790.593 270.182 789.25 Q272.428 786.727 273.307 784.991 Q274.21 783.232 274.21 781.542 Q274.21 778.788 272.266 777.051 Q270.344 775.315 267.242 775.315 Q265.043 775.315 262.59 776.079 Q260.159 776.843 257.381 778.394 L257.381 773.672 Q260.205 772.538 262.659 771.959 Q265.113 771.38 267.15 771.38 Q272.52 771.38 275.715 774.065 Q278.909 776.751 278.909 781.241 Q278.909 783.371 278.099 785.292 Q277.312 787.19 275.205 789.783 Q274.627 790.454 271.525 793.672 Q268.423 796.866 262.775 802.63 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M298.909 775.084 Q295.298 775.084 293.469 778.649 Q291.664 782.19 291.664 789.32 Q291.664 796.426 293.469 799.991 Q295.298 803.533 298.909 803.533 Q302.543 803.533 304.349 799.991 Q306.177 796.426 306.177 789.32 Q306.177 782.19 304.349 778.649 Q302.543 775.084 298.909 775.084 M298.909 771.38 Q304.719 771.38 307.775 775.987 Q310.853 780.57 310.853 789.32 Q310.853 798.047 307.775 802.653 Q304.719 807.236 298.909 807.236 Q293.099 807.236 290.02 802.653 Q286.964 798.047 286.964 789.32 Q286.964 780.57 290.02 775.987 Q293.099 771.38 298.909 771.38 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M272.914 614.121 Q276.27 614.838 278.145 617.107 Q280.043 619.375 280.043 622.708 Q280.043 627.824 276.525 630.625 Q273.006 633.426 266.525 633.426 Q264.349 633.426 262.034 632.986 Q259.742 632.569 257.289 631.713 L257.289 627.199 Q259.233 628.333 261.548 628.912 Q263.863 629.491 266.386 629.491 Q270.784 629.491 273.076 627.755 Q275.39 626.019 275.39 622.708 Q275.39 619.653 273.238 617.94 Q271.108 616.204 267.289 616.204 L263.261 616.204 L263.261 612.361 L267.474 612.361 Q270.923 612.361 272.752 610.996 Q274.58 609.607 274.58 607.014 Q274.58 604.352 272.682 602.94 Q270.807 601.505 267.289 601.505 Q265.367 601.505 263.168 601.922 Q260.969 602.338 258.33 603.218 L258.33 599.051 Q260.992 598.31 263.307 597.94 Q265.645 597.57 267.705 597.57 Q273.029 597.57 276.131 600 Q279.233 602.408 279.233 606.528 Q279.233 609.398 277.59 611.389 Q275.946 613.357 272.914 614.121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M298.909 601.273 Q295.298 601.273 293.469 604.838 Q291.664 608.38 291.664 615.509 Q291.664 622.616 293.469 626.181 Q295.298 629.722 298.909 629.722 Q302.543 629.722 304.349 626.181 Q306.177 622.616 306.177 615.509 Q306.177 608.38 304.349 604.838 Q302.543 601.273 298.909 601.273 M298.909 597.57 Q304.719 597.57 307.775 602.176 Q310.853 606.759 310.853 615.509 Q310.853 624.236 307.775 628.843 Q304.719 633.426 298.909 633.426 Q293.099 633.426 290.02 628.843 Q286.964 624.236 286.964 615.509 Q286.964 606.759 290.02 602.176 Q293.099 597.57 298.909 597.57 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M271.594 428.458 L259.789 446.907 L271.594 446.907 L271.594 428.458 M270.367 424.384 L276.247 424.384 L276.247 446.907 L281.177 446.907 L281.177 450.796 L276.247 450.796 L276.247 458.944 L271.594 458.944 L271.594 450.796 L255.992 450.796 L255.992 446.282 L270.367 424.384 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M298.909 427.463 Q295.298 427.463 293.469 431.028 Q291.664 434.569 291.664 441.699 Q291.664 448.805 293.469 452.37 Q295.298 455.912 298.909 455.912 Q302.543 455.912 304.349 452.37 Q306.177 448.805 306.177 441.699 Q306.177 434.569 304.349 431.028 Q302.543 427.463 298.909 427.463 M298.909 423.759 Q304.719 423.759 307.775 428.366 Q310.853 432.949 310.853 441.699 Q310.853 450.426 307.775 455.032 Q304.719 459.615 298.909 459.615 Q293.099 459.615 290.02 455.032 Q286.964 450.426 286.964 441.699 Q286.964 432.949 290.02 428.366 Q293.099 423.759 298.909 423.759 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M258.793 250.574 L277.15 250.574 L277.15 254.509 L263.076 254.509 L263.076 262.981 Q264.094 262.634 265.113 262.472 Q266.131 262.287 267.15 262.287 Q272.937 262.287 276.316 265.458 Q279.696 268.629 279.696 274.046 Q279.696 279.624 276.224 282.726 Q272.752 285.805 266.432 285.805 Q264.256 285.805 261.988 285.435 Q259.742 285.064 257.335 284.324 L257.335 279.624 Q259.418 280.759 261.641 281.314 Q263.863 281.87 266.34 281.87 Q270.344 281.87 272.682 279.763 Q275.02 277.657 275.02 274.046 Q275.02 270.435 272.682 268.328 Q270.344 266.222 266.34 266.222 Q264.465 266.222 262.59 266.638 Q260.738 267.055 258.793 267.935 L258.793 250.574 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M298.909 253.652 Q295.298 253.652 293.469 257.217 Q291.664 260.759 291.664 267.888 Q291.664 274.995 293.469 278.56 Q295.298 282.101 298.909 282.101 Q302.543 282.101 304.349 278.56 Q306.177 274.995 306.177 267.888 Q306.177 260.759 304.349 257.217 Q302.543 253.652 298.909 253.652 M298.909 249.949 Q304.719 249.949 307.775 254.555 Q310.853 259.138 310.853 267.888 Q310.853 276.615 307.775 281.222 Q304.719 285.805 298.909 285.805 Q293.099 285.805 290.02 281.222 Q286.964 276.615 286.964 267.888 Q286.964 259.138 290.02 254.555 Q293.099 249.949 298.909 249.949 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip612)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1008.84 400.199,891.182 400.786,783.228 401.372,684.325 401.958,593.869 402.545,634.395 403.131,553.151 403.718,479.138 404.304,411.886 404.891,449.48 405.477,389.553 406.063,335.419 406.65,368.01 407.236,318.608 407.823,274.28 408.409,301.792 408.995,263.79 409.582,230.074 410.168,360.055 410.755,374.609 411.341,344.311 411.927,315.911 412.514,333.691 413.1,311.279 413.687,291.263 414.273,273.617 414.86,258.878 415.446,247.391 416.032,239.549 416.619,232.155 417.205,226.537 417.792,222.728 418.378,219.895 418.964,262.699 419.551,262.432 420.137,264.092 420.724,284.585 421.31,288.469 421.896,309.722 422.483,313.196 423.069,318.965 423.656,353.247 424.242,359.897 424.829,379.883 425.415,399.237 426.001,418.052 426.588,426.988 427.174,435.74 427.761,454.993 428.347,466.088 428.933,485.625 429.52,512.366 430.106,522.068 430.693,554.333 431.279,571.058 431.865,580.4 432.452,596.57 433.038,612.242 433.625,621.446 434.211,636.53 434.798,645.812 435.384,654.882 435.97,665.094 436.557,685.052 437.143,718.536 437.73,731.734 438.316,747.635 438.902,755.902 439.489,765.025 440.075,778.258 440.662,790.708 441.248,802.869 441.835,818.905 442.421,827.16 443.007,838.9 443.594,860.245 444.18,873.989 444.767,890.612 445.353,903.659 445.939,913.374 446.526,925.534 447.112,931.472 447.699,946.053 448.285,951.625 448.871,959.68 449.458,970.21 450.044,978.036 450.631,985.414 451.217,995.12 451.804,1005.09 452.39,1014.27 452.976,1025.63 453.563,1029.58 454.149,1033.76 454.736,1042.69 455.322,1053.5 455.908,1059.36 456.495,1062.5 457.081,1070.43 457.668,1078.4 458.254,1081.47 458.84,1084.64 459.427,1091.93 460.013,1094.71 460.6,1099.81 461.186,1102.79 461.773,1107.3 462.359,1114.27 462.945,1118.39 463.532,1124.67 464.118,1126.88 464.705,1134.76 465.291,1134.57 465.877,1136.41 466.464,1140.31 467.05,1143.95 467.637,1147.48 468.223,1150.95 468.809,1154.69 469.396,1159.7 469.982,1163.18 470.569,1164.57 471.155,1169.16 471.742,1172.35 472.328,1173.27 472.914,1174.18 473.501,1177.18 474.087,1179.76 474.674,1182.51 475.26,1183.42 475.846,1187.56 476.433,1195.09 477.019,1197.44 477.606,1196.3 478.192,1199.88 478.778,1200.34 479.365,1200.76 479.951,1201.08 480.538,1204.71 481.124,1209.52 481.711,1209.54 482.297,1208.23 482.883,1211.54 483.47,1213.13 484.056,1218.06 484.643,1216.57 485.229,1224.66 485.815,1227.21 486.402,1226.39 486.988,1225.78 487.575,1225.37 488.161,1225.15 488.748,1226.22 489.334,1225.92 489.92,1226.87 490.507,1225.06 491.093,1226.19 491.68,1225.72 492.266,1225.81 492.852,1225.85 493.439,1227.11 494.025,1226.66 494.612,1226.14 495.198,1227.33 495.784,1228.4 496.371,1231.33 496.957,1229.62 497.544,1232.67 498.13,1230.42 498.717,1227.25 499.303,1231.83 499.889,1231.68 500.476,1234.64 501.062,1234.39 501.649,1233.83 502.235,1236.41 502.821,1235.93 503.408,1238.46 503.994,1237.99 504.581,1237.37 505.167,1239.97 505.753,1240.73 506.34,1242.72 506.926,1243.3 507.513,1240.88 508.099,1240.22 508.686,1241.18 509.272,1238.76 509.858,1240.92 510.445,1238.84 511.031,1238.22 511.618,1239.41 512.204,1238.48 512.79,1238.15 513.377,1237.89 513.963,1237.38 514.55,1238.5 515.136,1238.11 515.722,1237.86 516.309,1238.79 516.895,1240.13 517.482,1241.24 518.068,1243.59 518.655,1242.59 519.241,1243.46 519.827,1244.26 520.414,1241.84 521,1244.09 521.587,1243.41 522.173,1244.02 522.759,1244.27 523.346,1242.08 523.932,1244.48 524.519,1243.71 525.105,1245.6 525.691,1246.22 526.278,1247.87 526.864,1248.28 527.451,1250.53 528.037,1249.42 528.624,1249.92 529.21,1248.77 529.796,1247.37 530.383,1246.46 530.969,1245.24 531.556,1247.07 532.142,1246.2 532.728,1245.27 533.315,1247.28 533.901,1246.09 534.488,1246.55 535.074,1244.09 535.661,1241.83 536.247,1242.49 536.833,1237.47 537.42,1237.18 538.006,1238.08 538.593,1241.76 539.179,1240.83 539.765,1241.5 540.352,1237.93 540.938,1237.36 541.525,1236.42 542.111,1239.05 542.697,1237.03 543.284,1236.35 543.87,1234.24 544.457,1233.76 545.043,1234.82 545.63,1236.13 546.216,1239.69 546.802,1240.28 547.389,1241.24 547.975,1240.47 548.562,1239.54 549.148,1240.02 549.734,1243.29 550.321,1242.5 550.907,1241.99 551.494,1242.57 552.08,1240.01 552.666,1240.37 553.253,1241.37 553.839,1240.83 554.426,1241.36 555.012,1240.28 555.599,1238.02 556.185,1233.21 556.771,1232.57 557.358,1233.58 557.944,1235.63 558.531,1236.51 559.117,1235.96 559.703,1233.77 560.29,1233.1 560.876,1232.35 561.463,1233.22 562.049,1232.33 562.635,1231.97 563.222,1232.82 563.808,1233.82 564.395,1233.36 564.981,1235.53 565.568,1235.15 566.154,1236.2 566.74,1235.69 567.327,1236.27 567.913,1235.62 568.5,1236.22 569.086,1236.92 569.672,1234.69 570.259,1234.02 570.845,1234.93 571.432,1234.28 572.018,1233.62 572.605,1231.69 573.191,1231.32 573.777,1232.15 574.364,1234.3 574.95,1234.69 575.537,1233.79 576.123,1234.38 576.709,1234.89 577.296,1235.43 577.882,1233.13 578.469,1235.56 579.055,1232.01 579.641,1231.47 580.228,1233.57 580.814,1228.41 581.401,1227.88 581.987,1227.8 582.574,1227.58 583.16,1228.75 583.746,1227.08 584.333,1225.24 584.919,1225.23 585.506,1226.57 586.092,1226.46 586.678,1227.66 587.265,1228.88 587.851,1227.16 588.438,1226.9 589.024,1229.45 589.61,1230.51 590.197,1229.92 590.783,1229.49 591.37,1227.56 591.956,1224.27 592.543,1225.16 593.129,1221.87 593.715,1221.74 594.302,1223.18 594.888,1221.77 595.475,1223.11 596.061,1221.77 596.647,1223.14 597.234,1221.62 597.82,1221.6 598.407,1221.69 598.993,1222.99 599.579,1224.41 600.166,1225.65 600.752,1228.41 601.339,1226.59 601.925,1226.45 602.512,1227.16 603.098,1227.92 603.684,1227.34 604.271,1225.49 604.857,1226.6 605.444,1227.55 606.03,1228.45 606.616,1226.48 607.203,1229.05 607.789,1225.84 608.376,1227.05 608.962,1226.75 609.548,1226.44 610.135,1222.96 610.721,1221.24 611.308,1220.87 611.894,1219.47 612.481,1221.79 613.067,1222.98 613.653,1223.16 614.24,1226.06 614.826,1224.23 615.413,1222.68 615.999,1222.39 616.585,1225.08 617.172,1223.14 617.758,1222.86 618.345,1222.61 618.931,1223.88 619.518,1229.32 620.104,1227.48 620.69,1228.2 621.277,1226.31 621.863,1228.94 622.45,1226.99 623.036,1227.93 623.622,1225.7 624.209,1225.24 624.795,1221.67 625.382,1220.25 625.968,1222.87 626.554,1221.4 627.141,1221.21 627.727,1222.73 628.314,1225.45 628.9,1224.76 629.487,1224.29 630.073,1223.64 630.659,1224.58 631.246,1225.36 631.832,1225.2 632.419,1226.29 633.005,1222.82 633.591,1225.46 634.178,1224.85 634.764,1227.03 635.351,1225.02 635.937,1221.51 636.523,1221.4 637.11,1222.52 637.696,1222.2 638.283,1223.24 638.869,1220 639.456,1218.71 640.042,1218.37 640.628,1217.98 641.215,1218.16 641.801,1219.58 642.388,1219.1 642.974,1218.65 643.56,1218.23 644.147,1219.81 644.733,1219.29 645.32,1220.39 645.906,1218.63 646.492,1218.4 647.079,1219.48 647.665,1225.01 648.252,1224.37 648.838,1223.91 649.425,1223.49 650.011,1225.85 650.597,1223.96 651.184,1223.32 651.77,1224.44 652.357,1225.23 652.943,1225.12 653.529,1223.17 654.116,1218.72 654.702,1218.79 655.289,1215.91 655.875,1217.46 656.462,1215.74 657.048,1214.3 657.634,1217.02 658.221,1214 658.807,1216.87 659.394,1216.58 659.98,1213.46 660.566,1212.28 661.153,1212.45 661.739,1212.65 662.326,1214.15 662.912,1214.72 663.498,1216.25 664.085,1221.12 664.671,1220.93 665.258,1219.3 665.844,1217.85 666.431,1216.21 667.017,1215.02 667.603,1212.08 668.19,1212.3 668.776,1213.75 669.363,1214.02 669.949,1212.63 670.535,1215.52 671.122,1212.22 671.708,1209.32 672.295,1209.44 672.881,1209.96 673.467,1211.5 674.054,1211.88 674.64,1210.51 675.227,1207.71 675.813,1205.06 676.4,1207.07 676.986,1208.85 677.572,1212.08 678.159,1213.6 678.745,1213.8 679.332,1213.58 679.918,1213.1 680.504,1216.21 681.091,1217.51 681.677,1218.58 682.264,1219.98 682.85,1219.7 683.436,1219.41 684.023,1216.49 684.609,1219.46 685.196,1224.9 685.782,1227.24 686.369,1228.06 686.955,1227.27 687.541,1226.58 688.128,1225.79 688.714,1222.59 689.301,1224.69 689.887,1223.93 690.473,1224.94 691.06,1223.16 691.646,1222.7 692.233,1220.96 692.819,1221.76 693.405,1221.61 693.992,1216.91 694.578,1216.74 695.165,1216.46 695.751,1216.14 696.338,1218.52 696.924,1216.91 697.51,1216.72 698.097,1216.6 698.683,1213.52 699.27,1210.87 699.856,1213.64 700.442,1211.96 701.029,1211.73 701.615,1208.93 702.202,1209.21 702.788,1207.85 703.375,1205.31 703.961,1205.84 704.547,1206.35 705.134,1206.94 705.72,1207.36 706.307,1207.74 706.893,1209.49 707.479,1211.17 708.066,1212.62 708.652,1209.74 709.239,1210.22 709.825,1211.62 710.411,1210.17 710.998,1210.39 711.584,1210.76 712.171,1215.04 712.757,1219.07 713.344,1218.76 713.93,1216.89 714.516,1215.3 715.103,1210.92 715.689,1211.2 716.276,1209.98 716.862,1212.64 717.448,1212.69 718.035,1212.58 718.621,1215.42 719.208,1214.04 719.794,1213.79 720.38,1216.44 720.967,1216.14 721.553,1215.95 722.14,1217.13 722.726,1219.7 723.313,1220.78 723.899,1221.9 724.485,1221.26 725.072,1218.98 725.658,1218.49 726.245,1217.88 726.831,1214.96 727.417,1214.53 728.004,1217.19 728.59,1216.88 729.177,1219.38 729.763,1216.46 730.349,1216.4 730.936,1220.35 731.522,1216.89 732.109,1216.53 732.695,1219.06 733.282,1220.22 733.868,1222.64 734.454,1220.88 735.041,1223.07 735.627,1219.6 736.214,1222.02 736.8,1218.8 737.386,1216.78 737.973,1217.95 738.559,1214.86 739.146,1217.62 739.732,1216.92 740.318,1216.65 740.905,1213.47 741.491,1216.37 742.078,1215.84 742.664,1215.29 743.251,1215.21 743.837,1215.14 744.423,1217.83 745.01,1217.22 745.596,1212.36 746.183,1210.83 746.769,1209.21 747.355,1209.31 747.942,1212.24 748.528,1210.97 749.115,1210.98 749.701,1211.11 750.288,1209.74 750.874,1211.2 751.46,1208.4 752.047,1209.9 752.633,1211.46 753.22,1211.29 753.806,1211.51 754.392,1201.63 754.979,1199.54 755.565,1201.8 756.152,1197.78 756.738,1199.74 757.324,1201.86 757.911,1200.89 758.497,1199.92 759.084,1199.21 759.67,1199.8 760.257,1196.2 760.843,1196.85 761.429,1199.33 762.016,1204.43 762.602,1206.04 763.189,1209.4 763.775,1207.98 764.361,1208.08 764.948,1208.2 765.534,1206.81 766.121,1207.12 766.707,1210.2 767.293,1210.23 767.88,1213.25 768.466,1213.63 769.053,1215.03 769.639,1213.63 770.226,1213.43 770.812,1213.22 771.398,1211.76 771.985,1212.99 772.571,1212.75 773.158,1216.85 773.744,1217.96 774.33,1217.45 774.917,1217.03 775.503,1218.25 776.09,1217.99 776.676,1219.04 777.262,1219.78 777.849,1218.77 778.435,1218.46 779.022,1216.7 779.608,1217.48 780.195,1215.75 780.781,1218.25 781.367,1219.16 781.954,1218.75 782.54,1217.06 783.127,1214.09 783.713,1218.1 784.299,1217.78 784.886,1215.97 785.472,1217.22 786.059,1218.2 786.645,1217.78 787.232,1218.92 787.818,1221.44 788.404,1219.64 788.991,1224.61 789.577,1224.11 790.164,1220.7 790.75,1218.66 791.336,1218.18 791.923,1217.8 792.509,1215.73 793.096,1210.94 793.682,1209.39 794.268,1209.68 794.855,1211.23 795.441,1209.89 796.028,1208.6 796.614,1208.64 797.201,1208.45 797.787,1205.81 798.373,1206.32 798.96,1208.06 799.546,1212.28 800.133,1211.65 800.719,1211.74 801.305,1211.5 801.892,1212.67 802.478,1212.58 803.065,1213.87 803.651,1212.61 804.237,1211.28 804.824,1215.61 805.41,1216.62 805.997,1216.71 806.583,1217.78 807.17,1218.66 807.756,1219.53 808.342,1218.96 808.929,1215.81 809.515,1213.97 810.102,1213.53 810.688,1213.33 811.274,1217.4 811.861,1217.17 812.447,1216.75 813.034,1214.92 813.62,1215.97 814.206,1217.24 814.793,1218.05 815.379,1217.49 815.966,1219.89 816.552,1216.13 817.139,1217.03 817.725,1216.57 818.311,1216.18 818.898,1213.02 819.484,1210 820.071,1208.51 820.657,1207.16 821.243,1205.92 821.83,1205.72 822.416,1207.4 823.003,1205.92 823.589,1208.97 824.175,1210.36 824.762,1211.67 825.348,1208.44 825.935,1207.08 826.521,1209.83 827.108,1208.39 827.694,1206.98 828.28,1208.58 828.867,1209.77 829.453,1209.91 830.04,1209.86 830.626,1214.4 831.212,1215.56 831.799,1211.1 832.385,1211.19 832.972,1212.44 833.558,1215.12 834.145,1212.17 834.731,1212.07 835.317,1210.09 835.904,1209.83 836.49,1211.38 837.077,1209.8 837.663,1209.45 838.249,1212.3 838.836,1210.88 839.422,1213.16 840.009,1212.74 840.595,1209.62 841.181,1209.48 841.768,1209.23 842.354,1210.26 842.941,1212.86 843.527,1212.88 844.114,1213.99 844.7,1216.74 845.286,1214.86 845.873,1214.7 846.459,1216.77 847.046,1216.38 847.632,1217.28 848.218,1215.3 848.805,1214.52 849.391,1212.72 849.978,1212.28 850.564,1210.75 851.15,1206.4 851.737,1209.16 852.323,1209.04 852.91,1210.59 853.496,1210.57 854.083,1210.36 854.669,1207.11 855.255,1207.31 855.842,1208.9 856.428,1210.01 857.015,1206.65 857.601,1205.39 858.187,1204.02 858.774,1204.14 859.36,1203.25 859.947,1205.14 860.533,1206.79 861.119,1205.57 861.706,1207.03 862.292,1206.95 862.879,1204.08 863.465,1205.75 864.052,1205.92 864.638,1206.44 865.224,1204.05 865.811,1205.7 866.397,1206.15 866.984,1205.36 867.57,1205.95 868.156,1204.62 868.743,1207.68 869.329,1206.54 869.916,1205.25 870.502,1206.55 871.089,1208.08 871.675,1205.32 872.261,1202.61 872.848,1202.73 873.434,1200.25 874.021,1203.42 874.607,1203.75 875.193,1202.63 875.78,1203.19 876.366,1200.84 876.953,1203.15 877.539,1204.8 878.125,1206.31 878.712,1207.8 879.298,1207.66 879.885,1209.46 880.471,1212.29 881.058,1209.23 881.644,1208.91 882.23,1209 882.817,1206.05 883.403,1206.13 883.99,1204.9 884.576,1205.34 885.162,1204.23 885.749,1202.88 886.335,1203.26 886.922,1203.44 887.508,1202.47 888.094,1200.17 888.681,1201.89 889.267,1203.76 889.854,1199.76 890.44,1201.81 891.027,1206.2 891.613,1203.42 892.199,1201.11 892.786,1204.63 893.372,1202.01 893.959,1202.53 894.545,1202.9 895.131,1204.77 895.718,1203.76 896.304,1204.13 896.891,1205.79 897.477,1205.76 898.063,1205.91 898.65,1204.88 899.236,1203.48 899.823,1206.94 900.409,1207.08 900.996,1209.81 901.582,1211.12 902.168,1213.87 902.755,1213.82 903.341,1213.44 903.928,1214.57 904.514,1214.38 905.1,1210.02 905.687,1209.8 906.273,1209.43 906.86,1208.04 907.446,1212.15 908.032,1210.34 908.619,1210.12 909.205,1211.39 909.792,1209.6 910.378,1209.74 910.965,1208.3 911.551,1208.17 912.137,1209.69 912.724,1209.66 913.31,1209.8 913.897,1208.8 914.483,1207.8 915.069,1207.69 915.656,1209.24 916.242,1209.32 916.829,1209.12 917.415,1208.93 918.002,1211.96 918.588,1210.54 919.174,1210.45 919.761,1213.1 920.347,1209.85 920.934,1209.67 921.52,1208.39 922.106,1208.28 922.693,1208.25 923.279,1209.9 923.866,1211.26 924.452,1212.53 925.038,1215.01 925.625,1215.91 926.211,1211.1 926.798,1209.4 927.384,1209.67 927.971,1209.87 928.557,1211.12 929.143,1212.23 929.73,1213.38 930.316,1210.38 930.903,1211.65 931.489,1213.06 932.075,1212.82 932.662,1211.04 933.248,1212.35 933.835,1212.25 934.421,1211.88 935.007,1210.38 935.594,1210.29 936.18,1208.8 936.767,1202.94 937.353,1200.77 937.94,1199.84 938.526,1198.73 939.112,1199.35 939.699,1199.79 940.285,1201.85 940.872,1202.18 941.458,1199.63 942.044,1201.5 942.631,1201.67 943.217,1203.21 943.804,1203.83 944.39,1204.22 944.976,1205.82 945.563,1204.67 946.149,1204.67 946.736,1200.89 947.322,1199.88 947.909,1200.31 948.495,1200.69 949.081,1200.83 949.668,1201.18 950.254,1202.97 950.841,1204.31 951.427,1206.13 952.013,1206.5 952.6,1208.02 953.186,1208.06 953.773,1207.88 954.359,1208.21 954.945,1205.36 955.532,1205.46 956.118,1205.73 956.705,1208.97 957.291,1204.57 957.878,1203.22 958.464,1206.39 959.05,1207.52 959.637,1209.08 960.223,1207.61 960.81,1206.38 961.396,1206.78 961.982,1206.79 962.569,1208.14 963.155,1208 963.742,1209.12 964.328,1211.97 964.915,1214.22 965.501,1212.57 966.087,1215.04 966.674,1214.62 967.26,1213.1 967.847,1211.34 968.433,1211.17 969.019,1212.55 969.606,1212.29 970.192,1212.11 970.779,1206.08 971.365,1207.45 971.951,1204.86 972.538,1202.13 973.124,1202.52 973.711,1204.04 974.297,1205.9 974.884,1204.8 975.47,1205.06 976.056,1205.34 976.643,1206.97 977.229,1208.54 977.816,1211.46 978.402,1210.15 978.988,1210.05 979.575,1205.6 980.161,1206.02 980.748,1205.85 981.334,1206.19 981.92,1206.69 982.507,1206.55 983.093,1206.72 983.68,1206.92 984.266,1206.9 984.853,1208.17 985.439,1206.93 986.025,1206.89 986.612,1206.71 987.198,1207.99 987.785,1208.15 988.371,1208.26 988.957,1209.78 989.544,1209.45 990.13,1209.44 990.717,1209.33 991.303,1207.95 991.889,1210.85 992.476,1210.47 993.062,1210.1 993.649,1207.21 994.235,1208.56 994.822,1208.7 995.408,1208.59 995.994,1208.69 996.581,1207.09 997.167,1209.83 997.754,1209.43 998.34,1209.36 998.926,1205.08 999.513,1207.82 1000.1,1204.78 1000.69,1206.45 1001.27,1211 1001.86,1211.14 1002.44,1210.63 1003.03,1213.04 1003.62,1212.68 1004.2,1213.42 1004.79,1213.2 1005.38,1214.47 1005.96,1215.41 1006.55,1214.87 1007.14,1211.61 1007.72,1212.84 1008.31,1209.81 1008.9,1209.69 1009.48,1211.18 1010.07,1209.82 1010.65,1209.52 1011.24,1209.06 1011.83,1211.92 1012.41,1213.05 1013,1209.8 1013.59,1210.99 1014.17,1210.68 1014.76,1210.46 1015.35,1213.01 1015.93,1213.96 1016.52,1215 1017.11,1216.77 1017.69,1214.57 1018.28,1215.71 1018.86,1215.29 1019.45,1211.94 1020.04,1211.48 1020.62,1212.72 1021.21,1208.16 1021.8,1207.69 1022.38,1210.2 1022.97,1208.58 1023.56,1207.27 1024.14,1207.32 1024.73,1205.9 1025.32,1206.12 1025.9,1207.33 1026.49,1205.83 1027.07,1207.4 1027.66,1205.85 1028.25,1208.64 1028.83,1211.18 1029.42,1212.57 1030.01,1208.21 1030.59,1206.91 1031.18,1208.15 1031.77,1206.6 1032.35,1207.86 1032.94,1207.96 1033.52,1206.58 1034.11,1205.38 1034.7,1202.53 1035.28,1204.33 1035.87,1204.35 1036.46,1204.28 1037.04,1205.92 1037.63,1207.33 1038.22,1207.39 1038.8,1207.58 1039.39,1207.79 1039.98,1205.03 1040.56,1210.85 1041.15,1210.51 1041.73,1208.75 1042.32,1206.96 1042.91,1206.79 1043.49,1207.09 1044.08,1204.26 1044.67,1204.41 1045.25,1204.87 1045.84,1206.49 1046.43,1206.52 1047.01,1208.28 1047.6,1209.4 1048.19,1210.39 1048.77,1215.69 1049.36,1213.57 1049.94,1215.84 1050.53,1213.88 1051.12,1213.39 1051.7,1211.72 1052.29,1213.07 1052.88,1212.83 1053.46,1209.65 1054.05,1212.21 1054.64,1209.05 1055.22,1206.06 1055.81,1207.44 1056.39,1205.99 1056.98,1208.86 1057.57,1207.46 1058.15,1203.3 1058.74,1203.44 1059.33,1201.86 1059.91,1201.85 1060.5,1202.05 1061.09,1202.55 1061.67,1200.31 1062.26,1196.58 1062.85,1195.39 1063.43,1198.85 1064.02,1199.21 1064.6,1199.53 1065.19,1200.1 1065.78,1199.43 1066.36,1202.53 1066.95,1204.43 1067.54,1206.12 1068.12,1206.16 1068.71,1206.17 1069.3,1206.35 1069.88,1207.9 1070.47,1208.08 1071.06,1206.46 1071.64,1202.19 1072.23,1203.83 1072.81,1202.63 1073.4,1201.35 1073.99,1198.85 1074.57,1197.9 1075.16,1200.14 1075.75,1206.17 1076.33,1205.1 1076.92,1203.87 1077.51,1205.47 1078.09,1205.55 1078.68,1205.62 1079.26,1206.14 1079.85,1206.46 1080.44,1202.48 1081.02,1205.84 1081.61,1208.46 1082.2,1209.81 1082.78,1206.92 1083.37,1204.05 1083.96,1202.85 1084.54,1208.78 1085.13,1208.57 1085.72,1208.5 1086.3,1208.43 1086.89,1206.9 1087.47,1205.34 1088.06,1207.18 1088.65,1206.22 1089.23,1207.84 1089.82,1206.49 1090.41,1206.48 1090.99,1206.72 1091.58,1204.06 1092.17,1204.13 1092.75,1204.38 1093.34,1206.04 1093.93,1204.62 1094.51,1203.49 1095.1,1203.93 1095.68,1203.72 1096.27,1205.34 1096.86,1205.52 1097.44,1205.69 1098.03,1204.23 1098.62,1201.43 1099.2,1201.95 1099.79,1202.33 1100.38,1205.45 1100.96,1212.67 1101.55,1211.3 1102.14,1210.93 1102.72,1209.66 1103.31,1206.46 1103.89,1206.3 1104.48,1206.32 1105.07,1206.44 1105.65,1206.25 1106.24,1205.25 1106.83,1202.72 1107.41,1203.01 1108,1206.15 1108.59,1207.71 1109.17,1207.78 1109.76,1210.64 1110.34,1210.64 1110.93,1211.77 1111.52,1212.59 1112.1,1210.9 1112.69,1210.47 1113.28,1209.19 1113.86,1210.56 1114.45,1209.16 1115.04,1209 1115.62,1207.45 1116.21,1207.43 1116.8,1211.36 1117.38,1209.49 1117.97,1210.7 1118.55,1210.45 1119.14,1211.76 1119.73,1211.67 1120.31,1212.96 1120.9,1213.9 1121.49,1216.22 1122.07,1215.56 1122.66,1216.83 1123.25,1215.98 1123.83,1214.06 1124.42,1216.57 1125.01,1217.65 1125.59,1216.91 1126.18,1219.34 1126.76,1215.92 1127.35,1215.33 1127.94,1217.48 1128.52,1216.97 1129.11,1213.49 1129.7,1213.12 1130.28,1214.2 1130.87,1215.3 1131.46,1214.91 1132.04,1217.38 1132.63,1213.98 1133.21,1213.63 1133.8,1213.14 1134.39,1212.8 1134.97,1212.53 1135.56,1210.45 1136.15,1210.17 1136.73,1211.27 1137.32,1212.42 1137.91,1211.98 1138.49,1214.7 1139.08,1213.96 1139.67,1213.64 1140.25,1213.46 1140.84,1210.28 1141.42,1205.84 1142.01,1206.03 1142.6,1203.34 1143.18,1202.29 1143.77,1201.26 1144.36,1200.1 1144.94,1197.74 1145.53,1198.05 1146.12,1199.74 1146.7,1197.26 1147.29,1197.24 1147.88,1196.22 1148.46,1196.83 1149.05,1197.15 1149.63,1196.06 1150.22,1195.32 1150.81,1200 1151.39,1201.66 1151.98,1201.7 1152.57,1204.82 1153.15,1206.39 1153.74,1206.29 1154.33,1208.87 1154.91,1208.86 1155.5,1209.97 1156.09,1208.55 1156.67,1210.09 1157.26,1210.11 1157.84,1212.73 1158.43,1209.56 1159.02,1207.69 1159.6,1206.46 1160.19,1205.22 1160.78,1206.64 1161.36,1206.65 1161.95,1203.81 1162.54,1202.71 1163.12,1200.07 1163.71,1201.65 1164.29,1197.62 1164.88,1196.6 1165.47,1195.68 1166.05,1197.76 1166.64,1199.64 1167.23,1197.21 1167.81,1197.89 1168.4,1198.62 1168.99,1196.11 1169.57,1198.53 1170.16,1197.71 1170.75,1198.21 1171.33,1198.51 1171.92,1197.4 1172.5,1197.95 1173.09,1199.86 1173.68,1199.81 1174.26,1200.24 1174.85,1203.25 1175.44,1201.79 1176.02,1206.31 1176.61,1204.62 1177.2,1210.32 1177.78,1211.48 1178.37,1207.01 1178.96,1208.65 1179.54,1208.51 1180.13,1208.31 1180.71,1206.85 1181.3,1204.08 1181.89,1203.98 1182.47,1202.46 1183.06,1201.26 1183.65,1200.19 1184.23,1200.37 1184.82,1201.81 1185.41,1201.84 1185.99,1205.22 1186.58,1204.11 1187.16,1202.85 1187.75,1206.16 1188.34,1204.76 1188.92,1206.66 1189.51,1206.29 1190.1,1205.13 1190.68,1206.67 1191.27,1205.75 1191.86,1204.65 1192.44,1204.4 1193.03,1204.2 1193.62,1204.27 1194.2,1204.59 1194.79,1204.75 1195.37,1207.52 1195.96,1205.95 1196.55,1205.88 1197.13,1207.25 1197.72,1207.26 1198.31,1210.29 1198.89,1208.61 1199.48,1208.98 1200.07,1208.88 1200.65,1210.2 1201.24,1212.77 1201.83,1215.47 1202.41,1215.14 1203,1214.92 1203.58,1220.09 1204.17,1218.11 1204.76,1214.45 1205.34,1218.67 1205.93,1218.12 1206.52,1217.56 1207.1,1216.79 1207.69,1214.99 1208.28,1217.43 1208.86,1216.76 1209.45,1217.85 1210.03,1217.19 1210.62,1213.97 1211.21,1213.62 1211.79,1216.07 1212.38,1216.73 1212.97,1214.82 1213.55,1214.23 1214.14,1215.31 1214.73,1212.33 1215.31,1213.15 1215.9,1210.05 1216.49,1212.76 1217.07,1212.79 1217.66,1210.83 1218.24,1210.59 1218.83,1210.42 1219.42,1209.33 1220,1209.1 1220.59,1210.12 1221.18,1210.96 1221.76,1210.36 1222.35,1208.69 1222.94,1211.34 1223.52,1212.59 1224.11,1212.57 1224.7,1212.43 1225.28,1210.92 1225.87,1212.42 1226.45,1210.7 1227.04,1211.63 1227.63,1211.27 1228.21,1211.41 1228.8,1212.46 1229.39,1212.47 1229.97,1210.96 1230.56,1213.36 1231.15,1214.4 1231.73,1215.39 1232.32,1215.99 1232.91,1215.53 1233.49,1212.5 1234.08,1209.59 1234.66,1209.15 1235.25,1207.42 1235.84,1207.38 1236.42,1207.16 1237.01,1205.75 1237.6,1207.2 1238.18,1208.7 1238.77,1203.13 1239.36,1204.47 1239.94,1207.49 1240.53,1207.65 1241.11,1207.54 1241.7,1209.18 1242.29,1207.47 1242.87,1207.29 1243.46,1206.09 1244.05,1206.38 1244.63,1205.28 1245.22,1202.61 1245.81,1203.77 1246.39,1205.45 1246.98,1202.82 1247.57,1203.06 1248.15,1202.97 1248.74,1203.38 1249.32,1202.16 1249.91,1201.02 1250.5,1202.79 1251.08,1203.1 1251.67,1206.01 1252.26,1206.16 1252.84,1206.24 1253.43,1206.12 1254.02,1203.48 1254.6,1203.81 1255.19,1203.99 1255.78,1205.42 1256.36,1205.03 1256.95,1203.8 1257.53,1204.1 1258.12,1204.41 1258.71,1203.03 1259.29,1204.45 1259.88,1203.56 1260.47,1203.43 1261.05,1204.82 1261.64,1206.25 1262.23,1209.14 1262.81,1207.9 1263.4,1210.71 1263.98,1211.78 1264.57,1211.26 1265.16,1212.53 1265.74,1210.62 1266.33,1209.19 1266.92,1207.75 1267.5,1207.55 1268.09,1204.55 1268.68,1206.08 1269.26,1207.23 1269.85,1212.7 1270.44,1212.52 1271.02,1210.73 1271.61,1210.58 1272.19,1207.62 1272.78,1204.98 1273.37,1205.17 1273.95,1208.2 1274.54,1206.56 1275.13,1208.32 1275.71,1211.17 1276.3,1209.61 1276.89,1209.33 1277.47,1211.9 1278.06,1213.36 1278.65,1215.78 1279.23,1212.04 1279.82,1216.05 1280.4,1218.25 1280.99,1213.36 1281.58,1210.15 1282.16,1210.18 1282.75,1204.56 1283.34,1203.38 1283.92,1199.25 1284.51,1201.04 1285.1,1201.61 1285.68,1202.05 1286.27,1202.44 1286.86,1205.29 1287.44,1205.46 1288.03,1205.79 1288.61,1203.19 1289.2,1202.05 1289.79,1199.61 1290.37,1199.88 1290.96,1202 1291.55,1202.31 1292.13,1201.22 1292.72,1201.17 1293.31,1201.65 1293.89,1200.31 1294.48,1199.45 1295.06,1204.07 1295.65,1204.4 1296.24,1204.55 1296.82,1205.92 1297.41,1203.05 1298,1203.46 1298.58,1203.58 1299.17,1201.25 1299.76,1202.63 1300.34,1204.25 1300.93,1204.2 1301.52,1204.58 1302.1,1203.24 1302.69,1202.11 1303.27,1200.87 1303.86,1201.06 1304.45,1199.71 1305.03,1200.14 1305.62,1198.86 1306.21,1196.55 1306.79,1200.06 1307.38,1197.38 1307.97,1197.92 1308.55,1199.51 1309.14,1199.85 1309.73,1201.69 1310.31,1203.4 1310.9,1200.83 1311.48,1202.47 1312.07,1201.12 1312.66,1201.61 1313.24,1203.51 1313.83,1203.63 1314.42,1205.17 1315,1203.94 1315.59,1201.27 1316.18,1203.14 1316.76,1200.58 1317.35,1200.87 1317.93,1201.51 1318.52,1198.97 1319.11,1200.84 1319.69,1199.66 1320.28,1200.26 1320.87,1206.06 1321.45,1206.08 1322.04,1203.45 1322.63,1206.54 1323.21,1206.76 1323.8,1207.08 1324.39,1205.65 1324.97,1205.76 1325.56,1205.83 1326.14,1207.12 1326.73,1207.06 1327.32,1205.25 1327.9,1206.7 1328.49,1206.5 1329.08,1206.66 1329.66,1206.33 1330.25,1206.33 1330.84,1206.29 1331.42,1207.76 1332.01,1209.22 1332.6,1207.65 1333.18,1208.93 1333.77,1207.48 1334.35,1205.92 1334.94,1205.92 1335.53,1204.59 1336.11,1207.57 1336.7,1207.32 1337.29,1204.52 1337.87,1204.42 1338.46,1201.4 1339.05,1202.87 1339.63,1202.98 1340.22,1201.42 1340.8,1197.62 1341.39,1198.39 1341.98,1197.31 1342.56,1198.02 1343.15,1199.96 1343.74,1201.77 1344.32,1200.86 1344.91,1201.32 1345.5,1199.12 1346.08,1202.28 1346.67,1201.08 1347.26,1201.35 1347.84,1200.26 1348.43,1200.49 1349.01,1199.32 1349.6,1202.5 1350.19,1202.9 1350.77,1201.49 1351.36,1200.53 1351.95,1201.03 1352.53,1201.32 1353.12,1201.69 1353.71,1203.58 1354.29,1204.79 1354.88,1203.65 1355.47,1203.34 1356.05,1203.42 1356.64,1207.68 1357.22,1208.65 1357.81,1210.06 1358.4,1215.38 1358.98,1217.61 1359.57,1216.88 1360.16,1216.47 1360.74,1218.68 1361.33,1218.31 1361.92,1218.01 1362.5,1216.28 1363.09,1215.94 1363.68,1215.44 1364.26,1213.66 1364.85,1217.15 1365.43,1218.24 1366.02,1215.69 1366.61,1218.16 1367.19,1217.62 1367.78,1218.55 1368.37,1217.92 1368.95,1215.87 1369.54,1218.27 1370.13,1217.8 1370.71,1219.63 1371.3,1217.73 1371.88,1218.48 1372.47,1219.29 1373.06,1218.46 1373.64,1217.99 1374.23,1215.8 1374.82,1216.86 1375.4,1212.37 1375.99,1209.08 1376.58,1210.1 1377.16,1208.12 1377.75,1203.79 1378.34,1203.87 1378.92,1204.54 1379.51,1204.73 1380.09,1206.25 1380.68,1203.36 1381.27,1203.39 1381.85,1204.88 1382.44,1204.85 1383.03,1206.55 1383.61,1205.1 1384.2,1205.07 1384.79,1209.44 1385.37,1209.7 1385.96,1209.68 1386.55,1206.98 1387.13,1204.03 1387.72,1202.69 1388.3,1204.57 1388.89,1206.24 1389.48,1205.12 1390.06,1205.52 1390.65,1205.4 1391.24,1205.46 1391.82,1207.15 1392.41,1205.54 1393,1209.55 1393.58,1207.8 1394.17,1206.42 1394.75,1207.61 1395.34,1208.88 1395.93,1209.25 1396.51,1207.69 1397.1,1206.37 1397.69,1208.98 1398.27,1208.6 1398.86,1208.48 1399.45,1207.08 1400.03,1207.45 1400.62,1207.4 1401.21,1207.44 1401.79,1208.88 1402.38,1207.49 1402.96,1211.98 1403.55,1211.53 1404.14,1208.75 1404.72,1208.24 1405.31,1203.73 1405.9,1202.27 1406.48,1199.78 1407.07,1200.09 1407.66,1200.77 1408.24,1206.77 1408.83,1206.67 1409.42,1206.74 1410,1209.62 1410.59,1209.3 1411.17,1207.89 1411.76,1206.39 1412.35,1206.67 1412.93,1206.85 1413.52,1208.35 1414.11,1211.17 1414.69,1210.88 1415.28,1209.24 1415.87,1208.82 1416.45,1208.82 1417.04,1206.09 1417.63,1206.2 1418.21,1203.19 1418.8,1204.61 1419.38,1204.7 1419.97,1207.36 1420.56,1204.13 1421.14,1202.83 1421.73,1203.09 1422.32,1204.86 1422.9,1206.66 1423.49,1208.18 1424.08,1206.93 1424.66,1208.03 1425.25,1209.42 1425.83,1209.39 1426.42,1209.14 1427.01,1207.56 1427.59,1208.82 1428.18,1207.42 1428.77,1207.32 1429.35,1206.02 1429.94,1201.94 1430.53,1203.57 1431.11,1202.58 1431.7,1205.59 1432.29,1207.08 1432.87,1205.55 1433.46,1205.81 1434.04,1206.12 1434.63,1205.04 1435.22,1203.71 1435.8,1202.7 1436.39,1201.58 1436.98,1202.03 1437.56,1200.86 1438.15,1200.92 1438.74,1199.81 1439.32,1200.24 1439.91,1201.93 1440.5,1202.36 1441.08,1201.02 1441.67,1201.41 1442.25,1204.5 1442.84,1204.46 1443.43,1201.86 1444.01,1203.88 1444.6,1205.58 1445.19,1205.49 1445.77,1205.78 1446.36,1208.51 1446.95,1204.21 1447.53,1204.77 1448.12,1205.04 1448.7,1207.78 1449.29,1210.55 1449.88,1214.41 1450.46,1212.6 1451.05,1210.72 1451.64,1209.16 1452.22,1206.4 1452.81,1203.63 1453.4,1206.88 1453.98,1205.43 1454.57,1209.72 1455.16,1210.74 1455.74,1212.08 1456.33,1210.6 1456.91,1208.82 1457.5,1207.3 1458.09,1208.65 1458.67,1208.59 1459.26,1209.87 1459.85,1212.6 1460.43,1212.14 1461.02,1210.32 1461.61,1208.87 1462.19,1208.93 1462.78,1207.33 1463.37,1205.64 1463.95,1204.4 1464.54,1203.14 1465.12,1202.05 1465.71,1200.86 1466.3,1202.55 1466.88,1205.74 1467.47,1208.49 1468.06,1208.28 1468.64,1208.3 1469.23,1209.76 1469.82,1210.97 1470.4,1209.57 1470.99,1210.95 1471.57,1215.37 1472.16,1212.45 1472.75,1208.15 1473.33,1205.43 1473.92,1205.36 1474.51,1202.16 1475.09,1199.27 1475.68,1199.78 1476.27,1200.1 1476.85,1202.03 1477.44,1198.11 1478.03,1201.17 1478.61,1202.9 1479.2,1201.83 1479.78,1200.59 1480.37,1196.88 1480.96,1201.32 1481.54,1204.45 1482.13,1207.33 1482.72,1207.34 1483.3,1208.62 1483.89,1208.11 1484.48,1209.69 1485.06,1209.42 1485.65,1210.86 1486.24,1209.3 1486.82,1209.17 1487.41,1208.93 1487.99,1203.17 1488.58,1205 1489.17,1206.73 1489.75,1206.75 1490.34,1205.48 1490.93,1205.55 1491.51,1206.83 1492.1,1206.7 1492.69,1209.3 1493.27,1213.23 1493.86,1211.56 1494.45,1211.19 1495.03,1212.39 1495.62,1210.35 1496.2,1210.05 1496.79,1212.72 1497.38,1212.36 1497.96,1213.64 1498.55,1213.43 1499.14,1211.75 1499.72,1209.71 1500.31,1210.77 1500.9,1210.95 1501.48,1210.77 1502.07,1209.07 1502.65,1208.94 1503.24,1210.24 1503.83,1210.18 1504.41,1211.22 1505,1212.41 1505.59,1213.43 1506.17,1214.19 1506.76,1215.38 1507.35,1218.13 1507.93,1216.2 1508.52,1215.72 1509.11,1212.29 1509.69,1211.75 1510.28,1211.62 1510.86,1211.47 1511.45,1211.55 1512.04,1212.92 1512.62,1211.09 1513.21,1209.46 1513.8,1206.66 1514.38,1209.43 1514.97,1210.55 1515.56,1213.36 1516.14,1214.43 1516.73,1214 1517.32,1213.64 1517.9,1212.01 1518.49,1210.37 1519.07,1208.87 1519.66,1208.69 1520.25,1208.47 1520.83,1208.15 1521.42,1205.42 1522.01,1203.93 1522.59,1202.36 1523.18,1201.33 1523.77,1203.04 1524.35,1202.9 1524.94,1203.23 1525.52,1202.13 1526.11,1202.64 1526.7,1203.09 1527.28,1201.77 1527.87,1197.84 1528.46,1198.69 1529.04,1197.77 1529.63,1198.42 1530.22,1198.96 1530.8,1199.52 1531.39,1199.94 1531.98,1199.28 1532.56,1201.05 1533.15,1195.82 1533.73,1196.5 1534.32,1197.17 1534.91,1198.97 1535.49,1200.75 1536.08,1199.99 1536.67,1201.37 1537.25,1201.78 1537.84,1201.94 1538.43,1203.61 1539.01,1203.73 1539.6,1205.45 1540.19,1205.52 1540.77,1205.59 1541.36,1208.5 1541.94,1208.3 1542.53,1208.19 1543.12,1208.04 1543.7,1206.21 1544.29,1208.66 1544.88,1206.97 1545.46,1205.14 1546.05,1209.58 1546.64,1209.72 1547.22,1208.55 1547.81,1211.14 1548.4,1212.16 1548.98,1211.9 1549.57,1211.79 1550.15,1212.85 1550.74,1209.92 1551.33,1206.96 1551.91,1210.24 1552.5,1212.79 1553.09,1212.29 1553.67,1213.38 1554.26,1214.28 1554.85,1213.86 1555.43,1216.38 1556.02,1213 1556.6,1212.67 1557.19,1213.85 1557.78,1213.51 1558.36,1213.03 1558.95,1211.16 1559.54,1211.05 1560.12,1210.68 1560.71,1208.94 1561.3,1207.59 1561.88,1204.44 1562.47,1205.94 1563.06,1204.57 1563.64,1205.83 1564.23,1204.39 1564.81,1204.51 1565.4,1203.19 1565.99,1200.51 1566.57,1202.16 1567.16,1202.18 1567.75,1202.39 1568.33,1198.37 1568.92,1199.02 1569.51,1199.29 1570.09,1201.07 1570.68,1202.3 1571.27,1202.4 1571.85,1206.77 1572.44,1206.83 1573.02,1206.89 1573.61,1212.29 1574.2,1213.23 1574.78,1214.35 1575.37,1211.1 1575.96,1212.41 1576.54,1210.96 1577.13,1209.17 1577.72,1207.61 1578.3,1207.27 1578.89,1204.45 1579.47,1207.31 1580.06,1210.26 1580.65,1211.57 1581.23,1210.02 1581.82,1208.1 1582.41,1207.92 1582.99,1206.6 1583.58,1200.77 1584.17,1199.17 1584.75,1200.88 1585.34,1196.8 1585.93,1196.99 1586.51,1201.94 1587.1,1201.78 1587.68,1200.85 1588.27,1203.94 1588.86,1202.36 1589.44,1204.18 1590.03,1204.14 1590.62,1205.83 1591.2,1204.84 1591.79,1203.74 1592.38,1202.15 1592.96,1200.72 1593.55,1202.6 1594.14,1204.26 1594.72,1202.96 1595.31,1199.98 1595.89,1200.33 1596.48,1202.11 1597.07,1200.79 1597.65,1202.45 1598.24,1205.66 1598.83,1206.8 1599.41,1208.14 1600,1209.46 1600.59,1209.17 1601.17,1206.45 1601.76,1205.23 1602.34,1206.71 1602.93,1206.26 1603.52,1207.8 1604.1,1204.8 1604.69,1202.1 1605.28,1200.63 1605.86,1200.84 1606.45,1202.67 1607.04,1199.87 1607.62,1200.12 1608.21,1199.32 1608.8,1199.58 1609.38,1201.58 1609.97,1201.73 1610.55,1200.45 1611.14,1199.26 1611.73,1203.63 1612.31,1207.87 1612.9,1205.1 1613.49,1207.95 1614.07,1207.72 1614.66,1205.9 1615.25,1206.01 1615.83,1206 1616.42,1207.71 1617.01,1207.69 1617.59,1210.76 1618.18,1211.65 1618.76,1211.6 1619.35,1207.38 1619.94,1208.7 1620.52,1207.23 1621.11,1211.24 1621.7,1213.92 1622.28,1213.97 1622.87,1210.75 1623.46,1213.56 1624.04,1211.96 1624.63,1210.27 1625.22,1209.03 1625.8,1207.36 1626.39,1208.73 1626.97,1212.86 1627.56,1215.18 1628.15,1213.29 1628.73,1214.65 1629.32,1218.64 1629.91,1215.2 1630.49,1213.58 1631.08,1209.23 1631.67,1207.69 1632.25,1203.57 1632.84,1203.88 1633.42,1206.96 1634.01,1206.68 1634.6,1203.98 1635.18,1204.22 1635.77,1201.54 1636.36,1201.59 1636.94,1201.72 1637.53,1203.3 1638.12,1206.43 1638.7,1205.03 1639.29,1203.9 1639.88,1205.18 1640.46,1203.64 1641.05,1208.17 1641.63,1205.29 1642.22,1205.3 1642.81,1208.25 1643.39,1208.23 1643.98,1206.75 1644.57,1206.54 1645.15,1207.91 1645.74,1209.3 1646.33,1208.01 1646.91,1208.09 1647.5,1209.65 1648.09,1211.01 1648.67,1210.96 1649.26,1210.69 1649.84,1210.67 1650.43,1210.3 1651.02,1208.76 1651.6,1208.75 1652.19,1207.51 1652.78,1207.67 1653.36,1207.36 1653.95,1207.18 1654.54,1208.47 1655.12,1211.14 1655.71,1210.93 1656.29,1207.99 1656.88,1202.1 1657.47,1202.51 1658.05,1202.76 1658.64,1200.11 1659.23,1203.38 1659.81,1205.02 1660.4,1201.16 1660.99,1202.51 1661.57,1202.84 1662.16,1204.54 1662.75,1206.16 1663.33,1209.25 1663.92,1206.76 1664.5,1206.84 1665.09,1205.24 1665.68,1204.02 1666.26,1205.77 1666.85,1207.36 1667.44,1207.54 1668.02,1207.61 1668.61,1207.69 1669.2,1207.51 1669.78,1204.53 1670.37,1206.17 1670.96,1209.04 1671.54,1209.04 1672.13,1207.26 1672.71,1206.93 1673.3,1208.48 1673.89,1210.02 1674.47,1208.46 1675.06,1210.24 1675.65,1211.44 1676.23,1206.89 1676.82,1206.75 1677.41,1206.71 1677.99,1207.92 1678.58,1205.24 1679.17,1207.93 1679.75,1210.66 1680.34,1210.82 1680.92,1210.22 1681.51,1209.82 1682.1,1205.23 1682.68,1204.41 1683.27,1208.89 1683.86,1211.93 1684.44,1207.34 1685.03,1207.65 1685.62,1207.9 1686.2,1208.08 1686.79,1208.15 1687.37,1209.42 1687.96,1210.79 1688.55,1210.66 1689.13,1210.44 1689.72,1211.65 1690.31,1210.04 1690.89,1209.97 1691.48,1208.69 1692.07,1209.72 1692.65,1206.96 1693.24,1206.74 1693.83,1206.51 1694.41,1206.44 1695,1203.83 1695.58,1202.41 1696.17,1204.04 1696.76,1202.75 1697.34,1201.62 1697.93,1200.62 1698.52,1202.45 1699.1,1204.38 1699.69,1204.61 1700.28,1206.17 1700.86,1206.13 1701.45,1204.91 1702.04,1205.16 1702.62,1206.84 1703.21,1202.35 1703.79,1201.15 1704.38,1200.09 1704.97,1199.29 1705.55,1200.82 1706.14,1203.86 1706.73,1199 1707.31,1199.84 1707.9,1201.52 1708.49,1200.27 1709.07,1201.94 1709.66,1200.73 1710.24,1201.27 1710.83,1201.67 1711.42,1206.04 1712,1207.53 1712.59,1207.54 1713.18,1207.36 1713.76,1207.35 1714.35,1206.36 1714.94,1203.5 1715.52,1205.26 1716.11,1206.46 1716.7,1202.01 1717.28,1199.24 1717.87,1195.29 1718.45,1194.4 1719.04,1195.17 1719.63,1198.82 1720.21,1199.21 1720.8,1199.71 1721.39,1200.36 1721.97,1200.45 1722.56,1200.75 1723.15,1200.73 1723.73,1201.08 1724.32,1201.57 1724.91,1203.3 1725.49,1200.5 1726.08,1202.12 1726.66,1202.32 1727.25,1201.3 1727.84,1204.4 1728.42,1204.83 1729.01,1202.06 1729.6,1203.81 1730.18,1202.28 1730.77,1205.59 1731.36,1209.66 1731.94,1207.93 1732.53,1207.92 1733.11,1208.05 1733.7,1209.61 1734.29,1211.02 1734.87,1209.48 1735.46,1209.68 1736.05,1209.68 1736.63,1208.39 1737.22,1211.38 1737.81,1207.06 1738.39,1209.54 1738.98,1209.27 1739.57,1209.23 1740.15,1206.56 1740.74,1207.97 1741.32,1210.91 1741.91,1212.24 1742.5,1212.02 1743.08,1210.63 1743.67,1210.66 1744.26,1210.56 1744.84,1210.24 1745.43,1209.96 1746.02,1211.21 1746.6,1213.67 1747.19,1215.91 1747.78,1217.06 1748.36,1213.62 1748.95,1213.22 1749.53,1212.66 1750.12,1213.65 1750.71,1213.21 1751.29,1211.58 1751.88,1212.59 1752.47,1210.74 1753.05,1209.23 1753.64,1208 1754.23,1207.66 1754.81,1207.61 1755.4,1211.81 1755.99,1211.35 1756.57,1211.35 1757.16,1212.41 1757.74,1209.21 1758.33,1207.65 1758.92,1206.12 1759.5,1204.97 1760.09,1209.39 1760.68,1210.52 1761.26,1211.53 1761.85,1212.65 1762.44,1210.83 1763.02,1211.76 1763.61,1211.22 1764.19,1210.98 1764.78,1210.54 1765.37,1211.6 1765.95,1215.61 1766.54,1215.03 1767.13,1214.52 1767.71,1214.09 1768.3,1213.83 1768.89,1213.48 1769.47,1214.5 1770.06,1212.46 1770.65,1214.95 1771.23,1214.55 1771.82,1211.08 1772.4,1211.08 1772.99,1209.28 1773.58,1210.51 1774.16,1209.3 1774.75,1208.93 1775.34,1208.8 1775.92,1208.54 1776.51,1207.4 1777.1,1207.24 1777.68,1204.54 1778.27,1204.57 1778.86,1204.78 1779.44,1203.22 1780.03,1201.71 1780.61,1203.26 1781.2,1201.99 1781.79,1201.1 1782.37,1198.65 1782.96,1199.35 1783.55,1199.47 1784.13,1200.19 1784.72,1203.33 1785.31,1203.76 1785.89,1202.43 1786.48,1205.8 1787.06,1207.35 1787.65,1207.05 1788.24,1208.49 1788.82,1207.49 1789.41,1208.91 1790,1208.68 1790.58,1208.36 1791.17,1206.89 1791.76,1208.05 1792.34,1205.31 1792.93,1206.65 1793.52,1203.69 1794.1,1202.23 1794.69,1202.62 1795.27,1204.3 1795.86,1204.11 1796.45,1205.47 1797.03,1204.23 1797.62,1205.77 1798.21,1207.2 1798.79,1205.87 1799.38,1209.05 1799.97,1208.82 1800.55,1210.26 1801.14,1207.29 1801.73,1207.07 1802.31,1208.23 1802.9,1207.99 1803.48,1210.37 1804.07,1205.97 1804.66,1207.15 1805.24,1204.4 1805.83,1203.26 1806.42,1203.58 1807,1205.21 1807.59,1202.5 1808.18,1204.2 1808.76,1205.77 1809.35,1204.38 1809.94,1206.11 1810.52,1206.16 1811.11,1208.81 1811.69,1208.96 1812.28,1207.35 1812.87,1202.98 1813.45,1203.45 1814.04,1203.6 1814.63,1205.34 1815.21,1204.27 1815.8,1202.96 1816.39,1198.99 1816.97,1197.94 1817.56,1199.69 1818.14,1201.45 1818.73,1200.38 1819.32,1200.99 1819.9,1201.3 1820.49,1204.63 1821.08,1204.42 1821.66,1207.03 1822.25,1207 1822.84,1205.57 1823.42,1209.87 1824.01,1214.26 1824.6,1217.82 1825.18,1214.05 1825.77,1214.97 1826.35,1214.47 1826.94,1218.26 1827.53,1218.97 1828.11,1219.38 1828.7,1219.96 1829.29,1219.22 1829.87,1220.05 1830.46,1218.45 1831.05,1218.01 1831.63,1217.83 1832.22,1215.8 1832.81,1213.92 1833.39,1214.89 1833.98,1213.02 1834.56,1211.5 1835.15,1214.37 1835.74,1215.3 1836.32,1210.72 1836.91,1209.37 1837.5,1207.85 1838.08,1206.54 1838.67,1207.95 1839.26,1208.99 1839.84,1207.56 1840.43,1207.58 1841.01,1209.05 1841.6,1207.63 1842.19,1207.62 1842.77,1207.42 1843.36,1207.39 1843.95,1206.2 1844.53,1206.14 1845.12,1204.9 1845.71,1204.91 1846.29,1207.85 1846.88,1207.47 1847.47,1207.48 1848.05,1208.96 1848.64,1210.23 1849.22,1207.37 1849.81,1205.99 1850.4,1205.77 1850.98,1203.12 1851.57,1203.04 1852.16,1203.04 1852.74,1203.29 1853.33,1201.74 1853.92,1201.91 1854.5,1203.49 1855.09,1202.47 1855.68,1202.95 1856.26,1204.49 1856.85,1201.86 1857.43,1200.74 1858.02,1200.97 1858.61,1202.54 1859.19,1203.94 1859.78,1203.98 1860.37,1204.15 1860.95,1204.36 1861.54,1201.71 1862.13,1203.66 1862.71,1205.26 1863.3,1202.78 1863.88,1201.82 1864.47,1200.82 1865.06,1204.04 1865.64,1205.76 1866.23,1204.39 1866.82,1205.79 1867.4,1205.73 1867.99,1208.61 1868.58,1204.33 1869.16,1204.59 1869.75,1204.65 1870.34,1206.06 1870.92,1204.77 1871.51,1204.92 1872.09,1204.94 1872.68,1205.26 1873.27,1205.61 1873.85,1205.56 1874.44,1207.05 1875.03,1205.46 1875.61,1205.57 1876.2,1205.45 1876.79,1207.07 1877.37,1206.69 1877.96,1203.8 1878.55,1202.46 1879.13,1199.87 1879.72,1197.24 1880.3,1196.1 1880.89,1198.02 1881.48,1198.91 1882.06,1198.13 1882.65,1203.06 1883.24,1203.14 1883.82,1201.95 1884.41,1203.69 1885,1202.33 1885.58,1199.75 1886.17,1203.44 1886.76,1202.51 1887.34,1202.97 1887.93,1201.86 1888.51,1202.15 1889.1,1199.62 1889.69,1200.1 1890.27,1201.97 1890.86,1204.88 1891.45,1204.96 1892.03,1206.66 1892.62,1205.69 1893.21,1204.38 1893.79,1202.8 1894.38,1207.43 1894.96,1205.78 1895.55,1207.36 1896.14,1204.32 1896.72,1204.39 1897.31,1207.6 1897.9,1206.12 1898.48,1206.3 1899.07,1207.44 1899.66,1207.38 1900.24,1208.84 1900.83,1208.82 1901.42,1209.99 1902,1209.84 1902.59,1208.35 1903.17,1206.51 1903.76,1208.33 1904.35,1209.5 1904.93,1206.52 1905.52,1206.26 1906.11,1210.44 1906.69,1210.25 1907.28,1213.07 1907.87,1215.41 1908.45,1217.66 1909.04,1220.17 1909.63,1217.85 1910.21,1215.62 1910.8,1215.28 1911.38,1213.45 1911.97,1214.66 1912.56,1214.05 1913.14,1212.11 1913.73,1207.53 1914.32,1208.88 1914.9,1210.17 1915.49,1209.93 1916.08,1207.26 1916.66,1208.36 1917.25,1209.69 1917.83,1209.6 1918.42,1206.29 1919.01,1206.18 1919.59,1209.11 1920.18,1210.38 1920.77,1211.47 1921.35,1209.88 1921.94,1211.16 1922.53,1209.37 1923.11,1209.31 1923.7,1206.45 1924.29,1207.91 1924.87,1207.31 1925.46,1209.85 1926.04,1209.64 1926.63,1209.63 1927.22,1206.43 1927.8,1208.13 1928.39,1203.9 1928.98,1208.44 1929.56,1206.85 1930.15,1209.69 1930.74,1209.26 1931.32,1204.76 1931.91,1206.43 1932.5,1203.93 1933.08,1199.64 1933.67,1200.35 1934.25,1202.18 1934.84,1200.92 1935.43,1204.27 1936.01,1202.93 1936.6,1204.56 1937.19,1206.14 1937.77,1208.77 1938.36,1208.51 1938.95,1209.63 1939.53,1212.2 1940.12,1210.73 1940.71,1207.62 1941.29,1207.31 1941.88,1205.94 1942.46,1204.38 1943.05,1204.63 1943.64,1206.01 1944.22,1202.97 1944.81,1201.81 1945.4,1203.59 1945.98,1205.15 1946.57,1203.72 1947.16,1204.89 1947.74,1205.11 1948.33,1202.35 1948.91,1202.48 1949.5,1202.91 1950.09,1201.71 1950.67,1200.39 1951.26,1200.78 1951.85,1202.88 1952.43,1204.43 1953.02,1204.2 1953.61,1204.48 1954.19,1207.34 1954.78,1206.01 1955.37,1204.64 1955.95,1204.7 1956.54,1206.16 1957.12,1206.14 1957.71,1207.91 1958.3,1210.69 1958.88,1210.43 1959.47,1210.59 1960.06,1207.51 1960.64,1206.11 1961.23,1214.9 1961.82,1216.11 1962.4,1214.16 1962.99,1212.39 1963.58,1214.84 1964.16,1216.02 1964.75,1216.86 1965.33,1214.83 1965.92,1214.26 1966.51,1212.44 1967.09,1210.57 1967.68,1211.69 1968.27,1210.27 1968.85,1210.2 1969.44,1209.95 1970.03,1209.65 1970.61,1208.13 1971.2,1212.65 1971.78,1210.93 1972.37,1207.85 1972.96,1207.79 1973.54,1207.82 1974.13,1206.61 1974.72,1206.76 1975.3,1205.28 1975.89,1205.19 1976.48,1207.06 1977.06,1209.81 1977.65,1211.17 1978.24,1210.95 1978.82,1209 1979.41,1207.33 1979.99,1207.45 1980.58,1207.59 1981.17,1204.68 1981.75,1207.65 1982.34,1207.75 1982.93,1207.49 1983.51,1206.32 1984.1,1205.03 1984.69,1205.16 1985.27,1208.11 1985.86,1209.17 1986.45,1211.82 1987.03,1214.48 1987.62,1212.58 1988.2,1212.42 1988.79,1211.95 1989.38,1217.41 1989.96,1216.95 1990.55,1217.73 1991.14,1216.95 1991.72,1217.86 1992.31,1217.22 1992.9,1215.34 1993.48,1213.68 1994.07,1215.99 1994.65,1215.54 1995.24,1215.15 1995.83,1217.59 1996.41,1216.94 1997,1212.04 1997.59,1211.62 1998.17,1212.73 1998.76,1214.09 1999.35,1212.21 1999.93,1213.45 2000.52,1212.06 2001.11,1210.11 2001.69,1212.62 2002.28,1210.71 2002.86,1208.89 2003.45,1211.56 2004.04,1212.3 2004.62,1214.98 2005.21,1218.66 2005.8,1218.15 2006.38,1216.17 2006.97,1211.51 2007.56,1211.14 2008.14,1209.44 2008.73,1206.5 2009.32,1207.45 2009.9,1206.27 2010.49,1207.08 2011.07,1199.84 2011.66,1200.01 2012.25,1197.31 2012.83,1196.19 2013.42,1196.75 2014.01,1196.03 2014.59,1192.13 2015.18,1192.89 2015.77,1193.49 2016.35,1186.94 2016.94,1187.97 2017.53,1190.25 2018.11,1189.65 2018.7,1187.61 2019.28,1188.58 2019.87,1189.49 2020.46,1192.04 2021.04,1192.84 2021.63,1195.23 2022.22,1194.26 2022.8,1195.11 2023.39,1192.79 2023.98,1193.43 2024.56,1195.51 2025.15,1196.23 2025.73,1196.62 2026.32,1198.57 2026.91,1197.87 2027.49,1198.72 2028.08,1199.18 2028.67,1199.59 2029.25,1201.64 2029.84,1201.74 2030.43,1202.07 2031.01,1202.21 2031.6,1202.71 2032.19,1204.5 2032.77,1203.32 2033.36,1203.55 2033.94,1203.85 2034.53,1203.85 2035.12,1206.76 2035.7,1206.89 2036.29,1203.96 2036.88,1201.28 2037.46,1201.71 2038.05,1200.47 2038.64,1199.69 2039.22,1201.33 2039.81,1201.76 2040.4,1203.56 2040.98,1204.74 2041.57,1206.29 2042.15,1204.86 2042.74,1204.75 2043.33,1204.78 2043.91,1204.87 2044.5,1203.37 2045.09,1203.69 2045.67,1206.81 2046.26,1205.5 2046.85,1207.16 2047.43,1205.76 2048.02,1204.59 2048.6,1206.08 2049.19,1205.02 2049.78,1206.27 2050.36,1205.06 2050.95,1202.19 2051.54,1205.2 2052.12,1206.82 2052.71,1208.46 2053.3,1208.33 2053.88,1209.98 2054.47,1207.11 2055.06,1204.1 2055.64,1207.22 2056.23,1207.5 2056.81,1207.77 2057.4,1206.17 2057.99,1210.61 2058.57,1210.56 2059.16,1212.93 2059.75,1212.54 2060.33,1213.98 2060.92,1213.8 2061.51,1212.16 2062.09,1210.38 2062.68,1208.76 2063.27,1214.2 2063.85,1211.01 2064.44,1210.66 2065.02,1214.37 2065.61,1214.07 2066.2,1210.94 2066.78,1210.83 2067.37,1212.27 2067.96,1209.15 2068.54,1207.27 2069.13,1209.07 2069.72,1208.61 2070.3,1208.59 2070.89,1204.5 2071.48,1204.63 2072.06,1206.21 2072.65,1209.22 2073.23,1210.37 2073.82,1210.2 2074.41,1207.23 2074.99,1207.32 2075.58,1207.03 2076.17,1206.75 2076.75,1209.37 2077.34,1208.94 2077.93,1207.17 2078.51,1207.07 2079.1,1206.98 2079.68,1206.73 2080.27,1207.01 2080.86,1205.49 2081.44,1208.05 2082.03,1208.24 2082.62,1206.5 2083.2,1207.99 2083.79,1205 2084.38,1205.12 2084.96,1203.91 2085.55,1204.41 2086.14,1203.16 2086.72,1203.29 2087.31,1200.47 2087.89,1196.73 2088.48,1198.36 2089.07,1199.96 2089.65,1200.36 2090.24,1199.32 2090.83,1202.35 2091.41,1199.58 2092,1200.04 2092.59,1199.19 2093.17,1201.1 2093.76,1203.16 2094.35,1203.66 2094.93,1205.12 2095.52,1205.28 2096.1,1208.29 2096.69,1208.08 2097.28,1206.28 2097.86,1207.89 2098.45,1207.62 2099.04,1206.28 2099.62,1205.09 2100.21,1205.11 2100.8,1204.14 2101.38,1202.72 2101.97,1199.93 2102.55,1198.79 2103.14,1203.13 2103.73,1206.11 2104.31,1210.23 2104.9,1211.69 2105.49,1214.29 2106.07,1213.99 2106.66,1214.79 2107.25,1215.86 2107.83,1215.16 2108.42,1213.2 2109.01,1214.13 2109.59,1215.18 2110.18,1214.83 2110.76,1213.02 2111.35,1212.83 2111.94,1213.82 2112.52,1220.45 2113.11,1219.6 2113.7,1217.42 2114.28,1215.37 2114.87,1216.47 2115.46,1217.47 2116.04,1218.26 2116.63,1219.04 2117.22,1221.04 2117.8,1218.85 2118.39,1215.57 2118.97,1216.56 2119.56,1217.52 2120.15,1217.29 2120.73,1215.09 2121.32,1213.13 2121.91,1214.54 2122.49,1214.3 2123.08,1208.28 2123.67,1209.39 2124.25,1209.07 2124.84,1204.7 2125.42,1202.29 2126.01,1202.48 2126.6,1204.01 2127.18,1202.63 2127.77,1202.77 2128.36,1204.34 2128.94,1201.83 2129.53,1203.54 2130.12,1203.54 2130.7,1202.06 2131.29,1196.65 2131.88,1197.18 2132.46,1194.64 2133.05,1195.48 2133.63,1196.09 2134.22,1197.76 2134.81,1199.67 2135.39,1201.39 2135.98,1200.18 2136.57,1201.96 2137.15,1203.57 2137.74,1202.16 2138.33,1205.48 2138.91,1206.69 2139.5,1203.57 2140.09,1202.33 2140.67,1203.79 2141.26,1205.25 2141.84,1203.51 2142.43,1203.69 2143.02,1201.08 2143.6,1199.64 2144.19,1198.73 2144.78,1200.94 2145.36,1201.29 2145.95,1201.62 2146.54,1201.98 2147.12,1204.73 2147.71,1204.91 2148.3,1203.56 2148.88,1202.41 2149.47,1201.22 2150.05,1197.36 2150.64,1202.23 2151.23,1202.28 2151.81,1202.76 2152.4,1201.62 2152.99,1202.05 2153.57,1205.23 2154.16,1205.37 2154.75,1205.39 2155.33,1208.38 2155.92,1208.48 2156.5,1208.8 2157.09,1208.34 2157.68,1206.94 2158.26,1209.56 \"/>\n<path clip-path=\"url(#clip612)\" d=\"M986.025 1207.35 L986.612 1207.35 L987.198 1207.35 L987.785 1207.35 L988.371 1207.35 L988.957 1207.35 L989.544 1207.35 L990.13 1207.35 L990.717 1207.35 L991.303 1207.35 L991.889 1207.35 L992.476 1207.35 L993.062 1207.35 L993.649 1207.35 L994.235 1207.35 L994.822 1207.35 L995.408 1207.35 L995.994 1207.35 L996.581 1207.35 L997.167 1207.35 L997.754 1207.35 L998.34 1207.35 L998.926 1207.35 L999.513 1207.35 L1000.1 1207.35 L1000.69 1207.35 L1001.27 1207.35 L1001.86 1207.35 L1002.44 1207.35 L1003.03 1207.35 L1003.62 1207.35 L1004.2 1207.35 L1004.79 1207.35 L1005.38 1207.35 L1005.96 1207.35 L1006.55 1207.35 L1007.14 1207.35 L1007.72 1207.35 L1008.31 1207.35 L1008.9 1207.35 L1009.48 1207.35 L1010.07 1207.35 L1010.65 1207.35 L1011.24 1207.35 L1011.83 1207.35 L1012.41 1207.35 L1013 1207.35 L1013.59 1207.35 L1014.17 1207.35 L1014.76 1207.35 L1015.35 1207.35 L1015.93 1207.35 L1016.52 1207.35 L1017.11 1207.35 L1017.69 1207.35 L1018.28 1207.35 L1018.86 1207.35 L1019.45 1207.35 L1020.04 1207.35 L1020.62 1207.35 L1021.21 1207.35 L1021.8 1207.35 L1022.38 1207.35 L1022.97 1207.35 L1023.56 1207.35 L1024.14 1207.35 L1024.73 1207.35 L1025.32 1207.35 L1025.9 1207.35 L1026.49 1207.35 L1027.07 1207.35 L1027.66 1207.35 L1028.25 1207.35 L1028.83 1207.35 L1029.42 1207.35 L1030.01 1207.35 L1030.59 1207.35 L1031.18 1207.35 L1031.77 1207.35 L1032.35 1207.35 L1032.94 1207.35 L1033.52 1207.35 L1034.11 1207.35 L1034.7 1207.35 L1035.28 1207.35 L1035.87 1207.35 L1036.46 1207.35 L1037.04 1207.35 L1037.63 1207.35 L1038.22 1207.35 L1038.8 1207.35 L1039.39 1207.35 L1039.98 1207.35 L1040.56 1207.35 L1041.15 1207.35 L1041.73 1207.35 L1042.32 1207.35 L1042.91 1207.35 L1043.49 1207.35 L1044.08 1207.35 L1044.67 1207.35 L1045.25 1207.35 L1045.84 1207.35 L1046.43 1207.35 L1047.01 1207.35 L1047.6 1207.35 L1048.19 1207.35 L1048.77 1207.35 L1049.36 1207.35 L1049.94 1207.35 L1050.53 1207.35 L1051.12 1207.35 L1051.7 1207.35 L1052.29 1207.35 L1052.88 1207.35 L1053.46 1207.35 L1054.05 1207.35 L1054.64 1207.35 L1055.22 1207.35 L1055.81 1207.35 L1056.39 1207.35 L1056.98 1207.35 L1057.57 1207.35 L1058.15 1207.35 L1058.74 1207.35 L1059.33 1207.35 L1059.91 1207.35 L1060.5 1207.35 L1061.09 1207.35 L1061.67 1207.35 L1062.26 1207.35 L1062.85 1207.35 L1063.43 1207.35 L1064.02 1207.35 L1064.6 1207.35 L1065.19 1207.35 L1065.78 1207.35 L1066.36 1207.35 L1066.95 1207.35 L1067.54 1207.35 L1068.12 1207.35 L1068.71 1207.35 L1069.3 1207.35 L1069.88 1207.35 L1070.47 1207.35 L1071.06 1207.35 L1071.64 1207.35 L1072.23 1207.35 L1072.81 1207.35 L1073.4 1207.35 L1073.99 1207.35 L1074.57 1207.35 L1075.16 1207.35 L1075.75 1207.35 L1076.33 1207.35 L1076.92 1207.35 L1077.51 1207.35 L1078.09 1207.35 L1078.68 1207.35 L1079.26 1207.35 L1079.85 1207.35 L1080.44 1207.35 L1081.02 1207.35 L1081.61 1207.35 L1082.2 1207.35 L1082.78 1207.35 L1083.37 1207.35 L1083.96 1207.35 L1084.54 1207.35 L1085.13 1207.35 L1085.72 1207.35 L1086.3 1207.35 L1086.89 1207.35 L1087.47 1207.35 L1088.06 1207.35 L1088.65 1207.35 L1089.23 1207.35 L1089.82 1207.35 L1090.41 1207.35 L1090.99 1207.35 L1091.58 1207.35 L1092.17 1207.35 L1092.75 1207.35 L1093.34 1207.35 L1093.93 1207.35 L1094.51 1207.35 L1095.1 1207.35 L1095.68 1207.35 L1096.27 1207.35 L1096.86 1207.35 L1097.44 1207.35 L1098.03 1207.35 L1098.62 1207.35 L1099.2 1207.35 L1099.79 1207.35 L1100.38 1207.35 L1100.96 1207.35 L1101.55 1207.35 L1102.14 1207.35 L1102.72 1207.35 L1103.31 1207.35 L1103.89 1207.35 L1104.48 1207.35 L1105.07 1207.35 L1105.65 1207.35 L1106.24 1207.35 L1106.83 1207.35 L1107.41 1207.35 L1108 1207.35 L1108.59 1207.35 L1109.17 1207.35 L1109.76 1207.35 L1110.34 1207.35 L1110.93 1207.35 L1111.52 1207.35 L1112.1 1207.35 L1112.69 1207.35 L1113.28 1207.35 L1113.86 1207.35 L1114.45 1207.35 L1115.04 1207.35 L1115.62 1207.35 L1116.21 1207.35 L1116.8 1207.35 L1117.38 1207.35 L1117.97 1207.35 L1118.55 1207.35 L1119.14 1207.35 L1119.73 1207.35 L1120.31 1207.35 L1120.9 1207.35 L1121.49 1207.35 L1122.07 1207.35 L1122.66 1207.35 L1123.25 1207.35 L1123.83 1207.35 L1124.42 1207.35 L1125.01 1207.35 L1125.59 1207.35 L1126.18 1207.35 L1126.76 1207.35 L1127.35 1207.35 L1127.94 1207.35 L1128.52 1207.35 L1129.11 1207.35 L1129.7 1207.35 L1130.28 1207.35 L1130.87 1207.35 L1131.46 1207.35 L1132.04 1207.35 L1132.63 1207.35 L1133.21 1207.35 L1133.8 1207.35 L1134.39 1207.35 L1134.97 1207.35 L1135.56 1207.35 L1136.15 1207.35 L1136.73 1207.35 L1137.32 1207.35 L1137.91 1207.35 L1138.49 1207.35 L1139.08 1207.35 L1139.67 1207.35 L1140.25 1207.35 L1140.84 1207.35 L1141.42 1207.35 L1142.01 1207.35 L1142.6 1207.35 L1143.18 1207.35 L1143.77 1207.35 L1144.36 1207.35 L1144.94 1207.35 L1145.53 1207.35 L1146.12 1207.35 L1146.7 1207.35 L1147.29 1207.35 L1147.88 1207.35 L1148.46 1207.35 L1149.05 1207.35 L1149.63 1207.35 L1150.22 1207.35 L1150.81 1207.35 L1151.39 1207.35 L1151.98 1207.35 L1152.57 1207.35 L1153.15 1207.35 L1153.74 1207.35 L1154.33 1207.35 L1154.91 1207.35 L1155.5 1207.35 L1156.09 1207.35 L1156.67 1207.35 L1157.26 1207.35 L1157.84 1207.35 L1158.43 1207.35 L1159.02 1207.35 L1159.6 1207.35 L1160.19 1207.35 L1160.78 1207.35 L1161.36 1207.35 L1161.95 1207.35 L1162.54 1207.35 L1163.12 1207.35 L1163.71 1207.35 L1164.29 1207.35 L1164.88 1207.35 L1165.47 1207.35 L1166.05 1207.35 L1166.64 1207.35 L1167.23 1207.35 L1167.81 1207.35 L1168.4 1207.35 L1168.99 1207.35 L1169.57 1207.35 L1170.16 1207.35 L1170.75 1207.35 L1171.33 1207.35 L1171.92 1207.35 L1172.5 1207.35 L1173.09 1207.35 L1173.68 1207.35 L1174.26 1207.35 L1174.85 1207.35 L1175.44 1207.35 L1176.02 1207.35 L1176.61 1207.35 L1177.2 1207.35 L1177.78 1207.35 L1178.37 1207.35 L1178.96 1207.35 L1179.54 1207.35 L1180.13 1207.35 L1180.71 1207.35 L1181.3 1207.35 L1181.89 1207.35 L1182.47 1207.35 L1183.06 1207.35 L1183.65 1207.35 L1184.23 1207.35 L1184.82 1207.35 L1185.41 1207.35 L1185.99 1207.35 L1186.58 1207.35 L1187.16 1207.35 L1187.75 1207.35 L1188.34 1207.35 L1188.92 1207.35 L1189.51 1207.35 L1190.1 1207.35 L1190.68 1207.35 L1191.27 1207.35 L1191.86 1207.35 L1192.44 1207.35 L1193.03 1207.35 L1193.62 1207.35 L1194.2 1207.35 L1194.79 1207.35 L1195.37 1207.35 L1195.96 1207.35 L1196.55 1207.35 L1197.13 1207.35 L1197.72 1207.35 L1198.31 1207.35 L1198.89 1207.35 L1199.48 1207.35 L1200.07 1207.35 L1200.65 1207.35 L1201.24 1207.35 L1201.83 1207.35 L1202.41 1207.35 L1203 1207.35 L1203.58 1207.35 L1204.17 1207.35 L1204.76 1207.35 L1205.34 1207.35 L1205.93 1207.35 L1206.52 1207.35 L1207.1 1207.35 L1207.69 1207.35 L1208.28 1207.35 L1208.86 1207.35 L1209.45 1207.35 L1210.03 1207.35 L1210.62 1207.35 L1211.21 1207.35 L1211.79 1207.35 L1212.38 1207.35 L1212.97 1207.35 L1213.55 1207.35 L1214.14 1207.35 L1214.73 1207.35 L1215.31 1207.35 L1215.9 1207.35 L1216.49 1207.35 L1217.07 1207.35 L1217.66 1207.35 L1218.24 1207.35 L1218.83 1207.35 L1219.42 1207.35 L1220 1207.35 L1220.59 1207.35 L1221.18 1207.35 L1221.76 1207.35 L1222.35 1207.35 L1222.94 1207.35 L1223.52 1207.35 L1224.11 1207.35 L1224.7 1207.35 L1225.28 1207.35 L1225.87 1207.35 L1226.45 1207.35 L1227.04 1207.35 L1227.63 1207.35 L1228.21 1207.35 L1228.8 1207.35 L1229.39 1207.35 L1229.97 1207.35 L1230.56 1207.35 L1231.15 1207.35 L1231.73 1207.35 L1232.32 1207.35 L1232.91 1207.35 L1233.49 1207.35 L1234.08 1207.35 L1234.66 1207.35 L1235.25 1207.35 L1235.84 1207.35 L1236.42 1207.35 L1237.01 1207.35 L1237.6 1207.35 L1238.18 1207.35 L1238.77 1207.35 L1239.36 1207.35 L1239.94 1207.35 L1240.53 1207.35 L1241.11 1207.35 L1241.7 1207.35 L1242.29 1207.35 L1242.87 1207.35 L1243.46 1207.35 L1244.05 1207.35 L1244.63 1207.35 L1245.22 1207.35 L1245.81 1207.35 L1246.39 1207.35 L1246.98 1207.35 L1247.57 1207.35 L1248.15 1207.35 L1248.74 1207.35 L1249.32 1207.35 L1249.91 1207.35 L1250.5 1207.35 L1251.08 1207.35 L1251.67 1207.35 L1252.26 1207.35 L1252.84 1207.35 L1253.43 1207.35 L1254.02 1207.35 L1254.6 1207.35 L1255.19 1207.35 L1255.78 1207.35 L1256.36 1207.35 L1256.95 1207.35 L1257.53 1207.35 L1258.12 1207.35 L1258.71 1207.35 L1259.29 1207.35 L1259.88 1207.35 L1260.47 1207.35 L1261.05 1207.35 L1261.64 1207.35 L1262.23 1207.35 L1262.81 1207.35 L1263.4 1207.35 L1263.98 1207.35 L1264.57 1207.35 L1265.16 1207.35 L1265.74 1207.35 L1266.33 1207.35 L1266.92 1207.35 L1267.5 1207.35 L1268.09 1207.35 L1268.68 1207.35 L1269.26 1207.35 L1269.85 1207.35 L1270.44 1207.35 L1271.02 1207.35 L1271.61 1207.35 L1272.19 1207.35 L1272.78 1207.35 L1273.37 1207.35 L1273.95 1207.35 L1274.54 1207.35 L1275.13 1207.35 L1275.71 1207.35 L1276.3 1207.35 L1276.89 1207.35 L1277.47 1207.35 L1278.06 1207.35 L1278.65 1207.35 L1279.23 1207.35 L1279.82 1207.35 L1280.4 1207.35 L1280.99 1207.35 L1281.58 1207.35 L1282.16 1207.35 L1282.75 1207.35 L1283.34 1207.35 L1283.92 1207.35 L1284.51 1207.35 L1285.1 1207.35 L1285.68 1207.35 L1286.27 1207.35 L1286.86 1207.35 L1287.44 1207.35 L1288.03 1207.35 L1288.61 1207.35 L1289.2 1207.35 L1289.79 1207.35 L1290.37 1207.35 L1290.96 1207.35 L1291.55 1207.35 L1292.13 1207.35 L1292.72 1207.35 L1293.31 1207.35 L1293.89 1207.35 L1294.48 1207.35 L1295.06 1207.35 L1295.65 1207.35 L1296.24 1207.35 L1296.82 1207.35 L1297.41 1207.35 L1298 1207.35 L1298.58 1207.35 L1299.17 1207.35 L1299.76 1207.35 L1300.34 1207.35 L1300.93 1207.35 L1301.52 1207.35 L1302.1 1207.35 L1302.69 1207.35 L1303.27 1207.35 L1303.86 1207.35 L1304.45 1207.35 L1305.03 1207.35 L1305.62 1207.35 L1306.21 1207.35 L1306.79 1207.35 L1307.38 1207.35 L1307.97 1207.35 L1308.55 1207.35 L1309.14 1207.35 L1309.73 1207.35 L1310.31 1207.35 L1310.9 1207.35 L1311.48 1207.35 L1312.07 1207.35 L1312.66 1207.35 L1313.24 1207.35 L1313.83 1207.35 L1314.42 1207.35 L1315 1207.35 L1315.59 1207.35 L1316.18 1207.35 L1316.76 1207.35 L1317.35 1207.35 L1317.93 1207.35 L1318.52 1207.35 L1319.11 1207.35 L1319.69 1207.35 L1320.28 1207.35 L1320.87 1207.35 L1321.45 1207.35 L1322.04 1207.35 L1322.63 1207.35 L1323.21 1207.35 L1323.8 1207.35 L1324.39 1207.35 L1324.97 1207.35 L1325.56 1207.35 L1326.14 1207.35 L1326.73 1207.35 L1327.32 1207.35 L1327.9 1207.35 L1328.49 1207.35 L1329.08 1207.35 L1329.66 1207.35 L1330.25 1207.35 L1330.84 1207.35 L1331.42 1207.35 L1332.01 1207.35 L1332.6 1207.35 L1333.18 1207.35 L1333.77 1207.35 L1334.35 1207.35 L1334.94 1207.35 L1335.53 1207.35 L1336.11 1207.35 L1336.7 1207.35 L1337.29 1207.35 L1337.87 1207.35 L1338.46 1207.35 L1339.05 1207.35 L1339.63 1207.35 L1340.22 1207.35 L1340.8 1207.35 L1341.39 1207.35 L1341.98 1207.35 L1342.56 1207.35 L1343.15 1207.35 L1343.74 1207.35 L1344.32 1207.35 L1344.91 1207.35 L1345.5 1207.35 L1346.08 1207.35 L1346.67 1207.35 L1347.26 1207.35 L1347.84 1207.35 L1348.43 1207.35 L1349.01 1207.35 L1349.6 1207.35 L1350.19 1207.35 L1350.77 1207.35 L1351.36 1207.35 L1351.95 1207.35 L1352.53 1207.35 L1353.12 1207.35 L1353.71 1207.35 L1354.29 1207.35 L1354.88 1207.35 L1355.47 1207.35 L1356.05 1207.35 L1356.64 1207.35 L1357.22 1207.35 L1357.81 1207.35 L1358.4 1207.35 L1358.98 1207.35 L1359.57 1207.35 L1360.16 1207.35 L1360.74 1207.35 L1361.33 1207.35 L1361.92 1207.35 L1362.5 1207.35 L1363.09 1207.35 L1363.68 1207.35 L1364.26 1207.35 L1364.85 1207.35 L1365.43 1207.35 L1366.02 1207.35 L1366.61 1207.35 L1367.19 1207.35 L1367.78 1207.35 L1368.37 1207.35 L1368.95 1207.35 L1369.54 1207.35 L1370.13 1207.35 L1370.71 1207.35 L1371.3 1207.35 L1371.88 1207.35 L1372.47 1207.35 L1373.06 1207.35 L1373.64 1207.35 L1374.23 1207.35 L1374.82 1207.35 L1375.4 1207.35 L1375.99 1207.35 L1376.58 1207.35 L1377.16 1207.35 L1377.75 1207.35 L1378.34 1207.35 L1378.92 1207.35 L1379.51 1207.35 L1380.09 1207.35 L1380.68 1207.35 L1381.27 1207.35 L1381.85 1207.35 L1382.44 1207.35 L1383.03 1207.35 L1383.61 1207.35 L1384.2 1207.35 L1384.79 1207.35 L1385.37 1207.35 L1385.96 1207.35 L1386.55 1207.35 L1387.13 1207.35 L1387.72 1207.35 L1388.3 1207.35 L1388.89 1207.35 L1389.48 1207.35 L1390.06 1207.35 L1390.65 1207.35 L1391.24 1207.35 L1391.82 1207.35 L1392.41 1207.35 L1393 1207.35 L1393.58 1207.35 L1394.17 1207.35 L1394.75 1207.35 L1395.34 1207.35 L1395.93 1207.35 L1396.51 1207.35 L1397.1 1207.35 L1397.69 1207.35 L1398.27 1207.35 L1398.86 1207.35 L1399.45 1207.35 L1400.03 1207.35 L1400.62 1207.35 L1401.21 1207.35 L1401.79 1207.35 L1402.38 1207.35 L1402.96 1207.35 L1403.55 1207.35 L1404.14 1207.35 L1404.72 1207.35 L1405.31 1207.35 L1405.9 1207.35 L1406.48 1207.35 L1407.07 1207.35 L1407.66 1207.35 L1408.24 1207.35 L1408.83 1207.35 L1409.42 1207.35 L1410 1207.35 L1410.59 1207.35 L1411.17 1207.35 L1411.76 1207.35 L1412.35 1207.35 L1412.93 1207.35 L1413.52 1207.35 L1414.11 1207.35 L1414.69 1207.35 L1415.28 1207.35 L1415.87 1207.35 L1416.45 1207.35 L1417.04 1207.35 L1417.63 1207.35 L1418.21 1207.35 L1418.8 1207.35 L1419.38 1207.35 L1419.97 1207.35 L1420.56 1207.35 L1421.14 1207.35 L1421.73 1207.35 L1422.32 1207.35 L1422.9 1207.35 L1423.49 1207.35 L1424.08 1207.35 L1424.66 1207.35 L1425.25 1207.35 L1425.83 1207.35 L1426.42 1207.35 L1427.01 1207.35 L1427.59 1207.35 L1428.18 1207.35 L1428.77 1207.35 L1429.35 1207.35 L1429.94 1207.35 L1430.53 1207.35 L1431.11 1207.35 L1431.7 1207.35 L1432.29 1207.35 L1432.87 1207.35 L1433.46 1207.35 L1434.04 1207.35 L1434.63 1207.35 L1435.22 1207.35 L1435.8 1207.35 L1436.39 1207.35 L1436.98 1207.35 L1437.56 1207.35 L1438.15 1207.35 L1438.74 1207.35 L1439.32 1207.35 L1439.91 1207.35 L1440.5 1207.35 L1441.08 1207.35 L1441.67 1207.35 L1442.25 1207.35 L1442.84 1207.35 L1443.43 1207.35 L1444.01 1207.35 L1444.6 1207.35 L1445.19 1207.35 L1445.77 1207.35 L1446.36 1207.35 L1446.95 1207.35 L1447.53 1207.35 L1448.12 1207.35 L1448.7 1207.35 L1449.29 1207.35 L1449.88 1207.35 L1450.46 1207.35 L1451.05 1207.35 L1451.64 1207.35 L1452.22 1207.35 L1452.81 1207.35 L1453.4 1207.35 L1453.98 1207.35 L1454.57 1207.35 L1455.16 1207.35 L1455.74 1207.35 L1456.33 1207.35 L1456.91 1207.35 L1457.5 1207.35 L1458.09 1207.35 L1458.67 1207.35 L1459.26 1207.35 L1459.85 1207.35 L1460.43 1207.35 L1461.02 1207.35 L1461.61 1207.35 L1462.19 1207.35 L1462.78 1207.35 L1463.37 1207.35 L1463.95 1207.35 L1464.54 1207.35 L1465.12 1207.35 L1465.71 1207.35 L1466.3 1207.35 L1466.88 1207.35 L1467.47 1207.35 L1468.06 1207.35 L1468.64 1207.35 L1469.23 1207.35 L1469.82 1207.35 L1470.4 1207.35 L1470.99 1207.35 L1471.57 1207.35 L1472.16 1207.35 L1472.75 1207.35 L1473.33 1207.35 L1473.92 1207.35 L1474.51 1207.35 L1475.09 1207.35 L1475.68 1207.35 L1476.27 1207.35 L1476.85 1207.35 L1477.44 1207.35 L1478.03 1207.35 L1478.61 1207.35 L1479.2 1207.35 L1479.78 1207.35 L1480.37 1207.35 L1480.96 1207.35 L1481.54 1207.35 L1482.13 1207.35 L1482.72 1207.35 L1483.3 1207.35 L1483.89 1207.35 L1484.48 1207.35 L1485.06 1207.35 L1485.65 1207.35 L1486.24 1207.35 L1486.82 1207.35 L1487.41 1207.35 L1487.99 1207.35 L1488.58 1207.35 L1489.17 1207.35 L1489.75 1207.35 L1490.34 1207.35 L1490.93 1207.35 L1491.51 1207.35 L1492.1 1207.35 L1492.69 1207.35 L1493.27 1207.35 L1493.86 1207.35 L1494.45 1207.35 L1495.03 1207.35 L1495.62 1207.35 L1496.2 1207.35 L1496.79 1207.35 L1497.38 1207.35 L1497.96 1207.35 L1498.55 1207.35 L1499.14 1207.35 L1499.72 1207.35 L1500.31 1207.35 L1500.9 1207.35 L1501.48 1207.35 L1502.07 1207.35 L1502.65 1207.35 L1503.24 1207.35 L1503.83 1207.35 L1504.41 1207.35 L1505 1207.35 L1505.59 1207.35 L1506.17 1207.35 L1506.76 1207.35 L1507.35 1207.35 L1507.93 1207.35 L1508.52 1207.35 L1509.11 1207.35 L1509.69 1207.35 L1510.28 1207.35 L1510.86 1207.35 L1511.45 1207.35 L1512.04 1207.35 L1512.62 1207.35 L1513.21 1207.35 L1513.8 1207.35 L1514.38 1207.35 L1514.97 1207.35 L1515.56 1207.35 L1516.14 1207.35 L1516.73 1207.35 L1517.32 1207.35 L1517.9 1207.35 L1518.49 1207.35 L1519.07 1207.35 L1519.66 1207.35 L1520.25 1207.35 L1520.83 1207.35 L1521.42 1207.35 L1522.01 1207.35 L1522.59 1207.35 L1523.18 1207.35 L1523.77 1207.35 L1524.35 1207.35 L1524.94 1207.35 L1525.52 1207.35 L1526.11 1207.35 L1526.7 1207.35 L1527.28 1207.35 L1527.87 1207.35 L1528.46 1207.35 L1529.04 1207.35 L1529.63 1207.35 L1530.22 1207.35 L1530.8 1207.35 L1531.39 1207.35 L1531.98 1207.35 L1532.56 1207.35 L1533.15 1207.35 L1533.73 1207.35 L1534.32 1207.35 L1534.91 1207.35 L1535.49 1207.35 L1536.08 1207.35 L1536.67 1207.35 L1537.25 1207.35 L1537.84 1207.35 L1538.43 1207.35 L1539.01 1207.35 L1539.6 1207.35 L1540.19 1207.35 L1540.77 1207.35 L1541.36 1207.35 L1541.94 1207.35 L1542.53 1207.35 L1543.12 1207.35 L1543.7 1207.35 L1544.29 1207.35 L1544.88 1207.35 L1545.46 1207.35 L1546.05 1207.35 L1546.64 1207.35 L1547.22 1207.35 L1547.81 1207.35 L1548.4 1207.35 L1548.98 1207.35 L1549.57 1207.35 L1550.15 1207.35 L1550.74 1207.35 L1551.33 1207.35 L1551.91 1207.35 L1552.5 1207.35 L1553.09 1207.35 L1553.67 1207.35 L1554.26 1207.35 L1554.85 1207.35 L1555.43 1207.35 L1556.02 1207.35 L1556.6 1207.35 L1557.19 1207.35 L1557.78 1207.35 L1558.36 1207.35 L1558.95 1207.35 L1559.54 1207.35 L1560.12 1207.35 L1560.71 1207.35 L1561.3 1207.35 L1561.88 1207.35 L1562.47 1207.35 L1563.06 1207.35 L1563.64 1207.35 L1564.23 1207.35 L1564.81 1207.35 L1565.4 1207.35 L1565.99 1207.35 L1566.57 1207.35 L1567.16 1207.35 L1567.75 1207.35 L1568.33 1207.35 L1568.92 1207.35 L1569.51 1207.35 L1570.09 1207.35 L1570.68 1207.35 L1571.27 1207.35 L1571.85 1207.35 L1572.44 1207.35 L1573.02 1207.35 L1573.61 1207.35 L1574.2 1207.35 L1574.78 1207.35 L1575.37 1207.35 L1575.96 1207.35 L1576.54 1207.35 L1577.13 1207.35 L1577.72 1207.35 L1578.3 1207.35 L1578.89 1207.35 L1579.47 1207.35 L1580.06 1207.35 L1580.65 1207.35 L1581.23 1207.35 L1581.82 1207.35 L1582.41 1207.35 L1582.99 1207.35 L1583.58 1207.35 L1584.17 1207.35 L1584.75 1207.35 L1585.34 1207.35 L1585.93 1207.35 L1586.51 1207.35 L1587.1 1207.35 L1587.68 1207.35 L1588.27 1207.35 L1588.86 1207.35 L1589.44 1207.35 L1590.03 1207.35 L1590.62 1207.35 L1591.2 1207.35 L1591.79 1207.35 L1592.38 1207.35 L1592.96 1207.35 L1593.55 1207.35 L1594.14 1207.35 L1594.72 1207.35 L1595.31 1207.35 L1595.89 1207.35 L1596.48 1207.35 L1597.07 1207.35 L1597.65 1207.35 L1598.24 1207.35 L1598.83 1207.35 L1599.41 1207.35 L1600 1207.35 L1600.59 1207.35 L1601.17 1207.35 L1601.76 1207.35 L1602.34 1207.35 L1602.93 1207.35 L1603.52 1207.35 L1604.1 1207.35 L1604.69 1207.35 L1605.28 1207.35 L1605.86 1207.35 L1606.45 1207.35 L1607.04 1207.35 L1607.62 1207.35 L1608.21 1207.35 L1608.8 1207.35 L1609.38 1207.35 L1609.97 1207.35 L1610.55 1207.35 L1611.14 1207.35 L1611.73 1207.35 L1612.31 1207.35 L1612.9 1207.35 L1613.49 1207.35 L1614.07 1207.35 L1614.66 1207.35 L1615.25 1207.35 L1615.83 1207.35 L1616.42 1207.35 L1617.01 1207.35 L1617.59 1207.35 L1618.18 1207.35 L1618.76 1207.35 L1619.35 1207.35 L1619.94 1207.35 L1620.52 1207.35 L1621.11 1207.35 L1621.7 1207.35 L1622.28 1207.35 L1622.87 1207.35 L1623.46 1207.35 L1624.04 1207.35 L1624.63 1207.35 L1625.22 1207.35 L1625.8 1207.35 L1626.39 1207.35 L1626.97 1207.35 L1627.56 1207.35 L1628.15 1207.35 L1628.73 1207.35 L1629.32 1207.35 L1629.91 1207.35 L1630.49 1207.35 L1631.08 1207.35 L1631.67 1207.35 L1632.25 1207.35 L1632.84 1207.35 L1633.42 1207.35 L1634.01 1207.35 L1634.6 1207.35 L1635.18 1207.35 L1635.77 1207.35 L1636.36 1207.35 L1636.94 1207.35 L1637.53 1207.35 L1638.12 1207.35 L1638.7 1207.35 L1639.29 1207.35 L1639.88 1207.35 L1640.46 1207.35 L1641.05 1207.35 L1641.63 1207.35 L1642.22 1207.35 L1642.81 1207.35 L1643.39 1207.35 L1643.98 1207.35 L1644.57 1207.35 L1645.15 1207.35 L1645.74 1207.35 L1646.33 1207.35 L1646.91 1207.35 L1647.5 1207.35 L1648.09 1207.35 L1648.67 1207.35 L1649.26 1207.35 L1649.84 1207.35 L1650.43 1207.35 L1651.02 1207.35 L1651.6 1207.35 L1652.19 1207.35 L1652.78 1207.35 L1653.36 1207.35 L1653.95 1207.35 L1654.54 1207.35 L1655.12 1207.35 L1655.71 1207.35 L1656.29 1207.35 L1656.88 1207.35 L1657.47 1207.35 L1658.05 1207.35 L1658.64 1207.35 L1659.23 1207.35 L1659.81 1207.35 L1660.4 1207.35 L1660.99 1207.35 L1661.57 1207.35 L1662.16 1207.35 L1662.75 1207.35 L1663.33 1207.35 L1663.92 1207.35 L1664.5 1207.35 L1665.09 1207.35 L1665.68 1207.35 L1666.26 1207.35 L1666.85 1207.35 L1667.44 1207.35 L1668.02 1207.35 L1668.61 1207.35 L1669.2 1207.35 L1669.78 1207.35 L1670.37 1207.35 L1670.96 1207.35 L1671.54 1207.35 L1672.13 1207.35 L1672.71 1207.35 L1673.3 1207.35 L1673.89 1207.35 L1674.47 1207.35 L1675.06 1207.35 L1675.65 1207.35 L1676.23 1207.35 L1676.82 1207.35 L1677.41 1207.35 L1677.99 1207.35 L1678.58 1207.35 L1679.17 1207.35 L1679.75 1207.35 L1680.34 1207.35 L1680.92 1207.35 L1681.51 1207.35 L1682.1 1207.35 L1682.68 1207.35 L1683.27 1207.35 L1683.86 1207.35 L1684.44 1207.35 L1685.03 1207.35 L1685.62 1207.35 L1686.2 1207.35 L1686.79 1207.35 L1687.37 1207.35 L1687.96 1207.35 L1688.55 1207.35 L1689.13 1207.35 L1689.72 1207.35 L1690.31 1207.35 L1690.89 1207.35 L1691.48 1207.35 L1692.07 1207.35 L1692.65 1207.35 L1693.24 1207.35 L1693.83 1207.35 L1694.41 1207.35 L1695 1207.35 L1695.58 1207.35 L1696.17 1207.35 L1696.76 1207.35 L1697.34 1207.35 L1697.93 1207.35 L1698.52 1207.35 L1699.1 1207.35 L1699.69 1207.35 L1700.28 1207.35 L1700.86 1207.35 L1701.45 1207.35 L1702.04 1207.35 L1702.62 1207.35 L1703.21 1207.35 L1703.79 1207.35 L1704.38 1207.35 L1704.97 1207.35 L1705.55 1207.35 L1706.14 1207.35 L1706.73 1207.35 L1707.31 1207.35 L1707.9 1207.35 L1708.49 1207.35 L1709.07 1207.35 L1709.66 1207.35 L1710.24 1207.35 L1710.83 1207.35 L1711.42 1207.35 L1712 1207.35 L1712.59 1207.35 L1713.18 1207.35 L1713.76 1207.35 L1714.35 1207.35 L1714.94 1207.35 L1715.52 1207.35 L1716.11 1207.35 L1716.7 1207.35 L1717.28 1207.35 L1717.87 1207.35 L1718.45 1207.35 L1719.04 1207.35 L1719.63 1207.35 L1720.21 1207.35 L1720.8 1207.35 L1721.39 1207.35 L1721.97 1207.35 L1722.56 1207.35 L1723.15 1207.35 L1723.73 1207.35 L1724.32 1207.35 L1724.91 1207.35 L1725.49 1207.35 L1726.08 1207.35 L1726.66 1207.35 L1727.25 1207.35 L1727.84 1207.35 L1728.42 1207.35 L1729.01 1207.35 L1729.6 1207.35 L1730.18 1207.35 L1730.77 1207.35 L1731.36 1207.35 L1731.94 1207.35 L1732.53 1207.35 L1733.11 1207.35 L1733.7 1207.35 L1734.29 1207.35 L1734.87 1207.35 L1735.46 1207.35 L1736.05 1207.35 L1736.63 1207.35 L1737.22 1207.35 L1737.81 1207.35 L1738.39 1207.35 L1738.98 1207.35 L1739.57 1207.35 L1740.15 1207.35 L1740.74 1207.35 L1741.32 1207.35 L1741.91 1207.35 L1742.5 1207.35 L1743.08 1207.35 L1743.67 1207.35 L1744.26 1207.35 L1744.84 1207.35 L1745.43 1207.35 L1746.02 1207.35 L1746.6 1207.35 L1747.19 1207.35 L1747.78 1207.35 L1748.36 1207.35 L1748.95 1207.35 L1749.53 1207.35 L1750.12 1207.35 L1750.71 1207.35 L1751.29 1207.35 L1751.88 1207.35 L1752.47 1207.35 L1753.05 1207.35 L1753.64 1207.35 L1754.23 1207.35 L1754.81 1207.35 L1755.4 1207.35 L1755.99 1207.35 L1756.57 1207.35 L1757.16 1207.35 L1757.74 1207.35 L1758.33 1207.35 L1758.92 1207.35 L1759.5 1207.35 L1760.09 1207.35 L1760.68 1207.35 L1761.26 1207.35 L1761.85 1207.35 L1762.44 1207.35 L1763.02 1207.35 L1763.61 1207.35 L1764.19 1207.35 L1764.78 1207.35 L1765.37 1207.35 L1765.95 1207.35 L1766.54 1207.35 L1767.13 1207.35 L1767.71 1207.35 L1768.3 1207.35 L1768.89 1207.35 L1769.47 1207.35 L1770.06 1207.35 L1770.65 1207.35 L1771.23 1207.35 L1771.82 1207.35 L1772.4 1207.35 L1772.99 1207.35 L1773.58 1207.35 L1774.16 1207.35 L1774.75 1207.35 L1775.34 1207.35 L1775.92 1207.35 L1776.51 1207.35 L1777.1 1207.35 L1777.68 1207.35 L1778.27 1207.35 L1778.86 1207.35 L1779.44 1207.35 L1780.03 1207.35 L1780.61 1207.35 L1781.2 1207.35 L1781.79 1207.35 L1782.37 1207.35 L1782.96 1207.35 L1783.55 1207.35 L1784.13 1207.35 L1784.72 1207.35 L1785.31 1207.35 L1785.89 1207.35 L1786.48 1207.35 L1787.06 1207.35 L1787.65 1207.35 L1788.24 1207.35 L1788.82 1207.35 L1789.41 1207.35 L1790 1207.35 L1790.58 1207.35 L1791.17 1207.35 L1791.76 1207.35 L1792.34 1207.35 L1792.93 1207.35 L1793.52 1207.35 L1794.1 1207.35 L1794.69 1207.35 L1795.27 1207.35 L1795.86 1207.35 L1796.45 1207.35 L1797.03 1207.35 L1797.62 1207.35 L1798.21 1207.35 L1798.79 1207.35 L1799.38 1207.35 L1799.97 1207.35 L1800.55 1207.35 L1801.14 1207.35 L1801.73 1207.35 L1802.31 1207.35 L1802.9 1207.35 L1803.48 1207.35 L1804.07 1207.35 L1804.66 1207.35 L1805.24 1207.35 L1805.83 1207.35 L1806.42 1207.35 L1807 1207.35 L1807.59 1207.35 L1808.18 1207.35 L1808.76 1207.35 L1809.35 1207.35 L1809.94 1207.35 L1810.52 1207.35 L1811.11 1207.35 L1811.69 1207.35 L1812.28 1207.35 L1812.87 1207.35 L1813.45 1207.35 L1814.04 1207.35 L1814.63 1207.35 L1815.21 1207.35 L1815.8 1207.35 L1816.39 1207.35 L1816.97 1207.35 L1817.56 1207.35 L1818.14 1207.35 L1818.73 1207.35 L1819.32 1207.35 L1819.9 1207.35 L1820.49 1207.35 L1821.08 1207.35 L1821.66 1207.35 L1822.25 1207.35 L1822.84 1207.35 L1823.42 1207.35 L1824.01 1207.35 L1824.6 1207.35 L1825.18 1207.35 L1825.77 1207.35 L1826.35 1207.35 L1826.94 1207.35 L1827.53 1207.35 L1828.11 1207.35 L1828.7 1207.35 L1829.29 1207.35 L1829.87 1207.35 L1830.46 1207.35 L1831.05 1207.35 L1831.63 1207.35 L1832.22 1207.35 L1832.81 1207.35 L1833.39 1207.35 L1833.98 1207.35 L1834.56 1207.35 L1835.15 1207.35 L1835.74 1207.35 L1836.32 1207.35 L1836.91 1207.35 L1837.5 1207.35 L1838.08 1207.35 L1838.67 1207.35 L1839.26 1207.35 L1839.84 1207.35 L1840.43 1207.35 L1841.01 1207.35 L1841.6 1207.35 L1842.19 1207.35 L1842.77 1207.35 L1843.36 1207.35 L1843.95 1207.35 L1844.53 1207.35 L1845.12 1207.35 L1845.71 1207.35 L1846.29 1207.35 L1846.88 1207.35 L1847.47 1207.35 L1848.05 1207.35 L1848.64 1207.35 L1849.22 1207.35 L1849.81 1207.35 L1850.4 1207.35 L1850.98 1207.35 L1851.57 1207.35 L1852.16 1207.35 L1852.74 1207.35 L1853.33 1207.35 L1853.92 1207.35 L1854.5 1207.35 L1855.09 1207.35 L1855.68 1207.35 L1856.26 1207.35 L1856.85 1207.35 L1857.43 1207.35 L1858.02 1207.35 L1858.61 1207.35 L1859.19 1207.35 L1859.78 1207.35 L1860.37 1207.35 L1860.95 1207.35 L1861.54 1207.35 L1862.13 1207.35 L1862.71 1207.35 L1863.3 1207.35 L1863.88 1207.35 L1864.47 1207.35 L1865.06 1207.35 L1865.64 1207.35 L1866.23 1207.35 L1866.82 1207.35 L1867.4 1207.35 L1867.99 1207.35 L1868.58 1207.35 L1869.16 1207.35 L1869.75 1207.35 L1870.34 1207.35 L1870.92 1207.35 L1871.51 1207.35 L1872.09 1207.35 L1872.68 1207.35 L1873.27 1207.35 L1873.85 1207.35 L1874.44 1207.35 L1875.03 1207.35 L1875.61 1207.35 L1876.2 1207.35 L1876.79 1207.35 L1877.37 1207.35 L1877.96 1207.35 L1878.55 1207.35 L1879.13 1207.35 L1879.72 1207.35 L1880.3 1207.35 L1880.89 1207.35 L1881.48 1207.35 L1882.06 1207.35 L1882.65 1207.35 L1883.24 1207.35 L1883.82 1207.35 L1884.41 1207.35 L1885 1207.35 L1885.58 1207.35 L1886.17 1207.35 L1886.76 1207.35 L1887.34 1207.35 L1887.93 1207.35 L1888.51 1207.35 L1889.1 1207.35 L1889.69 1207.35 L1890.27 1207.35 L1890.86 1207.35 L1891.45 1207.35 L1892.03 1207.35 L1892.62 1207.35 L1893.21 1207.35 L1893.79 1207.35 L1894.38 1207.35 L1894.96 1207.35 L1895.55 1207.35 L1896.14 1207.35 L1896.72 1207.35 L1897.31 1207.35 L1897.9 1207.35 L1898.48 1207.35 L1899.07 1207.35 L1899.66 1207.35 L1900.24 1207.35 L1900.83 1207.35 L1901.42 1207.35 L1902 1207.35 L1902.59 1207.35 L1903.17 1207.35 L1903.76 1207.35 L1904.35 1207.35 L1904.93 1207.35 L1905.52 1207.35 L1906.11 1207.35 L1906.69 1207.35 L1907.28 1207.35 L1907.87 1207.35 L1908.45 1207.35 L1909.04 1207.35 L1909.63 1207.35 L1910.21 1207.35 L1910.8 1207.35 L1911.38 1207.35 L1911.97 1207.35 L1912.56 1207.35 L1913.14 1207.35 L1913.73 1207.35 L1914.32 1207.35 L1914.9 1207.35 L1915.49 1207.35 L1916.08 1207.35 L1916.66 1207.35 L1917.25 1207.35 L1917.83 1207.35 L1918.42 1207.35 L1919.01 1207.35 L1919.59 1207.35 L1920.18 1207.35 L1920.77 1207.35 L1921.35 1207.35 L1921.94 1207.35 L1922.53 1207.35 L1923.11 1207.35 L1923.7 1207.35 L1924.29 1207.35 L1924.87 1207.35 L1925.46 1207.35 L1926.04 1207.35 L1926.63 1207.35 L1927.22 1207.35 L1927.8 1207.35 L1928.39 1207.35 L1928.98 1207.35 L1929.56 1207.35 L1930.15 1207.35 L1930.74 1207.35 L1931.32 1207.35 L1931.91 1207.35 L1932.5 1207.35 L1933.08 1207.35 L1933.67 1207.35 L1934.25 1207.35 L1934.84 1207.35 L1935.43 1207.35 L1936.01 1207.35 L1936.6 1207.35 L1937.19 1207.35 L1937.77 1207.35 L1938.36 1207.35 L1938.95 1207.35 L1939.53 1207.35 L1940.12 1207.35 L1940.71 1207.35 L1941.29 1207.35 L1941.88 1207.35 L1942.46 1207.35 L1943.05 1207.35 L1943.64 1207.35 L1944.22 1207.35 L1944.81 1207.35 L1945.4 1207.35 L1945.98 1207.35 L1946.57 1207.35 L1947.16 1207.35 L1947.74 1207.35 L1948.33 1207.35 L1948.91 1207.35 L1949.5 1207.35 L1950.09 1207.35 L1950.67 1207.35 L1951.26 1207.35 L1951.85 1207.35 L1952.43 1207.35 L1953.02 1207.35 L1953.61 1207.35 L1954.19 1207.35 L1954.78 1207.35 L1955.37 1207.35 L1955.95 1207.35 L1956.54 1207.35 L1957.12 1207.35 L1957.71 1207.35 L1958.3 1207.35 L1958.88 1207.35 L1959.47 1207.35 L1960.06 1207.35 L1960.64 1207.35 L1961.23 1207.35 L1961.82 1207.35 L1962.4 1207.35 L1962.99 1207.35 L1963.58 1207.35 L1964.16 1207.35 L1964.75 1207.35 L1965.33 1207.35 L1965.92 1207.35 L1966.51 1207.35 L1967.09 1207.35 L1967.68 1207.35 L1968.27 1207.35 L1968.85 1207.35 L1969.44 1207.35 L1970.03 1207.35 L1970.61 1207.35 L1971.2 1207.35 L1971.78 1207.35 L1972.37 1207.35 L1972.96 1207.35 L1973.54 1207.35 L1974.13 1207.35 L1974.72 1207.35 L1975.3 1207.35 L1975.89 1207.35 L1976.48 1207.35 L1977.06 1207.35 L1977.65 1207.35 L1978.24 1207.35 L1978.82 1207.35 L1979.41 1207.35 L1979.99 1207.35 L1980.58 1207.35 L1981.17 1207.35 L1981.75 1207.35 L1982.34 1207.35 L1982.93 1207.35 L1983.51 1207.35 L1984.1 1207.35 L1984.69 1207.35 L1985.27 1207.35 L1985.86 1207.35 L1986.45 1207.35 L1987.03 1207.35 L1987.62 1207.35 L1988.2 1207.35 L1988.79 1207.35 L1989.38 1207.35 L1989.96 1207.35 L1990.55 1207.35 L1991.14 1207.35 L1991.72 1207.35 L1992.31 1207.35 L1992.9 1207.35 L1993.48 1207.35 L1994.07 1207.35 L1994.65 1207.35 L1995.24 1207.35 L1995.83 1207.35 L1996.41 1207.35 L1997 1207.35 L1997.59 1207.35 L1998.17 1207.35 L1998.76 1207.35 L1999.35 1207.35 L1999.93 1207.35 L2000.52 1207.35 L2001.11 1207.35 L2001.69 1207.35 L2002.28 1207.35 L2002.86 1207.35 L2003.45 1207.35 L2004.04 1207.35 L2004.62 1207.35 L2005.21 1207.35 L2005.8 1207.35 L2006.38 1207.35 L2006.97 1207.35 L2007.56 1207.35 L2008.14 1207.35 L2008.73 1207.35 L2009.32 1207.35 L2009.9 1207.35 L2010.49 1207.35 L2011.07 1207.35 L2011.66 1207.35 L2012.25 1207.35 L2012.83 1207.35 L2013.42 1207.35 L2014.01 1207.35 L2014.59 1207.35 L2015.18 1207.35 L2015.77 1207.35 L2016.35 1207.35 L2016.94 1207.35 L2017.53 1207.35 L2018.11 1207.35 L2018.7 1207.35 L2019.28 1207.35 L2019.87 1207.35 L2020.46 1207.35 L2021.04 1207.35 L2021.63 1207.35 L2022.22 1207.35 L2022.8 1207.35 L2023.39 1207.35 L2023.98 1207.35 L2024.56 1207.35 L2025.15 1207.35 L2025.73 1207.35 L2026.32 1207.35 L2026.91 1207.35 L2027.49 1207.35 L2028.08 1207.35 L2028.67 1207.35 L2029.25 1207.35 L2029.84 1207.35 L2030.43 1207.35 L2031.01 1207.35 L2031.6 1207.35 L2032.19 1207.35 L2032.77 1207.35 L2033.36 1207.35 L2033.94 1207.35 L2034.53 1207.35 L2035.12 1207.35 L2035.7 1207.35 L2036.29 1207.35 L2036.88 1207.35 L2037.46 1207.35 L2038.05 1207.35 L2038.64 1207.35 L2039.22 1207.35 L2039.81 1207.35 L2040.4 1207.35 L2040.98 1207.35 L2041.57 1207.35 L2042.15 1207.35 L2042.74 1207.35 L2043.33 1207.35 L2043.91 1207.35 L2044.5 1207.35 L2045.09 1207.35 L2045.67 1207.35 L2046.26 1207.35 L2046.85 1207.35 L2047.43 1207.35 L2048.02 1207.35 L2048.6 1207.35 L2049.19 1207.35 L2049.78 1207.35 L2050.36 1207.35 L2050.95 1207.35 L2051.54 1207.35 L2052.12 1207.35 L2052.71 1207.35 L2053.3 1207.35 L2053.88 1207.35 L2054.47 1207.35 L2055.06 1207.35 L2055.64 1207.35 L2056.23 1207.35 L2056.81 1207.35 L2057.4 1207.35 L2057.99 1207.35 L2058.57 1207.35 L2059.16 1207.35 L2059.75 1207.35 L2060.33 1207.35 L2060.92 1207.35 L2061.51 1207.35 L2062.09 1207.35 L2062.68 1207.35 L2063.27 1207.35 L2063.85 1207.35 L2064.44 1207.35 L2065.02 1207.35 L2065.61 1207.35 L2066.2 1207.35 L2066.78 1207.35 L2067.37 1207.35 L2067.96 1207.35 L2068.54 1207.35 L2069.13 1207.35 L2069.72 1207.35 L2070.3 1207.35 L2070.89 1207.35 L2071.48 1207.35 L2072.06 1207.35 L2072.65 1207.35 L2073.23 1207.35 L2073.82 1207.35 L2074.41 1207.35 L2074.99 1207.35 L2075.58 1207.35 L2076.17 1207.35 L2076.75 1207.35 L2077.34 1207.35 L2077.93 1207.35 L2078.51 1207.35 L2079.1 1207.35 L2079.68 1207.35 L2080.27 1207.35 L2080.86 1207.35 L2081.44 1207.35 L2082.03 1207.35 L2082.62 1207.35 L2083.2 1207.35 L2083.79 1207.35 L2084.38 1207.35 L2084.96 1207.35 L2085.55 1207.35 L2086.14 1207.35 L2086.72 1207.35 L2087.31 1207.35 L2087.89 1207.35 L2088.48 1207.35 L2089.07 1207.35 L2089.65 1207.35 L2090.24 1207.35 L2090.83 1207.35 L2091.41 1207.35 L2092 1207.35 L2092.59 1207.35 L2093.17 1207.35 L2093.76 1207.35 L2094.35 1207.35 L2094.93 1207.35 L2095.52 1207.35 L2096.1 1207.35 L2096.69 1207.35 L2097.28 1207.35 L2097.86 1207.35 L2098.45 1207.35 L2099.04 1207.35 L2099.62 1207.35 L2100.21 1207.35 L2100.8 1207.35 L2101.38 1207.35 L2101.97 1207.35 L2102.55 1207.35 L2103.14 1207.35 L2103.73 1207.35 L2104.31 1207.35 L2104.9 1207.35 L2105.49 1207.35 L2106.07 1207.35 L2106.66 1207.35 L2107.25 1207.35 L2107.83 1207.35 L2108.42 1207.35 L2109.01 1207.35 L2109.59 1207.35 L2110.18 1207.35 L2110.76 1207.35 L2111.35 1207.35 L2111.94 1207.35 L2112.52 1207.35 L2113.11 1207.35 L2113.7 1207.35 L2114.28 1207.35 L2114.87 1207.35 L2115.46 1207.35 L2116.04 1207.35 L2116.63 1207.35 L2117.22 1207.35 L2117.8 1207.35 L2118.39 1207.35 L2118.97 1207.35 L2119.56 1207.35 L2120.15 1207.35 L2120.73 1207.35 L2121.32 1207.35 L2121.91 1207.35 L2122.49 1207.35 L2123.08 1207.35 L2123.67 1207.35 L2124.25 1207.35 L2124.84 1207.35 L2125.42 1207.35 L2126.01 1207.35 L2126.6 1207.35 L2127.18 1207.35 L2127.77 1207.35 L2128.36 1207.35 L2128.94 1207.35 L2129.53 1207.35 L2130.12 1207.35 L2130.7 1207.35 L2131.29 1207.35 L2131.88 1207.35 L2132.46 1207.35 L2133.05 1207.35 L2133.63 1207.35 L2134.22 1207.35 L2134.81 1207.35 L2135.39 1207.35 L2135.98 1207.35 L2136.57 1207.35 L2137.15 1207.35 L2137.74 1207.35 L2138.33 1207.35 L2138.91 1207.35 L2139.5 1207.35 L2140.09 1207.35 L2140.67 1207.35 L2141.26 1207.35 L2141.84 1207.35 L2142.43 1207.35 L2143.02 1207.35 L2143.6 1207.35 L2144.19 1207.35 L2144.78 1207.35 L2145.36 1207.35 L2145.95 1207.35 L2146.54 1207.35 L2147.12 1207.35 L2147.71 1207.35 L2148.3 1207.35 L2148.88 1207.35 L2149.47 1207.35 L2150.05 1207.35 L2150.64 1207.35 L2151.23 1207.35 L2151.81 1207.35 L2152.4 1207.35 L2152.99 1207.35 L2153.57 1207.35 L2154.16 1207.35 L2154.75 1207.35 L2155.33 1207.35 L2155.92 1207.35 L2156.5 1207.35 L2157.09 1207.35 L2157.68 1207.35 L2158.26 1207.35 L2158.26 1206.49 L2157.68 1206.49 L2157.09 1206.49 L2156.5 1206.49 L2155.92 1206.49 L2155.33 1206.49 L2154.75 1206.49 L2154.16 1206.49 L2153.57 1206.49 L2152.99 1206.49 L2152.4 1206.49 L2151.81 1206.49 L2151.23 1206.49 L2150.64 1206.49 L2150.05 1206.49 L2149.47 1206.49 L2148.88 1206.49 L2148.3 1206.49 L2147.71 1206.49 L2147.12 1206.49 L2146.54 1206.49 L2145.95 1206.49 L2145.36 1206.49 L2144.78 1206.49 L2144.19 1206.49 L2143.6 1206.49 L2143.02 1206.49 L2142.43 1206.49 L2141.84 1206.49 L2141.26 1206.49 L2140.67 1206.49 L2140.09 1206.49 L2139.5 1206.49 L2138.91 1206.49 L2138.33 1206.49 L2137.74 1206.49 L2137.15 1206.49 L2136.57 1206.49 L2135.98 1206.49 L2135.39 1206.49 L2134.81 1206.49 L2134.22 1206.49 L2133.63 1206.49 L2133.05 1206.49 L2132.46 1206.49 L2131.88 1206.49 L2131.29 1206.49 L2130.7 1206.49 L2130.12 1206.49 L2129.53 1206.49 L2128.94 1206.49 L2128.36 1206.49 L2127.77 1206.49 L2127.18 1206.49 L2126.6 1206.49 L2126.01 1206.49 L2125.42 1206.49 L2124.84 1206.49 L2124.25 1206.49 L2123.67 1206.49 L2123.08 1206.49 L2122.49 1206.49 L2121.91 1206.49 L2121.32 1206.49 L2120.73 1206.49 L2120.15 1206.49 L2119.56 1206.49 L2118.97 1206.49 L2118.39 1206.49 L2117.8 1206.49 L2117.22 1206.49 L2116.63 1206.49 L2116.04 1206.49 L2115.46 1206.49 L2114.87 1206.49 L2114.28 1206.49 L2113.7 1206.49 L2113.11 1206.49 L2112.52 1206.49 L2111.94 1206.49 L2111.35 1206.49 L2110.76 1206.49 L2110.18 1206.49 L2109.59 1206.49 L2109.01 1206.49 L2108.42 1206.49 L2107.83 1206.49 L2107.25 1206.49 L2106.66 1206.49 L2106.07 1206.49 L2105.49 1206.49 L2104.9 1206.49 L2104.31 1206.49 L2103.73 1206.49 L2103.14 1206.49 L2102.55 1206.49 L2101.97 1206.49 L2101.38 1206.49 L2100.8 1206.49 L2100.21 1206.49 L2099.62 1206.49 L2099.04 1206.49 L2098.45 1206.49 L2097.86 1206.49 L2097.28 1206.49 L2096.69 1206.49 L2096.1 1206.49 L2095.52 1206.49 L2094.93 1206.49 L2094.35 1206.49 L2093.76 1206.49 L2093.17 1206.49 L2092.59 1206.49 L2092 1206.49 L2091.41 1206.49 L2090.83 1206.49 L2090.24 1206.49 L2089.65 1206.49 L2089.07 1206.49 L2088.48 1206.49 L2087.89 1206.49 L2087.31 1206.49 L2086.72 1206.49 L2086.14 1206.49 L2085.55 1206.49 L2084.96 1206.49 L2084.38 1206.49 L2083.79 1206.49 L2083.2 1206.49 L2082.62 1206.49 L2082.03 1206.49 L2081.44 1206.49 L2080.86 1206.49 L2080.27 1206.49 L2079.68 1206.49 L2079.1 1206.49 L2078.51 1206.49 L2077.93 1206.49 L2077.34 1206.49 L2076.75 1206.49 L2076.17 1206.49 L2075.58 1206.49 L2074.99 1206.49 L2074.41 1206.49 L2073.82 1206.49 L2073.23 1206.49 L2072.65 1206.49 L2072.06 1206.49 L2071.48 1206.49 L2070.89 1206.49 L2070.3 1206.49 L2069.72 1206.49 L2069.13 1206.49 L2068.54 1206.49 L2067.96 1206.49 L2067.37 1206.49 L2066.78 1206.49 L2066.2 1206.49 L2065.61 1206.49 L2065.02 1206.49 L2064.44 1206.49 L2063.85 1206.49 L2063.27 1206.49 L2062.68 1206.49 L2062.09 1206.49 L2061.51 1206.49 L2060.92 1206.49 L2060.33 1206.49 L2059.75 1206.49 L2059.16 1206.49 L2058.57 1206.49 L2057.99 1206.49 L2057.4 1206.49 L2056.81 1206.49 L2056.23 1206.49 L2055.64 1206.49 L2055.06 1206.49 L2054.47 1206.49 L2053.88 1206.49 L2053.3 1206.49 L2052.71 1206.49 L2052.12 1206.49 L2051.54 1206.49 L2050.95 1206.49 L2050.36 1206.49 L2049.78 1206.49 L2049.19 1206.49 L2048.6 1206.49 L2048.02 1206.49 L2047.43 1206.49 L2046.85 1206.49 L2046.26 1206.49 L2045.67 1206.49 L2045.09 1206.49 L2044.5 1206.49 L2043.91 1206.49 L2043.33 1206.49 L2042.74 1206.49 L2042.15 1206.49 L2041.57 1206.49 L2040.98 1206.49 L2040.4 1206.49 L2039.81 1206.49 L2039.22 1206.49 L2038.64 1206.49 L2038.05 1206.49 L2037.46 1206.49 L2036.88 1206.49 L2036.29 1206.49 L2035.7 1206.49 L2035.12 1206.49 L2034.53 1206.49 L2033.94 1206.49 L2033.36 1206.49 L2032.77 1206.49 L2032.19 1206.49 L2031.6 1206.49 L2031.01 1206.49 L2030.43 1206.49 L2029.84 1206.49 L2029.25 1206.49 L2028.67 1206.49 L2028.08 1206.49 L2027.49 1206.49 L2026.91 1206.49 L2026.32 1206.49 L2025.73 1206.49 L2025.15 1206.49 L2024.56 1206.49 L2023.98 1206.49 L2023.39 1206.49 L2022.8 1206.49 L2022.22 1206.49 L2021.63 1206.49 L2021.04 1206.49 L2020.46 1206.49 L2019.87 1206.49 L2019.28 1206.49 L2018.7 1206.49 L2018.11 1206.49 L2017.53 1206.49 L2016.94 1206.49 L2016.35 1206.49 L2015.77 1206.49 L2015.18 1206.49 L2014.59 1206.49 L2014.01 1206.49 L2013.42 1206.49 L2012.83 1206.49 L2012.25 1206.49 L2011.66 1206.49 L2011.07 1206.49 L2010.49 1206.49 L2009.9 1206.49 L2009.32 1206.49 L2008.73 1206.49 L2008.14 1206.49 L2007.56 1206.49 L2006.97 1206.49 L2006.38 1206.49 L2005.8 1206.49 L2005.21 1206.49 L2004.62 1206.49 L2004.04 1206.49 L2003.45 1206.49 L2002.86 1206.49 L2002.28 1206.49 L2001.69 1206.49 L2001.11 1206.49 L2000.52 1206.49 L1999.93 1206.49 L1999.35 1206.49 L1998.76 1206.49 L1998.17 1206.49 L1997.59 1206.49 L1997 1206.49 L1996.41 1206.49 L1995.83 1206.49 L1995.24 1206.49 L1994.65 1206.49 L1994.07 1206.49 L1993.48 1206.49 L1992.9 1206.49 L1992.31 1206.49 L1991.72 1206.49 L1991.14 1206.49 L1990.55 1206.49 L1989.96 1206.49 L1989.38 1206.49 L1988.79 1206.49 L1988.2 1206.49 L1987.62 1206.49 L1987.03 1206.49 L1986.45 1206.49 L1985.86 1206.49 L1985.27 1206.49 L1984.69 1206.49 L1984.1 1206.49 L1983.51 1206.49 L1982.93 1206.49 L1982.34 1206.49 L1981.75 1206.49 L1981.17 1206.49 L1980.58 1206.49 L1979.99 1206.49 L1979.41 1206.49 L1978.82 1206.49 L1978.24 1206.49 L1977.65 1206.49 L1977.06 1206.49 L1976.48 1206.49 L1975.89 1206.49 L1975.3 1206.49 L1974.72 1206.49 L1974.13 1206.49 L1973.54 1206.49 L1972.96 1206.49 L1972.37 1206.49 L1971.78 1206.49 L1971.2 1206.49 L1970.61 1206.49 L1970.03 1206.49 L1969.44 1206.49 L1968.85 1206.49 L1968.27 1206.49 L1967.68 1206.49 L1967.09 1206.49 L1966.51 1206.49 L1965.92 1206.49 L1965.33 1206.49 L1964.75 1206.49 L1964.16 1206.49 L1963.58 1206.49 L1962.99 1206.49 L1962.4 1206.49 L1961.82 1206.49 L1961.23 1206.49 L1960.64 1206.49 L1960.06 1206.49 L1959.47 1206.49 L1958.88 1206.49 L1958.3 1206.49 L1957.71 1206.49 L1957.12 1206.49 L1956.54 1206.49 L1955.95 1206.49 L1955.37 1206.49 L1954.78 1206.49 L1954.19 1206.49 L1953.61 1206.49 L1953.02 1206.49 L1952.43 1206.49 L1951.85 1206.49 L1951.26 1206.49 L1950.67 1206.49 L1950.09 1206.49 L1949.5 1206.49 L1948.91 1206.49 L1948.33 1206.49 L1947.74 1206.49 L1947.16 1206.49 L1946.57 1206.49 L1945.98 1206.49 L1945.4 1206.49 L1944.81 1206.49 L1944.22 1206.49 L1943.64 1206.49 L1943.05 1206.49 L1942.46 1206.49 L1941.88 1206.49 L1941.29 1206.49 L1940.71 1206.49 L1940.12 1206.49 L1939.53 1206.49 L1938.95 1206.49 L1938.36 1206.49 L1937.77 1206.49 L1937.19 1206.49 L1936.6 1206.49 L1936.01 1206.49 L1935.43 1206.49 L1934.84 1206.49 L1934.25 1206.49 L1933.67 1206.49 L1933.08 1206.49 L1932.5 1206.49 L1931.91 1206.49 L1931.32 1206.49 L1930.74 1206.49 L1930.15 1206.49 L1929.56 1206.49 L1928.98 1206.49 L1928.39 1206.49 L1927.8 1206.49 L1927.22 1206.49 L1926.63 1206.49 L1926.04 1206.49 L1925.46 1206.49 L1924.87 1206.49 L1924.29 1206.49 L1923.7 1206.49 L1923.11 1206.49 L1922.53 1206.49 L1921.94 1206.49 L1921.35 1206.49 L1920.77 1206.49 L1920.18 1206.49 L1919.59 1206.49 L1919.01 1206.49 L1918.42 1206.49 L1917.83 1206.49 L1917.25 1206.49 L1916.66 1206.49 L1916.08 1206.49 L1915.49 1206.49 L1914.9 1206.49 L1914.32 1206.49 L1913.73 1206.49 L1913.14 1206.49 L1912.56 1206.49 L1911.97 1206.49 L1911.38 1206.49 L1910.8 1206.49 L1910.21 1206.49 L1909.63 1206.49 L1909.04 1206.49 L1908.45 1206.49 L1907.87 1206.49 L1907.28 1206.49 L1906.69 1206.49 L1906.11 1206.49 L1905.52 1206.49 L1904.93 1206.49 L1904.35 1206.49 L1903.76 1206.49 L1903.17 1206.49 L1902.59 1206.49 L1902 1206.49 L1901.42 1206.49 L1900.83 1206.49 L1900.24 1206.49 L1899.66 1206.49 L1899.07 1206.49 L1898.48 1206.49 L1897.9 1206.49 L1897.31 1206.49 L1896.72 1206.49 L1896.14 1206.49 L1895.55 1206.49 L1894.96 1206.49 L1894.38 1206.49 L1893.79 1206.49 L1893.21 1206.49 L1892.62 1206.49 L1892.03 1206.49 L1891.45 1206.49 L1890.86 1206.49 L1890.27 1206.49 L1889.69 1206.49 L1889.1 1206.49 L1888.51 1206.49 L1887.93 1206.49 L1887.34 1206.49 L1886.76 1206.49 L1886.17 1206.49 L1885.58 1206.49 L1885 1206.49 L1884.41 1206.49 L1883.82 1206.49 L1883.24 1206.49 L1882.65 1206.49 L1882.06 1206.49 L1881.48 1206.49 L1880.89 1206.49 L1880.3 1206.49 L1879.72 1206.49 L1879.13 1206.49 L1878.55 1206.49 L1877.96 1206.49 L1877.37 1206.49 L1876.79 1206.49 L1876.2 1206.49 L1875.61 1206.49 L1875.03 1206.49 L1874.44 1206.49 L1873.85 1206.49 L1873.27 1206.49 L1872.68 1206.49 L1872.09 1206.49 L1871.51 1206.49 L1870.92 1206.49 L1870.34 1206.49 L1869.75 1206.49 L1869.16 1206.49 L1868.58 1206.49 L1867.99 1206.49 L1867.4 1206.49 L1866.82 1206.49 L1866.23 1206.49 L1865.64 1206.49 L1865.06 1206.49 L1864.47 1206.49 L1863.88 1206.49 L1863.3 1206.49 L1862.71 1206.49 L1862.13 1206.49 L1861.54 1206.49 L1860.95 1206.49 L1860.37 1206.49 L1859.78 1206.49 L1859.19 1206.49 L1858.61 1206.49 L1858.02 1206.49 L1857.43 1206.49 L1856.85 1206.49 L1856.26 1206.49 L1855.68 1206.49 L1855.09 1206.49 L1854.5 1206.49 L1853.92 1206.49 L1853.33 1206.49 L1852.74 1206.49 L1852.16 1206.49 L1851.57 1206.49 L1850.98 1206.49 L1850.4 1206.49 L1849.81 1206.49 L1849.22 1206.49 L1848.64 1206.49 L1848.05 1206.49 L1847.47 1206.49 L1846.88 1206.49 L1846.29 1206.49 L1845.71 1206.49 L1845.12 1206.49 L1844.53 1206.49 L1843.95 1206.49 L1843.36 1206.49 L1842.77 1206.49 L1842.19 1206.49 L1841.6 1206.49 L1841.01 1206.49 L1840.43 1206.49 L1839.84 1206.49 L1839.26 1206.49 L1838.67 1206.49 L1838.08 1206.49 L1837.5 1206.49 L1836.91 1206.49 L1836.32 1206.49 L1835.74 1206.49 L1835.15 1206.49 L1834.56 1206.49 L1833.98 1206.49 L1833.39 1206.49 L1832.81 1206.49 L1832.22 1206.49 L1831.63 1206.49 L1831.05 1206.49 L1830.46 1206.49 L1829.87 1206.49 L1829.29 1206.49 L1828.7 1206.49 L1828.11 1206.49 L1827.53 1206.49 L1826.94 1206.49 L1826.35 1206.49 L1825.77 1206.49 L1825.18 1206.49 L1824.6 1206.49 L1824.01 1206.49 L1823.42 1206.49 L1822.84 1206.49 L1822.25 1206.49 L1821.66 1206.49 L1821.08 1206.49 L1820.49 1206.49 L1819.9 1206.49 L1819.32 1206.49 L1818.73 1206.49 L1818.14 1206.49 L1817.56 1206.49 L1816.97 1206.49 L1816.39 1206.49 L1815.8 1206.49 L1815.21 1206.49 L1814.63 1206.49 L1814.04 1206.49 L1813.45 1206.49 L1812.87 1206.49 L1812.28 1206.49 L1811.69 1206.49 L1811.11 1206.49 L1810.52 1206.49 L1809.94 1206.49 L1809.35 1206.49 L1808.76 1206.49 L1808.18 1206.49 L1807.59 1206.49 L1807 1206.49 L1806.42 1206.49 L1805.83 1206.49 L1805.24 1206.49 L1804.66 1206.49 L1804.07 1206.49 L1803.48 1206.49 L1802.9 1206.49 L1802.31 1206.49 L1801.73 1206.49 L1801.14 1206.49 L1800.55 1206.49 L1799.97 1206.49 L1799.38 1206.49 L1798.79 1206.49 L1798.21 1206.49 L1797.62 1206.49 L1797.03 1206.49 L1796.45 1206.49 L1795.86 1206.49 L1795.27 1206.49 L1794.69 1206.49 L1794.1 1206.49 L1793.52 1206.49 L1792.93 1206.49 L1792.34 1206.49 L1791.76 1206.49 L1791.17 1206.49 L1790.58 1206.49 L1790 1206.49 L1789.41 1206.49 L1788.82 1206.49 L1788.24 1206.49 L1787.65 1206.49 L1787.06 1206.49 L1786.48 1206.49 L1785.89 1206.49 L1785.31 1206.49 L1784.72 1206.49 L1784.13 1206.49 L1783.55 1206.49 L1782.96 1206.49 L1782.37 1206.49 L1781.79 1206.49 L1781.2 1206.49 L1780.61 1206.49 L1780.03 1206.49 L1779.44 1206.49 L1778.86 1206.49 L1778.27 1206.49 L1777.68 1206.49 L1777.1 1206.49 L1776.51 1206.49 L1775.92 1206.49 L1775.34 1206.49 L1774.75 1206.49 L1774.16 1206.49 L1773.58 1206.49 L1772.99 1206.49 L1772.4 1206.49 L1771.82 1206.49 L1771.23 1206.49 L1770.65 1206.49 L1770.06 1206.49 L1769.47 1206.49 L1768.89 1206.49 L1768.3 1206.49 L1767.71 1206.49 L1767.13 1206.49 L1766.54 1206.49 L1765.95 1206.49 L1765.37 1206.49 L1764.78 1206.49 L1764.19 1206.49 L1763.61 1206.49 L1763.02 1206.49 L1762.44 1206.49 L1761.85 1206.49 L1761.26 1206.49 L1760.68 1206.49 L1760.09 1206.49 L1759.5 1206.49 L1758.92 1206.49 L1758.33 1206.49 L1757.74 1206.49 L1757.16 1206.49 L1756.57 1206.49 L1755.99 1206.49 L1755.4 1206.49 L1754.81 1206.49 L1754.23 1206.49 L1753.64 1206.49 L1753.05 1206.49 L1752.47 1206.49 L1751.88 1206.49 L1751.29 1206.49 L1750.71 1206.49 L1750.12 1206.49 L1749.53 1206.49 L1748.95 1206.49 L1748.36 1206.49 L1747.78 1206.49 L1747.19 1206.49 L1746.6 1206.49 L1746.02 1206.49 L1745.43 1206.49 L1744.84 1206.49 L1744.26 1206.49 L1743.67 1206.49 L1743.08 1206.49 L1742.5 1206.49 L1741.91 1206.49 L1741.32 1206.49 L1740.74 1206.49 L1740.15 1206.49 L1739.57 1206.49 L1738.98 1206.49 L1738.39 1206.49 L1737.81 1206.49 L1737.22 1206.49 L1736.63 1206.49 L1736.05 1206.49 L1735.46 1206.49 L1734.87 1206.49 L1734.29 1206.49 L1733.7 1206.49 L1733.11 1206.49 L1732.53 1206.49 L1731.94 1206.49 L1731.36 1206.49 L1730.77 1206.49 L1730.18 1206.49 L1729.6 1206.49 L1729.01 1206.49 L1728.42 1206.49 L1727.84 1206.49 L1727.25 1206.49 L1726.66 1206.49 L1726.08 1206.49 L1725.49 1206.49 L1724.91 1206.49 L1724.32 1206.49 L1723.73 1206.49 L1723.15 1206.49 L1722.56 1206.49 L1721.97 1206.49 L1721.39 1206.49 L1720.8 1206.49 L1720.21 1206.49 L1719.63 1206.49 L1719.04 1206.49 L1718.45 1206.49 L1717.87 1206.49 L1717.28 1206.49 L1716.7 1206.49 L1716.11 1206.49 L1715.52 1206.49 L1714.94 1206.49 L1714.35 1206.49 L1713.76 1206.49 L1713.18 1206.49 L1712.59 1206.49 L1712 1206.49 L1711.42 1206.49 L1710.83 1206.49 L1710.24 1206.49 L1709.66 1206.49 L1709.07 1206.49 L1708.49 1206.49 L1707.9 1206.49 L1707.31 1206.49 L1706.73 1206.49 L1706.14 1206.49 L1705.55 1206.49 L1704.97 1206.49 L1704.38 1206.49 L1703.79 1206.49 L1703.21 1206.49 L1702.62 1206.49 L1702.04 1206.49 L1701.45 1206.49 L1700.86 1206.49 L1700.28 1206.49 L1699.69 1206.49 L1699.1 1206.49 L1698.52 1206.49 L1697.93 1206.49 L1697.34 1206.49 L1696.76 1206.49 L1696.17 1206.49 L1695.58 1206.49 L1695 1206.49 L1694.41 1206.49 L1693.83 1206.49 L1693.24 1206.49 L1692.65 1206.49 L1692.07 1206.49 L1691.48 1206.49 L1690.89 1206.49 L1690.31 1206.49 L1689.72 1206.49 L1689.13 1206.49 L1688.55 1206.49 L1687.96 1206.49 L1687.37 1206.49 L1686.79 1206.49 L1686.2 1206.49 L1685.62 1206.49 L1685.03 1206.49 L1684.44 1206.49 L1683.86 1206.49 L1683.27 1206.49 L1682.68 1206.49 L1682.1 1206.49 L1681.51 1206.49 L1680.92 1206.49 L1680.34 1206.49 L1679.75 1206.49 L1679.17 1206.49 L1678.58 1206.49 L1677.99 1206.49 L1677.41 1206.49 L1676.82 1206.49 L1676.23 1206.49 L1675.65 1206.49 L1675.06 1206.49 L1674.47 1206.49 L1673.89 1206.49 L1673.3 1206.49 L1672.71 1206.49 L1672.13 1206.49 L1671.54 1206.49 L1670.96 1206.49 L1670.37 1206.49 L1669.78 1206.49 L1669.2 1206.49 L1668.61 1206.49 L1668.02 1206.49 L1667.44 1206.49 L1666.85 1206.49 L1666.26 1206.49 L1665.68 1206.49 L1665.09 1206.49 L1664.5 1206.49 L1663.92 1206.49 L1663.33 1206.49 L1662.75 1206.49 L1662.16 1206.49 L1661.57 1206.49 L1660.99 1206.49 L1660.4 1206.49 L1659.81 1206.49 L1659.23 1206.49 L1658.64 1206.49 L1658.05 1206.49 L1657.47 1206.49 L1656.88 1206.49 L1656.29 1206.49 L1655.71 1206.49 L1655.12 1206.49 L1654.54 1206.49 L1653.95 1206.49 L1653.36 1206.49 L1652.78 1206.49 L1652.19 1206.49 L1651.6 1206.49 L1651.02 1206.49 L1650.43 1206.49 L1649.84 1206.49 L1649.26 1206.49 L1648.67 1206.49 L1648.09 1206.49 L1647.5 1206.49 L1646.91 1206.49 L1646.33 1206.49 L1645.74 1206.49 L1645.15 1206.49 L1644.57 1206.49 L1643.98 1206.49 L1643.39 1206.49 L1642.81 1206.49 L1642.22 1206.49 L1641.63 1206.49 L1641.05 1206.49 L1640.46 1206.49 L1639.88 1206.49 L1639.29 1206.49 L1638.7 1206.49 L1638.12 1206.49 L1637.53 1206.49 L1636.94 1206.49 L1636.36 1206.49 L1635.77 1206.49 L1635.18 1206.49 L1634.6 1206.49 L1634.01 1206.49 L1633.42 1206.49 L1632.84 1206.49 L1632.25 1206.49 L1631.67 1206.49 L1631.08 1206.49 L1630.49 1206.49 L1629.91 1206.49 L1629.32 1206.49 L1628.73 1206.49 L1628.15 1206.49 L1627.56 1206.49 L1626.97 1206.49 L1626.39 1206.49 L1625.8 1206.49 L1625.22 1206.49 L1624.63 1206.49 L1624.04 1206.49 L1623.46 1206.49 L1622.87 1206.49 L1622.28 1206.49 L1621.7 1206.49 L1621.11 1206.49 L1620.52 1206.49 L1619.94 1206.49 L1619.35 1206.49 L1618.76 1206.49 L1618.18 1206.49 L1617.59 1206.49 L1617.01 1206.49 L1616.42 1206.49 L1615.83 1206.49 L1615.25 1206.49 L1614.66 1206.49 L1614.07 1206.49 L1613.49 1206.49 L1612.9 1206.49 L1612.31 1206.49 L1611.73 1206.49 L1611.14 1206.49 L1610.55 1206.49 L1609.97 1206.49 L1609.38 1206.49 L1608.8 1206.49 L1608.21 1206.49 L1607.62 1206.49 L1607.04 1206.49 L1606.45 1206.49 L1605.86 1206.49 L1605.28 1206.49 L1604.69 1206.49 L1604.1 1206.49 L1603.52 1206.49 L1602.93 1206.49 L1602.34 1206.49 L1601.76 1206.49 L1601.17 1206.49 L1600.59 1206.49 L1600 1206.49 L1599.41 1206.49 L1598.83 1206.49 L1598.24 1206.49 L1597.65 1206.49 L1597.07 1206.49 L1596.48 1206.49 L1595.89 1206.49 L1595.31 1206.49 L1594.72 1206.49 L1594.14 1206.49 L1593.55 1206.49 L1592.96 1206.49 L1592.38 1206.49 L1591.79 1206.49 L1591.2 1206.49 L1590.62 1206.49 L1590.03 1206.49 L1589.44 1206.49 L1588.86 1206.49 L1588.27 1206.49 L1587.68 1206.49 L1587.1 1206.49 L1586.51 1206.49 L1585.93 1206.49 L1585.34 1206.49 L1584.75 1206.49 L1584.17 1206.49 L1583.58 1206.49 L1582.99 1206.49 L1582.41 1206.49 L1581.82 1206.49 L1581.23 1206.49 L1580.65 1206.49 L1580.06 1206.49 L1579.47 1206.49 L1578.89 1206.49 L1578.3 1206.49 L1577.72 1206.49 L1577.13 1206.49 L1576.54 1206.49 L1575.96 1206.49 L1575.37 1206.49 L1574.78 1206.49 L1574.2 1206.49 L1573.61 1206.49 L1573.02 1206.49 L1572.44 1206.49 L1571.85 1206.49 L1571.27 1206.49 L1570.68 1206.49 L1570.09 1206.49 L1569.51 1206.49 L1568.92 1206.49 L1568.33 1206.49 L1567.75 1206.49 L1567.16 1206.49 L1566.57 1206.49 L1565.99 1206.49 L1565.4 1206.49 L1564.81 1206.49 L1564.23 1206.49 L1563.64 1206.49 L1563.06 1206.49 L1562.47 1206.49 L1561.88 1206.49 L1561.3 1206.49 L1560.71 1206.49 L1560.12 1206.49 L1559.54 1206.49 L1558.95 1206.49 L1558.36 1206.49 L1557.78 1206.49 L1557.19 1206.49 L1556.6 1206.49 L1556.02 1206.49 L1555.43 1206.49 L1554.85 1206.49 L1554.26 1206.49 L1553.67 1206.49 L1553.09 1206.49 L1552.5 1206.49 L1551.91 1206.49 L1551.33 1206.49 L1550.74 1206.49 L1550.15 1206.49 L1549.57 1206.49 L1548.98 1206.49 L1548.4 1206.49 L1547.81 1206.49 L1547.22 1206.49 L1546.64 1206.49 L1546.05 1206.49 L1545.46 1206.49 L1544.88 1206.49 L1544.29 1206.49 L1543.7 1206.49 L1543.12 1206.49 L1542.53 1206.49 L1541.94 1206.49 L1541.36 1206.49 L1540.77 1206.49 L1540.19 1206.49 L1539.6 1206.49 L1539.01 1206.49 L1538.43 1206.49 L1537.84 1206.49 L1537.25 1206.49 L1536.67 1206.49 L1536.08 1206.49 L1535.49 1206.49 L1534.91 1206.49 L1534.32 1206.49 L1533.73 1206.49 L1533.15 1206.49 L1532.56 1206.49 L1531.98 1206.49 L1531.39 1206.49 L1530.8 1206.49 L1530.22 1206.49 L1529.63 1206.49 L1529.04 1206.49 L1528.46 1206.49 L1527.87 1206.49 L1527.28 1206.49 L1526.7 1206.49 L1526.11 1206.49 L1525.52 1206.49 L1524.94 1206.49 L1524.35 1206.49 L1523.77 1206.49 L1523.18 1206.49 L1522.59 1206.49 L1522.01 1206.49 L1521.42 1206.49 L1520.83 1206.49 L1520.25 1206.49 L1519.66 1206.49 L1519.07 1206.49 L1518.49 1206.49 L1517.9 1206.49 L1517.32 1206.49 L1516.73 1206.49 L1516.14 1206.49 L1515.56 1206.49 L1514.97 1206.49 L1514.38 1206.49 L1513.8 1206.49 L1513.21 1206.49 L1512.62 1206.49 L1512.04 1206.49 L1511.45 1206.49 L1510.86 1206.49 L1510.28 1206.49 L1509.69 1206.49 L1509.11 1206.49 L1508.52 1206.49 L1507.93 1206.49 L1507.35 1206.49 L1506.76 1206.49 L1506.17 1206.49 L1505.59 1206.49 L1505 1206.49 L1504.41 1206.49 L1503.83 1206.49 L1503.24 1206.49 L1502.65 1206.49 L1502.07 1206.49 L1501.48 1206.49 L1500.9 1206.49 L1500.31 1206.49 L1499.72 1206.49 L1499.14 1206.49 L1498.55 1206.49 L1497.96 1206.49 L1497.38 1206.49 L1496.79 1206.49 L1496.2 1206.49 L1495.62 1206.49 L1495.03 1206.49 L1494.45 1206.49 L1493.86 1206.49 L1493.27 1206.49 L1492.69 1206.49 L1492.1 1206.49 L1491.51 1206.49 L1490.93 1206.49 L1490.34 1206.49 L1489.75 1206.49 L1489.17 1206.49 L1488.58 1206.49 L1487.99 1206.49 L1487.41 1206.49 L1486.82 1206.49 L1486.24 1206.49 L1485.65 1206.49 L1485.06 1206.49 L1484.48 1206.49 L1483.89 1206.49 L1483.3 1206.49 L1482.72 1206.49 L1482.13 1206.49 L1481.54 1206.49 L1480.96 1206.49 L1480.37 1206.49 L1479.78 1206.49 L1479.2 1206.49 L1478.61 1206.49 L1478.03 1206.49 L1477.44 1206.49 L1476.85 1206.49 L1476.27 1206.49 L1475.68 1206.49 L1475.09 1206.49 L1474.51 1206.49 L1473.92 1206.49 L1473.33 1206.49 L1472.75 1206.49 L1472.16 1206.49 L1471.57 1206.49 L1470.99 1206.49 L1470.4 1206.49 L1469.82 1206.49 L1469.23 1206.49 L1468.64 1206.49 L1468.06 1206.49 L1467.47 1206.49 L1466.88 1206.49 L1466.3 1206.49 L1465.71 1206.49 L1465.12 1206.49 L1464.54 1206.49 L1463.95 1206.49 L1463.37 1206.49 L1462.78 1206.49 L1462.19 1206.49 L1461.61 1206.49 L1461.02 1206.49 L1460.43 1206.49 L1459.85 1206.49 L1459.26 1206.49 L1458.67 1206.49 L1458.09 1206.49 L1457.5 1206.49 L1456.91 1206.49 L1456.33 1206.49 L1455.74 1206.49 L1455.16 1206.49 L1454.57 1206.49 L1453.98 1206.49 L1453.4 1206.49 L1452.81 1206.49 L1452.22 1206.49 L1451.64 1206.49 L1451.05 1206.49 L1450.46 1206.49 L1449.88 1206.49 L1449.29 1206.49 L1448.7 1206.49 L1448.12 1206.49 L1447.53 1206.49 L1446.95 1206.49 L1446.36 1206.49 L1445.77 1206.49 L1445.19 1206.49 L1444.6 1206.49 L1444.01 1206.49 L1443.43 1206.49 L1442.84 1206.49 L1442.25 1206.49 L1441.67 1206.49 L1441.08 1206.49 L1440.5 1206.49 L1439.91 1206.49 L1439.32 1206.49 L1438.74 1206.49 L1438.15 1206.49 L1437.56 1206.49 L1436.98 1206.49 L1436.39 1206.49 L1435.8 1206.49 L1435.22 1206.49 L1434.63 1206.49 L1434.04 1206.49 L1433.46 1206.49 L1432.87 1206.49 L1432.29 1206.49 L1431.7 1206.49 L1431.11 1206.49 L1430.53 1206.49 L1429.94 1206.49 L1429.35 1206.49 L1428.77 1206.49 L1428.18 1206.49 L1427.59 1206.49 L1427.01 1206.49 L1426.42 1206.49 L1425.83 1206.49 L1425.25 1206.49 L1424.66 1206.49 L1424.08 1206.49 L1423.49 1206.49 L1422.9 1206.49 L1422.32 1206.49 L1421.73 1206.49 L1421.14 1206.49 L1420.56 1206.49 L1419.97 1206.49 L1419.38 1206.49 L1418.8 1206.49 L1418.21 1206.49 L1417.63 1206.49 L1417.04 1206.49 L1416.45 1206.49 L1415.87 1206.49 L1415.28 1206.49 L1414.69 1206.49 L1414.11 1206.49 L1413.52 1206.49 L1412.93 1206.49 L1412.35 1206.49 L1411.76 1206.49 L1411.17 1206.49 L1410.59 1206.49 L1410 1206.49 L1409.42 1206.49 L1408.83 1206.49 L1408.24 1206.49 L1407.66 1206.49 L1407.07 1206.49 L1406.48 1206.49 L1405.9 1206.49 L1405.31 1206.49 L1404.72 1206.49 L1404.14 1206.49 L1403.55 1206.49 L1402.96 1206.49 L1402.38 1206.49 L1401.79 1206.49 L1401.21 1206.49 L1400.62 1206.49 L1400.03 1206.49 L1399.45 1206.49 L1398.86 1206.49 L1398.27 1206.49 L1397.69 1206.49 L1397.1 1206.49 L1396.51 1206.49 L1395.93 1206.49 L1395.34 1206.49 L1394.75 1206.49 L1394.17 1206.49 L1393.58 1206.49 L1393 1206.49 L1392.41 1206.49 L1391.82 1206.49 L1391.24 1206.49 L1390.65 1206.49 L1390.06 1206.49 L1389.48 1206.49 L1388.89 1206.49 L1388.3 1206.49 L1387.72 1206.49 L1387.13 1206.49 L1386.55 1206.49 L1385.96 1206.49 L1385.37 1206.49 L1384.79 1206.49 L1384.2 1206.49 L1383.61 1206.49 L1383.03 1206.49 L1382.44 1206.49 L1381.85 1206.49 L1381.27 1206.49 L1380.68 1206.49 L1380.09 1206.49 L1379.51 1206.49 L1378.92 1206.49 L1378.34 1206.49 L1377.75 1206.49 L1377.16 1206.49 L1376.58 1206.49 L1375.99 1206.49 L1375.4 1206.49 L1374.82 1206.49 L1374.23 1206.49 L1373.64 1206.49 L1373.06 1206.49 L1372.47 1206.49 L1371.88 1206.49 L1371.3 1206.49 L1370.71 1206.49 L1370.13 1206.49 L1369.54 1206.49 L1368.95 1206.49 L1368.37 1206.49 L1367.78 1206.49 L1367.19 1206.49 L1366.61 1206.49 L1366.02 1206.49 L1365.43 1206.49 L1364.85 1206.49 L1364.26 1206.49 L1363.68 1206.49 L1363.09 1206.49 L1362.5 1206.49 L1361.92 1206.49 L1361.33 1206.49 L1360.74 1206.49 L1360.16 1206.49 L1359.57 1206.49 L1358.98 1206.49 L1358.4 1206.49 L1357.81 1206.49 L1357.22 1206.49 L1356.64 1206.49 L1356.05 1206.49 L1355.47 1206.49 L1354.88 1206.49 L1354.29 1206.49 L1353.71 1206.49 L1353.12 1206.49 L1352.53 1206.49 L1351.95 1206.49 L1351.36 1206.49 L1350.77 1206.49 L1350.19 1206.49 L1349.6 1206.49 L1349.01 1206.49 L1348.43 1206.49 L1347.84 1206.49 L1347.26 1206.49 L1346.67 1206.49 L1346.08 1206.49 L1345.5 1206.49 L1344.91 1206.49 L1344.32 1206.49 L1343.74 1206.49 L1343.15 1206.49 L1342.56 1206.49 L1341.98 1206.49 L1341.39 1206.49 L1340.8 1206.49 L1340.22 1206.49 L1339.63 1206.49 L1339.05 1206.49 L1338.46 1206.49 L1337.87 1206.49 L1337.29 1206.49 L1336.7 1206.49 L1336.11 1206.49 L1335.53 1206.49 L1334.94 1206.49 L1334.35 1206.49 L1333.77 1206.49 L1333.18 1206.49 L1332.6 1206.49 L1332.01 1206.49 L1331.42 1206.49 L1330.84 1206.49 L1330.25 1206.49 L1329.66 1206.49 L1329.08 1206.49 L1328.49 1206.49 L1327.9 1206.49 L1327.32 1206.49 L1326.73 1206.49 L1326.14 1206.49 L1325.56 1206.49 L1324.97 1206.49 L1324.39 1206.49 L1323.8 1206.49 L1323.21 1206.49 L1322.63 1206.49 L1322.04 1206.49 L1321.45 1206.49 L1320.87 1206.49 L1320.28 1206.49 L1319.69 1206.49 L1319.11 1206.49 L1318.52 1206.49 L1317.93 1206.49 L1317.35 1206.49 L1316.76 1206.49 L1316.18 1206.49 L1315.59 1206.49 L1315 1206.49 L1314.42 1206.49 L1313.83 1206.49 L1313.24 1206.49 L1312.66 1206.49 L1312.07 1206.49 L1311.48 1206.49 L1310.9 1206.49 L1310.31 1206.49 L1309.73 1206.49 L1309.14 1206.49 L1308.55 1206.49 L1307.97 1206.49 L1307.38 1206.49 L1306.79 1206.49 L1306.21 1206.49 L1305.62 1206.49 L1305.03 1206.49 L1304.45 1206.49 L1303.86 1206.49 L1303.27 1206.49 L1302.69 1206.49 L1302.1 1206.49 L1301.52 1206.49 L1300.93 1206.49 L1300.34 1206.49 L1299.76 1206.49 L1299.17 1206.49 L1298.58 1206.49 L1298 1206.49 L1297.41 1206.49 L1296.82 1206.49 L1296.24 1206.49 L1295.65 1206.49 L1295.06 1206.49 L1294.48 1206.49 L1293.89 1206.49 L1293.31 1206.49 L1292.72 1206.49 L1292.13 1206.49 L1291.55 1206.49 L1290.96 1206.49 L1290.37 1206.49 L1289.79 1206.49 L1289.2 1206.49 L1288.61 1206.49 L1288.03 1206.49 L1287.44 1206.49 L1286.86 1206.49 L1286.27 1206.49 L1285.68 1206.49 L1285.1 1206.49 L1284.51 1206.49 L1283.92 1206.49 L1283.34 1206.49 L1282.75 1206.49 L1282.16 1206.49 L1281.58 1206.49 L1280.99 1206.49 L1280.4 1206.49 L1279.82 1206.49 L1279.23 1206.49 L1278.65 1206.49 L1278.06 1206.49 L1277.47 1206.49 L1276.89 1206.49 L1276.3 1206.49 L1275.71 1206.49 L1275.13 1206.49 L1274.54 1206.49 L1273.95 1206.49 L1273.37 1206.49 L1272.78 1206.49 L1272.19 1206.49 L1271.61 1206.49 L1271.02 1206.49 L1270.44 1206.49 L1269.85 1206.49 L1269.26 1206.49 L1268.68 1206.49 L1268.09 1206.49 L1267.5 1206.49 L1266.92 1206.49 L1266.33 1206.49 L1265.74 1206.49 L1265.16 1206.49 L1264.57 1206.49 L1263.98 1206.49 L1263.4 1206.49 L1262.81 1206.49 L1262.23 1206.49 L1261.64 1206.49 L1261.05 1206.49 L1260.47 1206.49 L1259.88 1206.49 L1259.29 1206.49 L1258.71 1206.49 L1258.12 1206.49 L1257.53 1206.49 L1256.95 1206.49 L1256.36 1206.49 L1255.78 1206.49 L1255.19 1206.49 L1254.6 1206.49 L1254.02 1206.49 L1253.43 1206.49 L1252.84 1206.49 L1252.26 1206.49 L1251.67 1206.49 L1251.08 1206.49 L1250.5 1206.49 L1249.91 1206.49 L1249.32 1206.49 L1248.74 1206.49 L1248.15 1206.49 L1247.57 1206.49 L1246.98 1206.49 L1246.39 1206.49 L1245.81 1206.49 L1245.22 1206.49 L1244.63 1206.49 L1244.05 1206.49 L1243.46 1206.49 L1242.87 1206.49 L1242.29 1206.49 L1241.7 1206.49 L1241.11 1206.49 L1240.53 1206.49 L1239.94 1206.49 L1239.36 1206.49 L1238.77 1206.49 L1238.18 1206.49 L1237.6 1206.49 L1237.01 1206.49 L1236.42 1206.49 L1235.84 1206.49 L1235.25 1206.49 L1234.66 1206.49 L1234.08 1206.49 L1233.49 1206.49 L1232.91 1206.49 L1232.32 1206.49 L1231.73 1206.49 L1231.15 1206.49 L1230.56 1206.49 L1229.97 1206.49 L1229.39 1206.49 L1228.8 1206.49 L1228.21 1206.49 L1227.63 1206.49 L1227.04 1206.49 L1226.45 1206.49 L1225.87 1206.49 L1225.28 1206.49 L1224.7 1206.49 L1224.11 1206.49 L1223.52 1206.49 L1222.94 1206.49 L1222.35 1206.49 L1221.76 1206.49 L1221.18 1206.49 L1220.59 1206.49 L1220 1206.49 L1219.42 1206.49 L1218.83 1206.49 L1218.24 1206.49 L1217.66 1206.49 L1217.07 1206.49 L1216.49 1206.49 L1215.9 1206.49 L1215.31 1206.49 L1214.73 1206.49 L1214.14 1206.49 L1213.55 1206.49 L1212.97 1206.49 L1212.38 1206.49 L1211.79 1206.49 L1211.21 1206.49 L1210.62 1206.49 L1210.03 1206.49 L1209.45 1206.49 L1208.86 1206.49 L1208.28 1206.49 L1207.69 1206.49 L1207.1 1206.49 L1206.52 1206.49 L1205.93 1206.49 L1205.34 1206.49 L1204.76 1206.49 L1204.17 1206.49 L1203.58 1206.49 L1203 1206.49 L1202.41 1206.49 L1201.83 1206.49 L1201.24 1206.49 L1200.65 1206.49 L1200.07 1206.49 L1199.48 1206.49 L1198.89 1206.49 L1198.31 1206.49 L1197.72 1206.49 L1197.13 1206.49 L1196.55 1206.49 L1195.96 1206.49 L1195.37 1206.49 L1194.79 1206.49 L1194.2 1206.49 L1193.62 1206.49 L1193.03 1206.49 L1192.44 1206.49 L1191.86 1206.49 L1191.27 1206.49 L1190.68 1206.49 L1190.1 1206.49 L1189.51 1206.49 L1188.92 1206.49 L1188.34 1206.49 L1187.75 1206.49 L1187.16 1206.49 L1186.58 1206.49 L1185.99 1206.49 L1185.41 1206.49 L1184.82 1206.49 L1184.23 1206.49 L1183.65 1206.49 L1183.06 1206.49 L1182.47 1206.49 L1181.89 1206.49 L1181.3 1206.49 L1180.71 1206.49 L1180.13 1206.49 L1179.54 1206.49 L1178.96 1206.49 L1178.37 1206.49 L1177.78 1206.49 L1177.2 1206.49 L1176.61 1206.49 L1176.02 1206.49 L1175.44 1206.49 L1174.85 1206.49 L1174.26 1206.49 L1173.68 1206.49 L1173.09 1206.49 L1172.5 1206.49 L1171.92 1206.49 L1171.33 1206.49 L1170.75 1206.49 L1170.16 1206.49 L1169.57 1206.49 L1168.99 1206.49 L1168.4 1206.49 L1167.81 1206.49 L1167.23 1206.49 L1166.64 1206.49 L1166.05 1206.49 L1165.47 1206.49 L1164.88 1206.49 L1164.29 1206.49 L1163.71 1206.49 L1163.12 1206.49 L1162.54 1206.49 L1161.95 1206.49 L1161.36 1206.49 L1160.78 1206.49 L1160.19 1206.49 L1159.6 1206.49 L1159.02 1206.49 L1158.43 1206.49 L1157.84 1206.49 L1157.26 1206.49 L1156.67 1206.49 L1156.09 1206.49 L1155.5 1206.49 L1154.91 1206.49 L1154.33 1206.49 L1153.74 1206.49 L1153.15 1206.49 L1152.57 1206.49 L1151.98 1206.49 L1151.39 1206.49 L1150.81 1206.49 L1150.22 1206.49 L1149.63 1206.49 L1149.05 1206.49 L1148.46 1206.49 L1147.88 1206.49 L1147.29 1206.49 L1146.7 1206.49 L1146.12 1206.49 L1145.53 1206.49 L1144.94 1206.49 L1144.36 1206.49 L1143.77 1206.49 L1143.18 1206.49 L1142.6 1206.49 L1142.01 1206.49 L1141.42 1206.49 L1140.84 1206.49 L1140.25 1206.49 L1139.67 1206.49 L1139.08 1206.49 L1138.49 1206.49 L1137.91 1206.49 L1137.32 1206.49 L1136.73 1206.49 L1136.15 1206.49 L1135.56 1206.49 L1134.97 1206.49 L1134.39 1206.49 L1133.8 1206.49 L1133.21 1206.49 L1132.63 1206.49 L1132.04 1206.49 L1131.46 1206.49 L1130.87 1206.49 L1130.28 1206.49 L1129.7 1206.49 L1129.11 1206.49 L1128.52 1206.49 L1127.94 1206.49 L1127.35 1206.49 L1126.76 1206.49 L1126.18 1206.49 L1125.59 1206.49 L1125.01 1206.49 L1124.42 1206.49 L1123.83 1206.49 L1123.25 1206.49 L1122.66 1206.49 L1122.07 1206.49 L1121.49 1206.49 L1120.9 1206.49 L1120.31 1206.49 L1119.73 1206.49 L1119.14 1206.49 L1118.55 1206.49 L1117.97 1206.49 L1117.38 1206.49 L1116.8 1206.49 L1116.21 1206.49 L1115.62 1206.49 L1115.04 1206.49 L1114.45 1206.49 L1113.86 1206.49 L1113.28 1206.49 L1112.69 1206.49 L1112.1 1206.49 L1111.52 1206.49 L1110.93 1206.49 L1110.34 1206.49 L1109.76 1206.49 L1109.17 1206.49 L1108.59 1206.49 L1108 1206.49 L1107.41 1206.49 L1106.83 1206.49 L1106.24 1206.49 L1105.65 1206.49 L1105.07 1206.49 L1104.48 1206.49 L1103.89 1206.49 L1103.31 1206.49 L1102.72 1206.49 L1102.14 1206.49 L1101.55 1206.49 L1100.96 1206.49 L1100.38 1206.49 L1099.79 1206.49 L1099.2 1206.49 L1098.62 1206.49 L1098.03 1206.49 L1097.44 1206.49 L1096.86 1206.49 L1096.27 1206.49 L1095.68 1206.49 L1095.1 1206.49 L1094.51 1206.49 L1093.93 1206.49 L1093.34 1206.49 L1092.75 1206.49 L1092.17 1206.49 L1091.58 1206.49 L1090.99 1206.49 L1090.41 1206.49 L1089.82 1206.49 L1089.23 1206.49 L1088.65 1206.49 L1088.06 1206.49 L1087.47 1206.49 L1086.89 1206.49 L1086.3 1206.49 L1085.72 1206.49 L1085.13 1206.49 L1084.54 1206.49 L1083.96 1206.49 L1083.37 1206.49 L1082.78 1206.49 L1082.2 1206.49 L1081.61 1206.49 L1081.02 1206.49 L1080.44 1206.49 L1079.85 1206.49 L1079.26 1206.49 L1078.68 1206.49 L1078.09 1206.49 L1077.51 1206.49 L1076.92 1206.49 L1076.33 1206.49 L1075.75 1206.49 L1075.16 1206.49 L1074.57 1206.49 L1073.99 1206.49 L1073.4 1206.49 L1072.81 1206.49 L1072.23 1206.49 L1071.64 1206.49 L1071.06 1206.49 L1070.47 1206.49 L1069.88 1206.49 L1069.3 1206.49 L1068.71 1206.49 L1068.12 1206.49 L1067.54 1206.49 L1066.95 1206.49 L1066.36 1206.49 L1065.78 1206.49 L1065.19 1206.49 L1064.6 1206.49 L1064.02 1206.49 L1063.43 1206.49 L1062.85 1206.49 L1062.26 1206.49 L1061.67 1206.49 L1061.09 1206.49 L1060.5 1206.49 L1059.91 1206.49 L1059.33 1206.49 L1058.74 1206.49 L1058.15 1206.49 L1057.57 1206.49 L1056.98 1206.49 L1056.39 1206.49 L1055.81 1206.49 L1055.22 1206.49 L1054.64 1206.49 L1054.05 1206.49 L1053.46 1206.49 L1052.88 1206.49 L1052.29 1206.49 L1051.7 1206.49 L1051.12 1206.49 L1050.53 1206.49 L1049.94 1206.49 L1049.36 1206.49 L1048.77 1206.49 L1048.19 1206.49 L1047.6 1206.49 L1047.01 1206.49 L1046.43 1206.49 L1045.84 1206.49 L1045.25 1206.49 L1044.67 1206.49 L1044.08 1206.49 L1043.49 1206.49 L1042.91 1206.49 L1042.32 1206.49 L1041.73 1206.49 L1041.15 1206.49 L1040.56 1206.49 L1039.98 1206.49 L1039.39 1206.49 L1038.8 1206.49 L1038.22 1206.49 L1037.63 1206.49 L1037.04 1206.49 L1036.46 1206.49 L1035.87 1206.49 L1035.28 1206.49 L1034.7 1206.49 L1034.11 1206.49 L1033.52 1206.49 L1032.94 1206.49 L1032.35 1206.49 L1031.77 1206.49 L1031.18 1206.49 L1030.59 1206.49 L1030.01 1206.49 L1029.42 1206.49 L1028.83 1206.49 L1028.25 1206.49 L1027.66 1206.49 L1027.07 1206.49 L1026.49 1206.49 L1025.9 1206.49 L1025.32 1206.49 L1024.73 1206.49 L1024.14 1206.49 L1023.56 1206.49 L1022.97 1206.49 L1022.38 1206.49 L1021.8 1206.49 L1021.21 1206.49 L1020.62 1206.49 L1020.04 1206.49 L1019.45 1206.49 L1018.86 1206.49 L1018.28 1206.49 L1017.69 1206.49 L1017.11 1206.49 L1016.52 1206.49 L1015.93 1206.49 L1015.35 1206.49 L1014.76 1206.49 L1014.17 1206.49 L1013.59 1206.49 L1013 1206.49 L1012.41 1206.49 L1011.83 1206.49 L1011.24 1206.49 L1010.65 1206.49 L1010.07 1206.49 L1009.48 1206.49 L1008.9 1206.49 L1008.31 1206.49 L1007.72 1206.49 L1007.14 1206.49 L1006.55 1206.49 L1005.96 1206.49 L1005.38 1206.49 L1004.79 1206.49 L1004.2 1206.49 L1003.62 1206.49 L1003.03 1206.49 L1002.44 1206.49 L1001.86 1206.49 L1001.27 1206.49 L1000.69 1206.49 L1000.1 1206.49 L999.513 1206.49 L998.926 1206.49 L998.34 1206.49 L997.754 1206.49 L997.167 1206.49 L996.581 1206.49 L995.994 1206.49 L995.408 1206.49 L994.822 1206.49 L994.235 1206.49 L993.649 1206.49 L993.062 1206.49 L992.476 1206.49 L991.889 1206.49 L991.303 1206.49 L990.717 1206.49 L990.13 1206.49 L989.544 1206.49 L988.957 1206.49 L988.371 1206.49 L987.785 1206.49 L987.198 1206.49 L986.612 1206.49 L986.025 1206.49  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1206.92 986.612,1206.92 987.198,1206.92 987.785,1206.92 988.371,1206.92 988.957,1206.92 989.544,1206.92 990.13,1206.92 990.717,1206.92 991.303,1206.92 991.889,1206.92 992.476,1206.92 993.062,1206.92 993.649,1206.92 994.235,1206.92 994.822,1206.92 995.408,1206.92 995.994,1206.92 996.581,1206.92 997.167,1206.92 997.754,1206.92 998.34,1206.92 998.926,1206.92 999.513,1206.92 1000.1,1206.92 1000.69,1206.92 1001.27,1206.92 1001.86,1206.92 1002.44,1206.92 1003.03,1206.92 1003.62,1206.92 1004.2,1206.92 1004.79,1206.92 1005.38,1206.92 1005.96,1206.92 1006.55,1206.92 1007.14,1206.92 1007.72,1206.92 1008.31,1206.92 1008.9,1206.92 1009.48,1206.92 1010.07,1206.92 1010.65,1206.92 1011.24,1206.92 1011.83,1206.92 1012.41,1206.92 1013,1206.92 1013.59,1206.92 1014.17,1206.92 1014.76,1206.92 1015.35,1206.92 1015.93,1206.92 1016.52,1206.92 1017.11,1206.92 1017.69,1206.92 1018.28,1206.92 1018.86,1206.92 1019.45,1206.92 1020.04,1206.92 1020.62,1206.92 1021.21,1206.92 1021.8,1206.92 1022.38,1206.92 1022.97,1206.92 1023.56,1206.92 1024.14,1206.92 1024.73,1206.92 1025.32,1206.92 1025.9,1206.92 1026.49,1206.92 1027.07,1206.92 1027.66,1206.92 1028.25,1206.92 1028.83,1206.92 1029.42,1206.92 1030.01,1206.92 1030.59,1206.92 1031.18,1206.92 1031.77,1206.92 1032.35,1206.92 1032.94,1206.92 1033.52,1206.92 1034.11,1206.92 1034.7,1206.92 1035.28,1206.92 1035.87,1206.92 1036.46,1206.92 1037.04,1206.92 1037.63,1206.92 1038.22,1206.92 1038.8,1206.92 1039.39,1206.92 1039.98,1206.92 1040.56,1206.92 1041.15,1206.92 1041.73,1206.92 1042.32,1206.92 1042.91,1206.92 1043.49,1206.92 1044.08,1206.92 1044.67,1206.92 1045.25,1206.92 1045.84,1206.92 1046.43,1206.92 1047.01,1206.92 1047.6,1206.92 1048.19,1206.92 1048.77,1206.92 1049.36,1206.92 1049.94,1206.92 1050.53,1206.92 1051.12,1206.92 1051.7,1206.92 1052.29,1206.92 1052.88,1206.92 1053.46,1206.92 1054.05,1206.92 1054.64,1206.92 1055.22,1206.92 1055.81,1206.92 1056.39,1206.92 1056.98,1206.92 1057.57,1206.92 1058.15,1206.92 1058.74,1206.92 1059.33,1206.92 1059.91,1206.92 1060.5,1206.92 1061.09,1206.92 1061.67,1206.92 1062.26,1206.92 1062.85,1206.92 1063.43,1206.92 1064.02,1206.92 1064.6,1206.92 1065.19,1206.92 1065.78,1206.92 1066.36,1206.92 1066.95,1206.92 1067.54,1206.92 1068.12,1206.92 1068.71,1206.92 1069.3,1206.92 1069.88,1206.92 1070.47,1206.92 1071.06,1206.92 1071.64,1206.92 1072.23,1206.92 1072.81,1206.92 1073.4,1206.92 1073.99,1206.92 1074.57,1206.92 1075.16,1206.92 1075.75,1206.92 1076.33,1206.92 1076.92,1206.92 1077.51,1206.92 1078.09,1206.92 1078.68,1206.92 1079.26,1206.92 1079.85,1206.92 1080.44,1206.92 1081.02,1206.92 1081.61,1206.92 1082.2,1206.92 1082.78,1206.92 1083.37,1206.92 1083.96,1206.92 1084.54,1206.92 1085.13,1206.92 1085.72,1206.92 1086.3,1206.92 1086.89,1206.92 1087.47,1206.92 1088.06,1206.92 1088.65,1206.92 1089.23,1206.92 1089.82,1206.92 1090.41,1206.92 1090.99,1206.92 1091.58,1206.92 1092.17,1206.92 1092.75,1206.92 1093.34,1206.92 1093.93,1206.92 1094.51,1206.92 1095.1,1206.92 1095.68,1206.92 1096.27,1206.92 1096.86,1206.92 1097.44,1206.92 1098.03,1206.92 1098.62,1206.92 1099.2,1206.92 1099.79,1206.92 1100.38,1206.92 1100.96,1206.92 1101.55,1206.92 1102.14,1206.92 1102.72,1206.92 1103.31,1206.92 1103.89,1206.92 1104.48,1206.92 1105.07,1206.92 1105.65,1206.92 1106.24,1206.92 1106.83,1206.92 1107.41,1206.92 1108,1206.92 1108.59,1206.92 1109.17,1206.92 1109.76,1206.92 1110.34,1206.92 1110.93,1206.92 1111.52,1206.92 1112.1,1206.92 1112.69,1206.92 1113.28,1206.92 1113.86,1206.92 1114.45,1206.92 1115.04,1206.92 1115.62,1206.92 1116.21,1206.92 1116.8,1206.92 1117.38,1206.92 1117.97,1206.92 1118.55,1206.92 1119.14,1206.92 1119.73,1206.92 1120.31,1206.92 1120.9,1206.92 1121.49,1206.92 1122.07,1206.92 1122.66,1206.92 1123.25,1206.92 1123.83,1206.92 1124.42,1206.92 1125.01,1206.92 1125.59,1206.92 1126.18,1206.92 1126.76,1206.92 1127.35,1206.92 1127.94,1206.92 1128.52,1206.92 1129.11,1206.92 1129.7,1206.92 1130.28,1206.92 1130.87,1206.92 1131.46,1206.92 1132.04,1206.92 1132.63,1206.92 1133.21,1206.92 1133.8,1206.92 1134.39,1206.92 1134.97,1206.92 1135.56,1206.92 1136.15,1206.92 1136.73,1206.92 1137.32,1206.92 1137.91,1206.92 1138.49,1206.92 1139.08,1206.92 1139.67,1206.92 1140.25,1206.92 1140.84,1206.92 1141.42,1206.92 1142.01,1206.92 1142.6,1206.92 1143.18,1206.92 1143.77,1206.92 1144.36,1206.92 1144.94,1206.92 1145.53,1206.92 1146.12,1206.92 1146.7,1206.92 1147.29,1206.92 1147.88,1206.92 1148.46,1206.92 1149.05,1206.92 1149.63,1206.92 1150.22,1206.92 1150.81,1206.92 1151.39,1206.92 1151.98,1206.92 1152.57,1206.92 1153.15,1206.92 1153.74,1206.92 1154.33,1206.92 1154.91,1206.92 1155.5,1206.92 1156.09,1206.92 1156.67,1206.92 1157.26,1206.92 1157.84,1206.92 1158.43,1206.92 1159.02,1206.92 1159.6,1206.92 1160.19,1206.92 1160.78,1206.92 1161.36,1206.92 1161.95,1206.92 1162.54,1206.92 1163.12,1206.92 1163.71,1206.92 1164.29,1206.92 1164.88,1206.92 1165.47,1206.92 1166.05,1206.92 1166.64,1206.92 1167.23,1206.92 1167.81,1206.92 1168.4,1206.92 1168.99,1206.92 1169.57,1206.92 1170.16,1206.92 1170.75,1206.92 1171.33,1206.92 1171.92,1206.92 1172.5,1206.92 1173.09,1206.92 1173.68,1206.92 1174.26,1206.92 1174.85,1206.92 1175.44,1206.92 1176.02,1206.92 1176.61,1206.92 1177.2,1206.92 1177.78,1206.92 1178.37,1206.92 1178.96,1206.92 1179.54,1206.92 1180.13,1206.92 1180.71,1206.92 1181.3,1206.92 1181.89,1206.92 1182.47,1206.92 1183.06,1206.92 1183.65,1206.92 1184.23,1206.92 1184.82,1206.92 1185.41,1206.92 1185.99,1206.92 1186.58,1206.92 1187.16,1206.92 1187.75,1206.92 1188.34,1206.92 1188.92,1206.92 1189.51,1206.92 1190.1,1206.92 1190.68,1206.92 1191.27,1206.92 1191.86,1206.92 1192.44,1206.92 1193.03,1206.92 1193.62,1206.92 1194.2,1206.92 1194.79,1206.92 1195.37,1206.92 1195.96,1206.92 1196.55,1206.92 1197.13,1206.92 1197.72,1206.92 1198.31,1206.92 1198.89,1206.92 1199.48,1206.92 1200.07,1206.92 1200.65,1206.92 1201.24,1206.92 1201.83,1206.92 1202.41,1206.92 1203,1206.92 1203.58,1206.92 1204.17,1206.92 1204.76,1206.92 1205.34,1206.92 1205.93,1206.92 1206.52,1206.92 1207.1,1206.92 1207.69,1206.92 1208.28,1206.92 1208.86,1206.92 1209.45,1206.92 1210.03,1206.92 1210.62,1206.92 1211.21,1206.92 1211.79,1206.92 1212.38,1206.92 1212.97,1206.92 1213.55,1206.92 1214.14,1206.92 1214.73,1206.92 1215.31,1206.92 1215.9,1206.92 1216.49,1206.92 1217.07,1206.92 1217.66,1206.92 1218.24,1206.92 1218.83,1206.92 1219.42,1206.92 1220,1206.92 1220.59,1206.92 1221.18,1206.92 1221.76,1206.92 1222.35,1206.92 1222.94,1206.92 1223.52,1206.92 1224.11,1206.92 1224.7,1206.92 1225.28,1206.92 1225.87,1206.92 1226.45,1206.92 1227.04,1206.92 1227.63,1206.92 1228.21,1206.92 1228.8,1206.92 1229.39,1206.92 1229.97,1206.92 1230.56,1206.92 1231.15,1206.92 1231.73,1206.92 1232.32,1206.92 1232.91,1206.92 1233.49,1206.92 1234.08,1206.92 1234.66,1206.92 1235.25,1206.92 1235.84,1206.92 1236.42,1206.92 1237.01,1206.92 1237.6,1206.92 1238.18,1206.92 1238.77,1206.92 1239.36,1206.92 1239.94,1206.92 1240.53,1206.92 1241.11,1206.92 1241.7,1206.92 1242.29,1206.92 1242.87,1206.92 1243.46,1206.92 1244.05,1206.92 1244.63,1206.92 1245.22,1206.92 1245.81,1206.92 1246.39,1206.92 1246.98,1206.92 1247.57,1206.92 1248.15,1206.92 1248.74,1206.92 1249.32,1206.92 1249.91,1206.92 1250.5,1206.92 1251.08,1206.92 1251.67,1206.92 1252.26,1206.92 1252.84,1206.92 1253.43,1206.92 1254.02,1206.92 1254.6,1206.92 1255.19,1206.92 1255.78,1206.92 1256.36,1206.92 1256.95,1206.92 1257.53,1206.92 1258.12,1206.92 1258.71,1206.92 1259.29,1206.92 1259.88,1206.92 1260.47,1206.92 1261.05,1206.92 1261.64,1206.92 1262.23,1206.92 1262.81,1206.92 1263.4,1206.92 1263.98,1206.92 1264.57,1206.92 1265.16,1206.92 1265.74,1206.92 1266.33,1206.92 1266.92,1206.92 1267.5,1206.92 1268.09,1206.92 1268.68,1206.92 1269.26,1206.92 1269.85,1206.92 1270.44,1206.92 1271.02,1206.92 1271.61,1206.92 1272.19,1206.92 1272.78,1206.92 1273.37,1206.92 1273.95,1206.92 1274.54,1206.92 1275.13,1206.92 1275.71,1206.92 1276.3,1206.92 1276.89,1206.92 1277.47,1206.92 1278.06,1206.92 1278.65,1206.92 1279.23,1206.92 1279.82,1206.92 1280.4,1206.92 1280.99,1206.92 1281.58,1206.92 1282.16,1206.92 1282.75,1206.92 1283.34,1206.92 1283.92,1206.92 1284.51,1206.92 1285.1,1206.92 1285.68,1206.92 1286.27,1206.92 1286.86,1206.92 1287.44,1206.92 1288.03,1206.92 1288.61,1206.92 1289.2,1206.92 1289.79,1206.92 1290.37,1206.92 1290.96,1206.92 1291.55,1206.92 1292.13,1206.92 1292.72,1206.92 1293.31,1206.92 1293.89,1206.92 1294.48,1206.92 1295.06,1206.92 1295.65,1206.92 1296.24,1206.92 1296.82,1206.92 1297.41,1206.92 1298,1206.92 1298.58,1206.92 1299.17,1206.92 1299.76,1206.92 1300.34,1206.92 1300.93,1206.92 1301.52,1206.92 1302.1,1206.92 1302.69,1206.92 1303.27,1206.92 1303.86,1206.92 1304.45,1206.92 1305.03,1206.92 1305.62,1206.92 1306.21,1206.92 1306.79,1206.92 1307.38,1206.92 1307.97,1206.92 1308.55,1206.92 1309.14,1206.92 1309.73,1206.92 1310.31,1206.92 1310.9,1206.92 1311.48,1206.92 1312.07,1206.92 1312.66,1206.92 1313.24,1206.92 1313.83,1206.92 1314.42,1206.92 1315,1206.92 1315.59,1206.92 1316.18,1206.92 1316.76,1206.92 1317.35,1206.92 1317.93,1206.92 1318.52,1206.92 1319.11,1206.92 1319.69,1206.92 1320.28,1206.92 1320.87,1206.92 1321.45,1206.92 1322.04,1206.92 1322.63,1206.92 1323.21,1206.92 1323.8,1206.92 1324.39,1206.92 1324.97,1206.92 1325.56,1206.92 1326.14,1206.92 1326.73,1206.92 1327.32,1206.92 1327.9,1206.92 1328.49,1206.92 1329.08,1206.92 1329.66,1206.92 1330.25,1206.92 1330.84,1206.92 1331.42,1206.92 1332.01,1206.92 1332.6,1206.92 1333.18,1206.92 1333.77,1206.92 1334.35,1206.92 1334.94,1206.92 1335.53,1206.92 1336.11,1206.92 1336.7,1206.92 1337.29,1206.92 1337.87,1206.92 1338.46,1206.92 1339.05,1206.92 1339.63,1206.92 1340.22,1206.92 1340.8,1206.92 1341.39,1206.92 1341.98,1206.92 1342.56,1206.92 1343.15,1206.92 1343.74,1206.92 1344.32,1206.92 1344.91,1206.92 1345.5,1206.92 1346.08,1206.92 1346.67,1206.92 1347.26,1206.92 1347.84,1206.92 1348.43,1206.92 1349.01,1206.92 1349.6,1206.92 1350.19,1206.92 1350.77,1206.92 1351.36,1206.92 1351.95,1206.92 1352.53,1206.92 1353.12,1206.92 1353.71,1206.92 1354.29,1206.92 1354.88,1206.92 1355.47,1206.92 1356.05,1206.92 1356.64,1206.92 1357.22,1206.92 1357.81,1206.92 1358.4,1206.92 1358.98,1206.92 1359.57,1206.92 1360.16,1206.92 1360.74,1206.92 1361.33,1206.92 1361.92,1206.92 1362.5,1206.92 1363.09,1206.92 1363.68,1206.92 1364.26,1206.92 1364.85,1206.92 1365.43,1206.92 1366.02,1206.92 1366.61,1206.92 1367.19,1206.92 1367.78,1206.92 1368.37,1206.92 1368.95,1206.92 1369.54,1206.92 1370.13,1206.92 1370.71,1206.92 1371.3,1206.92 1371.88,1206.92 1372.47,1206.92 1373.06,1206.92 1373.64,1206.92 1374.23,1206.92 1374.82,1206.92 1375.4,1206.92 1375.99,1206.92 1376.58,1206.92 1377.16,1206.92 1377.75,1206.92 1378.34,1206.92 1378.92,1206.92 1379.51,1206.92 1380.09,1206.92 1380.68,1206.92 1381.27,1206.92 1381.85,1206.92 1382.44,1206.92 1383.03,1206.92 1383.61,1206.92 1384.2,1206.92 1384.79,1206.92 1385.37,1206.92 1385.96,1206.92 1386.55,1206.92 1387.13,1206.92 1387.72,1206.92 1388.3,1206.92 1388.89,1206.92 1389.48,1206.92 1390.06,1206.92 1390.65,1206.92 1391.24,1206.92 1391.82,1206.92 1392.41,1206.92 1393,1206.92 1393.58,1206.92 1394.17,1206.92 1394.75,1206.92 1395.34,1206.92 1395.93,1206.92 1396.51,1206.92 1397.1,1206.92 1397.69,1206.92 1398.27,1206.92 1398.86,1206.92 1399.45,1206.92 1400.03,1206.92 1400.62,1206.92 1401.21,1206.92 1401.79,1206.92 1402.38,1206.92 1402.96,1206.92 1403.55,1206.92 1404.14,1206.92 1404.72,1206.92 1405.31,1206.92 1405.9,1206.92 1406.48,1206.92 1407.07,1206.92 1407.66,1206.92 1408.24,1206.92 1408.83,1206.92 1409.42,1206.92 1410,1206.92 1410.59,1206.92 1411.17,1206.92 1411.76,1206.92 1412.35,1206.92 1412.93,1206.92 1413.52,1206.92 1414.11,1206.92 1414.69,1206.92 1415.28,1206.92 1415.87,1206.92 1416.45,1206.92 1417.04,1206.92 1417.63,1206.92 1418.21,1206.92 1418.8,1206.92 1419.38,1206.92 1419.97,1206.92 1420.56,1206.92 1421.14,1206.92 1421.73,1206.92 1422.32,1206.92 1422.9,1206.92 1423.49,1206.92 1424.08,1206.92 1424.66,1206.92 1425.25,1206.92 1425.83,1206.92 1426.42,1206.92 1427.01,1206.92 1427.59,1206.92 1428.18,1206.92 1428.77,1206.92 1429.35,1206.92 1429.94,1206.92 1430.53,1206.92 1431.11,1206.92 1431.7,1206.92 1432.29,1206.92 1432.87,1206.92 1433.46,1206.92 1434.04,1206.92 1434.63,1206.92 1435.22,1206.92 1435.8,1206.92 1436.39,1206.92 1436.98,1206.92 1437.56,1206.92 1438.15,1206.92 1438.74,1206.92 1439.32,1206.92 1439.91,1206.92 1440.5,1206.92 1441.08,1206.92 1441.67,1206.92 1442.25,1206.92 1442.84,1206.92 1443.43,1206.92 1444.01,1206.92 1444.6,1206.92 1445.19,1206.92 1445.77,1206.92 1446.36,1206.92 1446.95,1206.92 1447.53,1206.92 1448.12,1206.92 1448.7,1206.92 1449.29,1206.92 1449.88,1206.92 1450.46,1206.92 1451.05,1206.92 1451.64,1206.92 1452.22,1206.92 1452.81,1206.92 1453.4,1206.92 1453.98,1206.92 1454.57,1206.92 1455.16,1206.92 1455.74,1206.92 1456.33,1206.92 1456.91,1206.92 1457.5,1206.92 1458.09,1206.92 1458.67,1206.92 1459.26,1206.92 1459.85,1206.92 1460.43,1206.92 1461.02,1206.92 1461.61,1206.92 1462.19,1206.92 1462.78,1206.92 1463.37,1206.92 1463.95,1206.92 1464.54,1206.92 1465.12,1206.92 1465.71,1206.92 1466.3,1206.92 1466.88,1206.92 1467.47,1206.92 1468.06,1206.92 1468.64,1206.92 1469.23,1206.92 1469.82,1206.92 1470.4,1206.92 1470.99,1206.92 1471.57,1206.92 1472.16,1206.92 1472.75,1206.92 1473.33,1206.92 1473.92,1206.92 1474.51,1206.92 1475.09,1206.92 1475.68,1206.92 1476.27,1206.92 1476.85,1206.92 1477.44,1206.92 1478.03,1206.92 1478.61,1206.92 1479.2,1206.92 1479.78,1206.92 1480.37,1206.92 1480.96,1206.92 1481.54,1206.92 1482.13,1206.92 1482.72,1206.92 1483.3,1206.92 1483.89,1206.92 1484.48,1206.92 1485.06,1206.92 1485.65,1206.92 1486.24,1206.92 1486.82,1206.92 1487.41,1206.92 1487.99,1206.92 1488.58,1206.92 1489.17,1206.92 1489.75,1206.92 1490.34,1206.92 1490.93,1206.92 1491.51,1206.92 1492.1,1206.92 1492.69,1206.92 1493.27,1206.92 1493.86,1206.92 1494.45,1206.92 1495.03,1206.92 1495.62,1206.92 1496.2,1206.92 1496.79,1206.92 1497.38,1206.92 1497.96,1206.92 1498.55,1206.92 1499.14,1206.92 1499.72,1206.92 1500.31,1206.92 1500.9,1206.92 1501.48,1206.92 1502.07,1206.92 1502.65,1206.92 1503.24,1206.92 1503.83,1206.92 1504.41,1206.92 1505,1206.92 1505.59,1206.92 1506.17,1206.92 1506.76,1206.92 1507.35,1206.92 1507.93,1206.92 1508.52,1206.92 1509.11,1206.92 1509.69,1206.92 1510.28,1206.92 1510.86,1206.92 1511.45,1206.92 1512.04,1206.92 1512.62,1206.92 1513.21,1206.92 1513.8,1206.92 1514.38,1206.92 1514.97,1206.92 1515.56,1206.92 1516.14,1206.92 1516.73,1206.92 1517.32,1206.92 1517.9,1206.92 1518.49,1206.92 1519.07,1206.92 1519.66,1206.92 1520.25,1206.92 1520.83,1206.92 1521.42,1206.92 1522.01,1206.92 1522.59,1206.92 1523.18,1206.92 1523.77,1206.92 1524.35,1206.92 1524.94,1206.92 1525.52,1206.92 1526.11,1206.92 1526.7,1206.92 1527.28,1206.92 1527.87,1206.92 1528.46,1206.92 1529.04,1206.92 1529.63,1206.92 1530.22,1206.92 1530.8,1206.92 1531.39,1206.92 1531.98,1206.92 1532.56,1206.92 1533.15,1206.92 1533.73,1206.92 1534.32,1206.92 1534.91,1206.92 1535.49,1206.92 1536.08,1206.92 1536.67,1206.92 1537.25,1206.92 1537.84,1206.92 1538.43,1206.92 1539.01,1206.92 1539.6,1206.92 1540.19,1206.92 1540.77,1206.92 1541.36,1206.92 1541.94,1206.92 1542.53,1206.92 1543.12,1206.92 1543.7,1206.92 1544.29,1206.92 1544.88,1206.92 1545.46,1206.92 1546.05,1206.92 1546.64,1206.92 1547.22,1206.92 1547.81,1206.92 1548.4,1206.92 1548.98,1206.92 1549.57,1206.92 1550.15,1206.92 1550.74,1206.92 1551.33,1206.92 1551.91,1206.92 1552.5,1206.92 1553.09,1206.92 1553.67,1206.92 1554.26,1206.92 1554.85,1206.92 1555.43,1206.92 1556.02,1206.92 1556.6,1206.92 1557.19,1206.92 1557.78,1206.92 1558.36,1206.92 1558.95,1206.92 1559.54,1206.92 1560.12,1206.92 1560.71,1206.92 1561.3,1206.92 1561.88,1206.92 1562.47,1206.92 1563.06,1206.92 1563.64,1206.92 1564.23,1206.92 1564.81,1206.92 1565.4,1206.92 1565.99,1206.92 1566.57,1206.92 1567.16,1206.92 1567.75,1206.92 1568.33,1206.92 1568.92,1206.92 1569.51,1206.92 1570.09,1206.92 1570.68,1206.92 1571.27,1206.92 1571.85,1206.92 1572.44,1206.92 1573.02,1206.92 1573.61,1206.92 1574.2,1206.92 1574.78,1206.92 1575.37,1206.92 1575.96,1206.92 1576.54,1206.92 1577.13,1206.92 1577.72,1206.92 1578.3,1206.92 1578.89,1206.92 1579.47,1206.92 1580.06,1206.92 1580.65,1206.92 1581.23,1206.92 1581.82,1206.92 1582.41,1206.92 1582.99,1206.92 1583.58,1206.92 1584.17,1206.92 1584.75,1206.92 1585.34,1206.92 1585.93,1206.92 1586.51,1206.92 1587.1,1206.92 1587.68,1206.92 1588.27,1206.92 1588.86,1206.92 1589.44,1206.92 1590.03,1206.92 1590.62,1206.92 1591.2,1206.92 1591.79,1206.92 1592.38,1206.92 1592.96,1206.92 1593.55,1206.92 1594.14,1206.92 1594.72,1206.92 1595.31,1206.92 1595.89,1206.92 1596.48,1206.92 1597.07,1206.92 1597.65,1206.92 1598.24,1206.92 1598.83,1206.92 1599.41,1206.92 1600,1206.92 1600.59,1206.92 1601.17,1206.92 1601.76,1206.92 1602.34,1206.92 1602.93,1206.92 1603.52,1206.92 1604.1,1206.92 1604.69,1206.92 1605.28,1206.92 1605.86,1206.92 1606.45,1206.92 1607.04,1206.92 1607.62,1206.92 1608.21,1206.92 1608.8,1206.92 1609.38,1206.92 1609.97,1206.92 1610.55,1206.92 1611.14,1206.92 1611.73,1206.92 1612.31,1206.92 1612.9,1206.92 1613.49,1206.92 1614.07,1206.92 1614.66,1206.92 1615.25,1206.92 1615.83,1206.92 1616.42,1206.92 1617.01,1206.92 1617.59,1206.92 1618.18,1206.92 1618.76,1206.92 1619.35,1206.92 1619.94,1206.92 1620.52,1206.92 1621.11,1206.92 1621.7,1206.92 1622.28,1206.92 1622.87,1206.92 1623.46,1206.92 1624.04,1206.92 1624.63,1206.92 1625.22,1206.92 1625.8,1206.92 1626.39,1206.92 1626.97,1206.92 1627.56,1206.92 1628.15,1206.92 1628.73,1206.92 1629.32,1206.92 1629.91,1206.92 1630.49,1206.92 1631.08,1206.92 1631.67,1206.92 1632.25,1206.92 1632.84,1206.92 1633.42,1206.92 1634.01,1206.92 1634.6,1206.92 1635.18,1206.92 1635.77,1206.92 1636.36,1206.92 1636.94,1206.92 1637.53,1206.92 1638.12,1206.92 1638.7,1206.92 1639.29,1206.92 1639.88,1206.92 1640.46,1206.92 1641.05,1206.92 1641.63,1206.92 1642.22,1206.92 1642.81,1206.92 1643.39,1206.92 1643.98,1206.92 1644.57,1206.92 1645.15,1206.92 1645.74,1206.92 1646.33,1206.92 1646.91,1206.92 1647.5,1206.92 1648.09,1206.92 1648.67,1206.92 1649.26,1206.92 1649.84,1206.92 1650.43,1206.92 1651.02,1206.92 1651.6,1206.92 1652.19,1206.92 1652.78,1206.92 1653.36,1206.92 1653.95,1206.92 1654.54,1206.92 1655.12,1206.92 1655.71,1206.92 1656.29,1206.92 1656.88,1206.92 1657.47,1206.92 1658.05,1206.92 1658.64,1206.92 1659.23,1206.92 1659.81,1206.92 1660.4,1206.92 1660.99,1206.92 1661.57,1206.92 1662.16,1206.92 1662.75,1206.92 1663.33,1206.92 1663.92,1206.92 1664.5,1206.92 1665.09,1206.92 1665.68,1206.92 1666.26,1206.92 1666.85,1206.92 1667.44,1206.92 1668.02,1206.92 1668.61,1206.92 1669.2,1206.92 1669.78,1206.92 1670.37,1206.92 1670.96,1206.92 1671.54,1206.92 1672.13,1206.92 1672.71,1206.92 1673.3,1206.92 1673.89,1206.92 1674.47,1206.92 1675.06,1206.92 1675.65,1206.92 1676.23,1206.92 1676.82,1206.92 1677.41,1206.92 1677.99,1206.92 1678.58,1206.92 1679.17,1206.92 1679.75,1206.92 1680.34,1206.92 1680.92,1206.92 1681.51,1206.92 1682.1,1206.92 1682.68,1206.92 1683.27,1206.92 1683.86,1206.92 1684.44,1206.92 1685.03,1206.92 1685.62,1206.92 1686.2,1206.92 1686.79,1206.92 1687.37,1206.92 1687.96,1206.92 1688.55,1206.92 1689.13,1206.92 1689.72,1206.92 1690.31,1206.92 1690.89,1206.92 1691.48,1206.92 1692.07,1206.92 1692.65,1206.92 1693.24,1206.92 1693.83,1206.92 1694.41,1206.92 1695,1206.92 1695.58,1206.92 1696.17,1206.92 1696.76,1206.92 1697.34,1206.92 1697.93,1206.92 1698.52,1206.92 1699.1,1206.92 1699.69,1206.92 1700.28,1206.92 1700.86,1206.92 1701.45,1206.92 1702.04,1206.92 1702.62,1206.92 1703.21,1206.92 1703.79,1206.92 1704.38,1206.92 1704.97,1206.92 1705.55,1206.92 1706.14,1206.92 1706.73,1206.92 1707.31,1206.92 1707.9,1206.92 1708.49,1206.92 1709.07,1206.92 1709.66,1206.92 1710.24,1206.92 1710.83,1206.92 1711.42,1206.92 1712,1206.92 1712.59,1206.92 1713.18,1206.92 1713.76,1206.92 1714.35,1206.92 1714.94,1206.92 1715.52,1206.92 1716.11,1206.92 1716.7,1206.92 1717.28,1206.92 1717.87,1206.92 1718.45,1206.92 1719.04,1206.92 1719.63,1206.92 1720.21,1206.92 1720.8,1206.92 1721.39,1206.92 1721.97,1206.92 1722.56,1206.92 1723.15,1206.92 1723.73,1206.92 1724.32,1206.92 1724.91,1206.92 1725.49,1206.92 1726.08,1206.92 1726.66,1206.92 1727.25,1206.92 1727.84,1206.92 1728.42,1206.92 1729.01,1206.92 1729.6,1206.92 1730.18,1206.92 1730.77,1206.92 1731.36,1206.92 1731.94,1206.92 1732.53,1206.92 1733.11,1206.92 1733.7,1206.92 1734.29,1206.92 1734.87,1206.92 1735.46,1206.92 1736.05,1206.92 1736.63,1206.92 1737.22,1206.92 1737.81,1206.92 1738.39,1206.92 1738.98,1206.92 1739.57,1206.92 1740.15,1206.92 1740.74,1206.92 1741.32,1206.92 1741.91,1206.92 1742.5,1206.92 1743.08,1206.92 1743.67,1206.92 1744.26,1206.92 1744.84,1206.92 1745.43,1206.92 1746.02,1206.92 1746.6,1206.92 1747.19,1206.92 1747.78,1206.92 1748.36,1206.92 1748.95,1206.92 1749.53,1206.92 1750.12,1206.92 1750.71,1206.92 1751.29,1206.92 1751.88,1206.92 1752.47,1206.92 1753.05,1206.92 1753.64,1206.92 1754.23,1206.92 1754.81,1206.92 1755.4,1206.92 1755.99,1206.92 1756.57,1206.92 1757.16,1206.92 1757.74,1206.92 1758.33,1206.92 1758.92,1206.92 1759.5,1206.92 1760.09,1206.92 1760.68,1206.92 1761.26,1206.92 1761.85,1206.92 1762.44,1206.92 1763.02,1206.92 1763.61,1206.92 1764.19,1206.92 1764.78,1206.92 1765.37,1206.92 1765.95,1206.92 1766.54,1206.92 1767.13,1206.92 1767.71,1206.92 1768.3,1206.92 1768.89,1206.92 1769.47,1206.92 1770.06,1206.92 1770.65,1206.92 1771.23,1206.92 1771.82,1206.92 1772.4,1206.92 1772.99,1206.92 1773.58,1206.92 1774.16,1206.92 1774.75,1206.92 1775.34,1206.92 1775.92,1206.92 1776.51,1206.92 1777.1,1206.92 1777.68,1206.92 1778.27,1206.92 1778.86,1206.92 1779.44,1206.92 1780.03,1206.92 1780.61,1206.92 1781.2,1206.92 1781.79,1206.92 1782.37,1206.92 1782.96,1206.92 1783.55,1206.92 1784.13,1206.92 1784.72,1206.92 1785.31,1206.92 1785.89,1206.92 1786.48,1206.92 1787.06,1206.92 1787.65,1206.92 1788.24,1206.92 1788.82,1206.92 1789.41,1206.92 1790,1206.92 1790.58,1206.92 1791.17,1206.92 1791.76,1206.92 1792.34,1206.92 1792.93,1206.92 1793.52,1206.92 1794.1,1206.92 1794.69,1206.92 1795.27,1206.92 1795.86,1206.92 1796.45,1206.92 1797.03,1206.92 1797.62,1206.92 1798.21,1206.92 1798.79,1206.92 1799.38,1206.92 1799.97,1206.92 1800.55,1206.92 1801.14,1206.92 1801.73,1206.92 1802.31,1206.92 1802.9,1206.92 1803.48,1206.92 1804.07,1206.92 1804.66,1206.92 1805.24,1206.92 1805.83,1206.92 1806.42,1206.92 1807,1206.92 1807.59,1206.92 1808.18,1206.92 1808.76,1206.92 1809.35,1206.92 1809.94,1206.92 1810.52,1206.92 1811.11,1206.92 1811.69,1206.92 1812.28,1206.92 1812.87,1206.92 1813.45,1206.92 1814.04,1206.92 1814.63,1206.92 1815.21,1206.92 1815.8,1206.92 1816.39,1206.92 1816.97,1206.92 1817.56,1206.92 1818.14,1206.92 1818.73,1206.92 1819.32,1206.92 1819.9,1206.92 1820.49,1206.92 1821.08,1206.92 1821.66,1206.92 1822.25,1206.92 1822.84,1206.92 1823.42,1206.92 1824.01,1206.92 1824.6,1206.92 1825.18,1206.92 1825.77,1206.92 1826.35,1206.92 1826.94,1206.92 1827.53,1206.92 1828.11,1206.92 1828.7,1206.92 1829.29,1206.92 1829.87,1206.92 1830.46,1206.92 1831.05,1206.92 1831.63,1206.92 1832.22,1206.92 1832.81,1206.92 1833.39,1206.92 1833.98,1206.92 1834.56,1206.92 1835.15,1206.92 1835.74,1206.92 1836.32,1206.92 1836.91,1206.92 1837.5,1206.92 1838.08,1206.92 1838.67,1206.92 1839.26,1206.92 1839.84,1206.92 1840.43,1206.92 1841.01,1206.92 1841.6,1206.92 1842.19,1206.92 1842.77,1206.92 1843.36,1206.92 1843.95,1206.92 1844.53,1206.92 1845.12,1206.92 1845.71,1206.92 1846.29,1206.92 1846.88,1206.92 1847.47,1206.92 1848.05,1206.92 1848.64,1206.92 1849.22,1206.92 1849.81,1206.92 1850.4,1206.92 1850.98,1206.92 1851.57,1206.92 1852.16,1206.92 1852.74,1206.92 1853.33,1206.92 1853.92,1206.92 1854.5,1206.92 1855.09,1206.92 1855.68,1206.92 1856.26,1206.92 1856.85,1206.92 1857.43,1206.92 1858.02,1206.92 1858.61,1206.92 1859.19,1206.92 1859.78,1206.92 1860.37,1206.92 1860.95,1206.92 1861.54,1206.92 1862.13,1206.92 1862.71,1206.92 1863.3,1206.92 1863.88,1206.92 1864.47,1206.92 1865.06,1206.92 1865.64,1206.92 1866.23,1206.92 1866.82,1206.92 1867.4,1206.92 1867.99,1206.92 1868.58,1206.92 1869.16,1206.92 1869.75,1206.92 1870.34,1206.92 1870.92,1206.92 1871.51,1206.92 1872.09,1206.92 1872.68,1206.92 1873.27,1206.92 1873.85,1206.92 1874.44,1206.92 1875.03,1206.92 1875.61,1206.92 1876.2,1206.92 1876.79,1206.92 1877.37,1206.92 1877.96,1206.92 1878.55,1206.92 1879.13,1206.92 1879.72,1206.92 1880.3,1206.92 1880.89,1206.92 1881.48,1206.92 1882.06,1206.92 1882.65,1206.92 1883.24,1206.92 1883.82,1206.92 1884.41,1206.92 1885,1206.92 1885.58,1206.92 1886.17,1206.92 1886.76,1206.92 1887.34,1206.92 1887.93,1206.92 1888.51,1206.92 1889.1,1206.92 1889.69,1206.92 1890.27,1206.92 1890.86,1206.92 1891.45,1206.92 1892.03,1206.92 1892.62,1206.92 1893.21,1206.92 1893.79,1206.92 1894.38,1206.92 1894.96,1206.92 1895.55,1206.92 1896.14,1206.92 1896.72,1206.92 1897.31,1206.92 1897.9,1206.92 1898.48,1206.92 1899.07,1206.92 1899.66,1206.92 1900.24,1206.92 1900.83,1206.92 1901.42,1206.92 1902,1206.92 1902.59,1206.92 1903.17,1206.92 1903.76,1206.92 1904.35,1206.92 1904.93,1206.92 1905.52,1206.92 1906.11,1206.92 1906.69,1206.92 1907.28,1206.92 1907.87,1206.92 1908.45,1206.92 1909.04,1206.92 1909.63,1206.92 1910.21,1206.92 1910.8,1206.92 1911.38,1206.92 1911.97,1206.92 1912.56,1206.92 1913.14,1206.92 1913.73,1206.92 1914.32,1206.92 1914.9,1206.92 1915.49,1206.92 1916.08,1206.92 1916.66,1206.92 1917.25,1206.92 1917.83,1206.92 1918.42,1206.92 1919.01,1206.92 1919.59,1206.92 1920.18,1206.92 1920.77,1206.92 1921.35,1206.92 1921.94,1206.92 1922.53,1206.92 1923.11,1206.92 1923.7,1206.92 1924.29,1206.92 1924.87,1206.92 1925.46,1206.92 1926.04,1206.92 1926.63,1206.92 1927.22,1206.92 1927.8,1206.92 1928.39,1206.92 1928.98,1206.92 1929.56,1206.92 1930.15,1206.92 1930.74,1206.92 1931.32,1206.92 1931.91,1206.92 1932.5,1206.92 1933.08,1206.92 1933.67,1206.92 1934.25,1206.92 1934.84,1206.92 1935.43,1206.92 1936.01,1206.92 1936.6,1206.92 1937.19,1206.92 1937.77,1206.92 1938.36,1206.92 1938.95,1206.92 1939.53,1206.92 1940.12,1206.92 1940.71,1206.92 1941.29,1206.92 1941.88,1206.92 1942.46,1206.92 1943.05,1206.92 1943.64,1206.92 1944.22,1206.92 1944.81,1206.92 1945.4,1206.92 1945.98,1206.92 1946.57,1206.92 1947.16,1206.92 1947.74,1206.92 1948.33,1206.92 1948.91,1206.92 1949.5,1206.92 1950.09,1206.92 1950.67,1206.92 1951.26,1206.92 1951.85,1206.92 1952.43,1206.92 1953.02,1206.92 1953.61,1206.92 1954.19,1206.92 1954.78,1206.92 1955.37,1206.92 1955.95,1206.92 1956.54,1206.92 1957.12,1206.92 1957.71,1206.92 1958.3,1206.92 1958.88,1206.92 1959.47,1206.92 1960.06,1206.92 1960.64,1206.92 1961.23,1206.92 1961.82,1206.92 1962.4,1206.92 1962.99,1206.92 1963.58,1206.92 1964.16,1206.92 1964.75,1206.92 1965.33,1206.92 1965.92,1206.92 1966.51,1206.92 1967.09,1206.92 1967.68,1206.92 1968.27,1206.92 1968.85,1206.92 1969.44,1206.92 1970.03,1206.92 1970.61,1206.92 1971.2,1206.92 1971.78,1206.92 1972.37,1206.92 1972.96,1206.92 1973.54,1206.92 1974.13,1206.92 1974.72,1206.92 1975.3,1206.92 1975.89,1206.92 1976.48,1206.92 1977.06,1206.92 1977.65,1206.92 1978.24,1206.92 1978.82,1206.92 1979.41,1206.92 1979.99,1206.92 1980.58,1206.92 1981.17,1206.92 1981.75,1206.92 1982.34,1206.92 1982.93,1206.92 1983.51,1206.92 1984.1,1206.92 1984.69,1206.92 1985.27,1206.92 1985.86,1206.92 1986.45,1206.92 1987.03,1206.92 1987.62,1206.92 1988.2,1206.92 1988.79,1206.92 1989.38,1206.92 1989.96,1206.92 1990.55,1206.92 1991.14,1206.92 1991.72,1206.92 1992.31,1206.92 1992.9,1206.92 1993.48,1206.92 1994.07,1206.92 1994.65,1206.92 1995.24,1206.92 1995.83,1206.92 1996.41,1206.92 1997,1206.92 1997.59,1206.92 1998.17,1206.92 1998.76,1206.92 1999.35,1206.92 1999.93,1206.92 2000.52,1206.92 2001.11,1206.92 2001.69,1206.92 2002.28,1206.92 2002.86,1206.92 2003.45,1206.92 2004.04,1206.92 2004.62,1206.92 2005.21,1206.92 2005.8,1206.92 2006.38,1206.92 2006.97,1206.92 2007.56,1206.92 2008.14,1206.92 2008.73,1206.92 2009.32,1206.92 2009.9,1206.92 2010.49,1206.92 2011.07,1206.92 2011.66,1206.92 2012.25,1206.92 2012.83,1206.92 2013.42,1206.92 2014.01,1206.92 2014.59,1206.92 2015.18,1206.92 2015.77,1206.92 2016.35,1206.92 2016.94,1206.92 2017.53,1206.92 2018.11,1206.92 2018.7,1206.92 2019.28,1206.92 2019.87,1206.92 2020.46,1206.92 2021.04,1206.92 2021.63,1206.92 2022.22,1206.92 2022.8,1206.92 2023.39,1206.92 2023.98,1206.92 2024.56,1206.92 2025.15,1206.92 2025.73,1206.92 2026.32,1206.92 2026.91,1206.92 2027.49,1206.92 2028.08,1206.92 2028.67,1206.92 2029.25,1206.92 2029.84,1206.92 2030.43,1206.92 2031.01,1206.92 2031.6,1206.92 2032.19,1206.92 2032.77,1206.92 2033.36,1206.92 2033.94,1206.92 2034.53,1206.92 2035.12,1206.92 2035.7,1206.92 2036.29,1206.92 2036.88,1206.92 2037.46,1206.92 2038.05,1206.92 2038.64,1206.92 2039.22,1206.92 2039.81,1206.92 2040.4,1206.92 2040.98,1206.92 2041.57,1206.92 2042.15,1206.92 2042.74,1206.92 2043.33,1206.92 2043.91,1206.92 2044.5,1206.92 2045.09,1206.92 2045.67,1206.92 2046.26,1206.92 2046.85,1206.92 2047.43,1206.92 2048.02,1206.92 2048.6,1206.92 2049.19,1206.92 2049.78,1206.92 2050.36,1206.92 2050.95,1206.92 2051.54,1206.92 2052.12,1206.92 2052.71,1206.92 2053.3,1206.92 2053.88,1206.92 2054.47,1206.92 2055.06,1206.92 2055.64,1206.92 2056.23,1206.92 2056.81,1206.92 2057.4,1206.92 2057.99,1206.92 2058.57,1206.92 2059.16,1206.92 2059.75,1206.92 2060.33,1206.92 2060.92,1206.92 2061.51,1206.92 2062.09,1206.92 2062.68,1206.92 2063.27,1206.92 2063.85,1206.92 2064.44,1206.92 2065.02,1206.92 2065.61,1206.92 2066.2,1206.92 2066.78,1206.92 2067.37,1206.92 2067.96,1206.92 2068.54,1206.92 2069.13,1206.92 2069.72,1206.92 2070.3,1206.92 2070.89,1206.92 2071.48,1206.92 2072.06,1206.92 2072.65,1206.92 2073.23,1206.92 2073.82,1206.92 2074.41,1206.92 2074.99,1206.92 2075.58,1206.92 2076.17,1206.92 2076.75,1206.92 2077.34,1206.92 2077.93,1206.92 2078.51,1206.92 2079.1,1206.92 2079.68,1206.92 2080.27,1206.92 2080.86,1206.92 2081.44,1206.92 2082.03,1206.92 2082.62,1206.92 2083.2,1206.92 2083.79,1206.92 2084.38,1206.92 2084.96,1206.92 2085.55,1206.92 2086.14,1206.92 2086.72,1206.92 2087.31,1206.92 2087.89,1206.92 2088.48,1206.92 2089.07,1206.92 2089.65,1206.92 2090.24,1206.92 2090.83,1206.92 2091.41,1206.92 2092,1206.92 2092.59,1206.92 2093.17,1206.92 2093.76,1206.92 2094.35,1206.92 2094.93,1206.92 2095.52,1206.92 2096.1,1206.92 2096.69,1206.92 2097.28,1206.92 2097.86,1206.92 2098.45,1206.92 2099.04,1206.92 2099.62,1206.92 2100.21,1206.92 2100.8,1206.92 2101.38,1206.92 2101.97,1206.92 2102.55,1206.92 2103.14,1206.92 2103.73,1206.92 2104.31,1206.92 2104.9,1206.92 2105.49,1206.92 2106.07,1206.92 2106.66,1206.92 2107.25,1206.92 2107.83,1206.92 2108.42,1206.92 2109.01,1206.92 2109.59,1206.92 2110.18,1206.92 2110.76,1206.92 2111.35,1206.92 2111.94,1206.92 2112.52,1206.92 2113.11,1206.92 2113.7,1206.92 2114.28,1206.92 2114.87,1206.92 2115.46,1206.92 2116.04,1206.92 2116.63,1206.92 2117.22,1206.92 2117.8,1206.92 2118.39,1206.92 2118.97,1206.92 2119.56,1206.92 2120.15,1206.92 2120.73,1206.92 2121.32,1206.92 2121.91,1206.92 2122.49,1206.92 2123.08,1206.92 2123.67,1206.92 2124.25,1206.92 2124.84,1206.92 2125.42,1206.92 2126.01,1206.92 2126.6,1206.92 2127.18,1206.92 2127.77,1206.92 2128.36,1206.92 2128.94,1206.92 2129.53,1206.92 2130.12,1206.92 2130.7,1206.92 2131.29,1206.92 2131.88,1206.92 2132.46,1206.92 2133.05,1206.92 2133.63,1206.92 2134.22,1206.92 2134.81,1206.92 2135.39,1206.92 2135.98,1206.92 2136.57,1206.92 2137.15,1206.92 2137.74,1206.92 2138.33,1206.92 2138.91,1206.92 2139.5,1206.92 2140.09,1206.92 2140.67,1206.92 2141.26,1206.92 2141.84,1206.92 2142.43,1206.92 2143.02,1206.92 2143.6,1206.92 2144.19,1206.92 2144.78,1206.92 2145.36,1206.92 2145.95,1206.92 2146.54,1206.92 2147.12,1206.92 2147.71,1206.92 2148.3,1206.92 2148.88,1206.92 2149.47,1206.92 2150.05,1206.92 2150.64,1206.92 2151.23,1206.92 2151.81,1206.92 2152.4,1206.92 2152.99,1206.92 2153.57,1206.92 2154.16,1206.92 2154.75,1206.92 2155.33,1206.92 2155.92,1206.92 2156.5,1206.92 2157.09,1206.92 2157.68,1206.92 2158.26,1206.92 \"/>\n<path clip-path=\"url(#clip612)\" d=\"M986.025 1206.78 L986.612 1206.78 L987.198 1206.78 L987.785 1206.78 L988.371 1206.78 L988.957 1206.78 L989.544 1206.78 L990.13 1206.78 L990.717 1206.78 L991.303 1206.78 L991.889 1206.78 L992.476 1206.78 L993.062 1206.78 L993.649 1206.78 L994.235 1206.78 L994.822 1206.78 L995.408 1206.78 L995.994 1206.78 L996.581 1206.78 L997.167 1206.78 L997.754 1206.78 L998.34 1206.78 L998.926 1206.78 L999.513 1206.78 L1000.1 1206.78 L1000.69 1206.78 L1001.27 1206.78 L1001.86 1206.78 L1002.44 1206.78 L1003.03 1206.78 L1003.62 1206.78 L1004.2 1206.78 L1004.79 1206.78 L1005.38 1206.78 L1005.96 1206.78 L1006.55 1206.78 L1007.14 1206.78 L1007.72 1206.78 L1008.31 1206.78 L1008.9 1206.78 L1009.48 1206.78 L1010.07 1206.78 L1010.65 1206.78 L1011.24 1206.78 L1011.83 1206.78 L1012.41 1206.78 L1013 1206.78 L1013.59 1206.78 L1014.17 1206.78 L1014.76 1206.78 L1015.35 1206.78 L1015.93 1206.78 L1016.52 1206.78 L1017.11 1206.78 L1017.69 1206.78 L1018.28 1206.78 L1018.86 1206.78 L1019.45 1206.78 L1020.04 1206.78 L1020.62 1206.78 L1021.21 1206.78 L1021.8 1206.78 L1022.38 1206.78 L1022.97 1206.78 L1023.56 1206.78 L1024.14 1206.78 L1024.73 1206.78 L1025.32 1206.78 L1025.9 1206.78 L1026.49 1206.78 L1027.07 1206.78 L1027.66 1206.78 L1028.25 1206.78 L1028.83 1206.78 L1029.42 1206.78 L1030.01 1206.78 L1030.59 1206.78 L1031.18 1206.78 L1031.77 1206.78 L1032.35 1206.78 L1032.94 1206.78 L1033.52 1206.78 L1034.11 1206.78 L1034.7 1206.78 L1035.28 1206.78 L1035.87 1206.78 L1036.46 1206.78 L1037.04 1206.78 L1037.63 1206.78 L1038.22 1206.78 L1038.8 1206.78 L1039.39 1206.78 L1039.98 1206.78 L1040.56 1206.78 L1041.15 1206.78 L1041.73 1206.78 L1042.32 1206.78 L1042.91 1206.78 L1043.49 1206.78 L1044.08 1206.78 L1044.67 1206.78 L1045.25 1206.78 L1045.84 1206.78 L1046.43 1206.78 L1047.01 1206.78 L1047.6 1206.78 L1048.19 1206.78 L1048.77 1206.78 L1049.36 1206.78 L1049.94 1206.78 L1050.53 1206.78 L1051.12 1206.78 L1051.7 1206.78 L1052.29 1206.78 L1052.88 1206.78 L1053.46 1206.78 L1054.05 1206.78 L1054.64 1206.78 L1055.22 1206.78 L1055.81 1206.78 L1056.39 1206.78 L1056.98 1206.78 L1057.57 1206.78 L1058.15 1206.78 L1058.74 1206.78 L1059.33 1206.78 L1059.91 1206.78 L1060.5 1206.78 L1061.09 1206.78 L1061.67 1206.78 L1062.26 1206.78 L1062.85 1206.78 L1063.43 1206.78 L1064.02 1206.78 L1064.6 1206.78 L1065.19 1206.78 L1065.78 1206.78 L1066.36 1206.78 L1066.95 1206.78 L1067.54 1206.78 L1068.12 1206.78 L1068.71 1206.78 L1069.3 1206.78 L1069.88 1206.78 L1070.47 1206.78 L1071.06 1206.78 L1071.64 1206.78 L1072.23 1206.78 L1072.81 1206.78 L1073.4 1206.78 L1073.99 1206.78 L1074.57 1206.78 L1075.16 1206.78 L1075.75 1206.78 L1076.33 1206.78 L1076.92 1206.78 L1077.51 1206.78 L1078.09 1206.78 L1078.68 1206.78 L1079.26 1206.78 L1079.85 1206.78 L1080.44 1206.78 L1081.02 1206.78 L1081.61 1206.78 L1082.2 1206.78 L1082.78 1206.78 L1083.37 1206.78 L1083.96 1206.78 L1084.54 1206.78 L1085.13 1206.78 L1085.72 1206.78 L1086.3 1206.78 L1086.89 1206.78 L1087.47 1206.78 L1088.06 1206.78 L1088.65 1206.78 L1089.23 1206.78 L1089.82 1206.78 L1090.41 1206.78 L1090.99 1206.78 L1091.58 1206.78 L1092.17 1206.78 L1092.75 1206.78 L1093.34 1206.78 L1093.93 1206.78 L1094.51 1206.78 L1095.1 1206.78 L1095.68 1206.78 L1096.27 1206.78 L1096.86 1206.78 L1097.44 1206.78 L1098.03 1206.78 L1098.62 1206.78 L1099.2 1206.78 L1099.79 1206.78 L1100.38 1206.78 L1100.96 1206.78 L1101.55 1206.78 L1102.14 1206.78 L1102.72 1206.78 L1103.31 1206.78 L1103.89 1206.78 L1104.48 1206.78 L1105.07 1206.78 L1105.65 1206.78 L1106.24 1206.78 L1106.83 1206.78 L1107.41 1206.78 L1108 1206.78 L1108.59 1206.78 L1109.17 1206.78 L1109.76 1206.78 L1110.34 1206.78 L1110.93 1206.78 L1111.52 1206.78 L1112.1 1206.78 L1112.69 1206.78 L1113.28 1206.78 L1113.86 1206.78 L1114.45 1206.78 L1115.04 1206.78 L1115.62 1206.78 L1116.21 1206.78 L1116.8 1206.78 L1117.38 1206.78 L1117.97 1206.78 L1118.55 1206.78 L1119.14 1206.78 L1119.73 1206.78 L1120.31 1206.78 L1120.9 1206.78 L1121.49 1206.78 L1122.07 1206.78 L1122.66 1206.78 L1123.25 1206.78 L1123.83 1206.78 L1124.42 1206.78 L1125.01 1206.78 L1125.59 1206.78 L1126.18 1206.78 L1126.76 1206.78 L1127.35 1206.78 L1127.94 1206.78 L1128.52 1206.78 L1129.11 1206.78 L1129.7 1206.78 L1130.28 1206.78 L1130.87 1206.78 L1131.46 1206.78 L1132.04 1206.78 L1132.63 1206.78 L1133.21 1206.78 L1133.8 1206.78 L1134.39 1206.78 L1134.97 1206.78 L1135.56 1206.78 L1136.15 1206.78 L1136.73 1206.78 L1137.32 1206.78 L1137.91 1206.78 L1138.49 1206.78 L1139.08 1206.78 L1139.67 1206.78 L1140.25 1206.78 L1140.84 1206.78 L1141.42 1206.78 L1142.01 1206.78 L1142.6 1206.78 L1143.18 1206.78 L1143.77 1206.78 L1144.36 1206.78 L1144.94 1206.78 L1145.53 1206.78 L1146.12 1206.78 L1146.7 1206.78 L1147.29 1206.78 L1147.88 1206.78 L1148.46 1206.78 L1149.05 1206.78 L1149.63 1206.78 L1150.22 1206.78 L1150.81 1206.78 L1151.39 1206.78 L1151.98 1206.78 L1152.57 1206.78 L1153.15 1206.78 L1153.74 1206.78 L1154.33 1206.78 L1154.91 1206.78 L1155.5 1206.78 L1156.09 1206.78 L1156.67 1206.78 L1157.26 1206.78 L1157.84 1206.78 L1158.43 1206.78 L1159.02 1206.78 L1159.6 1206.78 L1160.19 1206.78 L1160.78 1206.78 L1161.36 1206.78 L1161.95 1206.78 L1162.54 1206.78 L1163.12 1206.78 L1163.71 1206.78 L1164.29 1206.78 L1164.88 1206.78 L1165.47 1206.78 L1166.05 1206.78 L1166.64 1206.78 L1167.23 1206.78 L1167.81 1206.78 L1168.4 1206.78 L1168.99 1206.78 L1169.57 1206.78 L1170.16 1206.78 L1170.75 1206.78 L1171.33 1206.78 L1171.92 1206.78 L1172.5 1206.78 L1173.09 1206.78 L1173.68 1206.78 L1174.26 1206.78 L1174.85 1206.78 L1175.44 1206.78 L1176.02 1206.78 L1176.61 1206.78 L1177.2 1206.78 L1177.78 1206.78 L1178.37 1206.78 L1178.96 1206.78 L1179.54 1206.78 L1180.13 1206.78 L1180.71 1206.78 L1181.3 1206.78 L1181.89 1206.78 L1182.47 1206.78 L1183.06 1206.78 L1183.65 1206.78 L1184.23 1206.78 L1184.82 1206.78 L1185.41 1206.78 L1185.99 1206.78 L1186.58 1206.78 L1187.16 1206.78 L1187.75 1206.78 L1188.34 1206.78 L1188.92 1206.78 L1189.51 1206.78 L1190.1 1206.78 L1190.68 1206.78 L1191.27 1206.78 L1191.86 1206.78 L1192.44 1206.78 L1193.03 1206.78 L1193.62 1206.78 L1194.2 1206.78 L1194.79 1206.78 L1195.37 1206.78 L1195.96 1206.78 L1196.55 1206.78 L1197.13 1206.78 L1197.72 1206.78 L1198.31 1206.78 L1198.89 1206.78 L1199.48 1206.78 L1200.07 1206.78 L1200.65 1206.78 L1201.24 1206.78 L1201.83 1206.78 L1202.41 1206.78 L1203 1206.78 L1203.58 1206.78 L1204.17 1206.78 L1204.76 1206.78 L1205.34 1206.78 L1205.93 1206.78 L1206.52 1206.78 L1207.1 1206.78 L1207.69 1206.78 L1208.28 1206.78 L1208.86 1206.78 L1209.45 1206.78 L1210.03 1206.78 L1210.62 1206.78 L1211.21 1206.78 L1211.79 1206.78 L1212.38 1206.78 L1212.97 1206.78 L1213.55 1206.78 L1214.14 1206.78 L1214.73 1206.78 L1215.31 1206.78 L1215.9 1206.78 L1216.49 1206.78 L1217.07 1206.78 L1217.66 1206.78 L1218.24 1206.78 L1218.83 1206.78 L1219.42 1206.78 L1220 1206.78 L1220.59 1206.78 L1221.18 1206.78 L1221.76 1206.78 L1222.35 1206.78 L1222.94 1206.78 L1223.52 1206.78 L1224.11 1206.78 L1224.7 1206.78 L1225.28 1206.78 L1225.87 1206.78 L1226.45 1206.78 L1227.04 1206.78 L1227.63 1206.78 L1228.21 1206.78 L1228.8 1206.78 L1229.39 1206.78 L1229.97 1206.78 L1230.56 1206.78 L1231.15 1206.78 L1231.73 1206.78 L1232.32 1206.78 L1232.91 1206.78 L1233.49 1206.78 L1234.08 1206.78 L1234.66 1206.78 L1235.25 1206.78 L1235.84 1206.78 L1236.42 1206.78 L1237.01 1206.78 L1237.6 1206.78 L1238.18 1206.78 L1238.77 1206.78 L1239.36 1206.78 L1239.94 1206.78 L1240.53 1206.78 L1241.11 1206.78 L1241.7 1206.78 L1242.29 1206.78 L1242.87 1206.78 L1243.46 1206.78 L1244.05 1206.78 L1244.63 1206.78 L1245.22 1206.78 L1245.81 1206.78 L1246.39 1206.78 L1246.98 1206.78 L1247.57 1206.78 L1248.15 1206.78 L1248.74 1206.78 L1249.32 1206.78 L1249.91 1206.78 L1250.5 1206.78 L1251.08 1206.78 L1251.67 1206.78 L1252.26 1206.78 L1252.84 1206.78 L1253.43 1206.78 L1254.02 1206.78 L1254.6 1206.78 L1255.19 1206.78 L1255.78 1206.78 L1256.36 1206.78 L1256.95 1206.78 L1257.53 1206.78 L1258.12 1206.78 L1258.71 1206.78 L1259.29 1206.78 L1259.88 1206.78 L1260.47 1206.78 L1261.05 1206.78 L1261.64 1206.78 L1262.23 1206.78 L1262.81 1206.78 L1263.4 1206.78 L1263.98 1206.78 L1264.57 1206.78 L1265.16 1206.78 L1265.74 1206.78 L1266.33 1206.78 L1266.92 1206.78 L1267.5 1206.78 L1268.09 1206.78 L1268.68 1206.78 L1269.26 1206.78 L1269.85 1206.78 L1270.44 1206.78 L1271.02 1206.78 L1271.61 1206.78 L1272.19 1206.78 L1272.78 1206.78 L1273.37 1206.78 L1273.95 1206.78 L1274.54 1206.78 L1275.13 1206.78 L1275.71 1206.78 L1276.3 1206.78 L1276.89 1206.78 L1277.47 1206.78 L1278.06 1206.78 L1278.65 1206.78 L1279.23 1206.78 L1279.82 1206.78 L1280.4 1206.78 L1280.99 1206.78 L1281.58 1206.78 L1282.16 1206.78 L1282.75 1206.78 L1283.34 1206.78 L1283.92 1206.78 L1284.51 1206.78 L1285.1 1206.78 L1285.68 1206.78 L1286.27 1206.78 L1286.86 1206.78 L1287.44 1206.78 L1288.03 1206.78 L1288.61 1206.78 L1289.2 1206.78 L1289.79 1206.78 L1290.37 1206.78 L1290.96 1206.78 L1291.55 1206.78 L1292.13 1206.78 L1292.72 1206.78 L1293.31 1206.78 L1293.89 1206.78 L1294.48 1206.78 L1295.06 1206.78 L1295.65 1206.78 L1296.24 1206.78 L1296.82 1206.78 L1297.41 1206.78 L1298 1206.78 L1298.58 1206.78 L1299.17 1206.78 L1299.76 1206.78 L1300.34 1206.78 L1300.93 1206.78 L1301.52 1206.78 L1302.1 1206.78 L1302.69 1206.78 L1303.27 1206.78 L1303.86 1206.78 L1304.45 1206.78 L1305.03 1206.78 L1305.62 1206.78 L1306.21 1206.78 L1306.79 1206.78 L1307.38 1206.78 L1307.97 1206.78 L1308.55 1206.78 L1309.14 1206.78 L1309.73 1206.78 L1310.31 1206.78 L1310.9 1206.78 L1311.48 1206.78 L1312.07 1206.78 L1312.66 1206.78 L1313.24 1206.78 L1313.83 1206.78 L1314.42 1206.78 L1315 1206.78 L1315.59 1206.78 L1316.18 1206.78 L1316.76 1206.78 L1317.35 1206.78 L1317.93 1206.78 L1318.52 1206.78 L1319.11 1206.78 L1319.69 1206.78 L1320.28 1206.78 L1320.87 1206.78 L1321.45 1206.78 L1322.04 1206.78 L1322.63 1206.78 L1323.21 1206.78 L1323.8 1206.78 L1324.39 1206.78 L1324.97 1206.78 L1325.56 1206.78 L1326.14 1206.78 L1326.73 1206.78 L1327.32 1206.78 L1327.9 1206.78 L1328.49 1206.78 L1329.08 1206.78 L1329.66 1206.78 L1330.25 1206.78 L1330.84 1206.78 L1331.42 1206.78 L1332.01 1206.78 L1332.6 1206.78 L1333.18 1206.78 L1333.77 1206.78 L1334.35 1206.78 L1334.94 1206.78 L1335.53 1206.78 L1336.11 1206.78 L1336.7 1206.78 L1337.29 1206.78 L1337.87 1206.78 L1338.46 1206.78 L1339.05 1206.78 L1339.63 1206.78 L1340.22 1206.78 L1340.8 1206.78 L1341.39 1206.78 L1341.98 1206.78 L1342.56 1206.78 L1343.15 1206.78 L1343.74 1206.78 L1344.32 1206.78 L1344.91 1206.78 L1345.5 1206.78 L1346.08 1206.78 L1346.67 1206.78 L1347.26 1206.78 L1347.84 1206.78 L1348.43 1206.78 L1349.01 1206.78 L1349.6 1206.78 L1350.19 1206.78 L1350.77 1206.78 L1351.36 1206.78 L1351.95 1206.78 L1352.53 1206.78 L1353.12 1206.78 L1353.71 1206.78 L1354.29 1206.78 L1354.88 1206.78 L1355.47 1206.78 L1356.05 1206.78 L1356.64 1206.78 L1357.22 1206.78 L1357.81 1206.78 L1358.4 1206.78 L1358.98 1206.78 L1359.57 1206.78 L1360.16 1206.78 L1360.74 1206.78 L1361.33 1206.78 L1361.92 1206.78 L1362.5 1206.78 L1363.09 1206.78 L1363.68 1206.78 L1364.26 1206.78 L1364.85 1206.78 L1365.43 1206.78 L1366.02 1206.78 L1366.61 1206.78 L1367.19 1206.78 L1367.78 1206.78 L1368.37 1206.78 L1368.95 1206.78 L1369.54 1206.78 L1370.13 1206.78 L1370.71 1206.78 L1371.3 1206.78 L1371.88 1206.78 L1372.47 1206.78 L1373.06 1206.78 L1373.64 1206.78 L1374.23 1206.78 L1374.82 1206.78 L1375.4 1206.78 L1375.99 1206.78 L1376.58 1206.78 L1377.16 1206.78 L1377.75 1206.78 L1378.34 1206.78 L1378.92 1206.78 L1379.51 1206.78 L1380.09 1206.78 L1380.68 1206.78 L1381.27 1206.78 L1381.85 1206.78 L1382.44 1206.78 L1383.03 1206.78 L1383.61 1206.78 L1384.2 1206.78 L1384.79 1206.78 L1385.37 1206.78 L1385.96 1206.78 L1386.55 1206.78 L1387.13 1206.78 L1387.72 1206.78 L1388.3 1206.78 L1388.89 1206.78 L1389.48 1206.78 L1390.06 1206.78 L1390.65 1206.78 L1391.24 1206.78 L1391.82 1206.78 L1392.41 1206.78 L1393 1206.78 L1393.58 1206.78 L1394.17 1206.78 L1394.75 1206.78 L1395.34 1206.78 L1395.93 1206.78 L1396.51 1206.78 L1397.1 1206.78 L1397.69 1206.78 L1398.27 1206.78 L1398.86 1206.78 L1399.45 1206.78 L1400.03 1206.78 L1400.62 1206.78 L1401.21 1206.78 L1401.79 1206.78 L1402.38 1206.78 L1402.96 1206.78 L1403.55 1206.78 L1404.14 1206.78 L1404.72 1206.78 L1405.31 1206.78 L1405.9 1206.78 L1406.48 1206.78 L1407.07 1206.78 L1407.66 1206.78 L1408.24 1206.78 L1408.83 1206.78 L1409.42 1206.78 L1410 1206.78 L1410.59 1206.78 L1411.17 1206.78 L1411.76 1206.78 L1412.35 1206.78 L1412.93 1206.78 L1413.52 1206.78 L1414.11 1206.78 L1414.69 1206.78 L1415.28 1206.78 L1415.87 1206.78 L1416.45 1206.78 L1417.04 1206.78 L1417.63 1206.78 L1418.21 1206.78 L1418.8 1206.78 L1419.38 1206.78 L1419.97 1206.78 L1420.56 1206.78 L1421.14 1206.78 L1421.73 1206.78 L1422.32 1206.78 L1422.9 1206.78 L1423.49 1206.78 L1424.08 1206.78 L1424.66 1206.78 L1425.25 1206.78 L1425.83 1206.78 L1426.42 1206.78 L1427.01 1206.78 L1427.59 1206.78 L1428.18 1206.78 L1428.77 1206.78 L1429.35 1206.78 L1429.94 1206.78 L1430.53 1206.78 L1431.11 1206.78 L1431.7 1206.78 L1432.29 1206.78 L1432.87 1206.78 L1433.46 1206.78 L1434.04 1206.78 L1434.63 1206.78 L1435.22 1206.78 L1435.8 1206.78 L1436.39 1206.78 L1436.98 1206.78 L1437.56 1206.78 L1438.15 1206.78 L1438.74 1206.78 L1439.32 1206.78 L1439.91 1206.78 L1440.5 1206.78 L1441.08 1206.78 L1441.67 1206.78 L1442.25 1206.78 L1442.84 1206.78 L1443.43 1206.78 L1444.01 1206.78 L1444.6 1206.78 L1445.19 1206.78 L1445.77 1206.78 L1446.36 1206.78 L1446.95 1206.78 L1447.53 1206.78 L1448.12 1206.78 L1448.7 1206.78 L1449.29 1206.78 L1449.88 1206.78 L1450.46 1206.78 L1451.05 1206.78 L1451.64 1206.78 L1452.22 1206.78 L1452.81 1206.78 L1453.4 1206.78 L1453.98 1206.78 L1454.57 1206.78 L1455.16 1206.78 L1455.74 1206.78 L1456.33 1206.78 L1456.91 1206.78 L1457.5 1206.78 L1458.09 1206.78 L1458.67 1206.78 L1459.26 1206.78 L1459.85 1206.78 L1460.43 1206.78 L1461.02 1206.78 L1461.61 1206.78 L1462.19 1206.78 L1462.78 1206.78 L1463.37 1206.78 L1463.95 1206.78 L1464.54 1206.78 L1465.12 1206.78 L1465.71 1206.78 L1466.3 1206.78 L1466.88 1206.78 L1467.47 1206.78 L1468.06 1206.78 L1468.64 1206.78 L1469.23 1206.78 L1469.82 1206.78 L1470.4 1206.78 L1470.99 1206.78 L1471.57 1206.78 L1472.16 1206.78 L1472.75 1206.78 L1473.33 1206.78 L1473.92 1206.78 L1474.51 1206.78 L1475.09 1206.78 L1475.68 1206.78 L1476.27 1206.78 L1476.85 1206.78 L1477.44 1206.78 L1478.03 1206.78 L1478.61 1206.78 L1479.2 1206.78 L1479.78 1206.78 L1480.37 1206.78 L1480.96 1206.78 L1481.54 1206.78 L1482.13 1206.78 L1482.72 1206.78 L1483.3 1206.78 L1483.89 1206.78 L1484.48 1206.78 L1485.06 1206.78 L1485.65 1206.78 L1486.24 1206.78 L1486.82 1206.78 L1487.41 1206.78 L1487.99 1206.78 L1488.58 1206.78 L1489.17 1206.78 L1489.75 1206.78 L1490.34 1206.78 L1490.93 1206.78 L1491.51 1206.78 L1492.1 1206.78 L1492.69 1206.78 L1493.27 1206.78 L1493.86 1206.78 L1494.45 1206.78 L1495.03 1206.78 L1495.62 1206.78 L1496.2 1206.78 L1496.79 1206.78 L1497.38 1206.78 L1497.96 1206.78 L1498.55 1206.78 L1499.14 1206.78 L1499.72 1206.78 L1500.31 1206.78 L1500.9 1206.78 L1501.48 1206.78 L1502.07 1206.78 L1502.65 1206.78 L1503.24 1206.78 L1503.83 1206.78 L1504.41 1206.78 L1505 1206.78 L1505.59 1206.78 L1506.17 1206.78 L1506.76 1206.78 L1507.35 1206.78 L1507.93 1206.78 L1508.52 1206.78 L1509.11 1206.78 L1509.69 1206.78 L1510.28 1206.78 L1510.86 1206.78 L1511.45 1206.78 L1512.04 1206.78 L1512.62 1206.78 L1513.21 1206.78 L1513.8 1206.78 L1514.38 1206.78 L1514.97 1206.78 L1515.56 1206.78 L1516.14 1206.78 L1516.73 1206.78 L1517.32 1206.78 L1517.9 1206.78 L1518.49 1206.78 L1519.07 1206.78 L1519.66 1206.78 L1520.25 1206.78 L1520.83 1206.78 L1521.42 1206.78 L1522.01 1206.78 L1522.59 1206.78 L1523.18 1206.78 L1523.77 1206.78 L1524.35 1206.78 L1524.94 1206.78 L1525.52 1206.78 L1526.11 1206.78 L1526.7 1206.78 L1527.28 1206.78 L1527.87 1206.78 L1528.46 1206.78 L1529.04 1206.78 L1529.63 1206.78 L1530.22 1206.78 L1530.8 1206.78 L1531.39 1206.78 L1531.98 1206.78 L1532.56 1206.78 L1533.15 1206.78 L1533.73 1206.78 L1534.32 1206.78 L1534.91 1206.78 L1535.49 1206.78 L1536.08 1206.78 L1536.67 1206.78 L1537.25 1206.78 L1537.84 1206.78 L1538.43 1206.78 L1539.01 1206.78 L1539.6 1206.78 L1540.19 1206.78 L1540.77 1206.78 L1541.36 1206.78 L1541.94 1206.78 L1542.53 1206.78 L1543.12 1206.78 L1543.7 1206.78 L1544.29 1206.78 L1544.88 1206.78 L1545.46 1206.78 L1546.05 1206.78 L1546.64 1206.78 L1547.22 1206.78 L1547.81 1206.78 L1548.4 1206.78 L1548.98 1206.78 L1549.57 1206.78 L1550.15 1206.78 L1550.74 1206.78 L1551.33 1206.78 L1551.91 1206.78 L1552.5 1206.78 L1553.09 1206.78 L1553.67 1206.78 L1554.26 1206.78 L1554.85 1206.78 L1555.43 1206.78 L1556.02 1206.78 L1556.6 1206.78 L1557.19 1206.78 L1557.78 1206.78 L1558.36 1206.78 L1558.95 1206.78 L1559.54 1206.78 L1560.12 1206.78 L1560.71 1206.78 L1561.3 1206.78 L1561.88 1206.78 L1562.47 1206.78 L1563.06 1206.78 L1563.64 1206.78 L1564.23 1206.78 L1564.81 1206.78 L1565.4 1206.78 L1565.99 1206.78 L1566.57 1206.78 L1567.16 1206.78 L1567.75 1206.78 L1568.33 1206.78 L1568.92 1206.78 L1569.51 1206.78 L1570.09 1206.78 L1570.68 1206.78 L1571.27 1206.78 L1571.85 1206.78 L1572.44 1206.78 L1573.02 1206.78 L1573.61 1206.78 L1574.2 1206.78 L1574.78 1206.78 L1575.37 1206.78 L1575.96 1206.78 L1576.54 1206.78 L1577.13 1206.78 L1577.72 1206.78 L1578.3 1206.78 L1578.89 1206.78 L1579.47 1206.78 L1580.06 1206.78 L1580.65 1206.78 L1581.23 1206.78 L1581.82 1206.78 L1582.41 1206.78 L1582.99 1206.78 L1583.58 1206.78 L1584.17 1206.78 L1584.75 1206.78 L1585.34 1206.78 L1585.93 1206.78 L1586.51 1206.78 L1587.1 1206.78 L1587.68 1206.78 L1588.27 1206.78 L1588.86 1206.78 L1589.44 1206.78 L1590.03 1206.78 L1590.62 1206.78 L1591.2 1206.78 L1591.79 1206.78 L1592.38 1206.78 L1592.96 1206.78 L1593.55 1206.78 L1594.14 1206.78 L1594.72 1206.78 L1595.31 1206.78 L1595.89 1206.78 L1596.48 1206.78 L1597.07 1206.78 L1597.65 1206.78 L1598.24 1206.78 L1598.83 1206.78 L1599.41 1206.78 L1600 1206.78 L1600.59 1206.78 L1601.17 1206.78 L1601.76 1206.78 L1602.34 1206.78 L1602.93 1206.78 L1603.52 1206.78 L1604.1 1206.78 L1604.69 1206.78 L1605.28 1206.78 L1605.86 1206.78 L1606.45 1206.78 L1607.04 1206.78 L1607.62 1206.78 L1608.21 1206.78 L1608.8 1206.78 L1609.38 1206.78 L1609.97 1206.78 L1610.55 1206.78 L1611.14 1206.78 L1611.73 1206.78 L1612.31 1206.78 L1612.9 1206.78 L1613.49 1206.78 L1614.07 1206.78 L1614.66 1206.78 L1615.25 1206.78 L1615.83 1206.78 L1616.42 1206.78 L1617.01 1206.78 L1617.59 1206.78 L1618.18 1206.78 L1618.76 1206.78 L1619.35 1206.78 L1619.94 1206.78 L1620.52 1206.78 L1621.11 1206.78 L1621.7 1206.78 L1622.28 1206.78 L1622.87 1206.78 L1623.46 1206.78 L1624.04 1206.78 L1624.63 1206.78 L1625.22 1206.78 L1625.8 1206.78 L1626.39 1206.78 L1626.97 1206.78 L1627.56 1206.78 L1628.15 1206.78 L1628.73 1206.78 L1629.32 1206.78 L1629.91 1206.78 L1630.49 1206.78 L1631.08 1206.78 L1631.67 1206.78 L1632.25 1206.78 L1632.84 1206.78 L1633.42 1206.78 L1634.01 1206.78 L1634.6 1206.78 L1635.18 1206.78 L1635.77 1206.78 L1636.36 1206.78 L1636.94 1206.78 L1637.53 1206.78 L1638.12 1206.78 L1638.7 1206.78 L1639.29 1206.78 L1639.88 1206.78 L1640.46 1206.78 L1641.05 1206.78 L1641.63 1206.78 L1642.22 1206.78 L1642.81 1206.78 L1643.39 1206.78 L1643.98 1206.78 L1644.57 1206.78 L1645.15 1206.78 L1645.74 1206.78 L1646.33 1206.78 L1646.91 1206.78 L1647.5 1206.78 L1648.09 1206.78 L1648.67 1206.78 L1649.26 1206.78 L1649.84 1206.78 L1650.43 1206.78 L1651.02 1206.78 L1651.6 1206.78 L1652.19 1206.78 L1652.78 1206.78 L1653.36 1206.78 L1653.95 1206.78 L1654.54 1206.78 L1655.12 1206.78 L1655.71 1206.78 L1656.29 1206.78 L1656.88 1206.78 L1657.47 1206.78 L1658.05 1206.78 L1658.64 1206.78 L1659.23 1206.78 L1659.81 1206.78 L1660.4 1206.78 L1660.99 1206.78 L1661.57 1206.78 L1662.16 1206.78 L1662.75 1206.78 L1663.33 1206.78 L1663.92 1206.78 L1664.5 1206.78 L1665.09 1206.78 L1665.68 1206.78 L1666.26 1206.78 L1666.85 1206.78 L1667.44 1206.78 L1668.02 1206.78 L1668.61 1206.78 L1669.2 1206.78 L1669.78 1206.78 L1670.37 1206.78 L1670.96 1206.78 L1671.54 1206.78 L1672.13 1206.78 L1672.71 1206.78 L1673.3 1206.78 L1673.89 1206.78 L1674.47 1206.78 L1675.06 1206.78 L1675.65 1206.78 L1676.23 1206.78 L1676.82 1206.78 L1677.41 1206.78 L1677.99 1206.78 L1678.58 1206.78 L1679.17 1206.78 L1679.75 1206.78 L1680.34 1206.78 L1680.92 1206.78 L1681.51 1206.78 L1682.1 1206.78 L1682.68 1206.78 L1683.27 1206.78 L1683.86 1206.78 L1684.44 1206.78 L1685.03 1206.78 L1685.62 1206.78 L1686.2 1206.78 L1686.79 1206.78 L1687.37 1206.78 L1687.96 1206.78 L1688.55 1206.78 L1689.13 1206.78 L1689.72 1206.78 L1690.31 1206.78 L1690.89 1206.78 L1691.48 1206.78 L1692.07 1206.78 L1692.65 1206.78 L1693.24 1206.78 L1693.83 1206.78 L1694.41 1206.78 L1695 1206.78 L1695.58 1206.78 L1696.17 1206.78 L1696.76 1206.78 L1697.34 1206.78 L1697.93 1206.78 L1698.52 1206.78 L1699.1 1206.78 L1699.69 1206.78 L1700.28 1206.78 L1700.86 1206.78 L1701.45 1206.78 L1702.04 1206.78 L1702.62 1206.78 L1703.21 1206.78 L1703.79 1206.78 L1704.38 1206.78 L1704.97 1206.78 L1705.55 1206.78 L1706.14 1206.78 L1706.73 1206.78 L1707.31 1206.78 L1707.9 1206.78 L1708.49 1206.78 L1709.07 1206.78 L1709.66 1206.78 L1710.24 1206.78 L1710.83 1206.78 L1711.42 1206.78 L1712 1206.78 L1712.59 1206.78 L1713.18 1206.78 L1713.76 1206.78 L1714.35 1206.78 L1714.94 1206.78 L1715.52 1206.78 L1716.11 1206.78 L1716.7 1206.78 L1717.28 1206.78 L1717.87 1206.78 L1718.45 1206.78 L1719.04 1206.78 L1719.63 1206.78 L1720.21 1206.78 L1720.8 1206.78 L1721.39 1206.78 L1721.97 1206.78 L1722.56 1206.78 L1723.15 1206.78 L1723.73 1206.78 L1724.32 1206.78 L1724.91 1206.78 L1725.49 1206.78 L1726.08 1206.78 L1726.66 1206.78 L1727.25 1206.78 L1727.84 1206.78 L1728.42 1206.78 L1729.01 1206.78 L1729.6 1206.78 L1730.18 1206.78 L1730.77 1206.78 L1731.36 1206.78 L1731.94 1206.78 L1732.53 1206.78 L1733.11 1206.78 L1733.7 1206.78 L1734.29 1206.78 L1734.87 1206.78 L1735.46 1206.78 L1736.05 1206.78 L1736.63 1206.78 L1737.22 1206.78 L1737.81 1206.78 L1738.39 1206.78 L1738.98 1206.78 L1739.57 1206.78 L1740.15 1206.78 L1740.74 1206.78 L1741.32 1206.78 L1741.91 1206.78 L1742.5 1206.78 L1743.08 1206.78 L1743.67 1206.78 L1744.26 1206.78 L1744.84 1206.78 L1745.43 1206.78 L1746.02 1206.78 L1746.6 1206.78 L1747.19 1206.78 L1747.78 1206.78 L1748.36 1206.78 L1748.95 1206.78 L1749.53 1206.78 L1750.12 1206.78 L1750.71 1206.78 L1751.29 1206.78 L1751.88 1206.78 L1752.47 1206.78 L1753.05 1206.78 L1753.64 1206.78 L1754.23 1206.78 L1754.81 1206.78 L1755.4 1206.78 L1755.99 1206.78 L1756.57 1206.78 L1757.16 1206.78 L1757.74 1206.78 L1758.33 1206.78 L1758.92 1206.78 L1759.5 1206.78 L1760.09 1206.78 L1760.68 1206.78 L1761.26 1206.78 L1761.85 1206.78 L1762.44 1206.78 L1763.02 1206.78 L1763.61 1206.78 L1764.19 1206.78 L1764.78 1206.78 L1765.37 1206.78 L1765.95 1206.78 L1766.54 1206.78 L1767.13 1206.78 L1767.71 1206.78 L1768.3 1206.78 L1768.89 1206.78 L1769.47 1206.78 L1770.06 1206.78 L1770.65 1206.78 L1771.23 1206.78 L1771.82 1206.78 L1772.4 1206.78 L1772.99 1206.78 L1773.58 1206.78 L1774.16 1206.78 L1774.75 1206.78 L1775.34 1206.78 L1775.92 1206.78 L1776.51 1206.78 L1777.1 1206.78 L1777.68 1206.78 L1778.27 1206.78 L1778.86 1206.78 L1779.44 1206.78 L1780.03 1206.78 L1780.61 1206.78 L1781.2 1206.78 L1781.79 1206.78 L1782.37 1206.78 L1782.96 1206.78 L1783.55 1206.78 L1784.13 1206.78 L1784.72 1206.78 L1785.31 1206.78 L1785.89 1206.78 L1786.48 1206.78 L1787.06 1206.78 L1787.65 1206.78 L1788.24 1206.78 L1788.82 1206.78 L1789.41 1206.78 L1790 1206.78 L1790.58 1206.78 L1791.17 1206.78 L1791.76 1206.78 L1792.34 1206.78 L1792.93 1206.78 L1793.52 1206.78 L1794.1 1206.78 L1794.69 1206.78 L1795.27 1206.78 L1795.86 1206.78 L1796.45 1206.78 L1797.03 1206.78 L1797.62 1206.78 L1798.21 1206.78 L1798.79 1206.78 L1799.38 1206.78 L1799.97 1206.78 L1800.55 1206.78 L1801.14 1206.78 L1801.73 1206.78 L1802.31 1206.78 L1802.9 1206.78 L1803.48 1206.78 L1804.07 1206.78 L1804.66 1206.78 L1805.24 1206.78 L1805.83 1206.78 L1806.42 1206.78 L1807 1206.78 L1807.59 1206.78 L1808.18 1206.78 L1808.76 1206.78 L1809.35 1206.78 L1809.94 1206.78 L1810.52 1206.78 L1811.11 1206.78 L1811.69 1206.78 L1812.28 1206.78 L1812.87 1206.78 L1813.45 1206.78 L1814.04 1206.78 L1814.63 1206.78 L1815.21 1206.78 L1815.8 1206.78 L1816.39 1206.78 L1816.97 1206.78 L1817.56 1206.78 L1818.14 1206.78 L1818.73 1206.78 L1819.32 1206.78 L1819.9 1206.78 L1820.49 1206.78 L1821.08 1206.78 L1821.66 1206.78 L1822.25 1206.78 L1822.84 1206.78 L1823.42 1206.78 L1824.01 1206.78 L1824.6 1206.78 L1825.18 1206.78 L1825.77 1206.78 L1826.35 1206.78 L1826.94 1206.78 L1827.53 1206.78 L1828.11 1206.78 L1828.7 1206.78 L1829.29 1206.78 L1829.87 1206.78 L1830.46 1206.78 L1831.05 1206.78 L1831.63 1206.78 L1832.22 1206.78 L1832.81 1206.78 L1833.39 1206.78 L1833.98 1206.78 L1834.56 1206.78 L1835.15 1206.78 L1835.74 1206.78 L1836.32 1206.78 L1836.91 1206.78 L1837.5 1206.78 L1838.08 1206.78 L1838.67 1206.78 L1839.26 1206.78 L1839.84 1206.78 L1840.43 1206.78 L1841.01 1206.78 L1841.6 1206.78 L1842.19 1206.78 L1842.77 1206.78 L1843.36 1206.78 L1843.95 1206.78 L1844.53 1206.78 L1845.12 1206.78 L1845.71 1206.78 L1846.29 1206.78 L1846.88 1206.78 L1847.47 1206.78 L1848.05 1206.78 L1848.64 1206.78 L1849.22 1206.78 L1849.81 1206.78 L1850.4 1206.78 L1850.98 1206.78 L1851.57 1206.78 L1852.16 1206.78 L1852.74 1206.78 L1853.33 1206.78 L1853.92 1206.78 L1854.5 1206.78 L1855.09 1206.78 L1855.68 1206.78 L1856.26 1206.78 L1856.85 1206.78 L1857.43 1206.78 L1858.02 1206.78 L1858.61 1206.78 L1859.19 1206.78 L1859.78 1206.78 L1860.37 1206.78 L1860.95 1206.78 L1861.54 1206.78 L1862.13 1206.78 L1862.71 1206.78 L1863.3 1206.78 L1863.88 1206.78 L1864.47 1206.78 L1865.06 1206.78 L1865.64 1206.78 L1866.23 1206.78 L1866.82 1206.78 L1867.4 1206.78 L1867.99 1206.78 L1868.58 1206.78 L1869.16 1206.78 L1869.75 1206.78 L1870.34 1206.78 L1870.92 1206.78 L1871.51 1206.78 L1872.09 1206.78 L1872.68 1206.78 L1873.27 1206.78 L1873.85 1206.78 L1874.44 1206.78 L1875.03 1206.78 L1875.61 1206.78 L1876.2 1206.78 L1876.79 1206.78 L1877.37 1206.78 L1877.96 1206.78 L1878.55 1206.78 L1879.13 1206.78 L1879.72 1206.78 L1880.3 1206.78 L1880.89 1206.78 L1881.48 1206.78 L1882.06 1206.78 L1882.65 1206.78 L1883.24 1206.78 L1883.82 1206.78 L1884.41 1206.78 L1885 1206.78 L1885.58 1206.78 L1886.17 1206.78 L1886.76 1206.78 L1887.34 1206.78 L1887.93 1206.78 L1888.51 1206.78 L1889.1 1206.78 L1889.69 1206.78 L1890.27 1206.78 L1890.86 1206.78 L1891.45 1206.78 L1892.03 1206.78 L1892.62 1206.78 L1893.21 1206.78 L1893.79 1206.78 L1894.38 1206.78 L1894.96 1206.78 L1895.55 1206.78 L1896.14 1206.78 L1896.72 1206.78 L1897.31 1206.78 L1897.9 1206.78 L1898.48 1206.78 L1899.07 1206.78 L1899.66 1206.78 L1900.24 1206.78 L1900.83 1206.78 L1901.42 1206.78 L1902 1206.78 L1902.59 1206.78 L1903.17 1206.78 L1903.76 1206.78 L1904.35 1206.78 L1904.93 1206.78 L1905.52 1206.78 L1906.11 1206.78 L1906.69 1206.78 L1907.28 1206.78 L1907.87 1206.78 L1908.45 1206.78 L1909.04 1206.78 L1909.63 1206.78 L1910.21 1206.78 L1910.8 1206.78 L1911.38 1206.78 L1911.97 1206.78 L1912.56 1206.78 L1913.14 1206.78 L1913.73 1206.78 L1914.32 1206.78 L1914.9 1206.78 L1915.49 1206.78 L1916.08 1206.78 L1916.66 1206.78 L1917.25 1206.78 L1917.83 1206.78 L1918.42 1206.78 L1919.01 1206.78 L1919.59 1206.78 L1920.18 1206.78 L1920.77 1206.78 L1921.35 1206.78 L1921.94 1206.78 L1922.53 1206.78 L1923.11 1206.78 L1923.7 1206.78 L1924.29 1206.78 L1924.87 1206.78 L1925.46 1206.78 L1926.04 1206.78 L1926.63 1206.78 L1927.22 1206.78 L1927.8 1206.78 L1928.39 1206.78 L1928.98 1206.78 L1929.56 1206.78 L1930.15 1206.78 L1930.74 1206.78 L1931.32 1206.78 L1931.91 1206.78 L1932.5 1206.78 L1933.08 1206.78 L1933.67 1206.78 L1934.25 1206.78 L1934.84 1206.78 L1935.43 1206.78 L1936.01 1206.78 L1936.6 1206.78 L1937.19 1206.78 L1937.77 1206.78 L1938.36 1206.78 L1938.95 1206.78 L1939.53 1206.78 L1940.12 1206.78 L1940.71 1206.78 L1941.29 1206.78 L1941.88 1206.78 L1942.46 1206.78 L1943.05 1206.78 L1943.64 1206.78 L1944.22 1206.78 L1944.81 1206.78 L1945.4 1206.78 L1945.98 1206.78 L1946.57 1206.78 L1947.16 1206.78 L1947.74 1206.78 L1948.33 1206.78 L1948.91 1206.78 L1949.5 1206.78 L1950.09 1206.78 L1950.67 1206.78 L1951.26 1206.78 L1951.85 1206.78 L1952.43 1206.78 L1953.02 1206.78 L1953.61 1206.78 L1954.19 1206.78 L1954.78 1206.78 L1955.37 1206.78 L1955.95 1206.78 L1956.54 1206.78 L1957.12 1206.78 L1957.71 1206.78 L1958.3 1206.78 L1958.88 1206.78 L1959.47 1206.78 L1960.06 1206.78 L1960.64 1206.78 L1961.23 1206.78 L1961.82 1206.78 L1962.4 1206.78 L1962.99 1206.78 L1963.58 1206.78 L1964.16 1206.78 L1964.75 1206.78 L1965.33 1206.78 L1965.92 1206.78 L1966.51 1206.78 L1967.09 1206.78 L1967.68 1206.78 L1968.27 1206.78 L1968.85 1206.78 L1969.44 1206.78 L1970.03 1206.78 L1970.61 1206.78 L1971.2 1206.78 L1971.78 1206.78 L1972.37 1206.78 L1972.96 1206.78 L1973.54 1206.78 L1974.13 1206.78 L1974.72 1206.78 L1975.3 1206.78 L1975.89 1206.78 L1976.48 1206.78 L1977.06 1206.78 L1977.65 1206.78 L1978.24 1206.78 L1978.82 1206.78 L1979.41 1206.78 L1979.99 1206.78 L1980.58 1206.78 L1981.17 1206.78 L1981.75 1206.78 L1982.34 1206.78 L1982.93 1206.78 L1983.51 1206.78 L1984.1 1206.78 L1984.69 1206.78 L1985.27 1206.78 L1985.86 1206.78 L1986.45 1206.78 L1987.03 1206.78 L1987.62 1206.78 L1988.2 1206.78 L1988.79 1206.78 L1989.38 1206.78 L1989.96 1206.78 L1990.55 1206.78 L1991.14 1206.78 L1991.72 1206.78 L1992.31 1206.78 L1992.9 1206.78 L1993.48 1206.78 L1994.07 1206.78 L1994.65 1206.78 L1995.24 1206.78 L1995.83 1206.78 L1996.41 1206.78 L1997 1206.78 L1997.59 1206.78 L1998.17 1206.78 L1998.76 1206.78 L1999.35 1206.78 L1999.93 1206.78 L2000.52 1206.78 L2001.11 1206.78 L2001.69 1206.78 L2002.28 1206.78 L2002.86 1206.78 L2003.45 1206.78 L2004.04 1206.78 L2004.62 1206.78 L2005.21 1206.78 L2005.8 1206.78 L2006.38 1206.78 L2006.97 1206.78 L2007.56 1206.78 L2008.14 1206.78 L2008.73 1206.78 L2009.32 1206.78 L2009.9 1206.78 L2010.49 1206.78 L2011.07 1206.78 L2011.66 1206.78 L2012.25 1206.78 L2012.83 1206.78 L2013.42 1206.78 L2014.01 1206.78 L2014.59 1206.78 L2015.18 1206.78 L2015.77 1206.78 L2016.35 1206.78 L2016.94 1206.78 L2017.53 1206.78 L2018.11 1206.78 L2018.7 1206.78 L2019.28 1206.78 L2019.87 1206.78 L2020.46 1206.78 L2021.04 1206.78 L2021.63 1206.78 L2022.22 1206.78 L2022.8 1206.78 L2023.39 1206.78 L2023.98 1206.78 L2024.56 1206.78 L2025.15 1206.78 L2025.73 1206.78 L2026.32 1206.78 L2026.91 1206.78 L2027.49 1206.78 L2028.08 1206.78 L2028.67 1206.78 L2029.25 1206.78 L2029.84 1206.78 L2030.43 1206.78 L2031.01 1206.78 L2031.6 1206.78 L2032.19 1206.78 L2032.77 1206.78 L2033.36 1206.78 L2033.94 1206.78 L2034.53 1206.78 L2035.12 1206.78 L2035.7 1206.78 L2036.29 1206.78 L2036.88 1206.78 L2037.46 1206.78 L2038.05 1206.78 L2038.64 1206.78 L2039.22 1206.78 L2039.81 1206.78 L2040.4 1206.78 L2040.98 1206.78 L2041.57 1206.78 L2042.15 1206.78 L2042.74 1206.78 L2043.33 1206.78 L2043.91 1206.78 L2044.5 1206.78 L2045.09 1206.78 L2045.67 1206.78 L2046.26 1206.78 L2046.85 1206.78 L2047.43 1206.78 L2048.02 1206.78 L2048.6 1206.78 L2049.19 1206.78 L2049.78 1206.78 L2050.36 1206.78 L2050.95 1206.78 L2051.54 1206.78 L2052.12 1206.78 L2052.71 1206.78 L2053.3 1206.78 L2053.88 1206.78 L2054.47 1206.78 L2055.06 1206.78 L2055.64 1206.78 L2056.23 1206.78 L2056.81 1206.78 L2057.4 1206.78 L2057.99 1206.78 L2058.57 1206.78 L2059.16 1206.78 L2059.75 1206.78 L2060.33 1206.78 L2060.92 1206.78 L2061.51 1206.78 L2062.09 1206.78 L2062.68 1206.78 L2063.27 1206.78 L2063.85 1206.78 L2064.44 1206.78 L2065.02 1206.78 L2065.61 1206.78 L2066.2 1206.78 L2066.78 1206.78 L2067.37 1206.78 L2067.96 1206.78 L2068.54 1206.78 L2069.13 1206.78 L2069.72 1206.78 L2070.3 1206.78 L2070.89 1206.78 L2071.48 1206.78 L2072.06 1206.78 L2072.65 1206.78 L2073.23 1206.78 L2073.82 1206.78 L2074.41 1206.78 L2074.99 1206.78 L2075.58 1206.78 L2076.17 1206.78 L2076.75 1206.78 L2077.34 1206.78 L2077.93 1206.78 L2078.51 1206.78 L2079.1 1206.78 L2079.68 1206.78 L2080.27 1206.78 L2080.86 1206.78 L2081.44 1206.78 L2082.03 1206.78 L2082.62 1206.78 L2083.2 1206.78 L2083.79 1206.78 L2084.38 1206.78 L2084.96 1206.78 L2085.55 1206.78 L2086.14 1206.78 L2086.72 1206.78 L2087.31 1206.78 L2087.89 1206.78 L2088.48 1206.78 L2089.07 1206.78 L2089.65 1206.78 L2090.24 1206.78 L2090.83 1206.78 L2091.41 1206.78 L2092 1206.78 L2092.59 1206.78 L2093.17 1206.78 L2093.76 1206.78 L2094.35 1206.78 L2094.93 1206.78 L2095.52 1206.78 L2096.1 1206.78 L2096.69 1206.78 L2097.28 1206.78 L2097.86 1206.78 L2098.45 1206.78 L2099.04 1206.78 L2099.62 1206.78 L2100.21 1206.78 L2100.8 1206.78 L2101.38 1206.78 L2101.97 1206.78 L2102.55 1206.78 L2103.14 1206.78 L2103.73 1206.78 L2104.31 1206.78 L2104.9 1206.78 L2105.49 1206.78 L2106.07 1206.78 L2106.66 1206.78 L2107.25 1206.78 L2107.83 1206.78 L2108.42 1206.78 L2109.01 1206.78 L2109.59 1206.78 L2110.18 1206.78 L2110.76 1206.78 L2111.35 1206.78 L2111.94 1206.78 L2112.52 1206.78 L2113.11 1206.78 L2113.7 1206.78 L2114.28 1206.78 L2114.87 1206.78 L2115.46 1206.78 L2116.04 1206.78 L2116.63 1206.78 L2117.22 1206.78 L2117.8 1206.78 L2118.39 1206.78 L2118.97 1206.78 L2119.56 1206.78 L2120.15 1206.78 L2120.73 1206.78 L2121.32 1206.78 L2121.91 1206.78 L2122.49 1206.78 L2123.08 1206.78 L2123.67 1206.78 L2124.25 1206.78 L2124.84 1206.78 L2125.42 1206.78 L2126.01 1206.78 L2126.6 1206.78 L2127.18 1206.78 L2127.77 1206.78 L2128.36 1206.78 L2128.94 1206.78 L2129.53 1206.78 L2130.12 1206.78 L2130.7 1206.78 L2131.29 1206.78 L2131.88 1206.78 L2132.46 1206.78 L2133.05 1206.78 L2133.63 1206.78 L2134.22 1206.78 L2134.81 1206.78 L2135.39 1206.78 L2135.98 1206.78 L2136.57 1206.78 L2137.15 1206.78 L2137.74 1206.78 L2138.33 1206.78 L2138.91 1206.78 L2139.5 1206.78 L2140.09 1206.78 L2140.67 1206.78 L2141.26 1206.78 L2141.84 1206.78 L2142.43 1206.78 L2143.02 1206.78 L2143.6 1206.78 L2144.19 1206.78 L2144.78 1206.78 L2145.36 1206.78 L2145.95 1206.78 L2146.54 1206.78 L2147.12 1206.78 L2147.71 1206.78 L2148.3 1206.78 L2148.88 1206.78 L2149.47 1206.78 L2150.05 1206.78 L2150.64 1206.78 L2151.23 1206.78 L2151.81 1206.78 L2152.4 1206.78 L2152.99 1206.78 L2153.57 1206.78 L2154.16 1206.78 L2154.75 1206.78 L2155.33 1206.78 L2155.92 1206.78 L2156.5 1206.78 L2157.09 1206.78 L2157.68 1206.78 L2158.26 1206.78 L2158.26 1206.61 L2157.68 1206.61 L2157.09 1206.61 L2156.5 1206.61 L2155.92 1206.61 L2155.33 1206.61 L2154.75 1206.61 L2154.16 1206.61 L2153.57 1206.61 L2152.99 1206.61 L2152.4 1206.61 L2151.81 1206.61 L2151.23 1206.61 L2150.64 1206.61 L2150.05 1206.61 L2149.47 1206.61 L2148.88 1206.61 L2148.3 1206.61 L2147.71 1206.61 L2147.12 1206.61 L2146.54 1206.61 L2145.95 1206.61 L2145.36 1206.61 L2144.78 1206.61 L2144.19 1206.61 L2143.6 1206.61 L2143.02 1206.61 L2142.43 1206.61 L2141.84 1206.61 L2141.26 1206.61 L2140.67 1206.61 L2140.09 1206.61 L2139.5 1206.61 L2138.91 1206.61 L2138.33 1206.61 L2137.74 1206.61 L2137.15 1206.61 L2136.57 1206.61 L2135.98 1206.61 L2135.39 1206.61 L2134.81 1206.61 L2134.22 1206.61 L2133.63 1206.61 L2133.05 1206.61 L2132.46 1206.61 L2131.88 1206.61 L2131.29 1206.61 L2130.7 1206.61 L2130.12 1206.61 L2129.53 1206.61 L2128.94 1206.61 L2128.36 1206.61 L2127.77 1206.61 L2127.18 1206.61 L2126.6 1206.61 L2126.01 1206.61 L2125.42 1206.61 L2124.84 1206.61 L2124.25 1206.61 L2123.67 1206.61 L2123.08 1206.61 L2122.49 1206.61 L2121.91 1206.61 L2121.32 1206.61 L2120.73 1206.61 L2120.15 1206.61 L2119.56 1206.61 L2118.97 1206.61 L2118.39 1206.61 L2117.8 1206.61 L2117.22 1206.61 L2116.63 1206.61 L2116.04 1206.61 L2115.46 1206.61 L2114.87 1206.61 L2114.28 1206.61 L2113.7 1206.61 L2113.11 1206.61 L2112.52 1206.61 L2111.94 1206.61 L2111.35 1206.61 L2110.76 1206.61 L2110.18 1206.61 L2109.59 1206.61 L2109.01 1206.61 L2108.42 1206.61 L2107.83 1206.61 L2107.25 1206.61 L2106.66 1206.61 L2106.07 1206.61 L2105.49 1206.61 L2104.9 1206.61 L2104.31 1206.61 L2103.73 1206.61 L2103.14 1206.61 L2102.55 1206.61 L2101.97 1206.61 L2101.38 1206.61 L2100.8 1206.61 L2100.21 1206.61 L2099.62 1206.61 L2099.04 1206.61 L2098.45 1206.61 L2097.86 1206.61 L2097.28 1206.61 L2096.69 1206.61 L2096.1 1206.61 L2095.52 1206.61 L2094.93 1206.61 L2094.35 1206.61 L2093.76 1206.61 L2093.17 1206.61 L2092.59 1206.61 L2092 1206.61 L2091.41 1206.61 L2090.83 1206.61 L2090.24 1206.61 L2089.65 1206.61 L2089.07 1206.61 L2088.48 1206.61 L2087.89 1206.61 L2087.31 1206.61 L2086.72 1206.61 L2086.14 1206.61 L2085.55 1206.61 L2084.96 1206.61 L2084.38 1206.61 L2083.79 1206.61 L2083.2 1206.61 L2082.62 1206.61 L2082.03 1206.61 L2081.44 1206.61 L2080.86 1206.61 L2080.27 1206.61 L2079.68 1206.61 L2079.1 1206.61 L2078.51 1206.61 L2077.93 1206.61 L2077.34 1206.61 L2076.75 1206.61 L2076.17 1206.61 L2075.58 1206.61 L2074.99 1206.61 L2074.41 1206.61 L2073.82 1206.61 L2073.23 1206.61 L2072.65 1206.61 L2072.06 1206.61 L2071.48 1206.61 L2070.89 1206.61 L2070.3 1206.61 L2069.72 1206.61 L2069.13 1206.61 L2068.54 1206.61 L2067.96 1206.61 L2067.37 1206.61 L2066.78 1206.61 L2066.2 1206.61 L2065.61 1206.61 L2065.02 1206.61 L2064.44 1206.61 L2063.85 1206.61 L2063.27 1206.61 L2062.68 1206.61 L2062.09 1206.61 L2061.51 1206.61 L2060.92 1206.61 L2060.33 1206.61 L2059.75 1206.61 L2059.16 1206.61 L2058.57 1206.61 L2057.99 1206.61 L2057.4 1206.61 L2056.81 1206.61 L2056.23 1206.61 L2055.64 1206.61 L2055.06 1206.61 L2054.47 1206.61 L2053.88 1206.61 L2053.3 1206.61 L2052.71 1206.61 L2052.12 1206.61 L2051.54 1206.61 L2050.95 1206.61 L2050.36 1206.61 L2049.78 1206.61 L2049.19 1206.61 L2048.6 1206.61 L2048.02 1206.61 L2047.43 1206.61 L2046.85 1206.61 L2046.26 1206.61 L2045.67 1206.61 L2045.09 1206.61 L2044.5 1206.61 L2043.91 1206.61 L2043.33 1206.61 L2042.74 1206.61 L2042.15 1206.61 L2041.57 1206.61 L2040.98 1206.61 L2040.4 1206.61 L2039.81 1206.61 L2039.22 1206.61 L2038.64 1206.61 L2038.05 1206.61 L2037.46 1206.61 L2036.88 1206.61 L2036.29 1206.61 L2035.7 1206.61 L2035.12 1206.61 L2034.53 1206.61 L2033.94 1206.61 L2033.36 1206.61 L2032.77 1206.61 L2032.19 1206.61 L2031.6 1206.61 L2031.01 1206.61 L2030.43 1206.61 L2029.84 1206.61 L2029.25 1206.61 L2028.67 1206.61 L2028.08 1206.61 L2027.49 1206.61 L2026.91 1206.61 L2026.32 1206.61 L2025.73 1206.61 L2025.15 1206.61 L2024.56 1206.61 L2023.98 1206.61 L2023.39 1206.61 L2022.8 1206.61 L2022.22 1206.61 L2021.63 1206.61 L2021.04 1206.61 L2020.46 1206.61 L2019.87 1206.61 L2019.28 1206.61 L2018.7 1206.61 L2018.11 1206.61 L2017.53 1206.61 L2016.94 1206.61 L2016.35 1206.61 L2015.77 1206.61 L2015.18 1206.61 L2014.59 1206.61 L2014.01 1206.61 L2013.42 1206.61 L2012.83 1206.61 L2012.25 1206.61 L2011.66 1206.61 L2011.07 1206.61 L2010.49 1206.61 L2009.9 1206.61 L2009.32 1206.61 L2008.73 1206.61 L2008.14 1206.61 L2007.56 1206.61 L2006.97 1206.61 L2006.38 1206.61 L2005.8 1206.61 L2005.21 1206.61 L2004.62 1206.61 L2004.04 1206.61 L2003.45 1206.61 L2002.86 1206.61 L2002.28 1206.61 L2001.69 1206.61 L2001.11 1206.61 L2000.52 1206.61 L1999.93 1206.61 L1999.35 1206.61 L1998.76 1206.61 L1998.17 1206.61 L1997.59 1206.61 L1997 1206.61 L1996.41 1206.61 L1995.83 1206.61 L1995.24 1206.61 L1994.65 1206.61 L1994.07 1206.61 L1993.48 1206.61 L1992.9 1206.61 L1992.31 1206.61 L1991.72 1206.61 L1991.14 1206.61 L1990.55 1206.61 L1989.96 1206.61 L1989.38 1206.61 L1988.79 1206.61 L1988.2 1206.61 L1987.62 1206.61 L1987.03 1206.61 L1986.45 1206.61 L1985.86 1206.61 L1985.27 1206.61 L1984.69 1206.61 L1984.1 1206.61 L1983.51 1206.61 L1982.93 1206.61 L1982.34 1206.61 L1981.75 1206.61 L1981.17 1206.61 L1980.58 1206.61 L1979.99 1206.61 L1979.41 1206.61 L1978.82 1206.61 L1978.24 1206.61 L1977.65 1206.61 L1977.06 1206.61 L1976.48 1206.61 L1975.89 1206.61 L1975.3 1206.61 L1974.72 1206.61 L1974.13 1206.61 L1973.54 1206.61 L1972.96 1206.61 L1972.37 1206.61 L1971.78 1206.61 L1971.2 1206.61 L1970.61 1206.61 L1970.03 1206.61 L1969.44 1206.61 L1968.85 1206.61 L1968.27 1206.61 L1967.68 1206.61 L1967.09 1206.61 L1966.51 1206.61 L1965.92 1206.61 L1965.33 1206.61 L1964.75 1206.61 L1964.16 1206.61 L1963.58 1206.61 L1962.99 1206.61 L1962.4 1206.61 L1961.82 1206.61 L1961.23 1206.61 L1960.64 1206.61 L1960.06 1206.61 L1959.47 1206.61 L1958.88 1206.61 L1958.3 1206.61 L1957.71 1206.61 L1957.12 1206.61 L1956.54 1206.61 L1955.95 1206.61 L1955.37 1206.61 L1954.78 1206.61 L1954.19 1206.61 L1953.61 1206.61 L1953.02 1206.61 L1952.43 1206.61 L1951.85 1206.61 L1951.26 1206.61 L1950.67 1206.61 L1950.09 1206.61 L1949.5 1206.61 L1948.91 1206.61 L1948.33 1206.61 L1947.74 1206.61 L1947.16 1206.61 L1946.57 1206.61 L1945.98 1206.61 L1945.4 1206.61 L1944.81 1206.61 L1944.22 1206.61 L1943.64 1206.61 L1943.05 1206.61 L1942.46 1206.61 L1941.88 1206.61 L1941.29 1206.61 L1940.71 1206.61 L1940.12 1206.61 L1939.53 1206.61 L1938.95 1206.61 L1938.36 1206.61 L1937.77 1206.61 L1937.19 1206.61 L1936.6 1206.61 L1936.01 1206.61 L1935.43 1206.61 L1934.84 1206.61 L1934.25 1206.61 L1933.67 1206.61 L1933.08 1206.61 L1932.5 1206.61 L1931.91 1206.61 L1931.32 1206.61 L1930.74 1206.61 L1930.15 1206.61 L1929.56 1206.61 L1928.98 1206.61 L1928.39 1206.61 L1927.8 1206.61 L1927.22 1206.61 L1926.63 1206.61 L1926.04 1206.61 L1925.46 1206.61 L1924.87 1206.61 L1924.29 1206.61 L1923.7 1206.61 L1923.11 1206.61 L1922.53 1206.61 L1921.94 1206.61 L1921.35 1206.61 L1920.77 1206.61 L1920.18 1206.61 L1919.59 1206.61 L1919.01 1206.61 L1918.42 1206.61 L1917.83 1206.61 L1917.25 1206.61 L1916.66 1206.61 L1916.08 1206.61 L1915.49 1206.61 L1914.9 1206.61 L1914.32 1206.61 L1913.73 1206.61 L1913.14 1206.61 L1912.56 1206.61 L1911.97 1206.61 L1911.38 1206.61 L1910.8 1206.61 L1910.21 1206.61 L1909.63 1206.61 L1909.04 1206.61 L1908.45 1206.61 L1907.87 1206.61 L1907.28 1206.61 L1906.69 1206.61 L1906.11 1206.61 L1905.52 1206.61 L1904.93 1206.61 L1904.35 1206.61 L1903.76 1206.61 L1903.17 1206.61 L1902.59 1206.61 L1902 1206.61 L1901.42 1206.61 L1900.83 1206.61 L1900.24 1206.61 L1899.66 1206.61 L1899.07 1206.61 L1898.48 1206.61 L1897.9 1206.61 L1897.31 1206.61 L1896.72 1206.61 L1896.14 1206.61 L1895.55 1206.61 L1894.96 1206.61 L1894.38 1206.61 L1893.79 1206.61 L1893.21 1206.61 L1892.62 1206.61 L1892.03 1206.61 L1891.45 1206.61 L1890.86 1206.61 L1890.27 1206.61 L1889.69 1206.61 L1889.1 1206.61 L1888.51 1206.61 L1887.93 1206.61 L1887.34 1206.61 L1886.76 1206.61 L1886.17 1206.61 L1885.58 1206.61 L1885 1206.61 L1884.41 1206.61 L1883.82 1206.61 L1883.24 1206.61 L1882.65 1206.61 L1882.06 1206.61 L1881.48 1206.61 L1880.89 1206.61 L1880.3 1206.61 L1879.72 1206.61 L1879.13 1206.61 L1878.55 1206.61 L1877.96 1206.61 L1877.37 1206.61 L1876.79 1206.61 L1876.2 1206.61 L1875.61 1206.61 L1875.03 1206.61 L1874.44 1206.61 L1873.85 1206.61 L1873.27 1206.61 L1872.68 1206.61 L1872.09 1206.61 L1871.51 1206.61 L1870.92 1206.61 L1870.34 1206.61 L1869.75 1206.61 L1869.16 1206.61 L1868.58 1206.61 L1867.99 1206.61 L1867.4 1206.61 L1866.82 1206.61 L1866.23 1206.61 L1865.64 1206.61 L1865.06 1206.61 L1864.47 1206.61 L1863.88 1206.61 L1863.3 1206.61 L1862.71 1206.61 L1862.13 1206.61 L1861.54 1206.61 L1860.95 1206.61 L1860.37 1206.61 L1859.78 1206.61 L1859.19 1206.61 L1858.61 1206.61 L1858.02 1206.61 L1857.43 1206.61 L1856.85 1206.61 L1856.26 1206.61 L1855.68 1206.61 L1855.09 1206.61 L1854.5 1206.61 L1853.92 1206.61 L1853.33 1206.61 L1852.74 1206.61 L1852.16 1206.61 L1851.57 1206.61 L1850.98 1206.61 L1850.4 1206.61 L1849.81 1206.61 L1849.22 1206.61 L1848.64 1206.61 L1848.05 1206.61 L1847.47 1206.61 L1846.88 1206.61 L1846.29 1206.61 L1845.71 1206.61 L1845.12 1206.61 L1844.53 1206.61 L1843.95 1206.61 L1843.36 1206.61 L1842.77 1206.61 L1842.19 1206.61 L1841.6 1206.61 L1841.01 1206.61 L1840.43 1206.61 L1839.84 1206.61 L1839.26 1206.61 L1838.67 1206.61 L1838.08 1206.61 L1837.5 1206.61 L1836.91 1206.61 L1836.32 1206.61 L1835.74 1206.61 L1835.15 1206.61 L1834.56 1206.61 L1833.98 1206.61 L1833.39 1206.61 L1832.81 1206.61 L1832.22 1206.61 L1831.63 1206.61 L1831.05 1206.61 L1830.46 1206.61 L1829.87 1206.61 L1829.29 1206.61 L1828.7 1206.61 L1828.11 1206.61 L1827.53 1206.61 L1826.94 1206.61 L1826.35 1206.61 L1825.77 1206.61 L1825.18 1206.61 L1824.6 1206.61 L1824.01 1206.61 L1823.42 1206.61 L1822.84 1206.61 L1822.25 1206.61 L1821.66 1206.61 L1821.08 1206.61 L1820.49 1206.61 L1819.9 1206.61 L1819.32 1206.61 L1818.73 1206.61 L1818.14 1206.61 L1817.56 1206.61 L1816.97 1206.61 L1816.39 1206.61 L1815.8 1206.61 L1815.21 1206.61 L1814.63 1206.61 L1814.04 1206.61 L1813.45 1206.61 L1812.87 1206.61 L1812.28 1206.61 L1811.69 1206.61 L1811.11 1206.61 L1810.52 1206.61 L1809.94 1206.61 L1809.35 1206.61 L1808.76 1206.61 L1808.18 1206.61 L1807.59 1206.61 L1807 1206.61 L1806.42 1206.61 L1805.83 1206.61 L1805.24 1206.61 L1804.66 1206.61 L1804.07 1206.61 L1803.48 1206.61 L1802.9 1206.61 L1802.31 1206.61 L1801.73 1206.61 L1801.14 1206.61 L1800.55 1206.61 L1799.97 1206.61 L1799.38 1206.61 L1798.79 1206.61 L1798.21 1206.61 L1797.62 1206.61 L1797.03 1206.61 L1796.45 1206.61 L1795.86 1206.61 L1795.27 1206.61 L1794.69 1206.61 L1794.1 1206.61 L1793.52 1206.61 L1792.93 1206.61 L1792.34 1206.61 L1791.76 1206.61 L1791.17 1206.61 L1790.58 1206.61 L1790 1206.61 L1789.41 1206.61 L1788.82 1206.61 L1788.24 1206.61 L1787.65 1206.61 L1787.06 1206.61 L1786.48 1206.61 L1785.89 1206.61 L1785.31 1206.61 L1784.72 1206.61 L1784.13 1206.61 L1783.55 1206.61 L1782.96 1206.61 L1782.37 1206.61 L1781.79 1206.61 L1781.2 1206.61 L1780.61 1206.61 L1780.03 1206.61 L1779.44 1206.61 L1778.86 1206.61 L1778.27 1206.61 L1777.68 1206.61 L1777.1 1206.61 L1776.51 1206.61 L1775.92 1206.61 L1775.34 1206.61 L1774.75 1206.61 L1774.16 1206.61 L1773.58 1206.61 L1772.99 1206.61 L1772.4 1206.61 L1771.82 1206.61 L1771.23 1206.61 L1770.65 1206.61 L1770.06 1206.61 L1769.47 1206.61 L1768.89 1206.61 L1768.3 1206.61 L1767.71 1206.61 L1767.13 1206.61 L1766.54 1206.61 L1765.95 1206.61 L1765.37 1206.61 L1764.78 1206.61 L1764.19 1206.61 L1763.61 1206.61 L1763.02 1206.61 L1762.44 1206.61 L1761.85 1206.61 L1761.26 1206.61 L1760.68 1206.61 L1760.09 1206.61 L1759.5 1206.61 L1758.92 1206.61 L1758.33 1206.61 L1757.74 1206.61 L1757.16 1206.61 L1756.57 1206.61 L1755.99 1206.61 L1755.4 1206.61 L1754.81 1206.61 L1754.23 1206.61 L1753.64 1206.61 L1753.05 1206.61 L1752.47 1206.61 L1751.88 1206.61 L1751.29 1206.61 L1750.71 1206.61 L1750.12 1206.61 L1749.53 1206.61 L1748.95 1206.61 L1748.36 1206.61 L1747.78 1206.61 L1747.19 1206.61 L1746.6 1206.61 L1746.02 1206.61 L1745.43 1206.61 L1744.84 1206.61 L1744.26 1206.61 L1743.67 1206.61 L1743.08 1206.61 L1742.5 1206.61 L1741.91 1206.61 L1741.32 1206.61 L1740.74 1206.61 L1740.15 1206.61 L1739.57 1206.61 L1738.98 1206.61 L1738.39 1206.61 L1737.81 1206.61 L1737.22 1206.61 L1736.63 1206.61 L1736.05 1206.61 L1735.46 1206.61 L1734.87 1206.61 L1734.29 1206.61 L1733.7 1206.61 L1733.11 1206.61 L1732.53 1206.61 L1731.94 1206.61 L1731.36 1206.61 L1730.77 1206.61 L1730.18 1206.61 L1729.6 1206.61 L1729.01 1206.61 L1728.42 1206.61 L1727.84 1206.61 L1727.25 1206.61 L1726.66 1206.61 L1726.08 1206.61 L1725.49 1206.61 L1724.91 1206.61 L1724.32 1206.61 L1723.73 1206.61 L1723.15 1206.61 L1722.56 1206.61 L1721.97 1206.61 L1721.39 1206.61 L1720.8 1206.61 L1720.21 1206.61 L1719.63 1206.61 L1719.04 1206.61 L1718.45 1206.61 L1717.87 1206.61 L1717.28 1206.61 L1716.7 1206.61 L1716.11 1206.61 L1715.52 1206.61 L1714.94 1206.61 L1714.35 1206.61 L1713.76 1206.61 L1713.18 1206.61 L1712.59 1206.61 L1712 1206.61 L1711.42 1206.61 L1710.83 1206.61 L1710.24 1206.61 L1709.66 1206.61 L1709.07 1206.61 L1708.49 1206.61 L1707.9 1206.61 L1707.31 1206.61 L1706.73 1206.61 L1706.14 1206.61 L1705.55 1206.61 L1704.97 1206.61 L1704.38 1206.61 L1703.79 1206.61 L1703.21 1206.61 L1702.62 1206.61 L1702.04 1206.61 L1701.45 1206.61 L1700.86 1206.61 L1700.28 1206.61 L1699.69 1206.61 L1699.1 1206.61 L1698.52 1206.61 L1697.93 1206.61 L1697.34 1206.61 L1696.76 1206.61 L1696.17 1206.61 L1695.58 1206.61 L1695 1206.61 L1694.41 1206.61 L1693.83 1206.61 L1693.24 1206.61 L1692.65 1206.61 L1692.07 1206.61 L1691.48 1206.61 L1690.89 1206.61 L1690.31 1206.61 L1689.72 1206.61 L1689.13 1206.61 L1688.55 1206.61 L1687.96 1206.61 L1687.37 1206.61 L1686.79 1206.61 L1686.2 1206.61 L1685.62 1206.61 L1685.03 1206.61 L1684.44 1206.61 L1683.86 1206.61 L1683.27 1206.61 L1682.68 1206.61 L1682.1 1206.61 L1681.51 1206.61 L1680.92 1206.61 L1680.34 1206.61 L1679.75 1206.61 L1679.17 1206.61 L1678.58 1206.61 L1677.99 1206.61 L1677.41 1206.61 L1676.82 1206.61 L1676.23 1206.61 L1675.65 1206.61 L1675.06 1206.61 L1674.47 1206.61 L1673.89 1206.61 L1673.3 1206.61 L1672.71 1206.61 L1672.13 1206.61 L1671.54 1206.61 L1670.96 1206.61 L1670.37 1206.61 L1669.78 1206.61 L1669.2 1206.61 L1668.61 1206.61 L1668.02 1206.61 L1667.44 1206.61 L1666.85 1206.61 L1666.26 1206.61 L1665.68 1206.61 L1665.09 1206.61 L1664.5 1206.61 L1663.92 1206.61 L1663.33 1206.61 L1662.75 1206.61 L1662.16 1206.61 L1661.57 1206.61 L1660.99 1206.61 L1660.4 1206.61 L1659.81 1206.61 L1659.23 1206.61 L1658.64 1206.61 L1658.05 1206.61 L1657.47 1206.61 L1656.88 1206.61 L1656.29 1206.61 L1655.71 1206.61 L1655.12 1206.61 L1654.54 1206.61 L1653.95 1206.61 L1653.36 1206.61 L1652.78 1206.61 L1652.19 1206.61 L1651.6 1206.61 L1651.02 1206.61 L1650.43 1206.61 L1649.84 1206.61 L1649.26 1206.61 L1648.67 1206.61 L1648.09 1206.61 L1647.5 1206.61 L1646.91 1206.61 L1646.33 1206.61 L1645.74 1206.61 L1645.15 1206.61 L1644.57 1206.61 L1643.98 1206.61 L1643.39 1206.61 L1642.81 1206.61 L1642.22 1206.61 L1641.63 1206.61 L1641.05 1206.61 L1640.46 1206.61 L1639.88 1206.61 L1639.29 1206.61 L1638.7 1206.61 L1638.12 1206.61 L1637.53 1206.61 L1636.94 1206.61 L1636.36 1206.61 L1635.77 1206.61 L1635.18 1206.61 L1634.6 1206.61 L1634.01 1206.61 L1633.42 1206.61 L1632.84 1206.61 L1632.25 1206.61 L1631.67 1206.61 L1631.08 1206.61 L1630.49 1206.61 L1629.91 1206.61 L1629.32 1206.61 L1628.73 1206.61 L1628.15 1206.61 L1627.56 1206.61 L1626.97 1206.61 L1626.39 1206.61 L1625.8 1206.61 L1625.22 1206.61 L1624.63 1206.61 L1624.04 1206.61 L1623.46 1206.61 L1622.87 1206.61 L1622.28 1206.61 L1621.7 1206.61 L1621.11 1206.61 L1620.52 1206.61 L1619.94 1206.61 L1619.35 1206.61 L1618.76 1206.61 L1618.18 1206.61 L1617.59 1206.61 L1617.01 1206.61 L1616.42 1206.61 L1615.83 1206.61 L1615.25 1206.61 L1614.66 1206.61 L1614.07 1206.61 L1613.49 1206.61 L1612.9 1206.61 L1612.31 1206.61 L1611.73 1206.61 L1611.14 1206.61 L1610.55 1206.61 L1609.97 1206.61 L1609.38 1206.61 L1608.8 1206.61 L1608.21 1206.61 L1607.62 1206.61 L1607.04 1206.61 L1606.45 1206.61 L1605.86 1206.61 L1605.28 1206.61 L1604.69 1206.61 L1604.1 1206.61 L1603.52 1206.61 L1602.93 1206.61 L1602.34 1206.61 L1601.76 1206.61 L1601.17 1206.61 L1600.59 1206.61 L1600 1206.61 L1599.41 1206.61 L1598.83 1206.61 L1598.24 1206.61 L1597.65 1206.61 L1597.07 1206.61 L1596.48 1206.61 L1595.89 1206.61 L1595.31 1206.61 L1594.72 1206.61 L1594.14 1206.61 L1593.55 1206.61 L1592.96 1206.61 L1592.38 1206.61 L1591.79 1206.61 L1591.2 1206.61 L1590.62 1206.61 L1590.03 1206.61 L1589.44 1206.61 L1588.86 1206.61 L1588.27 1206.61 L1587.68 1206.61 L1587.1 1206.61 L1586.51 1206.61 L1585.93 1206.61 L1585.34 1206.61 L1584.75 1206.61 L1584.17 1206.61 L1583.58 1206.61 L1582.99 1206.61 L1582.41 1206.61 L1581.82 1206.61 L1581.23 1206.61 L1580.65 1206.61 L1580.06 1206.61 L1579.47 1206.61 L1578.89 1206.61 L1578.3 1206.61 L1577.72 1206.61 L1577.13 1206.61 L1576.54 1206.61 L1575.96 1206.61 L1575.37 1206.61 L1574.78 1206.61 L1574.2 1206.61 L1573.61 1206.61 L1573.02 1206.61 L1572.44 1206.61 L1571.85 1206.61 L1571.27 1206.61 L1570.68 1206.61 L1570.09 1206.61 L1569.51 1206.61 L1568.92 1206.61 L1568.33 1206.61 L1567.75 1206.61 L1567.16 1206.61 L1566.57 1206.61 L1565.99 1206.61 L1565.4 1206.61 L1564.81 1206.61 L1564.23 1206.61 L1563.64 1206.61 L1563.06 1206.61 L1562.47 1206.61 L1561.88 1206.61 L1561.3 1206.61 L1560.71 1206.61 L1560.12 1206.61 L1559.54 1206.61 L1558.95 1206.61 L1558.36 1206.61 L1557.78 1206.61 L1557.19 1206.61 L1556.6 1206.61 L1556.02 1206.61 L1555.43 1206.61 L1554.85 1206.61 L1554.26 1206.61 L1553.67 1206.61 L1553.09 1206.61 L1552.5 1206.61 L1551.91 1206.61 L1551.33 1206.61 L1550.74 1206.61 L1550.15 1206.61 L1549.57 1206.61 L1548.98 1206.61 L1548.4 1206.61 L1547.81 1206.61 L1547.22 1206.61 L1546.64 1206.61 L1546.05 1206.61 L1545.46 1206.61 L1544.88 1206.61 L1544.29 1206.61 L1543.7 1206.61 L1543.12 1206.61 L1542.53 1206.61 L1541.94 1206.61 L1541.36 1206.61 L1540.77 1206.61 L1540.19 1206.61 L1539.6 1206.61 L1539.01 1206.61 L1538.43 1206.61 L1537.84 1206.61 L1537.25 1206.61 L1536.67 1206.61 L1536.08 1206.61 L1535.49 1206.61 L1534.91 1206.61 L1534.32 1206.61 L1533.73 1206.61 L1533.15 1206.61 L1532.56 1206.61 L1531.98 1206.61 L1531.39 1206.61 L1530.8 1206.61 L1530.22 1206.61 L1529.63 1206.61 L1529.04 1206.61 L1528.46 1206.61 L1527.87 1206.61 L1527.28 1206.61 L1526.7 1206.61 L1526.11 1206.61 L1525.52 1206.61 L1524.94 1206.61 L1524.35 1206.61 L1523.77 1206.61 L1523.18 1206.61 L1522.59 1206.61 L1522.01 1206.61 L1521.42 1206.61 L1520.83 1206.61 L1520.25 1206.61 L1519.66 1206.61 L1519.07 1206.61 L1518.49 1206.61 L1517.9 1206.61 L1517.32 1206.61 L1516.73 1206.61 L1516.14 1206.61 L1515.56 1206.61 L1514.97 1206.61 L1514.38 1206.61 L1513.8 1206.61 L1513.21 1206.61 L1512.62 1206.61 L1512.04 1206.61 L1511.45 1206.61 L1510.86 1206.61 L1510.28 1206.61 L1509.69 1206.61 L1509.11 1206.61 L1508.52 1206.61 L1507.93 1206.61 L1507.35 1206.61 L1506.76 1206.61 L1506.17 1206.61 L1505.59 1206.61 L1505 1206.61 L1504.41 1206.61 L1503.83 1206.61 L1503.24 1206.61 L1502.65 1206.61 L1502.07 1206.61 L1501.48 1206.61 L1500.9 1206.61 L1500.31 1206.61 L1499.72 1206.61 L1499.14 1206.61 L1498.55 1206.61 L1497.96 1206.61 L1497.38 1206.61 L1496.79 1206.61 L1496.2 1206.61 L1495.62 1206.61 L1495.03 1206.61 L1494.45 1206.61 L1493.86 1206.61 L1493.27 1206.61 L1492.69 1206.61 L1492.1 1206.61 L1491.51 1206.61 L1490.93 1206.61 L1490.34 1206.61 L1489.75 1206.61 L1489.17 1206.61 L1488.58 1206.61 L1487.99 1206.61 L1487.41 1206.61 L1486.82 1206.61 L1486.24 1206.61 L1485.65 1206.61 L1485.06 1206.61 L1484.48 1206.61 L1483.89 1206.61 L1483.3 1206.61 L1482.72 1206.61 L1482.13 1206.61 L1481.54 1206.61 L1480.96 1206.61 L1480.37 1206.61 L1479.78 1206.61 L1479.2 1206.61 L1478.61 1206.61 L1478.03 1206.61 L1477.44 1206.61 L1476.85 1206.61 L1476.27 1206.61 L1475.68 1206.61 L1475.09 1206.61 L1474.51 1206.61 L1473.92 1206.61 L1473.33 1206.61 L1472.75 1206.61 L1472.16 1206.61 L1471.57 1206.61 L1470.99 1206.61 L1470.4 1206.61 L1469.82 1206.61 L1469.23 1206.61 L1468.64 1206.61 L1468.06 1206.61 L1467.47 1206.61 L1466.88 1206.61 L1466.3 1206.61 L1465.71 1206.61 L1465.12 1206.61 L1464.54 1206.61 L1463.95 1206.61 L1463.37 1206.61 L1462.78 1206.61 L1462.19 1206.61 L1461.61 1206.61 L1461.02 1206.61 L1460.43 1206.61 L1459.85 1206.61 L1459.26 1206.61 L1458.67 1206.61 L1458.09 1206.61 L1457.5 1206.61 L1456.91 1206.61 L1456.33 1206.61 L1455.74 1206.61 L1455.16 1206.61 L1454.57 1206.61 L1453.98 1206.61 L1453.4 1206.61 L1452.81 1206.61 L1452.22 1206.61 L1451.64 1206.61 L1451.05 1206.61 L1450.46 1206.61 L1449.88 1206.61 L1449.29 1206.61 L1448.7 1206.61 L1448.12 1206.61 L1447.53 1206.61 L1446.95 1206.61 L1446.36 1206.61 L1445.77 1206.61 L1445.19 1206.61 L1444.6 1206.61 L1444.01 1206.61 L1443.43 1206.61 L1442.84 1206.61 L1442.25 1206.61 L1441.67 1206.61 L1441.08 1206.61 L1440.5 1206.61 L1439.91 1206.61 L1439.32 1206.61 L1438.74 1206.61 L1438.15 1206.61 L1437.56 1206.61 L1436.98 1206.61 L1436.39 1206.61 L1435.8 1206.61 L1435.22 1206.61 L1434.63 1206.61 L1434.04 1206.61 L1433.46 1206.61 L1432.87 1206.61 L1432.29 1206.61 L1431.7 1206.61 L1431.11 1206.61 L1430.53 1206.61 L1429.94 1206.61 L1429.35 1206.61 L1428.77 1206.61 L1428.18 1206.61 L1427.59 1206.61 L1427.01 1206.61 L1426.42 1206.61 L1425.83 1206.61 L1425.25 1206.61 L1424.66 1206.61 L1424.08 1206.61 L1423.49 1206.61 L1422.9 1206.61 L1422.32 1206.61 L1421.73 1206.61 L1421.14 1206.61 L1420.56 1206.61 L1419.97 1206.61 L1419.38 1206.61 L1418.8 1206.61 L1418.21 1206.61 L1417.63 1206.61 L1417.04 1206.61 L1416.45 1206.61 L1415.87 1206.61 L1415.28 1206.61 L1414.69 1206.61 L1414.11 1206.61 L1413.52 1206.61 L1412.93 1206.61 L1412.35 1206.61 L1411.76 1206.61 L1411.17 1206.61 L1410.59 1206.61 L1410 1206.61 L1409.42 1206.61 L1408.83 1206.61 L1408.24 1206.61 L1407.66 1206.61 L1407.07 1206.61 L1406.48 1206.61 L1405.9 1206.61 L1405.31 1206.61 L1404.72 1206.61 L1404.14 1206.61 L1403.55 1206.61 L1402.96 1206.61 L1402.38 1206.61 L1401.79 1206.61 L1401.21 1206.61 L1400.62 1206.61 L1400.03 1206.61 L1399.45 1206.61 L1398.86 1206.61 L1398.27 1206.61 L1397.69 1206.61 L1397.1 1206.61 L1396.51 1206.61 L1395.93 1206.61 L1395.34 1206.61 L1394.75 1206.61 L1394.17 1206.61 L1393.58 1206.61 L1393 1206.61 L1392.41 1206.61 L1391.82 1206.61 L1391.24 1206.61 L1390.65 1206.61 L1390.06 1206.61 L1389.48 1206.61 L1388.89 1206.61 L1388.3 1206.61 L1387.72 1206.61 L1387.13 1206.61 L1386.55 1206.61 L1385.96 1206.61 L1385.37 1206.61 L1384.79 1206.61 L1384.2 1206.61 L1383.61 1206.61 L1383.03 1206.61 L1382.44 1206.61 L1381.85 1206.61 L1381.27 1206.61 L1380.68 1206.61 L1380.09 1206.61 L1379.51 1206.61 L1378.92 1206.61 L1378.34 1206.61 L1377.75 1206.61 L1377.16 1206.61 L1376.58 1206.61 L1375.99 1206.61 L1375.4 1206.61 L1374.82 1206.61 L1374.23 1206.61 L1373.64 1206.61 L1373.06 1206.61 L1372.47 1206.61 L1371.88 1206.61 L1371.3 1206.61 L1370.71 1206.61 L1370.13 1206.61 L1369.54 1206.61 L1368.95 1206.61 L1368.37 1206.61 L1367.78 1206.61 L1367.19 1206.61 L1366.61 1206.61 L1366.02 1206.61 L1365.43 1206.61 L1364.85 1206.61 L1364.26 1206.61 L1363.68 1206.61 L1363.09 1206.61 L1362.5 1206.61 L1361.92 1206.61 L1361.33 1206.61 L1360.74 1206.61 L1360.16 1206.61 L1359.57 1206.61 L1358.98 1206.61 L1358.4 1206.61 L1357.81 1206.61 L1357.22 1206.61 L1356.64 1206.61 L1356.05 1206.61 L1355.47 1206.61 L1354.88 1206.61 L1354.29 1206.61 L1353.71 1206.61 L1353.12 1206.61 L1352.53 1206.61 L1351.95 1206.61 L1351.36 1206.61 L1350.77 1206.61 L1350.19 1206.61 L1349.6 1206.61 L1349.01 1206.61 L1348.43 1206.61 L1347.84 1206.61 L1347.26 1206.61 L1346.67 1206.61 L1346.08 1206.61 L1345.5 1206.61 L1344.91 1206.61 L1344.32 1206.61 L1343.74 1206.61 L1343.15 1206.61 L1342.56 1206.61 L1341.98 1206.61 L1341.39 1206.61 L1340.8 1206.61 L1340.22 1206.61 L1339.63 1206.61 L1339.05 1206.61 L1338.46 1206.61 L1337.87 1206.61 L1337.29 1206.61 L1336.7 1206.61 L1336.11 1206.61 L1335.53 1206.61 L1334.94 1206.61 L1334.35 1206.61 L1333.77 1206.61 L1333.18 1206.61 L1332.6 1206.61 L1332.01 1206.61 L1331.42 1206.61 L1330.84 1206.61 L1330.25 1206.61 L1329.66 1206.61 L1329.08 1206.61 L1328.49 1206.61 L1327.9 1206.61 L1327.32 1206.61 L1326.73 1206.61 L1326.14 1206.61 L1325.56 1206.61 L1324.97 1206.61 L1324.39 1206.61 L1323.8 1206.61 L1323.21 1206.61 L1322.63 1206.61 L1322.04 1206.61 L1321.45 1206.61 L1320.87 1206.61 L1320.28 1206.61 L1319.69 1206.61 L1319.11 1206.61 L1318.52 1206.61 L1317.93 1206.61 L1317.35 1206.61 L1316.76 1206.61 L1316.18 1206.61 L1315.59 1206.61 L1315 1206.61 L1314.42 1206.61 L1313.83 1206.61 L1313.24 1206.61 L1312.66 1206.61 L1312.07 1206.61 L1311.48 1206.61 L1310.9 1206.61 L1310.31 1206.61 L1309.73 1206.61 L1309.14 1206.61 L1308.55 1206.61 L1307.97 1206.61 L1307.38 1206.61 L1306.79 1206.61 L1306.21 1206.61 L1305.62 1206.61 L1305.03 1206.61 L1304.45 1206.61 L1303.86 1206.61 L1303.27 1206.61 L1302.69 1206.61 L1302.1 1206.61 L1301.52 1206.61 L1300.93 1206.61 L1300.34 1206.61 L1299.76 1206.61 L1299.17 1206.61 L1298.58 1206.61 L1298 1206.61 L1297.41 1206.61 L1296.82 1206.61 L1296.24 1206.61 L1295.65 1206.61 L1295.06 1206.61 L1294.48 1206.61 L1293.89 1206.61 L1293.31 1206.61 L1292.72 1206.61 L1292.13 1206.61 L1291.55 1206.61 L1290.96 1206.61 L1290.37 1206.61 L1289.79 1206.61 L1289.2 1206.61 L1288.61 1206.61 L1288.03 1206.61 L1287.44 1206.61 L1286.86 1206.61 L1286.27 1206.61 L1285.68 1206.61 L1285.1 1206.61 L1284.51 1206.61 L1283.92 1206.61 L1283.34 1206.61 L1282.75 1206.61 L1282.16 1206.61 L1281.58 1206.61 L1280.99 1206.61 L1280.4 1206.61 L1279.82 1206.61 L1279.23 1206.61 L1278.65 1206.61 L1278.06 1206.61 L1277.47 1206.61 L1276.89 1206.61 L1276.3 1206.61 L1275.71 1206.61 L1275.13 1206.61 L1274.54 1206.61 L1273.95 1206.61 L1273.37 1206.61 L1272.78 1206.61 L1272.19 1206.61 L1271.61 1206.61 L1271.02 1206.61 L1270.44 1206.61 L1269.85 1206.61 L1269.26 1206.61 L1268.68 1206.61 L1268.09 1206.61 L1267.5 1206.61 L1266.92 1206.61 L1266.33 1206.61 L1265.74 1206.61 L1265.16 1206.61 L1264.57 1206.61 L1263.98 1206.61 L1263.4 1206.61 L1262.81 1206.61 L1262.23 1206.61 L1261.64 1206.61 L1261.05 1206.61 L1260.47 1206.61 L1259.88 1206.61 L1259.29 1206.61 L1258.71 1206.61 L1258.12 1206.61 L1257.53 1206.61 L1256.95 1206.61 L1256.36 1206.61 L1255.78 1206.61 L1255.19 1206.61 L1254.6 1206.61 L1254.02 1206.61 L1253.43 1206.61 L1252.84 1206.61 L1252.26 1206.61 L1251.67 1206.61 L1251.08 1206.61 L1250.5 1206.61 L1249.91 1206.61 L1249.32 1206.61 L1248.74 1206.61 L1248.15 1206.61 L1247.57 1206.61 L1246.98 1206.61 L1246.39 1206.61 L1245.81 1206.61 L1245.22 1206.61 L1244.63 1206.61 L1244.05 1206.61 L1243.46 1206.61 L1242.87 1206.61 L1242.29 1206.61 L1241.7 1206.61 L1241.11 1206.61 L1240.53 1206.61 L1239.94 1206.61 L1239.36 1206.61 L1238.77 1206.61 L1238.18 1206.61 L1237.6 1206.61 L1237.01 1206.61 L1236.42 1206.61 L1235.84 1206.61 L1235.25 1206.61 L1234.66 1206.61 L1234.08 1206.61 L1233.49 1206.61 L1232.91 1206.61 L1232.32 1206.61 L1231.73 1206.61 L1231.15 1206.61 L1230.56 1206.61 L1229.97 1206.61 L1229.39 1206.61 L1228.8 1206.61 L1228.21 1206.61 L1227.63 1206.61 L1227.04 1206.61 L1226.45 1206.61 L1225.87 1206.61 L1225.28 1206.61 L1224.7 1206.61 L1224.11 1206.61 L1223.52 1206.61 L1222.94 1206.61 L1222.35 1206.61 L1221.76 1206.61 L1221.18 1206.61 L1220.59 1206.61 L1220 1206.61 L1219.42 1206.61 L1218.83 1206.61 L1218.24 1206.61 L1217.66 1206.61 L1217.07 1206.61 L1216.49 1206.61 L1215.9 1206.61 L1215.31 1206.61 L1214.73 1206.61 L1214.14 1206.61 L1213.55 1206.61 L1212.97 1206.61 L1212.38 1206.61 L1211.79 1206.61 L1211.21 1206.61 L1210.62 1206.61 L1210.03 1206.61 L1209.45 1206.61 L1208.86 1206.61 L1208.28 1206.61 L1207.69 1206.61 L1207.1 1206.61 L1206.52 1206.61 L1205.93 1206.61 L1205.34 1206.61 L1204.76 1206.61 L1204.17 1206.61 L1203.58 1206.61 L1203 1206.61 L1202.41 1206.61 L1201.83 1206.61 L1201.24 1206.61 L1200.65 1206.61 L1200.07 1206.61 L1199.48 1206.61 L1198.89 1206.61 L1198.31 1206.61 L1197.72 1206.61 L1197.13 1206.61 L1196.55 1206.61 L1195.96 1206.61 L1195.37 1206.61 L1194.79 1206.61 L1194.2 1206.61 L1193.62 1206.61 L1193.03 1206.61 L1192.44 1206.61 L1191.86 1206.61 L1191.27 1206.61 L1190.68 1206.61 L1190.1 1206.61 L1189.51 1206.61 L1188.92 1206.61 L1188.34 1206.61 L1187.75 1206.61 L1187.16 1206.61 L1186.58 1206.61 L1185.99 1206.61 L1185.41 1206.61 L1184.82 1206.61 L1184.23 1206.61 L1183.65 1206.61 L1183.06 1206.61 L1182.47 1206.61 L1181.89 1206.61 L1181.3 1206.61 L1180.71 1206.61 L1180.13 1206.61 L1179.54 1206.61 L1178.96 1206.61 L1178.37 1206.61 L1177.78 1206.61 L1177.2 1206.61 L1176.61 1206.61 L1176.02 1206.61 L1175.44 1206.61 L1174.85 1206.61 L1174.26 1206.61 L1173.68 1206.61 L1173.09 1206.61 L1172.5 1206.61 L1171.92 1206.61 L1171.33 1206.61 L1170.75 1206.61 L1170.16 1206.61 L1169.57 1206.61 L1168.99 1206.61 L1168.4 1206.61 L1167.81 1206.61 L1167.23 1206.61 L1166.64 1206.61 L1166.05 1206.61 L1165.47 1206.61 L1164.88 1206.61 L1164.29 1206.61 L1163.71 1206.61 L1163.12 1206.61 L1162.54 1206.61 L1161.95 1206.61 L1161.36 1206.61 L1160.78 1206.61 L1160.19 1206.61 L1159.6 1206.61 L1159.02 1206.61 L1158.43 1206.61 L1157.84 1206.61 L1157.26 1206.61 L1156.67 1206.61 L1156.09 1206.61 L1155.5 1206.61 L1154.91 1206.61 L1154.33 1206.61 L1153.74 1206.61 L1153.15 1206.61 L1152.57 1206.61 L1151.98 1206.61 L1151.39 1206.61 L1150.81 1206.61 L1150.22 1206.61 L1149.63 1206.61 L1149.05 1206.61 L1148.46 1206.61 L1147.88 1206.61 L1147.29 1206.61 L1146.7 1206.61 L1146.12 1206.61 L1145.53 1206.61 L1144.94 1206.61 L1144.36 1206.61 L1143.77 1206.61 L1143.18 1206.61 L1142.6 1206.61 L1142.01 1206.61 L1141.42 1206.61 L1140.84 1206.61 L1140.25 1206.61 L1139.67 1206.61 L1139.08 1206.61 L1138.49 1206.61 L1137.91 1206.61 L1137.32 1206.61 L1136.73 1206.61 L1136.15 1206.61 L1135.56 1206.61 L1134.97 1206.61 L1134.39 1206.61 L1133.8 1206.61 L1133.21 1206.61 L1132.63 1206.61 L1132.04 1206.61 L1131.46 1206.61 L1130.87 1206.61 L1130.28 1206.61 L1129.7 1206.61 L1129.11 1206.61 L1128.52 1206.61 L1127.94 1206.61 L1127.35 1206.61 L1126.76 1206.61 L1126.18 1206.61 L1125.59 1206.61 L1125.01 1206.61 L1124.42 1206.61 L1123.83 1206.61 L1123.25 1206.61 L1122.66 1206.61 L1122.07 1206.61 L1121.49 1206.61 L1120.9 1206.61 L1120.31 1206.61 L1119.73 1206.61 L1119.14 1206.61 L1118.55 1206.61 L1117.97 1206.61 L1117.38 1206.61 L1116.8 1206.61 L1116.21 1206.61 L1115.62 1206.61 L1115.04 1206.61 L1114.45 1206.61 L1113.86 1206.61 L1113.28 1206.61 L1112.69 1206.61 L1112.1 1206.61 L1111.52 1206.61 L1110.93 1206.61 L1110.34 1206.61 L1109.76 1206.61 L1109.17 1206.61 L1108.59 1206.61 L1108 1206.61 L1107.41 1206.61 L1106.83 1206.61 L1106.24 1206.61 L1105.65 1206.61 L1105.07 1206.61 L1104.48 1206.61 L1103.89 1206.61 L1103.31 1206.61 L1102.72 1206.61 L1102.14 1206.61 L1101.55 1206.61 L1100.96 1206.61 L1100.38 1206.61 L1099.79 1206.61 L1099.2 1206.61 L1098.62 1206.61 L1098.03 1206.61 L1097.44 1206.61 L1096.86 1206.61 L1096.27 1206.61 L1095.68 1206.61 L1095.1 1206.61 L1094.51 1206.61 L1093.93 1206.61 L1093.34 1206.61 L1092.75 1206.61 L1092.17 1206.61 L1091.58 1206.61 L1090.99 1206.61 L1090.41 1206.61 L1089.82 1206.61 L1089.23 1206.61 L1088.65 1206.61 L1088.06 1206.61 L1087.47 1206.61 L1086.89 1206.61 L1086.3 1206.61 L1085.72 1206.61 L1085.13 1206.61 L1084.54 1206.61 L1083.96 1206.61 L1083.37 1206.61 L1082.78 1206.61 L1082.2 1206.61 L1081.61 1206.61 L1081.02 1206.61 L1080.44 1206.61 L1079.85 1206.61 L1079.26 1206.61 L1078.68 1206.61 L1078.09 1206.61 L1077.51 1206.61 L1076.92 1206.61 L1076.33 1206.61 L1075.75 1206.61 L1075.16 1206.61 L1074.57 1206.61 L1073.99 1206.61 L1073.4 1206.61 L1072.81 1206.61 L1072.23 1206.61 L1071.64 1206.61 L1071.06 1206.61 L1070.47 1206.61 L1069.88 1206.61 L1069.3 1206.61 L1068.71 1206.61 L1068.12 1206.61 L1067.54 1206.61 L1066.95 1206.61 L1066.36 1206.61 L1065.78 1206.61 L1065.19 1206.61 L1064.6 1206.61 L1064.02 1206.61 L1063.43 1206.61 L1062.85 1206.61 L1062.26 1206.61 L1061.67 1206.61 L1061.09 1206.61 L1060.5 1206.61 L1059.91 1206.61 L1059.33 1206.61 L1058.74 1206.61 L1058.15 1206.61 L1057.57 1206.61 L1056.98 1206.61 L1056.39 1206.61 L1055.81 1206.61 L1055.22 1206.61 L1054.64 1206.61 L1054.05 1206.61 L1053.46 1206.61 L1052.88 1206.61 L1052.29 1206.61 L1051.7 1206.61 L1051.12 1206.61 L1050.53 1206.61 L1049.94 1206.61 L1049.36 1206.61 L1048.77 1206.61 L1048.19 1206.61 L1047.6 1206.61 L1047.01 1206.61 L1046.43 1206.61 L1045.84 1206.61 L1045.25 1206.61 L1044.67 1206.61 L1044.08 1206.61 L1043.49 1206.61 L1042.91 1206.61 L1042.32 1206.61 L1041.73 1206.61 L1041.15 1206.61 L1040.56 1206.61 L1039.98 1206.61 L1039.39 1206.61 L1038.8 1206.61 L1038.22 1206.61 L1037.63 1206.61 L1037.04 1206.61 L1036.46 1206.61 L1035.87 1206.61 L1035.28 1206.61 L1034.7 1206.61 L1034.11 1206.61 L1033.52 1206.61 L1032.94 1206.61 L1032.35 1206.61 L1031.77 1206.61 L1031.18 1206.61 L1030.59 1206.61 L1030.01 1206.61 L1029.42 1206.61 L1028.83 1206.61 L1028.25 1206.61 L1027.66 1206.61 L1027.07 1206.61 L1026.49 1206.61 L1025.9 1206.61 L1025.32 1206.61 L1024.73 1206.61 L1024.14 1206.61 L1023.56 1206.61 L1022.97 1206.61 L1022.38 1206.61 L1021.8 1206.61 L1021.21 1206.61 L1020.62 1206.61 L1020.04 1206.61 L1019.45 1206.61 L1018.86 1206.61 L1018.28 1206.61 L1017.69 1206.61 L1017.11 1206.61 L1016.52 1206.61 L1015.93 1206.61 L1015.35 1206.61 L1014.76 1206.61 L1014.17 1206.61 L1013.59 1206.61 L1013 1206.61 L1012.41 1206.61 L1011.83 1206.61 L1011.24 1206.61 L1010.65 1206.61 L1010.07 1206.61 L1009.48 1206.61 L1008.9 1206.61 L1008.31 1206.61 L1007.72 1206.61 L1007.14 1206.61 L1006.55 1206.61 L1005.96 1206.61 L1005.38 1206.61 L1004.79 1206.61 L1004.2 1206.61 L1003.62 1206.61 L1003.03 1206.61 L1002.44 1206.61 L1001.86 1206.61 L1001.27 1206.61 L1000.69 1206.61 L1000.1 1206.61 L999.513 1206.61 L998.926 1206.61 L998.34 1206.61 L997.754 1206.61 L997.167 1206.61 L996.581 1206.61 L995.994 1206.61 L995.408 1206.61 L994.822 1206.61 L994.235 1206.61 L993.649 1206.61 L993.062 1206.61 L992.476 1206.61 L991.889 1206.61 L991.303 1206.61 L990.717 1206.61 L990.13 1206.61 L989.544 1206.61 L988.957 1206.61 L988.371 1206.61 L987.785 1206.61 L987.198 1206.61 L986.612 1206.61 L986.025 1206.61  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1206.7 986.612,1206.7 987.198,1206.7 987.785,1206.7 988.371,1206.7 988.957,1206.7 989.544,1206.7 990.13,1206.7 990.717,1206.7 991.303,1206.7 991.889,1206.7 992.476,1206.7 993.062,1206.7 993.649,1206.7 994.235,1206.7 994.822,1206.7 995.408,1206.7 995.994,1206.7 996.581,1206.7 997.167,1206.7 997.754,1206.7 998.34,1206.7 998.926,1206.7 999.513,1206.7 1000.1,1206.7 1000.69,1206.7 1001.27,1206.7 1001.86,1206.7 1002.44,1206.7 1003.03,1206.7 1003.62,1206.7 1004.2,1206.7 1004.79,1206.7 1005.38,1206.7 1005.96,1206.7 1006.55,1206.7 1007.14,1206.7 1007.72,1206.7 1008.31,1206.7 1008.9,1206.7 1009.48,1206.7 1010.07,1206.7 1010.65,1206.7 1011.24,1206.7 1011.83,1206.7 1012.41,1206.7 1013,1206.7 1013.59,1206.7 1014.17,1206.7 1014.76,1206.7 1015.35,1206.7 1015.93,1206.7 1016.52,1206.7 1017.11,1206.7 1017.69,1206.7 1018.28,1206.7 1018.86,1206.7 1019.45,1206.7 1020.04,1206.7 1020.62,1206.7 1021.21,1206.7 1021.8,1206.7 1022.38,1206.7 1022.97,1206.7 1023.56,1206.7 1024.14,1206.7 1024.73,1206.7 1025.32,1206.7 1025.9,1206.7 1026.49,1206.7 1027.07,1206.7 1027.66,1206.7 1028.25,1206.7 1028.83,1206.7 1029.42,1206.7 1030.01,1206.7 1030.59,1206.7 1031.18,1206.7 1031.77,1206.7 1032.35,1206.7 1032.94,1206.7 1033.52,1206.7 1034.11,1206.7 1034.7,1206.7 1035.28,1206.7 1035.87,1206.7 1036.46,1206.7 1037.04,1206.7 1037.63,1206.7 1038.22,1206.7 1038.8,1206.7 1039.39,1206.7 1039.98,1206.7 1040.56,1206.7 1041.15,1206.7 1041.73,1206.7 1042.32,1206.7 1042.91,1206.7 1043.49,1206.7 1044.08,1206.7 1044.67,1206.7 1045.25,1206.7 1045.84,1206.7 1046.43,1206.7 1047.01,1206.7 1047.6,1206.7 1048.19,1206.7 1048.77,1206.7 1049.36,1206.7 1049.94,1206.7 1050.53,1206.7 1051.12,1206.7 1051.7,1206.7 1052.29,1206.7 1052.88,1206.7 1053.46,1206.7 1054.05,1206.7 1054.64,1206.7 1055.22,1206.7 1055.81,1206.7 1056.39,1206.7 1056.98,1206.7 1057.57,1206.7 1058.15,1206.7 1058.74,1206.7 1059.33,1206.7 1059.91,1206.7 1060.5,1206.7 1061.09,1206.7 1061.67,1206.7 1062.26,1206.7 1062.85,1206.7 1063.43,1206.7 1064.02,1206.7 1064.6,1206.7 1065.19,1206.7 1065.78,1206.7 1066.36,1206.7 1066.95,1206.7 1067.54,1206.7 1068.12,1206.7 1068.71,1206.7 1069.3,1206.7 1069.88,1206.7 1070.47,1206.7 1071.06,1206.7 1071.64,1206.7 1072.23,1206.7 1072.81,1206.7 1073.4,1206.7 1073.99,1206.7 1074.57,1206.7 1075.16,1206.7 1075.75,1206.7 1076.33,1206.7 1076.92,1206.7 1077.51,1206.7 1078.09,1206.7 1078.68,1206.7 1079.26,1206.7 1079.85,1206.7 1080.44,1206.7 1081.02,1206.7 1081.61,1206.7 1082.2,1206.7 1082.78,1206.7 1083.37,1206.7 1083.96,1206.7 1084.54,1206.7 1085.13,1206.7 1085.72,1206.7 1086.3,1206.7 1086.89,1206.7 1087.47,1206.7 1088.06,1206.7 1088.65,1206.7 1089.23,1206.7 1089.82,1206.7 1090.41,1206.7 1090.99,1206.7 1091.58,1206.7 1092.17,1206.7 1092.75,1206.7 1093.34,1206.7 1093.93,1206.7 1094.51,1206.7 1095.1,1206.7 1095.68,1206.7 1096.27,1206.7 1096.86,1206.7 1097.44,1206.7 1098.03,1206.7 1098.62,1206.7 1099.2,1206.7 1099.79,1206.7 1100.38,1206.7 1100.96,1206.7 1101.55,1206.7 1102.14,1206.7 1102.72,1206.7 1103.31,1206.7 1103.89,1206.7 1104.48,1206.7 1105.07,1206.7 1105.65,1206.7 1106.24,1206.7 1106.83,1206.7 1107.41,1206.7 1108,1206.7 1108.59,1206.7 1109.17,1206.7 1109.76,1206.7 1110.34,1206.7 1110.93,1206.7 1111.52,1206.7 1112.1,1206.7 1112.69,1206.7 1113.28,1206.7 1113.86,1206.7 1114.45,1206.7 1115.04,1206.7 1115.62,1206.7 1116.21,1206.7 1116.8,1206.7 1117.38,1206.7 1117.97,1206.7 1118.55,1206.7 1119.14,1206.7 1119.73,1206.7 1120.31,1206.7 1120.9,1206.7 1121.49,1206.7 1122.07,1206.7 1122.66,1206.7 1123.25,1206.7 1123.83,1206.7 1124.42,1206.7 1125.01,1206.7 1125.59,1206.7 1126.18,1206.7 1126.76,1206.7 1127.35,1206.7 1127.94,1206.7 1128.52,1206.7 1129.11,1206.7 1129.7,1206.7 1130.28,1206.7 1130.87,1206.7 1131.46,1206.7 1132.04,1206.7 1132.63,1206.7 1133.21,1206.7 1133.8,1206.7 1134.39,1206.7 1134.97,1206.7 1135.56,1206.7 1136.15,1206.7 1136.73,1206.7 1137.32,1206.7 1137.91,1206.7 1138.49,1206.7 1139.08,1206.7 1139.67,1206.7 1140.25,1206.7 1140.84,1206.7 1141.42,1206.7 1142.01,1206.7 1142.6,1206.7 1143.18,1206.7 1143.77,1206.7 1144.36,1206.7 1144.94,1206.7 1145.53,1206.7 1146.12,1206.7 1146.7,1206.7 1147.29,1206.7 1147.88,1206.7 1148.46,1206.7 1149.05,1206.7 1149.63,1206.7 1150.22,1206.7 1150.81,1206.7 1151.39,1206.7 1151.98,1206.7 1152.57,1206.7 1153.15,1206.7 1153.74,1206.7 1154.33,1206.7 1154.91,1206.7 1155.5,1206.7 1156.09,1206.7 1156.67,1206.7 1157.26,1206.7 1157.84,1206.7 1158.43,1206.7 1159.02,1206.7 1159.6,1206.7 1160.19,1206.7 1160.78,1206.7 1161.36,1206.7 1161.95,1206.7 1162.54,1206.7 1163.12,1206.7 1163.71,1206.7 1164.29,1206.7 1164.88,1206.7 1165.47,1206.7 1166.05,1206.7 1166.64,1206.7 1167.23,1206.7 1167.81,1206.7 1168.4,1206.7 1168.99,1206.7 1169.57,1206.7 1170.16,1206.7 1170.75,1206.7 1171.33,1206.7 1171.92,1206.7 1172.5,1206.7 1173.09,1206.7 1173.68,1206.7 1174.26,1206.7 1174.85,1206.7 1175.44,1206.7 1176.02,1206.7 1176.61,1206.7 1177.2,1206.7 1177.78,1206.7 1178.37,1206.7 1178.96,1206.7 1179.54,1206.7 1180.13,1206.7 1180.71,1206.7 1181.3,1206.7 1181.89,1206.7 1182.47,1206.7 1183.06,1206.7 1183.65,1206.7 1184.23,1206.7 1184.82,1206.7 1185.41,1206.7 1185.99,1206.7 1186.58,1206.7 1187.16,1206.7 1187.75,1206.7 1188.34,1206.7 1188.92,1206.7 1189.51,1206.7 1190.1,1206.7 1190.68,1206.7 1191.27,1206.7 1191.86,1206.7 1192.44,1206.7 1193.03,1206.7 1193.62,1206.7 1194.2,1206.7 1194.79,1206.7 1195.37,1206.7 1195.96,1206.7 1196.55,1206.7 1197.13,1206.7 1197.72,1206.7 1198.31,1206.7 1198.89,1206.7 1199.48,1206.7 1200.07,1206.7 1200.65,1206.7 1201.24,1206.7 1201.83,1206.7 1202.41,1206.7 1203,1206.7 1203.58,1206.7 1204.17,1206.7 1204.76,1206.7 1205.34,1206.7 1205.93,1206.7 1206.52,1206.7 1207.1,1206.7 1207.69,1206.7 1208.28,1206.7 1208.86,1206.7 1209.45,1206.7 1210.03,1206.7 1210.62,1206.7 1211.21,1206.7 1211.79,1206.7 1212.38,1206.7 1212.97,1206.7 1213.55,1206.7 1214.14,1206.7 1214.73,1206.7 1215.31,1206.7 1215.9,1206.7 1216.49,1206.7 1217.07,1206.7 1217.66,1206.7 1218.24,1206.7 1218.83,1206.7 1219.42,1206.7 1220,1206.7 1220.59,1206.7 1221.18,1206.7 1221.76,1206.7 1222.35,1206.7 1222.94,1206.7 1223.52,1206.7 1224.11,1206.7 1224.7,1206.7 1225.28,1206.7 1225.87,1206.7 1226.45,1206.7 1227.04,1206.7 1227.63,1206.7 1228.21,1206.7 1228.8,1206.7 1229.39,1206.7 1229.97,1206.7 1230.56,1206.7 1231.15,1206.7 1231.73,1206.7 1232.32,1206.7 1232.91,1206.7 1233.49,1206.7 1234.08,1206.7 1234.66,1206.7 1235.25,1206.7 1235.84,1206.7 1236.42,1206.7 1237.01,1206.7 1237.6,1206.7 1238.18,1206.7 1238.77,1206.7 1239.36,1206.7 1239.94,1206.7 1240.53,1206.7 1241.11,1206.7 1241.7,1206.7 1242.29,1206.7 1242.87,1206.7 1243.46,1206.7 1244.05,1206.7 1244.63,1206.7 1245.22,1206.7 1245.81,1206.7 1246.39,1206.7 1246.98,1206.7 1247.57,1206.7 1248.15,1206.7 1248.74,1206.7 1249.32,1206.7 1249.91,1206.7 1250.5,1206.7 1251.08,1206.7 1251.67,1206.7 1252.26,1206.7 1252.84,1206.7 1253.43,1206.7 1254.02,1206.7 1254.6,1206.7 1255.19,1206.7 1255.78,1206.7 1256.36,1206.7 1256.95,1206.7 1257.53,1206.7 1258.12,1206.7 1258.71,1206.7 1259.29,1206.7 1259.88,1206.7 1260.47,1206.7 1261.05,1206.7 1261.64,1206.7 1262.23,1206.7 1262.81,1206.7 1263.4,1206.7 1263.98,1206.7 1264.57,1206.7 1265.16,1206.7 1265.74,1206.7 1266.33,1206.7 1266.92,1206.7 1267.5,1206.7 1268.09,1206.7 1268.68,1206.7 1269.26,1206.7 1269.85,1206.7 1270.44,1206.7 1271.02,1206.7 1271.61,1206.7 1272.19,1206.7 1272.78,1206.7 1273.37,1206.7 1273.95,1206.7 1274.54,1206.7 1275.13,1206.7 1275.71,1206.7 1276.3,1206.7 1276.89,1206.7 1277.47,1206.7 1278.06,1206.7 1278.65,1206.7 1279.23,1206.7 1279.82,1206.7 1280.4,1206.7 1280.99,1206.7 1281.58,1206.7 1282.16,1206.7 1282.75,1206.7 1283.34,1206.7 1283.92,1206.7 1284.51,1206.7 1285.1,1206.7 1285.68,1206.7 1286.27,1206.7 1286.86,1206.7 1287.44,1206.7 1288.03,1206.7 1288.61,1206.7 1289.2,1206.7 1289.79,1206.7 1290.37,1206.7 1290.96,1206.7 1291.55,1206.7 1292.13,1206.7 1292.72,1206.7 1293.31,1206.7 1293.89,1206.7 1294.48,1206.7 1295.06,1206.7 1295.65,1206.7 1296.24,1206.7 1296.82,1206.7 1297.41,1206.7 1298,1206.7 1298.58,1206.7 1299.17,1206.7 1299.76,1206.7 1300.34,1206.7 1300.93,1206.7 1301.52,1206.7 1302.1,1206.7 1302.69,1206.7 1303.27,1206.7 1303.86,1206.7 1304.45,1206.7 1305.03,1206.7 1305.62,1206.7 1306.21,1206.7 1306.79,1206.7 1307.38,1206.7 1307.97,1206.7 1308.55,1206.7 1309.14,1206.7 1309.73,1206.7 1310.31,1206.7 1310.9,1206.7 1311.48,1206.7 1312.07,1206.7 1312.66,1206.7 1313.24,1206.7 1313.83,1206.7 1314.42,1206.7 1315,1206.7 1315.59,1206.7 1316.18,1206.7 1316.76,1206.7 1317.35,1206.7 1317.93,1206.7 1318.52,1206.7 1319.11,1206.7 1319.69,1206.7 1320.28,1206.7 1320.87,1206.7 1321.45,1206.7 1322.04,1206.7 1322.63,1206.7 1323.21,1206.7 1323.8,1206.7 1324.39,1206.7 1324.97,1206.7 1325.56,1206.7 1326.14,1206.7 1326.73,1206.7 1327.32,1206.7 1327.9,1206.7 1328.49,1206.7 1329.08,1206.7 1329.66,1206.7 1330.25,1206.7 1330.84,1206.7 1331.42,1206.7 1332.01,1206.7 1332.6,1206.7 1333.18,1206.7 1333.77,1206.7 1334.35,1206.7 1334.94,1206.7 1335.53,1206.7 1336.11,1206.7 1336.7,1206.7 1337.29,1206.7 1337.87,1206.7 1338.46,1206.7 1339.05,1206.7 1339.63,1206.7 1340.22,1206.7 1340.8,1206.7 1341.39,1206.7 1341.98,1206.7 1342.56,1206.7 1343.15,1206.7 1343.74,1206.7 1344.32,1206.7 1344.91,1206.7 1345.5,1206.7 1346.08,1206.7 1346.67,1206.7 1347.26,1206.7 1347.84,1206.7 1348.43,1206.7 1349.01,1206.7 1349.6,1206.7 1350.19,1206.7 1350.77,1206.7 1351.36,1206.7 1351.95,1206.7 1352.53,1206.7 1353.12,1206.7 1353.71,1206.7 1354.29,1206.7 1354.88,1206.7 1355.47,1206.7 1356.05,1206.7 1356.64,1206.7 1357.22,1206.7 1357.81,1206.7 1358.4,1206.7 1358.98,1206.7 1359.57,1206.7 1360.16,1206.7 1360.74,1206.7 1361.33,1206.7 1361.92,1206.7 1362.5,1206.7 1363.09,1206.7 1363.68,1206.7 1364.26,1206.7 1364.85,1206.7 1365.43,1206.7 1366.02,1206.7 1366.61,1206.7 1367.19,1206.7 1367.78,1206.7 1368.37,1206.7 1368.95,1206.7 1369.54,1206.7 1370.13,1206.7 1370.71,1206.7 1371.3,1206.7 1371.88,1206.7 1372.47,1206.7 1373.06,1206.7 1373.64,1206.7 1374.23,1206.7 1374.82,1206.7 1375.4,1206.7 1375.99,1206.7 1376.58,1206.7 1377.16,1206.7 1377.75,1206.7 1378.34,1206.7 1378.92,1206.7 1379.51,1206.7 1380.09,1206.7 1380.68,1206.7 1381.27,1206.7 1381.85,1206.7 1382.44,1206.7 1383.03,1206.7 1383.61,1206.7 1384.2,1206.7 1384.79,1206.7 1385.37,1206.7 1385.96,1206.7 1386.55,1206.7 1387.13,1206.7 1387.72,1206.7 1388.3,1206.7 1388.89,1206.7 1389.48,1206.7 1390.06,1206.7 1390.65,1206.7 1391.24,1206.7 1391.82,1206.7 1392.41,1206.7 1393,1206.7 1393.58,1206.7 1394.17,1206.7 1394.75,1206.7 1395.34,1206.7 1395.93,1206.7 1396.51,1206.7 1397.1,1206.7 1397.69,1206.7 1398.27,1206.7 1398.86,1206.7 1399.45,1206.7 1400.03,1206.7 1400.62,1206.7 1401.21,1206.7 1401.79,1206.7 1402.38,1206.7 1402.96,1206.7 1403.55,1206.7 1404.14,1206.7 1404.72,1206.7 1405.31,1206.7 1405.9,1206.7 1406.48,1206.7 1407.07,1206.7 1407.66,1206.7 1408.24,1206.7 1408.83,1206.7 1409.42,1206.7 1410,1206.7 1410.59,1206.7 1411.17,1206.7 1411.76,1206.7 1412.35,1206.7 1412.93,1206.7 1413.52,1206.7 1414.11,1206.7 1414.69,1206.7 1415.28,1206.7 1415.87,1206.7 1416.45,1206.7 1417.04,1206.7 1417.63,1206.7 1418.21,1206.7 1418.8,1206.7 1419.38,1206.7 1419.97,1206.7 1420.56,1206.7 1421.14,1206.7 1421.73,1206.7 1422.32,1206.7 1422.9,1206.7 1423.49,1206.7 1424.08,1206.7 1424.66,1206.7 1425.25,1206.7 1425.83,1206.7 1426.42,1206.7 1427.01,1206.7 1427.59,1206.7 1428.18,1206.7 1428.77,1206.7 1429.35,1206.7 1429.94,1206.7 1430.53,1206.7 1431.11,1206.7 1431.7,1206.7 1432.29,1206.7 1432.87,1206.7 1433.46,1206.7 1434.04,1206.7 1434.63,1206.7 1435.22,1206.7 1435.8,1206.7 1436.39,1206.7 1436.98,1206.7 1437.56,1206.7 1438.15,1206.7 1438.74,1206.7 1439.32,1206.7 1439.91,1206.7 1440.5,1206.7 1441.08,1206.7 1441.67,1206.7 1442.25,1206.7 1442.84,1206.7 1443.43,1206.7 1444.01,1206.7 1444.6,1206.7 1445.19,1206.7 1445.77,1206.7 1446.36,1206.7 1446.95,1206.7 1447.53,1206.7 1448.12,1206.7 1448.7,1206.7 1449.29,1206.7 1449.88,1206.7 1450.46,1206.7 1451.05,1206.7 1451.64,1206.7 1452.22,1206.7 1452.81,1206.7 1453.4,1206.7 1453.98,1206.7 1454.57,1206.7 1455.16,1206.7 1455.74,1206.7 1456.33,1206.7 1456.91,1206.7 1457.5,1206.7 1458.09,1206.7 1458.67,1206.7 1459.26,1206.7 1459.85,1206.7 1460.43,1206.7 1461.02,1206.7 1461.61,1206.7 1462.19,1206.7 1462.78,1206.7 1463.37,1206.7 1463.95,1206.7 1464.54,1206.7 1465.12,1206.7 1465.71,1206.7 1466.3,1206.7 1466.88,1206.7 1467.47,1206.7 1468.06,1206.7 1468.64,1206.7 1469.23,1206.7 1469.82,1206.7 1470.4,1206.7 1470.99,1206.7 1471.57,1206.7 1472.16,1206.7 1472.75,1206.7 1473.33,1206.7 1473.92,1206.7 1474.51,1206.7 1475.09,1206.7 1475.68,1206.7 1476.27,1206.7 1476.85,1206.7 1477.44,1206.7 1478.03,1206.7 1478.61,1206.7 1479.2,1206.7 1479.78,1206.7 1480.37,1206.7 1480.96,1206.7 1481.54,1206.7 1482.13,1206.7 1482.72,1206.7 1483.3,1206.7 1483.89,1206.7 1484.48,1206.7 1485.06,1206.7 1485.65,1206.7 1486.24,1206.7 1486.82,1206.7 1487.41,1206.7 1487.99,1206.7 1488.58,1206.7 1489.17,1206.7 1489.75,1206.7 1490.34,1206.7 1490.93,1206.7 1491.51,1206.7 1492.1,1206.7 1492.69,1206.7 1493.27,1206.7 1493.86,1206.7 1494.45,1206.7 1495.03,1206.7 1495.62,1206.7 1496.2,1206.7 1496.79,1206.7 1497.38,1206.7 1497.96,1206.7 1498.55,1206.7 1499.14,1206.7 1499.72,1206.7 1500.31,1206.7 1500.9,1206.7 1501.48,1206.7 1502.07,1206.7 1502.65,1206.7 1503.24,1206.7 1503.83,1206.7 1504.41,1206.7 1505,1206.7 1505.59,1206.7 1506.17,1206.7 1506.76,1206.7 1507.35,1206.7 1507.93,1206.7 1508.52,1206.7 1509.11,1206.7 1509.69,1206.7 1510.28,1206.7 1510.86,1206.7 1511.45,1206.7 1512.04,1206.7 1512.62,1206.7 1513.21,1206.7 1513.8,1206.7 1514.38,1206.7 1514.97,1206.7 1515.56,1206.7 1516.14,1206.7 1516.73,1206.7 1517.32,1206.7 1517.9,1206.7 1518.49,1206.7 1519.07,1206.7 1519.66,1206.7 1520.25,1206.7 1520.83,1206.7 1521.42,1206.7 1522.01,1206.7 1522.59,1206.7 1523.18,1206.7 1523.77,1206.7 1524.35,1206.7 1524.94,1206.7 1525.52,1206.7 1526.11,1206.7 1526.7,1206.7 1527.28,1206.7 1527.87,1206.7 1528.46,1206.7 1529.04,1206.7 1529.63,1206.7 1530.22,1206.7 1530.8,1206.7 1531.39,1206.7 1531.98,1206.7 1532.56,1206.7 1533.15,1206.7 1533.73,1206.7 1534.32,1206.7 1534.91,1206.7 1535.49,1206.7 1536.08,1206.7 1536.67,1206.7 1537.25,1206.7 1537.84,1206.7 1538.43,1206.7 1539.01,1206.7 1539.6,1206.7 1540.19,1206.7 1540.77,1206.7 1541.36,1206.7 1541.94,1206.7 1542.53,1206.7 1543.12,1206.7 1543.7,1206.7 1544.29,1206.7 1544.88,1206.7 1545.46,1206.7 1546.05,1206.7 1546.64,1206.7 1547.22,1206.7 1547.81,1206.7 1548.4,1206.7 1548.98,1206.7 1549.57,1206.7 1550.15,1206.7 1550.74,1206.7 1551.33,1206.7 1551.91,1206.7 1552.5,1206.7 1553.09,1206.7 1553.67,1206.7 1554.26,1206.7 1554.85,1206.7 1555.43,1206.7 1556.02,1206.7 1556.6,1206.7 1557.19,1206.7 1557.78,1206.7 1558.36,1206.7 1558.95,1206.7 1559.54,1206.7 1560.12,1206.7 1560.71,1206.7 1561.3,1206.7 1561.88,1206.7 1562.47,1206.7 1563.06,1206.7 1563.64,1206.7 1564.23,1206.7 1564.81,1206.7 1565.4,1206.7 1565.99,1206.7 1566.57,1206.7 1567.16,1206.7 1567.75,1206.7 1568.33,1206.7 1568.92,1206.7 1569.51,1206.7 1570.09,1206.7 1570.68,1206.7 1571.27,1206.7 1571.85,1206.7 1572.44,1206.7 1573.02,1206.7 1573.61,1206.7 1574.2,1206.7 1574.78,1206.7 1575.37,1206.7 1575.96,1206.7 1576.54,1206.7 1577.13,1206.7 1577.72,1206.7 1578.3,1206.7 1578.89,1206.7 1579.47,1206.7 1580.06,1206.7 1580.65,1206.7 1581.23,1206.7 1581.82,1206.7 1582.41,1206.7 1582.99,1206.7 1583.58,1206.7 1584.17,1206.7 1584.75,1206.7 1585.34,1206.7 1585.93,1206.7 1586.51,1206.7 1587.1,1206.7 1587.68,1206.7 1588.27,1206.7 1588.86,1206.7 1589.44,1206.7 1590.03,1206.7 1590.62,1206.7 1591.2,1206.7 1591.79,1206.7 1592.38,1206.7 1592.96,1206.7 1593.55,1206.7 1594.14,1206.7 1594.72,1206.7 1595.31,1206.7 1595.89,1206.7 1596.48,1206.7 1597.07,1206.7 1597.65,1206.7 1598.24,1206.7 1598.83,1206.7 1599.41,1206.7 1600,1206.7 1600.59,1206.7 1601.17,1206.7 1601.76,1206.7 1602.34,1206.7 1602.93,1206.7 1603.52,1206.7 1604.1,1206.7 1604.69,1206.7 1605.28,1206.7 1605.86,1206.7 1606.45,1206.7 1607.04,1206.7 1607.62,1206.7 1608.21,1206.7 1608.8,1206.7 1609.38,1206.7 1609.97,1206.7 1610.55,1206.7 1611.14,1206.7 1611.73,1206.7 1612.31,1206.7 1612.9,1206.7 1613.49,1206.7 1614.07,1206.7 1614.66,1206.7 1615.25,1206.7 1615.83,1206.7 1616.42,1206.7 1617.01,1206.7 1617.59,1206.7 1618.18,1206.7 1618.76,1206.7 1619.35,1206.7 1619.94,1206.7 1620.52,1206.7 1621.11,1206.7 1621.7,1206.7 1622.28,1206.7 1622.87,1206.7 1623.46,1206.7 1624.04,1206.7 1624.63,1206.7 1625.22,1206.7 1625.8,1206.7 1626.39,1206.7 1626.97,1206.7 1627.56,1206.7 1628.15,1206.7 1628.73,1206.7 1629.32,1206.7 1629.91,1206.7 1630.49,1206.7 1631.08,1206.7 1631.67,1206.7 1632.25,1206.7 1632.84,1206.7 1633.42,1206.7 1634.01,1206.7 1634.6,1206.7 1635.18,1206.7 1635.77,1206.7 1636.36,1206.7 1636.94,1206.7 1637.53,1206.7 1638.12,1206.7 1638.7,1206.7 1639.29,1206.7 1639.88,1206.7 1640.46,1206.7 1641.05,1206.7 1641.63,1206.7 1642.22,1206.7 1642.81,1206.7 1643.39,1206.7 1643.98,1206.7 1644.57,1206.7 1645.15,1206.7 1645.74,1206.7 1646.33,1206.7 1646.91,1206.7 1647.5,1206.7 1648.09,1206.7 1648.67,1206.7 1649.26,1206.7 1649.84,1206.7 1650.43,1206.7 1651.02,1206.7 1651.6,1206.7 1652.19,1206.7 1652.78,1206.7 1653.36,1206.7 1653.95,1206.7 1654.54,1206.7 1655.12,1206.7 1655.71,1206.7 1656.29,1206.7 1656.88,1206.7 1657.47,1206.7 1658.05,1206.7 1658.64,1206.7 1659.23,1206.7 1659.81,1206.7 1660.4,1206.7 1660.99,1206.7 1661.57,1206.7 1662.16,1206.7 1662.75,1206.7 1663.33,1206.7 1663.92,1206.7 1664.5,1206.7 1665.09,1206.7 1665.68,1206.7 1666.26,1206.7 1666.85,1206.7 1667.44,1206.7 1668.02,1206.7 1668.61,1206.7 1669.2,1206.7 1669.78,1206.7 1670.37,1206.7 1670.96,1206.7 1671.54,1206.7 1672.13,1206.7 1672.71,1206.7 1673.3,1206.7 1673.89,1206.7 1674.47,1206.7 1675.06,1206.7 1675.65,1206.7 1676.23,1206.7 1676.82,1206.7 1677.41,1206.7 1677.99,1206.7 1678.58,1206.7 1679.17,1206.7 1679.75,1206.7 1680.34,1206.7 1680.92,1206.7 1681.51,1206.7 1682.1,1206.7 1682.68,1206.7 1683.27,1206.7 1683.86,1206.7 1684.44,1206.7 1685.03,1206.7 1685.62,1206.7 1686.2,1206.7 1686.79,1206.7 1687.37,1206.7 1687.96,1206.7 1688.55,1206.7 1689.13,1206.7 1689.72,1206.7 1690.31,1206.7 1690.89,1206.7 1691.48,1206.7 1692.07,1206.7 1692.65,1206.7 1693.24,1206.7 1693.83,1206.7 1694.41,1206.7 1695,1206.7 1695.58,1206.7 1696.17,1206.7 1696.76,1206.7 1697.34,1206.7 1697.93,1206.7 1698.52,1206.7 1699.1,1206.7 1699.69,1206.7 1700.28,1206.7 1700.86,1206.7 1701.45,1206.7 1702.04,1206.7 1702.62,1206.7 1703.21,1206.7 1703.79,1206.7 1704.38,1206.7 1704.97,1206.7 1705.55,1206.7 1706.14,1206.7 1706.73,1206.7 1707.31,1206.7 1707.9,1206.7 1708.49,1206.7 1709.07,1206.7 1709.66,1206.7 1710.24,1206.7 1710.83,1206.7 1711.42,1206.7 1712,1206.7 1712.59,1206.7 1713.18,1206.7 1713.76,1206.7 1714.35,1206.7 1714.94,1206.7 1715.52,1206.7 1716.11,1206.7 1716.7,1206.7 1717.28,1206.7 1717.87,1206.7 1718.45,1206.7 1719.04,1206.7 1719.63,1206.7 1720.21,1206.7 1720.8,1206.7 1721.39,1206.7 1721.97,1206.7 1722.56,1206.7 1723.15,1206.7 1723.73,1206.7 1724.32,1206.7 1724.91,1206.7 1725.49,1206.7 1726.08,1206.7 1726.66,1206.7 1727.25,1206.7 1727.84,1206.7 1728.42,1206.7 1729.01,1206.7 1729.6,1206.7 1730.18,1206.7 1730.77,1206.7 1731.36,1206.7 1731.94,1206.7 1732.53,1206.7 1733.11,1206.7 1733.7,1206.7 1734.29,1206.7 1734.87,1206.7 1735.46,1206.7 1736.05,1206.7 1736.63,1206.7 1737.22,1206.7 1737.81,1206.7 1738.39,1206.7 1738.98,1206.7 1739.57,1206.7 1740.15,1206.7 1740.74,1206.7 1741.32,1206.7 1741.91,1206.7 1742.5,1206.7 1743.08,1206.7 1743.67,1206.7 1744.26,1206.7 1744.84,1206.7 1745.43,1206.7 1746.02,1206.7 1746.6,1206.7 1747.19,1206.7 1747.78,1206.7 1748.36,1206.7 1748.95,1206.7 1749.53,1206.7 1750.12,1206.7 1750.71,1206.7 1751.29,1206.7 1751.88,1206.7 1752.47,1206.7 1753.05,1206.7 1753.64,1206.7 1754.23,1206.7 1754.81,1206.7 1755.4,1206.7 1755.99,1206.7 1756.57,1206.7 1757.16,1206.7 1757.74,1206.7 1758.33,1206.7 1758.92,1206.7 1759.5,1206.7 1760.09,1206.7 1760.68,1206.7 1761.26,1206.7 1761.85,1206.7 1762.44,1206.7 1763.02,1206.7 1763.61,1206.7 1764.19,1206.7 1764.78,1206.7 1765.37,1206.7 1765.95,1206.7 1766.54,1206.7 1767.13,1206.7 1767.71,1206.7 1768.3,1206.7 1768.89,1206.7 1769.47,1206.7 1770.06,1206.7 1770.65,1206.7 1771.23,1206.7 1771.82,1206.7 1772.4,1206.7 1772.99,1206.7 1773.58,1206.7 1774.16,1206.7 1774.75,1206.7 1775.34,1206.7 1775.92,1206.7 1776.51,1206.7 1777.1,1206.7 1777.68,1206.7 1778.27,1206.7 1778.86,1206.7 1779.44,1206.7 1780.03,1206.7 1780.61,1206.7 1781.2,1206.7 1781.79,1206.7 1782.37,1206.7 1782.96,1206.7 1783.55,1206.7 1784.13,1206.7 1784.72,1206.7 1785.31,1206.7 1785.89,1206.7 1786.48,1206.7 1787.06,1206.7 1787.65,1206.7 1788.24,1206.7 1788.82,1206.7 1789.41,1206.7 1790,1206.7 1790.58,1206.7 1791.17,1206.7 1791.76,1206.7 1792.34,1206.7 1792.93,1206.7 1793.52,1206.7 1794.1,1206.7 1794.69,1206.7 1795.27,1206.7 1795.86,1206.7 1796.45,1206.7 1797.03,1206.7 1797.62,1206.7 1798.21,1206.7 1798.79,1206.7 1799.38,1206.7 1799.97,1206.7 1800.55,1206.7 1801.14,1206.7 1801.73,1206.7 1802.31,1206.7 1802.9,1206.7 1803.48,1206.7 1804.07,1206.7 1804.66,1206.7 1805.24,1206.7 1805.83,1206.7 1806.42,1206.7 1807,1206.7 1807.59,1206.7 1808.18,1206.7 1808.76,1206.7 1809.35,1206.7 1809.94,1206.7 1810.52,1206.7 1811.11,1206.7 1811.69,1206.7 1812.28,1206.7 1812.87,1206.7 1813.45,1206.7 1814.04,1206.7 1814.63,1206.7 1815.21,1206.7 1815.8,1206.7 1816.39,1206.7 1816.97,1206.7 1817.56,1206.7 1818.14,1206.7 1818.73,1206.7 1819.32,1206.7 1819.9,1206.7 1820.49,1206.7 1821.08,1206.7 1821.66,1206.7 1822.25,1206.7 1822.84,1206.7 1823.42,1206.7 1824.01,1206.7 1824.6,1206.7 1825.18,1206.7 1825.77,1206.7 1826.35,1206.7 1826.94,1206.7 1827.53,1206.7 1828.11,1206.7 1828.7,1206.7 1829.29,1206.7 1829.87,1206.7 1830.46,1206.7 1831.05,1206.7 1831.63,1206.7 1832.22,1206.7 1832.81,1206.7 1833.39,1206.7 1833.98,1206.7 1834.56,1206.7 1835.15,1206.7 1835.74,1206.7 1836.32,1206.7 1836.91,1206.7 1837.5,1206.7 1838.08,1206.7 1838.67,1206.7 1839.26,1206.7 1839.84,1206.7 1840.43,1206.7 1841.01,1206.7 1841.6,1206.7 1842.19,1206.7 1842.77,1206.7 1843.36,1206.7 1843.95,1206.7 1844.53,1206.7 1845.12,1206.7 1845.71,1206.7 1846.29,1206.7 1846.88,1206.7 1847.47,1206.7 1848.05,1206.7 1848.64,1206.7 1849.22,1206.7 1849.81,1206.7 1850.4,1206.7 1850.98,1206.7 1851.57,1206.7 1852.16,1206.7 1852.74,1206.7 1853.33,1206.7 1853.92,1206.7 1854.5,1206.7 1855.09,1206.7 1855.68,1206.7 1856.26,1206.7 1856.85,1206.7 1857.43,1206.7 1858.02,1206.7 1858.61,1206.7 1859.19,1206.7 1859.78,1206.7 1860.37,1206.7 1860.95,1206.7 1861.54,1206.7 1862.13,1206.7 1862.71,1206.7 1863.3,1206.7 1863.88,1206.7 1864.47,1206.7 1865.06,1206.7 1865.64,1206.7 1866.23,1206.7 1866.82,1206.7 1867.4,1206.7 1867.99,1206.7 1868.58,1206.7 1869.16,1206.7 1869.75,1206.7 1870.34,1206.7 1870.92,1206.7 1871.51,1206.7 1872.09,1206.7 1872.68,1206.7 1873.27,1206.7 1873.85,1206.7 1874.44,1206.7 1875.03,1206.7 1875.61,1206.7 1876.2,1206.7 1876.79,1206.7 1877.37,1206.7 1877.96,1206.7 1878.55,1206.7 1879.13,1206.7 1879.72,1206.7 1880.3,1206.7 1880.89,1206.7 1881.48,1206.7 1882.06,1206.7 1882.65,1206.7 1883.24,1206.7 1883.82,1206.7 1884.41,1206.7 1885,1206.7 1885.58,1206.7 1886.17,1206.7 1886.76,1206.7 1887.34,1206.7 1887.93,1206.7 1888.51,1206.7 1889.1,1206.7 1889.69,1206.7 1890.27,1206.7 1890.86,1206.7 1891.45,1206.7 1892.03,1206.7 1892.62,1206.7 1893.21,1206.7 1893.79,1206.7 1894.38,1206.7 1894.96,1206.7 1895.55,1206.7 1896.14,1206.7 1896.72,1206.7 1897.31,1206.7 1897.9,1206.7 1898.48,1206.7 1899.07,1206.7 1899.66,1206.7 1900.24,1206.7 1900.83,1206.7 1901.42,1206.7 1902,1206.7 1902.59,1206.7 1903.17,1206.7 1903.76,1206.7 1904.35,1206.7 1904.93,1206.7 1905.52,1206.7 1906.11,1206.7 1906.69,1206.7 1907.28,1206.7 1907.87,1206.7 1908.45,1206.7 1909.04,1206.7 1909.63,1206.7 1910.21,1206.7 1910.8,1206.7 1911.38,1206.7 1911.97,1206.7 1912.56,1206.7 1913.14,1206.7 1913.73,1206.7 1914.32,1206.7 1914.9,1206.7 1915.49,1206.7 1916.08,1206.7 1916.66,1206.7 1917.25,1206.7 1917.83,1206.7 1918.42,1206.7 1919.01,1206.7 1919.59,1206.7 1920.18,1206.7 1920.77,1206.7 1921.35,1206.7 1921.94,1206.7 1922.53,1206.7 1923.11,1206.7 1923.7,1206.7 1924.29,1206.7 1924.87,1206.7 1925.46,1206.7 1926.04,1206.7 1926.63,1206.7 1927.22,1206.7 1927.8,1206.7 1928.39,1206.7 1928.98,1206.7 1929.56,1206.7 1930.15,1206.7 1930.74,1206.7 1931.32,1206.7 1931.91,1206.7 1932.5,1206.7 1933.08,1206.7 1933.67,1206.7 1934.25,1206.7 1934.84,1206.7 1935.43,1206.7 1936.01,1206.7 1936.6,1206.7 1937.19,1206.7 1937.77,1206.7 1938.36,1206.7 1938.95,1206.7 1939.53,1206.7 1940.12,1206.7 1940.71,1206.7 1941.29,1206.7 1941.88,1206.7 1942.46,1206.7 1943.05,1206.7 1943.64,1206.7 1944.22,1206.7 1944.81,1206.7 1945.4,1206.7 1945.98,1206.7 1946.57,1206.7 1947.16,1206.7 1947.74,1206.7 1948.33,1206.7 1948.91,1206.7 1949.5,1206.7 1950.09,1206.7 1950.67,1206.7 1951.26,1206.7 1951.85,1206.7 1952.43,1206.7 1953.02,1206.7 1953.61,1206.7 1954.19,1206.7 1954.78,1206.7 1955.37,1206.7 1955.95,1206.7 1956.54,1206.7 1957.12,1206.7 1957.71,1206.7 1958.3,1206.7 1958.88,1206.7 1959.47,1206.7 1960.06,1206.7 1960.64,1206.7 1961.23,1206.7 1961.82,1206.7 1962.4,1206.7 1962.99,1206.7 1963.58,1206.7 1964.16,1206.7 1964.75,1206.7 1965.33,1206.7 1965.92,1206.7 1966.51,1206.7 1967.09,1206.7 1967.68,1206.7 1968.27,1206.7 1968.85,1206.7 1969.44,1206.7 1970.03,1206.7 1970.61,1206.7 1971.2,1206.7 1971.78,1206.7 1972.37,1206.7 1972.96,1206.7 1973.54,1206.7 1974.13,1206.7 1974.72,1206.7 1975.3,1206.7 1975.89,1206.7 1976.48,1206.7 1977.06,1206.7 1977.65,1206.7 1978.24,1206.7 1978.82,1206.7 1979.41,1206.7 1979.99,1206.7 1980.58,1206.7 1981.17,1206.7 1981.75,1206.7 1982.34,1206.7 1982.93,1206.7 1983.51,1206.7 1984.1,1206.7 1984.69,1206.7 1985.27,1206.7 1985.86,1206.7 1986.45,1206.7 1987.03,1206.7 1987.62,1206.7 1988.2,1206.7 1988.79,1206.7 1989.38,1206.7 1989.96,1206.7 1990.55,1206.7 1991.14,1206.7 1991.72,1206.7 1992.31,1206.7 1992.9,1206.7 1993.48,1206.7 1994.07,1206.7 1994.65,1206.7 1995.24,1206.7 1995.83,1206.7 1996.41,1206.7 1997,1206.7 1997.59,1206.7 1998.17,1206.7 1998.76,1206.7 1999.35,1206.7 1999.93,1206.7 2000.52,1206.7 2001.11,1206.7 2001.69,1206.7 2002.28,1206.7 2002.86,1206.7 2003.45,1206.7 2004.04,1206.7 2004.62,1206.7 2005.21,1206.7 2005.8,1206.7 2006.38,1206.7 2006.97,1206.7 2007.56,1206.7 2008.14,1206.7 2008.73,1206.7 2009.32,1206.7 2009.9,1206.7 2010.49,1206.7 2011.07,1206.7 2011.66,1206.7 2012.25,1206.7 2012.83,1206.7 2013.42,1206.7 2014.01,1206.7 2014.59,1206.7 2015.18,1206.7 2015.77,1206.7 2016.35,1206.7 2016.94,1206.7 2017.53,1206.7 2018.11,1206.7 2018.7,1206.7 2019.28,1206.7 2019.87,1206.7 2020.46,1206.7 2021.04,1206.7 2021.63,1206.7 2022.22,1206.7 2022.8,1206.7 2023.39,1206.7 2023.98,1206.7 2024.56,1206.7 2025.15,1206.7 2025.73,1206.7 2026.32,1206.7 2026.91,1206.7 2027.49,1206.7 2028.08,1206.7 2028.67,1206.7 2029.25,1206.7 2029.84,1206.7 2030.43,1206.7 2031.01,1206.7 2031.6,1206.7 2032.19,1206.7 2032.77,1206.7 2033.36,1206.7 2033.94,1206.7 2034.53,1206.7 2035.12,1206.7 2035.7,1206.7 2036.29,1206.7 2036.88,1206.7 2037.46,1206.7 2038.05,1206.7 2038.64,1206.7 2039.22,1206.7 2039.81,1206.7 2040.4,1206.7 2040.98,1206.7 2041.57,1206.7 2042.15,1206.7 2042.74,1206.7 2043.33,1206.7 2043.91,1206.7 2044.5,1206.7 2045.09,1206.7 2045.67,1206.7 2046.26,1206.7 2046.85,1206.7 2047.43,1206.7 2048.02,1206.7 2048.6,1206.7 2049.19,1206.7 2049.78,1206.7 2050.36,1206.7 2050.95,1206.7 2051.54,1206.7 2052.12,1206.7 2052.71,1206.7 2053.3,1206.7 2053.88,1206.7 2054.47,1206.7 2055.06,1206.7 2055.64,1206.7 2056.23,1206.7 2056.81,1206.7 2057.4,1206.7 2057.99,1206.7 2058.57,1206.7 2059.16,1206.7 2059.75,1206.7 2060.33,1206.7 2060.92,1206.7 2061.51,1206.7 2062.09,1206.7 2062.68,1206.7 2063.27,1206.7 2063.85,1206.7 2064.44,1206.7 2065.02,1206.7 2065.61,1206.7 2066.2,1206.7 2066.78,1206.7 2067.37,1206.7 2067.96,1206.7 2068.54,1206.7 2069.13,1206.7 2069.72,1206.7 2070.3,1206.7 2070.89,1206.7 2071.48,1206.7 2072.06,1206.7 2072.65,1206.7 2073.23,1206.7 2073.82,1206.7 2074.41,1206.7 2074.99,1206.7 2075.58,1206.7 2076.17,1206.7 2076.75,1206.7 2077.34,1206.7 2077.93,1206.7 2078.51,1206.7 2079.1,1206.7 2079.68,1206.7 2080.27,1206.7 2080.86,1206.7 2081.44,1206.7 2082.03,1206.7 2082.62,1206.7 2083.2,1206.7 2083.79,1206.7 2084.38,1206.7 2084.96,1206.7 2085.55,1206.7 2086.14,1206.7 2086.72,1206.7 2087.31,1206.7 2087.89,1206.7 2088.48,1206.7 2089.07,1206.7 2089.65,1206.7 2090.24,1206.7 2090.83,1206.7 2091.41,1206.7 2092,1206.7 2092.59,1206.7 2093.17,1206.7 2093.76,1206.7 2094.35,1206.7 2094.93,1206.7 2095.52,1206.7 2096.1,1206.7 2096.69,1206.7 2097.28,1206.7 2097.86,1206.7 2098.45,1206.7 2099.04,1206.7 2099.62,1206.7 2100.21,1206.7 2100.8,1206.7 2101.38,1206.7 2101.97,1206.7 2102.55,1206.7 2103.14,1206.7 2103.73,1206.7 2104.31,1206.7 2104.9,1206.7 2105.49,1206.7 2106.07,1206.7 2106.66,1206.7 2107.25,1206.7 2107.83,1206.7 2108.42,1206.7 2109.01,1206.7 2109.59,1206.7 2110.18,1206.7 2110.76,1206.7 2111.35,1206.7 2111.94,1206.7 2112.52,1206.7 2113.11,1206.7 2113.7,1206.7 2114.28,1206.7 2114.87,1206.7 2115.46,1206.7 2116.04,1206.7 2116.63,1206.7 2117.22,1206.7 2117.8,1206.7 2118.39,1206.7 2118.97,1206.7 2119.56,1206.7 2120.15,1206.7 2120.73,1206.7 2121.32,1206.7 2121.91,1206.7 2122.49,1206.7 2123.08,1206.7 2123.67,1206.7 2124.25,1206.7 2124.84,1206.7 2125.42,1206.7 2126.01,1206.7 2126.6,1206.7 2127.18,1206.7 2127.77,1206.7 2128.36,1206.7 2128.94,1206.7 2129.53,1206.7 2130.12,1206.7 2130.7,1206.7 2131.29,1206.7 2131.88,1206.7 2132.46,1206.7 2133.05,1206.7 2133.63,1206.7 2134.22,1206.7 2134.81,1206.7 2135.39,1206.7 2135.98,1206.7 2136.57,1206.7 2137.15,1206.7 2137.74,1206.7 2138.33,1206.7 2138.91,1206.7 2139.5,1206.7 2140.09,1206.7 2140.67,1206.7 2141.26,1206.7 2141.84,1206.7 2142.43,1206.7 2143.02,1206.7 2143.6,1206.7 2144.19,1206.7 2144.78,1206.7 2145.36,1206.7 2145.95,1206.7 2146.54,1206.7 2147.12,1206.7 2147.71,1206.7 2148.3,1206.7 2148.88,1206.7 2149.47,1206.7 2150.05,1206.7 2150.64,1206.7 2151.23,1206.7 2151.81,1206.7 2152.4,1206.7 2152.99,1206.7 2153.57,1206.7 2154.16,1206.7 2154.75,1206.7 2155.33,1206.7 2155.92,1206.7 2156.5,1206.7 2157.09,1206.7 2157.68,1206.7 2158.26,1206.7 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.2,1187.31 1400.65,899.083 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1225.55 985.439,1187.31 2158.26,1187.31 2158.26,1225.55 985.439,1225.55 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip610)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip610)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip613\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip613)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-5856.65 164.351,-6785.11 164.91,-7630.93 165.469,-8399.48 166.029,-7969.86 166.588,-8654.71 167.147,-9273.35 167.706,-8900.91 168.266,-9465.47 168.825,-9972.05 169.384,-9657.64 169.943,-10091.9 170.503,-10477.2 171.062,-8991.81 171.621,-8825.49 172.18,-9171.74 172.74,-9496.29 173.299,-9293.1 173.858,-9549.23 174.417,-9777.97 174.977,-9979.63 175.536,-10148.1 176.095,-10279.3 176.655,-10369 177.214,-10453.5 177.773,-10517.7 178.332,-10561.2 178.892,-10593.6 179.451,-10104.4 180.01,-10107.5 180.569,-10088.5 181.129,-9854.29 181.688,-9809.9 182.247,-9567.02 182.806,-9527.32 183.366,-9461.39 183.925,-9069.61 184.484,-8993.62 185.043,-8765.22 185.603,-8544.04 186.162,-8329.02 186.721,-8226.9 187.28,-8126.89 187.84,-7906.86 188.399,-7780.06 188.958,-7556.8 189.517,-7251.2 190.077,-7140.33 190.636,-6771.6 191.195,-6580.47 191.754,-6473.7 192.314,-6288.92 192.873,-6109.81 193.432,-6004.63 193.991,-5832.25 194.551,-5726.18 195.11,-5622.52 195.669,-5505.82 196.228,-5277.74 196.788,-4895.08 197.347,-4744.26 197.906,-4562.54 198.465,-4468.06 199.025,-4363.8 199.584,-4212.58 200.143,-4070.3 200.702,-3931.33 201.262,-3748.07 201.821,-3653.73 202.38,-3519.56 202.939,-3275.62 203.499,-3118.56 204.058,-2928.59 204.617,-2779.5 205.176,-2668.47 205.736,-2529.5 206.295,-2461.64 206.854,-2295.01 207.413,-2231.33 207.973,-2139.28 208.532,-2018.94 209.091,-1929.51 209.65,-1845.19 210.21,-1734.27 210.769,-1620.32 211.328,-1515.41 211.887,-1385.56 212.447,-1340.41 213.006,-1292.67 213.565,-1190.59 214.124,-1067.13 214.684,-1000.1 215.243,-964.287 215.802,-873.601 216.361,-782.582 216.921,-747.513 217.48,-711.201 218.039,-627.953 218.598,-596.135 219.158,-537.821 219.717,-503.856 220.276,-452.249 220.835,-372.598 221.395,-325.488 221.954,-253.757 222.513,-228.523 223.072,-138.434 223.632,-140.639 224.191,-119.58 224.75,-74.9969 225.309,-33.439 225.869,6.91739 226.428,46.5283 226.987,89.2765 227.546,146.564 228.106,186.281 228.665,202.262 229.224,254.719 229.783,291.09 230.343,301.621 230.902,312.069 231.461,346.346 232.02,375.796 232.58,407.21 233.139,417.61 233.698,464.953 234.257,551.045 234.817,577.873 235.376,564.792 235.935,605.675 236.494,610.979 237.054,615.732 237.613,619.434 238.172,660.92 238.731,715.92 239.291,716.147 239.85,701.174 240.409,738.955 240.968,757.123 241.528,813.498 242.087,796.501 242.646,888.963 243.205,918.108 243.765,908.641 244.324,901.674 244.883,897.057 245.442,894.51 246.002,906.756 246.561,903.27 247.12,914.152 247.679,893.515 248.239,906.362 248.798,901.084 249.357,902.089 249.916,902.564 250.476,916.963 251.035,911.72 251.594,905.854 252.153,919.468 252.713,931.647 253.272,965.137 253.831,945.576 254.39,980.502 254.95,954.763 255.509,918.544 256.068,970.803 256.627,969.131 257.187,1002.96 257.746,1000.1 258.305,993.698 258.864,1023.24 259.424,1017.73 259.983,1046.62 260.542,1041.21 261.101,1034.17 261.661,1063.87 262.22,1072.57 262.779,1095.26 263.338,1101.88 263.898,1074.33 264.457,1066.79 265.016,1077.72 265.575,1050.08 266.135,1074.74 266.694,1050.98 267.253,1043.89 267.812,1057.51 268.372,1046.81 268.931,1043.05 269.49,1040.08 270.049,1034.3 270.609,1047.1 271.168,1042.68 271.727,1039.72 272.286,1050.42 272.846,1065.68 273.405,1078.45 273.964,1105.21 274.523,1093.79 275.083,1103.78 275.642,1112.9 276.201,1085.2 276.76,1110.97 277.32,1103.25 277.879,1110.14 278.438,1113.02 278.997,1088.03 279.557,1115.39 280.116,1106.66 280.675,1128.26 281.234,1135.31 281.794,1154.16 282.353,1158.89 282.912,1184.54 283.471,1171.91 284.031,1177.58 284.59,1164.49 285.149,1148.47 285.708,1138.04 286.268,1124.09 286.827,1145.03 287.386,1135.1 287.945,1124.46 288.505,1147.37 289.064,1133.85 289.623,1139.09 290.182,1110.97 290.742,1085.17 291.301,1092.7 291.86,1035.26 292.419,1032.03 292.979,1042.27 293.538,1084.38 294.097,1073.75 294.656,1081.42 295.216,1040.53 295.775,1034.04 296.334,1023.3 296.893,1053.4 297.453,1030.26 298.012,1022.49 298.571,998.446 299.13,992.892 299.69,1005.08 300.249,1019.99 300.808,1060.74 301.368,1067.37 301.927,1078.44 302.486,1069.62 303.045,1058.96 303.605,1064.4 304.164,1101.86 304.723,1092.75 305.282,1086.95 305.842,1093.6 306.401,1064.31 306.96,1068.42 307.519,1079.86 308.079,1073.66 308.638,1079.71 309.197,1067.44 309.756,1041.61 310.316,986.655 310.875,979.26 311.434,990.898 311.993,1014.33 312.553,1024.31 313.112,1018.04 313.671,992.993 314.23,985.413 314.79,976.775 315.349,986.769 315.908,976.622 316.467,972.422 317.027,982.114 317.586,993.629 318.145,988.323 318.704,1013.11 319.264,1008.84 319.823,1020.8 320.382,1014.93 320.941,1021.65 321.501,1014.18 322.06,1020.99 322.619,1028.99 323.178,1003.56 323.738,995.863 324.297,1006.25 324.856,998.842 325.415,991.271 325.975,969.269 326.534,965.015 327.093,974.484 327.652,999.085 328.212,1003.49 328.771,993.269 329.33,999.992 329.889,1005.84 330.449,1012.04 331.008,985.665 331.567,1013.47 332.126,972.885 332.686,966.711 333.245,990.788 333.804,931.802 334.363,925.659 334.923,924.775 335.482,922.294 336.041,935.629 336.6,916.587 337.16,895.562 337.719,895.447 338.278,910.706 338.837,909.482 339.397,923.207 339.956,937.138 340.515,917.437 341.074,914.492 341.634,943.64 342.193,955.715 342.752,949.054 343.311,944.097 343.871,922.098 344.43,884.498 344.989,894.683 345.548,856.996 346.108,855.591 346.667,871.954 347.226,855.886 347.785,871.236 348.345,855.859 348.904,871.568 349.463,854.171 350.022,853.915 350.582,854.958 351.141,869.78 351.7,886.068 352.259,900.247 352.819,931.766 353.378,911.006 353.937,909.324 354.496,917.54 355.056,926.185 355.615,919.516 356.174,898.452 356.733,911.106 357.293,921.923 357.852,932.221 358.411,909.768 358.97,939.12 359.53,902.438 360.089,916.258 360.648,912.77 361.207,909.257 361.767,869.487 362.326,849.852 362.885,845.55 363.444,829.602 364.004,856.115 364.563,869.765 365.122,871.725 365.681,904.899 366.241,883.981 366.8,866.27 367.359,862.969 367.918,893.733 368.478,871.567 369.037,868.32 369.596,865.473 370.155,879.978 370.715,942.184 371.274,921.155 371.833,929.385 372.392,907.818 372.952,937.859 373.511,915.602 374.07,926.244 374.629,900.772 375.189,895.539 375.748,854.728 376.307,838.562 376.866,868.443 377.426,851.632 377.985,849.513 378.544,866.83 379.103,897.961 379.663,890.089 380.222,884.746 380.781,877.226 381.34,888.018 381.9,896.891 382.459,895.144 383.018,907.57 383.577,867.877 384.137,898.082 384.696,891.09 385.255,915.948 385.814,893.078 386.374,852.923 386.933,851.662 387.492,864.485 388.051,860.782 388.611,872.716 389.17,835.686 389.729,820.954 390.288,817.008 390.848,812.568 391.407,814.633 391.966,830.843 392.525,825.364 393.085,820.272 393.644,815.39 394.203,833.473 394.762,827.585 395.322,840.141 395.881,820.043 396.44,817.421 396.999,829.69 397.559,892.918 398.118,885.594 398.677,880.356 399.236,875.495 399.796,902.498 400.355,880.871 400.914,873.574 401.473,886.455 402.033,895.42 402.592,894.167 403.151,871.898 403.71,820.98 404.27,821.846 404.829,788.897 405.388,806.689 405.947,786.925 406.507,770.578 407.066,801.569 407.625,767.103 408.184,799.904 408.744,796.536 409.303,760.968 409.862,747.404 410.421,749.356 410.981,751.671 411.54,768.759 412.099,775.369 412.658,792.847 413.218,848.416 413.777,846.321 414.336,827.676 414.895,811.121 415.455,792.384 416.014,778.695 416.573,745.113 417.132,747.626 417.692,764.245 418.251,767.303 418.81,751.461 419.369,784.486 419.929,746.79 420.488,713.56 421.047,714.971 421.606,720.979 422.166,738.473 422.725,742.858 423.284,727.189 423.843,695.266 424.403,664.942 424.962,687.928 425.521,708.262 426.08,745.112 426.64,762.575 427.199,764.767 427.758,762.347 428.318,756.84 428.877,792.383 429.436,807.189 429.995,819.451 430.555,835.408 431.114,832.199 431.673,828.964 432.232,795.603 432.792,829.52 433.351,891.624 433.91,918.378 434.469,927.716 435.029,918.755 435.588,910.854 436.147,901.821 436.706,865.315 437.266,889.313 437.825,880.583 438.384,892.145 438.943,871.798 439.503,866.574 440.062,846.593 440.621,855.787 441.18,854.057 441.74,800.403 442.299,798.416 442.858,795.163 443.417,791.521 443.977,818.748 444.536,800.308 445.095,798.125 445.654,796.821 446.214,761.664 446.773,731.302 447.332,762.929 447.891,743.736 448.451,741.177 449.01,709.142 449.569,712.316 450.128,696.779 450.688,667.737 451.247,673.796 451.806,679.654 452.365,686.383 452.925,691.164 453.484,695.576 454.043,715.543 454.602,734.753 455.162,751.372 455.721,718.355 456.28,723.865 456.839,739.918 457.399,723.321 457.958,725.882 458.517,730.123 459.076,778.946 459.636,825.077 460.195,821.506 460.754,800.132 461.313,781.929 461.873,731.937 462.432,735.132 462.991,721.193 463.55,751.589 464.11,752.108 464.669,750.897 465.228,783.321 465.787,767.532 466.347,764.683 466.906,795.021 467.465,791.526 468.024,789.326 468.584,802.893 469.143,832.205 469.702,844.567 470.261,857.387 470.821,850.02 471.38,824 471.939,818.461 472.498,811.486 473.058,778.025 473.617,773.175 474.176,803.502 474.735,799.971 475.295,828.562 475.854,795.202 476.413,794.501 476.972,839.697 477.532,800.085 478.091,796.063 478.65,824.939 479.209,838.147 479.769,865.848 480.328,845.692 480.887,870.752 481.446,831.046 482.006,858.7 482.565,821.971 483.124,798.828 483.683,812.292 484.243,776.933 484.802,808.515 485.361,800.431 485.92,797.421 486.48,761.001 487.039,794.211 487.598,788.159 488.157,781.842 488.717,780.973 489.276,780.15 489.835,810.904 490.394,803.884 490.954,748.387 491.513,730.881 492.072,712.343 492.631,713.547 493.191,746.949 493.75,732.443 494.309,732.599 494.868,734.013 495.428,718.467 495.987,735.099 496.546,703.072 497.105,720.202 497.665,738.103 498.224,736.135 498.783,738.639 499.342,625.745 499.902,601.888 500.461,627.641 501.02,581.717 501.579,604.133 502.139,628.405 502.698,617.219 503.257,606.177 503.816,598.124 504.376,604.811 504.935,563.659 505.494,571.084 506.053,599.5 506.613,657.768 507.172,676.166 507.731,714.472 508.29,698.247 508.85,699.404 509.409,700.844 509.968,684.965 510.527,688.501 511.087,723.626 511.646,723.959 512.205,758.544 512.764,762.893 513.324,778.825 513.883,762.852 514.442,760.586 515.001,758.146 515.561,741.494 516.12,755.543 516.679,752.799 517.238,799.685 517.798,812.312 518.357,806.497 518.916,801.677 519.475,815.661 520.035,812.674 520.594,824.722 521.153,833.194 521.712,821.61 522.272,818.101 522.831,798.003 523.39,806.898 523.949,787.084 524.509,815.639 525.068,826.046 525.627,821.399 526.186,802.045 526.746,768.119 527.305,813.925 527.864,810.286 528.423,789.614 528.983,803.922 529.542,815.143 530.101,810.333 530.66,823.37 531.22,852.087 531.779,831.581 532.338,888.331 532.897,882.663 533.457,843.614 534.016,820.307 534.575,814.823 535.134,810.553 535.694,786.885 536.253,732.095 536.812,714.448 537.371,717.769 537.931,735.448 538.49,720.093 539.049,705.366 539.608,705.896 540.168,703.658 540.727,673.488 541.286,679.296 541.845,699.186 542.405,747.407 542.964,740.268 543.523,741.292 544.082,738.501 544.642,751.896 545.201,750.848 545.76,765.657 546.319,751.255 546.879,735.959 547.438,785.492 547.997,796.997 548.556,798.094 549.116,810.309 549.675,820.397 550.234,830.331 550.793,823.743 551.353,787.727 551.912,766.793 552.471,761.723 553.031,759.487 553.59,806.003 554.149,803.33 554.708,798.485 555.268,777.616 555.827,789.575 556.386,804.146 556.945,813.411 557.505,807.02 558.064,834.431 558.623,791.415 559.182,801.736 559.742,796.47 560.301,791.98 560.86,755.943 561.419,721.418 561.979,704.304 562.538,688.965 563.097,674.729 563.656,672.491 564.216,691.632 564.775,674.775 565.334,709.601 565.893,725.481 566.453,740.503 567.012,703.504 567.571,688.033 568.13,719.453 568.69,703.036 569.249,686.831 569.808,705.174 570.367,718.699 570.927,720.401 571.486,719.761 572.045,771.619 572.604,784.894 573.164,733.92 573.723,734.983 574.282,749.242 574.841,779.851 575.401,746.139 575.96,745.091 576.519,722.388 577.078,719.419 577.638,737.115 578.197,719.063 578.756,715.133 579.315,747.634 579.875,731.397 580.434,757.54 580.993,752.683 581.552,717.081 582.112,715.433 582.671,712.583 583.23,724.376 583.789,754.1 584.349,754.34 584.908,767.011 585.467,798.396 586.026,776.937 586.586,775.05 587.145,798.777 587.704,794.28 588.263,804.573 588.823,781.916 589.382,773.063 589.941,752.472 590.5,747.469 591.06,729.937 591.619,680.203 592.178,711.821 592.737,710.393 593.297,728.087 593.856,727.846 594.415,725.475 594.974,688.359 595.534,690.591 596.093,708.834 596.652,721.472 597.211,683.142 597.771,668.75 598.33,653.028 598.889,654.421 599.448,644.269 600.008,665.86 600.567,684.685 601.126,670.798 601.685,687.417 602.245,686.505 602.804,653.721 603.363,672.855 603.922,674.795 604.482,680.696 605.041,653.349 605.6,672.287 606.159,677.407 606.719,668.312 607.278,675.142 607.837,659.845 608.396,694.819 608.956,681.787 609.515,667.108 610.074,681.905 610.633,699.473 611.193,667.946 611.752,636.972 612.311,638.272 612.87,609.931 613.43,646.149 613.989,649.958 614.548,637.186 615.107,643.568 615.667,616.65 616.226,643.11 616.785,662.001 617.344,679.24 617.904,696.262 618.463,694.616 619.022,715.255 619.581,747.596 620.141,712.606 620.7,708.887 621.259,709.926 621.818,676.186 622.378,677.156 622.937,663.094 623.496,668.083 624.055,655.484 624.615,640.03 625.174,644.343 625.733,646.368 626.292,635.358 626.852,609.059 627.411,628.752 627.97,650.094 628.529,604.402 629.089,627.81 629.648,678.01 630.207,646.219 630.766,619.805 631.326,660.054 631.885,630.127 632.444,636.063 633.003,640.28 633.563,661.571 634.122,650.022 634.681,654.311 635.24,673.308 635.8,672.932 636.359,674.679 636.918,662.852 637.477,646.845 638.037,686.412 638.596,687.987 639.155,719.203 639.714,734.198 640.274,765.595 640.833,765.007 641.392,760.653 641.951,773.621 642.511,771.415 643.07,721.64 643.629,719.047 644.188,714.844 644.748,698.93 645.307,745.971 645.866,725.286 646.425,722.7 646.985,737.265 647.544,716.825 648.103,718.458 648.662,701.93 649.222,700.507 649.781,717.871 650.34,717.486 650.899,719.11 651.459,707.62 652.018,696.189 652.577,694.94 653.136,712.67 653.696,713.575 654.255,711.277 654.814,709.15 655.373,743.804 655.933,727.533 656.492,726.58 657.051,756.867 657.61,719.703 658.17,717.58 658.729,702.955 659.288,701.695 659.847,701.357 660.407,720.245 660.966,735.771 661.525,750.312 662.084,778.65 662.644,788.948 663.203,734.004 663.762,714.48 664.321,717.59 664.881,719.883 665.44,734.126 665.999,746.915 666.558,760.06 667.118,725.691 667.677,740.248 668.236,756.375 668.795,753.585 669.355,733.251 669.914,748.204 670.473,747.091 671.032,742.872 671.592,725.734 672.151,724.749 672.71,707.652 673.269,640.663 673.829,615.866 674.388,605.287 674.947,592.556 675.506,599.65 676.066,604.686 676.625,628.227 677.184,631.979 677.743,602.885 678.303,624.225 678.862,626.182 679.421,643.785 679.981,650.816 680.54,655.355 681.099,673.585 681.658,660.485 682.218,660.483 682.777,617.322 683.336,605.773 683.895,610.696 684.455,615 685.014,616.619 685.573,620.571 686.132,641.062 686.692,656.312 687.251,677.112 687.81,681.427 688.369,698.772 688.929,699.257 689.488,697.098 690.047,700.884 690.606,668.392 691.166,669.553 691.725,672.602 692.284,709.587 692.843,659.374 693.403,643.948 693.962,680.161 694.521,693.09 695.08,710.851 695.64,694.018 696.199,680.023 696.758,684.602 697.317,684.73 697.877,700.137 698.436,698.567 698.995,711.344 699.554,743.854 700.114,769.584 700.673,750.778 701.232,778.923 701.791,774.208 702.351,756.855 702.91,736.705 703.469,734.789 704.028,750.508 704.588,747.575 705.147,745.511 705.706,676.599 706.265,692.188 706.825,662.599 707.384,631.491 707.943,635.908 708.502,653.218 709.062,674.563 709.621,661.926 710.18,664.914 710.739,668.168 711.299,686.776 711.858,704.714 712.417,738.089 712.976,723.061 713.536,722.001 714.095,671.109 714.654,675.944 715.213,673.91 715.773,677.819 716.332,683.557 716.891,681.905 717.45,683.92 718.01,686.216 718.569,685.919 719.128,700.507 719.687,686.305 720.247,685.833 720.806,683.752 721.365,698.372 721.924,700.22 722.484,701.523 723.043,718.905 723.602,715.064 724.161,715.029 724.721,713.696 725.28,697.912 725.839,731.058 726.398,726.807 726.958,722.501 727.517,689.455 728.076,704.913 728.635,706.477 729.195,705.321 729.754,706.357 730.313,688.124 730.872,719.388 731.432,714.859 731.991,714.103 732.55,665.102 733.109,696.492 733.669,661.782 734.228,680.783 734.787,732.788 735.346,734.448 735.906,728.618 736.465,756.132 737.024,752.004 737.583,760.486 738.143,757.935 738.702,772.428 739.261,783.219 739.82,777.077 740.38,739.73 740.939,753.797 741.498,719.246 742.057,717.824 742.617,734.842 743.176,719.323 743.735,715.879 744.294,710.594 744.854,743.285 745.413,756.286 745.972,719.139 746.531,732.684 747.091,729.102 747.65,726.651 748.209,755.759 748.768,766.598 749.328,778.478 749.887,798.763 750.446,773.554 751.005,786.607 751.565,781.814 752.124,743.594 752.683,738.322 753.242,752.523 753.802,700.376 754.361,695.026 754.92,723.687 755.479,705.144 756.039,690.157 756.598,690.804 757.157,674.526 757.716,677.012 758.276,690.852 758.835,673.734 759.394,691.692 759.953,673.925 760.513,705.799 761.072,734.822 761.631,750.699 762.19,700.905 762.75,686.059 763.309,700.264 763.868,682.499 764.427,696.946 764.987,698.041 765.546,682.332 766.105,668.594 766.664,636.071 767.224,656.574 767.783,656.854 768.342,656.012 768.901,674.793 769.461,690.843 770.02,691.515 770.579,693.714 771.138,696.113 771.698,664.547 772.257,731.138 772.816,727.214 773.375,707.118 773.935,686.663 774.494,684.717 775.053,688.088 775.612,655.756 776.172,657.546 776.731,662.808 777.29,681.312 777.849,681.561 778.409,701.742 778.968,714.545 779.527,725.833 780.086,786.425 780.646,762.166 781.205,788.132 781.764,765.74 782.323,760.132 782.883,741.05 783.442,756.449 784.001,753.677 784.56,717.358 785.12,746.596 785.679,710.528 786.238,676.395 786.797,692.098 787.357,675.601 787.916,708.352 788.475,692.402 789.034,644.78 789.594,646.469 790.153,628.384 790.712,628.263 791.271,630.51 791.831,636.273 792.39,610.67 792.949,568.027 793.508,554.365 794.068,593.987 794.627,598.047 795.186,601.685 795.745,608.248 796.305,600.632 796.864,636.053 797.423,657.761 797.982,677.02 798.542,677.467 799.101,677.594 799.66,679.724 800.219,697.333 800.779,699.389 801.338,680.888 801.897,632.174 802.456,650.923 803.016,637.152 803.575,622.476 804.134,593.963 804.693,583.152 805.253,608.716 805.812,677.623 806.371,665.442 806.931,651.365 807.49,669.646 808.049,670.519 808.608,671.355 809.168,677.26 809.727,680.944 810.286,635.45 810.845,673.899 811.405,703.794 811.964,719.218 812.523,686.149 813.082,653.442 813.642,639.7 814.201,707.39 814.76,705.095 815.319,704.186 815.879,703.419 816.438,685.958 816.997,668.126 817.556,689.12 818.116,678.176 818.675,696.653 819.234,681.283 819.793,681.189 820.353,683.936 820.912,653.493 821.471,654.354 822.03,657.115 822.59,676.129 823.149,659.905 823.708,647.008 824.267,651.973 824.827,649.634 825.386,668.13 825.945,670.162 826.504,672.167 827.064,655.465 827.623,623.485 828.182,629.383 828.741,633.76 829.301,669.343 829.86,751.85 830.419,736.277 830.978,731.986 831.538,717.443 832.097,680.933 832.656,679.099 833.215,679.271 833.775,680.724 834.334,678.521 834.893,667.113 835.452,638.239 836.012,641.536 836.571,677.375 837.13,695.192 837.689,696.013 838.249,728.667 838.808,728.687 839.367,741.559 839.926,750.993 840.486,731.717 841.045,726.799 841.604,712.101 842.163,727.799 842.723,711.771 843.282,710.001 843.841,692.254 844.4,691.966 844.96,736.901 845.519,715.53 846.078,729.417 846.637,726.501 847.197,741.514 847.756,740.44 848.315,755.265 848.874,765.93 849.434,792.507 849.993,784.904 850.552,799.424 851.111,789.682 851.671,767.83 852.23,796.446 852.789,808.794 853.348,800.371 853.908,828.171 854.467,789.012 855.026,782.35 855.585,806.909 856.145,801.08 856.704,761.282 857.263,757.03 857.822,769.332 858.382,781.932 858.941,777.519 859.5,805.757 860.059,766.852 860.619,762.899 861.178,757.308 861.737,753.396 862.296,750.319 862.856,726.581 863.415,723.294 863.974,735.946 864.533,749.036 865.093,744.017 865.652,775.093 866.211,766.628 866.77,762.99 867.33,760.92 867.889,724.586 868.448,673.868 869.007,676.068 869.567,645.323 870.126,633.32 870.685,621.488 871.244,608.253 871.804,581.264 872.363,584.849 872.922,604.12 873.481,575.833 874.041,575.599 874.6,563.957 875.159,570.882 875.718,574.519 876.278,562.072 876.837,553.585 877.396,607.144 877.955,626.077 878.515,626.485 879.074,662.234 879.633,680.138 880.192,678.952 880.752,708.419 881.311,708.318 881.87,721.048 882.429,704.824 882.989,722.364 883.548,722.64 884.107,752.621 884.666,716.398 885.226,695.032 885.785,680.967 886.344,666.722 886.903,682.944 887.463,683.058 888.022,650.652 888.581,638.036 889.14,607.846 889.7,625.961 890.259,579.948 890.818,568.284 891.377,557.718 891.937,581.486 892.496,602.975 893.055,575.264 893.614,582.939 894.174,591.29 894.733,562.611 895.292,590.328 895.851,580.893 896.411,586.637 896.97,590.063 897.529,577.355 898.088,583.626 898.648,605.524 899.207,604.886 899.766,609.813 900.325,644.269 900.885,627.608 901.444,679.203 902.003,659.934 902.562,725.016 903.122,738.348 903.681,687.159 904.24,705.923 904.799,704.33 905.359,702.11 905.918,685.371 906.477,653.675 907.036,652.544 907.596,635.17 908.155,621.521 908.714,609.243 909.273,611.341 909.833,627.794 910.392,628.129 910.951,666.724 911.51,654.039 912.07,639.702 912.629,677.471 913.188,661.556 913.747,683.192 914.307,679.038 914.866,665.721 915.425,683.313 915.984,672.786 916.544,660.197 917.103,657.418 917.662,655.078 918.221,655.896 918.781,659.516 919.34,661.433 919.899,693.074 920.458,675.105 921.018,674.298 921.577,690.012 922.136,690.014 922.695,724.646 923.255,705.499 923.814,709.746 924.373,708.631 924.932,723.613 925.492,753.045 926.051,783.87 926.61,780.146 927.169,777.618 927.729,836.654 928.288,814.061 928.847,772.195 929.406,820.408 929.966,814.205 930.525,807.731 931.084,798.98 931.644,778.405 932.203,806.309 932.762,798.638 933.321,811.144 933.881,803.495 934.44,766.749 934.999,762.721 935.558,790.752 936.118,798.248 936.677,776.43 937.236,769.707 937.795,782.012 938.355,748.045 938.914,757.344 939.473,721.914 940.032,752.918 940.592,753.27 941.151,730.843 941.71,728.069 942.269,726.166 942.829,713.774 943.388,711.046 943.947,722.717 944.506,732.319 945.066,725.467 945.625,706.431 946.184,736.733 946.743,750.984 947.303,750.781 947.862,749.161 948.421,731.93 948.98,749.067 949.54,729.358 950.099,740.037 950.658,735.943 951.217,737.539 951.777,749.546 952.336,749.641 952.895,732.401 953.454,759.727 954.014,771.715 954.573,782.996 955.132,789.841 955.691,784.54 956.251,749.96 956.81,716.687 957.369,711.628 957.928,691.913 958.488,691.406 959.047,688.973 959.606,672.788 960.165,689.412 960.725,706.524 961.284,642.858 961.843,658.231 962.402,692.689 962.962,694.478 963.521,693.302 964.08,711.997 964.639,692.5 965.199,690.425 965.758,676.648 966.317,679.983 966.876,667.468 967.436,636.9 967.995,650.153 968.554,669.354 969.113,639.342 969.673,642.04 970.232,641.033 970.791,645.747 971.35,631.809 971.91,618.779 972.469,639.027 973.028,642.518 973.587,675.787 974.147,677.496 974.706,678.384 975.265,677.037 975.824,646.868 976.384,650.673 976.943,652.737 977.502,669.024 978.061,664.64 978.621,650.483 979.18,653.947 979.739,657.529 980.298,641.728 980.858,657.976 981.417,647.755 981.976,646.258 982.535,662.222 983.095,678.555 983.654,711.536 984.213,697.338 984.772,729.479 985.332,741.745 985.891,735.783 986.45,750.264 987.009,728.423 987.569,712.098 988.128,695.627 988.687,693.35 989.246,659.125 989.806,676.552 990.365,689.68 990.924,752.248 991.483,750.232 992.043,729.776 992.602,728.043 993.161,694.174 993.72,663.962 994.28,666.178 994.839,700.789 995.398,682.099 995.957,702.236 996.517,734.798 997.076,716.946 997.635,713.692 998.194,743.067 998.754,759.748 999.313,787.452 999.872,744.746 1000.43,790.546 1000.99,815.623 1001.55,759.832 1002.11,723.093 1002.67,723.483 1003.23,659.242 1003.79,645.726 1004.35,598.552 1004.91,619.005 1005.46,625.522 1006.02,630.575 1006.58,635.005 1007.14,667.56 1007.7,669.45 1008.26,673.296 1008.82,643.576 1009.38,630.518 1009.94,602.658 1010.5,605.722 1011.06,629.942 1011.62,633.497 1012.18,621.077 1012.73,620.51 1013.29,625.986 1013.85,610.681 1014.41,600.815 1014.97,653.604 1015.53,657.43 1016.09,659.117 1016.65,674.719 1017.21,641.993 1017.77,646.619 1018.33,647.97 1018.89,621.413 1019.45,637.105 1020.01,655.633 1020.56,655.064 1021.12,659.488 1021.68,644.104 1022.24,631.197 1022.8,617.053 1023.36,619.259 1023.92,603.735 1024.48,608.726 1025.04,594.065 1025.6,567.626 1026.16,607.733 1026.72,577.185 1027.28,583.336 1027.83,601.541 1028.39,605.342 1028.95,626.449 1029.51,645.921 1030.07,616.611 1030.63,635.292 1031.19,619.941 1031.75,625.513 1032.31,647.168 1032.87,648.587 1033.43,666.241 1033.99,652.129 1034.55,621.636 1035.1,642.963 1035.66,613.765 1036.22,617.07 1036.78,624.391 1037.34,595.3 1037.9,616.686 1038.46,603.259 1039.02,610.086 1039.58,676.359 1040.14,676.534 1040.7,646.485 1041.26,681.83 1041.82,684.366 1042.38,687.961 1042.93,671.713 1043.49,672.886 1044.05,673.7 1044.61,688.518 1045.17,687.735 1045.73,667.122 1046.29,683.673 1046.85,681.431 1047.41,683.249 1047.97,679.392 1048.53,679.447 1049.09,678.988 1049.65,695.773 1050.2,712.513 1050.76,694.558 1051.32,709.127 1051.88,692.586 1052.44,674.795 1053,674.713 1053.56,659.531 1054.12,693.571 1054.68,690.803 1055.24,658.702 1055.8,657.649 1056.36,623.071 1056.92,639.885 1057.48,641.15 1058.03,623.351 1058.59,579.897 1059.15,588.76 1059.71,576.412 1060.27,584.427 1060.83,606.663 1061.39,627.352 1061.95,616.968 1062.51,622.206 1063.07,597.024 1063.63,633.162 1064.19,619.478 1064.75,622.566 1065.3,610.046 1065.86,612.696 1066.42,599.354 1066.98,635.721 1067.54,640.293 1068.1,624.084 1068.66,613.107 1069.22,618.921 1069.78,622.177 1070.34,626.398 1070.9,648.029 1071.46,661.799 1072.02,648.843 1072.57,645.272 1073.13,646.147 1073.69,694.925 1074.25,705.9 1074.81,722.064 1075.37,782.83 1075.93,808.395 1076.49,800.018 1077.05,795.357 1077.61,820.539 1078.17,816.375 1078.73,812.865 1079.29,793.164 1079.85,789.283 1080.4,783.523 1080.96,763.242 1081.52,803.142 1082.08,815.517 1082.64,786.459 1083.2,814.674 1083.76,808.479 1084.32,819.084 1084.88,811.838 1085.44,788.472 1086,815.95 1086.56,810.542 1087.12,831.442 1087.67,809.692 1088.23,818.295 1088.79,827.538 1089.35,818.099 1089.91,812.719 1090.47,787.69 1091.03,799.803 1091.59,748.486 1092.15,710.854 1092.71,722.53 1093.27,699.867 1093.83,650.369 1094.39,651.289 1094.94,659.021 1095.5,661.148 1096.06,678.528 1096.62,645.514 1097.18,645.819 1097.74,662.829 1098.3,662.574 1098.86,681.912 1099.42,665.379 1099.98,665.027 1100.54,714.93 1101.1,717.908 1101.66,717.748 1102.22,686.851 1102.77,653.193 1103.33,637.794 1103.89,659.333 1104.45,678.465 1105.01,665.583 1105.57,670.176 1106.13,668.787 1106.69,669.471 1107.25,688.811 1107.81,670.388 1108.37,716.225 1108.93,696.239 1109.49,680.506 1110.04,694.1 1110.6,708.638 1111.16,712.78 1111.72,694.969 1112.28,679.916 1112.84,709.685 1113.4,705.414 1113.96,704.041 1114.52,688.027 1115.08,692.236 1115.64,691.68 1116.2,692.102 1116.76,708.543 1117.31,692.67 1117.87,743.968 1118.43,738.902 1118.99,707.099 1119.55,701.271 1120.11,649.772 1120.67,633.042 1121.23,604.551 1121.79,608.175 1122.35,615.898 1122.91,684.525 1123.47,683.28 1124.03,684.103 1124.59,717.087 1125.14,713.399 1125.7,697.239 1126.26,680.101 1126.82,683.303 1127.38,685.418 1127.94,702.547 1128.5,734.765 1129.06,731.484 1129.62,712.659 1130.18,707.937 1130.74,707.933 1131.3,676.69 1131.86,677.96 1132.41,643.599 1132.97,659.765 1133.53,660.785 1134.09,691.261 1134.65,654.292 1135.21,639.458 1135.77,642.362 1136.33,662.614 1136.89,683.168 1137.45,700.611 1138.01,686.275 1138.57,698.903 1139.13,714.796 1139.68,714.457 1140.24,711.531 1140.8,693.465 1141.36,707.897 1141.92,691.85 1142.48,690.795 1143.04,675.88 1143.6,629.265 1144.16,647.944 1144.72,636.603 1145.28,670.962 1145.84,688.066 1146.4,670.49 1146.96,673.53 1147.51,677.032 1148.07,664.739 1148.63,649.553 1149.19,637.959 1149.75,625.206 1150.31,630.31 1150.87,616.95 1151.43,617.651 1151.99,604.963 1152.55,609.791 1153.11,629.144 1153.67,634.122 1154.23,618.742 1154.78,623.243 1155.34,658.565 1155.9,658.096 1156.46,628.305 1157.02,651.404 1157.58,670.853 1158.14,669.814 1158.7,673.159 1159.26,704.386 1159.82,655.227 1160.38,661.627 1160.94,664.748 1161.5,695.961 1162.05,727.668 1162.61,771.726 1163.17,751.044 1163.73,729.559 1164.29,711.778 1164.85,680.29 1165.41,648.53 1165.97,685.707 1166.53,669.204 1167.09,718.143 1167.65,729.832 1168.21,745.163 1168.77,728.257 1169.33,707.938 1169.88,690.562 1170.44,705.966 1171,705.237 1171.56,719.85 1172.12,751.053 1172.68,745.86 1173.24,725.054 1173.8,708.442 1174.36,709.154 1174.92,690.876 1175.48,671.53 1176.04,657.359 1176.6,642.984 1177.15,630.493 1177.71,616.897 1178.27,636.213 1178.83,672.666 1179.39,704.11 1179.95,701.706 1180.51,701.94 1181.07,718.615 1181.63,732.456 1182.19,716.49 1182.75,732.249 1183.31,782.7 1183.87,749.349 1184.43,700.209 1184.98,669.212 1185.54,668.376 1186.1,631.782 1186.66,598.747 1187.22,604.56 1187.78,608.288 1188.34,630.258 1188.9,585.482 1189.46,620.424 1190.02,640.195 1190.58,628.066 1191.14,613.828 1191.7,571.442 1192.25,622.202 1192.81,657.942 1193.37,690.841 1193.93,691.034 1194.49,705.599 1195.05,699.823 1195.61,717.837 1196.17,714.701 1196.73,731.195 1197.29,713.406 1197.85,711.893 1198.41,709.147 1198.97,643.353 1199.52,664.219 1200.08,684.061 1200.64,684.231 1201.2,669.708 1201.76,670.472 1202.32,685.204 1202.88,683.714 1203.44,713.417 1204,758.342 1204.56,739.235 1205.12,734.984 1205.68,748.738 1206.24,725.361 1206.8,721.97 1207.35,752.462 1207.91,748.359 1208.47,763.035 1209.03,760.608 1209.59,741.426 1210.15,718.051 1210.71,730.235 1211.27,732.242 1211.83,730.13 1212.39,710.748 1212.95,709.322 1213.51,724.162 1214.07,723.486 1214.62,735.369 1215.18,748.872 1215.74,760.547 1216.3,769.254 1216.86,782.859 1217.42,814.257 1217.98,792.272 1218.54,786.71 1219.1,747.505 1219.66,741.399 1220.22,739.94 1220.78,738.204 1221.34,739.153 1221.89,754.762 1222.45,733.89 1223.01,715.192 1223.57,683.214 1224.13,714.828 1224.69,727.71 1225.25,759.762 1225.81,772.064 1226.37,767.084 1226.93,762.973 1227.49,744.317 1228.05,725.611 1228.61,708.454 1229.17,706.396 1229.72,703.945 1230.28,700.223 1230.84,669.034 1231.4,652.024 1231.96,634.023 1232.52,622.309 1233.08,641.886 1233.64,640.245 1234.2,643.989 1234.76,631.414 1235.32,637.262 1235.88,642.47 1236.44,627.368 1236.99,582.37 1237.55,592.119 1238.11,581.575 1238.67,589.066 1239.23,595.168 1239.79,601.606 1240.35,606.374 1240.91,598.872 1241.47,619.093 1242.03,559.342 1242.59,567.111 1243.15,574.773 1243.71,595.313 1244.26,615.726 1244.82,606.997 1245.38,622.81 1245.94,627.464 1246.5,629.315 1247.06,648.359 1247.62,649.734 1248.18,669.429 1248.74,670.169 1249.3,670.979 1249.86,704.206 1250.42,701.949 1250.98,700.725 1251.54,698.938 1252.09,678.085 1252.65,706.02 1253.21,686.807 1253.77,665.818 1254.33,716.533 1254.89,718.236 1255.45,704.833 1256.01,734.45 1256.57,746.011 1257.13,743.056 1257.69,741.829 1258.25,754.004 1258.81,720.467 1259.36,686.675 1259.92,724.12 1260.48,753.281 1261.04,747.596 1261.6,759.967 1262.16,770.328 1262.72,765.461 1263.28,794.305 1263.84,755.686 1264.4,751.874 1264.96,765.351 1265.52,761.466 1266.08,755.992 1266.63,734.659 1267.19,733.435 1267.75,729.208 1268.31,709.214 1268.87,693.799 1269.43,657.832 1269.99,675.008 1270.55,659.37 1271.11,673.766 1271.67,657.307 1272.23,658.606 1272.79,643.612 1273.35,612.97 1273.91,631.771 1274.46,632.01 1275.02,634.408 1275.58,588.5 1276.14,595.959 1276.7,599.029 1277.26,619.288 1277.82,633.37 1278.38,634.502 1278.94,684.475 1279.5,685.201 1280.06,685.792 1280.62,747.539 1281.18,758.32 1281.73,771.103 1282.29,733.937 1282.85,748.877 1283.41,732.339 1283.97,711.887 1284.53,694.02 1285.09,690.222 1285.65,657.92 1286.21,690.613 1286.77,724.303 1287.33,739.291 1287.89,721.608 1288.45,699.686 1289,697.644 1289.56,682.471 1290.12,615.889 1290.68,597.641 1291.24,617.184 1291.8,570.505 1292.36,572.741 1292.92,629.247 1293.48,627.389 1294.04,616.772 1294.6,652.082 1295.16,634.038 1295.72,654.849 1296.28,654.382 1296.83,673.76 1297.39,662.461 1297.95,649.882 1298.51,631.707 1299.07,615.375 1299.63,636.853 1300.19,655.731 1300.75,640.963 1301.31,606.882 1301.87,610.924 1302.43,631.209 1302.99,616.149 1303.55,635.137 1304.1,671.749 1304.66,684.789 1305.22,700.169 1305.78,715.207 1306.34,711.954 1306.9,680.809 1307.46,666.848 1308.02,683.831 1308.58,678.654 1309.14,696.226 1309.7,661.939 1310.26,631.131 1310.82,614.303 1311.38,616.732 1311.93,637.58 1312.49,605.665 1313.05,608.509 1313.61,599.352 1314.17,602.351 1314.73,625.179 1315.29,626.925 1315.85,612.224 1316.41,598.672 1316.97,648.54 1317.53,697.009 1318.09,665.438 1318.65,697.983 1319.2,695.326 1319.76,674.584 1320.32,675.777 1320.88,675.655 1321.44,695.192 1322,695.03 1322.56,730.077 1323.12,740.189 1323.68,739.707 1324.24,691.414 1324.8,706.471 1325.36,689.739 1325.92,735.567 1326.47,766.15 1327.03,766.769 1327.59,729.942 1328.15,762.115 1328.71,743.773 1329.27,724.44 1329.83,710.325 1330.39,691.222 1330.95,706.867 1331.51,754.065 1332.07,780.564 1332.63,759.035 1333.19,774.471 1333.75,820.128 1334.3,780.801 1334.86,762.279 1335.42,712.563 1335.98,695.013 1336.54,647.893 1337.1,651.405 1337.66,686.615 1338.22,683.39 1338.78,652.612 1339.34,655.277 1339.9,624.738 1340.46,625.259 1341.02,626.808 1341.57,644.771 1342.13,680.562 1342.69,664.587 1343.25,651.708 1343.81,666.308 1344.37,648.715 1344.93,700.425 1345.49,667.529 1346.05,667.654 1346.61,701.378 1347.17,701.158 1347.73,684.256 1348.29,681.896 1348.84,697.454 1349.4,713.43 1349.96,698.676 1350.52,699.556 1351.08,717.418 1351.64,732.889 1352.2,732.387 1352.76,729.247 1353.32,729.092 1353.88,724.77 1354.44,707.24 1355,707.088 1355.56,692.981 1356.12,694.784 1356.67,691.239 1357.23,689.158 1357.79,703.901 1358.35,734.464 1358.91,731.994 1359.47,698.439 1360.03,631.143 1360.59,635.754 1361.15,638.689 1361.71,608.392 1362.27,645.744 1362.83,664.44 1363.39,620.38 1363.94,635.802 1364.5,639.571 1365.06,658.981 1365.62,677.514 1366.18,712.853 1366.74,684.407 1367.3,685.223 1367.86,667.03 1368.42,653.039 1368.98,672.987 1369.54,691.197 1370.1,693.314 1370.66,694.038 1371.21,694.948 1371.77,692.902 1372.33,658.865 1372.89,677.571 1373.45,710.407 1374.01,710.458 1374.57,690.089 1375.13,686.324 1375.69,703.978 1376.25,721.65 1376.81,703.801 1377.37,724.14 1377.93,737.795 1378.49,685.827 1379.04,684.232 1379.6,683.734 1380.16,697.581 1380.72,666.994 1381.28,697.759 1381.84,728.903 1382.4,730.728 1382.96,723.896 1383.52,719.372 1384.08,666.912 1384.64,657.557 1385.2,708.713 1385.76,743.406 1386.31,690.931 1386.87,694.523 1387.43,697.41 1387.99,699.462 1388.55,700.243 1389.11,714.744 1389.67,730.366 1390.23,728.868 1390.79,726.468 1391.35,740.218 1391.91,721.838 1392.47,721.035 1393.03,706.454 1393.58,718.224 1394.14,686.588 1394.7,684.181 1395.26,681.454 1395.82,680.721 1396.38,650.867 1396.94,634.67 1397.5,653.314 1398.06,638.531 1398.62,625.645 1399.18,614.214 1399.74,635.114 1400.3,657.108 1400.86,659.736 1401.41,677.628 1401.97,677.106 1402.53,663.238 1403.09,666.081 1403.65,685.319 1404.21,633.905 1404.77,620.19 1405.33,608.124 1405.89,598.98 1406.45,616.511 1407.01,651.221 1407.57,595.685 1408.13,605.33 1408.68,624.48 1409.24,610.134 1409.8,629.3 1410.36,615.475 1410.92,621.577 1411.48,626.155 1412.04,676.11 1412.6,693.155 1413.16,693.32 1413.72,691.164 1414.28,691.09 1414.84,679.78 1415.4,647.108 1415.95,667.219 1416.51,680.879 1417.07,630.071 1417.63,598.432 1418.19,553.322 1418.75,543.145 1419.31,551.954 1419.87,593.631 1420.43,598.108 1420.99,603.751 1421.55,611.253 1422.11,612.275 1422.67,615.674 1423.23,615.466 1423.78,619.461 1424.34,625.084 1424.9,644.814 1425.46,612.861 1426.02,631.297 1426.58,633.586 1427.14,621.968 1427.7,657.402 1428.26,662.266 1428.82,630.636 1429.38,650.678 1429.94,633.104 1430.5,671.021 1431.05,717.471 1431.61,697.73 1432.17,697.635 1432.73,699.103 1433.29,716.93 1433.85,733.042 1434.41,715.497 1434.97,717.741 1435.53,717.77 1436.09,702.946 1436.65,737.138 1437.21,687.787 1437.77,716.087 1438.33,713.04 1438.88,712.585 1439.44,682.028 1440,698.208 1440.56,731.773 1441.12,746.98 1441.68,744.503 1442.24,728.611 1442.8,728.885 1443.36,727.815 1443.92,724.116 1444.48,720.904 1445.04,735.263 1445.6,763.331 1446.15,788.911 1446.71,802.121 1447.27,762.77 1447.83,758.187 1448.39,751.746 1448.95,763.148 1449.51,758.03 1450.07,739.486 1450.63,750.992 1451.19,729.83 1451.75,712.575 1452.31,698.562 1452.87,694.678 1453.42,694.033 1453.98,742.043 1454.54,736.788 1455.1,736.838 1455.66,748.937 1456.22,712.383 1456.78,694.479 1457.34,677.065 1457.9,663.874 1458.46,714.366 1459.02,727.376 1459.58,738.872 1460.14,751.69 1460.7,730.812 1461.25,741.462 1461.81,735.362 1462.37,732.637 1462.93,727.506 1463.49,739.665 1464.05,785.534 1464.61,778.883 1465.17,773.07 1465.73,768.138 1466.29,765.128 1466.85,761.127 1467.41,772.772 1467.97,749.445 1468.52,777.906 1469.08,773.351 1469.64,733.691 1470.2,733.732 1470.76,713.177 1471.32,727.233 1471.88,713.387 1472.44,709.177 1473,707.7 1473.56,704.711 1474.12,691.688 1474.68,689.841 1475.24,658.976 1475.79,659.345 1476.35,661.75 1476.91,643.861 1477.47,626.675 1478.03,644.305 1478.59,629.805 1479.15,619.702 1479.71,591.712 1480.27,599.681 1480.83,601.063 1481.39,609.226 1481.95,645.136 1482.51,650.027 1483.07,634.85 1483.62,673.352 1484.18,691.136 1484.74,687.622 1485.3,704.172 1485.86,692.658 1486.42,708.883 1486.98,706.325 1487.54,702.619 1488.1,685.82 1488.66,699.141 1489.22,667.73 1489.78,683.09 1490.34,649.231 1490.89,632.54 1491.45,637.036 1492.01,656.196 1492.57,654.054 1493.13,669.559 1493.69,655.477 1494.25,673.073 1494.81,689.433 1495.37,674.164 1495.93,710.529 1496.49,707.928 1497.05,724.313 1497.61,690.426 1498.16,687.952 1498.72,701.202 1499.28,698.387 1499.84,725.633 1500.4,675.33 1500.96,688.831 1501.52,657.344 1502.08,644.398 1502.64,648.014 1503.2,666.594 1503.76,635.728 1504.32,655.143 1504.88,673.091 1505.44,657.115 1505.99,676.969 1506.55,677.512 1507.11,707.763 1507.67,709.469 1508.23,691.083 1508.79,641.183 1509.35,646.485 1509.91,648.2 1510.47,668.108 1511.03,655.905 1511.59,640.974 1512.15,595.59 1512.71,583.512 1513.26,603.602 1513.82,623.648 1514.38,611.462 1514.94,618.363 1515.5,621.985 1516.06,660.019 1516.62,657.66 1517.18,687.447 1517.74,687.055 1518.3,670.716 1518.86,719.89 1519.42,770.094 1519.98,810.782 1520.53,767.679 1521.09,778.166 1521.65,772.452 1522.21,815.826 1522.77,823.879 1523.33,828.608 1523.89,835.209 1524.45,826.789 1525.01,836.227 1525.57,817.97 1526.13,812.866 1526.69,810.865 1527.25,787.653 1527.81,766.138 1528.36,777.221 1528.92,755.916 1529.48,738.5 1530.04,771.299 1530.6,781.951 1531.16,729.601 1531.72,714.178 1532.28,696.755 1532.84,681.8 1533.4,697.944 1533.96,709.857 1534.52,693.53 1535.08,693.752 1535.63,710.502 1536.19,694.318 1536.75,694.181 1537.31,691.875 1537.87,691.579 1538.43,678.011 1538.99,677.312 1539.55,663.099 1540.11,663.168 1540.67,696.793 1541.23,692.504 1541.79,692.605 1542.35,709.468 1542.9,724.01 1543.46,691.317 1544.02,675.506 1544.58,673.069 1545.14,642.814 1545.7,641.9 1546.26,641.857 1546.82,644.674 1547.38,627.01 1547.94,628.958 1548.5,647.003 1549.06,635.354 1549.62,640.786 1550.18,658.465 1550.73,628.412 1551.29,615.595 1551.85,618.14 1552.41,636.078 1552.97,652.155 1553.53,652.63 1554.09,654.542 1554.65,656.962 1555.21,626.594 1555.77,648.986 1556.33,667.166 1556.89,638.874 1557.45,627.949 1558,616.467 1558.56,653.316 1559.12,672.973 1559.68,657.315 1560.24,673.258 1560.8,672.612 1561.36,705.464 1561.92,656.596 1562.48,659.53 1563.04,660.269 1563.6,676.305 1564.16,661.659 1564.72,663.369 1565.28,663.543 1565.83,667.264 1566.39,671.181 1566.95,670.616 1567.51,687.613 1568.07,669.472 1568.63,670.735 1569.19,669.409 1569.75,687.95 1570.31,683.565 1570.87,650.576 1571.43,635.26 1571.99,605.583 1572.55,575.59 1573.1,562.582 1573.66,584.513 1574.22,594.671 1574.78,585.726 1575.34,642.091 1575.9,642.999 1576.46,629.355 1577.02,649.259 1577.58,633.737 1578.14,604.235 1578.7,646.448 1579.26,635.827 1579.82,641.015 1580.37,628.351 1580.93,631.667 1581.49,602.723 1582.05,608.247 1582.61,629.608 1583.17,662.866 1583.73,663.769 1584.29,683.244 1584.85,672.175 1585.41,657.158 1585.97,639.154 1586.53,692.016 1587.09,673.186 1587.65,691.161 1588.2,656.439 1588.76,657.278 1589.32,693.933 1589.88,677.003 1590.44,679.079 1591,692.172 1591.56,691.445 1592.12,708.079 1592.68,707.89 1593.24,721.297 1593.8,719.531 1594.36,702.475 1594.92,681.542 1595.47,702.32 1596.03,715.649 1596.59,681.614 1597.15,678.602 1597.71,726.392 1598.27,724.258 1598.83,756.498 1599.39,783.171 1599.95,808.953 1600.51,837.587 1601.07,811.097 1601.63,785.642 1602.19,781.758 1602.74,760.835 1603.3,774.674 1603.86,767.645 1604.42,745.531 1604.98,693.21 1605.54,708.581 1606.1,723.347 1606.66,720.595 1607.22,690.086 1607.78,702.646 1608.34,717.848 1608.9,716.763 1609.46,679.018 1610.02,677.761 1610.57,711.188 1611.13,725.684 1611.69,738.176 1612.25,720.038 1612.81,734.617 1613.37,714.201 1613.93,713.456 1614.49,680.85 1615.05,697.546 1615.61,690.589 1616.17,719.666 1616.73,717.304 1617.29,717.201 1617.84,680.587 1618.4,699.966 1618.96,651.616 1619.52,703.503 1620.08,685.411 1620.64,717.784 1621.2,712.899 1621.76,661.53 1622.32,680.567 1622.88,651.959 1623.44,603.028 1624,611.088 1624.56,631.963 1625.11,617.624 1625.67,655.942 1626.23,640.634 1626.79,659.221 1627.35,677.219 1627.91,707.276 1628.47,704.303 1629.03,717.212 1629.59,746.556 1630.15,729.704 1630.71,694.196 1631.27,690.643 1631.83,674.936 1632.39,657.206 1632.94,659.962 1633.5,675.732 1634.06,641.056 1634.62,627.808 1635.18,648.117 1635.74,665.978 1636.3,649.62 1636.86,663.027 1637.42,665.524 1637.98,634 1638.54,635.49 1639.1,640.345 1639.66,626.615 1640.21,611.509 1640.77,615.981 1641.33,639.973 1641.89,657.699 1642.45,655.141 1643.01,658.253 1643.57,690.953 1644.13,675.767 1644.69,660.177 1645.25,660.777 1645.81,677.483 1646.37,677.288 1646.93,697.544 1647.48,729.283 1648.04,726.315 1648.6,728.093 1649.16,692.933 1649.72,676.891 1650.28,777.368 1650.84,791.162 1651.4,768.933 1651.96,748.676 1652.52,776.659 1653.08,790.173 1653.64,799.809 1654.2,776.588 1654.76,770.094 1655.31,749.275 1655.87,727.847 1656.43,740.752 1656.99,724.483 1657.55,723.661 1658.11,720.788 1658.67,717.348 1659.23,699.963 1659.79,751.703 1660.35,732.032 1660.91,696.791 1661.47,696.109 1662.03,696.444 1662.58,682.593 1663.14,684.405 1663.7,667.455 1664.26,666.403 1664.82,687.759 1665.38,719.215 1665.94,734.785 1666.5,732.244 1667.06,709.901 1667.62,690.85 1668.18,692.227 1668.74,693.799 1669.3,660.639 1669.85,694.53 1670.41,695.619 1670.97,692.712 1671.53,679.32 1672.09,664.538 1672.65,666.121 1673.21,699.759 1673.77,711.929 1674.33,742.234 1674.89,772.623 1675.45,750.826 1676.01,749.003 1676.57,743.699 1677.13,806.093 1677.68,800.842 1678.24,809.762 1678.8,800.845 1679.36,811.209 1679.92,803.838 1680.48,782.461 1681.04,763.416 1681.6,789.837 1682.16,784.713 1682.72,780.233 1683.28,808.116 1683.84,800.709 1684.4,744.658 1684.95,739.895 1685.51,752.551 1686.07,768.154 1686.63,746.625 1687.19,760.864 1687.75,744.91 1688.31,722.611 1688.87,751.335 1689.43,729.538 1689.99,708.75 1690.55,739.21 1691.11,747.704 1691.67,778.303 1692.23,820.304 1692.78,814.557 1693.34,791.907 1693.9,738.668 1694.46,734.374 1695.02,714.941 1695.58,681.426 1696.14,692.287 1696.7,678.734 1697.26,688.017 1697.82,605.324 1698.38,607.182 1698.94,576.342 1699.5,563.562 1700.05,569.943 1700.61,561.697 1701.17,517.16 1701.73,525.838 1702.29,532.749 1702.85,457.809 1703.41,469.598 1703.97,495.716 1704.53,488.827 1705.09,465.549 1705.65,476.563 1706.21,487.05 1706.77,516.155 1707.32,525.293 1707.88,552.582 1708.44,541.529 1709,551.269 1709.56,524.708 1710.12,532.053 1710.68,555.815 1711.24,563.987 1711.8,568.474 1712.36,590.733 1712.92,582.807 1713.48,592.53 1714.04,597.776 1714.6,602.41 1715.15,625.865 1715.71,627.029 1716.27,630.746 1716.83,632.397 1717.39,638.128 1717.95,658.508 1718.51,645.07 1719.07,647.695 1719.63,651.116 1720.19,651.097 1720.75,684.364 1721.31,685.811 1721.87,652.387 1722.42,621.745 1722.98,626.675 1723.54,612.478 1724.1,603.531 1724.66,622.299 1725.22,627.182 1725.78,647.788 1726.34,661.288 1726.9,678.959 1727.46,662.627 1728.02,661.42 1728.58,661.747 1729.14,662.73 1729.69,645.579 1730.25,649.225 1730.81,684.983 1731.37,669.982 1731.93,688.971 1732.49,672.877 1733.05,659.596 1733.61,676.633 1734.17,664.488 1734.73,678.73 1735.29,664.959 1735.85,632.183 1736.41,666.477 1736.97,685.077 1737.52,703.736 1738.08,702.254 1738.64,721.19 1739.2,688.305 1739.76,653.939 1740.32,689.607 1740.88,692.866 1741.44,695.939 1742,677.622 1742.56,728.39 1743.12,727.758 1743.68,754.905 1744.24,750.447 1744.79,766.875 1745.35,764.797 1745.91,746.07 1746.47,725.721 1747.03,707.201 1747.59,769.383 1748.15,732.901 1748.71,728.981 1749.27,771.328 1749.83,767.952 1750.39,732.141 1750.95,730.84 1751.51,747.31 1752.06,711.726 1752.62,690.193 1753.18,710.763 1753.74,705.498 1754.3,705.3 1754.86,658.56 1755.42,660.044 1755.98,678.049 1756.54,712.487 1757.1,725.579 1757.66,723.698 1758.22,689.751 1758.78,690.708 1759.34,687.407 1759.89,684.23 1760.45,714.134 1761.01,709.219 1761.57,688.997 1762.13,687.925 1762.69,686.829 1763.25,684.04 1763.81,687.217 1764.37,669.823 1764.93,699.048 1765.49,701.283 1766.05,681.356 1766.61,698.423 1767.16,664.272 1767.72,665.637 1768.28,651.762 1768.84,657.514 1769.4,643.222 1769.96,644.648 1770.52,612.478 1771.08,569.693 1771.64,588.38 1772.2,606.612 1772.76,611.168 1773.32,599.324 1773.88,633.981 1774.43,602.309 1774.99,607.525 1775.55,597.862 1776.11,619.665 1776.67,643.248 1777.23,648.955 1777.79,665.646 1778.35,667.471 1778.91,701.835 1779.47,699.464 1780.03,678.85 1780.59,697.262 1781.15,694.154 1781.71,678.864 1782.26,665.244 1782.82,665.553 1783.38,654.459 1783.94,638.149 1784.5,606.26 1785.06,593.266 1785.62,642.914 1786.18,676.903 1786.74,724.062 1787.3,740.65 1787.86,770.406 1788.42,766.998 1788.98,776.068 1789.53,788.381 1790.09,780.349 1790.65,757.987 1791.21,768.63 1791.77,780.533 1792.33,776.604 1792.89,755.872 1793.45,753.672 1794.01,765.044 1794.57,840.811 1795.13,831.105 1795.69,806.211 1796.25,782.797 1796.8,795.339 1797.36,806.737 1797.92,815.746 1798.48,824.639 1799.04,847.594 1799.6,822.527 1800.16,785.016 1800.72,796.392 1801.28,807.375 1801.84,804.65 1802.4,779.579 1802.96,757.109 1803.52,773.23 1804.08,770.474 1804.63,701.774 1805.19,714.417 1805.75,710.738 1806.31,660.84 1806.87,633.237 1807.43,635.419 1807.99,652.944 1808.55,637.148 1809.11,638.745 1809.67,656.745 1810.23,627.984 1810.79,647.529 1811.35,647.564 1811.9,630.618 1812.46,568.828 1813.02,574.872 1813.58,545.882 1814.14,555.489 1814.7,562.407 1815.26,581.533 1815.82,603.325 1816.38,622.946 1816.94,609.108 1817.5,629.452 1818.06,647.916 1818.62,631.815 1819.18,669.73 1819.73,683.534 1820.29,647.905 1820.85,633.758 1821.41,650.389 1821.97,667.126 1822.53,647.19 1823.09,649.31 1823.65,619.402 1824.21,603.037 1824.77,592.614 1825.33,617.858 1825.89,621.859 1826.45,625.626 1827,629.753 1827.56,661.125 1828.12,663.206 1828.68,647.757 1829.24,634.633 1829.8,621.044 1830.36,576.924 1830.92,632.566 1831.48,633.164 1832.04,638.611 1832.6,625.565 1833.16,630.482 1833.72,666.873 1834.27,668.486 1834.83,668.707 1835.39,702.908 1835.95,704.055 1836.51,707.66 1837.07,702.45 1837.63,686.459 1838.19,716.375 \"/>\n<path clip-path=\"url(#clip613)\" d=\"M720.247 691.143 L720.806 691.143 L721.365 691.143 L721.924 691.143 L722.484 691.143 L723.043 691.143 L723.602 691.143 L724.161 691.143 L724.721 691.143 L725.28 691.143 L725.839 691.143 L726.398 691.143 L726.958 691.143 L727.517 691.143 L728.076 691.143 L728.635 691.143 L729.195 691.143 L729.754 691.143 L730.313 691.143 L730.872 691.143 L731.432 691.143 L731.991 691.143 L732.55 691.143 L733.109 691.143 L733.669 691.143 L734.228 691.143 L734.787 691.143 L735.346 691.143 L735.906 691.143 L736.465 691.143 L737.024 691.143 L737.583 691.143 L738.143 691.143 L738.702 691.143 L739.261 691.143 L739.82 691.143 L740.38 691.143 L740.939 691.143 L741.498 691.143 L742.057 691.143 L742.617 691.143 L743.176 691.143 L743.735 691.143 L744.294 691.143 L744.854 691.143 L745.413 691.143 L745.972 691.143 L746.531 691.143 L747.091 691.143 L747.65 691.143 L748.209 691.143 L748.768 691.143 L749.328 691.143 L749.887 691.143 L750.446 691.143 L751.005 691.143 L751.565 691.143 L752.124 691.143 L752.683 691.143 L753.242 691.143 L753.802 691.143 L754.361 691.143 L754.92 691.143 L755.479 691.143 L756.039 691.143 L756.598 691.143 L757.157 691.143 L757.716 691.143 L758.276 691.143 L758.835 691.143 L759.394 691.143 L759.953 691.143 L760.513 691.143 L761.072 691.143 L761.631 691.143 L762.19 691.143 L762.75 691.143 L763.309 691.143 L763.868 691.143 L764.427 691.143 L764.987 691.143 L765.546 691.143 L766.105 691.143 L766.664 691.143 L767.224 691.143 L767.783 691.143 L768.342 691.143 L768.901 691.143 L769.461 691.143 L770.02 691.143 L770.579 691.143 L771.138 691.143 L771.698 691.143 L772.257 691.143 L772.816 691.143 L773.375 691.143 L773.935 691.143 L774.494 691.143 L775.053 691.143 L775.612 691.143 L776.172 691.143 L776.731 691.143 L777.29 691.143 L777.849 691.143 L778.409 691.143 L778.968 691.143 L779.527 691.143 L780.086 691.143 L780.646 691.143 L781.205 691.143 L781.764 691.143 L782.323 691.143 L782.883 691.143 L783.442 691.143 L784.001 691.143 L784.56 691.143 L785.12 691.143 L785.679 691.143 L786.238 691.143 L786.797 691.143 L787.357 691.143 L787.916 691.143 L788.475 691.143 L789.034 691.143 L789.594 691.143 L790.153 691.143 L790.712 691.143 L791.271 691.143 L791.831 691.143 L792.39 691.143 L792.949 691.143 L793.508 691.143 L794.068 691.143 L794.627 691.143 L795.186 691.143 L795.745 691.143 L796.305 691.143 L796.864 691.143 L797.423 691.143 L797.982 691.143 L798.542 691.143 L799.101 691.143 L799.66 691.143 L800.219 691.143 L800.779 691.143 L801.338 691.143 L801.897 691.143 L802.456 691.143 L803.016 691.143 L803.575 691.143 L804.134 691.143 L804.693 691.143 L805.253 691.143 L805.812 691.143 L806.371 691.143 L806.931 691.143 L807.49 691.143 L808.049 691.143 L808.608 691.143 L809.168 691.143 L809.727 691.143 L810.286 691.143 L810.845 691.143 L811.405 691.143 L811.964 691.143 L812.523 691.143 L813.082 691.143 L813.642 691.143 L814.201 691.143 L814.76 691.143 L815.319 691.143 L815.879 691.143 L816.438 691.143 L816.997 691.143 L817.556 691.143 L818.116 691.143 L818.675 691.143 L819.234 691.143 L819.793 691.143 L820.353 691.143 L820.912 691.143 L821.471 691.143 L822.03 691.143 L822.59 691.143 L823.149 691.143 L823.708 691.143 L824.267 691.143 L824.827 691.143 L825.386 691.143 L825.945 691.143 L826.504 691.143 L827.064 691.143 L827.623 691.143 L828.182 691.143 L828.741 691.143 L829.301 691.143 L829.86 691.143 L830.419 691.143 L830.978 691.143 L831.538 691.143 L832.097 691.143 L832.656 691.143 L833.215 691.143 L833.775 691.143 L834.334 691.143 L834.893 691.143 L835.452 691.143 L836.012 691.143 L836.571 691.143 L837.13 691.143 L837.689 691.143 L838.249 691.143 L838.808 691.143 L839.367 691.143 L839.926 691.143 L840.486 691.143 L841.045 691.143 L841.604 691.143 L842.163 691.143 L842.723 691.143 L843.282 691.143 L843.841 691.143 L844.4 691.143 L844.96 691.143 L845.519 691.143 L846.078 691.143 L846.637 691.143 L847.197 691.143 L847.756 691.143 L848.315 691.143 L848.874 691.143 L849.434 691.143 L849.993 691.143 L850.552 691.143 L851.111 691.143 L851.671 691.143 L852.23 691.143 L852.789 691.143 L853.348 691.143 L853.908 691.143 L854.467 691.143 L855.026 691.143 L855.585 691.143 L856.145 691.143 L856.704 691.143 L857.263 691.143 L857.822 691.143 L858.382 691.143 L858.941 691.143 L859.5 691.143 L860.059 691.143 L860.619 691.143 L861.178 691.143 L861.737 691.143 L862.296 691.143 L862.856 691.143 L863.415 691.143 L863.974 691.143 L864.533 691.143 L865.093 691.143 L865.652 691.143 L866.211 691.143 L866.77 691.143 L867.33 691.143 L867.889 691.143 L868.448 691.143 L869.007 691.143 L869.567 691.143 L870.126 691.143 L870.685 691.143 L871.244 691.143 L871.804 691.143 L872.363 691.143 L872.922 691.143 L873.481 691.143 L874.041 691.143 L874.6 691.143 L875.159 691.143 L875.718 691.143 L876.278 691.143 L876.837 691.143 L877.396 691.143 L877.955 691.143 L878.515 691.143 L879.074 691.143 L879.633 691.143 L880.192 691.143 L880.752 691.143 L881.311 691.143 L881.87 691.143 L882.429 691.143 L882.989 691.143 L883.548 691.143 L884.107 691.143 L884.666 691.143 L885.226 691.143 L885.785 691.143 L886.344 691.143 L886.903 691.143 L887.463 691.143 L888.022 691.143 L888.581 691.143 L889.14 691.143 L889.7 691.143 L890.259 691.143 L890.818 691.143 L891.377 691.143 L891.937 691.143 L892.496 691.143 L893.055 691.143 L893.614 691.143 L894.174 691.143 L894.733 691.143 L895.292 691.143 L895.851 691.143 L896.411 691.143 L896.97 691.143 L897.529 691.143 L898.088 691.143 L898.648 691.143 L899.207 691.143 L899.766 691.143 L900.325 691.143 L900.885 691.143 L901.444 691.143 L902.003 691.143 L902.562 691.143 L903.122 691.143 L903.681 691.143 L904.24 691.143 L904.799 691.143 L905.359 691.143 L905.918 691.143 L906.477 691.143 L907.036 691.143 L907.596 691.143 L908.155 691.143 L908.714 691.143 L909.273 691.143 L909.833 691.143 L910.392 691.143 L910.951 691.143 L911.51 691.143 L912.07 691.143 L912.629 691.143 L913.188 691.143 L913.747 691.143 L914.307 691.143 L914.866 691.143 L915.425 691.143 L915.984 691.143 L916.544 691.143 L917.103 691.143 L917.662 691.143 L918.221 691.143 L918.781 691.143 L919.34 691.143 L919.899 691.143 L920.458 691.143 L921.018 691.143 L921.577 691.143 L922.136 691.143 L922.695 691.143 L923.255 691.143 L923.814 691.143 L924.373 691.143 L924.932 691.143 L925.492 691.143 L926.051 691.143 L926.61 691.143 L927.169 691.143 L927.729 691.143 L928.288 691.143 L928.847 691.143 L929.406 691.143 L929.966 691.143 L930.525 691.143 L931.084 691.143 L931.644 691.143 L932.203 691.143 L932.762 691.143 L933.321 691.143 L933.881 691.143 L934.44 691.143 L934.999 691.143 L935.558 691.143 L936.118 691.143 L936.677 691.143 L937.236 691.143 L937.795 691.143 L938.355 691.143 L938.914 691.143 L939.473 691.143 L940.032 691.143 L940.592 691.143 L941.151 691.143 L941.71 691.143 L942.269 691.143 L942.829 691.143 L943.388 691.143 L943.947 691.143 L944.506 691.143 L945.066 691.143 L945.625 691.143 L946.184 691.143 L946.743 691.143 L947.303 691.143 L947.862 691.143 L948.421 691.143 L948.98 691.143 L949.54 691.143 L950.099 691.143 L950.658 691.143 L951.217 691.143 L951.777 691.143 L952.336 691.143 L952.895 691.143 L953.454 691.143 L954.014 691.143 L954.573 691.143 L955.132 691.143 L955.691 691.143 L956.251 691.143 L956.81 691.143 L957.369 691.143 L957.928 691.143 L958.488 691.143 L959.047 691.143 L959.606 691.143 L960.165 691.143 L960.725 691.143 L961.284 691.143 L961.843 691.143 L962.402 691.143 L962.962 691.143 L963.521 691.143 L964.08 691.143 L964.639 691.143 L965.199 691.143 L965.758 691.143 L966.317 691.143 L966.876 691.143 L967.436 691.143 L967.995 691.143 L968.554 691.143 L969.113 691.143 L969.673 691.143 L970.232 691.143 L970.791 691.143 L971.35 691.143 L971.91 691.143 L972.469 691.143 L973.028 691.143 L973.587 691.143 L974.147 691.143 L974.706 691.143 L975.265 691.143 L975.824 691.143 L976.384 691.143 L976.943 691.143 L977.502 691.143 L978.061 691.143 L978.621 691.143 L979.18 691.143 L979.739 691.143 L980.298 691.143 L980.858 691.143 L981.417 691.143 L981.976 691.143 L982.535 691.143 L983.095 691.143 L983.654 691.143 L984.213 691.143 L984.772 691.143 L985.332 691.143 L985.891 691.143 L986.45 691.143 L987.009 691.143 L987.569 691.143 L988.128 691.143 L988.687 691.143 L989.246 691.143 L989.806 691.143 L990.365 691.143 L990.924 691.143 L991.483 691.143 L992.043 691.143 L992.602 691.143 L993.161 691.143 L993.72 691.143 L994.28 691.143 L994.839 691.143 L995.398 691.143 L995.957 691.143 L996.517 691.143 L997.076 691.143 L997.635 691.143 L998.194 691.143 L998.754 691.143 L999.313 691.143 L999.872 691.143 L1000.43 691.143 L1000.99 691.143 L1001.55 691.143 L1002.11 691.143 L1002.67 691.143 L1003.23 691.143 L1003.79 691.143 L1004.35 691.143 L1004.91 691.143 L1005.46 691.143 L1006.02 691.143 L1006.58 691.143 L1007.14 691.143 L1007.7 691.143 L1008.26 691.143 L1008.82 691.143 L1009.38 691.143 L1009.94 691.143 L1010.5 691.143 L1011.06 691.143 L1011.62 691.143 L1012.18 691.143 L1012.73 691.143 L1013.29 691.143 L1013.85 691.143 L1014.41 691.143 L1014.97 691.143 L1015.53 691.143 L1016.09 691.143 L1016.65 691.143 L1017.21 691.143 L1017.77 691.143 L1018.33 691.143 L1018.89 691.143 L1019.45 691.143 L1020.01 691.143 L1020.56 691.143 L1021.12 691.143 L1021.68 691.143 L1022.24 691.143 L1022.8 691.143 L1023.36 691.143 L1023.92 691.143 L1024.48 691.143 L1025.04 691.143 L1025.6 691.143 L1026.16 691.143 L1026.72 691.143 L1027.28 691.143 L1027.83 691.143 L1028.39 691.143 L1028.95 691.143 L1029.51 691.143 L1030.07 691.143 L1030.63 691.143 L1031.19 691.143 L1031.75 691.143 L1032.31 691.143 L1032.87 691.143 L1033.43 691.143 L1033.99 691.143 L1034.55 691.143 L1035.1 691.143 L1035.66 691.143 L1036.22 691.143 L1036.78 691.143 L1037.34 691.143 L1037.9 691.143 L1038.46 691.143 L1039.02 691.143 L1039.58 691.143 L1040.14 691.143 L1040.7 691.143 L1041.26 691.143 L1041.82 691.143 L1042.38 691.143 L1042.93 691.143 L1043.49 691.143 L1044.05 691.143 L1044.61 691.143 L1045.17 691.143 L1045.73 691.143 L1046.29 691.143 L1046.85 691.143 L1047.41 691.143 L1047.97 691.143 L1048.53 691.143 L1049.09 691.143 L1049.65 691.143 L1050.2 691.143 L1050.76 691.143 L1051.32 691.143 L1051.88 691.143 L1052.44 691.143 L1053 691.143 L1053.56 691.143 L1054.12 691.143 L1054.68 691.143 L1055.24 691.143 L1055.8 691.143 L1056.36 691.143 L1056.92 691.143 L1057.48 691.143 L1058.03 691.143 L1058.59 691.143 L1059.15 691.143 L1059.71 691.143 L1060.27 691.143 L1060.83 691.143 L1061.39 691.143 L1061.95 691.143 L1062.51 691.143 L1063.07 691.143 L1063.63 691.143 L1064.19 691.143 L1064.75 691.143 L1065.3 691.143 L1065.86 691.143 L1066.42 691.143 L1066.98 691.143 L1067.54 691.143 L1068.1 691.143 L1068.66 691.143 L1069.22 691.143 L1069.78 691.143 L1070.34 691.143 L1070.9 691.143 L1071.46 691.143 L1072.02 691.143 L1072.57 691.143 L1073.13 691.143 L1073.69 691.143 L1074.25 691.143 L1074.81 691.143 L1075.37 691.143 L1075.93 691.143 L1076.49 691.143 L1077.05 691.143 L1077.61 691.143 L1078.17 691.143 L1078.73 691.143 L1079.29 691.143 L1079.85 691.143 L1080.4 691.143 L1080.96 691.143 L1081.52 691.143 L1082.08 691.143 L1082.64 691.143 L1083.2 691.143 L1083.76 691.143 L1084.32 691.143 L1084.88 691.143 L1085.44 691.143 L1086 691.143 L1086.56 691.143 L1087.12 691.143 L1087.67 691.143 L1088.23 691.143 L1088.79 691.143 L1089.35 691.143 L1089.91 691.143 L1090.47 691.143 L1091.03 691.143 L1091.59 691.143 L1092.15 691.143 L1092.71 691.143 L1093.27 691.143 L1093.83 691.143 L1094.39 691.143 L1094.94 691.143 L1095.5 691.143 L1096.06 691.143 L1096.62 691.143 L1097.18 691.143 L1097.74 691.143 L1098.3 691.143 L1098.86 691.143 L1099.42 691.143 L1099.98 691.143 L1100.54 691.143 L1101.1 691.143 L1101.66 691.143 L1102.22 691.143 L1102.77 691.143 L1103.33 691.143 L1103.89 691.143 L1104.45 691.143 L1105.01 691.143 L1105.57 691.143 L1106.13 691.143 L1106.69 691.143 L1107.25 691.143 L1107.81 691.143 L1108.37 691.143 L1108.93 691.143 L1109.49 691.143 L1110.04 691.143 L1110.6 691.143 L1111.16 691.143 L1111.72 691.143 L1112.28 691.143 L1112.84 691.143 L1113.4 691.143 L1113.96 691.143 L1114.52 691.143 L1115.08 691.143 L1115.64 691.143 L1116.2 691.143 L1116.76 691.143 L1117.31 691.143 L1117.87 691.143 L1118.43 691.143 L1118.99 691.143 L1119.55 691.143 L1120.11 691.143 L1120.67 691.143 L1121.23 691.143 L1121.79 691.143 L1122.35 691.143 L1122.91 691.143 L1123.47 691.143 L1124.03 691.143 L1124.59 691.143 L1125.14 691.143 L1125.7 691.143 L1126.26 691.143 L1126.82 691.143 L1127.38 691.143 L1127.94 691.143 L1128.5 691.143 L1129.06 691.143 L1129.62 691.143 L1130.18 691.143 L1130.74 691.143 L1131.3 691.143 L1131.86 691.143 L1132.41 691.143 L1132.97 691.143 L1133.53 691.143 L1134.09 691.143 L1134.65 691.143 L1135.21 691.143 L1135.77 691.143 L1136.33 691.143 L1136.89 691.143 L1137.45 691.143 L1138.01 691.143 L1138.57 691.143 L1139.13 691.143 L1139.68 691.143 L1140.24 691.143 L1140.8 691.143 L1141.36 691.143 L1141.92 691.143 L1142.48 691.143 L1143.04 691.143 L1143.6 691.143 L1144.16 691.143 L1144.72 691.143 L1145.28 691.143 L1145.84 691.143 L1146.4 691.143 L1146.96 691.143 L1147.51 691.143 L1148.07 691.143 L1148.63 691.143 L1149.19 691.143 L1149.75 691.143 L1150.31 691.143 L1150.87 691.143 L1151.43 691.143 L1151.99 691.143 L1152.55 691.143 L1153.11 691.143 L1153.67 691.143 L1154.23 691.143 L1154.78 691.143 L1155.34 691.143 L1155.9 691.143 L1156.46 691.143 L1157.02 691.143 L1157.58 691.143 L1158.14 691.143 L1158.7 691.143 L1159.26 691.143 L1159.82 691.143 L1160.38 691.143 L1160.94 691.143 L1161.5 691.143 L1162.05 691.143 L1162.61 691.143 L1163.17 691.143 L1163.73 691.143 L1164.29 691.143 L1164.85 691.143 L1165.41 691.143 L1165.97 691.143 L1166.53 691.143 L1167.09 691.143 L1167.65 691.143 L1168.21 691.143 L1168.77 691.143 L1169.33 691.143 L1169.88 691.143 L1170.44 691.143 L1171 691.143 L1171.56 691.143 L1172.12 691.143 L1172.68 691.143 L1173.24 691.143 L1173.8 691.143 L1174.36 691.143 L1174.92 691.143 L1175.48 691.143 L1176.04 691.143 L1176.6 691.143 L1177.15 691.143 L1177.71 691.143 L1178.27 691.143 L1178.83 691.143 L1179.39 691.143 L1179.95 691.143 L1180.51 691.143 L1181.07 691.143 L1181.63 691.143 L1182.19 691.143 L1182.75 691.143 L1183.31 691.143 L1183.87 691.143 L1184.43 691.143 L1184.98 691.143 L1185.54 691.143 L1186.1 691.143 L1186.66 691.143 L1187.22 691.143 L1187.78 691.143 L1188.34 691.143 L1188.9 691.143 L1189.46 691.143 L1190.02 691.143 L1190.58 691.143 L1191.14 691.143 L1191.7 691.143 L1192.25 691.143 L1192.81 691.143 L1193.37 691.143 L1193.93 691.143 L1194.49 691.143 L1195.05 691.143 L1195.61 691.143 L1196.17 691.143 L1196.73 691.143 L1197.29 691.143 L1197.85 691.143 L1198.41 691.143 L1198.97 691.143 L1199.52 691.143 L1200.08 691.143 L1200.64 691.143 L1201.2 691.143 L1201.76 691.143 L1202.32 691.143 L1202.88 691.143 L1203.44 691.143 L1204 691.143 L1204.56 691.143 L1205.12 691.143 L1205.68 691.143 L1206.24 691.143 L1206.8 691.143 L1207.35 691.143 L1207.91 691.143 L1208.47 691.143 L1209.03 691.143 L1209.59 691.143 L1210.15 691.143 L1210.71 691.143 L1211.27 691.143 L1211.83 691.143 L1212.39 691.143 L1212.95 691.143 L1213.51 691.143 L1214.07 691.143 L1214.62 691.143 L1215.18 691.143 L1215.74 691.143 L1216.3 691.143 L1216.86 691.143 L1217.42 691.143 L1217.98 691.143 L1218.54 691.143 L1219.1 691.143 L1219.66 691.143 L1220.22 691.143 L1220.78 691.143 L1221.34 691.143 L1221.89 691.143 L1222.45 691.143 L1223.01 691.143 L1223.57 691.143 L1224.13 691.143 L1224.69 691.143 L1225.25 691.143 L1225.81 691.143 L1226.37 691.143 L1226.93 691.143 L1227.49 691.143 L1228.05 691.143 L1228.61 691.143 L1229.17 691.143 L1229.72 691.143 L1230.28 691.143 L1230.84 691.143 L1231.4 691.143 L1231.96 691.143 L1232.52 691.143 L1233.08 691.143 L1233.64 691.143 L1234.2 691.143 L1234.76 691.143 L1235.32 691.143 L1235.88 691.143 L1236.44 691.143 L1236.99 691.143 L1237.55 691.143 L1238.11 691.143 L1238.67 691.143 L1239.23 691.143 L1239.79 691.143 L1240.35 691.143 L1240.91 691.143 L1241.47 691.143 L1242.03 691.143 L1242.59 691.143 L1243.15 691.143 L1243.71 691.143 L1244.26 691.143 L1244.82 691.143 L1245.38 691.143 L1245.94 691.143 L1246.5 691.143 L1247.06 691.143 L1247.62 691.143 L1248.18 691.143 L1248.74 691.143 L1249.3 691.143 L1249.86 691.143 L1250.42 691.143 L1250.98 691.143 L1251.54 691.143 L1252.09 691.143 L1252.65 691.143 L1253.21 691.143 L1253.77 691.143 L1254.33 691.143 L1254.89 691.143 L1255.45 691.143 L1256.01 691.143 L1256.57 691.143 L1257.13 691.143 L1257.69 691.143 L1258.25 691.143 L1258.81 691.143 L1259.36 691.143 L1259.92 691.143 L1260.48 691.143 L1261.04 691.143 L1261.6 691.143 L1262.16 691.143 L1262.72 691.143 L1263.28 691.143 L1263.84 691.143 L1264.4 691.143 L1264.96 691.143 L1265.52 691.143 L1266.08 691.143 L1266.63 691.143 L1267.19 691.143 L1267.75 691.143 L1268.31 691.143 L1268.87 691.143 L1269.43 691.143 L1269.99 691.143 L1270.55 691.143 L1271.11 691.143 L1271.67 691.143 L1272.23 691.143 L1272.79 691.143 L1273.35 691.143 L1273.91 691.143 L1274.46 691.143 L1275.02 691.143 L1275.58 691.143 L1276.14 691.143 L1276.7 691.143 L1277.26 691.143 L1277.82 691.143 L1278.38 691.143 L1278.94 691.143 L1279.5 691.143 L1280.06 691.143 L1280.62 691.143 L1281.18 691.143 L1281.73 691.143 L1282.29 691.143 L1282.85 691.143 L1283.41 691.143 L1283.97 691.143 L1284.53 691.143 L1285.09 691.143 L1285.65 691.143 L1286.21 691.143 L1286.77 691.143 L1287.33 691.143 L1287.89 691.143 L1288.45 691.143 L1289 691.143 L1289.56 691.143 L1290.12 691.143 L1290.68 691.143 L1291.24 691.143 L1291.8 691.143 L1292.36 691.143 L1292.92 691.143 L1293.48 691.143 L1294.04 691.143 L1294.6 691.143 L1295.16 691.143 L1295.72 691.143 L1296.28 691.143 L1296.83 691.143 L1297.39 691.143 L1297.95 691.143 L1298.51 691.143 L1299.07 691.143 L1299.63 691.143 L1300.19 691.143 L1300.75 691.143 L1301.31 691.143 L1301.87 691.143 L1302.43 691.143 L1302.99 691.143 L1303.55 691.143 L1304.1 691.143 L1304.66 691.143 L1305.22 691.143 L1305.78 691.143 L1306.34 691.143 L1306.9 691.143 L1307.46 691.143 L1308.02 691.143 L1308.58 691.143 L1309.14 691.143 L1309.7 691.143 L1310.26 691.143 L1310.82 691.143 L1311.38 691.143 L1311.93 691.143 L1312.49 691.143 L1313.05 691.143 L1313.61 691.143 L1314.17 691.143 L1314.73 691.143 L1315.29 691.143 L1315.85 691.143 L1316.41 691.143 L1316.97 691.143 L1317.53 691.143 L1318.09 691.143 L1318.65 691.143 L1319.2 691.143 L1319.76 691.143 L1320.32 691.143 L1320.88 691.143 L1321.44 691.143 L1322 691.143 L1322.56 691.143 L1323.12 691.143 L1323.68 691.143 L1324.24 691.143 L1324.8 691.143 L1325.36 691.143 L1325.92 691.143 L1326.47 691.143 L1327.03 691.143 L1327.59 691.143 L1328.15 691.143 L1328.71 691.143 L1329.27 691.143 L1329.83 691.143 L1330.39 691.143 L1330.95 691.143 L1331.51 691.143 L1332.07 691.143 L1332.63 691.143 L1333.19 691.143 L1333.75 691.143 L1334.3 691.143 L1334.86 691.143 L1335.42 691.143 L1335.98 691.143 L1336.54 691.143 L1337.1 691.143 L1337.66 691.143 L1338.22 691.143 L1338.78 691.143 L1339.34 691.143 L1339.9 691.143 L1340.46 691.143 L1341.02 691.143 L1341.57 691.143 L1342.13 691.143 L1342.69 691.143 L1343.25 691.143 L1343.81 691.143 L1344.37 691.143 L1344.93 691.143 L1345.49 691.143 L1346.05 691.143 L1346.61 691.143 L1347.17 691.143 L1347.73 691.143 L1348.29 691.143 L1348.84 691.143 L1349.4 691.143 L1349.96 691.143 L1350.52 691.143 L1351.08 691.143 L1351.64 691.143 L1352.2 691.143 L1352.76 691.143 L1353.32 691.143 L1353.88 691.143 L1354.44 691.143 L1355 691.143 L1355.56 691.143 L1356.12 691.143 L1356.67 691.143 L1357.23 691.143 L1357.79 691.143 L1358.35 691.143 L1358.91 691.143 L1359.47 691.143 L1360.03 691.143 L1360.59 691.143 L1361.15 691.143 L1361.71 691.143 L1362.27 691.143 L1362.83 691.143 L1363.39 691.143 L1363.94 691.143 L1364.5 691.143 L1365.06 691.143 L1365.62 691.143 L1366.18 691.143 L1366.74 691.143 L1367.3 691.143 L1367.86 691.143 L1368.42 691.143 L1368.98 691.143 L1369.54 691.143 L1370.1 691.143 L1370.66 691.143 L1371.21 691.143 L1371.77 691.143 L1372.33 691.143 L1372.89 691.143 L1373.45 691.143 L1374.01 691.143 L1374.57 691.143 L1375.13 691.143 L1375.69 691.143 L1376.25 691.143 L1376.81 691.143 L1377.37 691.143 L1377.93 691.143 L1378.49 691.143 L1379.04 691.143 L1379.6 691.143 L1380.16 691.143 L1380.72 691.143 L1381.28 691.143 L1381.84 691.143 L1382.4 691.143 L1382.96 691.143 L1383.52 691.143 L1384.08 691.143 L1384.64 691.143 L1385.2 691.143 L1385.76 691.143 L1386.31 691.143 L1386.87 691.143 L1387.43 691.143 L1387.99 691.143 L1388.55 691.143 L1389.11 691.143 L1389.67 691.143 L1390.23 691.143 L1390.79 691.143 L1391.35 691.143 L1391.91 691.143 L1392.47 691.143 L1393.03 691.143 L1393.58 691.143 L1394.14 691.143 L1394.7 691.143 L1395.26 691.143 L1395.82 691.143 L1396.38 691.143 L1396.94 691.143 L1397.5 691.143 L1398.06 691.143 L1398.62 691.143 L1399.18 691.143 L1399.74 691.143 L1400.3 691.143 L1400.86 691.143 L1401.41 691.143 L1401.97 691.143 L1402.53 691.143 L1403.09 691.143 L1403.65 691.143 L1404.21 691.143 L1404.77 691.143 L1405.33 691.143 L1405.89 691.143 L1406.45 691.143 L1407.01 691.143 L1407.57 691.143 L1408.13 691.143 L1408.68 691.143 L1409.24 691.143 L1409.8 691.143 L1410.36 691.143 L1410.92 691.143 L1411.48 691.143 L1412.04 691.143 L1412.6 691.143 L1413.16 691.143 L1413.72 691.143 L1414.28 691.143 L1414.84 691.143 L1415.4 691.143 L1415.95 691.143 L1416.51 691.143 L1417.07 691.143 L1417.63 691.143 L1418.19 691.143 L1418.75 691.143 L1419.31 691.143 L1419.87 691.143 L1420.43 691.143 L1420.99 691.143 L1421.55 691.143 L1422.11 691.143 L1422.67 691.143 L1423.23 691.143 L1423.78 691.143 L1424.34 691.143 L1424.9 691.143 L1425.46 691.143 L1426.02 691.143 L1426.58 691.143 L1427.14 691.143 L1427.7 691.143 L1428.26 691.143 L1428.82 691.143 L1429.38 691.143 L1429.94 691.143 L1430.5 691.143 L1431.05 691.143 L1431.61 691.143 L1432.17 691.143 L1432.73 691.143 L1433.29 691.143 L1433.85 691.143 L1434.41 691.143 L1434.97 691.143 L1435.53 691.143 L1436.09 691.143 L1436.65 691.143 L1437.21 691.143 L1437.77 691.143 L1438.33 691.143 L1438.88 691.143 L1439.44 691.143 L1440 691.143 L1440.56 691.143 L1441.12 691.143 L1441.68 691.143 L1442.24 691.143 L1442.8 691.143 L1443.36 691.143 L1443.92 691.143 L1444.48 691.143 L1445.04 691.143 L1445.6 691.143 L1446.15 691.143 L1446.71 691.143 L1447.27 691.143 L1447.83 691.143 L1448.39 691.143 L1448.95 691.143 L1449.51 691.143 L1450.07 691.143 L1450.63 691.143 L1451.19 691.143 L1451.75 691.143 L1452.31 691.143 L1452.87 691.143 L1453.42 691.143 L1453.98 691.143 L1454.54 691.143 L1455.1 691.143 L1455.66 691.143 L1456.22 691.143 L1456.78 691.143 L1457.34 691.143 L1457.9 691.143 L1458.46 691.143 L1459.02 691.143 L1459.58 691.143 L1460.14 691.143 L1460.7 691.143 L1461.25 691.143 L1461.81 691.143 L1462.37 691.143 L1462.93 691.143 L1463.49 691.143 L1464.05 691.143 L1464.61 691.143 L1465.17 691.143 L1465.73 691.143 L1466.29 691.143 L1466.85 691.143 L1467.41 691.143 L1467.97 691.143 L1468.52 691.143 L1469.08 691.143 L1469.64 691.143 L1470.2 691.143 L1470.76 691.143 L1471.32 691.143 L1471.88 691.143 L1472.44 691.143 L1473 691.143 L1473.56 691.143 L1474.12 691.143 L1474.68 691.143 L1475.24 691.143 L1475.79 691.143 L1476.35 691.143 L1476.91 691.143 L1477.47 691.143 L1478.03 691.143 L1478.59 691.143 L1479.15 691.143 L1479.71 691.143 L1480.27 691.143 L1480.83 691.143 L1481.39 691.143 L1481.95 691.143 L1482.51 691.143 L1483.07 691.143 L1483.62 691.143 L1484.18 691.143 L1484.74 691.143 L1485.3 691.143 L1485.86 691.143 L1486.42 691.143 L1486.98 691.143 L1487.54 691.143 L1488.1 691.143 L1488.66 691.143 L1489.22 691.143 L1489.78 691.143 L1490.34 691.143 L1490.89 691.143 L1491.45 691.143 L1492.01 691.143 L1492.57 691.143 L1493.13 691.143 L1493.69 691.143 L1494.25 691.143 L1494.81 691.143 L1495.37 691.143 L1495.93 691.143 L1496.49 691.143 L1497.05 691.143 L1497.61 691.143 L1498.16 691.143 L1498.72 691.143 L1499.28 691.143 L1499.84 691.143 L1500.4 691.143 L1500.96 691.143 L1501.52 691.143 L1502.08 691.143 L1502.64 691.143 L1503.2 691.143 L1503.76 691.143 L1504.32 691.143 L1504.88 691.143 L1505.44 691.143 L1505.99 691.143 L1506.55 691.143 L1507.11 691.143 L1507.67 691.143 L1508.23 691.143 L1508.79 691.143 L1509.35 691.143 L1509.91 691.143 L1510.47 691.143 L1511.03 691.143 L1511.59 691.143 L1512.15 691.143 L1512.71 691.143 L1513.26 691.143 L1513.82 691.143 L1514.38 691.143 L1514.94 691.143 L1515.5 691.143 L1516.06 691.143 L1516.62 691.143 L1517.18 691.143 L1517.74 691.143 L1518.3 691.143 L1518.86 691.143 L1519.42 691.143 L1519.98 691.143 L1520.53 691.143 L1521.09 691.143 L1521.65 691.143 L1522.21 691.143 L1522.77 691.143 L1523.33 691.143 L1523.89 691.143 L1524.45 691.143 L1525.01 691.143 L1525.57 691.143 L1526.13 691.143 L1526.69 691.143 L1527.25 691.143 L1527.81 691.143 L1528.36 691.143 L1528.92 691.143 L1529.48 691.143 L1530.04 691.143 L1530.6 691.143 L1531.16 691.143 L1531.72 691.143 L1532.28 691.143 L1532.84 691.143 L1533.4 691.143 L1533.96 691.143 L1534.52 691.143 L1535.08 691.143 L1535.63 691.143 L1536.19 691.143 L1536.75 691.143 L1537.31 691.143 L1537.87 691.143 L1538.43 691.143 L1538.99 691.143 L1539.55 691.143 L1540.11 691.143 L1540.67 691.143 L1541.23 691.143 L1541.79 691.143 L1542.35 691.143 L1542.9 691.143 L1543.46 691.143 L1544.02 691.143 L1544.58 691.143 L1545.14 691.143 L1545.7 691.143 L1546.26 691.143 L1546.82 691.143 L1547.38 691.143 L1547.94 691.143 L1548.5 691.143 L1549.06 691.143 L1549.62 691.143 L1550.18 691.143 L1550.73 691.143 L1551.29 691.143 L1551.85 691.143 L1552.41 691.143 L1552.97 691.143 L1553.53 691.143 L1554.09 691.143 L1554.65 691.143 L1555.21 691.143 L1555.77 691.143 L1556.33 691.143 L1556.89 691.143 L1557.45 691.143 L1558 691.143 L1558.56 691.143 L1559.12 691.143 L1559.68 691.143 L1560.24 691.143 L1560.8 691.143 L1561.36 691.143 L1561.92 691.143 L1562.48 691.143 L1563.04 691.143 L1563.6 691.143 L1564.16 691.143 L1564.72 691.143 L1565.28 691.143 L1565.83 691.143 L1566.39 691.143 L1566.95 691.143 L1567.51 691.143 L1568.07 691.143 L1568.63 691.143 L1569.19 691.143 L1569.75 691.143 L1570.31 691.143 L1570.87 691.143 L1571.43 691.143 L1571.99 691.143 L1572.55 691.143 L1573.1 691.143 L1573.66 691.143 L1574.22 691.143 L1574.78 691.143 L1575.34 691.143 L1575.9 691.143 L1576.46 691.143 L1577.02 691.143 L1577.58 691.143 L1578.14 691.143 L1578.7 691.143 L1579.26 691.143 L1579.82 691.143 L1580.37 691.143 L1580.93 691.143 L1581.49 691.143 L1582.05 691.143 L1582.61 691.143 L1583.17 691.143 L1583.73 691.143 L1584.29 691.143 L1584.85 691.143 L1585.41 691.143 L1585.97 691.143 L1586.53 691.143 L1587.09 691.143 L1587.65 691.143 L1588.2 691.143 L1588.76 691.143 L1589.32 691.143 L1589.88 691.143 L1590.44 691.143 L1591 691.143 L1591.56 691.143 L1592.12 691.143 L1592.68 691.143 L1593.24 691.143 L1593.8 691.143 L1594.36 691.143 L1594.92 691.143 L1595.47 691.143 L1596.03 691.143 L1596.59 691.143 L1597.15 691.143 L1597.71 691.143 L1598.27 691.143 L1598.83 691.143 L1599.39 691.143 L1599.95 691.143 L1600.51 691.143 L1601.07 691.143 L1601.63 691.143 L1602.19 691.143 L1602.74 691.143 L1603.3 691.143 L1603.86 691.143 L1604.42 691.143 L1604.98 691.143 L1605.54 691.143 L1606.1 691.143 L1606.66 691.143 L1607.22 691.143 L1607.78 691.143 L1608.34 691.143 L1608.9 691.143 L1609.46 691.143 L1610.02 691.143 L1610.57 691.143 L1611.13 691.143 L1611.69 691.143 L1612.25 691.143 L1612.81 691.143 L1613.37 691.143 L1613.93 691.143 L1614.49 691.143 L1615.05 691.143 L1615.61 691.143 L1616.17 691.143 L1616.73 691.143 L1617.29 691.143 L1617.84 691.143 L1618.4 691.143 L1618.96 691.143 L1619.52 691.143 L1620.08 691.143 L1620.64 691.143 L1621.2 691.143 L1621.76 691.143 L1622.32 691.143 L1622.88 691.143 L1623.44 691.143 L1624 691.143 L1624.56 691.143 L1625.11 691.143 L1625.67 691.143 L1626.23 691.143 L1626.79 691.143 L1627.35 691.143 L1627.91 691.143 L1628.47 691.143 L1629.03 691.143 L1629.59 691.143 L1630.15 691.143 L1630.71 691.143 L1631.27 691.143 L1631.83 691.143 L1632.39 691.143 L1632.94 691.143 L1633.5 691.143 L1634.06 691.143 L1634.62 691.143 L1635.18 691.143 L1635.74 691.143 L1636.3 691.143 L1636.86 691.143 L1637.42 691.143 L1637.98 691.143 L1638.54 691.143 L1639.1 691.143 L1639.66 691.143 L1640.21 691.143 L1640.77 691.143 L1641.33 691.143 L1641.89 691.143 L1642.45 691.143 L1643.01 691.143 L1643.57 691.143 L1644.13 691.143 L1644.69 691.143 L1645.25 691.143 L1645.81 691.143 L1646.37 691.143 L1646.93 691.143 L1647.48 691.143 L1648.04 691.143 L1648.6 691.143 L1649.16 691.143 L1649.72 691.143 L1650.28 691.143 L1650.84 691.143 L1651.4 691.143 L1651.96 691.143 L1652.52 691.143 L1653.08 691.143 L1653.64 691.143 L1654.2 691.143 L1654.76 691.143 L1655.31 691.143 L1655.87 691.143 L1656.43 691.143 L1656.99 691.143 L1657.55 691.143 L1658.11 691.143 L1658.67 691.143 L1659.23 691.143 L1659.79 691.143 L1660.35 691.143 L1660.91 691.143 L1661.47 691.143 L1662.03 691.143 L1662.58 691.143 L1663.14 691.143 L1663.7 691.143 L1664.26 691.143 L1664.82 691.143 L1665.38 691.143 L1665.94 691.143 L1666.5 691.143 L1667.06 691.143 L1667.62 691.143 L1668.18 691.143 L1668.74 691.143 L1669.3 691.143 L1669.85 691.143 L1670.41 691.143 L1670.97 691.143 L1671.53 691.143 L1672.09 691.143 L1672.65 691.143 L1673.21 691.143 L1673.77 691.143 L1674.33 691.143 L1674.89 691.143 L1675.45 691.143 L1676.01 691.143 L1676.57 691.143 L1677.13 691.143 L1677.68 691.143 L1678.24 691.143 L1678.8 691.143 L1679.36 691.143 L1679.92 691.143 L1680.48 691.143 L1681.04 691.143 L1681.6 691.143 L1682.16 691.143 L1682.72 691.143 L1683.28 691.143 L1683.84 691.143 L1684.4 691.143 L1684.95 691.143 L1685.51 691.143 L1686.07 691.143 L1686.63 691.143 L1687.19 691.143 L1687.75 691.143 L1688.31 691.143 L1688.87 691.143 L1689.43 691.143 L1689.99 691.143 L1690.55 691.143 L1691.11 691.143 L1691.67 691.143 L1692.23 691.143 L1692.78 691.143 L1693.34 691.143 L1693.9 691.143 L1694.46 691.143 L1695.02 691.143 L1695.58 691.143 L1696.14 691.143 L1696.7 691.143 L1697.26 691.143 L1697.82 691.143 L1698.38 691.143 L1698.94 691.143 L1699.5 691.143 L1700.05 691.143 L1700.61 691.143 L1701.17 691.143 L1701.73 691.143 L1702.29 691.143 L1702.85 691.143 L1703.41 691.143 L1703.97 691.143 L1704.53 691.143 L1705.09 691.143 L1705.65 691.143 L1706.21 691.143 L1706.77 691.143 L1707.32 691.143 L1707.88 691.143 L1708.44 691.143 L1709 691.143 L1709.56 691.143 L1710.12 691.143 L1710.68 691.143 L1711.24 691.143 L1711.8 691.143 L1712.36 691.143 L1712.92 691.143 L1713.48 691.143 L1714.04 691.143 L1714.6 691.143 L1715.15 691.143 L1715.71 691.143 L1716.27 691.143 L1716.83 691.143 L1717.39 691.143 L1717.95 691.143 L1718.51 691.143 L1719.07 691.143 L1719.63 691.143 L1720.19 691.143 L1720.75 691.143 L1721.31 691.143 L1721.87 691.143 L1722.42 691.143 L1722.98 691.143 L1723.54 691.143 L1724.1 691.143 L1724.66 691.143 L1725.22 691.143 L1725.78 691.143 L1726.34 691.143 L1726.9 691.143 L1727.46 691.143 L1728.02 691.143 L1728.58 691.143 L1729.14 691.143 L1729.69 691.143 L1730.25 691.143 L1730.81 691.143 L1731.37 691.143 L1731.93 691.143 L1732.49 691.143 L1733.05 691.143 L1733.61 691.143 L1734.17 691.143 L1734.73 691.143 L1735.29 691.143 L1735.85 691.143 L1736.41 691.143 L1736.97 691.143 L1737.52 691.143 L1738.08 691.143 L1738.64 691.143 L1739.2 691.143 L1739.76 691.143 L1740.32 691.143 L1740.88 691.143 L1741.44 691.143 L1742 691.143 L1742.56 691.143 L1743.12 691.143 L1743.68 691.143 L1744.24 691.143 L1744.79 691.143 L1745.35 691.143 L1745.91 691.143 L1746.47 691.143 L1747.03 691.143 L1747.59 691.143 L1748.15 691.143 L1748.71 691.143 L1749.27 691.143 L1749.83 691.143 L1750.39 691.143 L1750.95 691.143 L1751.51 691.143 L1752.06 691.143 L1752.62 691.143 L1753.18 691.143 L1753.74 691.143 L1754.3 691.143 L1754.86 691.143 L1755.42 691.143 L1755.98 691.143 L1756.54 691.143 L1757.1 691.143 L1757.66 691.143 L1758.22 691.143 L1758.78 691.143 L1759.34 691.143 L1759.89 691.143 L1760.45 691.143 L1761.01 691.143 L1761.57 691.143 L1762.13 691.143 L1762.69 691.143 L1763.25 691.143 L1763.81 691.143 L1764.37 691.143 L1764.93 691.143 L1765.49 691.143 L1766.05 691.143 L1766.61 691.143 L1767.16 691.143 L1767.72 691.143 L1768.28 691.143 L1768.84 691.143 L1769.4 691.143 L1769.96 691.143 L1770.52 691.143 L1771.08 691.143 L1771.64 691.143 L1772.2 691.143 L1772.76 691.143 L1773.32 691.143 L1773.88 691.143 L1774.43 691.143 L1774.99 691.143 L1775.55 691.143 L1776.11 691.143 L1776.67 691.143 L1777.23 691.143 L1777.79 691.143 L1778.35 691.143 L1778.91 691.143 L1779.47 691.143 L1780.03 691.143 L1780.59 691.143 L1781.15 691.143 L1781.71 691.143 L1782.26 691.143 L1782.82 691.143 L1783.38 691.143 L1783.94 691.143 L1784.5 691.143 L1785.06 691.143 L1785.62 691.143 L1786.18 691.143 L1786.74 691.143 L1787.3 691.143 L1787.86 691.143 L1788.42 691.143 L1788.98 691.143 L1789.53 691.143 L1790.09 691.143 L1790.65 691.143 L1791.21 691.143 L1791.77 691.143 L1792.33 691.143 L1792.89 691.143 L1793.45 691.143 L1794.01 691.143 L1794.57 691.143 L1795.13 691.143 L1795.69 691.143 L1796.25 691.143 L1796.8 691.143 L1797.36 691.143 L1797.92 691.143 L1798.48 691.143 L1799.04 691.143 L1799.6 691.143 L1800.16 691.143 L1800.72 691.143 L1801.28 691.143 L1801.84 691.143 L1802.4 691.143 L1802.96 691.143 L1803.52 691.143 L1804.08 691.143 L1804.63 691.143 L1805.19 691.143 L1805.75 691.143 L1806.31 691.143 L1806.87 691.143 L1807.43 691.143 L1807.99 691.143 L1808.55 691.143 L1809.11 691.143 L1809.67 691.143 L1810.23 691.143 L1810.79 691.143 L1811.35 691.143 L1811.9 691.143 L1812.46 691.143 L1813.02 691.143 L1813.58 691.143 L1814.14 691.143 L1814.7 691.143 L1815.26 691.143 L1815.82 691.143 L1816.38 691.143 L1816.94 691.143 L1817.5 691.143 L1818.06 691.143 L1818.62 691.143 L1819.18 691.143 L1819.73 691.143 L1820.29 691.143 L1820.85 691.143 L1821.41 691.143 L1821.97 691.143 L1822.53 691.143 L1823.09 691.143 L1823.65 691.143 L1824.21 691.143 L1824.77 691.143 L1825.33 691.143 L1825.89 691.143 L1826.45 691.143 L1827 691.143 L1827.56 691.143 L1828.12 691.143 L1828.68 691.143 L1829.24 691.143 L1829.8 691.143 L1830.36 691.143 L1830.92 691.143 L1831.48 691.143 L1832.04 691.143 L1832.6 691.143 L1833.16 691.143 L1833.72 691.143 L1834.27 691.143 L1834.83 691.143 L1835.39 691.143 L1835.95 691.143 L1836.51 691.143 L1837.07 691.143 L1837.63 691.143 L1838.19 691.143 L1838.19 681.274 L1837.63 681.274 L1837.07 681.274 L1836.51 681.274 L1835.95 681.274 L1835.39 681.274 L1834.83 681.274 L1834.27 681.274 L1833.72 681.274 L1833.16 681.274 L1832.6 681.274 L1832.04 681.274 L1831.48 681.274 L1830.92 681.274 L1830.36 681.274 L1829.8 681.274 L1829.24 681.274 L1828.68 681.274 L1828.12 681.274 L1827.56 681.274 L1827 681.274 L1826.45 681.274 L1825.89 681.274 L1825.33 681.274 L1824.77 681.274 L1824.21 681.274 L1823.65 681.274 L1823.09 681.274 L1822.53 681.274 L1821.97 681.274 L1821.41 681.274 L1820.85 681.274 L1820.29 681.274 L1819.73 681.274 L1819.18 681.274 L1818.62 681.274 L1818.06 681.274 L1817.5 681.274 L1816.94 681.274 L1816.38 681.274 L1815.82 681.274 L1815.26 681.274 L1814.7 681.274 L1814.14 681.274 L1813.58 681.274 L1813.02 681.274 L1812.46 681.274 L1811.9 681.274 L1811.35 681.274 L1810.79 681.274 L1810.23 681.274 L1809.67 681.274 L1809.11 681.274 L1808.55 681.274 L1807.99 681.274 L1807.43 681.274 L1806.87 681.274 L1806.31 681.274 L1805.75 681.274 L1805.19 681.274 L1804.63 681.274 L1804.08 681.274 L1803.52 681.274 L1802.96 681.274 L1802.4 681.274 L1801.84 681.274 L1801.28 681.274 L1800.72 681.274 L1800.16 681.274 L1799.6 681.274 L1799.04 681.274 L1798.48 681.274 L1797.92 681.274 L1797.36 681.274 L1796.8 681.274 L1796.25 681.274 L1795.69 681.274 L1795.13 681.274 L1794.57 681.274 L1794.01 681.274 L1793.45 681.274 L1792.89 681.274 L1792.33 681.274 L1791.77 681.274 L1791.21 681.274 L1790.65 681.274 L1790.09 681.274 L1789.53 681.274 L1788.98 681.274 L1788.42 681.274 L1787.86 681.274 L1787.3 681.274 L1786.74 681.274 L1786.18 681.274 L1785.62 681.274 L1785.06 681.274 L1784.5 681.274 L1783.94 681.274 L1783.38 681.274 L1782.82 681.274 L1782.26 681.274 L1781.71 681.274 L1781.15 681.274 L1780.59 681.274 L1780.03 681.274 L1779.47 681.274 L1778.91 681.274 L1778.35 681.274 L1777.79 681.274 L1777.23 681.274 L1776.67 681.274 L1776.11 681.274 L1775.55 681.274 L1774.99 681.274 L1774.43 681.274 L1773.88 681.274 L1773.32 681.274 L1772.76 681.274 L1772.2 681.274 L1771.64 681.274 L1771.08 681.274 L1770.52 681.274 L1769.96 681.274 L1769.4 681.274 L1768.84 681.274 L1768.28 681.274 L1767.72 681.274 L1767.16 681.274 L1766.61 681.274 L1766.05 681.274 L1765.49 681.274 L1764.93 681.274 L1764.37 681.274 L1763.81 681.274 L1763.25 681.274 L1762.69 681.274 L1762.13 681.274 L1761.57 681.274 L1761.01 681.274 L1760.45 681.274 L1759.89 681.274 L1759.34 681.274 L1758.78 681.274 L1758.22 681.274 L1757.66 681.274 L1757.1 681.274 L1756.54 681.274 L1755.98 681.274 L1755.42 681.274 L1754.86 681.274 L1754.3 681.274 L1753.74 681.274 L1753.18 681.274 L1752.62 681.274 L1752.06 681.274 L1751.51 681.274 L1750.95 681.274 L1750.39 681.274 L1749.83 681.274 L1749.27 681.274 L1748.71 681.274 L1748.15 681.274 L1747.59 681.274 L1747.03 681.274 L1746.47 681.274 L1745.91 681.274 L1745.35 681.274 L1744.79 681.274 L1744.24 681.274 L1743.68 681.274 L1743.12 681.274 L1742.56 681.274 L1742 681.274 L1741.44 681.274 L1740.88 681.274 L1740.32 681.274 L1739.76 681.274 L1739.2 681.274 L1738.64 681.274 L1738.08 681.274 L1737.52 681.274 L1736.97 681.274 L1736.41 681.274 L1735.85 681.274 L1735.29 681.274 L1734.73 681.274 L1734.17 681.274 L1733.61 681.274 L1733.05 681.274 L1732.49 681.274 L1731.93 681.274 L1731.37 681.274 L1730.81 681.274 L1730.25 681.274 L1729.69 681.274 L1729.14 681.274 L1728.58 681.274 L1728.02 681.274 L1727.46 681.274 L1726.9 681.274 L1726.34 681.274 L1725.78 681.274 L1725.22 681.274 L1724.66 681.274 L1724.1 681.274 L1723.54 681.274 L1722.98 681.274 L1722.42 681.274 L1721.87 681.274 L1721.31 681.274 L1720.75 681.274 L1720.19 681.274 L1719.63 681.274 L1719.07 681.274 L1718.51 681.274 L1717.95 681.274 L1717.39 681.274 L1716.83 681.274 L1716.27 681.274 L1715.71 681.274 L1715.15 681.274 L1714.6 681.274 L1714.04 681.274 L1713.48 681.274 L1712.92 681.274 L1712.36 681.274 L1711.8 681.274 L1711.24 681.274 L1710.68 681.274 L1710.12 681.274 L1709.56 681.274 L1709 681.274 L1708.44 681.274 L1707.88 681.274 L1707.32 681.274 L1706.77 681.274 L1706.21 681.274 L1705.65 681.274 L1705.09 681.274 L1704.53 681.274 L1703.97 681.274 L1703.41 681.274 L1702.85 681.274 L1702.29 681.274 L1701.73 681.274 L1701.17 681.274 L1700.61 681.274 L1700.05 681.274 L1699.5 681.274 L1698.94 681.274 L1698.38 681.274 L1697.82 681.274 L1697.26 681.274 L1696.7 681.274 L1696.14 681.274 L1695.58 681.274 L1695.02 681.274 L1694.46 681.274 L1693.9 681.274 L1693.34 681.274 L1692.78 681.274 L1692.23 681.274 L1691.67 681.274 L1691.11 681.274 L1690.55 681.274 L1689.99 681.274 L1689.43 681.274 L1688.87 681.274 L1688.31 681.274 L1687.75 681.274 L1687.19 681.274 L1686.63 681.274 L1686.07 681.274 L1685.51 681.274 L1684.95 681.274 L1684.4 681.274 L1683.84 681.274 L1683.28 681.274 L1682.72 681.274 L1682.16 681.274 L1681.6 681.274 L1681.04 681.274 L1680.48 681.274 L1679.92 681.274 L1679.36 681.274 L1678.8 681.274 L1678.24 681.274 L1677.68 681.274 L1677.13 681.274 L1676.57 681.274 L1676.01 681.274 L1675.45 681.274 L1674.89 681.274 L1674.33 681.274 L1673.77 681.274 L1673.21 681.274 L1672.65 681.274 L1672.09 681.274 L1671.53 681.274 L1670.97 681.274 L1670.41 681.274 L1669.85 681.274 L1669.3 681.274 L1668.74 681.274 L1668.18 681.274 L1667.62 681.274 L1667.06 681.274 L1666.5 681.274 L1665.94 681.274 L1665.38 681.274 L1664.82 681.274 L1664.26 681.274 L1663.7 681.274 L1663.14 681.274 L1662.58 681.274 L1662.03 681.274 L1661.47 681.274 L1660.91 681.274 L1660.35 681.274 L1659.79 681.274 L1659.23 681.274 L1658.67 681.274 L1658.11 681.274 L1657.55 681.274 L1656.99 681.274 L1656.43 681.274 L1655.87 681.274 L1655.31 681.274 L1654.76 681.274 L1654.2 681.274 L1653.64 681.274 L1653.08 681.274 L1652.52 681.274 L1651.96 681.274 L1651.4 681.274 L1650.84 681.274 L1650.28 681.274 L1649.72 681.274 L1649.16 681.274 L1648.6 681.274 L1648.04 681.274 L1647.48 681.274 L1646.93 681.274 L1646.37 681.274 L1645.81 681.274 L1645.25 681.274 L1644.69 681.274 L1644.13 681.274 L1643.57 681.274 L1643.01 681.274 L1642.45 681.274 L1641.89 681.274 L1641.33 681.274 L1640.77 681.274 L1640.21 681.274 L1639.66 681.274 L1639.1 681.274 L1638.54 681.274 L1637.98 681.274 L1637.42 681.274 L1636.86 681.274 L1636.3 681.274 L1635.74 681.274 L1635.18 681.274 L1634.62 681.274 L1634.06 681.274 L1633.5 681.274 L1632.94 681.274 L1632.39 681.274 L1631.83 681.274 L1631.27 681.274 L1630.71 681.274 L1630.15 681.274 L1629.59 681.274 L1629.03 681.274 L1628.47 681.274 L1627.91 681.274 L1627.35 681.274 L1626.79 681.274 L1626.23 681.274 L1625.67 681.274 L1625.11 681.274 L1624.56 681.274 L1624 681.274 L1623.44 681.274 L1622.88 681.274 L1622.32 681.274 L1621.76 681.274 L1621.2 681.274 L1620.64 681.274 L1620.08 681.274 L1619.52 681.274 L1618.96 681.274 L1618.4 681.274 L1617.84 681.274 L1617.29 681.274 L1616.73 681.274 L1616.17 681.274 L1615.61 681.274 L1615.05 681.274 L1614.49 681.274 L1613.93 681.274 L1613.37 681.274 L1612.81 681.274 L1612.25 681.274 L1611.69 681.274 L1611.13 681.274 L1610.57 681.274 L1610.02 681.274 L1609.46 681.274 L1608.9 681.274 L1608.34 681.274 L1607.78 681.274 L1607.22 681.274 L1606.66 681.274 L1606.1 681.274 L1605.54 681.274 L1604.98 681.274 L1604.42 681.274 L1603.86 681.274 L1603.3 681.274 L1602.74 681.274 L1602.19 681.274 L1601.63 681.274 L1601.07 681.274 L1600.51 681.274 L1599.95 681.274 L1599.39 681.274 L1598.83 681.274 L1598.27 681.274 L1597.71 681.274 L1597.15 681.274 L1596.59 681.274 L1596.03 681.274 L1595.47 681.274 L1594.92 681.274 L1594.36 681.274 L1593.8 681.274 L1593.24 681.274 L1592.68 681.274 L1592.12 681.274 L1591.56 681.274 L1591 681.274 L1590.44 681.274 L1589.88 681.274 L1589.32 681.274 L1588.76 681.274 L1588.2 681.274 L1587.65 681.274 L1587.09 681.274 L1586.53 681.274 L1585.97 681.274 L1585.41 681.274 L1584.85 681.274 L1584.29 681.274 L1583.73 681.274 L1583.17 681.274 L1582.61 681.274 L1582.05 681.274 L1581.49 681.274 L1580.93 681.274 L1580.37 681.274 L1579.82 681.274 L1579.26 681.274 L1578.7 681.274 L1578.14 681.274 L1577.58 681.274 L1577.02 681.274 L1576.46 681.274 L1575.9 681.274 L1575.34 681.274 L1574.78 681.274 L1574.22 681.274 L1573.66 681.274 L1573.1 681.274 L1572.55 681.274 L1571.99 681.274 L1571.43 681.274 L1570.87 681.274 L1570.31 681.274 L1569.75 681.274 L1569.19 681.274 L1568.63 681.274 L1568.07 681.274 L1567.51 681.274 L1566.95 681.274 L1566.39 681.274 L1565.83 681.274 L1565.28 681.274 L1564.72 681.274 L1564.16 681.274 L1563.6 681.274 L1563.04 681.274 L1562.48 681.274 L1561.92 681.274 L1561.36 681.274 L1560.8 681.274 L1560.24 681.274 L1559.68 681.274 L1559.12 681.274 L1558.56 681.274 L1558 681.274 L1557.45 681.274 L1556.89 681.274 L1556.33 681.274 L1555.77 681.274 L1555.21 681.274 L1554.65 681.274 L1554.09 681.274 L1553.53 681.274 L1552.97 681.274 L1552.41 681.274 L1551.85 681.274 L1551.29 681.274 L1550.73 681.274 L1550.18 681.274 L1549.62 681.274 L1549.06 681.274 L1548.5 681.274 L1547.94 681.274 L1547.38 681.274 L1546.82 681.274 L1546.26 681.274 L1545.7 681.274 L1545.14 681.274 L1544.58 681.274 L1544.02 681.274 L1543.46 681.274 L1542.9 681.274 L1542.35 681.274 L1541.79 681.274 L1541.23 681.274 L1540.67 681.274 L1540.11 681.274 L1539.55 681.274 L1538.99 681.274 L1538.43 681.274 L1537.87 681.274 L1537.31 681.274 L1536.75 681.274 L1536.19 681.274 L1535.63 681.274 L1535.08 681.274 L1534.52 681.274 L1533.96 681.274 L1533.4 681.274 L1532.84 681.274 L1532.28 681.274 L1531.72 681.274 L1531.16 681.274 L1530.6 681.274 L1530.04 681.274 L1529.48 681.274 L1528.92 681.274 L1528.36 681.274 L1527.81 681.274 L1527.25 681.274 L1526.69 681.274 L1526.13 681.274 L1525.57 681.274 L1525.01 681.274 L1524.45 681.274 L1523.89 681.274 L1523.33 681.274 L1522.77 681.274 L1522.21 681.274 L1521.65 681.274 L1521.09 681.274 L1520.53 681.274 L1519.98 681.274 L1519.42 681.274 L1518.86 681.274 L1518.3 681.274 L1517.74 681.274 L1517.18 681.274 L1516.62 681.274 L1516.06 681.274 L1515.5 681.274 L1514.94 681.274 L1514.38 681.274 L1513.82 681.274 L1513.26 681.274 L1512.71 681.274 L1512.15 681.274 L1511.59 681.274 L1511.03 681.274 L1510.47 681.274 L1509.91 681.274 L1509.35 681.274 L1508.79 681.274 L1508.23 681.274 L1507.67 681.274 L1507.11 681.274 L1506.55 681.274 L1505.99 681.274 L1505.44 681.274 L1504.88 681.274 L1504.32 681.274 L1503.76 681.274 L1503.2 681.274 L1502.64 681.274 L1502.08 681.274 L1501.52 681.274 L1500.96 681.274 L1500.4 681.274 L1499.84 681.274 L1499.28 681.274 L1498.72 681.274 L1498.16 681.274 L1497.61 681.274 L1497.05 681.274 L1496.49 681.274 L1495.93 681.274 L1495.37 681.274 L1494.81 681.274 L1494.25 681.274 L1493.69 681.274 L1493.13 681.274 L1492.57 681.274 L1492.01 681.274 L1491.45 681.274 L1490.89 681.274 L1490.34 681.274 L1489.78 681.274 L1489.22 681.274 L1488.66 681.274 L1488.1 681.274 L1487.54 681.274 L1486.98 681.274 L1486.42 681.274 L1485.86 681.274 L1485.3 681.274 L1484.74 681.274 L1484.18 681.274 L1483.62 681.274 L1483.07 681.274 L1482.51 681.274 L1481.95 681.274 L1481.39 681.274 L1480.83 681.274 L1480.27 681.274 L1479.71 681.274 L1479.15 681.274 L1478.59 681.274 L1478.03 681.274 L1477.47 681.274 L1476.91 681.274 L1476.35 681.274 L1475.79 681.274 L1475.24 681.274 L1474.68 681.274 L1474.12 681.274 L1473.56 681.274 L1473 681.274 L1472.44 681.274 L1471.88 681.274 L1471.32 681.274 L1470.76 681.274 L1470.2 681.274 L1469.64 681.274 L1469.08 681.274 L1468.52 681.274 L1467.97 681.274 L1467.41 681.274 L1466.85 681.274 L1466.29 681.274 L1465.73 681.274 L1465.17 681.274 L1464.61 681.274 L1464.05 681.274 L1463.49 681.274 L1462.93 681.274 L1462.37 681.274 L1461.81 681.274 L1461.25 681.274 L1460.7 681.274 L1460.14 681.274 L1459.58 681.274 L1459.02 681.274 L1458.46 681.274 L1457.9 681.274 L1457.34 681.274 L1456.78 681.274 L1456.22 681.274 L1455.66 681.274 L1455.1 681.274 L1454.54 681.274 L1453.98 681.274 L1453.42 681.274 L1452.87 681.274 L1452.31 681.274 L1451.75 681.274 L1451.19 681.274 L1450.63 681.274 L1450.07 681.274 L1449.51 681.274 L1448.95 681.274 L1448.39 681.274 L1447.83 681.274 L1447.27 681.274 L1446.71 681.274 L1446.15 681.274 L1445.6 681.274 L1445.04 681.274 L1444.48 681.274 L1443.92 681.274 L1443.36 681.274 L1442.8 681.274 L1442.24 681.274 L1441.68 681.274 L1441.12 681.274 L1440.56 681.274 L1440 681.274 L1439.44 681.274 L1438.88 681.274 L1438.33 681.274 L1437.77 681.274 L1437.21 681.274 L1436.65 681.274 L1436.09 681.274 L1435.53 681.274 L1434.97 681.274 L1434.41 681.274 L1433.85 681.274 L1433.29 681.274 L1432.73 681.274 L1432.17 681.274 L1431.61 681.274 L1431.05 681.274 L1430.5 681.274 L1429.94 681.274 L1429.38 681.274 L1428.82 681.274 L1428.26 681.274 L1427.7 681.274 L1427.14 681.274 L1426.58 681.274 L1426.02 681.274 L1425.46 681.274 L1424.9 681.274 L1424.34 681.274 L1423.78 681.274 L1423.23 681.274 L1422.67 681.274 L1422.11 681.274 L1421.55 681.274 L1420.99 681.274 L1420.43 681.274 L1419.87 681.274 L1419.31 681.274 L1418.75 681.274 L1418.19 681.274 L1417.63 681.274 L1417.07 681.274 L1416.51 681.274 L1415.95 681.274 L1415.4 681.274 L1414.84 681.274 L1414.28 681.274 L1413.72 681.274 L1413.16 681.274 L1412.6 681.274 L1412.04 681.274 L1411.48 681.274 L1410.92 681.274 L1410.36 681.274 L1409.8 681.274 L1409.24 681.274 L1408.68 681.274 L1408.13 681.274 L1407.57 681.274 L1407.01 681.274 L1406.45 681.274 L1405.89 681.274 L1405.33 681.274 L1404.77 681.274 L1404.21 681.274 L1403.65 681.274 L1403.09 681.274 L1402.53 681.274 L1401.97 681.274 L1401.41 681.274 L1400.86 681.274 L1400.3 681.274 L1399.74 681.274 L1399.18 681.274 L1398.62 681.274 L1398.06 681.274 L1397.5 681.274 L1396.94 681.274 L1396.38 681.274 L1395.82 681.274 L1395.26 681.274 L1394.7 681.274 L1394.14 681.274 L1393.58 681.274 L1393.03 681.274 L1392.47 681.274 L1391.91 681.274 L1391.35 681.274 L1390.79 681.274 L1390.23 681.274 L1389.67 681.274 L1389.11 681.274 L1388.55 681.274 L1387.99 681.274 L1387.43 681.274 L1386.87 681.274 L1386.31 681.274 L1385.76 681.274 L1385.2 681.274 L1384.64 681.274 L1384.08 681.274 L1383.52 681.274 L1382.96 681.274 L1382.4 681.274 L1381.84 681.274 L1381.28 681.274 L1380.72 681.274 L1380.16 681.274 L1379.6 681.274 L1379.04 681.274 L1378.49 681.274 L1377.93 681.274 L1377.37 681.274 L1376.81 681.274 L1376.25 681.274 L1375.69 681.274 L1375.13 681.274 L1374.57 681.274 L1374.01 681.274 L1373.45 681.274 L1372.89 681.274 L1372.33 681.274 L1371.77 681.274 L1371.21 681.274 L1370.66 681.274 L1370.1 681.274 L1369.54 681.274 L1368.98 681.274 L1368.42 681.274 L1367.86 681.274 L1367.3 681.274 L1366.74 681.274 L1366.18 681.274 L1365.62 681.274 L1365.06 681.274 L1364.5 681.274 L1363.94 681.274 L1363.39 681.274 L1362.83 681.274 L1362.27 681.274 L1361.71 681.274 L1361.15 681.274 L1360.59 681.274 L1360.03 681.274 L1359.47 681.274 L1358.91 681.274 L1358.35 681.274 L1357.79 681.274 L1357.23 681.274 L1356.67 681.274 L1356.12 681.274 L1355.56 681.274 L1355 681.274 L1354.44 681.274 L1353.88 681.274 L1353.32 681.274 L1352.76 681.274 L1352.2 681.274 L1351.64 681.274 L1351.08 681.274 L1350.52 681.274 L1349.96 681.274 L1349.4 681.274 L1348.84 681.274 L1348.29 681.274 L1347.73 681.274 L1347.17 681.274 L1346.61 681.274 L1346.05 681.274 L1345.49 681.274 L1344.93 681.274 L1344.37 681.274 L1343.81 681.274 L1343.25 681.274 L1342.69 681.274 L1342.13 681.274 L1341.57 681.274 L1341.02 681.274 L1340.46 681.274 L1339.9 681.274 L1339.34 681.274 L1338.78 681.274 L1338.22 681.274 L1337.66 681.274 L1337.1 681.274 L1336.54 681.274 L1335.98 681.274 L1335.42 681.274 L1334.86 681.274 L1334.3 681.274 L1333.75 681.274 L1333.19 681.274 L1332.63 681.274 L1332.07 681.274 L1331.51 681.274 L1330.95 681.274 L1330.39 681.274 L1329.83 681.274 L1329.27 681.274 L1328.71 681.274 L1328.15 681.274 L1327.59 681.274 L1327.03 681.274 L1326.47 681.274 L1325.92 681.274 L1325.36 681.274 L1324.8 681.274 L1324.24 681.274 L1323.68 681.274 L1323.12 681.274 L1322.56 681.274 L1322 681.274 L1321.44 681.274 L1320.88 681.274 L1320.32 681.274 L1319.76 681.274 L1319.2 681.274 L1318.65 681.274 L1318.09 681.274 L1317.53 681.274 L1316.97 681.274 L1316.41 681.274 L1315.85 681.274 L1315.29 681.274 L1314.73 681.274 L1314.17 681.274 L1313.61 681.274 L1313.05 681.274 L1312.49 681.274 L1311.93 681.274 L1311.38 681.274 L1310.82 681.274 L1310.26 681.274 L1309.7 681.274 L1309.14 681.274 L1308.58 681.274 L1308.02 681.274 L1307.46 681.274 L1306.9 681.274 L1306.34 681.274 L1305.78 681.274 L1305.22 681.274 L1304.66 681.274 L1304.1 681.274 L1303.55 681.274 L1302.99 681.274 L1302.43 681.274 L1301.87 681.274 L1301.31 681.274 L1300.75 681.274 L1300.19 681.274 L1299.63 681.274 L1299.07 681.274 L1298.51 681.274 L1297.95 681.274 L1297.39 681.274 L1296.83 681.274 L1296.28 681.274 L1295.72 681.274 L1295.16 681.274 L1294.6 681.274 L1294.04 681.274 L1293.48 681.274 L1292.92 681.274 L1292.36 681.274 L1291.8 681.274 L1291.24 681.274 L1290.68 681.274 L1290.12 681.274 L1289.56 681.274 L1289 681.274 L1288.45 681.274 L1287.89 681.274 L1287.33 681.274 L1286.77 681.274 L1286.21 681.274 L1285.65 681.274 L1285.09 681.274 L1284.53 681.274 L1283.97 681.274 L1283.41 681.274 L1282.85 681.274 L1282.29 681.274 L1281.73 681.274 L1281.18 681.274 L1280.62 681.274 L1280.06 681.274 L1279.5 681.274 L1278.94 681.274 L1278.38 681.274 L1277.82 681.274 L1277.26 681.274 L1276.7 681.274 L1276.14 681.274 L1275.58 681.274 L1275.02 681.274 L1274.46 681.274 L1273.91 681.274 L1273.35 681.274 L1272.79 681.274 L1272.23 681.274 L1271.67 681.274 L1271.11 681.274 L1270.55 681.274 L1269.99 681.274 L1269.43 681.274 L1268.87 681.274 L1268.31 681.274 L1267.75 681.274 L1267.19 681.274 L1266.63 681.274 L1266.08 681.274 L1265.52 681.274 L1264.96 681.274 L1264.4 681.274 L1263.84 681.274 L1263.28 681.274 L1262.72 681.274 L1262.16 681.274 L1261.6 681.274 L1261.04 681.274 L1260.48 681.274 L1259.92 681.274 L1259.36 681.274 L1258.81 681.274 L1258.25 681.274 L1257.69 681.274 L1257.13 681.274 L1256.57 681.274 L1256.01 681.274 L1255.45 681.274 L1254.89 681.274 L1254.33 681.274 L1253.77 681.274 L1253.21 681.274 L1252.65 681.274 L1252.09 681.274 L1251.54 681.274 L1250.98 681.274 L1250.42 681.274 L1249.86 681.274 L1249.3 681.274 L1248.74 681.274 L1248.18 681.274 L1247.62 681.274 L1247.06 681.274 L1246.5 681.274 L1245.94 681.274 L1245.38 681.274 L1244.82 681.274 L1244.26 681.274 L1243.71 681.274 L1243.15 681.274 L1242.59 681.274 L1242.03 681.274 L1241.47 681.274 L1240.91 681.274 L1240.35 681.274 L1239.79 681.274 L1239.23 681.274 L1238.67 681.274 L1238.11 681.274 L1237.55 681.274 L1236.99 681.274 L1236.44 681.274 L1235.88 681.274 L1235.32 681.274 L1234.76 681.274 L1234.2 681.274 L1233.64 681.274 L1233.08 681.274 L1232.52 681.274 L1231.96 681.274 L1231.4 681.274 L1230.84 681.274 L1230.28 681.274 L1229.72 681.274 L1229.17 681.274 L1228.61 681.274 L1228.05 681.274 L1227.49 681.274 L1226.93 681.274 L1226.37 681.274 L1225.81 681.274 L1225.25 681.274 L1224.69 681.274 L1224.13 681.274 L1223.57 681.274 L1223.01 681.274 L1222.45 681.274 L1221.89 681.274 L1221.34 681.274 L1220.78 681.274 L1220.22 681.274 L1219.66 681.274 L1219.1 681.274 L1218.54 681.274 L1217.98 681.274 L1217.42 681.274 L1216.86 681.274 L1216.3 681.274 L1215.74 681.274 L1215.18 681.274 L1214.62 681.274 L1214.07 681.274 L1213.51 681.274 L1212.95 681.274 L1212.39 681.274 L1211.83 681.274 L1211.27 681.274 L1210.71 681.274 L1210.15 681.274 L1209.59 681.274 L1209.03 681.274 L1208.47 681.274 L1207.91 681.274 L1207.35 681.274 L1206.8 681.274 L1206.24 681.274 L1205.68 681.274 L1205.12 681.274 L1204.56 681.274 L1204 681.274 L1203.44 681.274 L1202.88 681.274 L1202.32 681.274 L1201.76 681.274 L1201.2 681.274 L1200.64 681.274 L1200.08 681.274 L1199.52 681.274 L1198.97 681.274 L1198.41 681.274 L1197.85 681.274 L1197.29 681.274 L1196.73 681.274 L1196.17 681.274 L1195.61 681.274 L1195.05 681.274 L1194.49 681.274 L1193.93 681.274 L1193.37 681.274 L1192.81 681.274 L1192.25 681.274 L1191.7 681.274 L1191.14 681.274 L1190.58 681.274 L1190.02 681.274 L1189.46 681.274 L1188.9 681.274 L1188.34 681.274 L1187.78 681.274 L1187.22 681.274 L1186.66 681.274 L1186.1 681.274 L1185.54 681.274 L1184.98 681.274 L1184.43 681.274 L1183.87 681.274 L1183.31 681.274 L1182.75 681.274 L1182.19 681.274 L1181.63 681.274 L1181.07 681.274 L1180.51 681.274 L1179.95 681.274 L1179.39 681.274 L1178.83 681.274 L1178.27 681.274 L1177.71 681.274 L1177.15 681.274 L1176.6 681.274 L1176.04 681.274 L1175.48 681.274 L1174.92 681.274 L1174.36 681.274 L1173.8 681.274 L1173.24 681.274 L1172.68 681.274 L1172.12 681.274 L1171.56 681.274 L1171 681.274 L1170.44 681.274 L1169.88 681.274 L1169.33 681.274 L1168.77 681.274 L1168.21 681.274 L1167.65 681.274 L1167.09 681.274 L1166.53 681.274 L1165.97 681.274 L1165.41 681.274 L1164.85 681.274 L1164.29 681.274 L1163.73 681.274 L1163.17 681.274 L1162.61 681.274 L1162.05 681.274 L1161.5 681.274 L1160.94 681.274 L1160.38 681.274 L1159.82 681.274 L1159.26 681.274 L1158.7 681.274 L1158.14 681.274 L1157.58 681.274 L1157.02 681.274 L1156.46 681.274 L1155.9 681.274 L1155.34 681.274 L1154.78 681.274 L1154.23 681.274 L1153.67 681.274 L1153.11 681.274 L1152.55 681.274 L1151.99 681.274 L1151.43 681.274 L1150.87 681.274 L1150.31 681.274 L1149.75 681.274 L1149.19 681.274 L1148.63 681.274 L1148.07 681.274 L1147.51 681.274 L1146.96 681.274 L1146.4 681.274 L1145.84 681.274 L1145.28 681.274 L1144.72 681.274 L1144.16 681.274 L1143.6 681.274 L1143.04 681.274 L1142.48 681.274 L1141.92 681.274 L1141.36 681.274 L1140.8 681.274 L1140.24 681.274 L1139.68 681.274 L1139.13 681.274 L1138.57 681.274 L1138.01 681.274 L1137.45 681.274 L1136.89 681.274 L1136.33 681.274 L1135.77 681.274 L1135.21 681.274 L1134.65 681.274 L1134.09 681.274 L1133.53 681.274 L1132.97 681.274 L1132.41 681.274 L1131.86 681.274 L1131.3 681.274 L1130.74 681.274 L1130.18 681.274 L1129.62 681.274 L1129.06 681.274 L1128.5 681.274 L1127.94 681.274 L1127.38 681.274 L1126.82 681.274 L1126.26 681.274 L1125.7 681.274 L1125.14 681.274 L1124.59 681.274 L1124.03 681.274 L1123.47 681.274 L1122.91 681.274 L1122.35 681.274 L1121.79 681.274 L1121.23 681.274 L1120.67 681.274 L1120.11 681.274 L1119.55 681.274 L1118.99 681.274 L1118.43 681.274 L1117.87 681.274 L1117.31 681.274 L1116.76 681.274 L1116.2 681.274 L1115.64 681.274 L1115.08 681.274 L1114.52 681.274 L1113.96 681.274 L1113.4 681.274 L1112.84 681.274 L1112.28 681.274 L1111.72 681.274 L1111.16 681.274 L1110.6 681.274 L1110.04 681.274 L1109.49 681.274 L1108.93 681.274 L1108.37 681.274 L1107.81 681.274 L1107.25 681.274 L1106.69 681.274 L1106.13 681.274 L1105.57 681.274 L1105.01 681.274 L1104.45 681.274 L1103.89 681.274 L1103.33 681.274 L1102.77 681.274 L1102.22 681.274 L1101.66 681.274 L1101.1 681.274 L1100.54 681.274 L1099.98 681.274 L1099.42 681.274 L1098.86 681.274 L1098.3 681.274 L1097.74 681.274 L1097.18 681.274 L1096.62 681.274 L1096.06 681.274 L1095.5 681.274 L1094.94 681.274 L1094.39 681.274 L1093.83 681.274 L1093.27 681.274 L1092.71 681.274 L1092.15 681.274 L1091.59 681.274 L1091.03 681.274 L1090.47 681.274 L1089.91 681.274 L1089.35 681.274 L1088.79 681.274 L1088.23 681.274 L1087.67 681.274 L1087.12 681.274 L1086.56 681.274 L1086 681.274 L1085.44 681.274 L1084.88 681.274 L1084.32 681.274 L1083.76 681.274 L1083.2 681.274 L1082.64 681.274 L1082.08 681.274 L1081.52 681.274 L1080.96 681.274 L1080.4 681.274 L1079.85 681.274 L1079.29 681.274 L1078.73 681.274 L1078.17 681.274 L1077.61 681.274 L1077.05 681.274 L1076.49 681.274 L1075.93 681.274 L1075.37 681.274 L1074.81 681.274 L1074.25 681.274 L1073.69 681.274 L1073.13 681.274 L1072.57 681.274 L1072.02 681.274 L1071.46 681.274 L1070.9 681.274 L1070.34 681.274 L1069.78 681.274 L1069.22 681.274 L1068.66 681.274 L1068.1 681.274 L1067.54 681.274 L1066.98 681.274 L1066.42 681.274 L1065.86 681.274 L1065.3 681.274 L1064.75 681.274 L1064.19 681.274 L1063.63 681.274 L1063.07 681.274 L1062.51 681.274 L1061.95 681.274 L1061.39 681.274 L1060.83 681.274 L1060.27 681.274 L1059.71 681.274 L1059.15 681.274 L1058.59 681.274 L1058.03 681.274 L1057.48 681.274 L1056.92 681.274 L1056.36 681.274 L1055.8 681.274 L1055.24 681.274 L1054.68 681.274 L1054.12 681.274 L1053.56 681.274 L1053 681.274 L1052.44 681.274 L1051.88 681.274 L1051.32 681.274 L1050.76 681.274 L1050.2 681.274 L1049.65 681.274 L1049.09 681.274 L1048.53 681.274 L1047.97 681.274 L1047.41 681.274 L1046.85 681.274 L1046.29 681.274 L1045.73 681.274 L1045.17 681.274 L1044.61 681.274 L1044.05 681.274 L1043.49 681.274 L1042.93 681.274 L1042.38 681.274 L1041.82 681.274 L1041.26 681.274 L1040.7 681.274 L1040.14 681.274 L1039.58 681.274 L1039.02 681.274 L1038.46 681.274 L1037.9 681.274 L1037.34 681.274 L1036.78 681.274 L1036.22 681.274 L1035.66 681.274 L1035.1 681.274 L1034.55 681.274 L1033.99 681.274 L1033.43 681.274 L1032.87 681.274 L1032.31 681.274 L1031.75 681.274 L1031.19 681.274 L1030.63 681.274 L1030.07 681.274 L1029.51 681.274 L1028.95 681.274 L1028.39 681.274 L1027.83 681.274 L1027.28 681.274 L1026.72 681.274 L1026.16 681.274 L1025.6 681.274 L1025.04 681.274 L1024.48 681.274 L1023.92 681.274 L1023.36 681.274 L1022.8 681.274 L1022.24 681.274 L1021.68 681.274 L1021.12 681.274 L1020.56 681.274 L1020.01 681.274 L1019.45 681.274 L1018.89 681.274 L1018.33 681.274 L1017.77 681.274 L1017.21 681.274 L1016.65 681.274 L1016.09 681.274 L1015.53 681.274 L1014.97 681.274 L1014.41 681.274 L1013.85 681.274 L1013.29 681.274 L1012.73 681.274 L1012.18 681.274 L1011.62 681.274 L1011.06 681.274 L1010.5 681.274 L1009.94 681.274 L1009.38 681.274 L1008.82 681.274 L1008.26 681.274 L1007.7 681.274 L1007.14 681.274 L1006.58 681.274 L1006.02 681.274 L1005.46 681.274 L1004.91 681.274 L1004.35 681.274 L1003.79 681.274 L1003.23 681.274 L1002.67 681.274 L1002.11 681.274 L1001.55 681.274 L1000.99 681.274 L1000.43 681.274 L999.872 681.274 L999.313 681.274 L998.754 681.274 L998.194 681.274 L997.635 681.274 L997.076 681.274 L996.517 681.274 L995.957 681.274 L995.398 681.274 L994.839 681.274 L994.28 681.274 L993.72 681.274 L993.161 681.274 L992.602 681.274 L992.043 681.274 L991.483 681.274 L990.924 681.274 L990.365 681.274 L989.806 681.274 L989.246 681.274 L988.687 681.274 L988.128 681.274 L987.569 681.274 L987.009 681.274 L986.45 681.274 L985.891 681.274 L985.332 681.274 L984.772 681.274 L984.213 681.274 L983.654 681.274 L983.095 681.274 L982.535 681.274 L981.976 681.274 L981.417 681.274 L980.858 681.274 L980.298 681.274 L979.739 681.274 L979.18 681.274 L978.621 681.274 L978.061 681.274 L977.502 681.274 L976.943 681.274 L976.384 681.274 L975.824 681.274 L975.265 681.274 L974.706 681.274 L974.147 681.274 L973.587 681.274 L973.028 681.274 L972.469 681.274 L971.91 681.274 L971.35 681.274 L970.791 681.274 L970.232 681.274 L969.673 681.274 L969.113 681.274 L968.554 681.274 L967.995 681.274 L967.436 681.274 L966.876 681.274 L966.317 681.274 L965.758 681.274 L965.199 681.274 L964.639 681.274 L964.08 681.274 L963.521 681.274 L962.962 681.274 L962.402 681.274 L961.843 681.274 L961.284 681.274 L960.725 681.274 L960.165 681.274 L959.606 681.274 L959.047 681.274 L958.488 681.274 L957.928 681.274 L957.369 681.274 L956.81 681.274 L956.251 681.274 L955.691 681.274 L955.132 681.274 L954.573 681.274 L954.014 681.274 L953.454 681.274 L952.895 681.274 L952.336 681.274 L951.777 681.274 L951.217 681.274 L950.658 681.274 L950.099 681.274 L949.54 681.274 L948.98 681.274 L948.421 681.274 L947.862 681.274 L947.303 681.274 L946.743 681.274 L946.184 681.274 L945.625 681.274 L945.066 681.274 L944.506 681.274 L943.947 681.274 L943.388 681.274 L942.829 681.274 L942.269 681.274 L941.71 681.274 L941.151 681.274 L940.592 681.274 L940.032 681.274 L939.473 681.274 L938.914 681.274 L938.355 681.274 L937.795 681.274 L937.236 681.274 L936.677 681.274 L936.118 681.274 L935.558 681.274 L934.999 681.274 L934.44 681.274 L933.881 681.274 L933.321 681.274 L932.762 681.274 L932.203 681.274 L931.644 681.274 L931.084 681.274 L930.525 681.274 L929.966 681.274 L929.406 681.274 L928.847 681.274 L928.288 681.274 L927.729 681.274 L927.169 681.274 L926.61 681.274 L926.051 681.274 L925.492 681.274 L924.932 681.274 L924.373 681.274 L923.814 681.274 L923.255 681.274 L922.695 681.274 L922.136 681.274 L921.577 681.274 L921.018 681.274 L920.458 681.274 L919.899 681.274 L919.34 681.274 L918.781 681.274 L918.221 681.274 L917.662 681.274 L917.103 681.274 L916.544 681.274 L915.984 681.274 L915.425 681.274 L914.866 681.274 L914.307 681.274 L913.747 681.274 L913.188 681.274 L912.629 681.274 L912.07 681.274 L911.51 681.274 L910.951 681.274 L910.392 681.274 L909.833 681.274 L909.273 681.274 L908.714 681.274 L908.155 681.274 L907.596 681.274 L907.036 681.274 L906.477 681.274 L905.918 681.274 L905.359 681.274 L904.799 681.274 L904.24 681.274 L903.681 681.274 L903.122 681.274 L902.562 681.274 L902.003 681.274 L901.444 681.274 L900.885 681.274 L900.325 681.274 L899.766 681.274 L899.207 681.274 L898.648 681.274 L898.088 681.274 L897.529 681.274 L896.97 681.274 L896.411 681.274 L895.851 681.274 L895.292 681.274 L894.733 681.274 L894.174 681.274 L893.614 681.274 L893.055 681.274 L892.496 681.274 L891.937 681.274 L891.377 681.274 L890.818 681.274 L890.259 681.274 L889.7 681.274 L889.14 681.274 L888.581 681.274 L888.022 681.274 L887.463 681.274 L886.903 681.274 L886.344 681.274 L885.785 681.274 L885.226 681.274 L884.666 681.274 L884.107 681.274 L883.548 681.274 L882.989 681.274 L882.429 681.274 L881.87 681.274 L881.311 681.274 L880.752 681.274 L880.192 681.274 L879.633 681.274 L879.074 681.274 L878.515 681.274 L877.955 681.274 L877.396 681.274 L876.837 681.274 L876.278 681.274 L875.718 681.274 L875.159 681.274 L874.6 681.274 L874.041 681.274 L873.481 681.274 L872.922 681.274 L872.363 681.274 L871.804 681.274 L871.244 681.274 L870.685 681.274 L870.126 681.274 L869.567 681.274 L869.007 681.274 L868.448 681.274 L867.889 681.274 L867.33 681.274 L866.77 681.274 L866.211 681.274 L865.652 681.274 L865.093 681.274 L864.533 681.274 L863.974 681.274 L863.415 681.274 L862.856 681.274 L862.296 681.274 L861.737 681.274 L861.178 681.274 L860.619 681.274 L860.059 681.274 L859.5 681.274 L858.941 681.274 L858.382 681.274 L857.822 681.274 L857.263 681.274 L856.704 681.274 L856.145 681.274 L855.585 681.274 L855.026 681.274 L854.467 681.274 L853.908 681.274 L853.348 681.274 L852.789 681.274 L852.23 681.274 L851.671 681.274 L851.111 681.274 L850.552 681.274 L849.993 681.274 L849.434 681.274 L848.874 681.274 L848.315 681.274 L847.756 681.274 L847.197 681.274 L846.637 681.274 L846.078 681.274 L845.519 681.274 L844.96 681.274 L844.4 681.274 L843.841 681.274 L843.282 681.274 L842.723 681.274 L842.163 681.274 L841.604 681.274 L841.045 681.274 L840.486 681.274 L839.926 681.274 L839.367 681.274 L838.808 681.274 L838.249 681.274 L837.689 681.274 L837.13 681.274 L836.571 681.274 L836.012 681.274 L835.452 681.274 L834.893 681.274 L834.334 681.274 L833.775 681.274 L833.215 681.274 L832.656 681.274 L832.097 681.274 L831.538 681.274 L830.978 681.274 L830.419 681.274 L829.86 681.274 L829.301 681.274 L828.741 681.274 L828.182 681.274 L827.623 681.274 L827.064 681.274 L826.504 681.274 L825.945 681.274 L825.386 681.274 L824.827 681.274 L824.267 681.274 L823.708 681.274 L823.149 681.274 L822.59 681.274 L822.03 681.274 L821.471 681.274 L820.912 681.274 L820.353 681.274 L819.793 681.274 L819.234 681.274 L818.675 681.274 L818.116 681.274 L817.556 681.274 L816.997 681.274 L816.438 681.274 L815.879 681.274 L815.319 681.274 L814.76 681.274 L814.201 681.274 L813.642 681.274 L813.082 681.274 L812.523 681.274 L811.964 681.274 L811.405 681.274 L810.845 681.274 L810.286 681.274 L809.727 681.274 L809.168 681.274 L808.608 681.274 L808.049 681.274 L807.49 681.274 L806.931 681.274 L806.371 681.274 L805.812 681.274 L805.253 681.274 L804.693 681.274 L804.134 681.274 L803.575 681.274 L803.016 681.274 L802.456 681.274 L801.897 681.274 L801.338 681.274 L800.779 681.274 L800.219 681.274 L799.66 681.274 L799.101 681.274 L798.542 681.274 L797.982 681.274 L797.423 681.274 L796.864 681.274 L796.305 681.274 L795.745 681.274 L795.186 681.274 L794.627 681.274 L794.068 681.274 L793.508 681.274 L792.949 681.274 L792.39 681.274 L791.831 681.274 L791.271 681.274 L790.712 681.274 L790.153 681.274 L789.594 681.274 L789.034 681.274 L788.475 681.274 L787.916 681.274 L787.357 681.274 L786.797 681.274 L786.238 681.274 L785.679 681.274 L785.12 681.274 L784.56 681.274 L784.001 681.274 L783.442 681.274 L782.883 681.274 L782.323 681.274 L781.764 681.274 L781.205 681.274 L780.646 681.274 L780.086 681.274 L779.527 681.274 L778.968 681.274 L778.409 681.274 L777.849 681.274 L777.29 681.274 L776.731 681.274 L776.172 681.274 L775.612 681.274 L775.053 681.274 L774.494 681.274 L773.935 681.274 L773.375 681.274 L772.816 681.274 L772.257 681.274 L771.698 681.274 L771.138 681.274 L770.579 681.274 L770.02 681.274 L769.461 681.274 L768.901 681.274 L768.342 681.274 L767.783 681.274 L767.224 681.274 L766.664 681.274 L766.105 681.274 L765.546 681.274 L764.987 681.274 L764.427 681.274 L763.868 681.274 L763.309 681.274 L762.75 681.274 L762.19 681.274 L761.631 681.274 L761.072 681.274 L760.513 681.274 L759.953 681.274 L759.394 681.274 L758.835 681.274 L758.276 681.274 L757.716 681.274 L757.157 681.274 L756.598 681.274 L756.039 681.274 L755.479 681.274 L754.92 681.274 L754.361 681.274 L753.802 681.274 L753.242 681.274 L752.683 681.274 L752.124 681.274 L751.565 681.274 L751.005 681.274 L750.446 681.274 L749.887 681.274 L749.328 681.274 L748.768 681.274 L748.209 681.274 L747.65 681.274 L747.091 681.274 L746.531 681.274 L745.972 681.274 L745.413 681.274 L744.854 681.274 L744.294 681.274 L743.735 681.274 L743.176 681.274 L742.617 681.274 L742.057 681.274 L741.498 681.274 L740.939 681.274 L740.38 681.274 L739.82 681.274 L739.261 681.274 L738.702 681.274 L738.143 681.274 L737.583 681.274 L737.024 681.274 L736.465 681.274 L735.906 681.274 L735.346 681.274 L734.787 681.274 L734.228 681.274 L733.669 681.274 L733.109 681.274 L732.55 681.274 L731.991 681.274 L731.432 681.274 L730.872 681.274 L730.313 681.274 L729.754 681.274 L729.195 681.274 L728.635 681.274 L728.076 681.274 L727.517 681.274 L726.958 681.274 L726.398 681.274 L725.839 681.274 L725.28 681.274 L724.721 681.274 L724.161 681.274 L723.602 681.274 L723.043 681.274 L722.484 681.274 L721.924 681.274 L721.365 681.274 L720.806 681.274 L720.247 681.274  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.209 720.806,686.209 721.365,686.209 721.924,686.209 722.484,686.209 723.043,686.209 723.602,686.209 724.161,686.209 724.721,686.209 725.28,686.209 725.839,686.209 726.398,686.209 726.958,686.209 727.517,686.209 728.076,686.209 728.635,686.209 729.195,686.209 729.754,686.209 730.313,686.209 730.872,686.209 731.432,686.209 731.991,686.209 732.55,686.209 733.109,686.209 733.669,686.209 734.228,686.209 734.787,686.209 735.346,686.209 735.906,686.209 736.465,686.209 737.024,686.209 737.583,686.209 738.143,686.209 738.702,686.209 739.261,686.209 739.82,686.209 740.38,686.209 740.939,686.209 741.498,686.209 742.057,686.209 742.617,686.209 743.176,686.209 743.735,686.209 744.294,686.209 744.854,686.209 745.413,686.209 745.972,686.209 746.531,686.209 747.091,686.209 747.65,686.209 748.209,686.209 748.768,686.209 749.328,686.209 749.887,686.209 750.446,686.209 751.005,686.209 751.565,686.209 752.124,686.209 752.683,686.209 753.242,686.209 753.802,686.209 754.361,686.209 754.92,686.209 755.479,686.209 756.039,686.209 756.598,686.209 757.157,686.209 757.716,686.209 758.276,686.209 758.835,686.209 759.394,686.209 759.953,686.209 760.513,686.209 761.072,686.209 761.631,686.209 762.19,686.209 762.75,686.209 763.309,686.209 763.868,686.209 764.427,686.209 764.987,686.209 765.546,686.209 766.105,686.209 766.664,686.209 767.224,686.209 767.783,686.209 768.342,686.209 768.901,686.209 769.461,686.209 770.02,686.209 770.579,686.209 771.138,686.209 771.698,686.209 772.257,686.209 772.816,686.209 773.375,686.209 773.935,686.209 774.494,686.209 775.053,686.209 775.612,686.209 776.172,686.209 776.731,686.209 777.29,686.209 777.849,686.209 778.409,686.209 778.968,686.209 779.527,686.209 780.086,686.209 780.646,686.209 781.205,686.209 781.764,686.209 782.323,686.209 782.883,686.209 783.442,686.209 784.001,686.209 784.56,686.209 785.12,686.209 785.679,686.209 786.238,686.209 786.797,686.209 787.357,686.209 787.916,686.209 788.475,686.209 789.034,686.209 789.594,686.209 790.153,686.209 790.712,686.209 791.271,686.209 791.831,686.209 792.39,686.209 792.949,686.209 793.508,686.209 794.068,686.209 794.627,686.209 795.186,686.209 795.745,686.209 796.305,686.209 796.864,686.209 797.423,686.209 797.982,686.209 798.542,686.209 799.101,686.209 799.66,686.209 800.219,686.209 800.779,686.209 801.338,686.209 801.897,686.209 802.456,686.209 803.016,686.209 803.575,686.209 804.134,686.209 804.693,686.209 805.253,686.209 805.812,686.209 806.371,686.209 806.931,686.209 807.49,686.209 808.049,686.209 808.608,686.209 809.168,686.209 809.727,686.209 810.286,686.209 810.845,686.209 811.405,686.209 811.964,686.209 812.523,686.209 813.082,686.209 813.642,686.209 814.201,686.209 814.76,686.209 815.319,686.209 815.879,686.209 816.438,686.209 816.997,686.209 817.556,686.209 818.116,686.209 818.675,686.209 819.234,686.209 819.793,686.209 820.353,686.209 820.912,686.209 821.471,686.209 822.03,686.209 822.59,686.209 823.149,686.209 823.708,686.209 824.267,686.209 824.827,686.209 825.386,686.209 825.945,686.209 826.504,686.209 827.064,686.209 827.623,686.209 828.182,686.209 828.741,686.209 829.301,686.209 829.86,686.209 830.419,686.209 830.978,686.209 831.538,686.209 832.097,686.209 832.656,686.209 833.215,686.209 833.775,686.209 834.334,686.209 834.893,686.209 835.452,686.209 836.012,686.209 836.571,686.209 837.13,686.209 837.689,686.209 838.249,686.209 838.808,686.209 839.367,686.209 839.926,686.209 840.486,686.209 841.045,686.209 841.604,686.209 842.163,686.209 842.723,686.209 843.282,686.209 843.841,686.209 844.4,686.209 844.96,686.209 845.519,686.209 846.078,686.209 846.637,686.209 847.197,686.209 847.756,686.209 848.315,686.209 848.874,686.209 849.434,686.209 849.993,686.209 850.552,686.209 851.111,686.209 851.671,686.209 852.23,686.209 852.789,686.209 853.348,686.209 853.908,686.209 854.467,686.209 855.026,686.209 855.585,686.209 856.145,686.209 856.704,686.209 857.263,686.209 857.822,686.209 858.382,686.209 858.941,686.209 859.5,686.209 860.059,686.209 860.619,686.209 861.178,686.209 861.737,686.209 862.296,686.209 862.856,686.209 863.415,686.209 863.974,686.209 864.533,686.209 865.093,686.209 865.652,686.209 866.211,686.209 866.77,686.209 867.33,686.209 867.889,686.209 868.448,686.209 869.007,686.209 869.567,686.209 870.126,686.209 870.685,686.209 871.244,686.209 871.804,686.209 872.363,686.209 872.922,686.209 873.481,686.209 874.041,686.209 874.6,686.209 875.159,686.209 875.718,686.209 876.278,686.209 876.837,686.209 877.396,686.209 877.955,686.209 878.515,686.209 879.074,686.209 879.633,686.209 880.192,686.209 880.752,686.209 881.311,686.209 881.87,686.209 882.429,686.209 882.989,686.209 883.548,686.209 884.107,686.209 884.666,686.209 885.226,686.209 885.785,686.209 886.344,686.209 886.903,686.209 887.463,686.209 888.022,686.209 888.581,686.209 889.14,686.209 889.7,686.209 890.259,686.209 890.818,686.209 891.377,686.209 891.937,686.209 892.496,686.209 893.055,686.209 893.614,686.209 894.174,686.209 894.733,686.209 895.292,686.209 895.851,686.209 896.411,686.209 896.97,686.209 897.529,686.209 898.088,686.209 898.648,686.209 899.207,686.209 899.766,686.209 900.325,686.209 900.885,686.209 901.444,686.209 902.003,686.209 902.562,686.209 903.122,686.209 903.681,686.209 904.24,686.209 904.799,686.209 905.359,686.209 905.918,686.209 906.477,686.209 907.036,686.209 907.596,686.209 908.155,686.209 908.714,686.209 909.273,686.209 909.833,686.209 910.392,686.209 910.951,686.209 911.51,686.209 912.07,686.209 912.629,686.209 913.188,686.209 913.747,686.209 914.307,686.209 914.866,686.209 915.425,686.209 915.984,686.209 916.544,686.209 917.103,686.209 917.662,686.209 918.221,686.209 918.781,686.209 919.34,686.209 919.899,686.209 920.458,686.209 921.018,686.209 921.577,686.209 922.136,686.209 922.695,686.209 923.255,686.209 923.814,686.209 924.373,686.209 924.932,686.209 925.492,686.209 926.051,686.209 926.61,686.209 927.169,686.209 927.729,686.209 928.288,686.209 928.847,686.209 929.406,686.209 929.966,686.209 930.525,686.209 931.084,686.209 931.644,686.209 932.203,686.209 932.762,686.209 933.321,686.209 933.881,686.209 934.44,686.209 934.999,686.209 935.558,686.209 936.118,686.209 936.677,686.209 937.236,686.209 937.795,686.209 938.355,686.209 938.914,686.209 939.473,686.209 940.032,686.209 940.592,686.209 941.151,686.209 941.71,686.209 942.269,686.209 942.829,686.209 943.388,686.209 943.947,686.209 944.506,686.209 945.066,686.209 945.625,686.209 946.184,686.209 946.743,686.209 947.303,686.209 947.862,686.209 948.421,686.209 948.98,686.209 949.54,686.209 950.099,686.209 950.658,686.209 951.217,686.209 951.777,686.209 952.336,686.209 952.895,686.209 953.454,686.209 954.014,686.209 954.573,686.209 955.132,686.209 955.691,686.209 956.251,686.209 956.81,686.209 957.369,686.209 957.928,686.209 958.488,686.209 959.047,686.209 959.606,686.209 960.165,686.209 960.725,686.209 961.284,686.209 961.843,686.209 962.402,686.209 962.962,686.209 963.521,686.209 964.08,686.209 964.639,686.209 965.199,686.209 965.758,686.209 966.317,686.209 966.876,686.209 967.436,686.209 967.995,686.209 968.554,686.209 969.113,686.209 969.673,686.209 970.232,686.209 970.791,686.209 971.35,686.209 971.91,686.209 972.469,686.209 973.028,686.209 973.587,686.209 974.147,686.209 974.706,686.209 975.265,686.209 975.824,686.209 976.384,686.209 976.943,686.209 977.502,686.209 978.061,686.209 978.621,686.209 979.18,686.209 979.739,686.209 980.298,686.209 980.858,686.209 981.417,686.209 981.976,686.209 982.535,686.209 983.095,686.209 983.654,686.209 984.213,686.209 984.772,686.209 985.332,686.209 985.891,686.209 986.45,686.209 987.009,686.209 987.569,686.209 988.128,686.209 988.687,686.209 989.246,686.209 989.806,686.209 990.365,686.209 990.924,686.209 991.483,686.209 992.043,686.209 992.602,686.209 993.161,686.209 993.72,686.209 994.28,686.209 994.839,686.209 995.398,686.209 995.957,686.209 996.517,686.209 997.076,686.209 997.635,686.209 998.194,686.209 998.754,686.209 999.313,686.209 999.872,686.209 1000.43,686.209 1000.99,686.209 1001.55,686.209 1002.11,686.209 1002.67,686.209 1003.23,686.209 1003.79,686.209 1004.35,686.209 1004.91,686.209 1005.46,686.209 1006.02,686.209 1006.58,686.209 1007.14,686.209 1007.7,686.209 1008.26,686.209 1008.82,686.209 1009.38,686.209 1009.94,686.209 1010.5,686.209 1011.06,686.209 1011.62,686.209 1012.18,686.209 1012.73,686.209 1013.29,686.209 1013.85,686.209 1014.41,686.209 1014.97,686.209 1015.53,686.209 1016.09,686.209 1016.65,686.209 1017.21,686.209 1017.77,686.209 1018.33,686.209 1018.89,686.209 1019.45,686.209 1020.01,686.209 1020.56,686.209 1021.12,686.209 1021.68,686.209 1022.24,686.209 1022.8,686.209 1023.36,686.209 1023.92,686.209 1024.48,686.209 1025.04,686.209 1025.6,686.209 1026.16,686.209 1026.72,686.209 1027.28,686.209 1027.83,686.209 1028.39,686.209 1028.95,686.209 1029.51,686.209 1030.07,686.209 1030.63,686.209 1031.19,686.209 1031.75,686.209 1032.31,686.209 1032.87,686.209 1033.43,686.209 1033.99,686.209 1034.55,686.209 1035.1,686.209 1035.66,686.209 1036.22,686.209 1036.78,686.209 1037.34,686.209 1037.9,686.209 1038.46,686.209 1039.02,686.209 1039.58,686.209 1040.14,686.209 1040.7,686.209 1041.26,686.209 1041.82,686.209 1042.38,686.209 1042.93,686.209 1043.49,686.209 1044.05,686.209 1044.61,686.209 1045.17,686.209 1045.73,686.209 1046.29,686.209 1046.85,686.209 1047.41,686.209 1047.97,686.209 1048.53,686.209 1049.09,686.209 1049.65,686.209 1050.2,686.209 1050.76,686.209 1051.32,686.209 1051.88,686.209 1052.44,686.209 1053,686.209 1053.56,686.209 1054.12,686.209 1054.68,686.209 1055.24,686.209 1055.8,686.209 1056.36,686.209 1056.92,686.209 1057.48,686.209 1058.03,686.209 1058.59,686.209 1059.15,686.209 1059.71,686.209 1060.27,686.209 1060.83,686.209 1061.39,686.209 1061.95,686.209 1062.51,686.209 1063.07,686.209 1063.63,686.209 1064.19,686.209 1064.75,686.209 1065.3,686.209 1065.86,686.209 1066.42,686.209 1066.98,686.209 1067.54,686.209 1068.1,686.209 1068.66,686.209 1069.22,686.209 1069.78,686.209 1070.34,686.209 1070.9,686.209 1071.46,686.209 1072.02,686.209 1072.57,686.209 1073.13,686.209 1073.69,686.209 1074.25,686.209 1074.81,686.209 1075.37,686.209 1075.93,686.209 1076.49,686.209 1077.05,686.209 1077.61,686.209 1078.17,686.209 1078.73,686.209 1079.29,686.209 1079.85,686.209 1080.4,686.209 1080.96,686.209 1081.52,686.209 1082.08,686.209 1082.64,686.209 1083.2,686.209 1083.76,686.209 1084.32,686.209 1084.88,686.209 1085.44,686.209 1086,686.209 1086.56,686.209 1087.12,686.209 1087.67,686.209 1088.23,686.209 1088.79,686.209 1089.35,686.209 1089.91,686.209 1090.47,686.209 1091.03,686.209 1091.59,686.209 1092.15,686.209 1092.71,686.209 1093.27,686.209 1093.83,686.209 1094.39,686.209 1094.94,686.209 1095.5,686.209 1096.06,686.209 1096.62,686.209 1097.18,686.209 1097.74,686.209 1098.3,686.209 1098.86,686.209 1099.42,686.209 1099.98,686.209 1100.54,686.209 1101.1,686.209 1101.66,686.209 1102.22,686.209 1102.77,686.209 1103.33,686.209 1103.89,686.209 1104.45,686.209 1105.01,686.209 1105.57,686.209 1106.13,686.209 1106.69,686.209 1107.25,686.209 1107.81,686.209 1108.37,686.209 1108.93,686.209 1109.49,686.209 1110.04,686.209 1110.6,686.209 1111.16,686.209 1111.72,686.209 1112.28,686.209 1112.84,686.209 1113.4,686.209 1113.96,686.209 1114.52,686.209 1115.08,686.209 1115.64,686.209 1116.2,686.209 1116.76,686.209 1117.31,686.209 1117.87,686.209 1118.43,686.209 1118.99,686.209 1119.55,686.209 1120.11,686.209 1120.67,686.209 1121.23,686.209 1121.79,686.209 1122.35,686.209 1122.91,686.209 1123.47,686.209 1124.03,686.209 1124.59,686.209 1125.14,686.209 1125.7,686.209 1126.26,686.209 1126.82,686.209 1127.38,686.209 1127.94,686.209 1128.5,686.209 1129.06,686.209 1129.62,686.209 1130.18,686.209 1130.74,686.209 1131.3,686.209 1131.86,686.209 1132.41,686.209 1132.97,686.209 1133.53,686.209 1134.09,686.209 1134.65,686.209 1135.21,686.209 1135.77,686.209 1136.33,686.209 1136.89,686.209 1137.45,686.209 1138.01,686.209 1138.57,686.209 1139.13,686.209 1139.68,686.209 1140.24,686.209 1140.8,686.209 1141.36,686.209 1141.92,686.209 1142.48,686.209 1143.04,686.209 1143.6,686.209 1144.16,686.209 1144.72,686.209 1145.28,686.209 1145.84,686.209 1146.4,686.209 1146.96,686.209 1147.51,686.209 1148.07,686.209 1148.63,686.209 1149.19,686.209 1149.75,686.209 1150.31,686.209 1150.87,686.209 1151.43,686.209 1151.99,686.209 1152.55,686.209 1153.11,686.209 1153.67,686.209 1154.23,686.209 1154.78,686.209 1155.34,686.209 1155.9,686.209 1156.46,686.209 1157.02,686.209 1157.58,686.209 1158.14,686.209 1158.7,686.209 1159.26,686.209 1159.82,686.209 1160.38,686.209 1160.94,686.209 1161.5,686.209 1162.05,686.209 1162.61,686.209 1163.17,686.209 1163.73,686.209 1164.29,686.209 1164.85,686.209 1165.41,686.209 1165.97,686.209 1166.53,686.209 1167.09,686.209 1167.65,686.209 1168.21,686.209 1168.77,686.209 1169.33,686.209 1169.88,686.209 1170.44,686.209 1171,686.209 1171.56,686.209 1172.12,686.209 1172.68,686.209 1173.24,686.209 1173.8,686.209 1174.36,686.209 1174.92,686.209 1175.48,686.209 1176.04,686.209 1176.6,686.209 1177.15,686.209 1177.71,686.209 1178.27,686.209 1178.83,686.209 1179.39,686.209 1179.95,686.209 1180.51,686.209 1181.07,686.209 1181.63,686.209 1182.19,686.209 1182.75,686.209 1183.31,686.209 1183.87,686.209 1184.43,686.209 1184.98,686.209 1185.54,686.209 1186.1,686.209 1186.66,686.209 1187.22,686.209 1187.78,686.209 1188.34,686.209 1188.9,686.209 1189.46,686.209 1190.02,686.209 1190.58,686.209 1191.14,686.209 1191.7,686.209 1192.25,686.209 1192.81,686.209 1193.37,686.209 1193.93,686.209 1194.49,686.209 1195.05,686.209 1195.61,686.209 1196.17,686.209 1196.73,686.209 1197.29,686.209 1197.85,686.209 1198.41,686.209 1198.97,686.209 1199.52,686.209 1200.08,686.209 1200.64,686.209 1201.2,686.209 1201.76,686.209 1202.32,686.209 1202.88,686.209 1203.44,686.209 1204,686.209 1204.56,686.209 1205.12,686.209 1205.68,686.209 1206.24,686.209 1206.8,686.209 1207.35,686.209 1207.91,686.209 1208.47,686.209 1209.03,686.209 1209.59,686.209 1210.15,686.209 1210.71,686.209 1211.27,686.209 1211.83,686.209 1212.39,686.209 1212.95,686.209 1213.51,686.209 1214.07,686.209 1214.62,686.209 1215.18,686.209 1215.74,686.209 1216.3,686.209 1216.86,686.209 1217.42,686.209 1217.98,686.209 1218.54,686.209 1219.1,686.209 1219.66,686.209 1220.22,686.209 1220.78,686.209 1221.34,686.209 1221.89,686.209 1222.45,686.209 1223.01,686.209 1223.57,686.209 1224.13,686.209 1224.69,686.209 1225.25,686.209 1225.81,686.209 1226.37,686.209 1226.93,686.209 1227.49,686.209 1228.05,686.209 1228.61,686.209 1229.17,686.209 1229.72,686.209 1230.28,686.209 1230.84,686.209 1231.4,686.209 1231.96,686.209 1232.52,686.209 1233.08,686.209 1233.64,686.209 1234.2,686.209 1234.76,686.209 1235.32,686.209 1235.88,686.209 1236.44,686.209 1236.99,686.209 1237.55,686.209 1238.11,686.209 1238.67,686.209 1239.23,686.209 1239.79,686.209 1240.35,686.209 1240.91,686.209 1241.47,686.209 1242.03,686.209 1242.59,686.209 1243.15,686.209 1243.71,686.209 1244.26,686.209 1244.82,686.209 1245.38,686.209 1245.94,686.209 1246.5,686.209 1247.06,686.209 1247.62,686.209 1248.18,686.209 1248.74,686.209 1249.3,686.209 1249.86,686.209 1250.42,686.209 1250.98,686.209 1251.54,686.209 1252.09,686.209 1252.65,686.209 1253.21,686.209 1253.77,686.209 1254.33,686.209 1254.89,686.209 1255.45,686.209 1256.01,686.209 1256.57,686.209 1257.13,686.209 1257.69,686.209 1258.25,686.209 1258.81,686.209 1259.36,686.209 1259.92,686.209 1260.48,686.209 1261.04,686.209 1261.6,686.209 1262.16,686.209 1262.72,686.209 1263.28,686.209 1263.84,686.209 1264.4,686.209 1264.96,686.209 1265.52,686.209 1266.08,686.209 1266.63,686.209 1267.19,686.209 1267.75,686.209 1268.31,686.209 1268.87,686.209 1269.43,686.209 1269.99,686.209 1270.55,686.209 1271.11,686.209 1271.67,686.209 1272.23,686.209 1272.79,686.209 1273.35,686.209 1273.91,686.209 1274.46,686.209 1275.02,686.209 1275.58,686.209 1276.14,686.209 1276.7,686.209 1277.26,686.209 1277.82,686.209 1278.38,686.209 1278.94,686.209 1279.5,686.209 1280.06,686.209 1280.62,686.209 1281.18,686.209 1281.73,686.209 1282.29,686.209 1282.85,686.209 1283.41,686.209 1283.97,686.209 1284.53,686.209 1285.09,686.209 1285.65,686.209 1286.21,686.209 1286.77,686.209 1287.33,686.209 1287.89,686.209 1288.45,686.209 1289,686.209 1289.56,686.209 1290.12,686.209 1290.68,686.209 1291.24,686.209 1291.8,686.209 1292.36,686.209 1292.92,686.209 1293.48,686.209 1294.04,686.209 1294.6,686.209 1295.16,686.209 1295.72,686.209 1296.28,686.209 1296.83,686.209 1297.39,686.209 1297.95,686.209 1298.51,686.209 1299.07,686.209 1299.63,686.209 1300.19,686.209 1300.75,686.209 1301.31,686.209 1301.87,686.209 1302.43,686.209 1302.99,686.209 1303.55,686.209 1304.1,686.209 1304.66,686.209 1305.22,686.209 1305.78,686.209 1306.34,686.209 1306.9,686.209 1307.46,686.209 1308.02,686.209 1308.58,686.209 1309.14,686.209 1309.7,686.209 1310.26,686.209 1310.82,686.209 1311.38,686.209 1311.93,686.209 1312.49,686.209 1313.05,686.209 1313.61,686.209 1314.17,686.209 1314.73,686.209 1315.29,686.209 1315.85,686.209 1316.41,686.209 1316.97,686.209 1317.53,686.209 1318.09,686.209 1318.65,686.209 1319.2,686.209 1319.76,686.209 1320.32,686.209 1320.88,686.209 1321.44,686.209 1322,686.209 1322.56,686.209 1323.12,686.209 1323.68,686.209 1324.24,686.209 1324.8,686.209 1325.36,686.209 1325.92,686.209 1326.47,686.209 1327.03,686.209 1327.59,686.209 1328.15,686.209 1328.71,686.209 1329.27,686.209 1329.83,686.209 1330.39,686.209 1330.95,686.209 1331.51,686.209 1332.07,686.209 1332.63,686.209 1333.19,686.209 1333.75,686.209 1334.3,686.209 1334.86,686.209 1335.42,686.209 1335.98,686.209 1336.54,686.209 1337.1,686.209 1337.66,686.209 1338.22,686.209 1338.78,686.209 1339.34,686.209 1339.9,686.209 1340.46,686.209 1341.02,686.209 1341.57,686.209 1342.13,686.209 1342.69,686.209 1343.25,686.209 1343.81,686.209 1344.37,686.209 1344.93,686.209 1345.49,686.209 1346.05,686.209 1346.61,686.209 1347.17,686.209 1347.73,686.209 1348.29,686.209 1348.84,686.209 1349.4,686.209 1349.96,686.209 1350.52,686.209 1351.08,686.209 1351.64,686.209 1352.2,686.209 1352.76,686.209 1353.32,686.209 1353.88,686.209 1354.44,686.209 1355,686.209 1355.56,686.209 1356.12,686.209 1356.67,686.209 1357.23,686.209 1357.79,686.209 1358.35,686.209 1358.91,686.209 1359.47,686.209 1360.03,686.209 1360.59,686.209 1361.15,686.209 1361.71,686.209 1362.27,686.209 1362.83,686.209 1363.39,686.209 1363.94,686.209 1364.5,686.209 1365.06,686.209 1365.62,686.209 1366.18,686.209 1366.74,686.209 1367.3,686.209 1367.86,686.209 1368.42,686.209 1368.98,686.209 1369.54,686.209 1370.1,686.209 1370.66,686.209 1371.21,686.209 1371.77,686.209 1372.33,686.209 1372.89,686.209 1373.45,686.209 1374.01,686.209 1374.57,686.209 1375.13,686.209 1375.69,686.209 1376.25,686.209 1376.81,686.209 1377.37,686.209 1377.93,686.209 1378.49,686.209 1379.04,686.209 1379.6,686.209 1380.16,686.209 1380.72,686.209 1381.28,686.209 1381.84,686.209 1382.4,686.209 1382.96,686.209 1383.52,686.209 1384.08,686.209 1384.64,686.209 1385.2,686.209 1385.76,686.209 1386.31,686.209 1386.87,686.209 1387.43,686.209 1387.99,686.209 1388.55,686.209 1389.11,686.209 1389.67,686.209 1390.23,686.209 1390.79,686.209 1391.35,686.209 1391.91,686.209 1392.47,686.209 1393.03,686.209 1393.58,686.209 1394.14,686.209 1394.7,686.209 1395.26,686.209 1395.82,686.209 1396.38,686.209 1396.94,686.209 1397.5,686.209 1398.06,686.209 1398.62,686.209 1399.18,686.209 1399.74,686.209 1400.3,686.209 1400.86,686.209 1401.41,686.209 1401.97,686.209 1402.53,686.209 1403.09,686.209 1403.65,686.209 1404.21,686.209 1404.77,686.209 1405.33,686.209 1405.89,686.209 1406.45,686.209 1407.01,686.209 1407.57,686.209 1408.13,686.209 1408.68,686.209 1409.24,686.209 1409.8,686.209 1410.36,686.209 1410.92,686.209 1411.48,686.209 1412.04,686.209 1412.6,686.209 1413.16,686.209 1413.72,686.209 1414.28,686.209 1414.84,686.209 1415.4,686.209 1415.95,686.209 1416.51,686.209 1417.07,686.209 1417.63,686.209 1418.19,686.209 1418.75,686.209 1419.31,686.209 1419.87,686.209 1420.43,686.209 1420.99,686.209 1421.55,686.209 1422.11,686.209 1422.67,686.209 1423.23,686.209 1423.78,686.209 1424.34,686.209 1424.9,686.209 1425.46,686.209 1426.02,686.209 1426.58,686.209 1427.14,686.209 1427.7,686.209 1428.26,686.209 1428.82,686.209 1429.38,686.209 1429.94,686.209 1430.5,686.209 1431.05,686.209 1431.61,686.209 1432.17,686.209 1432.73,686.209 1433.29,686.209 1433.85,686.209 1434.41,686.209 1434.97,686.209 1435.53,686.209 1436.09,686.209 1436.65,686.209 1437.21,686.209 1437.77,686.209 1438.33,686.209 1438.88,686.209 1439.44,686.209 1440,686.209 1440.56,686.209 1441.12,686.209 1441.68,686.209 1442.24,686.209 1442.8,686.209 1443.36,686.209 1443.92,686.209 1444.48,686.209 1445.04,686.209 1445.6,686.209 1446.15,686.209 1446.71,686.209 1447.27,686.209 1447.83,686.209 1448.39,686.209 1448.95,686.209 1449.51,686.209 1450.07,686.209 1450.63,686.209 1451.19,686.209 1451.75,686.209 1452.31,686.209 1452.87,686.209 1453.42,686.209 1453.98,686.209 1454.54,686.209 1455.1,686.209 1455.66,686.209 1456.22,686.209 1456.78,686.209 1457.34,686.209 1457.9,686.209 1458.46,686.209 1459.02,686.209 1459.58,686.209 1460.14,686.209 1460.7,686.209 1461.25,686.209 1461.81,686.209 1462.37,686.209 1462.93,686.209 1463.49,686.209 1464.05,686.209 1464.61,686.209 1465.17,686.209 1465.73,686.209 1466.29,686.209 1466.85,686.209 1467.41,686.209 1467.97,686.209 1468.52,686.209 1469.08,686.209 1469.64,686.209 1470.2,686.209 1470.76,686.209 1471.32,686.209 1471.88,686.209 1472.44,686.209 1473,686.209 1473.56,686.209 1474.12,686.209 1474.68,686.209 1475.24,686.209 1475.79,686.209 1476.35,686.209 1476.91,686.209 1477.47,686.209 1478.03,686.209 1478.59,686.209 1479.15,686.209 1479.71,686.209 1480.27,686.209 1480.83,686.209 1481.39,686.209 1481.95,686.209 1482.51,686.209 1483.07,686.209 1483.62,686.209 1484.18,686.209 1484.74,686.209 1485.3,686.209 1485.86,686.209 1486.42,686.209 1486.98,686.209 1487.54,686.209 1488.1,686.209 1488.66,686.209 1489.22,686.209 1489.78,686.209 1490.34,686.209 1490.89,686.209 1491.45,686.209 1492.01,686.209 1492.57,686.209 1493.13,686.209 1493.69,686.209 1494.25,686.209 1494.81,686.209 1495.37,686.209 1495.93,686.209 1496.49,686.209 1497.05,686.209 1497.61,686.209 1498.16,686.209 1498.72,686.209 1499.28,686.209 1499.84,686.209 1500.4,686.209 1500.96,686.209 1501.52,686.209 1502.08,686.209 1502.64,686.209 1503.2,686.209 1503.76,686.209 1504.32,686.209 1504.88,686.209 1505.44,686.209 1505.99,686.209 1506.55,686.209 1507.11,686.209 1507.67,686.209 1508.23,686.209 1508.79,686.209 1509.35,686.209 1509.91,686.209 1510.47,686.209 1511.03,686.209 1511.59,686.209 1512.15,686.209 1512.71,686.209 1513.26,686.209 1513.82,686.209 1514.38,686.209 1514.94,686.209 1515.5,686.209 1516.06,686.209 1516.62,686.209 1517.18,686.209 1517.74,686.209 1518.3,686.209 1518.86,686.209 1519.42,686.209 1519.98,686.209 1520.53,686.209 1521.09,686.209 1521.65,686.209 1522.21,686.209 1522.77,686.209 1523.33,686.209 1523.89,686.209 1524.45,686.209 1525.01,686.209 1525.57,686.209 1526.13,686.209 1526.69,686.209 1527.25,686.209 1527.81,686.209 1528.36,686.209 1528.92,686.209 1529.48,686.209 1530.04,686.209 1530.6,686.209 1531.16,686.209 1531.72,686.209 1532.28,686.209 1532.84,686.209 1533.4,686.209 1533.96,686.209 1534.52,686.209 1535.08,686.209 1535.63,686.209 1536.19,686.209 1536.75,686.209 1537.31,686.209 1537.87,686.209 1538.43,686.209 1538.99,686.209 1539.55,686.209 1540.11,686.209 1540.67,686.209 1541.23,686.209 1541.79,686.209 1542.35,686.209 1542.9,686.209 1543.46,686.209 1544.02,686.209 1544.58,686.209 1545.14,686.209 1545.7,686.209 1546.26,686.209 1546.82,686.209 1547.38,686.209 1547.94,686.209 1548.5,686.209 1549.06,686.209 1549.62,686.209 1550.18,686.209 1550.73,686.209 1551.29,686.209 1551.85,686.209 1552.41,686.209 1552.97,686.209 1553.53,686.209 1554.09,686.209 1554.65,686.209 1555.21,686.209 1555.77,686.209 1556.33,686.209 1556.89,686.209 1557.45,686.209 1558,686.209 1558.56,686.209 1559.12,686.209 1559.68,686.209 1560.24,686.209 1560.8,686.209 1561.36,686.209 1561.92,686.209 1562.48,686.209 1563.04,686.209 1563.6,686.209 1564.16,686.209 1564.72,686.209 1565.28,686.209 1565.83,686.209 1566.39,686.209 1566.95,686.209 1567.51,686.209 1568.07,686.209 1568.63,686.209 1569.19,686.209 1569.75,686.209 1570.31,686.209 1570.87,686.209 1571.43,686.209 1571.99,686.209 1572.55,686.209 1573.1,686.209 1573.66,686.209 1574.22,686.209 1574.78,686.209 1575.34,686.209 1575.9,686.209 1576.46,686.209 1577.02,686.209 1577.58,686.209 1578.14,686.209 1578.7,686.209 1579.26,686.209 1579.82,686.209 1580.37,686.209 1580.93,686.209 1581.49,686.209 1582.05,686.209 1582.61,686.209 1583.17,686.209 1583.73,686.209 1584.29,686.209 1584.85,686.209 1585.41,686.209 1585.97,686.209 1586.53,686.209 1587.09,686.209 1587.65,686.209 1588.2,686.209 1588.76,686.209 1589.32,686.209 1589.88,686.209 1590.44,686.209 1591,686.209 1591.56,686.209 1592.12,686.209 1592.68,686.209 1593.24,686.209 1593.8,686.209 1594.36,686.209 1594.92,686.209 1595.47,686.209 1596.03,686.209 1596.59,686.209 1597.15,686.209 1597.71,686.209 1598.27,686.209 1598.83,686.209 1599.39,686.209 1599.95,686.209 1600.51,686.209 1601.07,686.209 1601.63,686.209 1602.19,686.209 1602.74,686.209 1603.3,686.209 1603.86,686.209 1604.42,686.209 1604.98,686.209 1605.54,686.209 1606.1,686.209 1606.66,686.209 1607.22,686.209 1607.78,686.209 1608.34,686.209 1608.9,686.209 1609.46,686.209 1610.02,686.209 1610.57,686.209 1611.13,686.209 1611.69,686.209 1612.25,686.209 1612.81,686.209 1613.37,686.209 1613.93,686.209 1614.49,686.209 1615.05,686.209 1615.61,686.209 1616.17,686.209 1616.73,686.209 1617.29,686.209 1617.84,686.209 1618.4,686.209 1618.96,686.209 1619.52,686.209 1620.08,686.209 1620.64,686.209 1621.2,686.209 1621.76,686.209 1622.32,686.209 1622.88,686.209 1623.44,686.209 1624,686.209 1624.56,686.209 1625.11,686.209 1625.67,686.209 1626.23,686.209 1626.79,686.209 1627.35,686.209 1627.91,686.209 1628.47,686.209 1629.03,686.209 1629.59,686.209 1630.15,686.209 1630.71,686.209 1631.27,686.209 1631.83,686.209 1632.39,686.209 1632.94,686.209 1633.5,686.209 1634.06,686.209 1634.62,686.209 1635.18,686.209 1635.74,686.209 1636.3,686.209 1636.86,686.209 1637.42,686.209 1637.98,686.209 1638.54,686.209 1639.1,686.209 1639.66,686.209 1640.21,686.209 1640.77,686.209 1641.33,686.209 1641.89,686.209 1642.45,686.209 1643.01,686.209 1643.57,686.209 1644.13,686.209 1644.69,686.209 1645.25,686.209 1645.81,686.209 1646.37,686.209 1646.93,686.209 1647.48,686.209 1648.04,686.209 1648.6,686.209 1649.16,686.209 1649.72,686.209 1650.28,686.209 1650.84,686.209 1651.4,686.209 1651.96,686.209 1652.52,686.209 1653.08,686.209 1653.64,686.209 1654.2,686.209 1654.76,686.209 1655.31,686.209 1655.87,686.209 1656.43,686.209 1656.99,686.209 1657.55,686.209 1658.11,686.209 1658.67,686.209 1659.23,686.209 1659.79,686.209 1660.35,686.209 1660.91,686.209 1661.47,686.209 1662.03,686.209 1662.58,686.209 1663.14,686.209 1663.7,686.209 1664.26,686.209 1664.82,686.209 1665.38,686.209 1665.94,686.209 1666.5,686.209 1667.06,686.209 1667.62,686.209 1668.18,686.209 1668.74,686.209 1669.3,686.209 1669.85,686.209 1670.41,686.209 1670.97,686.209 1671.53,686.209 1672.09,686.209 1672.65,686.209 1673.21,686.209 1673.77,686.209 1674.33,686.209 1674.89,686.209 1675.45,686.209 1676.01,686.209 1676.57,686.209 1677.13,686.209 1677.68,686.209 1678.24,686.209 1678.8,686.209 1679.36,686.209 1679.92,686.209 1680.48,686.209 1681.04,686.209 1681.6,686.209 1682.16,686.209 1682.72,686.209 1683.28,686.209 1683.84,686.209 1684.4,686.209 1684.95,686.209 1685.51,686.209 1686.07,686.209 1686.63,686.209 1687.19,686.209 1687.75,686.209 1688.31,686.209 1688.87,686.209 1689.43,686.209 1689.99,686.209 1690.55,686.209 1691.11,686.209 1691.67,686.209 1692.23,686.209 1692.78,686.209 1693.34,686.209 1693.9,686.209 1694.46,686.209 1695.02,686.209 1695.58,686.209 1696.14,686.209 1696.7,686.209 1697.26,686.209 1697.82,686.209 1698.38,686.209 1698.94,686.209 1699.5,686.209 1700.05,686.209 1700.61,686.209 1701.17,686.209 1701.73,686.209 1702.29,686.209 1702.85,686.209 1703.41,686.209 1703.97,686.209 1704.53,686.209 1705.09,686.209 1705.65,686.209 1706.21,686.209 1706.77,686.209 1707.32,686.209 1707.88,686.209 1708.44,686.209 1709,686.209 1709.56,686.209 1710.12,686.209 1710.68,686.209 1711.24,686.209 1711.8,686.209 1712.36,686.209 1712.92,686.209 1713.48,686.209 1714.04,686.209 1714.6,686.209 1715.15,686.209 1715.71,686.209 1716.27,686.209 1716.83,686.209 1717.39,686.209 1717.95,686.209 1718.51,686.209 1719.07,686.209 1719.63,686.209 1720.19,686.209 1720.75,686.209 1721.31,686.209 1721.87,686.209 1722.42,686.209 1722.98,686.209 1723.54,686.209 1724.1,686.209 1724.66,686.209 1725.22,686.209 1725.78,686.209 1726.34,686.209 1726.9,686.209 1727.46,686.209 1728.02,686.209 1728.58,686.209 1729.14,686.209 1729.69,686.209 1730.25,686.209 1730.81,686.209 1731.37,686.209 1731.93,686.209 1732.49,686.209 1733.05,686.209 1733.61,686.209 1734.17,686.209 1734.73,686.209 1735.29,686.209 1735.85,686.209 1736.41,686.209 1736.97,686.209 1737.52,686.209 1738.08,686.209 1738.64,686.209 1739.2,686.209 1739.76,686.209 1740.32,686.209 1740.88,686.209 1741.44,686.209 1742,686.209 1742.56,686.209 1743.12,686.209 1743.68,686.209 1744.24,686.209 1744.79,686.209 1745.35,686.209 1745.91,686.209 1746.47,686.209 1747.03,686.209 1747.59,686.209 1748.15,686.209 1748.71,686.209 1749.27,686.209 1749.83,686.209 1750.39,686.209 1750.95,686.209 1751.51,686.209 1752.06,686.209 1752.62,686.209 1753.18,686.209 1753.74,686.209 1754.3,686.209 1754.86,686.209 1755.42,686.209 1755.98,686.209 1756.54,686.209 1757.1,686.209 1757.66,686.209 1758.22,686.209 1758.78,686.209 1759.34,686.209 1759.89,686.209 1760.45,686.209 1761.01,686.209 1761.57,686.209 1762.13,686.209 1762.69,686.209 1763.25,686.209 1763.81,686.209 1764.37,686.209 1764.93,686.209 1765.49,686.209 1766.05,686.209 1766.61,686.209 1767.16,686.209 1767.72,686.209 1768.28,686.209 1768.84,686.209 1769.4,686.209 1769.96,686.209 1770.52,686.209 1771.08,686.209 1771.64,686.209 1772.2,686.209 1772.76,686.209 1773.32,686.209 1773.88,686.209 1774.43,686.209 1774.99,686.209 1775.55,686.209 1776.11,686.209 1776.67,686.209 1777.23,686.209 1777.79,686.209 1778.35,686.209 1778.91,686.209 1779.47,686.209 1780.03,686.209 1780.59,686.209 1781.15,686.209 1781.71,686.209 1782.26,686.209 1782.82,686.209 1783.38,686.209 1783.94,686.209 1784.5,686.209 1785.06,686.209 1785.62,686.209 1786.18,686.209 1786.74,686.209 1787.3,686.209 1787.86,686.209 1788.42,686.209 1788.98,686.209 1789.53,686.209 1790.09,686.209 1790.65,686.209 1791.21,686.209 1791.77,686.209 1792.33,686.209 1792.89,686.209 1793.45,686.209 1794.01,686.209 1794.57,686.209 1795.13,686.209 1795.69,686.209 1796.25,686.209 1796.8,686.209 1797.36,686.209 1797.92,686.209 1798.48,686.209 1799.04,686.209 1799.6,686.209 1800.16,686.209 1800.72,686.209 1801.28,686.209 1801.84,686.209 1802.4,686.209 1802.96,686.209 1803.52,686.209 1804.08,686.209 1804.63,686.209 1805.19,686.209 1805.75,686.209 1806.31,686.209 1806.87,686.209 1807.43,686.209 1807.99,686.209 1808.55,686.209 1809.11,686.209 1809.67,686.209 1810.23,686.209 1810.79,686.209 1811.35,686.209 1811.9,686.209 1812.46,686.209 1813.02,686.209 1813.58,686.209 1814.14,686.209 1814.7,686.209 1815.26,686.209 1815.82,686.209 1816.38,686.209 1816.94,686.209 1817.5,686.209 1818.06,686.209 1818.62,686.209 1819.18,686.209 1819.73,686.209 1820.29,686.209 1820.85,686.209 1821.41,686.209 1821.97,686.209 1822.53,686.209 1823.09,686.209 1823.65,686.209 1824.21,686.209 1824.77,686.209 1825.33,686.209 1825.89,686.209 1826.45,686.209 1827,686.209 1827.56,686.209 1828.12,686.209 1828.68,686.209 1829.24,686.209 1829.8,686.209 1830.36,686.209 1830.92,686.209 1831.48,686.209 1832.04,686.209 1832.6,686.209 1833.16,686.209 1833.72,686.209 1834.27,686.209 1834.83,686.209 1835.39,686.209 1835.95,686.209 1836.51,686.209 1837.07,686.209 1837.63,686.209 1838.19,686.209 \"/>\n<path clip-path=\"url(#clip613)\" d=\"M720.247 684.547 L720.806 684.547 L721.365 684.547 L721.924 684.547 L722.484 684.547 L723.043 684.547 L723.602 684.547 L724.161 684.547 L724.721 684.547 L725.28 684.547 L725.839 684.547 L726.398 684.547 L726.958 684.547 L727.517 684.547 L728.076 684.547 L728.635 684.547 L729.195 684.547 L729.754 684.547 L730.313 684.547 L730.872 684.547 L731.432 684.547 L731.991 684.547 L732.55 684.547 L733.109 684.547 L733.669 684.547 L734.228 684.547 L734.787 684.547 L735.346 684.547 L735.906 684.547 L736.465 684.547 L737.024 684.547 L737.583 684.547 L738.143 684.547 L738.702 684.547 L739.261 684.547 L739.82 684.547 L740.38 684.547 L740.939 684.547 L741.498 684.547 L742.057 684.547 L742.617 684.547 L743.176 684.547 L743.735 684.547 L744.294 684.547 L744.854 684.547 L745.413 684.547 L745.972 684.547 L746.531 684.547 L747.091 684.547 L747.65 684.547 L748.209 684.547 L748.768 684.547 L749.328 684.547 L749.887 684.547 L750.446 684.547 L751.005 684.547 L751.565 684.547 L752.124 684.547 L752.683 684.547 L753.242 684.547 L753.802 684.547 L754.361 684.547 L754.92 684.547 L755.479 684.547 L756.039 684.547 L756.598 684.547 L757.157 684.547 L757.716 684.547 L758.276 684.547 L758.835 684.547 L759.394 684.547 L759.953 684.547 L760.513 684.547 L761.072 684.547 L761.631 684.547 L762.19 684.547 L762.75 684.547 L763.309 684.547 L763.868 684.547 L764.427 684.547 L764.987 684.547 L765.546 684.547 L766.105 684.547 L766.664 684.547 L767.224 684.547 L767.783 684.547 L768.342 684.547 L768.901 684.547 L769.461 684.547 L770.02 684.547 L770.579 684.547 L771.138 684.547 L771.698 684.547 L772.257 684.547 L772.816 684.547 L773.375 684.547 L773.935 684.547 L774.494 684.547 L775.053 684.547 L775.612 684.547 L776.172 684.547 L776.731 684.547 L777.29 684.547 L777.849 684.547 L778.409 684.547 L778.968 684.547 L779.527 684.547 L780.086 684.547 L780.646 684.547 L781.205 684.547 L781.764 684.547 L782.323 684.547 L782.883 684.547 L783.442 684.547 L784.001 684.547 L784.56 684.547 L785.12 684.547 L785.679 684.547 L786.238 684.547 L786.797 684.547 L787.357 684.547 L787.916 684.547 L788.475 684.547 L789.034 684.547 L789.594 684.547 L790.153 684.547 L790.712 684.547 L791.271 684.547 L791.831 684.547 L792.39 684.547 L792.949 684.547 L793.508 684.547 L794.068 684.547 L794.627 684.547 L795.186 684.547 L795.745 684.547 L796.305 684.547 L796.864 684.547 L797.423 684.547 L797.982 684.547 L798.542 684.547 L799.101 684.547 L799.66 684.547 L800.219 684.547 L800.779 684.547 L801.338 684.547 L801.897 684.547 L802.456 684.547 L803.016 684.547 L803.575 684.547 L804.134 684.547 L804.693 684.547 L805.253 684.547 L805.812 684.547 L806.371 684.547 L806.931 684.547 L807.49 684.547 L808.049 684.547 L808.608 684.547 L809.168 684.547 L809.727 684.547 L810.286 684.547 L810.845 684.547 L811.405 684.547 L811.964 684.547 L812.523 684.547 L813.082 684.547 L813.642 684.547 L814.201 684.547 L814.76 684.547 L815.319 684.547 L815.879 684.547 L816.438 684.547 L816.997 684.547 L817.556 684.547 L818.116 684.547 L818.675 684.547 L819.234 684.547 L819.793 684.547 L820.353 684.547 L820.912 684.547 L821.471 684.547 L822.03 684.547 L822.59 684.547 L823.149 684.547 L823.708 684.547 L824.267 684.547 L824.827 684.547 L825.386 684.547 L825.945 684.547 L826.504 684.547 L827.064 684.547 L827.623 684.547 L828.182 684.547 L828.741 684.547 L829.301 684.547 L829.86 684.547 L830.419 684.547 L830.978 684.547 L831.538 684.547 L832.097 684.547 L832.656 684.547 L833.215 684.547 L833.775 684.547 L834.334 684.547 L834.893 684.547 L835.452 684.547 L836.012 684.547 L836.571 684.547 L837.13 684.547 L837.689 684.547 L838.249 684.547 L838.808 684.547 L839.367 684.547 L839.926 684.547 L840.486 684.547 L841.045 684.547 L841.604 684.547 L842.163 684.547 L842.723 684.547 L843.282 684.547 L843.841 684.547 L844.4 684.547 L844.96 684.547 L845.519 684.547 L846.078 684.547 L846.637 684.547 L847.197 684.547 L847.756 684.547 L848.315 684.547 L848.874 684.547 L849.434 684.547 L849.993 684.547 L850.552 684.547 L851.111 684.547 L851.671 684.547 L852.23 684.547 L852.789 684.547 L853.348 684.547 L853.908 684.547 L854.467 684.547 L855.026 684.547 L855.585 684.547 L856.145 684.547 L856.704 684.547 L857.263 684.547 L857.822 684.547 L858.382 684.547 L858.941 684.547 L859.5 684.547 L860.059 684.547 L860.619 684.547 L861.178 684.547 L861.737 684.547 L862.296 684.547 L862.856 684.547 L863.415 684.547 L863.974 684.547 L864.533 684.547 L865.093 684.547 L865.652 684.547 L866.211 684.547 L866.77 684.547 L867.33 684.547 L867.889 684.547 L868.448 684.547 L869.007 684.547 L869.567 684.547 L870.126 684.547 L870.685 684.547 L871.244 684.547 L871.804 684.547 L872.363 684.547 L872.922 684.547 L873.481 684.547 L874.041 684.547 L874.6 684.547 L875.159 684.547 L875.718 684.547 L876.278 684.547 L876.837 684.547 L877.396 684.547 L877.955 684.547 L878.515 684.547 L879.074 684.547 L879.633 684.547 L880.192 684.547 L880.752 684.547 L881.311 684.547 L881.87 684.547 L882.429 684.547 L882.989 684.547 L883.548 684.547 L884.107 684.547 L884.666 684.547 L885.226 684.547 L885.785 684.547 L886.344 684.547 L886.903 684.547 L887.463 684.547 L888.022 684.547 L888.581 684.547 L889.14 684.547 L889.7 684.547 L890.259 684.547 L890.818 684.547 L891.377 684.547 L891.937 684.547 L892.496 684.547 L893.055 684.547 L893.614 684.547 L894.174 684.547 L894.733 684.547 L895.292 684.547 L895.851 684.547 L896.411 684.547 L896.97 684.547 L897.529 684.547 L898.088 684.547 L898.648 684.547 L899.207 684.547 L899.766 684.547 L900.325 684.547 L900.885 684.547 L901.444 684.547 L902.003 684.547 L902.562 684.547 L903.122 684.547 L903.681 684.547 L904.24 684.547 L904.799 684.547 L905.359 684.547 L905.918 684.547 L906.477 684.547 L907.036 684.547 L907.596 684.547 L908.155 684.547 L908.714 684.547 L909.273 684.547 L909.833 684.547 L910.392 684.547 L910.951 684.547 L911.51 684.547 L912.07 684.547 L912.629 684.547 L913.188 684.547 L913.747 684.547 L914.307 684.547 L914.866 684.547 L915.425 684.547 L915.984 684.547 L916.544 684.547 L917.103 684.547 L917.662 684.547 L918.221 684.547 L918.781 684.547 L919.34 684.547 L919.899 684.547 L920.458 684.547 L921.018 684.547 L921.577 684.547 L922.136 684.547 L922.695 684.547 L923.255 684.547 L923.814 684.547 L924.373 684.547 L924.932 684.547 L925.492 684.547 L926.051 684.547 L926.61 684.547 L927.169 684.547 L927.729 684.547 L928.288 684.547 L928.847 684.547 L929.406 684.547 L929.966 684.547 L930.525 684.547 L931.084 684.547 L931.644 684.547 L932.203 684.547 L932.762 684.547 L933.321 684.547 L933.881 684.547 L934.44 684.547 L934.999 684.547 L935.558 684.547 L936.118 684.547 L936.677 684.547 L937.236 684.547 L937.795 684.547 L938.355 684.547 L938.914 684.547 L939.473 684.547 L940.032 684.547 L940.592 684.547 L941.151 684.547 L941.71 684.547 L942.269 684.547 L942.829 684.547 L943.388 684.547 L943.947 684.547 L944.506 684.547 L945.066 684.547 L945.625 684.547 L946.184 684.547 L946.743 684.547 L947.303 684.547 L947.862 684.547 L948.421 684.547 L948.98 684.547 L949.54 684.547 L950.099 684.547 L950.658 684.547 L951.217 684.547 L951.777 684.547 L952.336 684.547 L952.895 684.547 L953.454 684.547 L954.014 684.547 L954.573 684.547 L955.132 684.547 L955.691 684.547 L956.251 684.547 L956.81 684.547 L957.369 684.547 L957.928 684.547 L958.488 684.547 L959.047 684.547 L959.606 684.547 L960.165 684.547 L960.725 684.547 L961.284 684.547 L961.843 684.547 L962.402 684.547 L962.962 684.547 L963.521 684.547 L964.08 684.547 L964.639 684.547 L965.199 684.547 L965.758 684.547 L966.317 684.547 L966.876 684.547 L967.436 684.547 L967.995 684.547 L968.554 684.547 L969.113 684.547 L969.673 684.547 L970.232 684.547 L970.791 684.547 L971.35 684.547 L971.91 684.547 L972.469 684.547 L973.028 684.547 L973.587 684.547 L974.147 684.547 L974.706 684.547 L975.265 684.547 L975.824 684.547 L976.384 684.547 L976.943 684.547 L977.502 684.547 L978.061 684.547 L978.621 684.547 L979.18 684.547 L979.739 684.547 L980.298 684.547 L980.858 684.547 L981.417 684.547 L981.976 684.547 L982.535 684.547 L983.095 684.547 L983.654 684.547 L984.213 684.547 L984.772 684.547 L985.332 684.547 L985.891 684.547 L986.45 684.547 L987.009 684.547 L987.569 684.547 L988.128 684.547 L988.687 684.547 L989.246 684.547 L989.806 684.547 L990.365 684.547 L990.924 684.547 L991.483 684.547 L992.043 684.547 L992.602 684.547 L993.161 684.547 L993.72 684.547 L994.28 684.547 L994.839 684.547 L995.398 684.547 L995.957 684.547 L996.517 684.547 L997.076 684.547 L997.635 684.547 L998.194 684.547 L998.754 684.547 L999.313 684.547 L999.872 684.547 L1000.43 684.547 L1000.99 684.547 L1001.55 684.547 L1002.11 684.547 L1002.67 684.547 L1003.23 684.547 L1003.79 684.547 L1004.35 684.547 L1004.91 684.547 L1005.46 684.547 L1006.02 684.547 L1006.58 684.547 L1007.14 684.547 L1007.7 684.547 L1008.26 684.547 L1008.82 684.547 L1009.38 684.547 L1009.94 684.547 L1010.5 684.547 L1011.06 684.547 L1011.62 684.547 L1012.18 684.547 L1012.73 684.547 L1013.29 684.547 L1013.85 684.547 L1014.41 684.547 L1014.97 684.547 L1015.53 684.547 L1016.09 684.547 L1016.65 684.547 L1017.21 684.547 L1017.77 684.547 L1018.33 684.547 L1018.89 684.547 L1019.45 684.547 L1020.01 684.547 L1020.56 684.547 L1021.12 684.547 L1021.68 684.547 L1022.24 684.547 L1022.8 684.547 L1023.36 684.547 L1023.92 684.547 L1024.48 684.547 L1025.04 684.547 L1025.6 684.547 L1026.16 684.547 L1026.72 684.547 L1027.28 684.547 L1027.83 684.547 L1028.39 684.547 L1028.95 684.547 L1029.51 684.547 L1030.07 684.547 L1030.63 684.547 L1031.19 684.547 L1031.75 684.547 L1032.31 684.547 L1032.87 684.547 L1033.43 684.547 L1033.99 684.547 L1034.55 684.547 L1035.1 684.547 L1035.66 684.547 L1036.22 684.547 L1036.78 684.547 L1037.34 684.547 L1037.9 684.547 L1038.46 684.547 L1039.02 684.547 L1039.58 684.547 L1040.14 684.547 L1040.7 684.547 L1041.26 684.547 L1041.82 684.547 L1042.38 684.547 L1042.93 684.547 L1043.49 684.547 L1044.05 684.547 L1044.61 684.547 L1045.17 684.547 L1045.73 684.547 L1046.29 684.547 L1046.85 684.547 L1047.41 684.547 L1047.97 684.547 L1048.53 684.547 L1049.09 684.547 L1049.65 684.547 L1050.2 684.547 L1050.76 684.547 L1051.32 684.547 L1051.88 684.547 L1052.44 684.547 L1053 684.547 L1053.56 684.547 L1054.12 684.547 L1054.68 684.547 L1055.24 684.547 L1055.8 684.547 L1056.36 684.547 L1056.92 684.547 L1057.48 684.547 L1058.03 684.547 L1058.59 684.547 L1059.15 684.547 L1059.71 684.547 L1060.27 684.547 L1060.83 684.547 L1061.39 684.547 L1061.95 684.547 L1062.51 684.547 L1063.07 684.547 L1063.63 684.547 L1064.19 684.547 L1064.75 684.547 L1065.3 684.547 L1065.86 684.547 L1066.42 684.547 L1066.98 684.547 L1067.54 684.547 L1068.1 684.547 L1068.66 684.547 L1069.22 684.547 L1069.78 684.547 L1070.34 684.547 L1070.9 684.547 L1071.46 684.547 L1072.02 684.547 L1072.57 684.547 L1073.13 684.547 L1073.69 684.547 L1074.25 684.547 L1074.81 684.547 L1075.37 684.547 L1075.93 684.547 L1076.49 684.547 L1077.05 684.547 L1077.61 684.547 L1078.17 684.547 L1078.73 684.547 L1079.29 684.547 L1079.85 684.547 L1080.4 684.547 L1080.96 684.547 L1081.52 684.547 L1082.08 684.547 L1082.64 684.547 L1083.2 684.547 L1083.76 684.547 L1084.32 684.547 L1084.88 684.547 L1085.44 684.547 L1086 684.547 L1086.56 684.547 L1087.12 684.547 L1087.67 684.547 L1088.23 684.547 L1088.79 684.547 L1089.35 684.547 L1089.91 684.547 L1090.47 684.547 L1091.03 684.547 L1091.59 684.547 L1092.15 684.547 L1092.71 684.547 L1093.27 684.547 L1093.83 684.547 L1094.39 684.547 L1094.94 684.547 L1095.5 684.547 L1096.06 684.547 L1096.62 684.547 L1097.18 684.547 L1097.74 684.547 L1098.3 684.547 L1098.86 684.547 L1099.42 684.547 L1099.98 684.547 L1100.54 684.547 L1101.1 684.547 L1101.66 684.547 L1102.22 684.547 L1102.77 684.547 L1103.33 684.547 L1103.89 684.547 L1104.45 684.547 L1105.01 684.547 L1105.57 684.547 L1106.13 684.547 L1106.69 684.547 L1107.25 684.547 L1107.81 684.547 L1108.37 684.547 L1108.93 684.547 L1109.49 684.547 L1110.04 684.547 L1110.6 684.547 L1111.16 684.547 L1111.72 684.547 L1112.28 684.547 L1112.84 684.547 L1113.4 684.547 L1113.96 684.547 L1114.52 684.547 L1115.08 684.547 L1115.64 684.547 L1116.2 684.547 L1116.76 684.547 L1117.31 684.547 L1117.87 684.547 L1118.43 684.547 L1118.99 684.547 L1119.55 684.547 L1120.11 684.547 L1120.67 684.547 L1121.23 684.547 L1121.79 684.547 L1122.35 684.547 L1122.91 684.547 L1123.47 684.547 L1124.03 684.547 L1124.59 684.547 L1125.14 684.547 L1125.7 684.547 L1126.26 684.547 L1126.82 684.547 L1127.38 684.547 L1127.94 684.547 L1128.5 684.547 L1129.06 684.547 L1129.62 684.547 L1130.18 684.547 L1130.74 684.547 L1131.3 684.547 L1131.86 684.547 L1132.41 684.547 L1132.97 684.547 L1133.53 684.547 L1134.09 684.547 L1134.65 684.547 L1135.21 684.547 L1135.77 684.547 L1136.33 684.547 L1136.89 684.547 L1137.45 684.547 L1138.01 684.547 L1138.57 684.547 L1139.13 684.547 L1139.68 684.547 L1140.24 684.547 L1140.8 684.547 L1141.36 684.547 L1141.92 684.547 L1142.48 684.547 L1143.04 684.547 L1143.6 684.547 L1144.16 684.547 L1144.72 684.547 L1145.28 684.547 L1145.84 684.547 L1146.4 684.547 L1146.96 684.547 L1147.51 684.547 L1148.07 684.547 L1148.63 684.547 L1149.19 684.547 L1149.75 684.547 L1150.31 684.547 L1150.87 684.547 L1151.43 684.547 L1151.99 684.547 L1152.55 684.547 L1153.11 684.547 L1153.67 684.547 L1154.23 684.547 L1154.78 684.547 L1155.34 684.547 L1155.9 684.547 L1156.46 684.547 L1157.02 684.547 L1157.58 684.547 L1158.14 684.547 L1158.7 684.547 L1159.26 684.547 L1159.82 684.547 L1160.38 684.547 L1160.94 684.547 L1161.5 684.547 L1162.05 684.547 L1162.61 684.547 L1163.17 684.547 L1163.73 684.547 L1164.29 684.547 L1164.85 684.547 L1165.41 684.547 L1165.97 684.547 L1166.53 684.547 L1167.09 684.547 L1167.65 684.547 L1168.21 684.547 L1168.77 684.547 L1169.33 684.547 L1169.88 684.547 L1170.44 684.547 L1171 684.547 L1171.56 684.547 L1172.12 684.547 L1172.68 684.547 L1173.24 684.547 L1173.8 684.547 L1174.36 684.547 L1174.92 684.547 L1175.48 684.547 L1176.04 684.547 L1176.6 684.547 L1177.15 684.547 L1177.71 684.547 L1178.27 684.547 L1178.83 684.547 L1179.39 684.547 L1179.95 684.547 L1180.51 684.547 L1181.07 684.547 L1181.63 684.547 L1182.19 684.547 L1182.75 684.547 L1183.31 684.547 L1183.87 684.547 L1184.43 684.547 L1184.98 684.547 L1185.54 684.547 L1186.1 684.547 L1186.66 684.547 L1187.22 684.547 L1187.78 684.547 L1188.34 684.547 L1188.9 684.547 L1189.46 684.547 L1190.02 684.547 L1190.58 684.547 L1191.14 684.547 L1191.7 684.547 L1192.25 684.547 L1192.81 684.547 L1193.37 684.547 L1193.93 684.547 L1194.49 684.547 L1195.05 684.547 L1195.61 684.547 L1196.17 684.547 L1196.73 684.547 L1197.29 684.547 L1197.85 684.547 L1198.41 684.547 L1198.97 684.547 L1199.52 684.547 L1200.08 684.547 L1200.64 684.547 L1201.2 684.547 L1201.76 684.547 L1202.32 684.547 L1202.88 684.547 L1203.44 684.547 L1204 684.547 L1204.56 684.547 L1205.12 684.547 L1205.68 684.547 L1206.24 684.547 L1206.8 684.547 L1207.35 684.547 L1207.91 684.547 L1208.47 684.547 L1209.03 684.547 L1209.59 684.547 L1210.15 684.547 L1210.71 684.547 L1211.27 684.547 L1211.83 684.547 L1212.39 684.547 L1212.95 684.547 L1213.51 684.547 L1214.07 684.547 L1214.62 684.547 L1215.18 684.547 L1215.74 684.547 L1216.3 684.547 L1216.86 684.547 L1217.42 684.547 L1217.98 684.547 L1218.54 684.547 L1219.1 684.547 L1219.66 684.547 L1220.22 684.547 L1220.78 684.547 L1221.34 684.547 L1221.89 684.547 L1222.45 684.547 L1223.01 684.547 L1223.57 684.547 L1224.13 684.547 L1224.69 684.547 L1225.25 684.547 L1225.81 684.547 L1226.37 684.547 L1226.93 684.547 L1227.49 684.547 L1228.05 684.547 L1228.61 684.547 L1229.17 684.547 L1229.72 684.547 L1230.28 684.547 L1230.84 684.547 L1231.4 684.547 L1231.96 684.547 L1232.52 684.547 L1233.08 684.547 L1233.64 684.547 L1234.2 684.547 L1234.76 684.547 L1235.32 684.547 L1235.88 684.547 L1236.44 684.547 L1236.99 684.547 L1237.55 684.547 L1238.11 684.547 L1238.67 684.547 L1239.23 684.547 L1239.79 684.547 L1240.35 684.547 L1240.91 684.547 L1241.47 684.547 L1242.03 684.547 L1242.59 684.547 L1243.15 684.547 L1243.71 684.547 L1244.26 684.547 L1244.82 684.547 L1245.38 684.547 L1245.94 684.547 L1246.5 684.547 L1247.06 684.547 L1247.62 684.547 L1248.18 684.547 L1248.74 684.547 L1249.3 684.547 L1249.86 684.547 L1250.42 684.547 L1250.98 684.547 L1251.54 684.547 L1252.09 684.547 L1252.65 684.547 L1253.21 684.547 L1253.77 684.547 L1254.33 684.547 L1254.89 684.547 L1255.45 684.547 L1256.01 684.547 L1256.57 684.547 L1257.13 684.547 L1257.69 684.547 L1258.25 684.547 L1258.81 684.547 L1259.36 684.547 L1259.92 684.547 L1260.48 684.547 L1261.04 684.547 L1261.6 684.547 L1262.16 684.547 L1262.72 684.547 L1263.28 684.547 L1263.84 684.547 L1264.4 684.547 L1264.96 684.547 L1265.52 684.547 L1266.08 684.547 L1266.63 684.547 L1267.19 684.547 L1267.75 684.547 L1268.31 684.547 L1268.87 684.547 L1269.43 684.547 L1269.99 684.547 L1270.55 684.547 L1271.11 684.547 L1271.67 684.547 L1272.23 684.547 L1272.79 684.547 L1273.35 684.547 L1273.91 684.547 L1274.46 684.547 L1275.02 684.547 L1275.58 684.547 L1276.14 684.547 L1276.7 684.547 L1277.26 684.547 L1277.82 684.547 L1278.38 684.547 L1278.94 684.547 L1279.5 684.547 L1280.06 684.547 L1280.62 684.547 L1281.18 684.547 L1281.73 684.547 L1282.29 684.547 L1282.85 684.547 L1283.41 684.547 L1283.97 684.547 L1284.53 684.547 L1285.09 684.547 L1285.65 684.547 L1286.21 684.547 L1286.77 684.547 L1287.33 684.547 L1287.89 684.547 L1288.45 684.547 L1289 684.547 L1289.56 684.547 L1290.12 684.547 L1290.68 684.547 L1291.24 684.547 L1291.8 684.547 L1292.36 684.547 L1292.92 684.547 L1293.48 684.547 L1294.04 684.547 L1294.6 684.547 L1295.16 684.547 L1295.72 684.547 L1296.28 684.547 L1296.83 684.547 L1297.39 684.547 L1297.95 684.547 L1298.51 684.547 L1299.07 684.547 L1299.63 684.547 L1300.19 684.547 L1300.75 684.547 L1301.31 684.547 L1301.87 684.547 L1302.43 684.547 L1302.99 684.547 L1303.55 684.547 L1304.1 684.547 L1304.66 684.547 L1305.22 684.547 L1305.78 684.547 L1306.34 684.547 L1306.9 684.547 L1307.46 684.547 L1308.02 684.547 L1308.58 684.547 L1309.14 684.547 L1309.7 684.547 L1310.26 684.547 L1310.82 684.547 L1311.38 684.547 L1311.93 684.547 L1312.49 684.547 L1313.05 684.547 L1313.61 684.547 L1314.17 684.547 L1314.73 684.547 L1315.29 684.547 L1315.85 684.547 L1316.41 684.547 L1316.97 684.547 L1317.53 684.547 L1318.09 684.547 L1318.65 684.547 L1319.2 684.547 L1319.76 684.547 L1320.32 684.547 L1320.88 684.547 L1321.44 684.547 L1322 684.547 L1322.56 684.547 L1323.12 684.547 L1323.68 684.547 L1324.24 684.547 L1324.8 684.547 L1325.36 684.547 L1325.92 684.547 L1326.47 684.547 L1327.03 684.547 L1327.59 684.547 L1328.15 684.547 L1328.71 684.547 L1329.27 684.547 L1329.83 684.547 L1330.39 684.547 L1330.95 684.547 L1331.51 684.547 L1332.07 684.547 L1332.63 684.547 L1333.19 684.547 L1333.75 684.547 L1334.3 684.547 L1334.86 684.547 L1335.42 684.547 L1335.98 684.547 L1336.54 684.547 L1337.1 684.547 L1337.66 684.547 L1338.22 684.547 L1338.78 684.547 L1339.34 684.547 L1339.9 684.547 L1340.46 684.547 L1341.02 684.547 L1341.57 684.547 L1342.13 684.547 L1342.69 684.547 L1343.25 684.547 L1343.81 684.547 L1344.37 684.547 L1344.93 684.547 L1345.49 684.547 L1346.05 684.547 L1346.61 684.547 L1347.17 684.547 L1347.73 684.547 L1348.29 684.547 L1348.84 684.547 L1349.4 684.547 L1349.96 684.547 L1350.52 684.547 L1351.08 684.547 L1351.64 684.547 L1352.2 684.547 L1352.76 684.547 L1353.32 684.547 L1353.88 684.547 L1354.44 684.547 L1355 684.547 L1355.56 684.547 L1356.12 684.547 L1356.67 684.547 L1357.23 684.547 L1357.79 684.547 L1358.35 684.547 L1358.91 684.547 L1359.47 684.547 L1360.03 684.547 L1360.59 684.547 L1361.15 684.547 L1361.71 684.547 L1362.27 684.547 L1362.83 684.547 L1363.39 684.547 L1363.94 684.547 L1364.5 684.547 L1365.06 684.547 L1365.62 684.547 L1366.18 684.547 L1366.74 684.547 L1367.3 684.547 L1367.86 684.547 L1368.42 684.547 L1368.98 684.547 L1369.54 684.547 L1370.1 684.547 L1370.66 684.547 L1371.21 684.547 L1371.77 684.547 L1372.33 684.547 L1372.89 684.547 L1373.45 684.547 L1374.01 684.547 L1374.57 684.547 L1375.13 684.547 L1375.69 684.547 L1376.25 684.547 L1376.81 684.547 L1377.37 684.547 L1377.93 684.547 L1378.49 684.547 L1379.04 684.547 L1379.6 684.547 L1380.16 684.547 L1380.72 684.547 L1381.28 684.547 L1381.84 684.547 L1382.4 684.547 L1382.96 684.547 L1383.52 684.547 L1384.08 684.547 L1384.64 684.547 L1385.2 684.547 L1385.76 684.547 L1386.31 684.547 L1386.87 684.547 L1387.43 684.547 L1387.99 684.547 L1388.55 684.547 L1389.11 684.547 L1389.67 684.547 L1390.23 684.547 L1390.79 684.547 L1391.35 684.547 L1391.91 684.547 L1392.47 684.547 L1393.03 684.547 L1393.58 684.547 L1394.14 684.547 L1394.7 684.547 L1395.26 684.547 L1395.82 684.547 L1396.38 684.547 L1396.94 684.547 L1397.5 684.547 L1398.06 684.547 L1398.62 684.547 L1399.18 684.547 L1399.74 684.547 L1400.3 684.547 L1400.86 684.547 L1401.41 684.547 L1401.97 684.547 L1402.53 684.547 L1403.09 684.547 L1403.65 684.547 L1404.21 684.547 L1404.77 684.547 L1405.33 684.547 L1405.89 684.547 L1406.45 684.547 L1407.01 684.547 L1407.57 684.547 L1408.13 684.547 L1408.68 684.547 L1409.24 684.547 L1409.8 684.547 L1410.36 684.547 L1410.92 684.547 L1411.48 684.547 L1412.04 684.547 L1412.6 684.547 L1413.16 684.547 L1413.72 684.547 L1414.28 684.547 L1414.84 684.547 L1415.4 684.547 L1415.95 684.547 L1416.51 684.547 L1417.07 684.547 L1417.63 684.547 L1418.19 684.547 L1418.75 684.547 L1419.31 684.547 L1419.87 684.547 L1420.43 684.547 L1420.99 684.547 L1421.55 684.547 L1422.11 684.547 L1422.67 684.547 L1423.23 684.547 L1423.78 684.547 L1424.34 684.547 L1424.9 684.547 L1425.46 684.547 L1426.02 684.547 L1426.58 684.547 L1427.14 684.547 L1427.7 684.547 L1428.26 684.547 L1428.82 684.547 L1429.38 684.547 L1429.94 684.547 L1430.5 684.547 L1431.05 684.547 L1431.61 684.547 L1432.17 684.547 L1432.73 684.547 L1433.29 684.547 L1433.85 684.547 L1434.41 684.547 L1434.97 684.547 L1435.53 684.547 L1436.09 684.547 L1436.65 684.547 L1437.21 684.547 L1437.77 684.547 L1438.33 684.547 L1438.88 684.547 L1439.44 684.547 L1440 684.547 L1440.56 684.547 L1441.12 684.547 L1441.68 684.547 L1442.24 684.547 L1442.8 684.547 L1443.36 684.547 L1443.92 684.547 L1444.48 684.547 L1445.04 684.547 L1445.6 684.547 L1446.15 684.547 L1446.71 684.547 L1447.27 684.547 L1447.83 684.547 L1448.39 684.547 L1448.95 684.547 L1449.51 684.547 L1450.07 684.547 L1450.63 684.547 L1451.19 684.547 L1451.75 684.547 L1452.31 684.547 L1452.87 684.547 L1453.42 684.547 L1453.98 684.547 L1454.54 684.547 L1455.1 684.547 L1455.66 684.547 L1456.22 684.547 L1456.78 684.547 L1457.34 684.547 L1457.9 684.547 L1458.46 684.547 L1459.02 684.547 L1459.58 684.547 L1460.14 684.547 L1460.7 684.547 L1461.25 684.547 L1461.81 684.547 L1462.37 684.547 L1462.93 684.547 L1463.49 684.547 L1464.05 684.547 L1464.61 684.547 L1465.17 684.547 L1465.73 684.547 L1466.29 684.547 L1466.85 684.547 L1467.41 684.547 L1467.97 684.547 L1468.52 684.547 L1469.08 684.547 L1469.64 684.547 L1470.2 684.547 L1470.76 684.547 L1471.32 684.547 L1471.88 684.547 L1472.44 684.547 L1473 684.547 L1473.56 684.547 L1474.12 684.547 L1474.68 684.547 L1475.24 684.547 L1475.79 684.547 L1476.35 684.547 L1476.91 684.547 L1477.47 684.547 L1478.03 684.547 L1478.59 684.547 L1479.15 684.547 L1479.71 684.547 L1480.27 684.547 L1480.83 684.547 L1481.39 684.547 L1481.95 684.547 L1482.51 684.547 L1483.07 684.547 L1483.62 684.547 L1484.18 684.547 L1484.74 684.547 L1485.3 684.547 L1485.86 684.547 L1486.42 684.547 L1486.98 684.547 L1487.54 684.547 L1488.1 684.547 L1488.66 684.547 L1489.22 684.547 L1489.78 684.547 L1490.34 684.547 L1490.89 684.547 L1491.45 684.547 L1492.01 684.547 L1492.57 684.547 L1493.13 684.547 L1493.69 684.547 L1494.25 684.547 L1494.81 684.547 L1495.37 684.547 L1495.93 684.547 L1496.49 684.547 L1497.05 684.547 L1497.61 684.547 L1498.16 684.547 L1498.72 684.547 L1499.28 684.547 L1499.84 684.547 L1500.4 684.547 L1500.96 684.547 L1501.52 684.547 L1502.08 684.547 L1502.64 684.547 L1503.2 684.547 L1503.76 684.547 L1504.32 684.547 L1504.88 684.547 L1505.44 684.547 L1505.99 684.547 L1506.55 684.547 L1507.11 684.547 L1507.67 684.547 L1508.23 684.547 L1508.79 684.547 L1509.35 684.547 L1509.91 684.547 L1510.47 684.547 L1511.03 684.547 L1511.59 684.547 L1512.15 684.547 L1512.71 684.547 L1513.26 684.547 L1513.82 684.547 L1514.38 684.547 L1514.94 684.547 L1515.5 684.547 L1516.06 684.547 L1516.62 684.547 L1517.18 684.547 L1517.74 684.547 L1518.3 684.547 L1518.86 684.547 L1519.42 684.547 L1519.98 684.547 L1520.53 684.547 L1521.09 684.547 L1521.65 684.547 L1522.21 684.547 L1522.77 684.547 L1523.33 684.547 L1523.89 684.547 L1524.45 684.547 L1525.01 684.547 L1525.57 684.547 L1526.13 684.547 L1526.69 684.547 L1527.25 684.547 L1527.81 684.547 L1528.36 684.547 L1528.92 684.547 L1529.48 684.547 L1530.04 684.547 L1530.6 684.547 L1531.16 684.547 L1531.72 684.547 L1532.28 684.547 L1532.84 684.547 L1533.4 684.547 L1533.96 684.547 L1534.52 684.547 L1535.08 684.547 L1535.63 684.547 L1536.19 684.547 L1536.75 684.547 L1537.31 684.547 L1537.87 684.547 L1538.43 684.547 L1538.99 684.547 L1539.55 684.547 L1540.11 684.547 L1540.67 684.547 L1541.23 684.547 L1541.79 684.547 L1542.35 684.547 L1542.9 684.547 L1543.46 684.547 L1544.02 684.547 L1544.58 684.547 L1545.14 684.547 L1545.7 684.547 L1546.26 684.547 L1546.82 684.547 L1547.38 684.547 L1547.94 684.547 L1548.5 684.547 L1549.06 684.547 L1549.62 684.547 L1550.18 684.547 L1550.73 684.547 L1551.29 684.547 L1551.85 684.547 L1552.41 684.547 L1552.97 684.547 L1553.53 684.547 L1554.09 684.547 L1554.65 684.547 L1555.21 684.547 L1555.77 684.547 L1556.33 684.547 L1556.89 684.547 L1557.45 684.547 L1558 684.547 L1558.56 684.547 L1559.12 684.547 L1559.68 684.547 L1560.24 684.547 L1560.8 684.547 L1561.36 684.547 L1561.92 684.547 L1562.48 684.547 L1563.04 684.547 L1563.6 684.547 L1564.16 684.547 L1564.72 684.547 L1565.28 684.547 L1565.83 684.547 L1566.39 684.547 L1566.95 684.547 L1567.51 684.547 L1568.07 684.547 L1568.63 684.547 L1569.19 684.547 L1569.75 684.547 L1570.31 684.547 L1570.87 684.547 L1571.43 684.547 L1571.99 684.547 L1572.55 684.547 L1573.1 684.547 L1573.66 684.547 L1574.22 684.547 L1574.78 684.547 L1575.34 684.547 L1575.9 684.547 L1576.46 684.547 L1577.02 684.547 L1577.58 684.547 L1578.14 684.547 L1578.7 684.547 L1579.26 684.547 L1579.82 684.547 L1580.37 684.547 L1580.93 684.547 L1581.49 684.547 L1582.05 684.547 L1582.61 684.547 L1583.17 684.547 L1583.73 684.547 L1584.29 684.547 L1584.85 684.547 L1585.41 684.547 L1585.97 684.547 L1586.53 684.547 L1587.09 684.547 L1587.65 684.547 L1588.2 684.547 L1588.76 684.547 L1589.32 684.547 L1589.88 684.547 L1590.44 684.547 L1591 684.547 L1591.56 684.547 L1592.12 684.547 L1592.68 684.547 L1593.24 684.547 L1593.8 684.547 L1594.36 684.547 L1594.92 684.547 L1595.47 684.547 L1596.03 684.547 L1596.59 684.547 L1597.15 684.547 L1597.71 684.547 L1598.27 684.547 L1598.83 684.547 L1599.39 684.547 L1599.95 684.547 L1600.51 684.547 L1601.07 684.547 L1601.63 684.547 L1602.19 684.547 L1602.74 684.547 L1603.3 684.547 L1603.86 684.547 L1604.42 684.547 L1604.98 684.547 L1605.54 684.547 L1606.1 684.547 L1606.66 684.547 L1607.22 684.547 L1607.78 684.547 L1608.34 684.547 L1608.9 684.547 L1609.46 684.547 L1610.02 684.547 L1610.57 684.547 L1611.13 684.547 L1611.69 684.547 L1612.25 684.547 L1612.81 684.547 L1613.37 684.547 L1613.93 684.547 L1614.49 684.547 L1615.05 684.547 L1615.61 684.547 L1616.17 684.547 L1616.73 684.547 L1617.29 684.547 L1617.84 684.547 L1618.4 684.547 L1618.96 684.547 L1619.52 684.547 L1620.08 684.547 L1620.64 684.547 L1621.2 684.547 L1621.76 684.547 L1622.32 684.547 L1622.88 684.547 L1623.44 684.547 L1624 684.547 L1624.56 684.547 L1625.11 684.547 L1625.67 684.547 L1626.23 684.547 L1626.79 684.547 L1627.35 684.547 L1627.91 684.547 L1628.47 684.547 L1629.03 684.547 L1629.59 684.547 L1630.15 684.547 L1630.71 684.547 L1631.27 684.547 L1631.83 684.547 L1632.39 684.547 L1632.94 684.547 L1633.5 684.547 L1634.06 684.547 L1634.62 684.547 L1635.18 684.547 L1635.74 684.547 L1636.3 684.547 L1636.86 684.547 L1637.42 684.547 L1637.98 684.547 L1638.54 684.547 L1639.1 684.547 L1639.66 684.547 L1640.21 684.547 L1640.77 684.547 L1641.33 684.547 L1641.89 684.547 L1642.45 684.547 L1643.01 684.547 L1643.57 684.547 L1644.13 684.547 L1644.69 684.547 L1645.25 684.547 L1645.81 684.547 L1646.37 684.547 L1646.93 684.547 L1647.48 684.547 L1648.04 684.547 L1648.6 684.547 L1649.16 684.547 L1649.72 684.547 L1650.28 684.547 L1650.84 684.547 L1651.4 684.547 L1651.96 684.547 L1652.52 684.547 L1653.08 684.547 L1653.64 684.547 L1654.2 684.547 L1654.76 684.547 L1655.31 684.547 L1655.87 684.547 L1656.43 684.547 L1656.99 684.547 L1657.55 684.547 L1658.11 684.547 L1658.67 684.547 L1659.23 684.547 L1659.79 684.547 L1660.35 684.547 L1660.91 684.547 L1661.47 684.547 L1662.03 684.547 L1662.58 684.547 L1663.14 684.547 L1663.7 684.547 L1664.26 684.547 L1664.82 684.547 L1665.38 684.547 L1665.94 684.547 L1666.5 684.547 L1667.06 684.547 L1667.62 684.547 L1668.18 684.547 L1668.74 684.547 L1669.3 684.547 L1669.85 684.547 L1670.41 684.547 L1670.97 684.547 L1671.53 684.547 L1672.09 684.547 L1672.65 684.547 L1673.21 684.547 L1673.77 684.547 L1674.33 684.547 L1674.89 684.547 L1675.45 684.547 L1676.01 684.547 L1676.57 684.547 L1677.13 684.547 L1677.68 684.547 L1678.24 684.547 L1678.8 684.547 L1679.36 684.547 L1679.92 684.547 L1680.48 684.547 L1681.04 684.547 L1681.6 684.547 L1682.16 684.547 L1682.72 684.547 L1683.28 684.547 L1683.84 684.547 L1684.4 684.547 L1684.95 684.547 L1685.51 684.547 L1686.07 684.547 L1686.63 684.547 L1687.19 684.547 L1687.75 684.547 L1688.31 684.547 L1688.87 684.547 L1689.43 684.547 L1689.99 684.547 L1690.55 684.547 L1691.11 684.547 L1691.67 684.547 L1692.23 684.547 L1692.78 684.547 L1693.34 684.547 L1693.9 684.547 L1694.46 684.547 L1695.02 684.547 L1695.58 684.547 L1696.14 684.547 L1696.7 684.547 L1697.26 684.547 L1697.82 684.547 L1698.38 684.547 L1698.94 684.547 L1699.5 684.547 L1700.05 684.547 L1700.61 684.547 L1701.17 684.547 L1701.73 684.547 L1702.29 684.547 L1702.85 684.547 L1703.41 684.547 L1703.97 684.547 L1704.53 684.547 L1705.09 684.547 L1705.65 684.547 L1706.21 684.547 L1706.77 684.547 L1707.32 684.547 L1707.88 684.547 L1708.44 684.547 L1709 684.547 L1709.56 684.547 L1710.12 684.547 L1710.68 684.547 L1711.24 684.547 L1711.8 684.547 L1712.36 684.547 L1712.92 684.547 L1713.48 684.547 L1714.04 684.547 L1714.6 684.547 L1715.15 684.547 L1715.71 684.547 L1716.27 684.547 L1716.83 684.547 L1717.39 684.547 L1717.95 684.547 L1718.51 684.547 L1719.07 684.547 L1719.63 684.547 L1720.19 684.547 L1720.75 684.547 L1721.31 684.547 L1721.87 684.547 L1722.42 684.547 L1722.98 684.547 L1723.54 684.547 L1724.1 684.547 L1724.66 684.547 L1725.22 684.547 L1725.78 684.547 L1726.34 684.547 L1726.9 684.547 L1727.46 684.547 L1728.02 684.547 L1728.58 684.547 L1729.14 684.547 L1729.69 684.547 L1730.25 684.547 L1730.81 684.547 L1731.37 684.547 L1731.93 684.547 L1732.49 684.547 L1733.05 684.547 L1733.61 684.547 L1734.17 684.547 L1734.73 684.547 L1735.29 684.547 L1735.85 684.547 L1736.41 684.547 L1736.97 684.547 L1737.52 684.547 L1738.08 684.547 L1738.64 684.547 L1739.2 684.547 L1739.76 684.547 L1740.32 684.547 L1740.88 684.547 L1741.44 684.547 L1742 684.547 L1742.56 684.547 L1743.12 684.547 L1743.68 684.547 L1744.24 684.547 L1744.79 684.547 L1745.35 684.547 L1745.91 684.547 L1746.47 684.547 L1747.03 684.547 L1747.59 684.547 L1748.15 684.547 L1748.71 684.547 L1749.27 684.547 L1749.83 684.547 L1750.39 684.547 L1750.95 684.547 L1751.51 684.547 L1752.06 684.547 L1752.62 684.547 L1753.18 684.547 L1753.74 684.547 L1754.3 684.547 L1754.86 684.547 L1755.42 684.547 L1755.98 684.547 L1756.54 684.547 L1757.1 684.547 L1757.66 684.547 L1758.22 684.547 L1758.78 684.547 L1759.34 684.547 L1759.89 684.547 L1760.45 684.547 L1761.01 684.547 L1761.57 684.547 L1762.13 684.547 L1762.69 684.547 L1763.25 684.547 L1763.81 684.547 L1764.37 684.547 L1764.93 684.547 L1765.49 684.547 L1766.05 684.547 L1766.61 684.547 L1767.16 684.547 L1767.72 684.547 L1768.28 684.547 L1768.84 684.547 L1769.4 684.547 L1769.96 684.547 L1770.52 684.547 L1771.08 684.547 L1771.64 684.547 L1772.2 684.547 L1772.76 684.547 L1773.32 684.547 L1773.88 684.547 L1774.43 684.547 L1774.99 684.547 L1775.55 684.547 L1776.11 684.547 L1776.67 684.547 L1777.23 684.547 L1777.79 684.547 L1778.35 684.547 L1778.91 684.547 L1779.47 684.547 L1780.03 684.547 L1780.59 684.547 L1781.15 684.547 L1781.71 684.547 L1782.26 684.547 L1782.82 684.547 L1783.38 684.547 L1783.94 684.547 L1784.5 684.547 L1785.06 684.547 L1785.62 684.547 L1786.18 684.547 L1786.74 684.547 L1787.3 684.547 L1787.86 684.547 L1788.42 684.547 L1788.98 684.547 L1789.53 684.547 L1790.09 684.547 L1790.65 684.547 L1791.21 684.547 L1791.77 684.547 L1792.33 684.547 L1792.89 684.547 L1793.45 684.547 L1794.01 684.547 L1794.57 684.547 L1795.13 684.547 L1795.69 684.547 L1796.25 684.547 L1796.8 684.547 L1797.36 684.547 L1797.92 684.547 L1798.48 684.547 L1799.04 684.547 L1799.6 684.547 L1800.16 684.547 L1800.72 684.547 L1801.28 684.547 L1801.84 684.547 L1802.4 684.547 L1802.96 684.547 L1803.52 684.547 L1804.08 684.547 L1804.63 684.547 L1805.19 684.547 L1805.75 684.547 L1806.31 684.547 L1806.87 684.547 L1807.43 684.547 L1807.99 684.547 L1808.55 684.547 L1809.11 684.547 L1809.67 684.547 L1810.23 684.547 L1810.79 684.547 L1811.35 684.547 L1811.9 684.547 L1812.46 684.547 L1813.02 684.547 L1813.58 684.547 L1814.14 684.547 L1814.7 684.547 L1815.26 684.547 L1815.82 684.547 L1816.38 684.547 L1816.94 684.547 L1817.5 684.547 L1818.06 684.547 L1818.62 684.547 L1819.18 684.547 L1819.73 684.547 L1820.29 684.547 L1820.85 684.547 L1821.41 684.547 L1821.97 684.547 L1822.53 684.547 L1823.09 684.547 L1823.65 684.547 L1824.21 684.547 L1824.77 684.547 L1825.33 684.547 L1825.89 684.547 L1826.45 684.547 L1827 684.547 L1827.56 684.547 L1828.12 684.547 L1828.68 684.547 L1829.24 684.547 L1829.8 684.547 L1830.36 684.547 L1830.92 684.547 L1831.48 684.547 L1832.04 684.547 L1832.6 684.547 L1833.16 684.547 L1833.72 684.547 L1834.27 684.547 L1834.83 684.547 L1835.39 684.547 L1835.95 684.547 L1836.51 684.547 L1837.07 684.547 L1837.63 684.547 L1838.19 684.547 L1838.19 682.67 L1837.63 682.67 L1837.07 682.67 L1836.51 682.67 L1835.95 682.67 L1835.39 682.67 L1834.83 682.67 L1834.27 682.67 L1833.72 682.67 L1833.16 682.67 L1832.6 682.67 L1832.04 682.67 L1831.48 682.67 L1830.92 682.67 L1830.36 682.67 L1829.8 682.67 L1829.24 682.67 L1828.68 682.67 L1828.12 682.67 L1827.56 682.67 L1827 682.67 L1826.45 682.67 L1825.89 682.67 L1825.33 682.67 L1824.77 682.67 L1824.21 682.67 L1823.65 682.67 L1823.09 682.67 L1822.53 682.67 L1821.97 682.67 L1821.41 682.67 L1820.85 682.67 L1820.29 682.67 L1819.73 682.67 L1819.18 682.67 L1818.62 682.67 L1818.06 682.67 L1817.5 682.67 L1816.94 682.67 L1816.38 682.67 L1815.82 682.67 L1815.26 682.67 L1814.7 682.67 L1814.14 682.67 L1813.58 682.67 L1813.02 682.67 L1812.46 682.67 L1811.9 682.67 L1811.35 682.67 L1810.79 682.67 L1810.23 682.67 L1809.67 682.67 L1809.11 682.67 L1808.55 682.67 L1807.99 682.67 L1807.43 682.67 L1806.87 682.67 L1806.31 682.67 L1805.75 682.67 L1805.19 682.67 L1804.63 682.67 L1804.08 682.67 L1803.52 682.67 L1802.96 682.67 L1802.4 682.67 L1801.84 682.67 L1801.28 682.67 L1800.72 682.67 L1800.16 682.67 L1799.6 682.67 L1799.04 682.67 L1798.48 682.67 L1797.92 682.67 L1797.36 682.67 L1796.8 682.67 L1796.25 682.67 L1795.69 682.67 L1795.13 682.67 L1794.57 682.67 L1794.01 682.67 L1793.45 682.67 L1792.89 682.67 L1792.33 682.67 L1791.77 682.67 L1791.21 682.67 L1790.65 682.67 L1790.09 682.67 L1789.53 682.67 L1788.98 682.67 L1788.42 682.67 L1787.86 682.67 L1787.3 682.67 L1786.74 682.67 L1786.18 682.67 L1785.62 682.67 L1785.06 682.67 L1784.5 682.67 L1783.94 682.67 L1783.38 682.67 L1782.82 682.67 L1782.26 682.67 L1781.71 682.67 L1781.15 682.67 L1780.59 682.67 L1780.03 682.67 L1779.47 682.67 L1778.91 682.67 L1778.35 682.67 L1777.79 682.67 L1777.23 682.67 L1776.67 682.67 L1776.11 682.67 L1775.55 682.67 L1774.99 682.67 L1774.43 682.67 L1773.88 682.67 L1773.32 682.67 L1772.76 682.67 L1772.2 682.67 L1771.64 682.67 L1771.08 682.67 L1770.52 682.67 L1769.96 682.67 L1769.4 682.67 L1768.84 682.67 L1768.28 682.67 L1767.72 682.67 L1767.16 682.67 L1766.61 682.67 L1766.05 682.67 L1765.49 682.67 L1764.93 682.67 L1764.37 682.67 L1763.81 682.67 L1763.25 682.67 L1762.69 682.67 L1762.13 682.67 L1761.57 682.67 L1761.01 682.67 L1760.45 682.67 L1759.89 682.67 L1759.34 682.67 L1758.78 682.67 L1758.22 682.67 L1757.66 682.67 L1757.1 682.67 L1756.54 682.67 L1755.98 682.67 L1755.42 682.67 L1754.86 682.67 L1754.3 682.67 L1753.74 682.67 L1753.18 682.67 L1752.62 682.67 L1752.06 682.67 L1751.51 682.67 L1750.95 682.67 L1750.39 682.67 L1749.83 682.67 L1749.27 682.67 L1748.71 682.67 L1748.15 682.67 L1747.59 682.67 L1747.03 682.67 L1746.47 682.67 L1745.91 682.67 L1745.35 682.67 L1744.79 682.67 L1744.24 682.67 L1743.68 682.67 L1743.12 682.67 L1742.56 682.67 L1742 682.67 L1741.44 682.67 L1740.88 682.67 L1740.32 682.67 L1739.76 682.67 L1739.2 682.67 L1738.64 682.67 L1738.08 682.67 L1737.52 682.67 L1736.97 682.67 L1736.41 682.67 L1735.85 682.67 L1735.29 682.67 L1734.73 682.67 L1734.17 682.67 L1733.61 682.67 L1733.05 682.67 L1732.49 682.67 L1731.93 682.67 L1731.37 682.67 L1730.81 682.67 L1730.25 682.67 L1729.69 682.67 L1729.14 682.67 L1728.58 682.67 L1728.02 682.67 L1727.46 682.67 L1726.9 682.67 L1726.34 682.67 L1725.78 682.67 L1725.22 682.67 L1724.66 682.67 L1724.1 682.67 L1723.54 682.67 L1722.98 682.67 L1722.42 682.67 L1721.87 682.67 L1721.31 682.67 L1720.75 682.67 L1720.19 682.67 L1719.63 682.67 L1719.07 682.67 L1718.51 682.67 L1717.95 682.67 L1717.39 682.67 L1716.83 682.67 L1716.27 682.67 L1715.71 682.67 L1715.15 682.67 L1714.6 682.67 L1714.04 682.67 L1713.48 682.67 L1712.92 682.67 L1712.36 682.67 L1711.8 682.67 L1711.24 682.67 L1710.68 682.67 L1710.12 682.67 L1709.56 682.67 L1709 682.67 L1708.44 682.67 L1707.88 682.67 L1707.32 682.67 L1706.77 682.67 L1706.21 682.67 L1705.65 682.67 L1705.09 682.67 L1704.53 682.67 L1703.97 682.67 L1703.41 682.67 L1702.85 682.67 L1702.29 682.67 L1701.73 682.67 L1701.17 682.67 L1700.61 682.67 L1700.05 682.67 L1699.5 682.67 L1698.94 682.67 L1698.38 682.67 L1697.82 682.67 L1697.26 682.67 L1696.7 682.67 L1696.14 682.67 L1695.58 682.67 L1695.02 682.67 L1694.46 682.67 L1693.9 682.67 L1693.34 682.67 L1692.78 682.67 L1692.23 682.67 L1691.67 682.67 L1691.11 682.67 L1690.55 682.67 L1689.99 682.67 L1689.43 682.67 L1688.87 682.67 L1688.31 682.67 L1687.75 682.67 L1687.19 682.67 L1686.63 682.67 L1686.07 682.67 L1685.51 682.67 L1684.95 682.67 L1684.4 682.67 L1683.84 682.67 L1683.28 682.67 L1682.72 682.67 L1682.16 682.67 L1681.6 682.67 L1681.04 682.67 L1680.48 682.67 L1679.92 682.67 L1679.36 682.67 L1678.8 682.67 L1678.24 682.67 L1677.68 682.67 L1677.13 682.67 L1676.57 682.67 L1676.01 682.67 L1675.45 682.67 L1674.89 682.67 L1674.33 682.67 L1673.77 682.67 L1673.21 682.67 L1672.65 682.67 L1672.09 682.67 L1671.53 682.67 L1670.97 682.67 L1670.41 682.67 L1669.85 682.67 L1669.3 682.67 L1668.74 682.67 L1668.18 682.67 L1667.62 682.67 L1667.06 682.67 L1666.5 682.67 L1665.94 682.67 L1665.38 682.67 L1664.82 682.67 L1664.26 682.67 L1663.7 682.67 L1663.14 682.67 L1662.58 682.67 L1662.03 682.67 L1661.47 682.67 L1660.91 682.67 L1660.35 682.67 L1659.79 682.67 L1659.23 682.67 L1658.67 682.67 L1658.11 682.67 L1657.55 682.67 L1656.99 682.67 L1656.43 682.67 L1655.87 682.67 L1655.31 682.67 L1654.76 682.67 L1654.2 682.67 L1653.64 682.67 L1653.08 682.67 L1652.52 682.67 L1651.96 682.67 L1651.4 682.67 L1650.84 682.67 L1650.28 682.67 L1649.72 682.67 L1649.16 682.67 L1648.6 682.67 L1648.04 682.67 L1647.48 682.67 L1646.93 682.67 L1646.37 682.67 L1645.81 682.67 L1645.25 682.67 L1644.69 682.67 L1644.13 682.67 L1643.57 682.67 L1643.01 682.67 L1642.45 682.67 L1641.89 682.67 L1641.33 682.67 L1640.77 682.67 L1640.21 682.67 L1639.66 682.67 L1639.1 682.67 L1638.54 682.67 L1637.98 682.67 L1637.42 682.67 L1636.86 682.67 L1636.3 682.67 L1635.74 682.67 L1635.18 682.67 L1634.62 682.67 L1634.06 682.67 L1633.5 682.67 L1632.94 682.67 L1632.39 682.67 L1631.83 682.67 L1631.27 682.67 L1630.71 682.67 L1630.15 682.67 L1629.59 682.67 L1629.03 682.67 L1628.47 682.67 L1627.91 682.67 L1627.35 682.67 L1626.79 682.67 L1626.23 682.67 L1625.67 682.67 L1625.11 682.67 L1624.56 682.67 L1624 682.67 L1623.44 682.67 L1622.88 682.67 L1622.32 682.67 L1621.76 682.67 L1621.2 682.67 L1620.64 682.67 L1620.08 682.67 L1619.52 682.67 L1618.96 682.67 L1618.4 682.67 L1617.84 682.67 L1617.29 682.67 L1616.73 682.67 L1616.17 682.67 L1615.61 682.67 L1615.05 682.67 L1614.49 682.67 L1613.93 682.67 L1613.37 682.67 L1612.81 682.67 L1612.25 682.67 L1611.69 682.67 L1611.13 682.67 L1610.57 682.67 L1610.02 682.67 L1609.46 682.67 L1608.9 682.67 L1608.34 682.67 L1607.78 682.67 L1607.22 682.67 L1606.66 682.67 L1606.1 682.67 L1605.54 682.67 L1604.98 682.67 L1604.42 682.67 L1603.86 682.67 L1603.3 682.67 L1602.74 682.67 L1602.19 682.67 L1601.63 682.67 L1601.07 682.67 L1600.51 682.67 L1599.95 682.67 L1599.39 682.67 L1598.83 682.67 L1598.27 682.67 L1597.71 682.67 L1597.15 682.67 L1596.59 682.67 L1596.03 682.67 L1595.47 682.67 L1594.92 682.67 L1594.36 682.67 L1593.8 682.67 L1593.24 682.67 L1592.68 682.67 L1592.12 682.67 L1591.56 682.67 L1591 682.67 L1590.44 682.67 L1589.88 682.67 L1589.32 682.67 L1588.76 682.67 L1588.2 682.67 L1587.65 682.67 L1587.09 682.67 L1586.53 682.67 L1585.97 682.67 L1585.41 682.67 L1584.85 682.67 L1584.29 682.67 L1583.73 682.67 L1583.17 682.67 L1582.61 682.67 L1582.05 682.67 L1581.49 682.67 L1580.93 682.67 L1580.37 682.67 L1579.82 682.67 L1579.26 682.67 L1578.7 682.67 L1578.14 682.67 L1577.58 682.67 L1577.02 682.67 L1576.46 682.67 L1575.9 682.67 L1575.34 682.67 L1574.78 682.67 L1574.22 682.67 L1573.66 682.67 L1573.1 682.67 L1572.55 682.67 L1571.99 682.67 L1571.43 682.67 L1570.87 682.67 L1570.31 682.67 L1569.75 682.67 L1569.19 682.67 L1568.63 682.67 L1568.07 682.67 L1567.51 682.67 L1566.95 682.67 L1566.39 682.67 L1565.83 682.67 L1565.28 682.67 L1564.72 682.67 L1564.16 682.67 L1563.6 682.67 L1563.04 682.67 L1562.48 682.67 L1561.92 682.67 L1561.36 682.67 L1560.8 682.67 L1560.24 682.67 L1559.68 682.67 L1559.12 682.67 L1558.56 682.67 L1558 682.67 L1557.45 682.67 L1556.89 682.67 L1556.33 682.67 L1555.77 682.67 L1555.21 682.67 L1554.65 682.67 L1554.09 682.67 L1553.53 682.67 L1552.97 682.67 L1552.41 682.67 L1551.85 682.67 L1551.29 682.67 L1550.73 682.67 L1550.18 682.67 L1549.62 682.67 L1549.06 682.67 L1548.5 682.67 L1547.94 682.67 L1547.38 682.67 L1546.82 682.67 L1546.26 682.67 L1545.7 682.67 L1545.14 682.67 L1544.58 682.67 L1544.02 682.67 L1543.46 682.67 L1542.9 682.67 L1542.35 682.67 L1541.79 682.67 L1541.23 682.67 L1540.67 682.67 L1540.11 682.67 L1539.55 682.67 L1538.99 682.67 L1538.43 682.67 L1537.87 682.67 L1537.31 682.67 L1536.75 682.67 L1536.19 682.67 L1535.63 682.67 L1535.08 682.67 L1534.52 682.67 L1533.96 682.67 L1533.4 682.67 L1532.84 682.67 L1532.28 682.67 L1531.72 682.67 L1531.16 682.67 L1530.6 682.67 L1530.04 682.67 L1529.48 682.67 L1528.92 682.67 L1528.36 682.67 L1527.81 682.67 L1527.25 682.67 L1526.69 682.67 L1526.13 682.67 L1525.57 682.67 L1525.01 682.67 L1524.45 682.67 L1523.89 682.67 L1523.33 682.67 L1522.77 682.67 L1522.21 682.67 L1521.65 682.67 L1521.09 682.67 L1520.53 682.67 L1519.98 682.67 L1519.42 682.67 L1518.86 682.67 L1518.3 682.67 L1517.74 682.67 L1517.18 682.67 L1516.62 682.67 L1516.06 682.67 L1515.5 682.67 L1514.94 682.67 L1514.38 682.67 L1513.82 682.67 L1513.26 682.67 L1512.71 682.67 L1512.15 682.67 L1511.59 682.67 L1511.03 682.67 L1510.47 682.67 L1509.91 682.67 L1509.35 682.67 L1508.79 682.67 L1508.23 682.67 L1507.67 682.67 L1507.11 682.67 L1506.55 682.67 L1505.99 682.67 L1505.44 682.67 L1504.88 682.67 L1504.32 682.67 L1503.76 682.67 L1503.2 682.67 L1502.64 682.67 L1502.08 682.67 L1501.52 682.67 L1500.96 682.67 L1500.4 682.67 L1499.84 682.67 L1499.28 682.67 L1498.72 682.67 L1498.16 682.67 L1497.61 682.67 L1497.05 682.67 L1496.49 682.67 L1495.93 682.67 L1495.37 682.67 L1494.81 682.67 L1494.25 682.67 L1493.69 682.67 L1493.13 682.67 L1492.57 682.67 L1492.01 682.67 L1491.45 682.67 L1490.89 682.67 L1490.34 682.67 L1489.78 682.67 L1489.22 682.67 L1488.66 682.67 L1488.1 682.67 L1487.54 682.67 L1486.98 682.67 L1486.42 682.67 L1485.86 682.67 L1485.3 682.67 L1484.74 682.67 L1484.18 682.67 L1483.62 682.67 L1483.07 682.67 L1482.51 682.67 L1481.95 682.67 L1481.39 682.67 L1480.83 682.67 L1480.27 682.67 L1479.71 682.67 L1479.15 682.67 L1478.59 682.67 L1478.03 682.67 L1477.47 682.67 L1476.91 682.67 L1476.35 682.67 L1475.79 682.67 L1475.24 682.67 L1474.68 682.67 L1474.12 682.67 L1473.56 682.67 L1473 682.67 L1472.44 682.67 L1471.88 682.67 L1471.32 682.67 L1470.76 682.67 L1470.2 682.67 L1469.64 682.67 L1469.08 682.67 L1468.52 682.67 L1467.97 682.67 L1467.41 682.67 L1466.85 682.67 L1466.29 682.67 L1465.73 682.67 L1465.17 682.67 L1464.61 682.67 L1464.05 682.67 L1463.49 682.67 L1462.93 682.67 L1462.37 682.67 L1461.81 682.67 L1461.25 682.67 L1460.7 682.67 L1460.14 682.67 L1459.58 682.67 L1459.02 682.67 L1458.46 682.67 L1457.9 682.67 L1457.34 682.67 L1456.78 682.67 L1456.22 682.67 L1455.66 682.67 L1455.1 682.67 L1454.54 682.67 L1453.98 682.67 L1453.42 682.67 L1452.87 682.67 L1452.31 682.67 L1451.75 682.67 L1451.19 682.67 L1450.63 682.67 L1450.07 682.67 L1449.51 682.67 L1448.95 682.67 L1448.39 682.67 L1447.83 682.67 L1447.27 682.67 L1446.71 682.67 L1446.15 682.67 L1445.6 682.67 L1445.04 682.67 L1444.48 682.67 L1443.92 682.67 L1443.36 682.67 L1442.8 682.67 L1442.24 682.67 L1441.68 682.67 L1441.12 682.67 L1440.56 682.67 L1440 682.67 L1439.44 682.67 L1438.88 682.67 L1438.33 682.67 L1437.77 682.67 L1437.21 682.67 L1436.65 682.67 L1436.09 682.67 L1435.53 682.67 L1434.97 682.67 L1434.41 682.67 L1433.85 682.67 L1433.29 682.67 L1432.73 682.67 L1432.17 682.67 L1431.61 682.67 L1431.05 682.67 L1430.5 682.67 L1429.94 682.67 L1429.38 682.67 L1428.82 682.67 L1428.26 682.67 L1427.7 682.67 L1427.14 682.67 L1426.58 682.67 L1426.02 682.67 L1425.46 682.67 L1424.9 682.67 L1424.34 682.67 L1423.78 682.67 L1423.23 682.67 L1422.67 682.67 L1422.11 682.67 L1421.55 682.67 L1420.99 682.67 L1420.43 682.67 L1419.87 682.67 L1419.31 682.67 L1418.75 682.67 L1418.19 682.67 L1417.63 682.67 L1417.07 682.67 L1416.51 682.67 L1415.95 682.67 L1415.4 682.67 L1414.84 682.67 L1414.28 682.67 L1413.72 682.67 L1413.16 682.67 L1412.6 682.67 L1412.04 682.67 L1411.48 682.67 L1410.92 682.67 L1410.36 682.67 L1409.8 682.67 L1409.24 682.67 L1408.68 682.67 L1408.13 682.67 L1407.57 682.67 L1407.01 682.67 L1406.45 682.67 L1405.89 682.67 L1405.33 682.67 L1404.77 682.67 L1404.21 682.67 L1403.65 682.67 L1403.09 682.67 L1402.53 682.67 L1401.97 682.67 L1401.41 682.67 L1400.86 682.67 L1400.3 682.67 L1399.74 682.67 L1399.18 682.67 L1398.62 682.67 L1398.06 682.67 L1397.5 682.67 L1396.94 682.67 L1396.38 682.67 L1395.82 682.67 L1395.26 682.67 L1394.7 682.67 L1394.14 682.67 L1393.58 682.67 L1393.03 682.67 L1392.47 682.67 L1391.91 682.67 L1391.35 682.67 L1390.79 682.67 L1390.23 682.67 L1389.67 682.67 L1389.11 682.67 L1388.55 682.67 L1387.99 682.67 L1387.43 682.67 L1386.87 682.67 L1386.31 682.67 L1385.76 682.67 L1385.2 682.67 L1384.64 682.67 L1384.08 682.67 L1383.52 682.67 L1382.96 682.67 L1382.4 682.67 L1381.84 682.67 L1381.28 682.67 L1380.72 682.67 L1380.16 682.67 L1379.6 682.67 L1379.04 682.67 L1378.49 682.67 L1377.93 682.67 L1377.37 682.67 L1376.81 682.67 L1376.25 682.67 L1375.69 682.67 L1375.13 682.67 L1374.57 682.67 L1374.01 682.67 L1373.45 682.67 L1372.89 682.67 L1372.33 682.67 L1371.77 682.67 L1371.21 682.67 L1370.66 682.67 L1370.1 682.67 L1369.54 682.67 L1368.98 682.67 L1368.42 682.67 L1367.86 682.67 L1367.3 682.67 L1366.74 682.67 L1366.18 682.67 L1365.62 682.67 L1365.06 682.67 L1364.5 682.67 L1363.94 682.67 L1363.39 682.67 L1362.83 682.67 L1362.27 682.67 L1361.71 682.67 L1361.15 682.67 L1360.59 682.67 L1360.03 682.67 L1359.47 682.67 L1358.91 682.67 L1358.35 682.67 L1357.79 682.67 L1357.23 682.67 L1356.67 682.67 L1356.12 682.67 L1355.56 682.67 L1355 682.67 L1354.44 682.67 L1353.88 682.67 L1353.32 682.67 L1352.76 682.67 L1352.2 682.67 L1351.64 682.67 L1351.08 682.67 L1350.52 682.67 L1349.96 682.67 L1349.4 682.67 L1348.84 682.67 L1348.29 682.67 L1347.73 682.67 L1347.17 682.67 L1346.61 682.67 L1346.05 682.67 L1345.49 682.67 L1344.93 682.67 L1344.37 682.67 L1343.81 682.67 L1343.25 682.67 L1342.69 682.67 L1342.13 682.67 L1341.57 682.67 L1341.02 682.67 L1340.46 682.67 L1339.9 682.67 L1339.34 682.67 L1338.78 682.67 L1338.22 682.67 L1337.66 682.67 L1337.1 682.67 L1336.54 682.67 L1335.98 682.67 L1335.42 682.67 L1334.86 682.67 L1334.3 682.67 L1333.75 682.67 L1333.19 682.67 L1332.63 682.67 L1332.07 682.67 L1331.51 682.67 L1330.95 682.67 L1330.39 682.67 L1329.83 682.67 L1329.27 682.67 L1328.71 682.67 L1328.15 682.67 L1327.59 682.67 L1327.03 682.67 L1326.47 682.67 L1325.92 682.67 L1325.36 682.67 L1324.8 682.67 L1324.24 682.67 L1323.68 682.67 L1323.12 682.67 L1322.56 682.67 L1322 682.67 L1321.44 682.67 L1320.88 682.67 L1320.32 682.67 L1319.76 682.67 L1319.2 682.67 L1318.65 682.67 L1318.09 682.67 L1317.53 682.67 L1316.97 682.67 L1316.41 682.67 L1315.85 682.67 L1315.29 682.67 L1314.73 682.67 L1314.17 682.67 L1313.61 682.67 L1313.05 682.67 L1312.49 682.67 L1311.93 682.67 L1311.38 682.67 L1310.82 682.67 L1310.26 682.67 L1309.7 682.67 L1309.14 682.67 L1308.58 682.67 L1308.02 682.67 L1307.46 682.67 L1306.9 682.67 L1306.34 682.67 L1305.78 682.67 L1305.22 682.67 L1304.66 682.67 L1304.1 682.67 L1303.55 682.67 L1302.99 682.67 L1302.43 682.67 L1301.87 682.67 L1301.31 682.67 L1300.75 682.67 L1300.19 682.67 L1299.63 682.67 L1299.07 682.67 L1298.51 682.67 L1297.95 682.67 L1297.39 682.67 L1296.83 682.67 L1296.28 682.67 L1295.72 682.67 L1295.16 682.67 L1294.6 682.67 L1294.04 682.67 L1293.48 682.67 L1292.92 682.67 L1292.36 682.67 L1291.8 682.67 L1291.24 682.67 L1290.68 682.67 L1290.12 682.67 L1289.56 682.67 L1289 682.67 L1288.45 682.67 L1287.89 682.67 L1287.33 682.67 L1286.77 682.67 L1286.21 682.67 L1285.65 682.67 L1285.09 682.67 L1284.53 682.67 L1283.97 682.67 L1283.41 682.67 L1282.85 682.67 L1282.29 682.67 L1281.73 682.67 L1281.18 682.67 L1280.62 682.67 L1280.06 682.67 L1279.5 682.67 L1278.94 682.67 L1278.38 682.67 L1277.82 682.67 L1277.26 682.67 L1276.7 682.67 L1276.14 682.67 L1275.58 682.67 L1275.02 682.67 L1274.46 682.67 L1273.91 682.67 L1273.35 682.67 L1272.79 682.67 L1272.23 682.67 L1271.67 682.67 L1271.11 682.67 L1270.55 682.67 L1269.99 682.67 L1269.43 682.67 L1268.87 682.67 L1268.31 682.67 L1267.75 682.67 L1267.19 682.67 L1266.63 682.67 L1266.08 682.67 L1265.52 682.67 L1264.96 682.67 L1264.4 682.67 L1263.84 682.67 L1263.28 682.67 L1262.72 682.67 L1262.16 682.67 L1261.6 682.67 L1261.04 682.67 L1260.48 682.67 L1259.92 682.67 L1259.36 682.67 L1258.81 682.67 L1258.25 682.67 L1257.69 682.67 L1257.13 682.67 L1256.57 682.67 L1256.01 682.67 L1255.45 682.67 L1254.89 682.67 L1254.33 682.67 L1253.77 682.67 L1253.21 682.67 L1252.65 682.67 L1252.09 682.67 L1251.54 682.67 L1250.98 682.67 L1250.42 682.67 L1249.86 682.67 L1249.3 682.67 L1248.74 682.67 L1248.18 682.67 L1247.62 682.67 L1247.06 682.67 L1246.5 682.67 L1245.94 682.67 L1245.38 682.67 L1244.82 682.67 L1244.26 682.67 L1243.71 682.67 L1243.15 682.67 L1242.59 682.67 L1242.03 682.67 L1241.47 682.67 L1240.91 682.67 L1240.35 682.67 L1239.79 682.67 L1239.23 682.67 L1238.67 682.67 L1238.11 682.67 L1237.55 682.67 L1236.99 682.67 L1236.44 682.67 L1235.88 682.67 L1235.32 682.67 L1234.76 682.67 L1234.2 682.67 L1233.64 682.67 L1233.08 682.67 L1232.52 682.67 L1231.96 682.67 L1231.4 682.67 L1230.84 682.67 L1230.28 682.67 L1229.72 682.67 L1229.17 682.67 L1228.61 682.67 L1228.05 682.67 L1227.49 682.67 L1226.93 682.67 L1226.37 682.67 L1225.81 682.67 L1225.25 682.67 L1224.69 682.67 L1224.13 682.67 L1223.57 682.67 L1223.01 682.67 L1222.45 682.67 L1221.89 682.67 L1221.34 682.67 L1220.78 682.67 L1220.22 682.67 L1219.66 682.67 L1219.1 682.67 L1218.54 682.67 L1217.98 682.67 L1217.42 682.67 L1216.86 682.67 L1216.3 682.67 L1215.74 682.67 L1215.18 682.67 L1214.62 682.67 L1214.07 682.67 L1213.51 682.67 L1212.95 682.67 L1212.39 682.67 L1211.83 682.67 L1211.27 682.67 L1210.71 682.67 L1210.15 682.67 L1209.59 682.67 L1209.03 682.67 L1208.47 682.67 L1207.91 682.67 L1207.35 682.67 L1206.8 682.67 L1206.24 682.67 L1205.68 682.67 L1205.12 682.67 L1204.56 682.67 L1204 682.67 L1203.44 682.67 L1202.88 682.67 L1202.32 682.67 L1201.76 682.67 L1201.2 682.67 L1200.64 682.67 L1200.08 682.67 L1199.52 682.67 L1198.97 682.67 L1198.41 682.67 L1197.85 682.67 L1197.29 682.67 L1196.73 682.67 L1196.17 682.67 L1195.61 682.67 L1195.05 682.67 L1194.49 682.67 L1193.93 682.67 L1193.37 682.67 L1192.81 682.67 L1192.25 682.67 L1191.7 682.67 L1191.14 682.67 L1190.58 682.67 L1190.02 682.67 L1189.46 682.67 L1188.9 682.67 L1188.34 682.67 L1187.78 682.67 L1187.22 682.67 L1186.66 682.67 L1186.1 682.67 L1185.54 682.67 L1184.98 682.67 L1184.43 682.67 L1183.87 682.67 L1183.31 682.67 L1182.75 682.67 L1182.19 682.67 L1181.63 682.67 L1181.07 682.67 L1180.51 682.67 L1179.95 682.67 L1179.39 682.67 L1178.83 682.67 L1178.27 682.67 L1177.71 682.67 L1177.15 682.67 L1176.6 682.67 L1176.04 682.67 L1175.48 682.67 L1174.92 682.67 L1174.36 682.67 L1173.8 682.67 L1173.24 682.67 L1172.68 682.67 L1172.12 682.67 L1171.56 682.67 L1171 682.67 L1170.44 682.67 L1169.88 682.67 L1169.33 682.67 L1168.77 682.67 L1168.21 682.67 L1167.65 682.67 L1167.09 682.67 L1166.53 682.67 L1165.97 682.67 L1165.41 682.67 L1164.85 682.67 L1164.29 682.67 L1163.73 682.67 L1163.17 682.67 L1162.61 682.67 L1162.05 682.67 L1161.5 682.67 L1160.94 682.67 L1160.38 682.67 L1159.82 682.67 L1159.26 682.67 L1158.7 682.67 L1158.14 682.67 L1157.58 682.67 L1157.02 682.67 L1156.46 682.67 L1155.9 682.67 L1155.34 682.67 L1154.78 682.67 L1154.23 682.67 L1153.67 682.67 L1153.11 682.67 L1152.55 682.67 L1151.99 682.67 L1151.43 682.67 L1150.87 682.67 L1150.31 682.67 L1149.75 682.67 L1149.19 682.67 L1148.63 682.67 L1148.07 682.67 L1147.51 682.67 L1146.96 682.67 L1146.4 682.67 L1145.84 682.67 L1145.28 682.67 L1144.72 682.67 L1144.16 682.67 L1143.6 682.67 L1143.04 682.67 L1142.48 682.67 L1141.92 682.67 L1141.36 682.67 L1140.8 682.67 L1140.24 682.67 L1139.68 682.67 L1139.13 682.67 L1138.57 682.67 L1138.01 682.67 L1137.45 682.67 L1136.89 682.67 L1136.33 682.67 L1135.77 682.67 L1135.21 682.67 L1134.65 682.67 L1134.09 682.67 L1133.53 682.67 L1132.97 682.67 L1132.41 682.67 L1131.86 682.67 L1131.3 682.67 L1130.74 682.67 L1130.18 682.67 L1129.62 682.67 L1129.06 682.67 L1128.5 682.67 L1127.94 682.67 L1127.38 682.67 L1126.82 682.67 L1126.26 682.67 L1125.7 682.67 L1125.14 682.67 L1124.59 682.67 L1124.03 682.67 L1123.47 682.67 L1122.91 682.67 L1122.35 682.67 L1121.79 682.67 L1121.23 682.67 L1120.67 682.67 L1120.11 682.67 L1119.55 682.67 L1118.99 682.67 L1118.43 682.67 L1117.87 682.67 L1117.31 682.67 L1116.76 682.67 L1116.2 682.67 L1115.64 682.67 L1115.08 682.67 L1114.52 682.67 L1113.96 682.67 L1113.4 682.67 L1112.84 682.67 L1112.28 682.67 L1111.72 682.67 L1111.16 682.67 L1110.6 682.67 L1110.04 682.67 L1109.49 682.67 L1108.93 682.67 L1108.37 682.67 L1107.81 682.67 L1107.25 682.67 L1106.69 682.67 L1106.13 682.67 L1105.57 682.67 L1105.01 682.67 L1104.45 682.67 L1103.89 682.67 L1103.33 682.67 L1102.77 682.67 L1102.22 682.67 L1101.66 682.67 L1101.1 682.67 L1100.54 682.67 L1099.98 682.67 L1099.42 682.67 L1098.86 682.67 L1098.3 682.67 L1097.74 682.67 L1097.18 682.67 L1096.62 682.67 L1096.06 682.67 L1095.5 682.67 L1094.94 682.67 L1094.39 682.67 L1093.83 682.67 L1093.27 682.67 L1092.71 682.67 L1092.15 682.67 L1091.59 682.67 L1091.03 682.67 L1090.47 682.67 L1089.91 682.67 L1089.35 682.67 L1088.79 682.67 L1088.23 682.67 L1087.67 682.67 L1087.12 682.67 L1086.56 682.67 L1086 682.67 L1085.44 682.67 L1084.88 682.67 L1084.32 682.67 L1083.76 682.67 L1083.2 682.67 L1082.64 682.67 L1082.08 682.67 L1081.52 682.67 L1080.96 682.67 L1080.4 682.67 L1079.85 682.67 L1079.29 682.67 L1078.73 682.67 L1078.17 682.67 L1077.61 682.67 L1077.05 682.67 L1076.49 682.67 L1075.93 682.67 L1075.37 682.67 L1074.81 682.67 L1074.25 682.67 L1073.69 682.67 L1073.13 682.67 L1072.57 682.67 L1072.02 682.67 L1071.46 682.67 L1070.9 682.67 L1070.34 682.67 L1069.78 682.67 L1069.22 682.67 L1068.66 682.67 L1068.1 682.67 L1067.54 682.67 L1066.98 682.67 L1066.42 682.67 L1065.86 682.67 L1065.3 682.67 L1064.75 682.67 L1064.19 682.67 L1063.63 682.67 L1063.07 682.67 L1062.51 682.67 L1061.95 682.67 L1061.39 682.67 L1060.83 682.67 L1060.27 682.67 L1059.71 682.67 L1059.15 682.67 L1058.59 682.67 L1058.03 682.67 L1057.48 682.67 L1056.92 682.67 L1056.36 682.67 L1055.8 682.67 L1055.24 682.67 L1054.68 682.67 L1054.12 682.67 L1053.56 682.67 L1053 682.67 L1052.44 682.67 L1051.88 682.67 L1051.32 682.67 L1050.76 682.67 L1050.2 682.67 L1049.65 682.67 L1049.09 682.67 L1048.53 682.67 L1047.97 682.67 L1047.41 682.67 L1046.85 682.67 L1046.29 682.67 L1045.73 682.67 L1045.17 682.67 L1044.61 682.67 L1044.05 682.67 L1043.49 682.67 L1042.93 682.67 L1042.38 682.67 L1041.82 682.67 L1041.26 682.67 L1040.7 682.67 L1040.14 682.67 L1039.58 682.67 L1039.02 682.67 L1038.46 682.67 L1037.9 682.67 L1037.34 682.67 L1036.78 682.67 L1036.22 682.67 L1035.66 682.67 L1035.1 682.67 L1034.55 682.67 L1033.99 682.67 L1033.43 682.67 L1032.87 682.67 L1032.31 682.67 L1031.75 682.67 L1031.19 682.67 L1030.63 682.67 L1030.07 682.67 L1029.51 682.67 L1028.95 682.67 L1028.39 682.67 L1027.83 682.67 L1027.28 682.67 L1026.72 682.67 L1026.16 682.67 L1025.6 682.67 L1025.04 682.67 L1024.48 682.67 L1023.92 682.67 L1023.36 682.67 L1022.8 682.67 L1022.24 682.67 L1021.68 682.67 L1021.12 682.67 L1020.56 682.67 L1020.01 682.67 L1019.45 682.67 L1018.89 682.67 L1018.33 682.67 L1017.77 682.67 L1017.21 682.67 L1016.65 682.67 L1016.09 682.67 L1015.53 682.67 L1014.97 682.67 L1014.41 682.67 L1013.85 682.67 L1013.29 682.67 L1012.73 682.67 L1012.18 682.67 L1011.62 682.67 L1011.06 682.67 L1010.5 682.67 L1009.94 682.67 L1009.38 682.67 L1008.82 682.67 L1008.26 682.67 L1007.7 682.67 L1007.14 682.67 L1006.58 682.67 L1006.02 682.67 L1005.46 682.67 L1004.91 682.67 L1004.35 682.67 L1003.79 682.67 L1003.23 682.67 L1002.67 682.67 L1002.11 682.67 L1001.55 682.67 L1000.99 682.67 L1000.43 682.67 L999.872 682.67 L999.313 682.67 L998.754 682.67 L998.194 682.67 L997.635 682.67 L997.076 682.67 L996.517 682.67 L995.957 682.67 L995.398 682.67 L994.839 682.67 L994.28 682.67 L993.72 682.67 L993.161 682.67 L992.602 682.67 L992.043 682.67 L991.483 682.67 L990.924 682.67 L990.365 682.67 L989.806 682.67 L989.246 682.67 L988.687 682.67 L988.128 682.67 L987.569 682.67 L987.009 682.67 L986.45 682.67 L985.891 682.67 L985.332 682.67 L984.772 682.67 L984.213 682.67 L983.654 682.67 L983.095 682.67 L982.535 682.67 L981.976 682.67 L981.417 682.67 L980.858 682.67 L980.298 682.67 L979.739 682.67 L979.18 682.67 L978.621 682.67 L978.061 682.67 L977.502 682.67 L976.943 682.67 L976.384 682.67 L975.824 682.67 L975.265 682.67 L974.706 682.67 L974.147 682.67 L973.587 682.67 L973.028 682.67 L972.469 682.67 L971.91 682.67 L971.35 682.67 L970.791 682.67 L970.232 682.67 L969.673 682.67 L969.113 682.67 L968.554 682.67 L967.995 682.67 L967.436 682.67 L966.876 682.67 L966.317 682.67 L965.758 682.67 L965.199 682.67 L964.639 682.67 L964.08 682.67 L963.521 682.67 L962.962 682.67 L962.402 682.67 L961.843 682.67 L961.284 682.67 L960.725 682.67 L960.165 682.67 L959.606 682.67 L959.047 682.67 L958.488 682.67 L957.928 682.67 L957.369 682.67 L956.81 682.67 L956.251 682.67 L955.691 682.67 L955.132 682.67 L954.573 682.67 L954.014 682.67 L953.454 682.67 L952.895 682.67 L952.336 682.67 L951.777 682.67 L951.217 682.67 L950.658 682.67 L950.099 682.67 L949.54 682.67 L948.98 682.67 L948.421 682.67 L947.862 682.67 L947.303 682.67 L946.743 682.67 L946.184 682.67 L945.625 682.67 L945.066 682.67 L944.506 682.67 L943.947 682.67 L943.388 682.67 L942.829 682.67 L942.269 682.67 L941.71 682.67 L941.151 682.67 L940.592 682.67 L940.032 682.67 L939.473 682.67 L938.914 682.67 L938.355 682.67 L937.795 682.67 L937.236 682.67 L936.677 682.67 L936.118 682.67 L935.558 682.67 L934.999 682.67 L934.44 682.67 L933.881 682.67 L933.321 682.67 L932.762 682.67 L932.203 682.67 L931.644 682.67 L931.084 682.67 L930.525 682.67 L929.966 682.67 L929.406 682.67 L928.847 682.67 L928.288 682.67 L927.729 682.67 L927.169 682.67 L926.61 682.67 L926.051 682.67 L925.492 682.67 L924.932 682.67 L924.373 682.67 L923.814 682.67 L923.255 682.67 L922.695 682.67 L922.136 682.67 L921.577 682.67 L921.018 682.67 L920.458 682.67 L919.899 682.67 L919.34 682.67 L918.781 682.67 L918.221 682.67 L917.662 682.67 L917.103 682.67 L916.544 682.67 L915.984 682.67 L915.425 682.67 L914.866 682.67 L914.307 682.67 L913.747 682.67 L913.188 682.67 L912.629 682.67 L912.07 682.67 L911.51 682.67 L910.951 682.67 L910.392 682.67 L909.833 682.67 L909.273 682.67 L908.714 682.67 L908.155 682.67 L907.596 682.67 L907.036 682.67 L906.477 682.67 L905.918 682.67 L905.359 682.67 L904.799 682.67 L904.24 682.67 L903.681 682.67 L903.122 682.67 L902.562 682.67 L902.003 682.67 L901.444 682.67 L900.885 682.67 L900.325 682.67 L899.766 682.67 L899.207 682.67 L898.648 682.67 L898.088 682.67 L897.529 682.67 L896.97 682.67 L896.411 682.67 L895.851 682.67 L895.292 682.67 L894.733 682.67 L894.174 682.67 L893.614 682.67 L893.055 682.67 L892.496 682.67 L891.937 682.67 L891.377 682.67 L890.818 682.67 L890.259 682.67 L889.7 682.67 L889.14 682.67 L888.581 682.67 L888.022 682.67 L887.463 682.67 L886.903 682.67 L886.344 682.67 L885.785 682.67 L885.226 682.67 L884.666 682.67 L884.107 682.67 L883.548 682.67 L882.989 682.67 L882.429 682.67 L881.87 682.67 L881.311 682.67 L880.752 682.67 L880.192 682.67 L879.633 682.67 L879.074 682.67 L878.515 682.67 L877.955 682.67 L877.396 682.67 L876.837 682.67 L876.278 682.67 L875.718 682.67 L875.159 682.67 L874.6 682.67 L874.041 682.67 L873.481 682.67 L872.922 682.67 L872.363 682.67 L871.804 682.67 L871.244 682.67 L870.685 682.67 L870.126 682.67 L869.567 682.67 L869.007 682.67 L868.448 682.67 L867.889 682.67 L867.33 682.67 L866.77 682.67 L866.211 682.67 L865.652 682.67 L865.093 682.67 L864.533 682.67 L863.974 682.67 L863.415 682.67 L862.856 682.67 L862.296 682.67 L861.737 682.67 L861.178 682.67 L860.619 682.67 L860.059 682.67 L859.5 682.67 L858.941 682.67 L858.382 682.67 L857.822 682.67 L857.263 682.67 L856.704 682.67 L856.145 682.67 L855.585 682.67 L855.026 682.67 L854.467 682.67 L853.908 682.67 L853.348 682.67 L852.789 682.67 L852.23 682.67 L851.671 682.67 L851.111 682.67 L850.552 682.67 L849.993 682.67 L849.434 682.67 L848.874 682.67 L848.315 682.67 L847.756 682.67 L847.197 682.67 L846.637 682.67 L846.078 682.67 L845.519 682.67 L844.96 682.67 L844.4 682.67 L843.841 682.67 L843.282 682.67 L842.723 682.67 L842.163 682.67 L841.604 682.67 L841.045 682.67 L840.486 682.67 L839.926 682.67 L839.367 682.67 L838.808 682.67 L838.249 682.67 L837.689 682.67 L837.13 682.67 L836.571 682.67 L836.012 682.67 L835.452 682.67 L834.893 682.67 L834.334 682.67 L833.775 682.67 L833.215 682.67 L832.656 682.67 L832.097 682.67 L831.538 682.67 L830.978 682.67 L830.419 682.67 L829.86 682.67 L829.301 682.67 L828.741 682.67 L828.182 682.67 L827.623 682.67 L827.064 682.67 L826.504 682.67 L825.945 682.67 L825.386 682.67 L824.827 682.67 L824.267 682.67 L823.708 682.67 L823.149 682.67 L822.59 682.67 L822.03 682.67 L821.471 682.67 L820.912 682.67 L820.353 682.67 L819.793 682.67 L819.234 682.67 L818.675 682.67 L818.116 682.67 L817.556 682.67 L816.997 682.67 L816.438 682.67 L815.879 682.67 L815.319 682.67 L814.76 682.67 L814.201 682.67 L813.642 682.67 L813.082 682.67 L812.523 682.67 L811.964 682.67 L811.405 682.67 L810.845 682.67 L810.286 682.67 L809.727 682.67 L809.168 682.67 L808.608 682.67 L808.049 682.67 L807.49 682.67 L806.931 682.67 L806.371 682.67 L805.812 682.67 L805.253 682.67 L804.693 682.67 L804.134 682.67 L803.575 682.67 L803.016 682.67 L802.456 682.67 L801.897 682.67 L801.338 682.67 L800.779 682.67 L800.219 682.67 L799.66 682.67 L799.101 682.67 L798.542 682.67 L797.982 682.67 L797.423 682.67 L796.864 682.67 L796.305 682.67 L795.745 682.67 L795.186 682.67 L794.627 682.67 L794.068 682.67 L793.508 682.67 L792.949 682.67 L792.39 682.67 L791.831 682.67 L791.271 682.67 L790.712 682.67 L790.153 682.67 L789.594 682.67 L789.034 682.67 L788.475 682.67 L787.916 682.67 L787.357 682.67 L786.797 682.67 L786.238 682.67 L785.679 682.67 L785.12 682.67 L784.56 682.67 L784.001 682.67 L783.442 682.67 L782.883 682.67 L782.323 682.67 L781.764 682.67 L781.205 682.67 L780.646 682.67 L780.086 682.67 L779.527 682.67 L778.968 682.67 L778.409 682.67 L777.849 682.67 L777.29 682.67 L776.731 682.67 L776.172 682.67 L775.612 682.67 L775.053 682.67 L774.494 682.67 L773.935 682.67 L773.375 682.67 L772.816 682.67 L772.257 682.67 L771.698 682.67 L771.138 682.67 L770.579 682.67 L770.02 682.67 L769.461 682.67 L768.901 682.67 L768.342 682.67 L767.783 682.67 L767.224 682.67 L766.664 682.67 L766.105 682.67 L765.546 682.67 L764.987 682.67 L764.427 682.67 L763.868 682.67 L763.309 682.67 L762.75 682.67 L762.19 682.67 L761.631 682.67 L761.072 682.67 L760.513 682.67 L759.953 682.67 L759.394 682.67 L758.835 682.67 L758.276 682.67 L757.716 682.67 L757.157 682.67 L756.598 682.67 L756.039 682.67 L755.479 682.67 L754.92 682.67 L754.361 682.67 L753.802 682.67 L753.242 682.67 L752.683 682.67 L752.124 682.67 L751.565 682.67 L751.005 682.67 L750.446 682.67 L749.887 682.67 L749.328 682.67 L748.768 682.67 L748.209 682.67 L747.65 682.67 L747.091 682.67 L746.531 682.67 L745.972 682.67 L745.413 682.67 L744.854 682.67 L744.294 682.67 L743.735 682.67 L743.176 682.67 L742.617 682.67 L742.057 682.67 L741.498 682.67 L740.939 682.67 L740.38 682.67 L739.82 682.67 L739.261 682.67 L738.702 682.67 L738.143 682.67 L737.583 682.67 L737.024 682.67 L736.465 682.67 L735.906 682.67 L735.346 682.67 L734.787 682.67 L734.228 682.67 L733.669 682.67 L733.109 682.67 L732.55 682.67 L731.991 682.67 L731.432 682.67 L730.872 682.67 L730.313 682.67 L729.754 682.67 L729.195 682.67 L728.635 682.67 L728.076 682.67 L727.517 682.67 L726.958 682.67 L726.398 682.67 L725.839 682.67 L725.28 682.67 L724.721 682.67 L724.161 682.67 L723.602 682.67 L723.043 682.67 L722.484 682.67 L721.924 682.67 L721.365 682.67 L720.806 682.67 L720.247 682.67  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip613)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.619 720.806,683.619 721.365,683.619 721.924,683.619 722.484,683.619 723.043,683.619 723.602,683.619 724.161,683.619 724.721,683.619 725.28,683.619 725.839,683.619 726.398,683.619 726.958,683.619 727.517,683.619 728.076,683.619 728.635,683.619 729.195,683.619 729.754,683.619 730.313,683.619 730.872,683.619 731.432,683.619 731.991,683.619 732.55,683.619 733.109,683.619 733.669,683.619 734.228,683.619 734.787,683.619 735.346,683.619 735.906,683.619 736.465,683.619 737.024,683.619 737.583,683.619 738.143,683.619 738.702,683.619 739.261,683.619 739.82,683.619 740.38,683.619 740.939,683.619 741.498,683.619 742.057,683.619 742.617,683.619 743.176,683.619 743.735,683.619 744.294,683.619 744.854,683.619 745.413,683.619 745.972,683.619 746.531,683.619 747.091,683.619 747.65,683.619 748.209,683.619 748.768,683.619 749.328,683.619 749.887,683.619 750.446,683.619 751.005,683.619 751.565,683.619 752.124,683.619 752.683,683.619 753.242,683.619 753.802,683.619 754.361,683.619 754.92,683.619 755.479,683.619 756.039,683.619 756.598,683.619 757.157,683.619 757.716,683.619 758.276,683.619 758.835,683.619 759.394,683.619 759.953,683.619 760.513,683.619 761.072,683.619 761.631,683.619 762.19,683.619 762.75,683.619 763.309,683.619 763.868,683.619 764.427,683.619 764.987,683.619 765.546,683.619 766.105,683.619 766.664,683.619 767.224,683.619 767.783,683.619 768.342,683.619 768.901,683.619 769.461,683.619 770.02,683.619 770.579,683.619 771.138,683.619 771.698,683.619 772.257,683.619 772.816,683.619 773.375,683.619 773.935,683.619 774.494,683.619 775.053,683.619 775.612,683.619 776.172,683.619 776.731,683.619 777.29,683.619 777.849,683.619 778.409,683.619 778.968,683.619 779.527,683.619 780.086,683.619 780.646,683.619 781.205,683.619 781.764,683.619 782.323,683.619 782.883,683.619 783.442,683.619 784.001,683.619 784.56,683.619 785.12,683.619 785.679,683.619 786.238,683.619 786.797,683.619 787.357,683.619 787.916,683.619 788.475,683.619 789.034,683.619 789.594,683.619 790.153,683.619 790.712,683.619 791.271,683.619 791.831,683.619 792.39,683.619 792.949,683.619 793.508,683.619 794.068,683.619 794.627,683.619 795.186,683.619 795.745,683.619 796.305,683.619 796.864,683.619 797.423,683.619 797.982,683.619 798.542,683.619 799.101,683.619 799.66,683.619 800.219,683.619 800.779,683.619 801.338,683.619 801.897,683.619 802.456,683.619 803.016,683.619 803.575,683.619 804.134,683.619 804.693,683.619 805.253,683.619 805.812,683.619 806.371,683.619 806.931,683.619 807.49,683.619 808.049,683.619 808.608,683.619 809.168,683.619 809.727,683.619 810.286,683.619 810.845,683.619 811.405,683.619 811.964,683.619 812.523,683.619 813.082,683.619 813.642,683.619 814.201,683.619 814.76,683.619 815.319,683.619 815.879,683.619 816.438,683.619 816.997,683.619 817.556,683.619 818.116,683.619 818.675,683.619 819.234,683.619 819.793,683.619 820.353,683.619 820.912,683.619 821.471,683.619 822.03,683.619 822.59,683.619 823.149,683.619 823.708,683.619 824.267,683.619 824.827,683.619 825.386,683.619 825.945,683.619 826.504,683.619 827.064,683.619 827.623,683.619 828.182,683.619 828.741,683.619 829.301,683.619 829.86,683.619 830.419,683.619 830.978,683.619 831.538,683.619 832.097,683.619 832.656,683.619 833.215,683.619 833.775,683.619 834.334,683.619 834.893,683.619 835.452,683.619 836.012,683.619 836.571,683.619 837.13,683.619 837.689,683.619 838.249,683.619 838.808,683.619 839.367,683.619 839.926,683.619 840.486,683.619 841.045,683.619 841.604,683.619 842.163,683.619 842.723,683.619 843.282,683.619 843.841,683.619 844.4,683.619 844.96,683.619 845.519,683.619 846.078,683.619 846.637,683.619 847.197,683.619 847.756,683.619 848.315,683.619 848.874,683.619 849.434,683.619 849.993,683.619 850.552,683.619 851.111,683.619 851.671,683.619 852.23,683.619 852.789,683.619 853.348,683.619 853.908,683.619 854.467,683.619 855.026,683.619 855.585,683.619 856.145,683.619 856.704,683.619 857.263,683.619 857.822,683.619 858.382,683.619 858.941,683.619 859.5,683.619 860.059,683.619 860.619,683.619 861.178,683.619 861.737,683.619 862.296,683.619 862.856,683.619 863.415,683.619 863.974,683.619 864.533,683.619 865.093,683.619 865.652,683.619 866.211,683.619 866.77,683.619 867.33,683.619 867.889,683.619 868.448,683.619 869.007,683.619 869.567,683.619 870.126,683.619 870.685,683.619 871.244,683.619 871.804,683.619 872.363,683.619 872.922,683.619 873.481,683.619 874.041,683.619 874.6,683.619 875.159,683.619 875.718,683.619 876.278,683.619 876.837,683.619 877.396,683.619 877.955,683.619 878.515,683.619 879.074,683.619 879.633,683.619 880.192,683.619 880.752,683.619 881.311,683.619 881.87,683.619 882.429,683.619 882.989,683.619 883.548,683.619 884.107,683.619 884.666,683.619 885.226,683.619 885.785,683.619 886.344,683.619 886.903,683.619 887.463,683.619 888.022,683.619 888.581,683.619 889.14,683.619 889.7,683.619 890.259,683.619 890.818,683.619 891.377,683.619 891.937,683.619 892.496,683.619 893.055,683.619 893.614,683.619 894.174,683.619 894.733,683.619 895.292,683.619 895.851,683.619 896.411,683.619 896.97,683.619 897.529,683.619 898.088,683.619 898.648,683.619 899.207,683.619 899.766,683.619 900.325,683.619 900.885,683.619 901.444,683.619 902.003,683.619 902.562,683.619 903.122,683.619 903.681,683.619 904.24,683.619 904.799,683.619 905.359,683.619 905.918,683.619 906.477,683.619 907.036,683.619 907.596,683.619 908.155,683.619 908.714,683.619 909.273,683.619 909.833,683.619 910.392,683.619 910.951,683.619 911.51,683.619 912.07,683.619 912.629,683.619 913.188,683.619 913.747,683.619 914.307,683.619 914.866,683.619 915.425,683.619 915.984,683.619 916.544,683.619 917.103,683.619 917.662,683.619 918.221,683.619 918.781,683.619 919.34,683.619 919.899,683.619 920.458,683.619 921.018,683.619 921.577,683.619 922.136,683.619 922.695,683.619 923.255,683.619 923.814,683.619 924.373,683.619 924.932,683.619 925.492,683.619 926.051,683.619 926.61,683.619 927.169,683.619 927.729,683.619 928.288,683.619 928.847,683.619 929.406,683.619 929.966,683.619 930.525,683.619 931.084,683.619 931.644,683.619 932.203,683.619 932.762,683.619 933.321,683.619 933.881,683.619 934.44,683.619 934.999,683.619 935.558,683.619 936.118,683.619 936.677,683.619 937.236,683.619 937.795,683.619 938.355,683.619 938.914,683.619 939.473,683.619 940.032,683.619 940.592,683.619 941.151,683.619 941.71,683.619 942.269,683.619 942.829,683.619 943.388,683.619 943.947,683.619 944.506,683.619 945.066,683.619 945.625,683.619 946.184,683.619 946.743,683.619 947.303,683.619 947.862,683.619 948.421,683.619 948.98,683.619 949.54,683.619 950.099,683.619 950.658,683.619 951.217,683.619 951.777,683.619 952.336,683.619 952.895,683.619 953.454,683.619 954.014,683.619 954.573,683.619 955.132,683.619 955.691,683.619 956.251,683.619 956.81,683.619 957.369,683.619 957.928,683.619 958.488,683.619 959.047,683.619 959.606,683.619 960.165,683.619 960.725,683.619 961.284,683.619 961.843,683.619 962.402,683.619 962.962,683.619 963.521,683.619 964.08,683.619 964.639,683.619 965.199,683.619 965.758,683.619 966.317,683.619 966.876,683.619 967.436,683.619 967.995,683.619 968.554,683.619 969.113,683.619 969.673,683.619 970.232,683.619 970.791,683.619 971.35,683.619 971.91,683.619 972.469,683.619 973.028,683.619 973.587,683.619 974.147,683.619 974.706,683.619 975.265,683.619 975.824,683.619 976.384,683.619 976.943,683.619 977.502,683.619 978.061,683.619 978.621,683.619 979.18,683.619 979.739,683.619 980.298,683.619 980.858,683.619 981.417,683.619 981.976,683.619 982.535,683.619 983.095,683.619 983.654,683.619 984.213,683.619 984.772,683.619 985.332,683.619 985.891,683.619 986.45,683.619 987.009,683.619 987.569,683.619 988.128,683.619 988.687,683.619 989.246,683.619 989.806,683.619 990.365,683.619 990.924,683.619 991.483,683.619 992.043,683.619 992.602,683.619 993.161,683.619 993.72,683.619 994.28,683.619 994.839,683.619 995.398,683.619 995.957,683.619 996.517,683.619 997.076,683.619 997.635,683.619 998.194,683.619 998.754,683.619 999.313,683.619 999.872,683.619 1000.43,683.619 1000.99,683.619 1001.55,683.619 1002.11,683.619 1002.67,683.619 1003.23,683.619 1003.79,683.619 1004.35,683.619 1004.91,683.619 1005.46,683.619 1006.02,683.619 1006.58,683.619 1007.14,683.619 1007.7,683.619 1008.26,683.619 1008.82,683.619 1009.38,683.619 1009.94,683.619 1010.5,683.619 1011.06,683.619 1011.62,683.619 1012.18,683.619 1012.73,683.619 1013.29,683.619 1013.85,683.619 1014.41,683.619 1014.97,683.619 1015.53,683.619 1016.09,683.619 1016.65,683.619 1017.21,683.619 1017.77,683.619 1018.33,683.619 1018.89,683.619 1019.45,683.619 1020.01,683.619 1020.56,683.619 1021.12,683.619 1021.68,683.619 1022.24,683.619 1022.8,683.619 1023.36,683.619 1023.92,683.619 1024.48,683.619 1025.04,683.619 1025.6,683.619 1026.16,683.619 1026.72,683.619 1027.28,683.619 1027.83,683.619 1028.39,683.619 1028.95,683.619 1029.51,683.619 1030.07,683.619 1030.63,683.619 1031.19,683.619 1031.75,683.619 1032.31,683.619 1032.87,683.619 1033.43,683.619 1033.99,683.619 1034.55,683.619 1035.1,683.619 1035.66,683.619 1036.22,683.619 1036.78,683.619 1037.34,683.619 1037.9,683.619 1038.46,683.619 1039.02,683.619 1039.58,683.619 1040.14,683.619 1040.7,683.619 1041.26,683.619 1041.82,683.619 1042.38,683.619 1042.93,683.619 1043.49,683.619 1044.05,683.619 1044.61,683.619 1045.17,683.619 1045.73,683.619 1046.29,683.619 1046.85,683.619 1047.41,683.619 1047.97,683.619 1048.53,683.619 1049.09,683.619 1049.65,683.619 1050.2,683.619 1050.76,683.619 1051.32,683.619 1051.88,683.619 1052.44,683.619 1053,683.619 1053.56,683.619 1054.12,683.619 1054.68,683.619 1055.24,683.619 1055.8,683.619 1056.36,683.619 1056.92,683.619 1057.48,683.619 1058.03,683.619 1058.59,683.619 1059.15,683.619 1059.71,683.619 1060.27,683.619 1060.83,683.619 1061.39,683.619 1061.95,683.619 1062.51,683.619 1063.07,683.619 1063.63,683.619 1064.19,683.619 1064.75,683.619 1065.3,683.619 1065.86,683.619 1066.42,683.619 1066.98,683.619 1067.54,683.619 1068.1,683.619 1068.66,683.619 1069.22,683.619 1069.78,683.619 1070.34,683.619 1070.9,683.619 1071.46,683.619 1072.02,683.619 1072.57,683.619 1073.13,683.619 1073.69,683.619 1074.25,683.619 1074.81,683.619 1075.37,683.619 1075.93,683.619 1076.49,683.619 1077.05,683.619 1077.61,683.619 1078.17,683.619 1078.73,683.619 1079.29,683.619 1079.85,683.619 1080.4,683.619 1080.96,683.619 1081.52,683.619 1082.08,683.619 1082.64,683.619 1083.2,683.619 1083.76,683.619 1084.32,683.619 1084.88,683.619 1085.44,683.619 1086,683.619 1086.56,683.619 1087.12,683.619 1087.67,683.619 1088.23,683.619 1088.79,683.619 1089.35,683.619 1089.91,683.619 1090.47,683.619 1091.03,683.619 1091.59,683.619 1092.15,683.619 1092.71,683.619 1093.27,683.619 1093.83,683.619 1094.39,683.619 1094.94,683.619 1095.5,683.619 1096.06,683.619 1096.62,683.619 1097.18,683.619 1097.74,683.619 1098.3,683.619 1098.86,683.619 1099.42,683.619 1099.98,683.619 1100.54,683.619 1101.1,683.619 1101.66,683.619 1102.22,683.619 1102.77,683.619 1103.33,683.619 1103.89,683.619 1104.45,683.619 1105.01,683.619 1105.57,683.619 1106.13,683.619 1106.69,683.619 1107.25,683.619 1107.81,683.619 1108.37,683.619 1108.93,683.619 1109.49,683.619 1110.04,683.619 1110.6,683.619 1111.16,683.619 1111.72,683.619 1112.28,683.619 1112.84,683.619 1113.4,683.619 1113.96,683.619 1114.52,683.619 1115.08,683.619 1115.64,683.619 1116.2,683.619 1116.76,683.619 1117.31,683.619 1117.87,683.619 1118.43,683.619 1118.99,683.619 1119.55,683.619 1120.11,683.619 1120.67,683.619 1121.23,683.619 1121.79,683.619 1122.35,683.619 1122.91,683.619 1123.47,683.619 1124.03,683.619 1124.59,683.619 1125.14,683.619 1125.7,683.619 1126.26,683.619 1126.82,683.619 1127.38,683.619 1127.94,683.619 1128.5,683.619 1129.06,683.619 1129.62,683.619 1130.18,683.619 1130.74,683.619 1131.3,683.619 1131.86,683.619 1132.41,683.619 1132.97,683.619 1133.53,683.619 1134.09,683.619 1134.65,683.619 1135.21,683.619 1135.77,683.619 1136.33,683.619 1136.89,683.619 1137.45,683.619 1138.01,683.619 1138.57,683.619 1139.13,683.619 1139.68,683.619 1140.24,683.619 1140.8,683.619 1141.36,683.619 1141.92,683.619 1142.48,683.619 1143.04,683.619 1143.6,683.619 1144.16,683.619 1144.72,683.619 1145.28,683.619 1145.84,683.619 1146.4,683.619 1146.96,683.619 1147.51,683.619 1148.07,683.619 1148.63,683.619 1149.19,683.619 1149.75,683.619 1150.31,683.619 1150.87,683.619 1151.43,683.619 1151.99,683.619 1152.55,683.619 1153.11,683.619 1153.67,683.619 1154.23,683.619 1154.78,683.619 1155.34,683.619 1155.9,683.619 1156.46,683.619 1157.02,683.619 1157.58,683.619 1158.14,683.619 1158.7,683.619 1159.26,683.619 1159.82,683.619 1160.38,683.619 1160.94,683.619 1161.5,683.619 1162.05,683.619 1162.61,683.619 1163.17,683.619 1163.73,683.619 1164.29,683.619 1164.85,683.619 1165.41,683.619 1165.97,683.619 1166.53,683.619 1167.09,683.619 1167.65,683.619 1168.21,683.619 1168.77,683.619 1169.33,683.619 1169.88,683.619 1170.44,683.619 1171,683.619 1171.56,683.619 1172.12,683.619 1172.68,683.619 1173.24,683.619 1173.8,683.619 1174.36,683.619 1174.92,683.619 1175.48,683.619 1176.04,683.619 1176.6,683.619 1177.15,683.619 1177.71,683.619 1178.27,683.619 1178.83,683.619 1179.39,683.619 1179.95,683.619 1180.51,683.619 1181.07,683.619 1181.63,683.619 1182.19,683.619 1182.75,683.619 1183.31,683.619 1183.87,683.619 1184.43,683.619 1184.98,683.619 1185.54,683.619 1186.1,683.619 1186.66,683.619 1187.22,683.619 1187.78,683.619 1188.34,683.619 1188.9,683.619 1189.46,683.619 1190.02,683.619 1190.58,683.619 1191.14,683.619 1191.7,683.619 1192.25,683.619 1192.81,683.619 1193.37,683.619 1193.93,683.619 1194.49,683.619 1195.05,683.619 1195.61,683.619 1196.17,683.619 1196.73,683.619 1197.29,683.619 1197.85,683.619 1198.41,683.619 1198.97,683.619 1199.52,683.619 1200.08,683.619 1200.64,683.619 1201.2,683.619 1201.76,683.619 1202.32,683.619 1202.88,683.619 1203.44,683.619 1204,683.619 1204.56,683.619 1205.12,683.619 1205.68,683.619 1206.24,683.619 1206.8,683.619 1207.35,683.619 1207.91,683.619 1208.47,683.619 1209.03,683.619 1209.59,683.619 1210.15,683.619 1210.71,683.619 1211.27,683.619 1211.83,683.619 1212.39,683.619 1212.95,683.619 1213.51,683.619 1214.07,683.619 1214.62,683.619 1215.18,683.619 1215.74,683.619 1216.3,683.619 1216.86,683.619 1217.42,683.619 1217.98,683.619 1218.54,683.619 1219.1,683.619 1219.66,683.619 1220.22,683.619 1220.78,683.619 1221.34,683.619 1221.89,683.619 1222.45,683.619 1223.01,683.619 1223.57,683.619 1224.13,683.619 1224.69,683.619 1225.25,683.619 1225.81,683.619 1226.37,683.619 1226.93,683.619 1227.49,683.619 1228.05,683.619 1228.61,683.619 1229.17,683.619 1229.72,683.619 1230.28,683.619 1230.84,683.619 1231.4,683.619 1231.96,683.619 1232.52,683.619 1233.08,683.619 1233.64,683.619 1234.2,683.619 1234.76,683.619 1235.32,683.619 1235.88,683.619 1236.44,683.619 1236.99,683.619 1237.55,683.619 1238.11,683.619 1238.67,683.619 1239.23,683.619 1239.79,683.619 1240.35,683.619 1240.91,683.619 1241.47,683.619 1242.03,683.619 1242.59,683.619 1243.15,683.619 1243.71,683.619 1244.26,683.619 1244.82,683.619 1245.38,683.619 1245.94,683.619 1246.5,683.619 1247.06,683.619 1247.62,683.619 1248.18,683.619 1248.74,683.619 1249.3,683.619 1249.86,683.619 1250.42,683.619 1250.98,683.619 1251.54,683.619 1252.09,683.619 1252.65,683.619 1253.21,683.619 1253.77,683.619 1254.33,683.619 1254.89,683.619 1255.45,683.619 1256.01,683.619 1256.57,683.619 1257.13,683.619 1257.69,683.619 1258.25,683.619 1258.81,683.619 1259.36,683.619 1259.92,683.619 1260.48,683.619 1261.04,683.619 1261.6,683.619 1262.16,683.619 1262.72,683.619 1263.28,683.619 1263.84,683.619 1264.4,683.619 1264.96,683.619 1265.52,683.619 1266.08,683.619 1266.63,683.619 1267.19,683.619 1267.75,683.619 1268.31,683.619 1268.87,683.619 1269.43,683.619 1269.99,683.619 1270.55,683.619 1271.11,683.619 1271.67,683.619 1272.23,683.619 1272.79,683.619 1273.35,683.619 1273.91,683.619 1274.46,683.619 1275.02,683.619 1275.58,683.619 1276.14,683.619 1276.7,683.619 1277.26,683.619 1277.82,683.619 1278.38,683.619 1278.94,683.619 1279.5,683.619 1280.06,683.619 1280.62,683.619 1281.18,683.619 1281.73,683.619 1282.29,683.619 1282.85,683.619 1283.41,683.619 1283.97,683.619 1284.53,683.619 1285.09,683.619 1285.65,683.619 1286.21,683.619 1286.77,683.619 1287.33,683.619 1287.89,683.619 1288.45,683.619 1289,683.619 1289.56,683.619 1290.12,683.619 1290.68,683.619 1291.24,683.619 1291.8,683.619 1292.36,683.619 1292.92,683.619 1293.48,683.619 1294.04,683.619 1294.6,683.619 1295.16,683.619 1295.72,683.619 1296.28,683.619 1296.83,683.619 1297.39,683.619 1297.95,683.619 1298.51,683.619 1299.07,683.619 1299.63,683.619 1300.19,683.619 1300.75,683.619 1301.31,683.619 1301.87,683.619 1302.43,683.619 1302.99,683.619 1303.55,683.619 1304.1,683.619 1304.66,683.619 1305.22,683.619 1305.78,683.619 1306.34,683.619 1306.9,683.619 1307.46,683.619 1308.02,683.619 1308.58,683.619 1309.14,683.619 1309.7,683.619 1310.26,683.619 1310.82,683.619 1311.38,683.619 1311.93,683.619 1312.49,683.619 1313.05,683.619 1313.61,683.619 1314.17,683.619 1314.73,683.619 1315.29,683.619 1315.85,683.619 1316.41,683.619 1316.97,683.619 1317.53,683.619 1318.09,683.619 1318.65,683.619 1319.2,683.619 1319.76,683.619 1320.32,683.619 1320.88,683.619 1321.44,683.619 1322,683.619 1322.56,683.619 1323.12,683.619 1323.68,683.619 1324.24,683.619 1324.8,683.619 1325.36,683.619 1325.92,683.619 1326.47,683.619 1327.03,683.619 1327.59,683.619 1328.15,683.619 1328.71,683.619 1329.27,683.619 1329.83,683.619 1330.39,683.619 1330.95,683.619 1331.51,683.619 1332.07,683.619 1332.63,683.619 1333.19,683.619 1333.75,683.619 1334.3,683.619 1334.86,683.619 1335.42,683.619 1335.98,683.619 1336.54,683.619 1337.1,683.619 1337.66,683.619 1338.22,683.619 1338.78,683.619 1339.34,683.619 1339.9,683.619 1340.46,683.619 1341.02,683.619 1341.57,683.619 1342.13,683.619 1342.69,683.619 1343.25,683.619 1343.81,683.619 1344.37,683.619 1344.93,683.619 1345.49,683.619 1346.05,683.619 1346.61,683.619 1347.17,683.619 1347.73,683.619 1348.29,683.619 1348.84,683.619 1349.4,683.619 1349.96,683.619 1350.52,683.619 1351.08,683.619 1351.64,683.619 1352.2,683.619 1352.76,683.619 1353.32,683.619 1353.88,683.619 1354.44,683.619 1355,683.619 1355.56,683.619 1356.12,683.619 1356.67,683.619 1357.23,683.619 1357.79,683.619 1358.35,683.619 1358.91,683.619 1359.47,683.619 1360.03,683.619 1360.59,683.619 1361.15,683.619 1361.71,683.619 1362.27,683.619 1362.83,683.619 1363.39,683.619 1363.94,683.619 1364.5,683.619 1365.06,683.619 1365.62,683.619 1366.18,683.619 1366.74,683.619 1367.3,683.619 1367.86,683.619 1368.42,683.619 1368.98,683.619 1369.54,683.619 1370.1,683.619 1370.66,683.619 1371.21,683.619 1371.77,683.619 1372.33,683.619 1372.89,683.619 1373.45,683.619 1374.01,683.619 1374.57,683.619 1375.13,683.619 1375.69,683.619 1376.25,683.619 1376.81,683.619 1377.37,683.619 1377.93,683.619 1378.49,683.619 1379.04,683.619 1379.6,683.619 1380.16,683.619 1380.72,683.619 1381.28,683.619 1381.84,683.619 1382.4,683.619 1382.96,683.619 1383.52,683.619 1384.08,683.619 1384.64,683.619 1385.2,683.619 1385.76,683.619 1386.31,683.619 1386.87,683.619 1387.43,683.619 1387.99,683.619 1388.55,683.619 1389.11,683.619 1389.67,683.619 1390.23,683.619 1390.79,683.619 1391.35,683.619 1391.91,683.619 1392.47,683.619 1393.03,683.619 1393.58,683.619 1394.14,683.619 1394.7,683.619 1395.26,683.619 1395.82,683.619 1396.38,683.619 1396.94,683.619 1397.5,683.619 1398.06,683.619 1398.62,683.619 1399.18,683.619 1399.74,683.619 1400.3,683.619 1400.86,683.619 1401.41,683.619 1401.97,683.619 1402.53,683.619 1403.09,683.619 1403.65,683.619 1404.21,683.619 1404.77,683.619 1405.33,683.619 1405.89,683.619 1406.45,683.619 1407.01,683.619 1407.57,683.619 1408.13,683.619 1408.68,683.619 1409.24,683.619 1409.8,683.619 1410.36,683.619 1410.92,683.619 1411.48,683.619 1412.04,683.619 1412.6,683.619 1413.16,683.619 1413.72,683.619 1414.28,683.619 1414.84,683.619 1415.4,683.619 1415.95,683.619 1416.51,683.619 1417.07,683.619 1417.63,683.619 1418.19,683.619 1418.75,683.619 1419.31,683.619 1419.87,683.619 1420.43,683.619 1420.99,683.619 1421.55,683.619 1422.11,683.619 1422.67,683.619 1423.23,683.619 1423.78,683.619 1424.34,683.619 1424.9,683.619 1425.46,683.619 1426.02,683.619 1426.58,683.619 1427.14,683.619 1427.7,683.619 1428.26,683.619 1428.82,683.619 1429.38,683.619 1429.94,683.619 1430.5,683.619 1431.05,683.619 1431.61,683.619 1432.17,683.619 1432.73,683.619 1433.29,683.619 1433.85,683.619 1434.41,683.619 1434.97,683.619 1435.53,683.619 1436.09,683.619 1436.65,683.619 1437.21,683.619 1437.77,683.619 1438.33,683.619 1438.88,683.619 1439.44,683.619 1440,683.619 1440.56,683.619 1441.12,683.619 1441.68,683.619 1442.24,683.619 1442.8,683.619 1443.36,683.619 1443.92,683.619 1444.48,683.619 1445.04,683.619 1445.6,683.619 1446.15,683.619 1446.71,683.619 1447.27,683.619 1447.83,683.619 1448.39,683.619 1448.95,683.619 1449.51,683.619 1450.07,683.619 1450.63,683.619 1451.19,683.619 1451.75,683.619 1452.31,683.619 1452.87,683.619 1453.42,683.619 1453.98,683.619 1454.54,683.619 1455.1,683.619 1455.66,683.619 1456.22,683.619 1456.78,683.619 1457.34,683.619 1457.9,683.619 1458.46,683.619 1459.02,683.619 1459.58,683.619 1460.14,683.619 1460.7,683.619 1461.25,683.619 1461.81,683.619 1462.37,683.619 1462.93,683.619 1463.49,683.619 1464.05,683.619 1464.61,683.619 1465.17,683.619 1465.73,683.619 1466.29,683.619 1466.85,683.619 1467.41,683.619 1467.97,683.619 1468.52,683.619 1469.08,683.619 1469.64,683.619 1470.2,683.619 1470.76,683.619 1471.32,683.619 1471.88,683.619 1472.44,683.619 1473,683.619 1473.56,683.619 1474.12,683.619 1474.68,683.619 1475.24,683.619 1475.79,683.619 1476.35,683.619 1476.91,683.619 1477.47,683.619 1478.03,683.619 1478.59,683.619 1479.15,683.619 1479.71,683.619 1480.27,683.619 1480.83,683.619 1481.39,683.619 1481.95,683.619 1482.51,683.619 1483.07,683.619 1483.62,683.619 1484.18,683.619 1484.74,683.619 1485.3,683.619 1485.86,683.619 1486.42,683.619 1486.98,683.619 1487.54,683.619 1488.1,683.619 1488.66,683.619 1489.22,683.619 1489.78,683.619 1490.34,683.619 1490.89,683.619 1491.45,683.619 1492.01,683.619 1492.57,683.619 1493.13,683.619 1493.69,683.619 1494.25,683.619 1494.81,683.619 1495.37,683.619 1495.93,683.619 1496.49,683.619 1497.05,683.619 1497.61,683.619 1498.16,683.619 1498.72,683.619 1499.28,683.619 1499.84,683.619 1500.4,683.619 1500.96,683.619 1501.52,683.619 1502.08,683.619 1502.64,683.619 1503.2,683.619 1503.76,683.619 1504.32,683.619 1504.88,683.619 1505.44,683.619 1505.99,683.619 1506.55,683.619 1507.11,683.619 1507.67,683.619 1508.23,683.619 1508.79,683.619 1509.35,683.619 1509.91,683.619 1510.47,683.619 1511.03,683.619 1511.59,683.619 1512.15,683.619 1512.71,683.619 1513.26,683.619 1513.82,683.619 1514.38,683.619 1514.94,683.619 1515.5,683.619 1516.06,683.619 1516.62,683.619 1517.18,683.619 1517.74,683.619 1518.3,683.619 1518.86,683.619 1519.42,683.619 1519.98,683.619 1520.53,683.619 1521.09,683.619 1521.65,683.619 1522.21,683.619 1522.77,683.619 1523.33,683.619 1523.89,683.619 1524.45,683.619 1525.01,683.619 1525.57,683.619 1526.13,683.619 1526.69,683.619 1527.25,683.619 1527.81,683.619 1528.36,683.619 1528.92,683.619 1529.48,683.619 1530.04,683.619 1530.6,683.619 1531.16,683.619 1531.72,683.619 1532.28,683.619 1532.84,683.619 1533.4,683.619 1533.96,683.619 1534.52,683.619 1535.08,683.619 1535.63,683.619 1536.19,683.619 1536.75,683.619 1537.31,683.619 1537.87,683.619 1538.43,683.619 1538.99,683.619 1539.55,683.619 1540.11,683.619 1540.67,683.619 1541.23,683.619 1541.79,683.619 1542.35,683.619 1542.9,683.619 1543.46,683.619 1544.02,683.619 1544.58,683.619 1545.14,683.619 1545.7,683.619 1546.26,683.619 1546.82,683.619 1547.38,683.619 1547.94,683.619 1548.5,683.619 1549.06,683.619 1549.62,683.619 1550.18,683.619 1550.73,683.619 1551.29,683.619 1551.85,683.619 1552.41,683.619 1552.97,683.619 1553.53,683.619 1554.09,683.619 1554.65,683.619 1555.21,683.619 1555.77,683.619 1556.33,683.619 1556.89,683.619 1557.45,683.619 1558,683.619 1558.56,683.619 1559.12,683.619 1559.68,683.619 1560.24,683.619 1560.8,683.619 1561.36,683.619 1561.92,683.619 1562.48,683.619 1563.04,683.619 1563.6,683.619 1564.16,683.619 1564.72,683.619 1565.28,683.619 1565.83,683.619 1566.39,683.619 1566.95,683.619 1567.51,683.619 1568.07,683.619 1568.63,683.619 1569.19,683.619 1569.75,683.619 1570.31,683.619 1570.87,683.619 1571.43,683.619 1571.99,683.619 1572.55,683.619 1573.1,683.619 1573.66,683.619 1574.22,683.619 1574.78,683.619 1575.34,683.619 1575.9,683.619 1576.46,683.619 1577.02,683.619 1577.58,683.619 1578.14,683.619 1578.7,683.619 1579.26,683.619 1579.82,683.619 1580.37,683.619 1580.93,683.619 1581.49,683.619 1582.05,683.619 1582.61,683.619 1583.17,683.619 1583.73,683.619 1584.29,683.619 1584.85,683.619 1585.41,683.619 1585.97,683.619 1586.53,683.619 1587.09,683.619 1587.65,683.619 1588.2,683.619 1588.76,683.619 1589.32,683.619 1589.88,683.619 1590.44,683.619 1591,683.619 1591.56,683.619 1592.12,683.619 1592.68,683.619 1593.24,683.619 1593.8,683.619 1594.36,683.619 1594.92,683.619 1595.47,683.619 1596.03,683.619 1596.59,683.619 1597.15,683.619 1597.71,683.619 1598.27,683.619 1598.83,683.619 1599.39,683.619 1599.95,683.619 1600.51,683.619 1601.07,683.619 1601.63,683.619 1602.19,683.619 1602.74,683.619 1603.3,683.619 1603.86,683.619 1604.42,683.619 1604.98,683.619 1605.54,683.619 1606.1,683.619 1606.66,683.619 1607.22,683.619 1607.78,683.619 1608.34,683.619 1608.9,683.619 1609.46,683.619 1610.02,683.619 1610.57,683.619 1611.13,683.619 1611.69,683.619 1612.25,683.619 1612.81,683.619 1613.37,683.619 1613.93,683.619 1614.49,683.619 1615.05,683.619 1615.61,683.619 1616.17,683.619 1616.73,683.619 1617.29,683.619 1617.84,683.619 1618.4,683.619 1618.96,683.619 1619.52,683.619 1620.08,683.619 1620.64,683.619 1621.2,683.619 1621.76,683.619 1622.32,683.619 1622.88,683.619 1623.44,683.619 1624,683.619 1624.56,683.619 1625.11,683.619 1625.67,683.619 1626.23,683.619 1626.79,683.619 1627.35,683.619 1627.91,683.619 1628.47,683.619 1629.03,683.619 1629.59,683.619 1630.15,683.619 1630.71,683.619 1631.27,683.619 1631.83,683.619 1632.39,683.619 1632.94,683.619 1633.5,683.619 1634.06,683.619 1634.62,683.619 1635.18,683.619 1635.74,683.619 1636.3,683.619 1636.86,683.619 1637.42,683.619 1637.98,683.619 1638.54,683.619 1639.1,683.619 1639.66,683.619 1640.21,683.619 1640.77,683.619 1641.33,683.619 1641.89,683.619 1642.45,683.619 1643.01,683.619 1643.57,683.619 1644.13,683.619 1644.69,683.619 1645.25,683.619 1645.81,683.619 1646.37,683.619 1646.93,683.619 1647.48,683.619 1648.04,683.619 1648.6,683.619 1649.16,683.619 1649.72,683.619 1650.28,683.619 1650.84,683.619 1651.4,683.619 1651.96,683.619 1652.52,683.619 1653.08,683.619 1653.64,683.619 1654.2,683.619 1654.76,683.619 1655.31,683.619 1655.87,683.619 1656.43,683.619 1656.99,683.619 1657.55,683.619 1658.11,683.619 1658.67,683.619 1659.23,683.619 1659.79,683.619 1660.35,683.619 1660.91,683.619 1661.47,683.619 1662.03,683.619 1662.58,683.619 1663.14,683.619 1663.7,683.619 1664.26,683.619 1664.82,683.619 1665.38,683.619 1665.94,683.619 1666.5,683.619 1667.06,683.619 1667.62,683.619 1668.18,683.619 1668.74,683.619 1669.3,683.619 1669.85,683.619 1670.41,683.619 1670.97,683.619 1671.53,683.619 1672.09,683.619 1672.65,683.619 1673.21,683.619 1673.77,683.619 1674.33,683.619 1674.89,683.619 1675.45,683.619 1676.01,683.619 1676.57,683.619 1677.13,683.619 1677.68,683.619 1678.24,683.619 1678.8,683.619 1679.36,683.619 1679.92,683.619 1680.48,683.619 1681.04,683.619 1681.6,683.619 1682.16,683.619 1682.72,683.619 1683.28,683.619 1683.84,683.619 1684.4,683.619 1684.95,683.619 1685.51,683.619 1686.07,683.619 1686.63,683.619 1687.19,683.619 1687.75,683.619 1688.31,683.619 1688.87,683.619 1689.43,683.619 1689.99,683.619 1690.55,683.619 1691.11,683.619 1691.67,683.619 1692.23,683.619 1692.78,683.619 1693.34,683.619 1693.9,683.619 1694.46,683.619 1695.02,683.619 1695.58,683.619 1696.14,683.619 1696.7,683.619 1697.26,683.619 1697.82,683.619 1698.38,683.619 1698.94,683.619 1699.5,683.619 1700.05,683.619 1700.61,683.619 1701.17,683.619 1701.73,683.619 1702.29,683.619 1702.85,683.619 1703.41,683.619 1703.97,683.619 1704.53,683.619 1705.09,683.619 1705.65,683.619 1706.21,683.619 1706.77,683.619 1707.32,683.619 1707.88,683.619 1708.44,683.619 1709,683.619 1709.56,683.619 1710.12,683.619 1710.68,683.619 1711.24,683.619 1711.8,683.619 1712.36,683.619 1712.92,683.619 1713.48,683.619 1714.04,683.619 1714.6,683.619 1715.15,683.619 1715.71,683.619 1716.27,683.619 1716.83,683.619 1717.39,683.619 1717.95,683.619 1718.51,683.619 1719.07,683.619 1719.63,683.619 1720.19,683.619 1720.75,683.619 1721.31,683.619 1721.87,683.619 1722.42,683.619 1722.98,683.619 1723.54,683.619 1724.1,683.619 1724.66,683.619 1725.22,683.619 1725.78,683.619 1726.34,683.619 1726.9,683.619 1727.46,683.619 1728.02,683.619 1728.58,683.619 1729.14,683.619 1729.69,683.619 1730.25,683.619 1730.81,683.619 1731.37,683.619 1731.93,683.619 1732.49,683.619 1733.05,683.619 1733.61,683.619 1734.17,683.619 1734.73,683.619 1735.29,683.619 1735.85,683.619 1736.41,683.619 1736.97,683.619 1737.52,683.619 1738.08,683.619 1738.64,683.619 1739.2,683.619 1739.76,683.619 1740.32,683.619 1740.88,683.619 1741.44,683.619 1742,683.619 1742.56,683.619 1743.12,683.619 1743.68,683.619 1744.24,683.619 1744.79,683.619 1745.35,683.619 1745.91,683.619 1746.47,683.619 1747.03,683.619 1747.59,683.619 1748.15,683.619 1748.71,683.619 1749.27,683.619 1749.83,683.619 1750.39,683.619 1750.95,683.619 1751.51,683.619 1752.06,683.619 1752.62,683.619 1753.18,683.619 1753.74,683.619 1754.3,683.619 1754.86,683.619 1755.42,683.619 1755.98,683.619 1756.54,683.619 1757.1,683.619 1757.66,683.619 1758.22,683.619 1758.78,683.619 1759.34,683.619 1759.89,683.619 1760.45,683.619 1761.01,683.619 1761.57,683.619 1762.13,683.619 1762.69,683.619 1763.25,683.619 1763.81,683.619 1764.37,683.619 1764.93,683.619 1765.49,683.619 1766.05,683.619 1766.61,683.619 1767.16,683.619 1767.72,683.619 1768.28,683.619 1768.84,683.619 1769.4,683.619 1769.96,683.619 1770.52,683.619 1771.08,683.619 1771.64,683.619 1772.2,683.619 1772.76,683.619 1773.32,683.619 1773.88,683.619 1774.43,683.619 1774.99,683.619 1775.55,683.619 1776.11,683.619 1776.67,683.619 1777.23,683.619 1777.79,683.619 1778.35,683.619 1778.91,683.619 1779.47,683.619 1780.03,683.619 1780.59,683.619 1781.15,683.619 1781.71,683.619 1782.26,683.619 1782.82,683.619 1783.38,683.619 1783.94,683.619 1784.5,683.619 1785.06,683.619 1785.62,683.619 1786.18,683.619 1786.74,683.619 1787.3,683.619 1787.86,683.619 1788.42,683.619 1788.98,683.619 1789.53,683.619 1790.09,683.619 1790.65,683.619 1791.21,683.619 1791.77,683.619 1792.33,683.619 1792.89,683.619 1793.45,683.619 1794.01,683.619 1794.57,683.619 1795.13,683.619 1795.69,683.619 1796.25,683.619 1796.8,683.619 1797.36,683.619 1797.92,683.619 1798.48,683.619 1799.04,683.619 1799.6,683.619 1800.16,683.619 1800.72,683.619 1801.28,683.619 1801.84,683.619 1802.4,683.619 1802.96,683.619 1803.52,683.619 1804.08,683.619 1804.63,683.619 1805.19,683.619 1805.75,683.619 1806.31,683.619 1806.87,683.619 1807.43,683.619 1807.99,683.619 1808.55,683.619 1809.11,683.619 1809.67,683.619 1810.23,683.619 1810.79,683.619 1811.35,683.619 1811.9,683.619 1812.46,683.619 1813.02,683.619 1813.58,683.619 1814.14,683.619 1814.7,683.619 1815.26,683.619 1815.82,683.619 1816.38,683.619 1816.94,683.619 1817.5,683.619 1818.06,683.619 1818.62,683.619 1819.18,683.619 1819.73,683.619 1820.29,683.619 1820.85,683.619 1821.41,683.619 1821.97,683.619 1822.53,683.619 1823.09,683.619 1823.65,683.619 1824.21,683.619 1824.77,683.619 1825.33,683.619 1825.89,683.619 1826.45,683.619 1827,683.619 1827.56,683.619 1828.12,683.619 1828.68,683.619 1829.24,683.619 1829.8,683.619 1830.36,683.619 1830.92,683.619 1831.48,683.619 1832.04,683.619 1832.6,683.619 1833.16,683.619 1833.72,683.619 1834.27,683.619 1834.83,683.619 1835.39,683.619 1835.95,683.619 1836.51,683.619 1837.07,683.619 1837.63,683.619 1838.19,683.619 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.028295222530698 ± 0.024843751331797392\nProjected Energy: -4.015257285796151 ± (0.004671355085524631, 0.004775223350847568)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=df.dτ[end],\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.469524</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4537e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.065e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.378e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.763e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.116e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.646e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition : applied boundray condition \n\nBoundary conditions\n\nFor π-twisted -> :twisted\nFor hard wall -> :hard_wall\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{boundary_condition}, Tuple{SingleComponentFockAddress, Any, Val{boundary_condition}}} where boundary_condition","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen, Val(boundary_condition))\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic, pi-twisted and hard-wall.\n\nBoundary conditions\n\nFor π-twisted -> :twisted\nFor hard wall -> :hard_wall\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, Val(true),Val(false))\n(BoseFS{2,4}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, Val(false),Val(true))\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
